; ModuleID = 'c-format.c'
source_filename = "c-format.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type opaque
%struct.function = type opaque
%struct.format_kind_info = type { i8*, %struct.format_length_info*, %struct.format_char_info*, i8*, i8*, %struct.format_flag_spec*, %struct.format_flag_pair*, i32, i32, i32, i32, i32, i32, i32, %union.tree_node**, %union.tree_node** }
%struct.format_length_info = type { i8*, i32, i32, i8*, i32, i32, i32 }
%struct.format_char_info = type { i8*, i32, i32, [12 x %struct.format_type_detail], i8*, i8*, %struct.format_char_info* }
%struct.format_type_detail = type { i32, i8*, %union.tree_node** }
%struct.format_flag_spec = type { i32, i32, i32, i8*, i8*, i32 }
%struct.format_flag_pair = type { i32, i32, i32, i32 }
%struct.target_ovr_attr = type { i8*, i8* }
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type { %struct.pretty_print_info*, [12 x i32], i8, i8, [870 x i32], i8, i8, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (i8*, [1 x %struct.__va_list_tag]*)*, %union.tree_node*, %struct.line_map*, i32, i8 }
%struct.pretty_print_info = type { %struct.output_buffer*, i8*, i32, i32, i32, %struct.pp_wrapping_mode_t, i8 (%struct.pretty_print_info*, %struct.text_info*, i8*, i32, i8, i8, i8)*, i8, i8, i8 }
%struct.output_buffer = type { %struct.obstack, %struct.obstack, %struct.obstack*, %struct.chunk_info*, %struct._IO_FILE*, i32, [128 x i8] }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.chunk_info = type { %struct.chunk_info*, [60 x i8*] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.pp_wrapping_mode_t = type { i32, i32 }
%struct.text_info = type { i8*, [1 x %struct.__va_list_tag]*, i32, i32*, %union.tree_node** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.diagnostic_info = type { %struct.text_info, i32, i32, %union.tree_node*, i32, i32 }
%struct.line_map = type { i8*, i32, i32, i32, i8, i8, i8 }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.gimple_seq_d = type opaque
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.function_format_info = type { i32, i64, i64 }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i8*, i32, i32 }
%struct.format_check_context = type { %struct.format_check_results*, %struct.function_format_info*, %union.tree_node* }
%struct.format_check_results = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.alloc_pool_def = type { i8*, i64, %struct.alloc_pool_list_def*, i8*, i64, i64, i64, i64, %struct.alloc_pool_list_def*, i64, i64 }
%struct.alloc_pool_list_def = type { %struct.alloc_pool_list_def* }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_string = type { %struct.tree_common, i32, [1 x i8] }
%struct.format_wanted_type = type { %union.tree_node*, i8*, i32, i32, i32, i32, i32, i8*, %union.tree_node*, i32, %struct.format_wanted_type* }

@warn_format = external dso_local global i32, align 4
@warn_format_extra_args = external dso_local global i32, align 4
@warn_format_zero_length = external dso_local global i32, align 4
@warn_format_contains_nul = external dso_local global i32, align 4
@warn_format_nonliteral = external dso_local global i32, align 4
@warn_format_security = external dso_local global i32, align 4
@warn_format_y2k = external dso_local global i32, align 4
@warn_nonnull = external dso_local global i32, align 4
@.str = private unnamed_addr constant [41 x i8] c"format string has invalid operand number\00", align 1
@integer_types = external dso_local global [11 x %union.tree_node*], align 16
@.str.1 = private unnamed_addr constant [37 x i8] c"function does not return string type\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"format\00", align 1
@warn_missing_format_attribute = external dso_local global i32, align 4
@format_types = internal global %struct.format_kind_info* getelementptr inbounds ([10 x %struct.format_kind_info], [10 x %struct.format_kind_info]* @format_types_orig, i32 0, i32 0), align 8, !dbg !0
@current_function_decl = external dso_local global %union.tree_node*, align 8
@.str.3 = private unnamed_addr constant [62 x i8] c"function might be possible candidate for %qs format attribute\00", align 1
@.str.4 = private unnamed_addr constant [36 x i8] c"args to be formatted is not %<...%>\00", align 1
@.str.5 = private unnamed_addr constant [41 x i8] c"strftime formats cannot format arguments\00", align 1
@dynamic_format_types = internal global %struct.format_kind_info* null, align 8, !dbg !2115
@format_types_orig = internal constant [10 x %struct.format_kind_info] [%struct.format_kind_info { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i32 0, i32 0), %struct.format_length_info* getelementptr inbounds ([11 x %struct.format_length_info], [11 x %struct.format_length_info]* @printf_length_specs, i32 0, i32 0), %struct.format_char_info* getelementptr inbounds ([15 x %struct.format_char_info], [15 x %struct.format_char_info]* bitcast (<{ %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }>* @print_char_table to [15 x %struct.format_char_info]*), i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.77, i32 0, i32 0), i8* null, %struct.format_flag_spec* getelementptr inbounds ([11 x %struct.format_flag_spec], [11 x %struct.format_flag_spec]* @printf_flag_specs, i32 0, i32 0), %struct.format_flag_pair* getelementptr inbounds ([4 x %struct.format_flag_pair], [4 x %struct.format_flag_pair]* @printf_flag_pairs, i32 0, i32 0), i32 89, i32 119, i32 0, i32 112, i32 0, i32 76, i32 0, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, %struct.format_kind_info { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.78, i32 0, i32 0), %struct.format_length_info* getelementptr inbounds ([3 x %struct.format_length_info], [3 x %struct.format_length_info]* @asm_fprintf_length_specs, i32 0, i32 0), %struct.format_char_info* getelementptr inbounds ([13 x %struct.format_char_info], [13 x %struct.format_char_info]* bitcast (<{ %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }>* @asm_fprintf_char_table to [13 x %struct.format_char_info]*), i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.79, i32 0, i32 0), i8* null, %struct.format_flag_spec* getelementptr inbounds ([9 x %struct.format_flag_spec], [9 x %struct.format_flag_spec]* @asm_fprintf_flag_specs, i32 0, i32 0), %struct.format_flag_pair* getelementptr inbounds ([4 x %struct.format_flag_pair], [4 x %struct.format_flag_pair]* @asm_fprintf_flag_pairs, i32 0, i32 0), i32 65, i32 119, i32 0, i32 112, i32 0, i32 76, i32 0, %union.tree_node** null, %union.tree_node** null }, %struct.format_kind_info { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.80, i32 0, i32 0), %struct.format_length_info* getelementptr inbounds ([3 x %struct.format_length_info], [3 x %struct.format_length_info]* @gcc_diag_length_specs, i32 0, i32 0), %struct.format_char_info* getelementptr inbounds ([10 x %struct.format_char_info], [10 x %struct.format_char_info]* bitcast (<{ %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }>* @gcc_diag_char_table to [10 x %struct.format_char_info]*), i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.81, i32 0, i32 0), i8* null, %struct.format_flag_spec* getelementptr inbounds ([5 x %struct.format_flag_spec], [5 x %struct.format_flag_spec]* @gcc_diag_flag_specs, i32 0, i32 0), %struct.format_flag_pair* getelementptr inbounds ([1 x %struct.format_flag_pair], [1 x %struct.format_flag_pair]* @gcc_diag_flag_pairs, i32 0, i32 0), i32 1, i32 0, i32 0, i32 112, i32 0, i32 76, i32 0, %union.tree_node** null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, %struct.format_kind_info { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.82, i32 0, i32 0), %struct.format_length_info* getelementptr inbounds ([3 x %struct.format_length_info], [3 x %struct.format_length_info]* @gcc_diag_length_specs, i32 0, i32 0), %struct.format_char_info* getelementptr inbounds ([10 x %struct.format_char_info], [10 x %struct.format_char_info]* bitcast (<{ %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }>* @gcc_tdiag_char_table to [10 x %struct.format_char_info]*), i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.81, i32 0, i32 0), i8* null, %struct.format_flag_spec* getelementptr inbounds ([5 x %struct.format_flag_spec], [5 x %struct.format_flag_spec]* @gcc_diag_flag_specs, i32 0, i32 0), %struct.format_flag_pair* getelementptr inbounds ([1 x %struct.format_flag_pair], [1 x %struct.format_flag_pair]* @gcc_diag_flag_pairs, i32 0, i32 0), i32 1, i32 0, i32 0, i32 112, i32 0, i32 76, i32 0, %union.tree_node** null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, %struct.format_kind_info { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.83, i32 0, i32 0), %struct.format_length_info* getelementptr inbounds ([3 x %struct.format_length_info], [3 x %struct.format_length_info]* @gcc_diag_length_specs, i32 0, i32 0), %struct.format_char_info* getelementptr inbounds ([10 x %struct.format_char_info], [10 x %struct.format_char_info]* bitcast (<{ %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }>* @gcc_cdiag_char_table to [10 x %struct.format_char_info]*), i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.81, i32 0, i32 0), i8* null, %struct.format_flag_spec* getelementptr inbounds ([5 x %struct.format_flag_spec], [5 x %struct.format_flag_spec]* @gcc_diag_flag_specs, i32 0, i32 0), %struct.format_flag_pair* getelementptr inbounds ([1 x %struct.format_flag_pair], [1 x %struct.format_flag_pair]* @gcc_diag_flag_pairs, i32 0, i32 0), i32 1, i32 0, i32 0, i32 112, i32 0, i32 76, i32 0, %union.tree_node** null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, %struct.format_kind_info { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.84, i32 0, i32 0), %struct.format_length_info* getelementptr inbounds ([3 x %struct.format_length_info], [3 x %struct.format_length_info]* @gcc_diag_length_specs, i32 0, i32 0), %struct.format_char_info* getelementptr inbounds ([11 x %struct.format_char_info], [11 x %struct.format_char_info]* bitcast (<{ %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }>* @gcc_cxxdiag_char_table to [11 x %struct.format_char_info]*), i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.85, i32 0, i32 0), i8* null, %struct.format_flag_spec* getelementptr inbounds ([6 x %struct.format_flag_spec], [6 x %struct.format_flag_spec]* @gcc_cxxdiag_flag_specs, i32 0, i32 0), %struct.format_flag_pair* getelementptr inbounds ([1 x %struct.format_flag_pair], [1 x %struct.format_flag_pair]* @gcc_diag_flag_pairs, i32 0, i32 0), i32 1, i32 0, i32 0, i32 112, i32 0, i32 76, i32 0, %union.tree_node** null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, %struct.format_kind_info { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.86, i32 0, i32 0), %struct.format_length_info* getelementptr inbounds ([2 x %struct.format_length_info], [2 x %struct.format_length_info]* @gcc_gfc_length_specs, i32 0, i32 0), %struct.format_char_info* getelementptr inbounds ([7 x %struct.format_char_info], [7 x %struct.format_char_info]* bitcast (<{ { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }>* @gcc_gfc_char_table to [7 x %struct.format_char_info]*), i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* null, %struct.format_flag_spec* null, %struct.format_flag_pair* getelementptr inbounds ([1 x %struct.format_flag_pair], [1 x %struct.format_flag_pair]* @gcc_gfc_flag_pairs, i32 0, i32 0), i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, %union.tree_node** null, %union.tree_node** null }, %struct.format_kind_info { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16, i32 0, i32 0), %struct.format_length_info* getelementptr inbounds ([10 x %struct.format_length_info], [10 x %struct.format_length_info]* @scanf_length_specs, i32 0, i32 0), %struct.format_char_info* getelementptr inbounds ([14 x %struct.format_char_info], [14 x %struct.format_char_info]* bitcast (<{ %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }>* @scan_char_table to [14 x %struct.format_char_info]*), i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.88, i32 0, i32 0), i8* null, %struct.format_flag_spec* getelementptr inbounds ([8 x %struct.format_flag_spec], [8 x %struct.format_flag_spec]* @scanf_flag_specs, i32 0, i32 0), %struct.format_flag_pair* getelementptr inbounds ([3 x %struct.format_flag_pair], [3 x %struct.format_flag_pair]* @scanf_flag_pairs, i32 0, i32 0), i32 179, i32 119, i32 0, i32 0, i32 42, i32 76, i32 109, %union.tree_node** null, %union.tree_node** null }, %struct.format_kind_info { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18, i32 0, i32 0), %struct.format_length_info* null, %struct.format_char_info* getelementptr inbounds ([20 x %struct.format_char_info], [20 x %struct.format_char_info]* @time_char_table, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.89, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.90, i32 0, i32 0), %struct.format_flag_spec* getelementptr inbounds ([10 x %struct.format_flag_spec], [10 x %struct.format_flag_spec]* @strftime_flag_specs, i32 0, i32 0), %struct.format_flag_pair* getelementptr inbounds ([6 x %struct.format_flag_pair], [6 x %struct.format_flag_pair]* @strftime_flag_pairs, i32 0, i32 0), i32 4, i32 119, i32 0, i32 0, i32 0, i32 0, i32 0, %union.tree_node** null, %union.tree_node** null }, %struct.format_kind_info { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.20, i32 0, i32 0), %struct.format_length_info* getelementptr inbounds ([2 x %struct.format_length_info], [2 x %struct.format_length_info]* @strfmon_length_specs, i32 0, i32 0), %struct.format_char_info* getelementptr inbounds ([2 x %struct.format_char_info], [2 x %struct.format_char_info]* @monetary_char_table, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.91, i32 0, i32 0), i8* null, %struct.format_flag_spec* getelementptr inbounds ([11 x %struct.format_flag_spec], [11 x %struct.format_flag_spec]* @strfmon_flag_specs, i32 0, i32 0), %struct.format_flag_pair* getelementptr inbounds ([2 x %struct.format_flag_pair], [2 x %struct.format_flag_pair]* @strfmon_flag_pairs, i32 0, i32 0), i32 1, i32 119, i32 35, i32 112, i32 0, i32 76, i32 0, %union.tree_node** null, %union.tree_node** null }], align 16, !dbg !2144
@.str.6 = private unnamed_addr constant [11 x i8] c"c-format.c\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.8 = private unnamed_addr constant [41 x i8] c"format string argument not a string type\00", align 1
@.str.9 = private unnamed_addr constant [30 x i8] c"unrecognized format specifier\00", align 1
@.str.10 = private unnamed_addr constant [44 x i8] c"%qE is an unrecognized format function type\00", align 1
@.str.11 = private unnamed_addr constant [35 x i8] c"%<...%> has invalid operand number\00", align 1
@.str.12 = private unnamed_addr constant [56 x i8] c"format string argument follows the args to be formatted\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"gcc_\00", align 1
@gnu_target_overrides_format_attributes = internal constant [5 x %struct.target_ovr_attr] [%struct.target_ovr_attr { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0) }, %struct.target_ovr_attr { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i32 0, i32 0) }, %struct.target_ovr_attr { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.19, i32 0, i32 0) }, %struct.target_ovr_attr { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0) }, %struct.target_ovr_attr zeroinitializer], align 16, !dbg !2117
@.str.14 = private unnamed_addr constant [11 x i8] c"gnu_printf\00", align 1
@.str.15 = private unnamed_addr constant [7 x i8] c"printf\00", align 1
@.str.16 = private unnamed_addr constant [10 x i8] c"gnu_scanf\00", align 1
@.str.17 = private unnamed_addr constant [6 x i8] c"scanf\00", align 1
@.str.18 = private unnamed_addr constant [13 x i8] c"gnu_strftime\00", align 1
@.str.19 = private unnamed_addr constant [9 x i8] c"strftime\00", align 1
@.str.20 = private unnamed_addr constant [12 x i8] c"gnu_strfmon\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"strfmon\00", align 1
@n_format_types = internal global i32 10, align 4, !dbg !2128
@.str.22 = private unnamed_addr constant [55 x i8] c"format not a string literal, format string not checked\00", align 1
@.str.23 = private unnamed_addr constant [52 x i8] c"format not a string literal and no format arguments\00", align 1
@.str.24 = private unnamed_addr constant [56 x i8] c"format not a string literal, argument types not checked\00", align 1
@.str.25 = private unnamed_addr constant [30 x i8] c"too many arguments for format\00", align 1
@.str.26 = private unnamed_addr constant [35 x i8] c"unused arguments in $-style format\00", align 1
@.str.27 = private unnamed_addr constant [29 x i8] c"zero-length %s format string\00", align 1
@.str.28 = private unnamed_addr constant [34 x i8] c"format is a wide character string\00", align 1
@.str.29 = private unnamed_addr constant [27 x i8] c"unterminated format string\00", align 1
@.str.30 = private unnamed_addr constant [24 x i8] c"format_wanted_type pool\00", align 1
@.str.31 = private unnamed_addr constant [26 x i8] c"embedded %<\\0%> in format\00", align 1
@.str.32 = private unnamed_addr constant [35 x i8] c"spurious trailing %<%%%> in format\00", align 1
@.str.33 = private unnamed_addr constant [22 x i8] c"repeated %s in format\00", align 1
@.str.34 = private unnamed_addr constant [48 x i8] c"missing fill character at end of strfmon format\00", align 1
@.str.35 = private unnamed_addr constant [29 x i8] c"too few arguments for format\00", align 1
@.str.36 = private unnamed_addr constant [12 x i8] c"field width\00", align 1
@_sch_istable = external dso_local constant [256 x i16], align 16
@.str.37 = private unnamed_addr constant [24 x i8] c"zero width in %s format\00", align 1
@.str.38 = private unnamed_addr constant [34 x i8] c"empty left precision in %s format\00", align 1
@.str.39 = private unnamed_addr constant [16 x i8] c"field precision\00", align 1
@.str.40 = private unnamed_addr constant [29 x i8] c"empty precision in %s format\00", align 1
@flag_isoc99 = external dso_local global i32, align 4
@pedantic = external dso_local global i32, align 4
@warn_long_long = external dso_local global i32, align 4
@c_language = external dso_local global i32, align 4
@flag_isoc94 = external dso_local global i32, align 4
@.str.41 = private unnamed_addr constant [47 x i8] c"%s does not support the %qs %s length modifier\00", align 1
@.str.42 = private unnamed_addr constant [8 x i8] c"ISO C++\00", align 1
@.str.43 = private unnamed_addr constant [6 x i8] c"ISO C\00", align 1
@.str.44 = private unnamed_addr constant [8 x i8] c"ISO C90\00", align 1
@.str.45 = private unnamed_addr constant [39 x i8] c"conversion lacks type at end of format\00", align 1
@.str.46 = private unnamed_addr constant [48 x i8] c"unknown conversion type character %qc in format\00", align 1
@.str.47 = private unnamed_addr constant [49 x i8] c"unknown conversion type character 0x%x in format\00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"%s does not support the %<%%%c%> %s format\00", align 1
@.str.49 = private unnamed_addr constant [32 x i8] c"%s used with %<%%%c%> %s format\00", align 1
@.str.50 = private unnamed_addr constant [23 x i8] c"%s does not support %s\00", align 1
@.str.51 = private unnamed_addr constant [51 x i8] c"%s does not support %s with the %<%%%c%> %s format\00", align 1
@.str.52 = private unnamed_addr constant [42 x i8] c"%s ignored with %s and %<%%%c%> %s format\00", align 1
@.str.53 = private unnamed_addr constant [32 x i8] c"%s ignored with %s in %s format\00", align 1
@.str.54 = private unnamed_addr constant [50 x i8] c"use of %s and %s together with %<%%%c%> %s format\00", align 1
@.str.55 = private unnamed_addr constant [39 x i8] c"use of %s and %s together in %s format\00", align 1
@.str.56 = private unnamed_addr constant [59 x i8] c"%<%%%c%> yields only last 2 digits of year in some locales\00", align 1
@.str.57 = private unnamed_addr constant [43 x i8] c"%<%%%c%> yields only last 2 digits of year\00", align 1
@.str.58 = private unnamed_addr constant [36 x i8] c"no closing %<]%> for %<%%[%> format\00", align 1
@.str.59 = private unnamed_addr constant [51 x i8] c"use of %qs length modifier with %qc type character\00", align 1
@.str.60 = private unnamed_addr constant [45 x i8] c"%s does not support the %<%%%s%c%> %s format\00", align 1
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@.str.61 = private unnamed_addr constant [52 x i8] c"operand number specified with suppressed assignment\00", align 1
@.str.62 = private unnamed_addr constant [55 x i8] c"operand number specified for format taking no argument\00", align 1
@.str.63 = private unnamed_addr constant [35 x i8] c"missing $ operand number in format\00", align 1
@dollar_first_arg_num = internal global i32 0, align 4, !dbg !2130
@dollar_arguments_count = internal global i32 0, align 4, !dbg !2132
@dollar_max_arg_used = internal global i32 0, align 4, !dbg !2134
@dollar_format_warned = internal global i32 0, align 4, !dbg !2136
@dollar_arguments_alloc = internal global i32 0, align 4, !dbg !2138
@dollar_arguments_used = internal global i8* null, align 8, !dbg !2140
@dollar_arguments_pointer_p = internal global i8* null, align 8, !dbg !2142
@.str.64 = private unnamed_addr constant [68 x i8] c"format argument %d unused before used argument %d in $-style format\00", align 1
@.str.65 = private unnamed_addr constant [48 x i8] c"%s does not support %%n$ operand number formats\00", align 1
@.str.66 = private unnamed_addr constant [38 x i8] c"operand number out of range in format\00", align 1
@.str.67 = private unnamed_addr constant [52 x i8] c"format argument %d used more than once in %s format\00", align 1
@.str.68 = private unnamed_addr constant [58 x i8] c"$ operand number used after format without operand number\00", align 1
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@.str.69 = private unnamed_addr constant [43 x i8] c"writing through null pointer (argument %d)\00", align 1
@.str.70 = private unnamed_addr constant [43 x i8] c"reading through null pointer (argument %d)\00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@.str.71 = private unnamed_addr constant [43 x i8] c"writing into constant object (argument %d)\00", align 1
@.str.72 = private unnamed_addr constant [55 x i8] c"extra type qualifiers in format argument (argument %d)\00", align 1
@.str.73 = private unnamed_addr constant [59 x i8] c"%s should have type %<%s%s%>, but argument %d has type %qT\00", align 1
@.str.74 = private unnamed_addr constant [65 x i8] c"format %q.*s expects type %<%s%s%>, but argument %d has type %qT\00", align 1
@.str.75 = private unnamed_addr constant [59 x i8] c"%s should have type %<%T%s%>, but argument %d has type %qT\00", align 1
@.str.76 = private unnamed_addr constant [65 x i8] c"format %q.*s expects type %<%T%s%>, but argument %d has type %qT\00", align 1
@printf_length_specs = internal constant [11 x %struct.format_length_info] [%struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.92, i32 0, i32 0), i32 2, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.93, i32 0, i32 0), i32 1, i32 3, i32 0 }, %struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.94, i32 0, i32 0), i32 3, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.95, i32 0, i32 0), i32 4, i32 2, i32 0 }, %struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i32 4, i32 4, i8* null, i32 0, i32 0, i32 0 }, %struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.97, i32 0, i32 0), i32 5, i32 0, i8* null, i32 0, i32 0, i32 0 }, %struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.98, i32 0, i32 0), i32 6, i32 3, i8* null, i32 0, i32 0, i32 0 }, %struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.99, i32 0, i32 0), i32 6, i32 4, i8* null, i32 0, i32 0, i32 0 }, %struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.100, i32 0, i32 0), i32 7, i32 3, i8* null, i32 0, i32 0, i32 0 }, %struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.101, i32 0, i32 0), i32 8, i32 3, i8* null, i32 0, i32 0, i32 0 }, %struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.102, i32 0, i32 0), i32 9, i32 4, i8* null, i32 0, i32 0, i32 0 }, %struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.103, i32 0, i32 0), i32 10, i32 4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.104, i32 0, i32 0), i32 11, i32 4, i32 0 }, %struct.format_length_info zeroinitializer], align 16, !dbg !2150
@.str.77 = private unnamed_addr constant [8 x i8] c" +#0-'I\00", align 1
@printf_flag_specs = internal constant [11 x %struct.format_flag_spec] [%struct.format_flag_spec { i32 32, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.144, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 43, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.145, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.146, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 35, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.147, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.148, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 48, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.149, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.150, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 45, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.151, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.152, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 39, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.153, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.154, i32 0, i32 0), i32 4 }, %struct.format_flag_spec { i32 73, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.155, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.156, i32 0, i32 0), i32 4 }, %struct.format_flag_spec { i32 119, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.157, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 112, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.159, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 76, i32 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.160, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.161, i32 0, i32 0), i32 0 }, %struct.format_flag_spec zeroinitializer], align 16, !dbg !2160
@printf_flag_pairs = internal constant [4 x %struct.format_flag_pair] [%struct.format_flag_pair { i32 32, i32 43, i32 1, i32 0 }, %struct.format_flag_pair { i32 48, i32 45, i32 1, i32 0 }, %struct.format_flag_pair { i32 48, i32 112, i32 1, i32 105 }, %struct.format_flag_pair zeroinitializer], align 16, !dbg !2163
@.str.78 = private unnamed_addr constant [12 x i8] c"asm_fprintf\00", align 1
@asm_fprintf_length_specs = internal constant [3 x %struct.format_length_info] [%struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.94, i32 0, i32 0), i32 3, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.95, i32 0, i32 0), i32 4, i32 0, i32 0 }, %struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.162, i32 0, i32 0), i32 0, i32 0, i8* null, i32 0, i32 0, i32 0 }, %struct.format_length_info zeroinitializer], align 16, !dbg !2168
@.str.79 = private unnamed_addr constant [6 x i8] c" +#0-\00", align 1
@asm_fprintf_flag_specs = internal constant [9 x %struct.format_flag_spec] [%struct.format_flag_spec { i32 32, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.144, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 43, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.145, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.146, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 35, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.147, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.148, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 48, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.149, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.150, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 45, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.151, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.152, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 119, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.157, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 112, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.159, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 76, i32 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.160, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.161, i32 0, i32 0), i32 0 }, %struct.format_flag_spec zeroinitializer], align 16, !dbg !2178
@asm_fprintf_flag_pairs = internal constant [4 x %struct.format_flag_pair] [%struct.format_flag_pair { i32 32, i32 43, i32 1, i32 0 }, %struct.format_flag_pair { i32 48, i32 45, i32 1, i32 0 }, %struct.format_flag_pair { i32 48, i32 112, i32 1, i32 105 }, %struct.format_flag_pair zeroinitializer], align 16, !dbg !2183
@.str.80 = private unnamed_addr constant [9 x i8] c"gcc_diag\00", align 1
@gcc_diag_length_specs = internal constant [3 x %struct.format_length_info] [%struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.94, i32 0, i32 0), i32 3, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.95, i32 0, i32 0), i32 4, i32 0, i32 0 }, %struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.162, i32 0, i32 0), i32 0, i32 0, i8* null, i32 0, i32 0, i32 0 }, %struct.format_length_info zeroinitializer], align 16, !dbg !2185
@.str.81 = private unnamed_addr constant [3 x i8] c"q+\00", align 1
@gcc_diag_flag_specs = internal constant [5 x %struct.format_flag_spec] [%struct.format_flag_spec { i32 43, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.145, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.146, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 113, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.176, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.177, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 112, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.159, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 76, i32 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.160, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.161, i32 0, i32 0), i32 0 }, %struct.format_flag_spec zeroinitializer], align 16, !dbg !2190
@gcc_diag_flag_pairs = internal constant [1 x %struct.format_flag_pair] zeroinitializer, align 16, !dbg !2193
@.str.82 = private unnamed_addr constant [10 x i8] c"gcc_tdiag\00", align 1
@.str.83 = private unnamed_addr constant [10 x i8] c"gcc_cdiag\00", align 1
@.str.84 = private unnamed_addr constant [12 x i8] c"gcc_cxxdiag\00", align 1
@.str.85 = private unnamed_addr constant [4 x i8] c"q+#\00", align 1
@gcc_cxxdiag_flag_specs = internal constant [6 x %struct.format_flag_spec] [%struct.format_flag_spec { i32 43, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.145, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.146, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 35, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.147, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.148, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 113, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.176, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.177, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 112, i32 0, i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.159, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 76, i32 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.160, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.161, i32 0, i32 0), i32 0 }, %struct.format_flag_spec zeroinitializer], align 16, !dbg !2203
@.str.86 = private unnamed_addr constant [8 x i8] c"gcc_gfc\00", align 1
@gcc_gfc_length_specs = internal constant [2 x %struct.format_length_info] [%struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.94, i32 0, i32 0), i32 3, i32 0, i8* null, i32 0, i32 0, i32 0 }, %struct.format_length_info zeroinitializer], align 16, !dbg !2208
@.str.87 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@gcc_gfc_flag_pairs = internal constant [1 x %struct.format_flag_pair] zeroinitializer, align 16, !dbg !2218
@scanf_length_specs = internal constant [10 x %struct.format_length_info] [%struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.92, i32 0, i32 0), i32 2, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.93, i32 0, i32 0), i32 1, i32 3, i32 0 }, %struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.94, i32 0, i32 0), i32 3, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.95, i32 0, i32 0), i32 4, i32 2, i32 0 }, %struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i32 4, i32 4, i8* null, i32 0, i32 0, i32 0 }, %struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.97, i32 0, i32 0), i32 5, i32 0, i8* null, i32 0, i32 0, i32 0 }, %struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.98, i32 0, i32 0), i32 6, i32 3, i8* null, i32 0, i32 0, i32 0 }, %struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.100, i32 0, i32 0), i32 7, i32 3, i8* null, i32 0, i32 0, i32 0 }, %struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.101, i32 0, i32 0), i32 8, i32 3, i8* null, i32 0, i32 0, i32 0 }, %struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.102, i32 0, i32 0), i32 9, i32 4, i8* null, i32 0, i32 0, i32 0 }, %struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.103, i32 0, i32 0), i32 10, i32 4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.104, i32 0, i32 0), i32 11, i32 4, i32 0 }, %struct.format_length_info zeroinitializer], align 16, !dbg !2220
@.str.88 = private unnamed_addr constant [4 x i8] c"*'I\00", align 1
@scanf_flag_specs = internal constant [8 x %struct.format_flag_spec] [%struct.format_flag_spec { i32 42, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.196, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.197, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 97, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.198, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.199, i32 0, i32 0), i32 4 }, %struct.format_flag_spec { i32 109, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.200, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.201, i32 0, i32 0), i32 4 }, %struct.format_flag_spec { i32 119, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.202, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 76, i32 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.160, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.203, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 39, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.153, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.204, i32 0, i32 0), i32 4 }, %struct.format_flag_spec { i32 73, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.155, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.205, i32 0, i32 0), i32 4 }, %struct.format_flag_spec zeroinitializer], align 16, !dbg !2228
@scanf_flag_pairs = internal constant [3 x %struct.format_flag_pair] [%struct.format_flag_pair { i32 42, i32 76, i32 0, i32 0 }, %struct.format_flag_pair { i32 97, i32 109, i32 0, i32 0 }, %struct.format_flag_pair zeroinitializer], align 16, !dbg !2233
@time_char_table = internal constant [20 x %struct.format_char_info] [%struct.format_char_info { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.206, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] zeroinitializer, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.207, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.208, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] zeroinitializer, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.209, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.210, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.211, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] zeroinitializer, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.212, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.101, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] zeroinitializer, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.212, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.213, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.132, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] zeroinitializer, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.214, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.215, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] zeroinitializer, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.209, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.216, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] zeroinitializer, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.217, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.218, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.219, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] zeroinitializer, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.220, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.213, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.221, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] zeroinitializer, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.138, i32 0, i32 0), i32 0, i32 3, [12 x %struct.format_type_detail] zeroinitializer, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.220, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.213, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.103, i32 0, i32 0), i32 0, i32 3, [12 x %struct.format_type_detail] zeroinitializer, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.222, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.223, i32 0, i32 0), i32 0, i32 3, [12 x %struct.format_type_detail] zeroinitializer, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.212, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.224, i32 0, i32 0), i32 0, i32 3, [12 x %struct.format_type_detail] zeroinitializer, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i32 0, i32 0), i32 0, i32 3, [12 x %struct.format_type_detail] zeroinitializer, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.226, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.227, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.228, i32 0, i32 0), i32 0, i32 3, [12 x %struct.format_type_detail] zeroinitializer, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.212, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.213, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.92, i32 0, i32 0), i32 0, i32 3, [12 x %struct.format_type_detail] zeroinitializer, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.207, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.98, i32 0, i32 0), i32 0, i32 3, [12 x %struct.format_type_detail] zeroinitializer, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.165, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.213, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.229, i32 0, i32 0), i32 0, i32 4, [12 x %struct.format_type_detail] zeroinitializer, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.212, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.230, i32 0, i32 0), i32 0, i32 4, [12 x %struct.format_type_detail] zeroinitializer, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info zeroinitializer], align 16, !dbg !2236
@.str.89 = private unnamed_addr constant [6 x i8] c"_-0^#\00", align 1
@.str.90 = private unnamed_addr constant [3 x i8] c"EO\00", align 1
@strftime_flag_specs = internal constant [10 x %struct.format_flag_spec] [%struct.format_flag_spec { i32 95, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.231, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.232, i32 0, i32 0), i32 4 }, %struct.format_flag_spec { i32 45, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.151, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.233, i32 0, i32 0), i32 4 }, %struct.format_flag_spec { i32 48, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.149, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.234, i32 0, i32 0), i32 4 }, %struct.format_flag_spec { i32 94, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.235, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.236, i32 0, i32 0), i32 4 }, %struct.format_flag_spec { i32 35, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.147, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.237, i32 0, i32 0), i32 4 }, %struct.format_flag_spec { i32 119, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.238, i32 0, i32 0), i32 4 }, %struct.format_flag_spec { i32 69, i32 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.239, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.240, i32 0, i32 0), i32 3 }, %struct.format_flag_spec { i32 79, i32 0, i32 0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.241, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.242, i32 0, i32 0), i32 3 }, %struct.format_flag_spec { i32 79, i32 111, i32 0, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.243, i32 0, i32 0), i32 4 }, %struct.format_flag_spec zeroinitializer], align 16, !dbg !2241
@strftime_flag_pairs = internal constant [6 x %struct.format_flag_pair] [%struct.format_flag_pair { i32 69, i32 79, i32 0, i32 0 }, %struct.format_flag_pair { i32 95, i32 45, i32 0, i32 0 }, %struct.format_flag_pair { i32 95, i32 48, i32 0, i32 0 }, %struct.format_flag_pair { i32 45, i32 48, i32 0, i32 0 }, %struct.format_flag_pair { i32 94, i32 35, i32 0, i32 0 }, %struct.format_flag_pair zeroinitializer], align 16, !dbg !2244
@strfmon_length_specs = internal constant [2 x %struct.format_length_info] [%struct.format_length_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.97, i32 0, i32 0), i32 5, i32 0, i8* null, i32 0, i32 0, i32 0 }, %struct.format_length_info zeroinitializer], align 16, !dbg !2247
@monetary_char_table = internal constant [2 x %struct.format_char_info] [%struct.format_char_info { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.244, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 256) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 264) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.245, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info zeroinitializer], align 16, !dbg !2249
@.str.91 = private unnamed_addr constant [7 x i8] c"=^+(!-\00", align 1
@strfmon_flag_specs = internal constant [11 x %struct.format_flag_spec] [%struct.format_flag_spec { i32 61, i32 0, i32 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.246, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.247, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 94, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.235, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.248, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 43, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.145, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.249, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 40, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.250, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.251, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 33, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.252, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.253, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 45, i32 0, i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.151, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.254, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 119, i32 0, i32 0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.255, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 35, i32 0, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.256, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.257, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 112, i32 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.258, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.259, i32 0, i32 0), i32 0 }, %struct.format_flag_spec { i32 76, i32 0, i32 0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.160, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.260, i32 0, i32 0), i32 0 }, %struct.format_flag_spec zeroinitializer], align 16, !dbg !2252
@strfmon_flag_pairs = internal constant [2 x %struct.format_flag_pair] [%struct.format_flag_pair { i32 43, i32 40, i32 0, i32 0 }, %struct.format_flag_pair zeroinitializer], align 16, !dbg !2254
@.str.92 = private unnamed_addr constant [2 x i8] c"h\00", align 1
@.str.93 = private unnamed_addr constant [3 x i8] c"hh\00", align 1
@.str.94 = private unnamed_addr constant [2 x i8] c"l\00", align 1
@.str.95 = private unnamed_addr constant [3 x i8] c"ll\00", align 1
@.str.96 = private unnamed_addr constant [2 x i8] c"q\00", align 1
@.str.97 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@.str.98 = private unnamed_addr constant [2 x i8] c"z\00", align 1
@.str.99 = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@.str.100 = private unnamed_addr constant [2 x i8] c"t\00", align 1
@.str.101 = private unnamed_addr constant [2 x i8] c"j\00", align 1
@.str.102 = private unnamed_addr constant [2 x i8] c"H\00", align 1
@.str.103 = private unnamed_addr constant [2 x i8] c"D\00", align 1
@.str.104 = private unnamed_addr constant [3 x i8] c"DD\00", align 1
@.str.105 = private unnamed_addr constant [3 x i8] c"di\00", align 1
@.str.106 = private unnamed_addr constant [14 x i8] c"signed size_t\00", align 1
@c_global_trees = external dso_local global [55 x %union.tree_node*], align 16
@.str.107 = private unnamed_addr constant [10 x i8] c"ptrdiff_t\00", align 1
@.str.108 = private unnamed_addr constant [9 x i8] c"intmax_t\00", align 1
@.str.109 = private unnamed_addr constant [9 x i8] c"-wp0 +'I\00", align 1
@.str.110 = private unnamed_addr constant [2 x i8] c"i\00", align 1
@.str.111 = private unnamed_addr constant [4 x i8] c"oxX\00", align 1
@.str.112 = private unnamed_addr constant [7 x i8] c"size_t\00", align 1
@.str.113 = private unnamed_addr constant [19 x i8] c"unsigned ptrdiff_t\00", align 1
@.str.114 = private unnamed_addr constant [10 x i8] c"uintmax_t\00", align 1
@.str.115 = private unnamed_addr constant [6 x i8] c"-wp0#\00", align 1
@.str.116 = private unnamed_addr constant [2 x i8] c"u\00", align 1
@.str.117 = private unnamed_addr constant [7 x i8] c"-wp0'I\00", align 1
@.str.118 = private unnamed_addr constant [4 x i8] c"fgG\00", align 1
@.str.119 = private unnamed_addr constant [11 x i8] c"_Decimal32\00", align 1
@.str.120 = private unnamed_addr constant [11 x i8] c"_Decimal64\00", align 1
@.str.121 = private unnamed_addr constant [12 x i8] c"_Decimal128\00", align 1
@.str.122 = private unnamed_addr constant [10 x i8] c"-wp0 +#'I\00", align 1
@.str.123 = private unnamed_addr constant [3 x i8] c"eE\00", align 1
@.str.124 = private unnamed_addr constant [9 x i8] c"-wp0 +#I\00", align 1
@.str.125 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.126 = private unnamed_addr constant [7 x i8] c"wint_t\00", align 1
@.str.127 = private unnamed_addr constant [3 x i8] c"-w\00", align 1
@.str.128 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.129 = private unnamed_addr constant [8 x i8] c"wchar_t\00", align 1
@.str.130 = private unnamed_addr constant [4 x i8] c"-wp\00", align 1
@.str.131 = private unnamed_addr constant [3 x i8] c"cR\00", align 1
@.str.132 = private unnamed_addr constant [2 x i8] c"p\00", align 1
@.str.133 = private unnamed_addr constant [2 x i8] c"n\00", align 1
@.str.134 = private unnamed_addr constant [2 x i8] c"W\00", align 1
@.str.135 = private unnamed_addr constant [2 x i8] c"F\00", align 1
@.str.136 = private unnamed_addr constant [3 x i8] c"aA\00", align 1
@.str.137 = private unnamed_addr constant [8 x i8] c"-wp0 +#\00", align 1
@.str.138 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.139 = private unnamed_addr constant [2 x i8] c"S\00", align 1
@.str.140 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@.str.141 = private unnamed_addr constant [2 x i8] c"m\00", align 1
@print_char_table = internal constant <{ %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }> <{ %struct.format_char_info { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.105, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 8) to %union.tree_node**) }, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 24) to %union.tree_node**) }, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 56) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 72) to %union.tree_node**) }, %struct.format_type_detail { i32 4, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 72) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.106, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 40) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.107, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 344) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.108, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 56) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.110, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.111, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 48) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 16) to %union.tree_node**) }, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 32) to %union.tree_node**) }, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 64) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 80) to %union.tree_node**) }, %struct.format_type_detail { i32 4, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 80) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.112, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 328) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.113, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 48) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.114, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 64) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.115, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.110, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.116, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 48) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 16) to %union.tree_node**) }, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 32) to %union.tree_node**) }, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 64) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 80) to %union.tree_node**) }, %struct.format_type_detail { i32 4, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 80) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.112, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 328) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.113, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 48) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.114, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 64) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.117, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.110, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.118, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 256) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 256) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 264) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.119, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 392) to %union.tree_node**) }, %struct.format_type_detail { i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.120, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 400) to %union.tree_node**) }, %struct.format_type_detail { i32 4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.121, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 408) to %union.tree_node**) }], i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.122, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.123, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 256) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 256) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 264) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.119, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 392) to %union.tree_node**) }, %struct.format_type_detail { i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.120, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 400) to %union.tree_node**) }, %struct.format_type_detail { i32 4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.121, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 408) to %union.tree_node**) }], i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.124, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.126, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 32) to %union.tree_node**) }, [8 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.128, i32 0, i32 0), i32 1, i32 0, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i32 0) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.129, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 16) to %union.tree_node**) }, [8 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.130, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.131, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.132, i32 0, i32 0), i32 1, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.133, i32 0, i32 0), i32 1, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 8) to %union.tree_node**) }, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 24) to %union.tree_node**) }, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 56) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 72) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.106, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 40) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.107, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 344) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.108, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 56) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.134, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.135, i32 0, i32 0), i32 0, i32 3, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 256) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 256) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 264) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.119, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 392) to %union.tree_node**) }, %struct.format_type_detail { i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.120, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 400) to %union.tree_node**) }, %struct.format_type_detail { i32 4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.121, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 408) to %union.tree_node**) }], i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.122, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.136, i32 0, i32 0), i32 0, i32 3, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 256) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 256) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 264) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.137, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.138, i32 0, i32 0), i32 0, i32 4, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.126, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 32) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.139, i32 0, i32 0), i32 1, i32 4, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.129, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 16) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.130, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.140, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.141, i32 0, i32 0), i32 0, i32 4, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.130, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info zeroinitializer }>, align 16, !dbg !2155
@.str.143 = private unnamed_addr constant [9 x i8] c"' ' flag\00", align 1
@.str.144 = private unnamed_addr constant [20 x i8] c"the ' ' printf flag\00", align 1
@.str.145 = private unnamed_addr constant [9 x i8] c"'+' flag\00", align 1
@.str.146 = private unnamed_addr constant [20 x i8] c"the '+' printf flag\00", align 1
@.str.147 = private unnamed_addr constant [9 x i8] c"'#' flag\00", align 1
@.str.148 = private unnamed_addr constant [20 x i8] c"the '#' printf flag\00", align 1
@.str.149 = private unnamed_addr constant [9 x i8] c"'0' flag\00", align 1
@.str.150 = private unnamed_addr constant [20 x i8] c"the '0' printf flag\00", align 1
@.str.151 = private unnamed_addr constant [9 x i8] c"'-' flag\00", align 1
@.str.152 = private unnamed_addr constant [20 x i8] c"the '-' printf flag\00", align 1
@.str.153 = private unnamed_addr constant [9 x i8] c"''' flag\00", align 1
@.str.154 = private unnamed_addr constant [20 x i8] c"the ''' printf flag\00", align 1
@.str.155 = private unnamed_addr constant [9 x i8] c"'I' flag\00", align 1
@.str.156 = private unnamed_addr constant [20 x i8] c"the 'I' printf flag\00", align 1
@.str.157 = private unnamed_addr constant [29 x i8] c"field width in printf format\00", align 1
@.str.158 = private unnamed_addr constant [10 x i8] c"precision\00", align 1
@.str.159 = private unnamed_addr constant [27 x i8] c"precision in printf format\00", align 1
@.str.160 = private unnamed_addr constant [16 x i8] c"length modifier\00", align 1
@.str.161 = private unnamed_addr constant [33 x i8] c"length modifier in printf format\00", align 1
@.str.162 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.163 = private unnamed_addr constant [7 x i8] c"-wp0 +\00", align 1
@.str.164 = private unnamed_addr constant [5 x i8] c"-wp0\00", align 1
@.str.165 = private unnamed_addr constant [2 x i8] c"O\00", align 1
@.str.166 = private unnamed_addr constant [2 x i8] c"I\00", align 1
@.str.167 = private unnamed_addr constant [2 x i8] c"U\00", align 1
@.str.168 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.169 = private unnamed_addr constant [2 x i8] c"@\00", align 1
@asm_fprintf_char_table = internal constant <{ %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }> <{ %struct.format_char_info { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.105, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 56) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 72) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.163, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.110, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.111, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 48) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 64) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 80) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.115, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.110, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.116, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 48) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 64) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 80) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.164, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.110, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.128, i32 0, i32 0), i32 1, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i32 0) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.130, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.131, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.165, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.140, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.166, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.97, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.167, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.168, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.169, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info zeroinitializer }>, align 16, !dbg !2173
@.str.171 = private unnamed_addr constant [3 x i8] c"ox\00", align 1
@.str.172 = private unnamed_addr constant [3 x i8] c"pq\00", align 1
@.str.173 = private unnamed_addr constant [2 x i8] c"K\00", align 1
@.str.174 = private unnamed_addr constant [4 x i8] c"<>'\00", align 1
@gcc_diag_char_table = internal constant <{ %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }> <{ %struct.format_char_info { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.105, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 56) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 72) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.171, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 48) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 64) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 80) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.116, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 48) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 64) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 80) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.128, i32 0, i32 0), i32 1, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i32 0) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.172, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.131, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.132, i32 0, i32 0), i32 1, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.173, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.174, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.141, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info zeroinitializer }>, align 16, !dbg !2187
@.str.176 = private unnamed_addr constant [9 x i8] c"'q' flag\00", align 1
@.str.177 = private unnamed_addr constant [24 x i8] c"the 'q' diagnostic flag\00", align 1
@.str.178 = private unnamed_addr constant [6 x i8] c"DFKTE\00", align 1
@gcc_tdiag_char_table = internal constant <{ %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }> <{ %struct.format_char_info { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.105, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 56) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 72) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.171, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 48) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 64) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 80) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.116, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 48) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 64) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 80) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.128, i32 0, i32 0), i32 1, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i32 0) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.172, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.131, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.132, i32 0, i32 0), i32 1, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.178, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.81, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.174, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.141, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info zeroinitializer }>, align 16, !dbg !2196
@.str.180 = private unnamed_addr constant [6 x i8] c"DEFKT\00", align 1
@gcc_cdiag_char_table = internal constant <{ %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }> <{ %struct.format_char_info { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.105, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 56) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 72) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.171, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 48) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 64) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 80) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.116, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 48) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 64) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 80) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.128, i32 0, i32 0), i32 1, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i32 0) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.172, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.131, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.132, i32 0, i32 0), i32 1, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.180, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.81, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.174, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.141, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info zeroinitializer }>, align 16, !dbg !2198
@.str.182 = private unnamed_addr constant [8 x i8] c"ADEFKTV\00", align 1
@.str.183 = private unnamed_addr constant [6 x i8] c"CLOPQ\00", align 1
@gcc_cxxdiag_char_table = internal constant <{ %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }> <{ %struct.format_char_info { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.105, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 56) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 72) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.171, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 48) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 64) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 80) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.116, i32 0, i32 0), i32 0, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 48) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 64) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 80) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.128, i32 0, i32 0), i32 1, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i32 0) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.172, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.131, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.132, i32 0, i32 0), i32 1, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.182, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.85, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.183, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.174, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.141, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info zeroinitializer }>, align 16, !dbg !2200
@gcc_gfc_char_table = internal constant <{ { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }> <{ { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.105, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 56) to %union.tree_node**) }, [8 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.116, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 48) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 64) to %union.tree_node**) }, [8 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.128, i32 0, i32 0), i32 1, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i32 0) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.131, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.138, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.97, i32 0, i32 0), i32 0, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.140, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info zeroinitializer }>, align 16, !dbg !2213
@.str.186 = private unnamed_addr constant [5 x i8] c"*w'I\00", align 1
@.str.187 = private unnamed_addr constant [3 x i8] c"*w\00", align 1
@.str.188 = private unnamed_addr constant [6 x i8] c"efgEG\00", align 1
@.str.189 = private unnamed_addr constant [4 x i8] c"*w'\00", align 1
@.str.190 = private unnamed_addr constant [4 x i8] c"*mw\00", align 1
@.str.191 = private unnamed_addr constant [3 x i8] c"cW\00", align 1
@.str.192 = private unnamed_addr constant [5 x i8] c"*amw\00", align 1
@.str.193 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.194 = private unnamed_addr constant [4 x i8] c"cW[\00", align 1
@scan_char_table = internal constant <{ %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }> <{ %struct.format_char_info { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.105, i32 0, i32 0), i32 1, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 8) to %union.tree_node**) }, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 24) to %union.tree_node**) }, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 56) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 72) to %union.tree_node**) }, %struct.format_type_detail { i32 4, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 72) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.106, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 40) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.107, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 344) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.108, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 56) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.186, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.134, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.116, i32 0, i32 0), i32 1, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 48) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 16) to %union.tree_node**) }, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 32) to %union.tree_node**) }, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 64) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 80) to %union.tree_node**) }, %struct.format_type_detail { i32 4, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 80) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.112, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 328) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.113, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 48) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.114, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 64) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.186, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.134, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.111, i32 0, i32 0), i32 1, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 48) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 16) to %union.tree_node**) }, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 32) to %union.tree_node**) }, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 64) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 80) to %union.tree_node**) }, %struct.format_type_detail { i32 4, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 80) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.112, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 328) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.113, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 48) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.114, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 64) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.187, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.134, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.188, i32 0, i32 0), i32 1, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 248) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 256) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 264) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.119, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 392) to %union.tree_node**) }, %struct.format_type_detail { i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.120, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 400) to %union.tree_node**) }, %struct.format_type_detail { i32 4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.121, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 408) to %union.tree_node**) }], i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.189, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.134, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0), i32 1, i32 0, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i32 0) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.129, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 16) to %union.tree_node**) }, [8 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.190, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.191, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.128, i32 0, i32 0), i32 1, i32 0, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i32 0) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.129, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 16) to %union.tree_node**) }, [8 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.192, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.191, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.193, i32 0, i32 0), i32 1, i32 0, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i32 0, i32 0) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.129, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 16) to %union.tree_node**) }, [8 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.192, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.194, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.132, i32 0, i32 0), i32 2, i32 0, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 304) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.187, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.134, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.133, i32 0, i32 0), i32 1, i32 0, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 40) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 8) to %union.tree_node**) }, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 24) to %union.tree_node**) }, %struct.format_type_detail { i32 0, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 56) to %union.tree_node**) }, %struct.format_type_detail { i32 2, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([11 x %union.tree_node*]* @integer_types to i8*), i64 72) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.106, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 40) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.107, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 344) to %union.tree_node**) }, %struct.format_type_detail { i32 3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.108, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 56) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.134, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.135, i32 0, i32 0), i32 1, i32 3, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 248) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 256) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 264) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.119, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 392) to %union.tree_node**) }, %struct.format_type_detail { i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.120, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 400) to %union.tree_node**) }, %struct.format_type_detail { i32 4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.121, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 408) to %union.tree_node**) }], i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.189, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.134, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.136, i32 0, i32 0), i32 1, i32 3, [12 x %struct.format_type_detail] [%struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 248) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 256) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail { i32 3, i8* null, %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([131 x %union.tree_node*]* @global_trees to i8*), i64 264) to %union.tree_node**) }, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer, %struct.format_type_detail zeroinitializer], i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.189, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.134, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.138, i32 0, i32 0), i32 1, i32 4, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.129, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 16) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.190, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.134, i32 0, i32 0), %struct.format_char_info* null }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* } { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.139, i32 0, i32 0), i32 1, i32 4, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }> <{ %struct.format_type_detail { i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.129, i32 0, i32 0), %union.tree_node** bitcast (i8* getelementptr (i8, i8* bitcast ([55 x %union.tree_node*]* @c_global_trees to i8*), i64 16) to %union.tree_node**) }, [11 x %struct.format_type_detail] zeroinitializer }>, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.192, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.134, i32 0, i32 0), %struct.format_char_info* null }, %struct.format_char_info zeroinitializer }>, align 16, !dbg !2223
@.str.196 = private unnamed_addr constant [23 x i8] c"assignment suppression\00", align 1
@.str.197 = private unnamed_addr constant [41 x i8] c"the assignment suppression scanf feature\00", align 1
@.str.198 = private unnamed_addr constant [9 x i8] c"'a' flag\00", align 1
@.str.199 = private unnamed_addr constant [19 x i8] c"the 'a' scanf flag\00", align 1
@.str.200 = private unnamed_addr constant [9 x i8] c"'m' flag\00", align 1
@.str.201 = private unnamed_addr constant [19 x i8] c"the 'm' scanf flag\00", align 1
@.str.202 = private unnamed_addr constant [28 x i8] c"field width in scanf format\00", align 1
@.str.203 = private unnamed_addr constant [32 x i8] c"length modifier in scanf format\00", align 1
@.str.204 = private unnamed_addr constant [19 x i8] c"the ''' scanf flag\00", align 1
@.str.205 = private unnamed_addr constant [19 x i8] c"the 'I' scanf flag\00", align 1
@.str.206 = private unnamed_addr constant [6 x i8] c"ABZab\00", align 1
@.str.207 = private unnamed_addr constant [3 x i8] c"^#\00", align 1
@.str.208 = private unnamed_addr constant [3 x i8] c"cx\00", align 1
@.str.209 = private unnamed_addr constant [2 x i8] c"E\00", align 1
@.str.210 = private unnamed_addr constant [2 x i8] c"3\00", align 1
@.str.211 = private unnamed_addr constant [10 x i8] c"HIMSUWdmw\00", align 1
@.str.212 = private unnamed_addr constant [6 x i8] c"-_0Ow\00", align 1
@.str.213 = private unnamed_addr constant [2 x i8] c"o\00", align 1
@.str.214 = private unnamed_addr constant [2 x i8] c"#\00", align 1
@.str.215 = private unnamed_addr constant [2 x i8] c"X\00", align 1
@.str.216 = private unnamed_addr constant [2 x i8] c"y\00", align 1
@.str.217 = private unnamed_addr constant [7 x i8] c"EO-_0w\00", align 1
@.str.218 = private unnamed_addr constant [2 x i8] c"4\00", align 1
@.str.219 = private unnamed_addr constant [2 x i8] c"Y\00", align 1
@.str.220 = private unnamed_addr constant [7 x i8] c"-_0EOw\00", align 1
@.str.221 = private unnamed_addr constant [2 x i8] c"%\00", align 1
@.str.222 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.223 = private unnamed_addr constant [4 x i8] c"eVu\00", align 1
@.str.224 = private unnamed_addr constant [7 x i8] c"FRTnrt\00", align 1
@.str.225 = private unnamed_addr constant [2 x i8] c"g\00", align 1
@.str.226 = private unnamed_addr constant [6 x i8] c"O-_0w\00", align 1
@.str.227 = private unnamed_addr constant [3 x i8] c"2o\00", align 1
@.str.228 = private unnamed_addr constant [2 x i8] c"G\00", align 1
@.str.229 = private unnamed_addr constant [4 x i8] c"kls\00", align 1
@.str.230 = private unnamed_addr constant [2 x i8] c"P\00", align 1
@.str.231 = private unnamed_addr constant [9 x i8] c"'_' flag\00", align 1
@.str.232 = private unnamed_addr constant [22 x i8] c"the '_' strftime flag\00", align 1
@.str.233 = private unnamed_addr constant [22 x i8] c"the '-' strftime flag\00", align 1
@.str.234 = private unnamed_addr constant [22 x i8] c"the '0' strftime flag\00", align 1
@.str.235 = private unnamed_addr constant [9 x i8] c"'^' flag\00", align 1
@.str.236 = private unnamed_addr constant [22 x i8] c"the '^' strftime flag\00", align 1
@.str.237 = private unnamed_addr constant [22 x i8] c"the '#' strftime flag\00", align 1
@.str.238 = private unnamed_addr constant [31 x i8] c"field width in strftime format\00", align 1
@.str.239 = private unnamed_addr constant [13 x i8] c"'E' modifier\00", align 1
@.str.240 = private unnamed_addr constant [26 x i8] c"the 'E' strftime modifier\00", align 1
@.str.241 = private unnamed_addr constant [13 x i8] c"'O' modifier\00", align 1
@.str.242 = private unnamed_addr constant [26 x i8] c"the 'O' strftime modifier\00", align 1
@.str.243 = private unnamed_addr constant [17 x i8] c"the 'O' modifier\00", align 1
@.str.244 = private unnamed_addr constant [3 x i8] c"in\00", align 1
@.str.245 = private unnamed_addr constant [10 x i8] c"=^+(!-w#p\00", align 1
@.str.246 = private unnamed_addr constant [15 x i8] c"fill character\00", align 1
@.str.247 = private unnamed_addr constant [33 x i8] c"fill character in strfmon format\00", align 1
@.str.248 = private unnamed_addr constant [21 x i8] c"the '^' strfmon flag\00", align 1
@.str.249 = private unnamed_addr constant [21 x i8] c"the '+' strfmon flag\00", align 1
@.str.250 = private unnamed_addr constant [9 x i8] c"'(' flag\00", align 1
@.str.251 = private unnamed_addr constant [21 x i8] c"the '(' strfmon flag\00", align 1
@.str.252 = private unnamed_addr constant [9 x i8] c"'!' flag\00", align 1
@.str.253 = private unnamed_addr constant [21 x i8] c"the '!' strfmon flag\00", align 1
@.str.254 = private unnamed_addr constant [21 x i8] c"the '-' strfmon flag\00", align 1
@.str.255 = private unnamed_addr constant [30 x i8] c"field width in strfmon format\00", align 1
@.str.256 = private unnamed_addr constant [15 x i8] c"left precision\00", align 1
@.str.257 = private unnamed_addr constant [33 x i8] c"left precision in strfmon format\00", align 1
@.str.258 = private unnamed_addr constant [16 x i8] c"right precision\00", align 1
@.str.259 = private unnamed_addr constant [34 x i8] c"right precision in strfmon format\00", align 1
@.str.260 = private unnamed_addr constant [34 x i8] c"length modifier in strfmon format\00", align 1
@init_dynamic_asm_fprintf_info.hwi = internal global %union.tree_node* null, align 8, !dbg !2257
@.str.261 = private unnamed_addr constant [22 x i8] c"__gcc_host_wide_int__\00", align 1
@.str.262 = private unnamed_addr constant [51 x i8] c"%<__gcc_host_wide_int__%> is not defined as a type\00", align 1
@.str.263 = private unnamed_addr constant [70 x i8] c"%<__gcc_host_wide_int__%> is not defined as %<long%> or %<long long%>\00", align 1
@init_dynamic_gfc_info.locus = internal global %union.tree_node* null, align 8, !dbg !2263
@init_dynamic_gfc_info.gfc_fci = internal global %struct.format_char_info* null, align 8, !dbg !2266
@.str.264 = private unnamed_addr constant [6 x i8] c"locus\00", align 1
@.str.265 = private unnamed_addr constant [35 x i8] c"%<locus%> is not defined as a type\00", align 1
@init_dynamic_diag_info.t = internal global %union.tree_node* null, align 8, !dbg !2268
@init_dynamic_diag_info.loc = internal global %union.tree_node* null, align 8, !dbg !2271
@init_dynamic_diag_info.hwi = internal global %union.tree_node* null, align 8, !dbg !2273
@init_dynamic_diag_info.diag_fci = internal global %struct.format_char_info* null, align 8, !dbg !2275
@init_dynamic_diag_info.tdiag_fci = internal global %struct.format_char_info* null, align 8, !dbg !2277
@init_dynamic_diag_info.cdiag_fci = internal global %struct.format_char_info* null, align 8, !dbg !2279
@init_dynamic_diag_info.cxxdiag_fci = internal global %struct.format_char_info* null, align 8, !dbg !2281
@init_dynamic_diag_info.diag_ls = internal global %struct.format_length_info* null, align 8, !dbg !2283
@.str.266 = private unnamed_addr constant [11 x i8] c"location_t\00", align 1
@.str.267 = private unnamed_addr constant [40 x i8] c"%<location_t%> is not defined as a type\00", align 1
@.str.268 = private unnamed_addr constant [5 x i8] c"tree\00", align 1
@.str.269 = private unnamed_addr constant [34 x i8] c"%<tree%> is not defined as a type\00", align 1
@.str.270 = private unnamed_addr constant [42 x i8] c"%<tree%> is not defined as a pointer type\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_Wformat(i32 %setting) #0 !dbg !2290 {
entry:
  %setting.addr = alloca i32, align 4
  store i32 %setting, i32* %setting.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %setting.addr, metadata !2293, metadata !DIExpression()), !dbg !2294
  %0 = load i32, i32* %setting.addr, align 4, !dbg !2295
  store i32 %0, i32* @warn_format, align 4, !dbg !2296
  %1 = load i32, i32* %setting.addr, align 4, !dbg !2297
  store i32 %1, i32* @warn_format_extra_args, align 4, !dbg !2298
  %2 = load i32, i32* %setting.addr, align 4, !dbg !2299
  store i32 %2, i32* @warn_format_zero_length, align 4, !dbg !2300
  %3 = load i32, i32* %setting.addr, align 4, !dbg !2301
  store i32 %3, i32* @warn_format_contains_nul, align 4, !dbg !2302
  %4 = load i32, i32* %setting.addr, align 4, !dbg !2303
  %cmp = icmp ne i32 %4, 1, !dbg !2305
  br i1 %cmp, label %if.then, label %if.end, !dbg !2306

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %setting.addr, align 4, !dbg !2307
  store i32 %5, i32* @warn_format_nonliteral, align 4, !dbg !2309
  %6 = load i32, i32* %setting.addr, align 4, !dbg !2310
  store i32 %6, i32* @warn_format_security, align 4, !dbg !2311
  %7 = load i32, i32* %setting.addr, align 4, !dbg !2312
  store i32 %7, i32* @warn_format_y2k, align 4, !dbg !2313
  br label %if.end, !dbg !2314

if.end:                                           ; preds = %if.then, %entry
  %8 = load i32, i32* %setting.addr, align 4, !dbg !2315
  %tobool = icmp ne i32 %8, 0, !dbg !2315
  br i1 %tobool, label %if.then1, label %if.end2, !dbg !2317

if.then1:                                         ; preds = %if.end
  %9 = load i32, i32* %setting.addr, align 4, !dbg !2318
  store i32 %9, i32* @warn_nonnull, align 4, !dbg !2319
  br label %if.end2, !dbg !2320

if.end2:                                          ; preds = %if.then1, %if.end
  ret void, !dbg !2321
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @handle_format_arg_attribute(%union.tree_node** %node, %union.tree_node* %name, %union.tree_node* %args, i32 %flags, i8* %no_add_attrs) #0 !dbg !2322 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %node.addr = alloca %union.tree_node**, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %args.addr = alloca %union.tree_node*, align 8
  %flags.addr = alloca i32, align 4
  %no_add_attrs.addr = alloca i8*, align 8
  %type = alloca %union.tree_node*, align 8
  %format_num_expr = alloca %union.tree_node*, align 8
  %format_num = alloca i64, align 8
  %argument = alloca %union.tree_node*, align 8
  store %union.tree_node** %node, %union.tree_node*** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %node.addr, metadata !2326, metadata !DIExpression()), !dbg !2327
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !2328, metadata !DIExpression()), !dbg !2329
  store %union.tree_node* %args, %union.tree_node** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %args.addr, metadata !2330, metadata !DIExpression()), !dbg !2331
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !2332, metadata !DIExpression()), !dbg !2333
  store i8* %no_add_attrs, i8** %no_add_attrs.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %no_add_attrs.addr, metadata !2334, metadata !DIExpression()), !dbg !2335
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !2336, metadata !DIExpression()), !dbg !2337
  %0 = load %union.tree_node**, %union.tree_node*** %node.addr, align 8, !dbg !2338
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !2339
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !2337
  call void @llvm.dbg.declare(metadata %union.tree_node** %format_num_expr, metadata !2340, metadata !DIExpression()), !dbg !2341
  %2 = load %union.tree_node*, %union.tree_node** %args.addr, align 8, !dbg !2342
  %list = bitcast %union.tree_node* %2 to %struct.tree_list*, !dbg !2342
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !2342
  %3 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !2342
  store %union.tree_node* %3, %union.tree_node** %format_num_expr, align 8, !dbg !2341
  call void @llvm.dbg.declare(metadata i64* %format_num, metadata !2343, metadata !DIExpression()), !dbg !2344
  store i64 0, i64* %format_num, align 8, !dbg !2344
  call void @llvm.dbg.declare(metadata %union.tree_node** %argument, metadata !2345, metadata !DIExpression()), !dbg !2346
  %4 = load %union.tree_node*, %union.tree_node** %format_num_expr, align 8, !dbg !2347
  %call = call zeroext i8 @get_constant(%union.tree_node* %4, i64* %format_num, i32 0), !dbg !2349
  %tobool = icmp ne i8 %call, 0, !dbg !2349
  br i1 %tobool, label %if.end, label %if.then, !dbg !2350

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0)), !dbg !2351
  %5 = load i8*, i8** %no_add_attrs.addr, align 8, !dbg !2353
  store i8 1, i8* %5, align 1, !dbg !2354
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !2355
  br label %return, !dbg !2355

if.end:                                           ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2356
  %type1 = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !2356
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 1, !dbg !2356
  %7 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !2356
  store %union.tree_node* %7, %union.tree_node** %argument, align 8, !dbg !2357
  %8 = load %union.tree_node*, %union.tree_node** %argument, align 8, !dbg !2358
  %tobool2 = icmp ne %union.tree_node* %8, null, !dbg !2358
  br i1 %tobool2, label %if.then3, label %if.end8, !dbg !2360

if.then3:                                         ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %argument, align 8, !dbg !2361
  %10 = load i64, i64* %format_num, align 8, !dbg !2364
  %11 = load i32, i32* %flags.addr, align 4, !dbg !2365
  %12 = load i8*, i8** %no_add_attrs.addr, align 8, !dbg !2366
  %call4 = call zeroext i8 @check_format_string(%union.tree_node* %9, i64 %10, i32 %11, i8* %12), !dbg !2367
  %tobool5 = icmp ne i8 %call4, 0, !dbg !2367
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !2368

if.then6:                                         ; preds = %if.then3
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !2369
  br label %return, !dbg !2369

if.end7:                                          ; preds = %if.then3
  br label %if.end8, !dbg !2370

if.end8:                                          ; preds = %if.end7, %if.end
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2371
  %common = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !2371
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !2371
  %14 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !2371
  %base = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !2371
  %15 = bitcast %struct.tree_base* %base to i64*, !dbg !2371
  %bf.load = load i64, i64* %15, align 8, !dbg !2371
  %bf.clear = and i64 %bf.load, 65535, !dbg !2371
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2371
  %cmp = icmp ne i32 %bf.cast, 10, !dbg !2373
  br i1 %cmp, label %if.then16, label %lor.lhs.false, !dbg !2374

lor.lhs.false:                                    ; preds = %if.end8
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2375
  %common10 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !2375
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2, !dbg !2375
  %17 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !2375
  %common12 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !2375
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2, !dbg !2375
  %18 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !2375
  %type14 = bitcast %union.tree_node* %18 to %struct.tree_type*, !dbg !2375
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type14, i32 0, i32 16, !dbg !2375
  %19 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !2375
  %20 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 16, !dbg !2376
  %cmp15 = icmp ne %union.tree_node* %19, %20, !dbg !2377
  br i1 %cmp15, label %if.then16, label %if.end20, !dbg !2378

if.then16:                                        ; preds = %lor.lhs.false, %if.end8
  %21 = load i32, i32* %flags.addr, align 4, !dbg !2379
  %and = and i32 %21, 16, !dbg !2382
  %tobool17 = icmp ne i32 %and, 0, !dbg !2382
  br i1 %tobool17, label %if.end19, label %if.then18, !dbg !2383

if.then18:                                        ; preds = %if.then16
  call void (i8*, ...) @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0)), !dbg !2384
  br label %if.end19, !dbg !2384

if.end19:                                         ; preds = %if.then18, %if.then16
  %22 = load i8*, i8** %no_add_attrs.addr, align 8, !dbg !2385
  store i8 1, i8* %22, align 1, !dbg !2386
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !2387
  br label %return, !dbg !2387

if.end20:                                         ; preds = %lor.lhs.false
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !2388
  br label %return, !dbg !2388

return:                                           ; preds = %if.end20, %if.end19, %if.then6, %if.then
  %23 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !2389
  ret %union.tree_node* %23, !dbg !2389
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @get_constant(%union.tree_node* %expr, i64* %value, i32 %validated_p) #0 !dbg !2390 {
entry:
  %retval = alloca i8, align 1
  %expr.addr = alloca %union.tree_node*, align 8
  %value.addr = alloca i64*, align 8
  %validated_p.addr = alloca i32, align 4
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !2394, metadata !DIExpression()), !dbg !2395
  store i64* %value, i64** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %value.addr, metadata !2396, metadata !DIExpression()), !dbg !2397
  store i32 %validated_p, i32* %validated_p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %validated_p.addr, metadata !2398, metadata !DIExpression()), !dbg !2399
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2400
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !2400
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !2400
  %bf.load = load i64, i64* %1, align 8, !dbg !2400
  %bf.clear = and i64 %bf.load, 65535, !dbg !2400
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2400
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !2402
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !2403

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2404
  %int_cst = bitcast %union.tree_node* %2 to %struct.tree_int_cst*, !dbg !2404
  %int_cst1 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !2404
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst1, i32 0, i32 1, !dbg !2404
  %3 = load i64, i64* %high, align 8, !dbg !2404
  %cmp2 = icmp ne i64 %3, 0, !dbg !2405
  br i1 %cmp2, label %if.then, label %if.end, !dbg !2406

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load i32, i32* %validated_p.addr, align 4, !dbg !2407
  %tobool = icmp ne i32 %4, 0, !dbg !2407
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2407

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i32 160, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)), !dbg !2407
  br label %cond.end, !dbg !2407

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !2407

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2407
  store i8 0, i8* %retval, align 1, !dbg !2409
  br label %return, !dbg !2409

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !2410
  %int_cst3 = bitcast %union.tree_node* %5 to %struct.tree_int_cst*, !dbg !2410
  %int_cst4 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst3, i32 0, i32 1, !dbg !2410
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst4, i32 0, i32 0, !dbg !2410
  %6 = load i64, i64* %low, align 8, !dbg !2410
  %7 = load i64*, i64** %value.addr, align 8, !dbg !2411
  store i64 %6, i64* %7, align 8, !dbg !2412
  store i8 1, i8* %retval, align 1, !dbg !2413
  br label %return, !dbg !2413

return:                                           ; preds = %if.end, %cond.end
  %8 = load i8, i8* %retval, align 1, !dbg !2414
  ret i8 %8, !dbg !2414
}

declare dso_local void @error(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @check_format_string(%union.tree_node* %argument, i64 %format_num, i32 %flags, i8* %no_add_attrs) #0 !dbg !2415 {
entry:
  %retval = alloca i8, align 1
  %argument.addr = alloca %union.tree_node*, align 8
  %format_num.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %no_add_attrs.addr = alloca i8*, align 8
  %i = alloca i64, align 8
  store %union.tree_node* %argument, %union.tree_node** %argument.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %argument.addr, metadata !2418, metadata !DIExpression()), !dbg !2419
  store i64 %format_num, i64* %format_num.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %format_num.addr, metadata !2420, metadata !DIExpression()), !dbg !2421
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !2422, metadata !DIExpression()), !dbg !2423
  store i8* %no_add_attrs, i8** %no_add_attrs.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %no_add_attrs.addr, metadata !2424, metadata !DIExpression()), !dbg !2425
  call void @llvm.dbg.declare(metadata i64* %i, metadata !2426, metadata !DIExpression()), !dbg !2427
  store i64 1, i64* %i, align 8, !dbg !2428
  br label %for.cond, !dbg !2430

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8, !dbg !2431
  %1 = load i64, i64* %format_num.addr, align 8, !dbg !2433
  %cmp = icmp ne i64 %0, %1, !dbg !2434
  br i1 %cmp, label %for.body, label %for.end, !dbg !2435

for.body:                                         ; preds = %for.cond
  %2 = load %union.tree_node*, %union.tree_node** %argument.addr, align 8, !dbg !2436
  %cmp1 = icmp eq %union.tree_node* %2, null, !dbg !2439
  br i1 %cmp1, label %if.then, label %if.end, !dbg !2440

if.then:                                          ; preds = %for.body
  br label %for.end, !dbg !2441

if.end:                                           ; preds = %for.body
  %3 = load %union.tree_node*, %union.tree_node** %argument.addr, align 8, !dbg !2442
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !2442
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !2442
  %4 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !2442
  store %union.tree_node* %4, %union.tree_node** %argument.addr, align 8, !dbg !2443
  br label %for.inc, !dbg !2444

for.inc:                                          ; preds = %if.end
  %5 = load i64, i64* %i, align 8, !dbg !2445
  %inc = add i64 %5, 1, !dbg !2445
  store i64 %inc, i64* %i, align 8, !dbg !2445
  br label %for.cond, !dbg !2446, !llvm.loop !2447

for.end:                                          ; preds = %if.then, %for.cond
  %6 = load %union.tree_node*, %union.tree_node** %argument.addr, align 8, !dbg !2449
  %tobool = icmp ne %union.tree_node* %6, null, !dbg !2449
  br i1 %tobool, label %lor.lhs.false, label %if.then9, !dbg !2451

lor.lhs.false:                                    ; preds = %for.end
  %7 = load %union.tree_node*, %union.tree_node** %argument.addr, align 8, !dbg !2452
  %list = bitcast %union.tree_node* %7 to %struct.tree_list*, !dbg !2452
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !2452
  %8 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !2452
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !2452
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !2452
  %bf.load = load i64, i64* %9, align 8, !dbg !2452
  %bf.clear = and i64 %bf.load, 65535, !dbg !2452
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2452
  %cmp2 = icmp ne i32 %bf.cast, 10, !dbg !2453
  br i1 %cmp2, label %if.then9, label %lor.lhs.false3, !dbg !2454

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %10 = load %union.tree_node*, %union.tree_node** %argument.addr, align 8, !dbg !2455
  %list4 = bitcast %union.tree_node* %10 to %struct.tree_list*, !dbg !2455
  %value5 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list4, i32 0, i32 2, !dbg !2455
  %11 = load %union.tree_node*, %union.tree_node** %value5, align 8, !dbg !2455
  %common6 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !2455
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !2455
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2455
  %type7 = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !2455
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type7, i32 0, i32 16, !dbg !2455
  %13 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !2455
  %14 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 16, !dbg !2456
  %cmp8 = icmp ne %union.tree_node* %13, %14, !dbg !2457
  br i1 %cmp8, label %if.then9, label %if.end13, !dbg !2458

if.then9:                                         ; preds = %lor.lhs.false3, %lor.lhs.false, %for.end
  %15 = load i32, i32* %flags.addr, align 4, !dbg !2459
  %and = and i32 %15, 16, !dbg !2462
  %tobool10 = icmp ne i32 %and, 0, !dbg !2462
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !2463

if.then11:                                        ; preds = %if.then9
  call void (i8*, ...) @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.8, i64 0, i64 0)), !dbg !2464
  br label %if.end12, !dbg !2464

if.end12:                                         ; preds = %if.then11, %if.then9
  %16 = load i8*, i8** %no_add_attrs.addr, align 8, !dbg !2465
  store i8 1, i8* %16, align 1, !dbg !2466
  store i8 0, i8* %retval, align 1, !dbg !2467
  br label %return, !dbg !2467

if.end13:                                         ; preds = %lor.lhs.false3
  store i8 1, i8* %retval, align 1, !dbg !2468
  br label %return, !dbg !2468

return:                                           ; preds = %if.end13, %if.end12
  %17 = load i8, i8* %retval, align 1, !dbg !2469
  ret i8 %17, !dbg !2469
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @check_function_format(%union.tree_node* %attrs, i32 %nargs, %union.tree_node** %argarray) #0 !dbg !2470 {
entry:
  %attrs.addr = alloca %union.tree_node*, align 8
  %nargs.addr = alloca i32, align 4
  %argarray.addr = alloca %union.tree_node**, align 8
  %a = alloca %union.tree_node*, align 8
  %info = alloca %struct.function_format_info, align 8
  %params = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %c = alloca %union.tree_node*, align 8
  %args = alloca %union.tree_node*, align 8
  store %union.tree_node* %attrs, %union.tree_node** %attrs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %attrs.addr, metadata !2473, metadata !DIExpression()), !dbg !2474
  store i32 %nargs, i32* %nargs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nargs.addr, metadata !2475, metadata !DIExpression()), !dbg !2476
  store %union.tree_node** %argarray, %union.tree_node*** %argarray.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %argarray.addr, metadata !2477, metadata !DIExpression()), !dbg !2478
  call void @llvm.dbg.declare(metadata %union.tree_node** %a, metadata !2479, metadata !DIExpression()), !dbg !2480
  %0 = load %union.tree_node*, %union.tree_node** %attrs.addr, align 8, !dbg !2481
  store %union.tree_node* %0, %union.tree_node** %a, align 8, !dbg !2483
  br label %for.cond, !dbg !2484

for.cond:                                         ; preds = %for.inc68, %entry
  %1 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !2485
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !2487
  br i1 %tobool, label %for.body, label %for.end71, !dbg !2487

for.body:                                         ; preds = %for.cond
  %2 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !2488
  %list = bitcast %union.tree_node* %2 to %struct.tree_list*, !dbg !2488
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1, !dbg !2488
  %3 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !2488
  %call = call i32 @is_attribute_p(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), %union.tree_node* %3), !dbg !2491
  %tobool1 = icmp ne i32 %call, 0, !dbg !2491
  br i1 %tobool1, label %if.then, label %if.end67, !dbg !2492

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.function_format_info* %info, metadata !2493, metadata !DIExpression()), !dbg !2495
  %4 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !2496
  %list2 = bitcast %union.tree_node* %4 to %struct.tree_list*, !dbg !2496
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list2, i32 0, i32 2, !dbg !2496
  %5 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !2496
  %call3 = call zeroext i8 @decode_format_attr(%union.tree_node* %5, %struct.function_format_info* %info, i32 1), !dbg !2497
  %6 = load i32, i32* @warn_format, align 4, !dbg !2498
  %tobool4 = icmp ne i32 %6, 0, !dbg !2498
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !2500

if.then5:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata %union.tree_node** %params, metadata !2501, metadata !DIExpression()), !dbg !2503
  store %union.tree_node* null, %union.tree_node** %params, align 8, !dbg !2503
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2504, metadata !DIExpression()), !dbg !2505
  %7 = load i32, i32* %nargs.addr, align 4, !dbg !2506
  %sub = sub nsw i32 %7, 1, !dbg !2508
  store i32 %sub, i32* %i, align 4, !dbg !2509
  br label %for.cond6, !dbg !2510

for.cond6:                                        ; preds = %for.inc, %if.then5
  %8 = load i32, i32* %i, align 4, !dbg !2511
  %cmp = icmp sge i32 %8, 0, !dbg !2513
  br i1 %cmp, label %for.body7, label %for.end, !dbg !2514

for.body7:                                        ; preds = %for.cond6
  %9 = load %union.tree_node**, %union.tree_node*** %argarray.addr, align 8, !dbg !2515
  %10 = load i32, i32* %i, align 4, !dbg !2515
  %idxprom = sext i32 %10 to i64, !dbg !2515
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %9, i64 %idxprom, !dbg !2515
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !2515
  %12 = load %union.tree_node*, %union.tree_node** %params, align 8, !dbg !2515
  %call8 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %11, %union.tree_node* %12), !dbg !2515
  store %union.tree_node* %call8, %union.tree_node** %params, align 8, !dbg !2516
  br label %for.inc, !dbg !2517

for.inc:                                          ; preds = %for.body7
  %13 = load i32, i32* %i, align 4, !dbg !2518
  %dec = add nsw i32 %13, -1, !dbg !2518
  store i32 %dec, i32* %i, align 4, !dbg !2518
  br label %for.cond6, !dbg !2519, !llvm.loop !2520

for.end:                                          ; preds = %for.cond6
  %14 = load %union.tree_node*, %union.tree_node** %params, align 8, !dbg !2522
  call void @check_format_info(%struct.function_format_info* %info, %union.tree_node* %14), !dbg !2523
  br label %if.end, !dbg !2524

if.end:                                           ; preds = %for.end, %if.then
  %15 = load i32, i32* @warn_missing_format_attribute, align 4, !dbg !2525
  %tobool9 = icmp ne i32 %15, 0, !dbg !2525
  br i1 %tobool9, label %land.lhs.true, label %if.end66, !dbg !2527

land.lhs.true:                                    ; preds = %if.end
  %first_arg_num = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 2, !dbg !2528
  %16 = load i64, i64* %first_arg_num, align 8, !dbg !2528
  %cmp10 = icmp eq i64 %16, 0, !dbg !2529
  br i1 %cmp10, label %land.lhs.true11, label %if.end66, !dbg !2530

land.lhs.true11:                                  ; preds = %land.lhs.true
  %17 = load %struct.format_kind_info*, %struct.format_kind_info** @format_types, align 8, !dbg !2531
  %format_type = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 0, !dbg !2532
  %18 = load i32, i32* %format_type, align 8, !dbg !2532
  %idxprom12 = sext i32 %18 to i64, !dbg !2531
  %arrayidx13 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %17, i64 %idxprom12, !dbg !2531
  %flags = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %arrayidx13, i32 0, i32 7, !dbg !2533
  %19 = load i32, i32* %flags, align 8, !dbg !2533
  %and = and i32 %19, 1, !dbg !2534
  %tobool14 = icmp ne i32 %and, 0, !dbg !2534
  br i1 %tobool14, label %if.then15, label %if.end66, !dbg !2535

if.then15:                                        ; preds = %land.lhs.true11
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !2536, metadata !DIExpression()), !dbg !2538
  %20 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !2539
  %common = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !2539
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !2539
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2539
  %type16 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !2539
  %attributes = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type16, i32 0, i32 4, !dbg !2539
  %22 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !2539
  store %union.tree_node* %22, %union.tree_node** %c, align 8, !dbg !2541
  br label %for.cond17, !dbg !2542

for.cond17:                                       ; preds = %for.inc34, %if.then15
  %23 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !2543
  %tobool18 = icmp ne %union.tree_node* %23, null, !dbg !2545
  br i1 %tobool18, label %for.body19, label %for.end36, !dbg !2545

for.body19:                                       ; preds = %for.cond17
  %24 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !2546
  %list20 = bitcast %union.tree_node* %24 to %struct.tree_list*, !dbg !2546
  %purpose21 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list20, i32 0, i32 1, !dbg !2546
  %25 = load %union.tree_node*, %union.tree_node** %purpose21, align 8, !dbg !2546
  %call22 = call i32 @is_attribute_p(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), %union.tree_node* %25), !dbg !2548
  %tobool23 = icmp ne i32 %call22, 0, !dbg !2548
  br i1 %tobool23, label %land.lhs.true24, label %if.end33, !dbg !2549

land.lhs.true24:                                  ; preds = %for.body19
  %26 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !2550
  %list25 = bitcast %union.tree_node* %26 to %struct.tree_list*, !dbg !2550
  %value26 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list25, i32 0, i32 2, !dbg !2550
  %27 = load %union.tree_node*, %union.tree_node** %value26, align 8, !dbg !2550
  %list27 = bitcast %union.tree_node* %27 to %struct.tree_list*, !dbg !2550
  %value28 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list27, i32 0, i32 2, !dbg !2550
  %28 = load %union.tree_node*, %union.tree_node** %value28, align 8, !dbg !2550
  %identifier = bitcast %union.tree_node* %28 to %struct.tree_identifier*, !dbg !2550
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !2550
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !2550
  %29 = load i8*, i8** %str, align 8, !dbg !2550
  %call29 = call i32 @decode_format_type(i8* %29), !dbg !2551
  %format_type30 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 0, !dbg !2552
  %30 = load i32, i32* %format_type30, align 8, !dbg !2552
  %cmp31 = icmp eq i32 %call29, %30, !dbg !2553
  br i1 %cmp31, label %if.then32, label %if.end33, !dbg !2554

if.then32:                                        ; preds = %land.lhs.true24
  br label %for.end36, !dbg !2555

if.end33:                                         ; preds = %land.lhs.true24, %for.body19
  br label %for.inc34, !dbg !2556

for.inc34:                                        ; preds = %if.end33
  %31 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !2557
  %common35 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !2557
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 1, !dbg !2557
  %32 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !2557
  store %union.tree_node* %32, %union.tree_node** %c, align 8, !dbg !2558
  br label %for.cond17, !dbg !2559, !llvm.loop !2560

for.end36:                                        ; preds = %if.then32, %for.cond17
  %33 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !2562
  %cmp37 = icmp eq %union.tree_node* %33, null, !dbg !2564
  br i1 %cmp37, label %if.then38, label %if.end65, !dbg !2565

if.then38:                                        ; preds = %for.end36
  call void @llvm.dbg.declare(metadata %union.tree_node** %args, metadata !2566, metadata !DIExpression()), !dbg !2568
  %34 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !2569
  %decl_non_common = bitcast %union.tree_node* %34 to %struct.tree_decl_non_common*, !dbg !2569
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !2569
  %35 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !2569
  store %union.tree_node* %35, %union.tree_node** %args, align 8, !dbg !2571
  br label %for.cond39, !dbg !2572

for.cond39:                                       ; preds = %for.inc54, %if.then38
  %36 = load %union.tree_node*, %union.tree_node** %args, align 8, !dbg !2573
  %cmp40 = icmp ne %union.tree_node* %36, null, !dbg !2575
  br i1 %cmp40, label %for.body41, label %for.end57, !dbg !2576

for.body41:                                       ; preds = %for.cond39
  %37 = load %union.tree_node*, %union.tree_node** %args, align 8, !dbg !2577
  %common42 = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !2577
  %type43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 2, !dbg !2577
  %38 = load %union.tree_node*, %union.tree_node** %type43, align 8, !dbg !2577
  %base = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !2577
  %39 = bitcast %struct.tree_base* %base to i64*, !dbg !2577
  %bf.load = load i64, i64* %39, align 8, !dbg !2577
  %bf.clear = and i64 %bf.load, 65535, !dbg !2577
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2577
  %cmp44 = icmp eq i32 %bf.cast, 10, !dbg !2580
  br i1 %cmp44, label %land.lhs.true45, label %if.end53, !dbg !2581

land.lhs.true45:                                  ; preds = %for.body41
  %40 = load %union.tree_node*, %union.tree_node** %args, align 8, !dbg !2582
  %common46 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !2582
  %type47 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common46, i32 0, i32 2, !dbg !2582
  %41 = load %union.tree_node*, %union.tree_node** %type47, align 8, !dbg !2582
  %common48 = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !2582
  %type49 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common48, i32 0, i32 2, !dbg !2582
  %42 = load %union.tree_node*, %union.tree_node** %type49, align 8, !dbg !2582
  %type50 = bitcast %union.tree_node* %42 to %struct.tree_type*, !dbg !2582
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type50, i32 0, i32 16, !dbg !2582
  %43 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !2582
  %44 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 16, !dbg !2583
  %cmp51 = icmp eq %union.tree_node* %43, %44, !dbg !2584
  br i1 %cmp51, label %if.then52, label %if.end53, !dbg !2585

if.then52:                                        ; preds = %land.lhs.true45
  br label %for.end57, !dbg !2586

if.end53:                                         ; preds = %land.lhs.true45, %for.body41
  br label %for.inc54, !dbg !2587

for.inc54:                                        ; preds = %if.end53
  %45 = load %union.tree_node*, %union.tree_node** %args, align 8, !dbg !2588
  %common55 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !2588
  %chain56 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common55, i32 0, i32 1, !dbg !2588
  %46 = load %union.tree_node*, %union.tree_node** %chain56, align 8, !dbg !2588
  store %union.tree_node* %46, %union.tree_node** %args, align 8, !dbg !2589
  br label %for.cond39, !dbg !2590, !llvm.loop !2591

for.end57:                                        ; preds = %if.then52, %for.cond39
  %47 = load %union.tree_node*, %union.tree_node** %args, align 8, !dbg !2593
  %cmp58 = icmp ne %union.tree_node* %47, null, !dbg !2595
  br i1 %cmp58, label %if.then59, label %if.end64, !dbg !2596

if.then59:                                        ; preds = %for.end57
  %48 = load %struct.format_kind_info*, %struct.format_kind_info** @format_types, align 8, !dbg !2597
  %format_type60 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 0, !dbg !2598
  %49 = load i32, i32* %format_type60, align 8, !dbg !2598
  %idxprom61 = sext i32 %49 to i64, !dbg !2597
  %arrayidx62 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %48, i64 %idxprom61, !dbg !2597
  %name = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %arrayidx62, i32 0, i32 0, !dbg !2599
  %50 = load i8*, i8** %name, align 8, !dbg !2599
  %call63 = call zeroext i8 (i32, i8*, ...) @warning(i32 131, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i64 0, i64 0), i8* %50), !dbg !2600
  br label %if.end64, !dbg !2600

if.end64:                                         ; preds = %if.then59, %for.end57
  br label %if.end65, !dbg !2601

if.end65:                                         ; preds = %if.end64, %for.end36
  br label %if.end66, !dbg !2602

if.end66:                                         ; preds = %if.end65, %land.lhs.true11, %land.lhs.true, %if.end
  br label %if.end67, !dbg !2603

if.end67:                                         ; preds = %if.end66, %for.body
  br label %for.inc68, !dbg !2604

for.inc68:                                        ; preds = %if.end67
  %51 = load %union.tree_node*, %union.tree_node** %a, align 8, !dbg !2605
  %common69 = bitcast %union.tree_node* %51 to %struct.tree_common*, !dbg !2605
  %chain70 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common69, i32 0, i32 1, !dbg !2605
  %52 = load %union.tree_node*, %union.tree_node** %chain70, align 8, !dbg !2605
  store %union.tree_node* %52, %union.tree_node** %a, align 8, !dbg !2606
  br label %for.cond, !dbg !2607, !llvm.loop !2608

for.end71:                                        ; preds = %for.cond
  ret void, !dbg !2610
}

declare dso_local i32 @is_attribute_p(i8*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @decode_format_attr(%union.tree_node* %args, %struct.function_format_info* %info, i32 %validated_p) #0 !dbg !2611 {
entry:
  %retval = alloca i8, align 1
  %args.addr = alloca %union.tree_node*, align 8
  %info.addr = alloca %struct.function_format_info*, align 8
  %validated_p.addr = alloca i32, align 4
  %format_type_id = alloca %union.tree_node*, align 8
  %format_num_expr = alloca %union.tree_node*, align 8
  %first_arg_num_expr = alloca %union.tree_node*, align 8
  %p = alloca i8*, align 8
  store %union.tree_node* %args, %union.tree_node** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %args.addr, metadata !2614, metadata !DIExpression()), !dbg !2615
  store %struct.function_format_info* %info, %struct.function_format_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function_format_info** %info.addr, metadata !2616, metadata !DIExpression()), !dbg !2617
  store i32 %validated_p, i32* %validated_p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %validated_p.addr, metadata !2618, metadata !DIExpression()), !dbg !2619
  call void @llvm.dbg.declare(metadata %union.tree_node** %format_type_id, metadata !2620, metadata !DIExpression()), !dbg !2621
  %0 = load %union.tree_node*, %union.tree_node** %args.addr, align 8, !dbg !2622
  %list = bitcast %union.tree_node* %0 to %struct.tree_list*, !dbg !2622
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !2622
  %1 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !2622
  store %union.tree_node* %1, %union.tree_node** %format_type_id, align 8, !dbg !2621
  call void @llvm.dbg.declare(metadata %union.tree_node** %format_num_expr, metadata !2623, metadata !DIExpression()), !dbg !2624
  %2 = load %union.tree_node*, %union.tree_node** %args.addr, align 8, !dbg !2625
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !2625
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !2625
  %3 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !2625
  %list1 = bitcast %union.tree_node* %3 to %struct.tree_list*, !dbg !2625
  %value2 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1, i32 0, i32 2, !dbg !2625
  %4 = load %union.tree_node*, %union.tree_node** %value2, align 8, !dbg !2625
  store %union.tree_node* %4, %union.tree_node** %format_num_expr, align 8, !dbg !2624
  call void @llvm.dbg.declare(metadata %union.tree_node** %first_arg_num_expr, metadata !2626, metadata !DIExpression()), !dbg !2627
  %5 = load %union.tree_node*, %union.tree_node** %args.addr, align 8, !dbg !2628
  %common3 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !2628
  %chain4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 1, !dbg !2628
  %6 = load %union.tree_node*, %union.tree_node** %chain4, align 8, !dbg !2628
  %common5 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !2628
  %chain6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 1, !dbg !2628
  %7 = load %union.tree_node*, %union.tree_node** %chain6, align 8, !dbg !2628
  %list7 = bitcast %union.tree_node* %7 to %struct.tree_list*, !dbg !2628
  %value8 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list7, i32 0, i32 2, !dbg !2628
  %8 = load %union.tree_node*, %union.tree_node** %value8, align 8, !dbg !2628
  store %union.tree_node* %8, %union.tree_node** %first_arg_num_expr, align 8, !dbg !2627
  %9 = load %union.tree_node*, %union.tree_node** %format_type_id, align 8, !dbg !2629
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !2629
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !2629
  %bf.load = load i64, i64* %10, align 8, !dbg !2629
  %bf.clear = and i64 %bf.load, 65535, !dbg !2629
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2629
  %cmp = icmp ne i32 %bf.cast, 1, !dbg !2631
  br i1 %cmp, label %if.then, label %if.else, !dbg !2632

if.then:                                          ; preds = %entry
  %11 = load i32, i32* %validated_p.addr, align 4, !dbg !2633
  %tobool = icmp ne i32 %11, 0, !dbg !2633
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2633

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i32 186, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)), !dbg !2633
  br label %cond.end, !dbg !2633

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !2633

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2633
  call void (i8*, ...) @error(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.9, i64 0, i64 0)), !dbg !2635
  store i8 0, i8* %retval, align 1, !dbg !2636
  br label %return, !dbg !2636

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8** %p, metadata !2637, metadata !DIExpression()), !dbg !2639
  %12 = load %union.tree_node*, %union.tree_node** %format_type_id, align 8, !dbg !2640
  %identifier = bitcast %union.tree_node* %12 to %struct.tree_identifier*, !dbg !2640
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !2640
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !2640
  %13 = load i8*, i8** %str, align 8, !dbg !2640
  store i8* %13, i8** %p, align 8, !dbg !2639
  %14 = load i8*, i8** %p, align 8, !dbg !2641
  %call = call i8* @convert_format_name_to_system_name(i8* %14), !dbg !2642
  store i8* %call, i8** %p, align 8, !dbg !2643
  %15 = load i8*, i8** %p, align 8, !dbg !2644
  %call9 = call i32 @decode_format_type(i8* %15), !dbg !2645
  %16 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !2646
  %format_type = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %16, i32 0, i32 0, !dbg !2647
  store i32 %call9, i32* %format_type, align 8, !dbg !2648
  %17 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !2649
  %format_type10 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %17, i32 0, i32 0, !dbg !2651
  %18 = load i32, i32* %format_type10, align 8, !dbg !2651
  %cmp11 = icmp eq i32 %18, -1, !dbg !2652
  br i1 %cmp11, label %if.then12, label %if.end, !dbg !2653

if.then12:                                        ; preds = %if.else
  %19 = load i32, i32* %validated_p.addr, align 4, !dbg !2654
  %tobool13 = icmp ne i32 %19, 0, !dbg !2654
  br i1 %tobool13, label %cond.true14, label %cond.false15, !dbg !2654

cond.true14:                                      ; preds = %if.then12
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i32 200, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)), !dbg !2654
  br label %cond.end16, !dbg !2654

cond.false15:                                     ; preds = %if.then12
  br label %cond.end16, !dbg !2654

cond.end16:                                       ; preds = %cond.false15, %cond.true14
  %cond17 = phi i32 [ 0, %cond.true14 ], [ 0, %cond.false15 ], !dbg !2654
  %20 = load %union.tree_node*, %union.tree_node** %format_type_id, align 8, !dbg !2656
  %call18 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.10, i64 0, i64 0), %union.tree_node* %20), !dbg !2657
  store i8 0, i8* %retval, align 1, !dbg !2658
  br label %return, !dbg !2658

if.end:                                           ; preds = %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end
  %21 = load %union.tree_node*, %union.tree_node** %format_num_expr, align 8, !dbg !2659
  %22 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !2661
  %format_num = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %22, i32 0, i32 1, !dbg !2662
  %23 = load i32, i32* %validated_p.addr, align 4, !dbg !2663
  %call20 = call zeroext i8 @get_constant(%union.tree_node* %21, i64* %format_num, i32 %23), !dbg !2664
  %tobool21 = icmp ne i8 %call20, 0, !dbg !2664
  br i1 %tobool21, label %if.end23, label %if.then22, !dbg !2665

if.then22:                                        ; preds = %if.end19
  call void (i8*, ...) @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0)), !dbg !2666
  store i8 0, i8* %retval, align 1, !dbg !2668
  br label %return, !dbg !2668

if.end23:                                         ; preds = %if.end19
  %24 = load %union.tree_node*, %union.tree_node** %first_arg_num_expr, align 8, !dbg !2669
  %25 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !2671
  %first_arg_num = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %25, i32 0, i32 2, !dbg !2672
  %26 = load i32, i32* %validated_p.addr, align 4, !dbg !2673
  %call24 = call zeroext i8 @get_constant(%union.tree_node* %24, i64* %first_arg_num, i32 %26), !dbg !2674
  %tobool25 = icmp ne i8 %call24, 0, !dbg !2674
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !2675

if.then26:                                        ; preds = %if.end23
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.11, i64 0, i64 0)), !dbg !2676
  store i8 0, i8* %retval, align 1, !dbg !2678
  br label %return, !dbg !2678

if.end27:                                         ; preds = %if.end23
  %27 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !2679
  %first_arg_num28 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %27, i32 0, i32 2, !dbg !2681
  %28 = load i64, i64* %first_arg_num28, align 8, !dbg !2681
  %cmp29 = icmp ne i64 %28, 0, !dbg !2682
  br i1 %cmp29, label %land.lhs.true, label %if.end39, !dbg !2683

land.lhs.true:                                    ; preds = %if.end27
  %29 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !2684
  %first_arg_num30 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %29, i32 0, i32 2, !dbg !2685
  %30 = load i64, i64* %first_arg_num30, align 8, !dbg !2685
  %31 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !2686
  %format_num31 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %31, i32 0, i32 1, !dbg !2687
  %32 = load i64, i64* %format_num31, align 8, !dbg !2687
  %cmp32 = icmp ule i64 %30, %32, !dbg !2688
  br i1 %cmp32, label %if.then33, label %if.end39, !dbg !2689

if.then33:                                        ; preds = %land.lhs.true
  %33 = load i32, i32* %validated_p.addr, align 4, !dbg !2690
  %tobool34 = icmp ne i32 %33, 0, !dbg !2690
  br i1 %tobool34, label %cond.true35, label %cond.false36, !dbg !2690

cond.true35:                                      ; preds = %if.then33
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i32 221, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)), !dbg !2690
  br label %cond.end37, !dbg !2690

cond.false36:                                     ; preds = %if.then33
  br label %cond.end37, !dbg !2690

cond.end37:                                       ; preds = %cond.false36, %cond.true35
  %cond38 = phi i32 [ 0, %cond.true35 ], [ 0, %cond.false36 ], !dbg !2690
  call void (i8*, ...) @error(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.12, i64 0, i64 0)), !dbg !2692
  store i8 0, i8* %retval, align 1, !dbg !2693
  br label %return, !dbg !2693

if.end39:                                         ; preds = %land.lhs.true, %if.end27
  store i8 1, i8* %retval, align 1, !dbg !2694
  br label %return, !dbg !2694

return:                                           ; preds = %if.end39, %cond.end37, %if.then26, %if.then22, %cond.end16, %cond.end
  %34 = load i8, i8* %retval, align 1, !dbg !2695
  ret i8 %34, !dbg !2695
}

declare dso_local %union.tree_node* @tree_cons_stat(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @check_format_info(%struct.function_format_info* %info, %union.tree_node* %params) #0 !dbg !2696 {
entry:
  %info.addr = alloca %struct.function_format_info*, align 8
  %params.addr = alloca %union.tree_node*, align 8
  %format_ctx = alloca %struct.format_check_context, align 8
  %arg_num = alloca i64, align 8
  %format_tree = alloca %union.tree_node*, align 8
  %res = alloca %struct.format_check_results, align 4
  store %struct.function_format_info* %info, %struct.function_format_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function_format_info** %info.addr, metadata !2699, metadata !DIExpression()), !dbg !2700
  store %union.tree_node* %params, %union.tree_node** %params.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %params.addr, metadata !2701, metadata !DIExpression()), !dbg !2702
  call void @llvm.dbg.declare(metadata %struct.format_check_context* %format_ctx, metadata !2703, metadata !DIExpression()), !dbg !2704
  call void @llvm.dbg.declare(metadata i64* %arg_num, metadata !2705, metadata !DIExpression()), !dbg !2706
  call void @llvm.dbg.declare(metadata %union.tree_node** %format_tree, metadata !2707, metadata !DIExpression()), !dbg !2708
  call void @llvm.dbg.declare(metadata %struct.format_check_results* %res, metadata !2709, metadata !DIExpression()), !dbg !2710
  store i64 1, i64* %arg_num, align 8, !dbg !2711
  br label %for.cond, !dbg !2713

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !2714
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !2718
  br i1 %cmp, label %if.then, label %if.end, !dbg !2719

if.then:                                          ; preds = %for.cond
  br label %if.end88, !dbg !2720

if.end:                                           ; preds = %for.cond
  %1 = load i64, i64* %arg_num, align 8, !dbg !2721
  %2 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !2723
  %format_num = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %2, i32 0, i32 1, !dbg !2724
  %3 = load i64, i64* %format_num, align 8, !dbg !2724
  %cmp1 = icmp eq i64 %1, %3, !dbg !2725
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !2726

if.then2:                                         ; preds = %if.end
  br label %for.end, !dbg !2727

if.end3:                                          ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !2728
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !2728
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !2728
  %5 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !2728
  store %union.tree_node* %5, %union.tree_node** %params.addr, align 8, !dbg !2729
  br label %for.inc, !dbg !2730

for.inc:                                          ; preds = %if.end3
  %6 = load i64, i64* %arg_num, align 8, !dbg !2731
  %inc = add i64 %6, 1, !dbg !2731
  store i64 %inc, i64* %arg_num, align 8, !dbg !2731
  br label %for.cond, !dbg !2732, !llvm.loop !2733

for.end:                                          ; preds = %if.then2
  %7 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !2736
  %list = bitcast %union.tree_node* %7 to %struct.tree_list*, !dbg !2736
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !2736
  %8 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !2736
  store %union.tree_node* %8, %union.tree_node** %format_tree, align 8, !dbg !2737
  %9 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !2738
  %common4 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !2738
  %chain5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 1, !dbg !2738
  %10 = load %union.tree_node*, %union.tree_node** %chain5, align 8, !dbg !2738
  store %union.tree_node* %10, %union.tree_node** %params.addr, align 8, !dbg !2739
  %11 = load %union.tree_node*, %union.tree_node** %format_tree, align 8, !dbg !2740
  %cmp6 = icmp eq %union.tree_node* %11, null, !dbg !2742
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !2743

if.then7:                                         ; preds = %for.end
  br label %if.end88, !dbg !2744

if.end8:                                          ; preds = %for.end
  %number_non_literal = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %res, i32 0, i32 0, !dbg !2745
  store i32 0, i32* %number_non_literal, align 4, !dbg !2746
  %number_extra_args = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %res, i32 0, i32 1, !dbg !2747
  store i32 0, i32* %number_extra_args, align 4, !dbg !2748
  %number_dollar_extra_args = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %res, i32 0, i32 2, !dbg !2749
  store i32 0, i32* %number_dollar_extra_args, align 4, !dbg !2750
  %number_wide = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %res, i32 0, i32 3, !dbg !2751
  store i32 0, i32* %number_wide, align 4, !dbg !2752
  %number_empty = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %res, i32 0, i32 4, !dbg !2753
  store i32 0, i32* %number_empty, align 4, !dbg !2754
  %number_unterminated = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %res, i32 0, i32 5, !dbg !2755
  store i32 0, i32* %number_unterminated, align 4, !dbg !2756
  %number_other = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %res, i32 0, i32 6, !dbg !2757
  store i32 0, i32* %number_other, align 4, !dbg !2758
  %res9 = getelementptr inbounds %struct.format_check_context, %struct.format_check_context* %format_ctx, i32 0, i32 0, !dbg !2759
  store %struct.format_check_results* %res, %struct.format_check_results** %res9, align 8, !dbg !2760
  %12 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !2761
  %info10 = getelementptr inbounds %struct.format_check_context, %struct.format_check_context* %format_ctx, i32 0, i32 1, !dbg !2762
  store %struct.function_format_info* %12, %struct.function_format_info** %info10, align 8, !dbg !2763
  %13 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !2764
  %params11 = getelementptr inbounds %struct.format_check_context, %struct.format_check_context* %format_ctx, i32 0, i32 2, !dbg !2765
  store %union.tree_node* %13, %union.tree_node** %params11, align 8, !dbg !2766
  %14 = bitcast %struct.format_check_context* %format_ctx to i8*, !dbg !2767
  %15 = load %union.tree_node*, %union.tree_node** %format_tree, align 8, !dbg !2768
  %16 = load i64, i64* %arg_num, align 8, !dbg !2769
  call void @check_function_arguments_recurse(void (i8*, %union.tree_node*, i64)* @check_format_arg, i8* %14, %union.tree_node* %15, i64 %16), !dbg !2770
  %number_non_literal12 = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %res, i32 0, i32 0, !dbg !2771
  %17 = load i32, i32* %number_non_literal12, align 4, !dbg !2771
  %cmp13 = icmp sgt i32 %17, 0, !dbg !2773
  br i1 %cmp13, label %if.then14, label %if.end42, !dbg !2774

if.then14:                                        ; preds = %if.end8
  %18 = load %struct.format_kind_info*, %struct.format_kind_info** @format_types, align 8, !dbg !2775
  %19 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !2778
  %format_type = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %19, i32 0, i32 0, !dbg !2779
  %20 = load i32, i32* %format_type, align 8, !dbg !2779
  %idxprom = sext i32 %20 to i64, !dbg !2775
  %arrayidx = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %18, i64 %idxprom, !dbg !2775
  %flags = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %arrayidx, i32 0, i32 7, !dbg !2780
  %21 = load i32, i32* %flags, align 8, !dbg !2780
  %and = and i32 %21, 1, !dbg !2781
  %tobool = icmp ne i32 %and, 0, !dbg !2781
  br i1 %tobool, label %if.else, label %if.then15, !dbg !2782

if.then15:                                        ; preds = %if.then14
  %call = call zeroext i8 (i32, i8*, ...) @warning(i32 94, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.22, i64 0, i64 0)), !dbg !2783
  br label %if.end41, !dbg !2785

if.else:                                          ; preds = %if.then14
  %22 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !2786
  %first_arg_num = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %22, i32 0, i32 2, !dbg !2788
  %23 = load i64, i64* %first_arg_num, align 8, !dbg !2788
  %cmp16 = icmp ne i64 %23, 0, !dbg !2789
  br i1 %cmp16, label %if.then17, label %if.end40, !dbg !2790

if.then17:                                        ; preds = %if.else
  br label %while.cond, !dbg !2791

while.cond:                                       ; preds = %if.end22, %if.then17
  %24 = load i64, i64* %arg_num, align 8, !dbg !2793
  %add = add i64 %24, 1, !dbg !2794
  %25 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !2795
  %first_arg_num18 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %25, i32 0, i32 2, !dbg !2796
  %26 = load i64, i64* %first_arg_num18, align 8, !dbg !2796
  %cmp19 = icmp ult i64 %add, %26, !dbg !2797
  br i1 %cmp19, label %while.body, label %while.end, !dbg !2791

while.body:                                       ; preds = %while.cond
  %27 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !2798
  %cmp20 = icmp eq %union.tree_node* %27, null, !dbg !2801
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !2802

if.then21:                                        ; preds = %while.body
  br label %while.end, !dbg !2803

if.end22:                                         ; preds = %while.body
  %28 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !2804
  %common23 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !2804
  %chain24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 1, !dbg !2804
  %29 = load %union.tree_node*, %union.tree_node** %chain24, align 8, !dbg !2804
  store %union.tree_node* %29, %union.tree_node** %params.addr, align 8, !dbg !2805
  %30 = load i64, i64* %arg_num, align 8, !dbg !2806
  %inc25 = add i64 %30, 1, !dbg !2806
  store i64 %inc25, i64* %arg_num, align 8, !dbg !2806
  br label %while.cond, !dbg !2791, !llvm.loop !2807

while.end:                                        ; preds = %if.then21, %while.cond
  %31 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !2809
  %cmp26 = icmp eq %union.tree_node* %31, null, !dbg !2811
  br i1 %cmp26, label %land.lhs.true, label %if.else30, !dbg !2812

land.lhs.true:                                    ; preds = %while.end
  %32 = load i32, i32* @warn_format_security, align 4, !dbg !2813
  %tobool27 = icmp ne i32 %32, 0, !dbg !2813
  br i1 %tobool27, label %if.then28, label %if.else30, !dbg !2814

if.then28:                                        ; preds = %land.lhs.true
  %call29 = call zeroext i8 (i32, i8*, ...) @warning(i32 95, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.23, i64 0, i64 0)), !dbg !2815
  br label %if.end39, !dbg !2815

if.else30:                                        ; preds = %land.lhs.true, %while.end
  %33 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !2816
  %cmp31 = icmp eq %union.tree_node* %33, null, !dbg !2818
  br i1 %cmp31, label %land.lhs.true32, label %if.else36, !dbg !2819

land.lhs.true32:                                  ; preds = %if.else30
  %34 = load i32, i32* @warn_format_nonliteral, align 4, !dbg !2820
  %tobool33 = icmp ne i32 %34, 0, !dbg !2820
  br i1 %tobool33, label %if.then34, label %if.else36, !dbg !2821

if.then34:                                        ; preds = %land.lhs.true32
  %call35 = call zeroext i8 (i32, i8*, ...) @warning(i32 94, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.23, i64 0, i64 0)), !dbg !2822
  br label %if.end38, !dbg !2822

if.else36:                                        ; preds = %land.lhs.true32, %if.else30
  %call37 = call zeroext i8 (i32, i8*, ...) @warning(i32 94, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.24, i64 0, i64 0)), !dbg !2823
  br label %if.end38

if.end38:                                         ; preds = %if.else36, %if.then34
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.then28
  br label %if.end40, !dbg !2824

if.end40:                                         ; preds = %if.end39, %if.else
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then15
  br label %if.end42, !dbg !2825

if.end42:                                         ; preds = %if.end41, %if.end8
  %number_extra_args43 = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %res, i32 0, i32 1, !dbg !2826
  %35 = load i32, i32* %number_extra_args43, align 4, !dbg !2826
  %cmp44 = icmp sgt i32 %35, 0, !dbg !2828
  br i1 %cmp44, label %land.lhs.true45, label %if.end53, !dbg !2829

land.lhs.true45:                                  ; preds = %if.end42
  %number_non_literal46 = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %res, i32 0, i32 0, !dbg !2830
  %36 = load i32, i32* %number_non_literal46, align 4, !dbg !2830
  %cmp47 = icmp eq i32 %36, 0, !dbg !2831
  br i1 %cmp47, label %land.lhs.true48, label %if.end53, !dbg !2832

land.lhs.true48:                                  ; preds = %land.lhs.true45
  %number_other49 = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %res, i32 0, i32 6, !dbg !2833
  %37 = load i32, i32* %number_other49, align 4, !dbg !2833
  %cmp50 = icmp eq i32 %37, 0, !dbg !2834
  br i1 %cmp50, label %if.then51, label %if.end53, !dbg !2835

if.then51:                                        ; preds = %land.lhs.true48
  %call52 = call zeroext i8 (i32, i8*, ...) @warning(i32 93, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.25, i64 0, i64 0)), !dbg !2836
  br label %if.end53, !dbg !2836

if.end53:                                         ; preds = %if.then51, %land.lhs.true48, %land.lhs.true45, %if.end42
  %number_dollar_extra_args54 = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %res, i32 0, i32 2, !dbg !2837
  %38 = load i32, i32* %number_dollar_extra_args54, align 4, !dbg !2837
  %cmp55 = icmp sgt i32 %38, 0, !dbg !2839
  br i1 %cmp55, label %land.lhs.true56, label %if.end64, !dbg !2840

land.lhs.true56:                                  ; preds = %if.end53
  %number_non_literal57 = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %res, i32 0, i32 0, !dbg !2841
  %39 = load i32, i32* %number_non_literal57, align 4, !dbg !2841
  %cmp58 = icmp eq i32 %39, 0, !dbg !2842
  br i1 %cmp58, label %land.lhs.true59, label %if.end64, !dbg !2843

land.lhs.true59:                                  ; preds = %land.lhs.true56
  %number_other60 = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %res, i32 0, i32 6, !dbg !2844
  %40 = load i32, i32* %number_other60, align 4, !dbg !2844
  %cmp61 = icmp eq i32 %40, 0, !dbg !2845
  br i1 %cmp61, label %if.then62, label %if.end64, !dbg !2846

if.then62:                                        ; preds = %land.lhs.true59
  %call63 = call zeroext i8 (i32, i8*, ...) @warning(i32 93, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.26, i64 0, i64 0)), !dbg !2847
  br label %if.end64, !dbg !2847

if.end64:                                         ; preds = %if.then62, %land.lhs.true59, %land.lhs.true56, %if.end53
  %number_empty65 = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %res, i32 0, i32 4, !dbg !2848
  %41 = load i32, i32* %number_empty65, align 4, !dbg !2848
  %cmp66 = icmp sgt i32 %41, 0, !dbg !2850
  br i1 %cmp66, label %land.lhs.true67, label %if.end78, !dbg !2851

land.lhs.true67:                                  ; preds = %if.end64
  %number_non_literal68 = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %res, i32 0, i32 0, !dbg !2852
  %42 = load i32, i32* %number_non_literal68, align 4, !dbg !2852
  %cmp69 = icmp eq i32 %42, 0, !dbg !2853
  br i1 %cmp69, label %land.lhs.true70, label %if.end78, !dbg !2854

land.lhs.true70:                                  ; preds = %land.lhs.true67
  %number_other71 = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %res, i32 0, i32 6, !dbg !2855
  %43 = load i32, i32* %number_other71, align 4, !dbg !2855
  %cmp72 = icmp eq i32 %43, 0, !dbg !2856
  br i1 %cmp72, label %if.then73, label %if.end78, !dbg !2857

if.then73:                                        ; preds = %land.lhs.true70
  %44 = load %struct.format_kind_info*, %struct.format_kind_info** @format_types, align 8, !dbg !2858
  %45 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !2859
  %format_type74 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %45, i32 0, i32 0, !dbg !2860
  %46 = load i32, i32* %format_type74, align 8, !dbg !2860
  %idxprom75 = sext i32 %46 to i64, !dbg !2858
  %arrayidx76 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %44, i64 %idxprom75, !dbg !2858
  %name = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %arrayidx76, i32 0, i32 0, !dbg !2861
  %47 = load i8*, i8** %name, align 8, !dbg !2861
  %call77 = call zeroext i8 (i32, i8*, ...) @warning(i32 97, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.27, i64 0, i64 0), i8* %47), !dbg !2862
  br label %if.end78, !dbg !2862

if.end78:                                         ; preds = %if.then73, %land.lhs.true70, %land.lhs.true67, %if.end64
  %number_wide79 = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %res, i32 0, i32 3, !dbg !2863
  %48 = load i32, i32* %number_wide79, align 4, !dbg !2863
  %cmp80 = icmp sgt i32 %48, 0, !dbg !2865
  br i1 %cmp80, label %if.then81, label %if.end83, !dbg !2866

if.then81:                                        ; preds = %if.end78
  %call82 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.28, i64 0, i64 0)), !dbg !2867
  br label %if.end83, !dbg !2867

if.end83:                                         ; preds = %if.then81, %if.end78
  %number_unterminated84 = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %res, i32 0, i32 5, !dbg !2868
  %49 = load i32, i32* %number_unterminated84, align 4, !dbg !2868
  %cmp85 = icmp sgt i32 %49, 0, !dbg !2870
  br i1 %cmp85, label %if.then86, label %if.end88, !dbg !2871

if.then86:                                        ; preds = %if.end83
  %call87 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.29, i64 0, i64 0)), !dbg !2872
  br label %if.end88, !dbg !2872

if.end88:                                         ; preds = %if.then, %if.then7, %if.then86, %if.end83
  ret void, !dbg !2873
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @decode_format_type(i8* %s) #0 !dbg !2874 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %slen = alloca i32, align 4
  %alen = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !2877, metadata !DIExpression()), !dbg !2878
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2879, metadata !DIExpression()), !dbg !2880
  call void @llvm.dbg.declare(metadata i32* %slen, metadata !2881, metadata !DIExpression()), !dbg !2882
  %0 = load i8*, i8** %s.addr, align 8, !dbg !2883
  %call = call i8* @convert_format_name_to_system_name(i8* %0), !dbg !2884
  store i8* %call, i8** %s.addr, align 8, !dbg !2885
  %1 = load i8*, i8** %s.addr, align 8, !dbg !2886
  %call1 = call i64 @strlen(i8* %1), !dbg !2887
  %conv = trunc i64 %call1 to i32, !dbg !2887
  store i32 %conv, i32* %slen, align 4, !dbg !2888
  store i32 0, i32* %i, align 4, !dbg !2889
  br label %for.cond, !dbg !2891

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !2892
  %3 = load i32, i32* @n_format_types, align 4, !dbg !2894
  %cmp = icmp slt i32 %2, %3, !dbg !2895
  br i1 %cmp, label %for.body, label %for.end, !dbg !2896

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %alen, metadata !2897, metadata !DIExpression()), !dbg !2899
  %4 = load i8*, i8** %s.addr, align 8, !dbg !2900
  %5 = load %struct.format_kind_info*, %struct.format_kind_info** @format_types, align 8, !dbg !2902
  %6 = load i32, i32* %i, align 4, !dbg !2903
  %idxprom = sext i32 %6 to i64, !dbg !2902
  %arrayidx = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %5, i64 %idxprom, !dbg !2902
  %name = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %arrayidx, i32 0, i32 0, !dbg !2904
  %7 = load i8*, i8** %name, align 8, !dbg !2904
  %call3 = call i32 @strcmp(i8* %4, i8* %7), !dbg !2905
  %tobool = icmp ne i32 %call3, 0, !dbg !2905
  br i1 %tobool, label %if.end, label %if.then, !dbg !2906

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !2907
  store i32 %8, i32* %retval, align 4, !dbg !2908
  br label %return, !dbg !2908

if.end:                                           ; preds = %for.body
  %9 = load %struct.format_kind_info*, %struct.format_kind_info** @format_types, align 8, !dbg !2909
  %10 = load i32, i32* %i, align 4, !dbg !2910
  %idxprom4 = sext i32 %10 to i64, !dbg !2909
  %arrayidx5 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %9, i64 %idxprom4, !dbg !2909
  %name6 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %arrayidx5, i32 0, i32 0, !dbg !2911
  %11 = load i8*, i8** %name6, align 8, !dbg !2911
  %call7 = call i64 @strlen(i8* %11), !dbg !2912
  %conv8 = trunc i64 %call7 to i32, !dbg !2912
  store i32 %conv8, i32* %alen, align 4, !dbg !2913
  %12 = load i32, i32* %slen, align 4, !dbg !2914
  %13 = load i32, i32* %alen, align 4, !dbg !2916
  %add = add nsw i32 %13, 4, !dbg !2917
  %cmp9 = icmp eq i32 %12, %add, !dbg !2918
  br i1 %cmp9, label %land.lhs.true, label %if.end41, !dbg !2919

land.lhs.true:                                    ; preds = %if.end
  %14 = load i8*, i8** %s.addr, align 8, !dbg !2920
  %arrayidx11 = getelementptr inbounds i8, i8* %14, i64 0, !dbg !2920
  %15 = load i8, i8* %arrayidx11, align 1, !dbg !2920
  %conv12 = sext i8 %15 to i32, !dbg !2920
  %cmp13 = icmp eq i32 %conv12, 95, !dbg !2921
  br i1 %cmp13, label %land.lhs.true15, label %if.end41, !dbg !2922

land.lhs.true15:                                  ; preds = %land.lhs.true
  %16 = load i8*, i8** %s.addr, align 8, !dbg !2923
  %arrayidx16 = getelementptr inbounds i8, i8* %16, i64 1, !dbg !2923
  %17 = load i8, i8* %arrayidx16, align 1, !dbg !2923
  %conv17 = sext i8 %17 to i32, !dbg !2923
  %cmp18 = icmp eq i32 %conv17, 95, !dbg !2924
  br i1 %cmp18, label %land.lhs.true20, label %if.end41, !dbg !2925

land.lhs.true20:                                  ; preds = %land.lhs.true15
  %18 = load i8*, i8** %s.addr, align 8, !dbg !2926
  %19 = load i32, i32* %slen, align 4, !dbg !2927
  %sub = sub nsw i32 %19, 1, !dbg !2928
  %idxprom21 = sext i32 %sub to i64, !dbg !2926
  %arrayidx22 = getelementptr inbounds i8, i8* %18, i64 %idxprom21, !dbg !2926
  %20 = load i8, i8* %arrayidx22, align 1, !dbg !2926
  %conv23 = sext i8 %20 to i32, !dbg !2926
  %cmp24 = icmp eq i32 %conv23, 95, !dbg !2929
  br i1 %cmp24, label %land.lhs.true26, label %if.end41, !dbg !2930

land.lhs.true26:                                  ; preds = %land.lhs.true20
  %21 = load i8*, i8** %s.addr, align 8, !dbg !2931
  %22 = load i32, i32* %slen, align 4, !dbg !2932
  %sub27 = sub nsw i32 %22, 2, !dbg !2933
  %idxprom28 = sext i32 %sub27 to i64, !dbg !2931
  %arrayidx29 = getelementptr inbounds i8, i8* %21, i64 %idxprom28, !dbg !2931
  %23 = load i8, i8* %arrayidx29, align 1, !dbg !2931
  %conv30 = sext i8 %23 to i32, !dbg !2931
  %cmp31 = icmp eq i32 %conv30, 95, !dbg !2934
  br i1 %cmp31, label %land.lhs.true33, label %if.end41, !dbg !2935

land.lhs.true33:                                  ; preds = %land.lhs.true26
  %24 = load i8*, i8** %s.addr, align 8, !dbg !2936
  %add.ptr = getelementptr inbounds i8, i8* %24, i64 2, !dbg !2937
  %25 = load %struct.format_kind_info*, %struct.format_kind_info** @format_types, align 8, !dbg !2938
  %26 = load i32, i32* %i, align 4, !dbg !2939
  %idxprom34 = sext i32 %26 to i64, !dbg !2938
  %arrayidx35 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %25, i64 %idxprom34, !dbg !2938
  %name36 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %arrayidx35, i32 0, i32 0, !dbg !2940
  %27 = load i8*, i8** %name36, align 8, !dbg !2940
  %28 = load i32, i32* %alen, align 4, !dbg !2941
  %conv37 = sext i32 %28 to i64, !dbg !2941
  %call38 = call i32 @strncmp(i8* %add.ptr, i8* %27, i64 %conv37), !dbg !2942
  %tobool39 = icmp ne i32 %call38, 0, !dbg !2942
  br i1 %tobool39, label %if.end41, label %if.then40, !dbg !2943

if.then40:                                        ; preds = %land.lhs.true33
  %29 = load i32, i32* %i, align 4, !dbg !2944
  store i32 %29, i32* %retval, align 4, !dbg !2945
  br label %return, !dbg !2945

if.end41:                                         ; preds = %land.lhs.true33, %land.lhs.true26, %land.lhs.true20, %land.lhs.true15, %land.lhs.true, %if.end
  br label %for.inc, !dbg !2946

for.inc:                                          ; preds = %if.end41
  %30 = load i32, i32* %i, align 4, !dbg !2947
  %inc = add nsw i32 %30, 1, !dbg !2947
  store i32 %inc, i32* %i, align 4, !dbg !2947
  br label %for.cond, !dbg !2948, !llvm.loop !2949

for.end:                                          ; preds = %for.cond
  store i32 -1, i32* %retval, align 4, !dbg !2951
  br label %return, !dbg !2951

return:                                           ; preds = %for.end, %if.then40, %if.then
  %31 = load i32, i32* %retval, align 4, !dbg !2952
  ret i32 %31, !dbg !2952
}

declare dso_local zeroext i8 @warning(i32, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @handle_format_attribute(%union.tree_node** %node, %union.tree_node* %name, %union.tree_node* %args, i32 %flags, i8* %no_add_attrs) #0 !dbg !2953 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %node.addr = alloca %union.tree_node**, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %args.addr = alloca %union.tree_node*, align 8
  %flags.addr = alloca i32, align 4
  %no_add_attrs.addr = alloca i8*, align 8
  %type = alloca %union.tree_node*, align 8
  %info = alloca %struct.function_format_info, align 8
  %argument = alloca %union.tree_node*, align 8
  %arg_num = alloca i64, align 8
  store %union.tree_node** %node, %union.tree_node*** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %node.addr, metadata !2954, metadata !DIExpression()), !dbg !2955
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !2956, metadata !DIExpression()), !dbg !2957
  store %union.tree_node* %args, %union.tree_node** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %args.addr, metadata !2958, metadata !DIExpression()), !dbg !2959
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !2960, metadata !DIExpression()), !dbg !2961
  store i8* %no_add_attrs, i8** %no_add_attrs.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %no_add_attrs.addr, metadata !2962, metadata !DIExpression()), !dbg !2963
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !2964, metadata !DIExpression()), !dbg !2965
  %0 = load %union.tree_node**, %union.tree_node*** %node.addr, align 8, !dbg !2966
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !2967
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !2965
  call void @llvm.dbg.declare(metadata %struct.function_format_info* %info, metadata !2968, metadata !DIExpression()), !dbg !2969
  call void @llvm.dbg.declare(metadata %union.tree_node** %argument, metadata !2970, metadata !DIExpression()), !dbg !2971
  %2 = load %union.tree_node*, %union.tree_node** %args.addr, align 8, !dbg !2972
  %call = call zeroext i8 @decode_format_attr(%union.tree_node* %2, %struct.function_format_info* %info, i32 0), !dbg !2974
  %tobool = icmp ne i8 %call, 0, !dbg !2974
  br i1 %tobool, label %if.end, label %if.then, !dbg !2975

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %no_add_attrs.addr, align 8, !dbg !2976
  store i8 1, i8* %3, align 1, !dbg !2978
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !2979
  br label %return, !dbg !2979

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2980
  %type1 = bitcast %union.tree_node* %4 to %struct.tree_type*, !dbg !2980
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 1, !dbg !2980
  %5 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !2980
  store %union.tree_node* %5, %union.tree_node** %argument, align 8, !dbg !2981
  %6 = load %union.tree_node*, %union.tree_node** %argument, align 8, !dbg !2982
  %tobool2 = icmp ne %union.tree_node* %6, null, !dbg !2982
  br i1 %tobool2, label %if.then3, label %if.end18, !dbg !2984

if.then3:                                         ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %argument, align 8, !dbg !2985
  %format_num = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 1, !dbg !2988
  %8 = load i64, i64* %format_num, align 8, !dbg !2988
  %9 = load i32, i32* %flags.addr, align 4, !dbg !2989
  %10 = load i8*, i8** %no_add_attrs.addr, align 8, !dbg !2990
  %call4 = call zeroext i8 @check_format_string(%union.tree_node* %7, i64 %8, i32 %9, i8* %10), !dbg !2991
  %tobool5 = icmp ne i8 %call4, 0, !dbg !2991
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !2992

if.then6:                                         ; preds = %if.then3
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !2993
  br label %return, !dbg !2993

if.end7:                                          ; preds = %if.then3
  %first_arg_num = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 2, !dbg !2994
  %11 = load i64, i64* %first_arg_num, align 8, !dbg !2994
  %cmp = icmp ne i64 %11, 0, !dbg !2996
  br i1 %cmp, label %if.then8, label %if.end17, !dbg !2997

if.then8:                                         ; preds = %if.end7
  call void @llvm.dbg.declare(metadata i64* %arg_num, metadata !2998, metadata !DIExpression()), !dbg !3000
  store i64 1, i64* %arg_num, align 8, !dbg !3000
  br label %while.cond, !dbg !3001

while.cond:                                       ; preds = %while.body, %if.then8
  %12 = load %union.tree_node*, %union.tree_node** %argument, align 8, !dbg !3002
  %tobool9 = icmp ne %union.tree_node* %12, null, !dbg !3001
  br i1 %tobool9, label %while.body, label %while.end, !dbg !3001

while.body:                                       ; preds = %while.cond
  %13 = load i64, i64* %arg_num, align 8, !dbg !3003
  %inc = add i64 %13, 1, !dbg !3003
  store i64 %inc, i64* %arg_num, align 8, !dbg !3003
  %14 = load %union.tree_node*, %union.tree_node** %argument, align 8, !dbg !3004
  %common = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !3004
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !3004
  %15 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3004
  store %union.tree_node* %15, %union.tree_node** %argument, align 8, !dbg !3005
  br label %while.cond, !dbg !3001, !llvm.loop !3006

while.end:                                        ; preds = %while.cond
  %16 = load i64, i64* %arg_num, align 8, !dbg !3007
  %first_arg_num10 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 2, !dbg !3009
  %17 = load i64, i64* %first_arg_num10, align 8, !dbg !3009
  %cmp11 = icmp ne i64 %16, %17, !dbg !3010
  br i1 %cmp11, label %if.then12, label %if.end16, !dbg !3011

if.then12:                                        ; preds = %while.end
  %18 = load i32, i32* %flags.addr, align 4, !dbg !3012
  %and = and i32 %18, 16, !dbg !3015
  %tobool13 = icmp ne i32 %and, 0, !dbg !3015
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !3016

if.then14:                                        ; preds = %if.then12
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.4, i64 0, i64 0)), !dbg !3017
  br label %if.end15, !dbg !3017

if.end15:                                         ; preds = %if.then14, %if.then12
  %19 = load i8*, i8** %no_add_attrs.addr, align 8, !dbg !3018
  store i8 1, i8* %19, align 1, !dbg !3019
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3020
  br label %return, !dbg !3020

if.end16:                                         ; preds = %while.end
  br label %if.end17, !dbg !3021

if.end17:                                         ; preds = %if.end16, %if.end7
  br label %if.end18, !dbg !3022

if.end18:                                         ; preds = %if.end17, %if.end
  %20 = load %struct.format_kind_info*, %struct.format_kind_info** @format_types, align 8, !dbg !3023
  %format_type = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 0, !dbg !3025
  %21 = load i32, i32* %format_type, align 8, !dbg !3025
  %idxprom = sext i32 %21 to i64, !dbg !3023
  %arrayidx = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %20, i64 %idxprom, !dbg !3023
  %flags19 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %arrayidx, i32 0, i32 7, !dbg !3026
  %22 = load i32, i32* %flags19, align 8, !dbg !3026
  %and20 = and i32 %22, 1, !dbg !3027
  %cmp21 = icmp eq i32 %and20, 0, !dbg !3028
  br i1 %cmp21, label %land.lhs.true, label %if.end25, !dbg !3029

land.lhs.true:                                    ; preds = %if.end18
  %first_arg_num22 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 2, !dbg !3030
  %23 = load i64, i64* %first_arg_num22, align 8, !dbg !3030
  %cmp23 = icmp ne i64 %23, 0, !dbg !3031
  br i1 %cmp23, label %if.then24, label %if.end25, !dbg !3032

if.then24:                                        ; preds = %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.5, i64 0, i64 0)), !dbg !3033
  %24 = load i8*, i8** %no_add_attrs.addr, align 8, !dbg !3035
  store i8 1, i8* %24, align 1, !dbg !3036
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3037
  br label %return, !dbg !3037

if.end25:                                         ; preds = %land.lhs.true, %if.end18
  %format_type26 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 0, !dbg !3038
  %25 = load i32, i32* %format_type26, align 8, !dbg !3038
  %cmp27 = icmp eq i32 %25, 1, !dbg !3040
  br i1 %cmp27, label %if.then42, label %lor.lhs.false, !dbg !3041

lor.lhs.false:                                    ; preds = %if.end25
  %format_type28 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 0, !dbg !3042
  %26 = load i32, i32* %format_type28, align 8, !dbg !3042
  %cmp29 = icmp eq i32 %26, 6, !dbg !3043
  br i1 %cmp29, label %if.then42, label %lor.lhs.false30, !dbg !3044

lor.lhs.false30:                                  ; preds = %lor.lhs.false
  %format_type31 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 0, !dbg !3045
  %27 = load i32, i32* %format_type31, align 8, !dbg !3045
  %cmp32 = icmp eq i32 %27, 2, !dbg !3046
  br i1 %cmp32, label %if.then42, label %lor.lhs.false33, !dbg !3047

lor.lhs.false33:                                  ; preds = %lor.lhs.false30
  %format_type34 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 0, !dbg !3048
  %28 = load i32, i32* %format_type34, align 8, !dbg !3048
  %cmp35 = icmp eq i32 %28, 3, !dbg !3049
  br i1 %cmp35, label %if.then42, label %lor.lhs.false36, !dbg !3050

lor.lhs.false36:                                  ; preds = %lor.lhs.false33
  %format_type37 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 0, !dbg !3051
  %29 = load i32, i32* %format_type37, align 8, !dbg !3051
  %cmp38 = icmp eq i32 %29, 4, !dbg !3052
  br i1 %cmp38, label %if.then42, label %lor.lhs.false39, !dbg !3053

lor.lhs.false39:                                  ; preds = %lor.lhs.false36
  %format_type40 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 0, !dbg !3054
  %30 = load i32, i32* %format_type40, align 8, !dbg !3054
  %cmp41 = icmp eq i32 %30, 5, !dbg !3055
  br i1 %cmp41, label %if.then42, label %if.end70, !dbg !3056

if.then42:                                        ; preds = %lor.lhs.false39, %lor.lhs.false36, %lor.lhs.false33, %lor.lhs.false30, %lor.lhs.false, %if.end25
  %31 = load %struct.format_kind_info*, %struct.format_kind_info** @dynamic_format_types, align 8, !dbg !3057
  %tobool43 = icmp ne %struct.format_kind_info* %31, null, !dbg !3057
  br i1 %tobool43, label %if.end46, label %if.then44, !dbg !3060

if.then44:                                        ; preds = %if.then42
  %call45 = call i8* @xmemdup(i8* bitcast ([10 x %struct.format_kind_info]* @format_types_orig to i8*), i64 1040, i64 1040), !dbg !3061
  %32 = bitcast i8* %call45 to %struct.format_kind_info*, !dbg !3062
  store %struct.format_kind_info* %32, %struct.format_kind_info** @dynamic_format_types, align 8, !dbg !3063
  store %struct.format_kind_info* %32, %struct.format_kind_info** @format_types, align 8, !dbg !3064
  br label %if.end46, !dbg !3065

if.end46:                                         ; preds = %if.then44, %if.then42
  %format_type47 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 0, !dbg !3066
  %33 = load i32, i32* %format_type47, align 8, !dbg !3066
  %cmp48 = icmp eq i32 %33, 1, !dbg !3068
  br i1 %cmp48, label %if.then49, label %if.else, !dbg !3069

if.then49:                                        ; preds = %if.end46
  call void @init_dynamic_asm_fprintf_info(), !dbg !3070
  br label %if.end69, !dbg !3070

if.else:                                          ; preds = %if.end46
  %format_type50 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 0, !dbg !3071
  %34 = load i32, i32* %format_type50, align 8, !dbg !3071
  %cmp51 = icmp eq i32 %34, 6, !dbg !3073
  br i1 %cmp51, label %if.then52, label %if.else53, !dbg !3074

if.then52:                                        ; preds = %if.else
  call void @init_dynamic_gfc_info(), !dbg !3075
  br label %if.end68, !dbg !3075

if.else53:                                        ; preds = %if.else
  %format_type54 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 0, !dbg !3076
  %35 = load i32, i32* %format_type54, align 8, !dbg !3076
  %cmp55 = icmp eq i32 %35, 2, !dbg !3078
  br i1 %cmp55, label %if.then65, label %lor.lhs.false56, !dbg !3079

lor.lhs.false56:                                  ; preds = %if.else53
  %format_type57 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 0, !dbg !3080
  %36 = load i32, i32* %format_type57, align 8, !dbg !3080
  %cmp58 = icmp eq i32 %36, 3, !dbg !3081
  br i1 %cmp58, label %if.then65, label %lor.lhs.false59, !dbg !3082

lor.lhs.false59:                                  ; preds = %lor.lhs.false56
  %format_type60 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 0, !dbg !3083
  %37 = load i32, i32* %format_type60, align 8, !dbg !3083
  %cmp61 = icmp eq i32 %37, 4, !dbg !3084
  br i1 %cmp61, label %if.then65, label %lor.lhs.false62, !dbg !3085

lor.lhs.false62:                                  ; preds = %lor.lhs.false59
  %format_type63 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %info, i32 0, i32 0, !dbg !3086
  %38 = load i32, i32* %format_type63, align 8, !dbg !3086
  %cmp64 = icmp eq i32 %38, 5, !dbg !3087
  br i1 %cmp64, label %if.then65, label %if.else66, !dbg !3088

if.then65:                                        ; preds = %lor.lhs.false62, %lor.lhs.false59, %lor.lhs.false56, %if.else53
  call void @init_dynamic_diag_info(), !dbg !3089
  br label %if.end67, !dbg !3089

if.else66:                                        ; preds = %lor.lhs.false62
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i32 2873, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)), !dbg !3090
  br label %if.end67

if.end67:                                         ; preds = %if.else66, %if.then65
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.then52
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.then49
  br label %if.end70, !dbg !3091

if.end70:                                         ; preds = %if.end69, %lor.lhs.false39
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3092
  br label %return, !dbg !3092

return:                                           ; preds = %if.end70, %if.then24, %if.end15, %if.then6, %if.then
  %39 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3093
  ret %union.tree_node* %39, !dbg !3093
}

declare dso_local i8* @xmemdup(i8*, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @init_dynamic_asm_fprintf_info() #0 !dbg !2259 {
entry:
  %new_asm_fprintf_length_specs = alloca %struct.format_length_info*, align 8
  %i = alloca i32, align 4
  %0 = load %union.tree_node*, %union.tree_node** @init_dynamic_asm_fprintf_info.hwi, align 8, !dbg !3094
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !3094
  br i1 %tobool, label %if.end25, label %if.then, !dbg !3096

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.format_length_info** %new_asm_fprintf_length_specs, metadata !3097, metadata !DIExpression()), !dbg !3099
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3100, metadata !DIExpression()), !dbg !3101
  %call = call %union.tree_node* @maybe_get_identifier(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.261, i64 0, i64 0)), !dbg !3102
  store %union.tree_node* %call, %union.tree_node** @init_dynamic_asm_fprintf_info.hwi, align 8, !dbg !3103
  %1 = load %union.tree_node*, %union.tree_node** @init_dynamic_asm_fprintf_info.hwi, align 8, !dbg !3104
  %tobool1 = icmp ne %union.tree_node* %1, null, !dbg !3104
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !3106

if.then2:                                         ; preds = %if.then
  call void (i8*, ...) @error(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.262, i64 0, i64 0)), !dbg !3107
  br label %if.end25, !dbg !3109

if.end:                                           ; preds = %if.then
  %2 = load %union.tree_node*, %union.tree_node** @init_dynamic_asm_fprintf_info.hwi, align 8, !dbg !3110
  %call3 = call %union.tree_node* @identifier_global_value(%union.tree_node* %2), !dbg !3111
  store %union.tree_node* %call3, %union.tree_node** @init_dynamic_asm_fprintf_info.hwi, align 8, !dbg !3112
  %3 = load %union.tree_node*, %union.tree_node** @init_dynamic_asm_fprintf_info.hwi, align 8, !dbg !3113
  %tobool4 = icmp ne %union.tree_node* %3, null, !dbg !3113
  br i1 %tobool4, label %lor.lhs.false, label %if.then5, !dbg !3115

lor.lhs.false:                                    ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** @init_dynamic_asm_fprintf_info.hwi, align 8, !dbg !3116
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !3116
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !3116
  %bf.load = load i64, i64* %5, align 8, !dbg !3116
  %bf.clear = and i64 %bf.load, 65535, !dbg !3116
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3116
  %cmp = icmp ne i32 %bf.cast, 35, !dbg !3117
  br i1 %cmp, label %if.then5, label %if.end6, !dbg !3118

if.then5:                                         ; preds = %lor.lhs.false, %if.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.262, i64 0, i64 0)), !dbg !3119
  br label %if.end25, !dbg !3121

if.end6:                                          ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** @init_dynamic_asm_fprintf_info.hwi, align 8, !dbg !3122
  %decl_non_common = bitcast %union.tree_node* %6 to %struct.tree_decl_non_common*, !dbg !3122
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !3122
  %7 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !3122
  store %union.tree_node* %7, %union.tree_node** @init_dynamic_asm_fprintf_info.hwi, align 8, !dbg !3123
  %8 = load %union.tree_node*, %union.tree_node** @init_dynamic_asm_fprintf_info.hwi, align 8, !dbg !3124
  %tobool7 = icmp ne %union.tree_node* %8, null, !dbg !3124
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !3124

cond.true:                                        ; preds = %if.end6
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i32 2425, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)), !dbg !3124
  br label %cond.end, !dbg !3124

cond.false:                                       ; preds = %if.end6
  br label %cond.end, !dbg !3124

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3124
  %9 = load %union.tree_node*, %union.tree_node** @init_dynamic_asm_fprintf_info.hwi, align 8, !dbg !3125
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 7), align 8, !dbg !3127
  %cmp8 = icmp ne %union.tree_node* %9, %10, !dbg !3128
  br i1 %cmp8, label %land.lhs.true, label %if.end11, !dbg !3129

land.lhs.true:                                    ; preds = %cond.end
  %11 = load %union.tree_node*, %union.tree_node** @init_dynamic_asm_fprintf_info.hwi, align 8, !dbg !3130
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 9), align 8, !dbg !3131
  %cmp9 = icmp ne %union.tree_node* %11, %12, !dbg !3132
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !3133

if.then10:                                        ; preds = %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.263, i64 0, i64 0)), !dbg !3134
  br label %if.end25, !dbg !3136

if.end11:                                         ; preds = %land.lhs.true, %cond.end
  %call12 = call i8* @xmemdup(i8* bitcast ([3 x %struct.format_length_info]* @asm_fprintf_length_specs to i8*), i64 120, i64 120), !dbg !3137
  %13 = bitcast i8* %call12 to %struct.format_length_info*, !dbg !3138
  store %struct.format_length_info* %13, %struct.format_length_info** %new_asm_fprintf_length_specs, align 8, !dbg !3139
  %14 = load %struct.format_length_info*, %struct.format_length_info** %new_asm_fprintf_length_specs, align 8, !dbg !3140
  %call13 = call i32 @find_length_info_modifier_index(%struct.format_length_info* %14, i32 119), !dbg !3141
  store i32 %call13, i32* %i, align 4, !dbg !3142
  %15 = load %union.tree_node*, %union.tree_node** @init_dynamic_asm_fprintf_info.hwi, align 8, !dbg !3143
  %16 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 7), align 8, !dbg !3145
  %cmp14 = icmp eq %union.tree_node* %15, %16, !dbg !3146
  br i1 %cmp14, label %if.then15, label %if.else, !dbg !3147

if.then15:                                        ; preds = %if.end11
  %17 = load %struct.format_length_info*, %struct.format_length_info** %new_asm_fprintf_length_specs, align 8, !dbg !3148
  %18 = load i32, i32* %i, align 4, !dbg !3149
  %idxprom = zext i32 %18 to i64, !dbg !3148
  %arrayidx = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %17, i64 %idxprom, !dbg !3148
  %index = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %arrayidx, i32 0, i32 1, !dbg !3150
  store i32 3, i32* %index, align 8, !dbg !3151
  br label %if.end23, !dbg !3148

if.else:                                          ; preds = %if.end11
  %19 = load %union.tree_node*, %union.tree_node** @init_dynamic_asm_fprintf_info.hwi, align 8, !dbg !3152
  %20 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 9), align 8, !dbg !3154
  %cmp16 = icmp eq %union.tree_node* %19, %20, !dbg !3155
  br i1 %cmp16, label %if.then17, label %if.else21, !dbg !3156

if.then17:                                        ; preds = %if.else
  %21 = load %struct.format_length_info*, %struct.format_length_info** %new_asm_fprintf_length_specs, align 8, !dbg !3157
  %22 = load i32, i32* %i, align 4, !dbg !3158
  %idxprom18 = zext i32 %22 to i64, !dbg !3157
  %arrayidx19 = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %21, i64 %idxprom18, !dbg !3157
  %index20 = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %arrayidx19, i32 0, i32 1, !dbg !3159
  store i32 4, i32* %index20, align 8, !dbg !3160
  br label %if.end22, !dbg !3157

if.else21:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i32 2446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)), !dbg !3161
  br label %if.end22

if.end22:                                         ; preds = %if.else21, %if.then17
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.then15
  %23 = load %struct.format_length_info*, %struct.format_length_info** %new_asm_fprintf_length_specs, align 8, !dbg !3162
  %24 = load %struct.format_kind_info*, %struct.format_kind_info** @dynamic_format_types, align 8, !dbg !3163
  %arrayidx24 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %24, i64 1, !dbg !3163
  %length_char_specs = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %arrayidx24, i32 0, i32 1, !dbg !3164
  store %struct.format_length_info* %23, %struct.format_length_info** %length_char_specs, align 8, !dbg !3165
  br label %if.end25, !dbg !3166

if.end25:                                         ; preds = %if.then2, %if.then5, %if.then10, %if.end23, %entry
  ret void, !dbg !3167
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_dynamic_gfc_info() #0 !dbg !2265 {
entry:
  %i = alloca i32, align 4
  %0 = load %union.tree_node*, %union.tree_node** @init_dynamic_gfc_info.locus, align 8, !dbg !3168
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !3168
  br i1 %tobool, label %if.end25, label %if.then, !dbg !3170

if.then:                                          ; preds = %entry
  %call = call %union.tree_node* @maybe_get_identifier(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.264, i64 0, i64 0)), !dbg !3171
  store %union.tree_node* %call, %union.tree_node** @init_dynamic_gfc_info.locus, align 8, !dbg !3174
  %tobool1 = icmp ne %union.tree_node* %call, null, !dbg !3174
  br i1 %tobool1, label %if.then2, label %if.end11, !dbg !3175

if.then2:                                         ; preds = %if.then
  %1 = load %union.tree_node*, %union.tree_node** @init_dynamic_gfc_info.locus, align 8, !dbg !3176
  %call3 = call %union.tree_node* @identifier_global_value(%union.tree_node* %1), !dbg !3178
  store %union.tree_node* %call3, %union.tree_node** @init_dynamic_gfc_info.locus, align 8, !dbg !3179
  %2 = load %union.tree_node*, %union.tree_node** @init_dynamic_gfc_info.locus, align 8, !dbg !3180
  %tobool4 = icmp ne %union.tree_node* %2, null, !dbg !3180
  br i1 %tobool4, label %if.then5, label %if.end10, !dbg !3182

if.then5:                                         ; preds = %if.then2
  %3 = load %union.tree_node*, %union.tree_node** @init_dynamic_gfc_info.locus, align 8, !dbg !3183
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !3183
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !3183
  %bf.load = load i64, i64* %4, align 8, !dbg !3183
  %bf.clear = and i64 %bf.load, 65535, !dbg !3183
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3183
  %cmp = icmp ne i32 %bf.cast, 35, !dbg !3186
  br i1 %cmp, label %if.then7, label %lor.lhs.false, !dbg !3187

lor.lhs.false:                                    ; preds = %if.then5
  %5 = load %union.tree_node*, %union.tree_node** @init_dynamic_gfc_info.locus, align 8, !dbg !3188
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !3188
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3188
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3188
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !3189
  %cmp6 = icmp eq %union.tree_node* %6, %7, !dbg !3190
  br i1 %cmp6, label %if.then7, label %if.else, !dbg !3191

if.then7:                                         ; preds = %lor.lhs.false, %if.then5
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.265, i64 0, i64 0)), !dbg !3192
  store %union.tree_node* null, %union.tree_node** @init_dynamic_gfc_info.locus, align 8, !dbg !3194
  br label %if.end, !dbg !3195

if.else:                                          ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** @init_dynamic_gfc_info.locus, align 8, !dbg !3196
  %common8 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !3196
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2, !dbg !3196
  %9 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !3196
  store %union.tree_node* %9, %union.tree_node** @init_dynamic_gfc_info.locus, align 8, !dbg !3197
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  br label %if.end10, !dbg !3198

if.end10:                                         ; preds = %if.end, %if.then2
  br label %if.end11, !dbg !3199

if.end11:                                         ; preds = %if.end10, %if.then
  %10 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_gfc_info.gfc_fci, align 8, !dbg !3200
  %tobool12 = icmp ne %struct.format_char_info* %10, null, !dbg !3200
  br i1 %tobool12, label %if.end15, label %if.then13, !dbg !3202

if.then13:                                        ; preds = %if.end11
  %call14 = call i8* @xmemdup(i8* bitcast (<{ { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, %struct.format_type_detail, [8 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }>* @gcc_gfc_char_table to i8*), i64 2296, i64 2296), !dbg !3203
  %11 = bitcast i8* %call14 to %struct.format_char_info*, !dbg !3204
  store %struct.format_char_info* %11, %struct.format_char_info** @init_dynamic_gfc_info.gfc_fci, align 8, !dbg !3205
  %12 = load %struct.format_kind_info*, %struct.format_kind_info** @dynamic_format_types, align 8, !dbg !3206
  %arrayidx = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %12, i64 6, !dbg !3206
  %conversion_specs = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %arrayidx, i32 0, i32 2, !dbg !3207
  store %struct.format_char_info* %11, %struct.format_char_info** %conversion_specs, align 8, !dbg !3208
  br label %if.end15, !dbg !3206

if.end15:                                         ; preds = %if.then13, %if.end11
  %13 = load %union.tree_node*, %union.tree_node** @init_dynamic_gfc_info.locus, align 8, !dbg !3209
  %tobool16 = icmp ne %union.tree_node* %13, null, !dbg !3209
  br i1 %tobool16, label %if.then17, label %if.end24, !dbg !3211

if.then17:                                        ; preds = %if.end15
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3212, metadata !DIExpression()), !dbg !3215
  %14 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_gfc_info.gfc_fci, align 8, !dbg !3216
  %call18 = call i32 @find_char_info_specifier_index(%struct.format_char_info* %14, i32 76), !dbg !3217
  store i32 %call18, i32* %i, align 4, !dbg !3215
  %15 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_gfc_info.gfc_fci, align 8, !dbg !3218
  %16 = load i32, i32* %i, align 4, !dbg !3219
  %idxprom = zext i32 %16 to i64, !dbg !3218
  %arrayidx19 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %15, i64 %idxprom, !dbg !3218
  %types = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %arrayidx19, i32 0, i32 3, !dbg !3220
  %arrayidx20 = getelementptr inbounds [12 x %struct.format_type_detail], [12 x %struct.format_type_detail]* %types, i64 0, i64 0, !dbg !3218
  %type21 = getelementptr inbounds %struct.format_type_detail, %struct.format_type_detail* %arrayidx20, i32 0, i32 2, !dbg !3221
  store %union.tree_node** @init_dynamic_gfc_info.locus, %union.tree_node*** %type21, align 8, !dbg !3222
  %17 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_gfc_info.gfc_fci, align 8, !dbg !3223
  %18 = load i32, i32* %i, align 4, !dbg !3224
  %idxprom22 = zext i32 %18 to i64, !dbg !3223
  %arrayidx23 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %17, i64 %idxprom22, !dbg !3223
  %pointer_count = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %arrayidx23, i32 0, i32 1, !dbg !3225
  store i32 1, i32* %pointer_count, align 8, !dbg !3226
  br label %if.end24, !dbg !3227

if.end24:                                         ; preds = %if.then17, %if.end15
  br label %if.end25, !dbg !3228

if.end25:                                         ; preds = %if.end24, %entry
  ret void, !dbg !3229
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_dynamic_diag_info() #0 !dbg !2270 {
entry:
  %i = alloca i32, align 4
  %0 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.loc, align 8, !dbg !3230
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !3230
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !3232

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.t, align 8, !dbg !3233
  %tobool1 = icmp ne %union.tree_node* %1, null, !dbg !3233
  br i1 %tobool1, label %lor.lhs.false2, label %if.then, !dbg !3234

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.hwi, align 8, !dbg !3235
  %tobool3 = icmp ne %union.tree_node* %2, null, !dbg !3235
  br i1 %tobool3, label %if.end185, label %if.then, !dbg !3236

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3237, metadata !DIExpression()), !dbg !3239
  %call = call %union.tree_node* @maybe_get_identifier(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.266, i64 0, i64 0)), !dbg !3240
  store %union.tree_node* %call, %union.tree_node** @init_dynamic_diag_info.loc, align 8, !dbg !3242
  %tobool4 = icmp ne %union.tree_node* %call, null, !dbg !3242
  br i1 %tobool4, label %if.then5, label %if.end11, !dbg !3243

if.then5:                                         ; preds = %if.then
  %3 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.loc, align 8, !dbg !3244
  %call6 = call %union.tree_node* @identifier_global_value(%union.tree_node* %3), !dbg !3246
  store %union.tree_node* %call6, %union.tree_node** @init_dynamic_diag_info.loc, align 8, !dbg !3247
  %4 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.loc, align 8, !dbg !3248
  %tobool7 = icmp ne %union.tree_node* %4, null, !dbg !3248
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !3250

if.then8:                                         ; preds = %if.then5
  %5 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.loc, align 8, !dbg !3251
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !3251
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !3251
  %bf.load = load i64, i64* %6, align 8, !dbg !3251
  %bf.clear = and i64 %bf.load, 65535, !dbg !3251
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3251
  %cmp = icmp ne i32 %bf.cast, 35, !dbg !3254
  br i1 %cmp, label %if.then9, label %if.else, !dbg !3255

if.then9:                                         ; preds = %if.then8
  call void (i8*, ...) @error(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.267, i64 0, i64 0)), !dbg !3256
  store %union.tree_node* null, %union.tree_node** @init_dynamic_diag_info.loc, align 8, !dbg !3258
  br label %if.end, !dbg !3259

if.else:                                          ; preds = %if.then8
  %7 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.loc, align 8, !dbg !3260
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !3260
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3260
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3260
  store %union.tree_node* %8, %union.tree_node** @init_dynamic_diag_info.loc, align 8, !dbg !3261
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  br label %if.end10, !dbg !3262

if.end10:                                         ; preds = %if.end, %if.then5
  br label %if.end11, !dbg !3263

if.end11:                                         ; preds = %if.end10, %if.then
  %call12 = call %union.tree_node* @maybe_get_identifier(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.268, i64 0, i64 0)), !dbg !3264
  store %union.tree_node* %call12, %union.tree_node** @init_dynamic_diag_info.t, align 8, !dbg !3266
  %tobool13 = icmp ne %union.tree_node* %call12, null, !dbg !3266
  br i1 %tobool13, label %if.then14, label %if.end41, !dbg !3267

if.then14:                                        ; preds = %if.end11
  %9 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.t, align 8, !dbg !3268
  %call15 = call %union.tree_node* @identifier_global_value(%union.tree_node* %9), !dbg !3270
  store %union.tree_node* %call15, %union.tree_node** @init_dynamic_diag_info.t, align 8, !dbg !3271
  %10 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.t, align 8, !dbg !3272
  %tobool16 = icmp ne %union.tree_node* %10, null, !dbg !3272
  br i1 %tobool16, label %if.then17, label %if.end40, !dbg !3274

if.then17:                                        ; preds = %if.then14
  %11 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.t, align 8, !dbg !3275
  %base18 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !3275
  %12 = bitcast %struct.tree_base* %base18 to i64*, !dbg !3275
  %bf.load19 = load i64, i64* %12, align 8, !dbg !3275
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !3275
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !3275
  %cmp22 = icmp ne i32 %bf.cast21, 35, !dbg !3278
  br i1 %cmp22, label %if.then23, label %if.else24, !dbg !3279

if.then23:                                        ; preds = %if.then17
  call void (i8*, ...) @error(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.269, i64 0, i64 0)), !dbg !3280
  store %union.tree_node* null, %union.tree_node** @init_dynamic_diag_info.t, align 8, !dbg !3282
  br label %if.end39, !dbg !3283

if.else24:                                        ; preds = %if.then17
  %13 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.t, align 8, !dbg !3284
  %common25 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !3284
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2, !dbg !3284
  %14 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !3284
  %base27 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !3284
  %15 = bitcast %struct.tree_base* %base27 to i64*, !dbg !3284
  %bf.load28 = load i64, i64* %15, align 8, !dbg !3284
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !3284
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !3284
  %cmp31 = icmp ne i32 %bf.cast30, 10, !dbg !3286
  br i1 %cmp31, label %if.then32, label %if.else33, !dbg !3287

if.then32:                                        ; preds = %if.else24
  call void (i8*, ...) @error(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.270, i64 0, i64 0)), !dbg !3288
  store %union.tree_node* null, %union.tree_node** @init_dynamic_diag_info.t, align 8, !dbg !3290
  br label %if.end38, !dbg !3291

if.else33:                                        ; preds = %if.else24
  %16 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.t, align 8, !dbg !3292
  %common34 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !3292
  %type35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common34, i32 0, i32 2, !dbg !3292
  %17 = load %union.tree_node*, %union.tree_node** %type35, align 8, !dbg !3292
  %common36 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !3292
  %type37 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 2, !dbg !3292
  %18 = load %union.tree_node*, %union.tree_node** %type37, align 8, !dbg !3292
  store %union.tree_node* %18, %union.tree_node** @init_dynamic_diag_info.t, align 8, !dbg !3293
  br label %if.end38

if.end38:                                         ; preds = %if.else33, %if.then32
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.then23
  br label %if.end40, !dbg !3294

if.end40:                                         ; preds = %if.end39, %if.then14
  br label %if.end41, !dbg !3295

if.end41:                                         ; preds = %if.end40, %if.end11
  %call42 = call %union.tree_node* @maybe_get_identifier(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.261, i64 0, i64 0)), !dbg !3296
  store %union.tree_node* %call42, %union.tree_node** @init_dynamic_diag_info.hwi, align 8, !dbg !3298
  %tobool43 = icmp ne %union.tree_node* %call42, null, !dbg !3298
  br i1 %tobool43, label %if.then44, label %if.end62, !dbg !3299

if.then44:                                        ; preds = %if.end41
  %19 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.hwi, align 8, !dbg !3300
  %call45 = call %union.tree_node* @identifier_global_value(%union.tree_node* %19), !dbg !3302
  store %union.tree_node* %call45, %union.tree_node** @init_dynamic_diag_info.hwi, align 8, !dbg !3303
  %20 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.hwi, align 8, !dbg !3304
  %tobool46 = icmp ne %union.tree_node* %20, null, !dbg !3304
  br i1 %tobool46, label %if.then47, label %if.end61, !dbg !3306

if.then47:                                        ; preds = %if.then44
  %21 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.hwi, align 8, !dbg !3307
  %base48 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !3307
  %22 = bitcast %struct.tree_base* %base48 to i64*, !dbg !3307
  %bf.load49 = load i64, i64* %22, align 8, !dbg !3307
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !3307
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !3307
  %cmp52 = icmp ne i32 %bf.cast51, 35, !dbg !3310
  br i1 %cmp52, label %if.then53, label %if.else54, !dbg !3311

if.then53:                                        ; preds = %if.then47
  call void (i8*, ...) @error(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.262, i64 0, i64 0)), !dbg !3312
  store %union.tree_node* null, %union.tree_node** @init_dynamic_diag_info.hwi, align 8, !dbg !3314
  br label %if.end60, !dbg !3315

if.else54:                                        ; preds = %if.then47
  %23 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.hwi, align 8, !dbg !3316
  %decl_non_common = bitcast %union.tree_node* %23 to %struct.tree_decl_non_common*, !dbg !3316
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !3316
  %24 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !3316
  store %union.tree_node* %24, %union.tree_node** @init_dynamic_diag_info.hwi, align 8, !dbg !3318
  %25 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.hwi, align 8, !dbg !3319
  %tobool55 = icmp ne %union.tree_node* %25, null, !dbg !3319
  br i1 %tobool55, label %cond.false, label %cond.true, !dbg !3319

cond.true:                                        ; preds = %if.else54
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i32 2578, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)), !dbg !3319
  br label %cond.end, !dbg !3319

cond.false:                                       ; preds = %if.else54
  br label %cond.end, !dbg !3319

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3319
  %26 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.hwi, align 8, !dbg !3320
  %27 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 7), align 8, !dbg !3322
  %cmp56 = icmp ne %union.tree_node* %26, %27, !dbg !3323
  br i1 %cmp56, label %land.lhs.true, label %if.end59, !dbg !3324

land.lhs.true:                                    ; preds = %cond.end
  %28 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.hwi, align 8, !dbg !3325
  %29 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 9), align 8, !dbg !3326
  %cmp57 = icmp ne %union.tree_node* %28, %29, !dbg !3327
  br i1 %cmp57, label %if.then58, label %if.end59, !dbg !3328

if.then58:                                        ; preds = %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.263, i64 0, i64 0)), !dbg !3329
  store %union.tree_node* null, %union.tree_node** @init_dynamic_diag_info.hwi, align 8, !dbg !3331
  br label %if.end59, !dbg !3332

if.end59:                                         ; preds = %if.then58, %land.lhs.true, %cond.end
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then53
  br label %if.end61, !dbg !3333

if.end61:                                         ; preds = %if.end60, %if.then44
  br label %if.end62, !dbg !3334

if.end62:                                         ; preds = %if.end61, %if.end41
  %30 = load %struct.format_length_info*, %struct.format_length_info** @init_dynamic_diag_info.diag_ls, align 8, !dbg !3335
  %tobool63 = icmp ne %struct.format_length_info* %30, null, !dbg !3335
  br i1 %tobool63, label %if.end72, label %if.then64, !dbg !3337

if.then64:                                        ; preds = %if.end62
  %call65 = call i8* @xmemdup(i8* bitcast ([3 x %struct.format_length_info]* @gcc_diag_length_specs to i8*), i64 120, i64 120), !dbg !3338
  %31 = bitcast i8* %call65 to %struct.format_length_info*, !dbg !3339
  store %struct.format_length_info* %31, %struct.format_length_info** @init_dynamic_diag_info.diag_ls, align 8, !dbg !3340
  %32 = load %struct.format_kind_info*, %struct.format_kind_info** @dynamic_format_types, align 8, !dbg !3341
  %arrayidx = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %32, i64 5, !dbg !3341
  %length_char_specs = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %arrayidx, i32 0, i32 1, !dbg !3342
  store %struct.format_length_info* %31, %struct.format_length_info** %length_char_specs, align 8, !dbg !3343
  %33 = load %struct.format_kind_info*, %struct.format_kind_info** @dynamic_format_types, align 8, !dbg !3344
  %arrayidx66 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %33, i64 4, !dbg !3344
  %length_char_specs67 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %arrayidx66, i32 0, i32 1, !dbg !3345
  store %struct.format_length_info* %31, %struct.format_length_info** %length_char_specs67, align 8, !dbg !3346
  %34 = load %struct.format_kind_info*, %struct.format_kind_info** @dynamic_format_types, align 8, !dbg !3347
  %arrayidx68 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %34, i64 3, !dbg !3347
  %length_char_specs69 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %arrayidx68, i32 0, i32 1, !dbg !3348
  store %struct.format_length_info* %31, %struct.format_length_info** %length_char_specs69, align 8, !dbg !3349
  %35 = load %struct.format_kind_info*, %struct.format_kind_info** @dynamic_format_types, align 8, !dbg !3350
  %arrayidx70 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %35, i64 2, !dbg !3350
  %length_char_specs71 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %arrayidx70, i32 0, i32 1, !dbg !3351
  store %struct.format_length_info* %31, %struct.format_length_info** %length_char_specs71, align 8, !dbg !3352
  br label %if.end72, !dbg !3350

if.end72:                                         ; preds = %if.then64, %if.end62
  %36 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.hwi, align 8, !dbg !3353
  %tobool73 = icmp ne %union.tree_node* %36, null, !dbg !3353
  br i1 %tobool73, label %if.then74, label %if.end88, !dbg !3355

if.then74:                                        ; preds = %if.end72
  %37 = load %struct.format_length_info*, %struct.format_length_info** @init_dynamic_diag_info.diag_ls, align 8, !dbg !3356
  %call75 = call i32 @find_length_info_modifier_index(%struct.format_length_info* %37, i32 119), !dbg !3358
  store i32 %call75, i32* %i, align 4, !dbg !3359
  %38 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.hwi, align 8, !dbg !3360
  %39 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 7), align 8, !dbg !3362
  %cmp76 = icmp eq %union.tree_node* %38, %39, !dbg !3363
  br i1 %cmp76, label %if.then77, label %if.else79, !dbg !3364

if.then77:                                        ; preds = %if.then74
  %40 = load %struct.format_length_info*, %struct.format_length_info** @init_dynamic_diag_info.diag_ls, align 8, !dbg !3365
  %41 = load i32, i32* %i, align 4, !dbg !3366
  %idxprom = zext i32 %41 to i64, !dbg !3365
  %arrayidx78 = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %40, i64 %idxprom, !dbg !3365
  %index = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %arrayidx78, i32 0, i32 1, !dbg !3367
  store i32 3, i32* %index, align 8, !dbg !3368
  br label %if.end87, !dbg !3365

if.else79:                                        ; preds = %if.then74
  %42 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.hwi, align 8, !dbg !3369
  %43 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 9), align 8, !dbg !3371
  %cmp80 = icmp eq %union.tree_node* %42, %43, !dbg !3372
  br i1 %cmp80, label %if.then81, label %if.else85, !dbg !3373

if.then81:                                        ; preds = %if.else79
  %44 = load %struct.format_length_info*, %struct.format_length_info** @init_dynamic_diag_info.diag_ls, align 8, !dbg !3374
  %45 = load i32, i32* %i, align 4, !dbg !3375
  %idxprom82 = zext i32 %45 to i64, !dbg !3374
  %arrayidx83 = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %44, i64 %idxprom82, !dbg !3374
  %index84 = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %arrayidx83, i32 0, i32 1, !dbg !3376
  store i32 4, i32* %index84, align 8, !dbg !3377
  br label %if.end86, !dbg !3374

if.else85:                                        ; preds = %if.else79
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i32 2611, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)), !dbg !3378
  br label %if.end86

if.end86:                                         ; preds = %if.else85, %if.then81
  br label %if.end87

if.end87:                                         ; preds = %if.end86, %if.then77
  br label %if.end88, !dbg !3379

if.end88:                                         ; preds = %if.end87, %if.end72
  %46 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.diag_fci, align 8, !dbg !3380
  %tobool89 = icmp ne %struct.format_char_info* %46, null, !dbg !3380
  br i1 %tobool89, label %if.end93, label %if.then90, !dbg !3382

if.then90:                                        ; preds = %if.end88
  %call91 = call i8* @xmemdup(i8* bitcast (<{ %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }>* @gcc_diag_char_table to i8*), i64 3280, i64 3280), !dbg !3383
  %47 = bitcast i8* %call91 to %struct.format_char_info*, !dbg !3384
  store %struct.format_char_info* %47, %struct.format_char_info** @init_dynamic_diag_info.diag_fci, align 8, !dbg !3385
  %48 = load %struct.format_kind_info*, %struct.format_kind_info** @dynamic_format_types, align 8, !dbg !3386
  %arrayidx92 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %48, i64 2, !dbg !3386
  %conversion_specs = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %arrayidx92, i32 0, i32 2, !dbg !3387
  store %struct.format_char_info* %47, %struct.format_char_info** %conversion_specs, align 8, !dbg !3388
  br label %if.end93, !dbg !3386

if.end93:                                         ; preds = %if.then90, %if.end88
  %49 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.t, align 8, !dbg !3389
  %tobool94 = icmp ne %union.tree_node* %49, null, !dbg !3389
  br i1 %tobool94, label %if.then95, label %if.end103, !dbg !3391

if.then95:                                        ; preds = %if.end93
  %50 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.diag_fci, align 8, !dbg !3392
  %call96 = call i32 @find_char_info_specifier_index(%struct.format_char_info* %50, i32 75), !dbg !3394
  store i32 %call96, i32* %i, align 4, !dbg !3395
  %51 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.diag_fci, align 8, !dbg !3396
  %52 = load i32, i32* %i, align 4, !dbg !3397
  %idxprom97 = zext i32 %52 to i64, !dbg !3396
  %arrayidx98 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %51, i64 %idxprom97, !dbg !3396
  %types = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %arrayidx98, i32 0, i32 3, !dbg !3398
  %arrayidx99 = getelementptr inbounds [12 x %struct.format_type_detail], [12 x %struct.format_type_detail]* %types, i64 0, i64 0, !dbg !3396
  %type100 = getelementptr inbounds %struct.format_type_detail, %struct.format_type_detail* %arrayidx99, i32 0, i32 2, !dbg !3399
  store %union.tree_node** @init_dynamic_diag_info.t, %union.tree_node*** %type100, align 8, !dbg !3400
  %53 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.diag_fci, align 8, !dbg !3401
  %54 = load i32, i32* %i, align 4, !dbg !3402
  %idxprom101 = zext i32 %54 to i64, !dbg !3401
  %arrayidx102 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %53, i64 %idxprom101, !dbg !3401
  %pointer_count = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %arrayidx102, i32 0, i32 1, !dbg !3403
  store i32 1, i32* %pointer_count, align 8, !dbg !3404
  br label %if.end103, !dbg !3405

if.end103:                                        ; preds = %if.then95, %if.end93
  %55 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.tdiag_fci, align 8, !dbg !3406
  %tobool104 = icmp ne %struct.format_char_info* %55, null, !dbg !3406
  br i1 %tobool104, label %if.end109, label %if.then105, !dbg !3408

if.then105:                                       ; preds = %if.end103
  %call106 = call i8* @xmemdup(i8* bitcast (<{ %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }>* @gcc_tdiag_char_table to i8*), i64 3280, i64 3280), !dbg !3409
  %56 = bitcast i8* %call106 to %struct.format_char_info*, !dbg !3410
  store %struct.format_char_info* %56, %struct.format_char_info** @init_dynamic_diag_info.tdiag_fci, align 8, !dbg !3411
  %57 = load %struct.format_kind_info*, %struct.format_kind_info** @dynamic_format_types, align 8, !dbg !3412
  %arrayidx107 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %57, i64 3, !dbg !3412
  %conversion_specs108 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %arrayidx107, i32 0, i32 2, !dbg !3413
  store %struct.format_char_info* %56, %struct.format_char_info** %conversion_specs108, align 8, !dbg !3414
  br label %if.end109, !dbg !3412

if.end109:                                        ; preds = %if.then105, %if.end103
  %58 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.t, align 8, !dbg !3415
  %tobool110 = icmp ne %union.tree_node* %58, null, !dbg !3415
  br i1 %tobool110, label %if.then111, label %if.end130, !dbg !3417

if.then111:                                       ; preds = %if.end109
  %59 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.tdiag_fci, align 8, !dbg !3418
  %call112 = call i32 @find_char_info_specifier_index(%struct.format_char_info* %59, i32 68), !dbg !3420
  store i32 %call112, i32* %i, align 4, !dbg !3421
  %60 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.tdiag_fci, align 8, !dbg !3422
  %61 = load i32, i32* %i, align 4, !dbg !3423
  %idxprom113 = zext i32 %61 to i64, !dbg !3422
  %arrayidx114 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %60, i64 %idxprom113, !dbg !3422
  %types115 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %arrayidx114, i32 0, i32 3, !dbg !3424
  %arrayidx116 = getelementptr inbounds [12 x %struct.format_type_detail], [12 x %struct.format_type_detail]* %types115, i64 0, i64 0, !dbg !3422
  %type117 = getelementptr inbounds %struct.format_type_detail, %struct.format_type_detail* %arrayidx116, i32 0, i32 2, !dbg !3425
  store %union.tree_node** @init_dynamic_diag_info.t, %union.tree_node*** %type117, align 8, !dbg !3426
  %62 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.tdiag_fci, align 8, !dbg !3427
  %63 = load i32, i32* %i, align 4, !dbg !3428
  %idxprom118 = zext i32 %63 to i64, !dbg !3427
  %arrayidx119 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %62, i64 %idxprom118, !dbg !3427
  %pointer_count120 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %arrayidx119, i32 0, i32 1, !dbg !3429
  store i32 1, i32* %pointer_count120, align 8, !dbg !3430
  %64 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.tdiag_fci, align 8, !dbg !3431
  %call121 = call i32 @find_char_info_specifier_index(%struct.format_char_info* %64, i32 75), !dbg !3432
  store i32 %call121, i32* %i, align 4, !dbg !3433
  %65 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.tdiag_fci, align 8, !dbg !3434
  %66 = load i32, i32* %i, align 4, !dbg !3435
  %idxprom122 = zext i32 %66 to i64, !dbg !3434
  %arrayidx123 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %65, i64 %idxprom122, !dbg !3434
  %types124 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %arrayidx123, i32 0, i32 3, !dbg !3436
  %arrayidx125 = getelementptr inbounds [12 x %struct.format_type_detail], [12 x %struct.format_type_detail]* %types124, i64 0, i64 0, !dbg !3434
  %type126 = getelementptr inbounds %struct.format_type_detail, %struct.format_type_detail* %arrayidx125, i32 0, i32 2, !dbg !3437
  store %union.tree_node** @init_dynamic_diag_info.t, %union.tree_node*** %type126, align 8, !dbg !3438
  %67 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.tdiag_fci, align 8, !dbg !3439
  %68 = load i32, i32* %i, align 4, !dbg !3440
  %idxprom127 = zext i32 %68 to i64, !dbg !3439
  %arrayidx128 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %67, i64 %idxprom127, !dbg !3439
  %pointer_count129 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %arrayidx128, i32 0, i32 1, !dbg !3441
  store i32 1, i32* %pointer_count129, align 8, !dbg !3442
  br label %if.end130, !dbg !3443

if.end130:                                        ; preds = %if.then111, %if.end109
  %69 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.cdiag_fci, align 8, !dbg !3444
  %tobool131 = icmp ne %struct.format_char_info* %69, null, !dbg !3444
  br i1 %tobool131, label %if.end136, label %if.then132, !dbg !3446

if.then132:                                       ; preds = %if.end130
  %call133 = call i8* @xmemdup(i8* bitcast (<{ %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }>* @gcc_cdiag_char_table to i8*), i64 3280, i64 3280), !dbg !3447
  %70 = bitcast i8* %call133 to %struct.format_char_info*, !dbg !3448
  store %struct.format_char_info* %70, %struct.format_char_info** @init_dynamic_diag_info.cdiag_fci, align 8, !dbg !3449
  %71 = load %struct.format_kind_info*, %struct.format_kind_info** @dynamic_format_types, align 8, !dbg !3450
  %arrayidx134 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %71, i64 4, !dbg !3450
  %conversion_specs135 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %arrayidx134, i32 0, i32 2, !dbg !3451
  store %struct.format_char_info* %70, %struct.format_char_info** %conversion_specs135, align 8, !dbg !3452
  br label %if.end136, !dbg !3450

if.end136:                                        ; preds = %if.then132, %if.end130
  %72 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.t, align 8, !dbg !3453
  %tobool137 = icmp ne %union.tree_node* %72, null, !dbg !3453
  br i1 %tobool137, label %if.then138, label %if.end157, !dbg !3455

if.then138:                                       ; preds = %if.end136
  %73 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.cdiag_fci, align 8, !dbg !3456
  %call139 = call i32 @find_char_info_specifier_index(%struct.format_char_info* %73, i32 68), !dbg !3458
  store i32 %call139, i32* %i, align 4, !dbg !3459
  %74 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.cdiag_fci, align 8, !dbg !3460
  %75 = load i32, i32* %i, align 4, !dbg !3461
  %idxprom140 = zext i32 %75 to i64, !dbg !3460
  %arrayidx141 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %74, i64 %idxprom140, !dbg !3460
  %types142 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %arrayidx141, i32 0, i32 3, !dbg !3462
  %arrayidx143 = getelementptr inbounds [12 x %struct.format_type_detail], [12 x %struct.format_type_detail]* %types142, i64 0, i64 0, !dbg !3460
  %type144 = getelementptr inbounds %struct.format_type_detail, %struct.format_type_detail* %arrayidx143, i32 0, i32 2, !dbg !3463
  store %union.tree_node** @init_dynamic_diag_info.t, %union.tree_node*** %type144, align 8, !dbg !3464
  %76 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.cdiag_fci, align 8, !dbg !3465
  %77 = load i32, i32* %i, align 4, !dbg !3466
  %idxprom145 = zext i32 %77 to i64, !dbg !3465
  %arrayidx146 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %76, i64 %idxprom145, !dbg !3465
  %pointer_count147 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %arrayidx146, i32 0, i32 1, !dbg !3467
  store i32 1, i32* %pointer_count147, align 8, !dbg !3468
  %78 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.cdiag_fci, align 8, !dbg !3469
  %call148 = call i32 @find_char_info_specifier_index(%struct.format_char_info* %78, i32 75), !dbg !3470
  store i32 %call148, i32* %i, align 4, !dbg !3471
  %79 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.cdiag_fci, align 8, !dbg !3472
  %80 = load i32, i32* %i, align 4, !dbg !3473
  %idxprom149 = zext i32 %80 to i64, !dbg !3472
  %arrayidx150 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %79, i64 %idxprom149, !dbg !3472
  %types151 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %arrayidx150, i32 0, i32 3, !dbg !3474
  %arrayidx152 = getelementptr inbounds [12 x %struct.format_type_detail], [12 x %struct.format_type_detail]* %types151, i64 0, i64 0, !dbg !3472
  %type153 = getelementptr inbounds %struct.format_type_detail, %struct.format_type_detail* %arrayidx152, i32 0, i32 2, !dbg !3475
  store %union.tree_node** @init_dynamic_diag_info.t, %union.tree_node*** %type153, align 8, !dbg !3476
  %81 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.cdiag_fci, align 8, !dbg !3477
  %82 = load i32, i32* %i, align 4, !dbg !3478
  %idxprom154 = zext i32 %82 to i64, !dbg !3477
  %arrayidx155 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %81, i64 %idxprom154, !dbg !3477
  %pointer_count156 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %arrayidx155, i32 0, i32 1, !dbg !3479
  store i32 1, i32* %pointer_count156, align 8, !dbg !3480
  br label %if.end157, !dbg !3481

if.end157:                                        ; preds = %if.then138, %if.end136
  %83 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.cxxdiag_fci, align 8, !dbg !3482
  %tobool158 = icmp ne %struct.format_char_info* %83, null, !dbg !3482
  br i1 %tobool158, label %if.end163, label %if.then159, !dbg !3484

if.then159:                                       ; preds = %if.end157
  %call160 = call i8* @xmemdup(i8* bitcast (<{ %struct.format_char_info, %struct.format_char_info, %struct.format_char_info, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, { i8*, i32, i32, <{ %struct.format_type_detail, [11 x %struct.format_type_detail] }>, i8*, i8*, %struct.format_char_info* }, %struct.format_char_info }>* @gcc_cxxdiag_char_table to i8*), i64 3608, i64 3608), !dbg !3485
  %84 = bitcast i8* %call160 to %struct.format_char_info*, !dbg !3486
  store %struct.format_char_info* %84, %struct.format_char_info** @init_dynamic_diag_info.cxxdiag_fci, align 8, !dbg !3487
  %85 = load %struct.format_kind_info*, %struct.format_kind_info** @dynamic_format_types, align 8, !dbg !3488
  %arrayidx161 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %85, i64 5, !dbg !3488
  %conversion_specs162 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %arrayidx161, i32 0, i32 2, !dbg !3489
  store %struct.format_char_info* %84, %struct.format_char_info** %conversion_specs162, align 8, !dbg !3490
  br label %if.end163, !dbg !3488

if.end163:                                        ; preds = %if.then159, %if.end157
  %86 = load %union.tree_node*, %union.tree_node** @init_dynamic_diag_info.t, align 8, !dbg !3491
  %tobool164 = icmp ne %union.tree_node* %86, null, !dbg !3491
  br i1 %tobool164, label %if.then165, label %if.end184, !dbg !3493

if.then165:                                       ; preds = %if.end163
  %87 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.cxxdiag_fci, align 8, !dbg !3494
  %call166 = call i32 @find_char_info_specifier_index(%struct.format_char_info* %87, i32 68), !dbg !3496
  store i32 %call166, i32* %i, align 4, !dbg !3497
  %88 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.cxxdiag_fci, align 8, !dbg !3498
  %89 = load i32, i32* %i, align 4, !dbg !3499
  %idxprom167 = zext i32 %89 to i64, !dbg !3498
  %arrayidx168 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %88, i64 %idxprom167, !dbg !3498
  %types169 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %arrayidx168, i32 0, i32 3, !dbg !3500
  %arrayidx170 = getelementptr inbounds [12 x %struct.format_type_detail], [12 x %struct.format_type_detail]* %types169, i64 0, i64 0, !dbg !3498
  %type171 = getelementptr inbounds %struct.format_type_detail, %struct.format_type_detail* %arrayidx170, i32 0, i32 2, !dbg !3501
  store %union.tree_node** @init_dynamic_diag_info.t, %union.tree_node*** %type171, align 8, !dbg !3502
  %90 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.cxxdiag_fci, align 8, !dbg !3503
  %91 = load i32, i32* %i, align 4, !dbg !3504
  %idxprom172 = zext i32 %91 to i64, !dbg !3503
  %arrayidx173 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %90, i64 %idxprom172, !dbg !3503
  %pointer_count174 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %arrayidx173, i32 0, i32 1, !dbg !3505
  store i32 1, i32* %pointer_count174, align 8, !dbg !3506
  %92 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.cxxdiag_fci, align 8, !dbg !3507
  %call175 = call i32 @find_char_info_specifier_index(%struct.format_char_info* %92, i32 75), !dbg !3508
  store i32 %call175, i32* %i, align 4, !dbg !3509
  %93 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.cxxdiag_fci, align 8, !dbg !3510
  %94 = load i32, i32* %i, align 4, !dbg !3511
  %idxprom176 = zext i32 %94 to i64, !dbg !3510
  %arrayidx177 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %93, i64 %idxprom176, !dbg !3510
  %types178 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %arrayidx177, i32 0, i32 3, !dbg !3512
  %arrayidx179 = getelementptr inbounds [12 x %struct.format_type_detail], [12 x %struct.format_type_detail]* %types178, i64 0, i64 0, !dbg !3510
  %type180 = getelementptr inbounds %struct.format_type_detail, %struct.format_type_detail* %arrayidx179, i32 0, i32 2, !dbg !3513
  store %union.tree_node** @init_dynamic_diag_info.t, %union.tree_node*** %type180, align 8, !dbg !3514
  %95 = load %struct.format_char_info*, %struct.format_char_info** @init_dynamic_diag_info.cxxdiag_fci, align 8, !dbg !3515
  %96 = load i32, i32* %i, align 4, !dbg !3516
  %idxprom181 = zext i32 %96 to i64, !dbg !3515
  %arrayidx182 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %95, i64 %idxprom181, !dbg !3515
  %pointer_count183 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %arrayidx182, i32 0, i32 1, !dbg !3517
  store i32 1, i32* %pointer_count183, align 8, !dbg !3518
  br label %if.end184, !dbg !3519

if.end184:                                        ; preds = %if.then165, %if.end163
  br label %if.end185, !dbg !3520

if.end185:                                        ; preds = %if.end184, %lor.lhs.false2
  ret void, !dbg !3521
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i8* @convert_format_name_to_system_name(i8* %attr_name) #0 !dbg !3522 {
entry:
  %retval = alloca i8*, align 8
  %attr_name.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %attr_name, i8** %attr_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %attr_name.addr, metadata !3525, metadata !DIExpression()), !dbg !3526
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3527, metadata !DIExpression()), !dbg !3528
  %0 = load i8*, i8** %attr_name.addr, align 8, !dbg !3529
  %cmp = icmp eq i8* %0, null, !dbg !3531
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3532

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %attr_name.addr, align 8, !dbg !3533
  %2 = load i8, i8* %1, align 1, !dbg !3534
  %conv = sext i8 %2 to i32, !dbg !3534
  %cmp1 = icmp eq i32 %conv, 0, !dbg !3535
  br i1 %cmp1, label %if.then, label %lor.lhs.false3, !dbg !3536

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %3 = load i8*, i8** %attr_name.addr, align 8, !dbg !3537
  %call = call i32 @strncmp(i8* %3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 0), i64 4), !dbg !3538
  %cmp4 = icmp eq i32 %call, 0, !dbg !3539
  br i1 %cmp4, label %if.then, label %if.end, !dbg !3540

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  %4 = load i8*, i8** %attr_name.addr, align 8, !dbg !3541
  store i8* %4, i8** %retval, align 8, !dbg !3542
  br label %return, !dbg !3542

if.end:                                           ; preds = %lor.lhs.false3
  store i32 0, i32* %i, align 4, !dbg !3543
  br label %for.cond, !dbg !3545

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4, !dbg !3546
  %idxprom = sext i32 %5 to i64, !dbg !3548
  %arrayidx = getelementptr inbounds [5 x %struct.target_ovr_attr], [5 x %struct.target_ovr_attr]* @gnu_target_overrides_format_attributes, i64 0, i64 %idxprom, !dbg !3548
  %named_attr_src = getelementptr inbounds %struct.target_ovr_attr, %struct.target_ovr_attr* %arrayidx, i32 0, i32 0, !dbg !3549
  %6 = load i8*, i8** %named_attr_src, align 16, !dbg !3549
  %cmp6 = icmp ne i8* %6, null, !dbg !3550
  br i1 %cmp6, label %for.body, label %for.end, !dbg !3551

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4, !dbg !3552
  %idxprom8 = sext i32 %7 to i64, !dbg !3555
  %arrayidx9 = getelementptr inbounds [5 x %struct.target_ovr_attr], [5 x %struct.target_ovr_attr]* @gnu_target_overrides_format_attributes, i64 0, i64 %idxprom8, !dbg !3555
  %named_attr_src10 = getelementptr inbounds %struct.target_ovr_attr, %struct.target_ovr_attr* %arrayidx9, i32 0, i32 0, !dbg !3556
  %8 = load i8*, i8** %named_attr_src10, align 16, !dbg !3556
  %9 = load i8*, i8** %attr_name.addr, align 8, !dbg !3557
  %call11 = call zeroext i8 @cmp_attribs(i8* %8, i8* %9), !dbg !3558
  %tobool = icmp ne i8 %call11, 0, !dbg !3558
  br i1 %tobool, label %if.then12, label %if.end13, !dbg !3559

if.then12:                                        ; preds = %for.body
  %10 = load i8*, i8** %attr_name.addr, align 8, !dbg !3560
  store i8* %10, i8** %retval, align 8, !dbg !3561
  br label %return, !dbg !3561

if.end13:                                         ; preds = %for.body
  %11 = load i32, i32* %i, align 4, !dbg !3562
  %idxprom14 = sext i32 %11 to i64, !dbg !3564
  %arrayidx15 = getelementptr inbounds [5 x %struct.target_ovr_attr], [5 x %struct.target_ovr_attr]* @gnu_target_overrides_format_attributes, i64 0, i64 %idxprom14, !dbg !3564
  %named_attr_dst = getelementptr inbounds %struct.target_ovr_attr, %struct.target_ovr_attr* %arrayidx15, i32 0, i32 1, !dbg !3565
  %12 = load i8*, i8** %named_attr_dst, align 8, !dbg !3565
  %13 = load i8*, i8** %attr_name.addr, align 8, !dbg !3566
  %call16 = call zeroext i8 @cmp_attribs(i8* %12, i8* %13), !dbg !3567
  %tobool17 = icmp ne i8 %call16, 0, !dbg !3567
  br i1 %tobool17, label %if.then18, label %if.end22, !dbg !3568

if.then18:                                        ; preds = %if.end13
  %14 = load i32, i32* %i, align 4, !dbg !3569
  %idxprom19 = sext i32 %14 to i64, !dbg !3570
  %arrayidx20 = getelementptr inbounds [5 x %struct.target_ovr_attr], [5 x %struct.target_ovr_attr]* @gnu_target_overrides_format_attributes, i64 0, i64 %idxprom19, !dbg !3570
  %named_attr_src21 = getelementptr inbounds %struct.target_ovr_attr, %struct.target_ovr_attr* %arrayidx20, i32 0, i32 0, !dbg !3571
  %15 = load i8*, i8** %named_attr_src21, align 16, !dbg !3571
  store i8* %15, i8** %retval, align 8, !dbg !3572
  br label %return, !dbg !3572

if.end22:                                         ; preds = %if.end13
  br label %for.inc, !dbg !3573

for.inc:                                          ; preds = %if.end22
  %16 = load i32, i32* %i, align 4, !dbg !3574
  %inc = add nsw i32 %16, 1, !dbg !3574
  store i32 %inc, i32* %i, align 4, !dbg !3574
  br label %for.cond, !dbg !3575, !llvm.loop !3576

for.end:                                          ; preds = %for.cond
  %17 = load i8*, i8** %attr_name.addr, align 8, !dbg !3578
  store i8* %17, i8** %retval, align 8, !dbg !3579
  br label %return, !dbg !3579

return:                                           ; preds = %for.end, %if.then18, %if.then12, %if.then
  %18 = load i8*, i8** %retval, align 8, !dbg !3580
  ret i8* %18, !dbg !3580
}

declare dso_local i32 @strncmp(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cmp_attribs(i8* %tattr_name, i8* %attr_name) #0 !dbg !3581 {
entry:
  %retval = alloca i8, align 1
  %tattr_name.addr = alloca i8*, align 8
  %attr_name.addr = alloca i8*, align 8
  %alen = alloca i32, align 4
  %slen = alloca i32, align 4
  store i8* %tattr_name, i8** %tattr_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %tattr_name.addr, metadata !3584, metadata !DIExpression()), !dbg !3585
  store i8* %attr_name, i8** %attr_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %attr_name.addr, metadata !3586, metadata !DIExpression()), !dbg !3587
  call void @llvm.dbg.declare(metadata i32* %alen, metadata !3588, metadata !DIExpression()), !dbg !3589
  %0 = load i8*, i8** %attr_name.addr, align 8, !dbg !3590
  %call = call i64 @strlen(i8* %0), !dbg !3591
  %conv = trunc i64 %call to i32, !dbg !3591
  store i32 %conv, i32* %alen, align 4, !dbg !3589
  call void @llvm.dbg.declare(metadata i32* %slen, metadata !3592, metadata !DIExpression()), !dbg !3593
  %1 = load i8*, i8** %tattr_name.addr, align 8, !dbg !3594
  %tobool = icmp ne i8* %1, null, !dbg !3594
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3594

cond.true:                                        ; preds = %entry
  %2 = load i8*, i8** %tattr_name.addr, align 8, !dbg !3595
  %call1 = call i64 @strlen(i8* %2), !dbg !3596
  br label %cond.end, !dbg !3594

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3594

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call1, %cond.true ], [ 0, %cond.false ], !dbg !3594
  %conv2 = trunc i64 %cond to i32, !dbg !3597
  store i32 %conv2, i32* %slen, align 4, !dbg !3593
  %3 = load i32, i32* %alen, align 4, !dbg !3598
  %cmp = icmp sgt i32 %3, 4, !dbg !3600
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !3601

land.lhs.true:                                    ; preds = %cond.end
  %4 = load i8*, i8** %attr_name.addr, align 8, !dbg !3602
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 0, !dbg !3602
  %5 = load i8, i8* %arrayidx, align 1, !dbg !3602
  %conv4 = sext i8 %5 to i32, !dbg !3602
  %cmp5 = icmp eq i32 %conv4, 95, !dbg !3603
  br i1 %cmp5, label %land.lhs.true7, label %if.end, !dbg !3604

land.lhs.true7:                                   ; preds = %land.lhs.true
  %6 = load i8*, i8** %attr_name.addr, align 8, !dbg !3605
  %arrayidx8 = getelementptr inbounds i8, i8* %6, i64 1, !dbg !3605
  %7 = load i8, i8* %arrayidx8, align 1, !dbg !3605
  %conv9 = sext i8 %7 to i32, !dbg !3605
  %cmp10 = icmp eq i32 %conv9, 95, !dbg !3606
  br i1 %cmp10, label %land.lhs.true12, label %if.end, !dbg !3607

land.lhs.true12:                                  ; preds = %land.lhs.true7
  %8 = load i8*, i8** %attr_name.addr, align 8, !dbg !3608
  %9 = load i32, i32* %alen, align 4, !dbg !3609
  %sub = sub nsw i32 %9, 1, !dbg !3610
  %idxprom = sext i32 %sub to i64, !dbg !3608
  %arrayidx13 = getelementptr inbounds i8, i8* %8, i64 %idxprom, !dbg !3608
  %10 = load i8, i8* %arrayidx13, align 1, !dbg !3608
  %conv14 = sext i8 %10 to i32, !dbg !3608
  %cmp15 = icmp eq i32 %conv14, 95, !dbg !3611
  br i1 %cmp15, label %land.lhs.true17, label %if.end, !dbg !3612

land.lhs.true17:                                  ; preds = %land.lhs.true12
  %11 = load i8*, i8** %attr_name.addr, align 8, !dbg !3613
  %12 = load i32, i32* %alen, align 4, !dbg !3614
  %sub18 = sub nsw i32 %12, 2, !dbg !3615
  %idxprom19 = sext i32 %sub18 to i64, !dbg !3613
  %arrayidx20 = getelementptr inbounds i8, i8* %11, i64 %idxprom19, !dbg !3613
  %13 = load i8, i8* %arrayidx20, align 1, !dbg !3613
  %conv21 = sext i8 %13 to i32, !dbg !3613
  %cmp22 = icmp eq i32 %conv21, 95, !dbg !3616
  br i1 %cmp22, label %if.then, label %if.end, !dbg !3617

if.then:                                          ; preds = %land.lhs.true17
  %14 = load i8*, i8** %attr_name.addr, align 8, !dbg !3618
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 2, !dbg !3618
  store i8* %add.ptr, i8** %attr_name.addr, align 8, !dbg !3618
  %15 = load i32, i32* %alen, align 4, !dbg !3620
  %sub24 = sub nsw i32 %15, 4, !dbg !3620
  store i32 %sub24, i32* %alen, align 4, !dbg !3620
  br label %if.end, !dbg !3621

if.end:                                           ; preds = %if.then, %land.lhs.true17, %land.lhs.true12, %land.lhs.true7, %land.lhs.true, %cond.end
  %16 = load i32, i32* %alen, align 4, !dbg !3622
  %17 = load i32, i32* %slen, align 4, !dbg !3624
  %cmp25 = icmp ne i32 %16, %17, !dbg !3625
  br i1 %cmp25, label %if.then31, label %lor.lhs.false, !dbg !3626

lor.lhs.false:                                    ; preds = %if.end
  %18 = load i8*, i8** %tattr_name.addr, align 8, !dbg !3627
  %19 = load i8*, i8** %attr_name.addr, align 8, !dbg !3628
  %20 = load i32, i32* %alen, align 4, !dbg !3629
  %conv27 = sext i32 %20 to i64, !dbg !3629
  %call28 = call i32 @strncmp(i8* %18, i8* %19, i64 %conv27), !dbg !3630
  %cmp29 = icmp ne i32 %call28, 0, !dbg !3631
  br i1 %cmp29, label %if.then31, label %if.end32, !dbg !3632

if.then31:                                        ; preds = %lor.lhs.false, %if.end
  store i8 0, i8* %retval, align 1, !dbg !3633
  br label %return, !dbg !3633

if.end32:                                         ; preds = %lor.lhs.false
  store i8 1, i8* %retval, align 1, !dbg !3634
  br label %return, !dbg !3634

return:                                           ; preds = %if.end32, %if.then31
  %21 = load i8, i8* %retval, align 1, !dbg !3635
  ret i8 %21, !dbg !3635
}

declare dso_local i64 @strlen(i8*) #2

declare dso_local i32 @strcmp(i8*, i8*) #2

declare dso_local void @check_function_arguments_recurse(void (i8*, %union.tree_node*, i64)*, i8*, %union.tree_node*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @check_format_arg(i8* %ctx, %union.tree_node* %format_tree, i64 %arg_num) #0 !dbg !3636 {
entry:
  %ctx.addr = alloca i8*, align 8
  %format_tree.addr = alloca %union.tree_node*, align 8
  %arg_num.addr = alloca i64, align 8
  %format_ctx = alloca %struct.format_check_context*, align 8
  %res = alloca %struct.format_check_results*, align 8
  %info = alloca %struct.function_format_info*, align 8
  %params = alloca %union.tree_node*, align 8
  %format_length = alloca i32, align 4
  %offset = alloca i64, align 8
  %format_chars = alloca i8*, align 8
  %array_size = alloca %union.tree_node*, align 8
  %array_init = alloca %union.tree_node*, align 8
  %fwt_pool = alloca %struct.alloc_pool_def*, align 8
  %arg0 = alloca %union.tree_node*, align 8
  %arg1 = alloca %union.tree_node*, align 8
  %array_size_value = alloca i64, align 8
  store i8* %ctx, i8** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ctx.addr, metadata !3639, metadata !DIExpression()), !dbg !3640
  store %union.tree_node* %format_tree, %union.tree_node** %format_tree.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %format_tree.addr, metadata !3641, metadata !DIExpression()), !dbg !3642
  store i64 %arg_num, i64* %arg_num.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %arg_num.addr, metadata !3643, metadata !DIExpression()), !dbg !3644
  call void @llvm.dbg.declare(metadata %struct.format_check_context** %format_ctx, metadata !3645, metadata !DIExpression()), !dbg !3646
  %0 = load i8*, i8** %ctx.addr, align 8, !dbg !3647
  %1 = bitcast i8* %0 to %struct.format_check_context*, !dbg !3648
  store %struct.format_check_context* %1, %struct.format_check_context** %format_ctx, align 8, !dbg !3646
  call void @llvm.dbg.declare(metadata %struct.format_check_results** %res, metadata !3649, metadata !DIExpression()), !dbg !3650
  %2 = load %struct.format_check_context*, %struct.format_check_context** %format_ctx, align 8, !dbg !3651
  %res1 = getelementptr inbounds %struct.format_check_context, %struct.format_check_context* %2, i32 0, i32 0, !dbg !3652
  %3 = load %struct.format_check_results*, %struct.format_check_results** %res1, align 8, !dbg !3652
  store %struct.format_check_results* %3, %struct.format_check_results** %res, align 8, !dbg !3650
  call void @llvm.dbg.declare(metadata %struct.function_format_info** %info, metadata !3653, metadata !DIExpression()), !dbg !3654
  %4 = load %struct.format_check_context*, %struct.format_check_context** %format_ctx, align 8, !dbg !3655
  %info2 = getelementptr inbounds %struct.format_check_context, %struct.format_check_context* %4, i32 0, i32 1, !dbg !3656
  %5 = load %struct.function_format_info*, %struct.function_format_info** %info2, align 8, !dbg !3656
  store %struct.function_format_info* %5, %struct.function_format_info** %info, align 8, !dbg !3654
  call void @llvm.dbg.declare(metadata %union.tree_node** %params, metadata !3657, metadata !DIExpression()), !dbg !3658
  %6 = load %struct.format_check_context*, %struct.format_check_context** %format_ctx, align 8, !dbg !3659
  %params3 = getelementptr inbounds %struct.format_check_context, %struct.format_check_context* %6, i32 0, i32 2, !dbg !3660
  %7 = load %union.tree_node*, %union.tree_node** %params3, align 8, !dbg !3660
  store %union.tree_node* %7, %union.tree_node** %params, align 8, !dbg !3658
  call void @llvm.dbg.declare(metadata i32* %format_length, metadata !3661, metadata !DIExpression()), !dbg !3662
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !3663, metadata !DIExpression()), !dbg !3664
  call void @llvm.dbg.declare(metadata i8** %format_chars, metadata !3665, metadata !DIExpression()), !dbg !3666
  call void @llvm.dbg.declare(metadata %union.tree_node** %array_size, metadata !3667, metadata !DIExpression()), !dbg !3668
  store %union.tree_node* null, %union.tree_node** %array_size, align 8, !dbg !3668
  call void @llvm.dbg.declare(metadata %union.tree_node** %array_init, metadata !3669, metadata !DIExpression()), !dbg !3670
  call void @llvm.dbg.declare(metadata %struct.alloc_pool_def** %fwt_pool, metadata !3671, metadata !DIExpression()), !dbg !3695
  %8 = load %union.tree_node*, %union.tree_node** %format_tree.addr, align 8, !dbg !3696
  %call = call i32 @integer_zerop(%union.tree_node* %8), !dbg !3698
  %tobool = icmp ne i32 %call, 0, !dbg !3698
  br i1 %tobool, label %if.then, label %if.end11, !dbg !3699

if.then:                                          ; preds = %entry
  br label %while.cond, !dbg !3700

while.cond:                                       ; preds = %if.end, %if.then
  %9 = load i64, i64* %arg_num.addr, align 8, !dbg !3702
  %add = add i64 %9, 1, !dbg !3703
  %10 = load %struct.function_format_info*, %struct.function_format_info** %info, align 8, !dbg !3704
  %first_arg_num = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %10, i32 0, i32 2, !dbg !3705
  %11 = load i64, i64* %first_arg_num, align 8, !dbg !3705
  %cmp = icmp ult i64 %add, %11, !dbg !3706
  br i1 %cmp, label %while.body, label %while.end, !dbg !3700

while.body:                                       ; preds = %while.cond
  %12 = load %union.tree_node*, %union.tree_node** %params, align 8, !dbg !3707
  %cmp4 = icmp eq %union.tree_node* %12, null, !dbg !3710
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !3711

if.then5:                                         ; preds = %while.body
  br label %return, !dbg !3712

if.end:                                           ; preds = %while.body
  %13 = load %union.tree_node*, %union.tree_node** %params, align 8, !dbg !3713
  %common = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !3713
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !3713
  %14 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3713
  store %union.tree_node* %14, %union.tree_node** %params, align 8, !dbg !3714
  %15 = load i64, i64* %arg_num.addr, align 8, !dbg !3715
  %inc = add i64 %15, 1, !dbg !3715
  store i64 %inc, i64* %arg_num.addr, align 8, !dbg !3715
  br label %while.cond, !dbg !3700, !llvm.loop !3716

while.end:                                        ; preds = %while.cond
  %16 = load %union.tree_node*, %union.tree_node** %params, align 8, !dbg !3718
  %cmp6 = icmp eq %union.tree_node* %16, null, !dbg !3720
  br i1 %cmp6, label %if.then7, label %if.else, !dbg !3721

if.then7:                                         ; preds = %while.end
  %17 = load %struct.format_check_results*, %struct.format_check_results** %res, align 8, !dbg !3722
  %number_other = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %17, i32 0, i32 6, !dbg !3723
  %18 = load i32, i32* %number_other, align 4, !dbg !3724
  %inc8 = add nsw i32 %18, 1, !dbg !3724
  store i32 %inc8, i32* %number_other, align 4, !dbg !3724
  br label %if.end10, !dbg !3722

if.else:                                          ; preds = %while.end
  %19 = load %struct.format_check_results*, %struct.format_check_results** %res, align 8, !dbg !3725
  %number_extra_args = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %19, i32 0, i32 1, !dbg !3726
  %20 = load i32, i32* %number_extra_args, align 4, !dbg !3727
  %inc9 = add nsw i32 %20, 1, !dbg !3727
  store i32 %inc9, i32* %number_extra_args, align 4, !dbg !3727
  br label %if.end10

if.end10:                                         ; preds = %if.else, %if.then7
  br label %return, !dbg !3728

if.end11:                                         ; preds = %entry
  store i64 0, i64* %offset, align 8, !dbg !3729
  %21 = load %union.tree_node*, %union.tree_node** %format_tree.addr, align 8, !dbg !3730
  %base = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !3730
  %22 = bitcast %struct.tree_base* %base to i64*, !dbg !3730
  %bf.load = load i64, i64* %22, align 8, !dbg !3730
  %bf.clear = and i64 %bf.load, 65535, !dbg !3730
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3730
  %cmp12 = icmp eq i32 %bf.cast, 66, !dbg !3732
  br i1 %cmp12, label %if.then13, label %if.end36, !dbg !3733

if.then13:                                        ; preds = %if.end11
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg0, metadata !3734, metadata !DIExpression()), !dbg !3736
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1, metadata !3737, metadata !DIExpression()), !dbg !3738
  %23 = load %union.tree_node*, %union.tree_node** %format_tree.addr, align 8, !dbg !3739
  %exp = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !3739
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3739
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3739
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3739
  store %union.tree_node* %24, %union.tree_node** %arg0, align 8, !dbg !3740
  %25 = load %union.tree_node*, %union.tree_node** %format_tree.addr, align 8, !dbg !3741
  %exp14 = bitcast %union.tree_node* %25 to %struct.tree_exp*, !dbg !3741
  %operands15 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp14, i32 0, i32 3, !dbg !3741
  %arrayidx16 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands15, i64 0, i64 1, !dbg !3741
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx16, align 8, !dbg !3741
  store %union.tree_node* %26, %union.tree_node** %arg1, align 8, !dbg !3742
  %27 = load %union.tree_node*, %union.tree_node** %arg0, align 8, !dbg !3743
  %call17 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %27), !dbg !3743
  store %union.tree_node* %call17, %union.tree_node** %arg0, align 8, !dbg !3743
  %28 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !3744
  %call18 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %28), !dbg !3744
  store %union.tree_node* %call18, %union.tree_node** %arg1, align 8, !dbg !3744
  %29 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !3745
  %base19 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !3745
  %30 = bitcast %struct.tree_base* %base19 to i64*, !dbg !3745
  %bf.load20 = load i64, i64* %30, align 8, !dbg !3745
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !3745
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !3745
  %cmp23 = icmp eq i32 %bf.cast22, 23, !dbg !3747
  br i1 %cmp23, label %if.then24, label %if.else25, !dbg !3748

if.then24:                                        ; preds = %if.then13
  %31 = load %union.tree_node*, %union.tree_node** %arg0, align 8, !dbg !3749
  store %union.tree_node* %31, %union.tree_node** %format_tree.addr, align 8, !dbg !3750
  br label %if.end27, !dbg !3751

if.else25:                                        ; preds = %if.then13
  %32 = load %struct.format_check_results*, %struct.format_check_results** %res, align 8, !dbg !3752
  %number_non_literal = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %32, i32 0, i32 0, !dbg !3754
  %33 = load i32, i32* %number_non_literal, align 4, !dbg !3755
  %inc26 = add nsw i32 %33, 1, !dbg !3755
  store i32 %inc26, i32* %number_non_literal, align 4, !dbg !3755
  br label %return, !dbg !3756

if.end27:                                         ; preds = %if.then24
  %34 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !3757
  %call28 = call i32 @host_integerp(%union.tree_node* %34, i32 0), !dbg !3759
  %tobool29 = icmp ne i32 %call28, 0, !dbg !3759
  br i1 %tobool29, label %lor.lhs.false, label %if.then32, !dbg !3760

lor.lhs.false:                                    ; preds = %if.end27
  %35 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !3761
  %call30 = call i64 @tree_low_cst(%union.tree_node* %35, i32 0), !dbg !3762
  store i64 %call30, i64* %offset, align 8, !dbg !3763
  %cmp31 = icmp slt i64 %call30, 0, !dbg !3764
  br i1 %cmp31, label %if.then32, label %if.end35, !dbg !3765

if.then32:                                        ; preds = %lor.lhs.false, %if.end27
  %36 = load %struct.format_check_results*, %struct.format_check_results** %res, align 8, !dbg !3766
  %number_non_literal33 = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %36, i32 0, i32 0, !dbg !3768
  %37 = load i32, i32* %number_non_literal33, align 4, !dbg !3769
  %inc34 = add nsw i32 %37, 1, !dbg !3769
  store i32 %inc34, i32* %number_non_literal33, align 4, !dbg !3769
  br label %return, !dbg !3770

if.end35:                                         ; preds = %lor.lhs.false
  br label %if.end36, !dbg !3771

if.end36:                                         ; preds = %if.end35, %if.end11
  %38 = load %union.tree_node*, %union.tree_node** %format_tree.addr, align 8, !dbg !3772
  %base37 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !3772
  %39 = bitcast %struct.tree_base* %base37 to i64*, !dbg !3772
  %bf.load38 = load i64, i64* %39, align 8, !dbg !3772
  %bf.clear39 = and i64 %bf.load38, 65535, !dbg !3772
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !3772
  %cmp41 = icmp ne i32 %bf.cast40, 121, !dbg !3774
  br i1 %cmp41, label %if.then42, label %if.end45, !dbg !3775

if.then42:                                        ; preds = %if.end36
  %40 = load %struct.format_check_results*, %struct.format_check_results** %res, align 8, !dbg !3776
  %number_non_literal43 = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %40, i32 0, i32 0, !dbg !3778
  %41 = load i32, i32* %number_non_literal43, align 4, !dbg !3779
  %inc44 = add nsw i32 %41, 1, !dbg !3779
  store i32 %inc44, i32* %number_non_literal43, align 4, !dbg !3779
  br label %return, !dbg !3780

if.end45:                                         ; preds = %if.end36
  %42 = load %union.tree_node*, %union.tree_node** %format_tree.addr, align 8, !dbg !3781
  %exp46 = bitcast %union.tree_node* %42 to %struct.tree_exp*, !dbg !3781
  %operands47 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp46, i32 0, i32 3, !dbg !3781
  %arrayidx48 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands47, i64 0, i64 0, !dbg !3781
  %43 = load %union.tree_node*, %union.tree_node** %arrayidx48, align 8, !dbg !3781
  store %union.tree_node* %43, %union.tree_node** %format_tree.addr, align 8, !dbg !3782
  %44 = load %union.tree_node*, %union.tree_node** %format_tree.addr, align 8, !dbg !3783
  %base49 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !3783
  %45 = bitcast %struct.tree_base* %base49 to i64*, !dbg !3783
  %bf.load50 = load i64, i64* %45, align 8, !dbg !3783
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !3783
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !3783
  %cmp53 = icmp eq i32 %bf.cast52, 45, !dbg !3785
  br i1 %cmp53, label %land.lhs.true, label %if.end70, !dbg !3786

land.lhs.true:                                    ; preds = %if.end45
  %46 = load %union.tree_node*, %union.tree_node** %format_tree.addr, align 8, !dbg !3787
  %exp54 = bitcast %union.tree_node* %46 to %struct.tree_exp*, !dbg !3787
  %operands55 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp54, i32 0, i32 3, !dbg !3787
  %arrayidx56 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands55, i64 0, i64 1, !dbg !3787
  %47 = load %union.tree_node*, %union.tree_node** %arrayidx56, align 8, !dbg !3787
  %call57 = call i32 @host_integerp(%union.tree_node* %47, i32 0), !dbg !3788
  %tobool58 = icmp ne i32 %call57, 0, !dbg !3788
  br i1 %tobool58, label %land.lhs.true59, label %if.end70, !dbg !3789

land.lhs.true59:                                  ; preds = %land.lhs.true
  %48 = load %union.tree_node*, %union.tree_node** %format_tree.addr, align 8, !dbg !3790
  %exp60 = bitcast %union.tree_node* %48 to %struct.tree_exp*, !dbg !3790
  %operands61 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp60, i32 0, i32 3, !dbg !3790
  %arrayidx62 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands61, i64 0, i64 1, !dbg !3790
  %49 = load %union.tree_node*, %union.tree_node** %arrayidx62, align 8, !dbg !3790
  %call63 = call i64 @tree_low_cst(%union.tree_node* %49, i32 0), !dbg !3791
  %50 = load i64, i64* %offset, align 8, !dbg !3792
  %add64 = add nsw i64 %50, %call63, !dbg !3792
  store i64 %add64, i64* %offset, align 8, !dbg !3792
  %cmp65 = icmp sge i64 %add64, 0, !dbg !3793
  br i1 %cmp65, label %if.then66, label %if.end70, !dbg !3794

if.then66:                                        ; preds = %land.lhs.true59
  %51 = load %union.tree_node*, %union.tree_node** %format_tree.addr, align 8, !dbg !3795
  %exp67 = bitcast %union.tree_node* %51 to %struct.tree_exp*, !dbg !3795
  %operands68 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp67, i32 0, i32 3, !dbg !3795
  %arrayidx69 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands68, i64 0, i64 0, !dbg !3795
  %52 = load %union.tree_node*, %union.tree_node** %arrayidx69, align 8, !dbg !3795
  store %union.tree_node* %52, %union.tree_node** %format_tree.addr, align 8, !dbg !3796
  br label %if.end70, !dbg !3797

if.end70:                                         ; preds = %if.then66, %land.lhs.true59, %land.lhs.true, %if.end45
  %53 = load %union.tree_node*, %union.tree_node** %format_tree.addr, align 8, !dbg !3798
  %base71 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !3798
  %54 = bitcast %struct.tree_base* %base71 to i64*, !dbg !3798
  %bf.load72 = load i64, i64* %54, align 8, !dbg !3798
  %bf.clear73 = and i64 %bf.load72, 65535, !dbg !3798
  %bf.cast74 = trunc i64 %bf.clear73 to i32, !dbg !3798
  %cmp75 = icmp eq i32 %bf.cast74, 32, !dbg !3800
  br i1 %cmp75, label %land.lhs.true76, label %if.end93, !dbg !3801

land.lhs.true76:                                  ; preds = %if.end70
  %55 = load %union.tree_node*, %union.tree_node** %format_tree.addr, align 8, !dbg !3802
  %common77 = bitcast %union.tree_node* %55 to %struct.tree_common*, !dbg !3802
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common77, i32 0, i32 2, !dbg !3802
  %56 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3802
  %base78 = bitcast %union.tree_node* %56 to %struct.tree_base*, !dbg !3802
  %57 = bitcast %struct.tree_base* %base78 to i64*, !dbg !3802
  %bf.load79 = load i64, i64* %57, align 8, !dbg !3802
  %bf.clear80 = and i64 %bf.load79, 65535, !dbg !3802
  %bf.cast81 = trunc i64 %bf.clear80 to i32, !dbg !3802
  %cmp82 = icmp eq i32 %bf.cast81, 15, !dbg !3803
  br i1 %cmp82, label %land.lhs.true83, label %if.end93, !dbg !3804

land.lhs.true83:                                  ; preds = %land.lhs.true76
  %58 = load %union.tree_node*, %union.tree_node** %format_tree.addr, align 8, !dbg !3805
  %call84 = call %union.tree_node* @decl_constant_value(%union.tree_node* %58), !dbg !3806
  store %union.tree_node* %call84, %union.tree_node** %array_init, align 8, !dbg !3807
  %59 = load %union.tree_node*, %union.tree_node** %format_tree.addr, align 8, !dbg !3808
  %cmp85 = icmp ne %union.tree_node* %call84, %59, !dbg !3809
  br i1 %cmp85, label %land.lhs.true86, label %if.end93, !dbg !3810

land.lhs.true86:                                  ; preds = %land.lhs.true83
  %60 = load %union.tree_node*, %union.tree_node** %array_init, align 8, !dbg !3811
  %base87 = bitcast %union.tree_node* %60 to %struct.tree_base*, !dbg !3811
  %61 = bitcast %struct.tree_base* %base87 to i64*, !dbg !3811
  %bf.load88 = load i64, i64* %61, align 8, !dbg !3811
  %bf.clear89 = and i64 %bf.load88, 65535, !dbg !3811
  %bf.cast90 = trunc i64 %bf.clear89 to i32, !dbg !3811
  %cmp91 = icmp eq i32 %bf.cast90, 28, !dbg !3812
  br i1 %cmp91, label %if.then92, label %if.end93, !dbg !3813

if.then92:                                        ; preds = %land.lhs.true86
  %62 = load %union.tree_node*, %union.tree_node** %format_tree.addr, align 8, !dbg !3814
  %decl_common = bitcast %union.tree_node* %62 to %struct.tree_decl_common*, !dbg !3814
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 4, !dbg !3814
  %63 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !3814
  store %union.tree_node* %63, %union.tree_node** %array_size, align 8, !dbg !3816
  %64 = load %union.tree_node*, %union.tree_node** %array_init, align 8, !dbg !3817
  store %union.tree_node* %64, %union.tree_node** %format_tree.addr, align 8, !dbg !3818
  br label %if.end93, !dbg !3819

if.end93:                                         ; preds = %if.then92, %land.lhs.true86, %land.lhs.true83, %land.lhs.true76, %if.end70
  %65 = load %union.tree_node*, %union.tree_node** %format_tree.addr, align 8, !dbg !3820
  %base94 = bitcast %union.tree_node* %65 to %struct.tree_base*, !dbg !3820
  %66 = bitcast %struct.tree_base* %base94 to i64*, !dbg !3820
  %bf.load95 = load i64, i64* %66, align 8, !dbg !3820
  %bf.clear96 = and i64 %bf.load95, 65535, !dbg !3820
  %bf.cast97 = trunc i64 %bf.clear96 to i32, !dbg !3820
  %cmp98 = icmp ne i32 %bf.cast97, 28, !dbg !3822
  br i1 %cmp98, label %if.then99, label %if.end102, !dbg !3823

if.then99:                                        ; preds = %if.end93
  %67 = load %struct.format_check_results*, %struct.format_check_results** %res, align 8, !dbg !3824
  %number_non_literal100 = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %67, i32 0, i32 0, !dbg !3826
  %68 = load i32, i32* %number_non_literal100, align 4, !dbg !3827
  %inc101 = add nsw i32 %68, 1, !dbg !3827
  store i32 %inc101, i32* %number_non_literal100, align 4, !dbg !3827
  br label %return, !dbg !3828

if.end102:                                        ; preds = %if.end93
  %69 = load %union.tree_node*, %union.tree_node** %format_tree.addr, align 8, !dbg !3829
  %common103 = bitcast %union.tree_node* %69 to %struct.tree_common*, !dbg !3829
  %type104 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common103, i32 0, i32 2, !dbg !3829
  %70 = load %union.tree_node*, %union.tree_node** %type104, align 8, !dbg !3829
  %common105 = bitcast %union.tree_node* %70 to %struct.tree_common*, !dbg !3829
  %type106 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common105, i32 0, i32 2, !dbg !3829
  %71 = load %union.tree_node*, %union.tree_node** %type106, align 8, !dbg !3829
  %type107 = bitcast %union.tree_node* %71 to %struct.tree_type*, !dbg !3829
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type107, i32 0, i32 16, !dbg !3829
  %72 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !3829
  %73 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 16, !dbg !3831
  %cmp108 = icmp ne %union.tree_node* %72, %73, !dbg !3832
  br i1 %cmp108, label %if.then109, label %if.end111, !dbg !3833

if.then109:                                       ; preds = %if.end102
  %74 = load %struct.format_check_results*, %struct.format_check_results** %res, align 8, !dbg !3834
  %number_wide = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %74, i32 0, i32 3, !dbg !3836
  %75 = load i32, i32* %number_wide, align 4, !dbg !3837
  %inc110 = add nsw i32 %75, 1, !dbg !3837
  store i32 %inc110, i32* %number_wide, align 4, !dbg !3837
  br label %return, !dbg !3838

if.end111:                                        ; preds = %if.end102
  %76 = load %union.tree_node*, %union.tree_node** %format_tree.addr, align 8, !dbg !3839
  %string = bitcast %union.tree_node* %76 to %struct.tree_string*, !dbg !3839
  %str = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 2, !dbg !3839
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str, i64 0, i64 0, !dbg !3839
  store i8* %arraydecay, i8** %format_chars, align 8, !dbg !3840
  %77 = load %union.tree_node*, %union.tree_node** %format_tree.addr, align 8, !dbg !3841
  %string112 = bitcast %union.tree_node* %77 to %struct.tree_string*, !dbg !3841
  %length = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string112, i32 0, i32 1, !dbg !3841
  %78 = load i32, i32* %length, align 8, !dbg !3841
  store i32 %78, i32* %format_length, align 4, !dbg !3842
  %79 = load %union.tree_node*, %union.tree_node** %array_size, align 8, !dbg !3843
  %cmp113 = icmp ne %union.tree_node* %79, null, !dbg !3845
  br i1 %cmp113, label %if.then114, label %if.end137, !dbg !3846

if.then114:                                       ; preds = %if.end111
  %80 = load %union.tree_node*, %union.tree_node** %array_size, align 8, !dbg !3847
  %base115 = bitcast %union.tree_node* %80 to %struct.tree_base*, !dbg !3847
  %81 = bitcast %struct.tree_base* %base115 to i64*, !dbg !3847
  %bf.load116 = load i64, i64* %81, align 8, !dbg !3847
  %bf.clear117 = and i64 %bf.load116, 65535, !dbg !3847
  %bf.cast118 = trunc i64 %bf.clear117 to i32, !dbg !3847
  %cmp119 = icmp eq i32 %bf.cast118, 23, !dbg !3847
  br i1 %cmp119, label %cond.false, label %cond.true, !dbg !3847

cond.true:                                        ; preds = %if.then114
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i32 1383, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)), !dbg !3847
  br label %cond.end, !dbg !3847

cond.false:                                       ; preds = %if.then114
  br label %cond.end, !dbg !3847

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3847
  %82 = load %union.tree_node*, %union.tree_node** %array_size, align 8, !dbg !3849
  %call120 = call i32 @host_integerp(%union.tree_node* %82, i32 0), !dbg !3851
  %tobool121 = icmp ne i32 %call120, 0, !dbg !3851
  br i1 %tobool121, label %if.then122, label %if.end136, !dbg !3852

if.then122:                                       ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i64* %array_size_value, metadata !3853, metadata !DIExpression()), !dbg !3855
  %83 = load %union.tree_node*, %union.tree_node** %array_size, align 8, !dbg !3856
  %int_cst = bitcast %union.tree_node* %83 to %struct.tree_int_cst*, !dbg !3856
  %int_cst123 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !3856
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst123, i32 0, i32 0, !dbg !3856
  %84 = load i64, i64* %low, align 8, !dbg !3856
  store i64 %84, i64* %array_size_value, align 8, !dbg !3855
  %85 = load i64, i64* %array_size_value, align 8, !dbg !3857
  %cmp124 = icmp sgt i64 %85, 0, !dbg !3859
  br i1 %cmp124, label %land.lhs.true125, label %if.end135, !dbg !3860

land.lhs.true125:                                 ; preds = %if.then122
  %86 = load i64, i64* %array_size_value, align 8, !dbg !3861
  %87 = load i64, i64* %array_size_value, align 8, !dbg !3862
  %conv = trunc i64 %87 to i32, !dbg !3863
  %conv126 = sext i32 %conv to i64, !dbg !3863
  %cmp127 = icmp eq i64 %86, %conv126, !dbg !3864
  br i1 %cmp127, label %land.lhs.true129, label %if.end135, !dbg !3865

land.lhs.true129:                                 ; preds = %land.lhs.true125
  %88 = load i32, i32* %format_length, align 4, !dbg !3866
  %conv130 = sext i32 %88 to i64, !dbg !3866
  %89 = load i64, i64* %array_size_value, align 8, !dbg !3867
  %cmp131 = icmp sgt i64 %conv130, %89, !dbg !3868
  br i1 %cmp131, label %if.then133, label %if.end135, !dbg !3869

if.then133:                                       ; preds = %land.lhs.true129
  %90 = load i64, i64* %array_size_value, align 8, !dbg !3870
  %conv134 = trunc i64 %90 to i32, !dbg !3870
  store i32 %conv134, i32* %format_length, align 4, !dbg !3871
  br label %if.end135, !dbg !3872

if.end135:                                        ; preds = %if.then133, %land.lhs.true129, %land.lhs.true125, %if.then122
  br label %if.end136, !dbg !3873

if.end136:                                        ; preds = %if.end135, %cond.end
  br label %if.end137, !dbg !3874

if.end137:                                        ; preds = %if.end136, %if.end111
  %91 = load i64, i64* %offset, align 8, !dbg !3875
  %tobool138 = icmp ne i64 %91, 0, !dbg !3875
  br i1 %tobool138, label %if.then139, label %if.end149, !dbg !3877

if.then139:                                       ; preds = %if.end137
  %92 = load i64, i64* %offset, align 8, !dbg !3878
  %93 = load i32, i32* %format_length, align 4, !dbg !3881
  %conv140 = sext i32 %93 to i64, !dbg !3881
  %cmp141 = icmp sge i64 %92, %conv140, !dbg !3882
  br i1 %cmp141, label %if.then143, label %if.end146, !dbg !3883

if.then143:                                       ; preds = %if.then139
  %94 = load %struct.format_check_results*, %struct.format_check_results** %res, align 8, !dbg !3884
  %number_non_literal144 = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %94, i32 0, i32 0, !dbg !3886
  %95 = load i32, i32* %number_non_literal144, align 4, !dbg !3887
  %inc145 = add nsw i32 %95, 1, !dbg !3887
  store i32 %inc145, i32* %number_non_literal144, align 4, !dbg !3887
  br label %return, !dbg !3888

if.end146:                                        ; preds = %if.then139
  %96 = load i64, i64* %offset, align 8, !dbg !3889
  %97 = load i8*, i8** %format_chars, align 8, !dbg !3890
  %add.ptr = getelementptr inbounds i8, i8* %97, i64 %96, !dbg !3890
  store i8* %add.ptr, i8** %format_chars, align 8, !dbg !3890
  %98 = load i64, i64* %offset, align 8, !dbg !3891
  %99 = load i32, i32* %format_length, align 4, !dbg !3892
  %conv147 = sext i32 %99 to i64, !dbg !3892
  %sub = sub nsw i64 %conv147, %98, !dbg !3892
  %conv148 = trunc i64 %sub to i32, !dbg !3892
  store i32 %conv148, i32* %format_length, align 4, !dbg !3892
  br label %if.end149, !dbg !3893

if.end149:                                        ; preds = %if.end146, %if.end137
  %100 = load i32, i32* %format_length, align 4, !dbg !3894
  %cmp150 = icmp slt i32 %100, 1, !dbg !3896
  br i1 %cmp150, label %if.then157, label %lor.lhs.false152, !dbg !3897

lor.lhs.false152:                                 ; preds = %if.end149
  %101 = load i8*, i8** %format_chars, align 8, !dbg !3898
  %102 = load i32, i32* %format_length, align 4, !dbg !3899
  %dec = add nsw i32 %102, -1, !dbg !3899
  store i32 %dec, i32* %format_length, align 4, !dbg !3899
  %idxprom = sext i32 %dec to i64, !dbg !3898
  %arrayidx153 = getelementptr inbounds i8, i8* %101, i64 %idxprom, !dbg !3898
  %103 = load i8, i8* %arrayidx153, align 1, !dbg !3898
  %conv154 = sext i8 %103 to i32, !dbg !3898
  %cmp155 = icmp ne i32 %conv154, 0, !dbg !3900
  br i1 %cmp155, label %if.then157, label %if.end159, !dbg !3901

if.then157:                                       ; preds = %lor.lhs.false152, %if.end149
  %104 = load %struct.format_check_results*, %struct.format_check_results** %res, align 8, !dbg !3902
  %number_unterminated = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %104, i32 0, i32 5, !dbg !3904
  %105 = load i32, i32* %number_unterminated, align 4, !dbg !3905
  %inc158 = add nsw i32 %105, 1, !dbg !3905
  store i32 %inc158, i32* %number_unterminated, align 4, !dbg !3905
  br label %return, !dbg !3906

if.end159:                                        ; preds = %lor.lhs.false152
  %106 = load i32, i32* %format_length, align 4, !dbg !3907
  %cmp160 = icmp eq i32 %106, 0, !dbg !3909
  br i1 %cmp160, label %if.then162, label %if.end164, !dbg !3910

if.then162:                                       ; preds = %if.end159
  %107 = load %struct.format_check_results*, %struct.format_check_results** %res, align 8, !dbg !3911
  %number_empty = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %107, i32 0, i32 4, !dbg !3913
  %108 = load i32, i32* %number_empty, align 4, !dbg !3914
  %inc163 = add nsw i32 %108, 1, !dbg !3914
  store i32 %inc163, i32* %number_empty, align 4, !dbg !3914
  br label %return, !dbg !3915

if.end164:                                        ; preds = %if.end159
  br label %while.cond165, !dbg !3916

while.cond165:                                    ; preds = %if.end174, %if.end164
  %109 = load i64, i64* %arg_num.addr, align 8, !dbg !3917
  %add166 = add i64 %109, 1, !dbg !3918
  %110 = load %struct.function_format_info*, %struct.function_format_info** %info, align 8, !dbg !3919
  %first_arg_num167 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %110, i32 0, i32 2, !dbg !3920
  %111 = load i64, i64* %first_arg_num167, align 8, !dbg !3920
  %cmp168 = icmp ult i64 %add166, %111, !dbg !3921
  br i1 %cmp168, label %while.body170, label %while.end178, !dbg !3916

while.body170:                                    ; preds = %while.cond165
  %112 = load %union.tree_node*, %union.tree_node** %params, align 8, !dbg !3922
  %cmp171 = icmp eq %union.tree_node* %112, null, !dbg !3925
  br i1 %cmp171, label %if.then173, label %if.end174, !dbg !3926

if.then173:                                       ; preds = %while.body170
  br label %return, !dbg !3927

if.end174:                                        ; preds = %while.body170
  %113 = load %union.tree_node*, %union.tree_node** %params, align 8, !dbg !3928
  %common175 = bitcast %union.tree_node* %113 to %struct.tree_common*, !dbg !3928
  %chain176 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common175, i32 0, i32 1, !dbg !3928
  %114 = load %union.tree_node*, %union.tree_node** %chain176, align 8, !dbg !3928
  store %union.tree_node* %114, %union.tree_node** %params, align 8, !dbg !3929
  %115 = load i64, i64* %arg_num.addr, align 8, !dbg !3930
  %inc177 = add i64 %115, 1, !dbg !3930
  store i64 %inc177, i64* %arg_num.addr, align 8, !dbg !3930
  br label %while.cond165, !dbg !3916, !llvm.loop !3931

while.end178:                                     ; preds = %while.cond165
  %116 = load %struct.format_check_results*, %struct.format_check_results** %res, align 8, !dbg !3933
  %number_other179 = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %116, i32 0, i32 6, !dbg !3934
  %117 = load i32, i32* %number_other179, align 4, !dbg !3935
  %inc180 = add nsw i32 %117, 1, !dbg !3935
  store i32 %inc180, i32* %number_other179, align 4, !dbg !3935
  %call181 = call %struct.alloc_pool_def* @create_alloc_pool(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.30, i64 0, i64 0), i64 72, i64 10), !dbg !3936
  store %struct.alloc_pool_def* %call181, %struct.alloc_pool_def** %fwt_pool, align 8, !dbg !3937
  %118 = load %struct.format_check_results*, %struct.format_check_results** %res, align 8, !dbg !3938
  %119 = load %struct.function_format_info*, %struct.function_format_info** %info, align 8, !dbg !3939
  %120 = load i8*, i8** %format_chars, align 8, !dbg !3940
  %121 = load i32, i32* %format_length, align 4, !dbg !3941
  %122 = load %union.tree_node*, %union.tree_node** %params, align 8, !dbg !3942
  %123 = load i64, i64* %arg_num.addr, align 8, !dbg !3943
  %124 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** %fwt_pool, align 8, !dbg !3944
  call void @check_format_info_main(%struct.format_check_results* %118, %struct.function_format_info* %119, i8* %120, i32 %121, %union.tree_node* %122, i64 %123, %struct.alloc_pool_def* %124), !dbg !3945
  %125 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** %fwt_pool, align 8, !dbg !3946
  call void @free_alloc_pool(%struct.alloc_pool_def* %125), !dbg !3947
  br label %return, !dbg !3948

return:                                           ; preds = %while.end178, %if.then173, %if.then162, %if.then157, %if.then143, %if.then109, %if.then99, %if.then42, %if.then32, %if.else25, %if.end10, %if.then5
  ret void, !dbg !3948
}

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

declare dso_local %union.tree_node* @tree_strip_nop_conversions(%union.tree_node*) #2

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #2

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #2

declare dso_local %union.tree_node* @decl_constant_value(%union.tree_node*) #2

declare dso_local %struct.alloc_pool_def* @create_alloc_pool(i8*, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @check_format_info_main(%struct.format_check_results* %res, %struct.function_format_info* %info, i8* %format_chars, i32 %format_length, %union.tree_node* %params, i64 %arg_num, %struct.alloc_pool_def* %fwt_pool) #0 !dbg !3949 {
entry:
  %res.addr = alloca %struct.format_check_results*, align 8
  %info.addr = alloca %struct.function_format_info*, align 8
  %format_chars.addr = alloca i8*, align 8
  %format_length.addr = alloca i32, align 4
  %params.addr = alloca %union.tree_node*, align 8
  %arg_num.addr = alloca i64, align 8
  %fwt_pool.addr = alloca %struct.alloc_pool_def*, align 8
  %orig_format_chars = alloca i8*, align 8
  %first_fillin_param = alloca %union.tree_node*, align 8
  %fki = alloca %struct.format_kind_info*, align 8
  %flag_specs = alloca %struct.format_flag_spec*, align 8
  %bad_flag_pairs = alloca %struct.format_flag_pair*, align 8
  %has_operand_number = alloca i32, align 4
  %i = alloca i32, align 4
  %suppressed = alloca i32, align 4
  %length_chars = alloca i8*, align 8
  %length_chars_val = alloca i32, align 4
  %length_chars_std = alloca i32, align 4
  %format_char = alloca i32, align 4
  %cur_param = alloca %union.tree_node*, align 8
  %wanted_type = alloca %union.tree_node*, align 8
  %main_arg_num = alloca i32, align 4
  %main_arg_params = alloca %union.tree_node*, align 8
  %wanted_type_std = alloca i32, align 4
  %wanted_type_name = alloca i8*, align 8
  %width_wanted_type = alloca %struct.format_wanted_type, align 8
  %precision_wanted_type = alloca %struct.format_wanted_type, align 8
  %main_wanted_type = alloca %struct.format_wanted_type, align 8
  %first_wanted_type = alloca %struct.format_wanted_type*, align 8
  %last_wanted_type = alloca %struct.format_wanted_type*, align 8
  %fli = alloca %struct.format_length_info*, align 8
  %fci = alloca %struct.format_char_info*, align 8
  %flag_chars = alloca [256 x i8], align 16
  %alloc_flag = alloca i32, align 4
  %scalar_identity_flag = alloca i32, align 4
  %format_start = alloca i8*, align 8
  %opnum = alloca i32, align 4
  %s = alloca %struct.format_flag_spec*, align 8
  %opnum134 = alloca i32, align 4
  %non_zero_width_char = alloca i32, align 4
  %found_width = alloca i32, align 4
  %opnum302 = alloca i32, align 4
  %s558 = alloca %struct.format_flag_spec*, align 8
  %d = alloca i32, align 4
  %s668 = alloca %struct.format_flag_spec*, align 8
  %t = alloca %struct.format_flag_spec*, align 8
  %long_name771 = alloca i8*, align 8
  %s863 = alloca %struct.format_flag_spec*, align 8
  %t864 = alloca %struct.format_flag_spec*, align 8
  %y2k_level = alloca i32, align 4
  %wanted_type_ptr = alloca %struct.format_wanted_type*, align 8
  store %struct.format_check_results* %res, %struct.format_check_results** %res.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.format_check_results** %res.addr, metadata !3952, metadata !DIExpression()), !dbg !3953
  store %struct.function_format_info* %info, %struct.function_format_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function_format_info** %info.addr, metadata !3954, metadata !DIExpression()), !dbg !3955
  store i8* %format_chars, i8** %format_chars.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %format_chars.addr, metadata !3956, metadata !DIExpression()), !dbg !3957
  store i32 %format_length, i32* %format_length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %format_length.addr, metadata !3958, metadata !DIExpression()), !dbg !3959
  store %union.tree_node* %params, %union.tree_node** %params.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %params.addr, metadata !3960, metadata !DIExpression()), !dbg !3961
  store i64 %arg_num, i64* %arg_num.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %arg_num.addr, metadata !3962, metadata !DIExpression()), !dbg !3963
  store %struct.alloc_pool_def* %fwt_pool, %struct.alloc_pool_def** %fwt_pool.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.alloc_pool_def** %fwt_pool.addr, metadata !3964, metadata !DIExpression()), !dbg !3965
  call void @llvm.dbg.declare(metadata i8** %orig_format_chars, metadata !3966, metadata !DIExpression()), !dbg !3967
  %0 = load i8*, i8** %format_chars.addr, align 8, !dbg !3968
  store i8* %0, i8** %orig_format_chars, align 8, !dbg !3967
  call void @llvm.dbg.declare(metadata %union.tree_node** %first_fillin_param, metadata !3969, metadata !DIExpression()), !dbg !3970
  %1 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !3971
  store %union.tree_node* %1, %union.tree_node** %first_fillin_param, align 8, !dbg !3970
  call void @llvm.dbg.declare(metadata %struct.format_kind_info** %fki, metadata !3972, metadata !DIExpression()), !dbg !3973
  %2 = load %struct.format_kind_info*, %struct.format_kind_info** @format_types, align 8, !dbg !3974
  %3 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !3975
  %format_type = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %3, i32 0, i32 0, !dbg !3976
  %4 = load i32, i32* %format_type, align 8, !dbg !3976
  %idxprom = sext i32 %4 to i64, !dbg !3974
  %arrayidx = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %2, i64 %idxprom, !dbg !3974
  store %struct.format_kind_info* %arrayidx, %struct.format_kind_info** %fki, align 8, !dbg !3973
  call void @llvm.dbg.declare(metadata %struct.format_flag_spec** %flag_specs, metadata !3977, metadata !DIExpression()), !dbg !3978
  %5 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !3979
  %flag_specs1 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %5, i32 0, i32 5, !dbg !3980
  %6 = load %struct.format_flag_spec*, %struct.format_flag_spec** %flag_specs1, align 8, !dbg !3980
  store %struct.format_flag_spec* %6, %struct.format_flag_spec** %flag_specs, align 8, !dbg !3978
  call void @llvm.dbg.declare(metadata %struct.format_flag_pair** %bad_flag_pairs, metadata !3981, metadata !DIExpression()), !dbg !3982
  %7 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !3983
  %bad_flag_pairs2 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %7, i32 0, i32 6, !dbg !3984
  %8 = load %struct.format_flag_pair*, %struct.format_flag_pair** %bad_flag_pairs2, align 8, !dbg !3984
  store %struct.format_flag_pair* %8, %struct.format_flag_pair** %bad_flag_pairs, align 8, !dbg !3982
  call void @llvm.dbg.declare(metadata i32* %has_operand_number, metadata !3985, metadata !DIExpression()), !dbg !3986
  store i32 -1, i32* %has_operand_number, align 4, !dbg !3986
  %9 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !3987
  %first_arg_num = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %9, i32 0, i32 2, !dbg !3988
  %10 = load i64, i64* %first_arg_num, align 8, !dbg !3988
  %conv = trunc i64 %10 to i32, !dbg !3987
  %11 = load %union.tree_node*, %union.tree_node** %first_fillin_param, align 8, !dbg !3989
  call void @init_dollar_format_checking(i32 %conv, %union.tree_node* %11), !dbg !3990
  br label %while.body, !dbg !3991

while.body:                                       ; preds = %entry, %if.then27, %if.then32, %if.then38, %if.then586, %if.end617, %if.end1053, %if.then1144, %if.end1267
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3992, metadata !DIExpression()), !dbg !3994
  call void @llvm.dbg.declare(metadata i32* %suppressed, metadata !3995, metadata !DIExpression()), !dbg !3996
  store i32 0, i32* %suppressed, align 4, !dbg !3996
  call void @llvm.dbg.declare(metadata i8** %length_chars, metadata !3997, metadata !DIExpression()), !dbg !3998
  store i8* null, i8** %length_chars, align 8, !dbg !3998
  call void @llvm.dbg.declare(metadata i32* %length_chars_val, metadata !3999, metadata !DIExpression()), !dbg !4000
  store i32 0, i32* %length_chars_val, align 4, !dbg !4000
  call void @llvm.dbg.declare(metadata i32* %length_chars_std, metadata !4001, metadata !DIExpression()), !dbg !4002
  store i32 0, i32* %length_chars_std, align 4, !dbg !4002
  call void @llvm.dbg.declare(metadata i32* %format_char, metadata !4003, metadata !DIExpression()), !dbg !4004
  call void @llvm.dbg.declare(metadata %union.tree_node** %cur_param, metadata !4005, metadata !DIExpression()), !dbg !4006
  call void @llvm.dbg.declare(metadata %union.tree_node** %wanted_type, metadata !4007, metadata !DIExpression()), !dbg !4008
  call void @llvm.dbg.declare(metadata i32* %main_arg_num, metadata !4009, metadata !DIExpression()), !dbg !4010
  store i32 0, i32* %main_arg_num, align 4, !dbg !4010
  call void @llvm.dbg.declare(metadata %union.tree_node** %main_arg_params, metadata !4011, metadata !DIExpression()), !dbg !4012
  store %union.tree_node* null, %union.tree_node** %main_arg_params, align 8, !dbg !4012
  call void @llvm.dbg.declare(metadata i32* %wanted_type_std, metadata !4013, metadata !DIExpression()), !dbg !4014
  call void @llvm.dbg.declare(metadata i8** %wanted_type_name, metadata !4015, metadata !DIExpression()), !dbg !4016
  call void @llvm.dbg.declare(metadata %struct.format_wanted_type* %width_wanted_type, metadata !4017, metadata !DIExpression()), !dbg !4018
  call void @llvm.dbg.declare(metadata %struct.format_wanted_type* %precision_wanted_type, metadata !4019, metadata !DIExpression()), !dbg !4020
  call void @llvm.dbg.declare(metadata %struct.format_wanted_type* %main_wanted_type, metadata !4021, metadata !DIExpression()), !dbg !4022
  call void @llvm.dbg.declare(metadata %struct.format_wanted_type** %first_wanted_type, metadata !4023, metadata !DIExpression()), !dbg !4024
  store %struct.format_wanted_type* null, %struct.format_wanted_type** %first_wanted_type, align 8, !dbg !4024
  call void @llvm.dbg.declare(metadata %struct.format_wanted_type** %last_wanted_type, metadata !4025, metadata !DIExpression()), !dbg !4026
  store %struct.format_wanted_type* null, %struct.format_wanted_type** %last_wanted_type, align 8, !dbg !4026
  call void @llvm.dbg.declare(metadata %struct.format_length_info** %fli, metadata !4027, metadata !DIExpression()), !dbg !4028
  store %struct.format_length_info* null, %struct.format_length_info** %fli, align 8, !dbg !4028
  call void @llvm.dbg.declare(metadata %struct.format_char_info** %fci, metadata !4029, metadata !DIExpression()), !dbg !4030
  store %struct.format_char_info* null, %struct.format_char_info** %fci, align 8, !dbg !4030
  call void @llvm.dbg.declare(metadata [256 x i8]* %flag_chars, metadata !4031, metadata !DIExpression()), !dbg !4035
  call void @llvm.dbg.declare(metadata i32* %alloc_flag, metadata !4036, metadata !DIExpression()), !dbg !4037
  store i32 0, i32* %alloc_flag, align 4, !dbg !4037
  call void @llvm.dbg.declare(metadata i32* %scalar_identity_flag, metadata !4038, metadata !DIExpression()), !dbg !4039
  store i32 0, i32* %scalar_identity_flag, align 4, !dbg !4039
  call void @llvm.dbg.declare(metadata i8** %format_start, metadata !4040, metadata !DIExpression()), !dbg !4041
  %12 = load i8*, i8** %format_chars.addr, align 8, !dbg !4042
  store i8* %12, i8** %format_start, align 8, !dbg !4041
  %13 = load i8*, i8** %format_chars.addr, align 8, !dbg !4043
  %14 = load i8, i8* %13, align 1, !dbg !4045
  %conv3 = sext i8 %14 to i32, !dbg !4045
  %cmp = icmp eq i32 %conv3, 0, !dbg !4046
  br i1 %cmp, label %if.then, label %if.end23, !dbg !4047

if.then:                                          ; preds = %while.body
  %15 = load i8*, i8** %format_chars.addr, align 8, !dbg !4048
  %16 = load i8*, i8** %orig_format_chars, align 8, !dbg !4051
  %sub.ptr.lhs.cast = ptrtoint i8* %15 to i64, !dbg !4052
  %sub.ptr.rhs.cast = ptrtoint i8* %16 to i64, !dbg !4052
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !4052
  %17 = load i32, i32* %format_length.addr, align 4, !dbg !4053
  %conv5 = sext i32 %17 to i64, !dbg !4053
  %cmp6 = icmp ne i64 %sub.ptr.sub, %conv5, !dbg !4054
  br i1 %cmp6, label %if.then8, label %if.end, !dbg !4055

if.then8:                                         ; preds = %if.then
  %call = call zeroext i8 (i32, i8*, ...) @warning(i32 92, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31, i64 0, i64 0)), !dbg !4056
  br label %if.end, !dbg !4056

if.end:                                           ; preds = %if.then8, %if.then
  %18 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !4057
  %first_arg_num9 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %18, i32 0, i32 2, !dbg !4059
  %19 = load i64, i64* %first_arg_num9, align 8, !dbg !4059
  %cmp10 = icmp ne i64 %19, 0, !dbg !4060
  br i1 %cmp10, label %land.lhs.true, label %if.end18, !dbg !4061

land.lhs.true:                                    ; preds = %if.end
  %20 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !4062
  %cmp12 = icmp ne %union.tree_node* %20, null, !dbg !4063
  br i1 %cmp12, label %land.lhs.true14, label %if.end18, !dbg !4064

land.lhs.true14:                                  ; preds = %land.lhs.true
  %21 = load i32, i32* %has_operand_number, align 4, !dbg !4065
  %cmp15 = icmp sle i32 %21, 0, !dbg !4066
  br i1 %cmp15, label %if.then17, label %if.end18, !dbg !4067

if.then17:                                        ; preds = %land.lhs.true14
  %22 = load %struct.format_check_results*, %struct.format_check_results** %res.addr, align 8, !dbg !4068
  %number_other = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %22, i32 0, i32 6, !dbg !4070
  %23 = load i32, i32* %number_other, align 4, !dbg !4071
  %dec = add nsw i32 %23, -1, !dbg !4071
  store i32 %dec, i32* %number_other, align 4, !dbg !4071
  %24 = load %struct.format_check_results*, %struct.format_check_results** %res.addr, align 8, !dbg !4072
  %number_extra_args = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %24, i32 0, i32 1, !dbg !4073
  %25 = load i32, i32* %number_extra_args, align 4, !dbg !4074
  %inc = add nsw i32 %25, 1, !dbg !4074
  store i32 %inc, i32* %number_extra_args, align 4, !dbg !4074
  br label %if.end18, !dbg !4075

if.end18:                                         ; preds = %if.then17, %land.lhs.true14, %land.lhs.true, %if.end
  %26 = load i32, i32* %has_operand_number, align 4, !dbg !4076
  %cmp19 = icmp sgt i32 %26, 0, !dbg !4078
  br i1 %cmp19, label %if.then21, label %if.end22, !dbg !4079

if.then21:                                        ; preds = %if.end18
  %27 = load %struct.format_check_results*, %struct.format_check_results** %res.addr, align 8, !dbg !4080
  %28 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4081
  %flags = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %28, i32 0, i32 7, !dbg !4082
  %29 = load i32, i32* %flags, align 8, !dbg !4082
  %and = and i32 %29, 128, !dbg !4083
  call void @finish_dollar_format_checking(%struct.format_check_results* %27, i32 %and), !dbg !4084
  br label %if.end22, !dbg !4084

if.end22:                                         ; preds = %if.then21, %if.end18
  br label %return, !dbg !4085

if.end23:                                         ; preds = %while.body
  %30 = load i8*, i8** %format_chars.addr, align 8, !dbg !4086
  %incdec.ptr = getelementptr inbounds i8, i8* %30, i32 1, !dbg !4086
  store i8* %incdec.ptr, i8** %format_chars.addr, align 8, !dbg !4086
  %31 = load i8, i8* %30, align 1, !dbg !4088
  %conv24 = sext i8 %31 to i32, !dbg !4088
  %cmp25 = icmp ne i32 %conv24, 37, !dbg !4089
  br i1 %cmp25, label %if.then27, label %if.end28, !dbg !4090

if.then27:                                        ; preds = %if.end23
  br label %while.body, !dbg !4091, !llvm.loop !4092

if.end28:                                         ; preds = %if.end23
  %32 = load i8*, i8** %format_chars.addr, align 8, !dbg !4094
  %33 = load i8, i8* %32, align 1, !dbg !4096
  %conv29 = sext i8 %33 to i32, !dbg !4096
  %cmp30 = icmp eq i32 %conv29, 0, !dbg !4097
  br i1 %cmp30, label %if.then32, label %if.end34, !dbg !4098

if.then32:                                        ; preds = %if.end28
  %call33 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.32, i64 0, i64 0)), !dbg !4099
  br label %while.body, !dbg !4101, !llvm.loop !4092

if.end34:                                         ; preds = %if.end28
  %34 = load i8*, i8** %format_chars.addr, align 8, !dbg !4102
  %35 = load i8, i8* %34, align 1, !dbg !4104
  %conv35 = sext i8 %35 to i32, !dbg !4104
  %cmp36 = icmp eq i32 %conv35, 37, !dbg !4105
  br i1 %cmp36, label %if.then38, label %if.end40, !dbg !4106

if.then38:                                        ; preds = %if.end34
  %36 = load i8*, i8** %format_chars.addr, align 8, !dbg !4107
  %incdec.ptr39 = getelementptr inbounds i8, i8* %36, i32 1, !dbg !4107
  store i8* %incdec.ptr39, i8** %format_chars.addr, align 8, !dbg !4107
  br label %while.body, !dbg !4109, !llvm.loop !4092

if.end40:                                         ; preds = %if.end34
  %arrayidx41 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 0, !dbg !4110
  store i8 0, i8* %arrayidx41, align 16, !dbg !4111
  %37 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4112
  %flags42 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %37, i32 0, i32 7, !dbg !4114
  %38 = load i32, i32* %flags42, align 8, !dbg !4114
  %and43 = and i32 %38, 16, !dbg !4115
  %tobool = icmp ne i32 %and43, 0, !dbg !4115
  br i1 %tobool, label %land.lhs.true44, label %if.else60, !dbg !4116

land.lhs.true44:                                  ; preds = %if.end40
  %39 = load i32, i32* %has_operand_number, align 4, !dbg !4117
  %cmp45 = icmp ne i32 %39, 0, !dbg !4118
  br i1 %cmp45, label %if.then47, label %if.else60, !dbg !4119

if.then47:                                        ; preds = %land.lhs.true44
  call void @llvm.dbg.declare(metadata i32* %opnum, metadata !4120, metadata !DIExpression()), !dbg !4122
  %40 = load %union.tree_node*, %union.tree_node** %first_fillin_param, align 8, !dbg !4123
  %41 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4124
  %call48 = call i32 @maybe_read_dollar_number(i8** %format_chars.addr, i32 0, %union.tree_node* %40, %union.tree_node** %main_arg_params, %struct.format_kind_info* %41), !dbg !4125
  store i32 %call48, i32* %opnum, align 4, !dbg !4126
  %42 = load i32, i32* %opnum, align 4, !dbg !4127
  %cmp49 = icmp eq i32 %42, -1, !dbg !4129
  br i1 %cmp49, label %if.then51, label %if.else, !dbg !4130

if.then51:                                        ; preds = %if.then47
  br label %return, !dbg !4131

if.else:                                          ; preds = %if.then47
  %43 = load i32, i32* %opnum, align 4, !dbg !4132
  %cmp52 = icmp sgt i32 %43, 0, !dbg !4134
  br i1 %cmp52, label %if.then54, label %if.end58, !dbg !4135

if.then54:                                        ; preds = %if.else
  store i32 1, i32* %has_operand_number, align 4, !dbg !4136
  %44 = load i32, i32* %opnum, align 4, !dbg !4138
  %conv55 = sext i32 %44 to i64, !dbg !4138
  %45 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !4139
  %first_arg_num56 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %45, i32 0, i32 2, !dbg !4140
  %46 = load i64, i64* %first_arg_num56, align 8, !dbg !4140
  %add = add i64 %conv55, %46, !dbg !4141
  %sub = sub i64 %add, 1, !dbg !4142
  %conv57 = trunc i64 %sub to i32, !dbg !4138
  store i32 %conv57, i32* %main_arg_num, align 4, !dbg !4143
  br label %if.end58, !dbg !4144

if.end58:                                         ; preds = %if.then54, %if.else
  br label %if.end59

if.end59:                                         ; preds = %if.end58
  br label %if.end70, !dbg !4145

if.else60:                                        ; preds = %land.lhs.true44, %if.end40
  %47 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4146
  %flags61 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %47, i32 0, i32 7, !dbg !4148
  %48 = load i32, i32* %flags61, align 8, !dbg !4148
  %and62 = and i32 %48, 16, !dbg !4149
  %tobool63 = icmp ne i32 %and62, 0, !dbg !4149
  br i1 %tobool63, label %if.then64, label %if.end69, !dbg !4150

if.then64:                                        ; preds = %if.else60
  %49 = load i8*, i8** %format_chars.addr, align 8, !dbg !4151
  %call65 = call zeroext i8 @avoid_dollar_number(i8* %49), !dbg !4154
  %tobool66 = icmp ne i8 %call65, 0, !dbg !4154
  br i1 %tobool66, label %if.then67, label %if.end68, !dbg !4155

if.then67:                                        ; preds = %if.then64
  br label %return, !dbg !4156

if.end68:                                         ; preds = %if.then64
  br label %if.end69, !dbg !4157

if.end69:                                         ; preds = %if.end68, %if.else60
  br label %if.end70

if.end70:                                         ; preds = %if.end69, %if.end59
  br label %while.cond71, !dbg !4158

while.cond71:                                     ; preds = %if.end108, %if.end70
  %50 = load i8*, i8** %format_chars.addr, align 8, !dbg !4159
  %51 = load i8, i8* %50, align 1, !dbg !4160
  %conv72 = sext i8 %51 to i32, !dbg !4160
  %cmp73 = icmp ne i32 %conv72, 0, !dbg !4161
  br i1 %cmp73, label %land.rhs, label %land.end, !dbg !4162

land.rhs:                                         ; preds = %while.cond71
  %52 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4163
  %flag_chars75 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %52, i32 0, i32 3, !dbg !4164
  %53 = load i8*, i8** %flag_chars75, align 8, !dbg !4164
  %54 = load i8*, i8** %format_chars.addr, align 8, !dbg !4165
  %55 = load i8, i8* %54, align 1, !dbg !4166
  %conv76 = sext i8 %55 to i32, !dbg !4166
  %call77 = call i8* @strchr(i8* %53, i32 %conv76), !dbg !4167
  %cmp78 = icmp ne i8* %call77, null, !dbg !4168
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond71
  %56 = phi i1 [ false, %while.cond71 ], [ %cmp78, %land.rhs ], !dbg !4169
  br i1 %56, label %while.body80, label %while.end, !dbg !4158

while.body80:                                     ; preds = %land.end
  call void @llvm.dbg.declare(metadata %struct.format_flag_spec** %s, metadata !4170, metadata !DIExpression()), !dbg !4172
  %57 = load %struct.format_flag_spec*, %struct.format_flag_spec** %flag_specs, align 8, !dbg !4173
  %58 = load i8*, i8** %format_chars.addr, align 8, !dbg !4174
  %59 = load i8, i8* %58, align 1, !dbg !4175
  %conv81 = sext i8 %59 to i32, !dbg !4175
  %call82 = call %struct.format_flag_spec* @get_flag_spec(%struct.format_flag_spec* %57, i32 %conv81, i8* null), !dbg !4176
  store %struct.format_flag_spec* %call82, %struct.format_flag_spec** %s, align 8, !dbg !4172
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 0, !dbg !4177
  %60 = load i8*, i8** %format_chars.addr, align 8, !dbg !4179
  %61 = load i8, i8* %60, align 1, !dbg !4180
  %conv83 = sext i8 %61 to i32, !dbg !4180
  %call84 = call i8* @strchr(i8* %arraydecay, i32 %conv83), !dbg !4181
  %cmp85 = icmp ne i8* %call84, null, !dbg !4182
  br i1 %cmp85, label %if.then87, label %if.else89, !dbg !4183

if.then87:                                        ; preds = %while.body80
  %62 = load %struct.format_flag_spec*, %struct.format_flag_spec** %s, align 8, !dbg !4184
  %name = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %62, i32 0, i32 3, !dbg !4184
  %63 = load i8*, i8** %name, align 8, !dbg !4184
  %call88 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.33, i64 0, i64 0), i8* %63), !dbg !4186
  br label %if.end98, !dbg !4187

if.else89:                                        ; preds = %while.body80
  %arraydecay90 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 0, !dbg !4188
  %call91 = call i64 @strlen(i8* %arraydecay90), !dbg !4190
  %conv92 = trunc i64 %call91 to i32, !dbg !4190
  store i32 %conv92, i32* %i, align 4, !dbg !4191
  %64 = load i8*, i8** %format_chars.addr, align 8, !dbg !4192
  %65 = load i8, i8* %64, align 1, !dbg !4193
  %66 = load i32, i32* %i, align 4, !dbg !4194
  %inc93 = add nsw i32 %66, 1, !dbg !4194
  store i32 %inc93, i32* %i, align 4, !dbg !4194
  %idxprom94 = sext i32 %66 to i64, !dbg !4195
  %arrayidx95 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom94, !dbg !4195
  store i8 %65, i8* %arrayidx95, align 1, !dbg !4196
  %67 = load i32, i32* %i, align 4, !dbg !4197
  %idxprom96 = sext i32 %67 to i64, !dbg !4198
  %arrayidx97 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom96, !dbg !4198
  store i8 0, i8* %arrayidx97, align 1, !dbg !4199
  br label %if.end98

if.end98:                                         ; preds = %if.else89, %if.then87
  %68 = load %struct.format_flag_spec*, %struct.format_flag_spec** %s, align 8, !dbg !4200
  %skip_next_char = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %68, i32 0, i32 2, !dbg !4202
  %69 = load i32, i32* %skip_next_char, align 8, !dbg !4202
  %tobool99 = icmp ne i32 %69, 0, !dbg !4200
  br i1 %tobool99, label %if.then100, label %if.end108, !dbg !4203

if.then100:                                       ; preds = %if.end98
  %70 = load i8*, i8** %format_chars.addr, align 8, !dbg !4204
  %incdec.ptr101 = getelementptr inbounds i8, i8* %70, i32 1, !dbg !4204
  store i8* %incdec.ptr101, i8** %format_chars.addr, align 8, !dbg !4204
  %71 = load i8*, i8** %format_chars.addr, align 8, !dbg !4206
  %72 = load i8, i8* %71, align 1, !dbg !4208
  %conv102 = sext i8 %72 to i32, !dbg !4208
  %cmp103 = icmp eq i32 %conv102, 0, !dbg !4209
  br i1 %cmp103, label %if.then105, label %if.end107, !dbg !4210

if.then105:                                       ; preds = %if.then100
  %call106 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.34, i64 0, i64 0)), !dbg !4211
  br label %return, !dbg !4213

if.end107:                                        ; preds = %if.then100
  br label %if.end108, !dbg !4214

if.end108:                                        ; preds = %if.end107, %if.end98
  %73 = load i8*, i8** %format_chars.addr, align 8, !dbg !4215
  %incdec.ptr109 = getelementptr inbounds i8, i8* %73, i32 1, !dbg !4215
  store i8* %incdec.ptr109, i8** %format_chars.addr, align 8, !dbg !4215
  br label %while.cond71, !dbg !4158, !llvm.loop !4216

while.end:                                        ; preds = %land.end
  %74 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4218
  %width_char = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %74, i32 0, i32 8, !dbg !4220
  %75 = load i32, i32* %width_char, align 4, !dbg !4220
  %cmp110 = icmp ne i32 %75, 0, !dbg !4221
  br i1 %cmp110, label %if.then112, label %if.end231, !dbg !4222

if.then112:                                       ; preds = %while.end
  %76 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4223
  %width_type = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %76, i32 0, i32 14, !dbg !4226
  %77 = load %union.tree_node**, %union.tree_node*** %width_type, align 8, !dbg !4226
  %cmp113 = icmp ne %union.tree_node** %77, null, !dbg !4227
  br i1 %cmp113, label %land.lhs.true115, label %if.else189, !dbg !4228

land.lhs.true115:                                 ; preds = %if.then112
  %78 = load i8*, i8** %format_chars.addr, align 8, !dbg !4229
  %79 = load i8, i8* %78, align 1, !dbg !4230
  %conv116 = sext i8 %79 to i32, !dbg !4230
  %cmp117 = icmp eq i32 %conv116, 42, !dbg !4231
  br i1 %cmp117, label %if.then119, label %if.else189, !dbg !4232

if.then119:                                       ; preds = %land.lhs.true115
  %arraydecay120 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 0, !dbg !4233
  %call121 = call i64 @strlen(i8* %arraydecay120), !dbg !4235
  %conv122 = trunc i64 %call121 to i32, !dbg !4235
  store i32 %conv122, i32* %i, align 4, !dbg !4236
  %80 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4237
  %width_char123 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %80, i32 0, i32 8, !dbg !4238
  %81 = load i32, i32* %width_char123, align 4, !dbg !4238
  %conv124 = trunc i32 %81 to i8, !dbg !4237
  %82 = load i32, i32* %i, align 4, !dbg !4239
  %inc125 = add nsw i32 %82, 1, !dbg !4239
  store i32 %inc125, i32* %i, align 4, !dbg !4239
  %idxprom126 = sext i32 %82 to i64, !dbg !4240
  %arrayidx127 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom126, !dbg !4240
  store i8 %conv124, i8* %arrayidx127, align 1, !dbg !4241
  %83 = load i32, i32* %i, align 4, !dbg !4242
  %idxprom128 = sext i32 %83 to i64, !dbg !4243
  %arrayidx129 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom128, !dbg !4243
  store i8 0, i8* %arrayidx129, align 1, !dbg !4244
  %84 = load i8*, i8** %format_chars.addr, align 8, !dbg !4245
  %incdec.ptr130 = getelementptr inbounds i8, i8* %84, i32 1, !dbg !4245
  store i8* %incdec.ptr130, i8** %format_chars.addr, align 8, !dbg !4245
  %85 = load i32, i32* %has_operand_number, align 4, !dbg !4246
  %cmp131 = icmp ne i32 %85, 0, !dbg !4248
  br i1 %cmp131, label %if.then133, label %if.else152, !dbg !4249

if.then133:                                       ; preds = %if.then119
  call void @llvm.dbg.declare(metadata i32* %opnum134, metadata !4250, metadata !DIExpression()), !dbg !4252
  %86 = load i32, i32* %has_operand_number, align 4, !dbg !4253
  %cmp135 = icmp eq i32 %86, 1, !dbg !4254
  %conv136 = zext i1 %cmp135 to i32, !dbg !4254
  %87 = load %union.tree_node*, %union.tree_node** %first_fillin_param, align 8, !dbg !4255
  %88 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4256
  %call137 = call i32 @maybe_read_dollar_number(i8** %format_chars.addr, i32 %conv136, %union.tree_node* %87, %union.tree_node** %params.addr, %struct.format_kind_info* %88), !dbg !4257
  store i32 %call137, i32* %opnum134, align 4, !dbg !4258
  %89 = load i32, i32* %opnum134, align 4, !dbg !4259
  %cmp138 = icmp eq i32 %89, -1, !dbg !4261
  br i1 %cmp138, label %if.then140, label %if.else141, !dbg !4262

if.then140:                                       ; preds = %if.then133
  br label %return, !dbg !4263

if.else141:                                       ; preds = %if.then133
  %90 = load i32, i32* %opnum134, align 4, !dbg !4264
  %cmp142 = icmp sgt i32 %90, 0, !dbg !4266
  br i1 %cmp142, label %if.then144, label %if.else149, !dbg !4267

if.then144:                                       ; preds = %if.else141
  store i32 1, i32* %has_operand_number, align 4, !dbg !4268
  %91 = load i32, i32* %opnum134, align 4, !dbg !4270
  %conv145 = sext i32 %91 to i64, !dbg !4270
  %92 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !4271
  %first_arg_num146 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %92, i32 0, i32 2, !dbg !4272
  %93 = load i64, i64* %first_arg_num146, align 8, !dbg !4272
  %add147 = add i64 %conv145, %93, !dbg !4273
  %sub148 = sub i64 %add147, 1, !dbg !4274
  store i64 %sub148, i64* %arg_num.addr, align 8, !dbg !4275
  br label %if.end150, !dbg !4276

if.else149:                                       ; preds = %if.else141
  store i32 0, i32* %has_operand_number, align 4, !dbg !4277
  br label %if.end150

if.end150:                                        ; preds = %if.else149, %if.then144
  br label %if.end151

if.end151:                                        ; preds = %if.end150
  br label %if.end157, !dbg !4278

if.else152:                                       ; preds = %if.then119
  %94 = load i8*, i8** %format_chars.addr, align 8, !dbg !4279
  %call153 = call zeroext i8 @avoid_dollar_number(i8* %94), !dbg !4282
  %tobool154 = icmp ne i8 %call153, 0, !dbg !4282
  br i1 %tobool154, label %if.then155, label %if.end156, !dbg !4283

if.then155:                                       ; preds = %if.else152
  br label %return, !dbg !4284

if.end156:                                        ; preds = %if.else152
  br label %if.end157

if.end157:                                        ; preds = %if.end156, %if.end151
  %95 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !4285
  %first_arg_num158 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %95, i32 0, i32 2, !dbg !4287
  %96 = load i64, i64* %first_arg_num158, align 8, !dbg !4287
  %cmp159 = icmp ne i64 %96, 0, !dbg !4288
  br i1 %cmp159, label %if.then161, label %if.end188, !dbg !4289

if.then161:                                       ; preds = %if.end157
  %97 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !4290
  %cmp162 = icmp eq %union.tree_node* %97, null, !dbg !4293
  br i1 %cmp162, label %if.then164, label %if.end166, !dbg !4294

if.then164:                                       ; preds = %if.then161
  %call165 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.35, i64 0, i64 0)), !dbg !4295
  br label %return, !dbg !4297

if.end166:                                        ; preds = %if.then161
  %98 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !4298
  %list = bitcast %union.tree_node* %98 to %struct.tree_list*, !dbg !4298
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !4298
  %99 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4298
  store %union.tree_node* %99, %union.tree_node** %cur_param, align 8, !dbg !4299
  %100 = load i32, i32* %has_operand_number, align 4, !dbg !4300
  %cmp167 = icmp sle i32 %100, 0, !dbg !4302
  br i1 %cmp167, label %if.then169, label %if.end171, !dbg !4303

if.then169:                                       ; preds = %if.end166
  %101 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !4304
  %common = bitcast %union.tree_node* %101 to %struct.tree_common*, !dbg !4304
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !4304
  %102 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4304
  store %union.tree_node* %102, %union.tree_node** %params.addr, align 8, !dbg !4306
  %103 = load i64, i64* %arg_num.addr, align 8, !dbg !4307
  %inc170 = add i64 %103, 1, !dbg !4307
  store i64 %inc170, i64* %arg_num.addr, align 8, !dbg !4307
  br label %if.end171, !dbg !4308

if.end171:                                        ; preds = %if.then169, %if.end166
  %104 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4309
  %width_type172 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %104, i32 0, i32 14, !dbg !4310
  %105 = load %union.tree_node**, %union.tree_node*** %width_type172, align 8, !dbg !4310
  %106 = load %union.tree_node*, %union.tree_node** %105, align 8, !dbg !4311
  %wanted_type173 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %width_wanted_type, i32 0, i32 0, !dbg !4312
  store %union.tree_node* %106, %union.tree_node** %wanted_type173, align 8, !dbg !4313
  %wanted_type_name174 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %width_wanted_type, i32 0, i32 1, !dbg !4314
  store i8* null, i8** %wanted_type_name174, align 8, !dbg !4315
  %pointer_count = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %width_wanted_type, i32 0, i32 3, !dbg !4316
  store i32 0, i32* %pointer_count, align 4, !dbg !4317
  %char_lenient_flag = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %width_wanted_type, i32 0, i32 4, !dbg !4318
  store i32 0, i32* %char_lenient_flag, align 8, !dbg !4319
  %scalar_identity_flag175 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %width_wanted_type, i32 0, i32 2, !dbg !4320
  store i32 0, i32* %scalar_identity_flag175, align 8, !dbg !4321
  %writing_in_flag = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %width_wanted_type, i32 0, i32 5, !dbg !4322
  store i32 0, i32* %writing_in_flag, align 4, !dbg !4323
  %reading_from_flag = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %width_wanted_type, i32 0, i32 6, !dbg !4324
  store i32 0, i32* %reading_from_flag, align 8, !dbg !4325
  %name176 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %width_wanted_type, i32 0, i32 7, !dbg !4326
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.36, i64 0, i64 0), i8** %name176, align 8, !dbg !4327
  %107 = load %union.tree_node*, %union.tree_node** %cur_param, align 8, !dbg !4328
  %param = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %width_wanted_type, i32 0, i32 8, !dbg !4329
  store %union.tree_node* %107, %union.tree_node** %param, align 8, !dbg !4330
  %108 = load i64, i64* %arg_num.addr, align 8, !dbg !4331
  %conv177 = trunc i64 %108 to i32, !dbg !4331
  %arg_num178 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %width_wanted_type, i32 0, i32 9, !dbg !4332
  store i32 %conv177, i32* %arg_num178, align 8, !dbg !4333
  %next = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %width_wanted_type, i32 0, i32 10, !dbg !4334
  store %struct.format_wanted_type* null, %struct.format_wanted_type** %next, align 8, !dbg !4335
  %109 = load %struct.format_wanted_type*, %struct.format_wanted_type** %last_wanted_type, align 8, !dbg !4336
  %cmp179 = icmp ne %struct.format_wanted_type* %109, null, !dbg !4338
  br i1 %cmp179, label %if.then181, label %if.end183, !dbg !4339

if.then181:                                       ; preds = %if.end171
  %110 = load %struct.format_wanted_type*, %struct.format_wanted_type** %last_wanted_type, align 8, !dbg !4340
  %next182 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %110, i32 0, i32 10, !dbg !4341
  store %struct.format_wanted_type* %width_wanted_type, %struct.format_wanted_type** %next182, align 8, !dbg !4342
  br label %if.end183, !dbg !4340

if.end183:                                        ; preds = %if.then181, %if.end171
  %111 = load %struct.format_wanted_type*, %struct.format_wanted_type** %first_wanted_type, align 8, !dbg !4343
  %cmp184 = icmp eq %struct.format_wanted_type* %111, null, !dbg !4345
  br i1 %cmp184, label %if.then186, label %if.end187, !dbg !4346

if.then186:                                       ; preds = %if.end183
  store %struct.format_wanted_type* %width_wanted_type, %struct.format_wanted_type** %first_wanted_type, align 8, !dbg !4347
  br label %if.end187, !dbg !4348

if.end187:                                        ; preds = %if.then186, %if.end183
  store %struct.format_wanted_type* %width_wanted_type, %struct.format_wanted_type** %last_wanted_type, align 8, !dbg !4349
  br label %if.end188, !dbg !4350

if.end188:                                        ; preds = %if.end187, %if.end157
  br label %if.end230, !dbg !4351

if.else189:                                       ; preds = %land.lhs.true115, %if.then112
  call void @llvm.dbg.declare(metadata i32* %non_zero_width_char, metadata !4352, metadata !DIExpression()), !dbg !4354
  store i32 0, i32* %non_zero_width_char, align 4, !dbg !4354
  call void @llvm.dbg.declare(metadata i32* %found_width, metadata !4355, metadata !DIExpression()), !dbg !4356
  store i32 0, i32* %found_width, align 4, !dbg !4356
  br label %while.cond190, !dbg !4357

while.cond190:                                    ; preds = %if.end203, %if.else189
  %112 = load i8*, i8** %format_chars.addr, align 8, !dbg !4358
  %113 = load i8, i8* %112, align 1, !dbg !4358
  %conv191 = sext i8 %113 to i32, !dbg !4358
  %and192 = and i32 %conv191, 255, !dbg !4358
  %idxprom193 = sext i32 %and192 to i64, !dbg !4358
  %arrayidx194 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom193, !dbg !4358
  %114 = load i16, i16* %arrayidx194, align 2, !dbg !4358
  %conv195 = zext i16 %114 to i32, !dbg !4358
  %and196 = and i32 %conv195, 4, !dbg !4358
  %tobool197 = icmp ne i32 %and196, 0, !dbg !4357
  br i1 %tobool197, label %while.body198, label %while.end205, !dbg !4357

while.body198:                                    ; preds = %while.cond190
  store i32 1, i32* %found_width, align 4, !dbg !4359
  %115 = load i8*, i8** %format_chars.addr, align 8, !dbg !4361
  %116 = load i8, i8* %115, align 1, !dbg !4363
  %conv199 = sext i8 %116 to i32, !dbg !4363
  %cmp200 = icmp ne i32 %conv199, 48, !dbg !4364
  br i1 %cmp200, label %if.then202, label %if.end203, !dbg !4365

if.then202:                                       ; preds = %while.body198
  store i32 1, i32* %non_zero_width_char, align 4, !dbg !4366
  br label %if.end203, !dbg !4367

if.end203:                                        ; preds = %if.then202, %while.body198
  %117 = load i8*, i8** %format_chars.addr, align 8, !dbg !4368
  %incdec.ptr204 = getelementptr inbounds i8, i8* %117, i32 1, !dbg !4368
  store i8* %incdec.ptr204, i8** %format_chars.addr, align 8, !dbg !4368
  br label %while.cond190, !dbg !4357, !llvm.loop !4369

while.end205:                                     ; preds = %while.cond190
  %118 = load i32, i32* %found_width, align 4, !dbg !4371
  %tobool206 = icmp ne i32 %118, 0, !dbg !4371
  br i1 %tobool206, label %land.lhs.true207, label %if.end216, !dbg !4373

land.lhs.true207:                                 ; preds = %while.end205
  %119 = load i32, i32* %non_zero_width_char, align 4, !dbg !4374
  %tobool208 = icmp ne i32 %119, 0, !dbg !4374
  br i1 %tobool208, label %if.end216, label %land.lhs.true209, !dbg !4375

land.lhs.true209:                                 ; preds = %land.lhs.true207
  %120 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4376
  %flags210 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %120, i32 0, i32 7, !dbg !4377
  %121 = load i32, i32* %flags210, align 8, !dbg !4377
  %and211 = and i32 %121, 32, !dbg !4378
  %tobool212 = icmp ne i32 %and211, 0, !dbg !4378
  br i1 %tobool212, label %if.then213, label %if.end216, !dbg !4379

if.then213:                                       ; preds = %land.lhs.true209
  %122 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4380
  %name214 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %122, i32 0, i32 0, !dbg !4381
  %123 = load i8*, i8** %name214, align 8, !dbg !4381
  %call215 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.37, i64 0, i64 0), i8* %123), !dbg !4382
  br label %if.end216, !dbg !4382

if.end216:                                        ; preds = %if.then213, %land.lhs.true209, %land.lhs.true207, %while.end205
  %124 = load i32, i32* %found_width, align 4, !dbg !4383
  %tobool217 = icmp ne i32 %124, 0, !dbg !4383
  br i1 %tobool217, label %if.then218, label %if.end229, !dbg !4385

if.then218:                                       ; preds = %if.end216
  %arraydecay219 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 0, !dbg !4386
  %call220 = call i64 @strlen(i8* %arraydecay219), !dbg !4388
  %conv221 = trunc i64 %call220 to i32, !dbg !4388
  store i32 %conv221, i32* %i, align 4, !dbg !4389
  %125 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4390
  %width_char222 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %125, i32 0, i32 8, !dbg !4391
  %126 = load i32, i32* %width_char222, align 4, !dbg !4391
  %conv223 = trunc i32 %126 to i8, !dbg !4390
  %127 = load i32, i32* %i, align 4, !dbg !4392
  %inc224 = add nsw i32 %127, 1, !dbg !4392
  store i32 %inc224, i32* %i, align 4, !dbg !4392
  %idxprom225 = sext i32 %127 to i64, !dbg !4393
  %arrayidx226 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom225, !dbg !4393
  store i8 %conv223, i8* %arrayidx226, align 1, !dbg !4394
  %128 = load i32, i32* %i, align 4, !dbg !4395
  %idxprom227 = sext i32 %128 to i64, !dbg !4396
  %arrayidx228 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom227, !dbg !4396
  store i8 0, i8* %arrayidx228, align 1, !dbg !4397
  br label %if.end229, !dbg !4398

if.end229:                                        ; preds = %if.then218, %if.end216
  br label %if.end230

if.end230:                                        ; preds = %if.end229, %if.end188
  br label %if.end231, !dbg !4399

if.end231:                                        ; preds = %if.end230, %while.end
  %129 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4400
  %left_precision_char = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %129, i32 0, i32 9, !dbg !4402
  %130 = load i32, i32* %left_precision_char, align 8, !dbg !4402
  %cmp232 = icmp ne i32 %130, 0, !dbg !4403
  br i1 %cmp232, label %land.lhs.true234, label %if.end272, !dbg !4404

land.lhs.true234:                                 ; preds = %if.end231
  %131 = load i8*, i8** %format_chars.addr, align 8, !dbg !4405
  %132 = load i8, i8* %131, align 1, !dbg !4406
  %conv235 = sext i8 %132 to i32, !dbg !4406
  %cmp236 = icmp eq i32 %conv235, 35, !dbg !4407
  br i1 %cmp236, label %if.then238, label %if.end272, !dbg !4408

if.then238:                                       ; preds = %land.lhs.true234
  %133 = load i8*, i8** %format_chars.addr, align 8, !dbg !4409
  %incdec.ptr239 = getelementptr inbounds i8, i8* %133, i32 1, !dbg !4409
  store i8* %incdec.ptr239, i8** %format_chars.addr, align 8, !dbg !4409
  %arraydecay240 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 0, !dbg !4411
  %call241 = call i64 @strlen(i8* %arraydecay240), !dbg !4412
  %conv242 = trunc i64 %call241 to i32, !dbg !4412
  store i32 %conv242, i32* %i, align 4, !dbg !4413
  %134 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4414
  %left_precision_char243 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %134, i32 0, i32 9, !dbg !4415
  %135 = load i32, i32* %left_precision_char243, align 8, !dbg !4415
  %conv244 = trunc i32 %135 to i8, !dbg !4414
  %136 = load i32, i32* %i, align 4, !dbg !4416
  %inc245 = add nsw i32 %136, 1, !dbg !4416
  store i32 %inc245, i32* %i, align 4, !dbg !4416
  %idxprom246 = sext i32 %136 to i64, !dbg !4417
  %arrayidx247 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom246, !dbg !4417
  store i8 %conv244, i8* %arrayidx247, align 1, !dbg !4418
  %137 = load i32, i32* %i, align 4, !dbg !4419
  %idxprom248 = sext i32 %137 to i64, !dbg !4420
  %arrayidx249 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom248, !dbg !4420
  store i8 0, i8* %arrayidx249, align 1, !dbg !4421
  %138 = load i8*, i8** %format_chars.addr, align 8, !dbg !4422
  %139 = load i8, i8* %138, align 1, !dbg !4422
  %conv250 = sext i8 %139 to i32, !dbg !4422
  %and251 = and i32 %conv250, 255, !dbg !4422
  %idxprom252 = sext i32 %and251 to i64, !dbg !4422
  %arrayidx253 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom252, !dbg !4422
  %140 = load i16, i16* %arrayidx253, align 2, !dbg !4422
  %conv254 = zext i16 %140 to i32, !dbg !4422
  %and255 = and i32 %conv254, 4, !dbg !4422
  %tobool256 = icmp ne i32 %and255, 0, !dbg !4422
  br i1 %tobool256, label %if.end260, label %if.then257, !dbg !4424

if.then257:                                       ; preds = %if.then238
  %141 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4425
  %name258 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %141, i32 0, i32 0, !dbg !4426
  %142 = load i8*, i8** %name258, align 8, !dbg !4426
  %call259 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.38, i64 0, i64 0), i8* %142), !dbg !4427
  br label %if.end260, !dbg !4427

if.end260:                                        ; preds = %if.then257, %if.then238
  br label %while.cond261, !dbg !4428

while.cond261:                                    ; preds = %while.body269, %if.end260
  %143 = load i8*, i8** %format_chars.addr, align 8, !dbg !4429
  %144 = load i8, i8* %143, align 1, !dbg !4429
  %conv262 = sext i8 %144 to i32, !dbg !4429
  %and263 = and i32 %conv262, 255, !dbg !4429
  %idxprom264 = sext i32 %and263 to i64, !dbg !4429
  %arrayidx265 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom264, !dbg !4429
  %145 = load i16, i16* %arrayidx265, align 2, !dbg !4429
  %conv266 = zext i16 %145 to i32, !dbg !4429
  %and267 = and i32 %conv266, 4, !dbg !4429
  %tobool268 = icmp ne i32 %and267, 0, !dbg !4428
  br i1 %tobool268, label %while.body269, label %while.end271, !dbg !4428

while.body269:                                    ; preds = %while.cond261
  %146 = load i8*, i8** %format_chars.addr, align 8, !dbg !4430
  %incdec.ptr270 = getelementptr inbounds i8, i8* %146, i32 1, !dbg !4430
  store i8* %incdec.ptr270, i8** %format_chars.addr, align 8, !dbg !4430
  br label %while.cond261, !dbg !4428, !llvm.loop !4431

while.end271:                                     ; preds = %while.cond261
  br label %if.end272, !dbg !4433

if.end272:                                        ; preds = %while.end271, %land.lhs.true234, %if.end231
  %147 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4434
  %precision_char = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %147, i32 0, i32 10, !dbg !4436
  %148 = load i32, i32* %precision_char, align 4, !dbg !4436
  %cmp273 = icmp ne i32 %148, 0, !dbg !4437
  br i1 %cmp273, label %land.lhs.true275, label %if.end395, !dbg !4438

land.lhs.true275:                                 ; preds = %if.end272
  %149 = load i8*, i8** %format_chars.addr, align 8, !dbg !4439
  %150 = load i8, i8* %149, align 1, !dbg !4440
  %conv276 = sext i8 %150 to i32, !dbg !4440
  %cmp277 = icmp eq i32 %conv276, 46, !dbg !4441
  br i1 %cmp277, label %if.then279, label %if.end395, !dbg !4442

if.then279:                                       ; preds = %land.lhs.true275
  %151 = load i8*, i8** %format_chars.addr, align 8, !dbg !4443
  %incdec.ptr280 = getelementptr inbounds i8, i8* %151, i32 1, !dbg !4443
  store i8* %incdec.ptr280, i8** %format_chars.addr, align 8, !dbg !4443
  %arraydecay281 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 0, !dbg !4445
  %call282 = call i64 @strlen(i8* %arraydecay281), !dbg !4446
  %conv283 = trunc i64 %call282 to i32, !dbg !4446
  store i32 %conv283, i32* %i, align 4, !dbg !4447
  %152 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4448
  %precision_char284 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %152, i32 0, i32 10, !dbg !4449
  %153 = load i32, i32* %precision_char284, align 4, !dbg !4449
  %conv285 = trunc i32 %153 to i8, !dbg !4448
  %154 = load i32, i32* %i, align 4, !dbg !4450
  %inc286 = add nsw i32 %154, 1, !dbg !4450
  store i32 %inc286, i32* %i, align 4, !dbg !4450
  %idxprom287 = sext i32 %154 to i64, !dbg !4451
  %arrayidx288 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom287, !dbg !4451
  store i8 %conv285, i8* %arrayidx288, align 1, !dbg !4452
  %155 = load i32, i32* %i, align 4, !dbg !4453
  %idxprom289 = sext i32 %155 to i64, !dbg !4454
  %arrayidx290 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom289, !dbg !4454
  store i8 0, i8* %arrayidx290, align 1, !dbg !4455
  %156 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4456
  %precision_type = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %156, i32 0, i32 15, !dbg !4458
  %157 = load %union.tree_node**, %union.tree_node*** %precision_type, align 8, !dbg !4458
  %cmp291 = icmp ne %union.tree_node** %157, null, !dbg !4459
  br i1 %cmp291, label %land.lhs.true293, label %if.else367, !dbg !4460

land.lhs.true293:                                 ; preds = %if.then279
  %158 = load i8*, i8** %format_chars.addr, align 8, !dbg !4461
  %159 = load i8, i8* %158, align 1, !dbg !4462
  %conv294 = sext i8 %159 to i32, !dbg !4462
  %cmp295 = icmp eq i32 %conv294, 42, !dbg !4463
  br i1 %cmp295, label %if.then297, label %if.else367, !dbg !4464

if.then297:                                       ; preds = %land.lhs.true293
  %160 = load i8*, i8** %format_chars.addr, align 8, !dbg !4465
  %incdec.ptr298 = getelementptr inbounds i8, i8* %160, i32 1, !dbg !4465
  store i8* %incdec.ptr298, i8** %format_chars.addr, align 8, !dbg !4465
  %161 = load i32, i32* %has_operand_number, align 4, !dbg !4467
  %cmp299 = icmp ne i32 %161, 0, !dbg !4469
  br i1 %cmp299, label %if.then301, label %if.else320, !dbg !4470

if.then301:                                       ; preds = %if.then297
  call void @llvm.dbg.declare(metadata i32* %opnum302, metadata !4471, metadata !DIExpression()), !dbg !4473
  %162 = load i32, i32* %has_operand_number, align 4, !dbg !4474
  %cmp303 = icmp eq i32 %162, 1, !dbg !4475
  %conv304 = zext i1 %cmp303 to i32, !dbg !4475
  %163 = load %union.tree_node*, %union.tree_node** %first_fillin_param, align 8, !dbg !4476
  %164 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4477
  %call305 = call i32 @maybe_read_dollar_number(i8** %format_chars.addr, i32 %conv304, %union.tree_node* %163, %union.tree_node** %params.addr, %struct.format_kind_info* %164), !dbg !4478
  store i32 %call305, i32* %opnum302, align 4, !dbg !4479
  %165 = load i32, i32* %opnum302, align 4, !dbg !4480
  %cmp306 = icmp eq i32 %165, -1, !dbg !4482
  br i1 %cmp306, label %if.then308, label %if.else309, !dbg !4483

if.then308:                                       ; preds = %if.then301
  br label %return, !dbg !4484

if.else309:                                       ; preds = %if.then301
  %166 = load i32, i32* %opnum302, align 4, !dbg !4485
  %cmp310 = icmp sgt i32 %166, 0, !dbg !4487
  br i1 %cmp310, label %if.then312, label %if.else317, !dbg !4488

if.then312:                                       ; preds = %if.else309
  store i32 1, i32* %has_operand_number, align 4, !dbg !4489
  %167 = load i32, i32* %opnum302, align 4, !dbg !4491
  %conv313 = sext i32 %167 to i64, !dbg !4491
  %168 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !4492
  %first_arg_num314 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %168, i32 0, i32 2, !dbg !4493
  %169 = load i64, i64* %first_arg_num314, align 8, !dbg !4493
  %add315 = add i64 %conv313, %169, !dbg !4494
  %sub316 = sub i64 %add315, 1, !dbg !4495
  store i64 %sub316, i64* %arg_num.addr, align 8, !dbg !4496
  br label %if.end318, !dbg !4497

if.else317:                                       ; preds = %if.else309
  store i32 0, i32* %has_operand_number, align 4, !dbg !4498
  br label %if.end318

if.end318:                                        ; preds = %if.else317, %if.then312
  br label %if.end319

if.end319:                                        ; preds = %if.end318
  br label %if.end325, !dbg !4499

if.else320:                                       ; preds = %if.then297
  %170 = load i8*, i8** %format_chars.addr, align 8, !dbg !4500
  %call321 = call zeroext i8 @avoid_dollar_number(i8* %170), !dbg !4503
  %tobool322 = icmp ne i8 %call321, 0, !dbg !4503
  br i1 %tobool322, label %if.then323, label %if.end324, !dbg !4504

if.then323:                                       ; preds = %if.else320
  br label %return, !dbg !4505

if.end324:                                        ; preds = %if.else320
  br label %if.end325

if.end325:                                        ; preds = %if.end324, %if.end319
  %171 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !4506
  %first_arg_num326 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %171, i32 0, i32 2, !dbg !4508
  %172 = load i64, i64* %first_arg_num326, align 8, !dbg !4508
  %cmp327 = icmp ne i64 %172, 0, !dbg !4509
  br i1 %cmp327, label %if.then329, label %if.end366, !dbg !4510

if.then329:                                       ; preds = %if.end325
  %173 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !4511
  %cmp330 = icmp eq %union.tree_node* %173, null, !dbg !4514
  br i1 %cmp330, label %if.then332, label %if.end334, !dbg !4515

if.then332:                                       ; preds = %if.then329
  %call333 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.35, i64 0, i64 0)), !dbg !4516
  br label %return, !dbg !4518

if.end334:                                        ; preds = %if.then329
  %174 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !4519
  %list335 = bitcast %union.tree_node* %174 to %struct.tree_list*, !dbg !4519
  %value336 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list335, i32 0, i32 2, !dbg !4519
  %175 = load %union.tree_node*, %union.tree_node** %value336, align 8, !dbg !4519
  store %union.tree_node* %175, %union.tree_node** %cur_param, align 8, !dbg !4520
  %176 = load i32, i32* %has_operand_number, align 4, !dbg !4521
  %cmp337 = icmp sle i32 %176, 0, !dbg !4523
  br i1 %cmp337, label %if.then339, label %if.end343, !dbg !4524

if.then339:                                       ; preds = %if.end334
  %177 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !4525
  %common340 = bitcast %union.tree_node* %177 to %struct.tree_common*, !dbg !4525
  %chain341 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common340, i32 0, i32 1, !dbg !4525
  %178 = load %union.tree_node*, %union.tree_node** %chain341, align 8, !dbg !4525
  store %union.tree_node* %178, %union.tree_node** %params.addr, align 8, !dbg !4527
  %179 = load i64, i64* %arg_num.addr, align 8, !dbg !4528
  %inc342 = add i64 %179, 1, !dbg !4528
  store i64 %inc342, i64* %arg_num.addr, align 8, !dbg !4528
  br label %if.end343, !dbg !4529

if.end343:                                        ; preds = %if.then339, %if.end334
  %180 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4530
  %precision_type344 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %180, i32 0, i32 15, !dbg !4531
  %181 = load %union.tree_node**, %union.tree_node*** %precision_type344, align 8, !dbg !4531
  %182 = load %union.tree_node*, %union.tree_node** %181, align 8, !dbg !4532
  %wanted_type345 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %precision_wanted_type, i32 0, i32 0, !dbg !4533
  store %union.tree_node* %182, %union.tree_node** %wanted_type345, align 8, !dbg !4534
  %wanted_type_name346 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %precision_wanted_type, i32 0, i32 1, !dbg !4535
  store i8* null, i8** %wanted_type_name346, align 8, !dbg !4536
  %pointer_count347 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %precision_wanted_type, i32 0, i32 3, !dbg !4537
  store i32 0, i32* %pointer_count347, align 4, !dbg !4538
  %char_lenient_flag348 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %precision_wanted_type, i32 0, i32 4, !dbg !4539
  store i32 0, i32* %char_lenient_flag348, align 8, !dbg !4540
  %scalar_identity_flag349 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %precision_wanted_type, i32 0, i32 2, !dbg !4541
  store i32 0, i32* %scalar_identity_flag349, align 8, !dbg !4542
  %writing_in_flag350 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %precision_wanted_type, i32 0, i32 5, !dbg !4543
  store i32 0, i32* %writing_in_flag350, align 4, !dbg !4544
  %reading_from_flag351 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %precision_wanted_type, i32 0, i32 6, !dbg !4545
  store i32 0, i32* %reading_from_flag351, align 8, !dbg !4546
  %name352 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %precision_wanted_type, i32 0, i32 7, !dbg !4547
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.39, i64 0, i64 0), i8** %name352, align 8, !dbg !4548
  %183 = load %union.tree_node*, %union.tree_node** %cur_param, align 8, !dbg !4549
  %param353 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %precision_wanted_type, i32 0, i32 8, !dbg !4550
  store %union.tree_node* %183, %union.tree_node** %param353, align 8, !dbg !4551
  %184 = load i64, i64* %arg_num.addr, align 8, !dbg !4552
  %conv354 = trunc i64 %184 to i32, !dbg !4552
  %arg_num355 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %precision_wanted_type, i32 0, i32 9, !dbg !4553
  store i32 %conv354, i32* %arg_num355, align 8, !dbg !4554
  %next356 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %precision_wanted_type, i32 0, i32 10, !dbg !4555
  store %struct.format_wanted_type* null, %struct.format_wanted_type** %next356, align 8, !dbg !4556
  %185 = load %struct.format_wanted_type*, %struct.format_wanted_type** %last_wanted_type, align 8, !dbg !4557
  %cmp357 = icmp ne %struct.format_wanted_type* %185, null, !dbg !4559
  br i1 %cmp357, label %if.then359, label %if.end361, !dbg !4560

if.then359:                                       ; preds = %if.end343
  %186 = load %struct.format_wanted_type*, %struct.format_wanted_type** %last_wanted_type, align 8, !dbg !4561
  %next360 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %186, i32 0, i32 10, !dbg !4562
  store %struct.format_wanted_type* %precision_wanted_type, %struct.format_wanted_type** %next360, align 8, !dbg !4563
  br label %if.end361, !dbg !4561

if.end361:                                        ; preds = %if.then359, %if.end343
  %187 = load %struct.format_wanted_type*, %struct.format_wanted_type** %first_wanted_type, align 8, !dbg !4564
  %cmp362 = icmp eq %struct.format_wanted_type* %187, null, !dbg !4566
  br i1 %cmp362, label %if.then364, label %if.end365, !dbg !4567

if.then364:                                       ; preds = %if.end361
  store %struct.format_wanted_type* %precision_wanted_type, %struct.format_wanted_type** %first_wanted_type, align 8, !dbg !4568
  br label %if.end365, !dbg !4569

if.end365:                                        ; preds = %if.then364, %if.end361
  store %struct.format_wanted_type* %precision_wanted_type, %struct.format_wanted_type** %last_wanted_type, align 8, !dbg !4570
  br label %if.end366, !dbg !4571

if.end366:                                        ; preds = %if.end365, %if.end325
  br label %if.end394, !dbg !4572

if.else367:                                       ; preds = %land.lhs.true293, %if.then279
  %188 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4573
  %flags368 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %188, i32 0, i32 7, !dbg !4576
  %189 = load i32, i32* %flags368, align 8, !dbg !4576
  %and369 = and i32 %189, 64, !dbg !4577
  %tobool370 = icmp ne i32 %and369, 0, !dbg !4577
  br i1 %tobool370, label %if.end382, label %land.lhs.true371, !dbg !4578

land.lhs.true371:                                 ; preds = %if.else367
  %190 = load i8*, i8** %format_chars.addr, align 8, !dbg !4579
  %191 = load i8, i8* %190, align 1, !dbg !4579
  %conv372 = sext i8 %191 to i32, !dbg !4579
  %and373 = and i32 %conv372, 255, !dbg !4579
  %idxprom374 = sext i32 %and373 to i64, !dbg !4579
  %arrayidx375 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom374, !dbg !4579
  %192 = load i16, i16* %arrayidx375, align 2, !dbg !4579
  %conv376 = zext i16 %192 to i32, !dbg !4579
  %and377 = and i32 %conv376, 4, !dbg !4579
  %tobool378 = icmp ne i32 %and377, 0, !dbg !4579
  br i1 %tobool378, label %if.end382, label %if.then379, !dbg !4580

if.then379:                                       ; preds = %land.lhs.true371
  %193 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4581
  %name380 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %193, i32 0, i32 0, !dbg !4582
  %194 = load i8*, i8** %name380, align 8, !dbg !4582
  %call381 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.40, i64 0, i64 0), i8* %194), !dbg !4583
  br label %if.end382, !dbg !4583

if.end382:                                        ; preds = %if.then379, %land.lhs.true371, %if.else367
  br label %while.cond383, !dbg !4584

while.cond383:                                    ; preds = %while.body391, %if.end382
  %195 = load i8*, i8** %format_chars.addr, align 8, !dbg !4585
  %196 = load i8, i8* %195, align 1, !dbg !4585
  %conv384 = sext i8 %196 to i32, !dbg !4585
  %and385 = and i32 %conv384, 255, !dbg !4585
  %idxprom386 = sext i32 %and385 to i64, !dbg !4585
  %arrayidx387 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom386, !dbg !4585
  %197 = load i16, i16* %arrayidx387, align 2, !dbg !4585
  %conv388 = zext i16 %197 to i32, !dbg !4585
  %and389 = and i32 %conv388, 4, !dbg !4585
  %tobool390 = icmp ne i32 %and389, 0, !dbg !4584
  br i1 %tobool390, label %while.body391, label %while.end393, !dbg !4584

while.body391:                                    ; preds = %while.cond383
  %198 = load i8*, i8** %format_chars.addr, align 8, !dbg !4586
  %incdec.ptr392 = getelementptr inbounds i8, i8* %198, i32 1, !dbg !4586
  store i8* %incdec.ptr392, i8** %format_chars.addr, align 8, !dbg !4586
  br label %while.cond383, !dbg !4584, !llvm.loop !4587

while.end393:                                     ; preds = %while.cond383
  br label %if.end394

if.end394:                                        ; preds = %while.end393, %if.end366
  br label %if.end395, !dbg !4589

if.end395:                                        ; preds = %if.end394, %land.lhs.true275, %if.end272
  %199 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4590
  %alloc_char = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %199, i32 0, i32 13, !dbg !4592
  %200 = load i32, i32* %alloc_char, align 8, !dbg !4592
  %tobool396 = icmp ne i32 %200, 0, !dbg !4590
  br i1 %tobool396, label %land.lhs.true397, label %if.end414, !dbg !4593

land.lhs.true397:                                 ; preds = %if.end395
  %201 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4594
  %alloc_char398 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %201, i32 0, i32 13, !dbg !4595
  %202 = load i32, i32* %alloc_char398, align 8, !dbg !4595
  %203 = load i8*, i8** %format_chars.addr, align 8, !dbg !4596
  %204 = load i8, i8* %203, align 1, !dbg !4597
  %conv399 = sext i8 %204 to i32, !dbg !4597
  %cmp400 = icmp eq i32 %202, %conv399, !dbg !4598
  br i1 %cmp400, label %if.then402, label %if.end414, !dbg !4599

if.then402:                                       ; preds = %land.lhs.true397
  %arraydecay403 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 0, !dbg !4600
  %call404 = call i64 @strlen(i8* %arraydecay403), !dbg !4602
  %conv405 = trunc i64 %call404 to i32, !dbg !4602
  store i32 %conv405, i32* %i, align 4, !dbg !4603
  %205 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4604
  %alloc_char406 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %205, i32 0, i32 13, !dbg !4605
  %206 = load i32, i32* %alloc_char406, align 8, !dbg !4605
  %conv407 = trunc i32 %206 to i8, !dbg !4604
  %207 = load i32, i32* %i, align 4, !dbg !4606
  %inc408 = add nsw i32 %207, 1, !dbg !4606
  store i32 %inc408, i32* %i, align 4, !dbg !4606
  %idxprom409 = sext i32 %207 to i64, !dbg !4607
  %arrayidx410 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom409, !dbg !4607
  store i8 %conv407, i8* %arrayidx410, align 1, !dbg !4608
  %208 = load i32, i32* %i, align 4, !dbg !4609
  %idxprom411 = sext i32 %208 to i64, !dbg !4610
  %arrayidx412 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom411, !dbg !4610
  store i8 0, i8* %arrayidx412, align 1, !dbg !4611
  %209 = load i8*, i8** %format_chars.addr, align 8, !dbg !4612
  %incdec.ptr413 = getelementptr inbounds i8, i8* %209, i32 1, !dbg !4612
  store i8* %incdec.ptr413, i8** %format_chars.addr, align 8, !dbg !4612
  br label %if.end414, !dbg !4613

if.end414:                                        ; preds = %if.then402, %land.lhs.true397, %if.end395
  %210 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4614
  %flags415 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %210, i32 0, i32 7, !dbg !4616
  %211 = load i32, i32* %flags415, align 8, !dbg !4616
  %and416 = and i32 %211, 2, !dbg !4617
  %tobool417 = icmp ne i32 %and416, 0, !dbg !4617
  br i1 %tobool417, label %if.then418, label %if.end450, !dbg !4618

if.then418:                                       ; preds = %if.end414
  %212 = load i8*, i8** %format_chars.addr, align 8, !dbg !4619
  %213 = load i8, i8* %212, align 1, !dbg !4622
  %conv419 = sext i8 %213 to i32, !dbg !4622
  %cmp420 = icmp eq i32 %conv419, 97, !dbg !4623
  br i1 %cmp420, label %land.lhs.true422, label %if.end449, !dbg !4624

land.lhs.true422:                                 ; preds = %if.then418
  %214 = load i32, i32* @flag_isoc99, align 4, !dbg !4625
  %tobool423 = icmp ne i32 %214, 0, !dbg !4625
  br i1 %tobool423, label %if.end449, label %if.then424, !dbg !4626

if.then424:                                       ; preds = %land.lhs.true422
  %215 = load i8*, i8** %format_chars.addr, align 8, !dbg !4627
  %arrayidx425 = getelementptr inbounds i8, i8* %215, i64 1, !dbg !4627
  %216 = load i8, i8* %arrayidx425, align 1, !dbg !4627
  %conv426 = sext i8 %216 to i32, !dbg !4627
  %cmp427 = icmp eq i32 %conv426, 115, !dbg !4630
  br i1 %cmp427, label %if.then438, label %lor.lhs.false, !dbg !4631

lor.lhs.false:                                    ; preds = %if.then424
  %217 = load i8*, i8** %format_chars.addr, align 8, !dbg !4632
  %arrayidx429 = getelementptr inbounds i8, i8* %217, i64 1, !dbg !4632
  %218 = load i8, i8* %arrayidx429, align 1, !dbg !4632
  %conv430 = sext i8 %218 to i32, !dbg !4632
  %cmp431 = icmp eq i32 %conv430, 83, !dbg !4633
  br i1 %cmp431, label %if.then438, label %lor.lhs.false433, !dbg !4634

lor.lhs.false433:                                 ; preds = %lor.lhs.false
  %219 = load i8*, i8** %format_chars.addr, align 8, !dbg !4635
  %arrayidx434 = getelementptr inbounds i8, i8* %219, i64 1, !dbg !4635
  %220 = load i8, i8* %arrayidx434, align 1, !dbg !4635
  %conv435 = sext i8 %220 to i32, !dbg !4635
  %cmp436 = icmp eq i32 %conv435, 91, !dbg !4636
  br i1 %cmp436, label %if.then438, label %if.end448, !dbg !4637

if.then438:                                       ; preds = %lor.lhs.false433, %lor.lhs.false, %if.then424
  %arraydecay439 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 0, !dbg !4638
  %call440 = call i64 @strlen(i8* %arraydecay439), !dbg !4640
  %conv441 = trunc i64 %call440 to i32, !dbg !4640
  store i32 %conv441, i32* %i, align 4, !dbg !4641
  %221 = load i32, i32* %i, align 4, !dbg !4642
  %inc442 = add nsw i32 %221, 1, !dbg !4642
  store i32 %inc442, i32* %i, align 4, !dbg !4642
  %idxprom443 = sext i32 %221 to i64, !dbg !4643
  %arrayidx444 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom443, !dbg !4643
  store i8 97, i8* %arrayidx444, align 1, !dbg !4644
  %222 = load i32, i32* %i, align 4, !dbg !4645
  %idxprom445 = sext i32 %222 to i64, !dbg !4646
  %arrayidx446 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom445, !dbg !4646
  store i8 0, i8* %arrayidx446, align 1, !dbg !4647
  %223 = load i8*, i8** %format_chars.addr, align 8, !dbg !4648
  %incdec.ptr447 = getelementptr inbounds i8, i8* %223, i32 1, !dbg !4648
  store i8* %incdec.ptr447, i8** %format_chars.addr, align 8, !dbg !4648
  br label %if.end448, !dbg !4649

if.end448:                                        ; preds = %if.then438, %lor.lhs.false433
  br label %if.end449, !dbg !4650

if.end449:                                        ; preds = %if.end448, %land.lhs.true422, %if.then418
  br label %if.end450, !dbg !4651

if.end450:                                        ; preds = %if.end449, %if.end414
  %224 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4652
  %length_char_specs = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %224, i32 0, i32 1, !dbg !4653
  %225 = load %struct.format_length_info*, %struct.format_length_info** %length_char_specs, align 8, !dbg !4653
  store %struct.format_length_info* %225, %struct.format_length_info** %fli, align 8, !dbg !4654
  store i8* null, i8** %length_chars, align 8, !dbg !4655
  store i32 0, i32* %length_chars_val, align 4, !dbg !4656
  store i32 0, i32* %length_chars_std, align 4, !dbg !4657
  store i32 0, i32* %scalar_identity_flag, align 4, !dbg !4658
  %226 = load %struct.format_length_info*, %struct.format_length_info** %fli, align 8, !dbg !4659
  %tobool451 = icmp ne %struct.format_length_info* %226, null, !dbg !4659
  br i1 %tobool451, label %if.then452, label %if.end536, !dbg !4661

if.then452:                                       ; preds = %if.end450
  br label %while.cond453, !dbg !4662

while.cond453:                                    ; preds = %while.body464, %if.then452
  %227 = load %struct.format_length_info*, %struct.format_length_info** %fli, align 8, !dbg !4664
  %name454 = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %227, i32 0, i32 0, !dbg !4665
  %228 = load i8*, i8** %name454, align 8, !dbg !4665
  %cmp455 = icmp ne i8* %228, null, !dbg !4666
  br i1 %cmp455, label %land.rhs457, label %land.end463, !dbg !4667

land.rhs457:                                      ; preds = %while.cond453
  %229 = load %struct.format_length_info*, %struct.format_length_info** %fli, align 8, !dbg !4668
  %name458 = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %229, i32 0, i32 0, !dbg !4669
  %230 = load i8*, i8** %name458, align 8, !dbg !4669
  %231 = load i8*, i8** %format_chars.addr, align 8, !dbg !4670
  %232 = load %struct.format_length_info*, %struct.format_length_info** %fli, align 8, !dbg !4671
  %name459 = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %232, i32 0, i32 0, !dbg !4672
  %233 = load i8*, i8** %name459, align 8, !dbg !4672
  %call460 = call i64 @strlen(i8* %233), !dbg !4673
  %call461 = call i32 @strncmp(i8* %230, i8* %231, i64 %call460), !dbg !4674
  %tobool462 = icmp ne i32 %call461, 0, !dbg !4667
  br label %land.end463

land.end463:                                      ; preds = %land.rhs457, %while.cond453
  %234 = phi i1 [ false, %while.cond453 ], [ %tobool462, %land.rhs457 ], !dbg !4675
  br i1 %234, label %while.body464, label %while.end466, !dbg !4662

while.body464:                                    ; preds = %land.end463
  %235 = load %struct.format_length_info*, %struct.format_length_info** %fli, align 8, !dbg !4676
  %incdec.ptr465 = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %235, i32 1, !dbg !4676
  store %struct.format_length_info* %incdec.ptr465, %struct.format_length_info** %fli, align 8, !dbg !4676
  br label %while.cond453, !dbg !4662, !llvm.loop !4677

while.end466:                                     ; preds = %land.end463
  %236 = load %struct.format_length_info*, %struct.format_length_info** %fli, align 8, !dbg !4678
  %name467 = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %236, i32 0, i32 0, !dbg !4680
  %237 = load i8*, i8** %name467, align 8, !dbg !4680
  %cmp468 = icmp ne i8* %237, null, !dbg !4681
  br i1 %cmp468, label %if.then470, label %if.end498, !dbg !4682

if.then470:                                       ; preds = %while.end466
  %238 = load %struct.format_length_info*, %struct.format_length_info** %fli, align 8, !dbg !4683
  %name471 = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %238, i32 0, i32 0, !dbg !4685
  %239 = load i8*, i8** %name471, align 8, !dbg !4685
  %call472 = call i64 @strlen(i8* %239), !dbg !4686
  %240 = load i8*, i8** %format_chars.addr, align 8, !dbg !4687
  %add.ptr = getelementptr inbounds i8, i8* %240, i64 %call472, !dbg !4687
  store i8* %add.ptr, i8** %format_chars.addr, align 8, !dbg !4687
  %241 = load %struct.format_length_info*, %struct.format_length_info** %fli, align 8, !dbg !4688
  %double_name = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %241, i32 0, i32 3, !dbg !4690
  %242 = load i8*, i8** %double_name, align 8, !dbg !4690
  %cmp473 = icmp ne i8* %242, null, !dbg !4691
  br i1 %cmp473, label %land.lhs.true475, label %if.else485, !dbg !4692

land.lhs.true475:                                 ; preds = %if.then470
  %243 = load %struct.format_length_info*, %struct.format_length_info** %fli, align 8, !dbg !4693
  %name476 = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %243, i32 0, i32 0, !dbg !4694
  %244 = load i8*, i8** %name476, align 8, !dbg !4694
  %arrayidx477 = getelementptr inbounds i8, i8* %244, i64 0, !dbg !4693
  %245 = load i8, i8* %arrayidx477, align 1, !dbg !4693
  %conv478 = sext i8 %245 to i32, !dbg !4693
  %246 = load i8*, i8** %format_chars.addr, align 8, !dbg !4695
  %247 = load i8, i8* %246, align 1, !dbg !4696
  %conv479 = sext i8 %247 to i32, !dbg !4696
  %cmp480 = icmp eq i32 %conv478, %conv479, !dbg !4697
  br i1 %cmp480, label %if.then482, label %if.else485, !dbg !4698

if.then482:                                       ; preds = %land.lhs.true475
  %248 = load i8*, i8** %format_chars.addr, align 8, !dbg !4699
  %incdec.ptr483 = getelementptr inbounds i8, i8* %248, i32 1, !dbg !4699
  store i8* %incdec.ptr483, i8** %format_chars.addr, align 8, !dbg !4699
  %249 = load %struct.format_length_info*, %struct.format_length_info** %fli, align 8, !dbg !4701
  %double_name484 = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %249, i32 0, i32 3, !dbg !4702
  %250 = load i8*, i8** %double_name484, align 8, !dbg !4702
  store i8* %250, i8** %length_chars, align 8, !dbg !4703
  %251 = load %struct.format_length_info*, %struct.format_length_info** %fli, align 8, !dbg !4704
  %double_index = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %251, i32 0, i32 4, !dbg !4705
  %252 = load i32, i32* %double_index, align 8, !dbg !4705
  store i32 %252, i32* %length_chars_val, align 4, !dbg !4706
  %253 = load %struct.format_length_info*, %struct.format_length_info** %fli, align 8, !dbg !4707
  %double_std = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %253, i32 0, i32 5, !dbg !4708
  %254 = load i32, i32* %double_std, align 4, !dbg !4708
  store i32 %254, i32* %length_chars_std, align 4, !dbg !4709
  br label %if.end488, !dbg !4710

if.else485:                                       ; preds = %land.lhs.true475, %if.then470
  %255 = load %struct.format_length_info*, %struct.format_length_info** %fli, align 8, !dbg !4711
  %name486 = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %255, i32 0, i32 0, !dbg !4713
  %256 = load i8*, i8** %name486, align 8, !dbg !4713
  store i8* %256, i8** %length_chars, align 8, !dbg !4714
  %257 = load %struct.format_length_info*, %struct.format_length_info** %fli, align 8, !dbg !4715
  %index = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %257, i32 0, i32 1, !dbg !4716
  %258 = load i32, i32* %index, align 8, !dbg !4716
  store i32 %258, i32* %length_chars_val, align 4, !dbg !4717
  %259 = load %struct.format_length_info*, %struct.format_length_info** %fli, align 8, !dbg !4718
  %std = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %259, i32 0, i32 2, !dbg !4719
  %260 = load i32, i32* %std, align 4, !dbg !4719
  store i32 %260, i32* %length_chars_std, align 4, !dbg !4720
  %261 = load %struct.format_length_info*, %struct.format_length_info** %fli, align 8, !dbg !4721
  %scalar_identity_flag487 = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %261, i32 0, i32 6, !dbg !4722
  %262 = load i32, i32* %scalar_identity_flag487, align 8, !dbg !4722
  store i32 %262, i32* %scalar_identity_flag, align 4, !dbg !4723
  br label %if.end488

if.end488:                                        ; preds = %if.else485, %if.then482
  %arraydecay489 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 0, !dbg !4724
  %call490 = call i64 @strlen(i8* %arraydecay489), !dbg !4725
  %conv491 = trunc i64 %call490 to i32, !dbg !4725
  store i32 %conv491, i32* %i, align 4, !dbg !4726
  %263 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4727
  %length_code_char = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %263, i32 0, i32 12, !dbg !4728
  %264 = load i32, i32* %length_code_char, align 4, !dbg !4728
  %conv492 = trunc i32 %264 to i8, !dbg !4727
  %265 = load i32, i32* %i, align 4, !dbg !4729
  %inc493 = add nsw i32 %265, 1, !dbg !4729
  store i32 %inc493, i32* %i, align 4, !dbg !4729
  %idxprom494 = sext i32 %265 to i64, !dbg !4730
  %arrayidx495 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom494, !dbg !4730
  store i8 %conv492, i8* %arrayidx495, align 1, !dbg !4731
  %266 = load i32, i32* %i, align 4, !dbg !4732
  %idxprom496 = sext i32 %266 to i64, !dbg !4733
  %arrayidx497 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom496, !dbg !4733
  store i8 0, i8* %arrayidx497, align 1, !dbg !4734
  br label %if.end498, !dbg !4735

if.end498:                                        ; preds = %if.end488, %while.end466
  %267 = load i32, i32* @pedantic, align 4, !dbg !4736
  %tobool499 = icmp ne i32 %267, 0, !dbg !4736
  br i1 %tobool499, label %if.then500, label %if.end535, !dbg !4738

if.then500:                                       ; preds = %if.end498
  %268 = load i32, i32* %length_chars_std, align 4, !dbg !4739
  %cmp501 = icmp eq i32 %268, 2, !dbg !4739
  br i1 %cmp501, label %cond.true, label %cond.false, !dbg !4739

cond.true:                                        ; preds = %if.then500
  %269 = load i32, i32* @warn_long_long, align 4, !dbg !4739
  %tobool503 = icmp ne i32 %269, 0, !dbg !4739
  %270 = zext i1 %tobool503 to i64, !dbg !4739
  %cond = select i1 %tobool503, i32 3, i32 0, !dbg !4739
  br label %cond.end, !dbg !4739

cond.false:                                       ; preds = %if.then500
  %271 = load i32, i32* %length_chars_std, align 4, !dbg !4739
  br label %cond.end, !dbg !4739

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond504 = phi i32 [ %cond, %cond.true ], [ %271, %cond.false ], !dbg !4739
  %272 = load i32, i32* @c_language, align 4, !dbg !4742
  %and505 = and i32 %272, 2, !dbg !4742
  %cmp506 = icmp ne i32 %and505, 0, !dbg !4742
  br i1 %cmp506, label %cond.true508, label %cond.false509, !dbg !4742

cond.true508:                                     ; preds = %cond.end
  br label %cond.end517, !dbg !4742

cond.false509:                                    ; preds = %cond.end
  %273 = load i32, i32* @flag_isoc99, align 4, !dbg !4742
  %tobool510 = icmp ne i32 %273, 0, !dbg !4742
  br i1 %tobool510, label %cond.true511, label %cond.false512, !dbg !4742

cond.true511:                                     ; preds = %cond.false509
  br label %cond.end515, !dbg !4742

cond.false512:                                    ; preds = %cond.false509
  %274 = load i32, i32* @flag_isoc94, align 4, !dbg !4742
  %tobool513 = icmp ne i32 %274, 0, !dbg !4742
  %275 = zext i1 %tobool513 to i64, !dbg !4742
  %cond514 = select i1 %tobool513, i32 1, i32 0, !dbg !4742
  br label %cond.end515, !dbg !4742

cond.end515:                                      ; preds = %cond.false512, %cond.true511
  %cond516 = phi i32 [ 3, %cond.true511 ], [ %cond514, %cond.false512 ], !dbg !4742
  br label %cond.end517, !dbg !4742

cond.end517:                                      ; preds = %cond.end515, %cond.true508
  %cond518 = phi i32 [ 1, %cond.true508 ], [ %cond516, %cond.end515 ], !dbg !4742
  %cmp519 = icmp sgt i32 %cond504, %cond518, !dbg !4743
  br i1 %cmp519, label %if.then521, label %if.end534, !dbg !4744

if.then521:                                       ; preds = %cond.end517
  %276 = load i32, i32* @c_language, align 4, !dbg !4745
  %and522 = and i32 %276, 2, !dbg !4745
  %cmp523 = icmp ne i32 %and522, 0, !dbg !4745
  br i1 %cmp523, label %cond.true525, label %cond.false526, !dbg !4745

cond.true525:                                     ; preds = %if.then521
  br label %cond.end530, !dbg !4745

cond.false526:                                    ; preds = %if.then521
  %277 = load i32, i32* %length_chars_std, align 4, !dbg !4745
  %cmp527 = icmp eq i32 %277, 4, !dbg !4745
  %278 = zext i1 %cmp527 to i64, !dbg !4745
  %cond529 = select i1 %cmp527, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i64 0, i64 0), !dbg !4745
  br label %cond.end530, !dbg !4745

cond.end530:                                      ; preds = %cond.false526, %cond.true525
  %cond531 = phi i8* [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42, i64 0, i64 0), %cond.true525 ], [ %cond529, %cond.false526 ], !dbg !4745
  %279 = load i8*, i8** %length_chars, align 8, !dbg !4746
  %280 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4747
  %name532 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %280, i32 0, i32 0, !dbg !4748
  %281 = load i8*, i8** %name532, align 8, !dbg !4748
  %call533 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.41, i64 0, i64 0), i8* %cond531, i8* %279, i8* %281), !dbg !4749
  br label %if.end534, !dbg !4749

if.end534:                                        ; preds = %cond.end530, %cond.end517
  br label %if.end535, !dbg !4750

if.end535:                                        ; preds = %if.end534, %if.end498
  br label %if.end536, !dbg !4751

if.end536:                                        ; preds = %if.end535, %if.end450
  %282 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4752
  %modifier_chars = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %282, i32 0, i32 4, !dbg !4754
  %283 = load i8*, i8** %modifier_chars, align 8, !dbg !4754
  %cmp537 = icmp ne i8* %283, null, !dbg !4755
  br i1 %cmp537, label %if.then539, label %if.end575, !dbg !4756

if.then539:                                       ; preds = %if.end536
  br label %while.cond540, !dbg !4757

while.cond540:                                    ; preds = %if.end572, %if.then539
  %284 = load i8*, i8** %format_chars.addr, align 8, !dbg !4759
  %285 = load i8, i8* %284, align 1, !dbg !4760
  %conv541 = sext i8 %285 to i32, !dbg !4760
  %cmp542 = icmp ne i32 %conv541, 0, !dbg !4761
  br i1 %cmp542, label %land.rhs544, label %land.end550, !dbg !4762

land.rhs544:                                      ; preds = %while.cond540
  %286 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4763
  %modifier_chars545 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %286, i32 0, i32 4, !dbg !4764
  %287 = load i8*, i8** %modifier_chars545, align 8, !dbg !4764
  %288 = load i8*, i8** %format_chars.addr, align 8, !dbg !4765
  %289 = load i8, i8* %288, align 1, !dbg !4766
  %conv546 = sext i8 %289 to i32, !dbg !4766
  %call547 = call i8* @strchr(i8* %287, i32 %conv546), !dbg !4767
  %cmp548 = icmp ne i8* %call547, null, !dbg !4768
  br label %land.end550

land.end550:                                      ; preds = %land.rhs544, %while.cond540
  %290 = phi i1 [ false, %while.cond540 ], [ %cmp548, %land.rhs544 ], !dbg !4769
  br i1 %290, label %while.body551, label %while.end574, !dbg !4757

while.body551:                                    ; preds = %land.end550
  %arraydecay552 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 0, !dbg !4770
  %291 = load i8*, i8** %format_chars.addr, align 8, !dbg !4773
  %292 = load i8, i8* %291, align 1, !dbg !4774
  %conv553 = sext i8 %292 to i32, !dbg !4774
  %call554 = call i8* @strchr(i8* %arraydecay552, i32 %conv553), !dbg !4775
  %cmp555 = icmp ne i8* %call554, null, !dbg !4776
  br i1 %cmp555, label %if.then557, label %if.else563, !dbg !4777

if.then557:                                       ; preds = %while.body551
  call void @llvm.dbg.declare(metadata %struct.format_flag_spec** %s558, metadata !4778, metadata !DIExpression()), !dbg !4780
  %293 = load %struct.format_flag_spec*, %struct.format_flag_spec** %flag_specs, align 8, !dbg !4781
  %294 = load i8*, i8** %format_chars.addr, align 8, !dbg !4782
  %295 = load i8, i8* %294, align 1, !dbg !4783
  %conv559 = sext i8 %295 to i32, !dbg !4783
  %call560 = call %struct.format_flag_spec* @get_flag_spec(%struct.format_flag_spec* %293, i32 %conv559, i8* null), !dbg !4784
  store %struct.format_flag_spec* %call560, %struct.format_flag_spec** %s558, align 8, !dbg !4780
  %296 = load %struct.format_flag_spec*, %struct.format_flag_spec** %s558, align 8, !dbg !4785
  %name561 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %296, i32 0, i32 3, !dbg !4785
  %297 = load i8*, i8** %name561, align 8, !dbg !4785
  %call562 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.33, i64 0, i64 0), i8* %297), !dbg !4786
  br label %if.end572, !dbg !4787

if.else563:                                       ; preds = %while.body551
  %arraydecay564 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 0, !dbg !4788
  %call565 = call i64 @strlen(i8* %arraydecay564), !dbg !4790
  %conv566 = trunc i64 %call565 to i32, !dbg !4790
  store i32 %conv566, i32* %i, align 4, !dbg !4791
  %298 = load i8*, i8** %format_chars.addr, align 8, !dbg !4792
  %299 = load i8, i8* %298, align 1, !dbg !4793
  %300 = load i32, i32* %i, align 4, !dbg !4794
  %inc567 = add nsw i32 %300, 1, !dbg !4794
  store i32 %inc567, i32* %i, align 4, !dbg !4794
  %idxprom568 = sext i32 %300 to i64, !dbg !4795
  %arrayidx569 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom568, !dbg !4795
  store i8 %299, i8* %arrayidx569, align 1, !dbg !4796
  %301 = load i32, i32* %i, align 4, !dbg !4797
  %idxprom570 = sext i32 %301 to i64, !dbg !4798
  %arrayidx571 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom570, !dbg !4798
  store i8 0, i8* %arrayidx571, align 1, !dbg !4799
  br label %if.end572

if.end572:                                        ; preds = %if.else563, %if.then557
  %302 = load i8*, i8** %format_chars.addr, align 8, !dbg !4800
  %incdec.ptr573 = getelementptr inbounds i8, i8* %302, i32 1, !dbg !4800
  store i8* %incdec.ptr573, i8** %format_chars.addr, align 8, !dbg !4800
  br label %while.cond540, !dbg !4757, !llvm.loop !4801

while.end574:                                     ; preds = %land.end550
  br label %if.end575, !dbg !4803

if.end575:                                        ; preds = %while.end574, %if.end536
  %303 = load i8*, i8** %format_chars.addr, align 8, !dbg !4804
  %304 = load i8, i8* %303, align 1, !dbg !4805
  %conv576 = sext i8 %304 to i32, !dbg !4805
  store i32 %conv576, i32* %format_char, align 4, !dbg !4806
  %305 = load i32, i32* %format_char, align 4, !dbg !4807
  %cmp577 = icmp eq i32 %305, 0, !dbg !4809
  br i1 %cmp577, label %if.then586, label %lor.lhs.false579, !dbg !4810

lor.lhs.false579:                                 ; preds = %if.end575
  %306 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4811
  %flags580 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %306, i32 0, i32 7, !dbg !4812
  %307 = load i32, i32* %flags580, align 8, !dbg !4812
  %and581 = and i32 %307, 4, !dbg !4813
  %tobool582 = icmp ne i32 %and581, 0, !dbg !4813
  br i1 %tobool582, label %if.end588, label %land.lhs.true583, !dbg !4814

land.lhs.true583:                                 ; preds = %lor.lhs.false579
  %308 = load i32, i32* %format_char, align 4, !dbg !4815
  %cmp584 = icmp eq i32 %308, 37, !dbg !4816
  br i1 %cmp584, label %if.then586, label %if.end588, !dbg !4817

if.then586:                                       ; preds = %land.lhs.true583, %if.end575
  %call587 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.45, i64 0, i64 0)), !dbg !4818
  br label %while.body, !dbg !4820, !llvm.loop !4092

if.end588:                                        ; preds = %land.lhs.true583, %lor.lhs.false579
  %309 = load i8*, i8** %format_chars.addr, align 8, !dbg !4821
  %incdec.ptr589 = getelementptr inbounds i8, i8* %309, i32 1, !dbg !4821
  store i8* %incdec.ptr589, i8** %format_chars.addr, align 8, !dbg !4821
  %310 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4822
  %conversion_specs = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %310, i32 0, i32 2, !dbg !4823
  %311 = load %struct.format_char_info*, %struct.format_char_info** %conversion_specs, align 8, !dbg !4823
  store %struct.format_char_info* %311, %struct.format_char_info** %fci, align 8, !dbg !4824
  br label %while.cond590, !dbg !4825

while.cond590:                                    ; preds = %while.body600, %if.end588
  %312 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !4826
  %format_chars591 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %312, i32 0, i32 0, !dbg !4827
  %313 = load i8*, i8** %format_chars591, align 8, !dbg !4827
  %cmp592 = icmp ne i8* %313, null, !dbg !4828
  br i1 %cmp592, label %land.rhs594, label %land.end599, !dbg !4829

land.rhs594:                                      ; preds = %while.cond590
  %314 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !4830
  %format_chars595 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %314, i32 0, i32 0, !dbg !4831
  %315 = load i8*, i8** %format_chars595, align 8, !dbg !4831
  %316 = load i32, i32* %format_char, align 4, !dbg !4832
  %call596 = call i8* @strchr(i8* %315, i32 %316), !dbg !4833
  %cmp597 = icmp eq i8* %call596, null, !dbg !4834
  br label %land.end599

land.end599:                                      ; preds = %land.rhs594, %while.cond590
  %317 = phi i1 [ false, %while.cond590 ], [ %cmp597, %land.rhs594 ], !dbg !4169
  br i1 %317, label %while.body600, label %while.end602, !dbg !4825

while.body600:                                    ; preds = %land.end599
  %318 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !4835
  %incdec.ptr601 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %318, i32 1, !dbg !4835
  store %struct.format_char_info* %incdec.ptr601, %struct.format_char_info** %fci, align 8, !dbg !4835
  br label %while.cond590, !dbg !4825, !llvm.loop !4836

while.end602:                                     ; preds = %land.end599
  %319 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !4838
  %format_chars603 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %319, i32 0, i32 0, !dbg !4840
  %320 = load i8*, i8** %format_chars603, align 8, !dbg !4840
  %cmp604 = icmp eq i8* %320, null, !dbg !4841
  br i1 %cmp604, label %if.then606, label %if.end618, !dbg !4842

if.then606:                                       ; preds = %while.end602
  %321 = load i32, i32* %format_char, align 4, !dbg !4843
  %and607 = and i32 %321, 255, !dbg !4843
  %idxprom608 = sext i32 %and607 to i64, !dbg !4843
  %arrayidx609 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom608, !dbg !4843
  %322 = load i16, i16* %arrayidx609, align 2, !dbg !4843
  %conv610 = zext i16 %322 to i32, !dbg !4843
  %and611 = and i32 %conv610, 172, !dbg !4843
  %tobool612 = icmp ne i32 %and611, 0, !dbg !4843
  br i1 %tobool612, label %if.then613, label %if.else615, !dbg !4846

if.then613:                                       ; preds = %if.then606
  %323 = load i32, i32* %format_char, align 4, !dbg !4847
  %call614 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.46, i64 0, i64 0), i32 %323), !dbg !4848
  br label %if.end617, !dbg !4848

if.else615:                                       ; preds = %if.then606
  %324 = load i32, i32* %format_char, align 4, !dbg !4849
  %call616 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.47, i64 0, i64 0), i32 %324), !dbg !4850
  br label %if.end617

if.end617:                                        ; preds = %if.else615, %if.then613
  br label %while.body, !dbg !4851, !llvm.loop !4092

if.end618:                                        ; preds = %while.end602
  %325 = load i32, i32* @pedantic, align 4, !dbg !4852
  %tobool619 = icmp ne i32 %325, 0, !dbg !4852
  br i1 %tobool619, label %if.then620, label %if.end662, !dbg !4854

if.then620:                                       ; preds = %if.end618
  %326 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !4855
  %std621 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %326, i32 0, i32 2, !dbg !4855
  %327 = load i32, i32* %std621, align 4, !dbg !4855
  %cmp622 = icmp eq i32 %327, 2, !dbg !4855
  br i1 %cmp622, label %cond.true624, label %cond.false627, !dbg !4855

cond.true624:                                     ; preds = %if.then620
  %328 = load i32, i32* @warn_long_long, align 4, !dbg !4855
  %tobool625 = icmp ne i32 %328, 0, !dbg !4855
  %329 = zext i1 %tobool625 to i64, !dbg !4855
  %cond626 = select i1 %tobool625, i32 3, i32 0, !dbg !4855
  br label %cond.end629, !dbg !4855

cond.false627:                                    ; preds = %if.then620
  %330 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !4855
  %std628 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %330, i32 0, i32 2, !dbg !4855
  %331 = load i32, i32* %std628, align 4, !dbg !4855
  br label %cond.end629, !dbg !4855

cond.end629:                                      ; preds = %cond.false627, %cond.true624
  %cond630 = phi i32 [ %cond626, %cond.true624 ], [ %331, %cond.false627 ], !dbg !4855
  %332 = load i32, i32* @c_language, align 4, !dbg !4858
  %and631 = and i32 %332, 2, !dbg !4858
  %cmp632 = icmp ne i32 %and631, 0, !dbg !4858
  br i1 %cmp632, label %cond.true634, label %cond.false635, !dbg !4858

cond.true634:                                     ; preds = %cond.end629
  br label %cond.end643, !dbg !4858

cond.false635:                                    ; preds = %cond.end629
  %333 = load i32, i32* @flag_isoc99, align 4, !dbg !4858
  %tobool636 = icmp ne i32 %333, 0, !dbg !4858
  br i1 %tobool636, label %cond.true637, label %cond.false638, !dbg !4858

cond.true637:                                     ; preds = %cond.false635
  br label %cond.end641, !dbg !4858

cond.false638:                                    ; preds = %cond.false635
  %334 = load i32, i32* @flag_isoc94, align 4, !dbg !4858
  %tobool639 = icmp ne i32 %334, 0, !dbg !4858
  %335 = zext i1 %tobool639 to i64, !dbg !4858
  %cond640 = select i1 %tobool639, i32 1, i32 0, !dbg !4858
  br label %cond.end641, !dbg !4858

cond.end641:                                      ; preds = %cond.false638, %cond.true637
  %cond642 = phi i32 [ 3, %cond.true637 ], [ %cond640, %cond.false638 ], !dbg !4858
  br label %cond.end643, !dbg !4858

cond.end643:                                      ; preds = %cond.end641, %cond.true634
  %cond644 = phi i32 [ 1, %cond.true634 ], [ %cond642, %cond.end641 ], !dbg !4858
  %cmp645 = icmp sgt i32 %cond630, %cond644, !dbg !4859
  br i1 %cmp645, label %if.then647, label %if.end661, !dbg !4860

if.then647:                                       ; preds = %cond.end643
  %336 = load i32, i32* @c_language, align 4, !dbg !4861
  %and648 = and i32 %336, 2, !dbg !4861
  %cmp649 = icmp ne i32 %and648, 0, !dbg !4861
  br i1 %cmp649, label %cond.true651, label %cond.false652, !dbg !4861

cond.true651:                                     ; preds = %if.then647
  br label %cond.end657, !dbg !4861

cond.false652:                                    ; preds = %if.then647
  %337 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !4861
  %std653 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %337, i32 0, i32 2, !dbg !4861
  %338 = load i32, i32* %std653, align 4, !dbg !4861
  %cmp654 = icmp eq i32 %338, 4, !dbg !4861
  %339 = zext i1 %cmp654 to i64, !dbg !4861
  %cond656 = select i1 %cmp654, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i64 0, i64 0), !dbg !4861
  br label %cond.end657, !dbg !4861

cond.end657:                                      ; preds = %cond.false652, %cond.true651
  %cond658 = phi i8* [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42, i64 0, i64 0), %cond.true651 ], [ %cond656, %cond.false652 ], !dbg !4861
  %340 = load i32, i32* %format_char, align 4, !dbg !4862
  %341 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4863
  %name659 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %341, i32 0, i32 0, !dbg !4864
  %342 = load i8*, i8** %name659, align 8, !dbg !4864
  %call660 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0), i8* %cond658, i32 %340, i8* %342), !dbg !4865
  br label %if.end661, !dbg !4865

if.end661:                                        ; preds = %cond.end657, %cond.end643
  br label %if.end662, !dbg !4866

if.end662:                                        ; preds = %if.end661, %if.end618
  call void @llvm.dbg.declare(metadata i32* %d, metadata !4867, metadata !DIExpression()), !dbg !4869
  store i32 0, i32* %d, align 4, !dbg !4869
  store i32 0, i32* %i, align 4, !dbg !4870
  br label %for.cond, !dbg !4872

for.cond:                                         ; preds = %for.inc, %if.end662
  %343 = load i32, i32* %i, align 4, !dbg !4873
  %idxprom663 = sext i32 %343 to i64, !dbg !4875
  %arrayidx664 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom663, !dbg !4875
  %344 = load i8, i8* %arrayidx664, align 1, !dbg !4875
  %conv665 = sext i8 %344 to i32, !dbg !4875
  %cmp666 = icmp ne i32 %conv665, 0, !dbg !4876
  br i1 %cmp666, label %for.body, label %for.end, !dbg !4877

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.format_flag_spec** %s668, metadata !4878, metadata !DIExpression()), !dbg !4880
  %345 = load %struct.format_flag_spec*, %struct.format_flag_spec** %flag_specs, align 8, !dbg !4881
  %346 = load i32, i32* %i, align 4, !dbg !4882
  %idxprom669 = sext i32 %346 to i64, !dbg !4883
  %arrayidx670 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom669, !dbg !4883
  %347 = load i8, i8* %arrayidx670, align 1, !dbg !4883
  %conv671 = sext i8 %347 to i32, !dbg !4883
  %call672 = call %struct.format_flag_spec* @get_flag_spec(%struct.format_flag_spec* %345, i32 %conv671, i8* null), !dbg !4884
  store %struct.format_flag_spec* %call672, %struct.format_flag_spec** %s668, align 8, !dbg !4880
  %348 = load i32, i32* %i, align 4, !dbg !4885
  %idxprom673 = sext i32 %348 to i64, !dbg !4886
  %arrayidx674 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom673, !dbg !4886
  %349 = load i8, i8* %arrayidx674, align 1, !dbg !4886
  %350 = load i32, i32* %i, align 4, !dbg !4887
  %351 = load i32, i32* %d, align 4, !dbg !4888
  %sub675 = sub nsw i32 %350, %351, !dbg !4889
  %idxprom676 = sext i32 %sub675 to i64, !dbg !4890
  %arrayidx677 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom676, !dbg !4890
  store i8 %349, i8* %arrayidx677, align 1, !dbg !4891
  %352 = load i32, i32* %i, align 4, !dbg !4892
  %idxprom678 = sext i32 %352 to i64, !dbg !4894
  %arrayidx679 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom678, !dbg !4894
  %353 = load i8, i8* %arrayidx679, align 1, !dbg !4894
  %conv680 = sext i8 %353 to i32, !dbg !4894
  %354 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4895
  %length_code_char681 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %354, i32 0, i32 12, !dbg !4896
  %355 = load i32, i32* %length_code_char681, align 4, !dbg !4896
  %cmp682 = icmp eq i32 %conv680, %355, !dbg !4897
  br i1 %cmp682, label %if.then684, label %if.end685, !dbg !4898

if.then684:                                       ; preds = %for.body
  br label %for.inc, !dbg !4899

if.end685:                                        ; preds = %for.body
  %356 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !4900
  %flag_chars686 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %356, i32 0, i32 4, !dbg !4902
  %357 = load i8*, i8** %flag_chars686, align 8, !dbg !4902
  %358 = load i32, i32* %i, align 4, !dbg !4903
  %idxprom687 = sext i32 %358 to i64, !dbg !4904
  %arrayidx688 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom687, !dbg !4904
  %359 = load i8, i8* %arrayidx688, align 1, !dbg !4904
  %conv689 = sext i8 %359 to i32, !dbg !4904
  %call690 = call i8* @strchr(i8* %357, i32 %conv689), !dbg !4905
  %cmp691 = icmp eq i8* %call690, null, !dbg !4906
  br i1 %cmp691, label %if.then693, label %if.end698, !dbg !4907

if.then693:                                       ; preds = %if.end685
  %360 = load %struct.format_flag_spec*, %struct.format_flag_spec** %s668, align 8, !dbg !4908
  %name694 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %360, i32 0, i32 3, !dbg !4908
  %361 = load i8*, i8** %name694, align 8, !dbg !4908
  %362 = load i32, i32* %format_char, align 4, !dbg !4910
  %363 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4911
  %name695 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %363, i32 0, i32 0, !dbg !4912
  %364 = load i8*, i8** %name695, align 8, !dbg !4912
  %call696 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.49, i64 0, i64 0), i8* %361, i32 %362, i8* %364), !dbg !4913
  %365 = load i32, i32* %d, align 4, !dbg !4914
  %inc697 = add nsw i32 %365, 1, !dbg !4914
  store i32 %inc697, i32* %d, align 4, !dbg !4914
  br label %for.inc, !dbg !4915

if.end698:                                        ; preds = %if.end685
  %366 = load i32, i32* @pedantic, align 4, !dbg !4916
  %tobool699 = icmp ne i32 %366, 0, !dbg !4916
  br i1 %tobool699, label %if.then700, label %if.end823, !dbg !4918

if.then700:                                       ; preds = %if.end698
  call void @llvm.dbg.declare(metadata %struct.format_flag_spec** %t, metadata !4919, metadata !DIExpression()), !dbg !4921
  %367 = load %struct.format_flag_spec*, %struct.format_flag_spec** %s668, align 8, !dbg !4922
  %std701 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %367, i32 0, i32 5, !dbg !4922
  %368 = load i32, i32* %std701, align 8, !dbg !4922
  %cmp702 = icmp eq i32 %368, 2, !dbg !4922
  br i1 %cmp702, label %cond.true704, label %cond.false707, !dbg !4922

cond.true704:                                     ; preds = %if.then700
  %369 = load i32, i32* @warn_long_long, align 4, !dbg !4922
  %tobool705 = icmp ne i32 %369, 0, !dbg !4922
  %370 = zext i1 %tobool705 to i64, !dbg !4922
  %cond706 = select i1 %tobool705, i32 3, i32 0, !dbg !4922
  br label %cond.end709, !dbg !4922

cond.false707:                                    ; preds = %if.then700
  %371 = load %struct.format_flag_spec*, %struct.format_flag_spec** %s668, align 8, !dbg !4922
  %std708 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %371, i32 0, i32 5, !dbg !4922
  %372 = load i32, i32* %std708, align 8, !dbg !4922
  br label %cond.end709, !dbg !4922

cond.end709:                                      ; preds = %cond.false707, %cond.true704
  %cond710 = phi i32 [ %cond706, %cond.true704 ], [ %372, %cond.false707 ], !dbg !4922
  %373 = load i32, i32* @c_language, align 4, !dbg !4924
  %and711 = and i32 %373, 2, !dbg !4924
  %cmp712 = icmp ne i32 %and711, 0, !dbg !4924
  br i1 %cmp712, label %cond.true714, label %cond.false715, !dbg !4924

cond.true714:                                     ; preds = %cond.end709
  br label %cond.end723, !dbg !4924

cond.false715:                                    ; preds = %cond.end709
  %374 = load i32, i32* @flag_isoc99, align 4, !dbg !4924
  %tobool716 = icmp ne i32 %374, 0, !dbg !4924
  br i1 %tobool716, label %cond.true717, label %cond.false718, !dbg !4924

cond.true717:                                     ; preds = %cond.false715
  br label %cond.end721, !dbg !4924

cond.false718:                                    ; preds = %cond.false715
  %375 = load i32, i32* @flag_isoc94, align 4, !dbg !4924
  %tobool719 = icmp ne i32 %375, 0, !dbg !4924
  %376 = zext i1 %tobool719 to i64, !dbg !4924
  %cond720 = select i1 %tobool719, i32 1, i32 0, !dbg !4924
  br label %cond.end721, !dbg !4924

cond.end721:                                      ; preds = %cond.false718, %cond.true717
  %cond722 = phi i32 [ 3, %cond.true717 ], [ %cond720, %cond.false718 ], !dbg !4924
  br label %cond.end723, !dbg !4924

cond.end723:                                      ; preds = %cond.end721, %cond.true714
  %cond724 = phi i32 [ 1, %cond.true714 ], [ %cond722, %cond.end721 ], !dbg !4924
  %cmp725 = icmp sgt i32 %cond710, %cond724, !dbg !4925
  br i1 %cmp725, label %if.then727, label %if.end740, !dbg !4926

if.then727:                                       ; preds = %cond.end723
  %377 = load i32, i32* @c_language, align 4, !dbg !4927
  %and728 = and i32 %377, 2, !dbg !4927
  %cmp729 = icmp ne i32 %and728, 0, !dbg !4927
  br i1 %cmp729, label %cond.true731, label %cond.false732, !dbg !4927

cond.true731:                                     ; preds = %if.then727
  br label %cond.end737, !dbg !4927

cond.false732:                                    ; preds = %if.then727
  %378 = load %struct.format_flag_spec*, %struct.format_flag_spec** %s668, align 8, !dbg !4927
  %std733 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %378, i32 0, i32 5, !dbg !4927
  %379 = load i32, i32* %std733, align 8, !dbg !4927
  %cmp734 = icmp eq i32 %379, 4, !dbg !4927
  %380 = zext i1 %cmp734 to i64, !dbg !4927
  %cond736 = select i1 %cmp734, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i64 0, i64 0), !dbg !4927
  br label %cond.end737, !dbg !4927

cond.end737:                                      ; preds = %cond.false732, %cond.true731
  %cond738 = phi i8* [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42, i64 0, i64 0), %cond.true731 ], [ %cond736, %cond.false732 ], !dbg !4927
  %381 = load %struct.format_flag_spec*, %struct.format_flag_spec** %s668, align 8, !dbg !4928
  %long_name = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %381, i32 0, i32 4, !dbg !4928
  %382 = load i8*, i8** %long_name, align 8, !dbg !4928
  %call739 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.50, i64 0, i64 0), i8* %cond738, i8* %382), !dbg !4929
  br label %if.end740, !dbg !4929

if.end740:                                        ; preds = %cond.end737, %cond.end723
  %383 = load %struct.format_flag_spec*, %struct.format_flag_spec** %flag_specs, align 8, !dbg !4930
  %384 = load i32, i32* %i, align 4, !dbg !4931
  %idxprom741 = sext i32 %384 to i64, !dbg !4932
  %arrayidx742 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom741, !dbg !4932
  %385 = load i8, i8* %arrayidx742, align 1, !dbg !4932
  %conv743 = sext i8 %385 to i32, !dbg !4932
  %386 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !4933
  %flags2 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %386, i32 0, i32 5, !dbg !4934
  %387 = load i8*, i8** %flags2, align 8, !dbg !4934
  %call744 = call %struct.format_flag_spec* @get_flag_spec(%struct.format_flag_spec* %383, i32 %conv743, i8* %387), !dbg !4935
  store %struct.format_flag_spec* %call744, %struct.format_flag_spec** %t, align 8, !dbg !4936
  %388 = load %struct.format_flag_spec*, %struct.format_flag_spec** %t, align 8, !dbg !4937
  %cmp745 = icmp ne %struct.format_flag_spec* %388, null, !dbg !4939
  br i1 %cmp745, label %land.lhs.true747, label %if.end822, !dbg !4940

land.lhs.true747:                                 ; preds = %if.end740
  %389 = load %struct.format_flag_spec*, %struct.format_flag_spec** %t, align 8, !dbg !4941
  %std748 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %389, i32 0, i32 5, !dbg !4941
  %390 = load i32, i32* %std748, align 8, !dbg !4941
  %cmp749 = icmp eq i32 %390, 2, !dbg !4941
  br i1 %cmp749, label %cond.true751, label %cond.false754, !dbg !4941

cond.true751:                                     ; preds = %land.lhs.true747
  %391 = load i32, i32* @warn_long_long, align 4, !dbg !4941
  %tobool752 = icmp ne i32 %391, 0, !dbg !4941
  %392 = zext i1 %tobool752 to i64, !dbg !4941
  %cond753 = select i1 %tobool752, i32 3, i32 0, !dbg !4941
  br label %cond.end756, !dbg !4941

cond.false754:                                    ; preds = %land.lhs.true747
  %393 = load %struct.format_flag_spec*, %struct.format_flag_spec** %t, align 8, !dbg !4941
  %std755 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %393, i32 0, i32 5, !dbg !4941
  %394 = load i32, i32* %std755, align 8, !dbg !4941
  br label %cond.end756, !dbg !4941

cond.end756:                                      ; preds = %cond.false754, %cond.true751
  %cond757 = phi i32 [ %cond753, %cond.true751 ], [ %394, %cond.false754 ], !dbg !4941
  %395 = load %struct.format_flag_spec*, %struct.format_flag_spec** %s668, align 8, !dbg !4942
  %std758 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %395, i32 0, i32 5, !dbg !4942
  %396 = load i32, i32* %std758, align 8, !dbg !4942
  %cmp759 = icmp eq i32 %396, 2, !dbg !4942
  br i1 %cmp759, label %cond.true761, label %cond.false764, !dbg !4942

cond.true761:                                     ; preds = %cond.end756
  %397 = load i32, i32* @warn_long_long, align 4, !dbg !4942
  %tobool762 = icmp ne i32 %397, 0, !dbg !4942
  %398 = zext i1 %tobool762 to i64, !dbg !4942
  %cond763 = select i1 %tobool762, i32 3, i32 0, !dbg !4942
  br label %cond.end766, !dbg !4942

cond.false764:                                    ; preds = %cond.end756
  %399 = load %struct.format_flag_spec*, %struct.format_flag_spec** %s668, align 8, !dbg !4942
  %std765 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %399, i32 0, i32 5, !dbg !4942
  %400 = load i32, i32* %std765, align 8, !dbg !4942
  br label %cond.end766, !dbg !4942

cond.end766:                                      ; preds = %cond.false764, %cond.true761
  %cond767 = phi i32 [ %cond763, %cond.true761 ], [ %400, %cond.false764 ], !dbg !4942
  %cmp768 = icmp sgt i32 %cond757, %cond767, !dbg !4943
  br i1 %cmp768, label %if.then770, label %if.end822, !dbg !4944

if.then770:                                       ; preds = %cond.end766
  call void @llvm.dbg.declare(metadata i8** %long_name771, metadata !4945, metadata !DIExpression()), !dbg !4947
  %401 = load %struct.format_flag_spec*, %struct.format_flag_spec** %t, align 8, !dbg !4948
  %long_name772 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %401, i32 0, i32 4, !dbg !4949
  %402 = load i8*, i8** %long_name772, align 8, !dbg !4949
  %cmp773 = icmp ne i8* %402, null, !dbg !4950
  br i1 %cmp773, label %cond.true775, label %cond.false777, !dbg !4948

cond.true775:                                     ; preds = %if.then770
  %403 = load %struct.format_flag_spec*, %struct.format_flag_spec** %t, align 8, !dbg !4951
  %long_name776 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %403, i32 0, i32 4, !dbg !4952
  %404 = load i8*, i8** %long_name776, align 8, !dbg !4952
  br label %cond.end779, !dbg !4948

cond.false777:                                    ; preds = %if.then770
  %405 = load %struct.format_flag_spec*, %struct.format_flag_spec** %s668, align 8, !dbg !4953
  %long_name778 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %405, i32 0, i32 4, !dbg !4954
  %406 = load i8*, i8** %long_name778, align 8, !dbg !4954
  br label %cond.end779, !dbg !4948

cond.end779:                                      ; preds = %cond.false777, %cond.true775
  %cond780 = phi i8* [ %404, %cond.true775 ], [ %406, %cond.false777 ], !dbg !4948
  store i8* %cond780, i8** %long_name771, align 8, !dbg !4947
  %407 = load %struct.format_flag_spec*, %struct.format_flag_spec** %t, align 8, !dbg !4955
  %std781 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %407, i32 0, i32 5, !dbg !4955
  %408 = load i32, i32* %std781, align 8, !dbg !4955
  %cmp782 = icmp eq i32 %408, 2, !dbg !4955
  br i1 %cmp782, label %cond.true784, label %cond.false787, !dbg !4955

cond.true784:                                     ; preds = %cond.end779
  %409 = load i32, i32* @warn_long_long, align 4, !dbg !4955
  %tobool785 = icmp ne i32 %409, 0, !dbg !4955
  %410 = zext i1 %tobool785 to i64, !dbg !4955
  %cond786 = select i1 %tobool785, i32 3, i32 0, !dbg !4955
  br label %cond.end789, !dbg !4955

cond.false787:                                    ; preds = %cond.end779
  %411 = load %struct.format_flag_spec*, %struct.format_flag_spec** %t, align 8, !dbg !4955
  %std788 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %411, i32 0, i32 5, !dbg !4955
  %412 = load i32, i32* %std788, align 8, !dbg !4955
  br label %cond.end789, !dbg !4955

cond.end789:                                      ; preds = %cond.false787, %cond.true784
  %cond790 = phi i32 [ %cond786, %cond.true784 ], [ %412, %cond.false787 ], !dbg !4955
  %413 = load i32, i32* @c_language, align 4, !dbg !4957
  %and791 = and i32 %413, 2, !dbg !4957
  %cmp792 = icmp ne i32 %and791, 0, !dbg !4957
  br i1 %cmp792, label %cond.true794, label %cond.false795, !dbg !4957

cond.true794:                                     ; preds = %cond.end789
  br label %cond.end803, !dbg !4957

cond.false795:                                    ; preds = %cond.end789
  %414 = load i32, i32* @flag_isoc99, align 4, !dbg !4957
  %tobool796 = icmp ne i32 %414, 0, !dbg !4957
  br i1 %tobool796, label %cond.true797, label %cond.false798, !dbg !4957

cond.true797:                                     ; preds = %cond.false795
  br label %cond.end801, !dbg !4957

cond.false798:                                    ; preds = %cond.false795
  %415 = load i32, i32* @flag_isoc94, align 4, !dbg !4957
  %tobool799 = icmp ne i32 %415, 0, !dbg !4957
  %416 = zext i1 %tobool799 to i64, !dbg !4957
  %cond800 = select i1 %tobool799, i32 1, i32 0, !dbg !4957
  br label %cond.end801, !dbg !4957

cond.end801:                                      ; preds = %cond.false798, %cond.true797
  %cond802 = phi i32 [ 3, %cond.true797 ], [ %cond800, %cond.false798 ], !dbg !4957
  br label %cond.end803, !dbg !4957

cond.end803:                                      ; preds = %cond.end801, %cond.true794
  %cond804 = phi i32 [ 1, %cond.true794 ], [ %cond802, %cond.end801 ], !dbg !4957
  %cmp805 = icmp sgt i32 %cond790, %cond804, !dbg !4958
  br i1 %cmp805, label %if.then807, label %if.end821, !dbg !4959

if.then807:                                       ; preds = %cond.end803
  %417 = load i32, i32* @c_language, align 4, !dbg !4960
  %and808 = and i32 %417, 2, !dbg !4960
  %cmp809 = icmp ne i32 %and808, 0, !dbg !4960
  br i1 %cmp809, label %cond.true811, label %cond.false812, !dbg !4960

cond.true811:                                     ; preds = %if.then807
  br label %cond.end817, !dbg !4960

cond.false812:                                    ; preds = %if.then807
  %418 = load %struct.format_flag_spec*, %struct.format_flag_spec** %t, align 8, !dbg !4960
  %std813 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %418, i32 0, i32 5, !dbg !4960
  %419 = load i32, i32* %std813, align 8, !dbg !4960
  %cmp814 = icmp eq i32 %419, 4, !dbg !4960
  %420 = zext i1 %cmp814 to i64, !dbg !4960
  %cond816 = select i1 %cmp814, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i64 0, i64 0), !dbg !4960
  br label %cond.end817, !dbg !4960

cond.end817:                                      ; preds = %cond.false812, %cond.true811
  %cond818 = phi i8* [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42, i64 0, i64 0), %cond.true811 ], [ %cond816, %cond.false812 ], !dbg !4960
  %421 = load i8*, i8** %long_name771, align 8, !dbg !4961
  %422 = load i32, i32* %format_char, align 4, !dbg !4962
  %423 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4963
  %name819 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %423, i32 0, i32 0, !dbg !4964
  %424 = load i8*, i8** %name819, align 8, !dbg !4964
  %call820 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.51, i64 0, i64 0), i8* %cond818, i8* %421, i32 %422, i8* %424), !dbg !4965
  br label %if.end821, !dbg !4965

if.end821:                                        ; preds = %cond.end817, %cond.end803
  br label %if.end822, !dbg !4966

if.end822:                                        ; preds = %if.end821, %cond.end766, %if.end740
  br label %if.end823, !dbg !4967

if.end823:                                        ; preds = %if.end822, %if.end698
  br label %for.inc, !dbg !4968

for.inc:                                          ; preds = %if.end823, %if.then693, %if.then684
  %425 = load i32, i32* %i, align 4, !dbg !4969
  %inc824 = add nsw i32 %425, 1, !dbg !4969
  store i32 %inc824, i32* %i, align 4, !dbg !4969
  br label %for.cond, !dbg !4970, !llvm.loop !4971

for.end:                                          ; preds = %for.cond
  %426 = load i32, i32* %i, align 4, !dbg !4973
  %427 = load i32, i32* %d, align 4, !dbg !4974
  %sub825 = sub nsw i32 %426, %427, !dbg !4975
  %idxprom826 = sext i32 %sub825 to i64, !dbg !4976
  %arrayidx827 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 %idxprom826, !dbg !4976
  store i8 0, i8* %arrayidx827, align 1, !dbg !4977
  %428 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4978
  %flags828 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %428, i32 0, i32 7, !dbg !4980
  %429 = load i32, i32* %flags828, align 8, !dbg !4980
  %and829 = and i32 %429, 2, !dbg !4981
  %tobool830 = icmp ne i32 %and829, 0, !dbg !4981
  br i1 %tobool830, label %land.lhs.true831, label %if.end837, !dbg !4982

land.lhs.true831:                                 ; preds = %for.end
  %arraydecay832 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 0, !dbg !4983
  %call833 = call i8* @strchr(i8* %arraydecay832, i32 97), !dbg !4984
  %cmp834 = icmp ne i8* %call833, null, !dbg !4985
  br i1 %cmp834, label %if.then836, label %if.end837, !dbg !4986

if.then836:                                       ; preds = %land.lhs.true831
  store i32 1, i32* %alloc_flag, align 4, !dbg !4987
  br label %if.end837, !dbg !4988

if.end837:                                        ; preds = %if.then836, %land.lhs.true831, %for.end
  %430 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4989
  %alloc_char838 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %430, i32 0, i32 13, !dbg !4991
  %431 = load i32, i32* %alloc_char838, align 8, !dbg !4991
  %tobool839 = icmp ne i32 %431, 0, !dbg !4989
  br i1 %tobool839, label %land.lhs.true840, label %if.end847, !dbg !4992

land.lhs.true840:                                 ; preds = %if.end837
  %arraydecay841 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 0, !dbg !4993
  %432 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !4994
  %alloc_char842 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %432, i32 0, i32 13, !dbg !4995
  %433 = load i32, i32* %alloc_char842, align 8, !dbg !4995
  %call843 = call i8* @strchr(i8* %arraydecay841, i32 %433), !dbg !4996
  %cmp844 = icmp ne i8* %call843, null, !dbg !4997
  br i1 %cmp844, label %if.then846, label %if.end847, !dbg !4998

if.then846:                                       ; preds = %land.lhs.true840
  store i32 1, i32* %alloc_flag, align 4, !dbg !4999
  br label %if.end847, !dbg !5000

if.end847:                                        ; preds = %if.then846, %land.lhs.true840, %if.end837
  %434 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !5001
  %suppression_char = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %434, i32 0, i32 11, !dbg !5003
  %435 = load i32, i32* %suppression_char, align 8, !dbg !5003
  %tobool848 = icmp ne i32 %435, 0, !dbg !5001
  br i1 %tobool848, label %land.lhs.true849, label %if.end856, !dbg !5004

land.lhs.true849:                                 ; preds = %if.end847
  %arraydecay850 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 0, !dbg !5005
  %436 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !5006
  %suppression_char851 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %436, i32 0, i32 11, !dbg !5007
  %437 = load i32, i32* %suppression_char851, align 8, !dbg !5007
  %call852 = call i8* @strchr(i8* %arraydecay850, i32 %437), !dbg !5008
  %cmp853 = icmp ne i8* %call852, null, !dbg !5009
  br i1 %cmp853, label %if.then855, label %if.end856, !dbg !5010

if.then855:                                       ; preds = %land.lhs.true849
  store i32 1, i32* %suppressed, align 4, !dbg !5011
  br label %if.end856, !dbg !5012

if.end856:                                        ; preds = %if.then855, %land.lhs.true849, %if.end847
  store i32 0, i32* %i, align 4, !dbg !5013
  br label %for.cond857, !dbg !5015

for.cond857:                                      ; preds = %for.inc942, %if.end856
  %438 = load %struct.format_flag_pair*, %struct.format_flag_pair** %bad_flag_pairs, align 8, !dbg !5016
  %439 = load i32, i32* %i, align 4, !dbg !5018
  %idxprom858 = sext i32 %439 to i64, !dbg !5016
  %arrayidx859 = getelementptr inbounds %struct.format_flag_pair, %struct.format_flag_pair* %438, i64 %idxprom858, !dbg !5016
  %flag_char1 = getelementptr inbounds %struct.format_flag_pair, %struct.format_flag_pair* %arrayidx859, i32 0, i32 0, !dbg !5019
  %440 = load i32, i32* %flag_char1, align 4, !dbg !5019
  %cmp860 = icmp ne i32 %440, 0, !dbg !5020
  br i1 %cmp860, label %for.body862, label %for.end944, !dbg !5021

for.body862:                                      ; preds = %for.cond857
  call void @llvm.dbg.declare(metadata %struct.format_flag_spec** %s863, metadata !5022, metadata !DIExpression()), !dbg !5024
  call void @llvm.dbg.declare(metadata %struct.format_flag_spec** %t864, metadata !5025, metadata !DIExpression()), !dbg !5026
  %arraydecay865 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 0, !dbg !5027
  %441 = load %struct.format_flag_pair*, %struct.format_flag_pair** %bad_flag_pairs, align 8, !dbg !5029
  %442 = load i32, i32* %i, align 4, !dbg !5030
  %idxprom866 = sext i32 %442 to i64, !dbg !5029
  %arrayidx867 = getelementptr inbounds %struct.format_flag_pair, %struct.format_flag_pair* %441, i64 %idxprom866, !dbg !5029
  %flag_char1868 = getelementptr inbounds %struct.format_flag_pair, %struct.format_flag_pair* %arrayidx867, i32 0, i32 0, !dbg !5031
  %443 = load i32, i32* %flag_char1868, align 4, !dbg !5031
  %call869 = call i8* @strchr(i8* %arraydecay865, i32 %443), !dbg !5032
  %cmp870 = icmp eq i8* %call869, null, !dbg !5033
  br i1 %cmp870, label %if.then872, label %if.end873, !dbg !5034

if.then872:                                       ; preds = %for.body862
  br label %for.inc942, !dbg !5035

if.end873:                                        ; preds = %for.body862
  %arraydecay874 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 0, !dbg !5036
  %444 = load %struct.format_flag_pair*, %struct.format_flag_pair** %bad_flag_pairs, align 8, !dbg !5038
  %445 = load i32, i32* %i, align 4, !dbg !5039
  %idxprom875 = sext i32 %445 to i64, !dbg !5038
  %arrayidx876 = getelementptr inbounds %struct.format_flag_pair, %struct.format_flag_pair* %444, i64 %idxprom875, !dbg !5038
  %flag_char2 = getelementptr inbounds %struct.format_flag_pair, %struct.format_flag_pair* %arrayidx876, i32 0, i32 1, !dbg !5040
  %446 = load i32, i32* %flag_char2, align 4, !dbg !5040
  %call877 = call i8* @strchr(i8* %arraydecay874, i32 %446), !dbg !5041
  %cmp878 = icmp eq i8* %call877, null, !dbg !5042
  br i1 %cmp878, label %if.then880, label %if.end881, !dbg !5043

if.then880:                                       ; preds = %if.end873
  br label %for.inc942, !dbg !5044

if.end881:                                        ; preds = %if.end873
  %447 = load %struct.format_flag_pair*, %struct.format_flag_pair** %bad_flag_pairs, align 8, !dbg !5045
  %448 = load i32, i32* %i, align 4, !dbg !5047
  %idxprom882 = sext i32 %448 to i64, !dbg !5045
  %arrayidx883 = getelementptr inbounds %struct.format_flag_pair, %struct.format_flag_pair* %447, i64 %idxprom882, !dbg !5045
  %predicate = getelementptr inbounds %struct.format_flag_pair, %struct.format_flag_pair* %arrayidx883, i32 0, i32 3, !dbg !5048
  %449 = load i32, i32* %predicate, align 4, !dbg !5048
  %cmp884 = icmp ne i32 %449, 0, !dbg !5049
  br i1 %cmp884, label %land.lhs.true886, label %if.end895, !dbg !5050

land.lhs.true886:                                 ; preds = %if.end881
  %450 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5051
  %flags2887 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %450, i32 0, i32 5, !dbg !5052
  %451 = load i8*, i8** %flags2887, align 8, !dbg !5052
  %452 = load %struct.format_flag_pair*, %struct.format_flag_pair** %bad_flag_pairs, align 8, !dbg !5053
  %453 = load i32, i32* %i, align 4, !dbg !5054
  %idxprom888 = sext i32 %453 to i64, !dbg !5053
  %arrayidx889 = getelementptr inbounds %struct.format_flag_pair, %struct.format_flag_pair* %452, i64 %idxprom888, !dbg !5053
  %predicate890 = getelementptr inbounds %struct.format_flag_pair, %struct.format_flag_pair* %arrayidx889, i32 0, i32 3, !dbg !5055
  %454 = load i32, i32* %predicate890, align 4, !dbg !5055
  %call891 = call i8* @strchr(i8* %451, i32 %454), !dbg !5056
  %cmp892 = icmp eq i8* %call891, null, !dbg !5057
  br i1 %cmp892, label %if.then894, label %if.end895, !dbg !5058

if.then894:                                       ; preds = %land.lhs.true886
  br label %for.inc942, !dbg !5059

if.end895:                                        ; preds = %land.lhs.true886, %if.end881
  %455 = load %struct.format_flag_spec*, %struct.format_flag_spec** %flag_specs, align 8, !dbg !5060
  %456 = load %struct.format_flag_pair*, %struct.format_flag_pair** %bad_flag_pairs, align 8, !dbg !5061
  %457 = load i32, i32* %i, align 4, !dbg !5062
  %idxprom896 = sext i32 %457 to i64, !dbg !5061
  %arrayidx897 = getelementptr inbounds %struct.format_flag_pair, %struct.format_flag_pair* %456, i64 %idxprom896, !dbg !5061
  %flag_char1898 = getelementptr inbounds %struct.format_flag_pair, %struct.format_flag_pair* %arrayidx897, i32 0, i32 0, !dbg !5063
  %458 = load i32, i32* %flag_char1898, align 4, !dbg !5063
  %call899 = call %struct.format_flag_spec* @get_flag_spec(%struct.format_flag_spec* %455, i32 %458, i8* null), !dbg !5064
  store %struct.format_flag_spec* %call899, %struct.format_flag_spec** %s863, align 8, !dbg !5065
  %459 = load %struct.format_flag_spec*, %struct.format_flag_spec** %flag_specs, align 8, !dbg !5066
  %460 = load %struct.format_flag_pair*, %struct.format_flag_pair** %bad_flag_pairs, align 8, !dbg !5067
  %461 = load i32, i32* %i, align 4, !dbg !5068
  %idxprom900 = sext i32 %461 to i64, !dbg !5067
  %arrayidx901 = getelementptr inbounds %struct.format_flag_pair, %struct.format_flag_pair* %460, i64 %idxprom900, !dbg !5067
  %flag_char2902 = getelementptr inbounds %struct.format_flag_pair, %struct.format_flag_pair* %arrayidx901, i32 0, i32 1, !dbg !5069
  %462 = load i32, i32* %flag_char2902, align 4, !dbg !5069
  %call903 = call %struct.format_flag_spec* @get_flag_spec(%struct.format_flag_spec* %459, i32 %462, i8* null), !dbg !5070
  store %struct.format_flag_spec* %call903, %struct.format_flag_spec** %t864, align 8, !dbg !5071
  %463 = load %struct.format_flag_pair*, %struct.format_flag_pair** %bad_flag_pairs, align 8, !dbg !5072
  %464 = load i32, i32* %i, align 4, !dbg !5074
  %idxprom904 = sext i32 %464 to i64, !dbg !5072
  %arrayidx905 = getelementptr inbounds %struct.format_flag_pair, %struct.format_flag_pair* %463, i64 %idxprom904, !dbg !5072
  %ignored = getelementptr inbounds %struct.format_flag_pair, %struct.format_flag_pair* %arrayidx905, i32 0, i32 2, !dbg !5075
  %465 = load i32, i32* %ignored, align 4, !dbg !5075
  %tobool906 = icmp ne i32 %465, 0, !dbg !5072
  br i1 %tobool906, label %if.then907, label %if.else924, !dbg !5076

if.then907:                                       ; preds = %if.end895
  %466 = load %struct.format_flag_pair*, %struct.format_flag_pair** %bad_flag_pairs, align 8, !dbg !5077
  %467 = load i32, i32* %i, align 4, !dbg !5080
  %idxprom908 = sext i32 %467 to i64, !dbg !5077
  %arrayidx909 = getelementptr inbounds %struct.format_flag_pair, %struct.format_flag_pair* %466, i64 %idxprom908, !dbg !5077
  %predicate910 = getelementptr inbounds %struct.format_flag_pair, %struct.format_flag_pair* %arrayidx909, i32 0, i32 3, !dbg !5081
  %468 = load i32, i32* %predicate910, align 4, !dbg !5081
  %cmp911 = icmp ne i32 %468, 0, !dbg !5082
  br i1 %cmp911, label %if.then913, label %if.else918, !dbg !5083

if.then913:                                       ; preds = %if.then907
  %469 = load %struct.format_flag_spec*, %struct.format_flag_spec** %s863, align 8, !dbg !5084
  %name914 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %469, i32 0, i32 3, !dbg !5084
  %470 = load i8*, i8** %name914, align 8, !dbg !5084
  %471 = load %struct.format_flag_spec*, %struct.format_flag_spec** %t864, align 8, !dbg !5085
  %name915 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %471, i32 0, i32 3, !dbg !5085
  %472 = load i8*, i8** %name915, align 8, !dbg !5085
  %473 = load i32, i32* %format_char, align 4, !dbg !5086
  %474 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !5087
  %name916 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %474, i32 0, i32 0, !dbg !5088
  %475 = load i8*, i8** %name916, align 8, !dbg !5088
  %call917 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.52, i64 0, i64 0), i8* %470, i8* %472, i32 %473, i8* %475), !dbg !5089
  br label %if.end923, !dbg !5089

if.else918:                                       ; preds = %if.then907
  %476 = load %struct.format_flag_spec*, %struct.format_flag_spec** %s863, align 8, !dbg !5090
  %name919 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %476, i32 0, i32 3, !dbg !5090
  %477 = load i8*, i8** %name919, align 8, !dbg !5090
  %478 = load %struct.format_flag_spec*, %struct.format_flag_spec** %t864, align 8, !dbg !5091
  %name920 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %478, i32 0, i32 3, !dbg !5091
  %479 = load i8*, i8** %name920, align 8, !dbg !5091
  %480 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !5092
  %name921 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %480, i32 0, i32 0, !dbg !5093
  %481 = load i8*, i8** %name921, align 8, !dbg !5093
  %call922 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.53, i64 0, i64 0), i8* %477, i8* %479, i8* %481), !dbg !5094
  br label %if.end923

if.end923:                                        ; preds = %if.else918, %if.then913
  br label %if.end941, !dbg !5095

if.else924:                                       ; preds = %if.end895
  %482 = load %struct.format_flag_pair*, %struct.format_flag_pair** %bad_flag_pairs, align 8, !dbg !5096
  %483 = load i32, i32* %i, align 4, !dbg !5099
  %idxprom925 = sext i32 %483 to i64, !dbg !5096
  %arrayidx926 = getelementptr inbounds %struct.format_flag_pair, %struct.format_flag_pair* %482, i64 %idxprom925, !dbg !5096
  %predicate927 = getelementptr inbounds %struct.format_flag_pair, %struct.format_flag_pair* %arrayidx926, i32 0, i32 3, !dbg !5100
  %484 = load i32, i32* %predicate927, align 4, !dbg !5100
  %cmp928 = icmp ne i32 %484, 0, !dbg !5101
  br i1 %cmp928, label %if.then930, label %if.else935, !dbg !5102

if.then930:                                       ; preds = %if.else924
  %485 = load %struct.format_flag_spec*, %struct.format_flag_spec** %s863, align 8, !dbg !5103
  %name931 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %485, i32 0, i32 3, !dbg !5103
  %486 = load i8*, i8** %name931, align 8, !dbg !5103
  %487 = load %struct.format_flag_spec*, %struct.format_flag_spec** %t864, align 8, !dbg !5104
  %name932 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %487, i32 0, i32 3, !dbg !5104
  %488 = load i8*, i8** %name932, align 8, !dbg !5104
  %489 = load i32, i32* %format_char, align 4, !dbg !5105
  %490 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !5106
  %name933 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %490, i32 0, i32 0, !dbg !5107
  %491 = load i8*, i8** %name933, align 8, !dbg !5107
  %call934 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.54, i64 0, i64 0), i8* %486, i8* %488, i32 %489, i8* %491), !dbg !5108
  br label %if.end940, !dbg !5108

if.else935:                                       ; preds = %if.else924
  %492 = load %struct.format_flag_spec*, %struct.format_flag_spec** %s863, align 8, !dbg !5109
  %name936 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %492, i32 0, i32 3, !dbg !5109
  %493 = load i8*, i8** %name936, align 8, !dbg !5109
  %494 = load %struct.format_flag_spec*, %struct.format_flag_spec** %t864, align 8, !dbg !5110
  %name937 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %494, i32 0, i32 3, !dbg !5110
  %495 = load i8*, i8** %name937, align 8, !dbg !5110
  %496 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !5111
  %name938 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %496, i32 0, i32 0, !dbg !5112
  %497 = load i8*, i8** %name938, align 8, !dbg !5112
  %call939 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.55, i64 0, i64 0), i8* %493, i8* %495, i8* %497), !dbg !5113
  br label %if.end940

if.end940:                                        ; preds = %if.else935, %if.then930
  br label %if.end941

if.end941:                                        ; preds = %if.end940, %if.end923
  br label %for.inc942, !dbg !5114

for.inc942:                                       ; preds = %if.end941, %if.then894, %if.then880, %if.then872
  %498 = load i32, i32* %i, align 4, !dbg !5115
  %inc943 = add nsw i32 %498, 1, !dbg !5115
  store i32 %inc943, i32* %i, align 4, !dbg !5115
  br label %for.cond857, !dbg !5116, !llvm.loop !5117

for.end944:                                       ; preds = %for.cond857
  %499 = load i32, i32* @warn_format_y2k, align 4, !dbg !5119
  %tobool945 = icmp ne i32 %499, 0, !dbg !5119
  br i1 %tobool945, label %if.then946, label %if.end985, !dbg !5121

if.then946:                                       ; preds = %for.end944
  call void @llvm.dbg.declare(metadata i32* %y2k_level, metadata !5122, metadata !DIExpression()), !dbg !5124
  store i32 0, i32* %y2k_level, align 4, !dbg !5124
  %500 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5125
  %flags2947 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %500, i32 0, i32 5, !dbg !5127
  %501 = load i8*, i8** %flags2947, align 8, !dbg !5127
  %call948 = call i8* @strchr(i8* %501, i32 52), !dbg !5128
  %cmp949 = icmp ne i8* %call948, null, !dbg !5129
  br i1 %cmp949, label %if.then951, label %if.else959, !dbg !5130

if.then951:                                       ; preds = %if.then946
  %arraydecay952 = getelementptr inbounds [256 x i8], [256 x i8]* %flag_chars, i64 0, i64 0, !dbg !5131
  %call953 = call i8* @strchr(i8* %arraydecay952, i32 69), !dbg !5133
  %cmp954 = icmp ne i8* %call953, null, !dbg !5134
  br i1 %cmp954, label %if.then956, label %if.else957, !dbg !5135

if.then956:                                       ; preds = %if.then951
  store i32 3, i32* %y2k_level, align 4, !dbg !5136
  br label %if.end958, !dbg !5137

if.else957:                                       ; preds = %if.then951
  store i32 2, i32* %y2k_level, align 4, !dbg !5138
  br label %if.end958

if.end958:                                        ; preds = %if.else957, %if.then956
  br label %if.end973, !dbg !5139

if.else959:                                       ; preds = %if.then946
  %502 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5140
  %flags2960 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %502, i32 0, i32 5, !dbg !5142
  %503 = load i8*, i8** %flags2960, align 8, !dbg !5142
  %call961 = call i8* @strchr(i8* %503, i32 51), !dbg !5143
  %cmp962 = icmp ne i8* %call961, null, !dbg !5144
  br i1 %cmp962, label %if.then964, label %if.else965, !dbg !5145

if.then964:                                       ; preds = %if.else959
  store i32 3, i32* %y2k_level, align 4, !dbg !5146
  br label %if.end972, !dbg !5147

if.else965:                                       ; preds = %if.else959
  %504 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5148
  %flags2966 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %504, i32 0, i32 5, !dbg !5150
  %505 = load i8*, i8** %flags2966, align 8, !dbg !5150
  %call967 = call i8* @strchr(i8* %505, i32 50), !dbg !5151
  %cmp968 = icmp ne i8* %call967, null, !dbg !5152
  br i1 %cmp968, label %if.then970, label %if.end971, !dbg !5153

if.then970:                                       ; preds = %if.else965
  store i32 2, i32* %y2k_level, align 4, !dbg !5154
  br label %if.end971, !dbg !5155

if.end971:                                        ; preds = %if.then970, %if.else965
  br label %if.end972

if.end972:                                        ; preds = %if.end971, %if.then964
  br label %if.end973

if.end973:                                        ; preds = %if.end972, %if.end958
  %506 = load i32, i32* %y2k_level, align 4, !dbg !5156
  %cmp974 = icmp eq i32 %506, 3, !dbg !5158
  br i1 %cmp974, label %if.then976, label %if.else978, !dbg !5159

if.then976:                                       ; preds = %if.end973
  %507 = load i32, i32* %format_char, align 4, !dbg !5160
  %call977 = call zeroext i8 (i32, i8*, ...) @warning(i32 96, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.56, i64 0, i64 0), i32 %507), !dbg !5161
  br label %if.end984, !dbg !5161

if.else978:                                       ; preds = %if.end973
  %508 = load i32, i32* %y2k_level, align 4, !dbg !5162
  %cmp979 = icmp eq i32 %508, 2, !dbg !5164
  br i1 %cmp979, label %if.then981, label %if.end983, !dbg !5165

if.then981:                                       ; preds = %if.else978
  %509 = load i32, i32* %format_char, align 4, !dbg !5166
  %call982 = call zeroext i8 (i32, i8*, ...) @warning(i32 96, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.57, i64 0, i64 0), i32 %509), !dbg !5167
  br label %if.end983, !dbg !5167

if.end983:                                        ; preds = %if.then981, %if.else978
  br label %if.end984

if.end984:                                        ; preds = %if.end983, %if.then976
  br label %if.end985, !dbg !5168

if.end985:                                        ; preds = %if.end984, %for.end944
  %510 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5169
  %flags2986 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %510, i32 0, i32 5, !dbg !5171
  %511 = load i8*, i8** %flags2986, align 8, !dbg !5171
  %call987 = call i8* @strchr(i8* %511, i32 91), !dbg !5172
  %cmp988 = icmp ne i8* %call987, null, !dbg !5173
  br i1 %cmp988, label %if.then990, label %if.end1020, !dbg !5174

if.then990:                                       ; preds = %if.end985
  %512 = load i8*, i8** %format_chars.addr, align 8, !dbg !5175
  %513 = load i8, i8* %512, align 1, !dbg !5178
  %conv991 = sext i8 %513 to i32, !dbg !5178
  %cmp992 = icmp eq i32 %conv991, 94, !dbg !5179
  br i1 %cmp992, label %if.then994, label %if.end996, !dbg !5180

if.then994:                                       ; preds = %if.then990
  %514 = load i8*, i8** %format_chars.addr, align 8, !dbg !5181
  %incdec.ptr995 = getelementptr inbounds i8, i8* %514, i32 1, !dbg !5181
  store i8* %incdec.ptr995, i8** %format_chars.addr, align 8, !dbg !5181
  br label %if.end996, !dbg !5181

if.end996:                                        ; preds = %if.then994, %if.then990
  %515 = load i8*, i8** %format_chars.addr, align 8, !dbg !5182
  %516 = load i8, i8* %515, align 1, !dbg !5184
  %conv997 = sext i8 %516 to i32, !dbg !5184
  %cmp998 = icmp eq i32 %conv997, 93, !dbg !5185
  br i1 %cmp998, label %if.then1000, label %if.end1002, !dbg !5186

if.then1000:                                      ; preds = %if.end996
  %517 = load i8*, i8** %format_chars.addr, align 8, !dbg !5187
  %incdec.ptr1001 = getelementptr inbounds i8, i8* %517, i32 1, !dbg !5187
  store i8* %incdec.ptr1001, i8** %format_chars.addr, align 8, !dbg !5187
  br label %if.end1002, !dbg !5187

if.end1002:                                       ; preds = %if.then1000, %if.end996
  br label %while.cond1003, !dbg !5188

while.cond1003:                                   ; preds = %while.body1011, %if.end1002
  %518 = load i8*, i8** %format_chars.addr, align 8, !dbg !5189
  %519 = load i8, i8* %518, align 1, !dbg !5190
  %conv1004 = sext i8 %519 to i32, !dbg !5190
  %tobool1005 = icmp ne i32 %conv1004, 0, !dbg !5190
  br i1 %tobool1005, label %land.rhs1006, label %land.end1010, !dbg !5191

land.rhs1006:                                     ; preds = %while.cond1003
  %520 = load i8*, i8** %format_chars.addr, align 8, !dbg !5192
  %521 = load i8, i8* %520, align 1, !dbg !5193
  %conv1007 = sext i8 %521 to i32, !dbg !5193
  %cmp1008 = icmp ne i32 %conv1007, 93, !dbg !5194
  br label %land.end1010

land.end1010:                                     ; preds = %land.rhs1006, %while.cond1003
  %522 = phi i1 [ false, %while.cond1003 ], [ %cmp1008, %land.rhs1006 ], !dbg !5195
  br i1 %522, label %while.body1011, label %while.end1013, !dbg !5188

while.body1011:                                   ; preds = %land.end1010
  %523 = load i8*, i8** %format_chars.addr, align 8, !dbg !5196
  %incdec.ptr1012 = getelementptr inbounds i8, i8* %523, i32 1, !dbg !5196
  store i8* %incdec.ptr1012, i8** %format_chars.addr, align 8, !dbg !5196
  br label %while.cond1003, !dbg !5188, !llvm.loop !5197

while.end1013:                                    ; preds = %land.end1010
  %524 = load i8*, i8** %format_chars.addr, align 8, !dbg !5199
  %525 = load i8, i8* %524, align 1, !dbg !5201
  %conv1014 = sext i8 %525 to i32, !dbg !5201
  %cmp1015 = icmp ne i32 %conv1014, 93, !dbg !5202
  br i1 %cmp1015, label %if.then1017, label %if.end1019, !dbg !5203

if.then1017:                                      ; preds = %while.end1013
  %call1018 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.58, i64 0, i64 0)), !dbg !5204
  br label %if.end1019, !dbg !5204

if.end1019:                                       ; preds = %if.then1017, %while.end1013
  br label %if.end1020, !dbg !5205

if.end1020:                                       ; preds = %if.end1019, %if.end985
  store %union.tree_node* null, %union.tree_node** %wanted_type, align 8, !dbg !5206
  store i8* null, i8** %wanted_type_name, align 8, !dbg !5207
  %526 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !5208
  %flags1021 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %526, i32 0, i32 7, !dbg !5210
  %527 = load i32, i32* %flags1021, align 8, !dbg !5210
  %and1022 = and i32 %527, 1, !dbg !5211
  %tobool1023 = icmp ne i32 %and1022, 0, !dbg !5211
  br i1 %tobool1023, label %if.then1024, label %if.end1139, !dbg !5212

if.then1024:                                      ; preds = %if.end1020
  %528 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5213
  %types = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %528, i32 0, i32 3, !dbg !5215
  %529 = load i32, i32* %length_chars_val, align 4, !dbg !5216
  %idxprom1025 = zext i32 %529 to i64, !dbg !5213
  %arrayidx1026 = getelementptr inbounds [12 x %struct.format_type_detail], [12 x %struct.format_type_detail]* %types, i64 0, i64 %idxprom1025, !dbg !5213
  %type = getelementptr inbounds %struct.format_type_detail, %struct.format_type_detail* %arrayidx1026, i32 0, i32 2, !dbg !5217
  %530 = load %union.tree_node**, %union.tree_node*** %type, align 8, !dbg !5217
  %tobool1027 = icmp ne %union.tree_node** %530, null, !dbg !5213
  br i1 %tobool1027, label %cond.true1028, label %cond.false1033, !dbg !5213

cond.true1028:                                    ; preds = %if.then1024
  %531 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5218
  %types1029 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %531, i32 0, i32 3, !dbg !5219
  %532 = load i32, i32* %length_chars_val, align 4, !dbg !5220
  %idxprom1030 = zext i32 %532 to i64, !dbg !5218
  %arrayidx1031 = getelementptr inbounds [12 x %struct.format_type_detail], [12 x %struct.format_type_detail]* %types1029, i64 0, i64 %idxprom1030, !dbg !5218
  %type1032 = getelementptr inbounds %struct.format_type_detail, %struct.format_type_detail* %arrayidx1031, i32 0, i32 2, !dbg !5221
  %533 = load %union.tree_node**, %union.tree_node*** %type1032, align 8, !dbg !5221
  %534 = load %union.tree_node*, %union.tree_node** %533, align 8, !dbg !5222
  br label %cond.end1034, !dbg !5213

cond.false1033:                                   ; preds = %if.then1024
  br label %cond.end1034, !dbg !5213

cond.end1034:                                     ; preds = %cond.false1033, %cond.true1028
  %cond1035 = phi %union.tree_node* [ %534, %cond.true1028 ], [ null, %cond.false1033 ], !dbg !5213
  store %union.tree_node* %cond1035, %union.tree_node** %wanted_type, align 8, !dbg !5223
  %535 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5224
  %types1036 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %535, i32 0, i32 3, !dbg !5225
  %536 = load i32, i32* %length_chars_val, align 4, !dbg !5226
  %idxprom1037 = zext i32 %536 to i64, !dbg !5224
  %arrayidx1038 = getelementptr inbounds [12 x %struct.format_type_detail], [12 x %struct.format_type_detail]* %types1036, i64 0, i64 %idxprom1037, !dbg !5224
  %name1039 = getelementptr inbounds %struct.format_type_detail, %struct.format_type_detail* %arrayidx1038, i32 0, i32 1, !dbg !5227
  %537 = load i8*, i8** %name1039, align 8, !dbg !5227
  store i8* %537, i8** %wanted_type_name, align 8, !dbg !5228
  %538 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5229
  %types1040 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %538, i32 0, i32 3, !dbg !5230
  %539 = load i32, i32* %length_chars_val, align 4, !dbg !5231
  %idxprom1041 = zext i32 %539 to i64, !dbg !5229
  %arrayidx1042 = getelementptr inbounds [12 x %struct.format_type_detail], [12 x %struct.format_type_detail]* %types1040, i64 0, i64 %idxprom1041, !dbg !5229
  %std1043 = getelementptr inbounds %struct.format_type_detail, %struct.format_type_detail* %arrayidx1042, i32 0, i32 0, !dbg !5232
  %540 = load i32, i32* %std1043, align 8, !dbg !5232
  store i32 %540, i32* %wanted_type_std, align 4, !dbg !5233
  %541 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !5234
  %cmp1044 = icmp eq %union.tree_node* %541, null, !dbg !5236
  br i1 %cmp1044, label %if.then1046, label %if.else1056, !dbg !5237

if.then1046:                                      ; preds = %cond.end1034
  %542 = load i8*, i8** %length_chars, align 8, !dbg !5238
  %543 = load i32, i32* %format_char, align 4, !dbg !5240
  %call1047 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.59, i64 0, i64 0), i8* %542, i32 %543), !dbg !5241
  %544 = load i64, i64* %arg_num.addr, align 8, !dbg !5242
  %inc1048 = add i64 %544, 1, !dbg !5242
  store i64 %inc1048, i64* %arg_num.addr, align 8, !dbg !5242
  %545 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !5243
  %cmp1049 = icmp eq %union.tree_node* %545, null, !dbg !5245
  br i1 %cmp1049, label %if.then1051, label %if.end1053, !dbg !5246

if.then1051:                                      ; preds = %if.then1046
  %call1052 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.35, i64 0, i64 0)), !dbg !5247
  br label %return, !dbg !5249

if.end1053:                                       ; preds = %if.then1046
  %546 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !5250
  %common1054 = bitcast %union.tree_node* %546 to %struct.tree_common*, !dbg !5250
  %chain1055 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1054, i32 0, i32 1, !dbg !5250
  %547 = load %union.tree_node*, %union.tree_node** %chain1055, align 8, !dbg !5250
  store %union.tree_node* %547, %union.tree_node** %params.addr, align 8, !dbg !5251
  br label %while.body, !dbg !5252, !llvm.loop !4092

if.else1056:                                      ; preds = %cond.end1034
  %548 = load i32, i32* @pedantic, align 4, !dbg !5253
  %tobool1057 = icmp ne i32 %548, 0, !dbg !5253
  br i1 %tobool1057, label %land.lhs.true1058, label %if.end1137, !dbg !5255

land.lhs.true1058:                                ; preds = %if.else1056
  %549 = load i32, i32* %wanted_type_std, align 4, !dbg !5256
  %cmp1059 = icmp eq i32 %549, 2, !dbg !5256
  br i1 %cmp1059, label %cond.true1061, label %cond.false1064, !dbg !5256

cond.true1061:                                    ; preds = %land.lhs.true1058
  %550 = load i32, i32* @warn_long_long, align 4, !dbg !5256
  %tobool1062 = icmp ne i32 %550, 0, !dbg !5256
  %551 = zext i1 %tobool1062 to i64, !dbg !5256
  %cond1063 = select i1 %tobool1062, i32 3, i32 0, !dbg !5256
  br label %cond.end1065, !dbg !5256

cond.false1064:                                   ; preds = %land.lhs.true1058
  %552 = load i32, i32* %wanted_type_std, align 4, !dbg !5256
  br label %cond.end1065, !dbg !5256

cond.end1065:                                     ; preds = %cond.false1064, %cond.true1061
  %cond1066 = phi i32 [ %cond1063, %cond.true1061 ], [ %552, %cond.false1064 ], !dbg !5256
  %553 = load i32, i32* %length_chars_std, align 4, !dbg !5257
  %cmp1067 = icmp eq i32 %553, 2, !dbg !5257
  br i1 %cmp1067, label %cond.true1069, label %cond.false1072, !dbg !5257

cond.true1069:                                    ; preds = %cond.end1065
  %554 = load i32, i32* @warn_long_long, align 4, !dbg !5257
  %tobool1070 = icmp ne i32 %554, 0, !dbg !5257
  %555 = zext i1 %tobool1070 to i64, !dbg !5257
  %cond1071 = select i1 %tobool1070, i32 3, i32 0, !dbg !5257
  br label %cond.end1073, !dbg !5257

cond.false1072:                                   ; preds = %cond.end1065
  %556 = load i32, i32* %length_chars_std, align 4, !dbg !5257
  br label %cond.end1073, !dbg !5257

cond.end1073:                                     ; preds = %cond.false1072, %cond.true1069
  %cond1074 = phi i32 [ %cond1071, %cond.true1069 ], [ %556, %cond.false1072 ], !dbg !5257
  %cmp1075 = icmp sgt i32 %cond1066, %cond1074, !dbg !5258
  br i1 %cmp1075, label %land.lhs.true1077, label %if.end1137, !dbg !5259

land.lhs.true1077:                                ; preds = %cond.end1073
  %557 = load i32, i32* %wanted_type_std, align 4, !dbg !5260
  %cmp1078 = icmp eq i32 %557, 2, !dbg !5260
  br i1 %cmp1078, label %cond.true1080, label %cond.false1083, !dbg !5260

cond.true1080:                                    ; preds = %land.lhs.true1077
  %558 = load i32, i32* @warn_long_long, align 4, !dbg !5260
  %tobool1081 = icmp ne i32 %558, 0, !dbg !5260
  %559 = zext i1 %tobool1081 to i64, !dbg !5260
  %cond1082 = select i1 %tobool1081, i32 3, i32 0, !dbg !5260
  br label %cond.end1084, !dbg !5260

cond.false1083:                                   ; preds = %land.lhs.true1077
  %560 = load i32, i32* %wanted_type_std, align 4, !dbg !5260
  br label %cond.end1084, !dbg !5260

cond.end1084:                                     ; preds = %cond.false1083, %cond.true1080
  %cond1085 = phi i32 [ %cond1082, %cond.true1080 ], [ %560, %cond.false1083 ], !dbg !5260
  %561 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5261
  %std1086 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %561, i32 0, i32 2, !dbg !5261
  %562 = load i32, i32* %std1086, align 4, !dbg !5261
  %cmp1087 = icmp eq i32 %562, 2, !dbg !5261
  br i1 %cmp1087, label %cond.true1089, label %cond.false1092, !dbg !5261

cond.true1089:                                    ; preds = %cond.end1084
  %563 = load i32, i32* @warn_long_long, align 4, !dbg !5261
  %tobool1090 = icmp ne i32 %563, 0, !dbg !5261
  %564 = zext i1 %tobool1090 to i64, !dbg !5261
  %cond1091 = select i1 %tobool1090, i32 3, i32 0, !dbg !5261
  br label %cond.end1094, !dbg !5261

cond.false1092:                                   ; preds = %cond.end1084
  %565 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5261
  %std1093 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %565, i32 0, i32 2, !dbg !5261
  %566 = load i32, i32* %std1093, align 4, !dbg !5261
  br label %cond.end1094, !dbg !5261

cond.end1094:                                     ; preds = %cond.false1092, %cond.true1089
  %cond1095 = phi i32 [ %cond1091, %cond.true1089 ], [ %566, %cond.false1092 ], !dbg !5261
  %cmp1096 = icmp sgt i32 %cond1085, %cond1095, !dbg !5262
  br i1 %cmp1096, label %if.then1098, label %if.end1137, !dbg !5263

if.then1098:                                      ; preds = %cond.end1094
  %567 = load i32, i32* %wanted_type_std, align 4, !dbg !5264
  %cmp1099 = icmp eq i32 %567, 2, !dbg !5264
  br i1 %cmp1099, label %cond.true1101, label %cond.false1104, !dbg !5264

cond.true1101:                                    ; preds = %if.then1098
  %568 = load i32, i32* @warn_long_long, align 4, !dbg !5264
  %tobool1102 = icmp ne i32 %568, 0, !dbg !5264
  %569 = zext i1 %tobool1102 to i64, !dbg !5264
  %cond1103 = select i1 %tobool1102, i32 3, i32 0, !dbg !5264
  br label %cond.end1105, !dbg !5264

cond.false1104:                                   ; preds = %if.then1098
  %570 = load i32, i32* %wanted_type_std, align 4, !dbg !5264
  br label %cond.end1105, !dbg !5264

cond.end1105:                                     ; preds = %cond.false1104, %cond.true1101
  %cond1106 = phi i32 [ %cond1103, %cond.true1101 ], [ %570, %cond.false1104 ], !dbg !5264
  %571 = load i32, i32* @c_language, align 4, !dbg !5267
  %and1107 = and i32 %571, 2, !dbg !5267
  %cmp1108 = icmp ne i32 %and1107, 0, !dbg !5267
  br i1 %cmp1108, label %cond.true1110, label %cond.false1111, !dbg !5267

cond.true1110:                                    ; preds = %cond.end1105
  br label %cond.end1119, !dbg !5267

cond.false1111:                                   ; preds = %cond.end1105
  %572 = load i32, i32* @flag_isoc99, align 4, !dbg !5267
  %tobool1112 = icmp ne i32 %572, 0, !dbg !5267
  br i1 %tobool1112, label %cond.true1113, label %cond.false1114, !dbg !5267

cond.true1113:                                    ; preds = %cond.false1111
  br label %cond.end1117, !dbg !5267

cond.false1114:                                   ; preds = %cond.false1111
  %573 = load i32, i32* @flag_isoc94, align 4, !dbg !5267
  %tobool1115 = icmp ne i32 %573, 0, !dbg !5267
  %574 = zext i1 %tobool1115 to i64, !dbg !5267
  %cond1116 = select i1 %tobool1115, i32 1, i32 0, !dbg !5267
  br label %cond.end1117, !dbg !5267

cond.end1117:                                     ; preds = %cond.false1114, %cond.true1113
  %cond1118 = phi i32 [ 3, %cond.true1113 ], [ %cond1116, %cond.false1114 ], !dbg !5267
  br label %cond.end1119, !dbg !5267

cond.end1119:                                     ; preds = %cond.end1117, %cond.true1110
  %cond1120 = phi i32 [ 1, %cond.true1110 ], [ %cond1118, %cond.end1117 ], !dbg !5267
  %cmp1121 = icmp sgt i32 %cond1106, %cond1120, !dbg !5268
  br i1 %cmp1121, label %if.then1123, label %if.end1136, !dbg !5269

if.then1123:                                      ; preds = %cond.end1119
  %575 = load i32, i32* @c_language, align 4, !dbg !5270
  %and1124 = and i32 %575, 2, !dbg !5270
  %cmp1125 = icmp ne i32 %and1124, 0, !dbg !5270
  br i1 %cmp1125, label %cond.true1127, label %cond.false1128, !dbg !5270

cond.true1127:                                    ; preds = %if.then1123
  br label %cond.end1132, !dbg !5270

cond.false1128:                                   ; preds = %if.then1123
  %576 = load i32, i32* %wanted_type_std, align 4, !dbg !5270
  %cmp1129 = icmp eq i32 %576, 4, !dbg !5270
  %577 = zext i1 %cmp1129 to i64, !dbg !5270
  %cond1131 = select i1 %cmp1129, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i64 0, i64 0), !dbg !5270
  br label %cond.end1132, !dbg !5270

cond.end1132:                                     ; preds = %cond.false1128, %cond.true1127
  %cond1133 = phi i8* [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42, i64 0, i64 0), %cond.true1127 ], [ %cond1131, %cond.false1128 ], !dbg !5270
  %578 = load i8*, i8** %length_chars, align 8, !dbg !5271
  %579 = load i32, i32* %format_char, align 4, !dbg !5272
  %580 = load %struct.format_kind_info*, %struct.format_kind_info** %fki, align 8, !dbg !5273
  %name1134 = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %580, i32 0, i32 0, !dbg !5274
  %581 = load i8*, i8** %name1134, align 8, !dbg !5274
  %call1135 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.60, i64 0, i64 0), i8* %cond1133, i8* %578, i32 %579, i8* %581), !dbg !5275
  br label %if.end1136, !dbg !5275

if.end1136:                                       ; preds = %cond.end1132, %cond.end1119
  br label %if.end1137, !dbg !5276

if.end1137:                                       ; preds = %if.end1136, %cond.end1094, %cond.end1073, %if.else1056
  br label %if.end1138

if.end1138:                                       ; preds = %if.end1137
  br label %if.end1139, !dbg !5277

if.end1139:                                       ; preds = %if.end1138, %if.end1020
  %next1140 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %main_wanted_type, i32 0, i32 10, !dbg !5278
  store %struct.format_wanted_type* null, %struct.format_wanted_type** %next1140, align 8, !dbg !5279
  %582 = load %struct.function_format_info*, %struct.function_format_info** %info.addr, align 8, !dbg !5280
  %first_arg_num1141 = getelementptr inbounds %struct.function_format_info, %struct.function_format_info* %582, i32 0, i32 2, !dbg !5282
  %583 = load i64, i64* %first_arg_num1141, align 8, !dbg !5282
  %cmp1142 = icmp eq i64 %583, 0, !dbg !5283
  br i1 %cmp1142, label %if.then1144, label %if.end1145, !dbg !5284

if.then1144:                                      ; preds = %if.end1139
  br label %while.body, !dbg !5285, !llvm.loop !4092

if.end1145:                                       ; preds = %if.end1139
  %584 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5286
  %pointer_count1146 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %584, i32 0, i32 1, !dbg !5288
  %585 = load i32, i32* %pointer_count1146, align 8, !dbg !5288
  %cmp1147 = icmp eq i32 %585, 0, !dbg !5289
  br i1 %cmp1147, label %land.lhs.true1149, label %lor.lhs.false1152, !dbg !5290

land.lhs.true1149:                                ; preds = %if.end1145
  %586 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !5291
  %587 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !5292
  %cmp1150 = icmp eq %union.tree_node* %586, %587, !dbg !5293
  br i1 %cmp1150, label %if.then1154, label %lor.lhs.false1152, !dbg !5294

lor.lhs.false1152:                                ; preds = %land.lhs.true1149, %if.end1145
  %588 = load i32, i32* %suppressed, align 4, !dbg !5295
  %tobool1153 = icmp ne i32 %588, 0, !dbg !5295
  br i1 %tobool1153, label %if.then1154, label %if.else1165, !dbg !5296

if.then1154:                                      ; preds = %lor.lhs.false1152, %land.lhs.true1149
  %589 = load i32, i32* %main_arg_num, align 4, !dbg !5297
  %cmp1155 = icmp ne i32 %589, 0, !dbg !5300
  br i1 %cmp1155, label %if.then1157, label %if.end1164, !dbg !5301

if.then1157:                                      ; preds = %if.then1154
  %590 = load i32, i32* %suppressed, align 4, !dbg !5302
  %tobool1158 = icmp ne i32 %590, 0, !dbg !5302
  br i1 %tobool1158, label %if.then1159, label %if.else1161, !dbg !5305

if.then1159:                                      ; preds = %if.then1157
  %call1160 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.61, i64 0, i64 0)), !dbg !5306
  br label %if.end1163, !dbg !5306

if.else1161:                                      ; preds = %if.then1157
  %call1162 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.62, i64 0, i64 0)), !dbg !5307
  br label %if.end1163

if.end1163:                                       ; preds = %if.else1161, %if.then1159
  br label %if.end1164, !dbg !5308

if.end1164:                                       ; preds = %if.end1163, %if.then1154
  br label %if.end1259, !dbg !5309

if.else1165:                                      ; preds = %lor.lhs.false1152
  call void @llvm.dbg.declare(metadata %struct.format_wanted_type** %wanted_type_ptr, metadata !5310, metadata !DIExpression()), !dbg !5312
  %591 = load i32, i32* %main_arg_num, align 4, !dbg !5313
  %cmp1166 = icmp ne i32 %591, 0, !dbg !5315
  br i1 %cmp1166, label %if.then1168, label %if.else1170, !dbg !5316

if.then1168:                                      ; preds = %if.else1165
  %592 = load i32, i32* %main_arg_num, align 4, !dbg !5317
  %conv1169 = sext i32 %592 to i64, !dbg !5317
  store i64 %conv1169, i64* %arg_num.addr, align 8, !dbg !5319
  %593 = load %union.tree_node*, %union.tree_node** %main_arg_params, align 8, !dbg !5320
  store %union.tree_node* %593, %union.tree_node** %params.addr, align 8, !dbg !5321
  br label %if.end1178, !dbg !5322

if.else1170:                                      ; preds = %if.else1165
  %594 = load i64, i64* %arg_num.addr, align 8, !dbg !5323
  %inc1171 = add i64 %594, 1, !dbg !5323
  store i64 %inc1171, i64* %arg_num.addr, align 8, !dbg !5323
  %595 = load i32, i32* %has_operand_number, align 4, !dbg !5325
  %cmp1172 = icmp sgt i32 %595, 0, !dbg !5327
  br i1 %cmp1172, label %if.then1174, label %if.else1176, !dbg !5328

if.then1174:                                      ; preds = %if.else1170
  %call1175 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.63, i64 0, i64 0)), !dbg !5329
  br label %return, !dbg !5331

if.else1176:                                      ; preds = %if.else1170
  store i32 0, i32* %has_operand_number, align 4, !dbg !5332
  br label %if.end1177

if.end1177:                                       ; preds = %if.else1176
  br label %if.end1178

if.end1178:                                       ; preds = %if.end1177, %if.then1168
  store %struct.format_wanted_type* %main_wanted_type, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5333
  br label %while.cond1179, !dbg !5334

while.cond1179:                                   ; preds = %if.end1257, %if.end1178
  %596 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5335
  %tobool1180 = icmp ne %struct.format_char_info* %596, null, !dbg !5334
  br i1 %tobool1180, label %while.body1181, label %while.end1258, !dbg !5334

while.body1181:                                   ; preds = %while.cond1179
  %597 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !5336
  %cmp1182 = icmp eq %union.tree_node* %597, null, !dbg !5339
  br i1 %cmp1182, label %if.then1184, label %if.end1186, !dbg !5340

if.then1184:                                      ; preds = %while.body1181
  %call1185 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.35, i64 0, i64 0)), !dbg !5341
  br label %return, !dbg !5343

if.end1186:                                       ; preds = %while.body1181
  %598 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !5344
  %list1187 = bitcast %union.tree_node* %598 to %struct.tree_list*, !dbg !5344
  %value1188 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1187, i32 0, i32 2, !dbg !5344
  %599 = load %union.tree_node*, %union.tree_node** %value1188, align 8, !dbg !5344
  store %union.tree_node* %599, %union.tree_node** %cur_param, align 8, !dbg !5345
  %600 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !5346
  %common1189 = bitcast %union.tree_node* %600 to %struct.tree_common*, !dbg !5346
  %chain1190 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1189, i32 0, i32 1, !dbg !5346
  %601 = load %union.tree_node*, %union.tree_node** %chain1190, align 8, !dbg !5346
  store %union.tree_node* %601, %union.tree_node** %params.addr, align 8, !dbg !5347
  %602 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !5348
  %603 = load %struct.format_wanted_type*, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5349
  %wanted_type1191 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %603, i32 0, i32 0, !dbg !5350
  store %union.tree_node* %602, %union.tree_node** %wanted_type1191, align 8, !dbg !5351
  %604 = load i8*, i8** %wanted_type_name, align 8, !dbg !5352
  %605 = load %struct.format_wanted_type*, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5353
  %wanted_type_name1192 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %605, i32 0, i32 1, !dbg !5354
  store i8* %604, i8** %wanted_type_name1192, align 8, !dbg !5355
  %606 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5356
  %pointer_count1193 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %606, i32 0, i32 1, !dbg !5357
  %607 = load i32, i32* %pointer_count1193, align 8, !dbg !5357
  %608 = load i32, i32* %alloc_flag, align 4, !dbg !5358
  %add1194 = add nsw i32 %607, %608, !dbg !5359
  %609 = load %struct.format_wanted_type*, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5360
  %pointer_count1195 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %609, i32 0, i32 3, !dbg !5361
  store i32 %add1194, i32* %pointer_count1195, align 4, !dbg !5362
  %610 = load %struct.format_wanted_type*, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5363
  %char_lenient_flag1196 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %610, i32 0, i32 4, !dbg !5364
  store i32 0, i32* %char_lenient_flag1196, align 8, !dbg !5365
  %611 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5366
  %flags21197 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %611, i32 0, i32 5, !dbg !5368
  %612 = load i8*, i8** %flags21197, align 8, !dbg !5368
  %call1198 = call i8* @strchr(i8* %612, i32 99), !dbg !5369
  %cmp1199 = icmp ne i8* %call1198, null, !dbg !5370
  br i1 %cmp1199, label %if.then1201, label %if.end1203, !dbg !5371

if.then1201:                                      ; preds = %if.end1186
  %613 = load %struct.format_wanted_type*, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5372
  %char_lenient_flag1202 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %613, i32 0, i32 4, !dbg !5373
  store i32 1, i32* %char_lenient_flag1202, align 8, !dbg !5374
  br label %if.end1203, !dbg !5372

if.end1203:                                       ; preds = %if.then1201, %if.end1186
  %614 = load %struct.format_wanted_type*, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5375
  %scalar_identity_flag1204 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %614, i32 0, i32 2, !dbg !5376
  store i32 0, i32* %scalar_identity_flag1204, align 8, !dbg !5377
  %615 = load i32, i32* %scalar_identity_flag, align 4, !dbg !5378
  %tobool1205 = icmp ne i32 %615, 0, !dbg !5378
  br i1 %tobool1205, label %if.then1206, label %if.end1208, !dbg !5380

if.then1206:                                      ; preds = %if.end1203
  %616 = load %struct.format_wanted_type*, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5381
  %scalar_identity_flag1207 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %616, i32 0, i32 2, !dbg !5382
  store i32 1, i32* %scalar_identity_flag1207, align 8, !dbg !5383
  br label %if.end1208, !dbg !5381

if.end1208:                                       ; preds = %if.then1206, %if.end1203
  %617 = load %struct.format_wanted_type*, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5384
  %writing_in_flag1209 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %617, i32 0, i32 5, !dbg !5385
  store i32 0, i32* %writing_in_flag1209, align 4, !dbg !5386
  %618 = load %struct.format_wanted_type*, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5387
  %reading_from_flag1210 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %618, i32 0, i32 6, !dbg !5388
  store i32 0, i32* %reading_from_flag1210, align 8, !dbg !5389
  %619 = load i32, i32* %alloc_flag, align 4, !dbg !5390
  %tobool1211 = icmp ne i32 %619, 0, !dbg !5390
  br i1 %tobool1211, label %if.then1212, label %if.else1214, !dbg !5392

if.then1212:                                      ; preds = %if.end1208
  %620 = load %struct.format_wanted_type*, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5393
  %writing_in_flag1213 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %620, i32 0, i32 5, !dbg !5394
  store i32 1, i32* %writing_in_flag1213, align 4, !dbg !5395
  br label %if.end1229, !dbg !5393

if.else1214:                                      ; preds = %if.end1208
  %621 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5396
  %flags21215 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %621, i32 0, i32 5, !dbg !5399
  %622 = load i8*, i8** %flags21215, align 8, !dbg !5399
  %call1216 = call i8* @strchr(i8* %622, i32 87), !dbg !5400
  %cmp1217 = icmp ne i8* %call1216, null, !dbg !5401
  br i1 %cmp1217, label %if.then1219, label %if.end1221, !dbg !5402

if.then1219:                                      ; preds = %if.else1214
  %623 = load %struct.format_wanted_type*, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5403
  %writing_in_flag1220 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %623, i32 0, i32 5, !dbg !5404
  store i32 1, i32* %writing_in_flag1220, align 4, !dbg !5405
  br label %if.end1221, !dbg !5403

if.end1221:                                       ; preds = %if.then1219, %if.else1214
  %624 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5406
  %flags21222 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %624, i32 0, i32 5, !dbg !5408
  %625 = load i8*, i8** %flags21222, align 8, !dbg !5408
  %call1223 = call i8* @strchr(i8* %625, i32 82), !dbg !5409
  %cmp1224 = icmp ne i8* %call1223, null, !dbg !5410
  br i1 %cmp1224, label %if.then1226, label %if.end1228, !dbg !5411

if.then1226:                                      ; preds = %if.end1221
  %626 = load %struct.format_wanted_type*, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5412
  %reading_from_flag1227 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %626, i32 0, i32 6, !dbg !5413
  store i32 1, i32* %reading_from_flag1227, align 8, !dbg !5414
  br label %if.end1228, !dbg !5412

if.end1228:                                       ; preds = %if.then1226, %if.end1221
  br label %if.end1229

if.end1229:                                       ; preds = %if.end1228, %if.then1212
  %627 = load %struct.format_wanted_type*, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5415
  %name1230 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %627, i32 0, i32 7, !dbg !5416
  store i8* null, i8** %name1230, align 8, !dbg !5417
  %628 = load %union.tree_node*, %union.tree_node** %cur_param, align 8, !dbg !5418
  %629 = load %struct.format_wanted_type*, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5419
  %param1231 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %629, i32 0, i32 8, !dbg !5420
  store %union.tree_node* %628, %union.tree_node** %param1231, align 8, !dbg !5421
  %630 = load i64, i64* %arg_num.addr, align 8, !dbg !5422
  %conv1232 = trunc i64 %630 to i32, !dbg !5422
  %631 = load %struct.format_wanted_type*, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5423
  %arg_num1233 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %631, i32 0, i32 9, !dbg !5424
  store i32 %conv1232, i32* %arg_num1233, align 8, !dbg !5425
  %632 = load %struct.format_wanted_type*, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5426
  %next1234 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %632, i32 0, i32 10, !dbg !5427
  store %struct.format_wanted_type* null, %struct.format_wanted_type** %next1234, align 8, !dbg !5428
  %633 = load %struct.format_wanted_type*, %struct.format_wanted_type** %last_wanted_type, align 8, !dbg !5429
  %cmp1235 = icmp ne %struct.format_wanted_type* %633, null, !dbg !5431
  br i1 %cmp1235, label %if.then1237, label %if.end1239, !dbg !5432

if.then1237:                                      ; preds = %if.end1229
  %634 = load %struct.format_wanted_type*, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5433
  %635 = load %struct.format_wanted_type*, %struct.format_wanted_type** %last_wanted_type, align 8, !dbg !5434
  %next1238 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %635, i32 0, i32 10, !dbg !5435
  store %struct.format_wanted_type* %634, %struct.format_wanted_type** %next1238, align 8, !dbg !5436
  br label %if.end1239, !dbg !5434

if.end1239:                                       ; preds = %if.then1237, %if.end1229
  %636 = load %struct.format_wanted_type*, %struct.format_wanted_type** %first_wanted_type, align 8, !dbg !5437
  %cmp1240 = icmp eq %struct.format_wanted_type* %636, null, !dbg !5439
  br i1 %cmp1240, label %if.then1242, label %if.end1243, !dbg !5440

if.then1242:                                      ; preds = %if.end1239
  %637 = load %struct.format_wanted_type*, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5441
  store %struct.format_wanted_type* %637, %struct.format_wanted_type** %first_wanted_type, align 8, !dbg !5442
  br label %if.end1243, !dbg !5443

if.end1243:                                       ; preds = %if.then1242, %if.end1239
  %638 = load %struct.format_wanted_type*, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5444
  store %struct.format_wanted_type* %638, %struct.format_wanted_type** %last_wanted_type, align 8, !dbg !5445
  %639 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5446
  %chain1244 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %639, i32 0, i32 6, !dbg !5447
  %640 = load %struct.format_char_info*, %struct.format_char_info** %chain1244, align 8, !dbg !5447
  store %struct.format_char_info* %640, %struct.format_char_info** %fci, align 8, !dbg !5448
  %641 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5449
  %tobool1245 = icmp ne %struct.format_char_info* %641, null, !dbg !5449
  br i1 %tobool1245, label %if.then1246, label %if.end1257, !dbg !5451

if.then1246:                                      ; preds = %if.end1243
  %642 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** %fwt_pool.addr, align 8, !dbg !5452
  %call1247 = call i8* @pool_alloc(%struct.alloc_pool_def* %642), !dbg !5454
  %643 = bitcast i8* %call1247 to %struct.format_wanted_type*, !dbg !5455
  store %struct.format_wanted_type* %643, %struct.format_wanted_type** %wanted_type_ptr, align 8, !dbg !5456
  %644 = load i64, i64* %arg_num.addr, align 8, !dbg !5457
  %inc1248 = add i64 %644, 1, !dbg !5457
  store i64 %inc1248, i64* %arg_num.addr, align 8, !dbg !5457
  %645 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5458
  %types1249 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %645, i32 0, i32 3, !dbg !5459
  %646 = load i32, i32* %length_chars_val, align 4, !dbg !5460
  %idxprom1250 = zext i32 %646 to i64, !dbg !5458
  %arrayidx1251 = getelementptr inbounds [12 x %struct.format_type_detail], [12 x %struct.format_type_detail]* %types1249, i64 0, i64 %idxprom1250, !dbg !5458
  %type1252 = getelementptr inbounds %struct.format_type_detail, %struct.format_type_detail* %arrayidx1251, i32 0, i32 2, !dbg !5461
  %647 = load %union.tree_node**, %union.tree_node*** %type1252, align 8, !dbg !5461
  %648 = load %union.tree_node*, %union.tree_node** %647, align 8, !dbg !5462
  store %union.tree_node* %648, %union.tree_node** %wanted_type, align 8, !dbg !5463
  %649 = load %struct.format_char_info*, %struct.format_char_info** %fci, align 8, !dbg !5464
  %types1253 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %649, i32 0, i32 3, !dbg !5465
  %650 = load i32, i32* %length_chars_val, align 4, !dbg !5466
  %idxprom1254 = zext i32 %650 to i64, !dbg !5464
  %arrayidx1255 = getelementptr inbounds [12 x %struct.format_type_detail], [12 x %struct.format_type_detail]* %types1253, i64 0, i64 %idxprom1254, !dbg !5464
  %name1256 = getelementptr inbounds %struct.format_type_detail, %struct.format_type_detail* %arrayidx1255, i32 0, i32 1, !dbg !5467
  %651 = load i8*, i8** %name1256, align 8, !dbg !5467
  store i8* %651, i8** %wanted_type_name, align 8, !dbg !5468
  br label %if.end1257, !dbg !5469

if.end1257:                                       ; preds = %if.then1246, %if.end1243
  br label %while.cond1179, !dbg !5334, !llvm.loop !5470

while.end1258:                                    ; preds = %while.cond1179
  br label %if.end1259

if.end1259:                                       ; preds = %while.end1258, %if.end1164
  %652 = load %struct.format_wanted_type*, %struct.format_wanted_type** %first_wanted_type, align 8, !dbg !5472
  %cmp1260 = icmp ne %struct.format_wanted_type* %652, null, !dbg !5474
  br i1 %cmp1260, label %if.then1262, label %if.end1267, !dbg !5475

if.then1262:                                      ; preds = %if.end1259
  %653 = load %struct.format_wanted_type*, %struct.format_wanted_type** %first_wanted_type, align 8, !dbg !5476
  %654 = load i8*, i8** %format_start, align 8, !dbg !5477
  %655 = load i8*, i8** %format_chars.addr, align 8, !dbg !5478
  %656 = load i8*, i8** %format_start, align 8, !dbg !5479
  %sub.ptr.lhs.cast1263 = ptrtoint i8* %655 to i64, !dbg !5480
  %sub.ptr.rhs.cast1264 = ptrtoint i8* %656 to i64, !dbg !5480
  %sub.ptr.sub1265 = sub i64 %sub.ptr.lhs.cast1263, %sub.ptr.rhs.cast1264, !dbg !5480
  %conv1266 = trunc i64 %sub.ptr.sub1265 to i32, !dbg !5478
  call void @check_format_types(%struct.format_wanted_type* %653, i8* %654, i32 %conv1266), !dbg !5481
  br label %if.end1267, !dbg !5481

if.end1267:                                       ; preds = %if.then1262, %if.end1259
  br label %while.body, !dbg !3991, !llvm.loop !4092

return:                                           ; preds = %if.then1184, %if.then1174, %if.then1051, %if.then332, %if.then323, %if.then308, %if.then164, %if.then155, %if.then140, %if.then105, %if.then67, %if.then51, %if.end22
  ret void, !dbg !5482
}

declare dso_local void @free_alloc_pool(%struct.alloc_pool_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @init_dollar_format_checking(i32 %first_arg_num, %union.tree_node* %params) #0 !dbg !5483 {
entry:
  %first_arg_num.addr = alloca i32, align 4
  %params.addr = alloca %union.tree_node*, align 8
  %oparams = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  store i32 %first_arg_num, i32* %first_arg_num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %first_arg_num.addr, metadata !5486, metadata !DIExpression()), !dbg !5487
  store %union.tree_node* %params, %union.tree_node** %params.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %params.addr, metadata !5488, metadata !DIExpression()), !dbg !5489
  call void @llvm.dbg.declare(metadata %union.tree_node** %oparams, metadata !5490, metadata !DIExpression()), !dbg !5491
  %0 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !5492
  store %union.tree_node* %0, %union.tree_node** %oparams, align 8, !dbg !5491
  %1 = load i32, i32* %first_arg_num.addr, align 4, !dbg !5493
  store i32 %1, i32* @dollar_first_arg_num, align 4, !dbg !5494
  store i32 0, i32* @dollar_arguments_count, align 4, !dbg !5495
  store i32 0, i32* @dollar_max_arg_used, align 4, !dbg !5496
  store i32 0, i32* @dollar_format_warned, align 4, !dbg !5497
  %2 = load i32, i32* %first_arg_num.addr, align 4, !dbg !5498
  %cmp = icmp sgt i32 %2, 0, !dbg !5500
  br i1 %cmp, label %if.then, label %if.end, !dbg !5501

if.then:                                          ; preds = %entry
  br label %while.cond, !dbg !5502

while.cond:                                       ; preds = %while.body, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !5504
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !5502
  br i1 %tobool, label %while.body, label %while.end, !dbg !5502

while.body:                                       ; preds = %while.cond
  %4 = load i32, i32* @dollar_arguments_count, align 4, !dbg !5505
  %inc = add nsw i32 %4, 1, !dbg !5505
  store i32 %inc, i32* @dollar_arguments_count, align 4, !dbg !5505
  %5 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !5507
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !5507
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !5507
  %6 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5507
  store %union.tree_node* %6, %union.tree_node** %params.addr, align 8, !dbg !5508
  br label %while.cond, !dbg !5502, !llvm.loop !5509

while.end:                                        ; preds = %while.cond
  br label %if.end, !dbg !5511

if.end:                                           ; preds = %while.end, %entry
  %7 = load i32, i32* @dollar_arguments_alloc, align 4, !dbg !5512
  %8 = load i32, i32* @dollar_arguments_count, align 4, !dbg !5514
  %cmp1 = icmp slt i32 %7, %8, !dbg !5515
  br i1 %cmp1, label %if.then2, label %if.end12, !dbg !5516

if.then2:                                         ; preds = %if.end
  %9 = load i8*, i8** @dollar_arguments_used, align 8, !dbg !5517
  %tobool3 = icmp ne i8* %9, null, !dbg !5517
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !5520

if.then4:                                         ; preds = %if.then2
  %10 = load i8*, i8** @dollar_arguments_used, align 8, !dbg !5521
  call void @free(i8* %10), !dbg !5522
  br label %if.end5, !dbg !5522

if.end5:                                          ; preds = %if.then4, %if.then2
  %11 = load i8*, i8** @dollar_arguments_pointer_p, align 8, !dbg !5523
  %tobool6 = icmp ne i8* %11, null, !dbg !5523
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !5525

if.then7:                                         ; preds = %if.end5
  %12 = load i8*, i8** @dollar_arguments_pointer_p, align 8, !dbg !5526
  call void @free(i8* %12), !dbg !5527
  br label %if.end8, !dbg !5527

if.end8:                                          ; preds = %if.then7, %if.end5
  %13 = load i32, i32* @dollar_arguments_count, align 4, !dbg !5528
  store i32 %13, i32* @dollar_arguments_alloc, align 4, !dbg !5529
  %14 = load i32, i32* @dollar_arguments_alloc, align 4, !dbg !5530
  %conv = sext i32 %14 to i64, !dbg !5530
  %mul = mul i64 1, %conv, !dbg !5530
  %call = call i8* @xmalloc(i64 %mul), !dbg !5530
  store i8* %call, i8** @dollar_arguments_used, align 8, !dbg !5531
  %15 = load i32, i32* @dollar_arguments_alloc, align 4, !dbg !5532
  %conv9 = sext i32 %15 to i64, !dbg !5532
  %mul10 = mul i64 1, %conv9, !dbg !5532
  %call11 = call i8* @xmalloc(i64 %mul10), !dbg !5532
  store i8* %call11, i8** @dollar_arguments_pointer_p, align 8, !dbg !5533
  br label %if.end12, !dbg !5534

if.end12:                                         ; preds = %if.end8, %if.end
  %16 = load i32, i32* @dollar_arguments_alloc, align 4, !dbg !5535
  %tobool13 = icmp ne i32 %16, 0, !dbg !5535
  br i1 %tobool13, label %if.then14, label %if.end31, !dbg !5537

if.then14:                                        ; preds = %if.end12
  %17 = load i8*, i8** @dollar_arguments_used, align 8, !dbg !5538
  %18 = load i32, i32* @dollar_arguments_alloc, align 4, !dbg !5540
  %conv15 = sext i32 %18 to i64, !dbg !5540
  call void @llvm.memset.p0i8.i64(i8* align 1 %17, i8 0, i64 %conv15, i1 false), !dbg !5541
  %19 = load i32, i32* %first_arg_num.addr, align 4, !dbg !5542
  %cmp16 = icmp sgt i32 %19, 0, !dbg !5544
  br i1 %cmp16, label %if.then18, label %if.end30, !dbg !5545

if.then18:                                        ; preds = %if.then14
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5546, metadata !DIExpression()), !dbg !5548
  store i32 0, i32* %i, align 4, !dbg !5548
  %20 = load %union.tree_node*, %union.tree_node** %oparams, align 8, !dbg !5549
  store %union.tree_node* %20, %union.tree_node** %params.addr, align 8, !dbg !5550
  br label %while.cond19, !dbg !5551

while.cond19:                                     ; preds = %while.body21, %if.then18
  %21 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !5552
  %tobool20 = icmp ne %union.tree_node* %21, null, !dbg !5551
  br i1 %tobool20, label %while.body21, label %while.end29, !dbg !5551

while.body21:                                     ; preds = %while.cond19
  %22 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !5553
  %list = bitcast %union.tree_node* %22 to %struct.tree_list*, !dbg !5553
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !5553
  %23 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5553
  %common22 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !5553
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common22, i32 0, i32 2, !dbg !5553
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5553
  %base = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !5553
  %25 = bitcast %struct.tree_base* %base to i64*, !dbg !5553
  %bf.load = load i64, i64* %25, align 8, !dbg !5553
  %bf.clear = and i64 %bf.load, 65535, !dbg !5553
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5553
  %cmp23 = icmp eq i32 %bf.cast, 10, !dbg !5555
  %conv24 = zext i1 %cmp23 to i32, !dbg !5555
  %conv25 = trunc i32 %conv24 to i8, !dbg !5556
  %26 = load i8*, i8** @dollar_arguments_pointer_p, align 8, !dbg !5557
  %27 = load i32, i32* %i, align 4, !dbg !5558
  %idxprom = sext i32 %27 to i64, !dbg !5557
  %arrayidx = getelementptr inbounds i8, i8* %26, i64 %idxprom, !dbg !5557
  store i8 %conv25, i8* %arrayidx, align 1, !dbg !5559
  %28 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !5560
  %common26 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !5560
  %chain27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 1, !dbg !5560
  %29 = load %union.tree_node*, %union.tree_node** %chain27, align 8, !dbg !5560
  store %union.tree_node* %29, %union.tree_node** %params.addr, align 8, !dbg !5561
  %30 = load i32, i32* %i, align 4, !dbg !5562
  %inc28 = add nsw i32 %30, 1, !dbg !5562
  store i32 %inc28, i32* %i, align 4, !dbg !5562
  br label %while.cond19, !dbg !5551, !llvm.loop !5563

while.end29:                                      ; preds = %while.cond19
  br label %if.end30, !dbg !5565

if.end30:                                         ; preds = %while.end29, %if.then14
  br label %if.end31, !dbg !5566

if.end31:                                         ; preds = %if.end30, %if.end12
  ret void, !dbg !5567
}

; Function Attrs: noinline nounwind uwtable
define internal void @finish_dollar_format_checking(%struct.format_check_results* %res, i32 %pointer_gap_ok) #0 !dbg !5568 {
entry:
  %res.addr = alloca %struct.format_check_results*, align 8
  %pointer_gap_ok.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %found_pointer_gap = alloca i8, align 1
  store %struct.format_check_results* %res, %struct.format_check_results** %res.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.format_check_results** %res.addr, metadata !5571, metadata !DIExpression()), !dbg !5572
  store i32 %pointer_gap_ok, i32* %pointer_gap_ok.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pointer_gap_ok.addr, metadata !5573, metadata !DIExpression()), !dbg !5574
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5575, metadata !DIExpression()), !dbg !5576
  call void @llvm.dbg.declare(metadata i8* %found_pointer_gap, metadata !5577, metadata !DIExpression()), !dbg !5578
  store i8 0, i8* %found_pointer_gap, align 1, !dbg !5578
  store i32 0, i32* %i, align 4, !dbg !5579
  br label %for.cond, !dbg !5581

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !5582
  %1 = load i32, i32* @dollar_max_arg_used, align 4, !dbg !5584
  %cmp = icmp slt i32 %0, %1, !dbg !5585
  br i1 %cmp, label %for.body, label %for.end, !dbg !5586

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** @dollar_arguments_used, align 8, !dbg !5587
  %3 = load i32, i32* %i, align 4, !dbg !5590
  %idxprom = sext i32 %3 to i64, !dbg !5587
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom, !dbg !5587
  %4 = load i8, i8* %arrayidx, align 1, !dbg !5587
  %tobool = icmp ne i8 %4, 0, !dbg !5587
  br i1 %tobool, label %if.end7, label %if.then, !dbg !5591

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %pointer_gap_ok.addr, align 4, !dbg !5592
  %tobool1 = icmp ne i32 %5, 0, !dbg !5592
  br i1 %tobool1, label %land.lhs.true, label %if.else, !dbg !5595

land.lhs.true:                                    ; preds = %if.then
  %6 = load i32, i32* @dollar_first_arg_num, align 4, !dbg !5596
  %cmp2 = icmp eq i32 %6, 0, !dbg !5597
  br i1 %cmp2, label %if.then6, label %lor.lhs.false, !dbg !5598

lor.lhs.false:                                    ; preds = %land.lhs.true
  %7 = load i8*, i8** @dollar_arguments_pointer_p, align 8, !dbg !5599
  %8 = load i32, i32* %i, align 4, !dbg !5600
  %idxprom3 = sext i32 %8 to i64, !dbg !5599
  %arrayidx4 = getelementptr inbounds i8, i8* %7, i64 %idxprom3, !dbg !5599
  %9 = load i8, i8* %arrayidx4, align 1, !dbg !5599
  %conv = sext i8 %9 to i32, !dbg !5599
  %tobool5 = icmp ne i32 %conv, 0, !dbg !5599
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !5601

if.then6:                                         ; preds = %lor.lhs.false, %land.lhs.true
  store i8 1, i8* %found_pointer_gap, align 1, !dbg !5602
  br label %if.end, !dbg !5603

if.else:                                          ; preds = %lor.lhs.false, %if.then
  %10 = load i32, i32* %i, align 4, !dbg !5604
  %add = add nsw i32 %10, 1, !dbg !5605
  %11 = load i32, i32* @dollar_max_arg_used, align 4, !dbg !5606
  %call = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.64, i64 0, i64 0), i32 %add, i32 %11), !dbg !5607
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then6
  br label %if.end7, !dbg !5608

if.end7:                                          ; preds = %if.end, %for.body
  br label %for.inc, !dbg !5609

for.inc:                                          ; preds = %if.end7
  %12 = load i32, i32* %i, align 4, !dbg !5610
  %inc = add nsw i32 %12, 1, !dbg !5610
  store i32 %inc, i32* %i, align 4, !dbg !5610
  br label %for.cond, !dbg !5611, !llvm.loop !5612

for.end:                                          ; preds = %for.cond
  %13 = load i8, i8* %found_pointer_gap, align 1, !dbg !5614
  %conv8 = zext i8 %13 to i32, !dbg !5614
  %tobool9 = icmp ne i32 %conv8, 0, !dbg !5614
  br i1 %tobool9, label %if.then15, label %lor.lhs.false10, !dbg !5616

lor.lhs.false10:                                  ; preds = %for.end
  %14 = load i32, i32* @dollar_first_arg_num, align 4, !dbg !5617
  %tobool11 = icmp ne i32 %14, 0, !dbg !5617
  br i1 %tobool11, label %land.lhs.true12, label %if.end17, !dbg !5618

land.lhs.true12:                                  ; preds = %lor.lhs.false10
  %15 = load i32, i32* @dollar_max_arg_used, align 4, !dbg !5619
  %16 = load i32, i32* @dollar_arguments_count, align 4, !dbg !5620
  %cmp13 = icmp slt i32 %15, %16, !dbg !5621
  br i1 %cmp13, label %if.then15, label %if.end17, !dbg !5622

if.then15:                                        ; preds = %land.lhs.true12, %for.end
  %17 = load %struct.format_check_results*, %struct.format_check_results** %res.addr, align 8, !dbg !5623
  %number_other = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %17, i32 0, i32 6, !dbg !5625
  %18 = load i32, i32* %number_other, align 4, !dbg !5626
  %dec = add nsw i32 %18, -1, !dbg !5626
  store i32 %dec, i32* %number_other, align 4, !dbg !5626
  %19 = load %struct.format_check_results*, %struct.format_check_results** %res.addr, align 8, !dbg !5627
  %number_dollar_extra_args = getelementptr inbounds %struct.format_check_results, %struct.format_check_results* %19, i32 0, i32 2, !dbg !5628
  %20 = load i32, i32* %number_dollar_extra_args, align 4, !dbg !5629
  %inc16 = add nsw i32 %20, 1, !dbg !5629
  store i32 %inc16, i32* %number_dollar_extra_args, align 4, !dbg !5629
  br label %if.end17, !dbg !5630

if.end17:                                         ; preds = %if.then15, %land.lhs.true12, %lor.lhs.false10
  ret void, !dbg !5631
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @maybe_read_dollar_number(i8** %format, i32 %dollar_needed, %union.tree_node* %params, %union.tree_node** %param_ptr, %struct.format_kind_info* %fki) #0 !dbg !5632 {
entry:
  %retval = alloca i32, align 4
  %format.addr = alloca i8**, align 8
  %dollar_needed.addr = alloca i32, align 4
  %params.addr = alloca %union.tree_node*, align 8
  %param_ptr.addr = alloca %union.tree_node**, align 8
  %fki.addr = alloca %struct.format_kind_info*, align 8
  %argnum = alloca i32, align 4
  %overflow_flag = alloca i32, align 4
  %fcp = alloca i8*, align 8
  %nargnum = alloca i32, align 4
  %nalloc = alloca i32, align 4
  %i = alloca i32, align 4
  store i8** %format, i8*** %format.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %format.addr, metadata !5636, metadata !DIExpression()), !dbg !5637
  store i32 %dollar_needed, i32* %dollar_needed.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dollar_needed.addr, metadata !5638, metadata !DIExpression()), !dbg !5639
  store %union.tree_node* %params, %union.tree_node** %params.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %params.addr, metadata !5640, metadata !DIExpression()), !dbg !5641
  store %union.tree_node** %param_ptr, %union.tree_node*** %param_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %param_ptr.addr, metadata !5642, metadata !DIExpression()), !dbg !5643
  store %struct.format_kind_info* %fki, %struct.format_kind_info** %fki.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.format_kind_info** %fki.addr, metadata !5644, metadata !DIExpression()), !dbg !5645
  call void @llvm.dbg.declare(metadata i32* %argnum, metadata !5646, metadata !DIExpression()), !dbg !5647
  call void @llvm.dbg.declare(metadata i32* %overflow_flag, metadata !5648, metadata !DIExpression()), !dbg !5649
  call void @llvm.dbg.declare(metadata i8** %fcp, metadata !5650, metadata !DIExpression()), !dbg !5651
  %0 = load i8**, i8*** %format.addr, align 8, !dbg !5652
  %1 = load i8*, i8** %0, align 8, !dbg !5653
  store i8* %1, i8** %fcp, align 8, !dbg !5651
  %2 = load i8*, i8** %fcp, align 8, !dbg !5654
  %3 = load i8, i8* %2, align 1, !dbg !5654
  %conv = sext i8 %3 to i32, !dbg !5654
  %and = and i32 %conv, 255, !dbg !5654
  %idxprom = sext i32 %and to i64, !dbg !5654
  %arrayidx = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom, !dbg !5654
  %4 = load i16, i16* %arrayidx, align 2, !dbg !5654
  %conv1 = zext i16 %4 to i32, !dbg !5654
  %and2 = and i32 %conv1, 4, !dbg !5654
  %tobool = icmp ne i32 %and2, 0, !dbg !5654
  br i1 %tobool, label %if.end, label %if.then, !dbg !5656

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %dollar_needed.addr, align 4, !dbg !5657
  %tobool3 = icmp ne i32 %5, 0, !dbg !5657
  br i1 %tobool3, label %if.then4, label %if.else, !dbg !5660

if.then4:                                         ; preds = %if.then
  %call = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.63, i64 0, i64 0)), !dbg !5661
  store i32 -1, i32* %retval, align 4, !dbg !5663
  br label %return, !dbg !5663

if.else:                                          ; preds = %if.then
  store i32 0, i32* %retval, align 4, !dbg !5664
  br label %return, !dbg !5664

if.end:                                           ; preds = %entry
  store i32 0, i32* %argnum, align 4, !dbg !5665
  store i32 0, i32* %overflow_flag, align 4, !dbg !5666
  br label %while.cond, !dbg !5667

while.cond:                                       ; preds = %if.end17, %if.end
  %6 = load i8*, i8** %fcp, align 8, !dbg !5668
  %7 = load i8, i8* %6, align 1, !dbg !5668
  %conv5 = sext i8 %7 to i32, !dbg !5668
  %and6 = and i32 %conv5, 255, !dbg !5668
  %idxprom7 = sext i32 %and6 to i64, !dbg !5668
  %arrayidx8 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom7, !dbg !5668
  %8 = load i16, i16* %arrayidx8, align 2, !dbg !5668
  %conv9 = zext i16 %8 to i32, !dbg !5668
  %and10 = and i32 %conv9, 4, !dbg !5668
  %tobool11 = icmp ne i32 %and10, 0, !dbg !5667
  br i1 %tobool11, label %while.body, label %while.end, !dbg !5667

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %nargnum, metadata !5669, metadata !DIExpression()), !dbg !5671
  %9 = load i32, i32* %argnum, align 4, !dbg !5672
  %mul = mul nsw i32 10, %9, !dbg !5673
  %10 = load i8*, i8** %fcp, align 8, !dbg !5674
  %11 = load i8, i8* %10, align 1, !dbg !5675
  %conv12 = sext i8 %11 to i32, !dbg !5675
  %sub = sub nsw i32 %conv12, 48, !dbg !5676
  %add = add nsw i32 %mul, %sub, !dbg !5677
  store i32 %add, i32* %nargnum, align 4, !dbg !5678
  %12 = load i32, i32* %nargnum, align 4, !dbg !5679
  %cmp = icmp slt i32 %12, 0, !dbg !5681
  br i1 %cmp, label %if.then16, label %lor.lhs.false, !dbg !5682

lor.lhs.false:                                    ; preds = %while.body
  %13 = load i32, i32* %nargnum, align 4, !dbg !5683
  %div = sdiv i32 %13, 10, !dbg !5684
  %14 = load i32, i32* %argnum, align 4, !dbg !5685
  %cmp14 = icmp ne i32 %div, %14, !dbg !5686
  br i1 %cmp14, label %if.then16, label %if.end17, !dbg !5687

if.then16:                                        ; preds = %lor.lhs.false, %while.body
  store i32 1, i32* %overflow_flag, align 4, !dbg !5688
  br label %if.end17, !dbg !5689

if.end17:                                         ; preds = %if.then16, %lor.lhs.false
  %15 = load i32, i32* %nargnum, align 4, !dbg !5690
  store i32 %15, i32* %argnum, align 4, !dbg !5691
  %16 = load i8*, i8** %fcp, align 8, !dbg !5692
  %incdec.ptr = getelementptr inbounds i8, i8* %16, i32 1, !dbg !5692
  store i8* %incdec.ptr, i8** %fcp, align 8, !dbg !5692
  br label %while.cond, !dbg !5667, !llvm.loop !5693

while.end:                                        ; preds = %while.cond
  %17 = load i8*, i8** %fcp, align 8, !dbg !5695
  %18 = load i8, i8* %17, align 1, !dbg !5697
  %conv18 = sext i8 %18 to i32, !dbg !5697
  %cmp19 = icmp ne i32 %conv18, 36, !dbg !5698
  br i1 %cmp19, label %if.then21, label %if.end26, !dbg !5699

if.then21:                                        ; preds = %while.end
  %19 = load i32, i32* %dollar_needed.addr, align 4, !dbg !5700
  %tobool22 = icmp ne i32 %19, 0, !dbg !5700
  br i1 %tobool22, label %if.then23, label %if.else25, !dbg !5703

if.then23:                                        ; preds = %if.then21
  %call24 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.63, i64 0, i64 0)), !dbg !5704
  store i32 -1, i32* %retval, align 4, !dbg !5706
  br label %return, !dbg !5706

if.else25:                                        ; preds = %if.then21
  store i32 0, i32* %retval, align 4, !dbg !5707
  br label %return, !dbg !5707

if.end26:                                         ; preds = %while.end
  %20 = load i8*, i8** %fcp, align 8, !dbg !5708
  %add.ptr = getelementptr inbounds i8, i8* %20, i64 1, !dbg !5709
  %21 = load i8**, i8*** %format.addr, align 8, !dbg !5710
  store i8* %add.ptr, i8** %21, align 8, !dbg !5711
  %22 = load i32, i32* @pedantic, align 4, !dbg !5712
  %tobool27 = icmp ne i32 %22, 0, !dbg !5712
  br i1 %tobool27, label %land.lhs.true, label %if.end34, !dbg !5714

land.lhs.true:                                    ; preds = %if.end26
  %23 = load i32, i32* @dollar_format_warned, align 4, !dbg !5715
  %tobool28 = icmp ne i32 %23, 0, !dbg !5715
  br i1 %tobool28, label %if.end34, label %if.then29, !dbg !5716

if.then29:                                        ; preds = %land.lhs.true
  %24 = load i32, i32* @c_language, align 4, !dbg !5717
  %and30 = and i32 %24, 2, !dbg !5717
  %cmp31 = icmp ne i32 %and30, 0, !dbg !5717
  %25 = zext i1 %cmp31 to i64, !dbg !5717
  %cond = select i1 %cmp31, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.43, i64 0, i64 0), !dbg !5717
  %call33 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.65, i64 0, i64 0), i8* %cond), !dbg !5719
  store i32 1, i32* @dollar_format_warned, align 4, !dbg !5720
  br label %if.end34, !dbg !5721

if.end34:                                         ; preds = %if.then29, %land.lhs.true, %if.end26
  %26 = load i32, i32* %overflow_flag, align 4, !dbg !5722
  %tobool35 = icmp ne i32 %26, 0, !dbg !5722
  br i1 %tobool35, label %if.then44, label %lor.lhs.false36, !dbg !5724

lor.lhs.false36:                                  ; preds = %if.end34
  %27 = load i32, i32* %argnum, align 4, !dbg !5725
  %cmp37 = icmp eq i32 %27, 0, !dbg !5726
  br i1 %cmp37, label %if.then44, label %lor.lhs.false39, !dbg !5727

lor.lhs.false39:                                  ; preds = %lor.lhs.false36
  %28 = load i32, i32* @dollar_first_arg_num, align 4, !dbg !5728
  %tobool40 = icmp ne i32 %28, 0, !dbg !5728
  br i1 %tobool40, label %land.lhs.true41, label %if.end46, !dbg !5729

land.lhs.true41:                                  ; preds = %lor.lhs.false39
  %29 = load i32, i32* %argnum, align 4, !dbg !5730
  %30 = load i32, i32* @dollar_arguments_count, align 4, !dbg !5731
  %cmp42 = icmp sgt i32 %29, %30, !dbg !5732
  br i1 %cmp42, label %if.then44, label %if.end46, !dbg !5733

if.then44:                                        ; preds = %land.lhs.true41, %lor.lhs.false36, %if.end34
  %call45 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.66, i64 0, i64 0)), !dbg !5734
  store i32 -1, i32* %retval, align 4, !dbg !5736
  br label %return, !dbg !5736

if.end46:                                         ; preds = %land.lhs.true41, %lor.lhs.false39
  %31 = load i32, i32* %argnum, align 4, !dbg !5737
  %32 = load i32, i32* @dollar_max_arg_used, align 4, !dbg !5739
  %cmp47 = icmp sgt i32 %31, %32, !dbg !5740
  br i1 %cmp47, label %if.then49, label %if.end50, !dbg !5741

if.then49:                                        ; preds = %if.end46
  %33 = load i32, i32* %argnum, align 4, !dbg !5742
  store i32 %33, i32* @dollar_max_arg_used, align 4, !dbg !5743
  br label %if.end50, !dbg !5744

if.end50:                                         ; preds = %if.then49, %if.end46
  br label %while.cond51, !dbg !5745

while.cond51:                                     ; preds = %while.body54, %if.end50
  %34 = load i32, i32* @dollar_arguments_alloc, align 4, !dbg !5746
  %35 = load i32, i32* @dollar_max_arg_used, align 4, !dbg !5747
  %cmp52 = icmp slt i32 %34, %35, !dbg !5748
  br i1 %cmp52, label %while.body54, label %while.end66, !dbg !5745

while.body54:                                     ; preds = %while.cond51
  call void @llvm.dbg.declare(metadata i32* %nalloc, metadata !5749, metadata !DIExpression()), !dbg !5751
  %36 = load i32, i32* @dollar_arguments_alloc, align 4, !dbg !5752
  %mul55 = mul nsw i32 2, %36, !dbg !5753
  %add56 = add nsw i32 %mul55, 16, !dbg !5754
  store i32 %add56, i32* %nalloc, align 4, !dbg !5755
  %37 = load i8*, i8** @dollar_arguments_used, align 8, !dbg !5756
  %38 = load i32, i32* %nalloc, align 4, !dbg !5756
  %conv57 = sext i32 %38 to i64, !dbg !5756
  %mul58 = mul i64 1, %conv57, !dbg !5756
  %call59 = call i8* @xrealloc(i8* %37, i64 %mul58), !dbg !5756
  store i8* %call59, i8** @dollar_arguments_used, align 8, !dbg !5757
  %39 = load i8*, i8** @dollar_arguments_pointer_p, align 8, !dbg !5758
  %40 = load i32, i32* %nalloc, align 4, !dbg !5758
  %conv60 = sext i32 %40 to i64, !dbg !5758
  %mul61 = mul i64 1, %conv60, !dbg !5758
  %call62 = call i8* @xrealloc(i8* %39, i64 %mul61), !dbg !5758
  store i8* %call62, i8** @dollar_arguments_pointer_p, align 8, !dbg !5759
  %41 = load i8*, i8** @dollar_arguments_used, align 8, !dbg !5760
  %42 = load i32, i32* @dollar_arguments_alloc, align 4, !dbg !5761
  %idx.ext = sext i32 %42 to i64, !dbg !5762
  %add.ptr63 = getelementptr inbounds i8, i8* %41, i64 %idx.ext, !dbg !5762
  %43 = load i32, i32* %nalloc, align 4, !dbg !5763
  %44 = load i32, i32* @dollar_arguments_alloc, align 4, !dbg !5764
  %sub64 = sub nsw i32 %43, %44, !dbg !5765
  %conv65 = sext i32 %sub64 to i64, !dbg !5763
  call void @llvm.memset.p0i8.i64(i8* align 1 %add.ptr63, i8 0, i64 %conv65, i1 false), !dbg !5766
  %45 = load i32, i32* %nalloc, align 4, !dbg !5767
  store i32 %45, i32* @dollar_arguments_alloc, align 4, !dbg !5768
  br label %while.cond51, !dbg !5745, !llvm.loop !5769

while.end66:                                      ; preds = %while.cond51
  %46 = load %struct.format_kind_info*, %struct.format_kind_info** %fki.addr, align 8, !dbg !5771
  %flags = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %46, i32 0, i32 7, !dbg !5773
  %47 = load i32, i32* %flags, align 8, !dbg !5773
  %and67 = and i32 %47, 8, !dbg !5774
  %tobool68 = icmp ne i32 %and67, 0, !dbg !5774
  br i1 %tobool68, label %if.else81, label %land.lhs.true69, !dbg !5775

land.lhs.true69:                                  ; preds = %while.end66
  %48 = load i8*, i8** @dollar_arguments_used, align 8, !dbg !5776
  %49 = load i32, i32* %argnum, align 4, !dbg !5777
  %sub70 = sub nsw i32 %49, 1, !dbg !5778
  %idxprom71 = sext i32 %sub70 to i64, !dbg !5776
  %arrayidx72 = getelementptr inbounds i8, i8* %48, i64 %idxprom71, !dbg !5776
  %50 = load i8, i8* %arrayidx72, align 1, !dbg !5776
  %conv73 = sext i8 %50 to i32, !dbg !5776
  %cmp74 = icmp eq i32 %conv73, 1, !dbg !5779
  br i1 %cmp74, label %if.then76, label %if.else81, !dbg !5780

if.then76:                                        ; preds = %land.lhs.true69
  %51 = load i8*, i8** @dollar_arguments_used, align 8, !dbg !5781
  %52 = load i32, i32* %argnum, align 4, !dbg !5783
  %sub77 = sub nsw i32 %52, 1, !dbg !5784
  %idxprom78 = sext i32 %sub77 to i64, !dbg !5781
  %arrayidx79 = getelementptr inbounds i8, i8* %51, i64 %idxprom78, !dbg !5781
  store i8 2, i8* %arrayidx79, align 1, !dbg !5785
  %53 = load i32, i32* %argnum, align 4, !dbg !5786
  %54 = load %struct.format_kind_info*, %struct.format_kind_info** %fki.addr, align 8, !dbg !5787
  %name = getelementptr inbounds %struct.format_kind_info, %struct.format_kind_info* %54, i32 0, i32 0, !dbg !5788
  %55 = load i8*, i8** %name, align 8, !dbg !5788
  %call80 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.67, i64 0, i64 0), i32 %53, i8* %55), !dbg !5789
  br label %if.end85, !dbg !5790

if.else81:                                        ; preds = %land.lhs.true69, %while.end66
  %56 = load i8*, i8** @dollar_arguments_used, align 8, !dbg !5791
  %57 = load i32, i32* %argnum, align 4, !dbg !5792
  %sub82 = sub nsw i32 %57, 1, !dbg !5793
  %idxprom83 = sext i32 %sub82 to i64, !dbg !5791
  %arrayidx84 = getelementptr inbounds i8, i8* %56, i64 %idxprom83, !dbg !5791
  store i8 1, i8* %arrayidx84, align 1, !dbg !5794
  br label %if.end85

if.end85:                                         ; preds = %if.else81, %if.then76
  %58 = load i32, i32* @dollar_first_arg_num, align 4, !dbg !5795
  %tobool86 = icmp ne i32 %58, 0, !dbg !5795
  br i1 %tobool86, label %if.then87, label %if.else94, !dbg !5797

if.then87:                                        ; preds = %if.end85
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5798, metadata !DIExpression()), !dbg !5800
  %59 = load %union.tree_node*, %union.tree_node** %params.addr, align 8, !dbg !5801
  %60 = load %union.tree_node**, %union.tree_node*** %param_ptr.addr, align 8, !dbg !5802
  store %union.tree_node* %59, %union.tree_node** %60, align 8, !dbg !5803
  store i32 1, i32* %i, align 4, !dbg !5804
  br label %for.cond, !dbg !5806

for.cond:                                         ; preds = %for.inc, %if.then87
  %61 = load i32, i32* %i, align 4, !dbg !5807
  %62 = load i32, i32* %argnum, align 4, !dbg !5809
  %cmp88 = icmp slt i32 %61, %62, !dbg !5810
  br i1 %cmp88, label %land.rhs, label %land.end, !dbg !5811

land.rhs:                                         ; preds = %for.cond
  %63 = load %union.tree_node**, %union.tree_node*** %param_ptr.addr, align 8, !dbg !5812
  %64 = load %union.tree_node*, %union.tree_node** %63, align 8, !dbg !5813
  %cmp90 = icmp ne %union.tree_node* %64, null, !dbg !5814
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %65 = phi i1 [ false, %for.cond ], [ %cmp90, %land.rhs ], !dbg !5815
  br i1 %65, label %for.body, label %for.end, !dbg !5816

for.body:                                         ; preds = %land.end
  %66 = load %union.tree_node**, %union.tree_node*** %param_ptr.addr, align 8, !dbg !5817
  %67 = load %union.tree_node*, %union.tree_node** %66, align 8, !dbg !5817
  %common = bitcast %union.tree_node* %67 to %struct.tree_common*, !dbg !5817
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !5817
  %68 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5817
  %69 = load %union.tree_node**, %union.tree_node*** %param_ptr.addr, align 8, !dbg !5818
  store %union.tree_node* %68, %union.tree_node** %69, align 8, !dbg !5819
  br label %for.inc, !dbg !5820

for.inc:                                          ; preds = %for.body
  %70 = load i32, i32* %i, align 4, !dbg !5821
  %inc = add nsw i32 %70, 1, !dbg !5821
  store i32 %inc, i32* %i, align 4, !dbg !5821
  br label %for.cond, !dbg !5822, !llvm.loop !5823

for.end:                                          ; preds = %land.end
  %71 = load %union.tree_node**, %union.tree_node*** %param_ptr.addr, align 8, !dbg !5825
  %72 = load %union.tree_node*, %union.tree_node** %71, align 8, !dbg !5825
  %tobool92 = icmp ne %union.tree_node* %72, null, !dbg !5825
  br i1 %tobool92, label %cond.false, label %cond.true, !dbg !5825

cond.true:                                        ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i32 1088, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)), !dbg !5825
  br label %cond.end, !dbg !5825

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !5825

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond93 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5825
  br label %if.end95, !dbg !5826

if.else94:                                        ; preds = %if.end85
  %73 = load %union.tree_node**, %union.tree_node*** %param_ptr.addr, align 8, !dbg !5827
  store %union.tree_node* null, %union.tree_node** %73, align 8, !dbg !5828
  br label %if.end95

if.end95:                                         ; preds = %if.else94, %cond.end
  %74 = load i32, i32* %argnum, align 4, !dbg !5829
  store i32 %74, i32* %retval, align 4, !dbg !5830
  br label %return, !dbg !5830

return:                                           ; preds = %if.end95, %if.then44, %if.else25, %if.then23, %if.else, %if.then4
  %75 = load i32, i32* %retval, align 4, !dbg !5831
  ret i32 %75, !dbg !5831
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @avoid_dollar_number(i8* %format) #0 !dbg !5832 {
entry:
  %retval = alloca i8, align 1
  %format.addr = alloca i8*, align 8
  store i8* %format, i8** %format.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %format.addr, metadata !5835, metadata !DIExpression()), !dbg !5836
  %0 = load i8*, i8** %format.addr, align 8, !dbg !5837
  %1 = load i8, i8* %0, align 1, !dbg !5837
  %conv = sext i8 %1 to i32, !dbg !5837
  %and = and i32 %conv, 255, !dbg !5837
  %idxprom = sext i32 %and to i64, !dbg !5837
  %arrayidx = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom, !dbg !5837
  %2 = load i16, i16* %arrayidx, align 2, !dbg !5837
  %conv1 = zext i16 %2 to i32, !dbg !5837
  %and2 = and i32 %conv1, 4, !dbg !5837
  %tobool = icmp ne i32 %and2, 0, !dbg !5837
  br i1 %tobool, label %if.end, label %if.then, !dbg !5839

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5840
  br label %return, !dbg !5840

if.end:                                           ; preds = %entry
  br label %while.cond, !dbg !5841

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i8*, i8** %format.addr, align 8, !dbg !5842
  %4 = load i8, i8* %3, align 1, !dbg !5842
  %conv3 = sext i8 %4 to i32, !dbg !5842
  %and4 = and i32 %conv3, 255, !dbg !5842
  %idxprom5 = sext i32 %and4 to i64, !dbg !5842
  %arrayidx6 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom5, !dbg !5842
  %5 = load i16, i16* %arrayidx6, align 2, !dbg !5842
  %conv7 = zext i16 %5 to i32, !dbg !5842
  %and8 = and i32 %conv7, 4, !dbg !5842
  %tobool9 = icmp ne i32 %and8, 0, !dbg !5841
  br i1 %tobool9, label %while.body, label %while.end, !dbg !5841

while.body:                                       ; preds = %while.cond
  %6 = load i8*, i8** %format.addr, align 8, !dbg !5843
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1, !dbg !5843
  store i8* %incdec.ptr, i8** %format.addr, align 8, !dbg !5843
  br label %while.cond, !dbg !5841, !llvm.loop !5844

while.end:                                        ; preds = %while.cond
  %7 = load i8*, i8** %format.addr, align 8, !dbg !5845
  %8 = load i8, i8* %7, align 1, !dbg !5847
  %conv10 = sext i8 %8 to i32, !dbg !5847
  %cmp = icmp eq i32 %conv10, 36, !dbg !5848
  br i1 %cmp, label %if.then12, label %if.end13, !dbg !5849

if.then12:                                        ; preds = %while.end
  %call = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.68, i64 0, i64 0)), !dbg !5850
  store i8 1, i8* %retval, align 1, !dbg !5852
  br label %return, !dbg !5852

if.end13:                                         ; preds = %while.end
  store i8 0, i8* %retval, align 1, !dbg !5853
  br label %return, !dbg !5853

return:                                           ; preds = %if.end13, %if.then12, %if.then
  %9 = load i8, i8* %retval, align 1, !dbg !5854
  ret i8 %9, !dbg !5854
}

declare dso_local i8* @strchr(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.format_flag_spec* @get_flag_spec(%struct.format_flag_spec* %spec, i32 %flag, i8* %predicates) #0 !dbg !5855 {
entry:
  %retval = alloca %struct.format_flag_spec*, align 8
  %spec.addr = alloca %struct.format_flag_spec*, align 8
  %flag.addr = alloca i32, align 4
  %predicates.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct.format_flag_spec* %spec, %struct.format_flag_spec** %spec.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.format_flag_spec** %spec.addr, metadata !5858, metadata !DIExpression()), !dbg !5859
  store i32 %flag, i32* %flag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flag.addr, metadata !5860, metadata !DIExpression()), !dbg !5861
  store i8* %predicates, i8** %predicates.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %predicates.addr, metadata !5862, metadata !DIExpression()), !dbg !5863
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5864, metadata !DIExpression()), !dbg !5865
  store i32 0, i32* %i, align 4, !dbg !5866
  br label %for.cond, !dbg !5868

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.format_flag_spec*, %struct.format_flag_spec** %spec.addr, align 8, !dbg !5869
  %1 = load i32, i32* %i, align 4, !dbg !5871
  %idxprom = sext i32 %1 to i64, !dbg !5869
  %arrayidx = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %0, i64 %idxprom, !dbg !5869
  %flag_char = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %arrayidx, i32 0, i32 0, !dbg !5872
  %2 = load i32, i32* %flag_char, align 8, !dbg !5872
  %cmp = icmp ne i32 %2, 0, !dbg !5873
  br i1 %cmp, label %for.body, label %for.end, !dbg !5874

for.body:                                         ; preds = %for.cond
  %3 = load %struct.format_flag_spec*, %struct.format_flag_spec** %spec.addr, align 8, !dbg !5875
  %4 = load i32, i32* %i, align 4, !dbg !5878
  %idxprom1 = sext i32 %4 to i64, !dbg !5875
  %arrayidx2 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %3, i64 %idxprom1, !dbg !5875
  %flag_char3 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %arrayidx2, i32 0, i32 0, !dbg !5879
  %5 = load i32, i32* %flag_char3, align 8, !dbg !5879
  %6 = load i32, i32* %flag.addr, align 4, !dbg !5880
  %cmp4 = icmp ne i32 %5, %6, !dbg !5881
  br i1 %cmp4, label %if.then, label %if.end, !dbg !5882

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !5883

if.end:                                           ; preds = %for.body
  %7 = load i8*, i8** %predicates.addr, align 8, !dbg !5884
  %cmp5 = icmp ne i8* %7, null, !dbg !5886
  br i1 %cmp5, label %if.then6, label %if.else, !dbg !5887

if.then6:                                         ; preds = %if.end
  %8 = load %struct.format_flag_spec*, %struct.format_flag_spec** %spec.addr, align 8, !dbg !5888
  %9 = load i32, i32* %i, align 4, !dbg !5891
  %idxprom7 = sext i32 %9 to i64, !dbg !5888
  %arrayidx8 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %8, i64 %idxprom7, !dbg !5888
  %predicate = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %arrayidx8, i32 0, i32 1, !dbg !5892
  %10 = load i32, i32* %predicate, align 4, !dbg !5892
  %cmp9 = icmp ne i32 %10, 0, !dbg !5893
  br i1 %cmp9, label %land.lhs.true, label %if.end17, !dbg !5894

land.lhs.true:                                    ; preds = %if.then6
  %11 = load i8*, i8** %predicates.addr, align 8, !dbg !5895
  %12 = load %struct.format_flag_spec*, %struct.format_flag_spec** %spec.addr, align 8, !dbg !5896
  %13 = load i32, i32* %i, align 4, !dbg !5897
  %idxprom10 = sext i32 %13 to i64, !dbg !5896
  %arrayidx11 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %12, i64 %idxprom10, !dbg !5896
  %predicate12 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %arrayidx11, i32 0, i32 1, !dbg !5898
  %14 = load i32, i32* %predicate12, align 4, !dbg !5898
  %call = call i8* @strchr(i8* %11, i32 %14), !dbg !5899
  %cmp13 = icmp ne i8* %call, null, !dbg !5900
  br i1 %cmp13, label %if.then14, label %if.end17, !dbg !5901

if.then14:                                        ; preds = %land.lhs.true
  %15 = load %struct.format_flag_spec*, %struct.format_flag_spec** %spec.addr, align 8, !dbg !5902
  %16 = load i32, i32* %i, align 4, !dbg !5903
  %idxprom15 = sext i32 %16 to i64, !dbg !5902
  %arrayidx16 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %15, i64 %idxprom15, !dbg !5902
  store %struct.format_flag_spec* %arrayidx16, %struct.format_flag_spec** %retval, align 8, !dbg !5904
  br label %return, !dbg !5904

if.end17:                                         ; preds = %land.lhs.true, %if.then6
  br label %if.end26, !dbg !5905

if.else:                                          ; preds = %if.end
  %17 = load %struct.format_flag_spec*, %struct.format_flag_spec** %spec.addr, align 8, !dbg !5906
  %18 = load i32, i32* %i, align 4, !dbg !5908
  %idxprom18 = sext i32 %18 to i64, !dbg !5906
  %arrayidx19 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %17, i64 %idxprom18, !dbg !5906
  %predicate20 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %arrayidx19, i32 0, i32 1, !dbg !5909
  %19 = load i32, i32* %predicate20, align 4, !dbg !5909
  %cmp21 = icmp eq i32 %19, 0, !dbg !5910
  br i1 %cmp21, label %if.then22, label %if.end25, !dbg !5911

if.then22:                                        ; preds = %if.else
  %20 = load %struct.format_flag_spec*, %struct.format_flag_spec** %spec.addr, align 8, !dbg !5912
  %21 = load i32, i32* %i, align 4, !dbg !5913
  %idxprom23 = sext i32 %21 to i64, !dbg !5912
  %arrayidx24 = getelementptr inbounds %struct.format_flag_spec, %struct.format_flag_spec* %20, i64 %idxprom23, !dbg !5912
  store %struct.format_flag_spec* %arrayidx24, %struct.format_flag_spec** %retval, align 8, !dbg !5914
  br label %return, !dbg !5914

if.end25:                                         ; preds = %if.else
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.end17
  br label %for.inc, !dbg !5915

for.inc:                                          ; preds = %if.end26, %if.then
  %22 = load i32, i32* %i, align 4, !dbg !5916
  %inc = add nsw i32 %22, 1, !dbg !5916
  store i32 %inc, i32* %i, align 4, !dbg !5916
  br label %for.cond, !dbg !5917, !llvm.loop !5918

for.end:                                          ; preds = %for.cond
  %23 = load i8*, i8** %predicates.addr, align 8, !dbg !5920
  %tobool = icmp ne i8* %23, null, !dbg !5920
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5920

cond.true:                                        ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i32 1177, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)), !dbg !5920
  br label %cond.end, !dbg !5920

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !5920

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5920
  store %struct.format_flag_spec* null, %struct.format_flag_spec** %retval, align 8, !dbg !5921
  br label %return, !dbg !5921

return:                                           ; preds = %cond.end, %if.then22, %if.then14
  %24 = load %struct.format_flag_spec*, %struct.format_flag_spec** %retval, align 8, !dbg !5922
  ret %struct.format_flag_spec* %24, !dbg !5922
}

declare dso_local i8* @pool_alloc(%struct.alloc_pool_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @check_format_types(%struct.format_wanted_type* %types, i8* %format_start, i32 %format_length) #0 !dbg !5923 {
entry:
  %types.addr = alloca %struct.format_wanted_type*, align 8
  %format_start.addr = alloca i8*, align 8
  %format_length.addr = alloca i32, align 4
  %cur_param = alloca %union.tree_node*, align 8
  %cur_type = alloca %union.tree_node*, align 8
  %orig_cur_type = alloca %union.tree_node*, align 8
  %wanted_type = alloca %union.tree_node*, align 8
  %arg_num = alloca i32, align 4
  %i = alloca i32, align 4
  %char_type_flag = alloca i32, align 4
  store %struct.format_wanted_type* %types, %struct.format_wanted_type** %types.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.format_wanted_type** %types.addr, metadata !5926, metadata !DIExpression()), !dbg !5927
  store i8* %format_start, i8** %format_start.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %format_start.addr, metadata !5928, metadata !DIExpression()), !dbg !5929
  store i32 %format_length, i32* %format_length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %format_length.addr, metadata !5930, metadata !DIExpression()), !dbg !5931
  br label %for.cond, !dbg !5932

for.cond:                                         ; preds = %for.inc253, %entry
  %0 = load %struct.format_wanted_type*, %struct.format_wanted_type** %types.addr, align 8, !dbg !5933
  %cmp = icmp ne %struct.format_wanted_type* %0, null, !dbg !5936
  br i1 %cmp, label %for.body, label %for.end254, !dbg !5937

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %cur_param, metadata !5938, metadata !DIExpression()), !dbg !5940
  call void @llvm.dbg.declare(metadata %union.tree_node** %cur_type, metadata !5941, metadata !DIExpression()), !dbg !5942
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_cur_type, metadata !5943, metadata !DIExpression()), !dbg !5944
  call void @llvm.dbg.declare(metadata %union.tree_node** %wanted_type, metadata !5945, metadata !DIExpression()), !dbg !5946
  call void @llvm.dbg.declare(metadata i32* %arg_num, metadata !5947, metadata !DIExpression()), !dbg !5948
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5949, metadata !DIExpression()), !dbg !5950
  call void @llvm.dbg.declare(metadata i32* %char_type_flag, metadata !5951, metadata !DIExpression()), !dbg !5952
  %1 = load %struct.format_wanted_type*, %struct.format_wanted_type** %types.addr, align 8, !dbg !5953
  %param = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %1, i32 0, i32 8, !dbg !5954
  %2 = load %union.tree_node*, %union.tree_node** %param, align 8, !dbg !5954
  store %union.tree_node* %2, %union.tree_node** %cur_param, align 8, !dbg !5955
  %3 = load %union.tree_node*, %union.tree_node** %cur_param, align 8, !dbg !5956
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !5956
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5956
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5956
  store %union.tree_node* %4, %union.tree_node** %cur_type, align 8, !dbg !5957
  %5 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !5958
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !5960
  %cmp1 = icmp eq %union.tree_node* %5, %6, !dbg !5961
  br i1 %cmp1, label %if.then, label %if.end, !dbg !5962

if.then:                                          ; preds = %for.body
  br label %for.inc253, !dbg !5963

if.end:                                           ; preds = %for.body
  %7 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !5964
  store %union.tree_node* %7, %union.tree_node** %orig_cur_type, align 8, !dbg !5965
  store i32 0, i32* %char_type_flag, align 4, !dbg !5966
  %8 = load %struct.format_wanted_type*, %struct.format_wanted_type** %types.addr, align 8, !dbg !5967
  %wanted_type2 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %8, i32 0, i32 0, !dbg !5968
  %9 = load %union.tree_node*, %union.tree_node** %wanted_type2, align 8, !dbg !5968
  store %union.tree_node* %9, %union.tree_node** %wanted_type, align 8, !dbg !5969
  %10 = load %struct.format_wanted_type*, %struct.format_wanted_type** %types.addr, align 8, !dbg !5970
  %arg_num3 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %10, i32 0, i32 9, !dbg !5971
  %11 = load i32, i32* %arg_num3, align 8, !dbg !5971
  store i32 %11, i32* %arg_num, align 4, !dbg !5972
  %12 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !5973
  %tobool = icmp ne %union.tree_node* %12, null, !dbg !5973
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5973

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i32 2153, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)), !dbg !5973
  br label %cond.end, !dbg !5973

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5973

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5973
  %13 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !5974
  %14 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !5974
  %cmp4 = icmp ne %union.tree_node* %13, %14, !dbg !5974
  br i1 %cmp4, label %cond.false7, label %lor.lhs.false, !dbg !5974

lor.lhs.false:                                    ; preds = %cond.end
  %15 = load %struct.format_wanted_type*, %struct.format_wanted_type** %types.addr, align 8, !dbg !5974
  %pointer_count = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %15, i32 0, i32 3, !dbg !5974
  %16 = load i32, i32* %pointer_count, align 4, !dbg !5974
  %tobool5 = icmp ne i32 %16, 0, !dbg !5974
  br i1 %tobool5, label %cond.false7, label %cond.true6, !dbg !5974

cond.true6:                                       ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i32 2154, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)), !dbg !5974
  br label %cond.end8, !dbg !5974

cond.false7:                                      ; preds = %lor.lhs.false, %cond.end
  br label %cond.end8, !dbg !5974

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i32 [ 0, %cond.true6 ], [ 0, %cond.false7 ], !dbg !5974
  %17 = load %struct.format_wanted_type*, %struct.format_wanted_type** %types.addr, align 8, !dbg !5975
  %pointer_count10 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %17, i32 0, i32 3, !dbg !5977
  %18 = load i32, i32* %pointer_count10, align 4, !dbg !5977
  %cmp11 = icmp eq i32 %18, 0, !dbg !5978
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !5979

if.then12:                                        ; preds = %cond.end8
  %19 = load %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 34, i32 6), align 8, !dbg !5980
  %20 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !5981
  %call = call %union.tree_node* %19(%union.tree_node* %20), !dbg !5982
  store %union.tree_node* %call, %union.tree_node** %wanted_type, align 8, !dbg !5983
  br label %if.end13, !dbg !5984

if.end13:                                         ; preds = %if.then12, %cond.end8
  %21 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !5985
  %type14 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !5985
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type14, i32 0, i32 16, !dbg !5985
  %22 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !5985
  store %union.tree_node* %22, %union.tree_node** %wanted_type, align 8, !dbg !5986
  %23 = load %union.tree_node*, %union.tree_node** %cur_param, align 8, !dbg !5987
  %call15 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %23), !dbg !5987
  store %union.tree_node* %call15, %union.tree_node** %cur_param, align 8, !dbg !5987
  store i32 0, i32* %i, align 4, !dbg !5988
  br label %for.cond16, !dbg !5990

for.cond16:                                       ; preds = %for.inc, %if.end13
  %24 = load i32, i32* %i, align 4, !dbg !5991
  %25 = load %struct.format_wanted_type*, %struct.format_wanted_type** %types.addr, align 8, !dbg !5993
  %pointer_count17 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %25, i32 0, i32 3, !dbg !5994
  %26 = load i32, i32* %pointer_count17, align 4, !dbg !5994
  %cmp18 = icmp slt i32 %24, %26, !dbg !5995
  br i1 %cmp18, label %for.body19, label %for.end, !dbg !5996

for.body19:                                       ; preds = %for.cond16
  %27 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !5997
  %base = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !5997
  %28 = bitcast %struct.tree_base* %base to i64*, !dbg !5997
  %bf.load = load i64, i64* %28, align 8, !dbg !5997
  %bf.clear = and i64 %bf.load, 65535, !dbg !5997
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5997
  %cmp20 = icmp eq i32 %bf.cast, 10, !dbg !6000
  br i1 %cmp20, label %if.then21, label %if.else120, !dbg !6001

if.then21:                                        ; preds = %for.body19
  %29 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !6002
  %common22 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !6002
  %type23 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common22, i32 0, i32 2, !dbg !6002
  %30 = load %union.tree_node*, %union.tree_node** %type23, align 8, !dbg !6002
  store %union.tree_node* %30, %union.tree_node** %cur_type, align 8, !dbg !6004
  %31 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !6005
  %32 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !6007
  %cmp24 = icmp eq %union.tree_node* %31, %32, !dbg !6008
  br i1 %cmp24, label %if.then25, label %if.end26, !dbg !6009

if.then25:                                        ; preds = %if.then21
  br label %for.end, !dbg !6010

if.end26:                                         ; preds = %if.then21
  %33 = load %struct.format_wanted_type*, %struct.format_wanted_type** %types.addr, align 8, !dbg !6011
  %writing_in_flag = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %33, i32 0, i32 5, !dbg !6013
  %34 = load i32, i32* %writing_in_flag, align 4, !dbg !6013
  %tobool27 = icmp ne i32 %34, 0, !dbg !6011
  br i1 %tobool27, label %land.lhs.true, label %if.end36, !dbg !6014

land.lhs.true:                                    ; preds = %if.end26
  %35 = load i32, i32* %i, align 4, !dbg !6015
  %cmp28 = icmp eq i32 %35, 0, !dbg !6016
  br i1 %cmp28, label %land.lhs.true29, label %if.end36, !dbg !6017

land.lhs.true29:                                  ; preds = %land.lhs.true
  %36 = load %union.tree_node*, %union.tree_node** %cur_param, align 8, !dbg !6018
  %cmp30 = icmp ne %union.tree_node* %36, null, !dbg !6019
  br i1 %cmp30, label %land.lhs.true31, label %if.end36, !dbg !6020

land.lhs.true31:                                  ; preds = %land.lhs.true29
  %37 = load %union.tree_node*, %union.tree_node** %cur_param, align 8, !dbg !6021
  %call32 = call i32 @integer_zerop(%union.tree_node* %37), !dbg !6022
  %tobool33 = icmp ne i32 %call32, 0, !dbg !6022
  br i1 %tobool33, label %if.then34, label %if.end36, !dbg !6023

if.then34:                                        ; preds = %land.lhs.true31
  %38 = load i32, i32* %arg_num, align 4, !dbg !6024
  %call35 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.69, i64 0, i64 0), i32 %38), !dbg !6025
  br label %if.end36, !dbg !6025

if.end36:                                         ; preds = %if.then34, %land.lhs.true31, %land.lhs.true29, %land.lhs.true, %if.end26
  %39 = load %struct.format_wanted_type*, %struct.format_wanted_type** %types.addr, align 8, !dbg !6026
  %reading_from_flag = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %39, i32 0, i32 6, !dbg !6028
  %40 = load i32, i32* %reading_from_flag, align 8, !dbg !6028
  %tobool37 = icmp ne i32 %40, 0, !dbg !6026
  br i1 %tobool37, label %land.lhs.true38, label %if.end47, !dbg !6029

land.lhs.true38:                                  ; preds = %if.end36
  %41 = load i32, i32* %i, align 4, !dbg !6030
  %cmp39 = icmp eq i32 %41, 0, !dbg !6031
  br i1 %cmp39, label %land.lhs.true40, label %if.end47, !dbg !6032

land.lhs.true40:                                  ; preds = %land.lhs.true38
  %42 = load %union.tree_node*, %union.tree_node** %cur_param, align 8, !dbg !6033
  %cmp41 = icmp ne %union.tree_node* %42, null, !dbg !6034
  br i1 %cmp41, label %land.lhs.true42, label %if.end47, !dbg !6035

land.lhs.true42:                                  ; preds = %land.lhs.true40
  %43 = load %union.tree_node*, %union.tree_node** %cur_param, align 8, !dbg !6036
  %call43 = call i32 @integer_zerop(%union.tree_node* %43), !dbg !6037
  %tobool44 = icmp ne i32 %call43, 0, !dbg !6037
  br i1 %tobool44, label %if.then45, label %if.end47, !dbg !6038

if.then45:                                        ; preds = %land.lhs.true42
  %44 = load i32, i32* %arg_num, align 4, !dbg !6039
  %call46 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.70, i64 0, i64 0), i32 %44), !dbg !6040
  br label %if.end47, !dbg !6040

if.end47:                                         ; preds = %if.then45, %land.lhs.true42, %land.lhs.true40, %land.lhs.true38, %if.end36
  %45 = load %union.tree_node*, %union.tree_node** %cur_param, align 8, !dbg !6041
  %cmp48 = icmp ne %union.tree_node* %45, null, !dbg !6043
  br i1 %cmp48, label %land.lhs.true49, label %if.else, !dbg !6044

land.lhs.true49:                                  ; preds = %if.end47
  %46 = load %union.tree_node*, %union.tree_node** %cur_param, align 8, !dbg !6045
  %base50 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !6045
  %47 = bitcast %struct.tree_base* %base50 to i64*, !dbg !6045
  %bf.load51 = load i64, i64* %47, align 8, !dbg !6045
  %bf.clear52 = and i64 %bf.load51, 65535, !dbg !6045
  %bf.cast53 = trunc i64 %bf.clear52 to i32, !dbg !6045
  %cmp54 = icmp eq i32 %bf.cast53, 121, !dbg !6046
  br i1 %cmp54, label %if.then55, label %if.else, !dbg !6047

if.then55:                                        ; preds = %land.lhs.true49
  %48 = load %union.tree_node*, %union.tree_node** %cur_param, align 8, !dbg !6048
  %exp = bitcast %union.tree_node* %48 to %struct.tree_exp*, !dbg !6048
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6048
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6048
  %49 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6048
  store %union.tree_node* %49, %union.tree_node** %cur_param, align 8, !dbg !6049
  br label %if.end56, !dbg !6050

if.else:                                          ; preds = %land.lhs.true49, %if.end47
  store %union.tree_node* null, %union.tree_node** %cur_param, align 8, !dbg !6051
  br label %if.end56

if.end56:                                         ; preds = %if.else, %if.then55
  %50 = load %struct.format_wanted_type*, %struct.format_wanted_type** %types.addr, align 8, !dbg !6052
  %writing_in_flag57 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %50, i32 0, i32 5, !dbg !6054
  %51 = load i32, i32* %writing_in_flag57, align 4, !dbg !6054
  %tobool58 = icmp ne i32 %51, 0, !dbg !6052
  br i1 %tobool58, label %land.lhs.true59, label %if.end93, !dbg !6055

land.lhs.true59:                                  ; preds = %if.end56
  %52 = load i32, i32* %i, align 4, !dbg !6056
  %cmp60 = icmp eq i32 %52, 0, !dbg !6057
  br i1 %cmp60, label %land.lhs.true61, label %if.end93, !dbg !6058

land.lhs.true61:                                  ; preds = %land.lhs.true59
  %53 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !6059
  %base62 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !6059
  %54 = bitcast %struct.tree_base* %base62 to i64*, !dbg !6059
  %bf.load63 = load i64, i64* %54, align 8, !dbg !6059
  %bf.lshr = lshr i64 %bf.load63, 20, !dbg !6059
  %bf.clear64 = and i64 %bf.lshr, 1, !dbg !6059
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !6059
  %tobool66 = icmp ne i32 %bf.cast65, 0, !dbg !6059
  br i1 %tobool66, label %if.then91, label %lor.lhs.false67, !dbg !6060

lor.lhs.false67:                                  ; preds = %land.lhs.true61
  %55 = load %union.tree_node*, %union.tree_node** %cur_param, align 8, !dbg !6061
  %cmp68 = icmp ne %union.tree_node* %55, null, !dbg !6062
  br i1 %cmp68, label %land.lhs.true69, label %if.end93, !dbg !6063

land.lhs.true69:                                  ; preds = %lor.lhs.false67
  %56 = load %union.tree_node*, %union.tree_node** %cur_param, align 8, !dbg !6064
  %base70 = bitcast %union.tree_node* %56 to %struct.tree_base*, !dbg !6064
  %57 = bitcast %struct.tree_base* %base70 to i64*, !dbg !6064
  %bf.load71 = load i64, i64* %57, align 8, !dbg !6064
  %bf.clear72 = and i64 %bf.load71, 65535, !dbg !6064
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !6064
  %idxprom = sext i32 %bf.cast73 to i64, !dbg !6064
  %arrayidx74 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6064
  %58 = load i32, i32* %arrayidx74, align 4, !dbg !6064
  %cmp75 = icmp eq i32 %58, 1, !dbg !6064
  br i1 %cmp75, label %if.then91, label %lor.lhs.false76, !dbg !6065

lor.lhs.false76:                                  ; preds = %land.lhs.true69
  %59 = load %union.tree_node*, %union.tree_node** %cur_param, align 8, !dbg !6066
  %base77 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !6066
  %60 = bitcast %struct.tree_base* %base77 to i64*, !dbg !6066
  %bf.load78 = load i64, i64* %60, align 8, !dbg !6066
  %bf.clear79 = and i64 %bf.load78, 65535, !dbg !6066
  %bf.cast80 = trunc i64 %bf.clear79 to i32, !dbg !6066
  %idxprom81 = sext i32 %bf.cast80 to i64, !dbg !6066
  %arrayidx82 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom81, !dbg !6066
  %61 = load i32, i32* %arrayidx82, align 4, !dbg !6066
  %cmp83 = icmp eq i32 %61, 3, !dbg !6066
  br i1 %cmp83, label %land.lhs.true84, label %if.end93, !dbg !6067

land.lhs.true84:                                  ; preds = %lor.lhs.false76
  %62 = load %union.tree_node*, %union.tree_node** %cur_param, align 8, !dbg !6068
  %base85 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !6068
  %63 = bitcast %struct.tree_base* %base85 to i64*, !dbg !6068
  %bf.load86 = load i64, i64* %63, align 8, !dbg !6068
  %bf.lshr87 = lshr i64 %bf.load86, 20, !dbg !6068
  %bf.clear88 = and i64 %bf.lshr87, 1, !dbg !6068
  %bf.cast89 = trunc i64 %bf.clear88 to i32, !dbg !6068
  %tobool90 = icmp ne i32 %bf.cast89, 0, !dbg !6068
  br i1 %tobool90, label %if.then91, label %if.end93, !dbg !6069

if.then91:                                        ; preds = %land.lhs.true84, %land.lhs.true69, %land.lhs.true61
  %64 = load i32, i32* %arg_num, align 4, !dbg !6070
  %call92 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.71, i64 0, i64 0), i32 %64), !dbg !6071
  br label %if.end93, !dbg !6071

if.end93:                                         ; preds = %if.then91, %land.lhs.true84, %lor.lhs.false76, %lor.lhs.false67, %land.lhs.true59, %if.end56
  %65 = load i32, i32* %i, align 4, !dbg !6072
  %cmp94 = icmp sgt i32 %65, 0, !dbg !6074
  br i1 %cmp94, label %land.lhs.true95, label %if.end119, !dbg !6075

land.lhs.true95:                                  ; preds = %if.end93
  %66 = load i32, i32* @pedantic, align 4, !dbg !6076
  %tobool96 = icmp ne i32 %66, 0, !dbg !6076
  br i1 %tobool96, label %land.lhs.true97, label %if.end119, !dbg !6077

land.lhs.true97:                                  ; preds = %land.lhs.true95
  %67 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !6078
  %base98 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !6078
  %68 = bitcast %struct.tree_base* %base98 to i64*, !dbg !6078
  %bf.load99 = load i64, i64* %68, align 8, !dbg !6078
  %bf.lshr100 = lshr i64 %bf.load99, 20, !dbg !6078
  %bf.clear101 = and i64 %bf.lshr100, 1, !dbg !6078
  %bf.cast102 = trunc i64 %bf.clear101 to i32, !dbg !6078
  %tobool103 = icmp ne i32 %bf.cast102, 0, !dbg !6078
  br i1 %tobool103, label %if.then117, label %lor.lhs.false104, !dbg !6079

lor.lhs.false104:                                 ; preds = %land.lhs.true97
  %69 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !6080
  %base105 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !6080
  %70 = bitcast %struct.tree_base* %base105 to i64*, !dbg !6080
  %bf.load106 = load i64, i64* %70, align 8, !dbg !6080
  %bf.lshr107 = lshr i64 %bf.load106, 19, !dbg !6080
  %bf.clear108 = and i64 %bf.lshr107, 1, !dbg !6080
  %bf.cast109 = trunc i64 %bf.clear108 to i32, !dbg !6080
  %tobool110 = icmp ne i32 %bf.cast109, 0, !dbg !6080
  br i1 %tobool110, label %if.then117, label %lor.lhs.false111, !dbg !6081

lor.lhs.false111:                                 ; preds = %lor.lhs.false104
  %71 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !6082
  %type112 = bitcast %union.tree_node* %71 to %struct.tree_type*, !dbg !6082
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type112, i32 0, i32 6, !dbg !6082
  %bf.load113 = load i32, i32* %restrict_flag, align 4, !dbg !6082
  %bf.lshr114 = lshr i32 %bf.load113, 13, !dbg !6082
  %bf.clear115 = and i32 %bf.lshr114, 1, !dbg !6082
  %tobool116 = icmp ne i32 %bf.clear115, 0, !dbg !6082
  br i1 %tobool116, label %if.then117, label %if.end119, !dbg !6083

if.then117:                                       ; preds = %lor.lhs.false111, %lor.lhs.false104, %land.lhs.true97
  %72 = load i32, i32* %arg_num, align 4, !dbg !6084
  %call118 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.72, i64 0, i64 0), i32 %72), !dbg !6085
  br label %if.end119, !dbg !6085

if.end119:                                        ; preds = %if.then117, %lor.lhs.false111, %land.lhs.true95, %if.end93
  br label %if.end122, !dbg !6086

if.else120:                                       ; preds = %for.body19
  %73 = load %struct.format_wanted_type*, %struct.format_wanted_type** %types.addr, align 8, !dbg !6087
  %name = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %73, i32 0, i32 7, !dbg !6089
  %74 = load i8*, i8** %name, align 8, !dbg !6089
  %75 = load i8*, i8** %format_start.addr, align 8, !dbg !6090
  %76 = load i32, i32* %format_length.addr, align 4, !dbg !6091
  %77 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !6092
  %78 = load %struct.format_wanted_type*, %struct.format_wanted_type** %types.addr, align 8, !dbg !6093
  %pointer_count121 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %78, i32 0, i32 3, !dbg !6094
  %79 = load i32, i32* %pointer_count121, align 4, !dbg !6094
  %80 = load %struct.format_wanted_type*, %struct.format_wanted_type** %types.addr, align 8, !dbg !6095
  %wanted_type_name = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %80, i32 0, i32 1, !dbg !6096
  %81 = load i8*, i8** %wanted_type_name, align 8, !dbg !6096
  %82 = load %union.tree_node*, %union.tree_node** %orig_cur_type, align 8, !dbg !6097
  %83 = load i32, i32* %arg_num, align 4, !dbg !6098
  call void @format_type_warning(i8* %74, i8* %75, i32 %76, %union.tree_node* %77, i32 %79, i8* %81, %union.tree_node* %82, i32 %83), !dbg !6099
  br label %for.end, !dbg !6100

if.end122:                                        ; preds = %if.end119
  br label %for.inc, !dbg !6101

for.inc:                                          ; preds = %if.end122
  %84 = load i32, i32* %i, align 4, !dbg !6102
  %inc = add nsw i32 %84, 1, !dbg !6102
  store i32 %inc, i32* %i, align 4, !dbg !6102
  br label %for.cond16, !dbg !6103, !llvm.loop !6104

for.end:                                          ; preds = %if.else120, %if.then25, %for.cond16
  %85 = load i32, i32* %i, align 4, !dbg !6106
  %86 = load %struct.format_wanted_type*, %struct.format_wanted_type** %types.addr, align 8, !dbg !6108
  %pointer_count123 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %86, i32 0, i32 3, !dbg !6109
  %87 = load i32, i32* %pointer_count123, align 4, !dbg !6109
  %cmp124 = icmp slt i32 %85, %87, !dbg !6110
  br i1 %cmp124, label %if.then125, label %if.end126, !dbg !6111

if.then125:                                       ; preds = %for.end
  br label %for.inc253, !dbg !6112

if.end126:                                        ; preds = %for.end
  %88 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !6113
  %type127 = bitcast %union.tree_node* %88 to %struct.tree_type*, !dbg !6113
  %main_variant128 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type127, i32 0, i32 16, !dbg !6113
  %89 = load %union.tree_node*, %union.tree_node** %main_variant128, align 8, !dbg !6113
  store %union.tree_node* %89, %union.tree_node** %cur_type, align 8, !dbg !6114
  %90 = load %struct.format_wanted_type*, %struct.format_wanted_type** %types.addr, align 8, !dbg !6115
  %char_lenient_flag = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %90, i32 0, i32 4, !dbg !6117
  %91 = load i32, i32* %char_lenient_flag, align 8, !dbg !6117
  %tobool129 = icmp ne i32 %91, 0, !dbg !6115
  br i1 %tobool129, label %if.then130, label %if.end135, !dbg !6118

if.then130:                                       ; preds = %if.end126
  %92 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !6119
  %93 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 16, !dbg !6120
  %cmp131 = icmp eq %union.tree_node* %92, %93, !dbg !6121
  br i1 %cmp131, label %lor.end, label %lor.lhs.false132, !dbg !6122

lor.lhs.false132:                                 ; preds = %if.then130
  %94 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !6123
  %95 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 1), align 8, !dbg !6124
  %cmp133 = icmp eq %union.tree_node* %94, %95, !dbg !6125
  br i1 %cmp133, label %lor.end, label %lor.rhs, !dbg !6126

lor.rhs:                                          ; preds = %lor.lhs.false132
  %96 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !6127
  %97 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 2), align 16, !dbg !6128
  %cmp134 = icmp eq %union.tree_node* %96, %97, !dbg !6129
  br label %lor.end, !dbg !6126

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false132, %if.then130
  %98 = phi i1 [ true, %lor.lhs.false132 ], [ true, %if.then130 ], [ %cmp134, %lor.rhs ]
  %lor.ext = zext i1 %98 to i32, !dbg !6126
  store i32 %lor.ext, i32* %char_type_flag, align 4, !dbg !6130
  br label %if.end135, !dbg !6131

if.end135:                                        ; preds = %lor.end, %if.end126
  %99 = load i32 (%union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*, %union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 24), align 8, !dbg !6132
  %100 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !6134
  %101 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !6135
  %call136 = call i32 %99(%union.tree_node* %100, %union.tree_node* %101), !dbg !6136
  %tobool137 = icmp ne i32 %call136, 0, !dbg !6136
  br i1 %tobool137, label %if.then138, label %if.end139, !dbg !6137

if.then138:                                       ; preds = %if.end135
  br label %for.inc253, !dbg !6138

if.end139:                                        ; preds = %if.end135
  %102 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !6139
  %103 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !6141
  %cmp140 = icmp eq %union.tree_node* %102, %103, !dbg !6142
  br i1 %cmp140, label %land.lhs.true141, label %if.end148, !dbg !6143

land.lhs.true141:                                 ; preds = %if.end139
  %104 = load i32, i32* @pedantic, align 4, !dbg !6144
  %tobool142 = icmp ne i32 %104, 0, !dbg !6144
  br i1 %tobool142, label %lor.lhs.false143, label %if.then147, !dbg !6145

lor.lhs.false143:                                 ; preds = %land.lhs.true141
  %105 = load i32, i32* %i, align 4, !dbg !6146
  %cmp144 = icmp eq i32 %105, 1, !dbg !6147
  br i1 %cmp144, label %land.lhs.true145, label %if.end148, !dbg !6148

land.lhs.true145:                                 ; preds = %lor.lhs.false143
  %106 = load i32, i32* %char_type_flag, align 4, !dbg !6149
  %tobool146 = icmp ne i32 %106, 0, !dbg !6149
  br i1 %tobool146, label %if.then147, label %if.end148, !dbg !6150

if.then147:                                       ; preds = %land.lhs.true145, %land.lhs.true141
  br label %for.inc253, !dbg !6151

if.end148:                                        ; preds = %land.lhs.true145, %lor.lhs.false143, %if.end139
  %107 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !6152
  %base149 = bitcast %union.tree_node* %107 to %struct.tree_base*, !dbg !6152
  %108 = bitcast %struct.tree_base* %base149 to i64*, !dbg !6152
  %bf.load150 = load i64, i64* %108, align 8, !dbg !6152
  %bf.clear151 = and i64 %bf.load150, 65535, !dbg !6152
  %bf.cast152 = trunc i64 %bf.clear151 to i32, !dbg !6152
  %cmp153 = icmp eq i32 %bf.cast152, 8, !dbg !6154
  br i1 %cmp153, label %land.lhs.true154, label %if.end182, !dbg !6155

land.lhs.true154:                                 ; preds = %if.end148
  %109 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !6156
  %base155 = bitcast %union.tree_node* %109 to %struct.tree_base*, !dbg !6156
  %110 = bitcast %struct.tree_base* %base155 to i64*, !dbg !6156
  %bf.load156 = load i64, i64* %110, align 8, !dbg !6156
  %bf.clear157 = and i64 %bf.load156, 65535, !dbg !6156
  %bf.cast158 = trunc i64 %bf.clear157 to i32, !dbg !6156
  %cmp159 = icmp eq i32 %bf.cast158, 8, !dbg !6157
  br i1 %cmp159, label %land.lhs.true160, label %if.end182, !dbg !6158

land.lhs.true160:                                 ; preds = %land.lhs.true154
  %111 = load i32, i32* @pedantic, align 4, !dbg !6159
  %tobool161 = icmp ne i32 %111, 0, !dbg !6159
  br i1 %tobool161, label %lor.lhs.false162, label %land.lhs.true168, !dbg !6160

lor.lhs.false162:                                 ; preds = %land.lhs.true160
  %112 = load i32, i32* %i, align 4, !dbg !6161
  %cmp163 = icmp eq i32 %112, 0, !dbg !6162
  br i1 %cmp163, label %land.lhs.true168, label %lor.lhs.false164, !dbg !6163

lor.lhs.false164:                                 ; preds = %lor.lhs.false162
  %113 = load i32, i32* %i, align 4, !dbg !6164
  %cmp165 = icmp eq i32 %113, 1, !dbg !6165
  br i1 %cmp165, label %land.lhs.true166, label %if.end182, !dbg !6166

land.lhs.true166:                                 ; preds = %lor.lhs.false164
  %114 = load i32, i32* %char_type_flag, align 4, !dbg !6167
  %tobool167 = icmp ne i32 %114, 0, !dbg !6167
  br i1 %tobool167, label %land.lhs.true168, label %if.end182, !dbg !6168

land.lhs.true168:                                 ; preds = %land.lhs.true166, %lor.lhs.false162, %land.lhs.true160
  %115 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !6169
  %base169 = bitcast %union.tree_node* %115 to %struct.tree_base*, !dbg !6169
  %116 = bitcast %struct.tree_base* %base169 to i64*, !dbg !6169
  %bf.load170 = load i64, i64* %116, align 8, !dbg !6169
  %bf.lshr171 = lshr i64 %bf.load170, 21, !dbg !6169
  %bf.clear172 = and i64 %bf.lshr171, 1, !dbg !6169
  %bf.cast173 = trunc i64 %bf.clear172 to i32, !dbg !6169
  %tobool174 = icmp ne i32 %bf.cast173, 0, !dbg !6169
  br i1 %tobool174, label %cond.true175, label %cond.false178, !dbg !6170

cond.true175:                                     ; preds = %land.lhs.true168
  %117 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !6171
  %118 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !6172
  %call176 = call %union.tree_node* @c_common_unsigned_type(%union.tree_node* %118), !dbg !6173
  %cmp177 = icmp eq %union.tree_node* %117, %call176, !dbg !6174
  br i1 %cmp177, label %if.then181, label %if.end182, !dbg !6169

cond.false178:                                    ; preds = %land.lhs.true168
  %119 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !6175
  %120 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !6176
  %call179 = call %union.tree_node* @c_common_signed_type(%union.tree_node* %120), !dbg !6177
  %cmp180 = icmp eq %union.tree_node* %119, %call179, !dbg !6178
  br i1 %cmp180, label %if.then181, label %if.end182, !dbg !6170

if.then181:                                       ; preds = %cond.false178, %cond.true175
  br label %for.inc253, !dbg !6179

if.end182:                                        ; preds = %cond.false178, %cond.true175, %land.lhs.true166, %lor.lhs.false164, %land.lhs.true154, %if.end148
  %121 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !6180
  %122 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 16, !dbg !6182
  %cmp183 = icmp eq %union.tree_node* %121, %122, !dbg !6183
  br i1 %cmp183, label %land.lhs.true184, label %if.end191, !dbg !6184

land.lhs.true184:                                 ; preds = %if.end182
  %123 = load i32, i32* @pedantic, align 4, !dbg !6185
  %tobool185 = icmp ne i32 %123, 0, !dbg !6185
  br i1 %tobool185, label %lor.lhs.false186, label %land.lhs.true188, !dbg !6186

lor.lhs.false186:                                 ; preds = %land.lhs.true184
  %124 = load i32, i32* %i, align 4, !dbg !6187
  %cmp187 = icmp slt i32 %124, 2, !dbg !6188
  br i1 %cmp187, label %land.lhs.true188, label %if.end191, !dbg !6189

land.lhs.true188:                                 ; preds = %lor.lhs.false186, %land.lhs.true184
  %125 = load i32, i32* %char_type_flag, align 4, !dbg !6190
  %tobool189 = icmp ne i32 %125, 0, !dbg !6190
  br i1 %tobool189, label %if.then190, label %if.end191, !dbg !6191

if.then190:                                       ; preds = %land.lhs.true188
  br label %for.inc253, !dbg !6192

if.end191:                                        ; preds = %land.lhs.true188, %lor.lhs.false186, %if.end182
  %126 = load %struct.format_wanted_type*, %struct.format_wanted_type** %types.addr, align 8, !dbg !6193
  %scalar_identity_flag = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %126, i32 0, i32 2, !dbg !6195
  %127 = load i32, i32* %scalar_identity_flag, align 8, !dbg !6195
  %tobool192 = icmp ne i32 %127, 0, !dbg !6193
  br i1 %tobool192, label %land.lhs.true193, label %if.end249, !dbg !6196

land.lhs.true193:                                 ; preds = %if.end191
  %128 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !6197
  %base194 = bitcast %union.tree_node* %128 to %struct.tree_base*, !dbg !6197
  %129 = bitcast %struct.tree_base* %base194 to i64*, !dbg !6197
  %bf.load195 = load i64, i64* %129, align 8, !dbg !6197
  %bf.clear196 = and i64 %bf.load195, 65535, !dbg !6197
  %bf.cast197 = trunc i64 %bf.clear196 to i32, !dbg !6197
  %130 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !6198
  %base198 = bitcast %union.tree_node* %130 to %struct.tree_base*, !dbg !6198
  %131 = bitcast %struct.tree_base* %base198 to i64*, !dbg !6198
  %bf.load199 = load i64, i64* %131, align 8, !dbg !6198
  %bf.clear200 = and i64 %bf.load199, 65535, !dbg !6198
  %bf.cast201 = trunc i64 %bf.clear200 to i32, !dbg !6198
  %cmp202 = icmp eq i32 %bf.cast197, %bf.cast201, !dbg !6199
  br i1 %cmp202, label %land.lhs.true239, label %lor.lhs.false203, !dbg !6200

lor.lhs.false203:                                 ; preds = %land.lhs.true193
  %132 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !6201
  %base204 = bitcast %union.tree_node* %132 to %struct.tree_base*, !dbg !6201
  %133 = bitcast %struct.tree_base* %base204 to i64*, !dbg !6201
  %bf.load205 = load i64, i64* %133, align 8, !dbg !6201
  %bf.clear206 = and i64 %bf.load205, 65535, !dbg !6201
  %bf.cast207 = trunc i64 %bf.clear206 to i32, !dbg !6201
  %cmp208 = icmp eq i32 %bf.cast207, 6, !dbg !6201
  br i1 %cmp208, label %land.lhs.true221, label %lor.lhs.false209, !dbg !6201

lor.lhs.false209:                                 ; preds = %lor.lhs.false203
  %134 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !6201
  %base210 = bitcast %union.tree_node* %134 to %struct.tree_base*, !dbg !6201
  %135 = bitcast %struct.tree_base* %base210 to i64*, !dbg !6201
  %bf.load211 = load i64, i64* %135, align 8, !dbg !6201
  %bf.clear212 = and i64 %bf.load211, 65535, !dbg !6201
  %bf.cast213 = trunc i64 %bf.clear212 to i32, !dbg !6201
  %cmp214 = icmp eq i32 %bf.cast213, 7, !dbg !6201
  br i1 %cmp214, label %land.lhs.true221, label %lor.lhs.false215, !dbg !6201

lor.lhs.false215:                                 ; preds = %lor.lhs.false209
  %136 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !6201
  %base216 = bitcast %union.tree_node* %136 to %struct.tree_base*, !dbg !6201
  %137 = bitcast %struct.tree_base* %base216 to i64*, !dbg !6201
  %bf.load217 = load i64, i64* %137, align 8, !dbg !6201
  %bf.clear218 = and i64 %bf.load217, 65535, !dbg !6201
  %bf.cast219 = trunc i64 %bf.clear218 to i32, !dbg !6201
  %cmp220 = icmp eq i32 %bf.cast219, 8, !dbg !6201
  br i1 %cmp220, label %land.lhs.true221, label %if.end249, !dbg !6202

land.lhs.true221:                                 ; preds = %lor.lhs.false215, %lor.lhs.false209, %lor.lhs.false203
  %138 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !6203
  %base222 = bitcast %union.tree_node* %138 to %struct.tree_base*, !dbg !6203
  %139 = bitcast %struct.tree_base* %base222 to i64*, !dbg !6203
  %bf.load223 = load i64, i64* %139, align 8, !dbg !6203
  %bf.clear224 = and i64 %bf.load223, 65535, !dbg !6203
  %bf.cast225 = trunc i64 %bf.clear224 to i32, !dbg !6203
  %cmp226 = icmp eq i32 %bf.cast225, 6, !dbg !6203
  br i1 %cmp226, label %land.lhs.true239, label %lor.lhs.false227, !dbg !6203

lor.lhs.false227:                                 ; preds = %land.lhs.true221
  %140 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !6203
  %base228 = bitcast %union.tree_node* %140 to %struct.tree_base*, !dbg !6203
  %141 = bitcast %struct.tree_base* %base228 to i64*, !dbg !6203
  %bf.load229 = load i64, i64* %141, align 8, !dbg !6203
  %bf.clear230 = and i64 %bf.load229, 65535, !dbg !6203
  %bf.cast231 = trunc i64 %bf.clear230 to i32, !dbg !6203
  %cmp232 = icmp eq i32 %bf.cast231, 7, !dbg !6203
  br i1 %cmp232, label %land.lhs.true239, label %lor.lhs.false233, !dbg !6203

lor.lhs.false233:                                 ; preds = %lor.lhs.false227
  %142 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !6203
  %base234 = bitcast %union.tree_node* %142 to %struct.tree_base*, !dbg !6203
  %143 = bitcast %struct.tree_base* %base234 to i64*, !dbg !6203
  %bf.load235 = load i64, i64* %143, align 8, !dbg !6203
  %bf.clear236 = and i64 %bf.load235, 65535, !dbg !6203
  %bf.cast237 = trunc i64 %bf.clear236 to i32, !dbg !6203
  %cmp238 = icmp eq i32 %bf.cast237, 8, !dbg !6203
  br i1 %cmp238, label %land.lhs.true239, label %if.end249, !dbg !6204

land.lhs.true239:                                 ; preds = %lor.lhs.false233, %lor.lhs.false227, %land.lhs.true221, %land.lhs.true193
  %144 = load %union.tree_node*, %union.tree_node** %cur_type, align 8, !dbg !6205
  %type240 = bitcast %union.tree_node* %144 to %struct.tree_type*, !dbg !6205
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type240, i32 0, i32 6, !dbg !6205
  %bf.load241 = load i32, i32* %precision, align 4, !dbg !6205
  %bf.clear242 = and i32 %bf.load241, 1023, !dbg !6205
  %145 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !6206
  %type243 = bitcast %union.tree_node* %145 to %struct.tree_type*, !dbg !6206
  %precision244 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type243, i32 0, i32 6, !dbg !6206
  %bf.load245 = load i32, i32* %precision244, align 4, !dbg !6206
  %bf.clear246 = and i32 %bf.load245, 1023, !dbg !6206
  %cmp247 = icmp eq i32 %bf.clear242, %bf.clear246, !dbg !6207
  br i1 %cmp247, label %if.then248, label %if.end249, !dbg !6208

if.then248:                                       ; preds = %land.lhs.true239
  br label %for.inc253, !dbg !6209

if.end249:                                        ; preds = %land.lhs.true239, %lor.lhs.false233, %lor.lhs.false215, %if.end191
  %146 = load %struct.format_wanted_type*, %struct.format_wanted_type** %types.addr, align 8, !dbg !6210
  %name250 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %146, i32 0, i32 7, !dbg !6211
  %147 = load i8*, i8** %name250, align 8, !dbg !6211
  %148 = load i8*, i8** %format_start.addr, align 8, !dbg !6212
  %149 = load i32, i32* %format_length.addr, align 4, !dbg !6213
  %150 = load %union.tree_node*, %union.tree_node** %wanted_type, align 8, !dbg !6214
  %151 = load %struct.format_wanted_type*, %struct.format_wanted_type** %types.addr, align 8, !dbg !6215
  %pointer_count251 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %151, i32 0, i32 3, !dbg !6216
  %152 = load i32, i32* %pointer_count251, align 4, !dbg !6216
  %153 = load %struct.format_wanted_type*, %struct.format_wanted_type** %types.addr, align 8, !dbg !6217
  %wanted_type_name252 = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %153, i32 0, i32 1, !dbg !6218
  %154 = load i8*, i8** %wanted_type_name252, align 8, !dbg !6218
  %155 = load %union.tree_node*, %union.tree_node** %orig_cur_type, align 8, !dbg !6219
  %156 = load i32, i32* %arg_num, align 4, !dbg !6220
  call void @format_type_warning(i8* %147, i8* %148, i32 %149, %union.tree_node* %150, i32 %152, i8* %154, %union.tree_node* %155, i32 %156), !dbg !6221
  br label %for.inc253, !dbg !6222

for.inc253:                                       ; preds = %if.end249, %if.then248, %if.then190, %if.then181, %if.then147, %if.then138, %if.then125, %if.then
  %157 = load %struct.format_wanted_type*, %struct.format_wanted_type** %types.addr, align 8, !dbg !6223
  %next = getelementptr inbounds %struct.format_wanted_type, %struct.format_wanted_type* %157, i32 0, i32 10, !dbg !6224
  %158 = load %struct.format_wanted_type*, %struct.format_wanted_type** %next, align 8, !dbg !6224
  store %struct.format_wanted_type* %158, %struct.format_wanted_type** %types.addr, align 8, !dbg !6225
  br label %for.cond, !dbg !6226, !llvm.loop !6227

for.end254:                                       ; preds = %for.cond
  ret void, !dbg !6229
}

declare dso_local void @free(i8*) #2

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local i8* @xrealloc(i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @format_type_warning(i8* %descr, i8* %format_start, i32 %format_length, %union.tree_node* %wanted_type, i32 %pointer_count, i8* %wanted_type_name, %union.tree_node* %arg_type, i32 %arg_num) #0 !dbg !6230 {
entry:
  %descr.addr = alloca i8*, align 8
  %format_start.addr = alloca i8*, align 8
  %format_length.addr = alloca i32, align 4
  %wanted_type.addr = alloca %union.tree_node*, align 8
  %pointer_count.addr = alloca i32, align 4
  %wanted_type_name.addr = alloca i8*, align 8
  %arg_type.addr = alloca %union.tree_node*, align 8
  %arg_num.addr = alloca i32, align 4
  %p = alloca i8*, align 8
  store i8* %descr, i8** %descr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %descr.addr, metadata !6233, metadata !DIExpression()), !dbg !6234
  store i8* %format_start, i8** %format_start.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %format_start.addr, metadata !6235, metadata !DIExpression()), !dbg !6236
  store i32 %format_length, i32* %format_length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %format_length.addr, metadata !6237, metadata !DIExpression()), !dbg !6238
  store %union.tree_node* %wanted_type, %union.tree_node** %wanted_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %wanted_type.addr, metadata !6239, metadata !DIExpression()), !dbg !6240
  store i32 %pointer_count, i32* %pointer_count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pointer_count.addr, metadata !6241, metadata !DIExpression()), !dbg !6242
  store i8* %wanted_type_name, i8** %wanted_type_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %wanted_type_name.addr, metadata !6243, metadata !DIExpression()), !dbg !6244
  store %union.tree_node* %arg_type, %union.tree_node** %arg_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg_type.addr, metadata !6245, metadata !DIExpression()), !dbg !6246
  store i32 %arg_num, i32* %arg_num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %arg_num.addr, metadata !6247, metadata !DIExpression()), !dbg !6248
  call void @llvm.dbg.declare(metadata i8** %p, metadata !6249, metadata !DIExpression()), !dbg !6250
  %0 = load i8*, i8** %wanted_type_name.addr, align 8, !dbg !6251
  %tobool = icmp ne i8* %0, null, !dbg !6251
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6253

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %arg_type.addr, align 8, !dbg !6254
  %type = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !6254
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 12, !dbg !6254
  %2 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6254
  %tobool1 = icmp ne %union.tree_node* %2, null, !dbg !6254
  br i1 %tobool1, label %land.lhs.true2, label %if.end, !dbg !6255

land.lhs.true2:                                   ; preds = %land.lhs.true
  %3 = load %union.tree_node*, %union.tree_node** %arg_type.addr, align 8, !dbg !6256
  %type3 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !6256
  %name4 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 12, !dbg !6256
  %4 = load %union.tree_node*, %union.tree_node** %name4, align 8, !dbg !6256
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !6256
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !6256
  %bf.load = load i64, i64* %5, align 8, !dbg !6256
  %bf.clear = and i64 %bf.load, 65535, !dbg !6256
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6256
  %cmp = icmp eq i32 %bf.cast, 35, !dbg !6257
  br i1 %cmp, label %land.lhs.true5, label %if.end, !dbg !6258

land.lhs.true5:                                   ; preds = %land.lhs.true2
  %6 = load %union.tree_node*, %union.tree_node** %arg_type.addr, align 8, !dbg !6259
  %type6 = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !6259
  %name7 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6, i32 0, i32 12, !dbg !6259
  %7 = load %union.tree_node*, %union.tree_node** %name7, align 8, !dbg !6259
  %decl_minimal = bitcast %union.tree_node* %7 to %struct.tree_decl_minimal*, !dbg !6259
  %name8 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !6259
  %8 = load %union.tree_node*, %union.tree_node** %name8, align 8, !dbg !6259
  %tobool9 = icmp ne %union.tree_node* %8, null, !dbg !6259
  br i1 %tobool9, label %land.lhs.true10, label %if.end, !dbg !6260

land.lhs.true10:                                  ; preds = %land.lhs.true5
  %9 = load i8*, i8** %wanted_type_name.addr, align 8, !dbg !6261
  %10 = load i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 22), align 8, !dbg !6262
  %11 = load %union.tree_node*, %union.tree_node** %arg_type.addr, align 8, !dbg !6263
  %type11 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !6263
  %name12 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type11, i32 0, i32 12, !dbg !6263
  %12 = load %union.tree_node*, %union.tree_node** %name12, align 8, !dbg !6263
  %call = call i8* %10(%union.tree_node* %12, i32 2), !dbg !6264
  %call13 = call i32 @strcmp(i8* %9, i8* %call), !dbg !6265
  %tobool14 = icmp ne i32 %call13, 0, !dbg !6265
  br i1 %tobool14, label %if.end, label %if.then, !dbg !6266

if.then:                                          ; preds = %land.lhs.true10
  %13 = load %union.tree_node*, %union.tree_node** %arg_type.addr, align 8, !dbg !6267
  %type15 = bitcast %union.tree_node* %13 to %struct.tree_type*, !dbg !6267
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type15, i32 0, i32 16, !dbg !6267
  %14 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !6267
  store %union.tree_node* %14, %union.tree_node** %arg_type.addr, align 8, !dbg !6268
  br label %if.end, !dbg !6269

if.end:                                           ; preds = %if.then, %land.lhs.true10, %land.lhs.true5, %land.lhs.true2, %land.lhs.true, %entry
  %15 = load i32, i32* %pointer_count.addr, align 4, !dbg !6270
  %add = add nsw i32 %15, 2, !dbg !6270
  %conv = sext i32 %add to i64, !dbg !6270
  %16 = alloca i8, i64 %conv, align 16, !dbg !6270
  store i8* %16, i8** %p, align 8, !dbg !6271
  %17 = load i32, i32* %pointer_count.addr, align 4, !dbg !6272
  %cmp16 = icmp eq i32 %17, 0, !dbg !6274
  br i1 %cmp16, label %if.then18, label %if.else, !dbg !6275

if.then18:                                        ; preds = %if.end
  %18 = load i8*, i8** %p, align 8, !dbg !6276
  %arrayidx = getelementptr inbounds i8, i8* %18, i64 0, !dbg !6276
  store i8 0, i8* %arrayidx, align 1, !dbg !6277
  br label %if.end31, !dbg !6276

if.else:                                          ; preds = %if.end
  %19 = load i32, i32* @c_language, align 4, !dbg !6278
  %and = and i32 %19, 2, !dbg !6278
  %cmp19 = icmp ne i32 %and, 0, !dbg !6278
  br i1 %cmp19, label %if.then21, label %if.else24, !dbg !6280

if.then21:                                        ; preds = %if.else
  %20 = load i8*, i8** %p, align 8, !dbg !6281
  %21 = load i32, i32* %pointer_count.addr, align 4, !dbg !6283
  %conv22 = sext i32 %21 to i64, !dbg !6283
  call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 42, i64 %conv22, i1 false), !dbg !6284
  %22 = load i8*, i8** %p, align 8, !dbg !6285
  %23 = load i32, i32* %pointer_count.addr, align 4, !dbg !6286
  %idxprom = sext i32 %23 to i64, !dbg !6285
  %arrayidx23 = getelementptr inbounds i8, i8* %22, i64 %idxprom, !dbg !6285
  store i8 0, i8* %arrayidx23, align 1, !dbg !6287
  br label %if.end30, !dbg !6288

if.else24:                                        ; preds = %if.else
  %24 = load i8*, i8** %p, align 8, !dbg !6289
  %arrayidx25 = getelementptr inbounds i8, i8* %24, i64 0, !dbg !6289
  store i8 32, i8* %arrayidx25, align 1, !dbg !6291
  %25 = load i8*, i8** %p, align 8, !dbg !6292
  %add.ptr = getelementptr inbounds i8, i8* %25, i64 1, !dbg !6293
  %26 = load i32, i32* %pointer_count.addr, align 4, !dbg !6294
  %conv26 = sext i32 %26 to i64, !dbg !6294
  call void @llvm.memset.p0i8.i64(i8* align 1 %add.ptr, i8 42, i64 %conv26, i1 false), !dbg !6295
  %27 = load i8*, i8** %p, align 8, !dbg !6296
  %28 = load i32, i32* %pointer_count.addr, align 4, !dbg !6297
  %add27 = add nsw i32 %28, 1, !dbg !6298
  %idxprom28 = sext i32 %add27 to i64, !dbg !6296
  %arrayidx29 = getelementptr inbounds i8, i8* %27, i64 %idxprom28, !dbg !6296
  store i8 0, i8* %arrayidx29, align 1, !dbg !6299
  br label %if.end30

if.end30:                                         ; preds = %if.else24, %if.then21
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.then18
  %29 = load i8*, i8** %wanted_type_name.addr, align 8, !dbg !6300
  %tobool32 = icmp ne i8* %29, null, !dbg !6300
  br i1 %tobool32, label %if.then33, label %if.else40, !dbg !6302

if.then33:                                        ; preds = %if.end31
  %30 = load i8*, i8** %descr.addr, align 8, !dbg !6303
  %tobool34 = icmp ne i8* %30, null, !dbg !6303
  br i1 %tobool34, label %if.then35, label %if.else37, !dbg !6306

if.then35:                                        ; preds = %if.then33
  %31 = load i8*, i8** %descr.addr, align 8, !dbg !6307
  %32 = load i8*, i8** %wanted_type_name.addr, align 8, !dbg !6308
  %33 = load i8*, i8** %p, align 8, !dbg !6309
  %34 = load i32, i32* %arg_num.addr, align 4, !dbg !6310
  %35 = load %union.tree_node*, %union.tree_node** %arg_type.addr, align 8, !dbg !6311
  %call36 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.73, i64 0, i64 0), i8* %31, i8* %32, i8* %33, i32 %34, %union.tree_node* %35), !dbg !6312
  br label %if.end39, !dbg !6312

if.else37:                                        ; preds = %if.then33
  %36 = load i32, i32* %format_length.addr, align 4, !dbg !6313
  %37 = load i8*, i8** %format_start.addr, align 8, !dbg !6314
  %38 = load i8*, i8** %wanted_type_name.addr, align 8, !dbg !6315
  %39 = load i8*, i8** %p, align 8, !dbg !6316
  %40 = load i32, i32* %arg_num.addr, align 4, !dbg !6317
  %41 = load %union.tree_node*, %union.tree_node** %arg_type.addr, align 8, !dbg !6318
  %call38 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.74, i64 0, i64 0), i32 %36, i8* %37, i8* %38, i8* %39, i32 %40, %union.tree_node* %41), !dbg !6319
  br label %if.end39

if.end39:                                         ; preds = %if.else37, %if.then35
  br label %if.end47, !dbg !6320

if.else40:                                        ; preds = %if.end31
  %42 = load i8*, i8** %descr.addr, align 8, !dbg !6321
  %tobool41 = icmp ne i8* %42, null, !dbg !6321
  br i1 %tobool41, label %if.then42, label %if.else44, !dbg !6324

if.then42:                                        ; preds = %if.else40
  %43 = load i8*, i8** %descr.addr, align 8, !dbg !6325
  %44 = load %union.tree_node*, %union.tree_node** %wanted_type.addr, align 8, !dbg !6326
  %45 = load i8*, i8** %p, align 8, !dbg !6327
  %46 = load i32, i32* %arg_num.addr, align 4, !dbg !6328
  %47 = load %union.tree_node*, %union.tree_node** %arg_type.addr, align 8, !dbg !6329
  %call43 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.75, i64 0, i64 0), i8* %43, %union.tree_node* %44, i8* %45, i32 %46, %union.tree_node* %47), !dbg !6330
  br label %if.end46, !dbg !6330

if.else44:                                        ; preds = %if.else40
  %48 = load i32, i32* %format_length.addr, align 4, !dbg !6331
  %49 = load i8*, i8** %format_start.addr, align 8, !dbg !6332
  %50 = load %union.tree_node*, %union.tree_node** %wanted_type.addr, align 8, !dbg !6333
  %51 = load i8*, i8** %p, align 8, !dbg !6334
  %52 = load i32, i32* %arg_num.addr, align 4, !dbg !6335
  %53 = load %union.tree_node*, %union.tree_node** %arg_type.addr, align 8, !dbg !6336
  %call45 = call zeroext i8 (i32, i8*, ...) @warning(i32 91, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.76, i64 0, i64 0), i32 %48, i8* %49, %union.tree_node* %50, i8* %51, i32 %52, %union.tree_node* %53), !dbg !6337
  br label %if.end46

if.end46:                                         ; preds = %if.else44, %if.then42
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.end39
  ret void, !dbg !6338
}

declare dso_local %union.tree_node* @c_common_unsigned_type(%union.tree_node*) #2

declare dso_local %union.tree_node* @c_common_signed_type(%union.tree_node*) #2

declare dso_local %union.tree_node* @maybe_get_identifier(i8*) #2

declare dso_local %union.tree_node* @identifier_global_value(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_length_info_modifier_index(%struct.format_length_info* %fli, i32 %c) #0 !dbg !6339 {
entry:
  %retval = alloca i32, align 4
  %fli.addr = alloca %struct.format_length_info*, align 8
  %c.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.format_length_info* %fli, %struct.format_length_info** %fli.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.format_length_info** %fli.addr, metadata !6342, metadata !DIExpression()), !dbg !6343
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !6344, metadata !DIExpression()), !dbg !6345
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6346, metadata !DIExpression()), !dbg !6347
  store i32 0, i32* %i, align 4, !dbg !6348
  br label %for.cond, !dbg !6350

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.format_length_info*, %struct.format_length_info** %fli.addr, align 8, !dbg !6351
  %name = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %0, i32 0, i32 0, !dbg !6353
  %1 = load i8*, i8** %name, align 8, !dbg !6353
  %tobool = icmp ne i8* %1, null, !dbg !6354
  br i1 %tobool, label %for.body, label %for.end, !dbg !6354

for.body:                                         ; preds = %for.cond
  %2 = load %struct.format_length_info*, %struct.format_length_info** %fli.addr, align 8, !dbg !6355
  %name1 = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %2, i32 0, i32 0, !dbg !6357
  %3 = load i8*, i8** %name1, align 8, !dbg !6357
  %4 = load i32, i32* %c.addr, align 4, !dbg !6358
  %call = call i8* @strchr(i8* %3, i32 %4), !dbg !6359
  %tobool2 = icmp ne i8* %call, null, !dbg !6359
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6360

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !6361
  store i32 %5, i32* %retval, align 4, !dbg !6362
  br label %return, !dbg !6362

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !6363

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4, !dbg !6364
  %inc = add i32 %6, 1, !dbg !6364
  store i32 %inc, i32* %i, align 4, !dbg !6364
  %7 = load %struct.format_length_info*, %struct.format_length_info** %fli.addr, align 8, !dbg !6365
  %incdec.ptr = getelementptr inbounds %struct.format_length_info, %struct.format_length_info* %7, i32 1, !dbg !6365
  store %struct.format_length_info* %incdec.ptr, %struct.format_length_info** %fli.addr, align 8, !dbg !6365
  br label %for.cond, !dbg !6366, !llvm.loop !6367

for.end:                                          ; preds = %for.cond
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i32 2389, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)), !dbg !6369
  store i32 0, i32* %retval, align 4, !dbg !6370
  br label %return, !dbg !6370

return:                                           ; preds = %for.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !6371
  ret i32 %8, !dbg !6371
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_char_info_specifier_index(%struct.format_char_info* %fci, i32 %c) #0 !dbg !6372 {
entry:
  %retval = alloca i32, align 4
  %fci.addr = alloca %struct.format_char_info*, align 8
  %c.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.format_char_info* %fci, %struct.format_char_info** %fci.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.format_char_info** %fci.addr, metadata !6375, metadata !DIExpression()), !dbg !6376
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !6377, metadata !DIExpression()), !dbg !6378
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6379, metadata !DIExpression()), !dbg !6380
  store i32 0, i32* %i, align 4, !dbg !6381
  br label %for.cond, !dbg !6383

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.format_char_info*, %struct.format_char_info** %fci.addr, align 8, !dbg !6384
  %format_chars = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %0, i32 0, i32 0, !dbg !6386
  %1 = load i8*, i8** %format_chars, align 8, !dbg !6386
  %tobool = icmp ne i8* %1, null, !dbg !6387
  br i1 %tobool, label %for.body, label %for.end, !dbg !6387

for.body:                                         ; preds = %for.cond
  %2 = load %struct.format_char_info*, %struct.format_char_info** %fci.addr, align 8, !dbg !6388
  %format_chars1 = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %2, i32 0, i32 0, !dbg !6390
  %3 = load i8*, i8** %format_chars1, align 8, !dbg !6390
  %4 = load i32, i32* %c.addr, align 4, !dbg !6391
  %call = call i8* @strchr(i8* %3, i32 %4), !dbg !6392
  %tobool2 = icmp ne i8* %call, null, !dbg !6392
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6393

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !6394
  store i32 %5, i32* %retval, align 4, !dbg !6395
  br label %return, !dbg !6395

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !6396

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4, !dbg !6397
  %inc = add i32 %6, 1, !dbg !6397
  store i32 %inc, i32* %i, align 4, !dbg !6397
  %7 = load %struct.format_char_info*, %struct.format_char_info** %fci.addr, align 8, !dbg !6398
  %incdec.ptr = getelementptr inbounds %struct.format_char_info, %struct.format_char_info* %7, i32 1, !dbg !6398
  store %struct.format_char_info* %incdec.ptr, %struct.format_char_info** %fci.addr, align 8, !dbg !6398
  br label %for.cond, !dbg !6399, !llvm.loop !6400

for.end:                                          ; preds = %for.cond
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i64 0, i64 0), i32 2370, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0)), !dbg !6402
  store i32 0, i32* %retval, align 4, !dbg !6403
  br label %return, !dbg !6403

return:                                           ; preds = %for.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !6404
  ret i32 %8, !dbg !6404
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2286, !2287, !2288}
!llvm.ident = !{!2289}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "format_types", scope: !2, file: !3, line: 775, type: !2285, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1347, globals: !2114, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "c-format.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !25, !32, !39, !233, !247, !254, !265, !1139, !1150, !1165, !1172, !1193, !1200, !1334}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !6, line: 280, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24}
!9 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!25 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !6, line: 1817, baseType: !7, size: 32, elements: !26)
!26 = !{!27, !28, !29, !30, !31}
!27 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!28 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!29 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!30 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!31 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!32 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !6, line: 1805, baseType: !7, size: 32, elements: !33)
!33 = !{!34, !35, !36, !37, !38}
!34 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!35 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!36 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!37 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!38 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!39 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !6, line: 39, baseType: !7, size: 32, elements: !40)
!40 = !{!41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232}
!41 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!42 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!43 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!44 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!45 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!46 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!47 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!48 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!49 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!50 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!51 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!52 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!53 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!54 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!55 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!56 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!57 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!58 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!59 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!60 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!61 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!62 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!63 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!64 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!65 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!66 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!67 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!68 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!69 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!70 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!71 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!72 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!73 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!74 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!75 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!76 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!77 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!78 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!79 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!80 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!81 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!82 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!83 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!84 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!85 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!86 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!87 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!88 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!89 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!90 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!91 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!92 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!93 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!94 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!95 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!96 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!97 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!98 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!99 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!100 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!101 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!102 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!103 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!104 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!105 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!106 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!107 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!108 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!109 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!110 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!111 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!112 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!113 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!114 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!115 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!116 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!117 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!118 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!119 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!120 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!123 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!124 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!125 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!126 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!127 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!128 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!129 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!130 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!131 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!132 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!133 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!134 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!135 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!136 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!137 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!138 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!139 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!140 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!141 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!142 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!143 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!144 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!145 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!146 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!147 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!148 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!149 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!150 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!151 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!152 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!153 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!154 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!155 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!156 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!157 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!158 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!159 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!160 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!161 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!162 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!163 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!164 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!165 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!166 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!167 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!168 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!169 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!170 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!171 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!172 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!173 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!174 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!175 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!176 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!177 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!178 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!179 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!180 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!181 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!182 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!183 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!184 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!185 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!186 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!187 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!188 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!189 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!190 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!191 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!192 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!193 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!194 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!195 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!196 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!197 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!198 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!199 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!200 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!201 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!202 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!203 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!204 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!205 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!206 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!207 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!208 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!209 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!210 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!211 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!212 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!213 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!214 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!215 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!216 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!217 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!218 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!219 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!220 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!221 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!222 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!223 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!224 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!225 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!226 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!227 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!228 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!229 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!230 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!231 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!232 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!233 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "integer_type_kind", file: !6, line: 3745, baseType: !7, size: 32, elements: !234)
!234 = !{!235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246}
!235 = !DIEnumerator(name: "itk_char", value: 0, isUnsigned: true)
!236 = !DIEnumerator(name: "itk_signed_char", value: 1, isUnsigned: true)
!237 = !DIEnumerator(name: "itk_unsigned_char", value: 2, isUnsigned: true)
!238 = !DIEnumerator(name: "itk_short", value: 3, isUnsigned: true)
!239 = !DIEnumerator(name: "itk_unsigned_short", value: 4, isUnsigned: true)
!240 = !DIEnumerator(name: "itk_int", value: 5, isUnsigned: true)
!241 = !DIEnumerator(name: "itk_unsigned_int", value: 6, isUnsigned: true)
!242 = !DIEnumerator(name: "itk_long", value: 7, isUnsigned: true)
!243 = !DIEnumerator(name: "itk_unsigned_long", value: 8, isUnsigned: true)
!244 = !DIEnumerator(name: "itk_long_long", value: 9, isUnsigned: true)
!245 = !DIEnumerator(name: "itk_unsigned_long_long", value: 10, isUnsigned: true)
!246 = !DIEnumerator(name: "itk_none", value: 11, isUnsigned: true)
!247 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "attribute_flags", file: !6, line: 4092, baseType: !7, size: 32, elements: !248)
!248 = !{!249, !250, !251, !252, !253}
!249 = !DIEnumerator(name: "ATTR_FLAG_DECL_NEXT", value: 1, isUnsigned: true)
!250 = !DIEnumerator(name: "ATTR_FLAG_FUNCTION_NEXT", value: 2, isUnsigned: true)
!251 = !DIEnumerator(name: "ATTR_FLAG_ARRAY_NEXT", value: 4, isUnsigned: true)
!252 = !DIEnumerator(name: "ATTR_FLAG_TYPE_IN_PLACE", value: 8, isUnsigned: true)
!253 = !DIEnumerator(name: "ATTR_FLAG_BUILT_IN", value: 16, isUnsigned: true)
!254 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !255, line: 55, baseType: !7, size: 32, elements: !256)
!255 = !DIFile(filename: "./c-format.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!256 = !{!257, !258, !259, !260, !261, !262, !263, !264}
!257 = !DIEnumerator(name: "FMT_FLAG_ARG_CONVERT", value: 1, isUnsigned: true)
!258 = !DIEnumerator(name: "FMT_FLAG_SCANF_A_KLUDGE", value: 2, isUnsigned: true)
!259 = !DIEnumerator(name: "FMT_FLAG_FANCY_PERCENT_OK", value: 4, isUnsigned: true)
!260 = !DIEnumerator(name: "FMT_FLAG_DOLLAR_MULTIPLE", value: 8, isUnsigned: true)
!261 = !DIEnumerator(name: "FMT_FLAG_USE_DOLLAR", value: 16, isUnsigned: true)
!262 = !DIEnumerator(name: "FMT_FLAG_ZERO_WIDTH_BAD", value: 32, isUnsigned: true)
!263 = !DIEnumerator(name: "FMT_FLAG_EMPTY_PREC_OK", value: 64, isUnsigned: true)
!264 = !DIEnumerator(name: "FMT_FLAG_DOLLAR_GAP_POINTER_OK", value: 128, isUnsigned: true)
!265 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_code", file: !266, line: 723, baseType: !7, size: 32, elements: !267)
!266 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!267 = !{!268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138}
!268 = !DIEnumerator(name: "OPT__help", value: 0, isUnsigned: true)
!269 = !DIEnumerator(name: "OPT__help_", value: 1, isUnsigned: true)
!270 = !DIEnumerator(name: "OPT__output_pch_", value: 2, isUnsigned: true)
!271 = !DIEnumerator(name: "OPT__param", value: 3, isUnsigned: true)
!272 = !DIEnumerator(name: "OPT__target_help", value: 4, isUnsigned: true)
!273 = !DIEnumerator(name: "OPT__version", value: 5, isUnsigned: true)
!274 = !DIEnumerator(name: "OPT_A", value: 6, isUnsigned: true)
!275 = !DIEnumerator(name: "OPT_C", value: 7, isUnsigned: true)
!276 = !DIEnumerator(name: "OPT_CC", value: 8, isUnsigned: true)
!277 = !DIEnumerator(name: "OPT_D", value: 9, isUnsigned: true)
!278 = !DIEnumerator(name: "OPT_E", value: 10, isUnsigned: true)
!279 = !DIEnumerator(name: "OPT_F", value: 11, isUnsigned: true)
!280 = !DIEnumerator(name: "OPT_G", value: 12, isUnsigned: true)
!281 = !DIEnumerator(name: "OPT_H", value: 13, isUnsigned: true)
!282 = !DIEnumerator(name: "OPT_I", value: 14, isUnsigned: true)
!283 = !DIEnumerator(name: "OPT_J", value: 15, isUnsigned: true)
!284 = !DIEnumerator(name: "OPT_M", value: 16, isUnsigned: true)
!285 = !DIEnumerator(name: "OPT_MD", value: 17, isUnsigned: true)
!286 = !DIEnumerator(name: "OPT_MD_", value: 18, isUnsigned: true)
!287 = !DIEnumerator(name: "OPT_MF", value: 19, isUnsigned: true)
!288 = !DIEnumerator(name: "OPT_MG", value: 20, isUnsigned: true)
!289 = !DIEnumerator(name: "OPT_MM", value: 21, isUnsigned: true)
!290 = !DIEnumerator(name: "OPT_MMD", value: 22, isUnsigned: true)
!291 = !DIEnumerator(name: "OPT_MMD_", value: 23, isUnsigned: true)
!292 = !DIEnumerator(name: "OPT_MP", value: 24, isUnsigned: true)
!293 = !DIEnumerator(name: "OPT_MQ", value: 25, isUnsigned: true)
!294 = !DIEnumerator(name: "OPT_MT", value: 26, isUnsigned: true)
!295 = !DIEnumerator(name: "OPT_O", value: 27, isUnsigned: true)
!296 = !DIEnumerator(name: "OPT_Os", value: 28, isUnsigned: true)
!297 = !DIEnumerator(name: "OPT_P", value: 29, isUnsigned: true)
!298 = !DIEnumerator(name: "OPT_U", value: 30, isUnsigned: true)
!299 = !DIEnumerator(name: "OPT_W", value: 31, isUnsigned: true)
!300 = !DIEnumerator(name: "OPT_Wabi", value: 32, isUnsigned: true)
!301 = !DIEnumerator(name: "OPT_Waddress", value: 33, isUnsigned: true)
!302 = !DIEnumerator(name: "OPT_Waggregate_return", value: 34, isUnsigned: true)
!303 = !DIEnumerator(name: "OPT_Waliasing", value: 35, isUnsigned: true)
!304 = !DIEnumerator(name: "OPT_Walign_commons", value: 36, isUnsigned: true)
!305 = !DIEnumerator(name: "OPT_Wall", value: 37, isUnsigned: true)
!306 = !DIEnumerator(name: "OPT_Wall_deprecation", value: 38, isUnsigned: true)
!307 = !DIEnumerator(name: "OPT_Wall_javadoc", value: 39, isUnsigned: true)
!308 = !DIEnumerator(name: "OPT_Wampersand", value: 40, isUnsigned: true)
!309 = !DIEnumerator(name: "OPT_Warray_bounds", value: 41, isUnsigned: true)
!310 = !DIEnumerator(name: "OPT_Warray_temporaries", value: 42, isUnsigned: true)
!311 = !DIEnumerator(name: "OPT_Wassert_identifier", value: 43, isUnsigned: true)
!312 = !DIEnumerator(name: "OPT_Wassign_intercept", value: 44, isUnsigned: true)
!313 = !DIEnumerator(name: "OPT_Wattributes", value: 45, isUnsigned: true)
!314 = !DIEnumerator(name: "OPT_Wbad_function_cast", value: 46, isUnsigned: true)
!315 = !DIEnumerator(name: "OPT_Wboxing", value: 47, isUnsigned: true)
!316 = !DIEnumerator(name: "OPT_Wbuiltin_macro_redefined", value: 48, isUnsigned: true)
!317 = !DIEnumerator(name: "OPT_Wc___compat", value: 49, isUnsigned: true)
!318 = !DIEnumerator(name: "OPT_Wc__0x_compat", value: 50, isUnsigned: true)
!319 = !DIEnumerator(name: "OPT_Wcast_align", value: 51, isUnsigned: true)
!320 = !DIEnumerator(name: "OPT_Wcast_qual", value: 52, isUnsigned: true)
!321 = !DIEnumerator(name: "OPT_Wchar_concat", value: 53, isUnsigned: true)
!322 = !DIEnumerator(name: "OPT_Wchar_subscripts", value: 54, isUnsigned: true)
!323 = !DIEnumerator(name: "OPT_Wcharacter_truncation", value: 55, isUnsigned: true)
!324 = !DIEnumerator(name: "OPT_Wclobbered", value: 56, isUnsigned: true)
!325 = !DIEnumerator(name: "OPT_Wcomment", value: 57, isUnsigned: true)
!326 = !DIEnumerator(name: "OPT_Wcomments", value: 58, isUnsigned: true)
!327 = !DIEnumerator(name: "OPT_Wcondition_assign", value: 59, isUnsigned: true)
!328 = !DIEnumerator(name: "OPT_Wconstructor_name", value: 60, isUnsigned: true)
!329 = !DIEnumerator(name: "OPT_Wconversion", value: 61, isUnsigned: true)
!330 = !DIEnumerator(name: "OPT_Wconversion_null", value: 62, isUnsigned: true)
!331 = !DIEnumerator(name: "OPT_Wcoverage_mismatch", value: 63, isUnsigned: true)
!332 = !DIEnumerator(name: "OPT_Wctor_dtor_privacy", value: 64, isUnsigned: true)
!333 = !DIEnumerator(name: "OPT_Wdeclaration_after_statement", value: 65, isUnsigned: true)
!334 = !DIEnumerator(name: "OPT_Wdep_ann", value: 66, isUnsigned: true)
!335 = !DIEnumerator(name: "OPT_Wdeprecated", value: 67, isUnsigned: true)
!336 = !DIEnumerator(name: "OPT_Wdeprecated_declarations", value: 68, isUnsigned: true)
!337 = !DIEnumerator(name: "OPT_Wdisabled_optimization", value: 69, isUnsigned: true)
!338 = !DIEnumerator(name: "OPT_Wdiscouraged", value: 70, isUnsigned: true)
!339 = !DIEnumerator(name: "OPT_Wdiv_by_zero", value: 71, isUnsigned: true)
!340 = !DIEnumerator(name: "OPT_Weffc__", value: 72, isUnsigned: true)
!341 = !DIEnumerator(name: "OPT_Wempty_block", value: 73, isUnsigned: true)
!342 = !DIEnumerator(name: "OPT_Wempty_body", value: 74, isUnsigned: true)
!343 = !DIEnumerator(name: "OPT_Wendif_labels", value: 75, isUnsigned: true)
!344 = !DIEnumerator(name: "OPT_Wenum_compare", value: 76, isUnsigned: true)
!345 = !DIEnumerator(name: "OPT_Wenum_identifier", value: 77, isUnsigned: true)
!346 = !DIEnumerator(name: "OPT_Wenum_switch", value: 78, isUnsigned: true)
!347 = !DIEnumerator(name: "OPT_Werror", value: 79, isUnsigned: true)
!348 = !DIEnumerator(name: "OPT_Werror_implicit_function_declaration", value: 80, isUnsigned: true)
!349 = !DIEnumerator(name: "OPT_Werror_", value: 81, isUnsigned: true)
!350 = !DIEnumerator(name: "OPT_Wextra", value: 82, isUnsigned: true)
!351 = !DIEnumerator(name: "OPT_Wextraneous_semicolon", value: 83, isUnsigned: true)
!352 = !DIEnumerator(name: "OPT_Wfallthrough", value: 84, isUnsigned: true)
!353 = !DIEnumerator(name: "OPT_Wfatal_errors", value: 85, isUnsigned: true)
!354 = !DIEnumerator(name: "OPT_Wfield_hiding", value: 86, isUnsigned: true)
!355 = !DIEnumerator(name: "OPT_Wfinal_bound", value: 87, isUnsigned: true)
!356 = !DIEnumerator(name: "OPT_Wfinally", value: 88, isUnsigned: true)
!357 = !DIEnumerator(name: "OPT_Wfloat_equal", value: 89, isUnsigned: true)
!358 = !DIEnumerator(name: "OPT_Wforbidden", value: 90, isUnsigned: true)
!359 = !DIEnumerator(name: "OPT_Wformat", value: 91, isUnsigned: true)
!360 = !DIEnumerator(name: "OPT_Wformat_contains_nul", value: 92, isUnsigned: true)
!361 = !DIEnumerator(name: "OPT_Wformat_extra_args", value: 93, isUnsigned: true)
!362 = !DIEnumerator(name: "OPT_Wformat_nonliteral", value: 94, isUnsigned: true)
!363 = !DIEnumerator(name: "OPT_Wformat_security", value: 95, isUnsigned: true)
!364 = !DIEnumerator(name: "OPT_Wformat_y2k", value: 96, isUnsigned: true)
!365 = !DIEnumerator(name: "OPT_Wformat_zero_length", value: 97, isUnsigned: true)
!366 = !DIEnumerator(name: "OPT_Wformat_", value: 98, isUnsigned: true)
!367 = !DIEnumerator(name: "OPT_Wframe_larger_than_", value: 99, isUnsigned: true)
!368 = !DIEnumerator(name: "OPT_Whiding", value: 100, isUnsigned: true)
!369 = !DIEnumerator(name: "OPT_Wignored_qualifiers", value: 101, isUnsigned: true)
!370 = !DIEnumerator(name: "OPT_Wimplicit", value: 102, isUnsigned: true)
!371 = !DIEnumerator(name: "OPT_Wimplicit_function_declaration", value: 103, isUnsigned: true)
!372 = !DIEnumerator(name: "OPT_Wimplicit_int", value: 104, isUnsigned: true)
!373 = !DIEnumerator(name: "OPT_Wimplicit_interface", value: 105, isUnsigned: true)
!374 = !DIEnumerator(name: "OPT_Wimplicit_procedure", value: 106, isUnsigned: true)
!375 = !DIEnumerator(name: "OPT_Wimport", value: 107, isUnsigned: true)
!376 = !DIEnumerator(name: "OPT_Windirect_static", value: 108, isUnsigned: true)
!377 = !DIEnumerator(name: "OPT_Winit_self", value: 109, isUnsigned: true)
!378 = !DIEnumerator(name: "OPT_Winline", value: 110, isUnsigned: true)
!379 = !DIEnumerator(name: "OPT_Wint_to_pointer_cast", value: 111, isUnsigned: true)
!380 = !DIEnumerator(name: "OPT_Wintf_annotation", value: 112, isUnsigned: true)
!381 = !DIEnumerator(name: "OPT_Wintf_non_inherited", value: 113, isUnsigned: true)
!382 = !DIEnumerator(name: "OPT_Wintrinsic_shadow", value: 114, isUnsigned: true)
!383 = !DIEnumerator(name: "OPT_Wintrinsics_std", value: 115, isUnsigned: true)
!384 = !DIEnumerator(name: "OPT_Winvalid_offsetof", value: 116, isUnsigned: true)
!385 = !DIEnumerator(name: "OPT_Winvalid_pch", value: 117, isUnsigned: true)
!386 = !DIEnumerator(name: "OPT_Wjavadoc", value: 118, isUnsigned: true)
!387 = !DIEnumerator(name: "OPT_Wjump_misses_init", value: 119, isUnsigned: true)
!388 = !DIEnumerator(name: "OPT_Wlarger_than_", value: 120, isUnsigned: true)
!389 = !DIEnumerator(name: "OPT_Wlarger_than_eq", value: 121, isUnsigned: true)
!390 = !DIEnumerator(name: "OPT_Wline_truncation", value: 122, isUnsigned: true)
!391 = !DIEnumerator(name: "OPT_Wlocal_hiding", value: 123, isUnsigned: true)
!392 = !DIEnumerator(name: "OPT_Wlogical_op", value: 124, isUnsigned: true)
!393 = !DIEnumerator(name: "OPT_Wlong_long", value: 125, isUnsigned: true)
!394 = !DIEnumerator(name: "OPT_Wmain", value: 126, isUnsigned: true)
!395 = !DIEnumerator(name: "OPT_Wmasked_catch_block", value: 127, isUnsigned: true)
!396 = !DIEnumerator(name: "OPT_Wmissing_braces", value: 128, isUnsigned: true)
!397 = !DIEnumerator(name: "OPT_Wmissing_declarations", value: 129, isUnsigned: true)
!398 = !DIEnumerator(name: "OPT_Wmissing_field_initializers", value: 130, isUnsigned: true)
!399 = !DIEnumerator(name: "OPT_Wmissing_format_attribute", value: 131, isUnsigned: true)
!400 = !DIEnumerator(name: "OPT_Wmissing_include_dirs", value: 132, isUnsigned: true)
!401 = !DIEnumerator(name: "OPT_Wmissing_noreturn", value: 133, isUnsigned: true)
!402 = !DIEnumerator(name: "OPT_Wmissing_parameter_type", value: 134, isUnsigned: true)
!403 = !DIEnumerator(name: "OPT_Wmissing_prototypes", value: 135, isUnsigned: true)
!404 = !DIEnumerator(name: "OPT_Wmudflap", value: 136, isUnsigned: true)
!405 = !DIEnumerator(name: "OPT_Wmultichar", value: 137, isUnsigned: true)
!406 = !DIEnumerator(name: "OPT_Wnested_externs", value: 138, isUnsigned: true)
!407 = !DIEnumerator(name: "OPT_Wnls", value: 139, isUnsigned: true)
!408 = !DIEnumerator(name: "OPT_Wno_effect_assign", value: 140, isUnsigned: true)
!409 = !DIEnumerator(name: "OPT_Wnon_template_friend", value: 141, isUnsigned: true)
!410 = !DIEnumerator(name: "OPT_Wnon_virtual_dtor", value: 142, isUnsigned: true)
!411 = !DIEnumerator(name: "OPT_Wnonnull", value: 143, isUnsigned: true)
!412 = !DIEnumerator(name: "OPT_Wnormalized_", value: 144, isUnsigned: true)
!413 = !DIEnumerator(name: "OPT_Wnull", value: 145, isUnsigned: true)
!414 = !DIEnumerator(name: "OPT_Wold_style_cast", value: 146, isUnsigned: true)
!415 = !DIEnumerator(name: "OPT_Wold_style_declaration", value: 147, isUnsigned: true)
!416 = !DIEnumerator(name: "OPT_Wold_style_definition", value: 148, isUnsigned: true)
!417 = !DIEnumerator(name: "OPT_Wout_of_date", value: 149, isUnsigned: true)
!418 = !DIEnumerator(name: "OPT_Wover_ann", value: 150, isUnsigned: true)
!419 = !DIEnumerator(name: "OPT_Woverflow", value: 151, isUnsigned: true)
!420 = !DIEnumerator(name: "OPT_Woverlength_strings", value: 152, isUnsigned: true)
!421 = !DIEnumerator(name: "OPT_Woverloaded_virtual", value: 153, isUnsigned: true)
!422 = !DIEnumerator(name: "OPT_Woverride_init", value: 154, isUnsigned: true)
!423 = !DIEnumerator(name: "OPT_Wpacked", value: 155, isUnsigned: true)
!424 = !DIEnumerator(name: "OPT_Wpacked_bitfield_compat", value: 156, isUnsigned: true)
!425 = !DIEnumerator(name: "OPT_Wpadded", value: 157, isUnsigned: true)
!426 = !DIEnumerator(name: "OPT_Wparam_assign", value: 158, isUnsigned: true)
!427 = !DIEnumerator(name: "OPT_Wparentheses", value: 159, isUnsigned: true)
!428 = !DIEnumerator(name: "OPT_Wpkg_default_method", value: 160, isUnsigned: true)
!429 = !DIEnumerator(name: "OPT_Wpmf_conversions", value: 161, isUnsigned: true)
!430 = !DIEnumerator(name: "OPT_Wpointer_arith", value: 162, isUnsigned: true)
!431 = !DIEnumerator(name: "OPT_Wpointer_sign", value: 163, isUnsigned: true)
!432 = !DIEnumerator(name: "OPT_Wpointer_to_int_cast", value: 164, isUnsigned: true)
!433 = !DIEnumerator(name: "OPT_Wpragmas", value: 165, isUnsigned: true)
!434 = !DIEnumerator(name: "OPT_Wprotocol", value: 166, isUnsigned: true)
!435 = !DIEnumerator(name: "OPT_Wpsabi", value: 167, isUnsigned: true)
!436 = !DIEnumerator(name: "OPT_Wraw", value: 168, isUnsigned: true)
!437 = !DIEnumerator(name: "OPT_Wredundant_decls", value: 169, isUnsigned: true)
!438 = !DIEnumerator(name: "OPT_Wredundant_modifiers", value: 170, isUnsigned: true)
!439 = !DIEnumerator(name: "OPT_Wreorder", value: 171, isUnsigned: true)
!440 = !DIEnumerator(name: "OPT_Wreturn_type", value: 172, isUnsigned: true)
!441 = !DIEnumerator(name: "OPT_Wselector", value: 173, isUnsigned: true)
!442 = !DIEnumerator(name: "OPT_Wsequence_point", value: 174, isUnsigned: true)
!443 = !DIEnumerator(name: "OPT_Wserial", value: 175, isUnsigned: true)
!444 = !DIEnumerator(name: "OPT_Wshadow", value: 176, isUnsigned: true)
!445 = !DIEnumerator(name: "OPT_Wsign_compare", value: 177, isUnsigned: true)
!446 = !DIEnumerator(name: "OPT_Wsign_conversion", value: 178, isUnsigned: true)
!447 = !DIEnumerator(name: "OPT_Wsign_promo", value: 179, isUnsigned: true)
!448 = !DIEnumerator(name: "OPT_Wspecial_param_hiding", value: 180, isUnsigned: true)
!449 = !DIEnumerator(name: "OPT_Wstack_protector", value: 181, isUnsigned: true)
!450 = !DIEnumerator(name: "OPT_Wstatic_access", value: 182, isUnsigned: true)
!451 = !DIEnumerator(name: "OPT_Wstatic_receiver", value: 183, isUnsigned: true)
!452 = !DIEnumerator(name: "OPT_Wstrict_aliasing", value: 184, isUnsigned: true)
!453 = !DIEnumerator(name: "OPT_Wstrict_aliasing_", value: 185, isUnsigned: true)
!454 = !DIEnumerator(name: "OPT_Wstrict_null_sentinel", value: 186, isUnsigned: true)
!455 = !DIEnumerator(name: "OPT_Wstrict_overflow", value: 187, isUnsigned: true)
!456 = !DIEnumerator(name: "OPT_Wstrict_overflow_", value: 188, isUnsigned: true)
!457 = !DIEnumerator(name: "OPT_Wstrict_prototypes", value: 189, isUnsigned: true)
!458 = !DIEnumerator(name: "OPT_Wstrict_selector_match", value: 190, isUnsigned: true)
!459 = !DIEnumerator(name: "OPT_Wsuppress", value: 191, isUnsigned: true)
!460 = !DIEnumerator(name: "OPT_Wsurprising", value: 192, isUnsigned: true)
!461 = !DIEnumerator(name: "OPT_Wswitch", value: 193, isUnsigned: true)
!462 = !DIEnumerator(name: "OPT_Wswitch_default", value: 194, isUnsigned: true)
!463 = !DIEnumerator(name: "OPT_Wswitch_enum", value: 195, isUnsigned: true)
!464 = !DIEnumerator(name: "OPT_Wsync_nand", value: 196, isUnsigned: true)
!465 = !DIEnumerator(name: "OPT_Wsynth", value: 197, isUnsigned: true)
!466 = !DIEnumerator(name: "OPT_Wsynthetic_access", value: 198, isUnsigned: true)
!467 = !DIEnumerator(name: "OPT_Wsystem_headers", value: 199, isUnsigned: true)
!468 = !DIEnumerator(name: "OPT_Wtabs", value: 200, isUnsigned: true)
!469 = !DIEnumerator(name: "OPT_Wtasks", value: 201, isUnsigned: true)
!470 = !DIEnumerator(name: "OPT_Wtraditional", value: 202, isUnsigned: true)
!471 = !DIEnumerator(name: "OPT_Wtraditional_conversion", value: 203, isUnsigned: true)
!472 = !DIEnumerator(name: "OPT_Wtrigraphs", value: 204, isUnsigned: true)
!473 = !DIEnumerator(name: "OPT_Wtype_hiding", value: 205, isUnsigned: true)
!474 = !DIEnumerator(name: "OPT_Wtype_limits", value: 206, isUnsigned: true)
!475 = !DIEnumerator(name: "OPT_Wuncheck", value: 207, isUnsigned: true)
!476 = !DIEnumerator(name: "OPT_Wundeclared_selector", value: 208, isUnsigned: true)
!477 = !DIEnumerator(name: "OPT_Wundef", value: 209, isUnsigned: true)
!478 = !DIEnumerator(name: "OPT_Wunderflow", value: 210, isUnsigned: true)
!479 = !DIEnumerator(name: "OPT_Wuninitialized", value: 211, isUnsigned: true)
!480 = !DIEnumerator(name: "OPT_Wunknown_pragmas", value: 212, isUnsigned: true)
!481 = !DIEnumerator(name: "OPT_Wunnecessary_else", value: 213, isUnsigned: true)
!482 = !DIEnumerator(name: "OPT_Wunqualified_field", value: 214, isUnsigned: true)
!483 = !DIEnumerator(name: "OPT_Wunreachable_code", value: 215, isUnsigned: true)
!484 = !DIEnumerator(name: "OPT_Wunsafe_loop_optimizations", value: 216, isUnsigned: true)
!485 = !DIEnumerator(name: "OPT_Wunsuffixed_float_constants", value: 217, isUnsigned: true)
!486 = !DIEnumerator(name: "OPT_Wunused", value: 218, isUnsigned: true)
!487 = !DIEnumerator(name: "OPT_Wunused_argument", value: 219, isUnsigned: true)
!488 = !DIEnumerator(name: "OPT_Wunused_function", value: 220, isUnsigned: true)
!489 = !DIEnumerator(name: "OPT_Wunused_import", value: 221, isUnsigned: true)
!490 = !DIEnumerator(name: "OPT_Wunused_label", value: 222, isUnsigned: true)
!491 = !DIEnumerator(name: "OPT_Wunused_local", value: 223, isUnsigned: true)
!492 = !DIEnumerator(name: "OPT_Wunused_macros", value: 224, isUnsigned: true)
!493 = !DIEnumerator(name: "OPT_Wunused_parameter", value: 225, isUnsigned: true)
!494 = !DIEnumerator(name: "OPT_Wunused_private", value: 226, isUnsigned: true)
!495 = !DIEnumerator(name: "OPT_Wunused_result", value: 227, isUnsigned: true)
!496 = !DIEnumerator(name: "OPT_Wunused_thrown", value: 228, isUnsigned: true)
!497 = !DIEnumerator(name: "OPT_Wunused_value", value: 229, isUnsigned: true)
!498 = !DIEnumerator(name: "OPT_Wunused_variable", value: 230, isUnsigned: true)
!499 = !DIEnumerator(name: "OPT_Wuseless_type_check", value: 231, isUnsigned: true)
!500 = !DIEnumerator(name: "OPT_Wvarargs_cast", value: 232, isUnsigned: true)
!501 = !DIEnumerator(name: "OPT_Wvariadic_macros", value: 233, isUnsigned: true)
!502 = !DIEnumerator(name: "OPT_Wvla", value: 234, isUnsigned: true)
!503 = !DIEnumerator(name: "OPT_Wvolatile_register_var", value: 235, isUnsigned: true)
!504 = !DIEnumerator(name: "OPT_Wwarning_token", value: 236, isUnsigned: true)
!505 = !DIEnumerator(name: "OPT_Wwrite_strings", value: 237, isUnsigned: true)
!506 = !DIEnumerator(name: "OPT_ansi", value: 238, isUnsigned: true)
!507 = !DIEnumerator(name: "OPT_aux_info", value: 239, isUnsigned: true)
!508 = !DIEnumerator(name: "OPT_aux_info_", value: 240, isUnsigned: true)
!509 = !DIEnumerator(name: "OPT_auxbase", value: 241, isUnsigned: true)
!510 = !DIEnumerator(name: "OPT_auxbase_strip", value: 242, isUnsigned: true)
!511 = !DIEnumerator(name: "OPT_cpp", value: 243, isUnsigned: true)
!512 = !DIEnumerator(name: "OPT_d", value: 244, isUnsigned: true)
!513 = !DIEnumerator(name: "OPT_dumpbase", value: 245, isUnsigned: true)
!514 = !DIEnumerator(name: "OPT_dumpdir", value: 246, isUnsigned: true)
!515 = !DIEnumerator(name: "OPT_fCLASSPATH_", value: 247, isUnsigned: true)
!516 = !DIEnumerator(name: "OPT_fPIC", value: 248, isUnsigned: true)
!517 = !DIEnumerator(name: "OPT_fPIE", value: 249, isUnsigned: true)
!518 = !DIEnumerator(name: "OPT_fRTS_", value: 250, isUnsigned: true)
!519 = !DIEnumerator(name: "OPT_fabi_version_", value: 251, isUnsigned: true)
!520 = !DIEnumerator(name: "OPT_faccess_control", value: 252, isUnsigned: true)
!521 = !DIEnumerator(name: "OPT_falign_commons", value: 253, isUnsigned: true)
!522 = !DIEnumerator(name: "OPT_falign_functions", value: 254, isUnsigned: true)
!523 = !DIEnumerator(name: "OPT_falign_functions_", value: 255, isUnsigned: true)
!524 = !DIEnumerator(name: "OPT_falign_jumps", value: 256, isUnsigned: true)
!525 = !DIEnumerator(name: "OPT_falign_jumps_", value: 257, isUnsigned: true)
!526 = !DIEnumerator(name: "OPT_falign_labels", value: 258, isUnsigned: true)
!527 = !DIEnumerator(name: "OPT_falign_labels_", value: 259, isUnsigned: true)
!528 = !DIEnumerator(name: "OPT_falign_loops", value: 260, isUnsigned: true)
!529 = !DIEnumerator(name: "OPT_falign_loops_", value: 261, isUnsigned: true)
!530 = !DIEnumerator(name: "OPT_fall_intrinsics", value: 262, isUnsigned: true)
!531 = !DIEnumerator(name: "OPT_fall_virtual", value: 263, isUnsigned: true)
!532 = !DIEnumerator(name: "OPT_fallow_leading_underscore", value: 264, isUnsigned: true)
!533 = !DIEnumerator(name: "OPT_falt_external_templates", value: 265, isUnsigned: true)
!534 = !DIEnumerator(name: "OPT_fargument_alias", value: 266, isUnsigned: true)
!535 = !DIEnumerator(name: "OPT_fargument_noalias", value: 267, isUnsigned: true)
!536 = !DIEnumerator(name: "OPT_fargument_noalias_anything", value: 268, isUnsigned: true)
!537 = !DIEnumerator(name: "OPT_fargument_noalias_global", value: 269, isUnsigned: true)
!538 = !DIEnumerator(name: "OPT_fasm", value: 270, isUnsigned: true)
!539 = !DIEnumerator(name: "OPT_fassert", value: 271, isUnsigned: true)
!540 = !DIEnumerator(name: "OPT_fassociative_math", value: 272, isUnsigned: true)
!541 = !DIEnumerator(name: "OPT_fassume_compiled", value: 273, isUnsigned: true)
!542 = !DIEnumerator(name: "OPT_fassume_compiled_", value: 274, isUnsigned: true)
!543 = !DIEnumerator(name: "OPT_fasynchronous_unwind_tables", value: 275, isUnsigned: true)
!544 = !DIEnumerator(name: "OPT_fauto_inc_dec", value: 276, isUnsigned: true)
!545 = !DIEnumerator(name: "OPT_fautomatic", value: 277, isUnsigned: true)
!546 = !DIEnumerator(name: "OPT_faux_classpath", value: 278, isUnsigned: true)
!547 = !DIEnumerator(name: "OPT_fbackslash", value: 279, isUnsigned: true)
!548 = !DIEnumerator(name: "OPT_fbacktrace", value: 280, isUnsigned: true)
!549 = !DIEnumerator(name: "OPT_fblas_matmul_limit_", value: 281, isUnsigned: true)
!550 = !DIEnumerator(name: "OPT_fbootclasspath_", value: 282, isUnsigned: true)
!551 = !DIEnumerator(name: "OPT_fbootstrap_classes", value: 283, isUnsigned: true)
!552 = !DIEnumerator(name: "OPT_fbounds_check", value: 284, isUnsigned: true)
!553 = !DIEnumerator(name: "OPT_fbranch_count_reg", value: 285, isUnsigned: true)
!554 = !DIEnumerator(name: "OPT_fbranch_probabilities", value: 286, isUnsigned: true)
!555 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize", value: 287, isUnsigned: true)
!556 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize2", value: 288, isUnsigned: true)
!557 = !DIEnumerator(name: "OPT_fbtr_bb_exclusive", value: 289, isUnsigned: true)
!558 = !DIEnumerator(name: "OPT_fbuiltin", value: 290, isUnsigned: true)
!559 = !DIEnumerator(name: "OPT_fbuiltin_", value: 291, isUnsigned: true)
!560 = !DIEnumerator(name: "OPT_fcall_saved_", value: 292, isUnsigned: true)
!561 = !DIEnumerator(name: "OPT_fcall_used_", value: 293, isUnsigned: true)
!562 = !DIEnumerator(name: "OPT_fcaller_saves", value: 294, isUnsigned: true)
!563 = !DIEnumerator(name: "OPT_fcheck_array_temporaries", value: 295, isUnsigned: true)
!564 = !DIEnumerator(name: "OPT_fcheck_data_deps", value: 296, isUnsigned: true)
!565 = !DIEnumerator(name: "OPT_fcheck_new", value: 297, isUnsigned: true)
!566 = !DIEnumerator(name: "OPT_fcheck_references", value: 298, isUnsigned: true)
!567 = !DIEnumerator(name: "OPT_fcheck_", value: 299, isUnsigned: true)
!568 = !DIEnumerator(name: "OPT_fclasspath_", value: 300, isUnsigned: true)
!569 = !DIEnumerator(name: "OPT_fcommon", value: 301, isUnsigned: true)
!570 = !DIEnumerator(name: "OPT_fcompare_debug_second", value: 302, isUnsigned: true)
!571 = !DIEnumerator(name: "OPT_fcompare_debug_", value: 303, isUnsigned: true)
!572 = !DIEnumerator(name: "OPT_fcompile_resource_", value: 304, isUnsigned: true)
!573 = !DIEnumerator(name: "OPT_fcond_mismatch", value: 305, isUnsigned: true)
!574 = !DIEnumerator(name: "OPT_fconserve_space", value: 306, isUnsigned: true)
!575 = !DIEnumerator(name: "OPT_fconserve_stack", value: 307, isUnsigned: true)
!576 = !DIEnumerator(name: "OPT_fconstant_string_class_", value: 308, isUnsigned: true)
!577 = !DIEnumerator(name: "OPT_fconvert_big_endian", value: 309, isUnsigned: true)
!578 = !DIEnumerator(name: "OPT_fconvert_little_endian", value: 310, isUnsigned: true)
!579 = !DIEnumerator(name: "OPT_fconvert_native", value: 311, isUnsigned: true)
!580 = !DIEnumerator(name: "OPT_fconvert_swap", value: 312, isUnsigned: true)
!581 = !DIEnumerator(name: "OPT_fcprop_registers", value: 313, isUnsigned: true)
!582 = !DIEnumerator(name: "OPT_fcray_pointer", value: 314, isUnsigned: true)
!583 = !DIEnumerator(name: "OPT_fcrossjumping", value: 315, isUnsigned: true)
!584 = !DIEnumerator(name: "OPT_fcse_follow_jumps", value: 316, isUnsigned: true)
!585 = !DIEnumerator(name: "OPT_fcse_skip_blocks", value: 317, isUnsigned: true)
!586 = !DIEnumerator(name: "OPT_fcx_fortran_rules", value: 318, isUnsigned: true)
!587 = !DIEnumerator(name: "OPT_fcx_limited_range", value: 319, isUnsigned: true)
!588 = !DIEnumerator(name: "OPT_fd_lines_as_code", value: 320, isUnsigned: true)
!589 = !DIEnumerator(name: "OPT_fd_lines_as_comments", value: 321, isUnsigned: true)
!590 = !DIEnumerator(name: "OPT_fdata_sections", value: 322, isUnsigned: true)
!591 = !DIEnumerator(name: "OPT_fdbg_cnt_list", value: 323, isUnsigned: true)
!592 = !DIEnumerator(name: "OPT_fdbg_cnt_", value: 324, isUnsigned: true)
!593 = !DIEnumerator(name: "OPT_fdce", value: 325, isUnsigned: true)
!594 = !DIEnumerator(name: "OPT_fdebug_prefix_map_", value: 326, isUnsigned: true)
!595 = !DIEnumerator(name: "OPT_fdeduce_init_list", value: 327, isUnsigned: true)
!596 = !DIEnumerator(name: "OPT_fdefault_double_8", value: 328, isUnsigned: true)
!597 = !DIEnumerator(name: "OPT_fdefault_inline", value: 329, isUnsigned: true)
!598 = !DIEnumerator(name: "OPT_fdefault_integer_8", value: 330, isUnsigned: true)
!599 = !DIEnumerator(name: "OPT_fdefault_real_8", value: 331, isUnsigned: true)
!600 = !DIEnumerator(name: "OPT_fdefer_pop", value: 332, isUnsigned: true)
!601 = !DIEnumerator(name: "OPT_fdelayed_branch", value: 333, isUnsigned: true)
!602 = !DIEnumerator(name: "OPT_fdelete_null_pointer_checks", value: 334, isUnsigned: true)
!603 = !DIEnumerator(name: "OPT_fdiagnostics_show_location_", value: 335, isUnsigned: true)
!604 = !DIEnumerator(name: "OPT_fdiagnostics_show_option", value: 336, isUnsigned: true)
!605 = !DIEnumerator(name: "OPT_fdirectives_only", value: 337, isUnsigned: true)
!606 = !DIEnumerator(name: "OPT_fdisable_assertions", value: 338, isUnsigned: true)
!607 = !DIEnumerator(name: "OPT_fdisable_assertions_", value: 339, isUnsigned: true)
!608 = !DIEnumerator(name: "OPT_fdollar_ok", value: 340, isUnsigned: true)
!609 = !DIEnumerator(name: "OPT_fdollars_in_identifiers", value: 341, isUnsigned: true)
!610 = !DIEnumerator(name: "OPT_fdse", value: 342, isUnsigned: true)
!611 = !DIEnumerator(name: "OPT_fdump_", value: 343, isUnsigned: true)
!612 = !DIEnumerator(name: "OPT_fdump_core", value: 344, isUnsigned: true)
!613 = !DIEnumerator(name: "OPT_fdump_final_insns_", value: 345, isUnsigned: true)
!614 = !DIEnumerator(name: "OPT_fdump_noaddr", value: 346, isUnsigned: true)
!615 = !DIEnumerator(name: "OPT_fdump_parse_tree", value: 347, isUnsigned: true)
!616 = !DIEnumerator(name: "OPT_fdump_unnumbered", value: 348, isUnsigned: true)
!617 = !DIEnumerator(name: "OPT_fdump_unnumbered_links", value: 349, isUnsigned: true)
!618 = !DIEnumerator(name: "OPT_fdwarf2_cfi_asm", value: 350, isUnsigned: true)
!619 = !DIEnumerator(name: "OPT_fearly_inlining", value: 351, isUnsigned: true)
!620 = !DIEnumerator(name: "OPT_felide_constructors", value: 352, isUnsigned: true)
!621 = !DIEnumerator(name: "OPT_feliminate_dwarf2_dups", value: 353, isUnsigned: true)
!622 = !DIEnumerator(name: "OPT_feliminate_unused_debug_symbols", value: 354, isUnsigned: true)
!623 = !DIEnumerator(name: "OPT_feliminate_unused_debug_types", value: 355, isUnsigned: true)
!624 = !DIEnumerator(name: "OPT_femit_class_debug_always", value: 356, isUnsigned: true)
!625 = !DIEnumerator(name: "OPT_femit_class_file", value: 357, isUnsigned: true)
!626 = !DIEnumerator(name: "OPT_femit_class_files", value: 358, isUnsigned: true)
!627 = !DIEnumerator(name: "OPT_femit_struct_debug_baseonly", value: 359, isUnsigned: true)
!628 = !DIEnumerator(name: "OPT_femit_struct_debug_detailed_", value: 360, isUnsigned: true)
!629 = !DIEnumerator(name: "OPT_femit_struct_debug_reduced", value: 361, isUnsigned: true)
!630 = !DIEnumerator(name: "OPT_fenable_assertions", value: 362, isUnsigned: true)
!631 = !DIEnumerator(name: "OPT_fenable_assertions_", value: 363, isUnsigned: true)
!632 = !DIEnumerator(name: "OPT_fenable_icf_debug", value: 364, isUnsigned: true)
!633 = !DIEnumerator(name: "OPT_fencoding_", value: 365, isUnsigned: true)
!634 = !DIEnumerator(name: "OPT_fenforce_eh_specs", value: 366, isUnsigned: true)
!635 = !DIEnumerator(name: "OPT_fenum_int_equiv", value: 367, isUnsigned: true)
!636 = !DIEnumerator(name: "OPT_fexceptions", value: 368, isUnsigned: true)
!637 = !DIEnumerator(name: "OPT_fexcess_precision_", value: 369, isUnsigned: true)
!638 = !DIEnumerator(name: "OPT_fexec_charset_", value: 370, isUnsigned: true)
!639 = !DIEnumerator(name: "OPT_fexpensive_optimizations", value: 371, isUnsigned: true)
!640 = !DIEnumerator(name: "OPT_fextdirs_", value: 372, isUnsigned: true)
!641 = !DIEnumerator(name: "OPT_fextended_identifiers", value: 373, isUnsigned: true)
!642 = !DIEnumerator(name: "OPT_fexternal_blas", value: 374, isUnsigned: true)
!643 = !DIEnumerator(name: "OPT_fexternal_templates", value: 375, isUnsigned: true)
!644 = !DIEnumerator(name: "OPT_ff2c", value: 376, isUnsigned: true)
!645 = !DIEnumerator(name: "OPT_ffast_math", value: 377, isUnsigned: true)
!646 = !DIEnumerator(name: "OPT_ffilelist_file", value: 378, isUnsigned: true)
!647 = !DIEnumerator(name: "OPT_ffinite_math_only", value: 379, isUnsigned: true)
!648 = !DIEnumerator(name: "OPT_ffixed_", value: 380, isUnsigned: true)
!649 = !DIEnumerator(name: "OPT_ffixed_form", value: 381, isUnsigned: true)
!650 = !DIEnumerator(name: "OPT_ffixed_line_length_", value: 382, isUnsigned: true)
!651 = !DIEnumerator(name: "OPT_ffixed_line_length_none", value: 383, isUnsigned: true)
!652 = !DIEnumerator(name: "OPT_ffloat_store", value: 384, isUnsigned: true)
!653 = !DIEnumerator(name: "OPT_ffor_scope", value: 385, isUnsigned: true)
!654 = !DIEnumerator(name: "OPT_fforce_addr", value: 386, isUnsigned: true)
!655 = !DIEnumerator(name: "OPT_fforce_classes_archive_check", value: 387, isUnsigned: true)
!656 = !DIEnumerator(name: "OPT_fforward_propagate", value: 388, isUnsigned: true)
!657 = !DIEnumerator(name: "OPT_ffpe_trap_", value: 389, isUnsigned: true)
!658 = !DIEnumerator(name: "OPT_ffree_form", value: 390, isUnsigned: true)
!659 = !DIEnumerator(name: "OPT_ffree_line_length_", value: 391, isUnsigned: true)
!660 = !DIEnumerator(name: "OPT_ffree_line_length_none", value: 392, isUnsigned: true)
!661 = !DIEnumerator(name: "OPT_ffreestanding", value: 393, isUnsigned: true)
!662 = !DIEnumerator(name: "OPT_ffriend_injection", value: 394, isUnsigned: true)
!663 = !DIEnumerator(name: "OPT_ffunction_cse", value: 395, isUnsigned: true)
!664 = !DIEnumerator(name: "OPT_ffunction_sections", value: 396, isUnsigned: true)
!665 = !DIEnumerator(name: "OPT_fgcse", value: 397, isUnsigned: true)
!666 = !DIEnumerator(name: "OPT_fgcse_after_reload", value: 398, isUnsigned: true)
!667 = !DIEnumerator(name: "OPT_fgcse_las", value: 399, isUnsigned: true)
!668 = !DIEnumerator(name: "OPT_fgcse_lm", value: 400, isUnsigned: true)
!669 = !DIEnumerator(name: "OPT_fgcse_sm", value: 401, isUnsigned: true)
!670 = !DIEnumerator(name: "OPT_fgnu_keywords", value: 402, isUnsigned: true)
!671 = !DIEnumerator(name: "OPT_fgnu_runtime", value: 403, isUnsigned: true)
!672 = !DIEnumerator(name: "OPT_fgnu89_inline", value: 404, isUnsigned: true)
!673 = !DIEnumerator(name: "OPT_fgraphite", value: 405, isUnsigned: true)
!674 = !DIEnumerator(name: "OPT_fgraphite_identity", value: 406, isUnsigned: true)
!675 = !DIEnumerator(name: "OPT_fguess_branch_probability", value: 407, isUnsigned: true)
!676 = !DIEnumerator(name: "OPT_fguiding_decls", value: 408, isUnsigned: true)
!677 = !DIEnumerator(name: "OPT_fhandle_exceptions", value: 409, isUnsigned: true)
!678 = !DIEnumerator(name: "OPT_fhash_synchronization", value: 410, isUnsigned: true)
!679 = !DIEnumerator(name: "OPT_fhelp", value: 411, isUnsigned: true)
!680 = !DIEnumerator(name: "OPT_fhelp_", value: 412, isUnsigned: true)
!681 = !DIEnumerator(name: "OPT_fhonor_std", value: 413, isUnsigned: true)
!682 = !DIEnumerator(name: "OPT_fhosted", value: 414, isUnsigned: true)
!683 = !DIEnumerator(name: "OPT_fhuge_objects", value: 415, isUnsigned: true)
!684 = !DIEnumerator(name: "OPT_fident", value: 416, isUnsigned: true)
!685 = !DIEnumerator(name: "OPT_fif_conversion", value: 417, isUnsigned: true)
!686 = !DIEnumerator(name: "OPT_fif_conversion2", value: 418, isUnsigned: true)
!687 = !DIEnumerator(name: "OPT_fimplement_inlines", value: 419, isUnsigned: true)
!688 = !DIEnumerator(name: "OPT_fimplicit_inline_templates", value: 420, isUnsigned: true)
!689 = !DIEnumerator(name: "OPT_fimplicit_none", value: 421, isUnsigned: true)
!690 = !DIEnumerator(name: "OPT_fimplicit_templates", value: 422, isUnsigned: true)
!691 = !DIEnumerator(name: "OPT_findirect_classes", value: 423, isUnsigned: true)
!692 = !DIEnumerator(name: "OPT_findirect_dispatch", value: 424, isUnsigned: true)
!693 = !DIEnumerator(name: "OPT_findirect_inlining", value: 425, isUnsigned: true)
!694 = !DIEnumerator(name: "OPT_finhibit_size_directive", value: 426, isUnsigned: true)
!695 = !DIEnumerator(name: "OPT_finit_character_", value: 427, isUnsigned: true)
!696 = !DIEnumerator(name: "OPT_finit_integer_", value: 428, isUnsigned: true)
!697 = !DIEnumerator(name: "OPT_finit_local_zero", value: 429, isUnsigned: true)
!698 = !DIEnumerator(name: "OPT_finit_logical_", value: 430, isUnsigned: true)
!699 = !DIEnumerator(name: "OPT_finit_real_", value: 431, isUnsigned: true)
!700 = !DIEnumerator(name: "OPT_finline", value: 432, isUnsigned: true)
!701 = !DIEnumerator(name: "OPT_finline_functions", value: 433, isUnsigned: true)
!702 = !DIEnumerator(name: "OPT_finline_functions_called_once", value: 434, isUnsigned: true)
!703 = !DIEnumerator(name: "OPT_finline_limit_", value: 435, isUnsigned: true)
!704 = !DIEnumerator(name: "OPT_finline_limit_eq", value: 436, isUnsigned: true)
!705 = !DIEnumerator(name: "OPT_finline_small_functions", value: 437, isUnsigned: true)
!706 = !DIEnumerator(name: "OPT_finput_charset_", value: 438, isUnsigned: true)
!707 = !DIEnumerator(name: "OPT_finstrument_functions", value: 439, isUnsigned: true)
!708 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_file_list_", value: 440, isUnsigned: true)
!709 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_function_list_", value: 441, isUnsigned: true)
!710 = !DIEnumerator(name: "OPT_fintrinsic_modules_path", value: 442, isUnsigned: true)
!711 = !DIEnumerator(name: "OPT_fipa_cp", value: 443, isUnsigned: true)
!712 = !DIEnumerator(name: "OPT_fipa_cp_clone", value: 444, isUnsigned: true)
!713 = !DIEnumerator(name: "OPT_fipa_matrix_reorg", value: 445, isUnsigned: true)
!714 = !DIEnumerator(name: "OPT_fipa_pta", value: 446, isUnsigned: true)
!715 = !DIEnumerator(name: "OPT_fipa_pure_const", value: 447, isUnsigned: true)
!716 = !DIEnumerator(name: "OPT_fipa_reference", value: 448, isUnsigned: true)
!717 = !DIEnumerator(name: "OPT_fipa_sra", value: 449, isUnsigned: true)
!718 = !DIEnumerator(name: "OPT_fipa_struct_reorg", value: 450, isUnsigned: true)
!719 = !DIEnumerator(name: "OPT_fipa_type_escape", value: 451, isUnsigned: true)
!720 = !DIEnumerator(name: "OPT_fira_algorithm_", value: 452, isUnsigned: true)
!721 = !DIEnumerator(name: "OPT_fira_coalesce", value: 453, isUnsigned: true)
!722 = !DIEnumerator(name: "OPT_fira_loop_pressure", value: 454, isUnsigned: true)
!723 = !DIEnumerator(name: "OPT_fira_region_", value: 455, isUnsigned: true)
!724 = !DIEnumerator(name: "OPT_fira_share_save_slots", value: 456, isUnsigned: true)
!725 = !DIEnumerator(name: "OPT_fira_share_spill_slots", value: 457, isUnsigned: true)
!726 = !DIEnumerator(name: "OPT_fira_verbose_", value: 458, isUnsigned: true)
!727 = !DIEnumerator(name: "OPT_fivopts", value: 459, isUnsigned: true)
!728 = !DIEnumerator(name: "OPT_fjni", value: 460, isUnsigned: true)
!729 = !DIEnumerator(name: "OPT_fjump_tables", value: 461, isUnsigned: true)
!730 = !DIEnumerator(name: "OPT_fkeep_inline_functions", value: 462, isUnsigned: true)
!731 = !DIEnumerator(name: "OPT_fkeep_static_consts", value: 463, isUnsigned: true)
!732 = !DIEnumerator(name: "OPT_flabels_ok", value: 464, isUnsigned: true)
!733 = !DIEnumerator(name: "OPT_flax_vector_conversions", value: 465, isUnsigned: true)
!734 = !DIEnumerator(name: "OPT_fleading_underscore", value: 466, isUnsigned: true)
!735 = !DIEnumerator(name: "OPT_floop_block", value: 467, isUnsigned: true)
!736 = !DIEnumerator(name: "OPT_floop_interchange", value: 468, isUnsigned: true)
!737 = !DIEnumerator(name: "OPT_floop_optimize", value: 469, isUnsigned: true)
!738 = !DIEnumerator(name: "OPT_floop_parallelize_all", value: 470, isUnsigned: true)
!739 = !DIEnumerator(name: "OPT_floop_strip_mine", value: 471, isUnsigned: true)
!740 = !DIEnumerator(name: "OPT_flto", value: 472, isUnsigned: true)
!741 = !DIEnumerator(name: "OPT_flto_compression_level_", value: 473, isUnsigned: true)
!742 = !DIEnumerator(name: "OPT_flto_report", value: 474, isUnsigned: true)
!743 = !DIEnumerator(name: "OPT_fltrans", value: 475, isUnsigned: true)
!744 = !DIEnumerator(name: "OPT_fltrans_output_list_", value: 476, isUnsigned: true)
!745 = !DIEnumerator(name: "OPT_fmath_errno", value: 477, isUnsigned: true)
!746 = !DIEnumerator(name: "OPT_fmax_array_constructor_", value: 478, isUnsigned: true)
!747 = !DIEnumerator(name: "OPT_fmax_errors_", value: 479, isUnsigned: true)
!748 = !DIEnumerator(name: "OPT_fmax_identifier_length_", value: 480, isUnsigned: true)
!749 = !DIEnumerator(name: "OPT_fmax_stack_var_size_", value: 481, isUnsigned: true)
!750 = !DIEnumerator(name: "OPT_fmax_subrecord_length_", value: 482, isUnsigned: true)
!751 = !DIEnumerator(name: "OPT_fmem_report", value: 483, isUnsigned: true)
!752 = !DIEnumerator(name: "OPT_fmerge_all_constants", value: 484, isUnsigned: true)
!753 = !DIEnumerator(name: "OPT_fmerge_constants", value: 485, isUnsigned: true)
!754 = !DIEnumerator(name: "OPT_fmerge_debug_strings", value: 486, isUnsigned: true)
!755 = !DIEnumerator(name: "OPT_fmessage_length_", value: 487, isUnsigned: true)
!756 = !DIEnumerator(name: "OPT_fmodule_private", value: 488, isUnsigned: true)
!757 = !DIEnumerator(name: "OPT_fmodulo_sched", value: 489, isUnsigned: true)
!758 = !DIEnumerator(name: "OPT_fmodulo_sched_allow_regmoves", value: 490, isUnsigned: true)
!759 = !DIEnumerator(name: "OPT_fmove_loop_invariants", value: 491, isUnsigned: true)
!760 = !DIEnumerator(name: "OPT_fms_extensions", value: 492, isUnsigned: true)
!761 = !DIEnumerator(name: "OPT_fmudflap", value: 493, isUnsigned: true)
!762 = !DIEnumerator(name: "OPT_fmudflapir", value: 494, isUnsigned: true)
!763 = !DIEnumerator(name: "OPT_fmudflapth", value: 495, isUnsigned: true)
!764 = !DIEnumerator(name: "OPT_fname_mangling_version_", value: 496, isUnsigned: true)
!765 = !DIEnumerator(name: "OPT_fnew_abi", value: 497, isUnsigned: true)
!766 = !DIEnumerator(name: "OPT_fnext_runtime", value: 498, isUnsigned: true)
!767 = !DIEnumerator(name: "OPT_fnil_receivers", value: 499, isUnsigned: true)
!768 = !DIEnumerator(name: "OPT_fnon_call_exceptions", value: 500, isUnsigned: true)
!769 = !DIEnumerator(name: "OPT_fnonansi_builtins", value: 501, isUnsigned: true)
!770 = !DIEnumerator(name: "OPT_fnonnull_objects", value: 502, isUnsigned: true)
!771 = !DIEnumerator(name: "OPT_fobjc_call_cxx_cdtors", value: 503, isUnsigned: true)
!772 = !DIEnumerator(name: "OPT_fobjc_direct_dispatch", value: 504, isUnsigned: true)
!773 = !DIEnumerator(name: "OPT_fobjc_exceptions", value: 505, isUnsigned: true)
!774 = !DIEnumerator(name: "OPT_fobjc_gc", value: 506, isUnsigned: true)
!775 = !DIEnumerator(name: "OPT_fobjc_sjlj_exceptions", value: 507, isUnsigned: true)
!776 = !DIEnumerator(name: "OPT_fomit_frame_pointer", value: 508, isUnsigned: true)
!777 = !DIEnumerator(name: "OPT_fopenmp", value: 509, isUnsigned: true)
!778 = !DIEnumerator(name: "OPT_foperator_names", value: 510, isUnsigned: true)
!779 = !DIEnumerator(name: "OPT_foptimize_register_move", value: 511, isUnsigned: true)
!780 = !DIEnumerator(name: "OPT_foptimize_sibling_calls", value: 512, isUnsigned: true)
!781 = !DIEnumerator(name: "OPT_foptimize_static_class_initialization", value: 513, isUnsigned: true)
!782 = !DIEnumerator(name: "OPT_foptional_diags", value: 514, isUnsigned: true)
!783 = !DIEnumerator(name: "OPT_foutput_class_dir_", value: 515, isUnsigned: true)
!784 = !DIEnumerator(name: "OPT_fpack_derived", value: 516, isUnsigned: true)
!785 = !DIEnumerator(name: "OPT_fpack_struct", value: 517, isUnsigned: true)
!786 = !DIEnumerator(name: "OPT_fpack_struct_", value: 518, isUnsigned: true)
!787 = !DIEnumerator(name: "OPT_fpcc_struct_return", value: 519, isUnsigned: true)
!788 = !DIEnumerator(name: "OPT_fpch_deps", value: 520, isUnsigned: true)
!789 = !DIEnumerator(name: "OPT_fpch_preprocess", value: 521, isUnsigned: true)
!790 = !DIEnumerator(name: "OPT_fpeel_loops", value: 522, isUnsigned: true)
!791 = !DIEnumerator(name: "OPT_fpeephole", value: 523, isUnsigned: true)
!792 = !DIEnumerator(name: "OPT_fpeephole2", value: 524, isUnsigned: true)
!793 = !DIEnumerator(name: "OPT_fpermissive", value: 525, isUnsigned: true)
!794 = !DIEnumerator(name: "OPT_fpic", value: 526, isUnsigned: true)
!795 = !DIEnumerator(name: "OPT_fpie", value: 527, isUnsigned: true)
!796 = !DIEnumerator(name: "OPT_fplugin_arg_", value: 528, isUnsigned: true)
!797 = !DIEnumerator(name: "OPT_fplugin_", value: 529, isUnsigned: true)
!798 = !DIEnumerator(name: "OPT_fpost_ipa_mem_report", value: 530, isUnsigned: true)
!799 = !DIEnumerator(name: "OPT_fpre_ipa_mem_report", value: 531, isUnsigned: true)
!800 = !DIEnumerator(name: "OPT_fpredictive_commoning", value: 532, isUnsigned: true)
!801 = !DIEnumerator(name: "OPT_fprefetch_loop_arrays", value: 533, isUnsigned: true)
!802 = !DIEnumerator(name: "OPT_fpreprocessed", value: 534, isUnsigned: true)
!803 = !DIEnumerator(name: "OPT_fpretty_templates", value: 535, isUnsigned: true)
!804 = !DIEnumerator(name: "OPT_fprofile", value: 536, isUnsigned: true)
!805 = !DIEnumerator(name: "OPT_fprofile_arcs", value: 537, isUnsigned: true)
!806 = !DIEnumerator(name: "OPT_fprofile_correction", value: 538, isUnsigned: true)
!807 = !DIEnumerator(name: "OPT_fprofile_dir_", value: 539, isUnsigned: true)
!808 = !DIEnumerator(name: "OPT_fprofile_generate", value: 540, isUnsigned: true)
!809 = !DIEnumerator(name: "OPT_fprofile_generate_", value: 541, isUnsigned: true)
!810 = !DIEnumerator(name: "OPT_fprofile_use", value: 542, isUnsigned: true)
!811 = !DIEnumerator(name: "OPT_fprofile_use_", value: 543, isUnsigned: true)
!812 = !DIEnumerator(name: "OPT_fprofile_values", value: 544, isUnsigned: true)
!813 = !DIEnumerator(name: "OPT_fprotect_parens", value: 545, isUnsigned: true)
!814 = !DIEnumerator(name: "OPT_frandom_seed", value: 546, isUnsigned: true)
!815 = !DIEnumerator(name: "OPT_frandom_seed_", value: 547, isUnsigned: true)
!816 = !DIEnumerator(name: "OPT_frange_check", value: 548, isUnsigned: true)
!817 = !DIEnumerator(name: "OPT_freciprocal_math", value: 549, isUnsigned: true)
!818 = !DIEnumerator(name: "OPT_frecord_gcc_switches", value: 550, isUnsigned: true)
!819 = !DIEnumerator(name: "OPT_frecord_marker_4", value: 551, isUnsigned: true)
!820 = !DIEnumerator(name: "OPT_frecord_marker_8", value: 552, isUnsigned: true)
!821 = !DIEnumerator(name: "OPT_frecursive", value: 553, isUnsigned: true)
!822 = !DIEnumerator(name: "OPT_freduced_reflection", value: 554, isUnsigned: true)
!823 = !DIEnumerator(name: "OPT_freg_struct_return", value: 555, isUnsigned: true)
!824 = !DIEnumerator(name: "OPT_fregmove", value: 556, isUnsigned: true)
!825 = !DIEnumerator(name: "OPT_frename_registers", value: 557, isUnsigned: true)
!826 = !DIEnumerator(name: "OPT_freorder_blocks", value: 558, isUnsigned: true)
!827 = !DIEnumerator(name: "OPT_freorder_blocks_and_partition", value: 559, isUnsigned: true)
!828 = !DIEnumerator(name: "OPT_freorder_functions", value: 560, isUnsigned: true)
!829 = !DIEnumerator(name: "OPT_frepack_arrays", value: 561, isUnsigned: true)
!830 = !DIEnumerator(name: "OPT_freplace_objc_classes", value: 562, isUnsigned: true)
!831 = !DIEnumerator(name: "OPT_frepo", value: 563, isUnsigned: true)
!832 = !DIEnumerator(name: "OPT_frerun_cse_after_loop", value: 564, isUnsigned: true)
!833 = !DIEnumerator(name: "OPT_frerun_loop_opt", value: 565, isUnsigned: true)
!834 = !DIEnumerator(name: "OPT_freschedule_modulo_scheduled_loops", value: 566, isUnsigned: true)
!835 = !DIEnumerator(name: "OPT_fresolution", value: 567, isUnsigned: true)
!836 = !DIEnumerator(name: "OPT_frounding_math", value: 568, isUnsigned: true)
!837 = !DIEnumerator(name: "OPT_frtti", value: 569, isUnsigned: true)
!838 = !DIEnumerator(name: "OPT_fsaw_java_file", value: 570, isUnsigned: true)
!839 = !DIEnumerator(name: "OPT_fsched_critical_path_heuristic", value: 571, isUnsigned: true)
!840 = !DIEnumerator(name: "OPT_fsched_dep_count_heuristic", value: 572, isUnsigned: true)
!841 = !DIEnumerator(name: "OPT_fsched_group_heuristic", value: 573, isUnsigned: true)
!842 = !DIEnumerator(name: "OPT_fsched_interblock", value: 574, isUnsigned: true)
!843 = !DIEnumerator(name: "OPT_fsched_last_insn_heuristic", value: 575, isUnsigned: true)
!844 = !DIEnumerator(name: "OPT_fsched_pressure", value: 576, isUnsigned: true)
!845 = !DIEnumerator(name: "OPT_fsched_rank_heuristic", value: 577, isUnsigned: true)
!846 = !DIEnumerator(name: "OPT_fsched_spec", value: 578, isUnsigned: true)
!847 = !DIEnumerator(name: "OPT_fsched_spec_insn_heuristic", value: 579, isUnsigned: true)
!848 = !DIEnumerator(name: "OPT_fsched_spec_load", value: 580, isUnsigned: true)
!849 = !DIEnumerator(name: "OPT_fsched_spec_load_dangerous", value: 581, isUnsigned: true)
!850 = !DIEnumerator(name: "OPT_fsched_stalled_insns", value: 582, isUnsigned: true)
!851 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep", value: 583, isUnsigned: true)
!852 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep_", value: 584, isUnsigned: true)
!853 = !DIEnumerator(name: "OPT_fsched_stalled_insns_", value: 585, isUnsigned: true)
!854 = !DIEnumerator(name: "OPT_fsched_verbose_", value: 586, isUnsigned: true)
!855 = !DIEnumerator(name: "OPT_fsched2_use_superblocks", value: 587, isUnsigned: true)
!856 = !DIEnumerator(name: "OPT_fsched2_use_traces", value: 588, isUnsigned: true)
!857 = !DIEnumerator(name: "OPT_fschedule_insns", value: 589, isUnsigned: true)
!858 = !DIEnumerator(name: "OPT_fschedule_insns2", value: 590, isUnsigned: true)
!859 = !DIEnumerator(name: "OPT_fsecond_underscore", value: 591, isUnsigned: true)
!860 = !DIEnumerator(name: "OPT_fsection_anchors", value: 592, isUnsigned: true)
!861 = !DIEnumerator(name: "OPT_fsee", value: 593, isUnsigned: true)
!862 = !DIEnumerator(name: "OPT_fsel_sched_pipelining", value: 594, isUnsigned: true)
!863 = !DIEnumerator(name: "OPT_fsel_sched_pipelining_outer_loops", value: 595, isUnsigned: true)
!864 = !DIEnumerator(name: "OPT_fsel_sched_reschedule_pipelined", value: 596, isUnsigned: true)
!865 = !DIEnumerator(name: "OPT_fselective_scheduling", value: 597, isUnsigned: true)
!866 = !DIEnumerator(name: "OPT_fselective_scheduling2", value: 598, isUnsigned: true)
!867 = !DIEnumerator(name: "OPT_fshort_double", value: 599, isUnsigned: true)
!868 = !DIEnumerator(name: "OPT_fshort_enums", value: 600, isUnsigned: true)
!869 = !DIEnumerator(name: "OPT_fshort_wchar", value: 601, isUnsigned: true)
!870 = !DIEnumerator(name: "OPT_fshow_column", value: 602, isUnsigned: true)
!871 = !DIEnumerator(name: "OPT_fsign_zero", value: 603, isUnsigned: true)
!872 = !DIEnumerator(name: "OPT_fsignaling_nans", value: 604, isUnsigned: true)
!873 = !DIEnumerator(name: "OPT_fsigned_bitfields", value: 605, isUnsigned: true)
!874 = !DIEnumerator(name: "OPT_fsigned_char", value: 606, isUnsigned: true)
!875 = !DIEnumerator(name: "OPT_fsigned_zeros", value: 607, isUnsigned: true)
!876 = !DIEnumerator(name: "OPT_fsingle_precision_constant", value: 608, isUnsigned: true)
!877 = !DIEnumerator(name: "OPT_fsource_filename_", value: 609, isUnsigned: true)
!878 = !DIEnumerator(name: "OPT_fsource_", value: 610, isUnsigned: true)
!879 = !DIEnumerator(name: "OPT_fsplit_ivs_in_unroller", value: 611, isUnsigned: true)
!880 = !DIEnumerator(name: "OPT_fsplit_wide_types", value: 612, isUnsigned: true)
!881 = !DIEnumerator(name: "OPT_fsquangle", value: 613, isUnsigned: true)
!882 = !DIEnumerator(name: "OPT_fstack_check", value: 614, isUnsigned: true)
!883 = !DIEnumerator(name: "OPT_fstack_check_", value: 615, isUnsigned: true)
!884 = !DIEnumerator(name: "OPT_fstack_limit", value: 616, isUnsigned: true)
!885 = !DIEnumerator(name: "OPT_fstack_limit_register_", value: 617, isUnsigned: true)
!886 = !DIEnumerator(name: "OPT_fstack_limit_symbol_", value: 618, isUnsigned: true)
!887 = !DIEnumerator(name: "OPT_fstack_protector", value: 619, isUnsigned: true)
!888 = !DIEnumerator(name: "OPT_fstack_protector_all", value: 620, isUnsigned: true)
!889 = !DIEnumerator(name: "OPT_fstats", value: 621, isUnsigned: true)
!890 = !DIEnumerator(name: "OPT_fstore_check", value: 622, isUnsigned: true)
!891 = !DIEnumerator(name: "OPT_fstrength_reduce", value: 623, isUnsigned: true)
!892 = !DIEnumerator(name: "OPT_fstrict_aliasing", value: 624, isUnsigned: true)
!893 = !DIEnumerator(name: "OPT_fstrict_overflow", value: 625, isUnsigned: true)
!894 = !DIEnumerator(name: "OPT_fstrict_prototype", value: 626, isUnsigned: true)
!895 = !DIEnumerator(name: "OPT_fsyntax_only", value: 627, isUnsigned: true)
!896 = !DIEnumerator(name: "OPT_ftabstop_", value: 628, isUnsigned: true)
!897 = !DIEnumerator(name: "OPT_ftarget_help", value: 629, isUnsigned: true)
!898 = !DIEnumerator(name: "OPT_ftarget_", value: 630, isUnsigned: true)
!899 = !DIEnumerator(name: "OPT_ftemplate_depth_", value: 631, isUnsigned: true)
!900 = !DIEnumerator(name: "OPT_ftemplate_depth_eq", value: 632, isUnsigned: true)
!901 = !DIEnumerator(name: "OPT_ftest_coverage", value: 633, isUnsigned: true)
!902 = !DIEnumerator(name: "OPT_fthis_is_variable", value: 634, isUnsigned: true)
!903 = !DIEnumerator(name: "OPT_fthread_jumps", value: 635, isUnsigned: true)
!904 = !DIEnumerator(name: "OPT_fthreadsafe_statics", value: 636, isUnsigned: true)
!905 = !DIEnumerator(name: "OPT_ftime_report", value: 637, isUnsigned: true)
!906 = !DIEnumerator(name: "OPT_ftls_model_", value: 638, isUnsigned: true)
!907 = !DIEnumerator(name: "OPT_ftoplevel_reorder", value: 639, isUnsigned: true)
!908 = !DIEnumerator(name: "OPT_ftracer", value: 640, isUnsigned: true)
!909 = !DIEnumerator(name: "OPT_ftrapping_math", value: 641, isUnsigned: true)
!910 = !DIEnumerator(name: "OPT_ftrapv", value: 642, isUnsigned: true)
!911 = !DIEnumerator(name: "OPT_ftree_builtin_call_dce", value: 643, isUnsigned: true)
!912 = !DIEnumerator(name: "OPT_ftree_ccp", value: 644, isUnsigned: true)
!913 = !DIEnumerator(name: "OPT_ftree_ch", value: 645, isUnsigned: true)
!914 = !DIEnumerator(name: "OPT_ftree_copy_prop", value: 646, isUnsigned: true)
!915 = !DIEnumerator(name: "OPT_ftree_copyrename", value: 647, isUnsigned: true)
!916 = !DIEnumerator(name: "OPT_ftree_cselim", value: 648, isUnsigned: true)
!917 = !DIEnumerator(name: "OPT_ftree_dce", value: 649, isUnsigned: true)
!918 = !DIEnumerator(name: "OPT_ftree_dominator_opts", value: 650, isUnsigned: true)
!919 = !DIEnumerator(name: "OPT_ftree_dse", value: 651, isUnsigned: true)
!920 = !DIEnumerator(name: "OPT_ftree_forwprop", value: 652, isUnsigned: true)
!921 = !DIEnumerator(name: "OPT_ftree_fre", value: 653, isUnsigned: true)
!922 = !DIEnumerator(name: "OPT_ftree_loop_distribution", value: 654, isUnsigned: true)
!923 = !DIEnumerator(name: "OPT_ftree_loop_im", value: 655, isUnsigned: true)
!924 = !DIEnumerator(name: "OPT_ftree_loop_ivcanon", value: 656, isUnsigned: true)
!925 = !DIEnumerator(name: "OPT_ftree_loop_linear", value: 657, isUnsigned: true)
!926 = !DIEnumerator(name: "OPT_ftree_loop_optimize", value: 658, isUnsigned: true)
!927 = !DIEnumerator(name: "OPT_ftree_lrs", value: 659, isUnsigned: true)
!928 = !DIEnumerator(name: "OPT_ftree_parallelize_loops_", value: 660, isUnsigned: true)
!929 = !DIEnumerator(name: "OPT_ftree_phiprop", value: 661, isUnsigned: true)
!930 = !DIEnumerator(name: "OPT_ftree_pre", value: 662, isUnsigned: true)
!931 = !DIEnumerator(name: "OPT_ftree_pta", value: 663, isUnsigned: true)
!932 = !DIEnumerator(name: "OPT_ftree_reassoc", value: 664, isUnsigned: true)
!933 = !DIEnumerator(name: "OPT_ftree_salias", value: 665, isUnsigned: true)
!934 = !DIEnumerator(name: "OPT_ftree_scev_cprop", value: 666, isUnsigned: true)
!935 = !DIEnumerator(name: "OPT_ftree_sink", value: 667, isUnsigned: true)
!936 = !DIEnumerator(name: "OPT_ftree_slp_vectorize", value: 668, isUnsigned: true)
!937 = !DIEnumerator(name: "OPT_ftree_sra", value: 669, isUnsigned: true)
!938 = !DIEnumerator(name: "OPT_ftree_store_ccp", value: 670, isUnsigned: true)
!939 = !DIEnumerator(name: "OPT_ftree_store_copy_prop", value: 671, isUnsigned: true)
!940 = !DIEnumerator(name: "OPT_ftree_switch_conversion", value: 672, isUnsigned: true)
!941 = !DIEnumerator(name: "OPT_ftree_ter", value: 673, isUnsigned: true)
!942 = !DIEnumerator(name: "OPT_ftree_vect_loop_version", value: 674, isUnsigned: true)
!943 = !DIEnumerator(name: "OPT_ftree_vectorize", value: 675, isUnsigned: true)
!944 = !DIEnumerator(name: "OPT_ftree_vectorizer_verbose_", value: 676, isUnsigned: true)
!945 = !DIEnumerator(name: "OPT_ftree_vrp", value: 677, isUnsigned: true)
!946 = !DIEnumerator(name: "OPT_funderscoring", value: 678, isUnsigned: true)
!947 = !DIEnumerator(name: "OPT_funit_at_a_time", value: 679, isUnsigned: true)
!948 = !DIEnumerator(name: "OPT_funroll_all_loops", value: 680, isUnsigned: true)
!949 = !DIEnumerator(name: "OPT_funroll_loops", value: 681, isUnsigned: true)
!950 = !DIEnumerator(name: "OPT_funsafe_loop_optimizations", value: 682, isUnsigned: true)
!951 = !DIEnumerator(name: "OPT_funsafe_math_optimizations", value: 683, isUnsigned: true)
!952 = !DIEnumerator(name: "OPT_funsigned_bitfields", value: 684, isUnsigned: true)
!953 = !DIEnumerator(name: "OPT_funsigned_char", value: 685, isUnsigned: true)
!954 = !DIEnumerator(name: "OPT_funswitch_loops", value: 686, isUnsigned: true)
!955 = !DIEnumerator(name: "OPT_funwind_tables", value: 687, isUnsigned: true)
!956 = !DIEnumerator(name: "OPT_fuse_atomic_builtins", value: 688, isUnsigned: true)
!957 = !DIEnumerator(name: "OPT_fuse_boehm_gc", value: 689, isUnsigned: true)
!958 = !DIEnumerator(name: "OPT_fuse_cxa_atexit", value: 690, isUnsigned: true)
!959 = !DIEnumerator(name: "OPT_fuse_cxa_get_exception_ptr", value: 691, isUnsigned: true)
!960 = !DIEnumerator(name: "OPT_fuse_divide_subroutine", value: 692, isUnsigned: true)
!961 = !DIEnumerator(name: "OPT_fuse_linker_plugin", value: 693, isUnsigned: true)
!962 = !DIEnumerator(name: "OPT_fvar_tracking", value: 694, isUnsigned: true)
!963 = !DIEnumerator(name: "OPT_fvar_tracking_assignments", value: 695, isUnsigned: true)
!964 = !DIEnumerator(name: "OPT_fvar_tracking_assignments_toggle", value: 696, isUnsigned: true)
!965 = !DIEnumerator(name: "OPT_fvar_tracking_uninit", value: 697, isUnsigned: true)
!966 = !DIEnumerator(name: "OPT_fvariable_expansion_in_unroller", value: 698, isUnsigned: true)
!967 = !DIEnumerator(name: "OPT_fvect_cost_model", value: 699, isUnsigned: true)
!968 = !DIEnumerator(name: "OPT_fverbose_asm", value: 700, isUnsigned: true)
!969 = !DIEnumerator(name: "OPT_fversion", value: 701, isUnsigned: true)
!970 = !DIEnumerator(name: "OPT_fvisibility_inlines_hidden", value: 702, isUnsigned: true)
!971 = !DIEnumerator(name: "OPT_fvisibility_ms_compat", value: 703, isUnsigned: true)
!972 = !DIEnumerator(name: "OPT_fvisibility_", value: 704, isUnsigned: true)
!973 = !DIEnumerator(name: "OPT_fvpt", value: 705, isUnsigned: true)
!974 = !DIEnumerator(name: "OPT_fvtable_gc", value: 706, isUnsigned: true)
!975 = !DIEnumerator(name: "OPT_fvtable_thunks", value: 707, isUnsigned: true)
!976 = !DIEnumerator(name: "OPT_fweak", value: 708, isUnsigned: true)
!977 = !DIEnumerator(name: "OPT_fweb", value: 709, isUnsigned: true)
!978 = !DIEnumerator(name: "OPT_fwhole_file", value: 710, isUnsigned: true)
!979 = !DIEnumerator(name: "OPT_fwhole_program", value: 711, isUnsigned: true)
!980 = !DIEnumerator(name: "OPT_fwhopr", value: 712, isUnsigned: true)
!981 = !DIEnumerator(name: "OPT_fwide_exec_charset_", value: 713, isUnsigned: true)
!982 = !DIEnumerator(name: "OPT_fworking_directory", value: 714, isUnsigned: true)
!983 = !DIEnumerator(name: "OPT_fwpa", value: 715, isUnsigned: true)
!984 = !DIEnumerator(name: "OPT_fwrapv", value: 716, isUnsigned: true)
!985 = !DIEnumerator(name: "OPT_fxref", value: 717, isUnsigned: true)
!986 = !DIEnumerator(name: "OPT_fzero_initialized_in_bss", value: 718, isUnsigned: true)
!987 = !DIEnumerator(name: "OPT_fzero_link", value: 719, isUnsigned: true)
!988 = !DIEnumerator(name: "OPT_g", value: 720, isUnsigned: true)
!989 = !DIEnumerator(name: "OPT_gant", value: 721, isUnsigned: true)
!990 = !DIEnumerator(name: "OPT_gcoff", value: 722, isUnsigned: true)
!991 = !DIEnumerator(name: "OPT_gdwarfplus", value: 723, isUnsigned: true)
!992 = !DIEnumerator(name: "OPT_gdwarf_", value: 724, isUnsigned: true)
!993 = !DIEnumerator(name: "OPT_gen_decls", value: 725, isUnsigned: true)
!994 = !DIEnumerator(name: "OPT_ggdb", value: 726, isUnsigned: true)
!995 = !DIEnumerator(name: "OPT_gnat", value: 727, isUnsigned: true)
!996 = !DIEnumerator(name: "OPT_gnatO", value: 728, isUnsigned: true)
!997 = !DIEnumerator(name: "OPT_gno_strict_dwarf", value: 729, isUnsigned: true)
!998 = !DIEnumerator(name: "OPT_gstabs", value: 730, isUnsigned: true)
!999 = !DIEnumerator(name: "OPT_gstabs_", value: 731, isUnsigned: true)
!1000 = !DIEnumerator(name: "OPT_gstrict_dwarf", value: 732, isUnsigned: true)
!1001 = !DIEnumerator(name: "OPT_gtoggle", value: 733, isUnsigned: true)
!1002 = !DIEnumerator(name: "OPT_gvms", value: 734, isUnsigned: true)
!1003 = !DIEnumerator(name: "OPT_gxcoff", value: 735, isUnsigned: true)
!1004 = !DIEnumerator(name: "OPT_gxcoff_", value: 736, isUnsigned: true)
!1005 = !DIEnumerator(name: "OPT_idirafter", value: 737, isUnsigned: true)
!1006 = !DIEnumerator(name: "OPT_imacros", value: 738, isUnsigned: true)
!1007 = !DIEnumerator(name: "OPT_imultilib", value: 739, isUnsigned: true)
!1008 = !DIEnumerator(name: "OPT_include", value: 740, isUnsigned: true)
!1009 = !DIEnumerator(name: "OPT_iprefix", value: 741, isUnsigned: true)
!1010 = !DIEnumerator(name: "OPT_iquote", value: 742, isUnsigned: true)
!1011 = !DIEnumerator(name: "OPT_isysroot", value: 743, isUnsigned: true)
!1012 = !DIEnumerator(name: "OPT_isystem", value: 744, isUnsigned: true)
!1013 = !DIEnumerator(name: "OPT_iwithprefix", value: 745, isUnsigned: true)
!1014 = !DIEnumerator(name: "OPT_iwithprefixbefore", value: 746, isUnsigned: true)
!1015 = !DIEnumerator(name: "OPT_lang_asm", value: 747, isUnsigned: true)
!1016 = !DIEnumerator(name: "OPT_lang_objc", value: 748, isUnsigned: true)
!1017 = !DIEnumerator(name: "OPT_m128bit_long_double", value: 749, isUnsigned: true)
!1018 = !DIEnumerator(name: "OPT_m32", value: 750, isUnsigned: true)
!1019 = !DIEnumerator(name: "OPT_m3dnow", value: 751, isUnsigned: true)
!1020 = !DIEnumerator(name: "OPT_m3dnowa", value: 752, isUnsigned: true)
!1021 = !DIEnumerator(name: "OPT_m64", value: 753, isUnsigned: true)
!1022 = !DIEnumerator(name: "OPT_m80387", value: 754, isUnsigned: true)
!1023 = !DIEnumerator(name: "OPT_m96bit_long_double", value: 755, isUnsigned: true)
!1024 = !DIEnumerator(name: "OPT_mabi_", value: 756, isUnsigned: true)
!1025 = !DIEnumerator(name: "OPT_mabm", value: 757, isUnsigned: true)
!1026 = !DIEnumerator(name: "OPT_maccumulate_outgoing_args", value: 758, isUnsigned: true)
!1027 = !DIEnumerator(name: "OPT_maes", value: 759, isUnsigned: true)
!1028 = !DIEnumerator(name: "OPT_malign_double", value: 760, isUnsigned: true)
!1029 = !DIEnumerator(name: "OPT_malign_functions_", value: 761, isUnsigned: true)
!1030 = !DIEnumerator(name: "OPT_malign_jumps_", value: 762, isUnsigned: true)
!1031 = !DIEnumerator(name: "OPT_malign_loops_", value: 763, isUnsigned: true)
!1032 = !DIEnumerator(name: "OPT_malign_stringops", value: 764, isUnsigned: true)
!1033 = !DIEnumerator(name: "OPT_march_", value: 765, isUnsigned: true)
!1034 = !DIEnumerator(name: "OPT_masm_", value: 766, isUnsigned: true)
!1035 = !DIEnumerator(name: "OPT_mavx", value: 767, isUnsigned: true)
!1036 = !DIEnumerator(name: "OPT_mbranch_cost_", value: 768, isUnsigned: true)
!1037 = !DIEnumerator(name: "OPT_mcld", value: 769, isUnsigned: true)
!1038 = !DIEnumerator(name: "OPT_mcmodel_", value: 770, isUnsigned: true)
!1039 = !DIEnumerator(name: "OPT_mcrc32", value: 771, isUnsigned: true)
!1040 = !DIEnumerator(name: "OPT_mcx16", value: 772, isUnsigned: true)
!1041 = !DIEnumerator(name: "OPT_mfancy_math_387", value: 773, isUnsigned: true)
!1042 = !DIEnumerator(name: "OPT_mfma", value: 774, isUnsigned: true)
!1043 = !DIEnumerator(name: "OPT_mfma4", value: 775, isUnsigned: true)
!1044 = !DIEnumerator(name: "OPT_mforce_drap", value: 776, isUnsigned: true)
!1045 = !DIEnumerator(name: "OPT_mfp_ret_in_387", value: 777, isUnsigned: true)
!1046 = !DIEnumerator(name: "OPT_mfpmath_", value: 778, isUnsigned: true)
!1047 = !DIEnumerator(name: "OPT_mfused_madd", value: 779, isUnsigned: true)
!1048 = !DIEnumerator(name: "OPT_mglibc", value: 780, isUnsigned: true)
!1049 = !DIEnumerator(name: "OPT_mhard_float", value: 781, isUnsigned: true)
!1050 = !DIEnumerator(name: "OPT_mieee_fp", value: 782, isUnsigned: true)
!1051 = !DIEnumerator(name: "OPT_mincoming_stack_boundary_", value: 783, isUnsigned: true)
!1052 = !DIEnumerator(name: "OPT_minline_all_stringops", value: 784, isUnsigned: true)
!1053 = !DIEnumerator(name: "OPT_minline_stringops_dynamically", value: 785, isUnsigned: true)
!1054 = !DIEnumerator(name: "OPT_mintel_syntax", value: 786, isUnsigned: true)
!1055 = !DIEnumerator(name: "OPT_mlarge_data_threshold_", value: 787, isUnsigned: true)
!1056 = !DIEnumerator(name: "OPT_mlwp", value: 788, isUnsigned: true)
!1057 = !DIEnumerator(name: "OPT_mmmx", value: 789, isUnsigned: true)
!1058 = !DIEnumerator(name: "OPT_mmovbe", value: 790, isUnsigned: true)
!1059 = !DIEnumerator(name: "OPT_mms_bitfields", value: 791, isUnsigned: true)
!1060 = !DIEnumerator(name: "OPT_mno_align_stringops", value: 792, isUnsigned: true)
!1061 = !DIEnumerator(name: "OPT_mno_fancy_math_387", value: 793, isUnsigned: true)
!1062 = !DIEnumerator(name: "OPT_mno_push_args", value: 794, isUnsigned: true)
!1063 = !DIEnumerator(name: "OPT_mno_red_zone", value: 795, isUnsigned: true)
!1064 = !DIEnumerator(name: "OPT_mno_sse4", value: 796, isUnsigned: true)
!1065 = !DIEnumerator(name: "OPT_momit_leaf_frame_pointer", value: 797, isUnsigned: true)
!1066 = !DIEnumerator(name: "OPT_mpc", value: 798, isUnsigned: true)
!1067 = !DIEnumerator(name: "OPT_mpclmul", value: 799, isUnsigned: true)
!1068 = !DIEnumerator(name: "OPT_mpopcnt", value: 800, isUnsigned: true)
!1069 = !DIEnumerator(name: "OPT_mpreferred_stack_boundary_", value: 801, isUnsigned: true)
!1070 = !DIEnumerator(name: "OPT_mpush_args", value: 802, isUnsigned: true)
!1071 = !DIEnumerator(name: "OPT_mrecip", value: 803, isUnsigned: true)
!1072 = !DIEnumerator(name: "OPT_mred_zone", value: 804, isUnsigned: true)
!1073 = !DIEnumerator(name: "OPT_mregparm_", value: 805, isUnsigned: true)
!1074 = !DIEnumerator(name: "OPT_mrtd", value: 806, isUnsigned: true)
!1075 = !DIEnumerator(name: "OPT_msahf", value: 807, isUnsigned: true)
!1076 = !DIEnumerator(name: "OPT_msoft_float", value: 808, isUnsigned: true)
!1077 = !DIEnumerator(name: "OPT_msse", value: 809, isUnsigned: true)
!1078 = !DIEnumerator(name: "OPT_msse2", value: 810, isUnsigned: true)
!1079 = !DIEnumerator(name: "OPT_msse2avx", value: 811, isUnsigned: true)
!1080 = !DIEnumerator(name: "OPT_msse3", value: 812, isUnsigned: true)
!1081 = !DIEnumerator(name: "OPT_msse4", value: 813, isUnsigned: true)
!1082 = !DIEnumerator(name: "OPT_msse4_1", value: 814, isUnsigned: true)
!1083 = !DIEnumerator(name: "OPT_msse4_2", value: 815, isUnsigned: true)
!1084 = !DIEnumerator(name: "OPT_msse4a", value: 816, isUnsigned: true)
!1085 = !DIEnumerator(name: "OPT_msseregparm", value: 817, isUnsigned: true)
!1086 = !DIEnumerator(name: "OPT_mssse3", value: 818, isUnsigned: true)
!1087 = !DIEnumerator(name: "OPT_mstack_arg_probe", value: 819, isUnsigned: true)
!1088 = !DIEnumerator(name: "OPT_mstackrealign", value: 820, isUnsigned: true)
!1089 = !DIEnumerator(name: "OPT_mstringop_strategy_", value: 821, isUnsigned: true)
!1090 = !DIEnumerator(name: "OPT_mtls_dialect_", value: 822, isUnsigned: true)
!1091 = !DIEnumerator(name: "OPT_mtls_direct_seg_refs", value: 823, isUnsigned: true)
!1092 = !DIEnumerator(name: "OPT_mtune_", value: 824, isUnsigned: true)
!1093 = !DIEnumerator(name: "OPT_muclibc", value: 825, isUnsigned: true)
!1094 = !DIEnumerator(name: "OPT_mveclibabi_", value: 826, isUnsigned: true)
!1095 = !DIEnumerator(name: "OPT_mxop", value: 827, isUnsigned: true)
!1096 = !DIEnumerator(name: "OPT_nocpp", value: 828, isUnsigned: true)
!1097 = !DIEnumerator(name: "OPT_nostdinc", value: 829, isUnsigned: true)
!1098 = !DIEnumerator(name: "OPT_nostdinc__", value: 830, isUnsigned: true)
!1099 = !DIEnumerator(name: "OPT_nostdlib", value: 831, isUnsigned: true)
!1100 = !DIEnumerator(name: "OPT_o", value: 832, isUnsigned: true)
!1101 = !DIEnumerator(name: "OPT_p", value: 833, isUnsigned: true)
!1102 = !DIEnumerator(name: "OPT_pedantic", value: 834, isUnsigned: true)
!1103 = !DIEnumerator(name: "OPT_pedantic_errors", value: 835, isUnsigned: true)
!1104 = !DIEnumerator(name: "OPT_pie", value: 836, isUnsigned: true)
!1105 = !DIEnumerator(name: "OPT_print_objc_runtime_info", value: 837, isUnsigned: true)
!1106 = !DIEnumerator(name: "OPT_print_pch_checksum", value: 838, isUnsigned: true)
!1107 = !DIEnumerator(name: "OPT_quiet", value: 839, isUnsigned: true)
!1108 = !DIEnumerator(name: "OPT_remap", value: 840, isUnsigned: true)
!1109 = !DIEnumerator(name: "OPT_shared", value: 841, isUnsigned: true)
!1110 = !DIEnumerator(name: "OPT_static_libgfortran", value: 842, isUnsigned: true)
!1111 = !DIEnumerator(name: "OPT_std_c__0x", value: 843, isUnsigned: true)
!1112 = !DIEnumerator(name: "OPT_std_c__98", value: 844, isUnsigned: true)
!1113 = !DIEnumerator(name: "OPT_std_c89", value: 845, isUnsigned: true)
!1114 = !DIEnumerator(name: "OPT_std_c90", value: 846, isUnsigned: true)
!1115 = !DIEnumerator(name: "OPT_std_c99", value: 847, isUnsigned: true)
!1116 = !DIEnumerator(name: "OPT_std_c9x", value: 848, isUnsigned: true)
!1117 = !DIEnumerator(name: "OPT_std_f2003", value: 849, isUnsigned: true)
!1118 = !DIEnumerator(name: "OPT_std_f2008", value: 850, isUnsigned: true)
!1119 = !DIEnumerator(name: "OPT_std_f95", value: 851, isUnsigned: true)
!1120 = !DIEnumerator(name: "OPT_std_gnu", value: 852, isUnsigned: true)
!1121 = !DIEnumerator(name: "OPT_std_gnu__0x", value: 853, isUnsigned: true)
!1122 = !DIEnumerator(name: "OPT_std_gnu__98", value: 854, isUnsigned: true)
!1123 = !DIEnumerator(name: "OPT_std_gnu89", value: 855, isUnsigned: true)
!1124 = !DIEnumerator(name: "OPT_std_gnu90", value: 856, isUnsigned: true)
!1125 = !DIEnumerator(name: "OPT_std_gnu99", value: 857, isUnsigned: true)
!1126 = !DIEnumerator(name: "OPT_std_gnu9x", value: 858, isUnsigned: true)
!1127 = !DIEnumerator(name: "OPT_std_iso9899_1990", value: 859, isUnsigned: true)
!1128 = !DIEnumerator(name: "OPT_std_iso9899_199409", value: 860, isUnsigned: true)
!1129 = !DIEnumerator(name: "OPT_std_iso9899_1999", value: 861, isUnsigned: true)
!1130 = !DIEnumerator(name: "OPT_std_iso9899_199x", value: 862, isUnsigned: true)
!1131 = !DIEnumerator(name: "OPT_std_legacy", value: 863, isUnsigned: true)
!1132 = !DIEnumerator(name: "OPT_traditional_cpp", value: 864, isUnsigned: true)
!1133 = !DIEnumerator(name: "OPT_trigraphs", value: 865, isUnsigned: true)
!1134 = !DIEnumerator(name: "OPT_undef", value: 866, isUnsigned: true)
!1135 = !DIEnumerator(name: "OPT_v", value: 867, isUnsigned: true)
!1136 = !DIEnumerator(name: "OPT_version", value: 868, isUnsigned: true)
!1137 = !DIEnumerator(name: "OPT_w", value: 869, isUnsigned: true)
!1138 = !DIEnumerator(name: "N_OPTS", value: 870, isUnsigned: true)
!1139 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "format_type", file: !3, line: 61, baseType: !1140, size: 32, elements: !1141)
!1140 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1141 = !{!1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149}
!1142 = !DIEnumerator(name: "printf_format_type", value: 0)
!1143 = !DIEnumerator(name: "asm_fprintf_format_type", value: 1)
!1144 = !DIEnumerator(name: "gcc_diag_format_type", value: 2)
!1145 = !DIEnumerator(name: "gcc_tdiag_format_type", value: 3)
!1146 = !DIEnumerator(name: "gcc_cdiag_format_type", value: 4)
!1147 = !DIEnumerator(name: "gcc_cxxdiag_format_type", value: 5)
!1148 = !DIEnumerator(name: "gcc_gfc_format_type", value: 6)
!1149 = !DIEnumerator(name: "format_type_error", value: -1)
!1150 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "format_lengths", file: !255, line: 26, baseType: !7, size: 32, elements: !1151)
!1151 = !{!1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164}
!1152 = !DIEnumerator(name: "FMT_LEN_none", value: 0, isUnsigned: true)
!1153 = !DIEnumerator(name: "FMT_LEN_hh", value: 1, isUnsigned: true)
!1154 = !DIEnumerator(name: "FMT_LEN_h", value: 2, isUnsigned: true)
!1155 = !DIEnumerator(name: "FMT_LEN_l", value: 3, isUnsigned: true)
!1156 = !DIEnumerator(name: "FMT_LEN_ll", value: 4, isUnsigned: true)
!1157 = !DIEnumerator(name: "FMT_LEN_L", value: 5, isUnsigned: true)
!1158 = !DIEnumerator(name: "FMT_LEN_z", value: 6, isUnsigned: true)
!1159 = !DIEnumerator(name: "FMT_LEN_t", value: 7, isUnsigned: true)
!1160 = !DIEnumerator(name: "FMT_LEN_j", value: 8, isUnsigned: true)
!1161 = !DIEnumerator(name: "FMT_LEN_H", value: 9, isUnsigned: true)
!1162 = !DIEnumerator(name: "FMT_LEN_D", value: 10, isUnsigned: true)
!1163 = !DIEnumerator(name: "FMT_LEN_DD", value: 11, isUnsigned: true)
!1164 = !DIEnumerator(name: "FMT_LEN_MAX", value: 12, isUnsigned: true)
!1165 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "format_std_version", file: !255, line: 45, baseType: !7, size: 32, elements: !1166)
!1166 = !{!1167, !1168, !1169, !1170, !1171}
!1167 = !DIEnumerator(name: "STD_C89", value: 0, isUnsigned: true)
!1168 = !DIEnumerator(name: "STD_C94", value: 1, isUnsigned: true)
!1169 = !DIEnumerator(name: "STD_C9L", value: 2, isUnsigned: true)
!1170 = !DIEnumerator(name: "STD_C99", value: 3, isUnsigned: true)
!1171 = !DIEnumerator(name: "STD_EXT", value: 4, isUnsigned: true)
!1172 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !1173, line: 57, baseType: !7, size: 32, elements: !1174)
!1173 = !DIFile(filename: "./include/safe-ctype.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1174 = !{!1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192}
!1175 = !DIEnumerator(name: "_sch_isblank", value: 1, isUnsigned: true)
!1176 = !DIEnumerator(name: "_sch_iscntrl", value: 2, isUnsigned: true)
!1177 = !DIEnumerator(name: "_sch_isdigit", value: 4, isUnsigned: true)
!1178 = !DIEnumerator(name: "_sch_islower", value: 8, isUnsigned: true)
!1179 = !DIEnumerator(name: "_sch_isprint", value: 16, isUnsigned: true)
!1180 = !DIEnumerator(name: "_sch_ispunct", value: 32, isUnsigned: true)
!1181 = !DIEnumerator(name: "_sch_isspace", value: 64, isUnsigned: true)
!1182 = !DIEnumerator(name: "_sch_isupper", value: 128, isUnsigned: true)
!1183 = !DIEnumerator(name: "_sch_isxdigit", value: 256, isUnsigned: true)
!1184 = !DIEnumerator(name: "_sch_isidst", value: 512, isUnsigned: true)
!1185 = !DIEnumerator(name: "_sch_isvsp", value: 1024, isUnsigned: true)
!1186 = !DIEnumerator(name: "_sch_isnvsp", value: 2048, isUnsigned: true)
!1187 = !DIEnumerator(name: "_sch_isalpha", value: 136, isUnsigned: true)
!1188 = !DIEnumerator(name: "_sch_isalnum", value: 140, isUnsigned: true)
!1189 = !DIEnumerator(name: "_sch_isidnum", value: 516, isUnsigned: true)
!1190 = !DIEnumerator(name: "_sch_isgraph", value: 172, isUnsigned: true)
!1191 = !DIEnumerator(name: "_sch_iscppsp", value: 3072, isUnsigned: true)
!1192 = !DIEnumerator(name: "_sch_isbasic", value: 3088, isUnsigned: true)
!1193 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "c_language_kind", file: !1194, line: 378, baseType: !7, size: 32, elements: !1195)
!1194 = !DIFile(filename: "./c-common.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1195 = !{!1196, !1197, !1198, !1199}
!1196 = !DIEnumerator(name: "clk_c", value: 0, isUnsigned: true)
!1197 = !DIEnumerator(name: "clk_objc", value: 1, isUnsigned: true)
!1198 = !DIEnumerator(name: "clk_cxx", value: 2, isUnsigned: true)
!1199 = !DIEnumerator(name: "clk_objcxx", value: 3, isUnsigned: true)
!1200 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !6, line: 3410, baseType: !7, size: 32, elements: !1201)
!1201 = !{!1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333}
!1202 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!1203 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!1204 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!1205 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!1206 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!1207 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!1208 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!1209 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!1210 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!1211 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!1212 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!1213 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!1214 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!1215 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!1216 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!1217 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!1218 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!1219 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!1220 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!1221 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!1222 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!1223 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!1224 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!1225 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!1226 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!1227 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!1228 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!1229 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!1230 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!1231 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!1232 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!1233 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!1234 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!1235 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!1236 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!1237 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!1238 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!1239 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!1240 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!1241 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!1242 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!1243 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!1244 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!1245 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!1246 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!1247 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!1248 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!1249 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!1250 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!1251 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!1252 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!1253 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!1254 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!1255 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!1256 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!1257 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!1258 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!1259 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!1260 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!1261 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!1262 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!1263 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!1264 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!1265 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!1266 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!1267 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!1268 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!1269 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!1270 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!1271 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!1272 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!1273 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!1274 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!1275 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!1276 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!1277 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!1278 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!1279 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!1280 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!1281 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!1282 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!1283 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!1284 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!1285 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!1286 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!1287 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!1288 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!1289 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!1290 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!1291 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!1292 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!1293 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!1294 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!1295 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!1296 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!1297 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!1298 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!1299 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!1300 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!1301 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!1302 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!1303 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!1304 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!1305 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!1306 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!1307 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!1308 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!1309 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!1310 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!1311 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!1312 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!1313 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!1314 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!1315 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!1316 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!1317 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!1318 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!1319 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!1320 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!1321 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!1322 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!1323 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!1324 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!1325 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!1326 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!1327 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!1328 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!1329 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!1330 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!1331 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!1332 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!1333 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!1334 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !6, line: 58, baseType: !7, size: 32, elements: !1335)
!1335 = !{!1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346}
!1336 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!1337 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!1338 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!1339 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!1340 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!1341 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!1342 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!1343 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!1344 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!1345 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!1346 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!1347 = !{!1348, !1991, !39, !1140, !1646, !1992, !2067, !1350, !2092, !2094, !2095, !2111, !2112, !2113}
!1348 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1349, line: 56, baseType: !1350)
!1349 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1350 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1351, size: 64)
!1351 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !6, line: 3371, size: 1792, elements: !1352)
!1352 = !{!1353, !1386, !1392, !1405, !1412, !1419, !1424, !1434, !1440, !1454, !1466, !1504, !1512, !1540, !1548, !1549, !1554, !1563, !1569, !1574, !1578, !1582, !1611, !1662, !1668, !1675, !1682, !1708, !1733, !1750, !1762, !1784, !1802, !1973}
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1351, file: !6, line: 3372, baseType: !1354, size: 64)
!1354 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !6, line: 360, size: 64, elements: !1355)
!1355 = !{!1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385}
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1354, file: !6, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1354, file: !6, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1354, file: !6, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1354, file: !6, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1354, file: !6, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1354, file: !6, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1354, file: !6, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1354, file: !6, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1354, file: !6, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1354, file: !6, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1354, file: !6, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1354, file: !6, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1354, file: !6, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1354, file: !6, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1354, file: !6, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1354, file: !6, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1354, file: !6, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1354, file: !6, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1354, file: !6, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1354, file: !6, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1354, file: !6, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1354, file: !6, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1354, file: !6, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1354, file: !6, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1354, file: !6, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1354, file: !6, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1354, file: !6, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1354, file: !6, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1354, file: !6, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1354, file: !6, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1351, file: !6, line: 3373, baseType: !1387, size: 192)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !6, line: 402, size: 192, elements: !1388)
!1388 = !{!1389, !1390, !1391}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1387, file: !6, line: 403, baseType: !1354, size: 64)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1387, file: !6, line: 404, baseType: !1348, size: 64, offset: 64)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1387, file: !6, line: 405, baseType: !1348, size: 64, offset: 128)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1351, file: !6, line: 3374, baseType: !1393, size: 320)
!1393 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !6, line: 1384, size: 320, elements: !1394)
!1394 = !{!1395, !1396}
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1393, file: !6, line: 1385, baseType: !1387, size: 192)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1393, file: !6, line: 1386, baseType: !1397, size: 128, offset: 192)
!1397 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1398, line: 58, baseType: !1399)
!1398 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1399 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1398, line: 54, size: 128, elements: !1400)
!1400 = !{!1401, !1403}
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1399, file: !1398, line: 56, baseType: !1402, size: 64)
!1402 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1399, file: !1398, line: 57, baseType: !1404, size: 64, offset: 64)
!1404 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1351, file: !6, line: 3375, baseType: !1406, size: 256)
!1406 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !6, line: 1397, size: 256, elements: !1407)
!1407 = !{!1408, !1409}
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1406, file: !6, line: 1398, baseType: !1387, size: 192)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1406, file: !6, line: 1399, baseType: !1410, size: 64, offset: 192)
!1410 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1411, size: 64)
!1411 = !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !6, line: 1392, flags: DIFlagFwdDecl)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1351, file: !6, line: 3376, baseType: !1413, size: 256)
!1413 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !6, line: 1408, size: 256, elements: !1414)
!1414 = !{!1415, !1416}
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1413, file: !6, line: 1409, baseType: !1387, size: 192)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1413, file: !6, line: 1410, baseType: !1417, size: 64, offset: 192)
!1417 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1418, size: 64)
!1418 = !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !6, line: 1403, flags: DIFlagFwdDecl)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1351, file: !6, line: 3377, baseType: !1420, size: 256)
!1420 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !6, line: 1437, size: 256, elements: !1421)
!1421 = !{!1422, !1423}
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1420, file: !6, line: 1438, baseType: !1387, size: 192)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1420, file: !6, line: 1439, baseType: !1348, size: 64, offset: 192)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1351, file: !6, line: 3378, baseType: !1425, size: 256)
!1425 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !6, line: 1418, size: 256, elements: !1426)
!1426 = !{!1427, !1428, !1429}
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1425, file: !6, line: 1419, baseType: !1387, size: 192)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1425, file: !6, line: 1420, baseType: !1140, size: 32, offset: 192)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1425, file: !6, line: 1421, baseType: !1430, size: 8, offset: 224)
!1430 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1431, size: 8, elements: !1432)
!1431 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1432 = !{!1433}
!1433 = !DISubrange(count: 1)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1351, file: !6, line: 3379, baseType: !1435, size: 320)
!1435 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !6, line: 1428, size: 320, elements: !1436)
!1436 = !{!1437, !1438, !1439}
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1435, file: !6, line: 1429, baseType: !1387, size: 192)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1435, file: !6, line: 1430, baseType: !1348, size: 64, offset: 192)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1435, file: !6, line: 1431, baseType: !1348, size: 64, offset: 256)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1351, file: !6, line: 3380, baseType: !1441, size: 320)
!1441 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !6, line: 1460, size: 320, elements: !1442)
!1442 = !{!1443, !1444}
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1441, file: !6, line: 1461, baseType: !1387, size: 192)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1441, file: !6, line: 1462, baseType: !1445, size: 128, offset: 192)
!1445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1446, line: 31, size: 128, elements: !1447)
!1446 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1447 = !{!1448, !1452, !1453}
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1445, file: !1446, line: 32, baseType: !1449, size: 64)
!1449 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1450, size: 64)
!1450 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1451)
!1451 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1445, file: !1446, line: 33, baseType: !7, size: 32, offset: 64)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1445, file: !1446, line: 34, baseType: !7, size: 32, offset: 96)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1351, file: !6, line: 3381, baseType: !1455, size: 384)
!1455 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !6, line: 2507, size: 384, elements: !1456)
!1456 = !{!1457, !1458, !1463, !1464, !1465}
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1455, file: !6, line: 2508, baseType: !1387, size: 192)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1455, file: !6, line: 2509, baseType: !1459, size: 32, offset: 192)
!1459 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1460, line: 58, baseType: !1461)
!1460 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1461 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1462, line: 44, baseType: !7)
!1462 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1455, file: !6, line: 2510, baseType: !7, size: 32, offset: 224)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1455, file: !6, line: 2511, baseType: !1348, size: 64, offset: 256)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1455, file: !6, line: 2512, baseType: !1348, size: 64, offset: 320)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1351, file: !6, line: 3382, baseType: !1467, size: 896)
!1467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !6, line: 2652, size: 896, elements: !1468)
!1468 = !{!1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501}
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1467, file: !6, line: 2653, baseType: !1455, size: 384)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1467, file: !6, line: 2654, baseType: !1348, size: 64, offset: 384)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1467, file: !6, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1467, file: !6, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1467, file: !6, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1467, file: !6, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1467, file: !6, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1467, file: !6, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1467, file: !6, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1467, file: !6, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1467, file: !6, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1467, file: !6, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1467, file: !6, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1467, file: !6, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1467, file: !6, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1467, file: !6, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1467, file: !6, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1467, file: !6, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1467, file: !6, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1467, file: !6, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1467, file: !6, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1467, file: !6, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1467, file: !6, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1467, file: !6, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1467, file: !6, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1467, file: !6, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1467, file: !6, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1467, file: !6, line: 2703, baseType: !7, size: 32, offset: 512)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1467, file: !6, line: 2705, baseType: !1348, size: 64, offset: 576)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1467, file: !6, line: 2706, baseType: !1348, size: 64, offset: 640)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1467, file: !6, line: 2707, baseType: !1348, size: 64, offset: 704)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1467, file: !6, line: 2708, baseType: !1348, size: 64, offset: 768)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1467, file: !6, line: 2711, baseType: !1502, size: 64, offset: 832)
!1502 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1503, size: 64)
!1503 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !6, line: 2711, flags: DIFlagFwdDecl)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1351, file: !6, line: 3383, baseType: !1505, size: 960)
!1505 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !6, line: 2756, size: 960, elements: !1506)
!1506 = !{!1507, !1508}
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1505, file: !6, line: 2757, baseType: !1467, size: 896)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1505, file: !6, line: 2758, baseType: !1509, size: 64, offset: 896)
!1509 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1349, line: 50, baseType: !1510)
!1510 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1511, size: 64)
!1511 = !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1349, line: 49, flags: DIFlagFwdDecl)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1351, file: !6, line: 3384, baseType: !1513, size: 1472)
!1513 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !6, line: 3114, size: 1472, elements: !1514)
!1514 = !{!1515, !1536, !1537, !1538, !1539}
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1513, file: !6, line: 3115, baseType: !1516, size: 1216)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !6, line: 2984, size: 1216, elements: !1517)
!1517 = !{!1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1516, file: !6, line: 2985, baseType: !1505, size: 960)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1516, file: !6, line: 2986, baseType: !1348, size: 64, offset: 960)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1516, file: !6, line: 2987, baseType: !1348, size: 64, offset: 1024)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1516, file: !6, line: 2988, baseType: !1348, size: 64, offset: 1088)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1516, file: !6, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1516, file: !6, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1516, file: !6, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1516, file: !6, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1516, file: !6, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1516, file: !6, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1516, file: !6, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1516, file: !6, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1516, file: !6, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1516, file: !6, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1516, file: !6, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1516, file: !6, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1516, file: !6, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1516, file: !6, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1513, file: !6, line: 3117, baseType: !1348, size: 64, offset: 1216)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1513, file: !6, line: 3119, baseType: !1348, size: 64, offset: 1280)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1513, file: !6, line: 3121, baseType: !1348, size: 64, offset: 1344)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1513, file: !6, line: 3123, baseType: !1348, size: 64, offset: 1408)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1351, file: !6, line: 3385, baseType: !1541, size: 1088)
!1541 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !6, line: 2874, size: 1088, elements: !1542)
!1542 = !{!1543, !1544, !1545}
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1541, file: !6, line: 2875, baseType: !1505, size: 960)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1541, file: !6, line: 2876, baseType: !1509, size: 64, offset: 960)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1541, file: !6, line: 2877, baseType: !1546, size: 64, offset: 1024)
!1546 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1547, size: 64)
!1547 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !6, line: 2856, flags: DIFlagFwdDecl)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1351, file: !6, line: 3386, baseType: !1516, size: 1216)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1351, file: !6, line: 3387, baseType: !1550, size: 1280)
!1550 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !6, line: 3093, size: 1280, elements: !1551)
!1551 = !{!1552, !1553}
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1550, file: !6, line: 3094, baseType: !1516, size: 1216)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1550, file: !6, line: 3095, baseType: !1546, size: 64, offset: 1216)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1351, file: !6, line: 3388, baseType: !1555, size: 1216)
!1555 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !6, line: 2824, size: 1216, elements: !1556)
!1556 = !{!1557, !1558, !1559, !1560, !1561, !1562}
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1555, file: !6, line: 2825, baseType: !1467, size: 896)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1555, file: !6, line: 2827, baseType: !1348, size: 64, offset: 896)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1555, file: !6, line: 2828, baseType: !1348, size: 64, offset: 960)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1555, file: !6, line: 2829, baseType: !1348, size: 64, offset: 1024)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1555, file: !6, line: 2830, baseType: !1348, size: 64, offset: 1088)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1555, file: !6, line: 2831, baseType: !1348, size: 64, offset: 1152)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1351, file: !6, line: 3389, baseType: !1564, size: 1024)
!1564 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !6, line: 2850, size: 1024, elements: !1565)
!1565 = !{!1566, !1567, !1568}
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1564, file: !6, line: 2851, baseType: !1505, size: 960)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1564, file: !6, line: 2852, baseType: !1140, size: 32, offset: 960)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1564, file: !6, line: 2853, baseType: !1140, size: 32, offset: 992)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1351, file: !6, line: 3390, baseType: !1570, size: 1024)
!1570 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !6, line: 2857, size: 1024, elements: !1571)
!1571 = !{!1572, !1573}
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1570, file: !6, line: 2858, baseType: !1505, size: 960)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1570, file: !6, line: 2859, baseType: !1546, size: 64, offset: 960)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1351, file: !6, line: 3391, baseType: !1575, size: 960)
!1575 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !6, line: 2862, size: 960, elements: !1576)
!1576 = !{!1577}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1575, file: !6, line: 2863, baseType: !1505, size: 960)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1351, file: !6, line: 3392, baseType: !1579, size: 1472)
!1579 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !6, line: 3304, size: 1472, elements: !1580)
!1580 = !{!1581}
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1579, file: !6, line: 3305, baseType: !1513, size: 1472)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1351, file: !6, line: 3393, baseType: !1583, size: 1792)
!1583 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !6, line: 3248, size: 1792, elements: !1584)
!1584 = !{!1585, !1586, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610}
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1583, file: !6, line: 3249, baseType: !1513, size: 1472)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1583, file: !6, line: 3251, baseType: !1587, size: 64, offset: 1472)
!1587 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1588, size: 64)
!1588 = !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1589, line: 41, flags: DIFlagFwdDecl)
!1589 = !DIFile(filename: "./statistics.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1583, file: !6, line: 3254, baseType: !1348, size: 64, offset: 1536)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1583, file: !6, line: 3257, baseType: !1348, size: 64, offset: 1600)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1583, file: !6, line: 3258, baseType: !1348, size: 64, offset: 1664)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1583, file: !6, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1583, file: !6, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1583, file: !6, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1583, file: !6, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1583, file: !6, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1583, file: !6, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1583, file: !6, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1583, file: !6, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1583, file: !6, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1583, file: !6, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1583, file: !6, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1583, file: !6, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1583, file: !6, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1583, file: !6, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1583, file: !6, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1583, file: !6, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1583, file: !6, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1583, file: !6, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1351, file: !6, line: 3394, baseType: !1612, size: 1344)
!1612 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !6, line: 2279, size: 1344, elements: !1613)
!1613 = !{!1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1639, !1640, !1641, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659}
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1612, file: !6, line: 2280, baseType: !1387, size: 192)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1612, file: !6, line: 2281, baseType: !1348, size: 64, offset: 192)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1612, file: !6, line: 2282, baseType: !1348, size: 64, offset: 256)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1612, file: !6, line: 2283, baseType: !1348, size: 64, offset: 320)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1612, file: !6, line: 2284, baseType: !1348, size: 64, offset: 384)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1612, file: !6, line: 2285, baseType: !7, size: 32, offset: 448)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1612, file: !6, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1612, file: !6, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1612, file: !6, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1612, file: !6, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1612, file: !6, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1612, file: !6, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1612, file: !6, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1612, file: !6, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1612, file: !6, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1612, file: !6, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1612, file: !6, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1612, file: !6, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1612, file: !6, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1612, file: !6, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1612, file: !6, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1612, file: !6, line: 2305, baseType: !7, size: 32, offset: 512)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1612, file: !6, line: 2306, baseType: !1637, size: 32, offset: 544)
!1637 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1638, line: 31, baseType: !1140)
!1638 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1612, file: !6, line: 2307, baseType: !1348, size: 64, offset: 576)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1612, file: !6, line: 2308, baseType: !1348, size: 64, offset: 640)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1612, file: !6, line: 2314, baseType: !1642, size: 64, offset: 704)
!1642 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !6, line: 2309, size: 64, elements: !1643)
!1643 = !{!1644, !1645, !1648}
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1642, file: !6, line: 2310, baseType: !1140, size: 32)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1642, file: !6, line: 2311, baseType: !1646, size: 64)
!1646 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1647, size: 64)
!1647 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1431)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1642, file: !6, line: 2312, baseType: !1649, size: 64)
!1649 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1650, size: 64)
!1650 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !6, line: 2277, flags: DIFlagFwdDecl)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1612, file: !6, line: 2315, baseType: !1348, size: 64, offset: 768)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1612, file: !6, line: 2316, baseType: !1348, size: 64, offset: 832)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1612, file: !6, line: 2317, baseType: !1348, size: 64, offset: 896)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1612, file: !6, line: 2318, baseType: !1348, size: 64, offset: 960)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1612, file: !6, line: 2319, baseType: !1348, size: 64, offset: 1024)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1612, file: !6, line: 2320, baseType: !1348, size: 64, offset: 1088)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1612, file: !6, line: 2321, baseType: !1348, size: 64, offset: 1152)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1612, file: !6, line: 2322, baseType: !1348, size: 64, offset: 1216)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1612, file: !6, line: 2324, baseType: !1660, size: 64, offset: 1280)
!1660 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1661, size: 64)
!1661 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !6, line: 2324, flags: DIFlagFwdDecl)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1351, file: !6, line: 3395, baseType: !1663, size: 320)
!1663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !6, line: 1469, size: 320, elements: !1664)
!1664 = !{!1665, !1666, !1667}
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1663, file: !6, line: 1470, baseType: !1387, size: 192)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1663, file: !6, line: 1471, baseType: !1348, size: 64, offset: 192)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1663, file: !6, line: 1472, baseType: !1348, size: 64, offset: 256)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1351, file: !6, line: 3396, baseType: !1669, size: 320)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !6, line: 1482, size: 320, elements: !1670)
!1670 = !{!1671, !1672, !1673}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1669, file: !6, line: 1483, baseType: !1387, size: 192)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1669, file: !6, line: 1484, baseType: !1140, size: 32, offset: 192)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1669, file: !6, line: 1485, baseType: !1674, size: 64, offset: 256)
!1674 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1348, size: 64, elements: !1432)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1351, file: !6, line: 3397, baseType: !1676, size: 384)
!1676 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !6, line: 1829, size: 384, elements: !1677)
!1677 = !{!1678, !1679, !1680, !1681}
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1676, file: !6, line: 1830, baseType: !1387, size: 192)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1676, file: !6, line: 1831, baseType: !1459, size: 32, offset: 192)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1676, file: !6, line: 1832, baseType: !1348, size: 64, offset: 256)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1676, file: !6, line: 1835, baseType: !1674, size: 64, offset: 320)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1351, file: !6, line: 3398, baseType: !1683, size: 704)
!1683 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !6, line: 1898, size: 704, elements: !1684)
!1684 = !{!1685, !1686, !1687, !1691, !1692, !1695}
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1683, file: !6, line: 1899, baseType: !1387, size: 192)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1683, file: !6, line: 1902, baseType: !1348, size: 64, offset: 192)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1683, file: !6, line: 1905, baseType: !1688, size: 64, offset: 256)
!1688 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1349, line: 58, baseType: !1689)
!1689 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1690, size: 64)
!1690 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !1349, line: 57, flags: DIFlagFwdDecl)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1683, file: !6, line: 1908, baseType: !7, size: 32, offset: 320)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1683, file: !6, line: 1911, baseType: !1693, size: 64, offset: 384)
!1693 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1694, size: 64)
!1694 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !6, line: 1876, flags: DIFlagFwdDecl)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1683, file: !6, line: 1914, baseType: !1696, size: 256, offset: 448)
!1696 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !6, line: 1883, size: 256, elements: !1697)
!1697 = !{!1698, !1700, !1701, !1706}
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1696, file: !6, line: 1884, baseType: !1699, size: 64)
!1699 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1696, size: 64)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1696, file: !6, line: 1885, baseType: !1699, size: 64, offset: 64)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1696, file: !6, line: 1891, baseType: !1702, size: 64, offset: 128)
!1702 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1696, file: !6, line: 1891, size: 64, elements: !1703)
!1703 = !{!1704, !1705}
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1702, file: !6, line: 1891, baseType: !1688, size: 64)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1702, file: !6, line: 1891, baseType: !1348, size: 64)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1696, file: !6, line: 1892, baseType: !1707, size: 64, offset: 192)
!1707 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1348, size: 64)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1351, file: !6, line: 3399, baseType: !1709, size: 704)
!1709 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !6, line: 2008, size: 704, elements: !1710)
!1710 = !{!1711, !1712, !1713, !1714, !1715, !1716, !1728, !1729, !1730, !1731, !1732}
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1709, file: !6, line: 2009, baseType: !1387, size: 192)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1709, file: !6, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1709, file: !6, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1709, file: !6, line: 2014, baseType: !1459, size: 32, offset: 224)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1709, file: !6, line: 2016, baseType: !1348, size: 64, offset: 256)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1709, file: !6, line: 2017, baseType: !1717, size: 64, offset: 320)
!1717 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1718, size: 64)
!1718 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !6, line: 183, baseType: !1719)
!1719 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !6, line: 183, size: 128, elements: !1720)
!1720 = !{!1721}
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1719, file: !6, line: 183, baseType: !1722, size: 128)
!1722 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !6, line: 182, baseType: !1723)
!1723 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !6, line: 182, size: 128, elements: !1724)
!1724 = !{!1725, !1726, !1727}
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1723, file: !6, line: 182, baseType: !7, size: 32)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1723, file: !6, line: 182, baseType: !7, size: 32, offset: 32)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1723, file: !6, line: 182, baseType: !1674, size: 64, offset: 64)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1709, file: !6, line: 2019, baseType: !1348, size: 64, offset: 384)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1709, file: !6, line: 2020, baseType: !1348, size: 64, offset: 448)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1709, file: !6, line: 2021, baseType: !1348, size: 64, offset: 512)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1709, file: !6, line: 2022, baseType: !1348, size: 64, offset: 576)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1709, file: !6, line: 2023, baseType: !1348, size: 64, offset: 640)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1351, file: !6, line: 3400, baseType: !1734, size: 832)
!1734 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !6, line: 2430, size: 832, elements: !1735)
!1735 = !{!1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745}
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1734, file: !6, line: 2431, baseType: !1387, size: 192)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1734, file: !6, line: 2433, baseType: !1348, size: 64, offset: 192)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1734, file: !6, line: 2434, baseType: !1348, size: 64, offset: 256)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1734, file: !6, line: 2435, baseType: !1348, size: 64, offset: 320)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1734, file: !6, line: 2436, baseType: !1348, size: 64, offset: 384)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1734, file: !6, line: 2437, baseType: !1717, size: 64, offset: 448)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1734, file: !6, line: 2438, baseType: !1348, size: 64, offset: 512)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1734, file: !6, line: 2440, baseType: !1348, size: 64, offset: 576)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1734, file: !6, line: 2441, baseType: !1348, size: 64, offset: 640)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1734, file: !6, line: 2443, baseType: !1746, size: 128, offset: 704)
!1746 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !6, line: 182, baseType: !1747)
!1747 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !6, line: 182, size: 128, elements: !1748)
!1748 = !{!1749}
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1747, file: !6, line: 182, baseType: !1722, size: 128)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1351, file: !6, line: 3401, baseType: !1751, size: 320)
!1751 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !6, line: 3327, size: 320, elements: !1752)
!1752 = !{!1753, !1754, !1761}
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1751, file: !6, line: 3329, baseType: !1387, size: 192)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1751, file: !6, line: 3330, baseType: !1755, size: 64, offset: 192)
!1755 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1756, size: 64)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !6, line: 3320, size: 192, elements: !1757)
!1757 = !{!1758, !1759, !1760}
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1756, file: !6, line: 3322, baseType: !1755, size: 64)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1756, file: !6, line: 3323, baseType: !1755, size: 64, offset: 64)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1756, file: !6, line: 3324, baseType: !1348, size: 64, offset: 128)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1751, file: !6, line: 3331, baseType: !1755, size: 64, offset: 256)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1351, file: !6, line: 3402, baseType: !1763, size: 256)
!1763 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !6, line: 1540, size: 256, elements: !1764)
!1764 = !{!1765, !1766}
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1763, file: !6, line: 1541, baseType: !1387, size: 192)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1763, file: !6, line: 1542, baseType: !1767, size: 64, offset: 192)
!1767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1768, size: 64)
!1768 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !6, line: 1538, baseType: !1769)
!1769 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !6, line: 1538, size: 192, elements: !1770)
!1770 = !{!1771}
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1769, file: !6, line: 1538, baseType: !1772, size: 192)
!1772 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !6, line: 1537, baseType: !1773)
!1773 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !6, line: 1537, size: 192, elements: !1774)
!1774 = !{!1775, !1776, !1777}
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1773, file: !6, line: 1537, baseType: !7, size: 32)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1773, file: !6, line: 1537, baseType: !7, size: 32, offset: 32)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1773, file: !6, line: 1537, baseType: !1778, size: 128, offset: 64)
!1778 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1779, size: 128, elements: !1432)
!1779 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !6, line: 1535, baseType: !1780)
!1780 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !6, line: 1532, size: 128, elements: !1781)
!1781 = !{!1782, !1783}
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1780, file: !6, line: 1533, baseType: !1348, size: 64)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1780, file: !6, line: 1534, baseType: !1348, size: 64, offset: 64)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1351, file: !6, line: 3403, baseType: !1785, size: 512)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !6, line: 1938, size: 512, elements: !1786)
!1786 = !{!1787, !1788, !1789, !1790, !1796, !1800, !1801}
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1785, file: !6, line: 1939, baseType: !1387, size: 192)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1785, file: !6, line: 1940, baseType: !1459, size: 32, offset: 192)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1785, file: !6, line: 1941, baseType: !5, size: 32, offset: 224)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1785, file: !6, line: 1946, baseType: !1791, size: 32, offset: 256)
!1791 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !6, line: 1942, size: 32, elements: !1792)
!1792 = !{!1793, !1794, !1795}
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1791, file: !6, line: 1943, baseType: !25, size: 32)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1791, file: !6, line: 1944, baseType: !32, size: 32)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1791, file: !6, line: 1945, baseType: !39, size: 32)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1785, file: !6, line: 1950, baseType: !1797, size: 64, offset: 320)
!1797 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1349, line: 66, baseType: !1798)
!1798 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1799, size: 64)
!1799 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !1349, line: 65, flags: DIFlagFwdDecl)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1785, file: !6, line: 1951, baseType: !1797, size: 64, offset: 384)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1785, file: !6, line: 1953, baseType: !1674, size: 64, offset: 448)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1351, file: !6, line: 3404, baseType: !1803, size: 1664)
!1803 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !6, line: 3337, size: 1664, elements: !1804)
!1804 = !{!1805, !1806}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1803, file: !6, line: 3338, baseType: !1387, size: 192)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1803, file: !6, line: 3341, baseType: !1807, size: 1472, offset: 192)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !266, line: 410, size: 1472, elements: !1808)
!1808 = !{!1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1807, file: !266, line: 412, baseType: !1140, size: 32)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1807, file: !266, line: 413, baseType: !1140, size: 32, offset: 32)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1807, file: !266, line: 414, baseType: !1140, size: 32, offset: 64)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1807, file: !266, line: 415, baseType: !1140, size: 32, offset: 96)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1807, file: !266, line: 416, baseType: !1140, size: 32, offset: 128)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1807, file: !266, line: 417, baseType: !1140, size: 32, offset: 160)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1807, file: !266, line: 418, baseType: !1451, size: 8, offset: 192)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1807, file: !266, line: 419, baseType: !1451, size: 8, offset: 200)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1807, file: !266, line: 420, baseType: !1818, size: 8, offset: 208)
!1818 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1807, file: !266, line: 421, baseType: !1818, size: 8, offset: 216)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1807, file: !266, line: 422, baseType: !1818, size: 8, offset: 224)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1807, file: !266, line: 423, baseType: !1818, size: 8, offset: 232)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1807, file: !266, line: 424, baseType: !1818, size: 8, offset: 240)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1807, file: !266, line: 425, baseType: !1818, size: 8, offset: 248)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1807, file: !266, line: 426, baseType: !1818, size: 8, offset: 256)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1807, file: !266, line: 427, baseType: !1818, size: 8, offset: 264)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1807, file: !266, line: 428, baseType: !1818, size: 8, offset: 272)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1807, file: !266, line: 429, baseType: !1818, size: 8, offset: 280)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1807, file: !266, line: 430, baseType: !1818, size: 8, offset: 288)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1807, file: !266, line: 431, baseType: !1818, size: 8, offset: 296)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1807, file: !266, line: 432, baseType: !1818, size: 8, offset: 304)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1807, file: !266, line: 433, baseType: !1818, size: 8, offset: 312)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1807, file: !266, line: 434, baseType: !1818, size: 8, offset: 320)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1807, file: !266, line: 435, baseType: !1818, size: 8, offset: 328)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1807, file: !266, line: 436, baseType: !1818, size: 8, offset: 336)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1807, file: !266, line: 437, baseType: !1818, size: 8, offset: 344)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1807, file: !266, line: 438, baseType: !1818, size: 8, offset: 352)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1807, file: !266, line: 439, baseType: !1818, size: 8, offset: 360)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1807, file: !266, line: 440, baseType: !1818, size: 8, offset: 368)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1807, file: !266, line: 441, baseType: !1818, size: 8, offset: 376)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1807, file: !266, line: 442, baseType: !1818, size: 8, offset: 384)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1807, file: !266, line: 443, baseType: !1818, size: 8, offset: 392)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1807, file: !266, line: 444, baseType: !1818, size: 8, offset: 400)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1807, file: !266, line: 445, baseType: !1818, size: 8, offset: 408)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1807, file: !266, line: 446, baseType: !1818, size: 8, offset: 416)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1807, file: !266, line: 447, baseType: !1818, size: 8, offset: 424)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1807, file: !266, line: 448, baseType: !1818, size: 8, offset: 432)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1807, file: !266, line: 449, baseType: !1818, size: 8, offset: 440)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1807, file: !266, line: 450, baseType: !1818, size: 8, offset: 448)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1807, file: !266, line: 451, baseType: !1818, size: 8, offset: 456)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1807, file: !266, line: 452, baseType: !1818, size: 8, offset: 464)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1807, file: !266, line: 453, baseType: !1818, size: 8, offset: 472)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1807, file: !266, line: 454, baseType: !1818, size: 8, offset: 480)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1807, file: !266, line: 455, baseType: !1818, size: 8, offset: 488)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1807, file: !266, line: 456, baseType: !1818, size: 8, offset: 496)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1807, file: !266, line: 457, baseType: !1818, size: 8, offset: 504)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1807, file: !266, line: 458, baseType: !1818, size: 8, offset: 512)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1807, file: !266, line: 459, baseType: !1818, size: 8, offset: 520)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1807, file: !266, line: 460, baseType: !1818, size: 8, offset: 528)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1807, file: !266, line: 461, baseType: !1818, size: 8, offset: 536)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1807, file: !266, line: 462, baseType: !1818, size: 8, offset: 544)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1807, file: !266, line: 463, baseType: !1818, size: 8, offset: 552)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1807, file: !266, line: 464, baseType: !1818, size: 8, offset: 560)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1807, file: !266, line: 465, baseType: !1818, size: 8, offset: 568)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1807, file: !266, line: 466, baseType: !1818, size: 8, offset: 576)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1807, file: !266, line: 467, baseType: !1818, size: 8, offset: 584)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1807, file: !266, line: 468, baseType: !1818, size: 8, offset: 592)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1807, file: !266, line: 469, baseType: !1818, size: 8, offset: 600)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1807, file: !266, line: 470, baseType: !1818, size: 8, offset: 608)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1807, file: !266, line: 471, baseType: !1818, size: 8, offset: 616)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1807, file: !266, line: 472, baseType: !1818, size: 8, offset: 624)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1807, file: !266, line: 473, baseType: !1818, size: 8, offset: 632)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1807, file: !266, line: 474, baseType: !1818, size: 8, offset: 640)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1807, file: !266, line: 475, baseType: !1818, size: 8, offset: 648)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1807, file: !266, line: 476, baseType: !1818, size: 8, offset: 656)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1807, file: !266, line: 477, baseType: !1818, size: 8, offset: 664)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1807, file: !266, line: 478, baseType: !1818, size: 8, offset: 672)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1807, file: !266, line: 479, baseType: !1818, size: 8, offset: 680)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1807, file: !266, line: 480, baseType: !1818, size: 8, offset: 688)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1807, file: !266, line: 481, baseType: !1818, size: 8, offset: 696)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1807, file: !266, line: 482, baseType: !1818, size: 8, offset: 704)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1807, file: !266, line: 483, baseType: !1818, size: 8, offset: 712)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1807, file: !266, line: 484, baseType: !1818, size: 8, offset: 720)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1807, file: !266, line: 485, baseType: !1818, size: 8, offset: 728)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1807, file: !266, line: 486, baseType: !1818, size: 8, offset: 736)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1807, file: !266, line: 487, baseType: !1818, size: 8, offset: 744)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1807, file: !266, line: 488, baseType: !1818, size: 8, offset: 752)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1807, file: !266, line: 489, baseType: !1818, size: 8, offset: 760)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1807, file: !266, line: 490, baseType: !1818, size: 8, offset: 768)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1807, file: !266, line: 491, baseType: !1818, size: 8, offset: 776)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1807, file: !266, line: 492, baseType: !1818, size: 8, offset: 784)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1807, file: !266, line: 493, baseType: !1818, size: 8, offset: 792)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1807, file: !266, line: 494, baseType: !1818, size: 8, offset: 800)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1807, file: !266, line: 495, baseType: !1818, size: 8, offset: 808)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1807, file: !266, line: 496, baseType: !1818, size: 8, offset: 816)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1807, file: !266, line: 497, baseType: !1818, size: 8, offset: 824)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1807, file: !266, line: 498, baseType: !1818, size: 8, offset: 832)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1807, file: !266, line: 499, baseType: !1818, size: 8, offset: 840)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1807, file: !266, line: 500, baseType: !1818, size: 8, offset: 848)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1807, file: !266, line: 501, baseType: !1818, size: 8, offset: 856)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1807, file: !266, line: 502, baseType: !1818, size: 8, offset: 864)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1807, file: !266, line: 503, baseType: !1818, size: 8, offset: 872)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1807, file: !266, line: 504, baseType: !1818, size: 8, offset: 880)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1807, file: !266, line: 505, baseType: !1818, size: 8, offset: 888)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1807, file: !266, line: 506, baseType: !1818, size: 8, offset: 896)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1807, file: !266, line: 507, baseType: !1818, size: 8, offset: 904)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1807, file: !266, line: 508, baseType: !1818, size: 8, offset: 912)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1807, file: !266, line: 509, baseType: !1818, size: 8, offset: 920)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1807, file: !266, line: 510, baseType: !1818, size: 8, offset: 928)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1807, file: !266, line: 511, baseType: !1818, size: 8, offset: 936)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1807, file: !266, line: 512, baseType: !1818, size: 8, offset: 944)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1807, file: !266, line: 513, baseType: !1818, size: 8, offset: 952)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1807, file: !266, line: 514, baseType: !1818, size: 8, offset: 960)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1807, file: !266, line: 515, baseType: !1818, size: 8, offset: 968)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1807, file: !266, line: 516, baseType: !1818, size: 8, offset: 976)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1807, file: !266, line: 517, baseType: !1818, size: 8, offset: 984)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1807, file: !266, line: 518, baseType: !1818, size: 8, offset: 992)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1807, file: !266, line: 519, baseType: !1818, size: 8, offset: 1000)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1807, file: !266, line: 520, baseType: !1818, size: 8, offset: 1008)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1807, file: !266, line: 521, baseType: !1818, size: 8, offset: 1016)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1807, file: !266, line: 522, baseType: !1818, size: 8, offset: 1024)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1807, file: !266, line: 523, baseType: !1818, size: 8, offset: 1032)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1807, file: !266, line: 524, baseType: !1818, size: 8, offset: 1040)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1807, file: !266, line: 525, baseType: !1818, size: 8, offset: 1048)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1807, file: !266, line: 526, baseType: !1818, size: 8, offset: 1056)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1807, file: !266, line: 527, baseType: !1818, size: 8, offset: 1064)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1807, file: !266, line: 528, baseType: !1818, size: 8, offset: 1072)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1807, file: !266, line: 529, baseType: !1818, size: 8, offset: 1080)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1807, file: !266, line: 530, baseType: !1818, size: 8, offset: 1088)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1807, file: !266, line: 531, baseType: !1818, size: 8, offset: 1096)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1807, file: !266, line: 532, baseType: !1818, size: 8, offset: 1104)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1807, file: !266, line: 533, baseType: !1818, size: 8, offset: 1112)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1807, file: !266, line: 534, baseType: !1818, size: 8, offset: 1120)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1807, file: !266, line: 535, baseType: !1818, size: 8, offset: 1128)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1807, file: !266, line: 536, baseType: !1818, size: 8, offset: 1136)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1807, file: !266, line: 537, baseType: !1818, size: 8, offset: 1144)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1807, file: !266, line: 538, baseType: !1818, size: 8, offset: 1152)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1807, file: !266, line: 539, baseType: !1818, size: 8, offset: 1160)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1807, file: !266, line: 540, baseType: !1818, size: 8, offset: 1168)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1807, file: !266, line: 541, baseType: !1818, size: 8, offset: 1176)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1807, file: !266, line: 542, baseType: !1818, size: 8, offset: 1184)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1807, file: !266, line: 543, baseType: !1818, size: 8, offset: 1192)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1807, file: !266, line: 544, baseType: !1818, size: 8, offset: 1200)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1807, file: !266, line: 545, baseType: !1818, size: 8, offset: 1208)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1807, file: !266, line: 546, baseType: !1818, size: 8, offset: 1216)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1807, file: !266, line: 547, baseType: !1818, size: 8, offset: 1224)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1807, file: !266, line: 548, baseType: !1818, size: 8, offset: 1232)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1807, file: !266, line: 549, baseType: !1818, size: 8, offset: 1240)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1807, file: !266, line: 550, baseType: !1818, size: 8, offset: 1248)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1807, file: !266, line: 551, baseType: !1818, size: 8, offset: 1256)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1807, file: !266, line: 552, baseType: !1818, size: 8, offset: 1264)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1807, file: !266, line: 553, baseType: !1818, size: 8, offset: 1272)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1807, file: !266, line: 554, baseType: !1818, size: 8, offset: 1280)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1807, file: !266, line: 555, baseType: !1818, size: 8, offset: 1288)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1807, file: !266, line: 556, baseType: !1818, size: 8, offset: 1296)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1807, file: !266, line: 557, baseType: !1818, size: 8, offset: 1304)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1807, file: !266, line: 558, baseType: !1818, size: 8, offset: 1312)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1807, file: !266, line: 559, baseType: !1818, size: 8, offset: 1320)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1807, file: !266, line: 560, baseType: !1818, size: 8, offset: 1328)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1807, file: !266, line: 561, baseType: !1818, size: 8, offset: 1336)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1807, file: !266, line: 562, baseType: !1818, size: 8, offset: 1344)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1807, file: !266, line: 563, baseType: !1818, size: 8, offset: 1352)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1807, file: !266, line: 564, baseType: !1818, size: 8, offset: 1360)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1807, file: !266, line: 565, baseType: !1818, size: 8, offset: 1368)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1807, file: !266, line: 566, baseType: !1818, size: 8, offset: 1376)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1807, file: !266, line: 567, baseType: !1818, size: 8, offset: 1384)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1807, file: !266, line: 568, baseType: !1818, size: 8, offset: 1392)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1807, file: !266, line: 569, baseType: !1818, size: 8, offset: 1400)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1807, file: !266, line: 570, baseType: !1818, size: 8, offset: 1408)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1807, file: !266, line: 571, baseType: !1818, size: 8, offset: 1416)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1807, file: !266, line: 572, baseType: !1818, size: 8, offset: 1424)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1807, file: !266, line: 573, baseType: !1818, size: 8, offset: 1432)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1807, file: !266, line: 574, baseType: !1818, size: 8, offset: 1440)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1351, file: !6, line: 3405, baseType: !1974, size: 384)
!1974 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !6, line: 3352, size: 384, elements: !1975)
!1975 = !{!1976, !1977}
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1974, file: !6, line: 3353, baseType: !1387, size: 192)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1974, file: !6, line: 3356, baseType: !1978, size: 192, offset: 192)
!1978 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !266, line: 578, size: 192, elements: !1979)
!1979 = !{!1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990}
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1978, file: !266, line: 580, baseType: !1140, size: 32)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1978, file: !266, line: 581, baseType: !1140, size: 32, offset: 32)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1978, file: !266, line: 582, baseType: !1140, size: 32, offset: 64)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1978, file: !266, line: 583, baseType: !1140, size: 32, offset: 96)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1978, file: !266, line: 584, baseType: !1451, size: 8, offset: 128)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1978, file: !266, line: 585, baseType: !1451, size: 8, offset: 136)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1978, file: !266, line: 586, baseType: !1451, size: 8, offset: 144)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1978, file: !266, line: 587, baseType: !1451, size: 8, offset: 152)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1978, file: !266, line: 588, baseType: !1451, size: 8, offset: 160)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1978, file: !266, line: 589, baseType: !1451, size: 8, offset: 168)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1978, file: !266, line: 590, baseType: !1451, size: 8, offset: 176)
!1991 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1992 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1993, size: 64)
!1993 = !DIDerivedType(tag: DW_TAG_typedef, name: "format_kind_info", file: !255, line: 252, baseType: !1994)
!1994 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !255, line: 209, size: 832, elements: !1995)
!1995 = !{!1996, !1997, !2010, !2034, !2035, !2036, !2048, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066}
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1994, file: !255, line: 213, baseType: !1646, size: 64)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "length_char_specs", scope: !1994, file: !255, line: 215, baseType: !1998, size: 64, offset: 64)
!1998 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1999, size: 64)
!1999 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2000)
!2000 = !DIDerivedType(tag: DW_TAG_typedef, name: "format_length_info", file: !255, line: 103, baseType: !2001)
!2001 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !255, line: 85, size: 320, elements: !2002)
!2002 = !{!2003, !2004, !2005, !2006, !2007, !2008, !2009}
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2001, file: !255, line: 90, baseType: !1646, size: 64)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2001, file: !255, line: 92, baseType: !1150, size: 32, offset: 64)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "std", scope: !2001, file: !255, line: 94, baseType: !1165, size: 32, offset: 96)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "double_name", scope: !2001, file: !255, line: 96, baseType: !1646, size: 64, offset: 128)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "double_index", scope: !2001, file: !255, line: 97, baseType: !1150, size: 32, offset: 192)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "double_std", scope: !2001, file: !255, line: 98, baseType: !1165, size: 32, offset: 224)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "scalar_identity_flag", scope: !2001, file: !255, line: 102, baseType: !1140, size: 32, offset: 256)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "conversion_specs", scope: !1994, file: !255, line: 217, baseType: !2011, size: 64, offset: 128)
!2011 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2012, size: 64)
!2012 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2013)
!2013 = !DIDerivedType(tag: DW_TAG_typedef, name: "format_char_info", file: !255, line: 159, baseType: !2014)
!2014 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "format_char_info", file: !255, line: 130, size: 2624, elements: !2015)
!2015 = !{!2016, !2017, !2018, !2019, !2029, !2030, !2031}
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "format_chars", scope: !2014, file: !255, line: 132, baseType: !1646, size: 64)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_count", scope: !2014, file: !255, line: 133, baseType: !1140, size: 32, offset: 64)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "std", scope: !2014, file: !255, line: 134, baseType: !1165, size: 32, offset: 96)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2014, file: !255, line: 136, baseType: !2020, size: 2304, offset: 128)
!2020 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2021, size: 2304, elements: !2027)
!2021 = !DIDerivedType(tag: DW_TAG_typedef, name: "format_type_detail", file: !255, line: 119, baseType: !2022)
!2022 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !255, line: 108, size: 192, elements: !2023)
!2023 = !{!2024, !2025, !2026}
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "std", scope: !2022, file: !255, line: 113, baseType: !1165, size: 32)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2022, file: !255, line: 116, baseType: !1646, size: 64, offset: 64)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2022, file: !255, line: 118, baseType: !1707, size: 64, offset: 128)
!2027 = !{!2028}
!2028 = !DISubrange(count: 12)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "flag_chars", scope: !2014, file: !255, line: 143, baseType: !1646, size: 64, offset: 2432)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "flags2", scope: !2014, file: !255, line: 153, baseType: !1646, size: 64, offset: 2496)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !2014, file: !255, line: 158, baseType: !2032, size: 64, offset: 2560)
!2032 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2033, size: 64)
!2033 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2014)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "flag_chars", scope: !1994, file: !255, line: 219, baseType: !1646, size: 64, offset: 192)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "modifier_chars", scope: !1994, file: !255, line: 221, baseType: !1646, size: 64, offset: 256)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "flag_specs", scope: !1994, file: !255, line: 223, baseType: !2037, size: 64, offset: 320)
!2037 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2038, size: 64)
!2038 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2039)
!2039 = !DIDerivedType(tag: DW_TAG_typedef, name: "format_flag_spec", file: !255, line: 187, baseType: !2040)
!2040 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !255, line: 163, size: 320, elements: !2041)
!2041 = !{!2042, !2043, !2044, !2045, !2046, !2047}
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "flag_char", scope: !2040, file: !255, line: 166, baseType: !1140, size: 32)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "predicate", scope: !2040, file: !255, line: 175, baseType: !1140, size: 32, offset: 32)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "skip_next_char", scope: !2040, file: !255, line: 178, baseType: !1140, size: 32, offset: 64)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2040, file: !255, line: 181, baseType: !1646, size: 64, offset: 128)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "long_name", scope: !2040, file: !255, line: 184, baseType: !1646, size: 64, offset: 192)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "std", scope: !2040, file: !255, line: 186, baseType: !1165, size: 32, offset: 256)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "bad_flag_pairs", scope: !1994, file: !255, line: 225, baseType: !2049, size: 64, offset: 384)
!2049 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2050, size: 64)
!2050 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2051)
!2051 = !DIDerivedType(tag: DW_TAG_typedef, name: "format_flag_pair", file: !255, line: 205, baseType: !2052)
!2052 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !255, line: 192, size: 128, elements: !2053)
!2053 = !{!2054, !2055, !2056, !2057}
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "flag_char1", scope: !2052, file: !255, line: 195, baseType: !1140, size: 32)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "flag_char2", scope: !2052, file: !255, line: 197, baseType: !1140, size: 32, offset: 32)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "ignored", scope: !2052, file: !255, line: 200, baseType: !1140, size: 32, offset: 64)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "predicate", scope: !2052, file: !255, line: 204, baseType: !1140, size: 32, offset: 96)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1994, file: !255, line: 227, baseType: !1140, size: 32, offset: 448)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "width_char", scope: !1994, file: !255, line: 229, baseType: !1140, size: 32, offset: 480)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "left_precision_char", scope: !1994, file: !255, line: 232, baseType: !1140, size: 32, offset: 512)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "precision_char", scope: !1994, file: !255, line: 235, baseType: !1140, size: 32, offset: 544)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "suppression_char", scope: !1994, file: !255, line: 238, baseType: !1140, size: 32, offset: 576)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "length_code_char", scope: !1994, file: !255, line: 243, baseType: !1140, size: 32, offset: 608)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_char", scope: !1994, file: !255, line: 245, baseType: !1140, size: 32, offset: 640)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "width_type", scope: !1994, file: !255, line: 248, baseType: !1707, size: 64, offset: 704)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "precision_type", scope: !1994, file: !255, line: 251, baseType: !1707, size: 64, offset: 768)
!2067 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2068, size: 64)
!2068 = !DIDerivedType(tag: DW_TAG_typedef, name: "format_check_context", file: !3, line: 814, baseType: !2069)
!2069 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 809, size: 192, elements: !2070)
!2070 = !{!2071, !2083, !2091}
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "res", scope: !2069, file: !3, line: 811, baseType: !2072, size: 64)
!2072 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2073, size: 64)
!2073 = !DIDerivedType(tag: DW_TAG_typedef, name: "format_check_results", file: !3, line: 807, baseType: !2074)
!2074 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 785, size: 224, elements: !2075)
!2075 = !{!2076, !2077, !2078, !2079, !2080, !2081, !2082}
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "number_non_literal", scope: !2074, file: !3, line: 789, baseType: !1140, size: 32)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "number_extra_args", scope: !2074, file: !3, line: 792, baseType: !1140, size: 32, offset: 32)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "number_dollar_extra_args", scope: !2074, file: !3, line: 796, baseType: !1140, size: 32, offset: 64)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "number_wide", scope: !2074, file: !3, line: 799, baseType: !1140, size: 32, offset: 96)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "number_empty", scope: !2074, file: !3, line: 801, baseType: !1140, size: 32, offset: 128)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "number_unterminated", scope: !2074, file: !3, line: 804, baseType: !1140, size: 32, offset: 160)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "number_other", scope: !2074, file: !3, line: 806, baseType: !1140, size: 32, offset: 192)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !2069, file: !3, line: 812, baseType: !2084, size: 64, offset: 64)
!2084 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2085, size: 64)
!2085 = !DIDerivedType(tag: DW_TAG_typedef, name: "function_format_info", file: !3, line: 72, baseType: !2086)
!2086 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function_format_info", file: !3, line: 67, size: 192, elements: !2087)
!2087 = !{!2088, !2089, !2090}
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "format_type", scope: !2086, file: !3, line: 69, baseType: !1140, size: 32)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "format_num", scope: !2086, file: !3, line: 70, baseType: !1402, size: 64, offset: 64)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "first_arg_num", scope: !2086, file: !3, line: 71, baseType: !1402, size: 64, offset: 128)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "params", scope: !2069, file: !3, line: 813, baseType: !1348, size: 64, offset: 128)
!2092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2093, size: 64)
!2093 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1351)
!2094 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2095 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2096, size: 64)
!2096 = !DIDerivedType(tag: DW_TAG_typedef, name: "format_wanted_type", file: !3, line: 286, baseType: !2097)
!2097 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "format_wanted_type", file: !3, line: 256, size: 576, elements: !2098)
!2098 = !{!2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109}
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "wanted_type", scope: !2097, file: !3, line: 259, baseType: !1348, size: 64)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "wanted_type_name", scope: !2097, file: !3, line: 261, baseType: !1646, size: 64, offset: 64)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "scalar_identity_flag", scope: !2097, file: !3, line: 263, baseType: !1140, size: 32, offset: 128)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_count", scope: !2097, file: !3, line: 265, baseType: !1140, size: 32, offset: 160)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "char_lenient_flag", scope: !2097, file: !3, line: 268, baseType: !1140, size: 32, offset: 192)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "writing_in_flag", scope: !2097, file: !3, line: 271, baseType: !1140, size: 32, offset: 224)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "reading_from_flag", scope: !2097, file: !3, line: 274, baseType: !1140, size: 32, offset: 256)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2097, file: !3, line: 279, baseType: !1646, size: 64, offset: 320)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "param", scope: !2097, file: !3, line: 281, baseType: !1348, size: 64, offset: 384)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "arg_num", scope: !2097, file: !3, line: 283, baseType: !1140, size: 32, offset: 448)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2097, file: !3, line: 285, baseType: !2110, size: 64, offset: 512)
!2110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2097, size: 64)
!2111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1431, size: 64)
!2112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2000, size: 64)
!2113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2013, size: 64)
!2114 = !{!2115, !2117, !0, !2128, !2130, !2132, !2134, !2136, !2138, !2140, !2142, !2144, !2150, !2155, !2160, !2163, !2168, !2173, !2178, !2183, !2185, !2187, !2190, !2193, !2196, !2198, !2200, !2203, !2208, !2213, !2218, !2220, !2223, !2228, !2233, !2236, !2241, !2244, !2247, !2249, !2252, !2254, !2257, !2263, !2266, !2268, !2271, !2273, !2275, !2277, !2279, !2281, !2283}
!2115 = !DIGlobalVariableExpression(var: !2116, expr: !DIExpression())
!2116 = distinct !DIGlobalVariable(name: "dynamic_format_types", scope: !2, file: !3, line: 778, type: !1992, isLocal: true, isDefinition: true)
!2117 = !DIGlobalVariableExpression(var: !2118, expr: !DIExpression())
!2118 = distinct !DIGlobalVariable(name: "gnu_target_overrides_format_attributes", scope: !2, file: !3, line: 2697, type: !2119, isLocal: true, isDefinition: true)
!2119 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2120, size: 640, elements: !2126)
!2120 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2121)
!2121 = !DIDerivedType(tag: DW_TAG_typedef, name: "target_ovr_attr", file: !255, line: 324, baseType: !2122)
!2122 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !255, line: 318, size: 128, elements: !2123)
!2123 = !{!2124, !2125}
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "named_attr_src", scope: !2122, file: !255, line: 321, baseType: !1646, size: 64)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "named_attr_dst", scope: !2122, file: !255, line: 323, baseType: !1646, size: 64, offset: 64)
!2126 = !{!2127}
!2127 = !DISubrange(count: 5)
!2128 = !DIGlobalVariableExpression(var: !2129, expr: !DIExpression())
!2129 = distinct !DIGlobalVariable(name: "n_format_types", scope: !2, file: !3, line: 780, type: !1140, isLocal: true, isDefinition: true)
!2130 = !DIGlobalVariableExpression(var: !2131, expr: !DIExpression())
!2131 = distinct !DIGlobalVariable(name: "dollar_first_arg_num", scope: !2, file: !3, line: 938, type: !1140, isLocal: true, isDefinition: true)
!2132 = !DIGlobalVariableExpression(var: !2133, expr: !DIExpression())
!2133 = distinct !DIGlobalVariable(name: "dollar_arguments_count", scope: !2, file: !3, line: 937, type: !1140, isLocal: true, isDefinition: true)
!2134 = !DIGlobalVariableExpression(var: !2135, expr: !DIExpression())
!2135 = distinct !DIGlobalVariable(name: "dollar_max_arg_used", scope: !2, file: !3, line: 939, type: !1140, isLocal: true, isDefinition: true)
!2136 = !DIGlobalVariableExpression(var: !2137, expr: !DIExpression())
!2137 = distinct !DIGlobalVariable(name: "dollar_format_warned", scope: !2, file: !3, line: 940, type: !1140, isLocal: true, isDefinition: true)
!2138 = !DIGlobalVariableExpression(var: !2139, expr: !DIExpression())
!2139 = distinct !DIGlobalVariable(name: "dollar_arguments_alloc", scope: !2, file: !3, line: 936, type: !1140, isLocal: true, isDefinition: true)
!2140 = !DIGlobalVariableExpression(var: !2141, expr: !DIExpression())
!2141 = distinct !DIGlobalVariable(name: "dollar_arguments_used", scope: !2, file: !3, line: 934, type: !2111, isLocal: true, isDefinition: true)
!2142 = !DIGlobalVariableExpression(var: !2143, expr: !DIExpression())
!2143 = distinct !DIGlobalVariable(name: "dollar_arguments_pointer_p", scope: !2, file: !3, line: 935, type: !2111, isLocal: true, isDefinition: true)
!2144 = !DIGlobalVariableExpression(var: !2145, expr: !DIExpression())
!2145 = distinct !DIGlobalVariable(name: "format_types_orig", scope: !2, file: !3, line: 710, type: !2146, isLocal: true, isDefinition: true)
!2146 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2147, size: 8320, elements: !2148)
!2147 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1993)
!2148 = !{!2149}
!2149 = !DISubrange(count: 10)
!2150 = !DIGlobalVariableExpression(var: !2151, expr: !DIExpression())
!2151 = distinct !DIGlobalVariable(name: "printf_length_specs", scope: !2, file: !3, line: 291, type: !2152, isLocal: true, isDefinition: true)
!2152 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1999, size: 3520, elements: !2153)
!2153 = !{!2154}
!2154 = !DISubrange(count: 11)
!2155 = !DIGlobalVariableExpression(var: !2156, expr: !DIExpression())
!2156 = distinct !DIGlobalVariable(name: "print_char_table", scope: !2, file: !3, line: 511, type: !2157, isLocal: true, isDefinition: true)
!2157 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2012, size: 39360, elements: !2158)
!2158 = !{!2159}
!2159 = !DISubrange(count: 15)
!2160 = !DIGlobalVariableExpression(var: !2161, expr: !DIExpression())
!2161 = distinct !DIGlobalVariable(name: "printf_flag_specs", scope: !2, file: !3, line: 361, type: !2162, isLocal: true, isDefinition: true)
!2162 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2038, size: 3520, elements: !2153)
!2163 = !DIGlobalVariableExpression(var: !2164, expr: !DIExpression())
!2164 = distinct !DIGlobalVariable(name: "printf_flag_pairs", scope: !2, file: !3, line: 377, type: !2165, isLocal: true, isDefinition: true)
!2165 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2050, size: 512, elements: !2166)
!2166 = !{!2167}
!2167 = !DISubrange(count: 4)
!2168 = !DIGlobalVariableExpression(var: !2169, expr: !DIExpression())
!2169 = distinct !DIGlobalVariable(name: "asm_fprintf_length_specs", scope: !2, file: !3, line: 307, type: !2170, isLocal: true, isDefinition: true)
!2170 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1999, size: 960, elements: !2171)
!2171 = !{!2172}
!2172 = !DISubrange(count: 3)
!2173 = !DIGlobalVariableExpression(var: !2174, expr: !DIExpression())
!2174 = distinct !DIGlobalVariable(name: "asm_fprintf_char_table", scope: !2, file: !3, line: 534, type: !2175, isLocal: true, isDefinition: true)
!2175 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2012, size: 34112, elements: !2176)
!2176 = !{!2177}
!2177 = !DISubrange(count: 13)
!2178 = !DIGlobalVariableExpression(var: !2179, expr: !DIExpression())
!2179 = distinct !DIGlobalVariable(name: "asm_fprintf_flag_specs", scope: !2, file: !3, line: 385, type: !2180, isLocal: true, isDefinition: true)
!2180 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2038, size: 2880, elements: !2181)
!2181 = !{!2182}
!2182 = !DISubrange(count: 9)
!2183 = !DIGlobalVariableExpression(var: !2184, expr: !DIExpression())
!2184 = distinct !DIGlobalVariable(name: "asm_fprintf_flag_pairs", scope: !2, file: !3, line: 398, type: !2165, isLocal: true, isDefinition: true)
!2185 = !DIGlobalVariableExpression(var: !2186, expr: !DIExpression())
!2186 = distinct !DIGlobalVariable(name: "gcc_diag_length_specs", scope: !2, file: !3, line: 315, type: !2170, isLocal: true, isDefinition: true)
!2187 = !DIGlobalVariableExpression(var: !2188, expr: !DIExpression())
!2188 = distinct !DIGlobalVariable(name: "gcc_diag_char_table", scope: !2, file: !3, line: 554, type: !2189, isLocal: true, isDefinition: true)
!2189 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2012, size: 26240, elements: !2148)
!2190 = !DIGlobalVariableExpression(var: !2191, expr: !DIExpression())
!2191 = distinct !DIGlobalVariable(name: "gcc_diag_flag_specs", scope: !2, file: !3, line: 420, type: !2192, isLocal: true, isDefinition: true)
!2192 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2038, size: 1600, elements: !2126)
!2193 = !DIGlobalVariableExpression(var: !2194, expr: !DIExpression())
!2194 = distinct !DIGlobalVariable(name: "gcc_diag_flag_pairs", scope: !2, file: !3, line: 406, type: !2195, isLocal: true, isDefinition: true)
!2195 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2050, size: 128, elements: !1432)
!2196 = !DIGlobalVariableExpression(var: !2197, expr: !DIExpression())
!2197 = distinct !DIGlobalVariable(name: "gcc_tdiag_char_table", scope: !2, file: !3, line: 574, type: !2189, isLocal: true, isDefinition: true)
!2198 = !DIGlobalVariableExpression(var: !2199, expr: !DIExpression())
!2199 = distinct !DIGlobalVariable(name: "gcc_cdiag_char_table", scope: !2, file: !3, line: 594, type: !2189, isLocal: true, isDefinition: true)
!2200 = !DIGlobalVariableExpression(var: !2201, expr: !DIExpression())
!2201 = distinct !DIGlobalVariable(name: "gcc_cxxdiag_char_table", scope: !2, file: !3, line: 614, type: !2202, isLocal: true, isDefinition: true)
!2202 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2012, size: 28864, elements: !2153)
!2203 = !DIGlobalVariableExpression(var: !2204, expr: !DIExpression())
!2204 = distinct !DIGlobalVariable(name: "gcc_cxxdiag_flag_specs", scope: !2, file: !3, line: 432, type: !2205, isLocal: true, isDefinition: true)
!2205 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2038, size: 1920, elements: !2206)
!2206 = !{!2207}
!2207 = !DISubrange(count: 6)
!2208 = !DIGlobalVariableExpression(var: !2209, expr: !DIExpression())
!2209 = distinct !DIGlobalVariable(name: "gcc_gfc_length_specs", scope: !2, file: !3, line: 354, type: !2210, isLocal: true, isDefinition: true)
!2210 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1999, size: 640, elements: !2211)
!2211 = !{!2212}
!2212 = !DISubrange(count: 2)
!2213 = !DIGlobalVariableExpression(var: !2214, expr: !DIExpression())
!2214 = distinct !DIGlobalVariable(name: "gcc_gfc_char_table", scope: !2, file: !3, line: 637, type: !2215, isLocal: true, isDefinition: true)
!2215 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2012, size: 18368, elements: !2216)
!2216 = !{!2217}
!2217 = !DISubrange(count: 7)
!2218 = !DIGlobalVariableExpression(var: !2219, expr: !DIExpression())
!2219 = distinct !DIGlobalVariable(name: "gcc_gfc_flag_pairs", scope: !2, file: !3, line: 415, type: !2195, isLocal: true, isDefinition: true)
!2220 = !DIGlobalVariableExpression(var: !2221, expr: !DIExpression())
!2221 = distinct !DIGlobalVariable(name: "scanf_length_specs", scope: !2, file: !3, line: 328, type: !2222, isLocal: true, isDefinition: true)
!2222 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1999, size: 3200, elements: !2148)
!2223 = !DIGlobalVariableExpression(var: !2224, expr: !DIExpression())
!2224 = distinct !DIGlobalVariable(name: "scan_char_table", scope: !2, file: !3, line: 655, type: !2225, isLocal: true, isDefinition: true)
!2225 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2012, size: 36736, elements: !2226)
!2226 = !{!2227}
!2227 = !DISubrange(count: 14)
!2228 = !DIGlobalVariableExpression(var: !2229, expr: !DIExpression())
!2229 = distinct !DIGlobalVariable(name: "scanf_flag_specs", scope: !2, file: !3, line: 442, type: !2230, isLocal: true, isDefinition: true)
!2230 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2038, size: 2560, elements: !2231)
!2231 = !{!2232}
!2232 = !DISubrange(count: 8)
!2233 = !DIGlobalVariableExpression(var: !2234, expr: !DIExpression())
!2234 = distinct !DIGlobalVariable(name: "scanf_flag_pairs", scope: !2, file: !3, line: 455, type: !2235, isLocal: true, isDefinition: true)
!2235 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2050, size: 384, elements: !2171)
!2236 = !DIGlobalVariableExpression(var: !2237, expr: !DIExpression())
!2237 = distinct !DIGlobalVariable(name: "time_char_table", scope: !2, file: !3, line: 676, type: !2238, isLocal: true, isDefinition: true)
!2238 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2012, size: 52480, elements: !2239)
!2239 = !{!2240}
!2240 = !DISubrange(count: 20)
!2241 = !DIGlobalVariableExpression(var: !2242, expr: !DIExpression())
!2242 = distinct !DIGlobalVariable(name: "strftime_flag_specs", scope: !2, file: !3, line: 463, type: !2243, isLocal: true, isDefinition: true)
!2243 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2038, size: 3200, elements: !2148)
!2244 = !DIGlobalVariableExpression(var: !2245, expr: !DIExpression())
!2245 = distinct !DIGlobalVariable(name: "strftime_flag_pairs", scope: !2, file: !3, line: 478, type: !2246, isLocal: true, isDefinition: true)
!2246 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2050, size: 768, elements: !2206)
!2247 = !DIGlobalVariableExpression(var: !2248, expr: !DIExpression())
!2248 = distinct !DIGlobalVariable(name: "strfmon_length_specs", scope: !2, file: !3, line: 345, type: !2210, isLocal: true, isDefinition: true)
!2249 = !DIGlobalVariableExpression(var: !2250, expr: !DIExpression())
!2250 = distinct !DIGlobalVariable(name: "monetary_char_table", scope: !2, file: !3, line: 703, type: !2251, isLocal: true, isDefinition: true)
!2251 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2012, size: 5248, elements: !2211)
!2252 = !DIGlobalVariableExpression(var: !2253, expr: !DIExpression())
!2253 = distinct !DIGlobalVariable(name: "strfmon_flag_specs", scope: !2, file: !3, line: 489, type: !2162, isLocal: true, isDefinition: true)
!2254 = !DIGlobalVariableExpression(var: !2255, expr: !DIExpression())
!2255 = distinct !DIGlobalVariable(name: "strfmon_flag_pairs", scope: !2, file: !3, line: 504, type: !2256, isLocal: true, isDefinition: true)
!2256 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2050, size: 256, elements: !2211)
!2257 = !DIGlobalVariableExpression(var: !2258, expr: !DIExpression())
!2258 = distinct !DIGlobalVariable(name: "hwi", scope: !2259, file: !3, line: 2401, type: !1348, isLocal: true, isDefinition: true)
!2259 = distinct !DISubprogram(name: "init_dynamic_asm_fprintf_info", scope: !3, file: !3, line: 2399, type: !2260, scopeLine: 2400, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!2260 = !DISubroutineType(types: !2261)
!2261 = !{null}
!2262 = !{}
!2263 = !DIGlobalVariableExpression(var: !2264, expr: !DIExpression())
!2264 = distinct !DIGlobalVariable(name: "locus", scope: !2265, file: !3, line: 2460, type: !1348, isLocal: true, isDefinition: true)
!2265 = distinct !DISubprogram(name: "init_dynamic_gfc_info", scope: !3, file: !3, line: 2458, type: !2260, scopeLine: 2459, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!2266 = !DIGlobalVariableExpression(var: !2267, expr: !DIExpression())
!2267 = distinct !DIGlobalVariable(name: "gfc_fci", scope: !2265, file: !3, line: 2464, type: !2113, isLocal: true, isDefinition: true)
!2268 = !DIGlobalVariableExpression(var: !2269, expr: !DIExpression())
!2269 = distinct !DIGlobalVariable(name: "t", scope: !2270, file: !3, line: 2510, type: !1348, isLocal: true, isDefinition: true)
!2270 = distinct !DISubprogram(name: "init_dynamic_diag_info", scope: !3, file: !3, line: 2508, type: !2260, scopeLine: 2509, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!2271 = !DIGlobalVariableExpression(var: !2272, expr: !DIExpression())
!2272 = distinct !DIGlobalVariable(name: "loc", scope: !2270, file: !3, line: 2510, type: !1348, isLocal: true, isDefinition: true)
!2273 = !DIGlobalVariableExpression(var: !2274, expr: !DIExpression())
!2274 = distinct !DIGlobalVariable(name: "hwi", scope: !2270, file: !3, line: 2510, type: !1348, isLocal: true, isDefinition: true)
!2275 = !DIGlobalVariableExpression(var: !2276, expr: !DIExpression())
!2276 = distinct !DIGlobalVariable(name: "diag_fci", scope: !2270, file: !3, line: 2514, type: !2113, isLocal: true, isDefinition: true)
!2277 = !DIGlobalVariableExpression(var: !2278, expr: !DIExpression())
!2278 = distinct !DIGlobalVariable(name: "tdiag_fci", scope: !2270, file: !3, line: 2514, type: !2113, isLocal: true, isDefinition: true)
!2279 = !DIGlobalVariableExpression(var: !2280, expr: !DIExpression())
!2280 = distinct !DIGlobalVariable(name: "cdiag_fci", scope: !2270, file: !3, line: 2514, type: !2113, isLocal: true, isDefinition: true)
!2281 = !DIGlobalVariableExpression(var: !2282, expr: !DIExpression())
!2282 = distinct !DIGlobalVariable(name: "cxxdiag_fci", scope: !2270, file: !3, line: 2514, type: !2113, isLocal: true, isDefinition: true)
!2283 = !DIGlobalVariableExpression(var: !2284, expr: !DIExpression())
!2284 = distinct !DIGlobalVariable(name: "diag_ls", scope: !2270, file: !3, line: 2515, type: !2112, isLocal: true, isDefinition: true)
!2285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2147, size: 64)
!2286 = !{i32 7, !"Dwarf Version", i32 4}
!2287 = !{i32 2, !"Debug Info Version", i32 3}
!2288 = !{i32 1, !"wchar_size", i32 4}
!2289 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2290 = distinct !DISubprogram(name: "set_Wformat", scope: !3, file: !3, line: 38, type: !2291, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!2291 = !DISubroutineType(types: !2292)
!2292 = !{null, !1140}
!2293 = !DILocalVariable(name: "setting", arg: 1, scope: !2290, file: !3, line: 38, type: !1140)
!2294 = !DILocation(line: 38, column: 18, scope: !2290)
!2295 = !DILocation(line: 40, column: 17, scope: !2290)
!2296 = !DILocation(line: 40, column: 15, scope: !2290)
!2297 = !DILocation(line: 41, column: 28, scope: !2290)
!2298 = !DILocation(line: 41, column: 26, scope: !2290)
!2299 = !DILocation(line: 42, column: 29, scope: !2290)
!2300 = !DILocation(line: 42, column: 27, scope: !2290)
!2301 = !DILocation(line: 43, column: 30, scope: !2290)
!2302 = !DILocation(line: 43, column: 28, scope: !2290)
!2303 = !DILocation(line: 44, column: 7, scope: !2304)
!2304 = distinct !DILexicalBlock(scope: !2290, file: !3, line: 44, column: 7)
!2305 = !DILocation(line: 44, column: 15, scope: !2304)
!2306 = !DILocation(line: 44, column: 7, scope: !2290)
!2307 = !DILocation(line: 46, column: 32, scope: !2308)
!2308 = distinct !DILexicalBlock(scope: !2304, file: !3, line: 45, column: 5)
!2309 = !DILocation(line: 46, column: 30, scope: !2308)
!2310 = !DILocation(line: 47, column: 30, scope: !2308)
!2311 = !DILocation(line: 47, column: 28, scope: !2308)
!2312 = !DILocation(line: 48, column: 25, scope: !2308)
!2313 = !DILocation(line: 48, column: 23, scope: !2308)
!2314 = !DILocation(line: 49, column: 5, scope: !2308)
!2315 = !DILocation(line: 51, column: 7, scope: !2316)
!2316 = distinct !DILexicalBlock(scope: !2290, file: !3, line: 51, column: 7)
!2317 = !DILocation(line: 51, column: 7, scope: !2290)
!2318 = !DILocation(line: 52, column: 20, scope: !2316)
!2319 = !DILocation(line: 52, column: 18, scope: !2316)
!2320 = !DILocation(line: 52, column: 5, scope: !2316)
!2321 = !DILocation(line: 53, column: 1, scope: !2290)
!2322 = distinct !DISubprogram(name: "handle_format_arg_attribute", scope: !3, file: !3, line: 88, type: !2323, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!2323 = !DISubroutineType(types: !2324)
!2324 = !{!1348, !1707, !1348, !1348, !1140, !2325}
!2325 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1451, size: 64)
!2326 = !DILocalVariable(name: "node", arg: 1, scope: !2322, file: !3, line: 88, type: !1707)
!2327 = !DILocation(line: 88, column: 36, scope: !2322)
!2328 = !DILocalVariable(name: "name", arg: 2, scope: !2322, file: !3, line: 88, type: !1348)
!2329 = !DILocation(line: 88, column: 47, scope: !2322)
!2330 = !DILocalVariable(name: "args", arg: 3, scope: !2322, file: !3, line: 89, type: !1348)
!2331 = !DILocation(line: 89, column: 14, scope: !2322)
!2332 = !DILocalVariable(name: "flags", arg: 4, scope: !2322, file: !3, line: 89, type: !1140)
!2333 = !DILocation(line: 89, column: 24, scope: !2322)
!2334 = !DILocalVariable(name: "no_add_attrs", arg: 5, scope: !2322, file: !3, line: 89, type: !2325)
!2335 = !DILocation(line: 89, column: 37, scope: !2322)
!2336 = !DILocalVariable(name: "type", scope: !2322, file: !3, line: 91, type: !1348)
!2337 = !DILocation(line: 91, column: 8, scope: !2322)
!2338 = !DILocation(line: 91, column: 16, scope: !2322)
!2339 = !DILocation(line: 91, column: 15, scope: !2322)
!2340 = !DILocalVariable(name: "format_num_expr", scope: !2322, file: !3, line: 92, type: !1348)
!2341 = !DILocation(line: 92, column: 8, scope: !2322)
!2342 = !DILocation(line: 92, column: 26, scope: !2322)
!2343 = !DILocalVariable(name: "format_num", scope: !2322, file: !3, line: 93, type: !1402)
!2344 = !DILocation(line: 93, column: 26, scope: !2322)
!2345 = !DILocalVariable(name: "argument", scope: !2322, file: !3, line: 94, type: !1348)
!2346 = !DILocation(line: 94, column: 8, scope: !2322)
!2347 = !DILocation(line: 96, column: 22, scope: !2348)
!2348 = distinct !DILexicalBlock(scope: !2322, file: !3, line: 96, column: 7)
!2349 = !DILocation(line: 96, column: 8, scope: !2348)
!2350 = !DILocation(line: 96, column: 7, scope: !2322)
!2351 = !DILocation(line: 98, column: 7, scope: !2352)
!2352 = distinct !DILexicalBlock(scope: !2348, file: !3, line: 97, column: 5)
!2353 = !DILocation(line: 99, column: 8, scope: !2352)
!2354 = !DILocation(line: 99, column: 21, scope: !2352)
!2355 = !DILocation(line: 100, column: 7, scope: !2352)
!2356 = !DILocation(line: 103, column: 14, scope: !2322)
!2357 = !DILocation(line: 103, column: 12, scope: !2322)
!2358 = !DILocation(line: 104, column: 7, scope: !2359)
!2359 = distinct !DILexicalBlock(scope: !2322, file: !3, line: 104, column: 7)
!2360 = !DILocation(line: 104, column: 7, scope: !2322)
!2361 = !DILocation(line: 106, column: 33, scope: !2362)
!2362 = distinct !DILexicalBlock(scope: !2363, file: !3, line: 106, column: 11)
!2363 = distinct !DILexicalBlock(scope: !2359, file: !3, line: 105, column: 5)
!2364 = !DILocation(line: 106, column: 43, scope: !2362)
!2365 = !DILocation(line: 106, column: 55, scope: !2362)
!2366 = !DILocation(line: 106, column: 62, scope: !2362)
!2367 = !DILocation(line: 106, column: 12, scope: !2362)
!2368 = !DILocation(line: 106, column: 11, scope: !2363)
!2369 = !DILocation(line: 107, column: 2, scope: !2362)
!2370 = !DILocation(line: 108, column: 5, scope: !2363)
!2371 = !DILocation(line: 110, column: 7, scope: !2372)
!2372 = distinct !DILexicalBlock(scope: !2322, file: !3, line: 110, column: 7)
!2373 = !DILocation(line: 110, column: 36, scope: !2372)
!2374 = !DILocation(line: 111, column: 7, scope: !2372)
!2375 = !DILocation(line: 111, column: 11, scope: !2372)
!2376 = !DILocation(line: 112, column: 7, scope: !2372)
!2377 = !DILocation(line: 112, column: 4, scope: !2372)
!2378 = !DILocation(line: 110, column: 7, scope: !2322)
!2379 = !DILocation(line: 114, column: 13, scope: !2380)
!2380 = distinct !DILexicalBlock(scope: !2381, file: !3, line: 114, column: 11)
!2381 = distinct !DILexicalBlock(scope: !2372, file: !3, line: 113, column: 5)
!2382 = !DILocation(line: 114, column: 19, scope: !2380)
!2383 = !DILocation(line: 114, column: 11, scope: !2381)
!2384 = !DILocation(line: 115, column: 2, scope: !2380)
!2385 = !DILocation(line: 116, column: 8, scope: !2381)
!2386 = !DILocation(line: 116, column: 21, scope: !2381)
!2387 = !DILocation(line: 117, column: 7, scope: !2381)
!2388 = !DILocation(line: 120, column: 3, scope: !2322)
!2389 = !DILocation(line: 121, column: 1, scope: !2322)
!2390 = distinct !DISubprogram(name: "get_constant", scope: !3, file: !3, line: 156, type: !2391, scopeLine: 157, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!2391 = !DISubroutineType(types: !2392)
!2392 = !{!1451, !1348, !2393, !1140}
!2393 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1402, size: 64)
!2394 = !DILocalVariable(name: "expr", arg: 1, scope: !2390, file: !3, line: 156, type: !1348)
!2395 = !DILocation(line: 156, column: 20, scope: !2390)
!2396 = !DILocalVariable(name: "value", arg: 2, scope: !2390, file: !3, line: 156, type: !2393)
!2397 = !DILocation(line: 156, column: 50, scope: !2390)
!2398 = !DILocalVariable(name: "validated_p", arg: 3, scope: !2390, file: !3, line: 156, type: !1140)
!2399 = !DILocation(line: 156, column: 61, scope: !2390)
!2400 = !DILocation(line: 158, column: 7, scope: !2401)
!2401 = distinct !DILexicalBlock(scope: !2390, file: !3, line: 158, column: 7)
!2402 = !DILocation(line: 158, column: 24, scope: !2401)
!2403 = !DILocation(line: 158, column: 39, scope: !2401)
!2404 = !DILocation(line: 158, column: 42, scope: !2401)
!2405 = !DILocation(line: 158, column: 67, scope: !2401)
!2406 = !DILocation(line: 158, column: 7, scope: !2390)
!2407 = !DILocation(line: 160, column: 7, scope: !2408)
!2408 = distinct !DILexicalBlock(scope: !2401, file: !3, line: 159, column: 5)
!2409 = !DILocation(line: 161, column: 7, scope: !2408)
!2410 = !DILocation(line: 164, column: 12, scope: !2390)
!2411 = !DILocation(line: 164, column: 4, scope: !2390)
!2412 = !DILocation(line: 164, column: 10, scope: !2390)
!2413 = !DILocation(line: 166, column: 3, scope: !2390)
!2414 = !DILocation(line: 167, column: 1, scope: !2390)
!2415 = distinct !DISubprogram(name: "check_format_string", scope: !3, file: !3, line: 126, type: !2416, scopeLine: 128, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!2416 = !DISubroutineType(types: !2417)
!2417 = !{!1451, !1348, !1402, !1140, !2325}
!2418 = !DILocalVariable(name: "argument", arg: 1, scope: !2415, file: !3, line: 126, type: !1348)
!2419 = !DILocation(line: 126, column: 27, scope: !2415)
!2420 = !DILocalVariable(name: "format_num", arg: 2, scope: !2415, file: !3, line: 126, type: !1402)
!2421 = !DILocation(line: 126, column: 60, scope: !2415)
!2422 = !DILocalVariable(name: "flags", arg: 3, scope: !2415, file: !3, line: 127, type: !1140)
!2423 = !DILocation(line: 127, column: 12, scope: !2415)
!2424 = !DILocalVariable(name: "no_add_attrs", arg: 4, scope: !2415, file: !3, line: 127, type: !2325)
!2425 = !DILocation(line: 127, column: 25, scope: !2415)
!2426 = !DILocalVariable(name: "i", scope: !2415, file: !3, line: 129, type: !1402)
!2427 = !DILocation(line: 129, column: 26, scope: !2415)
!2428 = !DILocation(line: 131, column: 10, scope: !2429)
!2429 = distinct !DILexicalBlock(scope: !2415, file: !3, line: 131, column: 3)
!2430 = !DILocation(line: 131, column: 8, scope: !2429)
!2431 = !DILocation(line: 131, column: 15, scope: !2432)
!2432 = distinct !DILexicalBlock(scope: !2429, file: !3, line: 131, column: 3)
!2433 = !DILocation(line: 131, column: 20, scope: !2432)
!2434 = !DILocation(line: 131, column: 17, scope: !2432)
!2435 = !DILocation(line: 131, column: 3, scope: !2429)
!2436 = !DILocation(line: 133, column: 11, scope: !2437)
!2437 = distinct !DILexicalBlock(scope: !2438, file: !3, line: 133, column: 11)
!2438 = distinct !DILexicalBlock(scope: !2432, file: !3, line: 132, column: 5)
!2439 = !DILocation(line: 133, column: 20, scope: !2437)
!2440 = !DILocation(line: 133, column: 11, scope: !2438)
!2441 = !DILocation(line: 134, column: 2, scope: !2437)
!2442 = !DILocation(line: 135, column: 18, scope: !2438)
!2443 = !DILocation(line: 135, column: 16, scope: !2438)
!2444 = !DILocation(line: 136, column: 5, scope: !2438)
!2445 = !DILocation(line: 131, column: 33, scope: !2432)
!2446 = !DILocation(line: 131, column: 3, scope: !2432)
!2447 = distinct !{!2447, !2435, !2448}
!2448 = !DILocation(line: 136, column: 5, scope: !2429)
!2449 = !DILocation(line: 138, column: 8, scope: !2450)
!2450 = distinct !DILexicalBlock(scope: !2415, file: !3, line: 138, column: 7)
!2451 = !DILocation(line: 139, column: 7, scope: !2450)
!2452 = !DILocation(line: 139, column: 10, scope: !2450)
!2453 = !DILocation(line: 139, column: 44, scope: !2450)
!2454 = !DILocation(line: 140, column: 7, scope: !2450)
!2455 = !DILocation(line: 140, column: 11, scope: !2450)
!2456 = !DILocation(line: 141, column: 7, scope: !2450)
!2457 = !DILocation(line: 141, column: 4, scope: !2450)
!2458 = !DILocation(line: 138, column: 7, scope: !2415)
!2459 = !DILocation(line: 143, column: 13, scope: !2460)
!2460 = distinct !DILexicalBlock(scope: !2461, file: !3, line: 143, column: 11)
!2461 = distinct !DILexicalBlock(scope: !2450, file: !3, line: 142, column: 5)
!2462 = !DILocation(line: 143, column: 19, scope: !2460)
!2463 = !DILocation(line: 143, column: 11, scope: !2461)
!2464 = !DILocation(line: 144, column: 2, scope: !2460)
!2465 = !DILocation(line: 145, column: 8, scope: !2461)
!2466 = !DILocation(line: 145, column: 21, scope: !2461)
!2467 = !DILocation(line: 146, column: 7, scope: !2461)
!2468 = !DILocation(line: 149, column: 3, scope: !2415)
!2469 = !DILocation(line: 150, column: 1, scope: !2415)
!2470 = distinct !DISubprogram(name: "check_function_format", scope: !3, file: !3, line: 870, type: !2471, scopeLine: 871, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!2471 = !DISubroutineType(types: !2472)
!2472 = !{null, !1348, !1140, !1707}
!2473 = !DILocalVariable(name: "attrs", arg: 1, scope: !2470, file: !3, line: 870, type: !1348)
!2474 = !DILocation(line: 870, column: 29, scope: !2470)
!2475 = !DILocalVariable(name: "nargs", arg: 2, scope: !2470, file: !3, line: 870, type: !1140)
!2476 = !DILocation(line: 870, column: 40, scope: !2470)
!2477 = !DILocalVariable(name: "argarray", arg: 3, scope: !2470, file: !3, line: 870, type: !1707)
!2478 = !DILocation(line: 870, column: 53, scope: !2470)
!2479 = !DILocalVariable(name: "a", scope: !2470, file: !3, line: 872, type: !1348)
!2480 = !DILocation(line: 872, column: 8, scope: !2470)
!2481 = !DILocation(line: 875, column: 12, scope: !2482)
!2482 = distinct !DILexicalBlock(scope: !2470, file: !3, line: 875, column: 3)
!2483 = !DILocation(line: 875, column: 10, scope: !2482)
!2484 = !DILocation(line: 875, column: 8, scope: !2482)
!2485 = !DILocation(line: 875, column: 19, scope: !2486)
!2486 = distinct !DILexicalBlock(scope: !2482, file: !3, line: 875, column: 3)
!2487 = !DILocation(line: 875, column: 3, scope: !2482)
!2488 = !DILocation(line: 877, column: 37, scope: !2489)
!2489 = distinct !DILexicalBlock(scope: !2490, file: !3, line: 877, column: 11)
!2490 = distinct !DILexicalBlock(scope: !2486, file: !3, line: 876, column: 5)
!2491 = !DILocation(line: 877, column: 11, scope: !2489)
!2492 = !DILocation(line: 877, column: 11, scope: !2490)
!2493 = !DILocalVariable(name: "info", scope: !2494, file: !3, line: 880, type: !2085)
!2494 = distinct !DILexicalBlock(scope: !2489, file: !3, line: 878, column: 2)
!2495 = !DILocation(line: 880, column: 25, scope: !2494)
!2496 = !DILocation(line: 881, column: 24, scope: !2494)
!2497 = !DILocation(line: 881, column: 4, scope: !2494)
!2498 = !DILocation(line: 882, column: 8, scope: !2499)
!2499 = distinct !DILexicalBlock(scope: !2494, file: !3, line: 882, column: 8)
!2500 = !DILocation(line: 882, column: 8, scope: !2494)
!2501 = !DILocalVariable(name: "params", scope: !2502, file: !3, line: 887, type: !1348)
!2502 = distinct !DILexicalBlock(scope: !2499, file: !3, line: 883, column: 6)
!2503 = !DILocation(line: 887, column: 13, scope: !2502)
!2504 = !DILocalVariable(name: "i", scope: !2502, file: !3, line: 888, type: !1140)
!2505 = !DILocation(line: 888, column: 12, scope: !2502)
!2506 = !DILocation(line: 889, column: 17, scope: !2507)
!2507 = distinct !DILexicalBlock(scope: !2502, file: !3, line: 889, column: 8)
!2508 = !DILocation(line: 889, column: 23, scope: !2507)
!2509 = !DILocation(line: 889, column: 15, scope: !2507)
!2510 = !DILocation(line: 889, column: 13, scope: !2507)
!2511 = !DILocation(line: 889, column: 28, scope: !2512)
!2512 = distinct !DILexicalBlock(scope: !2507, file: !3, line: 889, column: 8)
!2513 = !DILocation(line: 889, column: 30, scope: !2512)
!2514 = !DILocation(line: 889, column: 8, scope: !2507)
!2515 = !DILocation(line: 890, column: 12, scope: !2512)
!2516 = !DILocation(line: 890, column: 10, scope: !2512)
!2517 = !DILocation(line: 890, column: 3, scope: !2512)
!2518 = !DILocation(line: 889, column: 37, scope: !2512)
!2519 = !DILocation(line: 889, column: 8, scope: !2512)
!2520 = distinct !{!2520, !2514, !2521}
!2521 = !DILocation(line: 890, column: 12, scope: !2507)
!2522 = !DILocation(line: 891, column: 34, scope: !2502)
!2523 = !DILocation(line: 891, column: 8, scope: !2502)
!2524 = !DILocation(line: 892, column: 6, scope: !2502)
!2525 = !DILocation(line: 893, column: 8, scope: !2526)
!2526 = distinct !DILexicalBlock(scope: !2494, file: !3, line: 893, column: 8)
!2527 = !DILocation(line: 893, column: 38, scope: !2526)
!2528 = !DILocation(line: 893, column: 46, scope: !2526)
!2529 = !DILocation(line: 893, column: 60, scope: !2526)
!2530 = !DILocation(line: 894, column: 8, scope: !2526)
!2531 = !DILocation(line: 894, column: 12, scope: !2526)
!2532 = !DILocation(line: 894, column: 30, scope: !2526)
!2533 = !DILocation(line: 894, column: 43, scope: !2526)
!2534 = !DILocation(line: 895, column: 5, scope: !2526)
!2535 = !DILocation(line: 893, column: 8, scope: !2494)
!2536 = !DILocalVariable(name: "c", scope: !2537, file: !3, line: 897, type: !1348)
!2537 = distinct !DILexicalBlock(scope: !2526, file: !3, line: 896, column: 6)
!2538 = !DILocation(line: 897, column: 13, scope: !2537)
!2539 = !DILocation(line: 898, column: 17, scope: !2540)
!2540 = distinct !DILexicalBlock(scope: !2537, file: !3, line: 898, column: 8)
!2541 = !DILocation(line: 898, column: 15, scope: !2540)
!2542 = !DILocation(line: 898, column: 13, scope: !2540)
!2543 = !DILocation(line: 899, column: 6, scope: !2544)
!2544 = distinct !DILexicalBlock(scope: !2540, file: !3, line: 898, column: 8)
!2545 = !DILocation(line: 898, column: 8, scope: !2540)
!2546 = !DILocation(line: 901, column: 33, scope: !2547)
!2547 = distinct !DILexicalBlock(scope: !2544, file: !3, line: 901, column: 7)
!2548 = !DILocation(line: 901, column: 7, scope: !2547)
!2549 = !DILocation(line: 902, column: 7, scope: !2547)
!2550 = !DILocation(line: 902, column: 31, scope: !2547)
!2551 = !DILocation(line: 902, column: 11, scope: !2547)
!2552 = !DILocation(line: 904, column: 12, scope: !2547)
!2553 = !DILocation(line: 904, column: 4, scope: !2547)
!2554 = !DILocation(line: 901, column: 7, scope: !2544)
!2555 = !DILocation(line: 905, column: 5, scope: !2547)
!2556 = !DILocation(line: 904, column: 23, scope: !2547)
!2557 = !DILocation(line: 900, column: 10, scope: !2544)
!2558 = !DILocation(line: 900, column: 8, scope: !2544)
!2559 = !DILocation(line: 898, column: 8, scope: !2544)
!2560 = distinct !{!2560, !2545, !2561}
!2561 = !DILocation(line: 905, column: 5, scope: !2540)
!2562 = !DILocation(line: 906, column: 12, scope: !2563)
!2563 = distinct !DILexicalBlock(scope: !2537, file: !3, line: 906, column: 12)
!2564 = !DILocation(line: 906, column: 14, scope: !2563)
!2565 = !DILocation(line: 906, column: 12, scope: !2537)
!2566 = !DILocalVariable(name: "args", scope: !2567, file: !3, line: 912, type: !1348)
!2567 = distinct !DILexicalBlock(scope: !2563, file: !3, line: 907, column: 3)
!2568 = !DILocation(line: 912, column: 10, scope: !2567)
!2569 = !DILocation(line: 913, column: 17, scope: !2570)
!2570 = distinct !DILexicalBlock(scope: !2567, file: !3, line: 913, column: 5)
!2571 = !DILocation(line: 913, column: 15, scope: !2570)
!2572 = !DILocation(line: 913, column: 10, scope: !2570)
!2573 = !DILocation(line: 914, column: 10, scope: !2574)
!2574 = distinct !DILexicalBlock(scope: !2570, file: !3, line: 913, column: 5)
!2575 = !DILocation(line: 914, column: 15, scope: !2574)
!2576 = !DILocation(line: 913, column: 5, scope: !2570)
!2577 = !DILocation(line: 917, column: 13, scope: !2578)
!2578 = distinct !DILexicalBlock(scope: !2579, file: !3, line: 917, column: 13)
!2579 = distinct !DILexicalBlock(scope: !2574, file: !3, line: 916, column: 7)
!2580 = !DILocation(line: 917, column: 42, scope: !2578)
!2581 = !DILocation(line: 918, column: 6, scope: !2578)
!2582 = !DILocation(line: 918, column: 10, scope: !2578)
!2583 = !DILocation(line: 919, column: 13, scope: !2578)
!2584 = !DILocation(line: 919, column: 10, scope: !2578)
!2585 = !DILocation(line: 917, column: 13, scope: !2579)
!2586 = !DILocation(line: 920, column: 4, scope: !2578)
!2587 = !DILocation(line: 921, column: 7, scope: !2579)
!2588 = !DILocation(line: 915, column: 17, scope: !2574)
!2589 = !DILocation(line: 915, column: 15, scope: !2574)
!2590 = !DILocation(line: 913, column: 5, scope: !2574)
!2591 = distinct !{!2591, !2576, !2592}
!2592 = !DILocation(line: 921, column: 7, scope: !2570)
!2593 = !DILocation(line: 922, column: 9, scope: !2594)
!2594 = distinct !DILexicalBlock(scope: !2567, file: !3, line: 922, column: 9)
!2595 = !DILocation(line: 922, column: 14, scope: !2594)
!2596 = !DILocation(line: 922, column: 9, scope: !2567)
!2597 = !DILocation(line: 925, column: 9, scope: !2594)
!2598 = !DILocation(line: 925, column: 27, scope: !2594)
!2599 = !DILocation(line: 925, column: 40, scope: !2594)
!2600 = !DILocation(line: 923, column: 7, scope: !2594)
!2601 = !DILocation(line: 926, column: 3, scope: !2567)
!2602 = !DILocation(line: 927, column: 6, scope: !2537)
!2603 = !DILocation(line: 928, column: 2, scope: !2494)
!2604 = !DILocation(line: 929, column: 5, scope: !2490)
!2605 = !DILocation(line: 875, column: 26, scope: !2486)
!2606 = !DILocation(line: 875, column: 24, scope: !2486)
!2607 = !DILocation(line: 875, column: 3, scope: !2486)
!2608 = distinct !{!2608, !2487, !2609}
!2609 = !DILocation(line: 929, column: 5, scope: !2482)
!2610 = !DILocation(line: 930, column: 1, scope: !2470)
!2611 = distinct !DISubprogram(name: "decode_format_attr", scope: !3, file: !3, line: 177, type: !2612, scopeLine: 178, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!2612 = !DISubroutineType(types: !2613)
!2613 = !{!1451, !1348, !2084, !1140}
!2614 = !DILocalVariable(name: "args", arg: 1, scope: !2611, file: !3, line: 177, type: !1348)
!2615 = !DILocation(line: 177, column: 26, scope: !2611)
!2616 = !DILocalVariable(name: "info", arg: 2, scope: !2611, file: !3, line: 177, type: !2084)
!2617 = !DILocation(line: 177, column: 54, scope: !2611)
!2618 = !DILocalVariable(name: "validated_p", arg: 3, scope: !2611, file: !3, line: 177, type: !1140)
!2619 = !DILocation(line: 177, column: 64, scope: !2611)
!2620 = !DILocalVariable(name: "format_type_id", scope: !2611, file: !3, line: 179, type: !1348)
!2621 = !DILocation(line: 179, column: 8, scope: !2611)
!2622 = !DILocation(line: 179, column: 25, scope: !2611)
!2623 = !DILocalVariable(name: "format_num_expr", scope: !2611, file: !3, line: 180, type: !1348)
!2624 = !DILocation(line: 180, column: 8, scope: !2611)
!2625 = !DILocation(line: 180, column: 26, scope: !2611)
!2626 = !DILocalVariable(name: "first_arg_num_expr", scope: !2611, file: !3, line: 181, type: !1348)
!2627 = !DILocation(line: 181, column: 8, scope: !2611)
!2628 = !DILocation(line: 182, column: 7, scope: !2611)
!2629 = !DILocation(line: 184, column: 7, scope: !2630)
!2630 = distinct !DILexicalBlock(scope: !2611, file: !3, line: 184, column: 7)
!2631 = !DILocation(line: 184, column: 34, scope: !2630)
!2632 = !DILocation(line: 184, column: 7, scope: !2611)
!2633 = !DILocation(line: 186, column: 7, scope: !2634)
!2634 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 185, column: 5)
!2635 = !DILocation(line: 187, column: 7, scope: !2634)
!2636 = !DILocation(line: 188, column: 7, scope: !2634)
!2637 = !DILocalVariable(name: "p", scope: !2638, file: !3, line: 192, type: !1646)
!2638 = distinct !DILexicalBlock(scope: !2630, file: !3, line: 191, column: 5)
!2639 = !DILocation(line: 192, column: 19, scope: !2638)
!2640 = !DILocation(line: 192, column: 23, scope: !2638)
!2641 = !DILocation(line: 194, column: 47, scope: !2638)
!2642 = !DILocation(line: 194, column: 11, scope: !2638)
!2643 = !DILocation(line: 194, column: 9, scope: !2638)
!2644 = !DILocation(line: 196, column: 47, scope: !2638)
!2645 = !DILocation(line: 196, column: 27, scope: !2638)
!2646 = !DILocation(line: 196, column: 7, scope: !2638)
!2647 = !DILocation(line: 196, column: 13, scope: !2638)
!2648 = !DILocation(line: 196, column: 25, scope: !2638)
!2649 = !DILocation(line: 198, column: 11, scope: !2650)
!2650 = distinct !DILexicalBlock(scope: !2638, file: !3, line: 198, column: 11)
!2651 = !DILocation(line: 198, column: 17, scope: !2650)
!2652 = !DILocation(line: 198, column: 29, scope: !2650)
!2653 = !DILocation(line: 198, column: 11, scope: !2638)
!2654 = !DILocation(line: 200, column: 4, scope: !2655)
!2655 = distinct !DILexicalBlock(scope: !2650, file: !3, line: 199, column: 2)
!2656 = !DILocation(line: 202, column: 6, scope: !2655)
!2657 = !DILocation(line: 201, column: 4, scope: !2655)
!2658 = !DILocation(line: 203, column: 4, scope: !2655)
!2659 = !DILocation(line: 207, column: 22, scope: !2660)
!2660 = distinct !DILexicalBlock(scope: !2611, file: !3, line: 207, column: 7)
!2661 = !DILocation(line: 207, column: 40, scope: !2660)
!2662 = !DILocation(line: 207, column: 46, scope: !2660)
!2663 = !DILocation(line: 207, column: 58, scope: !2660)
!2664 = !DILocation(line: 207, column: 8, scope: !2660)
!2665 = !DILocation(line: 207, column: 7, scope: !2611)
!2666 = !DILocation(line: 209, column: 7, scope: !2667)
!2667 = distinct !DILexicalBlock(scope: !2660, file: !3, line: 208, column: 5)
!2668 = !DILocation(line: 210, column: 7, scope: !2667)
!2669 = !DILocation(line: 213, column: 22, scope: !2670)
!2670 = distinct !DILexicalBlock(scope: !2611, file: !3, line: 213, column: 7)
!2671 = !DILocation(line: 213, column: 43, scope: !2670)
!2672 = !DILocation(line: 213, column: 49, scope: !2670)
!2673 = !DILocation(line: 213, column: 64, scope: !2670)
!2674 = !DILocation(line: 213, column: 8, scope: !2670)
!2675 = !DILocation(line: 213, column: 7, scope: !2611)
!2676 = !DILocation(line: 215, column: 7, scope: !2677)
!2677 = distinct !DILexicalBlock(scope: !2670, file: !3, line: 214, column: 5)
!2678 = !DILocation(line: 216, column: 7, scope: !2677)
!2679 = !DILocation(line: 219, column: 7, scope: !2680)
!2680 = distinct !DILexicalBlock(scope: !2611, file: !3, line: 219, column: 7)
!2681 = !DILocation(line: 219, column: 13, scope: !2680)
!2682 = !DILocation(line: 219, column: 27, scope: !2680)
!2683 = !DILocation(line: 219, column: 32, scope: !2680)
!2684 = !DILocation(line: 219, column: 35, scope: !2680)
!2685 = !DILocation(line: 219, column: 41, scope: !2680)
!2686 = !DILocation(line: 219, column: 58, scope: !2680)
!2687 = !DILocation(line: 219, column: 64, scope: !2680)
!2688 = !DILocation(line: 219, column: 55, scope: !2680)
!2689 = !DILocation(line: 219, column: 7, scope: !2611)
!2690 = !DILocation(line: 221, column: 7, scope: !2691)
!2691 = distinct !DILexicalBlock(scope: !2680, file: !3, line: 220, column: 5)
!2692 = !DILocation(line: 222, column: 7, scope: !2691)
!2693 = !DILocation(line: 223, column: 7, scope: !2691)
!2694 = !DILocation(line: 226, column: 3, scope: !2611)
!2695 = !DILocation(line: 227, column: 1, scope: !2611)
!2696 = distinct !DISubprogram(name: "check_format_info", scope: !3, file: !3, line: 1187, type: !2697, scopeLine: 1188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!2697 = !DISubroutineType(types: !2698)
!2698 = !{null, !2084, !1348}
!2699 = !DILocalVariable(name: "info", arg: 1, scope: !2696, file: !3, line: 1187, type: !2084)
!2700 = !DILocation(line: 1187, column: 42, scope: !2696)
!2701 = !DILocalVariable(name: "params", arg: 2, scope: !2696, file: !3, line: 1187, type: !1348)
!2702 = !DILocation(line: 1187, column: 53, scope: !2696)
!2703 = !DILocalVariable(name: "format_ctx", scope: !2696, file: !3, line: 1189, type: !2068)
!2704 = !DILocation(line: 1189, column: 24, scope: !2696)
!2705 = !DILocalVariable(name: "arg_num", scope: !2696, file: !3, line: 1190, type: !1402)
!2706 = !DILocation(line: 1190, column: 26, scope: !2696)
!2707 = !DILocalVariable(name: "format_tree", scope: !2696, file: !3, line: 1191, type: !1348)
!2708 = !DILocation(line: 1191, column: 8, scope: !2696)
!2709 = !DILocalVariable(name: "res", scope: !2696, file: !3, line: 1192, type: !2073)
!2710 = !DILocation(line: 1192, column: 24, scope: !2696)
!2711 = !DILocation(line: 1195, column: 16, scope: !2712)
!2712 = distinct !DILexicalBlock(scope: !2696, file: !3, line: 1195, column: 3)
!2713 = !DILocation(line: 1195, column: 8, scope: !2712)
!2714 = !DILocation(line: 1197, column: 11, scope: !2715)
!2715 = distinct !DILexicalBlock(scope: !2716, file: !3, line: 1197, column: 11)
!2716 = distinct !DILexicalBlock(scope: !2717, file: !3, line: 1196, column: 5)
!2717 = distinct !DILexicalBlock(scope: !2712, file: !3, line: 1195, column: 3)
!2718 = !DILocation(line: 1197, column: 18, scope: !2715)
!2719 = !DILocation(line: 1197, column: 11, scope: !2716)
!2720 = !DILocation(line: 1198, column: 2, scope: !2715)
!2721 = !DILocation(line: 1199, column: 11, scope: !2722)
!2722 = distinct !DILexicalBlock(scope: !2716, file: !3, line: 1199, column: 11)
!2723 = !DILocation(line: 1199, column: 22, scope: !2722)
!2724 = !DILocation(line: 1199, column: 28, scope: !2722)
!2725 = !DILocation(line: 1199, column: 19, scope: !2722)
!2726 = !DILocation(line: 1199, column: 11, scope: !2716)
!2727 = !DILocation(line: 1200, column: 2, scope: !2722)
!2728 = !DILocation(line: 1201, column: 16, scope: !2716)
!2729 = !DILocation(line: 1201, column: 14, scope: !2716)
!2730 = !DILocation(line: 1202, column: 5, scope: !2716)
!2731 = !DILocation(line: 1195, column: 23, scope: !2717)
!2732 = !DILocation(line: 1195, column: 3, scope: !2717)
!2733 = distinct !{!2733, !2734, !2735}
!2734 = !DILocation(line: 1195, column: 3, scope: !2712)
!2735 = !DILocation(line: 1202, column: 5, scope: !2712)
!2736 = !DILocation(line: 1203, column: 17, scope: !2696)
!2737 = !DILocation(line: 1203, column: 15, scope: !2696)
!2738 = !DILocation(line: 1204, column: 12, scope: !2696)
!2739 = !DILocation(line: 1204, column: 10, scope: !2696)
!2740 = !DILocation(line: 1205, column: 7, scope: !2741)
!2741 = distinct !DILexicalBlock(scope: !2696, file: !3, line: 1205, column: 7)
!2742 = !DILocation(line: 1205, column: 19, scope: !2741)
!2743 = !DILocation(line: 1205, column: 7, scope: !2696)
!2744 = !DILocation(line: 1206, column: 5, scope: !2741)
!2745 = !DILocation(line: 1208, column: 7, scope: !2696)
!2746 = !DILocation(line: 1208, column: 26, scope: !2696)
!2747 = !DILocation(line: 1209, column: 7, scope: !2696)
!2748 = !DILocation(line: 1209, column: 25, scope: !2696)
!2749 = !DILocation(line: 1210, column: 7, scope: !2696)
!2750 = !DILocation(line: 1210, column: 32, scope: !2696)
!2751 = !DILocation(line: 1211, column: 7, scope: !2696)
!2752 = !DILocation(line: 1211, column: 19, scope: !2696)
!2753 = !DILocation(line: 1212, column: 7, scope: !2696)
!2754 = !DILocation(line: 1212, column: 20, scope: !2696)
!2755 = !DILocation(line: 1213, column: 7, scope: !2696)
!2756 = !DILocation(line: 1213, column: 27, scope: !2696)
!2757 = !DILocation(line: 1214, column: 7, scope: !2696)
!2758 = !DILocation(line: 1214, column: 20, scope: !2696)
!2759 = !DILocation(line: 1216, column: 14, scope: !2696)
!2760 = !DILocation(line: 1216, column: 18, scope: !2696)
!2761 = !DILocation(line: 1217, column: 21, scope: !2696)
!2762 = !DILocation(line: 1217, column: 14, scope: !2696)
!2763 = !DILocation(line: 1217, column: 19, scope: !2696)
!2764 = !DILocation(line: 1218, column: 23, scope: !2696)
!2765 = !DILocation(line: 1218, column: 14, scope: !2696)
!2766 = !DILocation(line: 1218, column: 21, scope: !2696)
!2767 = !DILocation(line: 1220, column: 55, scope: !2696)
!2768 = !DILocation(line: 1221, column: 9, scope: !2696)
!2769 = !DILocation(line: 1221, column: 22, scope: !2696)
!2770 = !DILocation(line: 1220, column: 3, scope: !2696)
!2771 = !DILocation(line: 1223, column: 11, scope: !2772)
!2772 = distinct !DILexicalBlock(scope: !2696, file: !3, line: 1223, column: 7)
!2773 = !DILocation(line: 1223, column: 30, scope: !2772)
!2774 = !DILocation(line: 1223, column: 7, scope: !2696)
!2775 = !DILocation(line: 1228, column: 13, scope: !2776)
!2776 = distinct !DILexicalBlock(scope: !2777, file: !3, line: 1228, column: 11)
!2777 = distinct !DILexicalBlock(scope: !2772, file: !3, line: 1224, column: 5)
!2778 = !DILocation(line: 1228, column: 26, scope: !2776)
!2779 = !DILocation(line: 1228, column: 32, scope: !2776)
!2780 = !DILocation(line: 1228, column: 45, scope: !2776)
!2781 = !DILocation(line: 1228, column: 51, scope: !2776)
!2782 = !DILocation(line: 1228, column: 11, scope: !2777)
!2783 = !DILocation(line: 1232, column: 4, scope: !2784)
!2784 = distinct !DILexicalBlock(scope: !2776, file: !3, line: 1229, column: 2)
!2785 = !DILocation(line: 1234, column: 2, scope: !2784)
!2786 = !DILocation(line: 1235, column: 16, scope: !2787)
!2787 = distinct !DILexicalBlock(scope: !2776, file: !3, line: 1235, column: 16)
!2788 = !DILocation(line: 1235, column: 22, scope: !2787)
!2789 = !DILocation(line: 1235, column: 36, scope: !2787)
!2790 = !DILocation(line: 1235, column: 16, scope: !2776)
!2791 = !DILocation(line: 1239, column: 4, scope: !2792)
!2792 = distinct !DILexicalBlock(scope: !2787, file: !3, line: 1236, column: 2)
!2793 = !DILocation(line: 1239, column: 11, scope: !2792)
!2794 = !DILocation(line: 1239, column: 19, scope: !2792)
!2795 = !DILocation(line: 1239, column: 25, scope: !2792)
!2796 = !DILocation(line: 1239, column: 31, scope: !2792)
!2797 = !DILocation(line: 1239, column: 23, scope: !2792)
!2798 = !DILocation(line: 1241, column: 12, scope: !2799)
!2799 = distinct !DILexicalBlock(scope: !2800, file: !3, line: 1241, column: 12)
!2800 = distinct !DILexicalBlock(scope: !2792, file: !3, line: 1240, column: 6)
!2801 = !DILocation(line: 1241, column: 19, scope: !2799)
!2802 = !DILocation(line: 1241, column: 12, scope: !2800)
!2803 = !DILocation(line: 1242, column: 3, scope: !2799)
!2804 = !DILocation(line: 1243, column: 17, scope: !2800)
!2805 = !DILocation(line: 1243, column: 15, scope: !2800)
!2806 = !DILocation(line: 1244, column: 8, scope: !2800)
!2807 = distinct !{!2807, !2791, !2808}
!2808 = !DILocation(line: 1245, column: 6, scope: !2792)
!2809 = !DILocation(line: 1246, column: 8, scope: !2810)
!2810 = distinct !DILexicalBlock(scope: !2792, file: !3, line: 1246, column: 8)
!2811 = !DILocation(line: 1246, column: 15, scope: !2810)
!2812 = !DILocation(line: 1246, column: 20, scope: !2810)
!2813 = !DILocation(line: 1246, column: 23, scope: !2810)
!2814 = !DILocation(line: 1246, column: 8, scope: !2792)
!2815 = !DILocation(line: 1247, column: 6, scope: !2810)
!2816 = !DILocation(line: 1249, column: 13, scope: !2817)
!2817 = distinct !DILexicalBlock(scope: !2810, file: !3, line: 1249, column: 13)
!2818 = !DILocation(line: 1249, column: 20, scope: !2817)
!2819 = !DILocation(line: 1249, column: 25, scope: !2817)
!2820 = !DILocation(line: 1249, column: 28, scope: !2817)
!2821 = !DILocation(line: 1249, column: 13, scope: !2810)
!2822 = !DILocation(line: 1250, column: 6, scope: !2817)
!2823 = !DILocation(line: 1253, column: 6, scope: !2817)
!2824 = !DILocation(line: 1255, column: 2, scope: !2792)
!2825 = !DILocation(line: 1256, column: 5, scope: !2777)
!2826 = !DILocation(line: 1265, column: 11, scope: !2827)
!2827 = distinct !DILexicalBlock(scope: !2696, file: !3, line: 1265, column: 7)
!2828 = !DILocation(line: 1265, column: 29, scope: !2827)
!2829 = !DILocation(line: 1265, column: 33, scope: !2827)
!2830 = !DILocation(line: 1265, column: 40, scope: !2827)
!2831 = !DILocation(line: 1265, column: 59, scope: !2827)
!2832 = !DILocation(line: 1266, column: 7, scope: !2827)
!2833 = !DILocation(line: 1266, column: 14, scope: !2827)
!2834 = !DILocation(line: 1266, column: 27, scope: !2827)
!2835 = !DILocation(line: 1265, column: 7, scope: !2696)
!2836 = !DILocation(line: 1267, column: 5, scope: !2827)
!2837 = !DILocation(line: 1268, column: 11, scope: !2838)
!2838 = distinct !DILexicalBlock(scope: !2696, file: !3, line: 1268, column: 7)
!2839 = !DILocation(line: 1268, column: 36, scope: !2838)
!2840 = !DILocation(line: 1268, column: 40, scope: !2838)
!2841 = !DILocation(line: 1268, column: 47, scope: !2838)
!2842 = !DILocation(line: 1268, column: 66, scope: !2838)
!2843 = !DILocation(line: 1269, column: 7, scope: !2838)
!2844 = !DILocation(line: 1269, column: 14, scope: !2838)
!2845 = !DILocation(line: 1269, column: 27, scope: !2838)
!2846 = !DILocation(line: 1268, column: 7, scope: !2696)
!2847 = !DILocation(line: 1270, column: 5, scope: !2838)
!2848 = !DILocation(line: 1271, column: 11, scope: !2849)
!2849 = distinct !DILexicalBlock(scope: !2696, file: !3, line: 1271, column: 7)
!2850 = !DILocation(line: 1271, column: 24, scope: !2849)
!2851 = !DILocation(line: 1271, column: 28, scope: !2849)
!2852 = !DILocation(line: 1271, column: 35, scope: !2849)
!2853 = !DILocation(line: 1271, column: 54, scope: !2849)
!2854 = !DILocation(line: 1272, column: 7, scope: !2849)
!2855 = !DILocation(line: 1272, column: 14, scope: !2849)
!2856 = !DILocation(line: 1272, column: 27, scope: !2849)
!2857 = !DILocation(line: 1271, column: 7, scope: !2696)
!2858 = !DILocation(line: 1274, column: 7, scope: !2849)
!2859 = !DILocation(line: 1274, column: 20, scope: !2849)
!2860 = !DILocation(line: 1274, column: 26, scope: !2849)
!2861 = !DILocation(line: 1274, column: 39, scope: !2849)
!2862 = !DILocation(line: 1273, column: 5, scope: !2849)
!2863 = !DILocation(line: 1276, column: 11, scope: !2864)
!2864 = distinct !DILexicalBlock(scope: !2696, file: !3, line: 1276, column: 7)
!2865 = !DILocation(line: 1276, column: 23, scope: !2864)
!2866 = !DILocation(line: 1276, column: 7, scope: !2696)
!2867 = !DILocation(line: 1277, column: 5, scope: !2864)
!2868 = !DILocation(line: 1279, column: 11, scope: !2869)
!2869 = distinct !DILexicalBlock(scope: !2696, file: !3, line: 1279, column: 7)
!2870 = !DILocation(line: 1279, column: 31, scope: !2869)
!2871 = !DILocation(line: 1279, column: 7, scope: !2696)
!2872 = !DILocation(line: 1280, column: 5, scope: !2869)
!2873 = !DILocation(line: 1281, column: 1, scope: !2696)
!2874 = distinct !DISubprogram(name: "decode_format_type", scope: !3, file: !3, line: 840, type: !2875, scopeLine: 841, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!2875 = !DISubroutineType(types: !2876)
!2876 = !{!1140, !1646}
!2877 = !DILocalVariable(name: "s", arg: 1, scope: !2874, file: !3, line: 840, type: !1646)
!2878 = !DILocation(line: 840, column: 33, scope: !2874)
!2879 = !DILocalVariable(name: "i", scope: !2874, file: !3, line: 842, type: !1140)
!2880 = !DILocation(line: 842, column: 7, scope: !2874)
!2881 = !DILocalVariable(name: "slen", scope: !2874, file: !3, line: 843, type: !1140)
!2882 = !DILocation(line: 843, column: 7, scope: !2874)
!2883 = !DILocation(line: 845, column: 43, scope: !2874)
!2884 = !DILocation(line: 845, column: 7, scope: !2874)
!2885 = !DILocation(line: 845, column: 5, scope: !2874)
!2886 = !DILocation(line: 846, column: 18, scope: !2874)
!2887 = !DILocation(line: 846, column: 10, scope: !2874)
!2888 = !DILocation(line: 846, column: 8, scope: !2874)
!2889 = !DILocation(line: 847, column: 10, scope: !2890)
!2890 = distinct !DILexicalBlock(scope: !2874, file: !3, line: 847, column: 3)
!2891 = !DILocation(line: 847, column: 8, scope: !2890)
!2892 = !DILocation(line: 847, column: 15, scope: !2893)
!2893 = distinct !DILexicalBlock(scope: !2890, file: !3, line: 847, column: 3)
!2894 = !DILocation(line: 847, column: 19, scope: !2893)
!2895 = !DILocation(line: 847, column: 17, scope: !2893)
!2896 = !DILocation(line: 847, column: 3, scope: !2890)
!2897 = !DILocalVariable(name: "alen", scope: !2898, file: !3, line: 849, type: !1140)
!2898 = distinct !DILexicalBlock(scope: !2893, file: !3, line: 848, column: 5)
!2899 = !DILocation(line: 849, column: 11, scope: !2898)
!2900 = !DILocation(line: 850, column: 20, scope: !2901)
!2901 = distinct !DILexicalBlock(scope: !2898, file: !3, line: 850, column: 11)
!2902 = !DILocation(line: 850, column: 23, scope: !2901)
!2903 = !DILocation(line: 850, column: 36, scope: !2901)
!2904 = !DILocation(line: 850, column: 39, scope: !2901)
!2905 = !DILocation(line: 850, column: 12, scope: !2901)
!2906 = !DILocation(line: 850, column: 11, scope: !2898)
!2907 = !DILocation(line: 851, column: 9, scope: !2901)
!2908 = !DILocation(line: 851, column: 2, scope: !2901)
!2909 = !DILocation(line: 852, column: 22, scope: !2898)
!2910 = !DILocation(line: 852, column: 35, scope: !2898)
!2911 = !DILocation(line: 852, column: 38, scope: !2898)
!2912 = !DILocation(line: 852, column: 14, scope: !2898)
!2913 = !DILocation(line: 852, column: 12, scope: !2898)
!2914 = !DILocation(line: 853, column: 11, scope: !2915)
!2915 = distinct !DILexicalBlock(scope: !2898, file: !3, line: 853, column: 11)
!2916 = !DILocation(line: 853, column: 19, scope: !2915)
!2917 = !DILocation(line: 853, column: 24, scope: !2915)
!2918 = !DILocation(line: 853, column: 16, scope: !2915)
!2919 = !DILocation(line: 853, column: 28, scope: !2915)
!2920 = !DILocation(line: 853, column: 31, scope: !2915)
!2921 = !DILocation(line: 853, column: 36, scope: !2915)
!2922 = !DILocation(line: 853, column: 43, scope: !2915)
!2923 = !DILocation(line: 853, column: 46, scope: !2915)
!2924 = !DILocation(line: 853, column: 51, scope: !2915)
!2925 = !DILocation(line: 854, column: 4, scope: !2915)
!2926 = !DILocation(line: 854, column: 7, scope: !2915)
!2927 = !DILocation(line: 854, column: 9, scope: !2915)
!2928 = !DILocation(line: 854, column: 14, scope: !2915)
!2929 = !DILocation(line: 854, column: 19, scope: !2915)
!2930 = !DILocation(line: 854, column: 26, scope: !2915)
!2931 = !DILocation(line: 854, column: 29, scope: !2915)
!2932 = !DILocation(line: 854, column: 31, scope: !2915)
!2933 = !DILocation(line: 854, column: 36, scope: !2915)
!2934 = !DILocation(line: 854, column: 41, scope: !2915)
!2935 = !DILocation(line: 855, column: 4, scope: !2915)
!2936 = !DILocation(line: 855, column: 17, scope: !2915)
!2937 = !DILocation(line: 855, column: 19, scope: !2915)
!2938 = !DILocation(line: 855, column: 24, scope: !2915)
!2939 = !DILocation(line: 855, column: 37, scope: !2915)
!2940 = !DILocation(line: 855, column: 40, scope: !2915)
!2941 = !DILocation(line: 855, column: 46, scope: !2915)
!2942 = !DILocation(line: 855, column: 8, scope: !2915)
!2943 = !DILocation(line: 853, column: 11, scope: !2898)
!2944 = !DILocation(line: 856, column: 9, scope: !2915)
!2945 = !DILocation(line: 856, column: 2, scope: !2915)
!2946 = !DILocation(line: 857, column: 5, scope: !2898)
!2947 = !DILocation(line: 847, column: 36, scope: !2893)
!2948 = !DILocation(line: 847, column: 3, scope: !2893)
!2949 = distinct !{!2949, !2896, !2950}
!2950 = !DILocation(line: 857, column: 5, scope: !2890)
!2951 = !DILocation(line: 858, column: 3, scope: !2874)
!2952 = !DILocation(line: 859, column: 1, scope: !2874)
!2953 = distinct !DISubprogram(name: "handle_format_attribute", scope: !3, file: !3, line: 2775, type: !2323, scopeLine: 2777, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!2954 = !DILocalVariable(name: "node", arg: 1, scope: !2953, file: !3, line: 2775, type: !1707)
!2955 = !DILocation(line: 2775, column: 32, scope: !2953)
!2956 = !DILocalVariable(name: "name", arg: 2, scope: !2953, file: !3, line: 2775, type: !1348)
!2957 = !DILocation(line: 2775, column: 43, scope: !2953)
!2958 = !DILocalVariable(name: "args", arg: 3, scope: !2953, file: !3, line: 2775, type: !1348)
!2959 = !DILocation(line: 2775, column: 67, scope: !2953)
!2960 = !DILocalVariable(name: "flags", arg: 4, scope: !2953, file: !3, line: 2776, type: !1140)
!2961 = !DILocation(line: 2776, column: 9, scope: !2953)
!2962 = !DILocalVariable(name: "no_add_attrs", arg: 5, scope: !2953, file: !3, line: 2776, type: !2325)
!2963 = !DILocation(line: 2776, column: 22, scope: !2953)
!2964 = !DILocalVariable(name: "type", scope: !2953, file: !3, line: 2778, type: !1348)
!2965 = !DILocation(line: 2778, column: 8, scope: !2953)
!2966 = !DILocation(line: 2778, column: 16, scope: !2953)
!2967 = !DILocation(line: 2778, column: 15, scope: !2953)
!2968 = !DILocalVariable(name: "info", scope: !2953, file: !3, line: 2779, type: !2085)
!2969 = !DILocation(line: 2779, column: 24, scope: !2953)
!2970 = !DILocalVariable(name: "argument", scope: !2953, file: !3, line: 2780, type: !1348)
!2971 = !DILocation(line: 2780, column: 8, scope: !2953)
!2972 = !DILocation(line: 2799, column: 28, scope: !2973)
!2973 = distinct !DILexicalBlock(scope: !2953, file: !3, line: 2799, column: 7)
!2974 = !DILocation(line: 2799, column: 8, scope: !2973)
!2975 = !DILocation(line: 2799, column: 7, scope: !2953)
!2976 = !DILocation(line: 2801, column: 8, scope: !2977)
!2977 = distinct !DILexicalBlock(scope: !2973, file: !3, line: 2800, column: 5)
!2978 = !DILocation(line: 2801, column: 21, scope: !2977)
!2979 = !DILocation(line: 2802, column: 7, scope: !2977)
!2980 = !DILocation(line: 2805, column: 14, scope: !2953)
!2981 = !DILocation(line: 2805, column: 12, scope: !2953)
!2982 = !DILocation(line: 2806, column: 7, scope: !2983)
!2983 = distinct !DILexicalBlock(scope: !2953, file: !3, line: 2806, column: 7)
!2984 = !DILocation(line: 2806, column: 7, scope: !2953)
!2985 = !DILocation(line: 2808, column: 33, scope: !2986)
!2986 = distinct !DILexicalBlock(scope: !2987, file: !3, line: 2808, column: 11)
!2987 = distinct !DILexicalBlock(scope: !2983, file: !3, line: 2807, column: 5)
!2988 = !DILocation(line: 2808, column: 48, scope: !2986)
!2989 = !DILocation(line: 2808, column: 60, scope: !2986)
!2990 = !DILocation(line: 2809, column: 5, scope: !2986)
!2991 = !DILocation(line: 2808, column: 12, scope: !2986)
!2992 = !DILocation(line: 2808, column: 11, scope: !2987)
!2993 = !DILocation(line: 2810, column: 2, scope: !2986)
!2994 = !DILocation(line: 2812, column: 16, scope: !2995)
!2995 = distinct !DILexicalBlock(scope: !2987, file: !3, line: 2812, column: 11)
!2996 = !DILocation(line: 2812, column: 30, scope: !2995)
!2997 = !DILocation(line: 2812, column: 11, scope: !2987)
!2998 = !DILocalVariable(name: "arg_num", scope: !2999, file: !3, line: 2814, type: !1402)
!2999 = distinct !DILexicalBlock(scope: !2995, file: !3, line: 2813, column: 2)
!3000 = !DILocation(line: 2814, column: 27, scope: !2999)
!3001 = !DILocation(line: 2818, column: 4, scope: !2999)
!3002 = !DILocation(line: 2818, column: 11, scope: !2999)
!3003 = !DILocation(line: 2819, column: 13, scope: !2999)
!3004 = !DILocation(line: 2819, column: 28, scope: !2999)
!3005 = !DILocation(line: 2819, column: 26, scope: !2999)
!3006 = distinct !{!3006, !3001, !3004}
!3007 = !DILocation(line: 2821, column: 8, scope: !3008)
!3008 = distinct !DILexicalBlock(scope: !2999, file: !3, line: 2821, column: 8)
!3009 = !DILocation(line: 2821, column: 24, scope: !3008)
!3010 = !DILocation(line: 2821, column: 16, scope: !3008)
!3011 = !DILocation(line: 2821, column: 8, scope: !2999)
!3012 = !DILocation(line: 2823, column: 14, scope: !3013)
!3013 = distinct !DILexicalBlock(scope: !3014, file: !3, line: 2823, column: 12)
!3014 = distinct !DILexicalBlock(scope: !3008, file: !3, line: 2822, column: 6)
!3015 = !DILocation(line: 2823, column: 20, scope: !3013)
!3016 = !DILocation(line: 2823, column: 12, scope: !3014)
!3017 = !DILocation(line: 2824, column: 3, scope: !3013)
!3018 = !DILocation(line: 2825, column: 9, scope: !3014)
!3019 = !DILocation(line: 2825, column: 22, scope: !3014)
!3020 = !DILocation(line: 2826, column: 8, scope: !3014)
!3021 = !DILocation(line: 2828, column: 2, scope: !2999)
!3022 = !DILocation(line: 2829, column: 5, scope: !2987)
!3023 = !DILocation(line: 2833, column: 8, scope: !3024)
!3024 = distinct !DILexicalBlock(scope: !2953, file: !3, line: 2833, column: 7)
!3025 = !DILocation(line: 2833, column: 26, scope: !3024)
!3026 = !DILocation(line: 2833, column: 39, scope: !3024)
!3027 = !DILocation(line: 2833, column: 45, scope: !3024)
!3028 = !DILocation(line: 2833, column: 75, scope: !3024)
!3029 = !DILocation(line: 2834, column: 7, scope: !3024)
!3030 = !DILocation(line: 2834, column: 15, scope: !3024)
!3031 = !DILocation(line: 2834, column: 29, scope: !3024)
!3032 = !DILocation(line: 2833, column: 7, scope: !2953)
!3033 = !DILocation(line: 2836, column: 7, scope: !3034)
!3034 = distinct !DILexicalBlock(scope: !3024, file: !3, line: 2835, column: 5)
!3035 = !DILocation(line: 2837, column: 8, scope: !3034)
!3036 = !DILocation(line: 2837, column: 21, scope: !3034)
!3037 = !DILocation(line: 2838, column: 7, scope: !3034)
!3038 = !DILocation(line: 2843, column: 12, scope: !3039)
!3039 = distinct !DILexicalBlock(scope: !2953, file: !3, line: 2843, column: 7)
!3040 = !DILocation(line: 2843, column: 24, scope: !3039)
!3041 = !DILocation(line: 2844, column: 7, scope: !3039)
!3042 = !DILocation(line: 2844, column: 15, scope: !3039)
!3043 = !DILocation(line: 2844, column: 27, scope: !3039)
!3044 = !DILocation(line: 2845, column: 7, scope: !3039)
!3045 = !DILocation(line: 2845, column: 15, scope: !3039)
!3046 = !DILocation(line: 2845, column: 27, scope: !3039)
!3047 = !DILocation(line: 2846, column: 7, scope: !3039)
!3048 = !DILocation(line: 2846, column: 15, scope: !3039)
!3049 = !DILocation(line: 2846, column: 27, scope: !3039)
!3050 = !DILocation(line: 2847, column: 7, scope: !3039)
!3051 = !DILocation(line: 2847, column: 15, scope: !3039)
!3052 = !DILocation(line: 2847, column: 27, scope: !3039)
!3053 = !DILocation(line: 2848, column: 7, scope: !3039)
!3054 = !DILocation(line: 2848, column: 15, scope: !3039)
!3055 = !DILocation(line: 2848, column: 27, scope: !3039)
!3056 = !DILocation(line: 2843, column: 7, scope: !2953)
!3057 = !DILocation(line: 2852, column: 12, scope: !3058)
!3058 = distinct !DILexicalBlock(scope: !3059, file: !3, line: 2852, column: 11)
!3059 = distinct !DILexicalBlock(scope: !3039, file: !3, line: 2849, column: 5)
!3060 = !DILocation(line: 2852, column: 11, scope: !3059)
!3061 = !DILocation(line: 2854, column: 4, scope: !3058)
!3062 = !DILocation(line: 2853, column: 40, scope: !3058)
!3063 = !DILocation(line: 2853, column: 38, scope: !3058)
!3064 = !DILocation(line: 2853, column: 15, scope: !3058)
!3065 = !DILocation(line: 2853, column: 2, scope: !3058)
!3066 = !DILocation(line: 2859, column: 16, scope: !3067)
!3067 = distinct !DILexicalBlock(scope: !3059, file: !3, line: 2859, column: 11)
!3068 = !DILocation(line: 2859, column: 28, scope: !3067)
!3069 = !DILocation(line: 2859, column: 11, scope: !3059)
!3070 = !DILocation(line: 2860, column: 2, scope: !3067)
!3071 = !DILocation(line: 2863, column: 21, scope: !3072)
!3072 = distinct !DILexicalBlock(scope: !3067, file: !3, line: 2863, column: 16)
!3073 = !DILocation(line: 2863, column: 33, scope: !3072)
!3074 = !DILocation(line: 2863, column: 16, scope: !3067)
!3075 = !DILocation(line: 2864, column: 2, scope: !3072)
!3076 = !DILocation(line: 2867, column: 21, scope: !3077)
!3077 = distinct !DILexicalBlock(scope: !3072, file: !3, line: 2867, column: 16)
!3078 = !DILocation(line: 2867, column: 33, scope: !3077)
!3079 = !DILocation(line: 2868, column: 9, scope: !3077)
!3080 = !DILocation(line: 2868, column: 17, scope: !3077)
!3081 = !DILocation(line: 2868, column: 29, scope: !3077)
!3082 = !DILocation(line: 2869, column: 9, scope: !3077)
!3083 = !DILocation(line: 2869, column: 17, scope: !3077)
!3084 = !DILocation(line: 2869, column: 29, scope: !3077)
!3085 = !DILocation(line: 2870, column: 9, scope: !3077)
!3086 = !DILocation(line: 2870, column: 17, scope: !3077)
!3087 = !DILocation(line: 2870, column: 29, scope: !3077)
!3088 = !DILocation(line: 2867, column: 16, scope: !3072)
!3089 = !DILocation(line: 2871, column: 2, scope: !3077)
!3090 = !DILocation(line: 2873, column: 2, scope: !3077)
!3091 = !DILocation(line: 2874, column: 5, scope: !3059)
!3092 = !DILocation(line: 2876, column: 3, scope: !2953)
!3093 = !DILocation(line: 2877, column: 1, scope: !2953)
!3094 = !DILocation(line: 2403, column: 8, scope: !3095)
!3095 = distinct !DILexicalBlock(scope: !2259, file: !3, line: 2403, column: 7)
!3096 = !DILocation(line: 2403, column: 7, scope: !2259)
!3097 = !DILocalVariable(name: "new_asm_fprintf_length_specs", scope: !3098, file: !3, line: 2405, type: !2112)
!3098 = distinct !DILexicalBlock(scope: !3095, file: !3, line: 2404, column: 5)
!3099 = !DILocation(line: 2405, column: 27, scope: !3098)
!3100 = !DILocalVariable(name: "i", scope: !3098, file: !3, line: 2406, type: !7)
!3101 = !DILocation(line: 2406, column: 20, scope: !3098)
!3102 = !DILocation(line: 2412, column: 13, scope: !3098)
!3103 = !DILocation(line: 2412, column: 11, scope: !3098)
!3104 = !DILocation(line: 2413, column: 12, scope: !3105)
!3105 = distinct !DILexicalBlock(scope: !3098, file: !3, line: 2413, column: 11)
!3106 = !DILocation(line: 2413, column: 11, scope: !3098)
!3107 = !DILocation(line: 2415, column: 4, scope: !3108)
!3108 = distinct !DILexicalBlock(scope: !3105, file: !3, line: 2414, column: 2)
!3109 = !DILocation(line: 2416, column: 4, scope: !3108)
!3110 = !DILocation(line: 2418, column: 38, scope: !3098)
!3111 = !DILocation(line: 2418, column: 13, scope: !3098)
!3112 = !DILocation(line: 2418, column: 11, scope: !3098)
!3113 = !DILocation(line: 2419, column: 12, scope: !3114)
!3114 = distinct !DILexicalBlock(scope: !3098, file: !3, line: 2419, column: 11)
!3115 = !DILocation(line: 2419, column: 16, scope: !3114)
!3116 = !DILocation(line: 2419, column: 19, scope: !3114)
!3117 = !DILocation(line: 2419, column: 35, scope: !3114)
!3118 = !DILocation(line: 2419, column: 11, scope: !3098)
!3119 = !DILocation(line: 2421, column: 4, scope: !3120)
!3120 = distinct !DILexicalBlock(scope: !3114, file: !3, line: 2420, column: 2)
!3121 = !DILocation(line: 2422, column: 4, scope: !3120)
!3122 = !DILocation(line: 2424, column: 13, scope: !3098)
!3123 = !DILocation(line: 2424, column: 11, scope: !3098)
!3124 = !DILocation(line: 2425, column: 7, scope: !3098)
!3125 = !DILocation(line: 2426, column: 11, scope: !3126)
!3126 = distinct !DILexicalBlock(scope: !3098, file: !3, line: 2426, column: 11)
!3127 = !DILocation(line: 2426, column: 18, scope: !3126)
!3128 = !DILocation(line: 2426, column: 15, scope: !3126)
!3129 = !DILocation(line: 2426, column: 41, scope: !3126)
!3130 = !DILocation(line: 2426, column: 44, scope: !3126)
!3131 = !DILocation(line: 2426, column: 51, scope: !3126)
!3132 = !DILocation(line: 2426, column: 48, scope: !3126)
!3133 = !DILocation(line: 2426, column: 11, scope: !3098)
!3134 = !DILocation(line: 2428, column: 4, scope: !3135)
!3135 = distinct !DILexicalBlock(scope: !3126, file: !3, line: 2427, column: 2)
!3136 = !DILocation(line: 2430, column: 4, scope: !3135)
!3137 = !DILocation(line: 2435, column: 10, scope: !3098)
!3138 = !DILocation(line: 2434, column: 38, scope: !3098)
!3139 = !DILocation(line: 2434, column: 36, scope: !3098)
!3140 = !DILocation(line: 2440, column: 44, scope: !3098)
!3141 = !DILocation(line: 2440, column: 11, scope: !3098)
!3142 = !DILocation(line: 2440, column: 9, scope: !3098)
!3143 = !DILocation(line: 2441, column: 11, scope: !3144)
!3144 = distinct !DILexicalBlock(scope: !3098, file: !3, line: 2441, column: 11)
!3145 = !DILocation(line: 2441, column: 18, scope: !3144)
!3146 = !DILocation(line: 2441, column: 15, scope: !3144)
!3147 = !DILocation(line: 2441, column: 11, scope: !3098)
!3148 = !DILocation(line: 2442, column: 2, scope: !3144)
!3149 = !DILocation(line: 2442, column: 31, scope: !3144)
!3150 = !DILocation(line: 2442, column: 34, scope: !3144)
!3151 = !DILocation(line: 2442, column: 40, scope: !3144)
!3152 = !DILocation(line: 2443, column: 16, scope: !3153)
!3153 = distinct !DILexicalBlock(scope: !3144, file: !3, line: 2443, column: 16)
!3154 = !DILocation(line: 2443, column: 23, scope: !3153)
!3155 = !DILocation(line: 2443, column: 20, scope: !3153)
!3156 = !DILocation(line: 2443, column: 16, scope: !3144)
!3157 = !DILocation(line: 2444, column: 2, scope: !3153)
!3158 = !DILocation(line: 2444, column: 31, scope: !3153)
!3159 = !DILocation(line: 2444, column: 34, scope: !3153)
!3160 = !DILocation(line: 2444, column: 40, scope: !3153)
!3161 = !DILocation(line: 2446, column: 2, scope: !3153)
!3162 = !DILocation(line: 2450, column: 2, scope: !3098)
!3163 = !DILocation(line: 2449, column: 7, scope: !3098)
!3164 = !DILocation(line: 2449, column: 53, scope: !3098)
!3165 = !DILocation(line: 2449, column: 71, scope: !3098)
!3166 = !DILocation(line: 2451, column: 5, scope: !3098)
!3167 = !DILocation(line: 2452, column: 1, scope: !2259)
!3168 = !DILocation(line: 2462, column: 8, scope: !3169)
!3169 = distinct !DILexicalBlock(scope: !2265, file: !3, line: 2462, column: 7)
!3170 = !DILocation(line: 2462, column: 7, scope: !2265)
!3171 = !DILocation(line: 2470, column: 20, scope: !3172)
!3172 = distinct !DILexicalBlock(scope: !3173, file: !3, line: 2470, column: 11)
!3173 = distinct !DILexicalBlock(scope: !3169, file: !3, line: 2463, column: 5)
!3174 = !DILocation(line: 2470, column: 18, scope: !3172)
!3175 = !DILocation(line: 2470, column: 11, scope: !3173)
!3176 = !DILocation(line: 2472, column: 37, scope: !3177)
!3177 = distinct !DILexicalBlock(scope: !3172, file: !3, line: 2471, column: 2)
!3178 = !DILocation(line: 2472, column: 12, scope: !3177)
!3179 = !DILocation(line: 2472, column: 10, scope: !3177)
!3180 = !DILocation(line: 2473, column: 8, scope: !3181)
!3181 = distinct !DILexicalBlock(scope: !3177, file: !3, line: 2473, column: 8)
!3182 = !DILocation(line: 2473, column: 8, scope: !3177)
!3183 = !DILocation(line: 2475, column: 12, scope: !3184)
!3184 = distinct !DILexicalBlock(scope: !3185, file: !3, line: 2475, column: 12)
!3185 = distinct !DILexicalBlock(scope: !3181, file: !3, line: 2474, column: 6)
!3186 = !DILocation(line: 2475, column: 30, scope: !3184)
!3187 = !DILocation(line: 2476, column: 5, scope: !3184)
!3188 = !DILocation(line: 2476, column: 8, scope: !3184)
!3189 = !DILocation(line: 2476, column: 29, scope: !3184)
!3190 = !DILocation(line: 2476, column: 26, scope: !3184)
!3191 = !DILocation(line: 2475, column: 12, scope: !3185)
!3192 = !DILocation(line: 2478, column: 5, scope: !3193)
!3193 = distinct !DILexicalBlock(scope: !3184, file: !3, line: 2477, column: 3)
!3194 = !DILocation(line: 2479, column: 11, scope: !3193)
!3195 = !DILocation(line: 2480, column: 3, scope: !3193)
!3196 = !DILocation(line: 2482, column: 11, scope: !3184)
!3197 = !DILocation(line: 2482, column: 9, scope: !3184)
!3198 = !DILocation(line: 2483, column: 6, scope: !3185)
!3199 = !DILocation(line: 2484, column: 2, scope: !3177)
!3200 = !DILocation(line: 2489, column: 12, scope: !3201)
!3201 = distinct !DILexicalBlock(scope: !3173, file: !3, line: 2489, column: 11)
!3202 = !DILocation(line: 2489, column: 11, scope: !3173)
!3203 = !DILocation(line: 2492, column: 8, scope: !3201)
!3204 = !DILocation(line: 2491, column: 14, scope: !3201)
!3205 = !DILocation(line: 2491, column: 12, scope: !3201)
!3206 = !DILocation(line: 2490, column: 2, scope: !3201)
!3207 = !DILocation(line: 2490, column: 44, scope: !3201)
!3208 = !DILocation(line: 2490, column: 61, scope: !3201)
!3209 = !DILocation(line: 2495, column: 11, scope: !3210)
!3210 = distinct !DILexicalBlock(scope: !3173, file: !3, line: 2495, column: 11)
!3211 = !DILocation(line: 2495, column: 11, scope: !3173)
!3212 = !DILocalVariable(name: "i", scope: !3213, file: !3, line: 2497, type: !3214)
!3213 = distinct !DILexicalBlock(scope: !3210, file: !3, line: 2496, column: 2)
!3214 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!3215 = !DILocation(line: 2497, column: 19, scope: !3213)
!3216 = !DILocation(line: 2497, column: 55, scope: !3213)
!3217 = !DILocation(line: 2497, column: 23, scope: !3213)
!3218 = !DILocation(line: 2498, column: 4, scope: !3213)
!3219 = !DILocation(line: 2498, column: 12, scope: !3213)
!3220 = !DILocation(line: 2498, column: 15, scope: !3213)
!3221 = !DILocation(line: 2498, column: 24, scope: !3213)
!3222 = !DILocation(line: 2498, column: 29, scope: !3213)
!3223 = !DILocation(line: 2499, column: 4, scope: !3213)
!3224 = !DILocation(line: 2499, column: 12, scope: !3213)
!3225 = !DILocation(line: 2499, column: 15, scope: !3213)
!3226 = !DILocation(line: 2499, column: 29, scope: !3213)
!3227 = !DILocation(line: 2500, column: 2, scope: !3213)
!3228 = !DILocation(line: 2501, column: 5, scope: !3173)
!3229 = !DILocation(line: 2502, column: 1, scope: !2265)
!3230 = !DILocation(line: 2512, column: 8, scope: !3231)
!3231 = distinct !DILexicalBlock(scope: !2270, file: !3, line: 2512, column: 7)
!3232 = !DILocation(line: 2512, column: 12, scope: !3231)
!3233 = !DILocation(line: 2512, column: 16, scope: !3231)
!3234 = !DILocation(line: 2512, column: 18, scope: !3231)
!3235 = !DILocation(line: 2512, column: 22, scope: !3231)
!3236 = !DILocation(line: 2512, column: 7, scope: !2270)
!3237 = !DILocalVariable(name: "i", scope: !3238, file: !3, line: 2516, type: !7)
!3238 = distinct !DILexicalBlock(scope: !3231, file: !3, line: 2513, column: 5)
!3239 = !DILocation(line: 2516, column: 20, scope: !3238)
!3240 = !DILocation(line: 2524, column: 18, scope: !3241)
!3241 = distinct !DILexicalBlock(scope: !3238, file: !3, line: 2524, column: 11)
!3242 = !DILocation(line: 2524, column: 16, scope: !3241)
!3243 = !DILocation(line: 2524, column: 11, scope: !3238)
!3244 = !DILocation(line: 2526, column: 35, scope: !3245)
!3245 = distinct !DILexicalBlock(scope: !3241, file: !3, line: 2525, column: 2)
!3246 = !DILocation(line: 2526, column: 10, scope: !3245)
!3247 = !DILocation(line: 2526, column: 8, scope: !3245)
!3248 = !DILocation(line: 2527, column: 8, scope: !3249)
!3249 = distinct !DILexicalBlock(scope: !3245, file: !3, line: 2527, column: 8)
!3250 = !DILocation(line: 2527, column: 8, scope: !3245)
!3251 = !DILocation(line: 2529, column: 12, scope: !3252)
!3252 = distinct !DILexicalBlock(scope: !3253, file: !3, line: 2529, column: 12)
!3253 = distinct !DILexicalBlock(scope: !3249, file: !3, line: 2528, column: 6)
!3254 = !DILocation(line: 2529, column: 28, scope: !3252)
!3255 = !DILocation(line: 2529, column: 12, scope: !3253)
!3256 = !DILocation(line: 2531, column: 5, scope: !3257)
!3257 = distinct !DILexicalBlock(scope: !3252, file: !3, line: 2530, column: 3)
!3258 = !DILocation(line: 2532, column: 9, scope: !3257)
!3259 = !DILocation(line: 2533, column: 3, scope: !3257)
!3260 = !DILocation(line: 2535, column: 9, scope: !3252)
!3261 = !DILocation(line: 2535, column: 7, scope: !3252)
!3262 = !DILocation(line: 2536, column: 6, scope: !3253)
!3263 = !DILocation(line: 2537, column: 2, scope: !3245)
!3264 = !DILocation(line: 2541, column: 16, scope: !3265)
!3265 = distinct !DILexicalBlock(scope: !3238, file: !3, line: 2541, column: 11)
!3266 = !DILocation(line: 2541, column: 14, scope: !3265)
!3267 = !DILocation(line: 2541, column: 11, scope: !3238)
!3268 = !DILocation(line: 2543, column: 33, scope: !3269)
!3269 = distinct !DILexicalBlock(scope: !3265, file: !3, line: 2542, column: 2)
!3270 = !DILocation(line: 2543, column: 8, scope: !3269)
!3271 = !DILocation(line: 2543, column: 6, scope: !3269)
!3272 = !DILocation(line: 2544, column: 8, scope: !3273)
!3273 = distinct !DILexicalBlock(scope: !3269, file: !3, line: 2544, column: 8)
!3274 = !DILocation(line: 2544, column: 8, scope: !3269)
!3275 = !DILocation(line: 2546, column: 12, scope: !3276)
!3276 = distinct !DILexicalBlock(scope: !3277, file: !3, line: 2546, column: 12)
!3277 = distinct !DILexicalBlock(scope: !3273, file: !3, line: 2545, column: 6)
!3278 = !DILocation(line: 2546, column: 26, scope: !3276)
!3279 = !DILocation(line: 2546, column: 12, scope: !3277)
!3280 = !DILocation(line: 2548, column: 5, scope: !3281)
!3281 = distinct !DILexicalBlock(scope: !3276, file: !3, line: 2547, column: 3)
!3282 = !DILocation(line: 2549, column: 7, scope: !3281)
!3283 = !DILocation(line: 2550, column: 3, scope: !3281)
!3284 = !DILocation(line: 2551, column: 17, scope: !3285)
!3285 = distinct !DILexicalBlock(scope: !3276, file: !3, line: 2551, column: 17)
!3286 = !DILocation(line: 2551, column: 43, scope: !3285)
!3287 = !DILocation(line: 2551, column: 17, scope: !3276)
!3288 = !DILocation(line: 2553, column: 5, scope: !3289)
!3289 = distinct !DILexicalBlock(scope: !3285, file: !3, line: 2552, column: 3)
!3290 = !DILocation(line: 2554, column: 7, scope: !3289)
!3291 = !DILocation(line: 2555, column: 3, scope: !3289)
!3292 = !DILocation(line: 2557, column: 7, scope: !3285)
!3293 = !DILocation(line: 2557, column: 5, scope: !3285)
!3294 = !DILocation(line: 2558, column: 6, scope: !3277)
!3295 = !DILocation(line: 2559, column: 2, scope: !3269)
!3296 = !DILocation(line: 2565, column: 18, scope: !3297)
!3297 = distinct !DILexicalBlock(scope: !3238, file: !3, line: 2565, column: 11)
!3298 = !DILocation(line: 2565, column: 16, scope: !3297)
!3299 = !DILocation(line: 2565, column: 11, scope: !3238)
!3300 = !DILocation(line: 2567, column: 35, scope: !3301)
!3301 = distinct !DILexicalBlock(scope: !3297, file: !3, line: 2566, column: 2)
!3302 = !DILocation(line: 2567, column: 10, scope: !3301)
!3303 = !DILocation(line: 2567, column: 8, scope: !3301)
!3304 = !DILocation(line: 2568, column: 8, scope: !3305)
!3305 = distinct !DILexicalBlock(scope: !3301, file: !3, line: 2568, column: 8)
!3306 = !DILocation(line: 2568, column: 8, scope: !3301)
!3307 = !DILocation(line: 2570, column: 12, scope: !3308)
!3308 = distinct !DILexicalBlock(scope: !3309, file: !3, line: 2570, column: 12)
!3309 = distinct !DILexicalBlock(scope: !3305, file: !3, line: 2569, column: 6)
!3310 = !DILocation(line: 2570, column: 28, scope: !3308)
!3311 = !DILocation(line: 2570, column: 12, scope: !3309)
!3312 = !DILocation(line: 2572, column: 5, scope: !3313)
!3313 = distinct !DILexicalBlock(scope: !3308, file: !3, line: 2571, column: 3)
!3314 = !DILocation(line: 2573, column: 9, scope: !3313)
!3315 = !DILocation(line: 2574, column: 3, scope: !3313)
!3316 = !DILocation(line: 2577, column: 11, scope: !3317)
!3317 = distinct !DILexicalBlock(scope: !3308, file: !3, line: 2576, column: 3)
!3318 = !DILocation(line: 2577, column: 9, scope: !3317)
!3319 = !DILocation(line: 2578, column: 5, scope: !3317)
!3320 = !DILocation(line: 2579, column: 9, scope: !3321)
!3321 = distinct !DILexicalBlock(scope: !3317, file: !3, line: 2579, column: 9)
!3322 = !DILocation(line: 2579, column: 16, scope: !3321)
!3323 = !DILocation(line: 2579, column: 13, scope: !3321)
!3324 = !DILocation(line: 2580, column: 9, scope: !3321)
!3325 = !DILocation(line: 2580, column: 12, scope: !3321)
!3326 = !DILocation(line: 2580, column: 19, scope: !3321)
!3327 = !DILocation(line: 2580, column: 16, scope: !3321)
!3328 = !DILocation(line: 2579, column: 9, scope: !3317)
!3329 = !DILocation(line: 2582, column: 9, scope: !3330)
!3330 = distinct !DILexicalBlock(scope: !3321, file: !3, line: 2581, column: 7)
!3331 = !DILocation(line: 2584, column: 13, scope: !3330)
!3332 = !DILocation(line: 2585, column: 7, scope: !3330)
!3333 = !DILocation(line: 2587, column: 6, scope: !3309)
!3334 = !DILocation(line: 2588, column: 2, scope: !3301)
!3335 = !DILocation(line: 2593, column: 12, scope: !3336)
!3336 = distinct !DILexicalBlock(scope: !3238, file: !3, line: 2593, column: 11)
!3337 = !DILocation(line: 2593, column: 11, scope: !3238)
!3338 = !DILocation(line: 2599, column: 7, scope: !3336)
!3339 = !DILocation(line: 2598, column: 14, scope: !3336)
!3340 = !DILocation(line: 2598, column: 12, scope: !3336)
!3341 = !DILocation(line: 2597, column: 4, scope: !3336)
!3342 = !DILocation(line: 2597, column: 50, scope: !3336)
!3343 = !DILocation(line: 2597, column: 68, scope: !3336)
!3344 = !DILocation(line: 2596, column: 4, scope: !3336)
!3345 = !DILocation(line: 2596, column: 48, scope: !3336)
!3346 = !DILocation(line: 2596, column: 66, scope: !3336)
!3347 = !DILocation(line: 2595, column: 4, scope: !3336)
!3348 = !DILocation(line: 2595, column: 48, scope: !3336)
!3349 = !DILocation(line: 2595, column: 66, scope: !3336)
!3350 = !DILocation(line: 2594, column: 2, scope: !3336)
!3351 = !DILocation(line: 2594, column: 45, scope: !3336)
!3352 = !DILocation(line: 2594, column: 63, scope: !3336)
!3353 = !DILocation(line: 2602, column: 11, scope: !3354)
!3354 = distinct !DILexicalBlock(scope: !3238, file: !3, line: 2602, column: 11)
!3355 = !DILocation(line: 2602, column: 11, scope: !3238)
!3356 = !DILocation(line: 2605, column: 41, scope: !3357)
!3357 = distinct !DILexicalBlock(scope: !3354, file: !3, line: 2603, column: 2)
!3358 = !DILocation(line: 2605, column: 8, scope: !3357)
!3359 = !DILocation(line: 2605, column: 6, scope: !3357)
!3360 = !DILocation(line: 2606, column: 8, scope: !3361)
!3361 = distinct !DILexicalBlock(scope: !3357, file: !3, line: 2606, column: 8)
!3362 = !DILocation(line: 2606, column: 15, scope: !3361)
!3363 = !DILocation(line: 2606, column: 12, scope: !3361)
!3364 = !DILocation(line: 2606, column: 8, scope: !3357)
!3365 = !DILocation(line: 2607, column: 6, scope: !3361)
!3366 = !DILocation(line: 2607, column: 14, scope: !3361)
!3367 = !DILocation(line: 2607, column: 17, scope: !3361)
!3368 = !DILocation(line: 2607, column: 23, scope: !3361)
!3369 = !DILocation(line: 2608, column: 13, scope: !3370)
!3370 = distinct !DILexicalBlock(scope: !3361, file: !3, line: 2608, column: 13)
!3371 = !DILocation(line: 2608, column: 20, scope: !3370)
!3372 = !DILocation(line: 2608, column: 17, scope: !3370)
!3373 = !DILocation(line: 2608, column: 13, scope: !3361)
!3374 = !DILocation(line: 2609, column: 6, scope: !3370)
!3375 = !DILocation(line: 2609, column: 14, scope: !3370)
!3376 = !DILocation(line: 2609, column: 17, scope: !3370)
!3377 = !DILocation(line: 2609, column: 23, scope: !3370)
!3378 = !DILocation(line: 2611, column: 6, scope: !3370)
!3379 = !DILocation(line: 2612, column: 2, scope: !3357)
!3380 = !DILocation(line: 2615, column: 12, scope: !3381)
!3381 = distinct !DILexicalBlock(scope: !3238, file: !3, line: 2615, column: 11)
!3382 = !DILocation(line: 2615, column: 11, scope: !3238)
!3383 = !DILocation(line: 2618, column: 8, scope: !3381)
!3384 = !DILocation(line: 2617, column: 15, scope: !3381)
!3385 = !DILocation(line: 2617, column: 13, scope: !3381)
!3386 = !DILocation(line: 2616, column: 2, scope: !3381)
!3387 = !DILocation(line: 2616, column: 45, scope: !3381)
!3388 = !DILocation(line: 2616, column: 62, scope: !3381)
!3389 = !DILocation(line: 2621, column: 11, scope: !3390)
!3390 = distinct !DILexicalBlock(scope: !3238, file: !3, line: 2621, column: 11)
!3391 = !DILocation(line: 2621, column: 11, scope: !3238)
!3392 = !DILocation(line: 2623, column: 40, scope: !3393)
!3393 = distinct !DILexicalBlock(scope: !3390, file: !3, line: 2622, column: 2)
!3394 = !DILocation(line: 2623, column: 8, scope: !3393)
!3395 = !DILocation(line: 2623, column: 6, scope: !3393)
!3396 = !DILocation(line: 2624, column: 4, scope: !3393)
!3397 = !DILocation(line: 2624, column: 13, scope: !3393)
!3398 = !DILocation(line: 2624, column: 16, scope: !3393)
!3399 = !DILocation(line: 2624, column: 25, scope: !3393)
!3400 = !DILocation(line: 2624, column: 30, scope: !3393)
!3401 = !DILocation(line: 2625, column: 4, scope: !3393)
!3402 = !DILocation(line: 2625, column: 13, scope: !3393)
!3403 = !DILocation(line: 2625, column: 16, scope: !3393)
!3404 = !DILocation(line: 2625, column: 30, scope: !3393)
!3405 = !DILocation(line: 2626, column: 2, scope: !3393)
!3406 = !DILocation(line: 2629, column: 12, scope: !3407)
!3407 = distinct !DILexicalBlock(scope: !3238, file: !3, line: 2629, column: 11)
!3408 = !DILocation(line: 2629, column: 11, scope: !3238)
!3409 = !DILocation(line: 2632, column: 9, scope: !3407)
!3410 = !DILocation(line: 2631, column: 16, scope: !3407)
!3411 = !DILocation(line: 2631, column: 14, scope: !3407)
!3412 = !DILocation(line: 2630, column: 2, scope: !3407)
!3413 = !DILocation(line: 2630, column: 46, scope: !3407)
!3414 = !DILocation(line: 2630, column: 63, scope: !3407)
!3415 = !DILocation(line: 2635, column: 11, scope: !3416)
!3416 = distinct !DILexicalBlock(scope: !3238, file: !3, line: 2635, column: 11)
!3417 = !DILocation(line: 2635, column: 11, scope: !3238)
!3418 = !DILocation(line: 2638, column: 40, scope: !3419)
!3419 = distinct !DILexicalBlock(scope: !3416, file: !3, line: 2636, column: 2)
!3420 = !DILocation(line: 2638, column: 8, scope: !3419)
!3421 = !DILocation(line: 2638, column: 6, scope: !3419)
!3422 = !DILocation(line: 2639, column: 4, scope: !3419)
!3423 = !DILocation(line: 2639, column: 14, scope: !3419)
!3424 = !DILocation(line: 2639, column: 17, scope: !3419)
!3425 = !DILocation(line: 2639, column: 26, scope: !3419)
!3426 = !DILocation(line: 2639, column: 31, scope: !3419)
!3427 = !DILocation(line: 2640, column: 4, scope: !3419)
!3428 = !DILocation(line: 2640, column: 14, scope: !3419)
!3429 = !DILocation(line: 2640, column: 17, scope: !3419)
!3430 = !DILocation(line: 2640, column: 31, scope: !3419)
!3431 = !DILocation(line: 2641, column: 40, scope: !3419)
!3432 = !DILocation(line: 2641, column: 8, scope: !3419)
!3433 = !DILocation(line: 2641, column: 6, scope: !3419)
!3434 = !DILocation(line: 2642, column: 4, scope: !3419)
!3435 = !DILocation(line: 2642, column: 14, scope: !3419)
!3436 = !DILocation(line: 2642, column: 17, scope: !3419)
!3437 = !DILocation(line: 2642, column: 26, scope: !3419)
!3438 = !DILocation(line: 2642, column: 31, scope: !3419)
!3439 = !DILocation(line: 2643, column: 4, scope: !3419)
!3440 = !DILocation(line: 2643, column: 14, scope: !3419)
!3441 = !DILocation(line: 2643, column: 17, scope: !3419)
!3442 = !DILocation(line: 2643, column: 31, scope: !3419)
!3443 = !DILocation(line: 2644, column: 2, scope: !3419)
!3444 = !DILocation(line: 2647, column: 12, scope: !3445)
!3445 = distinct !DILexicalBlock(scope: !3238, file: !3, line: 2647, column: 11)
!3446 = !DILocation(line: 2647, column: 11, scope: !3238)
!3447 = !DILocation(line: 2650, column: 9, scope: !3445)
!3448 = !DILocation(line: 2649, column: 16, scope: !3445)
!3449 = !DILocation(line: 2649, column: 14, scope: !3445)
!3450 = !DILocation(line: 2648, column: 2, scope: !3445)
!3451 = !DILocation(line: 2648, column: 46, scope: !3445)
!3452 = !DILocation(line: 2648, column: 63, scope: !3445)
!3453 = !DILocation(line: 2653, column: 11, scope: !3454)
!3454 = distinct !DILexicalBlock(scope: !3238, file: !3, line: 2653, column: 11)
!3455 = !DILocation(line: 2653, column: 11, scope: !3238)
!3456 = !DILocation(line: 2656, column: 40, scope: !3457)
!3457 = distinct !DILexicalBlock(scope: !3454, file: !3, line: 2654, column: 2)
!3458 = !DILocation(line: 2656, column: 8, scope: !3457)
!3459 = !DILocation(line: 2656, column: 6, scope: !3457)
!3460 = !DILocation(line: 2657, column: 4, scope: !3457)
!3461 = !DILocation(line: 2657, column: 14, scope: !3457)
!3462 = !DILocation(line: 2657, column: 17, scope: !3457)
!3463 = !DILocation(line: 2657, column: 26, scope: !3457)
!3464 = !DILocation(line: 2657, column: 31, scope: !3457)
!3465 = !DILocation(line: 2658, column: 4, scope: !3457)
!3466 = !DILocation(line: 2658, column: 14, scope: !3457)
!3467 = !DILocation(line: 2658, column: 17, scope: !3457)
!3468 = !DILocation(line: 2658, column: 31, scope: !3457)
!3469 = !DILocation(line: 2659, column: 40, scope: !3457)
!3470 = !DILocation(line: 2659, column: 8, scope: !3457)
!3471 = !DILocation(line: 2659, column: 6, scope: !3457)
!3472 = !DILocation(line: 2660, column: 4, scope: !3457)
!3473 = !DILocation(line: 2660, column: 14, scope: !3457)
!3474 = !DILocation(line: 2660, column: 17, scope: !3457)
!3475 = !DILocation(line: 2660, column: 26, scope: !3457)
!3476 = !DILocation(line: 2660, column: 31, scope: !3457)
!3477 = !DILocation(line: 2661, column: 4, scope: !3457)
!3478 = !DILocation(line: 2661, column: 14, scope: !3457)
!3479 = !DILocation(line: 2661, column: 17, scope: !3457)
!3480 = !DILocation(line: 2661, column: 31, scope: !3457)
!3481 = !DILocation(line: 2662, column: 2, scope: !3457)
!3482 = !DILocation(line: 2665, column: 12, scope: !3483)
!3483 = distinct !DILexicalBlock(scope: !3238, file: !3, line: 2665, column: 11)
!3484 = !DILocation(line: 2665, column: 11, scope: !3238)
!3485 = !DILocation(line: 2668, column: 4, scope: !3483)
!3486 = !DILocation(line: 2667, column: 18, scope: !3483)
!3487 = !DILocation(line: 2667, column: 16, scope: !3483)
!3488 = !DILocation(line: 2666, column: 2, scope: !3483)
!3489 = !DILocation(line: 2666, column: 48, scope: !3483)
!3490 = !DILocation(line: 2666, column: 65, scope: !3483)
!3491 = !DILocation(line: 2671, column: 11, scope: !3492)
!3492 = distinct !DILexicalBlock(scope: !3238, file: !3, line: 2671, column: 11)
!3493 = !DILocation(line: 2671, column: 11, scope: !3238)
!3494 = !DILocation(line: 2674, column: 40, scope: !3495)
!3495 = distinct !DILexicalBlock(scope: !3492, file: !3, line: 2672, column: 2)
!3496 = !DILocation(line: 2674, column: 8, scope: !3495)
!3497 = !DILocation(line: 2674, column: 6, scope: !3495)
!3498 = !DILocation(line: 2675, column: 4, scope: !3495)
!3499 = !DILocation(line: 2675, column: 16, scope: !3495)
!3500 = !DILocation(line: 2675, column: 19, scope: !3495)
!3501 = !DILocation(line: 2675, column: 28, scope: !3495)
!3502 = !DILocation(line: 2675, column: 33, scope: !3495)
!3503 = !DILocation(line: 2676, column: 4, scope: !3495)
!3504 = !DILocation(line: 2676, column: 16, scope: !3495)
!3505 = !DILocation(line: 2676, column: 19, scope: !3495)
!3506 = !DILocation(line: 2676, column: 33, scope: !3495)
!3507 = !DILocation(line: 2677, column: 40, scope: !3495)
!3508 = !DILocation(line: 2677, column: 8, scope: !3495)
!3509 = !DILocation(line: 2677, column: 6, scope: !3495)
!3510 = !DILocation(line: 2678, column: 4, scope: !3495)
!3511 = !DILocation(line: 2678, column: 16, scope: !3495)
!3512 = !DILocation(line: 2678, column: 19, scope: !3495)
!3513 = !DILocation(line: 2678, column: 28, scope: !3495)
!3514 = !DILocation(line: 2678, column: 33, scope: !3495)
!3515 = !DILocation(line: 2679, column: 4, scope: !3495)
!3516 = !DILocation(line: 2679, column: 16, scope: !3495)
!3517 = !DILocation(line: 2679, column: 19, scope: !3495)
!3518 = !DILocation(line: 2679, column: 33, scope: !3495)
!3519 = !DILocation(line: 2680, column: 2, scope: !3495)
!3520 = !DILocation(line: 2681, column: 5, scope: !3238)
!3521 = !DILocation(line: 2682, column: 1, scope: !2270)
!3522 = distinct !DISubprogram(name: "convert_format_name_to_system_name", scope: !3, file: !3, line: 2711, type: !3523, scopeLine: 2712, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!3523 = !DISubroutineType(types: !3524)
!3524 = !{!1646, !1646}
!3525 = !DILocalVariable(name: "attr_name", arg: 1, scope: !3522, file: !3, line: 2711, type: !1646)
!3526 = !DILocation(line: 2711, column: 49, scope: !3522)
!3527 = !DILocalVariable(name: "i", scope: !3522, file: !3, line: 2713, type: !1140)
!3528 = !DILocation(line: 2713, column: 7, scope: !3522)
!3529 = !DILocation(line: 2715, column: 7, scope: !3530)
!3530 = distinct !DILexicalBlock(scope: !3522, file: !3, line: 2715, column: 7)
!3531 = !DILocation(line: 2715, column: 17, scope: !3530)
!3532 = !DILocation(line: 2715, column: 25, scope: !3530)
!3533 = !DILocation(line: 2715, column: 29, scope: !3530)
!3534 = !DILocation(line: 2715, column: 28, scope: !3530)
!3535 = !DILocation(line: 2715, column: 39, scope: !3530)
!3536 = !DILocation(line: 2716, column: 7, scope: !3530)
!3537 = !DILocation(line: 2716, column: 19, scope: !3530)
!3538 = !DILocation(line: 2716, column: 10, scope: !3530)
!3539 = !DILocation(line: 2716, column: 41, scope: !3530)
!3540 = !DILocation(line: 2715, column: 7, scope: !3522)
!3541 = !DILocation(line: 2717, column: 12, scope: !3530)
!3542 = !DILocation(line: 2717, column: 5, scope: !3530)
!3543 = !DILocation(line: 2739, column: 10, scope: !3544)
!3544 = distinct !DILexicalBlock(scope: !3522, file: !3, line: 2739, column: 3)
!3545 = !DILocation(line: 2739, column: 8, scope: !3544)
!3546 = !DILocation(line: 2740, column: 47, scope: !3547)
!3547 = distinct !DILexicalBlock(scope: !3544, file: !3, line: 2739, column: 3)
!3548 = !DILocation(line: 2740, column: 8, scope: !3547)
!3549 = !DILocation(line: 2740, column: 50, scope: !3547)
!3550 = !DILocation(line: 2740, column: 65, scope: !3547)
!3551 = !DILocation(line: 2739, column: 3, scope: !3544)
!3552 = !DILocation(line: 2743, column: 63, scope: !3553)
!3553 = distinct !DILexicalBlock(scope: !3554, file: !3, line: 2743, column: 11)
!3554 = distinct !DILexicalBlock(scope: !3547, file: !3, line: 2742, column: 5)
!3555 = !DILocation(line: 2743, column: 24, scope: !3553)
!3556 = !DILocation(line: 2743, column: 66, scope: !3553)
!3557 = !DILocation(line: 2744, column: 10, scope: !3553)
!3558 = !DILocation(line: 2743, column: 11, scope: !3553)
!3559 = !DILocation(line: 2743, column: 11, scope: !3554)
!3560 = !DILocation(line: 2745, column: 16, scope: !3553)
!3561 = !DILocation(line: 2745, column: 9, scope: !3553)
!3562 = !DILocation(line: 2746, column: 63, scope: !3563)
!3563 = distinct !DILexicalBlock(scope: !3554, file: !3, line: 2746, column: 11)
!3564 = !DILocation(line: 2746, column: 24, scope: !3563)
!3565 = !DILocation(line: 2746, column: 66, scope: !3563)
!3566 = !DILocation(line: 2747, column: 10, scope: !3563)
!3567 = !DILocation(line: 2746, column: 11, scope: !3563)
!3568 = !DILocation(line: 2746, column: 11, scope: !3554)
!3569 = !DILocation(line: 2748, column: 55, scope: !3563)
!3570 = !DILocation(line: 2748, column: 16, scope: !3563)
!3571 = !DILocation(line: 2748, column: 58, scope: !3563)
!3572 = !DILocation(line: 2748, column: 9, scope: !3563)
!3573 = !DILocation(line: 2749, column: 5, scope: !3554)
!3574 = !DILocation(line: 2741, column: 8, scope: !3547)
!3575 = !DILocation(line: 2739, column: 3, scope: !3547)
!3576 = distinct !{!3576, !3551, !3577}
!3577 = !DILocation(line: 2749, column: 5, scope: !3544)
!3578 = !DILocation(line: 2751, column: 10, scope: !3522)
!3579 = !DILocation(line: 2751, column: 3, scope: !3522)
!3580 = !DILocation(line: 2752, column: 1, scope: !3522)
!3581 = distinct !DISubprogram(name: "cmp_attribs", scope: !3, file: !3, line: 2757, type: !3582, scopeLine: 2758, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!3582 = !DISubroutineType(types: !3583)
!3583 = !{!1451, !1646, !1646}
!3584 = !DILocalVariable(name: "tattr_name", arg: 1, scope: !3581, file: !3, line: 2757, type: !1646)
!3585 = !DILocation(line: 2757, column: 26, scope: !3581)
!3586 = !DILocalVariable(name: "attr_name", arg: 2, scope: !3581, file: !3, line: 2757, type: !1646)
!3587 = !DILocation(line: 2757, column: 50, scope: !3581)
!3588 = !DILocalVariable(name: "alen", scope: !3581, file: !3, line: 2759, type: !1140)
!3589 = !DILocation(line: 2759, column: 7, scope: !3581)
!3590 = !DILocation(line: 2759, column: 22, scope: !3581)
!3591 = !DILocation(line: 2759, column: 14, scope: !3581)
!3592 = !DILocalVariable(name: "slen", scope: !3581, file: !3, line: 2760, type: !1140)
!3593 = !DILocation(line: 2760, column: 7, scope: !3581)
!3594 = !DILocation(line: 2760, column: 15, scope: !3581)
!3595 = !DILocation(line: 2760, column: 36, scope: !3581)
!3596 = !DILocation(line: 2760, column: 28, scope: !3581)
!3597 = !DILocation(line: 2760, column: 14, scope: !3581)
!3598 = !DILocation(line: 2761, column: 7, scope: !3599)
!3599 = distinct !DILexicalBlock(scope: !3581, file: !3, line: 2761, column: 7)
!3600 = !DILocation(line: 2761, column: 12, scope: !3599)
!3601 = !DILocation(line: 2761, column: 16, scope: !3599)
!3602 = !DILocation(line: 2761, column: 19, scope: !3599)
!3603 = !DILocation(line: 2761, column: 32, scope: !3599)
!3604 = !DILocation(line: 2761, column: 39, scope: !3599)
!3605 = !DILocation(line: 2761, column: 42, scope: !3599)
!3606 = !DILocation(line: 2761, column: 55, scope: !3599)
!3607 = !DILocation(line: 2762, column: 7, scope: !3599)
!3608 = !DILocation(line: 2762, column: 10, scope: !3599)
!3609 = !DILocation(line: 2762, column: 20, scope: !3599)
!3610 = !DILocation(line: 2762, column: 25, scope: !3599)
!3611 = !DILocation(line: 2762, column: 30, scope: !3599)
!3612 = !DILocation(line: 2762, column: 37, scope: !3599)
!3613 = !DILocation(line: 2762, column: 40, scope: !3599)
!3614 = !DILocation(line: 2762, column: 50, scope: !3599)
!3615 = !DILocation(line: 2762, column: 55, scope: !3599)
!3616 = !DILocation(line: 2762, column: 60, scope: !3599)
!3617 = !DILocation(line: 2761, column: 7, scope: !3581)
!3618 = !DILocation(line: 2764, column: 17, scope: !3619)
!3619 = distinct !DILexicalBlock(scope: !3599, file: !3, line: 2763, column: 5)
!3620 = !DILocation(line: 2765, column: 12, scope: !3619)
!3621 = !DILocation(line: 2766, column: 5, scope: !3619)
!3622 = !DILocation(line: 2767, column: 7, scope: !3623)
!3623 = distinct !DILexicalBlock(scope: !3581, file: !3, line: 2767, column: 7)
!3624 = !DILocation(line: 2767, column: 15, scope: !3623)
!3625 = !DILocation(line: 2767, column: 12, scope: !3623)
!3626 = !DILocation(line: 2767, column: 20, scope: !3623)
!3627 = !DILocation(line: 2767, column: 32, scope: !3623)
!3628 = !DILocation(line: 2767, column: 44, scope: !3623)
!3629 = !DILocation(line: 2767, column: 55, scope: !3623)
!3630 = !DILocation(line: 2767, column: 23, scope: !3623)
!3631 = !DILocation(line: 2767, column: 61, scope: !3623)
!3632 = !DILocation(line: 2767, column: 7, scope: !3581)
!3633 = !DILocation(line: 2768, column: 5, scope: !3623)
!3634 = !DILocation(line: 2769, column: 3, scope: !3581)
!3635 = !DILocation(line: 2770, column: 1, scope: !3581)
!3636 = distinct !DISubprogram(name: "check_format_arg", scope: !3, file: !3, line: 1289, type: !3637, scopeLine: 1291, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!3637 = !DISubroutineType(types: !3638)
!3638 = !{null, !1991, !1348, !1402}
!3639 = !DILocalVariable(name: "ctx", arg: 1, scope: !3636, file: !3, line: 1289, type: !1991)
!3640 = !DILocation(line: 1289, column: 25, scope: !3636)
!3641 = !DILocalVariable(name: "format_tree", arg: 2, scope: !3636, file: !3, line: 1289, type: !1348)
!3642 = !DILocation(line: 1289, column: 35, scope: !3636)
!3643 = !DILocalVariable(name: "arg_num", arg: 3, scope: !3636, file: !3, line: 1290, type: !1402)
!3644 = !DILocation(line: 1290, column: 28, scope: !3636)
!3645 = !DILocalVariable(name: "format_ctx", scope: !3636, file: !3, line: 1292, type: !2067)
!3646 = !DILocation(line: 1292, column: 25, scope: !3636)
!3647 = !DILocation(line: 1292, column: 63, scope: !3636)
!3648 = !DILocation(line: 1292, column: 38, scope: !3636)
!3649 = !DILocalVariable(name: "res", scope: !3636, file: !3, line: 1293, type: !2072)
!3650 = !DILocation(line: 1293, column: 25, scope: !3636)
!3651 = !DILocation(line: 1293, column: 31, scope: !3636)
!3652 = !DILocation(line: 1293, column: 43, scope: !3636)
!3653 = !DILocalVariable(name: "info", scope: !3636, file: !3, line: 1294, type: !2084)
!3654 = !DILocation(line: 1294, column: 25, scope: !3636)
!3655 = !DILocation(line: 1294, column: 32, scope: !3636)
!3656 = !DILocation(line: 1294, column: 44, scope: !3636)
!3657 = !DILocalVariable(name: "params", scope: !3636, file: !3, line: 1295, type: !1348)
!3658 = !DILocation(line: 1295, column: 8, scope: !3636)
!3659 = !DILocation(line: 1295, column: 17, scope: !3636)
!3660 = !DILocation(line: 1295, column: 29, scope: !3636)
!3661 = !DILocalVariable(name: "format_length", scope: !3636, file: !3, line: 1297, type: !1140)
!3662 = !DILocation(line: 1297, column: 7, scope: !3636)
!3663 = !DILocalVariable(name: "offset", scope: !3636, file: !3, line: 1298, type: !1404)
!3664 = !DILocation(line: 1298, column: 17, scope: !3636)
!3665 = !DILocalVariable(name: "format_chars", scope: !3636, file: !3, line: 1299, type: !1646)
!3666 = !DILocation(line: 1299, column: 15, scope: !3636)
!3667 = !DILocalVariable(name: "array_size", scope: !3636, file: !3, line: 1300, type: !1348)
!3668 = !DILocation(line: 1300, column: 8, scope: !3636)
!3669 = !DILocalVariable(name: "array_init", scope: !3636, file: !3, line: 1301, type: !1348)
!3670 = !DILocation(line: 1301, column: 8, scope: !3636)
!3671 = !DILocalVariable(name: "fwt_pool", scope: !3636, file: !3, line: 1302, type: !3672)
!3672 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool", file: !3673, line: 58, baseType: !3674)
!3673 = !DIFile(filename: "./alloc-pool.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3674 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3675, size: 64)
!3675 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_def", file: !3673, line: 32, size: 704, elements: !3676)
!3676 = !{!3677, !3678, !3681, !3687, !3688, !3689, !3690, !3691, !3692, !3693, !3694}
!3677 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3675, file: !3673, line: 34, baseType: !1646, size: 64)
!3678 = !DIDerivedType(tag: DW_TAG_member, name: "elts_per_block", scope: !3675, file: !3673, line: 38, baseType: !3679, size: 64, offset: 64)
!3679 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !3680, line: 46, baseType: !1402)
!3680 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!3681 = !DIDerivedType(tag: DW_TAG_member, name: "returned_free_list", scope: !3675, file: !3673, line: 41, baseType: !3682, size: 64, offset: 128)
!3682 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool_list", file: !3673, line: 30, baseType: !3683)
!3683 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3684, size: 64)
!3684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_list_def", file: !3673, line: 26, size: 64, elements: !3685)
!3685 = !{!3686}
!3686 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3684, file: !3673, line: 28, baseType: !3683, size: 64)
!3687 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_free_list", scope: !3675, file: !3673, line: 45, baseType: !2111, size: 64, offset: 192)
!3688 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_elts_remaining", scope: !3675, file: !3673, line: 49, baseType: !3679, size: 64, offset: 256)
!3689 = !DIDerivedType(tag: DW_TAG_member, name: "elts_allocated", scope: !3675, file: !3673, line: 51, baseType: !3679, size: 64, offset: 320)
!3690 = !DIDerivedType(tag: DW_TAG_member, name: "elts_free", scope: !3675, file: !3673, line: 52, baseType: !3679, size: 64, offset: 384)
!3691 = !DIDerivedType(tag: DW_TAG_member, name: "blocks_allocated", scope: !3675, file: !3673, line: 53, baseType: !3679, size: 64, offset: 448)
!3692 = !DIDerivedType(tag: DW_TAG_member, name: "block_list", scope: !3675, file: !3673, line: 54, baseType: !3682, size: 64, offset: 512)
!3693 = !DIDerivedType(tag: DW_TAG_member, name: "block_size", scope: !3675, file: !3673, line: 55, baseType: !3679, size: 64, offset: 576)
!3694 = !DIDerivedType(tag: DW_TAG_member, name: "elt_size", scope: !3675, file: !3673, line: 56, baseType: !3679, size: 64, offset: 640)
!3695 = !DILocation(line: 1302, column: 14, scope: !3636)
!3696 = !DILocation(line: 1304, column: 22, scope: !3697)
!3697 = distinct !DILexicalBlock(scope: !3636, file: !3, line: 1304, column: 7)
!3698 = !DILocation(line: 1304, column: 7, scope: !3697)
!3699 = !DILocation(line: 1304, column: 7, scope: !3636)
!3700 = !DILocation(line: 1308, column: 7, scope: !3701)
!3701 = distinct !DILexicalBlock(scope: !3697, file: !3, line: 1305, column: 5)
!3702 = !DILocation(line: 1308, column: 14, scope: !3701)
!3703 = !DILocation(line: 1308, column: 22, scope: !3701)
!3704 = !DILocation(line: 1308, column: 28, scope: !3701)
!3705 = !DILocation(line: 1308, column: 34, scope: !3701)
!3706 = !DILocation(line: 1308, column: 26, scope: !3701)
!3707 = !DILocation(line: 1310, column: 8, scope: !3708)
!3708 = distinct !DILexicalBlock(scope: !3709, file: !3, line: 1310, column: 8)
!3709 = distinct !DILexicalBlock(scope: !3701, file: !3, line: 1309, column: 2)
!3710 = !DILocation(line: 1310, column: 15, scope: !3708)
!3711 = !DILocation(line: 1310, column: 8, scope: !3709)
!3712 = !DILocation(line: 1311, column: 6, scope: !3708)
!3713 = !DILocation(line: 1312, column: 13, scope: !3709)
!3714 = !DILocation(line: 1312, column: 11, scope: !3709)
!3715 = !DILocation(line: 1313, column: 4, scope: !3709)
!3716 = distinct !{!3716, !3700, !3717}
!3717 = !DILocation(line: 1314, column: 2, scope: !3701)
!3718 = !DILocation(line: 1316, column: 11, scope: !3719)
!3719 = distinct !DILexicalBlock(scope: !3701, file: !3, line: 1316, column: 11)
!3720 = !DILocation(line: 1316, column: 18, scope: !3719)
!3721 = !DILocation(line: 1316, column: 11, scope: !3701)
!3722 = !DILocation(line: 1317, column: 2, scope: !3719)
!3723 = !DILocation(line: 1317, column: 7, scope: !3719)
!3724 = !DILocation(line: 1317, column: 19, scope: !3719)
!3725 = !DILocation(line: 1319, column: 2, scope: !3719)
!3726 = !DILocation(line: 1319, column: 7, scope: !3719)
!3727 = !DILocation(line: 1319, column: 24, scope: !3719)
!3728 = !DILocation(line: 1321, column: 7, scope: !3701)
!3729 = !DILocation(line: 1324, column: 10, scope: !3636)
!3730 = !DILocation(line: 1325, column: 7, scope: !3731)
!3731 = distinct !DILexicalBlock(scope: !3636, file: !3, line: 1325, column: 7)
!3732 = !DILocation(line: 1325, column: 31, scope: !3731)
!3733 = !DILocation(line: 1325, column: 7, scope: !3636)
!3734 = !DILocalVariable(name: "arg0", scope: !3735, file: !3, line: 1327, type: !1348)
!3735 = distinct !DILexicalBlock(scope: !3731, file: !3, line: 1326, column: 5)
!3736 = !DILocation(line: 1327, column: 12, scope: !3735)
!3737 = !DILocalVariable(name: "arg1", scope: !3735, file: !3, line: 1327, type: !1348)
!3738 = !DILocation(line: 1327, column: 18, scope: !3735)
!3739 = !DILocation(line: 1329, column: 14, scope: !3735)
!3740 = !DILocation(line: 1329, column: 12, scope: !3735)
!3741 = !DILocation(line: 1330, column: 14, scope: !3735)
!3742 = !DILocation(line: 1330, column: 12, scope: !3735)
!3743 = !DILocation(line: 1331, column: 7, scope: !3735)
!3744 = !DILocation(line: 1332, column: 7, scope: !3735)
!3745 = !DILocation(line: 1333, column: 11, scope: !3746)
!3746 = distinct !DILexicalBlock(scope: !3735, file: !3, line: 1333, column: 11)
!3747 = !DILocation(line: 1333, column: 28, scope: !3746)
!3748 = !DILocation(line: 1333, column: 11, scope: !3735)
!3749 = !DILocation(line: 1334, column: 16, scope: !3746)
!3750 = !DILocation(line: 1334, column: 14, scope: !3746)
!3751 = !DILocation(line: 1334, column: 2, scope: !3746)
!3752 = !DILocation(line: 1337, column: 4, scope: !3753)
!3753 = distinct !DILexicalBlock(scope: !3746, file: !3, line: 1336, column: 2)
!3754 = !DILocation(line: 1337, column: 9, scope: !3753)
!3755 = !DILocation(line: 1337, column: 27, scope: !3753)
!3756 = !DILocation(line: 1338, column: 4, scope: !3753)
!3757 = !DILocation(line: 1340, column: 27, scope: !3758)
!3758 = distinct !DILexicalBlock(scope: !3735, file: !3, line: 1340, column: 11)
!3759 = !DILocation(line: 1340, column: 12, scope: !3758)
!3760 = !DILocation(line: 1341, column: 4, scope: !3758)
!3761 = !DILocation(line: 1341, column: 31, scope: !3758)
!3762 = !DILocation(line: 1341, column: 17, scope: !3758)
!3763 = !DILocation(line: 1341, column: 15, scope: !3758)
!3764 = !DILocation(line: 1341, column: 41, scope: !3758)
!3765 = !DILocation(line: 1340, column: 11, scope: !3735)
!3766 = !DILocation(line: 1343, column: 4, scope: !3767)
!3767 = distinct !DILexicalBlock(scope: !3758, file: !3, line: 1342, column: 2)
!3768 = !DILocation(line: 1343, column: 9, scope: !3767)
!3769 = !DILocation(line: 1343, column: 27, scope: !3767)
!3770 = !DILocation(line: 1344, column: 4, scope: !3767)
!3771 = !DILocation(line: 1346, column: 5, scope: !3735)
!3772 = !DILocation(line: 1347, column: 7, scope: !3773)
!3773 = distinct !DILexicalBlock(scope: !3636, file: !3, line: 1347, column: 7)
!3774 = !DILocation(line: 1347, column: 31, scope: !3773)
!3775 = !DILocation(line: 1347, column: 7, scope: !3636)
!3776 = !DILocation(line: 1349, column: 7, scope: !3777)
!3777 = distinct !DILexicalBlock(scope: !3773, file: !3, line: 1348, column: 5)
!3778 = !DILocation(line: 1349, column: 12, scope: !3777)
!3779 = !DILocation(line: 1349, column: 30, scope: !3777)
!3780 = !DILocation(line: 1350, column: 7, scope: !3777)
!3781 = !DILocation(line: 1352, column: 17, scope: !3636)
!3782 = !DILocation(line: 1352, column: 15, scope: !3636)
!3783 = !DILocation(line: 1353, column: 7, scope: !3784)
!3784 = distinct !DILexicalBlock(scope: !3636, file: !3, line: 1353, column: 7)
!3785 = !DILocation(line: 1353, column: 31, scope: !3784)
!3786 = !DILocation(line: 1354, column: 7, scope: !3784)
!3787 = !DILocation(line: 1354, column: 25, scope: !3784)
!3788 = !DILocation(line: 1354, column: 10, scope: !3784)
!3789 = !DILocation(line: 1355, column: 7, scope: !3784)
!3790 = !DILocation(line: 1355, column: 35, scope: !3784)
!3791 = !DILocation(line: 1355, column: 21, scope: !3784)
!3792 = !DILocation(line: 1355, column: 18, scope: !3784)
!3793 = !DILocation(line: 1355, column: 70, scope: !3784)
!3794 = !DILocation(line: 1353, column: 7, scope: !3636)
!3795 = !DILocation(line: 1356, column: 19, scope: !3784)
!3796 = !DILocation(line: 1356, column: 17, scope: !3784)
!3797 = !DILocation(line: 1356, column: 5, scope: !3784)
!3798 = !DILocation(line: 1357, column: 7, scope: !3799)
!3799 = distinct !DILexicalBlock(scope: !3636, file: !3, line: 1357, column: 7)
!3800 = !DILocation(line: 1357, column: 31, scope: !3799)
!3801 = !DILocation(line: 1358, column: 7, scope: !3799)
!3802 = !DILocation(line: 1358, column: 10, scope: !3799)
!3803 = !DILocation(line: 1358, column: 46, scope: !3799)
!3804 = !DILocation(line: 1359, column: 7, scope: !3799)
!3805 = !DILocation(line: 1359, column: 45, scope: !3799)
!3806 = !DILocation(line: 1359, column: 24, scope: !3799)
!3807 = !DILocation(line: 1359, column: 22, scope: !3799)
!3808 = !DILocation(line: 1359, column: 62, scope: !3799)
!3809 = !DILocation(line: 1359, column: 59, scope: !3799)
!3810 = !DILocation(line: 1360, column: 7, scope: !3799)
!3811 = !DILocation(line: 1360, column: 10, scope: !3799)
!3812 = !DILocation(line: 1360, column: 33, scope: !3799)
!3813 = !DILocation(line: 1357, column: 7, scope: !3636)
!3814 = !DILocation(line: 1365, column: 20, scope: !3815)
!3815 = distinct !DILexicalBlock(scope: !3799, file: !3, line: 1361, column: 5)
!3816 = !DILocation(line: 1365, column: 18, scope: !3815)
!3817 = !DILocation(line: 1366, column: 21, scope: !3815)
!3818 = !DILocation(line: 1366, column: 19, scope: !3815)
!3819 = !DILocation(line: 1367, column: 5, scope: !3815)
!3820 = !DILocation(line: 1368, column: 7, scope: !3821)
!3821 = distinct !DILexicalBlock(scope: !3636, file: !3, line: 1368, column: 7)
!3822 = !DILocation(line: 1368, column: 31, scope: !3821)
!3823 = !DILocation(line: 1368, column: 7, scope: !3636)
!3824 = !DILocation(line: 1370, column: 7, scope: !3825)
!3825 = distinct !DILexicalBlock(scope: !3821, file: !3, line: 1369, column: 5)
!3826 = !DILocation(line: 1370, column: 12, scope: !3825)
!3827 = !DILocation(line: 1370, column: 30, scope: !3825)
!3828 = !DILocation(line: 1371, column: 7, scope: !3825)
!3829 = !DILocation(line: 1373, column: 7, scope: !3830)
!3830 = distinct !DILexicalBlock(scope: !3636, file: !3, line: 1373, column: 7)
!3831 = !DILocation(line: 1373, column: 66, scope: !3830)
!3832 = !DILocation(line: 1373, column: 63, scope: !3830)
!3833 = !DILocation(line: 1373, column: 7, scope: !3636)
!3834 = !DILocation(line: 1375, column: 7, scope: !3835)
!3835 = distinct !DILexicalBlock(scope: !3830, file: !3, line: 1374, column: 5)
!3836 = !DILocation(line: 1375, column: 12, scope: !3835)
!3837 = !DILocation(line: 1375, column: 23, scope: !3835)
!3838 = !DILocation(line: 1376, column: 7, scope: !3835)
!3839 = !DILocation(line: 1378, column: 18, scope: !3636)
!3840 = !DILocation(line: 1378, column: 16, scope: !3636)
!3841 = !DILocation(line: 1379, column: 19, scope: !3636)
!3842 = !DILocation(line: 1379, column: 17, scope: !3636)
!3843 = !DILocation(line: 1380, column: 7, scope: !3844)
!3844 = distinct !DILexicalBlock(scope: !3636, file: !3, line: 1380, column: 7)
!3845 = !DILocation(line: 1380, column: 18, scope: !3844)
!3846 = !DILocation(line: 1380, column: 7, scope: !3636)
!3847 = !DILocation(line: 1383, column: 7, scope: !3848)
!3848 = distinct !DILexicalBlock(scope: !3844, file: !3, line: 1381, column: 5)
!3849 = !DILocation(line: 1385, column: 26, scope: !3850)
!3850 = distinct !DILexicalBlock(scope: !3848, file: !3, line: 1385, column: 11)
!3851 = !DILocation(line: 1385, column: 11, scope: !3850)
!3852 = !DILocation(line: 1385, column: 11, scope: !3848)
!3853 = !DILocalVariable(name: "array_size_value", scope: !3854, file: !3, line: 1387, type: !1404)
!3854 = distinct !DILexicalBlock(scope: !3850, file: !3, line: 1386, column: 2)
!3855 = !DILocation(line: 1387, column: 18, scope: !3854)
!3856 = !DILocation(line: 1387, column: 37, scope: !3854)
!3857 = !DILocation(line: 1388, column: 8, scope: !3858)
!3858 = distinct !DILexicalBlock(scope: !3854, file: !3, line: 1388, column: 8)
!3859 = !DILocation(line: 1388, column: 25, scope: !3858)
!3860 = !DILocation(line: 1389, column: 8, scope: !3858)
!3861 = !DILocation(line: 1389, column: 11, scope: !3858)
!3862 = !DILocation(line: 1389, column: 37, scope: !3858)
!3863 = !DILocation(line: 1389, column: 31, scope: !3858)
!3864 = !DILocation(line: 1389, column: 28, scope: !3858)
!3865 = !DILocation(line: 1390, column: 8, scope: !3858)
!3866 = !DILocation(line: 1390, column: 11, scope: !3858)
!3867 = !DILocation(line: 1390, column: 27, scope: !3858)
!3868 = !DILocation(line: 1390, column: 25, scope: !3858)
!3869 = !DILocation(line: 1388, column: 8, scope: !3854)
!3870 = !DILocation(line: 1391, column: 22, scope: !3858)
!3871 = !DILocation(line: 1391, column: 20, scope: !3858)
!3872 = !DILocation(line: 1391, column: 6, scope: !3858)
!3873 = !DILocation(line: 1392, column: 2, scope: !3854)
!3874 = !DILocation(line: 1393, column: 5, scope: !3848)
!3875 = !DILocation(line: 1394, column: 7, scope: !3876)
!3876 = distinct !DILexicalBlock(scope: !3636, file: !3, line: 1394, column: 7)
!3877 = !DILocation(line: 1394, column: 7, scope: !3636)
!3878 = !DILocation(line: 1396, column: 11, scope: !3879)
!3879 = distinct !DILexicalBlock(scope: !3880, file: !3, line: 1396, column: 11)
!3880 = distinct !DILexicalBlock(scope: !3876, file: !3, line: 1395, column: 5)
!3881 = !DILocation(line: 1396, column: 21, scope: !3879)
!3882 = !DILocation(line: 1396, column: 18, scope: !3879)
!3883 = !DILocation(line: 1396, column: 11, scope: !3880)
!3884 = !DILocation(line: 1398, column: 4, scope: !3885)
!3885 = distinct !DILexicalBlock(scope: !3879, file: !3, line: 1397, column: 2)
!3886 = !DILocation(line: 1398, column: 9, scope: !3885)
!3887 = !DILocation(line: 1398, column: 27, scope: !3885)
!3888 = !DILocation(line: 1399, column: 4, scope: !3885)
!3889 = !DILocation(line: 1401, column: 23, scope: !3880)
!3890 = !DILocation(line: 1401, column: 20, scope: !3880)
!3891 = !DILocation(line: 1402, column: 24, scope: !3880)
!3892 = !DILocation(line: 1402, column: 21, scope: !3880)
!3893 = !DILocation(line: 1403, column: 5, scope: !3880)
!3894 = !DILocation(line: 1404, column: 7, scope: !3895)
!3895 = distinct !DILexicalBlock(scope: !3636, file: !3, line: 1404, column: 7)
!3896 = !DILocation(line: 1404, column: 21, scope: !3895)
!3897 = !DILocation(line: 1404, column: 25, scope: !3895)
!3898 = !DILocation(line: 1404, column: 28, scope: !3895)
!3899 = !DILocation(line: 1404, column: 41, scope: !3895)
!3900 = !DILocation(line: 1404, column: 58, scope: !3895)
!3901 = !DILocation(line: 1404, column: 7, scope: !3636)
!3902 = !DILocation(line: 1406, column: 7, scope: !3903)
!3903 = distinct !DILexicalBlock(scope: !3895, file: !3, line: 1405, column: 5)
!3904 = !DILocation(line: 1406, column: 12, scope: !3903)
!3905 = !DILocation(line: 1406, column: 31, scope: !3903)
!3906 = !DILocation(line: 1407, column: 7, scope: !3903)
!3907 = !DILocation(line: 1409, column: 7, scope: !3908)
!3908 = distinct !DILexicalBlock(scope: !3636, file: !3, line: 1409, column: 7)
!3909 = !DILocation(line: 1409, column: 21, scope: !3908)
!3910 = !DILocation(line: 1409, column: 7, scope: !3636)
!3911 = !DILocation(line: 1411, column: 7, scope: !3912)
!3912 = distinct !DILexicalBlock(scope: !3908, file: !3, line: 1410, column: 5)
!3913 = !DILocation(line: 1411, column: 12, scope: !3912)
!3914 = !DILocation(line: 1411, column: 24, scope: !3912)
!3915 = !DILocation(line: 1412, column: 7, scope: !3912)
!3916 = !DILocation(line: 1416, column: 3, scope: !3636)
!3917 = !DILocation(line: 1416, column: 10, scope: !3636)
!3918 = !DILocation(line: 1416, column: 18, scope: !3636)
!3919 = !DILocation(line: 1416, column: 24, scope: !3636)
!3920 = !DILocation(line: 1416, column: 30, scope: !3636)
!3921 = !DILocation(line: 1416, column: 22, scope: !3636)
!3922 = !DILocation(line: 1418, column: 11, scope: !3923)
!3923 = distinct !DILexicalBlock(scope: !3924, file: !3, line: 1418, column: 11)
!3924 = distinct !DILexicalBlock(scope: !3636, file: !3, line: 1417, column: 5)
!3925 = !DILocation(line: 1418, column: 18, scope: !3923)
!3926 = !DILocation(line: 1418, column: 11, scope: !3924)
!3927 = !DILocation(line: 1419, column: 2, scope: !3923)
!3928 = !DILocation(line: 1420, column: 16, scope: !3924)
!3929 = !DILocation(line: 1420, column: 14, scope: !3924)
!3930 = !DILocation(line: 1421, column: 7, scope: !3924)
!3931 = distinct !{!3931, !3916, !3932}
!3932 = !DILocation(line: 1422, column: 5, scope: !3636)
!3933 = !DILocation(line: 1426, column: 3, scope: !3636)
!3934 = !DILocation(line: 1426, column: 8, scope: !3636)
!3935 = !DILocation(line: 1426, column: 20, scope: !3636)
!3936 = !DILocation(line: 1427, column: 14, scope: !3636)
!3937 = !DILocation(line: 1427, column: 12, scope: !3636)
!3938 = !DILocation(line: 1429, column: 27, scope: !3636)
!3939 = !DILocation(line: 1429, column: 32, scope: !3636)
!3940 = !DILocation(line: 1429, column: 38, scope: !3636)
!3941 = !DILocation(line: 1429, column: 52, scope: !3636)
!3942 = !DILocation(line: 1430, column: 27, scope: !3636)
!3943 = !DILocation(line: 1430, column: 35, scope: !3636)
!3944 = !DILocation(line: 1430, column: 44, scope: !3636)
!3945 = !DILocation(line: 1429, column: 3, scope: !3636)
!3946 = !DILocation(line: 1431, column: 20, scope: !3636)
!3947 = !DILocation(line: 1431, column: 3, scope: !3636)
!3948 = !DILocation(line: 1432, column: 1, scope: !3636)
!3949 = distinct !DISubprogram(name: "check_format_info_main", scope: !3, file: !3, line: 1443, type: !3950, scopeLine: 1447, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!3950 = !DISubroutineType(types: !3951)
!3951 = !{null, !2072, !2084, !1646, !1140, !1348, !1402, !3672}
!3952 = !DILocalVariable(name: "res", arg: 1, scope: !3949, file: !3, line: 1443, type: !2072)
!3953 = !DILocation(line: 1443, column: 47, scope: !3949)
!3954 = !DILocalVariable(name: "info", arg: 2, scope: !3949, file: !3, line: 1444, type: !2084)
!3955 = !DILocation(line: 1444, column: 26, scope: !3949)
!3956 = !DILocalVariable(name: "format_chars", arg: 3, scope: !3949, file: !3, line: 1444, type: !1646)
!3957 = !DILocation(line: 1444, column: 44, scope: !3949)
!3958 = !DILocalVariable(name: "format_length", arg: 4, scope: !3949, file: !3, line: 1445, type: !1140)
!3959 = !DILocation(line: 1445, column: 8, scope: !3949)
!3960 = !DILocalVariable(name: "params", arg: 5, scope: !3949, file: !3, line: 1445, type: !1348)
!3961 = !DILocation(line: 1445, column: 28, scope: !3949)
!3962 = !DILocalVariable(name: "arg_num", arg: 6, scope: !3949, file: !3, line: 1446, type: !1402)
!3963 = !DILocation(line: 1446, column: 48, scope: !3949)
!3964 = !DILocalVariable(name: "fwt_pool", arg: 7, scope: !3949, file: !3, line: 1446, type: !3672)
!3965 = !DILocation(line: 1446, column: 68, scope: !3949)
!3966 = !DILocalVariable(name: "orig_format_chars", scope: !3949, file: !3, line: 1448, type: !1646)
!3967 = !DILocation(line: 1448, column: 15, scope: !3949)
!3968 = !DILocation(line: 1448, column: 35, scope: !3949)
!3969 = !DILocalVariable(name: "first_fillin_param", scope: !3949, file: !3, line: 1449, type: !1348)
!3970 = !DILocation(line: 1449, column: 8, scope: !3949)
!3971 = !DILocation(line: 1449, column: 29, scope: !3949)
!3972 = !DILocalVariable(name: "fki", scope: !3949, file: !3, line: 1451, type: !2285)
!3973 = !DILocation(line: 1451, column: 27, scope: !3949)
!3974 = !DILocation(line: 1451, column: 34, scope: !3949)
!3975 = !DILocation(line: 1451, column: 47, scope: !3949)
!3976 = !DILocation(line: 1451, column: 53, scope: !3949)
!3977 = !DILocalVariable(name: "flag_specs", scope: !3949, file: !3, line: 1452, type: !2037)
!3978 = !DILocation(line: 1452, column: 27, scope: !3949)
!3979 = !DILocation(line: 1452, column: 40, scope: !3949)
!3980 = !DILocation(line: 1452, column: 45, scope: !3949)
!3981 = !DILocalVariable(name: "bad_flag_pairs", scope: !3949, file: !3, line: 1453, type: !2049)
!3982 = !DILocation(line: 1453, column: 27, scope: !3949)
!3983 = !DILocation(line: 1453, column: 44, scope: !3949)
!3984 = !DILocation(line: 1453, column: 49, scope: !3949)
!3985 = !DILocalVariable(name: "has_operand_number", scope: !3949, file: !3, line: 1457, type: !1140)
!3986 = !DILocation(line: 1457, column: 7, scope: !3949)
!3987 = !DILocation(line: 1459, column: 32, scope: !3949)
!3988 = !DILocation(line: 1459, column: 38, scope: !3949)
!3989 = !DILocation(line: 1459, column: 53, scope: !3949)
!3990 = !DILocation(line: 1459, column: 3, scope: !3949)
!3991 = !DILocation(line: 1461, column: 3, scope: !3949)
!3992 = !DILocalVariable(name: "i", scope: !3993, file: !3, line: 1463, type: !1140)
!3993 = distinct !DILexicalBlock(scope: !3949, file: !3, line: 1462, column: 5)
!3994 = !DILocation(line: 1463, column: 11, scope: !3993)
!3995 = !DILocalVariable(name: "suppressed", scope: !3993, file: !3, line: 1464, type: !1140)
!3996 = !DILocation(line: 1464, column: 11, scope: !3993)
!3997 = !DILocalVariable(name: "length_chars", scope: !3993, file: !3, line: 1465, type: !1646)
!3998 = !DILocation(line: 1465, column: 19, scope: !3993)
!3999 = !DILocalVariable(name: "length_chars_val", scope: !3993, file: !3, line: 1466, type: !1150)
!4000 = !DILocation(line: 1466, column: 27, scope: !3993)
!4001 = !DILocalVariable(name: "length_chars_std", scope: !3993, file: !3, line: 1467, type: !1165)
!4002 = !DILocation(line: 1467, column: 31, scope: !3993)
!4003 = !DILocalVariable(name: "format_char", scope: !3993, file: !3, line: 1468, type: !1140)
!4004 = !DILocation(line: 1468, column: 11, scope: !3993)
!4005 = !DILocalVariable(name: "cur_param", scope: !3993, file: !3, line: 1469, type: !1348)
!4006 = !DILocation(line: 1469, column: 12, scope: !3993)
!4007 = !DILocalVariable(name: "wanted_type", scope: !3993, file: !3, line: 1470, type: !1348)
!4008 = !DILocation(line: 1470, column: 12, scope: !3993)
!4009 = !DILocalVariable(name: "main_arg_num", scope: !3993, file: !3, line: 1471, type: !1140)
!4010 = !DILocation(line: 1471, column: 11, scope: !3993)
!4011 = !DILocalVariable(name: "main_arg_params", scope: !3993, file: !3, line: 1472, type: !1348)
!4012 = !DILocation(line: 1472, column: 12, scope: !3993)
!4013 = !DILocalVariable(name: "wanted_type_std", scope: !3993, file: !3, line: 1473, type: !1165)
!4014 = !DILocation(line: 1473, column: 31, scope: !3993)
!4015 = !DILocalVariable(name: "wanted_type_name", scope: !3993, file: !3, line: 1474, type: !1646)
!4016 = !DILocation(line: 1474, column: 19, scope: !3993)
!4017 = !DILocalVariable(name: "width_wanted_type", scope: !3993, file: !3, line: 1475, type: !2096)
!4018 = !DILocation(line: 1475, column: 26, scope: !3993)
!4019 = !DILocalVariable(name: "precision_wanted_type", scope: !3993, file: !3, line: 1476, type: !2096)
!4020 = !DILocation(line: 1476, column: 26, scope: !3993)
!4021 = !DILocalVariable(name: "main_wanted_type", scope: !3993, file: !3, line: 1477, type: !2096)
!4022 = !DILocation(line: 1477, column: 26, scope: !3993)
!4023 = !DILocalVariable(name: "first_wanted_type", scope: !3993, file: !3, line: 1478, type: !2095)
!4024 = !DILocation(line: 1478, column: 27, scope: !3993)
!4025 = !DILocalVariable(name: "last_wanted_type", scope: !3993, file: !3, line: 1479, type: !2095)
!4026 = !DILocation(line: 1479, column: 27, scope: !3993)
!4027 = !DILocalVariable(name: "fli", scope: !3993, file: !3, line: 1480, type: !1998)
!4028 = !DILocation(line: 1480, column: 33, scope: !3993)
!4029 = !DILocalVariable(name: "fci", scope: !3993, file: !3, line: 1481, type: !2011)
!4030 = !DILocation(line: 1481, column: 31, scope: !3993)
!4031 = !DILocalVariable(name: "flag_chars", scope: !3993, file: !3, line: 1482, type: !4032)
!4032 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1431, size: 2048, elements: !4033)
!4033 = !{!4034}
!4034 = !DISubrange(count: 256)
!4035 = !DILocation(line: 1482, column: 12, scope: !3993)
!4036 = !DILocalVariable(name: "alloc_flag", scope: !3993, file: !3, line: 1483, type: !1140)
!4037 = !DILocation(line: 1483, column: 11, scope: !3993)
!4038 = !DILocalVariable(name: "scalar_identity_flag", scope: !3993, file: !3, line: 1484, type: !1140)
!4039 = !DILocation(line: 1484, column: 11, scope: !3993)
!4040 = !DILocalVariable(name: "format_start", scope: !3993, file: !3, line: 1485, type: !1646)
!4041 = !DILocation(line: 1485, column: 19, scope: !3993)
!4042 = !DILocation(line: 1485, column: 34, scope: !3993)
!4043 = !DILocation(line: 1486, column: 12, scope: !4044)
!4044 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1486, column: 11)
!4045 = !DILocation(line: 1486, column: 11, scope: !4044)
!4046 = !DILocation(line: 1486, column: 25, scope: !4044)
!4047 = !DILocation(line: 1486, column: 11, scope: !3993)
!4048 = !DILocation(line: 1488, column: 8, scope: !4049)
!4049 = distinct !DILexicalBlock(scope: !4050, file: !3, line: 1488, column: 8)
!4050 = distinct !DILexicalBlock(scope: !4044, file: !3, line: 1487, column: 2)
!4051 = !DILocation(line: 1488, column: 23, scope: !4049)
!4052 = !DILocation(line: 1488, column: 21, scope: !4049)
!4053 = !DILocation(line: 1488, column: 44, scope: !4049)
!4054 = !DILocation(line: 1488, column: 41, scope: !4049)
!4055 = !DILocation(line: 1488, column: 8, scope: !4050)
!4056 = !DILocation(line: 1489, column: 6, scope: !4049)
!4057 = !DILocation(line: 1490, column: 8, scope: !4058)
!4058 = distinct !DILexicalBlock(scope: !4050, file: !3, line: 1490, column: 8)
!4059 = !DILocation(line: 1490, column: 14, scope: !4058)
!4060 = !DILocation(line: 1490, column: 28, scope: !4058)
!4061 = !DILocation(line: 1490, column: 33, scope: !4058)
!4062 = !DILocation(line: 1490, column: 36, scope: !4058)
!4063 = !DILocation(line: 1490, column: 43, scope: !4058)
!4064 = !DILocation(line: 1491, column: 8, scope: !4058)
!4065 = !DILocation(line: 1491, column: 11, scope: !4058)
!4066 = !DILocation(line: 1491, column: 30, scope: !4058)
!4067 = !DILocation(line: 1490, column: 8, scope: !4050)
!4068 = !DILocation(line: 1493, column: 8, scope: !4069)
!4069 = distinct !DILexicalBlock(scope: !4058, file: !3, line: 1492, column: 6)
!4070 = !DILocation(line: 1493, column: 13, scope: !4069)
!4071 = !DILocation(line: 1493, column: 25, scope: !4069)
!4072 = !DILocation(line: 1494, column: 8, scope: !4069)
!4073 = !DILocation(line: 1494, column: 13, scope: !4069)
!4074 = !DILocation(line: 1494, column: 30, scope: !4069)
!4075 = !DILocation(line: 1495, column: 6, scope: !4069)
!4076 = !DILocation(line: 1496, column: 8, scope: !4077)
!4077 = distinct !DILexicalBlock(scope: !4050, file: !3, line: 1496, column: 8)
!4078 = !DILocation(line: 1496, column: 27, scope: !4077)
!4079 = !DILocation(line: 1496, column: 8, scope: !4050)
!4080 = !DILocation(line: 1497, column: 37, scope: !4077)
!4081 = !DILocation(line: 1497, column: 42, scope: !4077)
!4082 = !DILocation(line: 1497, column: 47, scope: !4077)
!4083 = !DILocation(line: 1497, column: 53, scope: !4077)
!4084 = !DILocation(line: 1497, column: 6, scope: !4077)
!4085 = !DILocation(line: 1498, column: 4, scope: !4050)
!4086 = !DILocation(line: 1500, column: 24, scope: !4087)
!4087 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1500, column: 11)
!4088 = !DILocation(line: 1500, column: 11, scope: !4087)
!4089 = !DILocation(line: 1500, column: 27, scope: !4087)
!4090 = !DILocation(line: 1500, column: 11, scope: !3993)
!4091 = !DILocation(line: 1501, column: 2, scope: !4087)
!4092 = distinct !{!4092, !3991, !4093}
!4093 = !DILocation(line: 2124, column: 5, scope: !3949)
!4094 = !DILocation(line: 1502, column: 12, scope: !4095)
!4095 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1502, column: 11)
!4096 = !DILocation(line: 1502, column: 11, scope: !4095)
!4097 = !DILocation(line: 1502, column: 25, scope: !4095)
!4098 = !DILocation(line: 1502, column: 11, scope: !3993)
!4099 = !DILocation(line: 1504, column: 4, scope: !4100)
!4100 = distinct !DILexicalBlock(scope: !4095, file: !3, line: 1503, column: 2)
!4101 = !DILocation(line: 1505, column: 4, scope: !4100)
!4102 = !DILocation(line: 1507, column: 12, scope: !4103)
!4103 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1507, column: 11)
!4104 = !DILocation(line: 1507, column: 11, scope: !4103)
!4105 = !DILocation(line: 1507, column: 25, scope: !4103)
!4106 = !DILocation(line: 1507, column: 11, scope: !3993)
!4107 = !DILocation(line: 1509, column: 4, scope: !4108)
!4108 = distinct !DILexicalBlock(scope: !4103, file: !3, line: 1508, column: 2)
!4109 = !DILocation(line: 1510, column: 4, scope: !4108)
!4110 = !DILocation(line: 1512, column: 7, scope: !3993)
!4111 = !DILocation(line: 1512, column: 21, scope: !3993)
!4112 = !DILocation(line: 1514, column: 12, scope: !4113)
!4113 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1514, column: 11)
!4114 = !DILocation(line: 1514, column: 17, scope: !4113)
!4115 = !DILocation(line: 1514, column: 23, scope: !4113)
!4116 = !DILocation(line: 1514, column: 52, scope: !4113)
!4117 = !DILocation(line: 1514, column: 55, scope: !4113)
!4118 = !DILocation(line: 1514, column: 74, scope: !4113)
!4119 = !DILocation(line: 1514, column: 11, scope: !3993)
!4120 = !DILocalVariable(name: "opnum", scope: !4121, file: !3, line: 1520, type: !1140)
!4121 = distinct !DILexicalBlock(scope: !4113, file: !3, line: 1515, column: 2)
!4122 = !DILocation(line: 1520, column: 8, scope: !4121)
!4123 = !DILocation(line: 1522, column: 10, scope: !4121)
!4124 = !DILocation(line: 1523, column: 28, scope: !4121)
!4125 = !DILocation(line: 1521, column: 12, scope: !4121)
!4126 = !DILocation(line: 1521, column: 10, scope: !4121)
!4127 = !DILocation(line: 1524, column: 8, scope: !4128)
!4128 = distinct !DILexicalBlock(scope: !4121, file: !3, line: 1524, column: 8)
!4129 = !DILocation(line: 1524, column: 14, scope: !4128)
!4130 = !DILocation(line: 1524, column: 8, scope: !4121)
!4131 = !DILocation(line: 1525, column: 6, scope: !4128)
!4132 = !DILocation(line: 1526, column: 13, scope: !4133)
!4133 = distinct !DILexicalBlock(scope: !4128, file: !3, line: 1526, column: 13)
!4134 = !DILocation(line: 1526, column: 19, scope: !4133)
!4135 = !DILocation(line: 1526, column: 13, scope: !4128)
!4136 = !DILocation(line: 1528, column: 27, scope: !4137)
!4137 = distinct !DILexicalBlock(scope: !4133, file: !3, line: 1527, column: 6)
!4138 = !DILocation(line: 1529, column: 23, scope: !4137)
!4139 = !DILocation(line: 1529, column: 31, scope: !4137)
!4140 = !DILocation(line: 1529, column: 37, scope: !4137)
!4141 = !DILocation(line: 1529, column: 29, scope: !4137)
!4142 = !DILocation(line: 1529, column: 51, scope: !4137)
!4143 = !DILocation(line: 1529, column: 21, scope: !4137)
!4144 = !DILocation(line: 1530, column: 6, scope: !4137)
!4145 = !DILocation(line: 1531, column: 2, scope: !4121)
!4146 = !DILocation(line: 1532, column: 16, scope: !4147)
!4147 = distinct !DILexicalBlock(scope: !4113, file: !3, line: 1532, column: 16)
!4148 = !DILocation(line: 1532, column: 21, scope: !4147)
!4149 = !DILocation(line: 1532, column: 27, scope: !4147)
!4150 = !DILocation(line: 1532, column: 16, scope: !4113)
!4151 = !DILocation(line: 1534, column: 29, scope: !4152)
!4152 = distinct !DILexicalBlock(scope: !4153, file: !3, line: 1534, column: 8)
!4153 = distinct !DILexicalBlock(scope: !4147, file: !3, line: 1533, column: 2)
!4154 = !DILocation(line: 1534, column: 8, scope: !4152)
!4155 = !DILocation(line: 1534, column: 8, scope: !4153)
!4156 = !DILocation(line: 1535, column: 6, scope: !4152)
!4157 = !DILocation(line: 1536, column: 2, scope: !4153)
!4158 = !DILocation(line: 1541, column: 7, scope: !3993)
!4159 = !DILocation(line: 1541, column: 15, scope: !3993)
!4160 = !DILocation(line: 1541, column: 14, scope: !3993)
!4161 = !DILocation(line: 1541, column: 28, scope: !3993)
!4162 = !DILocation(line: 1542, column: 7, scope: !3993)
!4163 = !DILocation(line: 1542, column: 18, scope: !3993)
!4164 = !DILocation(line: 1542, column: 23, scope: !3993)
!4165 = !DILocation(line: 1542, column: 36, scope: !3993)
!4166 = !DILocation(line: 1542, column: 35, scope: !3993)
!4167 = !DILocation(line: 1542, column: 10, scope: !3993)
!4168 = !DILocation(line: 1542, column: 50, scope: !3993)
!4169 = !DILocation(line: 0, scope: !3993)
!4170 = !DILocalVariable(name: "s", scope: !4171, file: !3, line: 1544, type: !2037)
!4171 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1543, column: 2)
!4172 = !DILocation(line: 1544, column: 28, scope: !4171)
!4173 = !DILocation(line: 1544, column: 47, scope: !4171)
!4174 = !DILocation(line: 1545, column: 13, scope: !4171)
!4175 = !DILocation(line: 1545, column: 12, scope: !4171)
!4176 = !DILocation(line: 1544, column: 32, scope: !4171)
!4177 = !DILocation(line: 1546, column: 16, scope: !4178)
!4178 = distinct !DILexicalBlock(scope: !4171, file: !3, line: 1546, column: 8)
!4179 = !DILocation(line: 1546, column: 29, scope: !4178)
!4180 = !DILocation(line: 1546, column: 28, scope: !4178)
!4181 = !DILocation(line: 1546, column: 8, scope: !4178)
!4182 = !DILocation(line: 1546, column: 43, scope: !4178)
!4183 = !DILocation(line: 1546, column: 8, scope: !4171)
!4184 = !DILocation(line: 1548, column: 55, scope: !4185)
!4185 = distinct !DILexicalBlock(scope: !4178, file: !3, line: 1547, column: 6)
!4186 = !DILocation(line: 1548, column: 8, scope: !4185)
!4187 = !DILocation(line: 1549, column: 6, scope: !4185)
!4188 = !DILocation(line: 1552, column: 20, scope: !4189)
!4189 = distinct !DILexicalBlock(scope: !4178, file: !3, line: 1551, column: 6)
!4190 = !DILocation(line: 1552, column: 12, scope: !4189)
!4191 = !DILocation(line: 1552, column: 10, scope: !4189)
!4192 = !DILocation(line: 1553, column: 27, scope: !4189)
!4193 = !DILocation(line: 1553, column: 26, scope: !4189)
!4194 = !DILocation(line: 1553, column: 20, scope: !4189)
!4195 = !DILocation(line: 1553, column: 8, scope: !4189)
!4196 = !DILocation(line: 1553, column: 24, scope: !4189)
!4197 = !DILocation(line: 1554, column: 19, scope: !4189)
!4198 = !DILocation(line: 1554, column: 8, scope: !4189)
!4199 = !DILocation(line: 1554, column: 22, scope: !4189)
!4200 = !DILocation(line: 1556, column: 8, scope: !4201)
!4201 = distinct !DILexicalBlock(scope: !4171, file: !3, line: 1556, column: 8)
!4202 = !DILocation(line: 1556, column: 11, scope: !4201)
!4203 = !DILocation(line: 1556, column: 8, scope: !4171)
!4204 = !DILocation(line: 1558, column: 8, scope: !4205)
!4205 = distinct !DILexicalBlock(scope: !4201, file: !3, line: 1557, column: 6)
!4206 = !DILocation(line: 1559, column: 13, scope: !4207)
!4207 = distinct !DILexicalBlock(scope: !4205, file: !3, line: 1559, column: 12)
!4208 = !DILocation(line: 1559, column: 12, scope: !4207)
!4209 = !DILocation(line: 1559, column: 26, scope: !4207)
!4210 = !DILocation(line: 1559, column: 12, scope: !4205)
!4211 = !DILocation(line: 1561, column: 5, scope: !4212)
!4212 = distinct !DILexicalBlock(scope: !4207, file: !3, line: 1560, column: 3)
!4213 = !DILocation(line: 1562, column: 5, scope: !4212)
!4214 = !DILocation(line: 1564, column: 6, scope: !4205)
!4215 = !DILocation(line: 1565, column: 4, scope: !4171)
!4216 = distinct !{!4216, !4158, !4217}
!4217 = !DILocation(line: 1566, column: 2, scope: !3993)
!4218 = !DILocation(line: 1569, column: 11, scope: !4219)
!4219 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1569, column: 11)
!4220 = !DILocation(line: 1569, column: 16, scope: !4219)
!4221 = !DILocation(line: 1569, column: 27, scope: !4219)
!4222 = !DILocation(line: 1569, column: 11, scope: !3993)
!4223 = !DILocation(line: 1571, column: 8, scope: !4224)
!4224 = distinct !DILexicalBlock(scope: !4225, file: !3, line: 1571, column: 8)
!4225 = distinct !DILexicalBlock(scope: !4219, file: !3, line: 1570, column: 2)
!4226 = !DILocation(line: 1571, column: 13, scope: !4224)
!4227 = !DILocation(line: 1571, column: 24, scope: !4224)
!4228 = !DILocation(line: 1571, column: 32, scope: !4224)
!4229 = !DILocation(line: 1571, column: 36, scope: !4224)
!4230 = !DILocation(line: 1571, column: 35, scope: !4224)
!4231 = !DILocation(line: 1571, column: 49, scope: !4224)
!4232 = !DILocation(line: 1571, column: 8, scope: !4225)
!4233 = !DILocation(line: 1573, column: 20, scope: !4234)
!4234 = distinct !DILexicalBlock(scope: !4224, file: !3, line: 1572, column: 6)
!4235 = !DILocation(line: 1573, column: 12, scope: !4234)
!4236 = !DILocation(line: 1573, column: 10, scope: !4234)
!4237 = !DILocation(line: 1574, column: 26, scope: !4234)
!4238 = !DILocation(line: 1574, column: 31, scope: !4234)
!4239 = !DILocation(line: 1574, column: 20, scope: !4234)
!4240 = !DILocation(line: 1574, column: 8, scope: !4234)
!4241 = !DILocation(line: 1574, column: 24, scope: !4234)
!4242 = !DILocation(line: 1575, column: 19, scope: !4234)
!4243 = !DILocation(line: 1575, column: 8, scope: !4234)
!4244 = !DILocation(line: 1575, column: 22, scope: !4234)
!4245 = !DILocation(line: 1578, column: 8, scope: !4234)
!4246 = !DILocation(line: 1579, column: 12, scope: !4247)
!4247 = distinct !DILexicalBlock(scope: !4234, file: !3, line: 1579, column: 12)
!4248 = !DILocation(line: 1579, column: 31, scope: !4247)
!4249 = !DILocation(line: 1579, column: 12, scope: !4234)
!4250 = !DILocalVariable(name: "opnum", scope: !4251, file: !3, line: 1581, type: !1140)
!4251 = distinct !DILexicalBlock(scope: !4247, file: !3, line: 1580, column: 3)
!4252 = !DILocation(line: 1581, column: 9, scope: !4251)
!4253 = !DILocation(line: 1583, column: 11, scope: !4251)
!4254 = !DILocation(line: 1583, column: 30, scope: !4251)
!4255 = !DILocation(line: 1584, column: 11, scope: !4251)
!4256 = !DILocation(line: 1585, column: 20, scope: !4251)
!4257 = !DILocation(line: 1582, column: 13, scope: !4251)
!4258 = !DILocation(line: 1582, column: 11, scope: !4251)
!4259 = !DILocation(line: 1586, column: 9, scope: !4260)
!4260 = distinct !DILexicalBlock(scope: !4251, file: !3, line: 1586, column: 9)
!4261 = !DILocation(line: 1586, column: 15, scope: !4260)
!4262 = !DILocation(line: 1586, column: 9, scope: !4251)
!4263 = !DILocation(line: 1587, column: 7, scope: !4260)
!4264 = !DILocation(line: 1588, column: 14, scope: !4265)
!4265 = distinct !DILexicalBlock(scope: !4260, file: !3, line: 1588, column: 14)
!4266 = !DILocation(line: 1588, column: 20, scope: !4265)
!4267 = !DILocation(line: 1588, column: 14, scope: !4260)
!4268 = !DILocation(line: 1590, column: 28, scope: !4269)
!4269 = distinct !DILexicalBlock(scope: !4265, file: !3, line: 1589, column: 7)
!4270 = !DILocation(line: 1591, column: 19, scope: !4269)
!4271 = !DILocation(line: 1591, column: 27, scope: !4269)
!4272 = !DILocation(line: 1591, column: 33, scope: !4269)
!4273 = !DILocation(line: 1591, column: 25, scope: !4269)
!4274 = !DILocation(line: 1591, column: 47, scope: !4269)
!4275 = !DILocation(line: 1591, column: 17, scope: !4269)
!4276 = !DILocation(line: 1592, column: 7, scope: !4269)
!4277 = !DILocation(line: 1594, column: 26, scope: !4265)
!4278 = !DILocation(line: 1595, column: 3, scope: !4251)
!4279 = !DILocation(line: 1598, column: 30, scope: !4280)
!4280 = distinct !DILexicalBlock(scope: !4281, file: !3, line: 1598, column: 9)
!4281 = distinct !DILexicalBlock(scope: !4247, file: !3, line: 1597, column: 3)
!4282 = !DILocation(line: 1598, column: 9, scope: !4280)
!4283 = !DILocation(line: 1598, column: 9, scope: !4281)
!4284 = !DILocation(line: 1599, column: 7, scope: !4280)
!4285 = !DILocation(line: 1601, column: 12, scope: !4286)
!4286 = distinct !DILexicalBlock(scope: !4234, file: !3, line: 1601, column: 12)
!4287 = !DILocation(line: 1601, column: 18, scope: !4286)
!4288 = !DILocation(line: 1601, column: 32, scope: !4286)
!4289 = !DILocation(line: 1601, column: 12, scope: !4234)
!4290 = !DILocation(line: 1603, column: 9, scope: !4291)
!4291 = distinct !DILexicalBlock(scope: !4292, file: !3, line: 1603, column: 9)
!4292 = distinct !DILexicalBlock(scope: !4286, file: !3, line: 1602, column: 3)
!4293 = !DILocation(line: 1603, column: 16, scope: !4291)
!4294 = !DILocation(line: 1603, column: 9, scope: !4292)
!4295 = !DILocation(line: 1605, column: 9, scope: !4296)
!4296 = distinct !DILexicalBlock(scope: !4291, file: !3, line: 1604, column: 7)
!4297 = !DILocation(line: 1606, column: 9, scope: !4296)
!4298 = !DILocation(line: 1608, column: 17, scope: !4292)
!4299 = !DILocation(line: 1608, column: 15, scope: !4292)
!4300 = !DILocation(line: 1609, column: 9, scope: !4301)
!4301 = distinct !DILexicalBlock(scope: !4292, file: !3, line: 1609, column: 9)
!4302 = !DILocation(line: 1609, column: 28, scope: !4301)
!4303 = !DILocation(line: 1609, column: 9, scope: !4292)
!4304 = !DILocation(line: 1611, column: 18, scope: !4305)
!4305 = distinct !DILexicalBlock(scope: !4301, file: !3, line: 1610, column: 7)
!4306 = !DILocation(line: 1611, column: 16, scope: !4305)
!4307 = !DILocation(line: 1612, column: 9, scope: !4305)
!4308 = !DILocation(line: 1613, column: 7, scope: !4305)
!4309 = !DILocation(line: 1614, column: 38, scope: !4292)
!4310 = !DILocation(line: 1614, column: 43, scope: !4292)
!4311 = !DILocation(line: 1614, column: 37, scope: !4292)
!4312 = !DILocation(line: 1614, column: 23, scope: !4292)
!4313 = !DILocation(line: 1614, column: 35, scope: !4292)
!4314 = !DILocation(line: 1615, column: 23, scope: !4292)
!4315 = !DILocation(line: 1615, column: 40, scope: !4292)
!4316 = !DILocation(line: 1616, column: 23, scope: !4292)
!4317 = !DILocation(line: 1616, column: 37, scope: !4292)
!4318 = !DILocation(line: 1617, column: 23, scope: !4292)
!4319 = !DILocation(line: 1617, column: 41, scope: !4292)
!4320 = !DILocation(line: 1618, column: 23, scope: !4292)
!4321 = !DILocation(line: 1618, column: 44, scope: !4292)
!4322 = !DILocation(line: 1619, column: 23, scope: !4292)
!4323 = !DILocation(line: 1619, column: 39, scope: !4292)
!4324 = !DILocation(line: 1620, column: 23, scope: !4292)
!4325 = !DILocation(line: 1620, column: 41, scope: !4292)
!4326 = !DILocation(line: 1621, column: 23, scope: !4292)
!4327 = !DILocation(line: 1621, column: 28, scope: !4292)
!4328 = !DILocation(line: 1622, column: 31, scope: !4292)
!4329 = !DILocation(line: 1622, column: 23, scope: !4292)
!4330 = !DILocation(line: 1622, column: 29, scope: !4292)
!4331 = !DILocation(line: 1623, column: 33, scope: !4292)
!4332 = !DILocation(line: 1623, column: 23, scope: !4292)
!4333 = !DILocation(line: 1623, column: 31, scope: !4292)
!4334 = !DILocation(line: 1624, column: 23, scope: !4292)
!4335 = !DILocation(line: 1624, column: 28, scope: !4292)
!4336 = !DILocation(line: 1625, column: 9, scope: !4337)
!4337 = distinct !DILexicalBlock(scope: !4292, file: !3, line: 1625, column: 9)
!4338 = !DILocation(line: 1625, column: 26, scope: !4337)
!4339 = !DILocation(line: 1625, column: 9, scope: !4292)
!4340 = !DILocation(line: 1626, column: 7, scope: !4337)
!4341 = !DILocation(line: 1626, column: 25, scope: !4337)
!4342 = !DILocation(line: 1626, column: 30, scope: !4337)
!4343 = !DILocation(line: 1627, column: 9, scope: !4344)
!4344 = distinct !DILexicalBlock(scope: !4292, file: !3, line: 1627, column: 9)
!4345 = !DILocation(line: 1627, column: 27, scope: !4344)
!4346 = !DILocation(line: 1627, column: 9, scope: !4292)
!4347 = !DILocation(line: 1628, column: 25, scope: !4344)
!4348 = !DILocation(line: 1628, column: 7, scope: !4344)
!4349 = !DILocation(line: 1629, column: 22, scope: !4292)
!4350 = !DILocation(line: 1630, column: 3, scope: !4292)
!4351 = !DILocation(line: 1631, column: 6, scope: !4234)
!4352 = !DILocalVariable(name: "non_zero_width_char", scope: !4353, file: !3, line: 1636, type: !1140)
!4353 = distinct !DILexicalBlock(scope: !4224, file: !3, line: 1633, column: 6)
!4354 = !DILocation(line: 1636, column: 12, scope: !4353)
!4355 = !DILocalVariable(name: "found_width", scope: !4353, file: !3, line: 1637, type: !1140)
!4356 = !DILocation(line: 1637, column: 12, scope: !4353)
!4357 = !DILocation(line: 1638, column: 8, scope: !4353)
!4358 = !DILocation(line: 1638, column: 15, scope: !4353)
!4359 = !DILocation(line: 1640, column: 17, scope: !4360)
!4360 = distinct !DILexicalBlock(scope: !4353, file: !3, line: 1639, column: 3)
!4361 = !DILocation(line: 1641, column: 10, scope: !4362)
!4362 = distinct !DILexicalBlock(scope: !4360, file: !3, line: 1641, column: 9)
!4363 = !DILocation(line: 1641, column: 9, scope: !4362)
!4364 = !DILocation(line: 1641, column: 23, scope: !4362)
!4365 = !DILocation(line: 1641, column: 9, scope: !4360)
!4366 = !DILocation(line: 1642, column: 27, scope: !4362)
!4367 = !DILocation(line: 1642, column: 7, scope: !4362)
!4368 = !DILocation(line: 1643, column: 5, scope: !4360)
!4369 = distinct !{!4369, !4357, !4370}
!4370 = !DILocation(line: 1644, column: 3, scope: !4353)
!4371 = !DILocation(line: 1645, column: 12, scope: !4372)
!4372 = distinct !DILexicalBlock(scope: !4353, file: !3, line: 1645, column: 12)
!4373 = !DILocation(line: 1645, column: 24, scope: !4372)
!4374 = !DILocation(line: 1645, column: 28, scope: !4372)
!4375 = !DILocation(line: 1645, column: 48, scope: !4372)
!4376 = !DILocation(line: 1646, column: 6, scope: !4372)
!4377 = !DILocation(line: 1646, column: 11, scope: !4372)
!4378 = !DILocation(line: 1646, column: 17, scope: !4372)
!4379 = !DILocation(line: 1645, column: 12, scope: !4353)
!4380 = !DILocation(line: 1647, column: 52, scope: !4372)
!4381 = !DILocation(line: 1647, column: 57, scope: !4372)
!4382 = !DILocation(line: 1647, column: 3, scope: !4372)
!4383 = !DILocation(line: 1648, column: 12, scope: !4384)
!4384 = distinct !DILexicalBlock(scope: !4353, file: !3, line: 1648, column: 12)
!4385 = !DILocation(line: 1648, column: 12, scope: !4353)
!4386 = !DILocation(line: 1650, column: 17, scope: !4387)
!4387 = distinct !DILexicalBlock(scope: !4384, file: !3, line: 1649, column: 3)
!4388 = !DILocation(line: 1650, column: 9, scope: !4387)
!4389 = !DILocation(line: 1650, column: 7, scope: !4387)
!4390 = !DILocation(line: 1651, column: 23, scope: !4387)
!4391 = !DILocation(line: 1651, column: 28, scope: !4387)
!4392 = !DILocation(line: 1651, column: 17, scope: !4387)
!4393 = !DILocation(line: 1651, column: 5, scope: !4387)
!4394 = !DILocation(line: 1651, column: 21, scope: !4387)
!4395 = !DILocation(line: 1652, column: 16, scope: !4387)
!4396 = !DILocation(line: 1652, column: 5, scope: !4387)
!4397 = !DILocation(line: 1652, column: 19, scope: !4387)
!4398 = !DILocation(line: 1653, column: 3, scope: !4387)
!4399 = !DILocation(line: 1655, column: 2, scope: !4225)
!4400 = !DILocation(line: 1658, column: 11, scope: !4401)
!4401 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1658, column: 11)
!4402 = !DILocation(line: 1658, column: 16, scope: !4401)
!4403 = !DILocation(line: 1658, column: 36, scope: !4401)
!4404 = !DILocation(line: 1658, column: 41, scope: !4401)
!4405 = !DILocation(line: 1658, column: 45, scope: !4401)
!4406 = !DILocation(line: 1658, column: 44, scope: !4401)
!4407 = !DILocation(line: 1658, column: 58, scope: !4401)
!4408 = !DILocation(line: 1658, column: 11, scope: !3993)
!4409 = !DILocation(line: 1660, column: 4, scope: !4410)
!4410 = distinct !DILexicalBlock(scope: !4401, file: !3, line: 1659, column: 2)
!4411 = !DILocation(line: 1661, column: 16, scope: !4410)
!4412 = !DILocation(line: 1661, column: 8, scope: !4410)
!4413 = !DILocation(line: 1661, column: 6, scope: !4410)
!4414 = !DILocation(line: 1662, column: 22, scope: !4410)
!4415 = !DILocation(line: 1662, column: 27, scope: !4410)
!4416 = !DILocation(line: 1662, column: 16, scope: !4410)
!4417 = !DILocation(line: 1662, column: 4, scope: !4410)
!4418 = !DILocation(line: 1662, column: 20, scope: !4410)
!4419 = !DILocation(line: 1663, column: 15, scope: !4410)
!4420 = !DILocation(line: 1663, column: 4, scope: !4410)
!4421 = !DILocation(line: 1663, column: 18, scope: !4410)
!4422 = !DILocation(line: 1664, column: 9, scope: !4423)
!4423 = distinct !DILexicalBlock(scope: !4410, file: !3, line: 1664, column: 8)
!4424 = !DILocation(line: 1664, column: 8, scope: !4410)
!4425 = !DILocation(line: 1665, column: 65, scope: !4423)
!4426 = !DILocation(line: 1665, column: 70, scope: !4423)
!4427 = !DILocation(line: 1665, column: 6, scope: !4423)
!4428 = !DILocation(line: 1666, column: 4, scope: !4410)
!4429 = !DILocation(line: 1666, column: 11, scope: !4410)
!4430 = !DILocation(line: 1667, column: 6, scope: !4410)
!4431 = distinct !{!4431, !4428, !4432}
!4432 = !DILocation(line: 1667, column: 8, scope: !4410)
!4433 = !DILocation(line: 1668, column: 2, scope: !4410)
!4434 = !DILocation(line: 1671, column: 11, scope: !4435)
!4435 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1671, column: 11)
!4436 = !DILocation(line: 1671, column: 16, scope: !4435)
!4437 = !DILocation(line: 1671, column: 31, scope: !4435)
!4438 = !DILocation(line: 1671, column: 36, scope: !4435)
!4439 = !DILocation(line: 1671, column: 40, scope: !4435)
!4440 = !DILocation(line: 1671, column: 39, scope: !4435)
!4441 = !DILocation(line: 1671, column: 53, scope: !4435)
!4442 = !DILocation(line: 1671, column: 11, scope: !3993)
!4443 = !DILocation(line: 1673, column: 4, scope: !4444)
!4444 = distinct !DILexicalBlock(scope: !4435, file: !3, line: 1672, column: 2)
!4445 = !DILocation(line: 1674, column: 16, scope: !4444)
!4446 = !DILocation(line: 1674, column: 8, scope: !4444)
!4447 = !DILocation(line: 1674, column: 6, scope: !4444)
!4448 = !DILocation(line: 1675, column: 22, scope: !4444)
!4449 = !DILocation(line: 1675, column: 27, scope: !4444)
!4450 = !DILocation(line: 1675, column: 16, scope: !4444)
!4451 = !DILocation(line: 1675, column: 4, scope: !4444)
!4452 = !DILocation(line: 1675, column: 20, scope: !4444)
!4453 = !DILocation(line: 1676, column: 15, scope: !4444)
!4454 = !DILocation(line: 1676, column: 4, scope: !4444)
!4455 = !DILocation(line: 1676, column: 18, scope: !4444)
!4456 = !DILocation(line: 1677, column: 8, scope: !4457)
!4457 = distinct !DILexicalBlock(scope: !4444, file: !3, line: 1677, column: 8)
!4458 = !DILocation(line: 1677, column: 13, scope: !4457)
!4459 = !DILocation(line: 1677, column: 28, scope: !4457)
!4460 = !DILocation(line: 1677, column: 36, scope: !4457)
!4461 = !DILocation(line: 1677, column: 40, scope: !4457)
!4462 = !DILocation(line: 1677, column: 39, scope: !4457)
!4463 = !DILocation(line: 1677, column: 53, scope: !4457)
!4464 = !DILocation(line: 1677, column: 8, scope: !4444)
!4465 = !DILocation(line: 1681, column: 8, scope: !4466)
!4466 = distinct !DILexicalBlock(scope: !4457, file: !3, line: 1678, column: 6)
!4467 = !DILocation(line: 1682, column: 12, scope: !4468)
!4468 = distinct !DILexicalBlock(scope: !4466, file: !3, line: 1682, column: 12)
!4469 = !DILocation(line: 1682, column: 31, scope: !4468)
!4470 = !DILocation(line: 1682, column: 12, scope: !4466)
!4471 = !DILocalVariable(name: "opnum", scope: !4472, file: !3, line: 1684, type: !1140)
!4472 = distinct !DILexicalBlock(scope: !4468, file: !3, line: 1683, column: 3)
!4473 = !DILocation(line: 1684, column: 9, scope: !4472)
!4474 = !DILocation(line: 1686, column: 11, scope: !4472)
!4475 = !DILocation(line: 1686, column: 30, scope: !4472)
!4476 = !DILocation(line: 1687, column: 11, scope: !4472)
!4477 = !DILocation(line: 1688, column: 20, scope: !4472)
!4478 = !DILocation(line: 1685, column: 13, scope: !4472)
!4479 = !DILocation(line: 1685, column: 11, scope: !4472)
!4480 = !DILocation(line: 1689, column: 9, scope: !4481)
!4481 = distinct !DILexicalBlock(scope: !4472, file: !3, line: 1689, column: 9)
!4482 = !DILocation(line: 1689, column: 15, scope: !4481)
!4483 = !DILocation(line: 1689, column: 9, scope: !4472)
!4484 = !DILocation(line: 1690, column: 7, scope: !4481)
!4485 = !DILocation(line: 1691, column: 14, scope: !4486)
!4486 = distinct !DILexicalBlock(scope: !4481, file: !3, line: 1691, column: 14)
!4487 = !DILocation(line: 1691, column: 20, scope: !4486)
!4488 = !DILocation(line: 1691, column: 14, scope: !4481)
!4489 = !DILocation(line: 1693, column: 28, scope: !4490)
!4490 = distinct !DILexicalBlock(scope: !4486, file: !3, line: 1692, column: 7)
!4491 = !DILocation(line: 1694, column: 19, scope: !4490)
!4492 = !DILocation(line: 1694, column: 27, scope: !4490)
!4493 = !DILocation(line: 1694, column: 33, scope: !4490)
!4494 = !DILocation(line: 1694, column: 25, scope: !4490)
!4495 = !DILocation(line: 1694, column: 47, scope: !4490)
!4496 = !DILocation(line: 1694, column: 17, scope: !4490)
!4497 = !DILocation(line: 1695, column: 7, scope: !4490)
!4498 = !DILocation(line: 1697, column: 26, scope: !4486)
!4499 = !DILocation(line: 1698, column: 3, scope: !4472)
!4500 = !DILocation(line: 1701, column: 30, scope: !4501)
!4501 = distinct !DILexicalBlock(scope: !4502, file: !3, line: 1701, column: 9)
!4502 = distinct !DILexicalBlock(scope: !4468, file: !3, line: 1700, column: 3)
!4503 = !DILocation(line: 1701, column: 9, scope: !4501)
!4504 = !DILocation(line: 1701, column: 9, scope: !4502)
!4505 = !DILocation(line: 1702, column: 7, scope: !4501)
!4506 = !DILocation(line: 1704, column: 12, scope: !4507)
!4507 = distinct !DILexicalBlock(scope: !4466, file: !3, line: 1704, column: 12)
!4508 = !DILocation(line: 1704, column: 18, scope: !4507)
!4509 = !DILocation(line: 1704, column: 32, scope: !4507)
!4510 = !DILocation(line: 1704, column: 12, scope: !4466)
!4511 = !DILocation(line: 1706, column: 9, scope: !4512)
!4512 = distinct !DILexicalBlock(scope: !4513, file: !3, line: 1706, column: 9)
!4513 = distinct !DILexicalBlock(scope: !4507, file: !3, line: 1705, column: 3)
!4514 = !DILocation(line: 1706, column: 16, scope: !4512)
!4515 = !DILocation(line: 1706, column: 9, scope: !4513)
!4516 = !DILocation(line: 1708, column: 9, scope: !4517)
!4517 = distinct !DILexicalBlock(scope: !4512, file: !3, line: 1707, column: 7)
!4518 = !DILocation(line: 1709, column: 9, scope: !4517)
!4519 = !DILocation(line: 1711, column: 17, scope: !4513)
!4520 = !DILocation(line: 1711, column: 15, scope: !4513)
!4521 = !DILocation(line: 1712, column: 9, scope: !4522)
!4522 = distinct !DILexicalBlock(scope: !4513, file: !3, line: 1712, column: 9)
!4523 = !DILocation(line: 1712, column: 28, scope: !4522)
!4524 = !DILocation(line: 1712, column: 9, scope: !4513)
!4525 = !DILocation(line: 1714, column: 18, scope: !4526)
!4526 = distinct !DILexicalBlock(scope: !4522, file: !3, line: 1713, column: 7)
!4527 = !DILocation(line: 1714, column: 16, scope: !4526)
!4528 = !DILocation(line: 1715, column: 9, scope: !4526)
!4529 = !DILocation(line: 1716, column: 7, scope: !4526)
!4530 = !DILocation(line: 1717, column: 42, scope: !4513)
!4531 = !DILocation(line: 1717, column: 47, scope: !4513)
!4532 = !DILocation(line: 1717, column: 41, scope: !4513)
!4533 = !DILocation(line: 1717, column: 27, scope: !4513)
!4534 = !DILocation(line: 1717, column: 39, scope: !4513)
!4535 = !DILocation(line: 1718, column: 27, scope: !4513)
!4536 = !DILocation(line: 1718, column: 44, scope: !4513)
!4537 = !DILocation(line: 1719, column: 27, scope: !4513)
!4538 = !DILocation(line: 1719, column: 41, scope: !4513)
!4539 = !DILocation(line: 1720, column: 27, scope: !4513)
!4540 = !DILocation(line: 1720, column: 45, scope: !4513)
!4541 = !DILocation(line: 1721, column: 27, scope: !4513)
!4542 = !DILocation(line: 1721, column: 48, scope: !4513)
!4543 = !DILocation(line: 1722, column: 27, scope: !4513)
!4544 = !DILocation(line: 1722, column: 43, scope: !4513)
!4545 = !DILocation(line: 1723, column: 27, scope: !4513)
!4546 = !DILocation(line: 1723, column: 45, scope: !4513)
!4547 = !DILocation(line: 1724, column: 27, scope: !4513)
!4548 = !DILocation(line: 1724, column: 32, scope: !4513)
!4549 = !DILocation(line: 1725, column: 35, scope: !4513)
!4550 = !DILocation(line: 1725, column: 27, scope: !4513)
!4551 = !DILocation(line: 1725, column: 33, scope: !4513)
!4552 = !DILocation(line: 1726, column: 37, scope: !4513)
!4553 = !DILocation(line: 1726, column: 27, scope: !4513)
!4554 = !DILocation(line: 1726, column: 35, scope: !4513)
!4555 = !DILocation(line: 1727, column: 27, scope: !4513)
!4556 = !DILocation(line: 1727, column: 32, scope: !4513)
!4557 = !DILocation(line: 1728, column: 9, scope: !4558)
!4558 = distinct !DILexicalBlock(scope: !4513, file: !3, line: 1728, column: 9)
!4559 = !DILocation(line: 1728, column: 26, scope: !4558)
!4560 = !DILocation(line: 1728, column: 9, scope: !4513)
!4561 = !DILocation(line: 1729, column: 7, scope: !4558)
!4562 = !DILocation(line: 1729, column: 25, scope: !4558)
!4563 = !DILocation(line: 1729, column: 30, scope: !4558)
!4564 = !DILocation(line: 1730, column: 9, scope: !4565)
!4565 = distinct !DILexicalBlock(scope: !4513, file: !3, line: 1730, column: 9)
!4566 = !DILocation(line: 1730, column: 27, scope: !4565)
!4567 = !DILocation(line: 1730, column: 9, scope: !4513)
!4568 = !DILocation(line: 1731, column: 25, scope: !4565)
!4569 = !DILocation(line: 1731, column: 7, scope: !4565)
!4570 = !DILocation(line: 1732, column: 22, scope: !4513)
!4571 = !DILocation(line: 1733, column: 3, scope: !4513)
!4572 = !DILocation(line: 1734, column: 6, scope: !4466)
!4573 = !DILocation(line: 1737, column: 14, scope: !4574)
!4574 = distinct !DILexicalBlock(scope: !4575, file: !3, line: 1737, column: 12)
!4575 = distinct !DILexicalBlock(scope: !4457, file: !3, line: 1736, column: 6)
!4576 = !DILocation(line: 1737, column: 19, scope: !4574)
!4577 = !DILocation(line: 1737, column: 25, scope: !4574)
!4578 = !DILocation(line: 1738, column: 5, scope: !4574)
!4579 = !DILocation(line: 1738, column: 9, scope: !4574)
!4580 = !DILocation(line: 1737, column: 12, scope: !4575)
!4581 = !DILocation(line: 1739, column: 57, scope: !4574)
!4582 = !DILocation(line: 1739, column: 62, scope: !4574)
!4583 = !DILocation(line: 1739, column: 3, scope: !4574)
!4584 = !DILocation(line: 1740, column: 8, scope: !4575)
!4585 = !DILocation(line: 1740, column: 15, scope: !4575)
!4586 = !DILocation(line: 1741, column: 3, scope: !4575)
!4587 = distinct !{!4587, !4584, !4588}
!4588 = !DILocation(line: 1741, column: 5, scope: !4575)
!4589 = !DILocation(line: 1743, column: 2, scope: !4444)
!4590 = !DILocation(line: 1745, column: 11, scope: !4591)
!4591 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1745, column: 11)
!4592 = !DILocation(line: 1745, column: 16, scope: !4591)
!4593 = !DILocation(line: 1745, column: 27, scope: !4591)
!4594 = !DILocation(line: 1745, column: 30, scope: !4591)
!4595 = !DILocation(line: 1745, column: 35, scope: !4591)
!4596 = !DILocation(line: 1745, column: 50, scope: !4591)
!4597 = !DILocation(line: 1745, column: 49, scope: !4591)
!4598 = !DILocation(line: 1745, column: 46, scope: !4591)
!4599 = !DILocation(line: 1745, column: 11, scope: !3993)
!4600 = !DILocation(line: 1747, column: 16, scope: !4601)
!4601 = distinct !DILexicalBlock(scope: !4591, file: !3, line: 1746, column: 2)
!4602 = !DILocation(line: 1747, column: 8, scope: !4601)
!4603 = !DILocation(line: 1747, column: 6, scope: !4601)
!4604 = !DILocation(line: 1748, column: 22, scope: !4601)
!4605 = !DILocation(line: 1748, column: 27, scope: !4601)
!4606 = !DILocation(line: 1748, column: 16, scope: !4601)
!4607 = !DILocation(line: 1748, column: 4, scope: !4601)
!4608 = !DILocation(line: 1748, column: 20, scope: !4601)
!4609 = !DILocation(line: 1749, column: 15, scope: !4601)
!4610 = !DILocation(line: 1749, column: 4, scope: !4601)
!4611 = !DILocation(line: 1749, column: 18, scope: !4601)
!4612 = !DILocation(line: 1750, column: 16, scope: !4601)
!4613 = !DILocation(line: 1751, column: 2, scope: !4601)
!4614 = !DILocation(line: 1754, column: 11, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1754, column: 11)
!4616 = !DILocation(line: 1754, column: 16, scope: !4615)
!4617 = !DILocation(line: 1754, column: 22, scope: !4615)
!4618 = !DILocation(line: 1754, column: 11, scope: !3993)
!4619 = !DILocation(line: 1756, column: 9, scope: !4620)
!4620 = distinct !DILexicalBlock(scope: !4621, file: !3, line: 1756, column: 8)
!4621 = distinct !DILexicalBlock(scope: !4615, file: !3, line: 1755, column: 2)
!4622 = !DILocation(line: 1756, column: 8, scope: !4620)
!4623 = !DILocation(line: 1756, column: 22, scope: !4620)
!4624 = !DILocation(line: 1756, column: 29, scope: !4620)
!4625 = !DILocation(line: 1756, column: 33, scope: !4620)
!4626 = !DILocation(line: 1756, column: 8, scope: !4621)
!4627 = !DILocation(line: 1758, column: 12, scope: !4628)
!4628 = distinct !DILexicalBlock(scope: !4629, file: !3, line: 1758, column: 12)
!4629 = distinct !DILexicalBlock(scope: !4620, file: !3, line: 1757, column: 6)
!4630 = !DILocation(line: 1758, column: 28, scope: !4628)
!4631 = !DILocation(line: 1758, column: 35, scope: !4628)
!4632 = !DILocation(line: 1758, column: 38, scope: !4628)
!4633 = !DILocation(line: 1758, column: 54, scope: !4628)
!4634 = !DILocation(line: 1759, column: 5, scope: !4628)
!4635 = !DILocation(line: 1759, column: 8, scope: !4628)
!4636 = !DILocation(line: 1759, column: 24, scope: !4628)
!4637 = !DILocation(line: 1758, column: 12, scope: !4629)
!4638 = !DILocation(line: 1762, column: 17, scope: !4639)
!4639 = distinct !DILexicalBlock(scope: !4628, file: !3, line: 1760, column: 3)
!4640 = !DILocation(line: 1762, column: 9, scope: !4639)
!4641 = !DILocation(line: 1762, column: 7, scope: !4639)
!4642 = !DILocation(line: 1763, column: 17, scope: !4639)
!4643 = !DILocation(line: 1763, column: 5, scope: !4639)
!4644 = !DILocation(line: 1763, column: 21, scope: !4639)
!4645 = !DILocation(line: 1764, column: 16, scope: !4639)
!4646 = !DILocation(line: 1764, column: 5, scope: !4639)
!4647 = !DILocation(line: 1764, column: 19, scope: !4639)
!4648 = !DILocation(line: 1765, column: 17, scope: !4639)
!4649 = !DILocation(line: 1766, column: 3, scope: !4639)
!4650 = !DILocation(line: 1767, column: 6, scope: !4629)
!4651 = !DILocation(line: 1768, column: 2, scope: !4621)
!4652 = !DILocation(line: 1771, column: 13, scope: !3993)
!4653 = !DILocation(line: 1771, column: 18, scope: !3993)
!4654 = !DILocation(line: 1771, column: 11, scope: !3993)
!4655 = !DILocation(line: 1772, column: 20, scope: !3993)
!4656 = !DILocation(line: 1773, column: 24, scope: !3993)
!4657 = !DILocation(line: 1774, column: 24, scope: !3993)
!4658 = !DILocation(line: 1775, column: 28, scope: !3993)
!4659 = !DILocation(line: 1776, column: 11, scope: !4660)
!4660 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1776, column: 11)
!4661 = !DILocation(line: 1776, column: 11, scope: !3993)
!4662 = !DILocation(line: 1778, column: 4, scope: !4663)
!4663 = distinct !DILexicalBlock(scope: !4660, file: !3, line: 1777, column: 2)
!4664 = !DILocation(line: 1778, column: 11, scope: !4663)
!4665 = !DILocation(line: 1778, column: 16, scope: !4663)
!4666 = !DILocation(line: 1778, column: 21, scope: !4663)
!4667 = !DILocation(line: 1779, column: 5, scope: !4663)
!4668 = !DILocation(line: 1779, column: 17, scope: !4663)
!4669 = !DILocation(line: 1779, column: 22, scope: !4663)
!4670 = !DILocation(line: 1779, column: 28, scope: !4663)
!4671 = !DILocation(line: 1779, column: 50, scope: !4663)
!4672 = !DILocation(line: 1779, column: 55, scope: !4663)
!4673 = !DILocation(line: 1779, column: 42, scope: !4663)
!4674 = !DILocation(line: 1779, column: 8, scope: !4663)
!4675 = !DILocation(line: 0, scope: !4663)
!4676 = !DILocation(line: 1780, column: 11, scope: !4663)
!4677 = distinct !{!4677, !4662, !4676}
!4678 = !DILocation(line: 1781, column: 8, scope: !4679)
!4679 = distinct !DILexicalBlock(scope: !4663, file: !3, line: 1781, column: 8)
!4680 = !DILocation(line: 1781, column: 13, scope: !4679)
!4681 = !DILocation(line: 1781, column: 18, scope: !4679)
!4682 = !DILocation(line: 1781, column: 8, scope: !4663)
!4683 = !DILocation(line: 1783, column: 33, scope: !4684)
!4684 = distinct !DILexicalBlock(scope: !4679, file: !3, line: 1782, column: 6)
!4685 = !DILocation(line: 1783, column: 38, scope: !4684)
!4686 = !DILocation(line: 1783, column: 25, scope: !4684)
!4687 = !DILocation(line: 1783, column: 22, scope: !4684)
!4688 = !DILocation(line: 1784, column: 12, scope: !4689)
!4689 = distinct !DILexicalBlock(scope: !4684, file: !3, line: 1784, column: 12)
!4690 = !DILocation(line: 1784, column: 17, scope: !4689)
!4691 = !DILocation(line: 1784, column: 29, scope: !4689)
!4692 = !DILocation(line: 1784, column: 34, scope: !4689)
!4693 = !DILocation(line: 1784, column: 37, scope: !4689)
!4694 = !DILocation(line: 1784, column: 42, scope: !4689)
!4695 = !DILocation(line: 1784, column: 54, scope: !4689)
!4696 = !DILocation(line: 1784, column: 53, scope: !4689)
!4697 = !DILocation(line: 1784, column: 50, scope: !4689)
!4698 = !DILocation(line: 1784, column: 12, scope: !4684)
!4699 = !DILocation(line: 1786, column: 17, scope: !4700)
!4700 = distinct !DILexicalBlock(scope: !4689, file: !3, line: 1785, column: 3)
!4701 = !DILocation(line: 1787, column: 20, scope: !4700)
!4702 = !DILocation(line: 1787, column: 25, scope: !4700)
!4703 = !DILocation(line: 1787, column: 18, scope: !4700)
!4704 = !DILocation(line: 1788, column: 24, scope: !4700)
!4705 = !DILocation(line: 1788, column: 29, scope: !4700)
!4706 = !DILocation(line: 1788, column: 22, scope: !4700)
!4707 = !DILocation(line: 1789, column: 24, scope: !4700)
!4708 = !DILocation(line: 1789, column: 29, scope: !4700)
!4709 = !DILocation(line: 1789, column: 22, scope: !4700)
!4710 = !DILocation(line: 1790, column: 3, scope: !4700)
!4711 = !DILocation(line: 1793, column: 20, scope: !4712)
!4712 = distinct !DILexicalBlock(scope: !4689, file: !3, line: 1792, column: 3)
!4713 = !DILocation(line: 1793, column: 25, scope: !4712)
!4714 = !DILocation(line: 1793, column: 18, scope: !4712)
!4715 = !DILocation(line: 1794, column: 24, scope: !4712)
!4716 = !DILocation(line: 1794, column: 29, scope: !4712)
!4717 = !DILocation(line: 1794, column: 22, scope: !4712)
!4718 = !DILocation(line: 1795, column: 24, scope: !4712)
!4719 = !DILocation(line: 1795, column: 29, scope: !4712)
!4720 = !DILocation(line: 1795, column: 22, scope: !4712)
!4721 = !DILocation(line: 1796, column: 28, scope: !4712)
!4722 = !DILocation(line: 1796, column: 33, scope: !4712)
!4723 = !DILocation(line: 1796, column: 26, scope: !4712)
!4724 = !DILocation(line: 1798, column: 20, scope: !4684)
!4725 = !DILocation(line: 1798, column: 12, scope: !4684)
!4726 = !DILocation(line: 1798, column: 10, scope: !4684)
!4727 = !DILocation(line: 1799, column: 26, scope: !4684)
!4728 = !DILocation(line: 1799, column: 31, scope: !4684)
!4729 = !DILocation(line: 1799, column: 20, scope: !4684)
!4730 = !DILocation(line: 1799, column: 8, scope: !4684)
!4731 = !DILocation(line: 1799, column: 24, scope: !4684)
!4732 = !DILocation(line: 1800, column: 19, scope: !4684)
!4733 = !DILocation(line: 1800, column: 8, scope: !4684)
!4734 = !DILocation(line: 1800, column: 22, scope: !4684)
!4735 = !DILocation(line: 1801, column: 6, scope: !4684)
!4736 = !DILocation(line: 1802, column: 8, scope: !4737)
!4737 = distinct !DILexicalBlock(scope: !4663, file: !3, line: 1802, column: 8)
!4738 = !DILocation(line: 1802, column: 8, scope: !4663)
!4739 = !DILocation(line: 1805, column: 12, scope: !4740)
!4740 = distinct !DILexicalBlock(scope: !4741, file: !3, line: 1805, column: 12)
!4741 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 1803, column: 6)
!4742 = !DILocation(line: 1805, column: 41, scope: !4740)
!4743 = !DILocation(line: 1805, column: 39, scope: !4740)
!4744 = !DILocation(line: 1805, column: 12, scope: !4741)
!4745 = !DILocation(line: 1808, column: 5, scope: !4740)
!4746 = !DILocation(line: 1808, column: 36, scope: !4740)
!4747 = !DILocation(line: 1809, column: 5, scope: !4740)
!4748 = !DILocation(line: 1809, column: 10, scope: !4740)
!4749 = !DILocation(line: 1806, column: 3, scope: !4740)
!4750 = !DILocation(line: 1810, column: 6, scope: !4741)
!4751 = !DILocation(line: 1811, column: 2, scope: !4663)
!4752 = !DILocation(line: 1814, column: 11, scope: !4753)
!4753 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1814, column: 11)
!4754 = !DILocation(line: 1814, column: 16, scope: !4753)
!4755 = !DILocation(line: 1814, column: 31, scope: !4753)
!4756 = !DILocation(line: 1814, column: 11, scope: !3993)
!4757 = !DILocation(line: 1816, column: 4, scope: !4758)
!4758 = distinct !DILexicalBlock(scope: !4753, file: !3, line: 1815, column: 2)
!4759 = !DILocation(line: 1816, column: 12, scope: !4758)
!4760 = !DILocation(line: 1816, column: 11, scope: !4758)
!4761 = !DILocation(line: 1816, column: 25, scope: !4758)
!4762 = !DILocation(line: 1817, column: 4, scope: !4758)
!4763 = !DILocation(line: 1817, column: 15, scope: !4758)
!4764 = !DILocation(line: 1817, column: 20, scope: !4758)
!4765 = !DILocation(line: 1817, column: 37, scope: !4758)
!4766 = !DILocation(line: 1817, column: 36, scope: !4758)
!4767 = !DILocation(line: 1817, column: 7, scope: !4758)
!4768 = !DILocation(line: 1817, column: 51, scope: !4758)
!4769 = !DILocation(line: 0, scope: !4758)
!4770 = !DILocation(line: 1819, column: 20, scope: !4771)
!4771 = distinct !DILexicalBlock(scope: !4772, file: !3, line: 1819, column: 12)
!4772 = distinct !DILexicalBlock(scope: !4758, file: !3, line: 1818, column: 6)
!4773 = !DILocation(line: 1819, column: 33, scope: !4771)
!4774 = !DILocation(line: 1819, column: 32, scope: !4771)
!4775 = !DILocation(line: 1819, column: 12, scope: !4771)
!4776 = !DILocation(line: 1819, column: 47, scope: !4771)
!4777 = !DILocation(line: 1819, column: 12, scope: !4772)
!4778 = !DILocalVariable(name: "s", scope: !4779, file: !3, line: 1821, type: !2037)
!4779 = distinct !DILexicalBlock(scope: !4771, file: !3, line: 1820, column: 3)
!4780 = !DILocation(line: 1821, column: 29, scope: !4779)
!4781 = !DILocation(line: 1821, column: 48, scope: !4779)
!4782 = !DILocation(line: 1822, column: 14, scope: !4779)
!4783 = !DILocation(line: 1822, column: 13, scope: !4779)
!4784 = !DILocation(line: 1821, column: 33, scope: !4779)
!4785 = !DILocation(line: 1823, column: 52, scope: !4779)
!4786 = !DILocation(line: 1823, column: 5, scope: !4779)
!4787 = !DILocation(line: 1824, column: 3, scope: !4779)
!4788 = !DILocation(line: 1827, column: 17, scope: !4789)
!4789 = distinct !DILexicalBlock(scope: !4771, file: !3, line: 1826, column: 3)
!4790 = !DILocation(line: 1827, column: 9, scope: !4789)
!4791 = !DILocation(line: 1827, column: 7, scope: !4789)
!4792 = !DILocation(line: 1828, column: 24, scope: !4789)
!4793 = !DILocation(line: 1828, column: 23, scope: !4789)
!4794 = !DILocation(line: 1828, column: 17, scope: !4789)
!4795 = !DILocation(line: 1828, column: 5, scope: !4789)
!4796 = !DILocation(line: 1828, column: 21, scope: !4789)
!4797 = !DILocation(line: 1829, column: 16, scope: !4789)
!4798 = !DILocation(line: 1829, column: 5, scope: !4789)
!4799 = !DILocation(line: 1829, column: 19, scope: !4789)
!4800 = !DILocation(line: 1831, column: 8, scope: !4772)
!4801 = distinct !{!4801, !4757, !4802}
!4802 = !DILocation(line: 1832, column: 6, scope: !4758)
!4803 = !DILocation(line: 1833, column: 2, scope: !4758)
!4804 = !DILocation(line: 1835, column: 22, scope: !3993)
!4805 = !DILocation(line: 1835, column: 21, scope: !3993)
!4806 = !DILocation(line: 1835, column: 19, scope: !3993)
!4807 = !DILocation(line: 1836, column: 11, scope: !4808)
!4808 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1836, column: 11)
!4809 = !DILocation(line: 1836, column: 23, scope: !4808)
!4810 = !DILocation(line: 1837, column: 4, scope: !4808)
!4811 = !DILocation(line: 1837, column: 10, scope: !4808)
!4812 = !DILocation(line: 1837, column: 15, scope: !4808)
!4813 = !DILocation(line: 1837, column: 21, scope: !4808)
!4814 = !DILocation(line: 1838, column: 8, scope: !4808)
!4815 = !DILocation(line: 1838, column: 11, scope: !4808)
!4816 = !DILocation(line: 1838, column: 23, scope: !4808)
!4817 = !DILocation(line: 1836, column: 11, scope: !3993)
!4818 = !DILocation(line: 1840, column: 4, scope: !4819)
!4819 = distinct !DILexicalBlock(scope: !4808, file: !3, line: 1839, column: 2)
!4820 = !DILocation(line: 1841, column: 4, scope: !4819)
!4821 = !DILocation(line: 1843, column: 19, scope: !3993)
!4822 = !DILocation(line: 1844, column: 13, scope: !3993)
!4823 = !DILocation(line: 1844, column: 18, scope: !3993)
!4824 = !DILocation(line: 1844, column: 11, scope: !3993)
!4825 = !DILocation(line: 1845, column: 7, scope: !3993)
!4826 = !DILocation(line: 1845, column: 14, scope: !3993)
!4827 = !DILocation(line: 1845, column: 19, scope: !3993)
!4828 = !DILocation(line: 1845, column: 32, scope: !3993)
!4829 = !DILocation(line: 1846, column: 7, scope: !3993)
!4830 = !DILocation(line: 1846, column: 18, scope: !3993)
!4831 = !DILocation(line: 1846, column: 23, scope: !3993)
!4832 = !DILocation(line: 1846, column: 37, scope: !3993)
!4833 = !DILocation(line: 1846, column: 10, scope: !3993)
!4834 = !DILocation(line: 1846, column: 50, scope: !3993)
!4835 = !DILocation(line: 1847, column: 4, scope: !3993)
!4836 = distinct !{!4836, !4825, !4837}
!4837 = !DILocation(line: 1847, column: 6, scope: !3993)
!4838 = !DILocation(line: 1848, column: 11, scope: !4839)
!4839 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1848, column: 11)
!4840 = !DILocation(line: 1848, column: 16, scope: !4839)
!4841 = !DILocation(line: 1848, column: 29, scope: !4839)
!4842 = !DILocation(line: 1848, column: 11, scope: !3993)
!4843 = !DILocation(line: 1850, column: 8, scope: !4844)
!4844 = distinct !DILexicalBlock(scope: !4845, file: !3, line: 1850, column: 8)
!4845 = distinct !DILexicalBlock(scope: !4839, file: !3, line: 1849, column: 2)
!4846 = !DILocation(line: 1850, column: 8, scope: !4845)
!4847 = !DILocation(line: 1852, column: 8, scope: !4844)
!4848 = !DILocation(line: 1851, column: 6, scope: !4844)
!4849 = !DILocation(line: 1855, column: 8, scope: !4844)
!4850 = !DILocation(line: 1854, column: 6, scope: !4844)
!4851 = !DILocation(line: 1856, column: 4, scope: !4845)
!4852 = !DILocation(line: 1858, column: 11, scope: !4853)
!4853 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1858, column: 11)
!4854 = !DILocation(line: 1858, column: 11, scope: !3993)
!4855 = !DILocation(line: 1860, column: 8, scope: !4856)
!4856 = distinct !DILexicalBlock(scope: !4857, file: !3, line: 1860, column: 8)
!4857 = distinct !DILexicalBlock(scope: !4853, file: !3, line: 1859, column: 2)
!4858 = !DILocation(line: 1860, column: 29, scope: !4856)
!4859 = !DILocation(line: 1860, column: 27, scope: !4856)
!4860 = !DILocation(line: 1860, column: 8, scope: !4857)
!4861 = !DILocation(line: 1862, column: 8, scope: !4856)
!4862 = !DILocation(line: 1862, column: 31, scope: !4856)
!4863 = !DILocation(line: 1862, column: 44, scope: !4856)
!4864 = !DILocation(line: 1862, column: 49, scope: !4856)
!4865 = !DILocation(line: 1861, column: 6, scope: !4856)
!4866 = !DILocation(line: 1863, column: 2, scope: !4857)
!4867 = !DILocalVariable(name: "d", scope: !4868, file: !3, line: 1867, type: !1140)
!4868 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1866, column: 7)
!4869 = !DILocation(line: 1867, column: 6, scope: !4868)
!4870 = !DILocation(line: 1868, column: 9, scope: !4871)
!4871 = distinct !DILexicalBlock(scope: !4868, file: !3, line: 1868, column: 2)
!4872 = !DILocation(line: 1868, column: 7, scope: !4871)
!4873 = !DILocation(line: 1868, column: 25, scope: !4874)
!4874 = distinct !DILexicalBlock(scope: !4871, file: !3, line: 1868, column: 2)
!4875 = !DILocation(line: 1868, column: 14, scope: !4874)
!4876 = !DILocation(line: 1868, column: 28, scope: !4874)
!4877 = !DILocation(line: 1868, column: 2, scope: !4871)
!4878 = !DILocalVariable(name: "s", scope: !4879, file: !3, line: 1870, type: !2037)
!4879 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 1869, column: 4)
!4880 = !DILocation(line: 1870, column: 30, scope: !4879)
!4881 = !DILocation(line: 1870, column: 49, scope: !4879)
!4882 = !DILocation(line: 1871, column: 25, scope: !4879)
!4883 = !DILocation(line: 1871, column: 14, scope: !4879)
!4884 = !DILocation(line: 1870, column: 34, scope: !4879)
!4885 = !DILocation(line: 1872, column: 37, scope: !4879)
!4886 = !DILocation(line: 1872, column: 26, scope: !4879)
!4887 = !DILocation(line: 1872, column: 17, scope: !4879)
!4888 = !DILocation(line: 1872, column: 21, scope: !4879)
!4889 = !DILocation(line: 1872, column: 19, scope: !4879)
!4890 = !DILocation(line: 1872, column: 6, scope: !4879)
!4891 = !DILocation(line: 1872, column: 24, scope: !4879)
!4892 = !DILocation(line: 1873, column: 21, scope: !4893)
!4893 = distinct !DILexicalBlock(scope: !4879, file: !3, line: 1873, column: 10)
!4894 = !DILocation(line: 1873, column: 10, scope: !4893)
!4895 = !DILocation(line: 1873, column: 27, scope: !4893)
!4896 = !DILocation(line: 1873, column: 32, scope: !4893)
!4897 = !DILocation(line: 1873, column: 24, scope: !4893)
!4898 = !DILocation(line: 1873, column: 10, scope: !4879)
!4899 = !DILocation(line: 1874, column: 8, scope: !4893)
!4900 = !DILocation(line: 1875, column: 18, scope: !4901)
!4901 = distinct !DILexicalBlock(scope: !4879, file: !3, line: 1875, column: 10)
!4902 = !DILocation(line: 1875, column: 23, scope: !4901)
!4903 = !DILocation(line: 1875, column: 46, scope: !4901)
!4904 = !DILocation(line: 1875, column: 35, scope: !4901)
!4905 = !DILocation(line: 1875, column: 10, scope: !4901)
!4906 = !DILocation(line: 1875, column: 50, scope: !4901)
!4907 = !DILocation(line: 1875, column: 10, scope: !4879)
!4908 = !DILocation(line: 1878, column: 5, scope: !4909)
!4909 = distinct !DILexicalBlock(scope: !4901, file: !3, line: 1876, column: 8)
!4910 = !DILocation(line: 1878, column: 17, scope: !4909)
!4911 = !DILocation(line: 1878, column: 30, scope: !4909)
!4912 = !DILocation(line: 1878, column: 35, scope: !4909)
!4913 = !DILocation(line: 1877, column: 3, scope: !4909)
!4914 = !DILocation(line: 1879, column: 4, scope: !4909)
!4915 = !DILocation(line: 1880, column: 3, scope: !4909)
!4916 = !DILocation(line: 1882, column: 10, scope: !4917)
!4917 = distinct !DILexicalBlock(scope: !4879, file: !3, line: 1882, column: 10)
!4918 = !DILocation(line: 1882, column: 10, scope: !4879)
!4919 = !DILocalVariable(name: "t", scope: !4920, file: !3, line: 1884, type: !2037)
!4920 = distinct !DILexicalBlock(scope: !4917, file: !3, line: 1883, column: 8)
!4921 = !DILocation(line: 1884, column: 27, scope: !4920)
!4922 = !DILocation(line: 1885, column: 7, scope: !4923)
!4923 = distinct !DILexicalBlock(scope: !4920, file: !3, line: 1885, column: 7)
!4924 = !DILocation(line: 1885, column: 26, scope: !4923)
!4925 = !DILocation(line: 1885, column: 24, scope: !4923)
!4926 = !DILocation(line: 1885, column: 7, scope: !4920)
!4927 = !DILocation(line: 1887, column: 7, scope: !4923)
!4928 = !DILocation(line: 1887, column: 28, scope: !4923)
!4929 = !DILocation(line: 1886, column: 5, scope: !4923)
!4930 = !DILocation(line: 1888, column: 22, scope: !4920)
!4931 = !DILocation(line: 1888, column: 45, scope: !4920)
!4932 = !DILocation(line: 1888, column: 34, scope: !4920)
!4933 = !DILocation(line: 1888, column: 49, scope: !4920)
!4934 = !DILocation(line: 1888, column: 54, scope: !4920)
!4935 = !DILocation(line: 1888, column: 7, scope: !4920)
!4936 = !DILocation(line: 1888, column: 5, scope: !4920)
!4937 = !DILocation(line: 1889, column: 7, scope: !4938)
!4938 = distinct !DILexicalBlock(scope: !4920, file: !3, line: 1889, column: 7)
!4939 = !DILocation(line: 1889, column: 9, scope: !4938)
!4940 = !DILocation(line: 1889, column: 17, scope: !4938)
!4941 = !DILocation(line: 1889, column: 20, scope: !4938)
!4942 = !DILocation(line: 1889, column: 39, scope: !4938)
!4943 = !DILocation(line: 1889, column: 37, scope: !4938)
!4944 = !DILocation(line: 1889, column: 7, scope: !4920)
!4945 = !DILocalVariable(name: "long_name", scope: !4946, file: !3, line: 1891, type: !1646)
!4946 = distinct !DILexicalBlock(scope: !4938, file: !3, line: 1890, column: 5)
!4947 = !DILocation(line: 1891, column: 19, scope: !4946)
!4948 = !DILocation(line: 1891, column: 32, scope: !4946)
!4949 = !DILocation(line: 1891, column: 35, scope: !4946)
!4950 = !DILocation(line: 1891, column: 45, scope: !4946)
!4951 = !DILocation(line: 1892, column: 13, scope: !4946)
!4952 = !DILocation(line: 1892, column: 16, scope: !4946)
!4953 = !DILocation(line: 1893, column: 13, scope: !4946)
!4954 = !DILocation(line: 1893, column: 16, scope: !4946)
!4955 = !DILocation(line: 1894, column: 11, scope: !4956)
!4956 = distinct !DILexicalBlock(scope: !4946, file: !3, line: 1894, column: 11)
!4957 = !DILocation(line: 1894, column: 30, scope: !4956)
!4958 = !DILocation(line: 1894, column: 28, scope: !4956)
!4959 = !DILocation(line: 1894, column: 11, scope: !4946)
!4960 = !DILocation(line: 1897, column: 11, scope: !4956)
!4961 = !DILocation(line: 1897, column: 32, scope: !4956)
!4962 = !DILocation(line: 1898, column: 11, scope: !4956)
!4963 = !DILocation(line: 1898, column: 24, scope: !4956)
!4964 = !DILocation(line: 1898, column: 29, scope: !4956)
!4965 = !DILocation(line: 1895, column: 9, scope: !4956)
!4966 = !DILocation(line: 1899, column: 5, scope: !4946)
!4967 = !DILocation(line: 1900, column: 8, scope: !4920)
!4968 = !DILocation(line: 1901, column: 4, scope: !4879)
!4969 = !DILocation(line: 1868, column: 35, scope: !4874)
!4970 = !DILocation(line: 1868, column: 2, scope: !4874)
!4971 = distinct !{!4971, !4877, !4972}
!4972 = !DILocation(line: 1901, column: 4, scope: !4871)
!4973 = !DILocation(line: 1902, column: 13, scope: !4868)
!4974 = !DILocation(line: 1902, column: 17, scope: !4868)
!4975 = !DILocation(line: 1902, column: 15, scope: !4868)
!4976 = !DILocation(line: 1902, column: 2, scope: !4868)
!4977 = !DILocation(line: 1902, column: 20, scope: !4868)
!4978 = !DILocation(line: 1905, column: 12, scope: !4979)
!4979 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1905, column: 11)
!4980 = !DILocation(line: 1905, column: 17, scope: !4979)
!4981 = !DILocation(line: 1905, column: 23, scope: !4979)
!4982 = !DILocation(line: 1906, column: 4, scope: !4979)
!4983 = !DILocation(line: 1906, column: 15, scope: !4979)
!4984 = !DILocation(line: 1906, column: 7, scope: !4979)
!4985 = !DILocation(line: 1906, column: 32, scope: !4979)
!4986 = !DILocation(line: 1905, column: 11, scope: !3993)
!4987 = !DILocation(line: 1907, column: 13, scope: !4979)
!4988 = !DILocation(line: 1907, column: 2, scope: !4979)
!4989 = !DILocation(line: 1908, column: 11, scope: !4990)
!4990 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1908, column: 11)
!4991 = !DILocation(line: 1908, column: 16, scope: !4990)
!4992 = !DILocation(line: 1908, column: 27, scope: !4990)
!4993 = !DILocation(line: 1908, column: 38, scope: !4990)
!4994 = !DILocation(line: 1908, column: 50, scope: !4990)
!4995 = !DILocation(line: 1908, column: 55, scope: !4990)
!4996 = !DILocation(line: 1908, column: 30, scope: !4990)
!4997 = !DILocation(line: 1908, column: 67, scope: !4990)
!4998 = !DILocation(line: 1908, column: 11, scope: !3993)
!4999 = !DILocation(line: 1909, column: 13, scope: !4990)
!5000 = !DILocation(line: 1909, column: 2, scope: !4990)
!5001 = !DILocation(line: 1911, column: 11, scope: !5002)
!5002 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1911, column: 11)
!5003 = !DILocation(line: 1911, column: 16, scope: !5002)
!5004 = !DILocation(line: 1912, column: 4, scope: !5002)
!5005 = !DILocation(line: 1912, column: 15, scope: !5002)
!5006 = !DILocation(line: 1912, column: 27, scope: !5002)
!5007 = !DILocation(line: 1912, column: 32, scope: !5002)
!5008 = !DILocation(line: 1912, column: 7, scope: !5002)
!5009 = !DILocation(line: 1912, column: 50, scope: !5002)
!5010 = !DILocation(line: 1911, column: 11, scope: !3993)
!5011 = !DILocation(line: 1913, column: 13, scope: !5002)
!5012 = !DILocation(line: 1913, column: 2, scope: !5002)
!5013 = !DILocation(line: 1916, column: 14, scope: !5014)
!5014 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1916, column: 7)
!5015 = !DILocation(line: 1916, column: 12, scope: !5014)
!5016 = !DILocation(line: 1916, column: 19, scope: !5017)
!5017 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 1916, column: 7)
!5018 = !DILocation(line: 1916, column: 34, scope: !5017)
!5019 = !DILocation(line: 1916, column: 37, scope: !5017)
!5020 = !DILocation(line: 1916, column: 48, scope: !5017)
!5021 = !DILocation(line: 1916, column: 7, scope: !5014)
!5022 = !DILocalVariable(name: "s", scope: !5023, file: !3, line: 1918, type: !2037)
!5023 = distinct !DILexicalBlock(scope: !5017, file: !3, line: 1917, column: 2)
!5024 = !DILocation(line: 1918, column: 28, scope: !5023)
!5025 = !DILocalVariable(name: "t", scope: !5023, file: !3, line: 1918, type: !2037)
!5026 = !DILocation(line: 1918, column: 32, scope: !5023)
!5027 = !DILocation(line: 1919, column: 16, scope: !5028)
!5028 = distinct !DILexicalBlock(scope: !5023, file: !3, line: 1919, column: 8)
!5029 = !DILocation(line: 1919, column: 28, scope: !5028)
!5030 = !DILocation(line: 1919, column: 43, scope: !5028)
!5031 = !DILocation(line: 1919, column: 46, scope: !5028)
!5032 = !DILocation(line: 1919, column: 8, scope: !5028)
!5033 = !DILocation(line: 1919, column: 58, scope: !5028)
!5034 = !DILocation(line: 1919, column: 8, scope: !5023)
!5035 = !DILocation(line: 1920, column: 6, scope: !5028)
!5036 = !DILocation(line: 1921, column: 16, scope: !5037)
!5037 = distinct !DILexicalBlock(scope: !5023, file: !3, line: 1921, column: 8)
!5038 = !DILocation(line: 1921, column: 28, scope: !5037)
!5039 = !DILocation(line: 1921, column: 43, scope: !5037)
!5040 = !DILocation(line: 1921, column: 46, scope: !5037)
!5041 = !DILocation(line: 1921, column: 8, scope: !5037)
!5042 = !DILocation(line: 1921, column: 58, scope: !5037)
!5043 = !DILocation(line: 1921, column: 8, scope: !5023)
!5044 = !DILocation(line: 1922, column: 6, scope: !5037)
!5045 = !DILocation(line: 1923, column: 8, scope: !5046)
!5046 = distinct !DILexicalBlock(scope: !5023, file: !3, line: 1923, column: 8)
!5047 = !DILocation(line: 1923, column: 23, scope: !5046)
!5048 = !DILocation(line: 1923, column: 26, scope: !5046)
!5049 = !DILocation(line: 1923, column: 36, scope: !5046)
!5050 = !DILocation(line: 1924, column: 8, scope: !5046)
!5051 = !DILocation(line: 1924, column: 19, scope: !5046)
!5052 = !DILocation(line: 1924, column: 24, scope: !5046)
!5053 = !DILocation(line: 1924, column: 32, scope: !5046)
!5054 = !DILocation(line: 1924, column: 47, scope: !5046)
!5055 = !DILocation(line: 1924, column: 50, scope: !5046)
!5056 = !DILocation(line: 1924, column: 11, scope: !5046)
!5057 = !DILocation(line: 1924, column: 61, scope: !5046)
!5058 = !DILocation(line: 1923, column: 8, scope: !5023)
!5059 = !DILocation(line: 1925, column: 6, scope: !5046)
!5060 = !DILocation(line: 1926, column: 23, scope: !5023)
!5061 = !DILocation(line: 1926, column: 35, scope: !5023)
!5062 = !DILocation(line: 1926, column: 50, scope: !5023)
!5063 = !DILocation(line: 1926, column: 53, scope: !5023)
!5064 = !DILocation(line: 1926, column: 8, scope: !5023)
!5065 = !DILocation(line: 1926, column: 6, scope: !5023)
!5066 = !DILocation(line: 1927, column: 23, scope: !5023)
!5067 = !DILocation(line: 1927, column: 35, scope: !5023)
!5068 = !DILocation(line: 1927, column: 50, scope: !5023)
!5069 = !DILocation(line: 1927, column: 53, scope: !5023)
!5070 = !DILocation(line: 1927, column: 8, scope: !5023)
!5071 = !DILocation(line: 1927, column: 6, scope: !5023)
!5072 = !DILocation(line: 1928, column: 8, scope: !5073)
!5073 = distinct !DILexicalBlock(scope: !5023, file: !3, line: 1928, column: 8)
!5074 = !DILocation(line: 1928, column: 23, scope: !5073)
!5075 = !DILocation(line: 1928, column: 26, scope: !5073)
!5076 = !DILocation(line: 1928, column: 8, scope: !5023)
!5077 = !DILocation(line: 1930, column: 12, scope: !5078)
!5078 = distinct !DILexicalBlock(scope: !5079, file: !3, line: 1930, column: 12)
!5079 = distinct !DILexicalBlock(scope: !5073, file: !3, line: 1929, column: 6)
!5080 = !DILocation(line: 1930, column: 27, scope: !5078)
!5081 = !DILocation(line: 1930, column: 30, scope: !5078)
!5082 = !DILocation(line: 1930, column: 40, scope: !5078)
!5083 = !DILocation(line: 1930, column: 12, scope: !5079)
!5084 = !DILocation(line: 1933, column: 5, scope: !5078)
!5085 = !DILocation(line: 1933, column: 17, scope: !5078)
!5086 = !DILocation(line: 1933, column: 29, scope: !5078)
!5087 = !DILocation(line: 1934, column: 5, scope: !5078)
!5088 = !DILocation(line: 1934, column: 10, scope: !5078)
!5089 = !DILocation(line: 1931, column: 3, scope: !5078)
!5090 = !DILocation(line: 1937, column: 5, scope: !5078)
!5091 = !DILocation(line: 1937, column: 17, scope: !5078)
!5092 = !DILocation(line: 1937, column: 29, scope: !5078)
!5093 = !DILocation(line: 1937, column: 34, scope: !5078)
!5094 = !DILocation(line: 1936, column: 3, scope: !5078)
!5095 = !DILocation(line: 1938, column: 6, scope: !5079)
!5096 = !DILocation(line: 1941, column: 12, scope: !5097)
!5097 = distinct !DILexicalBlock(scope: !5098, file: !3, line: 1941, column: 12)
!5098 = distinct !DILexicalBlock(scope: !5073, file: !3, line: 1940, column: 6)
!5099 = !DILocation(line: 1941, column: 27, scope: !5097)
!5100 = !DILocation(line: 1941, column: 30, scope: !5097)
!5101 = !DILocation(line: 1941, column: 40, scope: !5097)
!5102 = !DILocation(line: 1941, column: 12, scope: !5098)
!5103 = !DILocation(line: 1944, column: 5, scope: !5097)
!5104 = !DILocation(line: 1944, column: 17, scope: !5097)
!5105 = !DILocation(line: 1944, column: 29, scope: !5097)
!5106 = !DILocation(line: 1945, column: 5, scope: !5097)
!5107 = !DILocation(line: 1945, column: 10, scope: !5097)
!5108 = !DILocation(line: 1942, column: 3, scope: !5097)
!5109 = !DILocation(line: 1948, column: 5, scope: !5097)
!5110 = !DILocation(line: 1948, column: 17, scope: !5097)
!5111 = !DILocation(line: 1948, column: 29, scope: !5097)
!5112 = !DILocation(line: 1948, column: 34, scope: !5097)
!5113 = !DILocation(line: 1947, column: 3, scope: !5097)
!5114 = !DILocation(line: 1950, column: 2, scope: !5023)
!5115 = !DILocation(line: 1916, column: 55, scope: !5017)
!5116 = !DILocation(line: 1916, column: 7, scope: !5017)
!5117 = distinct !{!5117, !5021, !5118}
!5118 = !DILocation(line: 1950, column: 2, scope: !5014)
!5119 = !DILocation(line: 1953, column: 11, scope: !5120)
!5120 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1953, column: 11)
!5121 = !DILocation(line: 1953, column: 11, scope: !3993)
!5122 = !DILocalVariable(name: "y2k_level", scope: !5123, file: !3, line: 1955, type: !1140)
!5123 = distinct !DILexicalBlock(scope: !5120, file: !3, line: 1954, column: 2)
!5124 = !DILocation(line: 1955, column: 8, scope: !5123)
!5125 = !DILocation(line: 1956, column: 16, scope: !5126)
!5126 = distinct !DILexicalBlock(scope: !5123, file: !3, line: 1956, column: 8)
!5127 = !DILocation(line: 1956, column: 21, scope: !5126)
!5128 = !DILocation(line: 1956, column: 8, scope: !5126)
!5129 = !DILocation(line: 1956, column: 34, scope: !5126)
!5130 = !DILocation(line: 1956, column: 8, scope: !5123)
!5131 = !DILocation(line: 1957, column: 18, scope: !5132)
!5132 = distinct !DILexicalBlock(scope: !5126, file: !3, line: 1957, column: 10)
!5133 = !DILocation(line: 1957, column: 10, scope: !5132)
!5134 = !DILocation(line: 1957, column: 35, scope: !5132)
!5135 = !DILocation(line: 1957, column: 10, scope: !5126)
!5136 = !DILocation(line: 1958, column: 18, scope: !5132)
!5137 = !DILocation(line: 1958, column: 8, scope: !5132)
!5138 = !DILocation(line: 1960, column: 18, scope: !5132)
!5139 = !DILocation(line: 1957, column: 38, scope: !5132)
!5140 = !DILocation(line: 1961, column: 21, scope: !5141)
!5141 = distinct !DILexicalBlock(scope: !5126, file: !3, line: 1961, column: 13)
!5142 = !DILocation(line: 1961, column: 26, scope: !5141)
!5143 = !DILocation(line: 1961, column: 13, scope: !5141)
!5144 = !DILocation(line: 1961, column: 39, scope: !5141)
!5145 = !DILocation(line: 1961, column: 13, scope: !5126)
!5146 = !DILocation(line: 1962, column: 16, scope: !5141)
!5147 = !DILocation(line: 1962, column: 6, scope: !5141)
!5148 = !DILocation(line: 1963, column: 21, scope: !5149)
!5149 = distinct !DILexicalBlock(scope: !5141, file: !3, line: 1963, column: 13)
!5150 = !DILocation(line: 1963, column: 26, scope: !5149)
!5151 = !DILocation(line: 1963, column: 13, scope: !5149)
!5152 = !DILocation(line: 1963, column: 39, scope: !5149)
!5153 = !DILocation(line: 1963, column: 13, scope: !5141)
!5154 = !DILocation(line: 1964, column: 16, scope: !5149)
!5155 = !DILocation(line: 1964, column: 6, scope: !5149)
!5156 = !DILocation(line: 1965, column: 8, scope: !5157)
!5157 = distinct !DILexicalBlock(scope: !5123, file: !3, line: 1965, column: 8)
!5158 = !DILocation(line: 1965, column: 18, scope: !5157)
!5159 = !DILocation(line: 1965, column: 8, scope: !5123)
!5160 = !DILocation(line: 1967, column: 32, scope: !5157)
!5161 = !DILocation(line: 1966, column: 6, scope: !5157)
!5162 = !DILocation(line: 1968, column: 13, scope: !5163)
!5163 = distinct !DILexicalBlock(scope: !5157, file: !3, line: 1968, column: 13)
!5164 = !DILocation(line: 1968, column: 23, scope: !5163)
!5165 = !DILocation(line: 1968, column: 13, scope: !5157)
!5166 = !DILocation(line: 1970, column: 16, scope: !5163)
!5167 = !DILocation(line: 1969, column: 6, scope: !5163)
!5168 = !DILocation(line: 1971, column: 2, scope: !5123)
!5169 = !DILocation(line: 1973, column: 19, scope: !5170)
!5170 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1973, column: 11)
!5171 = !DILocation(line: 1973, column: 24, scope: !5170)
!5172 = !DILocation(line: 1973, column: 11, scope: !5170)
!5173 = !DILocation(line: 1973, column: 37, scope: !5170)
!5174 = !DILocation(line: 1973, column: 11, scope: !3993)
!5175 = !DILocation(line: 1976, column: 9, scope: !5176)
!5176 = distinct !DILexicalBlock(scope: !5177, file: !3, line: 1976, column: 8)
!5177 = distinct !DILexicalBlock(scope: !5170, file: !3, line: 1974, column: 2)
!5178 = !DILocation(line: 1976, column: 8, scope: !5176)
!5179 = !DILocation(line: 1976, column: 22, scope: !5176)
!5180 = !DILocation(line: 1976, column: 8, scope: !5177)
!5181 = !DILocation(line: 1977, column: 6, scope: !5176)
!5182 = !DILocation(line: 1980, column: 9, scope: !5183)
!5183 = distinct !DILexicalBlock(scope: !5177, file: !3, line: 1980, column: 8)
!5184 = !DILocation(line: 1980, column: 8, scope: !5183)
!5185 = !DILocation(line: 1980, column: 22, scope: !5183)
!5186 = !DILocation(line: 1980, column: 8, scope: !5177)
!5187 = !DILocation(line: 1981, column: 6, scope: !5183)
!5188 = !DILocation(line: 1982, column: 4, scope: !5177)
!5189 = !DILocation(line: 1982, column: 12, scope: !5177)
!5190 = !DILocation(line: 1982, column: 11, scope: !5177)
!5191 = !DILocation(line: 1982, column: 25, scope: !5177)
!5192 = !DILocation(line: 1982, column: 29, scope: !5177)
!5193 = !DILocation(line: 1982, column: 28, scope: !5177)
!5194 = !DILocation(line: 1982, column: 42, scope: !5177)
!5195 = !DILocation(line: 0, scope: !5177)
!5196 = !DILocation(line: 1983, column: 6, scope: !5177)
!5197 = distinct !{!5197, !5188, !5198}
!5198 = !DILocation(line: 1983, column: 8, scope: !5177)
!5199 = !DILocation(line: 1984, column: 9, scope: !5200)
!5200 = distinct !DILexicalBlock(scope: !5177, file: !3, line: 1984, column: 8)
!5201 = !DILocation(line: 1984, column: 8, scope: !5200)
!5202 = !DILocation(line: 1984, column: 22, scope: !5200)
!5203 = !DILocation(line: 1984, column: 8, scope: !5177)
!5204 = !DILocation(line: 1986, column: 6, scope: !5200)
!5205 = !DILocation(line: 1987, column: 2, scope: !5177)
!5206 = !DILocation(line: 1989, column: 19, scope: !3993)
!5207 = !DILocation(line: 1990, column: 24, scope: !3993)
!5208 = !DILocation(line: 1991, column: 11, scope: !5209)
!5209 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 1991, column: 11)
!5210 = !DILocation(line: 1991, column: 16, scope: !5209)
!5211 = !DILocation(line: 1991, column: 22, scope: !5209)
!5212 = !DILocation(line: 1991, column: 11, scope: !3993)
!5213 = !DILocation(line: 1993, column: 19, scope: !5214)
!5214 = distinct !DILexicalBlock(scope: !5209, file: !3, line: 1992, column: 2)
!5215 = !DILocation(line: 1993, column: 24, scope: !5214)
!5216 = !DILocation(line: 1993, column: 30, scope: !5214)
!5217 = !DILocation(line: 1993, column: 48, scope: !5214)
!5218 = !DILocation(line: 1994, column: 8, scope: !5214)
!5219 = !DILocation(line: 1994, column: 13, scope: !5214)
!5220 = !DILocation(line: 1994, column: 19, scope: !5214)
!5221 = !DILocation(line: 1994, column: 37, scope: !5214)
!5222 = !DILocation(line: 1994, column: 7, scope: !5214)
!5223 = !DILocation(line: 1993, column: 16, scope: !5214)
!5224 = !DILocation(line: 1995, column: 23, scope: !5214)
!5225 = !DILocation(line: 1995, column: 28, scope: !5214)
!5226 = !DILocation(line: 1995, column: 34, scope: !5214)
!5227 = !DILocation(line: 1995, column: 52, scope: !5214)
!5228 = !DILocation(line: 1995, column: 21, scope: !5214)
!5229 = !DILocation(line: 1996, column: 22, scope: !5214)
!5230 = !DILocation(line: 1996, column: 27, scope: !5214)
!5231 = !DILocation(line: 1996, column: 33, scope: !5214)
!5232 = !DILocation(line: 1996, column: 51, scope: !5214)
!5233 = !DILocation(line: 1996, column: 20, scope: !5214)
!5234 = !DILocation(line: 1997, column: 8, scope: !5235)
!5235 = distinct !DILexicalBlock(scope: !5214, file: !3, line: 1997, column: 8)
!5236 = !DILocation(line: 1997, column: 20, scope: !5235)
!5237 = !DILocation(line: 1997, column: 8, scope: !5214)
!5238 = !DILocation(line: 2001, column: 10, scope: !5239)
!5239 = distinct !DILexicalBlock(scope: !5235, file: !3, line: 1998, column: 6)
!5240 = !DILocation(line: 2001, column: 24, scope: !5239)
!5241 = !DILocation(line: 1999, column: 8, scope: !5239)
!5242 = !DILocation(line: 2004, column: 15, scope: !5239)
!5243 = !DILocation(line: 2005, column: 12, scope: !5244)
!5244 = distinct !DILexicalBlock(scope: !5239, file: !3, line: 2005, column: 12)
!5245 = !DILocation(line: 2005, column: 19, scope: !5244)
!5246 = !DILocation(line: 2005, column: 12, scope: !5239)
!5247 = !DILocation(line: 2007, column: 5, scope: !5248)
!5248 = distinct !DILexicalBlock(scope: !5244, file: !3, line: 2006, column: 3)
!5249 = !DILocation(line: 2008, column: 5, scope: !5248)
!5250 = !DILocation(line: 2010, column: 17, scope: !5239)
!5251 = !DILocation(line: 2010, column: 15, scope: !5239)
!5252 = !DILocation(line: 2011, column: 8, scope: !5239)
!5253 = !DILocation(line: 2013, column: 13, scope: !5254)
!5254 = distinct !DILexicalBlock(scope: !5235, file: !3, line: 2013, column: 13)
!5255 = !DILocation(line: 2017, column: 6, scope: !5254)
!5256 = !DILocation(line: 2017, column: 9, scope: !5254)
!5257 = !DILocation(line: 2017, column: 37, scope: !5254)
!5258 = !DILocation(line: 2017, column: 35, scope: !5254)
!5259 = !DILocation(line: 2018, column: 6, scope: !5254)
!5260 = !DILocation(line: 2018, column: 9, scope: !5254)
!5261 = !DILocation(line: 2018, column: 37, scope: !5254)
!5262 = !DILocation(line: 2018, column: 35, scope: !5254)
!5263 = !DILocation(line: 2013, column: 13, scope: !5235)
!5264 = !DILocation(line: 2020, column: 12, scope: !5265)
!5265 = distinct !DILexicalBlock(scope: !5266, file: !3, line: 2020, column: 12)
!5266 = distinct !DILexicalBlock(scope: !5254, file: !3, line: 2019, column: 6)
!5267 = !DILocation(line: 2020, column: 40, scope: !5265)
!5268 = !DILocation(line: 2020, column: 38, scope: !5265)
!5269 = !DILocation(line: 2020, column: 12, scope: !5266)
!5270 = !DILocation(line: 2023, column: 5, scope: !5265)
!5271 = !DILocation(line: 2023, column: 35, scope: !5265)
!5272 = !DILocation(line: 2024, column: 5, scope: !5265)
!5273 = !DILocation(line: 2024, column: 18, scope: !5265)
!5274 = !DILocation(line: 2024, column: 23, scope: !5265)
!5275 = !DILocation(line: 2021, column: 3, scope: !5265)
!5276 = !DILocation(line: 2025, column: 6, scope: !5266)
!5277 = !DILocation(line: 2026, column: 2, scope: !5214)
!5278 = !DILocation(line: 2028, column: 24, scope: !3993)
!5279 = !DILocation(line: 2028, column: 29, scope: !3993)
!5280 = !DILocation(line: 2031, column: 11, scope: !5281)
!5281 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 2031, column: 11)
!5282 = !DILocation(line: 2031, column: 17, scope: !5281)
!5283 = !DILocation(line: 2031, column: 31, scope: !5281)
!5284 = !DILocation(line: 2031, column: 11, scope: !3993)
!5285 = !DILocation(line: 2032, column: 2, scope: !5281)
!5286 = !DILocation(line: 2033, column: 12, scope: !5287)
!5287 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 2033, column: 11)
!5288 = !DILocation(line: 2033, column: 17, scope: !5287)
!5289 = !DILocation(line: 2033, column: 31, scope: !5287)
!5290 = !DILocation(line: 2033, column: 36, scope: !5287)
!5291 = !DILocation(line: 2033, column: 39, scope: !5287)
!5292 = !DILocation(line: 2033, column: 54, scope: !5287)
!5293 = !DILocation(line: 2033, column: 51, scope: !5287)
!5294 = !DILocation(line: 2034, column: 4, scope: !5287)
!5295 = !DILocation(line: 2034, column: 7, scope: !5287)
!5296 = !DILocation(line: 2033, column: 11, scope: !3993)
!5297 = !DILocation(line: 2036, column: 8, scope: !5298)
!5298 = distinct !DILexicalBlock(scope: !5299, file: !3, line: 2036, column: 8)
!5299 = distinct !DILexicalBlock(scope: !5287, file: !3, line: 2035, column: 2)
!5300 = !DILocation(line: 2036, column: 21, scope: !5298)
!5301 = !DILocation(line: 2036, column: 8, scope: !5299)
!5302 = !DILocation(line: 2038, column: 12, scope: !5303)
!5303 = distinct !DILexicalBlock(scope: !5304, file: !3, line: 2038, column: 12)
!5304 = distinct !DILexicalBlock(scope: !5298, file: !3, line: 2037, column: 6)
!5305 = !DILocation(line: 2038, column: 12, scope: !5304)
!5306 = !DILocation(line: 2039, column: 3, scope: !5303)
!5307 = !DILocation(line: 2042, column: 3, scope: !5303)
!5308 = !DILocation(line: 2044, column: 6, scope: !5304)
!5309 = !DILocation(line: 2045, column: 2, scope: !5299)
!5310 = !DILocalVariable(name: "wanted_type_ptr", scope: !5311, file: !3, line: 2048, type: !2095)
!5311 = distinct !DILexicalBlock(scope: !5287, file: !3, line: 2047, column: 2)
!5312 = !DILocation(line: 2048, column: 24, scope: !5311)
!5313 = !DILocation(line: 2050, column: 8, scope: !5314)
!5314 = distinct !DILexicalBlock(scope: !5311, file: !3, line: 2050, column: 8)
!5315 = !DILocation(line: 2050, column: 21, scope: !5314)
!5316 = !DILocation(line: 2050, column: 8, scope: !5311)
!5317 = !DILocation(line: 2052, column: 18, scope: !5318)
!5318 = distinct !DILexicalBlock(scope: !5314, file: !3, line: 2051, column: 6)
!5319 = !DILocation(line: 2052, column: 16, scope: !5318)
!5320 = !DILocation(line: 2053, column: 17, scope: !5318)
!5321 = !DILocation(line: 2053, column: 15, scope: !5318)
!5322 = !DILocation(line: 2054, column: 6, scope: !5318)
!5323 = !DILocation(line: 2057, column: 8, scope: !5324)
!5324 = distinct !DILexicalBlock(scope: !5314, file: !3, line: 2056, column: 6)
!5325 = !DILocation(line: 2058, column: 12, scope: !5326)
!5326 = distinct !DILexicalBlock(scope: !5324, file: !3, line: 2058, column: 12)
!5327 = !DILocation(line: 2058, column: 31, scope: !5326)
!5328 = !DILocation(line: 2058, column: 12, scope: !5324)
!5329 = !DILocation(line: 2060, column: 5, scope: !5330)
!5330 = distinct !DILexicalBlock(scope: !5326, file: !3, line: 2059, column: 3)
!5331 = !DILocation(line: 2061, column: 5, scope: !5330)
!5332 = !DILocation(line: 2064, column: 22, scope: !5326)
!5333 = !DILocation(line: 2067, column: 20, scope: !5311)
!5334 = !DILocation(line: 2068, column: 4, scope: !5311)
!5335 = !DILocation(line: 2068, column: 11, scope: !5311)
!5336 = !DILocation(line: 2070, column: 12, scope: !5337)
!5337 = distinct !DILexicalBlock(scope: !5338, file: !3, line: 2070, column: 12)
!5338 = distinct !DILexicalBlock(scope: !5311, file: !3, line: 2069, column: 6)
!5339 = !DILocation(line: 2070, column: 19, scope: !5337)
!5340 = !DILocation(line: 2070, column: 12, scope: !5338)
!5341 = !DILocation(line: 2072, column: 5, scope: !5342)
!5342 = distinct !DILexicalBlock(scope: !5337, file: !3, line: 2071, column: 3)
!5343 = !DILocation(line: 2073, column: 5, scope: !5342)
!5344 = !DILocation(line: 2076, column: 20, scope: !5338)
!5345 = !DILocation(line: 2076, column: 18, scope: !5338)
!5346 = !DILocation(line: 2077, column: 17, scope: !5338)
!5347 = !DILocation(line: 2077, column: 15, scope: !5338)
!5348 = !DILocation(line: 2079, column: 39, scope: !5338)
!5349 = !DILocation(line: 2079, column: 8, scope: !5338)
!5350 = !DILocation(line: 2079, column: 25, scope: !5338)
!5351 = !DILocation(line: 2079, column: 37, scope: !5338)
!5352 = !DILocation(line: 2080, column: 44, scope: !5338)
!5353 = !DILocation(line: 2080, column: 8, scope: !5338)
!5354 = !DILocation(line: 2080, column: 25, scope: !5338)
!5355 = !DILocation(line: 2080, column: 42, scope: !5338)
!5356 = !DILocation(line: 2081, column: 41, scope: !5338)
!5357 = !DILocation(line: 2081, column: 46, scope: !5338)
!5358 = !DILocation(line: 2081, column: 62, scope: !5338)
!5359 = !DILocation(line: 2081, column: 60, scope: !5338)
!5360 = !DILocation(line: 2081, column: 8, scope: !5338)
!5361 = !DILocation(line: 2081, column: 25, scope: !5338)
!5362 = !DILocation(line: 2081, column: 39, scope: !5338)
!5363 = !DILocation(line: 2082, column: 8, scope: !5338)
!5364 = !DILocation(line: 2082, column: 25, scope: !5338)
!5365 = !DILocation(line: 2082, column: 43, scope: !5338)
!5366 = !DILocation(line: 2083, column: 20, scope: !5367)
!5367 = distinct !DILexicalBlock(scope: !5338, file: !3, line: 2083, column: 12)
!5368 = !DILocation(line: 2083, column: 25, scope: !5367)
!5369 = !DILocation(line: 2083, column: 12, scope: !5367)
!5370 = !DILocation(line: 2083, column: 38, scope: !5367)
!5371 = !DILocation(line: 2083, column: 12, scope: !5338)
!5372 = !DILocation(line: 2084, column: 3, scope: !5367)
!5373 = !DILocation(line: 2084, column: 20, scope: !5367)
!5374 = !DILocation(line: 2084, column: 38, scope: !5367)
!5375 = !DILocation(line: 2085, column: 8, scope: !5338)
!5376 = !DILocation(line: 2085, column: 25, scope: !5338)
!5377 = !DILocation(line: 2085, column: 46, scope: !5338)
!5378 = !DILocation(line: 2086, column: 12, scope: !5379)
!5379 = distinct !DILexicalBlock(scope: !5338, file: !3, line: 2086, column: 12)
!5380 = !DILocation(line: 2086, column: 12, scope: !5338)
!5381 = !DILocation(line: 2087, column: 3, scope: !5379)
!5382 = !DILocation(line: 2087, column: 20, scope: !5379)
!5383 = !DILocation(line: 2087, column: 41, scope: !5379)
!5384 = !DILocation(line: 2088, column: 8, scope: !5338)
!5385 = !DILocation(line: 2088, column: 25, scope: !5338)
!5386 = !DILocation(line: 2088, column: 41, scope: !5338)
!5387 = !DILocation(line: 2089, column: 8, scope: !5338)
!5388 = !DILocation(line: 2089, column: 25, scope: !5338)
!5389 = !DILocation(line: 2089, column: 43, scope: !5338)
!5390 = !DILocation(line: 2090, column: 12, scope: !5391)
!5391 = distinct !DILexicalBlock(scope: !5338, file: !3, line: 2090, column: 12)
!5392 = !DILocation(line: 2090, column: 12, scope: !5338)
!5393 = !DILocation(line: 2091, column: 3, scope: !5391)
!5394 = !DILocation(line: 2091, column: 20, scope: !5391)
!5395 = !DILocation(line: 2091, column: 36, scope: !5391)
!5396 = !DILocation(line: 2094, column: 17, scope: !5397)
!5397 = distinct !DILexicalBlock(scope: !5398, file: !3, line: 2094, column: 9)
!5398 = distinct !DILexicalBlock(scope: !5391, file: !3, line: 2093, column: 3)
!5399 = !DILocation(line: 2094, column: 22, scope: !5397)
!5400 = !DILocation(line: 2094, column: 9, scope: !5397)
!5401 = !DILocation(line: 2094, column: 35, scope: !5397)
!5402 = !DILocation(line: 2094, column: 9, scope: !5398)
!5403 = !DILocation(line: 2095, column: 7, scope: !5397)
!5404 = !DILocation(line: 2095, column: 24, scope: !5397)
!5405 = !DILocation(line: 2095, column: 40, scope: !5397)
!5406 = !DILocation(line: 2096, column: 17, scope: !5407)
!5407 = distinct !DILexicalBlock(scope: !5398, file: !3, line: 2096, column: 9)
!5408 = !DILocation(line: 2096, column: 22, scope: !5407)
!5409 = !DILocation(line: 2096, column: 9, scope: !5407)
!5410 = !DILocation(line: 2096, column: 35, scope: !5407)
!5411 = !DILocation(line: 2096, column: 9, scope: !5398)
!5412 = !DILocation(line: 2097, column: 7, scope: !5407)
!5413 = !DILocation(line: 2097, column: 24, scope: !5407)
!5414 = !DILocation(line: 2097, column: 42, scope: !5407)
!5415 = !DILocation(line: 2099, column: 8, scope: !5338)
!5416 = !DILocation(line: 2099, column: 25, scope: !5338)
!5417 = !DILocation(line: 2099, column: 30, scope: !5338)
!5418 = !DILocation(line: 2100, column: 33, scope: !5338)
!5419 = !DILocation(line: 2100, column: 8, scope: !5338)
!5420 = !DILocation(line: 2100, column: 25, scope: !5338)
!5421 = !DILocation(line: 2100, column: 31, scope: !5338)
!5422 = !DILocation(line: 2101, column: 35, scope: !5338)
!5423 = !DILocation(line: 2101, column: 8, scope: !5338)
!5424 = !DILocation(line: 2101, column: 25, scope: !5338)
!5425 = !DILocation(line: 2101, column: 33, scope: !5338)
!5426 = !DILocation(line: 2102, column: 8, scope: !5338)
!5427 = !DILocation(line: 2102, column: 25, scope: !5338)
!5428 = !DILocation(line: 2102, column: 30, scope: !5338)
!5429 = !DILocation(line: 2103, column: 12, scope: !5430)
!5430 = distinct !DILexicalBlock(scope: !5338, file: !3, line: 2103, column: 12)
!5431 = !DILocation(line: 2103, column: 29, scope: !5430)
!5432 = !DILocation(line: 2103, column: 12, scope: !5338)
!5433 = !DILocation(line: 2104, column: 28, scope: !5430)
!5434 = !DILocation(line: 2104, column: 3, scope: !5430)
!5435 = !DILocation(line: 2104, column: 21, scope: !5430)
!5436 = !DILocation(line: 2104, column: 26, scope: !5430)
!5437 = !DILocation(line: 2105, column: 12, scope: !5438)
!5438 = distinct !DILexicalBlock(scope: !5338, file: !3, line: 2105, column: 12)
!5439 = !DILocation(line: 2105, column: 30, scope: !5438)
!5440 = !DILocation(line: 2105, column: 12, scope: !5338)
!5441 = !DILocation(line: 2106, column: 23, scope: !5438)
!5442 = !DILocation(line: 2106, column: 21, scope: !5438)
!5443 = !DILocation(line: 2106, column: 3, scope: !5438)
!5444 = !DILocation(line: 2107, column: 27, scope: !5338)
!5445 = !DILocation(line: 2107, column: 25, scope: !5338)
!5446 = !DILocation(line: 2109, column: 14, scope: !5338)
!5447 = !DILocation(line: 2109, column: 19, scope: !5338)
!5448 = !DILocation(line: 2109, column: 12, scope: !5338)
!5449 = !DILocation(line: 2110, column: 12, scope: !5450)
!5450 = distinct !DILexicalBlock(scope: !5338, file: !3, line: 2110, column: 12)
!5451 = !DILocation(line: 2110, column: 12, scope: !5338)
!5452 = !DILocation(line: 2113, column: 35, scope: !5453)
!5453 = distinct !DILexicalBlock(scope: !5450, file: !3, line: 2111, column: 3)
!5454 = !DILocation(line: 2113, column: 23, scope: !5453)
!5455 = !DILocation(line: 2112, column: 37, scope: !5453)
!5456 = !DILocation(line: 2112, column: 35, scope: !5453)
!5457 = !DILocation(line: 2114, column: 12, scope: !5453)
!5458 = !DILocation(line: 2115, column: 20, scope: !5453)
!5459 = !DILocation(line: 2115, column: 25, scope: !5453)
!5460 = !DILocation(line: 2115, column: 31, scope: !5453)
!5461 = !DILocation(line: 2115, column: 49, scope: !5453)
!5462 = !DILocation(line: 2115, column: 19, scope: !5453)
!5463 = !DILocation(line: 2115, column: 17, scope: !5453)
!5464 = !DILocation(line: 2116, column: 24, scope: !5453)
!5465 = !DILocation(line: 2116, column: 29, scope: !5453)
!5466 = !DILocation(line: 2116, column: 35, scope: !5453)
!5467 = !DILocation(line: 2116, column: 53, scope: !5453)
!5468 = !DILocation(line: 2116, column: 22, scope: !5453)
!5469 = !DILocation(line: 2117, column: 3, scope: !5453)
!5470 = distinct !{!5470, !5334, !5471}
!5471 = !DILocation(line: 2118, column: 6, scope: !5311)
!5472 = !DILocation(line: 2121, column: 11, scope: !5473)
!5473 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 2121, column: 11)
!5474 = !DILocation(line: 2121, column: 29, scope: !5473)
!5475 = !DILocation(line: 2121, column: 11, scope: !3993)
!5476 = !DILocation(line: 2122, column: 22, scope: !5473)
!5477 = !DILocation(line: 2122, column: 41, scope: !5473)
!5478 = !DILocation(line: 2123, column: 8, scope: !5473)
!5479 = !DILocation(line: 2123, column: 23, scope: !5473)
!5480 = !DILocation(line: 2123, column: 21, scope: !5473)
!5481 = !DILocation(line: 2122, column: 2, scope: !5473)
!5482 = !DILocation(line: 2125, column: 1, scope: !3949)
!5483 = distinct !DISubprogram(name: "init_dollar_format_checking", scope: !3, file: !3, line: 949, type: !5484, scopeLine: 950, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!5484 = !DISubroutineType(types: !5485)
!5485 = !{null, !1140, !1348}
!5486 = !DILocalVariable(name: "first_arg_num", arg: 1, scope: !5483, file: !3, line: 949, type: !1140)
!5487 = !DILocation(line: 949, column: 34, scope: !5483)
!5488 = !DILocalVariable(name: "params", arg: 2, scope: !5483, file: !3, line: 949, type: !1348)
!5489 = !DILocation(line: 949, column: 54, scope: !5483)
!5490 = !DILocalVariable(name: "oparams", scope: !5483, file: !3, line: 951, type: !1348)
!5491 = !DILocation(line: 951, column: 8, scope: !5483)
!5492 = !DILocation(line: 951, column: 18, scope: !5483)
!5493 = !DILocation(line: 953, column: 26, scope: !5483)
!5494 = !DILocation(line: 953, column: 24, scope: !5483)
!5495 = !DILocation(line: 954, column: 26, scope: !5483)
!5496 = !DILocation(line: 955, column: 23, scope: !5483)
!5497 = !DILocation(line: 956, column: 24, scope: !5483)
!5498 = !DILocation(line: 957, column: 7, scope: !5499)
!5499 = distinct !DILexicalBlock(scope: !5483, file: !3, line: 957, column: 7)
!5500 = !DILocation(line: 957, column: 21, scope: !5499)
!5501 = !DILocation(line: 957, column: 7, scope: !5483)
!5502 = !DILocation(line: 959, column: 7, scope: !5503)
!5503 = distinct !DILexicalBlock(scope: !5499, file: !3, line: 958, column: 5)
!5504 = !DILocation(line: 959, column: 14, scope: !5503)
!5505 = !DILocation(line: 961, column: 26, scope: !5506)
!5506 = distinct !DILexicalBlock(scope: !5503, file: !3, line: 960, column: 2)
!5507 = !DILocation(line: 962, column: 13, scope: !5506)
!5508 = !DILocation(line: 962, column: 11, scope: !5506)
!5509 = distinct !{!5509, !5502, !5510}
!5510 = !DILocation(line: 963, column: 2, scope: !5503)
!5511 = !DILocation(line: 964, column: 5, scope: !5503)
!5512 = !DILocation(line: 965, column: 7, scope: !5513)
!5513 = distinct !DILexicalBlock(scope: !5483, file: !3, line: 965, column: 7)
!5514 = !DILocation(line: 965, column: 32, scope: !5513)
!5515 = !DILocation(line: 965, column: 30, scope: !5513)
!5516 = !DILocation(line: 965, column: 7, scope: !5483)
!5517 = !DILocation(line: 967, column: 11, scope: !5518)
!5518 = distinct !DILexicalBlock(scope: !5519, file: !3, line: 967, column: 11)
!5519 = distinct !DILexicalBlock(scope: !5513, file: !3, line: 966, column: 5)
!5520 = !DILocation(line: 967, column: 11, scope: !5519)
!5521 = !DILocation(line: 968, column: 8, scope: !5518)
!5522 = !DILocation(line: 968, column: 2, scope: !5518)
!5523 = !DILocation(line: 969, column: 11, scope: !5524)
!5524 = distinct !DILexicalBlock(scope: !5519, file: !3, line: 969, column: 11)
!5525 = !DILocation(line: 969, column: 11, scope: !5519)
!5526 = !DILocation(line: 970, column: 8, scope: !5524)
!5527 = !DILocation(line: 970, column: 2, scope: !5524)
!5528 = !DILocation(line: 971, column: 32, scope: !5519)
!5529 = !DILocation(line: 971, column: 30, scope: !5519)
!5530 = !DILocation(line: 972, column: 31, scope: !5519)
!5531 = !DILocation(line: 972, column: 29, scope: !5519)
!5532 = !DILocation(line: 973, column: 36, scope: !5519)
!5533 = !DILocation(line: 973, column: 34, scope: !5519)
!5534 = !DILocation(line: 974, column: 5, scope: !5519)
!5535 = !DILocation(line: 975, column: 7, scope: !5536)
!5536 = distinct !DILexicalBlock(scope: !5483, file: !3, line: 975, column: 7)
!5537 = !DILocation(line: 975, column: 7, scope: !5483)
!5538 = !DILocation(line: 977, column: 15, scope: !5539)
!5539 = distinct !DILexicalBlock(scope: !5536, file: !3, line: 976, column: 5)
!5540 = !DILocation(line: 977, column: 41, scope: !5539)
!5541 = !DILocation(line: 977, column: 7, scope: !5539)
!5542 = !DILocation(line: 978, column: 11, scope: !5543)
!5543 = distinct !DILexicalBlock(scope: !5539, file: !3, line: 978, column: 11)
!5544 = !DILocation(line: 978, column: 25, scope: !5543)
!5545 = !DILocation(line: 978, column: 11, scope: !5539)
!5546 = !DILocalVariable(name: "i", scope: !5547, file: !3, line: 980, type: !1140)
!5547 = distinct !DILexicalBlock(scope: !5543, file: !3, line: 979, column: 2)
!5548 = !DILocation(line: 980, column: 8, scope: !5547)
!5549 = !DILocation(line: 981, column: 13, scope: !5547)
!5550 = !DILocation(line: 981, column: 11, scope: !5547)
!5551 = !DILocation(line: 982, column: 4, scope: !5547)
!5552 = !DILocation(line: 982, column: 11, scope: !5547)
!5553 = !DILocation(line: 984, column: 41, scope: !5554)
!5554 = distinct !DILexicalBlock(scope: !5547, file: !3, line: 983, column: 6)
!5555 = !DILocation(line: 985, column: 13, scope: !5554)
!5556 = !DILocation(line: 984, column: 40, scope: !5554)
!5557 = !DILocation(line: 984, column: 8, scope: !5554)
!5558 = !DILocation(line: 984, column: 35, scope: !5554)
!5559 = !DILocation(line: 984, column: 38, scope: !5554)
!5560 = !DILocation(line: 986, column: 17, scope: !5554)
!5561 = !DILocation(line: 986, column: 15, scope: !5554)
!5562 = !DILocation(line: 987, column: 9, scope: !5554)
!5563 = distinct !{!5563, !5551, !5564}
!5564 = !DILocation(line: 988, column: 6, scope: !5547)
!5565 = !DILocation(line: 989, column: 2, scope: !5547)
!5566 = !DILocation(line: 990, column: 5, scope: !5539)
!5567 = !DILocation(line: 991, column: 1, scope: !5483)
!5568 = distinct !DISubprogram(name: "finish_dollar_format_checking", scope: !3, file: !3, line: 1125, type: !5569, scopeLine: 1126, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!5569 = !DISubroutineType(types: !5570)
!5570 = !{null, !2072, !1140}
!5571 = !DILocalVariable(name: "res", arg: 1, scope: !5568, file: !3, line: 1125, type: !2072)
!5572 = !DILocation(line: 1125, column: 54, scope: !5568)
!5573 = !DILocalVariable(name: "pointer_gap_ok", arg: 2, scope: !5568, file: !3, line: 1125, type: !1140)
!5574 = !DILocation(line: 1125, column: 63, scope: !5568)
!5575 = !DILocalVariable(name: "i", scope: !5568, file: !3, line: 1127, type: !1140)
!5576 = !DILocation(line: 1127, column: 7, scope: !5568)
!5577 = !DILocalVariable(name: "found_pointer_gap", scope: !5568, file: !3, line: 1128, type: !1451)
!5578 = !DILocation(line: 1128, column: 8, scope: !5568)
!5579 = !DILocation(line: 1129, column: 10, scope: !5580)
!5580 = distinct !DILexicalBlock(scope: !5568, file: !3, line: 1129, column: 3)
!5581 = !DILocation(line: 1129, column: 8, scope: !5580)
!5582 = !DILocation(line: 1129, column: 15, scope: !5583)
!5583 = distinct !DILexicalBlock(scope: !5580, file: !3, line: 1129, column: 3)
!5584 = !DILocation(line: 1129, column: 19, scope: !5583)
!5585 = !DILocation(line: 1129, column: 17, scope: !5583)
!5586 = !DILocation(line: 1129, column: 3, scope: !5580)
!5587 = !DILocation(line: 1131, column: 12, scope: !5588)
!5588 = distinct !DILexicalBlock(scope: !5589, file: !3, line: 1131, column: 11)
!5589 = distinct !DILexicalBlock(scope: !5583, file: !3, line: 1130, column: 5)
!5590 = !DILocation(line: 1131, column: 34, scope: !5588)
!5591 = !DILocation(line: 1131, column: 11, scope: !5589)
!5592 = !DILocation(line: 1133, column: 8, scope: !5593)
!5593 = distinct !DILexicalBlock(scope: !5594, file: !3, line: 1133, column: 8)
!5594 = distinct !DILexicalBlock(scope: !5588, file: !3, line: 1132, column: 2)
!5595 = !DILocation(line: 1133, column: 23, scope: !5593)
!5596 = !DILocation(line: 1133, column: 27, scope: !5593)
!5597 = !DILocation(line: 1133, column: 48, scope: !5593)
!5598 = !DILocation(line: 1134, column: 6, scope: !5593)
!5599 = !DILocation(line: 1134, column: 9, scope: !5593)
!5600 = !DILocation(line: 1134, column: 36, scope: !5593)
!5601 = !DILocation(line: 1133, column: 8, scope: !5594)
!5602 = !DILocation(line: 1135, column: 24, scope: !5593)
!5603 = !DILocation(line: 1135, column: 6, scope: !5593)
!5604 = !DILocation(line: 1139, column: 8, scope: !5593)
!5605 = !DILocation(line: 1139, column: 10, scope: !5593)
!5606 = !DILocation(line: 1139, column: 15, scope: !5593)
!5607 = !DILocation(line: 1137, column: 6, scope: !5593)
!5608 = !DILocation(line: 1140, column: 2, scope: !5594)
!5609 = !DILocation(line: 1141, column: 5, scope: !5589)
!5610 = !DILocation(line: 1129, column: 41, scope: !5583)
!5611 = !DILocation(line: 1129, column: 3, scope: !5583)
!5612 = distinct !{!5612, !5586, !5613}
!5613 = !DILocation(line: 1141, column: 5, scope: !5580)
!5614 = !DILocation(line: 1142, column: 7, scope: !5615)
!5615 = distinct !DILexicalBlock(scope: !5568, file: !3, line: 1142, column: 7)
!5616 = !DILocation(line: 1143, column: 7, scope: !5615)
!5617 = !DILocation(line: 1143, column: 11, scope: !5615)
!5618 = !DILocation(line: 1144, column: 4, scope: !5615)
!5619 = !DILocation(line: 1144, column: 7, scope: !5615)
!5620 = !DILocation(line: 1144, column: 29, scope: !5615)
!5621 = !DILocation(line: 1144, column: 27, scope: !5615)
!5622 = !DILocation(line: 1142, column: 7, scope: !5568)
!5623 = !DILocation(line: 1146, column: 7, scope: !5624)
!5624 = distinct !DILexicalBlock(scope: !5615, file: !3, line: 1145, column: 5)
!5625 = !DILocation(line: 1146, column: 12, scope: !5624)
!5626 = !DILocation(line: 1146, column: 24, scope: !5624)
!5627 = !DILocation(line: 1147, column: 7, scope: !5624)
!5628 = !DILocation(line: 1147, column: 12, scope: !5624)
!5629 = !DILocation(line: 1147, column: 36, scope: !5624)
!5630 = !DILocation(line: 1148, column: 5, scope: !5624)
!5631 = !DILocation(line: 1149, column: 1, scope: !5568)
!5632 = distinct !DISubprogram(name: "maybe_read_dollar_number", scope: !3, file: !3, line: 1004, type: !5633, scopeLine: 1007, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!5633 = !DISubroutineType(types: !5634)
!5634 = !{!1140, !5635, !1140, !1348, !1707, !2285}
!5635 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1646, size: 64)
!5636 = !DILocalVariable(name: "format", arg: 1, scope: !5632, file: !3, line: 1004, type: !5635)
!5637 = !DILocation(line: 1004, column: 40, scope: !5632)
!5638 = !DILocalVariable(name: "dollar_needed", arg: 2, scope: !5632, file: !3, line: 1005, type: !1140)
!5639 = !DILocation(line: 1005, column: 10, scope: !5632)
!5640 = !DILocalVariable(name: "params", arg: 3, scope: !5632, file: !3, line: 1005, type: !1348)
!5641 = !DILocation(line: 1005, column: 30, scope: !5632)
!5642 = !DILocalVariable(name: "param_ptr", arg: 4, scope: !5632, file: !3, line: 1005, type: !1707)
!5643 = !DILocation(line: 1005, column: 44, scope: !5632)
!5644 = !DILocalVariable(name: "fki", arg: 5, scope: !5632, file: !3, line: 1006, type: !2285)
!5645 = !DILocation(line: 1006, column: 30, scope: !5632)
!5646 = !DILocalVariable(name: "argnum", scope: !5632, file: !3, line: 1008, type: !1140)
!5647 = !DILocation(line: 1008, column: 7, scope: !5632)
!5648 = !DILocalVariable(name: "overflow_flag", scope: !5632, file: !3, line: 1009, type: !1140)
!5649 = !DILocation(line: 1009, column: 7, scope: !5632)
!5650 = !DILocalVariable(name: "fcp", scope: !5632, file: !3, line: 1010, type: !1646)
!5651 = !DILocation(line: 1010, column: 15, scope: !5632)
!5652 = !DILocation(line: 1010, column: 22, scope: !5632)
!5653 = !DILocation(line: 1010, column: 21, scope: !5632)
!5654 = !DILocation(line: 1011, column: 8, scope: !5655)
!5655 = distinct !DILexicalBlock(scope: !5632, file: !3, line: 1011, column: 7)
!5656 = !DILocation(line: 1011, column: 7, scope: !5632)
!5657 = !DILocation(line: 1013, column: 11, scope: !5658)
!5658 = distinct !DILexicalBlock(scope: !5659, file: !3, line: 1013, column: 11)
!5659 = distinct !DILexicalBlock(scope: !5655, file: !3, line: 1012, column: 5)
!5660 = !DILocation(line: 1013, column: 11, scope: !5659)
!5661 = !DILocation(line: 1015, column: 4, scope: !5662)
!5662 = distinct !DILexicalBlock(scope: !5658, file: !3, line: 1014, column: 2)
!5663 = !DILocation(line: 1016, column: 4, scope: !5662)
!5664 = !DILocation(line: 1019, column: 2, scope: !5658)
!5665 = !DILocation(line: 1021, column: 10, scope: !5632)
!5666 = !DILocation(line: 1022, column: 17, scope: !5632)
!5667 = !DILocation(line: 1023, column: 3, scope: !5632)
!5668 = !DILocation(line: 1023, column: 10, scope: !5632)
!5669 = !DILocalVariable(name: "nargnum", scope: !5670, file: !3, line: 1025, type: !1140)
!5670 = distinct !DILexicalBlock(scope: !5632, file: !3, line: 1024, column: 5)
!5671 = !DILocation(line: 1025, column: 11, scope: !5670)
!5672 = !DILocation(line: 1026, column: 22, scope: !5670)
!5673 = !DILocation(line: 1026, column: 20, scope: !5670)
!5674 = !DILocation(line: 1026, column: 33, scope: !5670)
!5675 = !DILocation(line: 1026, column: 32, scope: !5670)
!5676 = !DILocation(line: 1026, column: 37, scope: !5670)
!5677 = !DILocation(line: 1026, column: 29, scope: !5670)
!5678 = !DILocation(line: 1026, column: 15, scope: !5670)
!5679 = !DILocation(line: 1027, column: 11, scope: !5680)
!5680 = distinct !DILexicalBlock(scope: !5670, file: !3, line: 1027, column: 11)
!5681 = !DILocation(line: 1027, column: 19, scope: !5680)
!5682 = !DILocation(line: 1027, column: 23, scope: !5680)
!5683 = !DILocation(line: 1027, column: 26, scope: !5680)
!5684 = !DILocation(line: 1027, column: 34, scope: !5680)
!5685 = !DILocation(line: 1027, column: 42, scope: !5680)
!5686 = !DILocation(line: 1027, column: 39, scope: !5680)
!5687 = !DILocation(line: 1027, column: 11, scope: !5670)
!5688 = !DILocation(line: 1028, column: 16, scope: !5680)
!5689 = !DILocation(line: 1028, column: 2, scope: !5680)
!5690 = !DILocation(line: 1029, column: 16, scope: !5670)
!5691 = !DILocation(line: 1029, column: 14, scope: !5670)
!5692 = !DILocation(line: 1030, column: 10, scope: !5670)
!5693 = distinct !{!5693, !5667, !5694}
!5694 = !DILocation(line: 1031, column: 5, scope: !5632)
!5695 = !DILocation(line: 1032, column: 8, scope: !5696)
!5696 = distinct !DILexicalBlock(scope: !5632, file: !3, line: 1032, column: 7)
!5697 = !DILocation(line: 1032, column: 7, scope: !5696)
!5698 = !DILocation(line: 1032, column: 12, scope: !5696)
!5699 = !DILocation(line: 1032, column: 7, scope: !5632)
!5700 = !DILocation(line: 1034, column: 11, scope: !5701)
!5701 = distinct !DILexicalBlock(scope: !5702, file: !3, line: 1034, column: 11)
!5702 = distinct !DILexicalBlock(scope: !5696, file: !3, line: 1033, column: 5)
!5703 = !DILocation(line: 1034, column: 11, scope: !5702)
!5704 = !DILocation(line: 1036, column: 4, scope: !5705)
!5705 = distinct !DILexicalBlock(scope: !5701, file: !3, line: 1035, column: 2)
!5706 = !DILocation(line: 1037, column: 4, scope: !5705)
!5707 = !DILocation(line: 1040, column: 2, scope: !5701)
!5708 = !DILocation(line: 1042, column: 13, scope: !5632)
!5709 = !DILocation(line: 1042, column: 17, scope: !5632)
!5710 = !DILocation(line: 1042, column: 4, scope: !5632)
!5711 = !DILocation(line: 1042, column: 11, scope: !5632)
!5712 = !DILocation(line: 1043, column: 7, scope: !5713)
!5713 = distinct !DILexicalBlock(scope: !5632, file: !3, line: 1043, column: 7)
!5714 = !DILocation(line: 1043, column: 16, scope: !5713)
!5715 = !DILocation(line: 1043, column: 20, scope: !5713)
!5716 = !DILocation(line: 1043, column: 7, scope: !5632)
!5717 = !DILocation(line: 1046, column: 9, scope: !5718)
!5718 = distinct !DILexicalBlock(scope: !5713, file: !3, line: 1044, column: 5)
!5719 = !DILocation(line: 1045, column: 7, scope: !5718)
!5720 = !DILocation(line: 1047, column: 28, scope: !5718)
!5721 = !DILocation(line: 1048, column: 5, scope: !5718)
!5722 = !DILocation(line: 1049, column: 7, scope: !5723)
!5723 = distinct !DILexicalBlock(scope: !5632, file: !3, line: 1049, column: 7)
!5724 = !DILocation(line: 1049, column: 21, scope: !5723)
!5725 = !DILocation(line: 1049, column: 24, scope: !5723)
!5726 = !DILocation(line: 1049, column: 31, scope: !5723)
!5727 = !DILocation(line: 1050, column: 7, scope: !5723)
!5728 = !DILocation(line: 1050, column: 11, scope: !5723)
!5729 = !DILocation(line: 1050, column: 32, scope: !5723)
!5730 = !DILocation(line: 1050, column: 35, scope: !5723)
!5731 = !DILocation(line: 1050, column: 44, scope: !5723)
!5732 = !DILocation(line: 1050, column: 42, scope: !5723)
!5733 = !DILocation(line: 1049, column: 7, scope: !5632)
!5734 = !DILocation(line: 1052, column: 7, scope: !5735)
!5735 = distinct !DILexicalBlock(scope: !5723, file: !3, line: 1051, column: 5)
!5736 = !DILocation(line: 1053, column: 7, scope: !5735)
!5737 = !DILocation(line: 1055, column: 7, scope: !5738)
!5738 = distinct !DILexicalBlock(scope: !5632, file: !3, line: 1055, column: 7)
!5739 = !DILocation(line: 1055, column: 16, scope: !5738)
!5740 = !DILocation(line: 1055, column: 14, scope: !5738)
!5741 = !DILocation(line: 1055, column: 7, scope: !5632)
!5742 = !DILocation(line: 1056, column: 27, scope: !5738)
!5743 = !DILocation(line: 1056, column: 25, scope: !5738)
!5744 = !DILocation(line: 1056, column: 5, scope: !5738)
!5745 = !DILocation(line: 1059, column: 3, scope: !5632)
!5746 = !DILocation(line: 1059, column: 10, scope: !5632)
!5747 = !DILocation(line: 1059, column: 35, scope: !5632)
!5748 = !DILocation(line: 1059, column: 33, scope: !5632)
!5749 = !DILocalVariable(name: "nalloc", scope: !5750, file: !3, line: 1061, type: !1140)
!5750 = distinct !DILexicalBlock(scope: !5632, file: !3, line: 1060, column: 5)
!5751 = !DILocation(line: 1061, column: 11, scope: !5750)
!5752 = !DILocation(line: 1062, column: 20, scope: !5750)
!5753 = !DILocation(line: 1062, column: 18, scope: !5750)
!5754 = !DILocation(line: 1062, column: 43, scope: !5750)
!5755 = !DILocation(line: 1062, column: 14, scope: !5750)
!5756 = !DILocation(line: 1063, column: 31, scope: !5750)
!5757 = !DILocation(line: 1063, column: 29, scope: !5750)
!5758 = !DILocation(line: 1065, column: 36, scope: !5750)
!5759 = !DILocation(line: 1065, column: 34, scope: !5750)
!5760 = !DILocation(line: 1067, column: 15, scope: !5750)
!5761 = !DILocation(line: 1067, column: 39, scope: !5750)
!5762 = !DILocation(line: 1067, column: 37, scope: !5750)
!5763 = !DILocation(line: 1068, column: 8, scope: !5750)
!5764 = !DILocation(line: 1068, column: 17, scope: !5750)
!5765 = !DILocation(line: 1068, column: 15, scope: !5750)
!5766 = !DILocation(line: 1067, column: 7, scope: !5750)
!5767 = !DILocation(line: 1069, column: 32, scope: !5750)
!5768 = !DILocation(line: 1069, column: 30, scope: !5750)
!5769 = distinct !{!5769, !5745, !5770}
!5770 = !DILocation(line: 1070, column: 5, scope: !5632)
!5771 = !DILocation(line: 1071, column: 9, scope: !5772)
!5772 = distinct !DILexicalBlock(scope: !5632, file: !3, line: 1071, column: 7)
!5773 = !DILocation(line: 1071, column: 14, scope: !5772)
!5774 = !DILocation(line: 1071, column: 20, scope: !5772)
!5775 = !DILocation(line: 1072, column: 7, scope: !5772)
!5776 = !DILocation(line: 1072, column: 10, scope: !5772)
!5777 = !DILocation(line: 1072, column: 32, scope: !5772)
!5778 = !DILocation(line: 1072, column: 39, scope: !5772)
!5779 = !DILocation(line: 1072, column: 44, scope: !5772)
!5780 = !DILocation(line: 1071, column: 7, scope: !5632)
!5781 = !DILocation(line: 1074, column: 7, scope: !5782)
!5782 = distinct !DILexicalBlock(scope: !5772, file: !3, line: 1073, column: 5)
!5783 = !DILocation(line: 1074, column: 29, scope: !5782)
!5784 = !DILocation(line: 1074, column: 36, scope: !5782)
!5785 = !DILocation(line: 1074, column: 41, scope: !5782)
!5786 = !DILocation(line: 1076, column: 9, scope: !5782)
!5787 = !DILocation(line: 1076, column: 17, scope: !5782)
!5788 = !DILocation(line: 1076, column: 22, scope: !5782)
!5789 = !DILocation(line: 1075, column: 7, scope: !5782)
!5790 = !DILocation(line: 1077, column: 5, scope: !5782)
!5791 = !DILocation(line: 1079, column: 5, scope: !5772)
!5792 = !DILocation(line: 1079, column: 27, scope: !5772)
!5793 = !DILocation(line: 1079, column: 34, scope: !5772)
!5794 = !DILocation(line: 1079, column: 39, scope: !5772)
!5795 = !DILocation(line: 1080, column: 7, scope: !5796)
!5796 = distinct !DILexicalBlock(scope: !5632, file: !3, line: 1080, column: 7)
!5797 = !DILocation(line: 1080, column: 7, scope: !5632)
!5798 = !DILocalVariable(name: "i", scope: !5799, file: !3, line: 1082, type: !1140)
!5799 = distinct !DILexicalBlock(scope: !5796, file: !3, line: 1081, column: 5)
!5800 = !DILocation(line: 1082, column: 11, scope: !5799)
!5801 = !DILocation(line: 1083, column: 20, scope: !5799)
!5802 = !DILocation(line: 1083, column: 8, scope: !5799)
!5803 = !DILocation(line: 1083, column: 18, scope: !5799)
!5804 = !DILocation(line: 1084, column: 14, scope: !5805)
!5805 = distinct !DILexicalBlock(scope: !5799, file: !3, line: 1084, column: 7)
!5806 = !DILocation(line: 1084, column: 12, scope: !5805)
!5807 = !DILocation(line: 1084, column: 19, scope: !5808)
!5808 = distinct !DILexicalBlock(scope: !5805, file: !3, line: 1084, column: 7)
!5809 = !DILocation(line: 1084, column: 23, scope: !5808)
!5810 = !DILocation(line: 1084, column: 21, scope: !5808)
!5811 = !DILocation(line: 1084, column: 30, scope: !5808)
!5812 = !DILocation(line: 1084, column: 34, scope: !5808)
!5813 = !DILocation(line: 1084, column: 33, scope: !5808)
!5814 = !DILocation(line: 1084, column: 44, scope: !5808)
!5815 = !DILocation(line: 0, scope: !5808)
!5816 = !DILocation(line: 1084, column: 7, scope: !5805)
!5817 = !DILocation(line: 1085, column: 15, scope: !5808)
!5818 = !DILocation(line: 1085, column: 3, scope: !5808)
!5819 = !DILocation(line: 1085, column: 13, scope: !5808)
!5820 = !DILocation(line: 1085, column: 2, scope: !5808)
!5821 = !DILocation(line: 1084, column: 51, scope: !5808)
!5822 = !DILocation(line: 1084, column: 7, scope: !5808)
!5823 = distinct !{!5823, !5816, !5824}
!5824 = !DILocation(line: 1085, column: 15, scope: !5805)
!5825 = !DILocation(line: 1088, column: 7, scope: !5799)
!5826 = !DILocation(line: 1089, column: 5, scope: !5799)
!5827 = !DILocation(line: 1091, column: 6, scope: !5796)
!5828 = !DILocation(line: 1091, column: 16, scope: !5796)
!5829 = !DILocation(line: 1092, column: 10, scope: !5632)
!5830 = !DILocation(line: 1092, column: 3, scope: !5632)
!5831 = !DILocation(line: 1093, column: 1, scope: !5632)
!5832 = distinct !DISubprogram(name: "avoid_dollar_number", scope: !3, file: !3, line: 1099, type: !5833, scopeLine: 1100, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!5833 = !DISubroutineType(types: !5834)
!5834 = !{!1451, !1646}
!5835 = !DILocalVariable(name: "format", arg: 1, scope: !5832, file: !3, line: 1099, type: !1646)
!5836 = !DILocation(line: 1099, column: 34, scope: !5832)
!5837 = !DILocation(line: 1101, column: 8, scope: !5838)
!5838 = distinct !DILexicalBlock(scope: !5832, file: !3, line: 1101, column: 7)
!5839 = !DILocation(line: 1101, column: 7, scope: !5832)
!5840 = !DILocation(line: 1102, column: 5, scope: !5838)
!5841 = !DILocation(line: 1103, column: 3, scope: !5832)
!5842 = !DILocation(line: 1103, column: 10, scope: !5832)
!5843 = !DILocation(line: 1104, column: 11, scope: !5832)
!5844 = distinct !{!5844, !5841, !5843}
!5845 = !DILocation(line: 1105, column: 8, scope: !5846)
!5846 = distinct !DILexicalBlock(scope: !5832, file: !3, line: 1105, column: 7)
!5847 = !DILocation(line: 1105, column: 7, scope: !5846)
!5848 = !DILocation(line: 1105, column: 15, scope: !5846)
!5849 = !DILocation(line: 1105, column: 7, scope: !5832)
!5850 = !DILocation(line: 1107, column: 7, scope: !5851)
!5851 = distinct !DILexicalBlock(scope: !5846, file: !3, line: 1106, column: 5)
!5852 = !DILocation(line: 1108, column: 7, scope: !5851)
!5853 = !DILocation(line: 1110, column: 3, scope: !5832)
!5854 = !DILocation(line: 1111, column: 1, scope: !5832)
!5855 = distinct !DISubprogram(name: "get_flag_spec", scope: !3, file: !3, line: 1161, type: !5856, scopeLine: 1162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!5856 = !DISubroutineType(types: !5857)
!5857 = !{!2037, !2037, !1140, !1646}
!5858 = !DILocalVariable(name: "spec", arg: 1, scope: !5855, file: !3, line: 1161, type: !2037)
!5859 = !DILocation(line: 1161, column: 40, scope: !5855)
!5860 = !DILocalVariable(name: "flag", arg: 2, scope: !5855, file: !3, line: 1161, type: !1140)
!5861 = !DILocation(line: 1161, column: 50, scope: !5855)
!5862 = !DILocalVariable(name: "predicates", arg: 3, scope: !5855, file: !3, line: 1161, type: !1646)
!5863 = !DILocation(line: 1161, column: 68, scope: !5855)
!5864 = !DILocalVariable(name: "i", scope: !5855, file: !3, line: 1163, type: !1140)
!5865 = !DILocation(line: 1163, column: 7, scope: !5855)
!5866 = !DILocation(line: 1164, column: 10, scope: !5867)
!5867 = distinct !DILexicalBlock(scope: !5855, file: !3, line: 1164, column: 3)
!5868 = !DILocation(line: 1164, column: 8, scope: !5867)
!5869 = !DILocation(line: 1164, column: 15, scope: !5870)
!5870 = distinct !DILexicalBlock(scope: !5867, file: !3, line: 1164, column: 3)
!5871 = !DILocation(line: 1164, column: 20, scope: !5870)
!5872 = !DILocation(line: 1164, column: 23, scope: !5870)
!5873 = !DILocation(line: 1164, column: 33, scope: !5870)
!5874 = !DILocation(line: 1164, column: 3, scope: !5867)
!5875 = !DILocation(line: 1166, column: 11, scope: !5876)
!5876 = distinct !DILexicalBlock(scope: !5877, file: !3, line: 1166, column: 11)
!5877 = distinct !DILexicalBlock(scope: !5870, file: !3, line: 1165, column: 5)
!5878 = !DILocation(line: 1166, column: 16, scope: !5876)
!5879 = !DILocation(line: 1166, column: 19, scope: !5876)
!5880 = !DILocation(line: 1166, column: 32, scope: !5876)
!5881 = !DILocation(line: 1166, column: 29, scope: !5876)
!5882 = !DILocation(line: 1166, column: 11, scope: !5877)
!5883 = !DILocation(line: 1167, column: 2, scope: !5876)
!5884 = !DILocation(line: 1168, column: 11, scope: !5885)
!5885 = distinct !DILexicalBlock(scope: !5877, file: !3, line: 1168, column: 11)
!5886 = !DILocation(line: 1168, column: 22, scope: !5885)
!5887 = !DILocation(line: 1168, column: 11, scope: !5877)
!5888 = !DILocation(line: 1170, column: 8, scope: !5889)
!5889 = distinct !DILexicalBlock(scope: !5890, file: !3, line: 1170, column: 8)
!5890 = distinct !DILexicalBlock(scope: !5885, file: !3, line: 1169, column: 2)
!5891 = !DILocation(line: 1170, column: 13, scope: !5889)
!5892 = !DILocation(line: 1170, column: 16, scope: !5889)
!5893 = !DILocation(line: 1170, column: 26, scope: !5889)
!5894 = !DILocation(line: 1171, column: 8, scope: !5889)
!5895 = !DILocation(line: 1171, column: 19, scope: !5889)
!5896 = !DILocation(line: 1171, column: 31, scope: !5889)
!5897 = !DILocation(line: 1171, column: 36, scope: !5889)
!5898 = !DILocation(line: 1171, column: 39, scope: !5889)
!5899 = !DILocation(line: 1171, column: 11, scope: !5889)
!5900 = !DILocation(line: 1171, column: 50, scope: !5889)
!5901 = !DILocation(line: 1170, column: 8, scope: !5890)
!5902 = !DILocation(line: 1172, column: 14, scope: !5889)
!5903 = !DILocation(line: 1172, column: 19, scope: !5889)
!5904 = !DILocation(line: 1172, column: 6, scope: !5889)
!5905 = !DILocation(line: 1173, column: 2, scope: !5890)
!5906 = !DILocation(line: 1174, column: 16, scope: !5907)
!5907 = distinct !DILexicalBlock(scope: !5885, file: !3, line: 1174, column: 16)
!5908 = !DILocation(line: 1174, column: 21, scope: !5907)
!5909 = !DILocation(line: 1174, column: 24, scope: !5907)
!5910 = !DILocation(line: 1174, column: 34, scope: !5907)
!5911 = !DILocation(line: 1174, column: 16, scope: !5885)
!5912 = !DILocation(line: 1175, column: 10, scope: !5907)
!5913 = !DILocation(line: 1175, column: 15, scope: !5907)
!5914 = !DILocation(line: 1175, column: 2, scope: !5907)
!5915 = !DILocation(line: 1176, column: 5, scope: !5877)
!5916 = !DILocation(line: 1164, column: 40, scope: !5870)
!5917 = !DILocation(line: 1164, column: 3, scope: !5870)
!5918 = distinct !{!5918, !5874, !5919}
!5919 = !DILocation(line: 1176, column: 5, scope: !5867)
!5920 = !DILocation(line: 1177, column: 3, scope: !5855)
!5921 = !DILocation(line: 1178, column: 3, scope: !5855)
!5922 = !DILocation(line: 1179, column: 1, scope: !5855)
!5923 = distinct !DISubprogram(name: "check_format_types", scope: !3, file: !3, line: 2131, type: !5924, scopeLine: 2133, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!5924 = !DISubroutineType(types: !5925)
!5925 = !{null, !2095, !1646, !1140}
!5926 = !DILocalVariable(name: "types", arg: 1, scope: !5923, file: !3, line: 2131, type: !2095)
!5927 = !DILocation(line: 2131, column: 41, scope: !5923)
!5928 = !DILocalVariable(name: "format_start", arg: 2, scope: !5923, file: !3, line: 2131, type: !1646)
!5929 = !DILocation(line: 2131, column: 60, scope: !5923)
!5930 = !DILocalVariable(name: "format_length", arg: 3, scope: !5923, file: !3, line: 2132, type: !1140)
!5931 = !DILocation(line: 2132, column: 11, scope: !5923)
!5932 = !DILocation(line: 2134, column: 3, scope: !5923)
!5933 = !DILocation(line: 2134, column: 10, scope: !5934)
!5934 = distinct !DILexicalBlock(scope: !5935, file: !3, line: 2134, column: 3)
!5935 = distinct !DILexicalBlock(scope: !5923, file: !3, line: 2134, column: 3)
!5936 = !DILocation(line: 2134, column: 16, scope: !5934)
!5937 = !DILocation(line: 2134, column: 3, scope: !5935)
!5938 = !DILocalVariable(name: "cur_param", scope: !5939, file: !3, line: 2136, type: !1348)
!5939 = distinct !DILexicalBlock(scope: !5934, file: !3, line: 2135, column: 5)
!5940 = !DILocation(line: 2136, column: 12, scope: !5939)
!5941 = !DILocalVariable(name: "cur_type", scope: !5939, file: !3, line: 2137, type: !1348)
!5942 = !DILocation(line: 2137, column: 12, scope: !5939)
!5943 = !DILocalVariable(name: "orig_cur_type", scope: !5939, file: !3, line: 2138, type: !1348)
!5944 = !DILocation(line: 2138, column: 12, scope: !5939)
!5945 = !DILocalVariable(name: "wanted_type", scope: !5939, file: !3, line: 2139, type: !1348)
!5946 = !DILocation(line: 2139, column: 12, scope: !5939)
!5947 = !DILocalVariable(name: "arg_num", scope: !5939, file: !3, line: 2140, type: !1140)
!5948 = !DILocation(line: 2140, column: 11, scope: !5939)
!5949 = !DILocalVariable(name: "i", scope: !5939, file: !3, line: 2141, type: !1140)
!5950 = !DILocation(line: 2141, column: 11, scope: !5939)
!5951 = !DILocalVariable(name: "char_type_flag", scope: !5939, file: !3, line: 2142, type: !1140)
!5952 = !DILocation(line: 2142, column: 11, scope: !5939)
!5953 = !DILocation(line: 2143, column: 19, scope: !5939)
!5954 = !DILocation(line: 2143, column: 26, scope: !5939)
!5955 = !DILocation(line: 2143, column: 17, scope: !5939)
!5956 = !DILocation(line: 2144, column: 18, scope: !5939)
!5957 = !DILocation(line: 2144, column: 16, scope: !5939)
!5958 = !DILocation(line: 2145, column: 11, scope: !5959)
!5959 = distinct !DILexicalBlock(scope: !5939, file: !3, line: 2145, column: 11)
!5960 = !DILocation(line: 2145, column: 23, scope: !5959)
!5961 = !DILocation(line: 2145, column: 20, scope: !5959)
!5962 = !DILocation(line: 2145, column: 11, scope: !5939)
!5963 = !DILocation(line: 2146, column: 2, scope: !5959)
!5964 = !DILocation(line: 2147, column: 23, scope: !5939)
!5965 = !DILocation(line: 2147, column: 21, scope: !5939)
!5966 = !DILocation(line: 2148, column: 22, scope: !5939)
!5967 = !DILocation(line: 2149, column: 21, scope: !5939)
!5968 = !DILocation(line: 2149, column: 28, scope: !5939)
!5969 = !DILocation(line: 2149, column: 19, scope: !5939)
!5970 = !DILocation(line: 2150, column: 17, scope: !5939)
!5971 = !DILocation(line: 2150, column: 24, scope: !5939)
!5972 = !DILocation(line: 2150, column: 15, scope: !5939)
!5973 = !DILocation(line: 2153, column: 7, scope: !5939)
!5974 = !DILocation(line: 2154, column: 7, scope: !5939)
!5975 = !DILocation(line: 2156, column: 11, scope: !5976)
!5976 = distinct !DILexicalBlock(scope: !5939, file: !3, line: 2156, column: 11)
!5977 = !DILocation(line: 2156, column: 18, scope: !5976)
!5978 = !DILocation(line: 2156, column: 32, scope: !5976)
!5979 = !DILocation(line: 2156, column: 11, scope: !5939)
!5980 = !DILocation(line: 2157, column: 33, scope: !5976)
!5981 = !DILocation(line: 2157, column: 51, scope: !5976)
!5982 = !DILocation(line: 2157, column: 16, scope: !5976)
!5983 = !DILocation(line: 2157, column: 14, scope: !5976)
!5984 = !DILocation(line: 2157, column: 2, scope: !5976)
!5985 = !DILocation(line: 2159, column: 21, scope: !5939)
!5986 = !DILocation(line: 2159, column: 19, scope: !5939)
!5987 = !DILocation(line: 2161, column: 7, scope: !5939)
!5988 = !DILocation(line: 2165, column: 14, scope: !5989)
!5989 = distinct !DILexicalBlock(scope: !5939, file: !3, line: 2165, column: 7)
!5990 = !DILocation(line: 2165, column: 12, scope: !5989)
!5991 = !DILocation(line: 2165, column: 19, scope: !5992)
!5992 = distinct !DILexicalBlock(scope: !5989, file: !3, line: 2165, column: 7)
!5993 = !DILocation(line: 2165, column: 23, scope: !5992)
!5994 = !DILocation(line: 2165, column: 30, scope: !5992)
!5995 = !DILocation(line: 2165, column: 21, scope: !5992)
!5996 = !DILocation(line: 2165, column: 7, scope: !5989)
!5997 = !DILocation(line: 2167, column: 8, scope: !5998)
!5998 = distinct !DILexicalBlock(scope: !5999, file: !3, line: 2167, column: 8)
!5999 = distinct !DILexicalBlock(scope: !5992, file: !3, line: 2166, column: 2)
!6000 = !DILocation(line: 2167, column: 29, scope: !5998)
!6001 = !DILocation(line: 2167, column: 8, scope: !5999)
!6002 = !DILocation(line: 2169, column: 19, scope: !6003)
!6003 = distinct !DILexicalBlock(scope: !5998, file: !3, line: 2168, column: 6)
!6004 = !DILocation(line: 2169, column: 17, scope: !6003)
!6005 = !DILocation(line: 2170, column: 12, scope: !6006)
!6006 = distinct !DILexicalBlock(scope: !6003, file: !3, line: 2170, column: 12)
!6007 = !DILocation(line: 2170, column: 24, scope: !6006)
!6008 = !DILocation(line: 2170, column: 21, scope: !6006)
!6009 = !DILocation(line: 2170, column: 12, scope: !6003)
!6010 = !DILocation(line: 2171, column: 3, scope: !6006)
!6011 = !DILocation(line: 2174, column: 12, scope: !6012)
!6012 = distinct !DILexicalBlock(scope: !6003, file: !3, line: 2174, column: 12)
!6013 = !DILocation(line: 2174, column: 19, scope: !6012)
!6014 = !DILocation(line: 2175, column: 5, scope: !6012)
!6015 = !DILocation(line: 2175, column: 8, scope: !6012)
!6016 = !DILocation(line: 2175, column: 10, scope: !6012)
!6017 = !DILocation(line: 2176, column: 5, scope: !6012)
!6018 = !DILocation(line: 2176, column: 8, scope: !6012)
!6019 = !DILocation(line: 2176, column: 18, scope: !6012)
!6020 = !DILocation(line: 2177, column: 5, scope: !6012)
!6021 = !DILocation(line: 2177, column: 23, scope: !6012)
!6022 = !DILocation(line: 2177, column: 8, scope: !6012)
!6023 = !DILocation(line: 2174, column: 12, scope: !6003)
!6024 = !DILocation(line: 2179, column: 22, scope: !6012)
!6025 = !DILocation(line: 2178, column: 3, scope: !6012)
!6026 = !DILocation(line: 2182, column: 12, scope: !6027)
!6027 = distinct !DILexicalBlock(scope: !6003, file: !3, line: 2182, column: 12)
!6028 = !DILocation(line: 2182, column: 19, scope: !6027)
!6029 = !DILocation(line: 2183, column: 5, scope: !6027)
!6030 = !DILocation(line: 2183, column: 8, scope: !6027)
!6031 = !DILocation(line: 2183, column: 10, scope: !6027)
!6032 = !DILocation(line: 2184, column: 5, scope: !6027)
!6033 = !DILocation(line: 2184, column: 8, scope: !6027)
!6034 = !DILocation(line: 2184, column: 18, scope: !6027)
!6035 = !DILocation(line: 2185, column: 5, scope: !6027)
!6036 = !DILocation(line: 2185, column: 23, scope: !6027)
!6037 = !DILocation(line: 2185, column: 8, scope: !6027)
!6038 = !DILocation(line: 2182, column: 12, scope: !6003)
!6039 = !DILocation(line: 2187, column: 22, scope: !6027)
!6040 = !DILocation(line: 2186, column: 3, scope: !6027)
!6041 = !DILocation(line: 2189, column: 12, scope: !6042)
!6042 = distinct !DILexicalBlock(scope: !6003, file: !3, line: 2189, column: 12)
!6043 = !DILocation(line: 2189, column: 22, scope: !6042)
!6044 = !DILocation(line: 2189, column: 27, scope: !6042)
!6045 = !DILocation(line: 2189, column: 30, scope: !6042)
!6046 = !DILocation(line: 2189, column: 52, scope: !6042)
!6047 = !DILocation(line: 2189, column: 12, scope: !6003)
!6048 = !DILocation(line: 2190, column: 15, scope: !6042)
!6049 = !DILocation(line: 2190, column: 13, scope: !6042)
!6050 = !DILocation(line: 2190, column: 3, scope: !6042)
!6051 = !DILocation(line: 2192, column: 13, scope: !6042)
!6052 = !DILocation(line: 2199, column: 12, scope: !6053)
!6053 = distinct !DILexicalBlock(scope: !6003, file: !3, line: 2199, column: 12)
!6054 = !DILocation(line: 2199, column: 19, scope: !6053)
!6055 = !DILocation(line: 2200, column: 5, scope: !6053)
!6056 = !DILocation(line: 2200, column: 8, scope: !6053)
!6057 = !DILocation(line: 2200, column: 10, scope: !6053)
!6058 = !DILocation(line: 2201, column: 5, scope: !6053)
!6059 = !DILocation(line: 2201, column: 9, scope: !6053)
!6060 = !DILocation(line: 2202, column: 9, scope: !6053)
!6061 = !DILocation(line: 2202, column: 13, scope: !6053)
!6062 = !DILocation(line: 2202, column: 23, scope: !6053)
!6063 = !DILocation(line: 2203, column: 6, scope: !6053)
!6064 = !DILocation(line: 2203, column: 10, scope: !6053)
!6065 = !DILocation(line: 2204, column: 10, scope: !6053)
!6066 = !DILocation(line: 2204, column: 14, scope: !6053)
!6067 = !DILocation(line: 2205, column: 7, scope: !6053)
!6068 = !DILocation(line: 2205, column: 10, scope: !6053)
!6069 = !DILocation(line: 2199, column: 12, scope: !6003)
!6070 = !DILocation(line: 2207, column: 22, scope: !6053)
!6071 = !DILocation(line: 2206, column: 3, scope: !6053)
!6072 = !DILocation(line: 2212, column: 12, scope: !6073)
!6073 = distinct !DILexicalBlock(scope: !6003, file: !3, line: 2212, column: 12)
!6074 = !DILocation(line: 2212, column: 14, scope: !6073)
!6075 = !DILocation(line: 2213, column: 5, scope: !6073)
!6076 = !DILocation(line: 2213, column: 8, scope: !6073)
!6077 = !DILocation(line: 2214, column: 5, scope: !6073)
!6078 = !DILocation(line: 2214, column: 9, scope: !6073)
!6079 = !DILocation(line: 2215, column: 9, scope: !6073)
!6080 = !DILocation(line: 2215, column: 12, scope: !6073)
!6081 = !DILocation(line: 2216, column: 9, scope: !6073)
!6082 = !DILocation(line: 2216, column: 12, scope: !6073)
!6083 = !DILocation(line: 2212, column: 12, scope: !6003)
!6084 = !DILocation(line: 2219, column: 5, scope: !6073)
!6085 = !DILocation(line: 2217, column: 3, scope: !6073)
!6086 = !DILocation(line: 2221, column: 6, scope: !6003)
!6087 = !DILocation(line: 2224, column: 29, scope: !6088)
!6088 = distinct !DILexicalBlock(scope: !5998, file: !3, line: 2223, column: 6)
!6089 = !DILocation(line: 2224, column: 36, scope: !6088)
!6090 = !DILocation(line: 2224, column: 42, scope: !6088)
!6091 = !DILocation(line: 2224, column: 56, scope: !6088)
!6092 = !DILocation(line: 2225, column: 8, scope: !6088)
!6093 = !DILocation(line: 2225, column: 21, scope: !6088)
!6094 = !DILocation(line: 2225, column: 28, scope: !6088)
!6095 = !DILocation(line: 2226, column: 8, scope: !6088)
!6096 = !DILocation(line: 2226, column: 15, scope: !6088)
!6097 = !DILocation(line: 2226, column: 33, scope: !6088)
!6098 = !DILocation(line: 2227, column: 8, scope: !6088)
!6099 = !DILocation(line: 2224, column: 8, scope: !6088)
!6100 = !DILocation(line: 2228, column: 8, scope: !6088)
!6101 = !DILocation(line: 2230, column: 2, scope: !5999)
!6102 = !DILocation(line: 2165, column: 45, scope: !5992)
!6103 = !DILocation(line: 2165, column: 7, scope: !5992)
!6104 = distinct !{!6104, !5996, !6105}
!6105 = !DILocation(line: 2230, column: 2, scope: !5989)
!6106 = !DILocation(line: 2232, column: 11, scope: !6107)
!6107 = distinct !DILexicalBlock(scope: !5939, file: !3, line: 2232, column: 11)
!6108 = !DILocation(line: 2232, column: 15, scope: !6107)
!6109 = !DILocation(line: 2232, column: 22, scope: !6107)
!6110 = !DILocation(line: 2232, column: 13, scope: !6107)
!6111 = !DILocation(line: 2232, column: 11, scope: !5939)
!6112 = !DILocation(line: 2233, column: 2, scope: !6107)
!6113 = !DILocation(line: 2235, column: 18, scope: !5939)
!6114 = !DILocation(line: 2235, column: 16, scope: !5939)
!6115 = !DILocation(line: 2240, column: 11, scope: !6116)
!6116 = distinct !DILexicalBlock(scope: !5939, file: !3, line: 2240, column: 11)
!6117 = !DILocation(line: 2240, column: 18, scope: !6116)
!6118 = !DILocation(line: 2240, column: 11, scope: !5939)
!6119 = !DILocation(line: 2241, column: 20, scope: !6116)
!6120 = !DILocation(line: 2241, column: 32, scope: !6116)
!6121 = !DILocation(line: 2241, column: 29, scope: !6116)
!6122 = !DILocation(line: 2242, column: 6, scope: !6116)
!6123 = !DILocation(line: 2242, column: 9, scope: !6116)
!6124 = !DILocation(line: 2242, column: 21, scope: !6116)
!6125 = !DILocation(line: 2242, column: 18, scope: !6116)
!6126 = !DILocation(line: 2243, column: 6, scope: !6116)
!6127 = !DILocation(line: 2243, column: 9, scope: !6116)
!6128 = !DILocation(line: 2243, column: 21, scope: !6116)
!6129 = !DILocation(line: 2243, column: 18, scope: !6116)
!6130 = !DILocation(line: 2241, column: 17, scope: !6116)
!6131 = !DILocation(line: 2241, column: 2, scope: !6116)
!6132 = !DILocation(line: 2246, column: 22, scope: !6133)
!6133 = distinct !DILexicalBlock(scope: !5939, file: !3, line: 2246, column: 11)
!6134 = !DILocation(line: 2246, column: 42, scope: !6133)
!6135 = !DILocation(line: 2246, column: 55, scope: !6133)
!6136 = !DILocation(line: 2246, column: 11, scope: !6133)
!6137 = !DILocation(line: 2246, column: 11, scope: !5939)
!6138 = !DILocation(line: 2247, column: 2, scope: !6133)
!6139 = !DILocation(line: 2252, column: 11, scope: !6140)
!6140 = distinct !DILexicalBlock(scope: !5939, file: !3, line: 2252, column: 11)
!6141 = !DILocation(line: 2252, column: 26, scope: !6140)
!6142 = !DILocation(line: 2252, column: 23, scope: !6140)
!6143 = !DILocation(line: 2253, column: 4, scope: !6140)
!6144 = !DILocation(line: 2253, column: 9, scope: !6140)
!6145 = !DILocation(line: 2253, column: 18, scope: !6140)
!6146 = !DILocation(line: 2253, column: 22, scope: !6140)
!6147 = !DILocation(line: 2253, column: 24, scope: !6140)
!6148 = !DILocation(line: 2253, column: 29, scope: !6140)
!6149 = !DILocation(line: 2253, column: 32, scope: !6140)
!6150 = !DILocation(line: 2252, column: 11, scope: !5939)
!6151 = !DILocation(line: 2254, column: 2, scope: !6140)
!6152 = !DILocation(line: 2259, column: 11, scope: !6153)
!6153 = distinct !DILexicalBlock(scope: !5939, file: !3, line: 2259, column: 11)
!6154 = !DILocation(line: 2259, column: 35, scope: !6153)
!6155 = !DILocation(line: 2260, column: 4, scope: !6153)
!6156 = !DILocation(line: 2260, column: 7, scope: !6153)
!6157 = !DILocation(line: 2260, column: 28, scope: !6153)
!6158 = !DILocation(line: 2261, column: 4, scope: !6153)
!6159 = !DILocation(line: 2261, column: 9, scope: !6153)
!6160 = !DILocation(line: 2261, column: 18, scope: !6153)
!6161 = !DILocation(line: 2261, column: 21, scope: !6153)
!6162 = !DILocation(line: 2261, column: 23, scope: !6153)
!6163 = !DILocation(line: 2261, column: 28, scope: !6153)
!6164 = !DILocation(line: 2261, column: 32, scope: !6153)
!6165 = !DILocation(line: 2261, column: 34, scope: !6153)
!6166 = !DILocation(line: 2261, column: 39, scope: !6153)
!6167 = !DILocation(line: 2261, column: 42, scope: !6153)
!6168 = !DILocation(line: 2262, column: 4, scope: !6153)
!6169 = !DILocation(line: 2262, column: 8, scope: !6153)
!6170 = !DILocation(line: 2259, column: 11, scope: !5939)
!6171 = !DILocation(line: 2263, column: 10, scope: !6153)
!6172 = !DILocation(line: 2263, column: 49, scope: !6153)
!6173 = !DILocation(line: 2263, column: 25, scope: !6153)
!6174 = !DILocation(line: 2263, column: 22, scope: !6153)
!6175 = !DILocation(line: 2264, column: 10, scope: !6153)
!6176 = !DILocation(line: 2264, column: 47, scope: !6153)
!6177 = !DILocation(line: 2264, column: 25, scope: !6153)
!6178 = !DILocation(line: 2264, column: 22, scope: !6153)
!6179 = !DILocation(line: 2265, column: 2, scope: !6153)
!6180 = !DILocation(line: 2268, column: 11, scope: !6181)
!6181 = distinct !DILexicalBlock(scope: !5939, file: !3, line: 2268, column: 11)
!6182 = !DILocation(line: 2268, column: 26, scope: !6181)
!6183 = !DILocation(line: 2268, column: 23, scope: !6181)
!6184 = !DILocation(line: 2269, column: 4, scope: !6181)
!6185 = !DILocation(line: 2269, column: 9, scope: !6181)
!6186 = !DILocation(line: 2269, column: 18, scope: !6181)
!6187 = !DILocation(line: 2269, column: 21, scope: !6181)
!6188 = !DILocation(line: 2269, column: 23, scope: !6181)
!6189 = !DILocation(line: 2270, column: 4, scope: !6181)
!6190 = !DILocation(line: 2270, column: 7, scope: !6181)
!6191 = !DILocation(line: 2268, column: 11, scope: !5939)
!6192 = !DILocation(line: 2271, column: 2, scope: !6181)
!6193 = !DILocation(line: 2272, column: 11, scope: !6194)
!6194 = distinct !DILexicalBlock(scope: !5939, file: !3, line: 2272, column: 11)
!6195 = !DILocation(line: 2272, column: 18, scope: !6194)
!6196 = !DILocation(line: 2273, column: 4, scope: !6194)
!6197 = !DILocation(line: 2273, column: 8, scope: !6194)
!6198 = !DILocation(line: 2273, column: 32, scope: !6194)
!6199 = !DILocation(line: 2273, column: 29, scope: !6194)
!6200 = !DILocation(line: 2274, column: 8, scope: !6194)
!6201 = !DILocation(line: 2274, column: 12, scope: !6194)
!6202 = !DILocation(line: 2275, column: 5, scope: !6194)
!6203 = !DILocation(line: 2275, column: 8, scope: !6194)
!6204 = !DILocation(line: 2276, column: 4, scope: !6194)
!6205 = !DILocation(line: 2276, column: 7, scope: !6194)
!6206 = !DILocation(line: 2276, column: 36, scope: !6194)
!6207 = !DILocation(line: 2276, column: 33, scope: !6194)
!6208 = !DILocation(line: 2272, column: 11, scope: !5939)
!6209 = !DILocation(line: 2277, column: 2, scope: !6194)
!6210 = !DILocation(line: 2279, column: 28, scope: !5939)
!6211 = !DILocation(line: 2279, column: 35, scope: !5939)
!6212 = !DILocation(line: 2279, column: 41, scope: !5939)
!6213 = !DILocation(line: 2279, column: 55, scope: !5939)
!6214 = !DILocation(line: 2280, column: 7, scope: !5939)
!6215 = !DILocation(line: 2280, column: 20, scope: !5939)
!6216 = !DILocation(line: 2280, column: 27, scope: !5939)
!6217 = !DILocation(line: 2281, column: 7, scope: !5939)
!6218 = !DILocation(line: 2281, column: 14, scope: !5939)
!6219 = !DILocation(line: 2281, column: 32, scope: !5939)
!6220 = !DILocation(line: 2281, column: 47, scope: !5939)
!6221 = !DILocation(line: 2279, column: 7, scope: !5939)
!6222 = !DILocation(line: 2282, column: 5, scope: !5939)
!6223 = !DILocation(line: 2134, column: 30, scope: !5934)
!6224 = !DILocation(line: 2134, column: 37, scope: !5934)
!6225 = !DILocation(line: 2134, column: 28, scope: !5934)
!6226 = !DILocation(line: 2134, column: 3, scope: !5934)
!6227 = distinct !{!6227, !5937, !6228}
!6228 = !DILocation(line: 2282, column: 5, scope: !5935)
!6229 = !DILocation(line: 2283, column: 1, scope: !5923)
!6230 = distinct !DISubprogram(name: "format_type_warning", scope: !3, file: !3, line: 2297, type: !6231, scopeLine: 2300, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!6231 = !DISubroutineType(types: !6232)
!6232 = !{null, !1646, !1646, !1140, !1348, !1140, !1646, !1348, !1140}
!6233 = !DILocalVariable(name: "descr", arg: 1, scope: !6230, file: !3, line: 2297, type: !1646)
!6234 = !DILocation(line: 2297, column: 34, scope: !6230)
!6235 = !DILocalVariable(name: "format_start", arg: 2, scope: !6230, file: !3, line: 2297, type: !1646)
!6236 = !DILocation(line: 2297, column: 53, scope: !6230)
!6237 = !DILocalVariable(name: "format_length", arg: 3, scope: !6230, file: !3, line: 2298, type: !1140)
!6238 = !DILocation(line: 2298, column: 12, scope: !6230)
!6239 = !DILocalVariable(name: "wanted_type", arg: 4, scope: !6230, file: !3, line: 2298, type: !1348)
!6240 = !DILocation(line: 2298, column: 32, scope: !6230)
!6241 = !DILocalVariable(name: "pointer_count", arg: 5, scope: !6230, file: !3, line: 2298, type: !1140)
!6242 = !DILocation(line: 2298, column: 49, scope: !6230)
!6243 = !DILocalVariable(name: "wanted_type_name", arg: 6, scope: !6230, file: !3, line: 2299, type: !1646)
!6244 = !DILocation(line: 2299, column: 20, scope: !6230)
!6245 = !DILocalVariable(name: "arg_type", arg: 7, scope: !6230, file: !3, line: 2299, type: !1348)
!6246 = !DILocation(line: 2299, column: 43, scope: !6230)
!6247 = !DILocalVariable(name: "arg_num", arg: 8, scope: !6230, file: !3, line: 2299, type: !1140)
!6248 = !DILocation(line: 2299, column: 57, scope: !6230)
!6249 = !DILocalVariable(name: "p", scope: !6230, file: !3, line: 2301, type: !2111)
!6250 = !DILocation(line: 2301, column: 9, scope: !6230)
!6251 = !DILocation(line: 2305, column: 7, scope: !6252)
!6252 = distinct !DILexicalBlock(scope: !6230, file: !3, line: 2305, column: 7)
!6253 = !DILocation(line: 2306, column: 7, scope: !6252)
!6254 = !DILocation(line: 2306, column: 10, scope: !6252)
!6255 = !DILocation(line: 2307, column: 7, scope: !6252)
!6256 = !DILocation(line: 2307, column: 10, scope: !6252)
!6257 = !DILocation(line: 2307, column: 43, scope: !6252)
!6258 = !DILocation(line: 2308, column: 7, scope: !6252)
!6259 = !DILocation(line: 2308, column: 10, scope: !6252)
!6260 = !DILocation(line: 2309, column: 7, scope: !6252)
!6261 = !DILocation(line: 2309, column: 19, scope: !6252)
!6262 = !DILocation(line: 2310, column: 16, scope: !6252)
!6263 = !DILocation(line: 2310, column: 37, scope: !6252)
!6264 = !DILocation(line: 2310, column: 5, scope: !6252)
!6265 = !DILocation(line: 2309, column: 11, scope: !6252)
!6266 = !DILocation(line: 2305, column: 7, scope: !6230)
!6267 = !DILocation(line: 2311, column: 16, scope: !6252)
!6268 = !DILocation(line: 2311, column: 14, scope: !6252)
!6269 = !DILocation(line: 2311, column: 5, scope: !6252)
!6270 = !DILocation(line: 2317, column: 16, scope: !6230)
!6271 = !DILocation(line: 2317, column: 5, scope: !6230)
!6272 = !DILocation(line: 2318, column: 7, scope: !6273)
!6273 = distinct !DILexicalBlock(scope: !6230, file: !3, line: 2318, column: 7)
!6274 = !DILocation(line: 2318, column: 21, scope: !6273)
!6275 = !DILocation(line: 2318, column: 7, scope: !6230)
!6276 = !DILocation(line: 2319, column: 5, scope: !6273)
!6277 = !DILocation(line: 2319, column: 10, scope: !6273)
!6278 = !DILocation(line: 2320, column: 12, scope: !6279)
!6279 = distinct !DILexicalBlock(scope: !6273, file: !3, line: 2320, column: 12)
!6280 = !DILocation(line: 2320, column: 12, scope: !6273)
!6281 = !DILocation(line: 2322, column: 15, scope: !6282)
!6282 = distinct !DILexicalBlock(scope: !6279, file: !3, line: 2321, column: 5)
!6283 = !DILocation(line: 2322, column: 23, scope: !6282)
!6284 = !DILocation(line: 2322, column: 7, scope: !6282)
!6285 = !DILocation(line: 2323, column: 7, scope: !6282)
!6286 = !DILocation(line: 2323, column: 9, scope: !6282)
!6287 = !DILocation(line: 2323, column: 24, scope: !6282)
!6288 = !DILocation(line: 2324, column: 5, scope: !6282)
!6289 = !DILocation(line: 2327, column: 7, scope: !6290)
!6290 = distinct !DILexicalBlock(scope: !6279, file: !3, line: 2326, column: 5)
!6291 = !DILocation(line: 2327, column: 12, scope: !6290)
!6292 = !DILocation(line: 2328, column: 15, scope: !6290)
!6293 = !DILocation(line: 2328, column: 17, scope: !6290)
!6294 = !DILocation(line: 2328, column: 27, scope: !6290)
!6295 = !DILocation(line: 2328, column: 7, scope: !6290)
!6296 = !DILocation(line: 2329, column: 7, scope: !6290)
!6297 = !DILocation(line: 2329, column: 9, scope: !6290)
!6298 = !DILocation(line: 2329, column: 23, scope: !6290)
!6299 = !DILocation(line: 2329, column: 28, scope: !6290)
!6300 = !DILocation(line: 2331, column: 7, scope: !6301)
!6301 = distinct !DILexicalBlock(scope: !6230, file: !3, line: 2331, column: 7)
!6302 = !DILocation(line: 2331, column: 7, scope: !6230)
!6303 = !DILocation(line: 2333, column: 11, scope: !6304)
!6304 = distinct !DILexicalBlock(scope: !6305, file: !3, line: 2333, column: 11)
!6305 = distinct !DILexicalBlock(scope: !6301, file: !3, line: 2332, column: 5)
!6306 = !DILocation(line: 2333, column: 11, scope: !6305)
!6307 = !DILocation(line: 2336, column: 4, scope: !6304)
!6308 = !DILocation(line: 2336, column: 11, scope: !6304)
!6309 = !DILocation(line: 2336, column: 29, scope: !6304)
!6310 = !DILocation(line: 2336, column: 32, scope: !6304)
!6311 = !DILocation(line: 2336, column: 41, scope: !6304)
!6312 = !DILocation(line: 2334, column: 2, scope: !6304)
!6313 = !DILocation(line: 2340, column: 4, scope: !6304)
!6314 = !DILocation(line: 2340, column: 19, scope: !6304)
!6315 = !DILocation(line: 2340, column: 33, scope: !6304)
!6316 = !DILocation(line: 2340, column: 51, scope: !6304)
!6317 = !DILocation(line: 2341, column: 4, scope: !6304)
!6318 = !DILocation(line: 2341, column: 13, scope: !6304)
!6319 = !DILocation(line: 2338, column: 2, scope: !6304)
!6320 = !DILocation(line: 2342, column: 5, scope: !6305)
!6321 = !DILocation(line: 2345, column: 11, scope: !6322)
!6322 = distinct !DILexicalBlock(scope: !6323, file: !3, line: 2345, column: 11)
!6323 = distinct !DILexicalBlock(scope: !6301, file: !3, line: 2344, column: 5)
!6324 = !DILocation(line: 2345, column: 11, scope: !6323)
!6325 = !DILocation(line: 2348, column: 4, scope: !6322)
!6326 = !DILocation(line: 2348, column: 11, scope: !6322)
!6327 = !DILocation(line: 2348, column: 24, scope: !6322)
!6328 = !DILocation(line: 2348, column: 27, scope: !6322)
!6329 = !DILocation(line: 2348, column: 36, scope: !6322)
!6330 = !DILocation(line: 2346, column: 2, scope: !6322)
!6331 = !DILocation(line: 2352, column: 4, scope: !6322)
!6332 = !DILocation(line: 2352, column: 19, scope: !6322)
!6333 = !DILocation(line: 2352, column: 33, scope: !6322)
!6334 = !DILocation(line: 2352, column: 46, scope: !6322)
!6335 = !DILocation(line: 2352, column: 49, scope: !6322)
!6336 = !DILocation(line: 2352, column: 58, scope: !6322)
!6337 = !DILocation(line: 2350, column: 2, scope: !6322)
!6338 = !DILocation(line: 2354, column: 1, scope: !6230)
!6339 = distinct !DISubprogram(name: "find_length_info_modifier_index", scope: !3, file: !3, line: 2380, type: !6340, scopeLine: 2381, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!6340 = !DISubroutineType(types: !6341)
!6341 = !{!7, !1998, !1140}
!6342 = !DILocalVariable(name: "fli", arg: 1, scope: !6339, file: !3, line: 2380, type: !1998)
!6343 = !DILocation(line: 2380, column: 60, scope: !6339)
!6344 = !DILocalVariable(name: "c", arg: 2, scope: !6339, file: !3, line: 2380, type: !1140)
!6345 = !DILocation(line: 2380, column: 69, scope: !6339)
!6346 = !DILocalVariable(name: "i", scope: !6339, file: !3, line: 2382, type: !7)
!6347 = !DILocation(line: 2382, column: 12, scope: !6339)
!6348 = !DILocation(line: 2384, column: 10, scope: !6349)
!6349 = distinct !DILexicalBlock(scope: !6339, file: !3, line: 2384, column: 3)
!6350 = !DILocation(line: 2384, column: 8, scope: !6349)
!6351 = !DILocation(line: 2384, column: 15, scope: !6352)
!6352 = distinct !DILexicalBlock(scope: !6349, file: !3, line: 2384, column: 3)
!6353 = !DILocation(line: 2384, column: 20, scope: !6352)
!6354 = !DILocation(line: 2384, column: 3, scope: !6349)
!6355 = !DILocation(line: 2385, column: 17, scope: !6356)
!6356 = distinct !DILexicalBlock(scope: !6352, file: !3, line: 2385, column: 9)
!6357 = !DILocation(line: 2385, column: 22, scope: !6356)
!6358 = !DILocation(line: 2385, column: 28, scope: !6356)
!6359 = !DILocation(line: 2385, column: 9, scope: !6356)
!6360 = !DILocation(line: 2385, column: 9, scope: !6352)
!6361 = !DILocation(line: 2386, column: 14, scope: !6356)
!6362 = !DILocation(line: 2386, column: 7, scope: !6356)
!6363 = !DILocation(line: 2385, column: 29, scope: !6356)
!6364 = !DILocation(line: 2384, column: 27, scope: !6352)
!6365 = !DILocation(line: 2384, column: 34, scope: !6352)
!6366 = !DILocation(line: 2384, column: 3, scope: !6352)
!6367 = distinct !{!6367, !6354, !6368}
!6368 = !DILocation(line: 2386, column: 14, scope: !6349)
!6369 = !DILocation(line: 2389, column: 3, scope: !6339)
!6370 = !DILocation(line: 2391, column: 5, scope: !6339)
!6371 = !DILocation(line: 2393, column: 1, scope: !6339)
!6372 = distinct !DISubprogram(name: "find_char_info_specifier_index", scope: !3, file: !3, line: 2361, type: !6373, scopeLine: 2362, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2262)
!6373 = !DISubroutineType(types: !6374)
!6374 = !{!7, !2011, !1140}
!6375 = !DILocalVariable(name: "fci", arg: 1, scope: !6372, file: !3, line: 2361, type: !2011)
!6376 = !DILocation(line: 2361, column: 57, scope: !6372)
!6377 = !DILocalVariable(name: "c", arg: 2, scope: !6372, file: !3, line: 2361, type: !1140)
!6378 = !DILocation(line: 2361, column: 66, scope: !6372)
!6379 = !DILocalVariable(name: "i", scope: !6372, file: !3, line: 2363, type: !7)
!6380 = !DILocation(line: 2363, column: 12, scope: !6372)
!6381 = !DILocation(line: 2365, column: 10, scope: !6382)
!6382 = distinct !DILexicalBlock(scope: !6372, file: !3, line: 2365, column: 3)
!6383 = !DILocation(line: 2365, column: 8, scope: !6382)
!6384 = !DILocation(line: 2365, column: 15, scope: !6385)
!6385 = distinct !DILexicalBlock(scope: !6382, file: !3, line: 2365, column: 3)
!6386 = !DILocation(line: 2365, column: 20, scope: !6385)
!6387 = !DILocation(line: 2365, column: 3, scope: !6382)
!6388 = !DILocation(line: 2366, column: 17, scope: !6389)
!6389 = distinct !DILexicalBlock(scope: !6385, file: !3, line: 2366, column: 9)
!6390 = !DILocation(line: 2366, column: 22, scope: !6389)
!6391 = !DILocation(line: 2366, column: 36, scope: !6389)
!6392 = !DILocation(line: 2366, column: 9, scope: !6389)
!6393 = !DILocation(line: 2366, column: 9, scope: !6385)
!6394 = !DILocation(line: 2367, column: 14, scope: !6389)
!6395 = !DILocation(line: 2367, column: 7, scope: !6389)
!6396 = !DILocation(line: 2366, column: 37, scope: !6389)
!6397 = !DILocation(line: 2365, column: 35, scope: !6385)
!6398 = !DILocation(line: 2365, column: 42, scope: !6385)
!6399 = !DILocation(line: 2365, column: 3, scope: !6385)
!6400 = distinct !{!6400, !6387, !6401}
!6401 = !DILocation(line: 2367, column: 14, scope: !6382)
!6402 = !DILocation(line: 2370, column: 3, scope: !6372)
!6403 = !DILocation(line: 2372, column: 5, scope: !6372)
!6404 = !DILocation(line: 2374, column: 1, scope: !6372)
