; ModuleID = 'matrix-reorg.c'
source_filename = "matrix-reorg.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.simple_ipa_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.gcov_ctr_summary = type opaque
%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.ipa_opt_pass_d = type { %struct.opt_pass, void ()*, void (%struct.cgraph_node_set_def*)*, void ()*, void (%struct.cgraph_node*)*, void (%struct.cgraph_node*, %union.gimple_statement_d**)*, i32, i32 (%struct.cgraph_node*)*, void (%struct.varpool_node*)* }
%struct.cgraph_node_set_def = type { %struct.htab*, %struct.VEC_cgraph_node_ptr_gc*, i8* }
%struct.VEC_cgraph_node_ptr_gc = type { %struct.VEC_cgraph_node_ptr_base }
%struct.VEC_cgraph_node_ptr_base = type { i32, i32, [1 x %struct.cgraph_node*] }
%struct.varpool_node = type { %union.tree_node*, %struct.varpool_node*, %struct.varpool_node*, %struct.varpool_node*, i32, i8 }
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.lto_file_decl_data = type opaque
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.matrix_info = type { %union.tree_node*, i32, i32, %union.gimple_statement_d*, %union.gimple_statement_d**, i32, i8, %union.tree_node*, %struct.free_info*, %union.tree_node**, %union.tree_node**, i64*, i32, i64*, %struct.VEC_access_site_info_p_heap*, i32* }
%struct.free_info = type { %union.gimple_statement_d*, %union.tree_node* }
%struct.VEC_access_site_info_p_heap = type { %struct.VEC_access_site_info_p_base }
%struct.VEC_access_site_info_p_base = type { i32, i32, [1 x %struct.access_site_info*] }
%struct.access_site_info = type { %union.gimple_statement_d*, %union.tree_node*, %union.tree_node*, i32, i8, %union.tree_node*, i8 }
%struct.matrix_access_phi_node = type { %union.gimple_statement_d*, i32 }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.affine_iv = type { %union.tree_node*, %union.tree_node*, i8 }
%struct.malloc_call_data = type { %union.gimple_statement_d*, %union.tree_node*, %union.tree_node* }
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }
%struct.check_var_data = type { %union.tree_node*, %union.gimple_statement_d* }
%struct.pointer_set_t = type opaque
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.ssa_acc_in_tree = type { %union.tree_node*, i32, %union.tree_node*, %union.tree_node**, %union.tree_node*, i8 }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }

@.str = private unnamed_addr constant [13 x i8] c"matrix-reorg\00", align 1
@pass_ipa_matrix_reorg = dso_local global %struct.simple_ipa_opt_pass { %struct.opt_pass { i32 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i8 ()* @gate_matrix_reorg, i32 ()* @matrix_reorg, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 129 } }, align 8, !dbg !0
@flag_ipa_matrix_reorg = external dso_local global i32, align 4
@flag_whole_program = external dso_local global i32, align 4
@profile_info = external dso_local global %struct.gcov_ctr_summary*, align 8
@check_transpose_p = internal global i8 0, align 1, !dbg !3005
@cgraph_nodes = external dso_local global %struct.cgraph_node*, align 8
@matrices_to_reorg = internal global %struct.htab* null, align 8, !dbg !3007
@current_function_decl = external dso_local global %union.tree_node*, align 8
@cfun = external dso_local global %struct.function*, align 8
@htab_mat_acc_phi_nodes = internal global %struct.htab* null, align 8, !dbg !3009
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [41 x i8] c"Found vector type, don't flatten matrix\0A\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@htab_hash_pointer = external dso_local global i32 (i8*)*, align 8
@.str.4 = private unnamed_addr constant [15 x i8] c"matrix-reorg.c\00", align 1
@varpool_nodes_queue = external dso_local global %struct.varpool_node*, align 8
@.str.5 = private unnamed_addr constant [41 x i8] c"Matrix %s is an argument to function %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [48 x i8] c"Matrix %s: Function call %s, level %d escapes.\0A\00", align 1
@.str.7 = private unnamed_addr constant [74 x i8] c"Matrix %s: Cannot calculate the size of allocation, escaping at level %d\0A\00", align 1
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@.str.8 = private unnamed_addr constant [12 x i8] c"Matrix %s:\0A\00", align 1
@.str.9 = private unnamed_addr constant [20 x i8] c"dim %d before sort \00", align 1
@.str.10 = private unnamed_addr constant [17 x i8] c"count is  %ld  \0A\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"dim %d after sort\0A\00", align 1
@.str.12 = private unnamed_addr constant [27 x i8] c"dim_map[%d] after sort %d\0A\00", align 1
@.str.13 = private unnamed_addr constant [45 x i8] c"Transposed dimensions: dim %d is now dim %d\0A\00", align 1
@.str.14 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"new\00", align 1
@sizetype_tab = external dso_local global [4 x %union.tree_node*], align 16
@.str.16 = private unnamed_addr constant [47 x i8] c"Matrix \22%s\22; Escaping Level: %d, Num Dims: %d,\00", align 1
@.str.17 = private unnamed_addr constant [19 x i8] c" Malloc Dims: %d, \00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.19 = private unnamed_addr constant [26 x i8] c"Flattened %d dimensions \0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_matrix_reorg() #0 !dbg !3041 {
entry:
  %0 = load i32, i32* @flag_ipa_matrix_reorg, align 4, !dbg !3043
  %tobool = icmp ne i32 %0, 0, !dbg !3043
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3044

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* @flag_whole_program, align 4, !dbg !3045
  %tobool1 = icmp ne i32 %1, 0, !dbg !3044
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %tobool1, %land.rhs ], !dbg !3046
  %land.ext = zext i1 %2 to i32, !dbg !3044
  %conv = trunc i32 %land.ext to i8, !dbg !3043
  ret i8 %conv, !dbg !3047
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @matrix_reorg() #0 !dbg !3048 {
entry:
  %retval = alloca i32, align 4
  %node = alloca %struct.cgraph_node*, align 8
  %temp_fn = alloca %union.tree_node*, align 8
  %temp_fn49 = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !3049, metadata !DIExpression()), !dbg !3255
  %0 = load %struct.gcov_ctr_summary*, %struct.gcov_ctr_summary** @profile_info, align 8, !dbg !3256
  %tobool = icmp ne %struct.gcov_ctr_summary* %0, null, !dbg !3256
  br i1 %tobool, label %if.then, label %if.else, !dbg !3258

if.then:                                          ; preds = %entry
  store i8 1, i8* @check_transpose_p, align 1, !dbg !3259
  br label %if.end, !dbg !3260

if.else:                                          ; preds = %entry
  store i8 0, i8* @check_transpose_p, align 1, !dbg !3261
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !3262
  store %struct.cgraph_node* %1, %struct.cgraph_node** %node, align 8, !dbg !3264
  br label %for.cond, !dbg !3265

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3266
  %tobool1 = icmp ne %struct.cgraph_node* %2, null, !dbg !3268
  br i1 %tobool1, label %for.body, label %for.end, !dbg !3268

for.body:                                         ; preds = %for.cond
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3269
  %call = call zeroext i8 @may_flatten_matrices(%struct.cgraph_node* %3), !dbg !3271
  %tobool2 = icmp ne i8 %call, 0, !dbg !3271
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !3272

if.then3:                                         ; preds = %for.body
  store i32 0, i32* %retval, align 4, !dbg !3273
  br label %return, !dbg !3273

if.end4:                                          ; preds = %for.body
  br label %for.inc, !dbg !3274

for.inc:                                          ; preds = %if.end4
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3275
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 3, !dbg !3276
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !3276
  store %struct.cgraph_node* %5, %struct.cgraph_node** %node, align 8, !dbg !3277
  br label %for.cond, !dbg !3278, !llvm.loop !3279

for.end:                                          ; preds = %for.cond
  %call5 = call %struct.htab* @htab_create(i64 37, i32 (i8*)* @mtt_info_hash, i32 (i8*, i8*)* @mtt_info_eq, void (i8*)* @mat_free), !dbg !3281
  store %struct.htab* %call5, %struct.htab** @matrices_to_reorg, align 8, !dbg !3282
  call void @find_matrices_decl(), !dbg !3283
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !3284
  store %struct.cgraph_node* %6, %struct.cgraph_node** %node, align 8, !dbg !3286
  br label %for.cond6, !dbg !3287

for.cond6:                                        ; preds = %for.inc36, %for.end
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3288
  %tobool7 = icmp ne %struct.cgraph_node* %7, null, !dbg !3290
  br i1 %tobool7, label %for.body8, label %for.end38, !dbg !3290

for.body8:                                        ; preds = %for.cond6
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3291
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 27, !dbg !3293
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !3293
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !3293
  %bf.clear = and i16 %bf.lshr, 1, !dbg !3293
  %bf.cast = zext i16 %bf.clear to i32, !dbg !3293
  %tobool9 = icmp ne i32 %bf.cast, 0, !dbg !3291
  br i1 %tobool9, label %if.then10, label %if.end35, !dbg !3294

if.then10:                                        ; preds = %for.body8
  call void @llvm.dbg.declare(metadata %union.tree_node** %temp_fn, metadata !3295, metadata !DIExpression()), !dbg !3297
  %9 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3298
  store %union.tree_node* %9, %union.tree_node** %temp_fn, align 8, !dbg !3299
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3300
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 0, !dbg !3301
  %11 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3301
  store %union.tree_node* %11, %union.tree_node** @current_function_decl, align 8, !dbg !3302
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3303
  %decl11 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 0, !dbg !3303
  %13 = load %union.tree_node*, %union.tree_node** %decl11, align 8, !dbg !3303
  %function_decl = bitcast %union.tree_node* %13 to %struct.tree_function_decl*, !dbg !3303
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !3303
  %14 = load %struct.function*, %struct.function** %f, align 8, !dbg !3303
  call void @push_cfun(%struct.function* %14), !dbg !3304
  call void @bitmap_obstack_initialize(%struct.bitmap_obstack* null), !dbg !3305
  call void @gimple_register_cfg_hooks(), !dbg !3306
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3307
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !3307
  %call12 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr), !dbg !3309
  %tobool13 = icmp ne i8 %call12, 0, !dbg !3309
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !3310

if.then14:                                        ; preds = %if.then10
  call void @free_dominance_info(i32 1), !dbg !3311
  call void @free_dominance_info(i32 2), !dbg !3313
  call void @pop_cfun(), !dbg !3314
  %16 = load %union.tree_node*, %union.tree_node** %temp_fn, align 8, !dbg !3315
  store %union.tree_node* %16, %union.tree_node** @current_function_decl, align 8, !dbg !3316
  call void @bitmap_obstack_release(%struct.bitmap_obstack* null), !dbg !3317
  store i32 0, i32* %retval, align 4, !dbg !3318
  br label %return, !dbg !3318

if.end15:                                         ; preds = %if.then10
  %17 = load %struct.htab*, %struct.htab** @matrices_to_reorg, align 8, !dbg !3319
  %tobool16 = icmp ne %struct.htab* %17, null, !dbg !3319
  br i1 %tobool16, label %if.end18, label %if.then17, !dbg !3321

if.then17:                                        ; preds = %if.end15
  call void @free_dominance_info(i32 1), !dbg !3322
  call void @free_dominance_info(i32 2), !dbg !3324
  call void @pop_cfun(), !dbg !3325
  %18 = load %union.tree_node*, %union.tree_node** %temp_fn, align 8, !dbg !3326
  store %union.tree_node* %18, %union.tree_node** @current_function_decl, align 8, !dbg !3327
  call void @bitmap_obstack_release(%struct.bitmap_obstack* null), !dbg !3328
  store i32 0, i32* %retval, align 4, !dbg !3329
  br label %return, !dbg !3329

if.end18:                                         ; preds = %if.end15
  %call19 = call %struct.htab* @htab_create(i64 37, i32 (i8*)* @mat_acc_phi_hash, i32 (i8*, i8*)* @mat_acc_phi_eq, void (i8*)* @free), !dbg !3330
  store %struct.htab* %call19, %struct.htab** @htab_mat_acc_phi_nodes, align 8, !dbg !3331
  %19 = load i8, i8* @check_transpose_p, align 1, !dbg !3332
  %tobool20 = icmp ne i8 %19, 0, !dbg !3332
  br i1 %tobool20, label %if.else22, label %if.then21, !dbg !3334

if.then21:                                        ; preds = %if.end18
  call void @find_sites_in_func(i8 zeroext 0), !dbg !3335
  br label %if.end34, !dbg !3335

if.else22:                                        ; preds = %if.end18
  call void @find_sites_in_func(i8 zeroext 1), !dbg !3336
  call void @loop_optimizer_init(i32 7), !dbg !3338
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3339
  %add.ptr23 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !3339
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr23, i32 0, i32 4, !dbg !3339
  %21 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3339
  %tobool24 = icmp ne %struct.loops* %21, null, !dbg !3339
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !3341

if.then25:                                        ; preds = %if.else22
  call void @scev_initialize(), !dbg !3342
  br label %if.end26, !dbg !3342

if.end26:                                         ; preds = %if.then25, %if.else22
  %22 = load %struct.htab*, %struct.htab** @matrices_to_reorg, align 8, !dbg !3343
  call void @htab_traverse(%struct.htab* %22, i32 (i8**, i8*)* @analyze_transpose, i8* null), !dbg !3344
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3345
  %add.ptr27 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !3345
  %x_current_loops28 = getelementptr inbounds %struct.function, %struct.function* %add.ptr27, i32 0, i32 4, !dbg !3345
  %24 = load %struct.loops*, %struct.loops** %x_current_loops28, align 8, !dbg !3345
  %tobool29 = icmp ne %struct.loops* %24, null, !dbg !3345
  br i1 %tobool29, label %if.then30, label %if.end33, !dbg !3347

if.then30:                                        ; preds = %if.end26
  call void @scev_finalize(), !dbg !3348
  call void @loop_optimizer_finalize(), !dbg !3350
  %25 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3351
  %add.ptr31 = getelementptr inbounds %struct.function, %struct.function* %25, i64 0, !dbg !3351
  %x_current_loops32 = getelementptr inbounds %struct.function, %struct.function* %add.ptr31, i32 0, i32 4, !dbg !3351
  store %struct.loops* null, %struct.loops** %x_current_loops32, align 8, !dbg !3352
  br label %if.end33, !dbg !3353

if.end33:                                         ; preds = %if.then30, %if.end26
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.then21
  %26 = load %struct.htab*, %struct.htab** @matrices_to_reorg, align 8, !dbg !3354
  call void @htab_traverse(%struct.htab* %26, i32 (i8**, i8*)* @check_allocation_function, i8* null), !dbg !3355
  call void @free_dominance_info(i32 1), !dbg !3356
  call void @free_dominance_info(i32 2), !dbg !3357
  call void @pop_cfun(), !dbg !3358
  %27 = load %union.tree_node*, %union.tree_node** %temp_fn, align 8, !dbg !3359
  store %union.tree_node* %27, %union.tree_node** @current_function_decl, align 8, !dbg !3360
  call void @bitmap_obstack_release(%struct.bitmap_obstack* null), !dbg !3361
  br label %if.end35, !dbg !3362

if.end35:                                         ; preds = %if.end34, %for.body8
  br label %for.inc36, !dbg !3293

for.inc36:                                        ; preds = %if.end35
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3363
  %next37 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %28, i32 0, i32 3, !dbg !3364
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %next37, align 8, !dbg !3364
  store %struct.cgraph_node* %29, %struct.cgraph_node** %node, align 8, !dbg !3365
  br label %for.cond6, !dbg !3366, !llvm.loop !3367

for.end38:                                        ; preds = %for.cond6
  %30 = load %struct.htab*, %struct.htab** @matrices_to_reorg, align 8, !dbg !3369
  call void @htab_traverse(%struct.htab* %30, i32 (i8**, i8*)* @transform_allocation_sites, i8* null), !dbg !3370
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !3371
  store %struct.cgraph_node* %31, %struct.cgraph_node** %node, align 8, !dbg !3373
  br label %for.cond39, !dbg !3374

for.cond39:                                       ; preds = %for.inc55, %for.end38
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3375
  %tobool40 = icmp ne %struct.cgraph_node* %32, null, !dbg !3377
  br i1 %tobool40, label %for.body41, label %for.end57, !dbg !3377

for.body41:                                       ; preds = %for.cond39
  %33 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3378
  %analyzed42 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %33, i32 0, i32 27, !dbg !3380
  %bf.load43 = load i16, i16* %analyzed42, align 4, !dbg !3380
  %bf.lshr44 = lshr i16 %bf.load43, 5, !dbg !3380
  %bf.clear45 = and i16 %bf.lshr44, 1, !dbg !3380
  %bf.cast46 = zext i16 %bf.clear45 to i32, !dbg !3380
  %tobool47 = icmp ne i32 %bf.cast46, 0, !dbg !3378
  br i1 %tobool47, label %if.then48, label %if.end54, !dbg !3381

if.then48:                                        ; preds = %for.body41
  call void @llvm.dbg.declare(metadata %union.tree_node** %temp_fn49, metadata !3382, metadata !DIExpression()), !dbg !3384
  %34 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3385
  store %union.tree_node* %34, %union.tree_node** %temp_fn49, align 8, !dbg !3386
  %35 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3387
  %decl50 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %35, i32 0, i32 0, !dbg !3388
  %36 = load %union.tree_node*, %union.tree_node** %decl50, align 8, !dbg !3388
  store %union.tree_node* %36, %union.tree_node** @current_function_decl, align 8, !dbg !3389
  %37 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3390
  %decl51 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %37, i32 0, i32 0, !dbg !3390
  %38 = load %union.tree_node*, %union.tree_node** %decl51, align 8, !dbg !3390
  %function_decl52 = bitcast %union.tree_node* %38 to %struct.tree_function_decl*, !dbg !3390
  %f53 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl52, i32 0, i32 1, !dbg !3390
  %39 = load %struct.function*, %struct.function** %f53, align 8, !dbg !3390
  call void @push_cfun(%struct.function* %39), !dbg !3391
  call void @bitmap_obstack_initialize(%struct.bitmap_obstack* null), !dbg !3392
  call void @gimple_register_cfg_hooks(), !dbg !3393
  call void @record_all_accesses_in_func(), !dbg !3394
  %40 = load %struct.htab*, %struct.htab** @matrices_to_reorg, align 8, !dbg !3395
  call void @htab_traverse(%struct.htab* %40, i32 (i8**, i8*)* @transform_access_sites, i8* null), !dbg !3396
  call void @free_dominance_info(i32 1), !dbg !3397
  call void @free_dominance_info(i32 2), !dbg !3398
  call void @pop_cfun(), !dbg !3399
  %41 = load %union.tree_node*, %union.tree_node** %temp_fn49, align 8, !dbg !3400
  store %union.tree_node* %41, %union.tree_node** @current_function_decl, align 8, !dbg !3401
  call void @bitmap_obstack_release(%struct.bitmap_obstack* null), !dbg !3402
  br label %if.end54, !dbg !3403

if.end54:                                         ; preds = %if.then48, %for.body41
  br label %for.inc55, !dbg !3380

for.inc55:                                        ; preds = %if.end54
  %42 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3404
  %next56 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %42, i32 0, i32 3, !dbg !3405
  %43 = load %struct.cgraph_node*, %struct.cgraph_node** %next56, align 8, !dbg !3405
  store %struct.cgraph_node* %43, %struct.cgraph_node** %node, align 8, !dbg !3406
  br label %for.cond39, !dbg !3407, !llvm.loop !3408

for.end57:                                        ; preds = %for.cond39
  %44 = load %struct.htab*, %struct.htab** @matrices_to_reorg, align 8, !dbg !3410
  call void @htab_traverse(%struct.htab* %44, i32 (i8**, i8*)* @dump_matrix_reorg_analysis, i8* null), !dbg !3411
  store %union.tree_node* null, %union.tree_node** @current_function_decl, align 8, !dbg !3412
  call void @set_cfun(%struct.function* null), !dbg !3413
  store %struct.htab* null, %struct.htab** @matrices_to_reorg, align 8, !dbg !3414
  store i32 0, i32* %retval, align 4, !dbg !3415
  br label %return, !dbg !3415

return:                                           ; preds = %for.end57, %if.then17, %if.then14, %if.then3
  %45 = load i32, i32* %retval, align 4, !dbg !3416
  ret i32 %45, !dbg !3416
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @may_flatten_matrices(%struct.cgraph_node* %node) #0 !dbg !3417 {
entry:
  %retval = alloca i8, align 1
  %node.addr = alloca %struct.cgraph_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %func = alloca %struct.function*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !3420, metadata !DIExpression()), !dbg !3421
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !3422, metadata !DIExpression()), !dbg !3423
  call void @llvm.dbg.declare(metadata %struct.function** %func, metadata !3424, metadata !DIExpression()), !dbg !3425
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3426, metadata !DIExpression()), !dbg !3427
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3428, metadata !DIExpression()), !dbg !3435
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3436
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 0, !dbg !3437
  %1 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !3437
  store %union.tree_node* %1, %union.tree_node** %decl, align 8, !dbg !3438
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3439
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 27, !dbg !3441
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !3441
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !3441
  %bf.clear = and i16 %bf.lshr, 1, !dbg !3441
  %bf.cast = zext i16 %bf.clear to i32, !dbg !3441
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !3439
  br i1 %tobool, label %if.then, label %if.end13, !dbg !3442

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3443
  %function_decl = bitcast %union.tree_node* %3 to %struct.tree_function_decl*, !dbg !3443
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !3443
  %4 = load %struct.function*, %struct.function** %f, align 8, !dbg !3443
  store %struct.function* %4, %struct.function** %func, align 8, !dbg !3445
  %5 = load %struct.function*, %struct.function** %func, align 8, !dbg !3446
  %cfg = getelementptr inbounds %struct.function, %struct.function* %5, i32 0, i32 1, !dbg !3446
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3446
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 0, !dbg !3446
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3446
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 6, !dbg !3446
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3446
  store %struct.basic_block_def* %8, %struct.basic_block_def** %bb, align 8, !dbg !3446
  br label %for.cond, !dbg !3446

for.cond:                                         ; preds = %for.inc10, %if.then
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3448
  %10 = load %struct.function*, %struct.function** %func, align 8, !dbg !3448
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 1, !dbg !3448
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !3448
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 1, !dbg !3448
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3448
  %cmp = icmp ne %struct.basic_block_def* %9, %12, !dbg !3448
  br i1 %cmp, label %for.body, label %for.end12, !dbg !3446

for.body:                                         ; preds = %for.cond
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3450
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %13), !dbg !3452
  %14 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3452
  %15 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3452
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false), !dbg !3452
  br label %for.cond3, !dbg !3453

for.cond3:                                        ; preds = %for.inc, %for.body
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3454
  %tobool4 = icmp ne i8 %call, 0, !dbg !3456
  %lnot = xor i1 %tobool4, true, !dbg !3456
  br i1 %lnot, label %for.body5, label %for.end, !dbg !3457

for.body5:                                        ; preds = %for.cond3
  %call6 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3458
  %call7 = call zeroext i8 @may_flatten_matrices_1(%union.gimple_statement_d* %call6), !dbg !3460
  %tobool8 = icmp ne i8 %call7, 0, !dbg !3460
  br i1 %tobool8, label %if.end, label %if.then9, !dbg !3461

if.then9:                                         ; preds = %for.body5
  store i8 0, i8* %retval, align 1, !dbg !3462
  br label %return, !dbg !3462

if.end:                                           ; preds = %for.body5
  br label %for.inc, !dbg !3463

for.inc:                                          ; preds = %if.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !3464
  br label %for.cond3, !dbg !3465, !llvm.loop !3466

for.end:                                          ; preds = %for.cond3
  br label %for.inc10, !dbg !3467

for.inc10:                                        ; preds = %for.end
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3448
  %next_bb11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 6, !dbg !3448
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb11, align 8, !dbg !3448
  store %struct.basic_block_def* %17, %struct.basic_block_def** %bb, align 8, !dbg !3448
  br label %for.cond, !dbg !3448, !llvm.loop !3468

for.end12:                                        ; preds = %for.cond
  br label %if.end13, !dbg !3470

if.end13:                                         ; preds = %for.end12, %entry
  store i8 1, i8* %retval, align 1, !dbg !3471
  br label %return, !dbg !3471

return:                                           ; preds = %if.end13, %if.then9
  %18 = load i8, i8* %retval, align 1, !dbg !3472
  ret i8 %18, !dbg !3472
}

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @mtt_info_hash(i8* %mtt) #0 !dbg !3473 {
entry:
  %mtt.addr = alloca i8*, align 8
  store i8* %mtt, i8** %mtt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %mtt.addr, metadata !3474, metadata !DIExpression()), !dbg !3475
  %0 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !3476
  %1 = load i8*, i8** %mtt.addr, align 8, !dbg !3477
  %2 = bitcast i8* %1 to %struct.matrix_info*, !dbg !3478
  %decl = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %2, i32 0, i32 0, !dbg !3479
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3479
  %4 = bitcast %union.tree_node* %3 to i8*, !dbg !3480
  %call = call i32 %0(i8* %4), !dbg !3476
  ret i32 %call, !dbg !3481
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mtt_info_eq(i8* %mtt1, i8* %mtt2) #0 !dbg !3482 {
entry:
  %retval = alloca i32, align 4
  %mtt1.addr = alloca i8*, align 8
  %mtt2.addr = alloca i8*, align 8
  %i1 = alloca %struct.matrix_info*, align 8
  %i2 = alloca %struct.matrix_info*, align 8
  store i8* %mtt1, i8** %mtt1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %mtt1.addr, metadata !3483, metadata !DIExpression()), !dbg !3484
  store i8* %mtt2, i8** %mtt2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %mtt2.addr, metadata !3485, metadata !DIExpression()), !dbg !3486
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %i1, metadata !3487, metadata !DIExpression()), !dbg !3489
  %0 = load i8*, i8** %mtt1.addr, align 8, !dbg !3490
  %1 = bitcast i8* %0 to %struct.matrix_info*, !dbg !3491
  store %struct.matrix_info* %1, %struct.matrix_info** %i1, align 8, !dbg !3489
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %i2, metadata !3492, metadata !DIExpression()), !dbg !3493
  %2 = load i8*, i8** %mtt2.addr, align 8, !dbg !3494
  %3 = bitcast i8* %2 to %struct.matrix_info*, !dbg !3495
  store %struct.matrix_info* %3, %struct.matrix_info** %i2, align 8, !dbg !3493
  %4 = load %struct.matrix_info*, %struct.matrix_info** %i1, align 8, !dbg !3496
  %decl = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %4, i32 0, i32 0, !dbg !3498
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3498
  %6 = load %struct.matrix_info*, %struct.matrix_info** %i2, align 8, !dbg !3499
  %decl1 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %6, i32 0, i32 0, !dbg !3500
  %7 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !3500
  %cmp = icmp eq %union.tree_node* %5, %7, !dbg !3501
  br i1 %cmp, label %if.then, label %if.end, !dbg !3502

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !3503
  br label %return, !dbg !3503

if.end:                                           ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3504
  br label %return, !dbg !3504

return:                                           ; preds = %if.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !3505
  ret i32 %8, !dbg !3505
}

; Function Attrs: noinline nounwind uwtable
define internal void @mat_free(i8* %e) #0 !dbg !3506 {
entry:
  %e.addr = alloca i8*, align 8
  %mat = alloca %struct.matrix_info*, align 8
  store i8* %e, i8** %e.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %e.addr, metadata !3507, metadata !DIExpression()), !dbg !3508
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %mat, metadata !3509, metadata !DIExpression()), !dbg !3510
  %0 = load i8*, i8** %e.addr, align 8, !dbg !3511
  %1 = bitcast i8* %0 to %struct.matrix_info*, !dbg !3512
  store %struct.matrix_info* %1, %struct.matrix_info** %mat, align 8, !dbg !3510
  %2 = load %struct.matrix_info*, %struct.matrix_info** %mat, align 8, !dbg !3513
  %tobool = icmp ne %struct.matrix_info* %2, null, !dbg !3513
  br i1 %tobool, label %if.end, label %if.then, !dbg !3515

if.then:                                          ; preds = %entry
  br label %if.end12, !dbg !3516

if.end:                                           ; preds = %entry
  %3 = load %struct.matrix_info*, %struct.matrix_info** %mat, align 8, !dbg !3517
  %free_stmts = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %3, i32 0, i32 8, !dbg !3519
  %4 = load %struct.free_info*, %struct.free_info** %free_stmts, align 8, !dbg !3519
  %tobool1 = icmp ne %struct.free_info* %4, null, !dbg !3517
  br i1 %tobool1, label %if.then2, label %if.end4, !dbg !3520

if.then2:                                         ; preds = %if.end
  %5 = load %struct.matrix_info*, %struct.matrix_info** %mat, align 8, !dbg !3521
  %free_stmts3 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %5, i32 0, i32 8, !dbg !3522
  %6 = load %struct.free_info*, %struct.free_info** %free_stmts3, align 8, !dbg !3522
  %7 = bitcast %struct.free_info* %6 to i8*, !dbg !3521
  call void @free(i8* %7), !dbg !3523
  br label %if.end4, !dbg !3523

if.end4:                                          ; preds = %if.then2, %if.end
  %8 = load %struct.matrix_info*, %struct.matrix_info** %mat, align 8, !dbg !3524
  %dim_hot_level = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %8, i32 0, i32 13, !dbg !3526
  %9 = load i64*, i64** %dim_hot_level, align 8, !dbg !3526
  %tobool5 = icmp ne i64* %9, null, !dbg !3524
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !3527

if.then6:                                         ; preds = %if.end4
  %10 = load %struct.matrix_info*, %struct.matrix_info** %mat, align 8, !dbg !3528
  %dim_hot_level7 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %10, i32 0, i32 13, !dbg !3529
  %11 = load i64*, i64** %dim_hot_level7, align 8, !dbg !3529
  %12 = bitcast i64* %11 to i8*, !dbg !3528
  call void @free(i8* %12), !dbg !3530
  br label %if.end8, !dbg !3530

if.end8:                                          ; preds = %if.then6, %if.end4
  %13 = load %struct.matrix_info*, %struct.matrix_info** %mat, align 8, !dbg !3531
  %malloc_for_level = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %13, i32 0, i32 4, !dbg !3533
  %14 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %malloc_for_level, align 8, !dbg !3533
  %tobool9 = icmp ne %union.gimple_statement_d** %14, null, !dbg !3531
  br i1 %tobool9, label %if.then10, label %if.end12, !dbg !3534

if.then10:                                        ; preds = %if.end8
  %15 = load %struct.matrix_info*, %struct.matrix_info** %mat, align 8, !dbg !3535
  %malloc_for_level11 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %15, i32 0, i32 4, !dbg !3536
  %16 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %malloc_for_level11, align 8, !dbg !3536
  %17 = bitcast %union.gimple_statement_d** %16 to i8*, !dbg !3535
  call void @free(i8* %17), !dbg !3537
  br label %if.end12, !dbg !3537

if.end12:                                         ; preds = %if.then, %if.then10, %if.end8
  ret void, !dbg !3538
}

; Function Attrs: noinline nounwind uwtable
define internal void @find_matrices_decl() #0 !dbg !3539 {
entry:
  %tmp = alloca %struct.matrix_info*, align 8
  %slot = alloca i8**, align 8
  %vnode = alloca %struct.varpool_node*, align 8
  %var_decl = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %tmp, metadata !3540, metadata !DIExpression()), !dbg !3541
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !3542, metadata !DIExpression()), !dbg !3543
  call void @llvm.dbg.declare(metadata %struct.varpool_node** %vnode, metadata !3544, metadata !DIExpression()), !dbg !3545
  %0 = load %struct.htab*, %struct.htab** @matrices_to_reorg, align 8, !dbg !3546
  %tobool = icmp ne %struct.htab* %0, null, !dbg !3546
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3546

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 566, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3546
  br label %cond.end, !dbg !3546

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3546

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3546
  %1 = load %struct.varpool_node*, %struct.varpool_node** @varpool_nodes_queue, align 8, !dbg !3547
  store %struct.varpool_node* %1, %struct.varpool_node** %vnode, align 8, !dbg !3549
  br label %for.cond, !dbg !3550

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !3551
  %tobool1 = icmp ne %struct.varpool_node* %2, null, !dbg !3553
  br i1 %tobool1, label %for.body, label %for.end, !dbg !3553

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %var_decl, metadata !3554, metadata !DIExpression()), !dbg !3556
  %3 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !3557
  %decl = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %3, i32 0, i32 0, !dbg !3558
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3558
  store %union.tree_node* %4, %union.tree_node** %var_decl, align 8, !dbg !3556
  %5 = load %union.tree_node*, %union.tree_node** %var_decl, align 8, !dbg !3559
  %tobool2 = icmp ne %union.tree_node* %5, null, !dbg !3559
  br i1 %tobool2, label %lor.lhs.false, label %if.then, !dbg !3561

lor.lhs.false:                                    ; preds = %for.body
  %6 = load %union.tree_node*, %union.tree_node** %var_decl, align 8, !dbg !3562
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3562
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !3562
  %bf.load = load i64, i64* %7, align 8, !dbg !3562
  %bf.clear = and i64 %bf.load, 65535, !dbg !3562
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3562
  %cmp = icmp ne i32 %bf.cast, 32, !dbg !3563
  br i1 %cmp, label %if.then, label %if.end, !dbg !3564

if.then:                                          ; preds = %lor.lhs.false, %for.body
  br label %for.inc, !dbg !3565

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.htab*, %struct.htab** @matrices_to_reorg, align 8, !dbg !3566
  %tobool3 = icmp ne %struct.htab* %8, null, !dbg !3566
  br i1 %tobool3, label %if.then4, label %if.end16, !dbg !3568

if.then4:                                         ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %var_decl, align 8, !dbg !3569
  %call = call %struct.matrix_info* @analyze_matrix_decl(%union.tree_node* %9), !dbg !3571
  store %struct.matrix_info* %call, %struct.matrix_info** %tmp, align 8, !dbg !3572
  %tobool5 = icmp ne %struct.matrix_info* %call, null, !dbg !3572
  br i1 %tobool5, label %if.then6, label %if.end15, !dbg !3573

if.then6:                                         ; preds = %if.then4
  %10 = load %union.tree_node*, %union.tree_node** %var_decl, align 8, !dbg !3574
  %base7 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !3574
  %11 = bitcast %struct.tree_base* %base7 to i64*, !dbg !3574
  %bf.load8 = load i64, i64* %11, align 8, !dbg !3574
  %bf.lshr = lshr i64 %bf.load8, 18, !dbg !3574
  %bf.clear9 = and i64 %bf.lshr, 1, !dbg !3574
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !3574
  %tobool11 = icmp ne i32 %bf.cast10, 0, !dbg !3574
  br i1 %tobool11, label %if.end14, label %if.then12, !dbg !3577

if.then12:                                        ; preds = %if.then6
  %12 = load %struct.htab*, %struct.htab** @matrices_to_reorg, align 8, !dbg !3578
  %13 = load %struct.matrix_info*, %struct.matrix_info** %tmp, align 8, !dbg !3580
  %14 = bitcast %struct.matrix_info* %13 to i8*, !dbg !3580
  %call13 = call i8** @htab_find_slot(%struct.htab* %12, i8* %14, i32 1), !dbg !3581
  store i8** %call13, i8*** %slot, align 8, !dbg !3582
  %15 = load %struct.matrix_info*, %struct.matrix_info** %tmp, align 8, !dbg !3583
  %16 = bitcast %struct.matrix_info* %15 to i8*, !dbg !3583
  %17 = load i8**, i8*** %slot, align 8, !dbg !3584
  store i8* %16, i8** %17, align 8, !dbg !3585
  br label %if.end14, !dbg !3586

if.end14:                                         ; preds = %if.then12, %if.then6
  br label %if.end15, !dbg !3587

if.end15:                                         ; preds = %if.end14, %if.then4
  br label %if.end16, !dbg !3588

if.end16:                                         ; preds = %if.end15, %if.end
  br label %for.inc, !dbg !3589

for.inc:                                          ; preds = %if.end16, %if.then
  %18 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !3590
  %next_needed = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %18, i32 0, i32 2, !dbg !3591
  %19 = load %struct.varpool_node*, %struct.varpool_node** %next_needed, align 8, !dbg !3591
  store %struct.varpool_node* %19, %struct.varpool_node** %vnode, align 8, !dbg !3592
  br label %for.cond, !dbg !3593, !llvm.loop !3594

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3596
}

declare dso_local void @push_cfun(%struct.function*) #2

declare dso_local void @bitmap_obstack_initialize(%struct.bitmap_obstack*) #2

declare dso_local void @gimple_register_cfg_hooks() #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_in_ssa_p(%struct.function* %fun) #0 !dbg !3597 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !3603, metadata !DIExpression()), !dbg !3604
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3605
  %tobool = icmp ne %struct.function* %0, null, !dbg !3605
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !3606

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3607
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 3, !dbg !3608
  %2 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3608
  %tobool1 = icmp ne %struct.gimple_df* %2, null, !dbg !3607
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !3609

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3610
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 3, !dbg !3611
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !3611
  %in_ssa_p = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 10, !dbg !3612
  %bf.load = load i8, i8* %in_ssa_p, align 8, !dbg !3612
  %bf.clear = and i8 %bf.load, 1, !dbg !3612
  %bf.cast = zext i8 %bf.clear to i32, !dbg !3612
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !3609
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %5 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool3, %land.rhs ], !dbg !3613
  %land.ext = zext i1 %5 to i32, !dbg !3609
  %conv = trunc i32 %land.ext to i8, !dbg !3605
  ret i8 %conv, !dbg !3614
}

declare dso_local void @free_dominance_info(i32) #2

declare dso_local void @pop_cfun() #2

declare dso_local void @bitmap_obstack_release(%struct.bitmap_obstack*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @mat_acc_phi_hash(i8* %p) #0 !dbg !3615 {
entry:
  %p.addr = alloca i8*, align 8
  %ma_phi = alloca %struct.matrix_access_phi_node*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !3616, metadata !DIExpression()), !dbg !3617
  call void @llvm.dbg.declare(metadata %struct.matrix_access_phi_node** %ma_phi, metadata !3618, metadata !DIExpression()), !dbg !3620
  %0 = load i8*, i8** %p.addr, align 8, !dbg !3621
  %1 = bitcast i8* %0 to %struct.matrix_access_phi_node*, !dbg !3622
  store %struct.matrix_access_phi_node* %1, %struct.matrix_access_phi_node** %ma_phi, align 8, !dbg !3620
  %2 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !3623
  %3 = load %struct.matrix_access_phi_node*, %struct.matrix_access_phi_node** %ma_phi, align 8, !dbg !3624
  %phi = getelementptr inbounds %struct.matrix_access_phi_node, %struct.matrix_access_phi_node* %3, i32 0, i32 0, !dbg !3625
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3625
  %5 = bitcast %union.gimple_statement_d* %4 to i8*, !dbg !3624
  %call = call i32 %2(i8* %5), !dbg !3623
  ret i32 %call, !dbg !3626
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mat_acc_phi_eq(i8* %p1, i8* %p2) #0 !dbg !3627 {
entry:
  %retval = alloca i32, align 4
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %phi1 = alloca %struct.matrix_access_phi_node*, align 8
  %phi2 = alloca %struct.matrix_access_phi_node*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !3628, metadata !DIExpression()), !dbg !3629
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !3630, metadata !DIExpression()), !dbg !3631
  call void @llvm.dbg.declare(metadata %struct.matrix_access_phi_node** %phi1, metadata !3632, metadata !DIExpression()), !dbg !3633
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !3634
  %1 = bitcast i8* %0 to %struct.matrix_access_phi_node*, !dbg !3635
  store %struct.matrix_access_phi_node* %1, %struct.matrix_access_phi_node** %phi1, align 8, !dbg !3633
  call void @llvm.dbg.declare(metadata %struct.matrix_access_phi_node** %phi2, metadata !3636, metadata !DIExpression()), !dbg !3637
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !3638
  %3 = bitcast i8* %2 to %struct.matrix_access_phi_node*, !dbg !3639
  store %struct.matrix_access_phi_node* %3, %struct.matrix_access_phi_node** %phi2, align 8, !dbg !3637
  %4 = load %struct.matrix_access_phi_node*, %struct.matrix_access_phi_node** %phi1, align 8, !dbg !3640
  %phi = getelementptr inbounds %struct.matrix_access_phi_node, %struct.matrix_access_phi_node* %4, i32 0, i32 0, !dbg !3642
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3642
  %6 = load %struct.matrix_access_phi_node*, %struct.matrix_access_phi_node** %phi2, align 8, !dbg !3643
  %phi3 = getelementptr inbounds %struct.matrix_access_phi_node, %struct.matrix_access_phi_node* %6, i32 0, i32 0, !dbg !3644
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi3, align 8, !dbg !3644
  %cmp = icmp eq %union.gimple_statement_d* %5, %7, !dbg !3645
  br i1 %cmp, label %if.then, label %if.end, !dbg !3646

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !3647
  br label %return, !dbg !3647

if.end:                                           ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3648
  br label %return, !dbg !3648

return:                                           ; preds = %if.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !3649
  ret i32 %8, !dbg !3649
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @find_sites_in_func(i8 zeroext %record) #0 !dbg !3650 {
entry:
  %record.addr = alloca i8, align 1
  %visited_stmts_1 = alloca %struct.simple_bitmap_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %tmpmi = alloca %struct.matrix_info, align 8
  %mi = alloca %struct.matrix_info*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %lhs = alloca %union.tree_node*, align 8
  store i8 %record, i8* %record.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %record.addr, metadata !3653, metadata !DIExpression()), !dbg !3654
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %visited_stmts_1, metadata !3655, metadata !DIExpression()), !dbg !3667
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3668, metadata !DIExpression()), !dbg !3669
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !3670, metadata !DIExpression()), !dbg !3671
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3672, metadata !DIExpression()), !dbg !3673
  call void @llvm.dbg.declare(metadata %struct.matrix_info* %tmpmi, metadata !3674, metadata !DIExpression()), !dbg !3675
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %mi, metadata !3676, metadata !DIExpression()), !dbg !3677
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3678
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3678
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !3678
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3678
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %1, i32 0, i32 2, !dbg !3678
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !3678
  %tobool = icmp ne %struct.VEC_tree_gc* %2, null, !dbg !3678
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3678

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3678
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !3678
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 3, !dbg !3678
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !3678
  %ssa_names3 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 2, !dbg !3678
  %5 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names3, align 8, !dbg !3678
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %5, i32 0, i32 0, !dbg !3678
  br label %cond.end, !dbg !3678

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3678

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3678
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !3678
  %call4 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %call), !dbg !3679
  store %struct.simple_bitmap_def* %call4, %struct.simple_bitmap_def** %visited_stmts_1, align 8, !dbg !3680
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3681
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !3681
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !3681
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3681
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 0, !dbg !3681
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3681
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 6, !dbg !3681
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3681
  store %struct.basic_block_def* %9, %struct.basic_block_def** %bb, align 8, !dbg !3681
  br label %for.cond, !dbg !3681

for.cond:                                         ; preds = %for.inc50, %cond.end
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3683
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3683
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !3683
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !3683
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !3683
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i32 0, i32 1, !dbg !3683
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3683
  %cmp = icmp ne %struct.basic_block_def* %10, %13, !dbg !3683
  br i1 %cmp, label %for.body, label %for.end52, !dbg !3681

for.body:                                         ; preds = %for.cond
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3685
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %14), !dbg !3688
  %15 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3688
  %16 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3688
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false), !dbg !3688
  br label %for.cond8, !dbg !3689

for.cond8:                                        ; preds = %for.inc, %for.body
  %call9 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3690
  %tobool10 = icmp ne i8 %call9, 0, !dbg !3692
  %lnot = xor i1 %tobool10, true, !dbg !3692
  br i1 %lnot, label %for.body11, label %for.end, !dbg !3693

for.body11:                                       ; preds = %for.cond8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !3694, metadata !DIExpression()), !dbg !3696
  %call12 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3697
  store %union.gimple_statement_d* %call12, %union.gimple_statement_d** %stmt, align 8, !dbg !3698
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3699
  %call13 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %17), !dbg !3700
  store %union.tree_node* %call13, %union.tree_node** %lhs, align 8, !dbg !3701
  %18 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3702
  %cmp14 = icmp ne %union.tree_node* %18, null, !dbg !3704
  br i1 %cmp14, label %land.lhs.true, label %if.end20, !dbg !3705

land.lhs.true:                                    ; preds = %for.body11
  %19 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3706
  %base15 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !3706
  %20 = bitcast %struct.tree_base* %base15 to i64*, !dbg !3706
  %bf.load = load i64, i64* %20, align 8, !dbg !3706
  %bf.clear = and i64 %bf.load, 65535, !dbg !3706
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3706
  %cmp16 = icmp eq i32 %bf.cast, 32, !dbg !3707
  br i1 %cmp16, label %if.then, label %if.end20, !dbg !3708

if.then:                                          ; preds = %land.lhs.true
  %21 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3709
  %decl = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %tmpmi, i32 0, i32 0, !dbg !3711
  store %union.tree_node* %21, %union.tree_node** %decl, align 8, !dbg !3712
  %22 = load %struct.htab*, %struct.htab** @matrices_to_reorg, align 8, !dbg !3713
  %23 = bitcast %struct.matrix_info* %tmpmi to i8*, !dbg !3715
  %call17 = call i8* @htab_find(%struct.htab* %22, i8* %23), !dbg !3716
  %24 = bitcast i8* %call17 to %struct.matrix_info*, !dbg !3717
  store %struct.matrix_info* %24, %struct.matrix_info** %mi, align 8, !dbg !3718
  %tobool18 = icmp ne %struct.matrix_info* %24, null, !dbg !3718
  br i1 %tobool18, label %if.then19, label %if.end, !dbg !3719

if.then19:                                        ; preds = %if.then
  %25 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited_stmts_1, align 8, !dbg !3720
  call void @sbitmap_zero(%struct.simple_bitmap_def* %25), !dbg !3722
  %26 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3723
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3724
  %28 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited_stmts_1, align 8, !dbg !3725
  call void @analyze_matrix_allocation_site(%struct.matrix_info* %26, %union.gimple_statement_d* %27, i32 0, %struct.simple_bitmap_def* %28), !dbg !3726
  br label %if.end, !dbg !3727

if.end:                                           ; preds = %if.then19, %if.then
  br label %if.end20, !dbg !3728

if.end20:                                         ; preds = %if.end, %land.lhs.true, %for.body11
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3729
  %call21 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %29), !dbg !3731
  %conv = zext i8 %call21 to i32, !dbg !3731
  %tobool22 = icmp ne i32 %conv, 0, !dbg !3731
  br i1 %tobool22, label %land.lhs.true23, label %if.end49, !dbg !3732

land.lhs.true23:                                  ; preds = %if.end20
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3733
  %call24 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %30), !dbg !3734
  %conv25 = zext i8 %call24 to i32, !dbg !3734
  %tobool26 = icmp ne i32 %conv25, 0, !dbg !3734
  br i1 %tobool26, label %land.lhs.true27, label %if.end49, !dbg !3735

land.lhs.true27:                                  ; preds = %land.lhs.true23
  %31 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3736
  %base28 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !3736
  %32 = bitcast %struct.tree_base* %base28 to i64*, !dbg !3736
  %bf.load29 = load i64, i64* %32, align 8, !dbg !3736
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !3736
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !3736
  %cmp32 = icmp eq i32 %bf.cast31, 141, !dbg !3737
  br i1 %cmp32, label %land.lhs.true34, label %if.end49, !dbg !3738

land.lhs.true34:                                  ; preds = %land.lhs.true27
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3739
  %call35 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %33), !dbg !3739
  %base36 = bitcast %union.tree_node* %call35 to %struct.tree_base*, !dbg !3739
  %34 = bitcast %struct.tree_base* %base36 to i64*, !dbg !3739
  %bf.load37 = load i64, i64* %34, align 8, !dbg !3739
  %bf.clear38 = and i64 %bf.load37, 65535, !dbg !3739
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !3739
  %cmp40 = icmp eq i32 %bf.cast39, 32, !dbg !3740
  br i1 %cmp40, label %if.then42, label %if.end49, !dbg !3741

if.then42:                                        ; preds = %land.lhs.true34
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3742
  %call43 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %35), !dbg !3744
  %decl44 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %tmpmi, i32 0, i32 0, !dbg !3745
  store %union.tree_node* %call43, %union.tree_node** %decl44, align 8, !dbg !3746
  %36 = load %struct.htab*, %struct.htab** @matrices_to_reorg, align 8, !dbg !3747
  %37 = bitcast %struct.matrix_info* %tmpmi to i8*, !dbg !3749
  %call45 = call i8* @htab_find(%struct.htab* %36, i8* %37), !dbg !3750
  %38 = bitcast i8* %call45 to %struct.matrix_info*, !dbg !3751
  store %struct.matrix_info* %38, %struct.matrix_info** %mi, align 8, !dbg !3752
  %tobool46 = icmp ne %struct.matrix_info* %38, null, !dbg !3752
  br i1 %tobool46, label %if.then47, label %if.end48, !dbg !3753

if.then47:                                        ; preds = %if.then42
  %39 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited_stmts_1, align 8, !dbg !3754
  call void @sbitmap_zero(%struct.simple_bitmap_def* %39), !dbg !3756
  %40 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3757
  %41 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3758
  %42 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited_stmts_1, align 8, !dbg !3759
  %43 = load i8, i8* %record.addr, align 1, !dbg !3760
  call void @analyze_matrix_accesses(%struct.matrix_info* %40, %union.tree_node* %41, i32 0, i8 zeroext 0, %struct.simple_bitmap_def* %42, i8 zeroext %43), !dbg !3761
  br label %if.end48, !dbg !3762

if.end48:                                         ; preds = %if.then47, %if.then42
  br label %if.end49, !dbg !3763

if.end49:                                         ; preds = %if.end48, %land.lhs.true34, %land.lhs.true27, %land.lhs.true23, %if.end20
  br label %for.inc, !dbg !3764

for.inc:                                          ; preds = %if.end49
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !3765
  br label %for.cond8, !dbg !3766, !llvm.loop !3767

for.end:                                          ; preds = %for.cond8
  br label %for.inc50, !dbg !3769

for.inc50:                                        ; preds = %for.end
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3683
  %next_bb51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 6, !dbg !3683
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb51, align 8, !dbg !3683
  store %struct.basic_block_def* %45, %struct.basic_block_def** %bb, align 8, !dbg !3683
  br label %for.cond, !dbg !3683, !llvm.loop !3770

for.end52:                                        ; preds = %for.cond
  %46 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited_stmts_1, align 8, !dbg !3772
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %46, i32 0, i32 0, !dbg !3772
  %47 = load i8*, i8** %popcount, align 8, !dbg !3772
  call void @free(i8* %47), !dbg !3772
  %48 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited_stmts_1, align 8, !dbg !3772
  %49 = bitcast %struct.simple_bitmap_def* %48 to i8*, !dbg !3772
  call void @free(i8* %49), !dbg !3772
  ret void, !dbg !3773
}

declare dso_local void @loop_optimizer_init(i32) #2

declare dso_local void @scev_initialize() #2

declare dso_local void @htab_traverse(%struct.htab*, i32 (i8**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @analyze_transpose(i8** %slot, i8* %data) #0 !dbg !3774 {
entry:
  %retval = alloca i32, align 4
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %mi = alloca %struct.matrix_info*, align 8
  %min_escape_l = alloca i32, align 4
  %loop = alloca %struct.loop*, align 8
  %iv = alloca %struct.affine_iv, align 8
  %acc_info = alloca %struct.access_site_info*, align 8
  %i = alloca i32, align 4
  %istep = alloca i64, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !3777, metadata !DIExpression()), !dbg !3778
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3779, metadata !DIExpression()), !dbg !3780
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %mi, metadata !3781, metadata !DIExpression()), !dbg !3782
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !3783
  %1 = load i8*, i8** %0, align 8, !dbg !3784
  %2 = bitcast i8* %1 to %struct.matrix_info*, !dbg !3785
  store %struct.matrix_info* %2, %struct.matrix_info** %mi, align 8, !dbg !3782
  call void @llvm.dbg.declare(metadata i32* %min_escape_l, metadata !3786, metadata !DIExpression()), !dbg !3787
  %3 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3788
  %min_indirect_level_escape = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %3, i32 0, i32 2, !dbg !3789
  %4 = load i32, i32* %min_indirect_level_escape, align 4, !dbg !3789
  store i32 %4, i32* %min_escape_l, align 4, !dbg !3787
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3790, metadata !DIExpression()), !dbg !3791
  call void @llvm.dbg.declare(metadata %struct.affine_iv* %iv, metadata !3792, metadata !DIExpression()), !dbg !3799
  call void @llvm.dbg.declare(metadata %struct.access_site_info** %acc_info, metadata !3800, metadata !DIExpression()), !dbg !3801
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3802, metadata !DIExpression()), !dbg !3803
  %5 = load i32, i32* %min_escape_l, align 4, !dbg !3804
  %cmp = icmp slt i32 %5, 2, !dbg !3806
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3807

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3808
  %access_l = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %6, i32 0, i32 14, !dbg !3809
  %7 = load %struct.VEC_access_site_info_p_heap*, %struct.VEC_access_site_info_p_heap** %access_l, align 8, !dbg !3809
  %tobool = icmp ne %struct.VEC_access_site_info_p_heap* %7, null, !dbg !3808
  br i1 %tobool, label %if.end9, label %if.then, !dbg !3810

if.then:                                          ; preds = %lor.lhs.false, %entry
  %8 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3811
  %access_l1 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %8, i32 0, i32 14, !dbg !3814
  %9 = load %struct.VEC_access_site_info_p_heap*, %struct.VEC_access_site_info_p_heap** %access_l1, align 8, !dbg !3814
  %tobool2 = icmp ne %struct.VEC_access_site_info_p_heap* %9, null, !dbg !3811
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !3815

if.then3:                                         ; preds = %if.then
  store i32 0, i32* %i, align 4, !dbg !3816
  br label %for.cond, !dbg !3819

for.cond:                                         ; preds = %for.inc, %if.then3
  %10 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3820
  %access_l4 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %10, i32 0, i32 14, !dbg !3820
  %11 = load %struct.VEC_access_site_info_p_heap*, %struct.VEC_access_site_info_p_heap** %access_l4, align 8, !dbg !3820
  %tobool5 = icmp ne %struct.VEC_access_site_info_p_heap* %11, null, !dbg !3820
  br i1 %tobool5, label %cond.true, label %cond.false, !dbg !3820

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3820
  %access_l6 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %12, i32 0, i32 14, !dbg !3820
  %13 = load %struct.VEC_access_site_info_p_heap*, %struct.VEC_access_site_info_p_heap** %access_l6, align 8, !dbg !3820
  %base = getelementptr inbounds %struct.VEC_access_site_info_p_heap, %struct.VEC_access_site_info_p_heap* %13, i32 0, i32 0, !dbg !3820
  br label %cond.end, !dbg !3820

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3820

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_access_site_info_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3820
  %14 = load i32, i32* %i, align 4, !dbg !3820
  %call = call i32 @VEC_access_site_info_p_base_iterate(%struct.VEC_access_site_info_p_base* %cond, i32 %14, %struct.access_site_info** %acc_info), !dbg !3820
  %tobool7 = icmp ne i32 %call, 0, !dbg !3822
  br i1 %tobool7, label %for.body, label %for.end, !dbg !3822

for.body:                                         ; preds = %cond.end
  %15 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !3823
  %16 = bitcast %struct.access_site_info* %15 to i8*, !dbg !3823
  call void @free(i8* %16), !dbg !3824
  br label %for.inc, !dbg !3824

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4, !dbg !3825
  %inc = add nsw i32 %17, 1, !dbg !3825
  store i32 %inc, i32* %i, align 4, !dbg !3825
  br label %for.cond, !dbg !3826, !llvm.loop !3827

for.end:                                          ; preds = %cond.end
  %18 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3829
  %access_l8 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %18, i32 0, i32 14, !dbg !3829
  call void @VEC_access_site_info_p_heap_free(%struct.VEC_access_site_info_p_heap** %access_l8), !dbg !3829
  br label %if.end, !dbg !3830

if.end:                                           ; preds = %for.end, %if.then
  store i32 1, i32* %retval, align 4, !dbg !3831
  br label %return, !dbg !3831

if.end9:                                          ; preds = %lor.lhs.false
  %19 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3832
  %dim_hot_level = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %19, i32 0, i32 13, !dbg !3834
  %20 = load i64*, i64** %dim_hot_level, align 8, !dbg !3834
  %tobool10 = icmp ne i64* %20, null, !dbg !3832
  br i1 %tobool10, label %if.end14, label %if.then11, !dbg !3835

if.then11:                                        ; preds = %if.end9
  %21 = load i32, i32* %min_escape_l, align 4, !dbg !3836
  %conv = sext i32 %21 to i64, !dbg !3836
  %call12 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !3837
  %22 = bitcast i8* %call12 to i64*, !dbg !3838
  %23 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3839
  %dim_hot_level13 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %23, i32 0, i32 13, !dbg !3840
  store i64* %22, i64** %dim_hot_level13, align 8, !dbg !3841
  br label %if.end14, !dbg !3839

if.end14:                                         ; preds = %if.then11, %if.end9
  store i32 0, i32* %i, align 4, !dbg !3842
  br label %for.cond15, !dbg !3844

for.cond15:                                       ; preds = %for.inc59, %if.end14
  %24 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3845
  %access_l16 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %24, i32 0, i32 14, !dbg !3845
  %25 = load %struct.VEC_access_site_info_p_heap*, %struct.VEC_access_site_info_p_heap** %access_l16, align 8, !dbg !3845
  %tobool17 = icmp ne %struct.VEC_access_site_info_p_heap* %25, null, !dbg !3845
  br i1 %tobool17, label %cond.true18, label %cond.false21, !dbg !3845

cond.true18:                                      ; preds = %for.cond15
  %26 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3845
  %access_l19 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %26, i32 0, i32 14, !dbg !3845
  %27 = load %struct.VEC_access_site_info_p_heap*, %struct.VEC_access_site_info_p_heap** %access_l19, align 8, !dbg !3845
  %base20 = getelementptr inbounds %struct.VEC_access_site_info_p_heap, %struct.VEC_access_site_info_p_heap* %27, i32 0, i32 0, !dbg !3845
  br label %cond.end22, !dbg !3845

cond.false21:                                     ; preds = %for.cond15
  br label %cond.end22, !dbg !3845

cond.end22:                                       ; preds = %cond.false21, %cond.true18
  %cond23 = phi %struct.VEC_access_site_info_p_base* [ %base20, %cond.true18 ], [ null, %cond.false21 ], !dbg !3845
  %28 = load i32, i32* %i, align 4, !dbg !3845
  %call24 = call i32 @VEC_access_site_info_p_base_iterate(%struct.VEC_access_site_info_p_base* %cond23, i32 %28, %struct.access_site_info** %acc_info), !dbg !3845
  %tobool25 = icmp ne i32 %call24, 0, !dbg !3847
  br i1 %tobool25, label %for.body26, label %for.end61, !dbg !3847

for.body26:                                       ; preds = %cond.end22
  %29 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !3848
  %stmt = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %29, i32 0, i32 0, !dbg !3851
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3851
  %call27 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %30), !dbg !3852
  %cmp28 = icmp eq i32 %call27, 66, !dbg !3853
  br i1 %cmp28, label %land.lhs.true, label %if.end58, !dbg !3854

land.lhs.true:                                    ; preds = %for.body26
  %31 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !3855
  %level = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %31, i32 0, i32 3, !dbg !3856
  %32 = load i32, i32* %level, align 8, !dbg !3856
  %33 = load i32, i32* %min_escape_l, align 4, !dbg !3857
  %cmp30 = icmp slt i32 %32, %33, !dbg !3858
  br i1 %cmp30, label %if.then32, label %if.end58, !dbg !3859

if.then32:                                        ; preds = %land.lhs.true
  %34 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !3860
  %stmt33 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %34, i32 0, i32 0, !dbg !3862
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt33, align 8, !dbg !3862
  %call34 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %35), !dbg !3863
  store %struct.loop* %call34, %struct.loop** %loop, align 8, !dbg !3864
  %36 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3865
  %tobool35 = icmp ne %struct.loop* %36, null, !dbg !3865
  br i1 %tobool35, label %lor.lhs.false36, label %if.then38, !dbg !3867

lor.lhs.false36:                                  ; preds = %if.then32
  %37 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3868
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 8, !dbg !3869
  %38 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !3869
  %tobool37 = icmp ne %struct.loop* %38, null, !dbg !3868
  br i1 %tobool37, label %if.then38, label %if.end39, !dbg !3870

if.then38:                                        ; preds = %lor.lhs.false36, %if.then32
  %39 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !3871
  %40 = bitcast %struct.access_site_info* %39 to i8*, !dbg !3871
  call void @free(i8* %40), !dbg !3873
  br label %for.inc59, !dbg !3874

if.end39:                                         ; preds = %lor.lhs.false36
  %41 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3875
  %42 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3877
  %43 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !3878
  %offset = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %43, i32 0, i32 1, !dbg !3879
  %44 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !3879
  %call40 = call zeroext i8 @simple_iv(%struct.loop* %41, %struct.loop* %42, %union.tree_node* %44, %struct.affine_iv* %iv, i8 zeroext 1), !dbg !3880
  %tobool41 = icmp ne i8 %call40, 0, !dbg !3880
  br i1 %tobool41, label %if.then42, label %if.end57, !dbg !3881

if.then42:                                        ; preds = %if.end39
  %step = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i32 0, i32 1, !dbg !3882
  %45 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !3882
  %cmp43 = icmp ne %union.tree_node* %45, null, !dbg !3885
  br i1 %cmp43, label %if.then45, label %if.end56, !dbg !3886

if.then45:                                        ; preds = %if.then42
  call void @llvm.dbg.declare(metadata i64* %istep, metadata !3887, metadata !DIExpression()), !dbg !3889
  %step46 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i32 0, i32 1, !dbg !3890
  %46 = load %union.tree_node*, %union.tree_node** %step46, align 8, !dbg !3890
  %call47 = call i64 @int_cst_value(%union.tree_node* %46), !dbg !3891
  store i64 %call47, i64* %istep, align 8, !dbg !3892
  %47 = load i64, i64* %istep, align 8, !dbg !3893
  %cmp48 = icmp ne i64 %47, 0, !dbg !3895
  br i1 %cmp48, label %if.then50, label %if.end55, !dbg !3896

if.then50:                                        ; preds = %if.then45
  %48 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !3897
  %iterated_by_inner_most_loop_p = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %48, i32 0, i32 6, !dbg !3899
  store i8 1, i8* %iterated_by_inner_most_loop_p, align 8, !dbg !3900
  %49 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !3901
  %stmt51 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %49, i32 0, i32 0, !dbg !3902
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt51, align 8, !dbg !3902
  %call52 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %50), !dbg !3903
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call52, i32 0, i32 8, !dbg !3904
  %51 = load i64, i64* %count, align 8, !dbg !3904
  %52 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3905
  %dim_hot_level53 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %52, i32 0, i32 13, !dbg !3906
  %53 = load i64*, i64** %dim_hot_level53, align 8, !dbg !3906
  %54 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !3907
  %level54 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %54, i32 0, i32 3, !dbg !3908
  %55 = load i32, i32* %level54, align 8, !dbg !3908
  %idxprom = sext i32 %55 to i64, !dbg !3905
  %arrayidx = getelementptr inbounds i64, i64* %53, i64 %idxprom, !dbg !3905
  %56 = load i64, i64* %arrayidx, align 8, !dbg !3909
  %add = add nsw i64 %56, %51, !dbg !3909
  store i64 %add, i64* %arrayidx, align 8, !dbg !3909
  br label %if.end55, !dbg !3910

if.end55:                                         ; preds = %if.then50, %if.then45
  br label %if.end56, !dbg !3911

if.end56:                                         ; preds = %if.end55, %if.then42
  br label %if.end57, !dbg !3912

if.end57:                                         ; preds = %if.end56, %if.end39
  br label %if.end58, !dbg !3913

if.end58:                                         ; preds = %if.end57, %land.lhs.true, %for.body26
  %57 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !3914
  %58 = bitcast %struct.access_site_info* %57 to i8*, !dbg !3914
  call void @free(i8* %58), !dbg !3915
  br label %for.inc59, !dbg !3916

for.inc59:                                        ; preds = %if.end58, %if.then38
  %59 = load i32, i32* %i, align 4, !dbg !3917
  %inc60 = add nsw i32 %59, 1, !dbg !3917
  store i32 %inc60, i32* %i, align 4, !dbg !3917
  br label %for.cond15, !dbg !3918, !llvm.loop !3919

for.end61:                                        ; preds = %cond.end22
  %60 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3921
  %access_l62 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %60, i32 0, i32 14, !dbg !3921
  call void @VEC_access_site_info_p_heap_free(%struct.VEC_access_site_info_p_heap** %access_l62), !dbg !3921
  store i32 1, i32* %retval, align 4, !dbg !3922
  br label %return, !dbg !3922

return:                                           ; preds = %for.end61, %if.end
  %61 = load i32, i32* %retval, align 4, !dbg !3923
  ret i32 %61, !dbg !3923
}

declare dso_local void @scev_finalize() #2

declare dso_local void @loop_optimizer_finalize() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @check_allocation_function(i8** %slot, i8* %data) #0 !dbg !3924 {
entry:
  %retval = alloca i32, align 4
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %level = alloca i32, align 4
  %mi = alloca %struct.matrix_info*, align 8
  %visited = alloca %struct.simple_bitmap_def*, align 8
  %call_stmt = alloca %union.gimple_statement_d*, align 8
  %size = alloca %union.tree_node*, align 8
  %mcd = alloca %struct.malloc_call_data, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !3925, metadata !DIExpression()), !dbg !3926
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3927, metadata !DIExpression()), !dbg !3928
  call void @llvm.dbg.declare(metadata i32* %level, metadata !3929, metadata !DIExpression()), !dbg !3930
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %mi, metadata !3931, metadata !DIExpression()), !dbg !3932
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !3933
  %1 = load i8*, i8** %0, align 8, !dbg !3934
  %2 = bitcast i8* %1 to %struct.matrix_info*, !dbg !3935
  store %struct.matrix_info* %2, %struct.matrix_info** %mi, align 8, !dbg !3932
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %visited, metadata !3936, metadata !DIExpression()), !dbg !3937
  %3 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3938
  %malloc_for_level = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %3, i32 0, i32 4, !dbg !3940
  %4 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %malloc_for_level, align 8, !dbg !3940
  %tobool = icmp ne %union.gimple_statement_d** %4, null, !dbg !3938
  br i1 %tobool, label %if.end, label %if.then, !dbg !3941

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !3942
  br label %return, !dbg !3942

if.end:                                           ; preds = %entry
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3943
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3943
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !3943
  %6 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3943
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %6, i32 0, i32 2, !dbg !3943
  %7 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !3943
  %tobool1 = icmp ne %struct.VEC_tree_gc* %7, null, !dbg !3943
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !3943

cond.true:                                        ; preds = %if.end
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3943
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !3943
  %gimple_df3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 3, !dbg !3943
  %9 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df3, align 8, !dbg !3943
  %ssa_names4 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %9, i32 0, i32 2, !dbg !3943
  %10 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names4, align 8, !dbg !3943
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %10, i32 0, i32 0, !dbg !3943
  br label %cond.end, !dbg !3943

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3943

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3943
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !3943
  %call5 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %call), !dbg !3944
  store %struct.simple_bitmap_def* %call5, %struct.simple_bitmap_def** %visited, align 8, !dbg !3945
  %11 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3946
  %allocation_function_decl = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %11, i32 0, i32 7, !dbg !3948
  %12 = load %union.tree_node*, %union.tree_node** %allocation_function_decl, align 8, !dbg !3948
  %13 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3949
  %cmp = icmp ne %union.tree_node* %12, %13, !dbg !3950
  br i1 %cmp, label %if.then8, label %lor.lhs.false, !dbg !3951

lor.lhs.false:                                    ; preds = %cond.end
  %14 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3952
  %malloc_for_level6 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %14, i32 0, i32 4, !dbg !3953
  %15 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %malloc_for_level6, align 8, !dbg !3953
  %arrayidx = getelementptr inbounds %union.gimple_statement_d*, %union.gimple_statement_d** %15, i64 0, !dbg !3952
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !3952
  %tobool7 = icmp ne %union.gimple_statement_d* %16, null, !dbg !3952
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !3954

if.then8:                                         ; preds = %lor.lhs.false, %cond.end
  store i32 1, i32* %retval, align 4, !dbg !3955
  br label %return, !dbg !3955

if.end9:                                          ; preds = %lor.lhs.false
  store i32 1, i32* %level, align 4, !dbg !3956
  br label %for.cond, !dbg !3958

for.cond:                                         ; preds = %for.inc, %if.end9
  %17 = load i32, i32* %level, align 4, !dbg !3959
  %18 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3961
  %max_malloced_level = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %18, i32 0, i32 5, !dbg !3962
  %19 = load i32, i32* %max_malloced_level, align 8, !dbg !3962
  %cmp10 = icmp slt i32 %17, %19, !dbg !3963
  br i1 %cmp10, label %for.body, label %for.end, !dbg !3964

for.body:                                         ; preds = %for.cond
  %20 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3965
  %malloc_for_level11 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %20, i32 0, i32 4, !dbg !3967
  %21 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %malloc_for_level11, align 8, !dbg !3967
  %22 = load i32, i32* %level, align 4, !dbg !3968
  %idxprom = sext i32 %22 to i64, !dbg !3965
  %arrayidx12 = getelementptr inbounds %union.gimple_statement_d*, %union.gimple_statement_d** %21, i64 %idxprom, !dbg !3965
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx12, align 8, !dbg !3965
  %tobool13 = icmp ne %union.gimple_statement_d* %23, null, !dbg !3965
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !3969

if.then14:                                        ; preds = %for.body
  br label %for.end, !dbg !3970

if.end15:                                         ; preds = %for.body
  br label %for.inc, !dbg !3971

for.inc:                                          ; preds = %if.end15
  %24 = load i32, i32* %level, align 4, !dbg !3972
  %inc = add nsw i32 %24, 1, !dbg !3972
  store i32 %inc, i32* %level, align 4, !dbg !3972
  br label %for.cond, !dbg !3973, !llvm.loop !3974

for.end:                                          ; preds = %if.then14, %for.cond
  %25 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3976
  %26 = load i32, i32* %level, align 4, !dbg !3977
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %25, i32 %26, %union.gimple_statement_d* null), !dbg !3978
  store i32 1, i32* %level, align 4, !dbg !3979
  br label %for.cond16, !dbg !3981

for.cond16:                                       ; preds = %for.inc72, %for.end
  %27 = load i32, i32* %level, align 4, !dbg !3982
  %28 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !3984
  %min_indirect_level_escape = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %28, i32 0, i32 2, !dbg !3985
  %29 = load i32, i32* %min_indirect_level_escape, align 4, !dbg !3985
  %cmp17 = icmp slt i32 %27, %29, !dbg !3986
  br i1 %cmp17, label %for.body18, label %for.end74, !dbg !3987

for.body18:                                       ; preds = %for.cond16
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call_stmt, metadata !3988, metadata !DIExpression()), !dbg !3990
  call void @llvm.dbg.declare(metadata %union.tree_node** %size, metadata !3991, metadata !DIExpression()), !dbg !3992
  call void @llvm.dbg.declare(metadata %struct.malloc_call_data* %mcd, metadata !3993, metadata !DIExpression()), !dbg !3999
  %30 = bitcast %struct.malloc_call_data* %mcd to i8*, !dbg !3999
  call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 24, i1 false), !dbg !3999
  %31 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4000
  %malloc_for_level19 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %31, i32 0, i32 4, !dbg !4001
  %32 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %malloc_for_level19, align 8, !dbg !4001
  %33 = load i32, i32* %level, align 4, !dbg !4002
  %idxprom20 = sext i32 %33 to i64, !dbg !4000
  %arrayidx21 = getelementptr inbounds %union.gimple_statement_d*, %union.gimple_statement_d** %32, i64 %idxprom20, !dbg !4000
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx21, align 8, !dbg !4000
  store %union.gimple_statement_d* %34, %union.gimple_statement_d** %call_stmt, align 8, !dbg !4003
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !4004
  call void @collect_data_for_malloc_call(%union.gimple_statement_d* %35, %struct.malloc_call_data* %mcd), !dbg !4005
  %size_var = getelementptr inbounds %struct.malloc_call_data, %struct.malloc_call_data* %mcd, i32 0, i32 1, !dbg !4006
  %36 = load %union.tree_node*, %union.tree_node** %size_var, align 8, !dbg !4006
  %base22 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !4006
  %37 = bitcast %struct.tree_base* %base22 to i64*, !dbg !4006
  %bf.load = load i64, i64* %37, align 8, !dbg !4006
  %bf.clear = and i64 %bf.load, 65535, !dbg !4006
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4006
  %cmp23 = icmp eq i32 %bf.cast, 23, !dbg !4008
  br i1 %cmp23, label %if.then24, label %if.end42, !dbg !4009

if.then24:                                        ; preds = %for.body18
  %38 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4010
  %dimension_size = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %38, i32 0, i32 9, !dbg !4013
  %39 = load %union.tree_node**, %union.tree_node*** %dimension_size, align 8, !dbg !4013
  %tobool25 = icmp ne %union.tree_node** %39, null, !dbg !4010
  br i1 %tobool25, label %if.end33, label %if.then26, !dbg !4014

if.then26:                                        ; preds = %if.then24
  %40 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4015
  %min_indirect_level_escape27 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %40, i32 0, i32 2, !dbg !4017
  %41 = load i32, i32* %min_indirect_level_escape27, align 4, !dbg !4017
  %conv = sext i32 %41 to i64, !dbg !4015
  %call28 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !4018
  %42 = bitcast i8* %call28 to %union.tree_node**, !dbg !4019
  %43 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4020
  %dimension_size29 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %43, i32 0, i32 9, !dbg !4021
  store %union.tree_node** %42, %union.tree_node*** %dimension_size29, align 8, !dbg !4022
  %44 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4023
  %min_indirect_level_escape30 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %44, i32 0, i32 2, !dbg !4024
  %45 = load i32, i32* %min_indirect_level_escape30, align 4, !dbg !4024
  %conv31 = sext i32 %45 to i64, !dbg !4023
  %call32 = call i8* @xcalloc(i64 %conv31, i64 8), !dbg !4025
  %46 = bitcast i8* %call32 to %union.tree_node**, !dbg !4026
  %47 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4027
  %dimension_size_orig = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %47, i32 0, i32 10, !dbg !4028
  store %union.tree_node** %46, %union.tree_node*** %dimension_size_orig, align 8, !dbg !4029
  br label %if.end33, !dbg !4030

if.end33:                                         ; preds = %if.then26, %if.then24
  %size_var34 = getelementptr inbounds %struct.malloc_call_data, %struct.malloc_call_data* %mcd, i32 0, i32 1, !dbg !4031
  %48 = load %union.tree_node*, %union.tree_node** %size_var34, align 8, !dbg !4031
  %49 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4032
  %dimension_size35 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %49, i32 0, i32 9, !dbg !4033
  %50 = load %union.tree_node**, %union.tree_node*** %dimension_size35, align 8, !dbg !4033
  %51 = load i32, i32* %level, align 4, !dbg !4034
  %idxprom36 = sext i32 %51 to i64, !dbg !4032
  %arrayidx37 = getelementptr inbounds %union.tree_node*, %union.tree_node** %50, i64 %idxprom36, !dbg !4032
  store %union.tree_node* %48, %union.tree_node** %arrayidx37, align 8, !dbg !4035
  %size_var38 = getelementptr inbounds %struct.malloc_call_data, %struct.malloc_call_data* %mcd, i32 0, i32 1, !dbg !4036
  %52 = load %union.tree_node*, %union.tree_node** %size_var38, align 8, !dbg !4036
  %53 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4037
  %dimension_size_orig39 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %53, i32 0, i32 10, !dbg !4038
  %54 = load %union.tree_node**, %union.tree_node*** %dimension_size_orig39, align 8, !dbg !4038
  %55 = load i32, i32* %level, align 4, !dbg !4039
  %idxprom40 = sext i32 %55 to i64, !dbg !4037
  %arrayidx41 = getelementptr inbounds %union.tree_node*, %union.tree_node** %54, i64 %idxprom40, !dbg !4037
  store %union.tree_node* %52, %union.tree_node** %arrayidx41, align 8, !dbg !4040
  br label %for.inc72, !dbg !4041

if.end42:                                         ; preds = %for.body18
  %56 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !4042
  call void @sbitmap_zero(%struct.simple_bitmap_def* %56), !dbg !4043
  %size_var43 = getelementptr inbounds %struct.malloc_call_data, %struct.malloc_call_data* %mcd, i32 0, i32 1, !dbg !4044
  %57 = load %union.tree_node*, %union.tree_node** %size_var43, align 8, !dbg !4044
  %58 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited, align 8, !dbg !4045
  %call44 = call %union.tree_node* @can_calculate_expr_before_stmt(%union.tree_node* %57, %struct.simple_bitmap_def* %58), !dbg !4046
  store %union.tree_node* %call44, %union.tree_node** %size, align 8, !dbg !4047
  %59 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !4048
  %cmp45 = icmp eq %union.tree_node* %59, null, !dbg !4050
  br i1 %cmp45, label %if.then47, label %if.end53, !dbg !4051

if.then47:                                        ; preds = %if.end42
  %60 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4052
  %61 = load i32, i32* %level, align 4, !dbg !4054
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !4055
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %60, i32 %61, %union.gimple_statement_d* %62), !dbg !4056
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4057
  %tobool48 = icmp ne %struct._IO_FILE* %63, null, !dbg !4057
  br i1 %tobool48, label %if.then49, label %if.end52, !dbg !4059

if.then49:                                        ; preds = %if.then47
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4060
  %65 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4061
  %decl = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %65, i32 0, i32 0, !dbg !4062
  %66 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4062
  %call50 = call i8* @get_name(%union.tree_node* %66), !dbg !4063
  %67 = load i32, i32* %level, align 4, !dbg !4064
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %64, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.7, i64 0, i64 0), i8* %call50, i32 %67), !dbg !4065
  br label %if.end52, !dbg !4065

if.end52:                                         ; preds = %if.then49, %if.then47
  br label %for.end74, !dbg !4066

if.end53:                                         ; preds = %if.end42
  %68 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4067
  %dimension_size54 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %68, i32 0, i32 9, !dbg !4069
  %69 = load %union.tree_node**, %union.tree_node*** %dimension_size54, align 8, !dbg !4069
  %tobool55 = icmp ne %union.tree_node** %69, null, !dbg !4067
  br i1 %tobool55, label %if.end65, label %if.then56, !dbg !4070

if.then56:                                        ; preds = %if.end53
  %70 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4071
  %min_indirect_level_escape57 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %70, i32 0, i32 2, !dbg !4073
  %71 = load i32, i32* %min_indirect_level_escape57, align 4, !dbg !4073
  %conv58 = sext i32 %71 to i64, !dbg !4071
  %call59 = call i8* @xcalloc(i64 %conv58, i64 8), !dbg !4074
  %72 = bitcast i8* %call59 to %union.tree_node**, !dbg !4075
  %73 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4076
  %dimension_size60 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %73, i32 0, i32 9, !dbg !4077
  store %union.tree_node** %72, %union.tree_node*** %dimension_size60, align 8, !dbg !4078
  %74 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4079
  %min_indirect_level_escape61 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %74, i32 0, i32 2, !dbg !4080
  %75 = load i32, i32* %min_indirect_level_escape61, align 4, !dbg !4080
  %conv62 = sext i32 %75 to i64, !dbg !4079
  %call63 = call i8* @xcalloc(i64 %conv62, i64 8), !dbg !4081
  %76 = bitcast i8* %call63 to %union.tree_node**, !dbg !4082
  %77 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4083
  %dimension_size_orig64 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %77, i32 0, i32 10, !dbg !4084
  store %union.tree_node** %76, %union.tree_node*** %dimension_size_orig64, align 8, !dbg !4085
  br label %if.end65, !dbg !4086

if.end65:                                         ; preds = %if.then56, %if.end53
  %78 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !4087
  %79 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4088
  %dimension_size66 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %79, i32 0, i32 9, !dbg !4089
  %80 = load %union.tree_node**, %union.tree_node*** %dimension_size66, align 8, !dbg !4089
  %81 = load i32, i32* %level, align 4, !dbg !4090
  %idxprom67 = sext i32 %81 to i64, !dbg !4088
  %arrayidx68 = getelementptr inbounds %union.tree_node*, %union.tree_node** %80, i64 %idxprom67, !dbg !4088
  store %union.tree_node* %78, %union.tree_node** %arrayidx68, align 8, !dbg !4091
  %82 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !4092
  %83 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4093
  %dimension_size_orig69 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %83, i32 0, i32 10, !dbg !4094
  %84 = load %union.tree_node**, %union.tree_node*** %dimension_size_orig69, align 8, !dbg !4094
  %85 = load i32, i32* %level, align 4, !dbg !4095
  %idxprom70 = sext i32 %85 to i64, !dbg !4093
  %arrayidx71 = getelementptr inbounds %union.tree_node*, %union.tree_node** %84, i64 %idxprom70, !dbg !4093
  store %union.tree_node* %82, %union.tree_node** %arrayidx71, align 8, !dbg !4096
  br label %for.inc72, !dbg !4097

for.inc72:                                        ; preds = %if.end65, %if.end33
  %86 = load i32, i32* %level, align 4, !dbg !4098
  %inc73 = add nsw i32 %86, 1, !dbg !4098
  store i32 %inc73, i32* %level, align 4, !dbg !4098
  br label %for.cond16, !dbg !4099, !llvm.loop !4100

for.end74:                                        ; preds = %if.end52, %for.cond16
  %87 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4102
  %min_indirect_level_escape75 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %87, i32 0, i32 2, !dbg !4104
  %88 = load i32, i32* %min_indirect_level_escape75, align 4, !dbg !4104
  store i32 %88, i32* %level, align 4, !dbg !4105
  br label %for.cond76, !dbg !4106

for.cond76:                                       ; preds = %for.inc84, %for.end74
  %89 = load i32, i32* %level, align 4, !dbg !4107
  %90 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4109
  %max_malloced_level77 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %90, i32 0, i32 5, !dbg !4110
  %91 = load i32, i32* %max_malloced_level77, align 8, !dbg !4110
  %cmp78 = icmp slt i32 %89, %91, !dbg !4111
  br i1 %cmp78, label %for.body80, label %for.end86, !dbg !4112

for.body80:                                       ; preds = %for.cond76
  %92 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4113
  %malloc_for_level81 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %92, i32 0, i32 4, !dbg !4114
  %93 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %malloc_for_level81, align 8, !dbg !4114
  %94 = load i32, i32* %level, align 4, !dbg !4115
  %idxprom82 = sext i32 %94 to i64, !dbg !4113
  %arrayidx83 = getelementptr inbounds %union.gimple_statement_d*, %union.gimple_statement_d** %93, i64 %idxprom82, !dbg !4113
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %arrayidx83, align 8, !dbg !4116
  br label %for.inc84, !dbg !4113

for.inc84:                                        ; preds = %for.body80
  %95 = load i32, i32* %level, align 4, !dbg !4117
  %inc85 = add nsw i32 %95, 1, !dbg !4117
  store i32 %inc85, i32* %level, align 4, !dbg !4117
  br label %for.cond76, !dbg !4118, !llvm.loop !4119

for.end86:                                        ; preds = %for.cond76
  store i32 1, i32* %retval, align 4, !dbg !4121
  br label %return, !dbg !4121

return:                                           ; preds = %for.end86, %if.then8, %if.then
  %96 = load i32, i32* %retval, align 4, !dbg !4122
  ret i32 %96, !dbg !4122
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @transform_allocation_sites(i8** %slot, i8* %data) #0 !dbg !4123 {
entry:
  %retval = alloca i32, align 4
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %mi = alloca %struct.matrix_info*, align 8
  %type = alloca %union.tree_node*, align 8
  %oldfn = alloca %union.tree_node*, align 8
  %prev_dim_size = alloca %union.tree_node*, align 8
  %call_stmt_0 = alloca %union.gimple_statement_d*, align 8
  %use_stmt = alloca %union.gimple_statement_d*, align 8
  %c_node = alloca %struct.cgraph_node*, align 8
  %e = alloca %struct.cgraph_edge*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %mcd = alloca %struct.malloc_call_data, align 8
  %element_size = alloca i64, align 8
  %imm_iter = alloca %struct.immediate_use_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %old_size_0 = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %min_escape_l = alloca i32, align 4
  %id = alloca i32, align 4
  %i12 = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  %data106 = alloca %struct.check_var_data, align 8
  %tmp128 = alloca %struct.gimple_stmt_iterator, align 8
  %dim_size = alloca %union.tree_node*, align 8
  %dim_var = alloca %union.tree_node*, align 8
  %stmt139 = alloca %union.gimple_statement_d*, align 8
  %d_type_size = alloca %union.tree_node*, align 8
  %gsi238 = alloca %struct.gimple_stmt_iterator, align 8
  %use_stmt1 = alloca %union.gimple_statement_d*, align 8
  %call_stmt = alloca %union.gimple_statement_d*, align 8
  %tmp254 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp262 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp273 = alloca %struct.gimple_stmt_iterator, align 8
  %gsi285 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp326 = alloca %struct.gimple_stmt_iterator, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !4124, metadata !DIExpression()), !dbg !4125
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4126, metadata !DIExpression()), !dbg !4127
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4128, metadata !DIExpression()), !dbg !4129
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %mi, metadata !4130, metadata !DIExpression()), !dbg !4131
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4132, metadata !DIExpression()), !dbg !4133
  call void @llvm.dbg.declare(metadata %union.tree_node** %oldfn, metadata !4134, metadata !DIExpression()), !dbg !4135
  call void @llvm.dbg.declare(metadata %union.tree_node** %prev_dim_size, metadata !4136, metadata !DIExpression()), !dbg !4137
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call_stmt_0, metadata !4138, metadata !DIExpression()), !dbg !4139
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt, metadata !4140, metadata !DIExpression()), !dbg !4141
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %c_node, metadata !4142, metadata !DIExpression()), !dbg !4143
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !4144, metadata !DIExpression()), !dbg !4145
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4146, metadata !DIExpression()), !dbg !4147
  call void @llvm.dbg.declare(metadata %struct.malloc_call_data* %mcd, metadata !4148, metadata !DIExpression()), !dbg !4149
  %0 = bitcast %struct.malloc_call_data* %mcd to i8*, !dbg !4149
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 24, i1 false), !dbg !4149
  call void @llvm.dbg.declare(metadata i64* %element_size, metadata !4150, metadata !DIExpression()), !dbg !4151
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %imm_iter, metadata !4152, metadata !DIExpression()), !dbg !4160
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !4161, metadata !DIExpression()), !dbg !4162
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_size_0, metadata !4163, metadata !DIExpression()), !dbg !4164
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !4165, metadata !DIExpression()), !dbg !4166
  call void @llvm.dbg.declare(metadata i32* %min_escape_l, metadata !4167, metadata !DIExpression()), !dbg !4168
  call void @llvm.dbg.declare(metadata i32* %id, metadata !4169, metadata !DIExpression()), !dbg !4170
  %1 = load i8**, i8*** %slot.addr, align 8, !dbg !4171
  %2 = load i8*, i8** %1, align 8, !dbg !4172
  %3 = bitcast i8* %2 to %struct.matrix_info*, !dbg !4173
  store %struct.matrix_info* %3, %struct.matrix_info** %mi, align 8, !dbg !4174
  %4 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4175
  %min_indirect_level_escape = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %4, i32 0, i32 2, !dbg !4176
  %5 = load i32, i32* %min_indirect_level_escape, align 4, !dbg !4176
  store i32 %5, i32* %min_escape_l, align 4, !dbg !4177
  %6 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4178
  %malloc_for_level = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %6, i32 0, i32 4, !dbg !4180
  %7 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %malloc_for_level, align 8, !dbg !4180
  %tobool = icmp ne %union.gimple_statement_d** %7, null, !dbg !4178
  br i1 %tobool, label %if.end, label %if.then, !dbg !4181

if.then:                                          ; preds = %entry
  %8 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4182
  %min_indirect_level_escape1 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %8, i32 0, i32 2, !dbg !4183
  store i32 0, i32* %min_indirect_level_escape1, align 4, !dbg !4184
  br label %if.end, !dbg !4182

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4185
  %min_indirect_level_escape2 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %9, i32 0, i32 2, !dbg !4187
  %10 = load i32, i32* %min_indirect_level_escape2, align 4, !dbg !4187
  %cmp = icmp slt i32 %10, 2, !dbg !4188
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !4189

if.then3:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4, !dbg !4190
  br label %return, !dbg !4190

if.end4:                                          ; preds = %if.end
  %11 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4191
  %min_indirect_level_escape5 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %11, i32 0, i32 2, !dbg !4192
  %12 = load i32, i32* %min_indirect_level_escape5, align 4, !dbg !4192
  %conv = sext i32 %12 to i64, !dbg !4191
  %call = call i8* @xcalloc(i64 %conv, i64 4), !dbg !4193
  %13 = bitcast i8* %call to i32*, !dbg !4194
  %14 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4195
  %dim_map = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %14, i32 0, i32 15, !dbg !4196
  store i32* %13, i32** %dim_map, align 8, !dbg !4197
  store i32 0, i32* %i, align 4, !dbg !4198
  br label %for.cond, !dbg !4200

for.cond:                                         ; preds = %for.inc, %if.end4
  %15 = load i32, i32* %i, align 4, !dbg !4201
  %16 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4203
  %min_indirect_level_escape6 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %16, i32 0, i32 2, !dbg !4204
  %17 = load i32, i32* %min_indirect_level_escape6, align 4, !dbg !4204
  %cmp7 = icmp slt i32 %15, %17, !dbg !4205
  br i1 %cmp7, label %for.body, label %for.end, !dbg !4206

for.body:                                         ; preds = %for.cond
  %18 = load i32, i32* %i, align 4, !dbg !4207
  %19 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4208
  %dim_map9 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %19, i32 0, i32 15, !dbg !4209
  %20 = load i32*, i32** %dim_map9, align 8, !dbg !4209
  %21 = load i32, i32* %i, align 4, !dbg !4210
  %idxprom = sext i32 %21 to i64, !dbg !4208
  %arrayidx = getelementptr inbounds i32, i32* %20, i64 %idxprom, !dbg !4208
  store i32 %18, i32* %arrayidx, align 4, !dbg !4211
  br label %for.inc, !dbg !4208

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %i, align 4, !dbg !4212
  %inc = add nsw i32 %22, 1, !dbg !4212
  store i32 %inc, i32* %i, align 4, !dbg !4212
  br label %for.cond, !dbg !4213, !llvm.loop !4214

for.end:                                          ; preds = %for.cond
  %23 = load i8, i8* @check_transpose_p, align 1, !dbg !4216
  %tobool10 = icmp ne i8 %23, 0, !dbg !4216
  br i1 %tobool10, label %if.then11, label %if.else, !dbg !4218

if.then11:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata i32* %i12, metadata !4219, metadata !DIExpression()), !dbg !4221
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4222
  %tobool13 = icmp ne %struct._IO_FILE* %24, null, !dbg !4222
  br i1 %tobool13, label %if.then14, label %if.end32, !dbg !4224

if.then14:                                        ; preds = %if.then11
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4225
  %26 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4227
  %decl = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %26, i32 0, i32 0, !dbg !4228
  %27 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4228
  %call15 = call i8* @get_name(%union.tree_node* %27), !dbg !4229
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* %call15), !dbg !4230
  store i32 0, i32* %i12, align 4, !dbg !4231
  br label %for.cond17, !dbg !4233

for.cond17:                                       ; preds = %for.inc29, %if.then14
  %28 = load i32, i32* %i12, align 4, !dbg !4234
  %29 = load i32, i32* %min_escape_l, align 4, !dbg !4236
  %cmp18 = icmp slt i32 %28, %29, !dbg !4237
  br i1 %cmp18, label %for.body20, label %for.end31, !dbg !4238

for.body20:                                       ; preds = %for.cond17
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4239
  %31 = load i32, i32* %i12, align 4, !dbg !4241
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.9, i64 0, i64 0), i32 %31), !dbg !4242
  %32 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4243
  %dim_hot_level = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %32, i32 0, i32 13, !dbg !4245
  %33 = load i64*, i64** %dim_hot_level, align 8, !dbg !4245
  %tobool22 = icmp ne i64* %33, null, !dbg !4243
  br i1 %tobool22, label %if.then23, label %if.end28, !dbg !4246

if.then23:                                        ; preds = %for.body20
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4247
  %35 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4248
  %dim_hot_level24 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %35, i32 0, i32 13, !dbg !4249
  %36 = load i64*, i64** %dim_hot_level24, align 8, !dbg !4249
  %37 = load i32, i32* %i12, align 4, !dbg !4250
  %idxprom25 = sext i32 %37 to i64, !dbg !4248
  %arrayidx26 = getelementptr inbounds i64, i64* %36, i64 %idxprom25, !dbg !4248
  %38 = load i64, i64* %arrayidx26, align 8, !dbg !4248
  %call27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 0), i64 %38), !dbg !4251
  br label %if.end28, !dbg !4251

if.end28:                                         ; preds = %if.then23, %for.body20
  br label %for.inc29, !dbg !4252

for.inc29:                                        ; preds = %if.end28
  %39 = load i32, i32* %i12, align 4, !dbg !4253
  %inc30 = add nsw i32 %39, 1, !dbg !4253
  store i32 %inc30, i32* %i12, align 4, !dbg !4253
  br label %for.cond17, !dbg !4254, !llvm.loop !4255

for.end31:                                        ; preds = %for.cond17
  br label %if.end32, !dbg !4257

if.end32:                                         ; preds = %for.end31, %if.then11
  %40 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4258
  %dim_hot_level33 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %40, i32 0, i32 13, !dbg !4259
  %41 = load i64*, i64** %dim_hot_level33, align 8, !dbg !4259
  %42 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4260
  %dim_map34 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %42, i32 0, i32 15, !dbg !4261
  %43 = load i32*, i32** %dim_map34, align 8, !dbg !4261
  %44 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4262
  %min_indirect_level_escape35 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %44, i32 0, i32 2, !dbg !4263
  %45 = load i32, i32* %min_indirect_level_escape35, align 4, !dbg !4263
  call void @sort_dim_hot_level(i64* %41, i32* %43, i32 %45), !dbg !4264
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4265
  %tobool36 = icmp ne %struct._IO_FILE* %46, null, !dbg !4265
  br i1 %tobool36, label %if.then37, label %if.end54, !dbg !4267

if.then37:                                        ; preds = %if.end32
  store i32 0, i32* %i12, align 4, !dbg !4268
  br label %for.cond38, !dbg !4270

for.cond38:                                       ; preds = %for.inc51, %if.then37
  %47 = load i32, i32* %i12, align 4, !dbg !4271
  %48 = load i32, i32* %min_escape_l, align 4, !dbg !4273
  %cmp39 = icmp slt i32 %47, %48, !dbg !4274
  br i1 %cmp39, label %for.body41, label %for.end53, !dbg !4275

for.body41:                                       ; preds = %for.cond38
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4276
  %50 = load i32, i32* %i12, align 4, !dbg !4278
  %call42 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %49, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i64 0, i64 0), i32 %50), !dbg !4279
  %51 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4280
  %dim_hot_level43 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %51, i32 0, i32 13, !dbg !4282
  %52 = load i64*, i64** %dim_hot_level43, align 8, !dbg !4282
  %tobool44 = icmp ne i64* %52, null, !dbg !4280
  br i1 %tobool44, label %if.then45, label %if.end50, !dbg !4283

if.then45:                                        ; preds = %for.body41
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4284
  %54 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4285
  %dim_hot_level46 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %54, i32 0, i32 13, !dbg !4286
  %55 = load i64*, i64** %dim_hot_level46, align 8, !dbg !4286
  %56 = load i32, i32* %i12, align 4, !dbg !4287
  %idxprom47 = sext i32 %56 to i64, !dbg !4285
  %arrayidx48 = getelementptr inbounds i64, i64* %55, i64 %idxprom47, !dbg !4285
  %57 = load i64, i64* %arrayidx48, align 8, !dbg !4285
  %call49 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %53, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 0), i64 %57), !dbg !4288
  br label %if.end50, !dbg !4288

if.end50:                                         ; preds = %if.then45, %for.body41
  br label %for.inc51, !dbg !4289

for.inc51:                                        ; preds = %if.end50
  %58 = load i32, i32* %i12, align 4, !dbg !4290
  %inc52 = add nsw i32 %58, 1, !dbg !4290
  store i32 %inc52, i32* %i12, align 4, !dbg !4290
  br label %for.cond38, !dbg !4291, !llvm.loop !4292

for.end53:                                        ; preds = %for.cond38
  br label %if.end54, !dbg !4293

if.end54:                                         ; preds = %for.end53, %if.end32
  store i32 0, i32* %i12, align 4, !dbg !4294
  br label %for.cond55, !dbg !4296

for.cond55:                                       ; preds = %for.inc81, %if.end54
  %59 = load i32, i32* %i12, align 4, !dbg !4297
  %60 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4299
  %min_indirect_level_escape56 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %60, i32 0, i32 2, !dbg !4300
  %61 = load i32, i32* %min_indirect_level_escape56, align 4, !dbg !4300
  %cmp57 = icmp slt i32 %59, %61, !dbg !4301
  br i1 %cmp57, label %for.body59, label %for.end83, !dbg !4302

for.body59:                                       ; preds = %for.cond55
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4303
  %tobool60 = icmp ne %struct._IO_FILE* %62, null, !dbg !4303
  br i1 %tobool60, label %if.then61, label %if.end66, !dbg !4306

if.then61:                                        ; preds = %for.body59
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4307
  %64 = load i32, i32* %i12, align 4, !dbg !4308
  %65 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4309
  %dim_map62 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %65, i32 0, i32 15, !dbg !4310
  %66 = load i32*, i32** %dim_map62, align 8, !dbg !4310
  %67 = load i32, i32* %i12, align 4, !dbg !4311
  %idxprom63 = sext i32 %67 to i64, !dbg !4309
  %arrayidx64 = getelementptr inbounds i32, i32* %66, i64 %idxprom63, !dbg !4309
  %68 = load i32, i32* %arrayidx64, align 4, !dbg !4309
  %call65 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %63, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.12, i64 0, i64 0), i32 %64, i32 %68), !dbg !4312
  br label %if.end66, !dbg !4312

if.end66:                                         ; preds = %if.then61, %for.body59
  %69 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4313
  %dim_map67 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %69, i32 0, i32 15, !dbg !4315
  %70 = load i32*, i32** %dim_map67, align 8, !dbg !4315
  %71 = load i32, i32* %i12, align 4, !dbg !4316
  %idxprom68 = sext i32 %71 to i64, !dbg !4313
  %arrayidx69 = getelementptr inbounds i32, i32* %70, i64 %idxprom68, !dbg !4313
  %72 = load i32, i32* %arrayidx69, align 4, !dbg !4313
  %73 = load i32, i32* %i12, align 4, !dbg !4317
  %cmp70 = icmp ne i32 %72, %73, !dbg !4318
  br i1 %cmp70, label %if.then72, label %if.end80, !dbg !4319

if.then72:                                        ; preds = %if.end66
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4320
  %tobool73 = icmp ne %struct._IO_FILE* %74, null, !dbg !4320
  br i1 %tobool73, label %if.then74, label %if.end79, !dbg !4323

if.then74:                                        ; preds = %if.then72
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4324
  %76 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4325
  %dim_map75 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %76, i32 0, i32 15, !dbg !4326
  %77 = load i32*, i32** %dim_map75, align 8, !dbg !4326
  %78 = load i32, i32* %i12, align 4, !dbg !4327
  %idxprom76 = sext i32 %78 to i64, !dbg !4325
  %arrayidx77 = getelementptr inbounds i32, i32* %77, i64 %idxprom76, !dbg !4325
  %79 = load i32, i32* %arrayidx77, align 4, !dbg !4325
  %80 = load i32, i32* %i12, align 4, !dbg !4328
  %call78 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %75, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.13, i64 0, i64 0), i32 %79, i32 %80), !dbg !4329
  br label %if.end79, !dbg !4329

if.end79:                                         ; preds = %if.then74, %if.then72
  %81 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4330
  %is_transposed_p = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %81, i32 0, i32 6, !dbg !4331
  store i8 1, i8* %is_transposed_p, align 4, !dbg !4332
  br label %if.end80, !dbg !4333

if.end80:                                         ; preds = %if.end79, %if.end66
  br label %for.inc81, !dbg !4334

for.inc81:                                        ; preds = %if.end80
  %82 = load i32, i32* %i12, align 4, !dbg !4335
  %inc82 = add nsw i32 %82, 1, !dbg !4335
  store i32 %inc82, i32* %i12, align 4, !dbg !4335
  br label %for.cond55, !dbg !4336, !llvm.loop !4337

for.end83:                                        ; preds = %for.cond55
  br label %if.end95, !dbg !4339

if.else:                                          ; preds = %for.end
  store i32 0, i32* %i, align 4, !dbg !4340
  br label %for.cond84, !dbg !4343

for.cond84:                                       ; preds = %for.inc92, %if.else
  %83 = load i32, i32* %i, align 4, !dbg !4344
  %84 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4346
  %min_indirect_level_escape85 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %84, i32 0, i32 2, !dbg !4347
  %85 = load i32, i32* %min_indirect_level_escape85, align 4, !dbg !4347
  %cmp86 = icmp slt i32 %83, %85, !dbg !4348
  br i1 %cmp86, label %for.body88, label %for.end94, !dbg !4349

for.body88:                                       ; preds = %for.cond84
  %86 = load i32, i32* %i, align 4, !dbg !4350
  %87 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4351
  %dim_map89 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %87, i32 0, i32 15, !dbg !4352
  %88 = load i32*, i32** %dim_map89, align 8, !dbg !4352
  %89 = load i32, i32* %i, align 4, !dbg !4353
  %idxprom90 = sext i32 %89 to i64, !dbg !4351
  %arrayidx91 = getelementptr inbounds i32, i32* %88, i64 %idxprom90, !dbg !4351
  store i32 %86, i32* %arrayidx91, align 4, !dbg !4354
  br label %for.inc92, !dbg !4351

for.inc92:                                        ; preds = %for.body88
  %90 = load i32, i32* %i, align 4, !dbg !4355
  %inc93 = add nsw i32 %90, 1, !dbg !4355
  store i32 %inc93, i32* %i, align 4, !dbg !4355
  br label %for.cond84, !dbg !4356, !llvm.loop !4357

for.end94:                                        ; preds = %for.cond84
  br label %if.end95

if.end95:                                         ; preds = %for.end94, %for.end83
  %91 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4359
  %malloc_for_level96 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %91, i32 0, i32 4, !dbg !4360
  %92 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %malloc_for_level96, align 8, !dbg !4360
  %arrayidx97 = getelementptr inbounds %union.gimple_statement_d*, %union.gimple_statement_d** %92, i64 0, !dbg !4359
  %93 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx97, align 8, !dbg !4359
  store %union.gimple_statement_d* %93, %union.gimple_statement_d** %call_stmt_0, align 8, !dbg !4361
  %94 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt_0, align 8, !dbg !4362
  call void @collect_data_for_malloc_call(%union.gimple_statement_d* %94, %struct.malloc_call_data* %mcd), !dbg !4363
  %size_var = getelementptr inbounds %struct.malloc_call_data, %struct.malloc_call_data* %mcd, i32 0, i32 1, !dbg !4364
  %95 = load %union.tree_node*, %union.tree_node** %size_var, align 8, !dbg !4364
  %96 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4365
  %dimension_size = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %96, i32 0, i32 9, !dbg !4366
  %97 = load %union.tree_node**, %union.tree_node*** %dimension_size, align 8, !dbg !4366
  %arrayidx98 = getelementptr inbounds %union.tree_node*, %union.tree_node** %97, i64 0, !dbg !4365
  store %union.tree_node* %95, %union.tree_node** %arrayidx98, align 8, !dbg !4367
  %size_var99 = getelementptr inbounds %struct.malloc_call_data, %struct.malloc_call_data* %mcd, i32 0, i32 1, !dbg !4368
  %98 = load %union.tree_node*, %union.tree_node** %size_var99, align 8, !dbg !4368
  %99 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4369
  %dimension_size_orig = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %99, i32 0, i32 10, !dbg !4370
  %100 = load %union.tree_node**, %union.tree_node*** %dimension_size_orig, align 8, !dbg !4370
  %arrayidx100 = getelementptr inbounds %union.tree_node*, %union.tree_node** %100, i64 0, !dbg !4369
  store %union.tree_node* %98, %union.tree_node** %arrayidx100, align 8, !dbg !4371
  store i32 1, i32* %i, align 4, !dbg !4372
  br label %for.cond101, !dbg !4374

for.cond101:                                      ; preds = %for.inc120, %if.end95
  %101 = load i32, i32* %i, align 4, !dbg !4375
  %102 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4377
  %min_indirect_level_escape102 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %102, i32 0, i32 2, !dbg !4378
  %103 = load i32, i32* %min_indirect_level_escape102, align 4, !dbg !4378
  %cmp103 = icmp slt i32 %101, %103, !dbg !4379
  br i1 %cmp103, label %for.body105, label %for.end122, !dbg !4380

for.body105:                                      ; preds = %for.cond101
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4381, metadata !DIExpression()), !dbg !4383
  call void @llvm.dbg.declare(metadata %struct.check_var_data* %data106, metadata !4384, metadata !DIExpression()), !dbg !4385
  %104 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4386
  %dimension_size107 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %104, i32 0, i32 9, !dbg !4386
  %105 = load %union.tree_node**, %union.tree_node*** %dimension_size107, align 8, !dbg !4386
  %106 = load i32, i32* %i, align 4, !dbg !4386
  %idxprom108 = sext i32 %106 to i64, !dbg !4386
  %arrayidx109 = getelementptr inbounds %union.tree_node*, %union.tree_node** %105, i64 %idxprom108, !dbg !4386
  %107 = load %union.tree_node*, %union.tree_node** %arrayidx109, align 8, !dbg !4386
  %tobool110 = icmp ne %union.tree_node* %107, null, !dbg !4386
  br i1 %tobool110, label %cond.false, label %cond.true, !dbg !4386

cond.true:                                        ; preds = %for.body105
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 2108, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4386
  br label %cond.end, !dbg !4386

cond.false:                                       ; preds = %for.body105
  br label %cond.end, !dbg !4386

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4386
  %108 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4387
  %allocation_function_decl = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %108, i32 0, i32 7, !dbg !4388
  %109 = load %union.tree_node*, %union.tree_node** %allocation_function_decl, align 8, !dbg !4388
  %fn = getelementptr inbounds %struct.check_var_data, %struct.check_var_data* %data106, i32 0, i32 0, !dbg !4389
  store %union.tree_node* %109, %union.tree_node** %fn, align 8, !dbg !4390
  %stmt = getelementptr inbounds %struct.check_var_data, %struct.check_var_data* %data106, i32 0, i32 1, !dbg !4391
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !4392
  %110 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4393
  %dimension_size111 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %110, i32 0, i32 9, !dbg !4393
  %111 = load %union.tree_node**, %union.tree_node*** %dimension_size111, align 8, !dbg !4393
  %112 = load i32, i32* %i, align 4, !dbg !4393
  %idxprom112 = sext i32 %112 to i64, !dbg !4393
  %arrayidx113 = getelementptr inbounds %union.tree_node*, %union.tree_node** %111, i64 %idxprom112, !dbg !4393
  %113 = bitcast %struct.check_var_data* %data106 to i8*, !dbg !4393
  %call114 = call %union.tree_node* @walk_tree_without_duplicates_1(%union.tree_node** %arrayidx113, %union.tree_node* (%union.tree_node**, i32*, i8*)* @check_var_notmodified_p, i8* %113, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !4393
  store %union.tree_node* %call114, %union.tree_node** %t, align 8, !dbg !4394
  %114 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4395
  %cmp115 = icmp ne %union.tree_node* %114, null, !dbg !4397
  br i1 %cmp115, label %if.then117, label %if.end119, !dbg !4398

if.then117:                                       ; preds = %cond.end
  %115 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4399
  %116 = load i32, i32* %i, align 4, !dbg !4401
  %stmt118 = getelementptr inbounds %struct.check_var_data, %struct.check_var_data* %data106, i32 0, i32 1, !dbg !4402
  %117 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt118, align 8, !dbg !4402
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %115, i32 %116, %union.gimple_statement_d* %117), !dbg !4403
  br label %for.end122, !dbg !4404

if.end119:                                        ; preds = %cond.end
  br label %for.inc120, !dbg !4405

for.inc120:                                       ; preds = %if.end119
  %118 = load i32, i32* %i, align 4, !dbg !4406
  %inc121 = add nsw i32 %118, 1, !dbg !4406
  store i32 %inc121, i32* %i, align 4, !dbg !4406
  br label %for.cond101, !dbg !4407, !llvm.loop !4408

for.end122:                                       ; preds = %if.then117, %for.cond101
  %119 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4410
  %min_indirect_level_escape123 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %119, i32 0, i32 2, !dbg !4412
  %120 = load i32, i32* %min_indirect_level_escape123, align 4, !dbg !4412
  %cmp124 = icmp slt i32 %120, 2, !dbg !4413
  br i1 %cmp124, label %if.then126, label %if.end127, !dbg !4414

if.then126:                                       ; preds = %for.end122
  store i32 1, i32* %retval, align 4, !dbg !4415
  br label %return, !dbg !4415

if.end127:                                        ; preds = %for.end122
  %121 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt_0, align 8, !dbg !4416
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp128, %union.gimple_statement_d* %121), !dbg !4417
  %122 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4417
  %123 = bitcast %struct.gimple_stmt_iterator* %tmp128 to i8*, !dbg !4417
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %122, i8* align 8 %123, i64 24, i1 false), !dbg !4417
  %124 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4418
  store %union.tree_node* %124, %union.tree_node** %oldfn, align 8, !dbg !4419
  %125 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4420
  %allocation_function_decl129 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %125, i32 0, i32 7, !dbg !4421
  %126 = load %union.tree_node*, %union.tree_node** %allocation_function_decl129, align 8, !dbg !4421
  store %union.tree_node* %126, %union.tree_node** @current_function_decl, align 8, !dbg !4422
  %127 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4423
  %allocation_function_decl130 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %127, i32 0, i32 7, !dbg !4423
  %128 = load %union.tree_node*, %union.tree_node** %allocation_function_decl130, align 8, !dbg !4423
  %function_decl = bitcast %union.tree_node* %128 to %struct.tree_function_decl*, !dbg !4423
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !4423
  %129 = load %struct.function*, %struct.function** %f, align 8, !dbg !4423
  call void @push_cfun(%struct.function* %129), !dbg !4424
  %130 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4425
  %dimension_type_size = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %130, i32 0, i32 11, !dbg !4426
  %131 = load i64*, i64** %dimension_type_size, align 8, !dbg !4426
  %132 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4427
  %min_indirect_level_escape131 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %132, i32 0, i32 2, !dbg !4428
  %133 = load i32, i32* %min_indirect_level_escape131, align 4, !dbg !4428
  %idxprom132 = sext i32 %133 to i64, !dbg !4425
  %arrayidx133 = getelementptr inbounds i64, i64* %131, i64 %idxprom132, !dbg !4425
  %134 = load i64, i64* %arrayidx133, align 8, !dbg !4425
  store i64 %134, i64* %element_size, align 8, !dbg !4429
  store %union.tree_node* null, %union.tree_node** %prev_dim_size, align 8, !dbg !4430
  %135 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4431
  %min_indirect_level_escape134 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %135, i32 0, i32 2, !dbg !4433
  %136 = load i32, i32* %min_indirect_level_escape134, align 4, !dbg !4433
  %sub = sub nsw i32 %136, 1, !dbg !4434
  store i32 %sub, i32* %i, align 4, !dbg !4435
  br label %for.cond135, !dbg !4436

for.cond135:                                      ; preds = %for.inc200, %if.end127
  %137 = load i32, i32* %i, align 4, !dbg !4437
  %cmp136 = icmp sge i32 %137, 0, !dbg !4439
  br i1 %cmp136, label %for.body138, label %for.end201, !dbg !4440

for.body138:                                      ; preds = %for.cond135
  call void @llvm.dbg.declare(metadata %union.tree_node** %dim_size, metadata !4441, metadata !DIExpression()), !dbg !4443
  call void @llvm.dbg.declare(metadata %union.tree_node** %dim_var, metadata !4444, metadata !DIExpression()), !dbg !4445
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt139, metadata !4446, metadata !DIExpression()), !dbg !4447
  call void @llvm.dbg.declare(metadata %union.tree_node** %d_type_size, metadata !4448, metadata !DIExpression()), !dbg !4449
  %138 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4450
  %dimension_size_orig140 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %138, i32 0, i32 10, !dbg !4450
  %139 = load %union.tree_node**, %union.tree_node*** %dimension_size_orig140, align 8, !dbg !4450
  %140 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4450
  %dim_map141 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %140, i32 0, i32 15, !dbg !4450
  %141 = load i32*, i32** %dim_map141, align 8, !dbg !4450
  %142 = load i32, i32* %i, align 4, !dbg !4450
  %idxprom142 = sext i32 %142 to i64, !dbg !4450
  %arrayidx143 = getelementptr inbounds i32, i32* %141, i64 %idxprom142, !dbg !4450
  %143 = load i32, i32* %arrayidx143, align 4, !dbg !4450
  %idxprom144 = sext i32 %143 to i64, !dbg !4450
  %arrayidx145 = getelementptr inbounds %union.tree_node*, %union.tree_node** %139, i64 %idxprom144, !dbg !4450
  %144 = load %union.tree_node*, %union.tree_node** %arrayidx145, align 8, !dbg !4450
  %common = bitcast %union.tree_node* %144 to %struct.tree_common*, !dbg !4450
  %type146 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4450
  %145 = load %union.tree_node*, %union.tree_node** %type146, align 8, !dbg !4450
  %call147 = call %union.tree_node* @add_new_static_var(%union.tree_node* %145), !dbg !4451
  store %union.tree_node* %call147, %union.tree_node** %dim_var, align 8, !dbg !4452
  %146 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4453
  %dimension_size_orig148 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %146, i32 0, i32 10, !dbg !4453
  %147 = load %union.tree_node**, %union.tree_node*** %dimension_size_orig148, align 8, !dbg !4453
  %148 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4453
  %dim_map149 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %148, i32 0, i32 15, !dbg !4453
  %149 = load i32*, i32** %dim_map149, align 8, !dbg !4453
  %150 = load i32, i32* %i, align 4, !dbg !4453
  %idxprom150 = sext i32 %150 to i64, !dbg !4453
  %arrayidx151 = getelementptr inbounds i32, i32* %149, i64 %idxprom150, !dbg !4453
  %151 = load i32, i32* %arrayidx151, align 4, !dbg !4453
  %idxprom152 = sext i32 %151 to i64, !dbg !4453
  %arrayidx153 = getelementptr inbounds %union.tree_node*, %union.tree_node** %147, i64 %idxprom152, !dbg !4453
  %152 = load %union.tree_node*, %union.tree_node** %arrayidx153, align 8, !dbg !4453
  %common154 = bitcast %union.tree_node* %152 to %struct.tree_common*, !dbg !4453
  %type155 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common154, i32 0, i32 2, !dbg !4453
  %153 = load %union.tree_node*, %union.tree_node** %type155, align 8, !dbg !4453
  store %union.tree_node* %153, %union.tree_node** %type, align 8, !dbg !4454
  store i32 0, i32* %id, align 4, !dbg !4455
  br label %for.cond156, !dbg !4457

for.cond156:                                      ; preds = %for.inc168, %for.body138
  %154 = load i32, i32* %id, align 4, !dbg !4458
  %155 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4460
  %min_indirect_level_escape157 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %155, i32 0, i32 2, !dbg !4461
  %156 = load i32, i32* %min_indirect_level_escape157, align 4, !dbg !4461
  %cmp158 = icmp slt i32 %154, %156, !dbg !4462
  br i1 %cmp158, label %for.body160, label %for.end170, !dbg !4463

for.body160:                                      ; preds = %for.cond156
  %157 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4464
  %dim_map161 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %157, i32 0, i32 15, !dbg !4466
  %158 = load i32*, i32** %dim_map161, align 8, !dbg !4466
  %159 = load i32, i32* %id, align 4, !dbg !4467
  %idxprom162 = sext i32 %159 to i64, !dbg !4464
  %arrayidx163 = getelementptr inbounds i32, i32* %158, i64 %idxprom162, !dbg !4464
  %160 = load i32, i32* %arrayidx163, align 4, !dbg !4464
  %161 = load i32, i32* %i, align 4, !dbg !4468
  %cmp164 = icmp eq i32 %160, %161, !dbg !4469
  br i1 %cmp164, label %if.then166, label %if.end167, !dbg !4470

if.then166:                                       ; preds = %for.body160
  br label %for.end170, !dbg !4471

if.end167:                                        ; preds = %for.body160
  br label %for.inc168, !dbg !4468

for.inc168:                                       ; preds = %if.end167
  %162 = load i32, i32* %id, align 4, !dbg !4472
  %inc169 = add nsw i32 %162, 1, !dbg !4472
  store i32 %inc169, i32* %id, align 4, !dbg !4472
  br label %for.cond156, !dbg !4473, !llvm.loop !4474

for.end170:                                       ; preds = %if.then166, %for.cond156
  %163 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4476
  %164 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4477
  %dimension_type_size171 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %164, i32 0, i32 11, !dbg !4478
  %165 = load i64*, i64** %dimension_type_size171, align 8, !dbg !4478
  %166 = load i32, i32* %id, align 4, !dbg !4479
  %add = add nsw i32 %166, 1, !dbg !4480
  %idxprom172 = sext i32 %add to i64, !dbg !4477
  %arrayidx173 = getelementptr inbounds i64, i64* %165, i64 %idxprom172, !dbg !4477
  %167 = load i64, i64* %arrayidx173, align 8, !dbg !4477
  %call174 = call %union.tree_node* @build_int_cst(%union.tree_node* %163, i64 %167), !dbg !4481
  store %union.tree_node* %call174, %union.tree_node** %d_type_size, align 8, !dbg !4482
  %168 = load %union.tree_node*, %union.tree_node** %prev_dim_size, align 8, !dbg !4483
  %tobool175 = icmp ne %union.tree_node* %168, null, !dbg !4483
  br i1 %tobool175, label %if.end178, label %if.then176, !dbg !4485

if.then176:                                       ; preds = %for.end170
  %169 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4486
  %170 = load i64, i64* %element_size, align 8, !dbg !4487
  %call177 = call %union.tree_node* @build_int_cst(%union.tree_node* %169, i64 %170), !dbg !4488
  store %union.tree_node* %call177, %union.tree_node** %prev_dim_size, align 8, !dbg !4489
  br label %if.end178, !dbg !4490

if.end178:                                        ; preds = %if.then176, %for.end170
  %171 = load i8, i8* @check_transpose_p, align 1, !dbg !4491
  %tobool179 = icmp ne i8 %171, 0, !dbg !4491
  br i1 %tobool179, label %if.else188, label %land.lhs.true, !dbg !4493

land.lhs.true:                                    ; preds = %if.end178
  %172 = load i32, i32* %i, align 4, !dbg !4494
  %173 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4495
  %min_indirect_level_escape180 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %173, i32 0, i32 2, !dbg !4496
  %174 = load i32, i32* %min_indirect_level_escape180, align 4, !dbg !4496
  %sub181 = sub nsw i32 %174, 1, !dbg !4497
  %cmp182 = icmp eq i32 %172, %sub181, !dbg !4498
  br i1 %cmp182, label %if.then184, label %if.else188, !dbg !4499

if.then184:                                       ; preds = %land.lhs.true
  %175 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4500
  %dimension_size_orig185 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %175, i32 0, i32 10, !dbg !4502
  %176 = load %union.tree_node**, %union.tree_node*** %dimension_size_orig185, align 8, !dbg !4502
  %177 = load i32, i32* %id, align 4, !dbg !4503
  %idxprom186 = sext i32 %177 to i64, !dbg !4500
  %arrayidx187 = getelementptr inbounds %union.tree_node*, %union.tree_node** %176, i64 %idxprom186, !dbg !4500
  %178 = load %union.tree_node*, %union.tree_node** %arrayidx187, align 8, !dbg !4500
  store %union.tree_node* %178, %union.tree_node** %dim_size, align 8, !dbg !4504
  br label %if.end194, !dbg !4505

if.else188:                                       ; preds = %land.lhs.true, %if.end178
  %179 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4506
  %180 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4506
  %dimension_size_orig189 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %180, i32 0, i32 10, !dbg !4506
  %181 = load %union.tree_node**, %union.tree_node*** %dimension_size_orig189, align 8, !dbg !4506
  %182 = load i32, i32* %id, align 4, !dbg !4506
  %idxprom190 = sext i32 %182 to i64, !dbg !4506
  %arrayidx191 = getelementptr inbounds %union.tree_node*, %union.tree_node** %181, i64 %idxprom190, !dbg !4506
  %183 = load %union.tree_node*, %union.tree_node** %arrayidx191, align 8, !dbg !4506
  %184 = load %union.tree_node*, %union.tree_node** %d_type_size, align 8, !dbg !4506
  %call192 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 67, %union.tree_node* %179, %union.tree_node* %183, %union.tree_node* %184), !dbg !4506
  store %union.tree_node* %call192, %union.tree_node** %dim_size, align 8, !dbg !4508
  %185 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4509
  %186 = load %union.tree_node*, %union.tree_node** %dim_size, align 8, !dbg !4509
  %187 = load %union.tree_node*, %union.tree_node** %prev_dim_size, align 8, !dbg !4509
  %call193 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 65, %union.tree_node* %185, %union.tree_node* %186, %union.tree_node* %187), !dbg !4509
  store %union.tree_node* %call193, %union.tree_node** %dim_size, align 8, !dbg !4510
  br label %if.end194

if.end194:                                        ; preds = %if.else188, %if.then184
  %188 = load %union.tree_node*, %union.tree_node** %dim_size, align 8, !dbg !4511
  %call195 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %188, i8 zeroext 1, %union.tree_node* null, i8 zeroext 1, i32 1), !dbg !4512
  store %union.tree_node* %call195, %union.tree_node** %dim_size, align 8, !dbg !4513
  %189 = load %union.tree_node*, %union.tree_node** %dim_var, align 8, !dbg !4514
  %190 = load %union.tree_node*, %union.tree_node** %dim_size, align 8, !dbg !4514
  %call196 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %189, %union.tree_node* %190), !dbg !4514
  store %union.gimple_statement_d* %call196, %union.gimple_statement_d** %stmt139, align 8, !dbg !4515
  %191 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt139, align 8, !dbg !4516
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %191), !dbg !4517
  %192 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt139, align 8, !dbg !4518
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %192, i32 1), !dbg !4519
  %193 = load %union.tree_node*, %union.tree_node** %dim_var, align 8, !dbg !4520
  %194 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4521
  %dimension_size197 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %194, i32 0, i32 9, !dbg !4522
  %195 = load %union.tree_node**, %union.tree_node*** %dimension_size197, align 8, !dbg !4522
  %196 = load i32, i32* %i, align 4, !dbg !4523
  %idxprom198 = sext i32 %196 to i64, !dbg !4521
  %arrayidx199 = getelementptr inbounds %union.tree_node*, %union.tree_node** %195, i64 %idxprom198, !dbg !4521
  store %union.tree_node* %193, %union.tree_node** %arrayidx199, align 8, !dbg !4524
  store %union.tree_node* %193, %union.tree_node** %prev_dim_size, align 8, !dbg !4525
  br label %for.inc200, !dbg !4526

for.inc200:                                       ; preds = %if.end194
  %197 = load i32, i32* %i, align 4, !dbg !4527
  %dec = add nsw i32 %197, -1, !dbg !4527
  store i32 %dec, i32* %i, align 4, !dbg !4527
  br label %for.cond135, !dbg !4528, !llvm.loop !4529

for.end201:                                       ; preds = %for.cond135
  call void @update_ssa(i32 2048), !dbg !4531
  %198 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4532
  %allocation_function_decl202 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %198, i32 0, i32 7, !dbg !4533
  %199 = load %union.tree_node*, %union.tree_node** %allocation_function_decl202, align 8, !dbg !4533
  %call203 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %199), !dbg !4534
  store %struct.cgraph_node* %call203, %struct.cgraph_node** %c_node, align 8, !dbg !4535
  %200 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt_0, align 8, !dbg !4536
  %call204 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %200, i32 0), !dbg !4537
  store %union.tree_node* %call204, %union.tree_node** %old_size_0, align 8, !dbg !4538
  %201 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4539
  %dimension_size205 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %201, i32 0, i32 9, !dbg !4540
  %202 = load %union.tree_node**, %union.tree_node*** %dimension_size205, align 8, !dbg !4540
  %arrayidx206 = getelementptr inbounds %union.tree_node*, %union.tree_node** %202, i64 0, !dbg !4539
  %203 = load %union.tree_node*, %union.tree_node** %arrayidx206, align 8, !dbg !4539
  %call207 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %203, i8 zeroext 1, %union.tree_node* null, i8 zeroext 1, i32 1), !dbg !4541
  store %union.tree_node* %call207, %union.tree_node** %tmp, align 8, !dbg !4542
  %204 = load %union.tree_node*, %union.tree_node** %old_size_0, align 8, !dbg !4543
  %base = bitcast %union.tree_node* %204 to %struct.tree_base*, !dbg !4543
  %205 = bitcast %struct.tree_base* %base to i64*, !dbg !4543
  %bf.load = load i64, i64* %205, align 8, !dbg !4543
  %bf.clear = and i64 %bf.load, 65535, !dbg !4543
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4543
  %cmp208 = icmp eq i32 %bf.cast, 141, !dbg !4545
  br i1 %cmp208, label %if.then210, label %if.end232, !dbg !4546

if.then210:                                       ; preds = %for.end201
  %206 = load %union.tree_node*, %union.tree_node** %old_size_0, align 8, !dbg !4547
  %call211 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter, %union.tree_node* %206), !dbg !4547
  store %union.gimple_statement_d* %call211, %union.gimple_statement_d** %use_stmt, align 8, !dbg !4547
  br label %for.cond212, !dbg !4547

for.cond212:                                      ; preds = %for.inc229, %if.then210
  %call213 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !4550
  %tobool214 = icmp ne i8 %call213, 0, !dbg !4550
  %lnot = xor i1 %tobool214, true, !dbg !4550
  br i1 %lnot, label %for.body215, label %for.end231, !dbg !4547

for.body215:                                      ; preds = %for.cond212
  %call216 = call %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !4552
  store %struct.ssa_use_operand_d* %call216, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4552
  br label %for.cond217, !dbg !4552

for.cond217:                                      ; preds = %for.inc226, %for.body215
  %call218 = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !4554
  %tobool219 = icmp ne i8 %call218, 0, !dbg !4554
  %lnot220 = xor i1 %tobool219, true, !dbg !4554
  br i1 %lnot220, label %for.body221, label %for.end228, !dbg !4552

for.body221:                                      ; preds = %for.cond217
  %207 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !4556
  %208 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt_0, align 8, !dbg !4558
  %cmp222 = icmp eq %union.gimple_statement_d* %207, %208, !dbg !4559
  br i1 %cmp222, label %if.then224, label %if.end225, !dbg !4560

if.then224:                                       ; preds = %for.body221
  %209 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4561
  %210 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !4561
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %209, %union.tree_node* %210), !dbg !4561
  br label %if.end225, !dbg !4561

if.end225:                                        ; preds = %if.then224, %for.body221
  br label %for.inc226, !dbg !4558

for.inc226:                                       ; preds = %if.end225
  %call227 = call %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !4554
  store %struct.ssa_use_operand_d* %call227, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4554
  br label %for.cond217, !dbg !4554, !llvm.loop !4562

for.end228:                                       ; preds = %for.cond217
  br label %for.inc229, !dbg !4563

for.inc229:                                       ; preds = %for.end228
  %call230 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !4550
  store %union.gimple_statement_d* %call230, %union.gimple_statement_d** %use_stmt, align 8, !dbg !4550
  br label %for.cond212, !dbg !4550, !llvm.loop !4564

for.end231:                                       ; preds = %for.cond212
  br label %if.end232, !dbg !4566

if.end232:                                        ; preds = %for.end231, %for.end201
  store i32 1, i32* %i, align 4, !dbg !4567
  br label %for.cond233, !dbg !4569

for.cond233:                                      ; preds = %for.inc277, %if.end232
  %211 = load i32, i32* %i, align 4, !dbg !4570
  %212 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4572
  %min_indirect_level_escape234 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %212, i32 0, i32 2, !dbg !4573
  %213 = load i32, i32* %min_indirect_level_escape234, align 4, !dbg !4573
  %cmp235 = icmp slt i32 %211, %213, !dbg !4574
  br i1 %cmp235, label %for.body237, label %for.end279, !dbg !4575

for.body237:                                      ; preds = %for.cond233
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi238, metadata !4576, metadata !DIExpression()), !dbg !4578
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt1, metadata !4579, metadata !DIExpression()), !dbg !4580
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %use_stmt1, align 8, !dbg !4580
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call_stmt, metadata !4581, metadata !DIExpression()), !dbg !4582
  %214 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4583
  %malloc_for_level239 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %214, i32 0, i32 4, !dbg !4584
  %215 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %malloc_for_level239, align 8, !dbg !4584
  %216 = load i32, i32* %i, align 4, !dbg !4585
  %idxprom240 = sext i32 %216 to i64, !dbg !4583
  %arrayidx241 = getelementptr inbounds %union.gimple_statement_d*, %union.gimple_statement_d** %215, i64 %idxprom240, !dbg !4583
  %217 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx241, align 8, !dbg !4583
  store %union.gimple_statement_d* %217, %union.gimple_statement_d** %call_stmt, align 8, !dbg !4582
  %218 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !4586
  %call242 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %218), !dbg !4586
  %tobool243 = icmp ne i8 %call242, 0, !dbg !4586
  br i1 %tobool243, label %cond.false245, label %cond.true244, !dbg !4586

cond.true244:                                     ; preds = %for.body237
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 2212, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4586
  br label %cond.end246, !dbg !4586

cond.false245:                                    ; preds = %for.body237
  br label %cond.end246, !dbg !4586

cond.end246:                                      ; preds = %cond.false245, %cond.true244
  %cond247 = phi i32 [ 0, %cond.true244 ], [ 0, %cond.false245 ], !dbg !4586
  %219 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !4587
  %220 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !4588
  %call248 = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %219, %union.gimple_statement_d* %220), !dbg !4589
  store %struct.cgraph_edge* %call248, %struct.cgraph_edge** %e, align 8, !dbg !4590
  %221 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4591
  %tobool249 = icmp ne %struct.cgraph_edge* %221, null, !dbg !4591
  br i1 %tobool249, label %cond.false251, label %cond.true250, !dbg !4591

cond.true250:                                     ; preds = %cond.end246
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 2214, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4591
  br label %cond.end252, !dbg !4591

cond.false251:                                    ; preds = %cond.end246
  br label %cond.end252, !dbg !4591

cond.end252:                                      ; preds = %cond.false251, %cond.true250
  %cond253 = phi i32 [ 0, %cond.true250 ], [ 0, %cond.false251 ], !dbg !4591
  %222 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4592
  call void @cgraph_remove_edge(%struct.cgraph_edge* %222), !dbg !4593
  %223 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !4594
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp254, %union.gimple_statement_d* %223), !dbg !4595
  %224 = bitcast %struct.gimple_stmt_iterator* %gsi238 to i8*, !dbg !4595
  %225 = bitcast %struct.gimple_stmt_iterator* %tmp254 to i8*, !dbg !4595
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %224, i8* align 8 %225, i64 24, i1 false), !dbg !4595
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi238, i8 zeroext 1), !dbg !4596
  %226 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !4597
  %call255 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %226), !dbg !4597
  %call256 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter, %union.tree_node* %call255), !dbg !4597
  store %union.gimple_statement_d* %call256, %union.gimple_statement_d** %use_stmt, align 8, !dbg !4597
  br label %for.cond257, !dbg !4597

for.cond257:                                      ; preds = %for.inc263, %cond.end252
  %call258 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !4599
  %tobool259 = icmp ne i8 %call258, 0, !dbg !4599
  %lnot260 = xor i1 %tobool259, true, !dbg !4599
  br i1 %lnot260, label %for.body261, label %for.end265, !dbg !4597

for.body261:                                      ; preds = %for.cond257
  %227 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !4601
  store %union.gimple_statement_d* %227, %union.gimple_statement_d** %use_stmt1, align 8, !dbg !4603
  %228 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !4604
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp262, %union.gimple_statement_d* %228), !dbg !4605
  %229 = bitcast %struct.gimple_stmt_iterator* %gsi238 to i8*, !dbg !4605
  %230 = bitcast %struct.gimple_stmt_iterator* %tmp262 to i8*, !dbg !4605
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %229, i8* align 8 %230, i64 24, i1 false), !dbg !4605
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi238, i8 zeroext 1), !dbg !4606
  br label %for.inc263, !dbg !4607

for.inc263:                                       ; preds = %for.body261
  %call264 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !4599
  store %union.gimple_statement_d* %call264, %union.gimple_statement_d** %use_stmt, align 8, !dbg !4599
  br label %for.cond257, !dbg !4599, !llvm.loop !4608

for.end265:                                       ; preds = %for.cond257
  %231 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt1, align 8, !dbg !4610
  %call266 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %231), !dbg !4610
  %call267 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter, %union.tree_node* %call266), !dbg !4610
  store %union.gimple_statement_d* %call267, %union.gimple_statement_d** %use_stmt, align 8, !dbg !4610
  br label %for.cond268, !dbg !4610

for.cond268:                                      ; preds = %for.inc274, %for.end265
  %call269 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !4612
  %tobool270 = icmp ne i8 %call269, 0, !dbg !4612
  %lnot271 = xor i1 %tobool270, true, !dbg !4612
  br i1 %lnot271, label %for.body272, label %for.end276, !dbg !4610

for.body272:                                      ; preds = %for.cond268
  %232 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !4614
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp273, %union.gimple_statement_d* %232), !dbg !4616
  %233 = bitcast %struct.gimple_stmt_iterator* %gsi238 to i8*, !dbg !4616
  %234 = bitcast %struct.gimple_stmt_iterator* %tmp273 to i8*, !dbg !4616
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %233, i8* align 8 %234, i64 24, i1 false), !dbg !4616
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi238, i8 zeroext 1), !dbg !4617
  br label %for.inc274, !dbg !4618

for.inc274:                                       ; preds = %for.body272
  %call275 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !4612
  store %union.gimple_statement_d* %call275, %union.gimple_statement_d** %use_stmt, align 8, !dbg !4612
  br label %for.cond268, !dbg !4612, !llvm.loop !4619

for.end276:                                       ; preds = %for.cond268
  br label %for.inc277, !dbg !4621

for.inc277:                                       ; preds = %for.end276
  %235 = load i32, i32* %i, align 4, !dbg !4622
  %inc278 = add nsw i32 %235, 1, !dbg !4622
  store i32 %inc278, i32* %i, align 4, !dbg !4622
  br label %for.cond233, !dbg !4623, !llvm.loop !4624

for.end279:                                       ; preds = %for.cond233
  call void @update_ssa(i32 2048), !dbg !4626
  store i32 1, i32* %i, align 4, !dbg !4627
  br label %for.cond280, !dbg !4629

for.cond280:                                      ; preds = %for.inc331, %for.end279
  %236 = load i32, i32* %i, align 4, !dbg !4630
  %237 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4632
  %min_indirect_level_escape281 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %237, i32 0, i32 2, !dbg !4633
  %238 = load i32, i32* %min_indirect_level_escape281, align 4, !dbg !4633
  %cmp282 = icmp slt i32 %236, %238, !dbg !4634
  br i1 %cmp282, label %for.body284, label %for.end333, !dbg !4635

for.body284:                                      ; preds = %for.cond280
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi285, metadata !4636, metadata !DIExpression()), !dbg !4638
  %239 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4639
  %free_stmts = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %239, i32 0, i32 8, !dbg !4641
  %240 = load %struct.free_info*, %struct.free_info** %free_stmts, align 8, !dbg !4641
  %241 = load i32, i32* %i, align 4, !dbg !4642
  %idxprom286 = sext i32 %241 to i64, !dbg !4639
  %arrayidx287 = getelementptr inbounds %struct.free_info, %struct.free_info* %240, i64 %idxprom286, !dbg !4639
  %stmt288 = getelementptr inbounds %struct.free_info, %struct.free_info* %arrayidx287, i32 0, i32 0, !dbg !4643
  %242 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt288, align 8, !dbg !4643
  %tobool289 = icmp ne %union.gimple_statement_d* %242, null, !dbg !4639
  br i1 %tobool289, label %if.end291, label %if.then290, !dbg !4644

if.then290:                                       ; preds = %for.body284
  br label %for.inc331, !dbg !4645

if.end291:                                        ; preds = %for.body284
  %243 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4646
  %free_stmts292 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %243, i32 0, i32 8, !dbg !4647
  %244 = load %struct.free_info*, %struct.free_info** %free_stmts292, align 8, !dbg !4647
  %245 = load i32, i32* %i, align 4, !dbg !4648
  %idxprom293 = sext i32 %245 to i64, !dbg !4646
  %arrayidx294 = getelementptr inbounds %struct.free_info, %struct.free_info* %244, i64 %idxprom293, !dbg !4646
  %func = getelementptr inbounds %struct.free_info, %struct.free_info* %arrayidx294, i32 0, i32 1, !dbg !4649
  %246 = load %union.tree_node*, %union.tree_node** %func, align 8, !dbg !4649
  %call295 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %246), !dbg !4650
  store %struct.cgraph_node* %call295, %struct.cgraph_node** %c_node, align 8, !dbg !4651
  %247 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4652
  %free_stmts296 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %247, i32 0, i32 8, !dbg !4652
  %248 = load %struct.free_info*, %struct.free_info** %free_stmts296, align 8, !dbg !4652
  %249 = load i32, i32* %i, align 4, !dbg !4652
  %idxprom297 = sext i32 %249 to i64, !dbg !4652
  %arrayidx298 = getelementptr inbounds %struct.free_info, %struct.free_info* %248, i64 %idxprom297, !dbg !4652
  %stmt299 = getelementptr inbounds %struct.free_info, %struct.free_info* %arrayidx298, i32 0, i32 0, !dbg !4652
  %250 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt299, align 8, !dbg !4652
  %call300 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %250), !dbg !4652
  %tobool301 = icmp ne i8 %call300, 0, !dbg !4652
  br i1 %tobool301, label %cond.false303, label %cond.true302, !dbg !4652

cond.true302:                                     ; preds = %if.end291
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 2249, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4652
  br label %cond.end304, !dbg !4652

cond.false303:                                    ; preds = %if.end291
  br label %cond.end304, !dbg !4652

cond.end304:                                      ; preds = %cond.false303, %cond.true302
  %cond305 = phi i32 [ 0, %cond.true302 ], [ 0, %cond.false303 ], !dbg !4652
  %251 = load %struct.cgraph_node*, %struct.cgraph_node** %c_node, align 8, !dbg !4653
  %252 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4654
  %free_stmts306 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %252, i32 0, i32 8, !dbg !4655
  %253 = load %struct.free_info*, %struct.free_info** %free_stmts306, align 8, !dbg !4655
  %254 = load i32, i32* %i, align 4, !dbg !4656
  %idxprom307 = sext i32 %254 to i64, !dbg !4654
  %arrayidx308 = getelementptr inbounds %struct.free_info, %struct.free_info* %253, i64 %idxprom307, !dbg !4654
  %stmt309 = getelementptr inbounds %struct.free_info, %struct.free_info* %arrayidx308, i32 0, i32 0, !dbg !4657
  %255 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt309, align 8, !dbg !4657
  %call310 = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %251, %union.gimple_statement_d* %255), !dbg !4658
  store %struct.cgraph_edge* %call310, %struct.cgraph_edge** %e, align 8, !dbg !4659
  %256 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4660
  %tobool311 = icmp ne %struct.cgraph_edge* %256, null, !dbg !4660
  br i1 %tobool311, label %cond.false313, label %cond.true312, !dbg !4660

cond.true312:                                     ; preds = %cond.end304
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 2251, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4660
  br label %cond.end314, !dbg !4660

cond.false313:                                    ; preds = %cond.end304
  br label %cond.end314, !dbg !4660

cond.end314:                                      ; preds = %cond.false313, %cond.true312
  %cond315 = phi i32 [ 0, %cond.true312 ], [ 0, %cond.false313 ], !dbg !4660
  %257 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4661
  call void @cgraph_remove_edge(%struct.cgraph_edge* %257), !dbg !4662
  %258 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4663
  %free_stmts316 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %258, i32 0, i32 8, !dbg !4664
  %259 = load %struct.free_info*, %struct.free_info** %free_stmts316, align 8, !dbg !4664
  %260 = load i32, i32* %i, align 4, !dbg !4665
  %idxprom317 = sext i32 %260 to i64, !dbg !4663
  %arrayidx318 = getelementptr inbounds %struct.free_info, %struct.free_info* %259, i64 %idxprom317, !dbg !4663
  %func319 = getelementptr inbounds %struct.free_info, %struct.free_info* %arrayidx318, i32 0, i32 1, !dbg !4666
  %261 = load %union.tree_node*, %union.tree_node** %func319, align 8, !dbg !4666
  store %union.tree_node* %261, %union.tree_node** @current_function_decl, align 8, !dbg !4667
  %262 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4668
  %free_stmts320 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %262, i32 0, i32 8, !dbg !4668
  %263 = load %struct.free_info*, %struct.free_info** %free_stmts320, align 8, !dbg !4668
  %264 = load i32, i32* %i, align 4, !dbg !4668
  %idxprom321 = sext i32 %264 to i64, !dbg !4668
  %arrayidx322 = getelementptr inbounds %struct.free_info, %struct.free_info* %263, i64 %idxprom321, !dbg !4668
  %func323 = getelementptr inbounds %struct.free_info, %struct.free_info* %arrayidx322, i32 0, i32 1, !dbg !4668
  %265 = load %union.tree_node*, %union.tree_node** %func323, align 8, !dbg !4668
  %function_decl324 = bitcast %union.tree_node* %265 to %struct.tree_function_decl*, !dbg !4668
  %f325 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl324, i32 0, i32 1, !dbg !4668
  %266 = load %struct.function*, %struct.function** %f325, align 8, !dbg !4668
  call void @set_cfun(%struct.function* %266), !dbg !4669
  %267 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4670
  %free_stmts327 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %267, i32 0, i32 8, !dbg !4671
  %268 = load %struct.free_info*, %struct.free_info** %free_stmts327, align 8, !dbg !4671
  %269 = load i32, i32* %i, align 4, !dbg !4672
  %idxprom328 = sext i32 %269 to i64, !dbg !4670
  %arrayidx329 = getelementptr inbounds %struct.free_info, %struct.free_info* %268, i64 %idxprom328, !dbg !4670
  %stmt330 = getelementptr inbounds %struct.free_info, %struct.free_info* %arrayidx329, i32 0, i32 0, !dbg !4673
  %270 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt330, align 8, !dbg !4673
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp326, %union.gimple_statement_d* %270), !dbg !4674
  %271 = bitcast %struct.gimple_stmt_iterator* %gsi285 to i8*, !dbg !4674
  %272 = bitcast %struct.gimple_stmt_iterator* %tmp326 to i8*, !dbg !4674
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %271, i8* align 8 %272, i64 24, i1 false), !dbg !4674
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi285, i8 zeroext 1), !dbg !4675
  br label %for.inc331, !dbg !4676

for.inc331:                                       ; preds = %cond.end314, %if.then290
  %273 = load i32, i32* %i, align 4, !dbg !4677
  %inc332 = add nsw i32 %273, 1, !dbg !4677
  store i32 %inc332, i32* %i, align 4, !dbg !4677
  br label %for.cond280, !dbg !4678, !llvm.loop !4679

for.end333:                                       ; preds = %for.cond280
  %274 = load %union.tree_node*, %union.tree_node** %oldfn, align 8, !dbg !4681
  store %union.tree_node* %274, %union.tree_node** @current_function_decl, align 8, !dbg !4682
  call void @pop_cfun(), !dbg !4683
  store i32 1, i32* %retval, align 4, !dbg !4684
  br label %return, !dbg !4684

return:                                           ; preds = %for.end333, %if.then126, %if.then3
  %275 = load i32, i32* %retval, align 4, !dbg !4685
  ret i32 %275, !dbg !4685
}

; Function Attrs: noinline nounwind uwtable
define internal void @record_all_accesses_in_func() #0 !dbg !4686 {
entry:
  %i = alloca i32, align 4
  %visited_stmts_1 = alloca %struct.simple_bitmap_def*, align 8
  %tmpmi = alloca %struct.matrix_info, align 8
  %mi = alloca %struct.matrix_info*, align 8
  %ssa_var = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4687, metadata !DIExpression()), !dbg !4688
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %visited_stmts_1, metadata !4689, metadata !DIExpression()), !dbg !4690
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4691
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4691
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !4691
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4691
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %1, i32 0, i32 2, !dbg !4691
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !4691
  %tobool = icmp ne %struct.VEC_tree_gc* %2, null, !dbg !4691
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4691

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4691
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !4691
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 3, !dbg !4691
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !4691
  %ssa_names3 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 2, !dbg !4691
  %5 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names3, align 8, !dbg !4691
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %5, i32 0, i32 0, !dbg !4691
  br label %cond.end, !dbg !4691

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4691

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4691
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !4691
  %call4 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %call), !dbg !4692
  store %struct.simple_bitmap_def* %call4, %struct.simple_bitmap_def** %visited_stmts_1, align 8, !dbg !4693
  store i32 0, i32* %i, align 4, !dbg !4694
  br label %for.cond, !dbg !4696

for.cond:                                         ; preds = %for.inc, %cond.end
  %6 = load i32, i32* %i, align 4, !dbg !4697
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4699
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !4699
  %gimple_df6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 3, !dbg !4699
  %8 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df6, align 8, !dbg !4699
  %ssa_names7 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %8, i32 0, i32 2, !dbg !4699
  %9 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names7, align 8, !dbg !4699
  %tobool8 = icmp ne %struct.VEC_tree_gc* %9, null, !dbg !4699
  br i1 %tobool8, label %cond.true9, label %cond.false14, !dbg !4699

cond.true9:                                       ; preds = %for.cond
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4699
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !4699
  %gimple_df11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 3, !dbg !4699
  %11 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df11, align 8, !dbg !4699
  %ssa_names12 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %11, i32 0, i32 2, !dbg !4699
  %12 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names12, align 8, !dbg !4699
  %base13 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %12, i32 0, i32 0, !dbg !4699
  br label %cond.end15, !dbg !4699

cond.false14:                                     ; preds = %for.cond
  br label %cond.end15, !dbg !4699

cond.end15:                                       ; preds = %cond.false14, %cond.true9
  %cond16 = phi %struct.VEC_tree_base* [ %base13, %cond.true9 ], [ null, %cond.false14 ], !dbg !4699
  %call17 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond16), !dbg !4699
  %cmp = icmp ult i32 %6, %call17, !dbg !4700
  br i1 %cmp, label %for.body, label %for.end, !dbg !4701

for.body:                                         ; preds = %cond.end15
  call void @llvm.dbg.declare(metadata %struct.matrix_info* %tmpmi, metadata !4702, metadata !DIExpression()), !dbg !4704
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %mi, metadata !4705, metadata !DIExpression()), !dbg !4706
  call void @llvm.dbg.declare(metadata %union.tree_node** %ssa_var, metadata !4707, metadata !DIExpression()), !dbg !4708
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4709
  %add.ptr18 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !4709
  %gimple_df19 = getelementptr inbounds %struct.function, %struct.function* %add.ptr18, i32 0, i32 3, !dbg !4709
  %14 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df19, align 8, !dbg !4709
  %ssa_names20 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %14, i32 0, i32 2, !dbg !4709
  %15 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names20, align 8, !dbg !4709
  %tobool21 = icmp ne %struct.VEC_tree_gc* %15, null, !dbg !4709
  br i1 %tobool21, label %cond.true22, label %cond.false27, !dbg !4709

cond.true22:                                      ; preds = %for.body
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4709
  %add.ptr23 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !4709
  %gimple_df24 = getelementptr inbounds %struct.function, %struct.function* %add.ptr23, i32 0, i32 3, !dbg !4709
  %17 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df24, align 8, !dbg !4709
  %ssa_names25 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %17, i32 0, i32 2, !dbg !4709
  %18 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names25, align 8, !dbg !4709
  %base26 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %18, i32 0, i32 0, !dbg !4709
  br label %cond.end28, !dbg !4709

cond.false27:                                     ; preds = %for.body
  br label %cond.end28, !dbg !4709

cond.end28:                                       ; preds = %cond.false27, %cond.true22
  %cond29 = phi %struct.VEC_tree_base* [ %base26, %cond.true22 ], [ null, %cond.false27 ], !dbg !4709
  %19 = load i32, i32* %i, align 4, !dbg !4709
  %call30 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond29, i32 %19), !dbg !4709
  store %union.tree_node* %call30, %union.tree_node** %ssa_var, align 8, !dbg !4708
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !4710, metadata !DIExpression()), !dbg !4711
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !4712, metadata !DIExpression()), !dbg !4713
  %20 = load %union.tree_node*, %union.tree_node** %ssa_var, align 8, !dbg !4714
  %tobool31 = icmp ne %union.tree_node* %20, null, !dbg !4714
  br i1 %tobool31, label %lor.lhs.false, label %if.then, !dbg !4716

lor.lhs.false:                                    ; preds = %cond.end28
  %21 = load %union.tree_node*, %union.tree_node** %ssa_var, align 8, !dbg !4717
  %ssa_name = bitcast %union.tree_node* %21 to %struct.tree_ssa_name*, !dbg !4717
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !4717
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4717
  %call32 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %22), !dbg !4718
  %tobool33 = icmp ne i8 %call32, 0, !dbg !4718
  br i1 %tobool33, label %lor.lhs.false34, label %if.then, !dbg !4719

lor.lhs.false34:                                  ; preds = %lor.lhs.false
  %23 = load %union.tree_node*, %union.tree_node** %ssa_var, align 8, !dbg !4720
  %ssa_name35 = bitcast %union.tree_node* %23 to %struct.tree_ssa_name*, !dbg !4720
  %def_stmt36 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name35, i32 0, i32 2, !dbg !4720
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt36, align 8, !dbg !4720
  %call37 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %24), !dbg !4721
  %tobool38 = icmp ne i8 %call37, 0, !dbg !4721
  br i1 %tobool38, label %if.end, label %if.then, !dbg !4722

if.then:                                          ; preds = %lor.lhs.false34, %lor.lhs.false, %cond.end28
  br label %for.inc, !dbg !4723

if.end:                                           ; preds = %lor.lhs.false34
  %25 = load %union.tree_node*, %union.tree_node** %ssa_var, align 8, !dbg !4724
  %ssa_name39 = bitcast %union.tree_node* %25 to %struct.tree_ssa_name*, !dbg !4724
  %def_stmt40 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name39, i32 0, i32 2, !dbg !4724
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt40, align 8, !dbg !4724
  %call41 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %26), !dbg !4725
  store %union.tree_node* %call41, %union.tree_node** %rhs, align 8, !dbg !4726
  %27 = load %union.tree_node*, %union.tree_node** %ssa_var, align 8, !dbg !4727
  %ssa_name42 = bitcast %union.tree_node* %27 to %struct.tree_ssa_name*, !dbg !4727
  %def_stmt43 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name42, i32 0, i32 2, !dbg !4727
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt43, align 8, !dbg !4727
  %call44 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %28), !dbg !4728
  store %union.tree_node* %call44, %union.tree_node** %lhs, align 8, !dbg !4729
  %29 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4730
  %base45 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !4730
  %30 = bitcast %struct.tree_base* %base45 to i64*, !dbg !4730
  %bf.load = load i64, i64* %30, align 8, !dbg !4730
  %bf.clear = and i64 %bf.load, 65535, !dbg !4730
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4730
  %cmp46 = icmp ne i32 %bf.cast, 32, !dbg !4732
  br i1 %cmp46, label %land.lhs.true, label %if.end53, !dbg !4733

land.lhs.true:                                    ; preds = %if.end
  %31 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4734
  %base47 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !4734
  %32 = bitcast %struct.tree_base* %base47 to i64*, !dbg !4734
  %bf.load48 = load i64, i64* %32, align 8, !dbg !4734
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !4734
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !4734
  %cmp51 = icmp ne i32 %bf.cast50, 32, !dbg !4735
  br i1 %cmp51, label %if.then52, label %if.end53, !dbg !4736

if.then52:                                        ; preds = %land.lhs.true
  br label %for.inc, !dbg !4737

if.end53:                                         ; preds = %land.lhs.true, %if.end
  %33 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4738
  %decl = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %tmpmi, i32 0, i32 0, !dbg !4739
  store %union.tree_node* %33, %union.tree_node** %decl, align 8, !dbg !4740
  %34 = load %struct.htab*, %struct.htab** @matrices_to_reorg, align 8, !dbg !4741
  %35 = bitcast %struct.matrix_info* %tmpmi to i8*, !dbg !4743
  %call54 = call i8* @htab_find(%struct.htab* %34, i8* %35), !dbg !4744
  %36 = bitcast i8* %call54 to %struct.matrix_info*, !dbg !4745
  store %struct.matrix_info* %36, %struct.matrix_info** %mi, align 8, !dbg !4746
  %tobool55 = icmp ne %struct.matrix_info* %36, null, !dbg !4746
  br i1 %tobool55, label %if.then56, label %if.end57, !dbg !4747

if.then56:                                        ; preds = %if.end53
  %37 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited_stmts_1, align 8, !dbg !4748
  call void @sbitmap_zero(%struct.simple_bitmap_def* %37), !dbg !4750
  %38 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4751
  %39 = load %union.tree_node*, %union.tree_node** %ssa_var, align 8, !dbg !4752
  %40 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited_stmts_1, align 8, !dbg !4753
  call void @analyze_matrix_accesses(%struct.matrix_info* %38, %union.tree_node* %39, i32 0, i8 zeroext 0, %struct.simple_bitmap_def* %40, i8 zeroext 1), !dbg !4754
  br label %if.end57, !dbg !4755

if.end57:                                         ; preds = %if.then56, %if.end53
  br label %for.inc, !dbg !4756

for.inc:                                          ; preds = %if.end57, %if.then52, %if.then
  %41 = load i32, i32* %i, align 4, !dbg !4757
  %inc = add i32 %41, 1, !dbg !4757
  store i32 %inc, i32* %i, align 4, !dbg !4757
  br label %for.cond, !dbg !4758, !llvm.loop !4759

for.end:                                          ; preds = %cond.end15
  %42 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited_stmts_1, align 8, !dbg !4761
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %42, i32 0, i32 0, !dbg !4761
  %43 = load i8*, i8** %popcount, align 8, !dbg !4761
  call void @free(i8* %43), !dbg !4761
  %44 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited_stmts_1, align 8, !dbg !4761
  %45 = bitcast %struct.simple_bitmap_def* %44 to i8*, !dbg !4761
  call void @free(i8* %45), !dbg !4761
  ret void, !dbg !4762
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @transform_access_sites(i8** %slot, i8* %data) #0 !dbg !4763 {
entry:
  %retval = alloca i32, align 4
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %mi = alloca %struct.matrix_info*, align 8
  %min_escape_l = alloca i32, align 4
  %acc_info = alloca %struct.access_site_info*, align 8
  %code = alloca i32, align 4
  %i = alloca i32, align 4
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %def = alloca %union.tree_node*, align 8
  %stmt15 = alloca %union.gimple_statement_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %imm_iter = alloca %struct.immediate_use_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %use_stmt = alloca %union.gimple_statement_d*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %tmp50 = alloca %union.tree_node*, align 8
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  %tmp67 = alloca %struct.gimple_stmt_iterator, align 8
  %t = alloca %union.tree_node*, align 8
  %imm_iter108 = alloca %struct.immediate_use_iterator_d, align 8
  %use_p109 = alloca %struct.ssa_use_operand_d*, align 8
  %offset = alloca %union.tree_node*, align 8
  %k = alloca i32, align 4
  %num_elements = alloca %union.tree_node*, align 8
  %total_elements = alloca %union.tree_node*, align 8
  %tmp1 = alloca %union.tree_node*, align 8
  %d_size = alloca %union.tree_node*, align 8
  %new_offset = alloca %union.tree_node*, align 8
  %tmp133 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp151 = alloca %struct.gimple_stmt_iterator, align 8
  %use_stmt165 = alloca %union.gimple_statement_d*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !4764, metadata !DIExpression()), !dbg !4765
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4766, metadata !DIExpression()), !dbg !4767
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4768, metadata !DIExpression()), !dbg !4769
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %mi, metadata !4770, metadata !DIExpression()), !dbg !4771
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !4772
  %1 = load i8*, i8** %0, align 8, !dbg !4773
  %2 = bitcast i8* %1 to %struct.matrix_info*, !dbg !4774
  store %struct.matrix_info* %2, %struct.matrix_info** %mi, align 8, !dbg !4771
  call void @llvm.dbg.declare(metadata i32* %min_escape_l, metadata !4775, metadata !DIExpression()), !dbg !4776
  %3 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4777
  %min_indirect_level_escape = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %3, i32 0, i32 2, !dbg !4778
  %4 = load i32, i32* %min_indirect_level_escape, align 4, !dbg !4778
  store i32 %4, i32* %min_escape_l, align 4, !dbg !4776
  call void @llvm.dbg.declare(metadata %struct.access_site_info** %acc_info, metadata !4779, metadata !DIExpression()), !dbg !4780
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4781, metadata !DIExpression()), !dbg !4782
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4783, metadata !DIExpression()), !dbg !4784
  %5 = load i32, i32* %min_escape_l, align 4, !dbg !4785
  %cmp = icmp slt i32 %5, 2, !dbg !4787
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4788

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4789
  %access_l = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %6, i32 0, i32 14, !dbg !4790
  %7 = load %struct.VEC_access_site_info_p_heap*, %struct.VEC_access_site_info_p_heap** %access_l, align 8, !dbg !4790
  %tobool = icmp ne %struct.VEC_access_site_info_p_heap* %7, null, !dbg !4789
  br i1 %tobool, label %if.end, label %if.then, !dbg !4791

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 1, i32* %retval, align 4, !dbg !4792
  br label %return, !dbg !4792

if.end:                                           ; preds = %lor.lhs.false
  store i32 0, i32* %i, align 4, !dbg !4793
  br label %for.cond, !dbg !4795

for.cond:                                         ; preds = %for.inc206, %if.end
  %8 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4796
  %access_l1 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %8, i32 0, i32 14, !dbg !4796
  %9 = load %struct.VEC_access_site_info_p_heap*, %struct.VEC_access_site_info_p_heap** %access_l1, align 8, !dbg !4796
  %tobool2 = icmp ne %struct.VEC_access_site_info_p_heap* %9, null, !dbg !4796
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !4796

cond.true:                                        ; preds = %for.cond
  %10 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4796
  %access_l3 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %10, i32 0, i32 14, !dbg !4796
  %11 = load %struct.VEC_access_site_info_p_heap*, %struct.VEC_access_site_info_p_heap** %access_l3, align 8, !dbg !4796
  %base = getelementptr inbounds %struct.VEC_access_site_info_p_heap, %struct.VEC_access_site_info_p_heap* %11, i32 0, i32 0, !dbg !4796
  br label %cond.end, !dbg !4796

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4796

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_access_site_info_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4796
  %12 = load i32, i32* %i, align 4, !dbg !4796
  %call = call i32 @VEC_access_site_info_p_base_iterate(%struct.VEC_access_site_info_p_base* %cond, i32 %12, %struct.access_site_info** %acc_info), !dbg !4796
  %tobool4 = icmp ne i32 %call, 0, !dbg !4798
  br i1 %tobool4, label %for.body, label %for.end207, !dbg !4798

for.body:                                         ; preds = %cond.end
  %13 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4799
  %level = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %13, i32 0, i32 3, !dbg !4802
  %14 = load i32, i32* %level, align 8, !dbg !4802
  %15 = load i32, i32* %min_escape_l, align 4, !dbg !4803
  %cmp5 = icmp sge i32 %14, %15, !dbg !4804
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !4805

if.then6:                                         ; preds = %for.body
  %16 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4806
  %17 = bitcast %struct.access_site_info* %16 to i8*, !dbg !4806
  call void @free(i8* %17), !dbg !4808
  br label %for.inc206, !dbg !4809

if.end7:                                          ; preds = %for.body
  %18 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4810
  %is_alloc = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %18, i32 0, i32 4, !dbg !4812
  %19 = load i8, i8* %is_alloc, align 4, !dbg !4812
  %tobool8 = icmp ne i8 %19, 0, !dbg !4810
  br i1 %tobool8, label %if.then9, label %if.end82, !dbg !4813

if.then9:                                         ; preds = %if.end7
  %20 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4814
  %level10 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %20, i32 0, i32 3, !dbg !4817
  %21 = load i32, i32* %level10, align 8, !dbg !4817
  %cmp11 = icmp sge i32 %21, 0, !dbg !4818
  br i1 %cmp11, label %land.lhs.true, label %if.end81, !dbg !4819

land.lhs.true:                                    ; preds = %if.then9
  %22 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4820
  %stmt = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %22, i32 0, i32 0, !dbg !4821
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4821
  %call12 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %23), !dbg !4822
  %tobool13 = icmp ne %struct.basic_block_def* %call12, null, !dbg !4822
  br i1 %tobool13, label %if.then14, label %if.end81, !dbg !4823

if.then14:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !4824, metadata !DIExpression()), !dbg !4838
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !4839, metadata !DIExpression()), !dbg !4840
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt15, metadata !4841, metadata !DIExpression()), !dbg !4842
  %24 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4843
  %stmt16 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %24, i32 0, i32 0, !dbg !4844
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt16, align 8, !dbg !4844
  store %union.gimple_statement_d* %25, %union.gimple_statement_d** %stmt15, align 8, !dbg !4842
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !4845, metadata !DIExpression()), !dbg !4846
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt15, align 8, !dbg !4847
  %call17 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %26, i32 2), !dbg !4847
  store %union.tree_node* %call17, %union.tree_node** %def, align 8, !dbg !4847
  br label %for.cond18, !dbg !4847

for.cond18:                                       ; preds = %for.inc, %if.then14
  %call19 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !4849
  %tobool20 = icmp ne i8 %call19, 0, !dbg !4849
  %lnot = xor i1 %tobool20, true, !dbg !4849
  br i1 %lnot, label %for.body21, label %for.end, !dbg !4847

for.body21:                                       ; preds = %for.cond18
  %27 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4851
  %ssa_name = bitcast %union.tree_node* %27 to %struct.tree_ssa_name*, !dbg !4851
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !4851
  %28 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4851
  call void @mark_sym_for_renaming(%union.tree_node* %28), !dbg !4852
  br label %for.inc, !dbg !4852

for.inc:                                          ; preds = %for.body21
  %call22 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !4849
  store %union.tree_node* %call22, %union.tree_node** %def, align 8, !dbg !4849
  br label %for.cond18, !dbg !4849, !llvm.loop !4853

for.end:                                          ; preds = %for.cond18
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt15, align 8, !dbg !4855
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %29), !dbg !4856
  %30 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4856
  %31 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4856
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 24, i1 false), !dbg !4856
  %32 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4857
  %stmt23 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %32, i32 0, i32 0, !dbg !4857
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt23, align 8, !dbg !4857
  %call24 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %33), !dbg !4857
  %tobool25 = icmp ne i8 %call24, 0, !dbg !4857
  br i1 %tobool25, label %cond.false27, label %cond.true26, !dbg !4857

cond.true26:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 1843, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4857
  br label %cond.end28, !dbg !4857

cond.false27:                                     ; preds = %for.end
  br label %cond.end28, !dbg !4857

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond29 = phi i32 [ 0, %cond.true26 ], [ 0, %cond.false27 ], !dbg !4857
  %34 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4858
  %stmt30 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %34, i32 0, i32 0, !dbg !4859
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt30, align 8, !dbg !4859
  %call31 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %35), !dbg !4860
  store %union.tree_node* %call31, %union.tree_node** %lhs, align 8, !dbg !4861
  %36 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4862
  %base32 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !4862
  %37 = bitcast %struct.tree_base* %base32 to i64*, !dbg !4862
  %bf.load = load i64, i64* %37, align 8, !dbg !4862
  %bf.clear = and i64 %bf.load, 65535, !dbg !4862
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4862
  %cmp33 = icmp eq i32 %bf.cast, 141, !dbg !4864
  br i1 %cmp33, label %land.lhs.true34, label %if.end75, !dbg !4865

land.lhs.true34:                                  ; preds = %cond.end28
  %38 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4866
  %level35 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %38, i32 0, i32 3, !dbg !4867
  %39 = load i32, i32* %level35, align 8, !dbg !4867
  %40 = load i32, i32* %min_escape_l, align 4, !dbg !4868
  %sub = sub nsw i32 %40, 1, !dbg !4869
  %cmp36 = icmp slt i32 %39, %sub, !dbg !4870
  br i1 %cmp36, label %if.then37, label %if.end75, !dbg !4871

if.then37:                                        ; preds = %land.lhs.true34
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %imm_iter, metadata !4872, metadata !DIExpression()), !dbg !4874
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !4875, metadata !DIExpression()), !dbg !4876
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt, metadata !4877, metadata !DIExpression()), !dbg !4878
  %41 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4879
  %call38 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter, %union.tree_node* %41), !dbg !4879
  store %union.gimple_statement_d* %call38, %union.gimple_statement_d** %use_stmt, align 8, !dbg !4879
  br label %for.cond39, !dbg !4879

for.cond39:                                       ; preds = %for.inc72, %if.then37
  %call40 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !4881
  %tobool41 = icmp ne i8 %call40, 0, !dbg !4881
  %lnot42 = xor i1 %tobool41, true, !dbg !4881
  br i1 %lnot42, label %for.body43, label %for.end74, !dbg !4879

for.body43:                                       ; preds = %for.cond39
  %call44 = call %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !4883
  store %struct.ssa_use_operand_d* %call44, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4883
  br label %for.cond45, !dbg !4883

for.cond45:                                       ; preds = %for.inc69, %for.body43
  %call46 = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !4885
  %tobool47 = icmp ne i8 %call46, 0, !dbg !4885
  %lnot48 = xor i1 %tobool47, true, !dbg !4885
  br i1 %lnot48, label %for.body49, label %for.end71, !dbg !4883

for.body49:                                       ; preds = %for.cond45
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !4887, metadata !DIExpression()), !dbg !4889
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp50, metadata !4890, metadata !DIExpression()), !dbg !4891
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !4892, metadata !DIExpression()), !dbg !4893
  %42 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4894
  %stmt51 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %42, i32 0, i32 0, !dbg !4894
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt51, align 8, !dbg !4894
  %call52 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %43), !dbg !4894
  %cmp53 = icmp eq i32 %call52, 47, !dbg !4894
  br i1 %cmp53, label %cond.false55, label %cond.true54, !dbg !4894

cond.true54:                                      ; preds = %for.body49
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 1859, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4894
  br label %cond.end56, !dbg !4894

cond.false55:                                     ; preds = %for.body49
  br label %cond.end56, !dbg !4894

cond.end56:                                       ; preds = %cond.false55, %cond.true54
  %cond57 = phi i32 [ 0, %cond.true54 ], [ 0, %cond.false55 ], !dbg !4894
  %44 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4895
  %common = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !4895
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4895
  %45 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4895
  %call58 = call %union.tree_node* @create_tmp_var(%union.tree_node* %45, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i64 0, i64 0)), !dbg !4896
  store %union.tree_node* %call58, %union.tree_node** %tmp50, align 8, !dbg !4897
  %46 = load %union.tree_node*, %union.tree_node** %tmp50, align 8, !dbg !4898
  %call59 = call zeroext i8 @add_referenced_var(%union.tree_node* %46), !dbg !4899
  %47 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4900
  %stmt60 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %47, i32 0, i32 0, !dbg !4901
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt60, align 8, !dbg !4901
  %call61 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %48), !dbg !4902
  store %union.tree_node* %call61, %union.tree_node** %rhs, align 8, !dbg !4903
  %49 = load %union.tree_node*, %union.tree_node** %tmp50, align 8, !dbg !4904
  %common62 = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !4904
  %type63 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common62, i32 0, i32 2, !dbg !4904
  %50 = load %union.tree_node*, %union.tree_node** %type63, align 8, !dbg !4904
  %51 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4904
  %exp = bitcast %union.tree_node* %51 to %struct.tree_exp*, !dbg !4904
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4904
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4904
  %52 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4904
  %call64 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %50, %union.tree_node* %52), !dbg !4904
  store %union.tree_node* %call64, %union.tree_node** %rhs, align 8, !dbg !4905
  %53 = load %union.tree_node*, %union.tree_node** %tmp50, align 8, !dbg !4906
  %54 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4906
  %call65 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %53, %union.tree_node* %54), !dbg !4906
  store %union.gimple_statement_d* %call65, %union.gimple_statement_d** %new_stmt, align 8, !dbg !4907
  %55 = load %union.tree_node*, %union.tree_node** %tmp50, align 8, !dbg !4908
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !4909
  %call66 = call %union.tree_node* @make_ssa_name(%union.tree_node* %55, %union.gimple_statement_d* %56), !dbg !4910
  store %union.tree_node* %call66, %union.tree_node** %tmp50, align 8, !dbg !4911
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !4912
  %58 = load %union.tree_node*, %union.tree_node** %tmp50, align 8, !dbg !4913
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %57, %union.tree_node* %58), !dbg !4914
  %59 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4915
  %stmt68 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %59, i32 0, i32 0, !dbg !4916
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt68, align 8, !dbg !4916
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp67, %union.gimple_statement_d* %60), !dbg !4917
  %61 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4917
  %62 = bitcast %struct.gimple_stmt_iterator* %tmp67 to i8*, !dbg !4917
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 24, i1 false), !dbg !4917
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !4918
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %63, i32 1), !dbg !4919
  %64 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4920
  %65 = load %union.tree_node*, %union.tree_node** %tmp50, align 8, !dbg !4920
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %64, %union.tree_node* %65), !dbg !4920
  br label %for.inc69, !dbg !4921

for.inc69:                                        ; preds = %cond.end56
  %call70 = call %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !4885
  store %struct.ssa_use_operand_d* %call70, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !4885
  br label %for.cond45, !dbg !4885, !llvm.loop !4922

for.end71:                                        ; preds = %for.cond45
  br label %for.inc72, !dbg !4923

for.inc72:                                        ; preds = %for.end71
  %call73 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !4881
  store %union.gimple_statement_d* %call73, %union.gimple_statement_d** %use_stmt, align 8, !dbg !4881
  br label %for.cond39, !dbg !4881, !llvm.loop !4924

for.end74:                                        ; preds = %for.cond39
  br label %if.end75, !dbg !4926

if.end75:                                         ; preds = %for.end74, %land.lhs.true34, %cond.end28
  %66 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4927
  %level76 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %66, i32 0, i32 3, !dbg !4929
  %67 = load i32, i32* %level76, align 8, !dbg !4929
  %68 = load i32, i32* %min_escape_l, align 4, !dbg !4930
  %sub77 = sub nsw i32 %68, 1, !dbg !4931
  %cmp78 = icmp slt i32 %67, %sub77, !dbg !4932
  br i1 %cmp78, label %if.then79, label %if.end80, !dbg !4933

if.then79:                                        ; preds = %if.end75
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !4934
  br label %if.end80, !dbg !4934

if.end80:                                         ; preds = %if.then79, %if.end75
  br label %if.end81, !dbg !4935

if.end81:                                         ; preds = %if.end80, %land.lhs.true, %if.then9
  %69 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4936
  %70 = bitcast %struct.access_site_info* %69 to i8*, !dbg !4936
  call void @free(i8* %70), !dbg !4937
  br label %for.inc206, !dbg !4938

if.end82:                                         ; preds = %if.end7
  %71 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4939
  %stmt83 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %71, i32 0, i32 0, !dbg !4940
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt83, align 8, !dbg !4940
  %call84 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %72), !dbg !4941
  store i32 %call84, i32* %code, align 4, !dbg !4942
  %73 = load i32, i32* %code, align 4, !dbg !4943
  %cmp85 = icmp eq i32 %73, 47, !dbg !4945
  br i1 %cmp85, label %land.lhs.true86, label %if.else, !dbg !4946

land.lhs.true86:                                  ; preds = %if.end82
  %74 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4947
  %level87 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %74, i32 0, i32 3, !dbg !4948
  %75 = load i32, i32* %level87, align 8, !dbg !4948
  %76 = load i32, i32* %min_escape_l, align 4, !dbg !4949
  %sub88 = sub nsw i32 %76, 1, !dbg !4950
  %cmp89 = icmp slt i32 %75, %sub88, !dbg !4951
  br i1 %cmp89, label %if.then90, label %if.else, !dbg !4952

if.then90:                                        ; preds = %land.lhs.true86
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4953, metadata !DIExpression()), !dbg !4955
  %77 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4956
  %stmt91 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %77, i32 0, i32 0, !dbg !4956
  %78 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt91, align 8, !dbg !4956
  %call92 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %78), !dbg !4956
  %common93 = bitcast %union.tree_node* %call92 to %struct.tree_common*, !dbg !4956
  %type94 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common93, i32 0, i32 2, !dbg !4956
  %79 = load %union.tree_node*, %union.tree_node** %type94, align 8, !dbg !4956
  %80 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4956
  %stmt95 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %80, i32 0, i32 0, !dbg !4956
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt95, align 8, !dbg !4956
  %call96 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %81), !dbg !4956
  %exp97 = bitcast %union.tree_node* %call96 to %struct.tree_exp*, !dbg !4956
  %operands98 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp97, i32 0, i32 3, !dbg !4956
  %arrayidx99 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands98, i64 0, i64 0, !dbg !4956
  %82 = load %union.tree_node*, %union.tree_node** %arrayidx99, align 8, !dbg !4956
  %call100 = call %union.tree_node* @build1_stat(i32 116, %union.tree_node* %79, %union.tree_node* %82), !dbg !4956
  store %union.tree_node* %call100, %union.tree_node** %t, align 8, !dbg !4955
  %83 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4957
  %stmt101 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %83, i32 0, i32 0, !dbg !4958
  %84 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt101, align 8, !dbg !4958
  call void @gimple_assign_set_rhs_code(%union.gimple_statement_d* %84, i32 116), !dbg !4959
  %85 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4960
  %stmt102 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %85, i32 0, i32 0, !dbg !4961
  %86 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt102, align 8, !dbg !4961
  %87 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4962
  call void @gimple_assign_set_rhs1(%union.gimple_statement_d* %86, %union.tree_node* %87), !dbg !4963
  br label %if.end205, !dbg !4964

if.else:                                          ; preds = %land.lhs.true86, %if.end82
  %88 = load i32, i32* %code, align 4, !dbg !4965
  %cmp103 = icmp eq i32 %88, 66, !dbg !4967
  br i1 %cmp103, label %land.lhs.true104, label %if.end204, !dbg !4968

land.lhs.true104:                                 ; preds = %if.else
  %89 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4969
  %level105 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %89, i32 0, i32 3, !dbg !4970
  %90 = load i32, i32* %level105, align 8, !dbg !4970
  %91 = load i32, i32* %min_escape_l, align 4, !dbg !4971
  %cmp106 = icmp slt i32 %90, %91, !dbg !4972
  br i1 %cmp106, label %if.then107, label %if.end204, !dbg !4973

if.then107:                                       ; preds = %land.lhs.true104
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %imm_iter108, metadata !4974, metadata !DIExpression()), !dbg !4976
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p109, metadata !4977, metadata !DIExpression()), !dbg !4978
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset, metadata !4979, metadata !DIExpression()), !dbg !4980
  call void @llvm.dbg.declare(metadata i32* %k, metadata !4981, metadata !DIExpression()), !dbg !4982
  %92 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4983
  %level110 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %92, i32 0, i32 3, !dbg !4984
  %93 = load i32, i32* %level110, align 8, !dbg !4984
  store i32 %93, i32* %k, align 4, !dbg !4982
  call void @llvm.dbg.declare(metadata %union.tree_node** %num_elements, metadata !4985, metadata !DIExpression()), !dbg !4986
  call void @llvm.dbg.declare(metadata %union.tree_node** %total_elements, metadata !4987, metadata !DIExpression()), !dbg !4988
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp1, metadata !4989, metadata !DIExpression()), !dbg !4990
  call void @llvm.dbg.declare(metadata %union.tree_node** %d_size, metadata !4991, metadata !DIExpression()), !dbg !4992
  %94 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4993
  %dimension_size = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %94, i32 0, i32 9, !dbg !4994
  %95 = load %union.tree_node**, %union.tree_node*** %dimension_size, align 8, !dbg !4994
  %96 = load i32, i32* %k, align 4, !dbg !4995
  %idxprom = sext i32 %96 to i64, !dbg !4993
  %arrayidx111 = getelementptr inbounds %union.tree_node*, %union.tree_node** %95, i64 %idxprom, !dbg !4993
  %97 = load %union.tree_node*, %union.tree_node** %arrayidx111, align 8, !dbg !4993
  store %union.tree_node* %97, %union.tree_node** %d_size, align 8, !dbg !4992
  %98 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !4996
  %offset112 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %98, i32 0, i32 1, !dbg !4997
  %99 = load %union.tree_node*, %union.tree_node** %offset112, align 8, !dbg !4997
  store %union.tree_node* %99, %union.tree_node** %offset, align 8, !dbg !4998
  %100 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !4999
  %dim_map = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %100, i32 0, i32 15, !dbg !5001
  %101 = load i32*, i32** %dim_map, align 8, !dbg !5001
  %102 = load i32, i32* %k, align 4, !dbg !5002
  %idxprom113 = sext i32 %102 to i64, !dbg !4999
  %arrayidx114 = getelementptr inbounds i32, i32* %101, i64 %idxprom113, !dbg !4999
  %103 = load i32, i32* %arrayidx114, align 4, !dbg !4999
  %104 = load i32, i32* %min_escape_l, align 4, !dbg !5003
  %sub115 = sub nsw i32 %104, 1, !dbg !5004
  %cmp116 = icmp eq i32 %103, %sub115, !dbg !5005
  br i1 %cmp116, label %if.then117, label %if.else139, !dbg !5006

if.then117:                                       ; preds = %if.then107
  %105 = load i8, i8* @check_transpose_p, align 1, !dbg !5007
  %tobool118 = icmp ne i8 %105, 0, !dbg !5007
  br i1 %tobool118, label %lor.lhs.false119, label %if.then122, !dbg !5010

lor.lhs.false119:                                 ; preds = %if.then117
  %106 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !5011
  %is_transposed_p = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %106, i32 0, i32 6, !dbg !5012
  %107 = load i8, i8* %is_transposed_p, align 4, !dbg !5012
  %conv = zext i8 %107 to i32, !dbg !5011
  %cmp120 = icmp eq i32 %conv, 0, !dbg !5013
  br i1 %cmp120, label %if.then122, label %if.else123, !dbg !5014

if.then122:                                       ; preds = %lor.lhs.false119, %if.then117
  %108 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !5015
  store %union.tree_node* %108, %union.tree_node** %tmp1, align 8, !dbg !5016
  br label %if.end138, !dbg !5017

if.else123:                                       ; preds = %lor.lhs.false119
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_offset, metadata !5018, metadata !DIExpression()), !dbg !5020
  %109 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !5021
  %dimension_type_size = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %109, i32 0, i32 11, !dbg !5022
  %110 = load i64*, i64** %dimension_type_size, align 8, !dbg !5022
  %111 = load i32, i32* %min_escape_l, align 4, !dbg !5023
  %idxprom124 = sext i32 %111 to i64, !dbg !5021
  %arrayidx125 = getelementptr inbounds i64, i64* %110, i64 %idxprom124, !dbg !5021
  %112 = load i64, i64* %arrayidx125, align 8, !dbg !5021
  %113 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !5024
  %dimension_type_size126 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %113, i32 0, i32 11, !dbg !5025
  %114 = load i64*, i64** %dimension_type_size126, align 8, !dbg !5025
  %115 = load i32, i32* %k, align 4, !dbg !5026
  %add = add nsw i32 %115, 1, !dbg !5027
  %idxprom127 = sext i32 %add to i64, !dbg !5024
  %arrayidx128 = getelementptr inbounds i64, i64* %114, i64 %idxprom127, !dbg !5024
  %116 = load i64, i64* %arrayidx128, align 8, !dbg !5024
  %117 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !5028
  %call129 = call %union.tree_node* @compute_offset(i64 %112, i64 %116, %union.tree_node* %117), !dbg !5029
  store %union.tree_node* %call129, %union.tree_node** %new_offset, align 8, !dbg !5030
  %118 = load %union.tree_node*, %union.tree_node** %new_offset, align 8, !dbg !5031
  store %union.tree_node* %118, %union.tree_node** %total_elements, align 8, !dbg !5032
  %119 = load %union.tree_node*, %union.tree_node** %new_offset, align 8, !dbg !5033
  %120 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !5035
  %cmp130 = icmp ne %union.tree_node* %119, %120, !dbg !5036
  br i1 %cmp130, label %if.then132, label %if.else136, !dbg !5037

if.then132:                                       ; preds = %if.else123
  %121 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !5038
  %stmt134 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %121, i32 0, i32 0, !dbg !5040
  %122 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt134, align 8, !dbg !5040
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp133, %union.gimple_statement_d* %122), !dbg !5041
  %123 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5041
  %124 = bitcast %struct.gimple_stmt_iterator* %tmp133 to i8*, !dbg !5041
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %123, i8* align 8 %124, i64 24, i1 false), !dbg !5041
  %125 = load %union.tree_node*, %union.tree_node** %total_elements, align 8, !dbg !5042
  %call135 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %125, i8 zeroext 1, %union.tree_node* null, i8 zeroext 1, i32 1), !dbg !5043
  store %union.tree_node* %call135, %union.tree_node** %tmp1, align 8, !dbg !5044
  br label %if.end137, !dbg !5045

if.else136:                                       ; preds = %if.else123
  %126 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !5046
  store %union.tree_node* %126, %union.tree_node** %tmp1, align 8, !dbg !5047
  br label %if.end137

if.end137:                                        ; preds = %if.else136, %if.then132
  br label %if.end138

if.end138:                                        ; preds = %if.end137, %if.then122
  br label %if.end154, !dbg !5048

if.else139:                                       ; preds = %if.then107
  %127 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !5049
  %dimension_size140 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %127, i32 0, i32 9, !dbg !5051
  %128 = load %union.tree_node**, %union.tree_node*** %dimension_size140, align 8, !dbg !5051
  %129 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !5052
  %dim_map141 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %129, i32 0, i32 15, !dbg !5053
  %130 = load i32*, i32** %dim_map141, align 8, !dbg !5053
  %131 = load i32, i32* %k, align 4, !dbg !5054
  %idxprom142 = sext i32 %131 to i64, !dbg !5052
  %arrayidx143 = getelementptr inbounds i32, i32* %130, i64 %idxprom142, !dbg !5052
  %132 = load i32, i32* %arrayidx143, align 4, !dbg !5052
  %add144 = add nsw i32 %132, 1, !dbg !5055
  %idxprom145 = sext i32 %add144 to i64, !dbg !5049
  %arrayidx146 = getelementptr inbounds %union.tree_node*, %union.tree_node** %128, i64 %idxprom145, !dbg !5049
  %133 = load %union.tree_node*, %union.tree_node** %arrayidx146, align 8, !dbg !5049
  store %union.tree_node* %133, %union.tree_node** %d_size, align 8, !dbg !5056
  %134 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5057
  %135 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5057
  %136 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !5057
  %index = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %136, i32 0, i32 2, !dbg !5057
  %137 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !5057
  %call147 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %135, %union.tree_node* %137), !dbg !5057
  %138 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5057
  %139 = load %union.tree_node*, %union.tree_node** %d_size, align 8, !dbg !5057
  %call148 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %138, %union.tree_node* %139), !dbg !5057
  %call149 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 65, %union.tree_node* %134, %union.tree_node* %call147, %union.tree_node* %call148), !dbg !5057
  store %union.tree_node* %call149, %union.tree_node** %num_elements, align 8, !dbg !5058
  %140 = load %union.tree_node*, %union.tree_node** %d_size, align 8, !dbg !5059
  %call150 = call zeroext i8 @add_referenced_var(%union.tree_node* %140), !dbg !5060
  %141 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !5061
  %stmt152 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %141, i32 0, i32 0, !dbg !5062
  %142 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt152, align 8, !dbg !5062
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp151, %union.gimple_statement_d* %142), !dbg !5063
  %143 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5063
  %144 = bitcast %struct.gimple_stmt_iterator* %tmp151 to i8*, !dbg !5063
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %143, i8* align 8 %144, i64 24, i1 false), !dbg !5063
  %145 = load %union.tree_node*, %union.tree_node** %num_elements, align 8, !dbg !5064
  %call153 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %145, i8 zeroext 1, %union.tree_node* null, i8 zeroext 1, i32 1), !dbg !5065
  store %union.tree_node* %call153, %union.tree_node** %tmp1, align 8, !dbg !5066
  br label %if.end154

if.end154:                                        ; preds = %if.else139, %if.end138
  %146 = load %union.tree_node*, %union.tree_node** %tmp1, align 8, !dbg !5067
  %147 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !5069
  %cmp155 = icmp ne %union.tree_node* %146, %147, !dbg !5070
  br i1 %cmp155, label %if.then157, label %if.end203, !dbg !5071

if.then157:                                       ; preds = %if.end154
  %148 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !5072
  %base158 = bitcast %union.tree_node* %148 to %struct.tree_base*, !dbg !5072
  %149 = bitcast %struct.tree_base* %base158 to i64*, !dbg !5072
  %bf.load159 = load i64, i64* %149, align 8, !dbg !5072
  %bf.clear160 = and i64 %bf.load159, 65535, !dbg !5072
  %bf.cast161 = trunc i64 %bf.clear160 to i32, !dbg !5072
  %cmp162 = icmp eq i32 %bf.cast161, 141, !dbg !5075
  br i1 %cmp162, label %if.then164, label %if.else189, !dbg !5076

if.then164:                                       ; preds = %if.then157
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt165, metadata !5077, metadata !DIExpression()), !dbg !5079
  %150 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !5080
  %call166 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter108, %union.tree_node* %150), !dbg !5080
  store %union.gimple_statement_d* %call166, %union.gimple_statement_d** %use_stmt165, align 8, !dbg !5080
  br label %for.cond167, !dbg !5080

for.cond167:                                      ; preds = %for.inc186, %if.then164
  %call168 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm_iter108), !dbg !5082
  %tobool169 = icmp ne i8 %call168, 0, !dbg !5082
  %lnot170 = xor i1 %tobool169, true, !dbg !5082
  br i1 %lnot170, label %for.body171, label %for.end188, !dbg !5080

for.body171:                                      ; preds = %for.cond167
  %call172 = call %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm_iter108), !dbg !5084
  store %struct.ssa_use_operand_d* %call172, %struct.ssa_use_operand_d** %use_p109, align 8, !dbg !5084
  br label %for.cond173, !dbg !5084

for.cond173:                                      ; preds = %for.inc183, %for.body171
  %call174 = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm_iter108), !dbg !5086
  %tobool175 = icmp ne i8 %call174, 0, !dbg !5086
  %lnot176 = xor i1 %tobool175, true, !dbg !5086
  br i1 %lnot176, label %for.body177, label %for.end185, !dbg !5084

for.body177:                                      ; preds = %for.cond173
  %151 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt165, align 8, !dbg !5088
  %152 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !5090
  %stmt178 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %152, i32 0, i32 0, !dbg !5091
  %153 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt178, align 8, !dbg !5091
  %cmp179 = icmp eq %union.gimple_statement_d* %151, %153, !dbg !5092
  br i1 %cmp179, label %if.then181, label %if.end182, !dbg !5093

if.then181:                                       ; preds = %for.body177
  %154 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p109, align 8, !dbg !5094
  %155 = load %union.tree_node*, %union.tree_node** %tmp1, align 8, !dbg !5094
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %154, %union.tree_node* %155), !dbg !5094
  br label %if.end182, !dbg !5094

if.end182:                                        ; preds = %if.then181, %for.body177
  br label %for.inc183, !dbg !5091

for.inc183:                                       ; preds = %if.end182
  %call184 = call %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm_iter108), !dbg !5086
  store %struct.ssa_use_operand_d* %call184, %struct.ssa_use_operand_d** %use_p109, align 8, !dbg !5086
  br label %for.cond173, !dbg !5086, !llvm.loop !5095

for.end185:                                       ; preds = %for.cond173
  br label %for.inc186, !dbg !5096

for.inc186:                                       ; preds = %for.end185
  %call187 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter108), !dbg !5082
  store %union.gimple_statement_d* %call187, %union.gimple_statement_d** %use_stmt165, align 8, !dbg !5082
  br label %for.cond167, !dbg !5082, !llvm.loop !5097

for.end188:                                       ; preds = %for.cond167
  br label %if.end202, !dbg !5099

if.else189:                                       ; preds = %if.then157
  %156 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !5100
  %base190 = bitcast %union.tree_node* %156 to %struct.tree_base*, !dbg !5100
  %157 = bitcast %struct.tree_base* %base190 to i64*, !dbg !5100
  %bf.load191 = load i64, i64* %157, align 8, !dbg !5100
  %bf.clear192 = and i64 %bf.load191, 65535, !dbg !5100
  %bf.cast193 = trunc i64 %bf.clear192 to i32, !dbg !5100
  %cmp194 = icmp eq i32 %bf.cast193, 23, !dbg !5100
  br i1 %cmp194, label %cond.false197, label %cond.true196, !dbg !5100

cond.true196:                                     ; preds = %if.else189
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 1956, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5100
  br label %cond.end198, !dbg !5100

cond.false197:                                    ; preds = %if.else189
  br label %cond.end198, !dbg !5100

cond.end198:                                      ; preds = %cond.false197, %cond.true196
  %cond199 = phi i32 [ 0, %cond.true196 ], [ 0, %cond.false197 ], !dbg !5100
  %158 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !5102
  %stmt200 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %158, i32 0, i32 0, !dbg !5103
  %159 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt200, align 8, !dbg !5103
  %160 = load %union.tree_node*, %union.tree_node** %tmp1, align 8, !dbg !5104
  call void @gimple_assign_set_rhs2(%union.gimple_statement_d* %159, %union.tree_node* %160), !dbg !5105
  %161 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !5106
  %stmt201 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %161, i32 0, i32 0, !dbg !5107
  %162 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt201, align 8, !dbg !5107
  call void @update_stmt(%union.gimple_statement_d* %162), !dbg !5108
  br label %if.end202

if.end202:                                        ; preds = %cond.end198, %for.end188
  br label %if.end203, !dbg !5109

if.end203:                                        ; preds = %if.end202, %if.end154
  br label %if.end204, !dbg !5110

if.end204:                                        ; preds = %if.end203, %land.lhs.true104, %if.else
  br label %if.end205

if.end205:                                        ; preds = %if.end204, %if.then90
  %163 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !5111
  %164 = bitcast %struct.access_site_info* %163 to i8*, !dbg !5111
  call void @free(i8* %164), !dbg !5112
  br label %for.inc206, !dbg !5113

for.inc206:                                       ; preds = %if.end205, %if.end81, %if.then6
  %165 = load i32, i32* %i, align 4, !dbg !5114
  %inc = add nsw i32 %165, 1, !dbg !5114
  store i32 %inc, i32* %i, align 4, !dbg !5114
  br label %for.cond, !dbg !5115, !llvm.loop !5116

for.end207:                                       ; preds = %cond.end
  %166 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !5118
  %access_l208 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %166, i32 0, i32 14, !dbg !5118
  call void @VEC_access_site_info_p_heap_free(%struct.VEC_access_site_info_p_heap** %access_l208), !dbg !5118
  call void @update_ssa(i32 2048), !dbg !5119
  store i32 1, i32* %retval, align 4, !dbg !5120
  br label %return, !dbg !5120

return:                                           ; preds = %for.end207, %if.then
  %167 = load i32, i32* %retval, align 4, !dbg !5121
  ret i32 %167, !dbg !5121
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @dump_matrix_reorg_analysis(i8** %slot, i8* %data) #0 !dbg !5122 {
entry:
  %retval = alloca i32, align 4
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %mi = alloca %struct.matrix_info*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !5123, metadata !DIExpression()), !dbg !5124
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5125, metadata !DIExpression()), !dbg !5126
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %mi, metadata !5127, metadata !DIExpression()), !dbg !5128
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !5129
  %1 = load i8*, i8** %0, align 8, !dbg !5130
  %2 = bitcast i8* %1 to %struct.matrix_info*, !dbg !5131
  store %struct.matrix_info* %2, %struct.matrix_info** %mi, align 8, !dbg !5128
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5132
  %tobool = icmp ne %struct._IO_FILE* %3, null, !dbg !5132
  br i1 %tobool, label %if.end, label %if.then, !dbg !5134

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !5135
  br label %return, !dbg !5135

if.end:                                           ; preds = %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5136
  %5 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !5137
  %decl = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %5, i32 0, i32 0, !dbg !5138
  %6 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5138
  %call = call i8* @get_name(%union.tree_node* %6), !dbg !5139
  %7 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !5140
  %min_indirect_level_escape = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %7, i32 0, i32 2, !dbg !5141
  %8 = load i32, i32* %min_indirect_level_escape, align 4, !dbg !5141
  %9 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !5142
  %num_dims = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %9, i32 0, i32 1, !dbg !5143
  %10 = load i32, i32* %num_dims, align 8, !dbg !5143
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.16, i64 0, i64 0), i8* %call, i32 %8, i32 %10), !dbg !5144
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5145
  %12 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !5146
  %max_malloced_level = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %12, i32 0, i32 5, !dbg !5147
  %13 = load i32, i32* %max_malloced_level, align 8, !dbg !5147
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i64 0, i64 0), i32 %13), !dbg !5148
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5149
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i64 0, i64 0)), !dbg !5150
  %15 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !5151
  %min_indirect_level_escape4 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %15, i32 0, i32 2, !dbg !5153
  %16 = load i32, i32* %min_indirect_level_escape4, align 4, !dbg !5153
  %cmp = icmp sge i32 %16, 2, !dbg !5154
  br i1 %cmp, label %if.then5, label %if.end8, !dbg !5155

if.then5:                                         ; preds = %if.end
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5156
  %18 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !5157
  %min_indirect_level_escape6 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %18, i32 0, i32 2, !dbg !5158
  %19 = load i32, i32* %min_indirect_level_escape6, align 4, !dbg !5158
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.19, i64 0, i64 0), i32 %19), !dbg !5159
  br label %if.end8, !dbg !5159

if.end8:                                          ; preds = %if.then5, %if.end
  store i32 1, i32* %retval, align 4, !dbg !5160
  br label %return, !dbg !5160

return:                                           ; preds = %if.end8, %if.then
  %20 = load i32, i32* %retval, align 4, !dbg !5161
  ret i32 %20, !dbg !5161
}

declare dso_local void @set_cfun(%struct.function*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !5162 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5165, metadata !DIExpression()), !dbg !5166
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !5167, metadata !DIExpression()), !dbg !5168
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !5169, metadata !DIExpression()), !dbg !5170
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5171
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !5172
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !5173
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5174
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !5175
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !5176
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5177
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5178
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !5179
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !5180
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5181
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !5182
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !5183
  ret void, !dbg !5184
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5185 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5188, metadata !DIExpression()), !dbg !5189
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5190
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5190
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !5191
  %conv = zext i1 %cmp to i32, !dbg !5191
  %conv1 = trunc i32 %conv to i8, !dbg !5192
  ret i8 %conv1, !dbg !5193
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @may_flatten_matrices_1(%union.gimple_statement_d* %stmt) #0 !dbg !5194 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %t = alloca %union.tree_node*, align 8
  %pointee = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5197, metadata !DIExpression()), !dbg !5198
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5199, metadata !DIExpression()), !dbg !5200
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5201
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5202
  switch i32 %call, label %sw.default [
    i32 6, label %sw.bb
    i32 7, label %sw.bb55
  ], !dbg !5203

sw.bb:                                            ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5204
  %call1 = call zeroext i8 @gimple_assign_cast_p(%union.gimple_statement_d* %1), !dbg !5207
  %tobool = icmp ne i8 %call1, 0, !dbg !5207
  br i1 %tobool, label %if.end, label %if.then, !dbg !5208

if.then:                                          ; preds = %sw.bb
  store i8 1, i8* %retval, align 1, !dbg !5209
  br label %return, !dbg !5209

if.end:                                           ; preds = %sw.bb
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5210
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !5211
  store %union.tree_node* %call2, %union.tree_node** %t, align 8, !dbg !5212
  br label %while.cond, !dbg !5213

while.cond:                                       ; preds = %if.end53, %if.end
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5214
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5214
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !5214
  %bf.load = load i64, i64* %4, align 8, !dbg !5214
  %bf.clear = and i64 %bf.load, 65535, !dbg !5214
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5214
  %cmp = icmp eq i32 %bf.cast, 116, !dbg !5214
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !5214

lor.rhs:                                          ; preds = %while.cond
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5214
  %base3 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !5214
  %6 = bitcast %struct.tree_base* %base3 to i64*, !dbg !5214
  %bf.load4 = load i64, i64* %6, align 8, !dbg !5214
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !5214
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !5214
  %cmp7 = icmp eq i32 %bf.cast6, 113, !dbg !5214
  br label %lor.end, !dbg !5214

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %7 = phi i1 [ true, %while.cond ], [ %cmp7, %lor.rhs ]
  br i1 %7, label %while.body, label %while.end54, !dbg !5213

while.body:                                       ; preds = %lor.end
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5215
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !5215
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5215
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5215
  %tobool8 = icmp ne %union.tree_node* %9, null, !dbg !5215
  br i1 %tobool8, label %land.lhs.true, label %if.end53, !dbg !5218

land.lhs.true:                                    ; preds = %while.body
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5219
  %common9 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !5219
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !5219
  %11 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !5219
  %base11 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !5219
  %12 = bitcast %struct.tree_base* %base11 to i64*, !dbg !5219
  %bf.load12 = load i64, i64* %12, align 8, !dbg !5219
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !5219
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !5219
  %cmp15 = icmp eq i32 %bf.cast14, 10, !dbg !5219
  br i1 %cmp15, label %if.then23, label %lor.lhs.false, !dbg !5219

lor.lhs.false:                                    ; preds = %land.lhs.true
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5219
  %common16 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !5219
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2, !dbg !5219
  %14 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !5219
  %base18 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !5219
  %15 = bitcast %struct.tree_base* %base18 to i64*, !dbg !5219
  %bf.load19 = load i64, i64* %15, align 8, !dbg !5219
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !5219
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !5219
  %cmp22 = icmp eq i32 %bf.cast21, 12, !dbg !5219
  br i1 %cmp22, label %if.then23, label %if.end53, !dbg !5220

if.then23:                                        ; preds = %lor.lhs.false, %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %pointee, metadata !5221, metadata !DIExpression()), !dbg !5223
  %16 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5224
  %common24 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !5224
  %type25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2, !dbg !5224
  %17 = load %union.tree_node*, %union.tree_node** %type25, align 8, !dbg !5224
  store %union.tree_node* %17, %union.tree_node** %pointee, align 8, !dbg !5225
  br label %while.cond26, !dbg !5226

while.cond26:                                     ; preds = %while.body39, %if.then23
  %18 = load %union.tree_node*, %union.tree_node** %pointee, align 8, !dbg !5227
  %base27 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !5227
  %19 = bitcast %struct.tree_base* %base27 to i64*, !dbg !5227
  %bf.load28 = load i64, i64* %19, align 8, !dbg !5227
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !5227
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !5227
  %cmp31 = icmp eq i32 %bf.cast30, 10, !dbg !5227
  br i1 %cmp31, label %lor.end38, label %lor.rhs32, !dbg !5227

lor.rhs32:                                        ; preds = %while.cond26
  %20 = load %union.tree_node*, %union.tree_node** %pointee, align 8, !dbg !5227
  %base33 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !5227
  %21 = bitcast %struct.tree_base* %base33 to i64*, !dbg !5227
  %bf.load34 = load i64, i64* %21, align 8, !dbg !5227
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !5227
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !5227
  %cmp37 = icmp eq i32 %bf.cast36, 12, !dbg !5227
  br label %lor.end38, !dbg !5227

lor.end38:                                        ; preds = %lor.rhs32, %while.cond26
  %22 = phi i1 [ true, %while.cond26 ], [ %cmp37, %lor.rhs32 ]
  br i1 %22, label %while.body39, label %while.end, !dbg !5226

while.body39:                                     ; preds = %lor.end38
  %23 = load %union.tree_node*, %union.tree_node** %pointee, align 8, !dbg !5228
  %common40 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !5228
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !5228
  %24 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !5228
  store %union.tree_node* %24, %union.tree_node** %pointee, align 8, !dbg !5229
  br label %while.cond26, !dbg !5226, !llvm.loop !5230

while.end:                                        ; preds = %lor.end38
  %25 = load %union.tree_node*, %union.tree_node** %pointee, align 8, !dbg !5231
  %base42 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !5231
  %26 = bitcast %struct.tree_base* %base42 to i64*, !dbg !5231
  %bf.load43 = load i64, i64* %26, align 8, !dbg !5231
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !5231
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !5231
  %cmp46 = icmp eq i32 %bf.cast45, 14, !dbg !5233
  br i1 %cmp46, label %if.then47, label %if.end52, !dbg !5234

if.then47:                                        ; preds = %while.end
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5235
  %tobool48 = icmp ne %struct._IO_FILE* %27, null, !dbg !5235
  br i1 %tobool48, label %if.then49, label %if.end51, !dbg !5238

if.then49:                                        ; preds = %if.then47
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5239
  %call50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0)), !dbg !5240
  br label %if.end51, !dbg !5240

if.end51:                                         ; preds = %if.then49, %if.then47
  store i8 0, i8* %retval, align 1, !dbg !5241
  br label %return, !dbg !5241

if.end52:                                         ; preds = %while.end
  br label %if.end53, !dbg !5242

if.end53:                                         ; preds = %if.end52, %lor.lhs.false, %while.body
  %29 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5243
  %exp = bitcast %union.tree_node* %29 to %struct.tree_exp*, !dbg !5243
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5243
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5243
  %30 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5243
  store %union.tree_node* %30, %union.tree_node** %t, align 8, !dbg !5244
  br label %while.cond, !dbg !5213, !llvm.loop !5245

while.end54:                                      ; preds = %lor.end
  br label %sw.epilog, !dbg !5247

sw.bb55:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5248
  br label %return, !dbg !5248

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !5249

sw.epilog:                                        ; preds = %sw.default, %while.end54
  store i8 1, i8* %retval, align 1, !dbg !5250
  br label %return, !dbg !5250

return:                                           ; preds = %sw.epilog, %sw.bb55, %if.end51, %if.then
  %31 = load i8, i8* %retval, align 1, !dbg !5251
  ret i8 %31, !dbg !5251
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5252 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5255, metadata !DIExpression()), !dbg !5256
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5257
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5257
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !5258
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5258
  ret %union.gimple_statement_d* %1, !dbg !5259
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !5260 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !5264, metadata !DIExpression()), !dbg !5265
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5266
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !5267
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5267
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !5268
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !5268
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5269
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !5270
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !5271
  ret void, !dbg !5272
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !5273 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5279, metadata !DIExpression()), !dbg !5280
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5281
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !5282
  %1 = load i32, i32* %flags, align 8, !dbg !5282
  %and = and i32 %1, 512, !dbg !5283
  %tobool = icmp ne i32 %and, 0, !dbg !5283
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !5284

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5285
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !5286
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !5287
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !5287
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !5285
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5288

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5289
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !5290
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !5291
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !5291
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !5292
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5292
  br label %cond.end, !dbg !5288

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !5288

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !5288
  ret %struct.gimple_seq_d* %cond, !dbg !5293
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !5294 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !5300, metadata !DIExpression()), !dbg !5301
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5302
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !5302
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5302

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5303
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !5304
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !5304
  br label %cond.end, !dbg !5302

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5302

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !5302
  ret %struct.gimple_seq_node_d* %cond, !dbg !5305
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !5306 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5310, metadata !DIExpression()), !dbg !5311
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5312
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5313
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5314
  %bf.load = load i32, i32* %1, align 8, !dbg !5314
  %bf.clear = and i32 %bf.load, 255, !dbg !5314
  ret i32 %bf.clear, !dbg !5315
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_assign_cast_p(%union.gimple_statement_d* %s) #0 !dbg !5316 {
entry:
  %retval = alloca i8, align 1
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %sc = alloca i32, align 4
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !5317, metadata !DIExpression()), !dbg !5318
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5319
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !5321
  %tobool = icmp ne i8 %call, 0, !dbg !5321
  br i1 %tobool, label %if.then, label %if.end, !dbg !5322

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %sc, metadata !5323, metadata !DIExpression()), !dbg !5325
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5326
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1), !dbg !5327
  store i32 %call1, i32* %sc, align 4, !dbg !5325
  %2 = load i32, i32* %sc, align 4, !dbg !5328
  %cmp = icmp eq i32 %2, 116, !dbg !5328
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !5328

lor.lhs.false:                                    ; preds = %if.then
  %3 = load i32, i32* %sc, align 4, !dbg !5328
  %cmp2 = icmp eq i32 %3, 113, !dbg !5328
  br i1 %cmp2, label %lor.end, label %lor.lhs.false3, !dbg !5329

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %4 = load i32, i32* %sc, align 4, !dbg !5330
  %cmp4 = icmp eq i32 %4, 118, !dbg !5331
  br i1 %cmp4, label %lor.end, label %lor.rhs, !dbg !5332

lor.rhs:                                          ; preds = %lor.lhs.false3
  %5 = load i32, i32* %sc, align 4, !dbg !5333
  %cmp5 = icmp eq i32 %5, 77, !dbg !5334
  br label %lor.end, !dbg !5332

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false3, %lor.lhs.false, %if.then
  %6 = phi i1 [ true, %lor.lhs.false3 ], [ true, %lor.lhs.false ], [ true, %if.then ], [ %cmp5, %lor.rhs ]
  %lor.ext = zext i1 %6 to i32, !dbg !5332
  %conv = trunc i32 %lor.ext to i8, !dbg !5328
  store i8 %conv, i8* %retval, align 1, !dbg !5335
  br label %return, !dbg !5335

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5336
  br label %return, !dbg !5336

return:                                           ; preds = %if.end, %lor.end
  %7 = load i8, i8* %retval, align 1, !dbg !5337
  ret i8 %7, !dbg !5337
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !5338 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5341, metadata !DIExpression()), !dbg !5342
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5343
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !5344
  ret %union.tree_node* %call, !dbg !5345
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !5346 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5349, metadata !DIExpression()), !dbg !5350
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5351
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5352
  %cmp = icmp eq i32 %call, 6, !dbg !5353
  %conv = zext i1 %cmp to i32, !dbg !5353
  %conv1 = trunc i32 %conv to i8, !dbg !5352
  ret i8 %conv1, !dbg !5354
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !5355 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5358, metadata !DIExpression()), !dbg !5359
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5360, metadata !DIExpression()), !dbg !5361
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5362
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !5363
  store i32 %call, i32* %code, align 4, !dbg !5364
  %1 = load i32, i32* %code, align 4, !dbg !5365
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !5367
  %cmp = icmp eq i32 %call1, 3, !dbg !5368
  br i1 %cmp, label %if.then, label %if.end, !dbg !5369

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5370
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !5370
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !5370
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !5370
  %bf.load = load i64, i64* %3, align 8, !dbg !5370
  %bf.clear = and i64 %bf.load, 65535, !dbg !5370
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5370
  store i32 %bf.cast, i32* %code, align 4, !dbg !5371
  br label %if.end, !dbg !5372

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !5373
  ret i32 %4, !dbg !5374
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !5375 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5376, metadata !DIExpression()), !dbg !5377
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5378, metadata !DIExpression()), !dbg !5379
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5380
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5381
  store i32 %call, i32* %code, align 4, !dbg !5379
  %1 = load i32, i32* %code, align 4, !dbg !5382
  %cmp = icmp eq i32 %1, 6, !dbg !5384
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5385

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !5386
  %cmp1 = icmp eq i32 %2, 1, !dbg !5387
  br i1 %cmp1, label %if.then, label %if.else, !dbg !5388

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5389
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !5390
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5391
  %bf.load = load i32, i32* %4, align 8, !dbg !5391
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5391
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !5392
  br label %return, !dbg !5392

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !5393
  %cmp2 = icmp eq i32 %5, 8, !dbg !5395
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !5396

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !5397
  br label %return, !dbg !5397

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5398
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !5399
  br label %return, !dbg !5399

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !5400
  ret i32 %6, !dbg !5400
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !5401 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5404, metadata !DIExpression()), !dbg !5405
  %0 = load i32, i32* %code.addr, align 4, !dbg !5406
  %idxprom = sext i32 %0 to i64, !dbg !5407
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !5407
  %1 = load i8, i8* %arrayidx, align 1, !dbg !5407
  %conv = zext i8 %1 to i32, !dbg !5408
  ret i32 %conv, !dbg !5409
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5410 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5413, metadata !DIExpression()), !dbg !5414
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5415, metadata !DIExpression()), !dbg !5416
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5417
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5419
  %tobool = icmp ne i8 %call, 0, !dbg !5419
  br i1 %tobool, label %if.then, label %if.else, !dbg !5420

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5421
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !5423
  %2 = load i32, i32* %i.addr, align 4, !dbg !5424
  %idxprom = zext i32 %2 to i64, !dbg !5423
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !5423
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5423
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !5425
  br label %return, !dbg !5425

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5426
  br label %return, !dbg !5426

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5427
  ret %union.tree_node* %4, !dbg !5427
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !5428 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5429, metadata !DIExpression()), !dbg !5430
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5431
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5432
  %cmp = icmp uge i32 %call, 1, !dbg !5433
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5434

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5435
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5436
  %cmp2 = icmp ule i32 %call1, 9, !dbg !5437
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !5438
  %land.ext = zext i1 %2 to i32, !dbg !5434
  %conv = trunc i32 %land.ext to i8, !dbg !5432
  ret i8 %conv, !dbg !5439
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !5440 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5443, metadata !DIExpression()), !dbg !5444
  call void @llvm.dbg.declare(metadata i64* %off, metadata !5445, metadata !DIExpression()), !dbg !5446
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5447
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !5448
  %idxprom = zext i32 %call to i64, !dbg !5449
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !5449
  %1 = load i64, i64* %arrayidx, align 8, !dbg !5449
  store i64 %1, i64* %off, align 8, !dbg !5450
  %2 = load i64, i64* %off, align 8, !dbg !5451
  %cmp = icmp ne i64 %2, 0, !dbg !5451
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5451

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5451
  br label %cond.end, !dbg !5451

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5451

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5451
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5452
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !5453
  %5 = load i64, i64* %off, align 8, !dbg !5454
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !5455
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !5456
  ret %union.tree_node** %6, !dbg !5457
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !5458 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5461, metadata !DIExpression()), !dbg !5462
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5463
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5464
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !5465
  ret i32 %call1, !dbg !5466
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !5467 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5470, metadata !DIExpression()), !dbg !5471
  %0 = load i32, i32* %code.addr, align 4, !dbg !5472
  %idxprom = zext i32 %0 to i64, !dbg !5473
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !5473
  %1 = load i32, i32* %arrayidx, align 4, !dbg !5473
  ret i32 %1, !dbg !5474
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.matrix_info* @analyze_matrix_decl(%union.tree_node* %var_decl) #0 !dbg !5475 {
entry:
  %retval = alloca %struct.matrix_info*, align 8
  %var_decl.addr = alloca %union.tree_node*, align 8
  %m_node = alloca %struct.matrix_info*, align 8
  %tmpmi = alloca %struct.matrix_info, align 8
  %mi = alloca %struct.matrix_info*, align 8
  %var_type = alloca %union.tree_node*, align 8
  %dim_num = alloca i32, align 4
  store %union.tree_node* %var_decl, %union.tree_node** %var_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var_decl.addr, metadata !5478, metadata !DIExpression()), !dbg !5479
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %m_node, metadata !5480, metadata !DIExpression()), !dbg !5481
  call void @llvm.dbg.declare(metadata %struct.matrix_info* %tmpmi, metadata !5482, metadata !DIExpression()), !dbg !5483
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %mi, metadata !5484, metadata !DIExpression()), !dbg !5485
  call void @llvm.dbg.declare(metadata %union.tree_node** %var_type, metadata !5486, metadata !DIExpression()), !dbg !5487
  call void @llvm.dbg.declare(metadata i32* %dim_num, metadata !5488, metadata !DIExpression()), !dbg !5489
  store i32 0, i32* %dim_num, align 4, !dbg !5489
  %0 = load %struct.htab*, %struct.htab** @matrices_to_reorg, align 8, !dbg !5490
  %tobool = icmp ne %struct.htab* %0, null, !dbg !5490
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5490

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 491, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5490
  br label %cond.end, !dbg !5490

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5490

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5490
  %1 = load %union.tree_node*, %union.tree_node** %var_decl.addr, align 8, !dbg !5491
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5491
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5491
  %bf.load = load i64, i64* %2, align 8, !dbg !5491
  %bf.clear = and i64 %bf.load, 65535, !dbg !5491
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5491
  %cmp = icmp eq i32 %bf.cast, 34, !dbg !5493
  br i1 %cmp, label %if.then, label %if.else, !dbg !5494

if.then:                                          ; preds = %cond.end
  %3 = load %union.tree_node*, %union.tree_node** %var_decl.addr, align 8, !dbg !5495
  %decl_common = bitcast %union.tree_node* %3 to %struct.tree_decl_common*, !dbg !5495
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !5495
  %4 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !5495
  store %union.tree_node* %4, %union.tree_node** %var_type, align 8, !dbg !5496
  br label %if.end8, !dbg !5497

if.else:                                          ; preds = %cond.end
  %5 = load %union.tree_node*, %union.tree_node** %var_decl.addr, align 8, !dbg !5498
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !5498
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !5498
  %bf.load2 = load i64, i64* %6, align 8, !dbg !5498
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !5498
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !5498
  %cmp5 = icmp eq i32 %bf.cast4, 32, !dbg !5500
  br i1 %cmp5, label %if.then6, label %if.else7, !dbg !5501

if.then6:                                         ; preds = %if.else
  %7 = load %union.tree_node*, %union.tree_node** %var_decl.addr, align 8, !dbg !5502
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !5502
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5502
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5502
  store %union.tree_node* %8, %union.tree_node** %var_type, align 8, !dbg !5503
  br label %if.end, !dbg !5504

if.else7:                                         ; preds = %if.else
  store %struct.matrix_info* null, %struct.matrix_info** %retval, align 8, !dbg !5505
  br label %return, !dbg !5505

if.end:                                           ; preds = %if.then6
  br label %if.end8

if.end8:                                          ; preds = %if.end, %if.then
  %9 = load %union.tree_node*, %union.tree_node** %var_type, align 8, !dbg !5506
  %base9 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !5506
  %10 = bitcast %struct.tree_base* %base9 to i64*, !dbg !5506
  %bf.load10 = load i64, i64* %10, align 8, !dbg !5506
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !5506
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !5506
  %cmp13 = icmp eq i32 %bf.cast12, 10, !dbg !5506
  br i1 %cmp13, label %if.end20, label %lor.lhs.false, !dbg !5506

lor.lhs.false:                                    ; preds = %if.end8
  %11 = load %union.tree_node*, %union.tree_node** %var_type, align 8, !dbg !5506
  %base14 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !5506
  %12 = bitcast %struct.tree_base* %base14 to i64*, !dbg !5506
  %bf.load15 = load i64, i64* %12, align 8, !dbg !5506
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !5506
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !5506
  %cmp18 = icmp eq i32 %bf.cast17, 12, !dbg !5506
  br i1 %cmp18, label %if.end20, label %if.then19, !dbg !5508

if.then19:                                        ; preds = %lor.lhs.false
  store %struct.matrix_info* null, %struct.matrix_info** %retval, align 8, !dbg !5509
  br label %return, !dbg !5509

if.end20:                                         ; preds = %lor.lhs.false, %if.end8
  br label %while.cond, !dbg !5510

while.cond:                                       ; preds = %while.body, %if.end20
  %13 = load %union.tree_node*, %union.tree_node** %var_type, align 8, !dbg !5511
  %base21 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !5511
  %14 = bitcast %struct.tree_base* %base21 to i64*, !dbg !5511
  %bf.load22 = load i64, i64* %14, align 8, !dbg !5511
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !5511
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !5511
  %cmp25 = icmp eq i32 %bf.cast24, 10, !dbg !5511
  br i1 %cmp25, label %lor.end, label %lor.rhs, !dbg !5511

lor.rhs:                                          ; preds = %while.cond
  %15 = load %union.tree_node*, %union.tree_node** %var_type, align 8, !dbg !5511
  %base26 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !5511
  %16 = bitcast %struct.tree_base* %base26 to i64*, !dbg !5511
  %bf.load27 = load i64, i64* %16, align 8, !dbg !5511
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !5511
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !5511
  %cmp30 = icmp eq i32 %bf.cast29, 12, !dbg !5511
  br label %lor.end, !dbg !5511

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %17 = phi i1 [ true, %while.cond ], [ %cmp30, %lor.rhs ]
  br i1 %17, label %while.body, label %while.end, !dbg !5510

while.body:                                       ; preds = %lor.end
  %18 = load %union.tree_node*, %union.tree_node** %var_type, align 8, !dbg !5512
  %common31 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !5512
  %type32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2, !dbg !5512
  %19 = load %union.tree_node*, %union.tree_node** %type32, align 8, !dbg !5512
  store %union.tree_node* %19, %union.tree_node** %var_type, align 8, !dbg !5514
  %20 = load i32, i32* %dim_num, align 4, !dbg !5515
  %inc = add nsw i32 %20, 1, !dbg !5515
  store i32 %inc, i32* %dim_num, align 4, !dbg !5515
  br label %while.cond, !dbg !5510, !llvm.loop !5516

while.end:                                        ; preds = %lor.end
  %21 = load i32, i32* %dim_num, align 4, !dbg !5518
  %cmp33 = icmp sle i32 %21, 1, !dbg !5520
  br i1 %cmp33, label %if.then34, label %if.end35, !dbg !5521

if.then34:                                        ; preds = %while.end
  store %struct.matrix_info* null, %struct.matrix_info** %retval, align 8, !dbg !5522
  br label %return, !dbg !5522

if.end35:                                         ; preds = %while.end
  %22 = load %union.tree_node*, %union.tree_node** %var_type, align 8, !dbg !5523
  %type36 = bitcast %union.tree_node* %22 to %struct.tree_type*, !dbg !5523
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type36, i32 0, i32 2, !dbg !5523
  %23 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !5523
  %cmp37 = icmp ne %union.tree_node* %23, null, !dbg !5523
  br i1 %cmp37, label %lor.lhs.false38, label %if.then45, !dbg !5525

lor.lhs.false38:                                  ; preds = %if.end35
  %24 = load %union.tree_node*, %union.tree_node** %var_type, align 8, !dbg !5526
  %type39 = bitcast %union.tree_node* %24 to %struct.tree_type*, !dbg !5526
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type39, i32 0, i32 3, !dbg !5526
  %25 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !5526
  %base40 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !5526
  %26 = bitcast %struct.tree_base* %base40 to i64*, !dbg !5526
  %bf.load41 = load i64, i64* %26, align 8, !dbg !5526
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !5526
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !5526
  %cmp44 = icmp ne i32 %bf.cast43, 23, !dbg !5527
  br i1 %cmp44, label %if.then45, label %if.end46, !dbg !5528

if.then45:                                        ; preds = %lor.lhs.false38, %if.end35
  store %struct.matrix_info* null, %struct.matrix_info** %retval, align 8, !dbg !5529
  br label %return, !dbg !5529

if.end46:                                         ; preds = %lor.lhs.false38
  %27 = load %union.tree_node*, %union.tree_node** %var_decl.addr, align 8, !dbg !5530
  %decl = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %tmpmi, i32 0, i32 0, !dbg !5531
  store %union.tree_node* %27, %union.tree_node** %decl, align 8, !dbg !5532
  %28 = load %struct.htab*, %struct.htab** @matrices_to_reorg, align 8, !dbg !5533
  %29 = bitcast %struct.matrix_info* %tmpmi to i8*, !dbg !5534
  %call = call i8* @htab_find(%struct.htab* %28, i8* %29), !dbg !5535
  %30 = bitcast i8* %call to %struct.matrix_info*, !dbg !5536
  store %struct.matrix_info* %30, %struct.matrix_info** %mi, align 8, !dbg !5537
  %31 = load %struct.matrix_info*, %struct.matrix_info** %mi, align 8, !dbg !5538
  %tobool47 = icmp ne %struct.matrix_info* %31, null, !dbg !5538
  br i1 %tobool47, label %if.then48, label %if.end49, !dbg !5540

if.then48:                                        ; preds = %if.end46
  store %struct.matrix_info* null, %struct.matrix_info** %retval, align 8, !dbg !5541
  br label %return, !dbg !5541

if.end49:                                         ; preds = %if.end46
  %call50 = call i8* @xcalloc(i64 1, i64 112), !dbg !5542
  %32 = bitcast i8* %call50 to %struct.matrix_info*, !dbg !5543
  store %struct.matrix_info* %32, %struct.matrix_info** %m_node, align 8, !dbg !5544
  %33 = load %union.tree_node*, %union.tree_node** %var_decl.addr, align 8, !dbg !5545
  %34 = load %struct.matrix_info*, %struct.matrix_info** %m_node, align 8, !dbg !5546
  %decl51 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %34, i32 0, i32 0, !dbg !5547
  store %union.tree_node* %33, %union.tree_node** %decl51, align 8, !dbg !5548
  %35 = load i32, i32* %dim_num, align 4, !dbg !5549
  %36 = load %struct.matrix_info*, %struct.matrix_info** %m_node, align 8, !dbg !5550
  %num_dims = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %36, i32 0, i32 1, !dbg !5551
  store i32 %35, i32* %num_dims, align 8, !dbg !5552
  %37 = load i32, i32* %dim_num, align 4, !dbg !5553
  %conv = sext i32 %37 to i64, !dbg !5553
  %call52 = call i8* @xcalloc(i64 %conv, i64 16), !dbg !5554
  %38 = bitcast i8* %call52 to %struct.free_info*, !dbg !5555
  %39 = load %struct.matrix_info*, %struct.matrix_info** %m_node, align 8, !dbg !5556
  %free_stmts = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %39, i32 0, i32 8, !dbg !5557
  store %struct.free_info* %38, %struct.free_info** %free_stmts, align 8, !dbg !5558
  %40 = load %struct.matrix_info*, %struct.matrix_info** %m_node, align 8, !dbg !5559
  %min_indirect_level_escape = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %40, i32 0, i32 2, !dbg !5560
  store i32 -1, i32* %min_indirect_level_escape, align 4, !dbg !5561
  %41 = load %struct.matrix_info*, %struct.matrix_info** %m_node, align 8, !dbg !5562
  %is_transposed_p = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %41, i32 0, i32 6, !dbg !5563
  store i8 0, i8* %is_transposed_p, align 4, !dbg !5564
  %42 = load %struct.matrix_info*, %struct.matrix_info** %m_node, align 8, !dbg !5565
  store %struct.matrix_info* %42, %struct.matrix_info** %retval, align 8, !dbg !5566
  br label %return, !dbg !5566

return:                                           ; preds = %if.end49, %if.then48, %if.then45, %if.then34, %if.then19, %if.else7
  %43 = load %struct.matrix_info*, %struct.matrix_info** %retval, align 8, !dbg !5567
  ret %struct.matrix_info* %43, !dbg !5567
}

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #2

declare dso_local i8* @htab_find(%struct.htab*, i8*) #2

declare dso_local i8* @xcalloc(i64, i64) #2

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !5568 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !5573, metadata !DIExpression()), !dbg !5574
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5574
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !5574
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5574

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5574
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !5574
  %2 = load i32, i32* %num, align 8, !dbg !5574
  br label %cond.end, !dbg !5574

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5574

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5574
  ret i32 %cond, !dbg !5574
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @analyze_matrix_allocation_site(%struct.matrix_info* %mi, %union.gimple_statement_d* %stmt, i32 %level, %struct.simple_bitmap_def* %visited) #0 !dbg !5575 {
entry:
  %mi.addr = alloca %struct.matrix_info*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %level.addr = alloca i32, align 4
  %visited.addr = alloca %struct.simple_bitmap_def*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %def = alloca %union.gimple_statement_d*, align 8
  %call_flags = alloca i32, align 4
  %malloc_fn_decl = alloca %union.tree_node*, align 8
  store %struct.matrix_info* %mi, %struct.matrix_info** %mi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %mi.addr, metadata !5578, metadata !DIExpression()), !dbg !5579
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5580, metadata !DIExpression()), !dbg !5581
  store i32 %level, i32* %level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %level.addr, metadata !5582, metadata !DIExpression()), !dbg !5583
  store %struct.simple_bitmap_def* %visited, %struct.simple_bitmap_def** %visited.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %visited.addr, metadata !5584, metadata !DIExpression()), !dbg !5585
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5586
  %call = call zeroext i8 @gimple_assign_copy_p(%union.gimple_statement_d* %0), !dbg !5588
  %conv = zext i8 %call to i32, !dbg !5588
  %tobool = icmp ne i32 %conv, 0, !dbg !5588
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !5589

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5590
  %call1 = call zeroext i8 @gimple_assign_cast_p(%union.gimple_statement_d* %1), !dbg !5591
  %conv2 = zext i8 %call1 to i32, !dbg !5591
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !5591
  br i1 %tobool3, label %if.then, label %if.else11, !dbg !5592

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !5593, metadata !DIExpression()), !dbg !5595
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5596
  %call4 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !5597
  store %union.tree_node* %call4, %union.tree_node** %rhs, align 8, !dbg !5595
  %3 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5598
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5598
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !5598
  %bf.load = load i64, i64* %4, align 8, !dbg !5598
  %bf.clear = and i64 %bf.load, 65535, !dbg !5598
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5598
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !5600
  br i1 %cmp, label %if.then6, label %if.else, !dbg !5601

if.then6:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def, metadata !5602, metadata !DIExpression()), !dbg !5604
  %5 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5605
  %ssa_name = bitcast %union.tree_node* %5 to %struct.tree_ssa_name*, !dbg !5605
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !5605
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5605
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %def, align 8, !dbg !5604
  %7 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5606
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !5607
  %9 = load i32, i32* %level.addr, align 4, !dbg !5608
  %10 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !5609
  call void @analyze_matrix_allocation_site(%struct.matrix_info* %7, %union.gimple_statement_d* %8, i32 %9, %struct.simple_bitmap_def* %10), !dbg !5610
  br label %return, !dbg !5611

if.else:                                          ; preds = %if.then
  %11 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5612
  %12 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5614
  %decl = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %12, i32 0, i32 0, !dbg !5615
  %13 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5615
  %cmp7 = icmp eq %union.tree_node* %11, %13, !dbg !5616
  br i1 %cmp7, label %if.then9, label %if.end, !dbg !5617

if.then9:                                         ; preds = %if.else
  br label %return, !dbg !5618

if.end:                                           ; preds = %if.else
  br label %if.end10

if.end10:                                         ; preds = %if.end
  br label %if.end49, !dbg !5619

if.else11:                                        ; preds = %lor.lhs.false
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5620
  %call12 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %14), !dbg !5622
  %tobool13 = icmp ne i8 %call12, 0, !dbg !5622
  br i1 %tobool13, label %if.then14, label %if.end48, !dbg !5623

if.then14:                                        ; preds = %if.else11
  call void @llvm.dbg.declare(metadata i32* %call_flags, metadata !5624, metadata !DIExpression()), !dbg !5626
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5627
  %call15 = call i32 @gimple_call_flags(%union.gimple_statement_d* %15), !dbg !5628
  store i32 %call15, i32* %call_flags, align 4, !dbg !5626
  %16 = load i32, i32* %call_flags, align 4, !dbg !5629
  %and = and i32 %16, 16, !dbg !5631
  %tobool16 = icmp ne i32 %and, 0, !dbg !5631
  br i1 %tobool16, label %if.else18, label %if.then17, !dbg !5632

if.then17:                                        ; preds = %if.then14
  %17 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5633
  %18 = load i32, i32* %level.addr, align 4, !dbg !5635
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5636
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %17, i32 %18, %union.gimple_statement_d* %19), !dbg !5637
  br label %return, !dbg !5638

if.else18:                                        ; preds = %if.then14
  call void @llvm.dbg.declare(metadata %union.tree_node** %malloc_fn_decl, metadata !5639, metadata !DIExpression()), !dbg !5641
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5642
  %call19 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %20), !dbg !5643
  store %union.tree_node* %call19, %union.tree_node** %malloc_fn_decl, align 8, !dbg !5644
  %21 = load %union.tree_node*, %union.tree_node** %malloc_fn_decl, align 8, !dbg !5645
  %cmp20 = icmp eq %union.tree_node* %21, null, !dbg !5647
  br i1 %cmp20, label %if.then22, label %if.end23, !dbg !5648

if.then22:                                        ; preds = %if.else18
  %22 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5649
  %23 = load i32, i32* %level.addr, align 4, !dbg !5651
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5652
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %22, i32 %23, %union.gimple_statement_d* %24), !dbg !5653
  br label %return, !dbg !5654

if.end23:                                         ; preds = %if.else18
  %25 = load %union.tree_node*, %union.tree_node** %malloc_fn_decl, align 8, !dbg !5655
  %function_decl = bitcast %union.tree_node* %25 to %struct.tree_function_decl*, !dbg !5655
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !5655
  %bf.load24 = load i32, i32* %function_code, align 8, !dbg !5655
  %bf.clear25 = and i32 %bf.load24, 2047, !dbg !5655
  %cmp26 = icmp ne i32 %bf.clear25, 491, !dbg !5657
  br i1 %cmp26, label %if.then28, label %if.end36, !dbg !5658

if.then28:                                        ; preds = %if.end23
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5659
  %tobool29 = icmp ne %struct._IO_FILE* %26, null, !dbg !5659
  br i1 %tobool29, label %if.then30, label %if.end35, !dbg !5662

if.then30:                                        ; preds = %if.then28
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5663
  %28 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5664
  %decl31 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %28, i32 0, i32 0, !dbg !5665
  %29 = load %union.tree_node*, %union.tree_node** %decl31, align 8, !dbg !5665
  %call32 = call i8* @get_name(%union.tree_node* %29), !dbg !5666
  %30 = load %union.tree_node*, %union.tree_node** %malloc_fn_decl, align 8, !dbg !5667
  %call33 = call i8* @get_name(%union.tree_node* %30), !dbg !5668
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.5, i64 0, i64 0), i8* %call32, i8* %call33), !dbg !5669
  br label %if.end35, !dbg !5669

if.end35:                                         ; preds = %if.then30, %if.then28
  %31 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5670
  %32 = load i32, i32* %level.addr, align 4, !dbg !5671
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5672
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %31, i32 %32, %union.gimple_statement_d* %33), !dbg !5673
  br label %return, !dbg !5674

if.end36:                                         ; preds = %if.end23
  br label %if.end37

if.end37:                                         ; preds = %if.end36
  %34 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5675
  %malloc_for_level = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %34, i32 0, i32 4, !dbg !5677
  %35 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %malloc_for_level, align 8, !dbg !5677
  %tobool38 = icmp ne %union.gimple_statement_d** %35, null, !dbg !5675
  br i1 %tobool38, label %land.lhs.true, label %if.else46, !dbg !5678

land.lhs.true:                                    ; preds = %if.end37
  %36 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5679
  %max_malloced_level = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %36, i32 0, i32 5, !dbg !5680
  %37 = load i32, i32* %max_malloced_level, align 8, !dbg !5680
  %sub = sub nsw i32 %37, 1, !dbg !5681
  %38 = load i32, i32* %level.addr, align 4, !dbg !5682
  %cmp39 = icmp eq i32 %sub, %38, !dbg !5683
  br i1 %cmp39, label %land.lhs.true41, label %if.else46, !dbg !5684

land.lhs.true41:                                  ; preds = %land.lhs.true
  %39 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5685
  %malloc_for_level42 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %39, i32 0, i32 4, !dbg !5686
  %40 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %malloc_for_level42, align 8, !dbg !5686
  %41 = load i32, i32* %level.addr, align 4, !dbg !5687
  %idxprom = sext i32 %41 to i64, !dbg !5685
  %arrayidx = getelementptr inbounds %union.gimple_statement_d*, %union.gimple_statement_d** %40, i64 %idxprom, !dbg !5685
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !5685
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5688
  %cmp43 = icmp ne %union.gimple_statement_d* %42, %43, !dbg !5689
  br i1 %cmp43, label %if.then45, label %if.else46, !dbg !5690

if.then45:                                        ; preds = %land.lhs.true41
  %44 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5691
  %45 = load i32, i32* %level.addr, align 4, !dbg !5693
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5694
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %44, i32 %45, %union.gimple_statement_d* %46), !dbg !5695
  br label %return, !dbg !5696

if.else46:                                        ; preds = %land.lhs.true41, %land.lhs.true, %if.end37
  %47 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5697
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5698
  %49 = load i32, i32* %level.addr, align 4, !dbg !5699
  call void @add_allocation_site(%struct.matrix_info* %47, %union.gimple_statement_d* %48, i32 %49), !dbg !5700
  br label %if.end47

if.end47:                                         ; preds = %if.else46
  br label %return, !dbg !5701

if.end48:                                         ; preds = %if.else11
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.end10
  %50 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5702
  %51 = load i32, i32* %level.addr, align 4, !dbg !5703
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5704
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %50, i32 %51, %union.gimple_statement_d* %52), !dbg !5705
  br label %return, !dbg !5706

return:                                           ; preds = %if.end49, %if.end47, %if.then45, %if.end35, %if.then22, %if.then17, %if.then9, %if.then6
  ret void, !dbg !5706
}

declare dso_local zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @analyze_matrix_accesses(%struct.matrix_info* %mi, %union.tree_node* %ssa_var, i32 %current_indirect_level, i8 zeroext %last_op, %struct.simple_bitmap_def* %visited, i8 zeroext %record_accesses) #0 !dbg !5707 {
entry:
  %mi.addr = alloca %struct.matrix_info*, align 8
  %ssa_var.addr = alloca %union.tree_node*, align 8
  %current_indirect_level.addr = alloca i32, align 4
  %last_op.addr = alloca i8, align 1
  %visited.addr = alloca %struct.simple_bitmap_def*, align 8
  %record_accesses.addr = alloca i8, align 1
  %imm_iter = alloca %struct.immediate_use_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %use_stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.matrix_info* %mi, %struct.matrix_info** %mi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %mi.addr, metadata !5710, metadata !DIExpression()), !dbg !5711
  store %union.tree_node* %ssa_var, %union.tree_node** %ssa_var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ssa_var.addr, metadata !5712, metadata !DIExpression()), !dbg !5713
  store i32 %current_indirect_level, i32* %current_indirect_level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %current_indirect_level.addr, metadata !5714, metadata !DIExpression()), !dbg !5715
  store i8 %last_op, i8* %last_op.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %last_op.addr, metadata !5716, metadata !DIExpression()), !dbg !5717
  store %struct.simple_bitmap_def* %visited, %struct.simple_bitmap_def** %visited.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %visited.addr, metadata !5718, metadata !DIExpression()), !dbg !5719
  store i8 %record_accesses, i8* %record_accesses.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %record_accesses.addr, metadata !5720, metadata !DIExpression()), !dbg !5721
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %imm_iter, metadata !5722, metadata !DIExpression()), !dbg !5723
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !5724, metadata !DIExpression()), !dbg !5725
  %0 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5726
  %1 = load %union.tree_node*, %union.tree_node** %ssa_var.addr, align 8, !dbg !5727
  %ssa_name = bitcast %union.tree_node* %1 to %struct.tree_ssa_name*, !dbg !5727
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !5727
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5727
  %3 = load %union.tree_node*, %union.tree_node** %ssa_var.addr, align 8, !dbg !5728
  %4 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !5729
  call void @update_type_size(%struct.matrix_info* %0, %union.gimple_statement_d* %2, %union.tree_node* %3, i32 %4), !dbg !5730
  %5 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5731
  %min_indirect_level_escape = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %5, i32 0, i32 2, !dbg !5733
  %6 = load i32, i32* %min_indirect_level_escape, align 4, !dbg !5733
  %cmp = icmp sgt i32 %6, -1, !dbg !5734
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5735

land.lhs.true:                                    ; preds = %entry
  %7 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5736
  %min_indirect_level_escape1 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %7, i32 0, i32 2, !dbg !5737
  %8 = load i32, i32* %min_indirect_level_escape1, align 4, !dbg !5737
  %9 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !5738
  %cmp2 = icmp sle i32 %8, %9, !dbg !5739
  br i1 %cmp2, label %if.then, label %if.end, !dbg !5740

if.then:                                          ; preds = %land.lhs.true
  br label %for.end, !dbg !5741

if.end:                                           ; preds = %land.lhs.true, %entry
  %10 = load %union.tree_node*, %union.tree_node** %ssa_var.addr, align 8, !dbg !5742
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !5742
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !5742
  %bf.load = load i64, i64* %11, align 8, !dbg !5742
  %bf.clear = and i64 %bf.load, 65535, !dbg !5742
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5742
  %cmp3 = icmp eq i32 %bf.cast, 141, !dbg !5742
  br i1 %cmp3, label %cond.false, label %cond.true, !dbg !5742

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 1375, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5742
  br label %cond.end, !dbg !5742

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5742

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5742
  %12 = load %union.tree_node*, %union.tree_node** %ssa_var.addr, align 8, !dbg !5743
  %call = call %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %imm_iter, %union.tree_node* %12), !dbg !5743
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5743
  br label %for.cond, !dbg !5743

for.cond:                                         ; preds = %for.inc, %cond.end
  %call4 = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5745
  %tobool = icmp ne i8 %call4, 0, !dbg !5745
  %lnot = xor i1 %tobool, true, !dbg !5745
  br i1 %lnot, label %for.body, label %for.end, !dbg !5743

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt, metadata !5747, metadata !DIExpression()), !dbg !5749
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5750
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %13, i32 0, i32 2, !dbg !5750
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !5750
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5750
  store %union.gimple_statement_d* %14, %union.gimple_statement_d** %use_stmt, align 8, !dbg !5749
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !5751
  %call5 = call i32 @gimple_code(%union.gimple_statement_d* %15), !dbg !5753
  %cmp6 = icmp eq i32 %call5, 16, !dbg !5754
  br i1 %cmp6, label %if.then7, label %if.else, !dbg !5755

if.then7:                                         ; preds = %for.body
  %16 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5756
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !5757
  %18 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !5758
  %19 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !5759
  %20 = load i8, i8* %record_accesses.addr, align 1, !dbg !5760
  call void @analyze_accesses_for_phi_node(%struct.matrix_info* %16, %union.gimple_statement_d* %17, i32 %18, %struct.simple_bitmap_def* %19, i8 zeroext %20), !dbg !5761
  br label %if.end19, !dbg !5761

if.else:                                          ; preds = %for.body
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !5762
  %call8 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %21), !dbg !5764
  %tobool9 = icmp ne i8 %call8, 0, !dbg !5764
  br i1 %tobool9, label %if.then10, label %if.else12, !dbg !5765

if.then10:                                        ; preds = %if.else
  %22 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5766
  %23 = load %union.tree_node*, %union.tree_node** %ssa_var.addr, align 8, !dbg !5767
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !5768
  %25 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !5769
  %call11 = call i32 @analyze_accesses_for_call_stmt(%struct.matrix_info* %22, %union.tree_node* %23, %union.gimple_statement_d* %24, i32 %25), !dbg !5770
  br label %if.end18, !dbg !5770

if.else12:                                        ; preds = %if.else
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !5771
  %call13 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %26), !dbg !5773
  %tobool14 = icmp ne i8 %call13, 0, !dbg !5773
  br i1 %tobool14, label %if.then15, label %if.end17, !dbg !5774

if.then15:                                        ; preds = %if.else12
  %27 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5775
  %28 = load %union.tree_node*, %union.tree_node** %ssa_var.addr, align 8, !dbg !5776
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !5777
  %30 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !5778
  %31 = load i8, i8* %last_op.addr, align 1, !dbg !5779
  %32 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !5780
  %33 = load i8, i8* %record_accesses.addr, align 1, !dbg !5781
  %call16 = call i32 @analyze_accesses_for_assign_stmt(%struct.matrix_info* %27, %union.tree_node* %28, %union.gimple_statement_d* %29, i32 %30, i8 zeroext %31, %struct.simple_bitmap_def* %32, i8 zeroext %33), !dbg !5782
  store i32 %call16, i32* %current_indirect_level.addr, align 4, !dbg !5783
  br label %if.end17, !dbg !5784

if.end17:                                         ; preds = %if.then15, %if.else12
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.then10
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.then7
  br label %for.inc, !dbg !5785

for.inc:                                          ; preds = %if.end19
  %call20 = call %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5745
  store %struct.ssa_use_operand_d* %call20, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5745
  br label %for.cond, !dbg !5745, !llvm.loop !5786

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !5788
}

declare dso_local zeroext i8 @gimple_assign_copy_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !5789 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5790, metadata !DIExpression()), !dbg !5791
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5792
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5793
  %cmp = icmp eq i32 %call, 8, !dbg !5794
  %conv = zext i1 %cmp to i32, !dbg !5794
  %conv1 = trunc i32 %conv to i8, !dbg !5793
  ret i8 %conv1, !dbg !5795
}

declare dso_local i32 @gimple_call_flags(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @mark_min_matrix_escape_level(%struct.matrix_info* %mi, i32 %l, %union.gimple_statement_d* %s) #0 !dbg !5796 {
entry:
  %mi.addr = alloca %struct.matrix_info*, align 8
  %l.addr = alloca i32, align 4
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.matrix_info* %mi, %struct.matrix_info** %mi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %mi.addr, metadata !5799, metadata !DIExpression()), !dbg !5800
  store i32 %l, i32* %l.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %l.addr, metadata !5801, metadata !DIExpression()), !dbg !5802
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !5803, metadata !DIExpression()), !dbg !5804
  %0 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5805
  %min_indirect_level_escape = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %0, i32 0, i32 2, !dbg !5807
  %1 = load i32, i32* %min_indirect_level_escape, align 4, !dbg !5807
  %cmp = icmp eq i32 %1, -1, !dbg !5808
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5809

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5810
  %min_indirect_level_escape1 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %2, i32 0, i32 2, !dbg !5811
  %3 = load i32, i32* %min_indirect_level_escape1, align 4, !dbg !5811
  %4 = load i32, i32* %l.addr, align 4, !dbg !5812
  %cmp2 = icmp sgt i32 %3, %4, !dbg !5813
  br i1 %cmp2, label %if.then, label %if.end, !dbg !5814

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load i32, i32* %l.addr, align 4, !dbg !5815
  %6 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5817
  %min_indirect_level_escape3 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %6, i32 0, i32 2, !dbg !5818
  store i32 %5, i32* %min_indirect_level_escape3, align 4, !dbg !5819
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5820
  %8 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5821
  %min_indirect_level_escape_stmt = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %8, i32 0, i32 3, !dbg !5822
  store %union.gimple_statement_d* %7, %union.gimple_statement_d** %min_indirect_level_escape_stmt, align 8, !dbg !5823
  br label %if.end, !dbg !5824

if.end:                                           ; preds = %if.then, %lor.lhs.false
  ret void, !dbg !5825
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !5826 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5827, metadata !DIExpression()), !dbg !5828
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !5829, metadata !DIExpression()), !dbg !5830
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5831
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !5832
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !5830
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !5833
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5833
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5833
  %bf.load = load i64, i64* %2, align 8, !dbg !5833
  %bf.clear = and i64 %bf.load, 65535, !dbg !5833
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5833
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !5835
  br i1 %cmp, label %if.then, label %if.end, !dbg !5836

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !5837
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !5837
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5837
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5837
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5837
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !5838
  br label %return, !dbg !5838

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5839
  br label %return, !dbg !5839

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5840
  ret %union.tree_node* %5, !dbg !5840
}

declare dso_local i8* @get_name(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @add_allocation_site(%struct.matrix_info* %mi, %union.gimple_statement_d* %stmt, i32 %level) #0 !dbg !5841 {
entry:
  %mi.addr = alloca %struct.matrix_info*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %level.addr = alloca i32, align 4
  %mcd = alloca %struct.malloc_call_data, align 8
  %min_malloc_level = alloca i32, align 4
  store %struct.matrix_info* %mi, %struct.matrix_info** %mi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %mi.addr, metadata !5844, metadata !DIExpression()), !dbg !5845
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5846, metadata !DIExpression()), !dbg !5847
  store i32 %level, i32* %level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %level.addr, metadata !5848, metadata !DIExpression()), !dbg !5849
  call void @llvm.dbg.declare(metadata %struct.malloc_call_data* %mcd, metadata !5850, metadata !DIExpression()), !dbg !5851
  %0 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5852
  %allocation_function_decl = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %0, i32 0, i32 7, !dbg !5854
  %1 = load %union.tree_node*, %union.tree_node** %allocation_function_decl, align 8, !dbg !5854
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !5852
  br i1 %tobool, label %if.else, label %if.then, !dbg !5855

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !5856
  %3 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5857
  %allocation_function_decl1 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %3, i32 0, i32 7, !dbg !5858
  store %union.tree_node* %2, %union.tree_node** %allocation_function_decl1, align 8, !dbg !5859
  br label %if.end13, !dbg !5857

if.else:                                          ; preds = %entry
  %4 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5860
  %allocation_function_decl2 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %4, i32 0, i32 7, !dbg !5862
  %5 = load %union.tree_node*, %union.tree_node** %allocation_function_decl2, align 8, !dbg !5862
  %6 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !5863
  %cmp = icmp ne %union.tree_node* %5, %6, !dbg !5864
  br i1 %cmp, label %if.then3, label %if.end12, !dbg !5865

if.then3:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %min_malloc_level, metadata !5866, metadata !DIExpression()), !dbg !5868
  %7 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5869
  %malloc_for_level = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %7, i32 0, i32 4, !dbg !5869
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %malloc_for_level, align 8, !dbg !5869
  %tobool4 = icmp ne %union.gimple_statement_d** %8, null, !dbg !5869
  br i1 %tobool4, label %cond.false, label %cond.true, !dbg !5869

cond.true:                                        ; preds = %if.then3
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 731, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5869
  br label %cond.end, !dbg !5869

cond.false:                                       ; preds = %if.then3
  br label %cond.end, !dbg !5869

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5869
  store i32 0, i32* %min_malloc_level, align 4, !dbg !5870
  br label %for.cond, !dbg !5872

for.cond:                                         ; preds = %for.inc, %cond.end
  %9 = load i32, i32* %min_malloc_level, align 4, !dbg !5873
  %10 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5875
  %max_malloced_level = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %10, i32 0, i32 5, !dbg !5876
  %11 = load i32, i32* %max_malloced_level, align 8, !dbg !5876
  %cmp5 = icmp slt i32 %9, %11, !dbg !5877
  br i1 %cmp5, label %land.rhs, label %land.end, !dbg !5878

land.rhs:                                         ; preds = %for.cond
  %12 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5879
  %malloc_for_level6 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %12, i32 0, i32 4, !dbg !5880
  %13 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %malloc_for_level6, align 8, !dbg !5880
  %14 = load i32, i32* %min_malloc_level, align 4, !dbg !5881
  %idxprom = sext i32 %14 to i64, !dbg !5879
  %arrayidx = getelementptr inbounds %union.gimple_statement_d*, %union.gimple_statement_d** %13, i64 %idxprom, !dbg !5879
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !5879
  %tobool7 = icmp ne %union.gimple_statement_d* %15, null, !dbg !5878
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %16 = phi i1 [ false, %for.cond ], [ %tobool7, %land.rhs ], !dbg !5882
  br i1 %16, label %for.body, label %for.end, !dbg !5883

for.body:                                         ; preds = %land.end
  br label %for.inc, !dbg !5883

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %min_malloc_level, align 4, !dbg !5884
  %inc = add nsw i32 %17, 1, !dbg !5884
  store i32 %inc, i32* %min_malloc_level, align 4, !dbg !5884
  br label %for.cond, !dbg !5885, !llvm.loop !5886

for.end:                                          ; preds = %land.end
  %18 = load i32, i32* %level.addr, align 4, !dbg !5888
  %19 = load i32, i32* %min_malloc_level, align 4, !dbg !5890
  %cmp8 = icmp slt i32 %18, %19, !dbg !5891
  br i1 %cmp8, label %if.then9, label %if.else11, !dbg !5892

if.then9:                                         ; preds = %for.end
  %20 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !5893
  %21 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5895
  %allocation_function_decl10 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %21, i32 0, i32 7, !dbg !5896
  store %union.tree_node* %20, %union.tree_node** %allocation_function_decl10, align 8, !dbg !5897
  %22 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5898
  %23 = load i32, i32* %min_malloc_level, align 4, !dbg !5899
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5900
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %22, i32 %23, %union.gimple_statement_d* %24), !dbg !5901
  br label %if.end, !dbg !5902

if.else11:                                        ; preds = %for.end
  %25 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5903
  %26 = load i32, i32* %level.addr, align 4, !dbg !5905
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5906
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %25, i32 %26, %union.gimple_statement_d* %27), !dbg !5907
  br label %return, !dbg !5908

if.end:                                           ; preds = %if.then9
  br label %if.end12, !dbg !5909

if.end12:                                         ; preds = %if.end, %if.else
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.then
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5910
  call void @collect_data_for_malloc_call(%union.gimple_statement_d* %28, %struct.malloc_call_data* %mcd), !dbg !5911
  %29 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5912
  %malloc_for_level14 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %29, i32 0, i32 4, !dbg !5914
  %30 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %malloc_for_level14, align 8, !dbg !5914
  %tobool15 = icmp ne %union.gimple_statement_d** %30, null, !dbg !5912
  br i1 %tobool15, label %if.else20, label %if.then16, !dbg !5915

if.then16:                                        ; preds = %if.end13
  %31 = load i32, i32* %level.addr, align 4, !dbg !5916
  %add = add nsw i32 %31, 1, !dbg !5916
  %conv = sext i32 %add to i64, !dbg !5916
  %call = call i8* @xcalloc(i64 %conv, i64 8), !dbg !5916
  %32 = bitcast i8* %call to %union.gimple_statement_d**, !dbg !5916
  %33 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5918
  %malloc_for_level17 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %33, i32 0, i32 4, !dbg !5919
  store %union.gimple_statement_d** %32, %union.gimple_statement_d*** %malloc_for_level17, align 8, !dbg !5920
  %34 = load i32, i32* %level.addr, align 4, !dbg !5921
  %add18 = add nsw i32 %34, 1, !dbg !5922
  %35 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5923
  %max_malloced_level19 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %35, i32 0, i32 5, !dbg !5924
  store i32 %add18, i32* %max_malloced_level19, align 8, !dbg !5925
  br label %if.end41, !dbg !5926

if.else20:                                        ; preds = %if.end13
  %36 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5927
  %max_malloced_level21 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %36, i32 0, i32 5, !dbg !5929
  %37 = load i32, i32* %max_malloced_level21, align 8, !dbg !5929
  %38 = load i32, i32* %level.addr, align 4, !dbg !5930
  %cmp22 = icmp sle i32 %37, %38, !dbg !5931
  br i1 %cmp22, label %if.then24, label %if.end40, !dbg !5932

if.then24:                                        ; preds = %if.else20
  %39 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5933
  %malloc_for_level25 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %39, i32 0, i32 4, !dbg !5933
  %40 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %malloc_for_level25, align 8, !dbg !5933
  %41 = bitcast %union.gimple_statement_d** %40 to i8*, !dbg !5933
  %42 = load i32, i32* %level.addr, align 4, !dbg !5933
  %add26 = add nsw i32 %42, 1, !dbg !5933
  %conv27 = sext i32 %add26 to i64, !dbg !5933
  %mul = mul i64 8, %conv27, !dbg !5933
  %call28 = call i8* @xrealloc(i8* %41, i64 %mul), !dbg !5933
  %43 = bitcast i8* %call28 to %union.gimple_statement_d**, !dbg !5933
  %44 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5935
  %malloc_for_level29 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %44, i32 0, i32 4, !dbg !5936
  store %union.gimple_statement_d** %43, %union.gimple_statement_d*** %malloc_for_level29, align 8, !dbg !5937
  %45 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5938
  %malloc_for_level30 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %45, i32 0, i32 4, !dbg !5939
  %46 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %malloc_for_level30, align 8, !dbg !5939
  %47 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5940
  %max_malloced_level31 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %47, i32 0, i32 5, !dbg !5941
  %48 = load i32, i32* %max_malloced_level31, align 8, !dbg !5941
  %add32 = add nsw i32 %48, 1, !dbg !5942
  %idxprom33 = sext i32 %add32 to i64, !dbg !5938
  %arrayidx34 = getelementptr inbounds %union.gimple_statement_d*, %union.gimple_statement_d** %46, i64 %idxprom33, !dbg !5938
  %49 = bitcast %union.gimple_statement_d** %arrayidx34 to i8*, !dbg !5943
  %50 = load i32, i32* %level.addr, align 4, !dbg !5944
  %51 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5945
  %max_malloced_level35 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %51, i32 0, i32 5, !dbg !5946
  %52 = load i32, i32* %max_malloced_level35, align 8, !dbg !5946
  %sub = sub nsw i32 %50, %52, !dbg !5947
  %conv36 = sext i32 %sub to i64, !dbg !5948
  %mul37 = mul i64 %conv36, 8, !dbg !5949
  call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 %mul37, i1 false), !dbg !5943
  %53 = load i32, i32* %level.addr, align 4, !dbg !5950
  %add38 = add nsw i32 %53, 1, !dbg !5951
  %54 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5952
  %max_malloced_level39 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %54, i32 0, i32 5, !dbg !5953
  store i32 %add38, i32* %max_malloced_level39, align 8, !dbg !5954
  br label %if.end40, !dbg !5955

if.end40:                                         ; preds = %if.then24, %if.else20
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then16
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5956
  %56 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !5957
  %malloc_for_level42 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %56, i32 0, i32 4, !dbg !5958
  %57 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %malloc_for_level42, align 8, !dbg !5958
  %58 = load i32, i32* %level.addr, align 4, !dbg !5959
  %idxprom43 = sext i32 %58 to i64, !dbg !5957
  %arrayidx44 = getelementptr inbounds %union.gimple_statement_d*, %union.gimple_statement_d** %57, i64 %idxprom43, !dbg !5957
  store %union.gimple_statement_d* %55, %union.gimple_statement_d** %arrayidx44, align 8, !dbg !5960
  br label %return, !dbg !5961

return:                                           ; preds = %if.end41, %if.else11
  ret void, !dbg !5961
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !5962 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5963, metadata !DIExpression()), !dbg !5964
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5965
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !5966
  ret %union.tree_node* %call, !dbg !5967
}

; Function Attrs: noinline nounwind uwtable
define internal void @collect_data_for_malloc_call(%union.gimple_statement_d* %stmt, %struct.malloc_call_data* %m_data) #0 !dbg !5968 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %m_data.addr = alloca %struct.malloc_call_data*, align 8
  %size_var = alloca %union.tree_node*, align 8
  %malloc_fn_decl = alloca %union.tree_node*, align 8
  %arg1 = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5972, metadata !DIExpression()), !dbg !5973
  store %struct.malloc_call_data* %m_data, %struct.malloc_call_data** %m_data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.malloc_call_data** %m_data.addr, metadata !5974, metadata !DIExpression()), !dbg !5975
  call void @llvm.dbg.declare(metadata %union.tree_node** %size_var, metadata !5976, metadata !DIExpression()), !dbg !5977
  store %union.tree_node* null, %union.tree_node** %size_var, align 8, !dbg !5977
  call void @llvm.dbg.declare(metadata %union.tree_node** %malloc_fn_decl, metadata !5978, metadata !DIExpression()), !dbg !5979
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1, metadata !5980, metadata !DIExpression()), !dbg !5981
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5982
  %call = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %0), !dbg !5982
  %tobool = icmp ne i8 %call, 0, !dbg !5982
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5982

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 196, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5982
  br label %cond.end, !dbg !5982

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5982

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5982
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5983
  %call1 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %1), !dbg !5984
  store %union.tree_node* %call1, %union.tree_node** %malloc_fn_decl, align 8, !dbg !5985
  %2 = load %union.tree_node*, %union.tree_node** %malloc_fn_decl, align 8, !dbg !5986
  %cmp = icmp eq %union.tree_node* %2, null, !dbg !5988
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5989

lor.lhs.false:                                    ; preds = %cond.end
  %3 = load %union.tree_node*, %union.tree_node** %malloc_fn_decl, align 8, !dbg !5990
  %function_decl = bitcast %union.tree_node* %3 to %struct.tree_function_decl*, !dbg !5990
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !5990
  %bf.load = load i32, i32* %function_code, align 8, !dbg !5990
  %bf.clear = and i32 %bf.load, 2047, !dbg !5990
  %cmp2 = icmp ne i32 %bf.clear, 491, !dbg !5991
  br i1 %cmp2, label %if.then, label %if.end, !dbg !5992

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  br label %if.end10, !dbg !5993

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5994
  %call3 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %4, i32 0), !dbg !5995
  store %union.tree_node* %call3, %union.tree_node** %arg1, align 8, !dbg !5996
  %5 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !5997
  store %union.tree_node* %5, %union.tree_node** %size_var, align 8, !dbg !5998
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5999
  %7 = load %struct.malloc_call_data*, %struct.malloc_call_data** %m_data.addr, align 8, !dbg !6000
  %call_stmt = getelementptr inbounds %struct.malloc_call_data, %struct.malloc_call_data* %7, i32 0, i32 0, !dbg !6001
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %call_stmt, align 8, !dbg !6002
  %8 = load %union.tree_node*, %union.tree_node** %size_var, align 8, !dbg !6003
  %9 = load %struct.malloc_call_data*, %struct.malloc_call_data** %m_data.addr, align 8, !dbg !6004
  %size_var4 = getelementptr inbounds %struct.malloc_call_data, %struct.malloc_call_data* %9, i32 0, i32 1, !dbg !6005
  store %union.tree_node* %8, %union.tree_node** %size_var4, align 8, !dbg !6006
  %10 = load %union.tree_node*, %union.tree_node** %size_var, align 8, !dbg !6007
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !6007
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !6007
  %bf.load5 = load i64, i64* %11, align 8, !dbg !6007
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !6007
  %bf.cast = trunc i64 %bf.clear6 to i32, !dbg !6007
  %cmp7 = icmp ne i32 %bf.cast, 32, !dbg !6009
  br i1 %cmp7, label %if.then8, label %if.else, !dbg !6010

if.then8:                                         ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %size_var, align 8, !dbg !6011
  %13 = load %struct.malloc_call_data*, %struct.malloc_call_data** %m_data.addr, align 8, !dbg !6012
  %malloc_size = getelementptr inbounds %struct.malloc_call_data, %struct.malloc_call_data* %13, i32 0, i32 2, !dbg !6013
  store %union.tree_node* %12, %union.tree_node** %malloc_size, align 8, !dbg !6014
  br label %if.end10, !dbg !6012

if.else:                                          ; preds = %if.end
  %14 = load %struct.malloc_call_data*, %struct.malloc_call_data** %m_data.addr, align 8, !dbg !6015
  %malloc_size9 = getelementptr inbounds %struct.malloc_call_data, %struct.malloc_call_data* %14, i32 0, i32 2, !dbg !6016
  store %union.tree_node* null, %union.tree_node** %malloc_size9, align 8, !dbg !6017
  br label %if.end10

if.end10:                                         ; preds = %if.then, %if.else, %if.then8
  ret void, !dbg !6018
}

declare dso_local i8* @xrealloc(i8*, i64) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !6019 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6020, metadata !DIExpression()), !dbg !6021
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !6022, metadata !DIExpression()), !dbg !6023
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6024
  %1 = load i32, i32* %index.addr, align 4, !dbg !6025
  %add = add i32 %1, 3, !dbg !6026
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !6027
  ret %union.tree_node* %call, !dbg !6028
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_type_size(%struct.matrix_info* %mi, %union.gimple_statement_d* %stmt, %union.tree_node* %ssa_var, i32 %current_indirect_level) #0 !dbg !6029 {
entry:
  %mi.addr = alloca %struct.matrix_info*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %ssa_var.addr = alloca %union.tree_node*, align 8
  %current_indirect_level.addr = alloca i32, align 4
  %lhs = alloca %union.tree_node*, align 8
  %type_size = alloca i64, align 8
  %l = alloca i32, align 4
  store %struct.matrix_info* %mi, %struct.matrix_info** %mi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %mi.addr, metadata !6032, metadata !DIExpression()), !dbg !6033
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6034, metadata !DIExpression()), !dbg !6035
  store %union.tree_node* %ssa_var, %union.tree_node** %ssa_var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ssa_var.addr, metadata !6036, metadata !DIExpression()), !dbg !6037
  store i32 %current_indirect_level, i32* %current_indirect_level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %current_indirect_level.addr, metadata !6038, metadata !DIExpression()), !dbg !6039
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6040, metadata !DIExpression()), !dbg !6041
  call void @llvm.dbg.declare(metadata i64* %type_size, metadata !6042, metadata !DIExpression()), !dbg !6043
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6044
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !6046
  %conv = zext i8 %call to i32, !dbg !6046
  %tobool = icmp ne i32 %conv, 0, !dbg !6046
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6047

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6048
  %call1 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %1), !dbg !6048
  %base = bitcast %union.tree_node* %call1 to %struct.tree_base*, !dbg !6048
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6048
  %bf.load = load i64, i64* %2, align 8, !dbg !6048
  %bf.clear = and i64 %bf.load, 65535, !dbg !6048
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6048
  %cmp = icmp eq i32 %bf.cast, 47, !dbg !6049
  br i1 %cmp, label %if.then, label %if.else, !dbg !6050

if.then:                                          ; preds = %land.lhs.true
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6051
  %call3 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %3), !dbg !6053
  store %union.tree_node* %call3, %union.tree_node** %lhs, align 8, !dbg !6054
  %4 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6055
  %exp = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !6055
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6055
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6055
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6055
  %ssa_name = bitcast %union.tree_node* %5 to %struct.tree_ssa_name*, !dbg !6055
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !6055
  %6 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6055
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !6055
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6055
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6055
  %base4 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !6055
  %8 = bitcast %struct.tree_base* %base4 to i64*, !dbg !6055
  %bf.load5 = load i64, i64* %8, align 8, !dbg !6055
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !6055
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !6055
  %cmp8 = icmp eq i32 %bf.cast7, 10, !dbg !6055
  br i1 %cmp8, label %cond.false, label %lor.lhs.false, !dbg !6055

lor.lhs.false:                                    ; preds = %if.then
  %9 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6055
  %exp10 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !6055
  %operands11 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp10, i32 0, i32 3, !dbg !6055
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands11, i64 0, i64 0, !dbg !6055
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !6055
  %ssa_name13 = bitcast %union.tree_node* %10 to %struct.tree_ssa_name*, !dbg !6055
  %var14 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name13, i32 0, i32 1, !dbg !6055
  %11 = load %union.tree_node*, %union.tree_node** %var14, align 8, !dbg !6055
  %common15 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !6055
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !6055
  %12 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !6055
  %base17 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !6055
  %13 = bitcast %struct.tree_base* %base17 to i64*, !dbg !6055
  %bf.load18 = load i64, i64* %13, align 8, !dbg !6055
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !6055
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !6055
  %cmp21 = icmp eq i32 %bf.cast20, 12, !dbg !6055
  br i1 %cmp21, label %cond.false, label %cond.true, !dbg !6055

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 1001, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6055
  br label %cond.end, !dbg !6055

cond.false:                                       ; preds = %lor.lhs.false, %if.then
  br label %cond.end, !dbg !6055

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6055
  %14 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6056
  %exp23 = bitcast %union.tree_node* %14 to %struct.tree_exp*, !dbg !6056
  %operands24 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp23, i32 0, i32 3, !dbg !6056
  %arrayidx25 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands24, i64 0, i64 0, !dbg !6056
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx25, align 8, !dbg !6056
  %ssa_name26 = bitcast %union.tree_node* %15 to %struct.tree_ssa_name*, !dbg !6056
  %var27 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name26, i32 0, i32 1, !dbg !6056
  %16 = load %union.tree_node*, %union.tree_node** %var27, align 8, !dbg !6056
  %common28 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !6056
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !6056
  %17 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !6056
  %common30 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !6056
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !6056
  %18 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !6056
  %call32 = call i64 @int_size_in_bytes(%union.tree_node* %18), !dbg !6057
  store i64 %call32, i64* %type_size, align 8, !dbg !6058
  br label %if.end, !dbg !6059

if.else:                                          ; preds = %land.lhs.true, %entry
  %19 = load %union.tree_node*, %union.tree_node** %ssa_var.addr, align 8, !dbg !6060
  %common33 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !6060
  %type34 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 2, !dbg !6060
  %20 = load %union.tree_node*, %union.tree_node** %type34, align 8, !dbg !6060
  %call35 = call i64 @int_size_in_bytes(%union.tree_node* %20), !dbg !6061
  store i64 %call35, i64* %type_size, align 8, !dbg !6062
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  %21 = load i64, i64* %type_size, align 8, !dbg !6063
  %cmp36 = icmp sle i64 %21, 0, !dbg !6065
  br i1 %cmp36, label %if.then38, label %if.else39, !dbg !6066

if.then38:                                        ; preds = %if.end
  %22 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6067
  %23 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6068
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6069
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %22, i32 %23, %union.gimple_statement_d* %24), !dbg !6070
  br label %if.end85, !dbg !6070

if.else39:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %l, metadata !6071, metadata !DIExpression()), !dbg !6073
  %25 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6074
  store i32 %25, i32* %l, align 4, !dbg !6073
  %26 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6075
  %dimension_type_size = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %26, i32 0, i32 11, !dbg !6077
  %27 = load i64*, i64** %dimension_type_size, align 8, !dbg !6077
  %tobool40 = icmp ne i64* %27, null, !dbg !6075
  br i1 %tobool40, label %if.else46, label %if.then41, !dbg !6078

if.then41:                                        ; preds = %if.else39
  %28 = load i32, i32* %l, align 4, !dbg !6079
  %add = add nsw i32 %28, 1, !dbg !6081
  %conv42 = sext i32 %add to i64, !dbg !6079
  %call43 = call i8* @xcalloc(i64 %conv42, i64 8), !dbg !6082
  %29 = bitcast i8* %call43 to i64*, !dbg !6083
  %30 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6084
  %dimension_type_size44 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %30, i32 0, i32 11, !dbg !6085
  store i64* %29, i64** %dimension_type_size44, align 8, !dbg !6086
  %31 = load i32, i32* %l, align 4, !dbg !6087
  %add45 = add nsw i32 %31, 1, !dbg !6088
  %32 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6089
  %dimension_type_size_len = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %32, i32 0, i32 12, !dbg !6090
  store i32 %add45, i32* %dimension_type_size_len, align 8, !dbg !6091
  br label %if.end67, !dbg !6092

if.else46:                                        ; preds = %if.else39
  %33 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6093
  %dimension_type_size_len47 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %33, i32 0, i32 12, !dbg !6095
  %34 = load i32, i32* %dimension_type_size_len47, align 8, !dbg !6095
  %35 = load i32, i32* %l, align 4, !dbg !6096
  %add48 = add nsw i32 %35, 1, !dbg !6097
  %cmp49 = icmp slt i32 %34, %add48, !dbg !6098
  br i1 %cmp49, label %if.then51, label %if.end66, !dbg !6099

if.then51:                                        ; preds = %if.else46
  %36 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6100
  %dimension_type_size52 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %36, i32 0, i32 11, !dbg !6102
  %37 = load i64*, i64** %dimension_type_size52, align 8, !dbg !6102
  %38 = bitcast i64* %37 to i8*, !dbg !6100
  %39 = load i32, i32* %l, align 4, !dbg !6103
  %add53 = add nsw i32 %39, 1, !dbg !6104
  %conv54 = sext i32 %add53 to i64, !dbg !6105
  %mul = mul i64 %conv54, 8, !dbg !6106
  %call55 = call i8* @xrealloc(i8* %38, i64 %mul), !dbg !6107
  %40 = bitcast i8* %call55 to i64*, !dbg !6108
  %41 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6109
  %dimension_type_size56 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %41, i32 0, i32 11, !dbg !6110
  store i64* %40, i64** %dimension_type_size56, align 8, !dbg !6111
  %42 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6112
  %dimension_type_size57 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %42, i32 0, i32 11, !dbg !6113
  %43 = load i64*, i64** %dimension_type_size57, align 8, !dbg !6113
  %44 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6114
  %dimension_type_size_len58 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %44, i32 0, i32 12, !dbg !6115
  %45 = load i32, i32* %dimension_type_size_len58, align 8, !dbg !6115
  %idxprom = sext i32 %45 to i64, !dbg !6112
  %arrayidx59 = getelementptr inbounds i64, i64* %43, i64 %idxprom, !dbg !6112
  %46 = bitcast i64* %arrayidx59 to i8*, !dbg !6116
  %47 = load i32, i32* %l, align 4, !dbg !6117
  %add60 = add nsw i32 %47, 1, !dbg !6118
  %48 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6119
  %dimension_type_size_len61 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %48, i32 0, i32 12, !dbg !6120
  %49 = load i32, i32* %dimension_type_size_len61, align 8, !dbg !6120
  %sub = sub nsw i32 %add60, %49, !dbg !6121
  %conv62 = sext i32 %sub to i64, !dbg !6122
  %mul63 = mul i64 %conv62, 8, !dbg !6123
  call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 %mul63, i1 false), !dbg !6116
  %50 = load i32, i32* %l, align 4, !dbg !6124
  %add64 = add nsw i32 %50, 1, !dbg !6125
  %51 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6126
  %dimension_type_size_len65 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %51, i32 0, i32 12, !dbg !6127
  store i32 %add64, i32* %dimension_type_size_len65, align 8, !dbg !6128
  br label %if.end66, !dbg !6129

if.end66:                                         ; preds = %if.then51, %if.else46
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.then41
  %52 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6130
  %dimension_type_size68 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %52, i32 0, i32 11, !dbg !6132
  %53 = load i64*, i64** %dimension_type_size68, align 8, !dbg !6132
  %54 = load i32, i32* %l, align 4, !dbg !6133
  %idxprom69 = sext i32 %54 to i64, !dbg !6130
  %arrayidx70 = getelementptr inbounds i64, i64* %53, i64 %idxprom69, !dbg !6130
  %55 = load i64, i64* %arrayidx70, align 8, !dbg !6130
  %tobool71 = icmp ne i64 %55, 0, !dbg !6130
  br i1 %tobool71, label %if.else76, label %if.then72, !dbg !6134

if.then72:                                        ; preds = %if.end67
  %56 = load i64, i64* %type_size, align 8, !dbg !6135
  %57 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6136
  %dimension_type_size73 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %57, i32 0, i32 11, !dbg !6137
  %58 = load i64*, i64** %dimension_type_size73, align 8, !dbg !6137
  %59 = load i32, i32* %l, align 4, !dbg !6138
  %idxprom74 = sext i32 %59 to i64, !dbg !6136
  %arrayidx75 = getelementptr inbounds i64, i64* %58, i64 %idxprom74, !dbg !6136
  store i64 %56, i64* %arrayidx75, align 8, !dbg !6139
  br label %if.end84, !dbg !6136

if.else76:                                        ; preds = %if.end67
  %60 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6140
  %dimension_type_size77 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %60, i32 0, i32 11, !dbg !6142
  %61 = load i64*, i64** %dimension_type_size77, align 8, !dbg !6142
  %62 = load i32, i32* %l, align 4, !dbg !6143
  %idxprom78 = sext i32 %62 to i64, !dbg !6140
  %arrayidx79 = getelementptr inbounds i64, i64* %61, i64 %idxprom78, !dbg !6140
  %63 = load i64, i64* %arrayidx79, align 8, !dbg !6140
  %64 = load i64, i64* %type_size, align 8, !dbg !6144
  %cmp80 = icmp ne i64 %63, %64, !dbg !6145
  br i1 %cmp80, label %if.then82, label %if.end83, !dbg !6146

if.then82:                                        ; preds = %if.else76
  %65 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6147
  %66 = load i32, i32* %l, align 4, !dbg !6148
  %67 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6149
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %65, i32 %66, %union.gimple_statement_d* %67), !dbg !6150
  br label %if.end83, !dbg !6150

if.end83:                                         ; preds = %if.then82, %if.else76
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.then72
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %if.then38
  ret void, !dbg !6151
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !6152 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6156, metadata !DIExpression()), !dbg !6157
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6158, metadata !DIExpression()), !dbg !6159
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6160
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !6160
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !6160
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6161
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !6162
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !6163
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6164
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !6165
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !6165
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !6166
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6166
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6167
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !6168
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6169
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6170
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %6), !dbg !6172
  %tobool = icmp ne i8 %call, 0, !dbg !6172
  br i1 %tobool, label %if.then, label %if.end, !dbg !6173

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6174
  br label %return, !dbg !6174

if.end:                                           ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6175
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !6176
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !6176
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6177
  br label %return, !dbg !6177

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6178
  ret %struct.ssa_use_operand_d* %9, !dbg !6178
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6179 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6184, metadata !DIExpression()), !dbg !6185
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6186
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !6187
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6187
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6188
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !6189
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !6189
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !6190
  %conv = zext i1 %cmp to i32, !dbg !6190
  %conv1 = trunc i32 %conv to i8, !dbg !6191
  ret i8 %conv1, !dbg !6192
}

; Function Attrs: noinline nounwind uwtable
define internal void @analyze_accesses_for_phi_node(%struct.matrix_info* %mi, %union.gimple_statement_d* %use_stmt, i32 %current_indirect_level, %struct.simple_bitmap_def* %visited, i8 zeroext %record_accesses) #0 !dbg !6193 {
entry:
  %mi.addr = alloca %struct.matrix_info*, align 8
  %use_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %current_indirect_level.addr = alloca i32, align 4
  %visited.addr = alloca %struct.simple_bitmap_def*, align 8
  %record_accesses.addr = alloca i8, align 1
  %tmp_maphi = alloca %struct.matrix_access_phi_node, align 8
  %maphi = alloca %struct.matrix_access_phi_node*, align 8
  %pmaphi = alloca %struct.matrix_access_phi_node**, align 8
  %level = alloca i32, align 4
  %j = alloca i64, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %def = alloca %union.tree_node*, align 8
  store %struct.matrix_info* %mi, %struct.matrix_info** %mi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %mi.addr, metadata !6196, metadata !DIExpression()), !dbg !6197
  store %union.gimple_statement_d* %use_stmt, %union.gimple_statement_d** %use_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt.addr, metadata !6198, metadata !DIExpression()), !dbg !6199
  store i32 %current_indirect_level, i32* %current_indirect_level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %current_indirect_level.addr, metadata !6200, metadata !DIExpression()), !dbg !6201
  store %struct.simple_bitmap_def* %visited, %struct.simple_bitmap_def** %visited.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %visited.addr, metadata !6202, metadata !DIExpression()), !dbg !6203
  store i8 %record_accesses, i8* %record_accesses.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %record_accesses.addr, metadata !6204, metadata !DIExpression()), !dbg !6205
  call void @llvm.dbg.declare(metadata %struct.matrix_access_phi_node* %tmp_maphi, metadata !6206, metadata !DIExpression()), !dbg !6207
  call void @llvm.dbg.declare(metadata %struct.matrix_access_phi_node** %maphi, metadata !6208, metadata !DIExpression()), !dbg !6209
  call void @llvm.dbg.declare(metadata %struct.matrix_access_phi_node*** %pmaphi, metadata !6210, metadata !DIExpression()), !dbg !6211
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6212
  %phi = getelementptr inbounds %struct.matrix_access_phi_node, %struct.matrix_access_phi_node* %tmp_maphi, i32 0, i32 0, !dbg !6213
  store %union.gimple_statement_d* %0, %union.gimple_statement_d** %phi, align 8, !dbg !6214
  %1 = load %struct.htab*, %struct.htab** @htab_mat_acc_phi_nodes, align 8, !dbg !6215
  %2 = bitcast %struct.matrix_access_phi_node* %tmp_maphi to i8*, !dbg !6217
  %call = call i8* @htab_find(%struct.htab* %1, i8* %2), !dbg !6218
  %3 = bitcast i8* %call to %struct.matrix_access_phi_node*, !dbg !6219
  store %struct.matrix_access_phi_node* %3, %struct.matrix_access_phi_node** %maphi, align 8, !dbg !6220
  %tobool = icmp ne %struct.matrix_access_phi_node* %3, null, !dbg !6220
  br i1 %tobool, label %if.then, label %if.end19, !dbg !6221

if.then:                                          ; preds = %entry
  %4 = load %struct.matrix_access_phi_node*, %struct.matrix_access_phi_node** %maphi, align 8, !dbg !6222
  %indirection_level = getelementptr inbounds %struct.matrix_access_phi_node, %struct.matrix_access_phi_node* %4, i32 0, i32 1, !dbg !6225
  %5 = load i32, i32* %indirection_level, align 8, !dbg !6225
  %6 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6226
  %cmp = icmp eq i32 %5, %6, !dbg !6227
  br i1 %cmp, label %if.then1, label %if.else, !dbg !6228

if.then1:                                         ; preds = %if.then
  br label %if.end48, !dbg !6229

if.else:                                          ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %level, metadata !6230, metadata !DIExpression()), !dbg !6232
  %7 = load %struct.matrix_access_phi_node*, %struct.matrix_access_phi_node** %maphi, align 8, !dbg !6233
  %indirection_level2 = getelementptr inbounds %struct.matrix_access_phi_node, %struct.matrix_access_phi_node* %7, i32 0, i32 1, !dbg !6233
  %8 = load i32, i32* %indirection_level2, align 8, !dbg !6233
  %9 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6233
  %cmp3 = icmp slt i32 %8, %9, !dbg !6233
  br i1 %cmp3, label %cond.true, label %cond.false, !dbg !6233

cond.true:                                        ; preds = %if.else
  %10 = load %struct.matrix_access_phi_node*, %struct.matrix_access_phi_node** %maphi, align 8, !dbg !6233
  %indirection_level4 = getelementptr inbounds %struct.matrix_access_phi_node, %struct.matrix_access_phi_node* %10, i32 0, i32 1, !dbg !6233
  %11 = load i32, i32* %indirection_level4, align 8, !dbg !6233
  br label %cond.end, !dbg !6233

cond.false:                                       ; preds = %if.else
  %12 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6233
  br label %cond.end, !dbg !6233

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %11, %cond.true ], [ %12, %cond.false ], !dbg !6233
  store i32 %cond, i32* %level, align 4, !dbg !6232
  call void @llvm.dbg.declare(metadata i64* %j, metadata !6234, metadata !DIExpression()), !dbg !6235
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6236, metadata !DIExpression()), !dbg !6237
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !6237
  %13 = load i32, i32* %level, align 4, !dbg !6238
  %14 = load %struct.matrix_access_phi_node*, %struct.matrix_access_phi_node** %maphi, align 8, !dbg !6239
  %indirection_level5 = getelementptr inbounds %struct.matrix_access_phi_node, %struct.matrix_access_phi_node* %14, i32 0, i32 1, !dbg !6240
  store i32 %13, i32* %indirection_level5, align 8, !dbg !6241
  store i64 0, i64* %j, align 8, !dbg !6242
  br label %for.cond, !dbg !6244

for.cond:                                         ; preds = %for.inc, %cond.end
  %15 = load i64, i64* %j, align 8, !dbg !6245
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6247
  %call6 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %16), !dbg !6248
  %conv = zext i32 %call6 to i64, !dbg !6248
  %cmp7 = icmp ult i64 %15, %conv, !dbg !6249
  br i1 %cmp7, label %for.body, label %for.end, !dbg !6250

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !6251, metadata !DIExpression()), !dbg !6253
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6254
  %18 = load i64, i64* %j, align 8, !dbg !6254
  %conv9 = trunc i64 %18 to i32, !dbg !6254
  %call10 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %17, i32 %conv9), !dbg !6254
  %call11 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call10), !dbg !6254
  store %union.tree_node* %call11, %union.tree_node** %def, align 8, !dbg !6253
  %19 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !6255
  %ssa_name = bitcast %union.tree_node* %19 to %struct.tree_ssa_name*, !dbg !6255
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6255
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6255
  %call12 = call i32 @gimple_code(%union.gimple_statement_d* %20), !dbg !6257
  %cmp13 = icmp ne i32 %call12, 16, !dbg !6258
  br i1 %cmp13, label %if.then15, label %if.end, !dbg !6259

if.then15:                                        ; preds = %for.body
  %21 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !6260
  %ssa_name16 = bitcast %union.tree_node* %21 to %struct.tree_ssa_name*, !dbg !6260
  %def_stmt17 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name16, i32 0, i32 2, !dbg !6260
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt17, align 8, !dbg !6260
  store %union.gimple_statement_d* %22, %union.gimple_statement_d** %stmt, align 8, !dbg !6261
  br label %if.end, !dbg !6262

if.end:                                           ; preds = %if.then15, %for.body
  br label %for.inc, !dbg !6263

for.inc:                                          ; preds = %if.end
  %23 = load i64, i64* %j, align 8, !dbg !6264
  %inc = add i64 %23, 1, !dbg !6264
  store i64 %inc, i64* %j, align 8, !dbg !6264
  br label %for.cond, !dbg !6265, !llvm.loop !6266

for.end:                                          ; preds = %for.cond
  %24 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6268
  %25 = load i32, i32* %level, align 4, !dbg !6269
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6270
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %24, i32 %25, %union.gimple_statement_d* %26), !dbg !6271
  br label %if.end18

if.end18:                                         ; preds = %for.end
  br label %if.end48, !dbg !6272

if.end19:                                         ; preds = %entry
  %call20 = call i8* @xcalloc(i64 1, i64 16), !dbg !6273
  %27 = bitcast i8* %call20 to %struct.matrix_access_phi_node*, !dbg !6274
  store %struct.matrix_access_phi_node* %27, %struct.matrix_access_phi_node** %maphi, align 8, !dbg !6275
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6276
  %29 = load %struct.matrix_access_phi_node*, %struct.matrix_access_phi_node** %maphi, align 8, !dbg !6277
  %phi21 = getelementptr inbounds %struct.matrix_access_phi_node, %struct.matrix_access_phi_node* %29, i32 0, i32 0, !dbg !6278
  store %union.gimple_statement_d* %28, %union.gimple_statement_d** %phi21, align 8, !dbg !6279
  %30 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6280
  %31 = load %struct.matrix_access_phi_node*, %struct.matrix_access_phi_node** %maphi, align 8, !dbg !6281
  %indirection_level22 = getelementptr inbounds %struct.matrix_access_phi_node, %struct.matrix_access_phi_node* %31, i32 0, i32 1, !dbg !6282
  store i32 %30, i32* %indirection_level22, align 8, !dbg !6283
  %32 = load %struct.htab*, %struct.htab** @htab_mat_acc_phi_nodes, align 8, !dbg !6284
  %33 = load %struct.matrix_access_phi_node*, %struct.matrix_access_phi_node** %maphi, align 8, !dbg !6285
  %34 = bitcast %struct.matrix_access_phi_node* %33 to i8*, !dbg !6285
  %call23 = call i8** @htab_find_slot(%struct.htab* %32, i8* %34, i32 1), !dbg !6286
  %35 = bitcast i8** %call23 to %struct.matrix_access_phi_node**, !dbg !6287
  store %struct.matrix_access_phi_node** %35, %struct.matrix_access_phi_node*** %pmaphi, align 8, !dbg !6288
  %36 = load %struct.matrix_access_phi_node**, %struct.matrix_access_phi_node*** %pmaphi, align 8, !dbg !6289
  %tobool24 = icmp ne %struct.matrix_access_phi_node** %36, null, !dbg !6289
  br i1 %tobool24, label %cond.false26, label %cond.true25, !dbg !6289

cond.true25:                                      ; preds = %if.end19
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 1174, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6289
  br label %cond.end27, !dbg !6289

cond.false26:                                     ; preds = %if.end19
  br label %cond.end27, !dbg !6289

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond28 = phi i32 [ 0, %cond.true25 ], [ 0, %cond.false26 ], !dbg !6289
  %37 = load %struct.matrix_access_phi_node*, %struct.matrix_access_phi_node** %maphi, align 8, !dbg !6290
  %38 = load %struct.matrix_access_phi_node**, %struct.matrix_access_phi_node*** %pmaphi, align 8, !dbg !6291
  store %struct.matrix_access_phi_node* %37, %struct.matrix_access_phi_node** %38, align 8, !dbg !6292
  %39 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !6293
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %39, i32 0, i32 3, !dbg !6293
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6293
  %call29 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %40), !dbg !6293
  %call30 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call29), !dbg !6293
  %ssa_name31 = bitcast %union.tree_node* %call30 to %struct.tree_ssa_name*, !dbg !6293
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name31, i32 0, i32 3, !dbg !6293
  %41 = load i32, i32* %version, align 8, !dbg !6293
  %div = udiv i32 %41, 64, !dbg !6293
  %idxprom = zext i32 %div to i64, !dbg !6293
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !6293
  %42 = load i64, i64* %arrayidx, align 8, !dbg !6293
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6293
  %call32 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %43), !dbg !6293
  %call33 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call32), !dbg !6293
  %ssa_name34 = bitcast %union.tree_node* %call33 to %struct.tree_ssa_name*, !dbg !6293
  %version35 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name34, i32 0, i32 3, !dbg !6293
  %44 = load i32, i32* %version35, align 8, !dbg !6293
  %rem = urem i32 %44, 64, !dbg !6293
  %sh_prom = zext i32 %rem to i64, !dbg !6293
  %shr = lshr i64 %42, %sh_prom, !dbg !6293
  %and = and i64 %shr, 1, !dbg !6293
  %tobool36 = icmp ne i64 %and, 0, !dbg !6293
  br i1 %tobool36, label %if.end48, label %if.then37, !dbg !6295

if.then37:                                        ; preds = %cond.end27
  %45 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !6296
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6298
  %call38 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %46), !dbg !6298
  %call39 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call38), !dbg !6298
  %ssa_name40 = bitcast %union.tree_node* %call39 to %struct.tree_ssa_name*, !dbg !6298
  %version41 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name40, i32 0, i32 3, !dbg !6298
  %47 = load i32, i32* %version41, align 8, !dbg !6298
  call void @SET_BIT(%struct.simple_bitmap_def* %45, i32 %47), !dbg !6299
  %48 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6300
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6301
  %call42 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %49), !dbg !6301
  %call43 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call42), !dbg !6301
  %50 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6302
  %51 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !6303
  %52 = load i8, i8* %record_accesses.addr, align 1, !dbg !6304
  call void @analyze_matrix_accesses(%struct.matrix_info* %48, %union.tree_node* %call43, i32 %50, i8 zeroext 0, %struct.simple_bitmap_def* %51, i8 zeroext %52), !dbg !6305
  %53 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !6306
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6307
  %call44 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %54), !dbg !6307
  %call45 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call44), !dbg !6307
  %ssa_name46 = bitcast %union.tree_node* %call45 to %struct.tree_ssa_name*, !dbg !6307
  %version47 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name46, i32 0, i32 3, !dbg !6307
  %55 = load i32, i32* %version47, align 8, !dbg !6307
  call void @RESET_BIT(%struct.simple_bitmap_def* %53, i32 %55), !dbg !6308
  br label %if.end48, !dbg !6309

if.end48:                                         ; preds = %if.then1, %if.end18, %if.then37, %cond.end27
  ret void, !dbg !6310
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @analyze_accesses_for_call_stmt(%struct.matrix_info* %mi, %union.tree_node* %ssa_var, %union.gimple_statement_d* %use_stmt, i32 %current_indirect_level) #0 !dbg !6311 {
entry:
  %retval = alloca i32, align 4
  %mi.addr = alloca %struct.matrix_info*, align 8
  %ssa_var.addr = alloca %union.tree_node*, align 8
  %use_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %current_indirect_level.addr = alloca i32, align 4
  %fndecl = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %lhs_acc = alloca %struct.ssa_acc_in_tree, align 8
  %rhs_acc = alloca %struct.ssa_acc_in_tree, align 8
  %l = alloca i32, align 4
  %l58 = alloca i32, align 4
  store %struct.matrix_info* %mi, %struct.matrix_info** %mi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %mi.addr, metadata !6314, metadata !DIExpression()), !dbg !6315
  store %union.tree_node* %ssa_var, %union.tree_node** %ssa_var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ssa_var.addr, metadata !6316, metadata !DIExpression()), !dbg !6317
  store %union.gimple_statement_d* %use_stmt, %union.gimple_statement_d** %use_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt.addr, metadata !6318, metadata !DIExpression()), !dbg !6319
  store i32 %current_indirect_level, i32* %current_indirect_level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %current_indirect_level.addr, metadata !6320, metadata !DIExpression()), !dbg !6321
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !6322, metadata !DIExpression()), !dbg !6323
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6324
  %call = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %0), !dbg !6325
  store %union.tree_node* %call, %union.tree_node** %fndecl, align 8, !dbg !6323
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6326
  %call1 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %1), !dbg !6328
  %tobool = icmp ne %union.tree_node* %call1, null, !dbg !6328
  br i1 %tobool, label %if.then, label %if.end35, !dbg !6329

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6330, metadata !DIExpression()), !dbg !6332
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6333
  %call2 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %2), !dbg !6334
  store %union.tree_node* %call2, %union.tree_node** %lhs, align 8, !dbg !6332
  call void @llvm.dbg.declare(metadata %struct.ssa_acc_in_tree* %lhs_acc, metadata !6335, metadata !DIExpression()), !dbg !6344
  call void @llvm.dbg.declare(metadata %struct.ssa_acc_in_tree* %rhs_acc, metadata !6345, metadata !DIExpression()), !dbg !6346
  %3 = bitcast %struct.ssa_acc_in_tree* %lhs_acc to i8*, !dbg !6347
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 48, i1 false), !dbg !6347
  %4 = bitcast %struct.ssa_acc_in_tree* %rhs_acc to i8*, !dbg !6348
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 48, i1 false), !dbg !6348
  %5 = load %union.tree_node*, %union.tree_node** %ssa_var.addr, align 8, !dbg !6349
  %ssa_var3 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %lhs_acc, i32 0, i32 0, !dbg !6350
  store %union.tree_node* %5, %union.tree_node** %ssa_var3, align 8, !dbg !6351
  %t_code = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %lhs_acc, i32 0, i32 1, !dbg !6352
  store i32 0, i32* %t_code, align 8, !dbg !6353
  %6 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6354
  call void @ssa_accessed_in_tree(%union.tree_node* %6, %struct.ssa_acc_in_tree* %lhs_acc), !dbg !6355
  %7 = load %union.tree_node*, %union.tree_node** %ssa_var.addr, align 8, !dbg !6356
  %ssa_var4 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %rhs_acc, i32 0, i32 0, !dbg !6357
  store %union.tree_node* %7, %union.tree_node** %ssa_var4, align 8, !dbg !6358
  %t_code5 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %rhs_acc, i32 0, i32 1, !dbg !6359
  store i32 0, i32* %t_code5, align 8, !dbg !6360
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6361
  call void @ssa_accessed_in_call_rhs(%union.gimple_statement_d* %8, %struct.ssa_acc_in_tree* %rhs_acc), !dbg !6362
  %var_found = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %lhs_acc, i32 0, i32 5, !dbg !6363
  %9 = load i8, i8* %var_found, align 8, !dbg !6363
  %conv = zext i8 %9 to i32, !dbg !6365
  %tobool6 = icmp ne i32 %conv, 0, !dbg !6365
  br i1 %tobool6, label %land.lhs.true, label %lor.lhs.false, !dbg !6366

land.lhs.true:                                    ; preds = %if.then
  %var_found7 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %rhs_acc, i32 0, i32 5, !dbg !6367
  %10 = load i8, i8* %var_found7, align 8, !dbg !6367
  %conv8 = zext i8 %10 to i32, !dbg !6368
  %tobool9 = icmp ne i32 %conv8, 0, !dbg !6368
  br i1 %tobool9, label %land.lhs.true10, label %lor.lhs.false, !dbg !6369

land.lhs.true10:                                  ; preds = %land.lhs.true
  %t_code11 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %lhs_acc, i32 0, i32 1, !dbg !6370
  %11 = load i32, i32* %t_code11, align 8, !dbg !6370
  %cmp = icmp eq i32 %11, 47, !dbg !6371
  br i1 %cmp, label %if.then18, label %lor.lhs.false, !dbg !6372

lor.lhs.false:                                    ; preds = %land.lhs.true10, %land.lhs.true, %if.then
  %var_found13 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %rhs_acc, i32 0, i32 5, !dbg !6373
  %12 = load i8, i8* %var_found13, align 8, !dbg !6373
  %tobool14 = icmp ne i8 %12, 0, !dbg !6374
  br i1 %tobool14, label %if.end, label %land.lhs.true15, !dbg !6375

land.lhs.true15:                                  ; preds = %lor.lhs.false
  %var_found16 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %lhs_acc, i32 0, i32 5, !dbg !6376
  %13 = load i8, i8* %var_found16, align 8, !dbg !6376
  %tobool17 = icmp ne i8 %13, 0, !dbg !6377
  br i1 %tobool17, label %if.end, label %if.then18, !dbg !6378

if.then18:                                        ; preds = %land.lhs.true15, %land.lhs.true10
  %14 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6379
  %15 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6381
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6382
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %14, i32 %15, %union.gimple_statement_d* %16), !dbg !6383
  %17 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6384
  store i32 %17, i32* %retval, align 4, !dbg !6385
  br label %return, !dbg !6385

if.end:                                           ; preds = %land.lhs.true15, %lor.lhs.false
  %var_found19 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %rhs_acc, i32 0, i32 5, !dbg !6386
  %18 = load i8, i8* %var_found19, align 8, !dbg !6386
  %tobool20 = icmp ne i8 %18, 0, !dbg !6386
  br i1 %tobool20, label %lor.lhs.false21, label %cond.false, !dbg !6386

lor.lhs.false21:                                  ; preds = %if.end
  %var_found22 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %lhs_acc, i32 0, i32 5, !dbg !6386
  %19 = load i8, i8* %var_found22, align 8, !dbg !6386
  %tobool23 = icmp ne i8 %19, 0, !dbg !6386
  br i1 %tobool23, label %cond.true, label %cond.false, !dbg !6386

cond.true:                                        ; preds = %lor.lhs.false21
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 1082, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6386
  br label %cond.end, !dbg !6386

cond.false:                                       ; preds = %lor.lhs.false21, %if.end
  br label %cond.end, !dbg !6386

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6386
  %var_found24 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %lhs_acc, i32 0, i32 5, !dbg !6387
  %20 = load i8, i8* %var_found24, align 8, !dbg !6387
  %tobool25 = icmp ne i8 %20, 0, !dbg !6389
  br i1 %tobool25, label %if.then26, label %if.end34, !dbg !6390

if.then26:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i32* %l, metadata !6391, metadata !DIExpression()), !dbg !6393
  %21 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6394
  %add = add nsw i32 %21, 1, !dbg !6395
  store i32 %add, i32* %l, align 4, !dbg !6393
  %t_code27 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %lhs_acc, i32 0, i32 1, !dbg !6396
  %22 = load i32, i32* %t_code27, align 8, !dbg !6396
  %cmp28 = icmp eq i32 %22, 47, !dbg !6396
  br i1 %cmp28, label %cond.false31, label %cond.true30, !dbg !6396

cond.true30:                                      ; preds = %if.then26
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 1090, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6396
  br label %cond.end32, !dbg !6396

cond.false31:                                     ; preds = %if.then26
  br label %cond.end32, !dbg !6396

cond.end32:                                       ; preds = %cond.false31, %cond.true30
  %cond33 = phi i32 [ 0, %cond.true30 ], [ 0, %cond.false31 ], !dbg !6396
  %23 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6397
  %24 = load i32, i32* %l, align 4, !dbg !6398
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6399
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %23, i32 %24, %union.gimple_statement_d* %25), !dbg !6400
  %26 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6401
  store i32 %26, i32* %retval, align 4, !dbg !6402
  br label %return, !dbg !6402

if.end34:                                         ; preds = %cond.end
  br label %if.end35, !dbg !6403

if.end35:                                         ; preds = %if.end34, %entry
  %27 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6404
  %tobool36 = icmp ne %union.tree_node* %27, null, !dbg !6404
  br i1 %tobool36, label %if.then37, label %if.end68, !dbg !6406

if.then37:                                        ; preds = %if.end35
  %28 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6407
  %function_decl = bitcast %union.tree_node* %28 to %struct.tree_function_decl*, !dbg !6407
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !6407
  %bf.load = load i32, i32* %function_code, align 8, !dbg !6407
  %bf.clear = and i32 %bf.load, 2047, !dbg !6407
  %cmp38 = icmp ne i32 %bf.clear, 455, !dbg !6410
  br i1 %cmp38, label %if.then40, label %if.else, !dbg !6411

if.then40:                                        ; preds = %if.then37
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6412
  %tobool41 = icmp ne %struct._IO_FILE* %29, null, !dbg !6412
  br i1 %tobool41, label %if.then42, label %if.end46, !dbg !6415

if.then42:                                        ; preds = %if.then40
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6416
  %31 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6417
  %decl = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %31, i32 0, i32 0, !dbg !6418
  %32 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6418
  %call43 = call i8* @get_name(%union.tree_node* %32), !dbg !6419
  %33 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6420
  %call44 = call i8* @get_name(%union.tree_node* %33), !dbg !6421
  %34 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6422
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.6, i64 0, i64 0), i8* %call43, i8* %call44, i32 %34), !dbg !6423
  br label %if.end46, !dbg !6423

if.end46:                                         ; preds = %if.then42, %if.then40
  %35 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6424
  %36 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6425
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6426
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %35, i32 %36, %union.gimple_statement_d* %37), !dbg !6427
  br label %if.end67, !dbg !6428

if.else:                                          ; preds = %if.then37
  %38 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6429
  %free_stmts = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %38, i32 0, i32 8, !dbg !6431
  %39 = load %struct.free_info*, %struct.free_info** %free_stmts, align 8, !dbg !6431
  %40 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6432
  %idxprom = sext i32 %40 to i64, !dbg !6429
  %arrayidx = getelementptr inbounds %struct.free_info, %struct.free_info* %39, i64 %idxprom, !dbg !6429
  %stmt = getelementptr inbounds %struct.free_info, %struct.free_info* %arrayidx, i32 0, i32 0, !dbg !6433
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6433
  %cmp47 = icmp ne %union.gimple_statement_d* %41, null, !dbg !6434
  br i1 %cmp47, label %land.lhs.true49, label %if.else57, !dbg !6435

land.lhs.true49:                                  ; preds = %if.else
  %42 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6436
  %free_stmts50 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %42, i32 0, i32 8, !dbg !6437
  %43 = load %struct.free_info*, %struct.free_info** %free_stmts50, align 8, !dbg !6437
  %44 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6438
  %idxprom51 = sext i32 %44 to i64, !dbg !6436
  %arrayidx52 = getelementptr inbounds %struct.free_info, %struct.free_info* %43, i64 %idxprom51, !dbg !6436
  %stmt53 = getelementptr inbounds %struct.free_info, %struct.free_info* %arrayidx52, i32 0, i32 0, !dbg !6439
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt53, align 8, !dbg !6439
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6440
  %cmp54 = icmp ne %union.gimple_statement_d* %45, %46, !dbg !6441
  br i1 %cmp54, label %if.then56, label %if.else57, !dbg !6442

if.then56:                                        ; preds = %land.lhs.true49
  %47 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6443
  %48 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6444
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6445
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %47, i32 %48, %union.gimple_statement_d* %49), !dbg !6446
  br label %if.end66, !dbg !6446

if.else57:                                        ; preds = %land.lhs.true49, %if.else
  call void @llvm.dbg.declare(metadata i32* %l58, metadata !6447, metadata !DIExpression()), !dbg !6449
  %50 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6450
  store i32 %50, i32* %l58, align 4, !dbg !6449
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6451
  %52 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6452
  %free_stmts59 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %52, i32 0, i32 8, !dbg !6453
  %53 = load %struct.free_info*, %struct.free_info** %free_stmts59, align 8, !dbg !6453
  %54 = load i32, i32* %l58, align 4, !dbg !6454
  %idxprom60 = sext i32 %54 to i64, !dbg !6452
  %arrayidx61 = getelementptr inbounds %struct.free_info, %struct.free_info* %53, i64 %idxprom60, !dbg !6452
  %stmt62 = getelementptr inbounds %struct.free_info, %struct.free_info* %arrayidx61, i32 0, i32 0, !dbg !6455
  store %union.gimple_statement_d* %51, %union.gimple_statement_d** %stmt62, align 8, !dbg !6456
  %55 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6457
  %56 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6458
  %free_stmts63 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %56, i32 0, i32 8, !dbg !6459
  %57 = load %struct.free_info*, %struct.free_info** %free_stmts63, align 8, !dbg !6459
  %58 = load i32, i32* %l58, align 4, !dbg !6460
  %idxprom64 = sext i32 %58 to i64, !dbg !6458
  %arrayidx65 = getelementptr inbounds %struct.free_info, %struct.free_info* %57, i64 %idxprom64, !dbg !6458
  %func = getelementptr inbounds %struct.free_info, %struct.free_info* %arrayidx65, i32 0, i32 1, !dbg !6461
  store %union.tree_node* %55, %union.tree_node** %func, align 8, !dbg !6462
  br label %if.end66

if.end66:                                         ; preds = %if.else57, %if.then56
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.end46
  br label %if.end68, !dbg !6463

if.end68:                                         ; preds = %if.end67, %if.end35
  %59 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6464
  store i32 %59, i32* %retval, align 4, !dbg !6465
  br label %return, !dbg !6465

return:                                           ; preds = %if.end68, %cond.end32, %if.then18
  %60 = load i32, i32* %retval, align 4, !dbg !6466
  ret i32 %60, !dbg !6466
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @analyze_accesses_for_assign_stmt(%struct.matrix_info* %mi, %union.tree_node* %ssa_var, %union.gimple_statement_d* %use_stmt, i32 %current_indirect_level, i8 zeroext %last_op, %struct.simple_bitmap_def* %visited, i8 zeroext %record_accesses) #0 !dbg !6467 {
entry:
  %retval = alloca i32, align 4
  %mi.addr = alloca %struct.matrix_info*, align 8
  %ssa_var.addr = alloca %union.tree_node*, align 8
  %use_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %current_indirect_level.addr = alloca i32, align 4
  %last_op.addr = alloca i8, align 1
  %visited.addr = alloca %struct.simple_bitmap_def*, align 8
  %record_accesses.addr = alloca i8, align 1
  %lhs = alloca %union.tree_node*, align 8
  %lhs_acc = alloca %struct.ssa_acc_in_tree, align 8
  %rhs_acc = alloca %struct.ssa_acc_in_tree, align 8
  %l = alloca i32, align 4
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %index = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %op2 = alloca %union.tree_node*, align 8
  %l132 = alloca i32, align 4
  store %struct.matrix_info* %mi, %struct.matrix_info** %mi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %mi.addr, metadata !6470, metadata !DIExpression()), !dbg !6471
  store %union.tree_node* %ssa_var, %union.tree_node** %ssa_var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ssa_var.addr, metadata !6472, metadata !DIExpression()), !dbg !6473
  store %union.gimple_statement_d* %use_stmt, %union.gimple_statement_d** %use_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt.addr, metadata !6474, metadata !DIExpression()), !dbg !6475
  store i32 %current_indirect_level, i32* %current_indirect_level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %current_indirect_level.addr, metadata !6476, metadata !DIExpression()), !dbg !6477
  store i8 %last_op, i8* %last_op.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %last_op.addr, metadata !6478, metadata !DIExpression()), !dbg !6479
  store %struct.simple_bitmap_def* %visited, %struct.simple_bitmap_def** %visited.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %visited.addr, metadata !6480, metadata !DIExpression()), !dbg !6481
  store i8 %record_accesses, i8* %record_accesses.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %record_accesses.addr, metadata !6482, metadata !DIExpression()), !dbg !6483
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6484, metadata !DIExpression()), !dbg !6485
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6486
  %call = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %0), !dbg !6487
  store %union.tree_node* %call, %union.tree_node** %lhs, align 8, !dbg !6485
  call void @llvm.dbg.declare(metadata %struct.ssa_acc_in_tree* %lhs_acc, metadata !6488, metadata !DIExpression()), !dbg !6489
  call void @llvm.dbg.declare(metadata %struct.ssa_acc_in_tree* %rhs_acc, metadata !6490, metadata !DIExpression()), !dbg !6491
  %1 = bitcast %struct.ssa_acc_in_tree* %lhs_acc to i8*, !dbg !6492
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 48, i1 false), !dbg !6492
  %2 = bitcast %struct.ssa_acc_in_tree* %rhs_acc to i8*, !dbg !6493
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 48, i1 false), !dbg !6493
  %3 = load %union.tree_node*, %union.tree_node** %ssa_var.addr, align 8, !dbg !6494
  %ssa_var1 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %lhs_acc, i32 0, i32 0, !dbg !6495
  store %union.tree_node* %3, %union.tree_node** %ssa_var1, align 8, !dbg !6496
  %t_code = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %lhs_acc, i32 0, i32 1, !dbg !6497
  store i32 0, i32* %t_code, align 8, !dbg !6498
  %4 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6499
  call void @ssa_accessed_in_tree(%union.tree_node* %4, %struct.ssa_acc_in_tree* %lhs_acc), !dbg !6500
  %5 = load %union.tree_node*, %union.tree_node** %ssa_var.addr, align 8, !dbg !6501
  %ssa_var2 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %rhs_acc, i32 0, i32 0, !dbg !6502
  store %union.tree_node* %5, %union.tree_node** %ssa_var2, align 8, !dbg !6503
  %t_code3 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %rhs_acc, i32 0, i32 1, !dbg !6504
  store i32 0, i32* %t_code3, align 8, !dbg !6505
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6506
  call void @ssa_accessed_in_assign_rhs(%union.gimple_statement_d* %6, %struct.ssa_acc_in_tree* %rhs_acc), !dbg !6507
  %var_found = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %lhs_acc, i32 0, i32 5, !dbg !6508
  %7 = load i8, i8* %var_found, align 8, !dbg !6508
  %conv = zext i8 %7 to i32, !dbg !6510
  %tobool = icmp ne i32 %conv, 0, !dbg !6510
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false, !dbg !6511

land.lhs.true:                                    ; preds = %entry
  %var_found4 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %rhs_acc, i32 0, i32 5, !dbg !6512
  %8 = load i8, i8* %var_found4, align 8, !dbg !6512
  %conv5 = zext i8 %8 to i32, !dbg !6513
  %tobool6 = icmp ne i32 %conv5, 0, !dbg !6513
  br i1 %tobool6, label %land.lhs.true7, label %lor.lhs.false, !dbg !6514

land.lhs.true7:                                   ; preds = %land.lhs.true
  %t_code8 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %lhs_acc, i32 0, i32 1, !dbg !6515
  %9 = load i32, i32* %t_code8, align 8, !dbg !6515
  %cmp = icmp eq i32 %9, 47, !dbg !6516
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6517

lor.lhs.false:                                    ; preds = %land.lhs.true7, %land.lhs.true, %entry
  %var_found10 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %rhs_acc, i32 0, i32 5, !dbg !6518
  %10 = load i8, i8* %var_found10, align 8, !dbg !6518
  %tobool11 = icmp ne i8 %10, 0, !dbg !6519
  br i1 %tobool11, label %if.end, label %land.lhs.true12, !dbg !6520

land.lhs.true12:                                  ; preds = %lor.lhs.false
  %var_found13 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %lhs_acc, i32 0, i32 5, !dbg !6521
  %11 = load i8, i8* %var_found13, align 8, !dbg !6521
  %tobool14 = icmp ne i8 %11, 0, !dbg !6522
  br i1 %tobool14, label %if.end, label %if.then, !dbg !6523

if.then:                                          ; preds = %land.lhs.true12, %land.lhs.true7
  %12 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6524
  %13 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6526
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6527
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %12, i32 %13, %union.gimple_statement_d* %14), !dbg !6528
  %15 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6529
  store i32 %15, i32* %retval, align 4, !dbg !6530
  br label %return, !dbg !6530

if.end:                                           ; preds = %land.lhs.true12, %lor.lhs.false
  %var_found15 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %rhs_acc, i32 0, i32 5, !dbg !6531
  %16 = load i8, i8* %var_found15, align 8, !dbg !6531
  %tobool16 = icmp ne i8 %16, 0, !dbg !6531
  br i1 %tobool16, label %lor.lhs.false17, label %cond.false, !dbg !6531

lor.lhs.false17:                                  ; preds = %if.end
  %var_found18 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %lhs_acc, i32 0, i32 5, !dbg !6531
  %17 = load i8, i8* %var_found18, align 8, !dbg !6531
  %tobool19 = icmp ne i8 %17, 0, !dbg !6531
  br i1 %tobool19, label %cond.true, label %cond.false, !dbg !6531

cond.true:                                        ; preds = %lor.lhs.false17
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 1222, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6531
  br label %cond.end, !dbg !6531

cond.false:                                       ; preds = %lor.lhs.false17, %if.end
  br label %cond.end, !dbg !6531

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6531
  %var_found20 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %lhs_acc, i32 0, i32 5, !dbg !6532
  %18 = load i8, i8* %var_found20, align 8, !dbg !6532
  %tobool21 = icmp ne i8 %18, 0, !dbg !6534
  br i1 %tobool21, label %if.then22, label %if.end48, !dbg !6535

if.then22:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i32* %l, metadata !6536, metadata !DIExpression()), !dbg !6538
  %19 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6539
  %add = add nsw i32 %19, 1, !dbg !6540
  store i32 %add, i32* %l, align 4, !dbg !6538
  %t_code23 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %lhs_acc, i32 0, i32 1, !dbg !6541
  %20 = load i32, i32* %t_code23, align 8, !dbg !6541
  %cmp24 = icmp eq i32 %20, 47, !dbg !6541
  br i1 %cmp24, label %cond.false27, label %cond.true26, !dbg !6541

cond.true26:                                      ; preds = %if.then22
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 1230, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6541
  br label %cond.end28, !dbg !6541

cond.false27:                                     ; preds = %if.then22
  br label %cond.end28, !dbg !6541

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond29 = phi i32 [ 0, %cond.true26 ], [ 0, %cond.false27 ], !dbg !6541
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6542
  %call30 = call zeroext i8 @gimple_assign_copy_p(%union.gimple_statement_d* %21), !dbg !6544
  %conv31 = zext i8 %call30 to i32, !dbg !6544
  %tobool32 = icmp ne i32 %conv31, 0, !dbg !6544
  br i1 %tobool32, label %lor.lhs.false37, label %lor.lhs.false33, !dbg !6545

lor.lhs.false33:                                  ; preds = %cond.end28
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6546
  %call34 = call zeroext i8 @gimple_assign_cast_p(%union.gimple_statement_d* %22), !dbg !6547
  %conv35 = zext i8 %call34 to i32, !dbg !6547
  %tobool36 = icmp ne i32 %conv35, 0, !dbg !6547
  br i1 %tobool36, label %lor.lhs.false37, label %if.then41, !dbg !6548

lor.lhs.false37:                                  ; preds = %lor.lhs.false33, %cond.end28
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6549
  %call38 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %23), !dbg !6549
  %base = bitcast %union.tree_node* %call38 to %struct.tree_base*, !dbg !6549
  %24 = bitcast %struct.tree_base* %base to i64*, !dbg !6549
  %bf.load = load i64, i64* %24, align 8, !dbg !6549
  %bf.clear = and i64 %bf.load, 65535, !dbg !6549
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6549
  %cmp39 = icmp ne i32 %bf.cast, 141, !dbg !6550
  br i1 %cmp39, label %if.then41, label %if.else, !dbg !6551

if.then41:                                        ; preds = %lor.lhs.false37, %lor.lhs.false33
  %25 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6552
  %26 = load i32, i32* %l, align 4, !dbg !6553
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6554
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %25, i32 %26, %union.gimple_statement_d* %27), !dbg !6555
  br label %if.end47, !dbg !6555

if.else:                                          ; preds = %lor.lhs.false37
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !6556, metadata !DIExpression()), !dbg !6558
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6559
  %call42 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %28), !dbg !6559
  %ssa_name = bitcast %union.tree_node* %call42 to %struct.tree_ssa_name*, !dbg !6559
  %def_stmt43 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6559
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt43, align 8, !dbg !6559
  store %union.gimple_statement_d* %29, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6558
  %30 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6560
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6561
  %32 = load i32, i32* %l, align 4, !dbg !6562
  %33 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !6563
  call void @analyze_matrix_allocation_site(%struct.matrix_info* %30, %union.gimple_statement_d* %31, i32 %32, %struct.simple_bitmap_def* %33), !dbg !6564
  %34 = load i8, i8* %record_accesses.addr, align 1, !dbg !6565
  %tobool44 = icmp ne i8 %34, 0, !dbg !6565
  br i1 %tobool44, label %if.then45, label %if.end46, !dbg !6567

if.then45:                                        ; preds = %if.else
  %35 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6568
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6569
  %37 = load i32, i32* %l, align 4, !dbg !6570
  call void @record_access_alloc_site_info(%struct.matrix_info* %35, %union.gimple_statement_d* %36, %union.tree_node* null, %union.tree_node* null, i32 %37, i8 zeroext 1), !dbg !6571
  br label %if.end46, !dbg !6571

if.end46:                                         ; preds = %if.then45, %if.else
  %38 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6572
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6573
  %40 = load i32, i32* %l, align 4, !dbg !6574
  call void @update_type_size(%struct.matrix_info* %38, %union.gimple_statement_d* %39, %union.tree_node* null, i32 %40), !dbg !6575
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.then41
  %41 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6576
  store i32 %41, i32* %retval, align 4, !dbg !6577
  br label %return, !dbg !6577

if.end48:                                         ; preds = %cond.end
  %var_found49 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %rhs_acc, i32 0, i32 5, !dbg !6578
  %42 = load i8, i8* %var_found49, align 8, !dbg !6578
  %tobool50 = icmp ne i8 %42, 0, !dbg !6580
  br i1 %tobool50, label %if.then51, label %if.end154, !dbg !6581

if.then51:                                        ; preds = %if.end48
  %t_code52 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %rhs_acc, i32 0, i32 1, !dbg !6582
  %43 = load i32, i32* %t_code52, align 8, !dbg !6582
  %cmp53 = icmp ne i32 %43, 47, !dbg !6585
  br i1 %cmp53, label %land.lhs.true55, label %if.end64, !dbg !6586

land.lhs.true55:                                  ; preds = %if.then51
  %t_code56 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %rhs_acc, i32 0, i32 1, !dbg !6587
  %44 = load i32, i32* %t_code56, align 8, !dbg !6587
  %cmp57 = icmp ne i32 %44, 66, !dbg !6588
  br i1 %cmp57, label %land.lhs.true59, label %if.end64, !dbg !6589

land.lhs.true59:                                  ; preds = %land.lhs.true55
  %t_code60 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %rhs_acc, i32 0, i32 1, !dbg !6590
  %45 = load i32, i32* %t_code60, align 8, !dbg !6590
  %cmp61 = icmp ne i32 %45, 141, !dbg !6591
  br i1 %cmp61, label %if.then63, label %if.end64, !dbg !6592

if.then63:                                        ; preds = %land.lhs.true59
  %46 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6593
  %47 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6595
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6596
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %46, i32 %47, %union.gimple_statement_d* %48), !dbg !6597
  %49 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6598
  store i32 %49, i32* %retval, align 4, !dbg !6599
  br label %return, !dbg !6599

if.end64:                                         ; preds = %land.lhs.true59, %land.lhs.true55, %if.then51
  %t_code65 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %rhs_acc, i32 0, i32 1, !dbg !6600
  %50 = load i32, i32* %t_code65, align 8, !dbg !6600
  %cmp66 = icmp eq i32 %50, 47, !dbg !6602
  br i1 %cmp66, label %if.then68, label %if.else73, !dbg !6603

if.then68:                                        ; preds = %if.end64
  %51 = load i8, i8* %record_accesses.addr, align 1, !dbg !6604
  %tobool69 = icmp ne i8 %51, 0, !dbg !6604
  br i1 %tobool69, label %if.then70, label %if.end71, !dbg !6607

if.then70:                                        ; preds = %if.then68
  %52 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6608
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6609
  %54 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6610
  call void @record_access_alloc_site_info(%struct.matrix_info* %52, %union.gimple_statement_d* %53, %union.tree_node* null, %union.tree_node* null, i32 %54, i8 zeroext 1), !dbg !6611
  br label %if.end71, !dbg !6611

if.end71:                                         ; preds = %if.then70, %if.then68
  %55 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6612
  %add72 = add nsw i32 %55, 1, !dbg !6612
  store i32 %add72, i32* %current_indirect_level.addr, align 4, !dbg !6612
  br label %if.end120, !dbg !6613

if.else73:                                        ; preds = %if.end64
  %t_code74 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %rhs_acc, i32 0, i32 1, !dbg !6614
  %56 = load i32, i32* %t_code74, align 8, !dbg !6614
  %cmp75 = icmp eq i32 %56, 66, !dbg !6616
  br i1 %cmp75, label %if.then77, label %if.end119, !dbg !6617

if.then77:                                        ; preds = %if.else73
  %second_op = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %rhs_acc, i32 0, i32 4, !dbg !6618
  %57 = load %union.tree_node*, %union.tree_node** %second_op, align 8, !dbg !6618
  %tobool78 = icmp ne %union.tree_node* %57, null, !dbg !6618
  br i1 %tobool78, label %cond.false80, label %cond.true79, !dbg !6618

cond.true79:                                      ; preds = %if.then77
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i32 1269, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6618
  br label %cond.end81, !dbg !6618

cond.false80:                                     ; preds = %if.then77
  br label %cond.end81, !dbg !6618

cond.end81:                                       ; preds = %cond.false80, %cond.true79
  %cond82 = phi i32 [ 0, %cond.true79 ], [ 0, %cond.false80 ], !dbg !6618
  %58 = load i8, i8* %last_op.addr, align 1, !dbg !6620
  %tobool83 = icmp ne i8 %58, 0, !dbg !6620
  br i1 %tobool83, label %if.then84, label %if.else85, !dbg !6622

if.then84:                                        ; preds = %cond.end81
  %59 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6623
  %60 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6624
  %61 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6625
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %59, i32 %60, %union.gimple_statement_d* %61), !dbg !6626
  br label %if.end118, !dbg !6626

if.else85:                                        ; preds = %cond.end81
  call void @llvm.dbg.declare(metadata %union.tree_node** %index, metadata !6627, metadata !DIExpression()), !dbg !6629
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !6630, metadata !DIExpression()), !dbg !6631
  call void @llvm.dbg.declare(metadata %union.tree_node** %op2, metadata !6632, metadata !DIExpression()), !dbg !6633
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6634
  %call86 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %62), !dbg !6635
  store %union.tree_node* %call86, %union.tree_node** %op1, align 8, !dbg !6636
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6637
  %call87 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %63), !dbg !6638
  store %union.tree_node* %call87, %union.tree_node** %op2, align 8, !dbg !6639
  %64 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !6640
  %65 = load %union.tree_node*, %union.tree_node** %ssa_var.addr, align 8, !dbg !6641
  %cmp88 = icmp eq %union.tree_node* %64, %65, !dbg !6642
  br i1 %cmp88, label %cond.true90, label %cond.false91, !dbg !6643

cond.true90:                                      ; preds = %if.else85
  %66 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !6644
  br label %cond.end92, !dbg !6643

cond.false91:                                     ; preds = %if.else85
  %67 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !6645
  br label %cond.end92, !dbg !6643

cond.end92:                                       ; preds = %cond.false91, %cond.true90
  %cond93 = phi %union.tree_node* [ %66, %cond.true90 ], [ %67, %cond.false91 ], !dbg !6643
  store %union.tree_node* %cond93, %union.tree_node** %op2, align 8, !dbg !6646
  %68 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !6647
  %base94 = bitcast %union.tree_node* %68 to %struct.tree_base*, !dbg !6647
  %69 = bitcast %struct.tree_base* %base94 to i64*, !dbg !6647
  %bf.load95 = load i64, i64* %69, align 8, !dbg !6647
  %bf.clear96 = and i64 %bf.load95, 65535, !dbg !6647
  %bf.cast97 = trunc i64 %bf.clear96 to i32, !dbg !6647
  %cmp98 = icmp eq i32 %bf.cast97, 23, !dbg !6649
  br i1 %cmp98, label %if.then100, label %if.else106, !dbg !6650

if.then100:                                       ; preds = %cond.end92
  %70 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !6651
  %common = bitcast %union.tree_node* %70 to %struct.tree_common*, !dbg !6651
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6651
  %71 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6651
  %72 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !6652
  %int_cst = bitcast %union.tree_node* %72 to %struct.tree_int_cst*, !dbg !6652
  %int_cst101 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !6652
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst101, i32 0, i32 0, !dbg !6652
  %73 = load i64, i64* %low, align 8, !dbg !6652
  %74 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !6653
  %common102 = bitcast %union.tree_node* %74 to %struct.tree_common*, !dbg !6653
  %type103 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common102, i32 0, i32 2, !dbg !6653
  %75 = load %union.tree_node*, %union.tree_node** %type103, align 8, !dbg !6653
  %call104 = call i64 @int_size_in_bytes(%union.tree_node* %75), !dbg !6654
  %div = udiv i64 %73, %call104, !dbg !6655
  %call105 = call %union.tree_node* @build_int_cst(%union.tree_node* %71, i64 %div), !dbg !6656
  store %union.tree_node* %call105, %union.tree_node** %index, align 8, !dbg !6657
  br label %if.end114, !dbg !6658

if.else106:                                       ; preds = %cond.end92
  %76 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !6659
  %77 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !6661
  %ssa_name107 = bitcast %union.tree_node* %77 to %struct.tree_ssa_name*, !dbg !6661
  %def_stmt108 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name107, i32 0, i32 2, !dbg !6661
  %78 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt108, align 8, !dbg !6661
  %call109 = call %union.tree_node* @get_index_from_offset(%union.tree_node* %76, %union.gimple_statement_d* %78), !dbg !6662
  store %union.tree_node* %call109, %union.tree_node** %index, align 8, !dbg !6663
  %79 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !6664
  %cmp110 = icmp eq %union.tree_node* %79, null, !dbg !6666
  br i1 %cmp110, label %if.then112, label %if.end113, !dbg !6667

if.then112:                                       ; preds = %if.else106
  %80 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6668
  %81 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6670
  %82 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6671
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %80, i32 %81, %union.gimple_statement_d* %82), !dbg !6672
  %83 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6673
  store i32 %83, i32* %retval, align 4, !dbg !6674
  br label %return, !dbg !6674

if.end113:                                        ; preds = %if.else106
  br label %if.end114

if.end114:                                        ; preds = %if.end113, %if.then100
  %84 = load i8, i8* %record_accesses.addr, align 1, !dbg !6675
  %tobool115 = icmp ne i8 %84, 0, !dbg !6675
  br i1 %tobool115, label %if.then116, label %if.end117, !dbg !6677

if.then116:                                       ; preds = %if.end114
  %85 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6678
  %86 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6679
  %87 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !6680
  %88 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !6681
  %89 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6682
  call void @record_access_alloc_site_info(%struct.matrix_info* %85, %union.gimple_statement_d* %86, %union.tree_node* %87, %union.tree_node* %88, i32 %89, i8 zeroext 0), !dbg !6683
  br label %if.end117, !dbg !6683

if.end117:                                        ; preds = %if.then116, %if.end114
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %if.then84
  br label %if.end119, !dbg !6684

if.end119:                                        ; preds = %if.end118, %if.else73
  br label %if.end120

if.end120:                                        ; preds = %if.end119, %if.end71
  %t_code121 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %lhs_acc, i32 0, i32 1, !dbg !6685
  %90 = load i32, i32* %t_code121, align 8, !dbg !6685
  %cmp122 = icmp eq i32 %90, 47, !dbg !6687
  br i1 %cmp122, label %if.then131, label %lor.lhs.false124, !dbg !6688

lor.lhs.false124:                                 ; preds = %if.end120
  %91 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6689
  %base125 = bitcast %union.tree_node* %91 to %struct.tree_base*, !dbg !6689
  %92 = bitcast %struct.tree_base* %base125 to i64*, !dbg !6689
  %bf.load126 = load i64, i64* %92, align 8, !dbg !6689
  %bf.clear127 = and i64 %bf.load126, 65535, !dbg !6689
  %bf.cast128 = trunc i64 %bf.clear127 to i32, !dbg !6689
  %cmp129 = icmp ne i32 %bf.cast128, 141, !dbg !6690
  br i1 %cmp129, label %if.then131, label %if.else148, !dbg !6691

if.then131:                                       ; preds = %lor.lhs.false124, %if.end120
  call void @llvm.dbg.declare(metadata i32* %l132, metadata !6692, metadata !DIExpression()), !dbg !6694
  %93 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6695
  store i32 %93, i32* %l132, align 4, !dbg !6694
  %94 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6696
  %base133 = bitcast %union.tree_node* %94 to %struct.tree_base*, !dbg !6696
  %95 = bitcast %struct.tree_base* %base133 to i64*, !dbg !6696
  %bf.load134 = load i64, i64* %95, align 8, !dbg !6696
  %bf.clear135 = and i64 %bf.load134, 65535, !dbg !6696
  %bf.cast136 = trunc i64 %bf.clear135 to i32, !dbg !6696
  %cmp137 = icmp ne i32 %bf.cast136, 32, !dbg !6698
  br i1 %cmp137, label %if.then142, label %lor.lhs.false139, !dbg !6699

lor.lhs.false139:                                 ; preds = %if.then131
  %96 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6700
  %97 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6701
  %decl = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %97, i32 0, i32 0, !dbg !6702
  %98 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6702
  %cmp140 = icmp ne %union.tree_node* %96, %98, !dbg !6703
  br i1 %cmp140, label %if.then142, label %if.else143, !dbg !6704

if.then142:                                       ; preds = %lor.lhs.false139, %if.then131
  %99 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6705
  %100 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6706
  %101 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6707
  call void @mark_min_matrix_escape_level(%struct.matrix_info* %99, i32 %100, %union.gimple_statement_d* %101), !dbg !6708
  br label %if.end147, !dbg !6708

if.else143:                                       ; preds = %lor.lhs.false139
  %102 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6709
  %103 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6711
  %104 = load i32, i32* %l132, align 4, !dbg !6712
  %105 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !6713
  call void @analyze_matrix_allocation_site(%struct.matrix_info* %102, %union.gimple_statement_d* %103, i32 %104, %struct.simple_bitmap_def* %105), !dbg !6714
  %106 = load i8, i8* %record_accesses.addr, align 1, !dbg !6715
  %tobool144 = icmp ne i8 %106, 0, !dbg !6715
  br i1 %tobool144, label %if.then145, label %if.end146, !dbg !6717

if.then145:                                       ; preds = %if.else143
  %107 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6718
  %108 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt.addr, align 8, !dbg !6719
  %109 = load i32, i32* %l132, align 4, !dbg !6720
  call void @record_access_alloc_site_info(%struct.matrix_info* %107, %union.gimple_statement_d* %108, %union.tree_node* null, %union.tree_node* null, i32 %109, i8 zeroext 1), !dbg !6721
  br label %if.end146, !dbg !6721

if.end146:                                        ; preds = %if.then145, %if.else143
  br label %if.end147

if.end147:                                        ; preds = %if.end146, %if.then142
  br label %if.end153, !dbg !6722

if.else148:                                       ; preds = %lor.lhs.false124
  %110 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !6723
  %111 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6725
  %112 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6726
  %t_code149 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %rhs_acc, i32 0, i32 1, !dbg !6727
  %113 = load i32, i32* %t_code149, align 8, !dbg !6727
  %cmp150 = icmp eq i32 %113, 66, !dbg !6728
  %conv151 = zext i1 %cmp150 to i32, !dbg !6728
  %conv152 = trunc i32 %conv151 to i8, !dbg !6729
  %114 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !6730
  %115 = load i8, i8* %record_accesses.addr, align 1, !dbg !6731
  call void @analyze_matrix_accesses(%struct.matrix_info* %110, %union.tree_node* %111, i32 %112, i8 zeroext %conv152, %struct.simple_bitmap_def* %114, i8 zeroext %115), !dbg !6732
  br label %if.end153

if.end153:                                        ; preds = %if.else148, %if.end147
  br label %if.end154, !dbg !6733

if.end154:                                        ; preds = %if.end153, %if.end48
  %116 = load i32, i32* %current_indirect_level.addr, align 4, !dbg !6734
  store i32 %116, i32* %retval, align 4, !dbg !6735
  br label %return, !dbg !6735

return:                                           ; preds = %if.end154, %if.then112, %if.then63, %if.end47, %if.then
  %117 = load i32, i32* %retval, align 4, !dbg !6736
  ret i32 %117, !dbg !6736
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6737 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %old = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6740, metadata !DIExpression()), !dbg !6741
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %old, metadata !6742, metadata !DIExpression()), !dbg !6743
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6744
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !6745
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6745
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %old, align 8, !dbg !6743
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %old, align 8, !dbg !6746
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !6747
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6747
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6748
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !6749
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !6750
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6751
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %5), !dbg !6753
  %tobool = icmp ne i8 %call, 0, !dbg !6753
  br i1 %tobool, label %if.then, label %if.end, !dbg !6754

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6755
  br label %return, !dbg !6755

if.end:                                           ; preds = %entry
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6756
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 0, !dbg !6757
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !6757
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6758
  br label %return, !dbg !6758

return:                                           ; preds = %if.end, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6759
  ret %struct.ssa_use_operand_d* %8, !dbg !6759
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !6760 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6761, metadata !DIExpression()), !dbg !6762
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6763
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6764
  ret %union.tree_node* %call, !dbg !6765
}

declare dso_local i64 @int_size_in_bytes(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !6766 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6769, metadata !DIExpression()), !dbg !6770
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6771
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !6772
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !6773
  %1 = load i32, i32* %nargs, align 4, !dbg !6773
  ret i32 %1, !dbg !6774
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !6775 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !6778, metadata !DIExpression()), !dbg !6779
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !6780
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !6781
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !6781
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !6782
  ret %union.tree_node* %2, !dbg !6783
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !6784 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6787, metadata !DIExpression()), !dbg !6788
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6789, metadata !DIExpression()), !dbg !6790
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6791
  %1 = load i32, i32* %i.addr, align 4, !dbg !6792
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !6793
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !6794
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !6795
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !6796 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !6800, metadata !DIExpression()), !dbg !6801
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !6802
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6803
  ret %union.tree_node* %1, !dbg !6804
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) #0 !dbg !6805 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6806, metadata !DIExpression()), !dbg !6807
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6808
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !6809
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !6810
  ret %union.tree_node** %result, !dbg !6811
}

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !6812 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !6815, metadata !DIExpression()), !dbg !6816
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !6817, metadata !DIExpression()), !dbg !6818
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6819
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !6821
  %1 = load i8*, i8** %popcount, align 8, !dbg !6821
  %tobool = icmp ne i8* %1, null, !dbg !6819
  br i1 %tobool, label %if.then, label %if.end7, !dbg !6822

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !6823, metadata !DIExpression()), !dbg !6825
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6826
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !6826
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !6826
  %div = udiv i32 %3, 64, !dbg !6826
  %idxprom = zext i32 %div to i64, !dbg !6826
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !6826
  %4 = load i64, i64* %arrayidx, align 8, !dbg !6826
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !6826
  %rem = urem i32 %5, 64, !dbg !6826
  %sh_prom = zext i32 %rem to i64, !dbg !6826
  %shr = lshr i64 %4, %sh_prom, !dbg !6826
  %and = and i64 %shr, 1, !dbg !6826
  %conv = trunc i64 %and to i8, !dbg !6826
  store i8 %conv, i8* %oldbit, align 1, !dbg !6827
  %6 = load i8, i8* %oldbit, align 1, !dbg !6828
  %tobool1 = icmp ne i8 %6, 0, !dbg !6828
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !6830

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6831
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !6832
  %8 = load i8*, i8** %popcount3, align 8, !dbg !6832
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !6833
  %div4 = udiv i32 %9, 64, !dbg !6834
  %idxprom5 = zext i32 %div4 to i64, !dbg !6831
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !6831
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !6835
  %inc = add i8 %10, 1, !dbg !6835
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !6835
  br label %if.end, !dbg !6831

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !6836

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !6837
  %rem8 = urem i32 %11, 64, !dbg !6838
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !6839
  %shl = shl i64 1, %sh_prom9, !dbg !6839
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6840
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !6841
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !6842
  %div11 = udiv i32 %13, 64, !dbg !6843
  %idxprom12 = zext i32 %div11 to i64, !dbg !6840
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !6840
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !6844
  %or = or i64 %14, %shl, !dbg !6844
  store i64 %or, i64* %arrayidx13, align 8, !dbg !6844
  ret void, !dbg !6845
}

; Function Attrs: noinline nounwind uwtable
define internal void @RESET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !6846 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !6847, metadata !DIExpression()), !dbg !6848
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !6849, metadata !DIExpression()), !dbg !6850
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6851
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !6853
  %1 = load i8*, i8** %popcount, align 8, !dbg !6853
  %tobool = icmp ne i8* %1, null, !dbg !6851
  br i1 %tobool, label %if.then, label %if.end7, !dbg !6854

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !6855, metadata !DIExpression()), !dbg !6857
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6858
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !6858
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !6858
  %div = udiv i32 %3, 64, !dbg !6858
  %idxprom = zext i32 %div to i64, !dbg !6858
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !6858
  %4 = load i64, i64* %arrayidx, align 8, !dbg !6858
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !6858
  %rem = urem i32 %5, 64, !dbg !6858
  %sh_prom = zext i32 %rem to i64, !dbg !6858
  %shr = lshr i64 %4, %sh_prom, !dbg !6858
  %and = and i64 %shr, 1, !dbg !6858
  %conv = trunc i64 %and to i8, !dbg !6858
  store i8 %conv, i8* %oldbit, align 1, !dbg !6859
  %6 = load i8, i8* %oldbit, align 1, !dbg !6860
  %tobool1 = icmp ne i8 %6, 0, !dbg !6860
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !6862

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6863
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !6864
  %8 = load i8*, i8** %popcount3, align 8, !dbg !6864
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !6865
  %div4 = udiv i32 %9, 64, !dbg !6866
  %idxprom5 = zext i32 %div4 to i64, !dbg !6863
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !6863
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !6867
  %dec = add i8 %10, -1, !dbg !6867
  store i8 %dec, i8* %arrayidx6, align 1, !dbg !6867
  br label %if.end, !dbg !6863

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !6868

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !6869
  %rem8 = urem i32 %11, 64, !dbg !6870
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !6871
  %shl = shl i64 1, %sh_prom9, !dbg !6871
  %neg = xor i64 %shl, -1, !dbg !6872
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !6873
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !6874
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !6875
  %div11 = udiv i32 %13, 64, !dbg !6876
  %idxprom12 = zext i32 %div11 to i64, !dbg !6873
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !6873
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !6877
  %and14 = and i64 %14, %neg, !dbg !6877
  store i64 %and14, i64* %arrayidx13, align 8, !dbg !6877
  ret void, !dbg !6878
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !6879 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6883, metadata !DIExpression()), !dbg !6884
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !6885, metadata !DIExpression()), !dbg !6886
  %0 = load i32, i32* %index.addr, align 4, !dbg !6887
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6887
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !6887
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !6887
  %2 = load i32, i32* %capacity, align 8, !dbg !6887
  %cmp = icmp ule i32 %0, %2, !dbg !6887
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6887

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6887
  br label %cond.end, !dbg !6887

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6887

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6887
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6888
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !6889
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !6890
  %4 = load i32, i32* %index.addr, align 4, !dbg !6891
  %idxprom = zext i32 %4 to i64, !dbg !6888
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !6888
  ret %struct.phi_arg_d* %arrayidx, !dbg !6892
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !6893 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6894, metadata !DIExpression()), !dbg !6895
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6896
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6897
  ret %union.tree_node* %call, !dbg !6898
}

; Function Attrs: noinline nounwind uwtable
define internal void @ssa_accessed_in_tree(%union.tree_node* %t, %struct.ssa_acc_in_tree* %a) #0 !dbg !6899 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %a.addr = alloca %struct.ssa_acc_in_tree*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !6903, metadata !DIExpression()), !dbg !6904
  store %struct.ssa_acc_in_tree* %a, %struct.ssa_acc_in_tree** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_acc_in_tree** %a.addr, metadata !6905, metadata !DIExpression()), !dbg !6906
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6907
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6907
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6907
  %bf.load = load i64, i64* %1, align 8, !dbg !6907
  %bf.clear = and i64 %bf.load, 65535, !dbg !6907
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6907
  %2 = load %struct.ssa_acc_in_tree*, %struct.ssa_acc_in_tree** %a.addr, align 8, !dbg !6908
  %t_code = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %2, i32 0, i32 1, !dbg !6909
  store i32 %bf.cast, i32* %t_code, align 8, !dbg !6910
  %3 = load %struct.ssa_acc_in_tree*, %struct.ssa_acc_in_tree** %a.addr, align 8, !dbg !6911
  %t_code1 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %3, i32 0, i32 1, !dbg !6912
  %4 = load i32, i32* %t_code1, align 8, !dbg !6912
  switch i32 %4, label %sw.default [
    i32 141, label %sw.bb
    i32 47, label %sw.bb2
  ], !dbg !6913

sw.bb:                                            ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6914
  %6 = load %struct.ssa_acc_in_tree*, %struct.ssa_acc_in_tree** %a.addr, align 8, !dbg !6917
  %ssa_var = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %6, i32 0, i32 0, !dbg !6918
  %7 = load %union.tree_node*, %union.tree_node** %ssa_var, align 8, !dbg !6918
  %cmp = icmp eq %union.tree_node* %5, %7, !dbg !6919
  br i1 %cmp, label %if.then, label %if.end, !dbg !6920

if.then:                                          ; preds = %sw.bb
  %8 = load %struct.ssa_acc_in_tree*, %struct.ssa_acc_in_tree** %a.addr, align 8, !dbg !6921
  %var_found = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %8, i32 0, i32 5, !dbg !6922
  store i8 1, i8* %var_found, align 8, !dbg !6923
  br label %if.end, !dbg !6921

if.end:                                           ; preds = %if.then, %sw.bb
  br label %sw.epilog, !dbg !6924

sw.bb2:                                           ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6925
  %exp = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !6925
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6925
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6925
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6925
  %base3 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !6925
  %11 = bitcast %struct.tree_base* %base3 to i64*, !dbg !6925
  %bf.load4 = load i64, i64* %11, align 8, !dbg !6925
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !6925
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !6925
  %cmp7 = icmp eq i32 %bf.cast6, 32, !dbg !6925
  br i1 %cmp7, label %land.lhs.true64, label %lor.lhs.false, !dbg !6925

lor.lhs.false:                                    ; preds = %sw.bb2
  %12 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6925
  %exp8 = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !6925
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !6925
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i64 0, i64 0, !dbg !6925
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx10, align 8, !dbg !6925
  %base11 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !6925
  %14 = bitcast %struct.tree_base* %base11 to i64*, !dbg !6925
  %bf.load12 = load i64, i64* %14, align 8, !dbg !6925
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !6925
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !6925
  %cmp15 = icmp eq i32 %bf.cast14, 34, !dbg !6925
  br i1 %cmp15, label %land.lhs.true64, label %lor.lhs.false16, !dbg !6925

lor.lhs.false16:                                  ; preds = %lor.lhs.false
  %15 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6925
  %exp17 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !6925
  %operands18 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp17, i32 0, i32 3, !dbg !6925
  %arrayidx19 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands18, i64 0, i64 0, !dbg !6925
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx19, align 8, !dbg !6925
  %base20 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !6925
  %17 = bitcast %struct.tree_base* %base20 to i64*, !dbg !6925
  %bf.load21 = load i64, i64* %17, align 8, !dbg !6925
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !6925
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !6925
  %cmp24 = icmp eq i32 %bf.cast23, 36, !dbg !6925
  br i1 %cmp24, label %land.lhs.true64, label %lor.lhs.false25, !dbg !6925

lor.lhs.false25:                                  ; preds = %lor.lhs.false16
  %18 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6925
  %exp26 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !6925
  %operands27 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp26, i32 0, i32 3, !dbg !6925
  %arrayidx28 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands27, i64 0, i64 0, !dbg !6925
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx28, align 8, !dbg !6925
  %base29 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !6925
  %20 = bitcast %struct.tree_base* %base29 to i64*, !dbg !6925
  %bf.load30 = load i64, i64* %20, align 8, !dbg !6925
  %bf.clear31 = and i64 %bf.load30, 65535, !dbg !6925
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !6925
  %cmp33 = icmp eq i32 %bf.cast32, 141, !dbg !6925
  br i1 %cmp33, label %land.lhs.true, label %if.end72, !dbg !6925

land.lhs.true:                                    ; preds = %lor.lhs.false25
  %21 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6925
  %exp34 = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !6925
  %operands35 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp34, i32 0, i32 3, !dbg !6925
  %arrayidx36 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands35, i64 0, i64 0, !dbg !6925
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx36, align 8, !dbg !6925
  %ssa_name = bitcast %union.tree_node* %22 to %struct.tree_ssa_name*, !dbg !6925
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !6925
  %23 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6925
  %base37 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !6925
  %24 = bitcast %struct.tree_base* %base37 to i64*, !dbg !6925
  %bf.load38 = load i64, i64* %24, align 8, !dbg !6925
  %bf.clear39 = and i64 %bf.load38, 65535, !dbg !6925
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !6925
  %cmp41 = icmp eq i32 %bf.cast40, 32, !dbg !6925
  br i1 %cmp41, label %land.lhs.true64, label %lor.lhs.false42, !dbg !6925

lor.lhs.false42:                                  ; preds = %land.lhs.true
  %25 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6925
  %exp43 = bitcast %union.tree_node* %25 to %struct.tree_exp*, !dbg !6925
  %operands44 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp43, i32 0, i32 3, !dbg !6925
  %arrayidx45 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands44, i64 0, i64 0, !dbg !6925
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx45, align 8, !dbg !6925
  %ssa_name46 = bitcast %union.tree_node* %26 to %struct.tree_ssa_name*, !dbg !6925
  %var47 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name46, i32 0, i32 1, !dbg !6925
  %27 = load %union.tree_node*, %union.tree_node** %var47, align 8, !dbg !6925
  %base48 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !6925
  %28 = bitcast %struct.tree_base* %base48 to i64*, !dbg !6925
  %bf.load49 = load i64, i64* %28, align 8, !dbg !6925
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !6925
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !6925
  %cmp52 = icmp eq i32 %bf.cast51, 34, !dbg !6925
  br i1 %cmp52, label %land.lhs.true64, label %lor.lhs.false53, !dbg !6925

lor.lhs.false53:                                  ; preds = %lor.lhs.false42
  %29 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6925
  %exp54 = bitcast %union.tree_node* %29 to %struct.tree_exp*, !dbg !6925
  %operands55 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp54, i32 0, i32 3, !dbg !6925
  %arrayidx56 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands55, i64 0, i64 0, !dbg !6925
  %30 = load %union.tree_node*, %union.tree_node** %arrayidx56, align 8, !dbg !6925
  %ssa_name57 = bitcast %union.tree_node* %30 to %struct.tree_ssa_name*, !dbg !6925
  %var58 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name57, i32 0, i32 1, !dbg !6925
  %31 = load %union.tree_node*, %union.tree_node** %var58, align 8, !dbg !6925
  %base59 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !6925
  %32 = bitcast %struct.tree_base* %base59 to i64*, !dbg !6925
  %bf.load60 = load i64, i64* %32, align 8, !dbg !6925
  %bf.clear61 = and i64 %bf.load60, 65535, !dbg !6925
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !6925
  %cmp63 = icmp eq i32 %bf.cast62, 36, !dbg !6925
  br i1 %cmp63, label %land.lhs.true64, label %if.end72, !dbg !6927

land.lhs.true64:                                  ; preds = %lor.lhs.false53, %lor.lhs.false42, %land.lhs.true, %lor.lhs.false16, %lor.lhs.false, %sw.bb2
  %33 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !6928
  %exp65 = bitcast %union.tree_node* %33 to %struct.tree_exp*, !dbg !6928
  %operands66 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp65, i32 0, i32 3, !dbg !6928
  %arrayidx67 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands66, i64 0, i64 0, !dbg !6928
  %34 = load %union.tree_node*, %union.tree_node** %arrayidx67, align 8, !dbg !6928
  %35 = load %struct.ssa_acc_in_tree*, %struct.ssa_acc_in_tree** %a.addr, align 8, !dbg !6929
  %ssa_var68 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %35, i32 0, i32 0, !dbg !6930
  %36 = load %union.tree_node*, %union.tree_node** %ssa_var68, align 8, !dbg !6930
  %cmp69 = icmp eq %union.tree_node* %34, %36, !dbg !6931
  br i1 %cmp69, label %if.then70, label %if.end72, !dbg !6932

if.then70:                                        ; preds = %land.lhs.true64
  %37 = load %struct.ssa_acc_in_tree*, %struct.ssa_acc_in_tree** %a.addr, align 8, !dbg !6933
  %var_found71 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %37, i32 0, i32 5, !dbg !6934
  store i8 1, i8* %var_found71, align 8, !dbg !6935
  br label %if.end72, !dbg !6933

if.end72:                                         ; preds = %if.then70, %land.lhs.true64, %lor.lhs.false53, %lor.lhs.false25
  br label %sw.epilog, !dbg !6936

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !6937

sw.epilog:                                        ; preds = %sw.default, %if.end72, %if.end
  ret void, !dbg !6938
}

; Function Attrs: noinline nounwind uwtable
define internal void @ssa_accessed_in_call_rhs(%union.gimple_statement_d* %stmt, %struct.ssa_acc_in_tree* %a) #0 !dbg !6939 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %a.addr = alloca %struct.ssa_acc_in_tree*, align 8
  %decl = alloca %union.tree_node*, align 8
  %arg = alloca %union.tree_node*, align 8
  %i = alloca i64, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6942, metadata !DIExpression()), !dbg !6943
  store %struct.ssa_acc_in_tree* %a, %struct.ssa_acc_in_tree** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_acc_in_tree** %a.addr, metadata !6944, metadata !DIExpression()), !dbg !6945
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !6946, metadata !DIExpression()), !dbg !6947
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !6948, metadata !DIExpression()), !dbg !6949
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6950, metadata !DIExpression()), !dbg !6951
  %0 = load %struct.ssa_acc_in_tree*, %struct.ssa_acc_in_tree** %a.addr, align 8, !dbg !6952
  %t_code = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %0, i32 0, i32 1, !dbg !6953
  store i32 59, i32* %t_code, align 8, !dbg !6954
  store i64 0, i64* %i, align 8, !dbg !6955
  br label %for.cond, !dbg !6957

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !dbg !6958
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6960
  %call = call i32 @gimple_call_num_args(%union.gimple_statement_d* %2), !dbg !6961
  %conv = zext i32 %call to i64, !dbg !6961
  %cmp = icmp ult i64 %1, %conv, !dbg !6962
  br i1 %cmp, label %for.body, label %for.end, !dbg !6963

for.body:                                         ; preds = %for.cond
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6964
  %4 = load i64, i64* %i, align 8, !dbg !6966
  %conv2 = trunc i64 %4 to i32, !dbg !6966
  %call3 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %3, i32 %conv2), !dbg !6967
  store %union.tree_node* %call3, %union.tree_node** %arg, align 8, !dbg !6968
  %5 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6969
  %6 = load %struct.ssa_acc_in_tree*, %struct.ssa_acc_in_tree** %a.addr, align 8, !dbg !6971
  %ssa_var = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %6, i32 0, i32 0, !dbg !6972
  %7 = load %union.tree_node*, %union.tree_node** %ssa_var, align 8, !dbg !6972
  %cmp4 = icmp eq %union.tree_node* %5, %7, !dbg !6973
  br i1 %cmp4, label %if.then, label %if.end, !dbg !6974

if.then:                                          ; preds = %for.body
  %8 = load %struct.ssa_acc_in_tree*, %struct.ssa_acc_in_tree** %a.addr, align 8, !dbg !6975
  %var_found = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %8, i32 0, i32 5, !dbg !6977
  store i8 1, i8* %var_found, align 8, !dbg !6978
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6979
  %call6 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %9), !dbg !6980
  store %union.tree_node* %call6, %union.tree_node** %decl, align 8, !dbg !6981
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6982
  %11 = load %struct.ssa_acc_in_tree*, %struct.ssa_acc_in_tree** %a.addr, align 8, !dbg !6983
  %t_tree = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %11, i32 0, i32 2, !dbg !6984
  store %union.tree_node* %10, %union.tree_node** %t_tree, align 8, !dbg !6985
  br label %for.end, !dbg !6986

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !6987

for.inc:                                          ; preds = %if.end
  %12 = load i64, i64* %i, align 8, !dbg !6988
  %inc = add i64 %12, 1, !dbg !6988
  store i64 %inc, i64* %i, align 8, !dbg !6988
  br label %for.cond, !dbg !6989, !llvm.loop !6990

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !6992
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !6993 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6994, metadata !DIExpression()), !dbg !6995
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !6996, metadata !DIExpression()), !dbg !6997
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6998
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !6999
  store i32 %call, i32* %num_ops, align 4, !dbg !7000
  %1 = load i32, i32* %num_ops, align 4, !dbg !7001
  %sub = sub i32 %1, 3, !dbg !7002
  ret i32 %sub, !dbg !7003
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !7004 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7005, metadata !DIExpression()), !dbg !7006
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7007
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7008
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !7009
  %1 = load i32, i32* %num_ops, align 4, !dbg !7009
  ret i32 %1, !dbg !7010
}

; Function Attrs: noinline nounwind uwtable
define internal void @ssa_accessed_in_assign_rhs(%union.gimple_statement_d* %stmt, %struct.ssa_acc_in_tree* %a) #0 !dbg !7011 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %a.addr = alloca %struct.ssa_acc_in_tree*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %op2 = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7012, metadata !DIExpression()), !dbg !7013
  store %struct.ssa_acc_in_tree* %a, %struct.ssa_acc_in_tree** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_acc_in_tree** %a.addr, metadata !7014, metadata !DIExpression()), !dbg !7015
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7016
  %call = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %0), !dbg !7017
  %1 = load %struct.ssa_acc_in_tree*, %struct.ssa_acc_in_tree** %a.addr, align 8, !dbg !7018
  %t_code = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %1, i32 0, i32 1, !dbg !7019
  store i32 %call, i32* %t_code, align 8, !dbg !7020
  %2 = load %struct.ssa_acc_in_tree*, %struct.ssa_acc_in_tree** %a.addr, align 8, !dbg !7021
  %t_code1 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %2, i32 0, i32 1, !dbg !7022
  %3 = load i32, i32* %t_code1, align 8, !dbg !7022
  switch i32 %3, label %sw.default [
    i32 141, label %sw.bb
    i32 47, label %sw.bb
    i32 116, label %sw.bb
    i32 113, label %sw.bb
    i32 118, label %sw.bb
    i32 66, label %sw.bb3
    i32 63, label %sw.bb3
    i32 65, label %sw.bb3
  ], !dbg !7023

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7024
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %4), !dbg !7026
  %5 = load %struct.ssa_acc_in_tree*, %struct.ssa_acc_in_tree** %a.addr, align 8, !dbg !7027
  call void @ssa_accessed_in_tree(%union.tree_node* %call2, %struct.ssa_acc_in_tree* %5), !dbg !7028
  br label %sw.epilog, !dbg !7029

sw.bb3:                                           ; preds = %entry, %entry, %entry
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7030
  %call4 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !7031
  store %union.tree_node* %call4, %union.tree_node** %op1, align 8, !dbg !7032
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7033
  %call5 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %7), !dbg !7034
  store %union.tree_node* %call5, %union.tree_node** %op2, align 8, !dbg !7035
  %8 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7036
  %9 = load %struct.ssa_acc_in_tree*, %struct.ssa_acc_in_tree** %a.addr, align 8, !dbg !7038
  %ssa_var = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %9, i32 0, i32 0, !dbg !7039
  %10 = load %union.tree_node*, %union.tree_node** %ssa_var, align 8, !dbg !7039
  %cmp = icmp eq %union.tree_node* %8, %10, !dbg !7040
  br i1 %cmp, label %if.then, label %if.else, !dbg !7041

if.then:                                          ; preds = %sw.bb3
  %11 = load %struct.ssa_acc_in_tree*, %struct.ssa_acc_in_tree** %a.addr, align 8, !dbg !7042
  %var_found = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %11, i32 0, i32 5, !dbg !7044
  store i8 1, i8* %var_found, align 8, !dbg !7045
  %12 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !7046
  %13 = load %struct.ssa_acc_in_tree*, %struct.ssa_acc_in_tree** %a.addr, align 8, !dbg !7047
  %second_op = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %13, i32 0, i32 4, !dbg !7048
  store %union.tree_node* %12, %union.tree_node** %second_op, align 8, !dbg !7049
  br label %if.end11, !dbg !7050

if.else:                                          ; preds = %sw.bb3
  %14 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !7051
  %15 = load %struct.ssa_acc_in_tree*, %struct.ssa_acc_in_tree** %a.addr, align 8, !dbg !7053
  %ssa_var6 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %15, i32 0, i32 0, !dbg !7054
  %16 = load %union.tree_node*, %union.tree_node** %ssa_var6, align 8, !dbg !7054
  %cmp7 = icmp eq %union.tree_node* %14, %16, !dbg !7055
  br i1 %cmp7, label %if.then8, label %if.end, !dbg !7056

if.then8:                                         ; preds = %if.else
  %17 = load %struct.ssa_acc_in_tree*, %struct.ssa_acc_in_tree** %a.addr, align 8, !dbg !7057
  %var_found9 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %17, i32 0, i32 5, !dbg !7059
  store i8 1, i8* %var_found9, align 8, !dbg !7060
  %18 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7061
  %19 = load %struct.ssa_acc_in_tree*, %struct.ssa_acc_in_tree** %a.addr, align 8, !dbg !7062
  %second_op10 = getelementptr inbounds %struct.ssa_acc_in_tree, %struct.ssa_acc_in_tree* %19, i32 0, i32 4, !dbg !7063
  store %union.tree_node* %18, %union.tree_node** %second_op10, align 8, !dbg !7064
  br label %if.end, !dbg !7065

if.end:                                           ; preds = %if.then8, %if.else
  br label %if.end11

if.end11:                                         ; preds = %if.end, %if.then
  br label %sw.epilog, !dbg !7066

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !7067

sw.epilog:                                        ; preds = %sw.default, %if.end11, %sw.bb
  ret void, !dbg !7068
}

; Function Attrs: noinline nounwind uwtable
define internal void @record_access_alloc_site_info(%struct.matrix_info* %mi, %union.gimple_statement_d* %stmt, %union.tree_node* %offset, %union.tree_node* %index, i32 %level, i8 zeroext %is_alloc) #0 !dbg !7069 {
entry:
  %mi.addr = alloca %struct.matrix_info*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %offset.addr = alloca %union.tree_node*, align 8
  %index.addr = alloca %union.tree_node*, align 8
  %level.addr = alloca i32, align 4
  %is_alloc.addr = alloca i8, align 1
  %acc_info = alloca %struct.access_site_info*, align 8
  store %struct.matrix_info* %mi, %struct.matrix_info** %mi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.matrix_info** %mi.addr, metadata !7072, metadata !DIExpression()), !dbg !7073
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7074, metadata !DIExpression()), !dbg !7075
  store %union.tree_node* %offset, %union.tree_node** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset.addr, metadata !7076, metadata !DIExpression()), !dbg !7077
  store %union.tree_node* %index, %union.tree_node** %index.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %index.addr, metadata !7078, metadata !DIExpression()), !dbg !7079
  store i32 %level, i32* %level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %level.addr, metadata !7080, metadata !DIExpression()), !dbg !7081
  store i8 %is_alloc, i8* %is_alloc.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %is_alloc.addr, metadata !7082, metadata !DIExpression()), !dbg !7083
  call void @llvm.dbg.declare(metadata %struct.access_site_info** %acc_info, metadata !7084, metadata !DIExpression()), !dbg !7085
  %0 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !7086
  %access_l = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %0, i32 0, i32 14, !dbg !7088
  %1 = load %struct.VEC_access_site_info_p_heap*, %struct.VEC_access_site_info_p_heap** %access_l, align 8, !dbg !7088
  %tobool = icmp ne %struct.VEC_access_site_info_p_heap* %1, null, !dbg !7086
  br i1 %tobool, label %if.end, label %if.then, !dbg !7089

if.then:                                          ; preds = %entry
  %call = call %struct.VEC_access_site_info_p_heap* @VEC_access_site_info_p_heap_alloc(i32 100), !dbg !7090
  %2 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !7091
  %access_l1 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %2, i32 0, i32 14, !dbg !7092
  store %struct.VEC_access_site_info_p_heap* %call, %struct.VEC_access_site_info_p_heap** %access_l1, align 8, !dbg !7093
  br label %if.end, !dbg !7091

if.end:                                           ; preds = %if.then, %entry
  %call2 = call i8* @xcalloc(i64 1, i64 48), !dbg !7094
  %3 = bitcast i8* %call2 to %struct.access_site_info*, !dbg !7095
  store %struct.access_site_info* %3, %struct.access_site_info** %acc_info, align 8, !dbg !7096
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7097
  %5 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !7098
  %stmt3 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %5, i32 0, i32 0, !dbg !7099
  store %union.gimple_statement_d* %4, %union.gimple_statement_d** %stmt3, align 8, !dbg !7100
  %6 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !7101
  %7 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !7102
  %offset4 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %7, i32 0, i32 1, !dbg !7103
  store %union.tree_node* %6, %union.tree_node** %offset4, align 8, !dbg !7104
  %8 = load %union.tree_node*, %union.tree_node** %index.addr, align 8, !dbg !7105
  %9 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !7106
  %index5 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %9, i32 0, i32 2, !dbg !7107
  store %union.tree_node* %8, %union.tree_node** %index5, align 8, !dbg !7108
  %10 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !7109
  %11 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !7110
  %function_decl = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %11, i32 0, i32 5, !dbg !7111
  store %union.tree_node* %10, %union.tree_node** %function_decl, align 8, !dbg !7112
  %12 = load i32, i32* %level.addr, align 4, !dbg !7113
  %13 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !7114
  %level6 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %13, i32 0, i32 3, !dbg !7115
  store i32 %12, i32* %level6, align 8, !dbg !7116
  %14 = load i8, i8* %is_alloc.addr, align 1, !dbg !7117
  %15 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !7118
  %is_alloc7 = getelementptr inbounds %struct.access_site_info, %struct.access_site_info* %15, i32 0, i32 4, !dbg !7119
  store i8 %14, i8* %is_alloc7, align 4, !dbg !7120
  %16 = load %struct.matrix_info*, %struct.matrix_info** %mi.addr, align 8, !dbg !7121
  %access_l8 = getelementptr inbounds %struct.matrix_info, %struct.matrix_info* %16, i32 0, i32 14, !dbg !7121
  %17 = load %struct.access_site_info*, %struct.access_site_info** %acc_info, align 8, !dbg !7121
  %call9 = call %struct.access_site_info** @VEC_access_site_info_p_heap_safe_push(%struct.VEC_access_site_info_p_heap** %access_l8, %struct.access_site_info* %17), !dbg !7121
  ret void, !dbg !7122
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !7123 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7124, metadata !DIExpression()), !dbg !7125
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7126
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !7128
  %cmp = icmp uge i32 %call, 3, !dbg !7129
  br i1 %cmp, label %if.then, label %if.else, !dbg !7130

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7131
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !7132
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !7133
  br label %return, !dbg !7133

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7134
  br label %return, !dbg !7134

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7135
  ret %union.tree_node* %2, !dbg !7135
}

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_index_from_offset(%union.tree_node* %offset, %union.gimple_statement_d* %def_stmt) #0 !dbg !7136 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %offset.addr = alloca %union.tree_node*, align 8
  %def_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %op2 = alloca %union.tree_node*, align 8
  %index = alloca %union.tree_node*, align 8
  store %union.tree_node* %offset, %union.tree_node** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset.addr, metadata !7139, metadata !DIExpression()), !dbg !7140
  store %union.gimple_statement_d* %def_stmt, %union.gimple_statement_d** %def_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt.addr, metadata !7141, metadata !DIExpression()), !dbg !7142
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !7143, metadata !DIExpression()), !dbg !7144
  call void @llvm.dbg.declare(metadata %union.tree_node** %op2, metadata !7145, metadata !DIExpression()), !dbg !7146
  call void @llvm.dbg.declare(metadata %union.tree_node** %index, metadata !7147, metadata !DIExpression()), !dbg !7148
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt.addr, align 8, !dbg !7149
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7151
  %cmp = icmp eq i32 %call, 16, !dbg !7152
  br i1 %cmp, label %if.then, label %if.end, !dbg !7153

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7154
  br label %return, !dbg !7154

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt.addr, align 8, !dbg !7155
  %call1 = call zeroext i8 @gimple_assign_copy_p(%union.gimple_statement_d* %1), !dbg !7157
  %conv = zext i8 %call1 to i32, !dbg !7157
  %tobool = icmp ne i32 %conv, 0, !dbg !7157
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false, !dbg !7158

lor.lhs.false:                                    ; preds = %if.end
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt.addr, align 8, !dbg !7159
  %call2 = call zeroext i8 @gimple_assign_cast_p(%union.gimple_statement_d* %2), !dbg !7160
  %conv3 = zext i8 %call2 to i32, !dbg !7160
  %tobool4 = icmp ne i32 %conv3, 0, !dbg !7160
  br i1 %tobool4, label %land.lhs.true, label %if.else, !dbg !7161

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt.addr, align 8, !dbg !7162
  %call5 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %3), !dbg !7162
  %base = bitcast %union.tree_node* %call5 to %struct.tree_base*, !dbg !7162
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !7162
  %bf.load = load i64, i64* %4, align 8, !dbg !7162
  %bf.clear = and i64 %bf.load, 65535, !dbg !7162
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7162
  %cmp6 = icmp eq i32 %bf.cast, 141, !dbg !7163
  br i1 %cmp6, label %if.then8, label %if.else, !dbg !7164

if.then8:                                         ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %offset.addr, align 8, !dbg !7165
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt.addr, align 8, !dbg !7166
  %call9 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !7166
  %ssa_name = bitcast %union.tree_node* %call9 to %struct.tree_ssa_name*, !dbg !7166
  %def_stmt10 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !7166
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt10, align 8, !dbg !7166
  %call11 = call %union.tree_node* @get_index_from_offset(%union.tree_node* %5, %union.gimple_statement_d* %7), !dbg !7167
  store %union.tree_node* %call11, %union.tree_node** %retval, align 8, !dbg !7168
  br label %return, !dbg !7168

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt.addr, align 8, !dbg !7169
  %call12 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %8), !dbg !7171
  %conv13 = zext i8 %call12 to i32, !dbg !7171
  %tobool14 = icmp ne i32 %conv13, 0, !dbg !7171
  br i1 %tobool14, label %land.lhs.true15, label %if.else43, !dbg !7172

land.lhs.true15:                                  ; preds = %if.else
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt.addr, align 8, !dbg !7173
  %call16 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %9), !dbg !7174
  %cmp17 = icmp eq i32 %call16, 65, !dbg !7175
  br i1 %cmp17, label %if.then19, label %if.else43, !dbg !7176

if.then19:                                        ; preds = %land.lhs.true15
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt.addr, align 8, !dbg !7177
  %call20 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %10), !dbg !7179
  store %union.tree_node* %call20, %union.tree_node** %op1, align 8, !dbg !7180
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt.addr, align 8, !dbg !7181
  %call21 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %11), !dbg !7182
  store %union.tree_node* %call21, %union.tree_node** %op2, align 8, !dbg !7183
  %12 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7184
  %base22 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !7184
  %13 = bitcast %struct.tree_base* %base22 to i64*, !dbg !7184
  %bf.load23 = load i64, i64* %13, align 8, !dbg !7184
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !7184
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !7184
  %cmp26 = icmp ne i32 %bf.cast25, 23, !dbg !7186
  br i1 %cmp26, label %land.lhs.true28, label %if.end36, !dbg !7187

land.lhs.true28:                                  ; preds = %if.then19
  %14 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !7188
  %base29 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !7188
  %15 = bitcast %struct.tree_base* %base29 to i64*, !dbg !7188
  %bf.load30 = load i64, i64* %15, align 8, !dbg !7188
  %bf.clear31 = and i64 %bf.load30, 65535, !dbg !7188
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !7188
  %cmp33 = icmp ne i32 %bf.cast32, 23, !dbg !7189
  br i1 %cmp33, label %if.then35, label %if.end36, !dbg !7190

if.then35:                                        ; preds = %land.lhs.true28
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7191
  br label %return, !dbg !7191

if.end36:                                         ; preds = %land.lhs.true28, %if.then19
  %16 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7192
  %base37 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !7192
  %17 = bitcast %struct.tree_base* %base37 to i64*, !dbg !7192
  %bf.load38 = load i64, i64* %17, align 8, !dbg !7192
  %bf.clear39 = and i64 %bf.load38, 65535, !dbg !7192
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !7192
  %cmp41 = icmp eq i32 %bf.cast40, 23, !dbg !7193
  br i1 %cmp41, label %cond.true, label %cond.false, !dbg !7194

cond.true:                                        ; preds = %if.end36
  %18 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !7195
  br label %cond.end, !dbg !7194

cond.false:                                       ; preds = %if.end36
  %19 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7196
  br label %cond.end, !dbg !7194

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %18, %cond.true ], [ %19, %cond.false ], !dbg !7194
  store %union.tree_node* %cond, %union.tree_node** %index, align 8, !dbg !7197
  %20 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !7198
  store %union.tree_node* %20, %union.tree_node** %retval, align 8, !dbg !7199
  br label %return, !dbg !7199

if.else43:                                        ; preds = %land.lhs.true15, %if.else
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7200
  br label %return, !dbg !7200

return:                                           ; preds = %if.else43, %cond.end, %if.then35, %if.then8, %if.then
  %21 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7201
  ret %union.tree_node* %21, !dbg !7201
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_access_site_info_p_heap* @VEC_access_site_info_p_heap_alloc(i32 %alloc_) #0 !dbg !7202 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7205, metadata !DIExpression()), !dbg !7206
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7206
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !7206
  %1 = bitcast i8* %call to %struct.VEC_access_site_info_p_heap*, !dbg !7206
  ret %struct.VEC_access_site_info_p_heap* %1, !dbg !7206
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.access_site_info** @VEC_access_site_info_p_heap_safe_push(%struct.VEC_access_site_info_p_heap** %vec_, %struct.access_site_info* %obj_) #0 !dbg !7207 {
entry:
  %vec_.addr = alloca %struct.VEC_access_site_info_p_heap**, align 8
  %obj_.addr = alloca %struct.access_site_info*, align 8
  store %struct.VEC_access_site_info_p_heap** %vec_, %struct.VEC_access_site_info_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_access_site_info_p_heap*** %vec_.addr, metadata !7212, metadata !DIExpression()), !dbg !7213
  store %struct.access_site_info* %obj_, %struct.access_site_info** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access_site_info** %obj_.addr, metadata !7214, metadata !DIExpression()), !dbg !7213
  %0 = load %struct.VEC_access_site_info_p_heap**, %struct.VEC_access_site_info_p_heap*** %vec_.addr, align 8, !dbg !7213
  %call = call i32 @VEC_access_site_info_p_heap_reserve(%struct.VEC_access_site_info_p_heap** %0, i32 1), !dbg !7213
  %1 = load %struct.VEC_access_site_info_p_heap**, %struct.VEC_access_site_info_p_heap*** %vec_.addr, align 8, !dbg !7213
  %2 = load %struct.VEC_access_site_info_p_heap*, %struct.VEC_access_site_info_p_heap** %1, align 8, !dbg !7213
  %tobool = icmp ne %struct.VEC_access_site_info_p_heap* %2, null, !dbg !7213
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7213

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_access_site_info_p_heap**, %struct.VEC_access_site_info_p_heap*** %vec_.addr, align 8, !dbg !7213
  %4 = load %struct.VEC_access_site_info_p_heap*, %struct.VEC_access_site_info_p_heap** %3, align 8, !dbg !7213
  %base = getelementptr inbounds %struct.VEC_access_site_info_p_heap, %struct.VEC_access_site_info_p_heap* %4, i32 0, i32 0, !dbg !7213
  br label %cond.end, !dbg !7213

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7213

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_access_site_info_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7213
  %5 = load %struct.access_site_info*, %struct.access_site_info** %obj_.addr, align 8, !dbg !7213
  %call1 = call %struct.access_site_info** @VEC_access_site_info_p_base_quick_push(%struct.VEC_access_site_info_p_base* %cond, %struct.access_site_info* %5), !dbg !7213
  ret %struct.access_site_info** %call1, !dbg !7213
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_access_site_info_p_heap_reserve(%struct.VEC_access_site_info_p_heap** %vec_, i32 %alloc_) #0 !dbg !7215 {
entry:
  %vec_.addr = alloca %struct.VEC_access_site_info_p_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_access_site_info_p_heap** %vec_, %struct.VEC_access_site_info_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_access_site_info_p_heap*** %vec_.addr, metadata !7218, metadata !DIExpression()), !dbg !7219
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7220, metadata !DIExpression()), !dbg !7219
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !7221, metadata !DIExpression()), !dbg !7219
  %0 = load %struct.VEC_access_site_info_p_heap**, %struct.VEC_access_site_info_p_heap*** %vec_.addr, align 8, !dbg !7219
  %1 = load %struct.VEC_access_site_info_p_heap*, %struct.VEC_access_site_info_p_heap** %0, align 8, !dbg !7219
  %tobool = icmp ne %struct.VEC_access_site_info_p_heap* %1, null, !dbg !7219
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7219

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_access_site_info_p_heap**, %struct.VEC_access_site_info_p_heap*** %vec_.addr, align 8, !dbg !7219
  %3 = load %struct.VEC_access_site_info_p_heap*, %struct.VEC_access_site_info_p_heap** %2, align 8, !dbg !7219
  %base = getelementptr inbounds %struct.VEC_access_site_info_p_heap, %struct.VEC_access_site_info_p_heap* %3, i32 0, i32 0, !dbg !7219
  br label %cond.end, !dbg !7219

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7219

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_access_site_info_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7219
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !7219
  %call = call i32 @VEC_access_site_info_p_base_space(%struct.VEC_access_site_info_p_base* %cond, i32 %4), !dbg !7219
  %tobool1 = icmp ne i32 %call, 0, !dbg !7219
  %lnot = xor i1 %tobool1, true, !dbg !7219
  %lnot.ext = zext i1 %lnot to i32, !dbg !7219
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !7219
  %5 = load i32, i32* %extend, align 4, !dbg !7222
  %tobool2 = icmp ne i32 %5, 0, !dbg !7222
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7219

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_access_site_info_p_heap**, %struct.VEC_access_site_info_p_heap*** %vec_.addr, align 8, !dbg !7222
  %7 = load %struct.VEC_access_site_info_p_heap*, %struct.VEC_access_site_info_p_heap** %6, align 8, !dbg !7222
  %8 = bitcast %struct.VEC_access_site_info_p_heap* %7 to i8*, !dbg !7222
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !7222
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !7222
  %10 = bitcast i8* %call3 to %struct.VEC_access_site_info_p_heap*, !dbg !7222
  %11 = load %struct.VEC_access_site_info_p_heap**, %struct.VEC_access_site_info_p_heap*** %vec_.addr, align 8, !dbg !7222
  store %struct.VEC_access_site_info_p_heap* %10, %struct.VEC_access_site_info_p_heap** %11, align 8, !dbg !7222
  br label %if.end, !dbg !7222

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !7219
  ret i32 %12, !dbg !7219
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.access_site_info** @VEC_access_site_info_p_base_quick_push(%struct.VEC_access_site_info_p_base* %vec_, %struct.access_site_info* %obj_) #0 !dbg !7224 {
entry:
  %vec_.addr = alloca %struct.VEC_access_site_info_p_base*, align 8
  %obj_.addr = alloca %struct.access_site_info*, align 8
  %slot_ = alloca %struct.access_site_info**, align 8
  store %struct.VEC_access_site_info_p_base* %vec_, %struct.VEC_access_site_info_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_access_site_info_p_base** %vec_.addr, metadata !7228, metadata !DIExpression()), !dbg !7229
  store %struct.access_site_info* %obj_, %struct.access_site_info** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access_site_info** %obj_.addr, metadata !7230, metadata !DIExpression()), !dbg !7229
  call void @llvm.dbg.declare(metadata %struct.access_site_info*** %slot_, metadata !7231, metadata !DIExpression()), !dbg !7229
  %0 = load %struct.VEC_access_site_info_p_base*, %struct.VEC_access_site_info_p_base** %vec_.addr, align 8, !dbg !7229
  %num = getelementptr inbounds %struct.VEC_access_site_info_p_base, %struct.VEC_access_site_info_p_base* %0, i32 0, i32 0, !dbg !7229
  %1 = load i32, i32* %num, align 8, !dbg !7229
  %2 = load %struct.VEC_access_site_info_p_base*, %struct.VEC_access_site_info_p_base** %vec_.addr, align 8, !dbg !7229
  %alloc = getelementptr inbounds %struct.VEC_access_site_info_p_base, %struct.VEC_access_site_info_p_base* %2, i32 0, i32 1, !dbg !7229
  %3 = load i32, i32* %alloc, align 4, !dbg !7229
  %cmp = icmp ult i32 %1, %3, !dbg !7229
  %conv = zext i1 %cmp to i32, !dbg !7229
  %4 = load %struct.VEC_access_site_info_p_base*, %struct.VEC_access_site_info_p_base** %vec_.addr, align 8, !dbg !7229
  %vec = getelementptr inbounds %struct.VEC_access_site_info_p_base, %struct.VEC_access_site_info_p_base* %4, i32 0, i32 2, !dbg !7229
  %5 = load %struct.VEC_access_site_info_p_base*, %struct.VEC_access_site_info_p_base** %vec_.addr, align 8, !dbg !7229
  %num1 = getelementptr inbounds %struct.VEC_access_site_info_p_base, %struct.VEC_access_site_info_p_base* %5, i32 0, i32 0, !dbg !7229
  %6 = load i32, i32* %num1, align 8, !dbg !7229
  %inc = add i32 %6, 1, !dbg !7229
  store i32 %inc, i32* %num1, align 8, !dbg !7229
  %idxprom = zext i32 %6 to i64, !dbg !7229
  %arrayidx = getelementptr inbounds [1 x %struct.access_site_info*], [1 x %struct.access_site_info*]* %vec, i64 0, i64 %idxprom, !dbg !7229
  store %struct.access_site_info** %arrayidx, %struct.access_site_info*** %slot_, align 8, !dbg !7229
  %7 = load %struct.access_site_info*, %struct.access_site_info** %obj_.addr, align 8, !dbg !7229
  %8 = load %struct.access_site_info**, %struct.access_site_info*** %slot_, align 8, !dbg !7229
  store %struct.access_site_info* %7, %struct.access_site_info** %8, align 8, !dbg !7229
  %9 = load %struct.access_site_info**, %struct.access_site_info*** %slot_, align 8, !dbg !7229
  ret %struct.access_site_info** %9, !dbg !7229
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_access_site_info_p_base_space(%struct.VEC_access_site_info_p_base* %vec_, i32 %alloc_) #0 !dbg !7232 {
entry:
  %vec_.addr = alloca %struct.VEC_access_site_info_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_access_site_info_p_base* %vec_, %struct.VEC_access_site_info_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_access_site_info_p_base** %vec_.addr, metadata !7235, metadata !DIExpression()), !dbg !7236
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7237, metadata !DIExpression()), !dbg !7236
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7236
  %cmp = icmp sge i32 %0, 0, !dbg !7236
  %conv = zext i1 %cmp to i32, !dbg !7236
  %1 = load %struct.VEC_access_site_info_p_base*, %struct.VEC_access_site_info_p_base** %vec_.addr, align 8, !dbg !7236
  %tobool = icmp ne %struct.VEC_access_site_info_p_base* %1, null, !dbg !7236
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7236

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_access_site_info_p_base*, %struct.VEC_access_site_info_p_base** %vec_.addr, align 8, !dbg !7236
  %alloc = getelementptr inbounds %struct.VEC_access_site_info_p_base, %struct.VEC_access_site_info_p_base* %2, i32 0, i32 1, !dbg !7236
  %3 = load i32, i32* %alloc, align 4, !dbg !7236
  %4 = load %struct.VEC_access_site_info_p_base*, %struct.VEC_access_site_info_p_base** %vec_.addr, align 8, !dbg !7236
  %num = getelementptr inbounds %struct.VEC_access_site_info_p_base, %struct.VEC_access_site_info_p_base* %4, i32 0, i32 0, !dbg !7236
  %5 = load i32, i32* %num, align 8, !dbg !7236
  %sub = sub i32 %3, %5, !dbg !7236
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !7236
  %cmp1 = icmp uge i32 %sub, %6, !dbg !7236
  %conv2 = zext i1 %cmp1 to i32, !dbg !7236
  br label %cond.end, !dbg !7236

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !7236
  %tobool3 = icmp ne i32 %7, 0, !dbg !7236
  %lnot = xor i1 %tobool3, true, !dbg !7236
  %lnot.ext = zext i1 %lnot to i32, !dbg !7236
  br label %cond.end, !dbg !7236

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !7236
  ret i32 %cond, !dbg !7236
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_access_site_info_p_base_iterate(%struct.VEC_access_site_info_p_base* %vec_, i32 %ix_, %struct.access_site_info** %ptr) #0 !dbg !7238 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_access_site_info_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.access_site_info**, align 8
  store %struct.VEC_access_site_info_p_base* %vec_, %struct.VEC_access_site_info_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_access_site_info_p_base** %vec_.addr, metadata !7243, metadata !DIExpression()), !dbg !7244
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7245, metadata !DIExpression()), !dbg !7244
  store %struct.access_site_info** %ptr, %struct.access_site_info*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.access_site_info*** %ptr.addr, metadata !7246, metadata !DIExpression()), !dbg !7244
  %0 = load %struct.VEC_access_site_info_p_base*, %struct.VEC_access_site_info_p_base** %vec_.addr, align 8, !dbg !7247
  %tobool = icmp ne %struct.VEC_access_site_info_p_base* %0, null, !dbg !7247
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7247

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7247
  %2 = load %struct.VEC_access_site_info_p_base*, %struct.VEC_access_site_info_p_base** %vec_.addr, align 8, !dbg !7247
  %num = getelementptr inbounds %struct.VEC_access_site_info_p_base, %struct.VEC_access_site_info_p_base* %2, i32 0, i32 0, !dbg !7247
  %3 = load i32, i32* %num, align 8, !dbg !7247
  %cmp = icmp ult i32 %1, %3, !dbg !7247
  br i1 %cmp, label %if.then, label %if.else, !dbg !7244

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_access_site_info_p_base*, %struct.VEC_access_site_info_p_base** %vec_.addr, align 8, !dbg !7249
  %vec = getelementptr inbounds %struct.VEC_access_site_info_p_base, %struct.VEC_access_site_info_p_base* %4, i32 0, i32 2, !dbg !7249
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !7249
  %idxprom = zext i32 %5 to i64, !dbg !7249
  %arrayidx = getelementptr inbounds [1 x %struct.access_site_info*], [1 x %struct.access_site_info*]* %vec, i64 0, i64 %idxprom, !dbg !7249
  %6 = load %struct.access_site_info*, %struct.access_site_info** %arrayidx, align 8, !dbg !7249
  %7 = load %struct.access_site_info**, %struct.access_site_info*** %ptr.addr, align 8, !dbg !7249
  store %struct.access_site_info* %6, %struct.access_site_info** %7, align 8, !dbg !7249
  store i32 1, i32* %retval, align 4, !dbg !7249
  br label %return, !dbg !7249

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.access_site_info**, %struct.access_site_info*** %ptr.addr, align 8, !dbg !7251
  store %struct.access_site_info* null, %struct.access_site_info** %8, align 8, !dbg !7251
  store i32 0, i32* %retval, align 4, !dbg !7251
  br label %return, !dbg !7251

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !7244
  ret i32 %9, !dbg !7244
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_access_site_info_p_heap_free(%struct.VEC_access_site_info_p_heap** %vec_) #0 !dbg !7253 {
entry:
  %vec_.addr = alloca %struct.VEC_access_site_info_p_heap**, align 8
  store %struct.VEC_access_site_info_p_heap** %vec_, %struct.VEC_access_site_info_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_access_site_info_p_heap*** %vec_.addr, metadata !7256, metadata !DIExpression()), !dbg !7257
  %0 = load %struct.VEC_access_site_info_p_heap**, %struct.VEC_access_site_info_p_heap*** %vec_.addr, align 8, !dbg !7258
  %1 = load %struct.VEC_access_site_info_p_heap*, %struct.VEC_access_site_info_p_heap** %0, align 8, !dbg !7258
  %tobool = icmp ne %struct.VEC_access_site_info_p_heap* %1, null, !dbg !7258
  br i1 %tobool, label %if.then, label %if.end, !dbg !7257

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_access_site_info_p_heap**, %struct.VEC_access_site_info_p_heap*** %vec_.addr, align 8, !dbg !7258
  %3 = load %struct.VEC_access_site_info_p_heap*, %struct.VEC_access_site_info_p_heap** %2, align 8, !dbg !7258
  %4 = bitcast %struct.VEC_access_site_info_p_heap* %3 to i8*, !dbg !7258
  call void @free(i8* %4), !dbg !7258
  br label %if.end, !dbg !7258

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_access_site_info_p_heap**, %struct.VEC_access_site_info_p_heap*** %vec_.addr, align 8, !dbg !7257
  store %struct.VEC_access_site_info_p_heap* null, %struct.VEC_access_site_info_p_heap** %5, align 8, !dbg !7257
  ret void, !dbg !7257
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !7260 {
entry:
  %retval = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7263, metadata !DIExpression()), !dbg !7264
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !7265, metadata !DIExpression()), !dbg !7266
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7267
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !7268
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !7266
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7269
  %tobool = icmp ne %struct.basic_block_def* %1, null, !dbg !7269
  br i1 %tobool, label %if.end, label %if.then, !dbg !7271

if.then:                                          ; preds = %entry
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !7272
  br label %return, !dbg !7272

if.end:                                           ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7273
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 3, !dbg !7274
  %3 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !7274
  store %struct.loop* %3, %struct.loop** %retval, align 8, !dbg !7275
  br label %return, !dbg !7275

return:                                           ; preds = %if.end, %if.then
  %4 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !7276
  ret %struct.loop* %4, !dbg !7276
}

declare dso_local zeroext i8 @simple_iv(%struct.loop*, %struct.loop*, %union.tree_node*, %struct.affine_iv*, i8 zeroext) #2

declare dso_local i64 @int_cst_value(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !7277 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7280, metadata !DIExpression()), !dbg !7281
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7282
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7283
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !7284
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7284
  ret %struct.basic_block_def* %1, !dbg !7285
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @can_calculate_expr_before_stmt(%union.tree_node* %expr, %struct.simple_bitmap_def* %visited) #0 !dbg !7286 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %visited.addr = alloca %struct.simple_bitmap_def*, align 8
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %res = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !7289, metadata !DIExpression()), !dbg !7290
  store %struct.simple_bitmap_def* %visited, %struct.simple_bitmap_def** %visited.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %visited.addr, metadata !7291, metadata !DIExpression()), !dbg !7292
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def_stmt, metadata !7293, metadata !DIExpression()), !dbg !7294
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !7295, metadata !DIExpression()), !dbg !7296
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7297
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7297
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7297
  %bf.load = load i64, i64* %1, align 8, !dbg !7297
  %bf.clear = and i64 %bf.load, 65535, !dbg !7297
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7297
  switch i32 %bf.cast, label %sw.default [
    i32 141, label %sw.bb
    i32 32, label %sw.bb9
    i32 34, label %sw.bb9
    i32 23, label %sw.bb9
  ], !dbg !7298

sw.bb:                                            ; preds = %entry
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !7299
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !7299
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7299
  %ssa_name = bitcast %union.tree_node* %3 to %struct.tree_ssa_name*, !dbg !7299
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !7299
  %4 = load i32, i32* %version, align 8, !dbg !7299
  %div = udiv i32 %4, 64, !dbg !7299
  %idxprom = zext i32 %div to i64, !dbg !7299
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !7299
  %5 = load i64, i64* %arrayidx, align 8, !dbg !7299
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7299
  %ssa_name1 = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !7299
  %version2 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name1, i32 0, i32 3, !dbg !7299
  %7 = load i32, i32* %version2, align 8, !dbg !7299
  %rem = urem i32 %7, 64, !dbg !7299
  %sh_prom = zext i32 %rem to i64, !dbg !7299
  %shr = lshr i64 %5, %sh_prom, !dbg !7299
  %and = and i64 %shr, 1, !dbg !7299
  %tobool = icmp ne i64 %and, 0, !dbg !7299
  br i1 %tobool, label %if.then, label %if.end, !dbg !7302

if.then:                                          ; preds = %sw.bb
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7303
  br label %return, !dbg !7303

if.end:                                           ; preds = %sw.bb
  %8 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !7304
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7305
  %ssa_name3 = bitcast %union.tree_node* %9 to %struct.tree_ssa_name*, !dbg !7305
  %version4 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name3, i32 0, i32 3, !dbg !7305
  %10 = load i32, i32* %version4, align 8, !dbg !7305
  call void @SET_BIT(%struct.simple_bitmap_def* %8, i32 %10), !dbg !7306
  %11 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7307
  %ssa_name5 = bitcast %union.tree_node* %11 to %struct.tree_ssa_name*, !dbg !7307
  %def_stmt6 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name5, i32 0, i32 2, !dbg !7307
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt6, align 8, !dbg !7307
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7308
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7309
  %14 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !7310
  %call = call %union.tree_node* @can_calculate_stmt_before_stmt(%union.gimple_statement_d* %13, %struct.simple_bitmap_def* %14), !dbg !7311
  store %union.tree_node* %call, %union.tree_node** %res, align 8, !dbg !7312
  %15 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !7313
  %16 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7314
  %ssa_name7 = bitcast %union.tree_node* %16 to %struct.tree_ssa_name*, !dbg !7314
  %version8 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name7, i32 0, i32 3, !dbg !7314
  %17 = load i32, i32* %version8, align 8, !dbg !7314
  call void @RESET_BIT(%struct.simple_bitmap_def* %15, i32 %17), !dbg !7315
  %18 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7316
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !7317
  br label %return, !dbg !7317

sw.bb9:                                           ; preds = %entry, %entry, %entry
  %19 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7318
  store %union.tree_node* %19, %union.tree_node** %retval, align 8, !dbg !7319
  br label %return, !dbg !7319

sw.default:                                       ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7320
  br label %return, !dbg !7320

return:                                           ; preds = %sw.default, %sw.bb9, %if.end, %if.then
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7321
  ret %union.tree_node* %20, !dbg !7321
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @can_calculate_stmt_before_stmt(%union.gimple_statement_d* %stmt, %struct.simple_bitmap_def* %visited) #0 !dbg !7322 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %visited.addr = alloca %struct.simple_bitmap_def*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %op2 = alloca %union.tree_node*, align 8
  %res = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %j = alloca i64, align 8
  %new_res = alloca %union.tree_node*, align 8
  %def = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7325, metadata !DIExpression()), !dbg !7326
  store %struct.simple_bitmap_def* %visited, %struct.simple_bitmap_def** %visited.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %visited.addr, metadata !7327, metadata !DIExpression()), !dbg !7328
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !7329, metadata !DIExpression()), !dbg !7330
  call void @llvm.dbg.declare(metadata %union.tree_node** %op2, metadata !7331, metadata !DIExpression()), !dbg !7332
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !7333, metadata !DIExpression()), !dbg !7334
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7335, metadata !DIExpression()), !dbg !7336
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7337
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7338
  switch i32 %call, label %sw.default40 [
    i32 6, label %sw.bb
    i32 16, label %sw.bb22
  ], !dbg !7339

sw.bb:                                            ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7340
  %call1 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1), !dbg !7342
  store i32 %call1, i32* %code, align 4, !dbg !7343
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7344
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !7345
  store %union.tree_node* %call2, %union.tree_node** %op1, align 8, !dbg !7346
  %3 = load i32, i32* %code, align 4, !dbg !7347
  switch i32 %3, label %sw.default [
    i32 66, label %sw.bb3
    i32 63, label %sw.bb3
    i32 64, label %sw.bb3
    i32 65, label %sw.bb3
    i32 116, label %sw.bb12
    i32 113, label %sw.bb12
  ], !dbg !7348

sw.bb3:                                           ; preds = %sw.bb, %sw.bb, %sw.bb, %sw.bb
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7349
  %call4 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %4), !dbg !7351
  store %union.tree_node* %call4, %union.tree_node** %op2, align 8, !dbg !7352
  %5 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7353
  %6 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !7354
  %call5 = call %union.tree_node* @can_calculate_expr_before_stmt(%union.tree_node* %5, %struct.simple_bitmap_def* %6), !dbg !7355
  store %union.tree_node* %call5, %union.tree_node** %op1, align 8, !dbg !7356
  %7 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7357
  %tobool = icmp ne %union.tree_node* %7, null, !dbg !7357
  br i1 %tobool, label %if.end, label %if.then, !dbg !7359

if.then:                                          ; preds = %sw.bb3
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7360
  br label %return, !dbg !7360

if.end:                                           ; preds = %sw.bb3
  %8 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !7361
  %9 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !7362
  %call6 = call %union.tree_node* @can_calculate_expr_before_stmt(%union.tree_node* %8, %struct.simple_bitmap_def* %9), !dbg !7363
  store %union.tree_node* %call6, %union.tree_node** %op2, align 8, !dbg !7364
  %10 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !7365
  %tobool7 = icmp ne %union.tree_node* %10, null, !dbg !7365
  br i1 %tobool7, label %if.then8, label %if.end11, !dbg !7367

if.then8:                                         ; preds = %if.end
  %11 = load i32, i32* %code, align 4, !dbg !7368
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7368
  %call9 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %12), !dbg !7368
  %13 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7368
  %14 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !7368
  %call10 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %11, %union.tree_node* %call9, %union.tree_node* %13, %union.tree_node* %14), !dbg !7368
  store %union.tree_node* %call10, %union.tree_node** %retval, align 8, !dbg !7369
  br label %return, !dbg !7369

if.end11:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7370
  br label %return, !dbg !7370

sw.bb12:                                          ; preds = %sw.bb, %sw.bb
  %15 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7371
  %16 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !7372
  %call13 = call %union.tree_node* @can_calculate_expr_before_stmt(%union.tree_node* %15, %struct.simple_bitmap_def* %16), !dbg !7373
  store %union.tree_node* %call13, %union.tree_node** %res, align 8, !dbg !7374
  %17 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7375
  %cmp = icmp ne %union.tree_node* %17, null, !dbg !7377
  br i1 %cmp, label %if.then14, label %if.else, !dbg !7378

if.then14:                                        ; preds = %sw.bb12
  %18 = load i32, i32* %code, align 4, !dbg !7379
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7379
  %call15 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %19), !dbg !7379
  %20 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7379
  %call16 = call %union.tree_node* @build1_stat(i32 %18, %union.tree_node* %call15, %union.tree_node* %20), !dbg !7379
  store %union.tree_node* %call16, %union.tree_node** %retval, align 8, !dbg !7380
  br label %return, !dbg !7380

if.else:                                          ; preds = %sw.bb12
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7381
  br label %return, !dbg !7381

sw.default:                                       ; preds = %sw.bb
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7382
  %call17 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %21), !dbg !7384
  %tobool18 = icmp ne i8 %call17, 0, !dbg !7384
  br i1 %tobool18, label %if.then19, label %if.else21, !dbg !7385

if.then19:                                        ; preds = %sw.default
  %22 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7386
  %23 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !7387
  %call20 = call %union.tree_node* @can_calculate_expr_before_stmt(%union.tree_node* %22, %struct.simple_bitmap_def* %23), !dbg !7388
  store %union.tree_node* %call20, %union.tree_node** %retval, align 8, !dbg !7389
  br label %return, !dbg !7389

if.else21:                                        ; preds = %sw.default
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7390
  br label %return, !dbg !7390

sw.bb22:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %j, metadata !7391, metadata !DIExpression()), !dbg !7393
  store %union.tree_node* null, %union.tree_node** %res, align 8, !dbg !7394
  store i64 0, i64* %j, align 8, !dbg !7395
  br label %for.cond, !dbg !7397

for.cond:                                         ; preds = %for.inc, %sw.bb22
  %24 = load i64, i64* %j, align 8, !dbg !7398
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7400
  %call23 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %25), !dbg !7401
  %conv = zext i32 %call23 to i64, !dbg !7401
  %cmp24 = icmp ult i64 %24, %conv, !dbg !7402
  br i1 %cmp24, label %for.body, label %for.end, !dbg !7403

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_res, metadata !7404, metadata !DIExpression()), !dbg !7406
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !7407, metadata !DIExpression()), !dbg !7408
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7409
  %27 = load i64, i64* %j, align 8, !dbg !7409
  %conv26 = trunc i64 %27 to i32, !dbg !7409
  %call27 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %26, i32 %conv26), !dbg !7409
  %call28 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call27), !dbg !7409
  store %union.tree_node* %call28, %union.tree_node** %def, align 8, !dbg !7408
  %28 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7410
  %29 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %visited.addr, align 8, !dbg !7411
  %call29 = call %union.tree_node* @can_calculate_expr_before_stmt(%union.tree_node* %28, %struct.simple_bitmap_def* %29), !dbg !7412
  store %union.tree_node* %call29, %union.tree_node** %new_res, align 8, !dbg !7413
  %30 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7414
  %cmp30 = icmp eq %union.tree_node* %30, null, !dbg !7416
  br i1 %cmp30, label %if.then32, label %if.else33, !dbg !7417

if.then32:                                        ; preds = %for.body
  %31 = load %union.tree_node*, %union.tree_node** %new_res, align 8, !dbg !7418
  store %union.tree_node* %31, %union.tree_node** %res, align 8, !dbg !7419
  br label %if.end39, !dbg !7420

if.else33:                                        ; preds = %for.body
  %32 = load %union.tree_node*, %union.tree_node** %new_res, align 8, !dbg !7421
  %tobool34 = icmp ne %union.tree_node* %32, null, !dbg !7421
  br i1 %tobool34, label %lor.lhs.false, label %if.then37, !dbg !7423

lor.lhs.false:                                    ; preds = %if.else33
  %33 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7424
  %34 = load %union.tree_node*, %union.tree_node** %new_res, align 8, !dbg !7425
  %call35 = call zeroext i8 @expressions_equal_p(%union.tree_node* %33, %union.tree_node* %34), !dbg !7426
  %tobool36 = icmp ne i8 %call35, 0, !dbg !7426
  br i1 %tobool36, label %if.end38, label %if.then37, !dbg !7427

if.then37:                                        ; preds = %lor.lhs.false, %if.else33
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7428
  br label %return, !dbg !7428

if.end38:                                         ; preds = %lor.lhs.false
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.then32
  br label %for.inc, !dbg !7429

for.inc:                                          ; preds = %if.end39
  %35 = load i64, i64* %j, align 8, !dbg !7430
  %inc = add i64 %35, 1, !dbg !7430
  store i64 %inc, i64* %j, align 8, !dbg !7430
  br label %for.cond, !dbg !7431, !llvm.loop !7432

for.end:                                          ; preds = %for.cond
  %36 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7434
  store %union.tree_node* %36, %union.tree_node** %retval, align 8, !dbg !7435
  br label %return, !dbg !7435

sw.default40:                                     ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7436
  br label %return, !dbg !7436

return:                                           ; preds = %sw.default40, %for.end, %if.then37, %if.else21, %if.then19, %if.else, %if.then14, %if.end11, %if.then8, %if.then
  %37 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7437
  ret %union.tree_node* %37, !dbg !7437
}

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #0 !dbg !7438 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7439, metadata !DIExpression()), !dbg !7440
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7441, metadata !DIExpression()), !dbg !7442
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7443
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7444
  store i32 %call, i32* %code, align 4, !dbg !7442
  %1 = load i32, i32* %code, align 4, !dbg !7445
  %cmp = icmp eq i32 %1, 6, !dbg !7447
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7448

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !7449
  %cmp1 = icmp eq i32 %2, 8, !dbg !7450
  br i1 %cmp1, label %if.then, label %if.else11, !dbg !7451

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7452, metadata !DIExpression()), !dbg !7454
  %3 = load i32, i32* %code, align 4, !dbg !7455
  %cmp2 = icmp eq i32 %3, 8, !dbg !7457
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !7458

if.then3:                                         ; preds = %if.then
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7459
  %call4 = call %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %4), !dbg !7460
  store %union.tree_node* %call4, %union.tree_node** %type, align 8, !dbg !7461
  br label %if.end, !dbg !7462

if.else:                                          ; preds = %if.then
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7463
  %call5 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !7464
  switch i32 %call5, label %sw.default [
    i32 66, label %sw.bb
  ], !dbg !7465

sw.bb:                                            ; preds = %if.else
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7466
  %call6 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !7466
  %common = bitcast %union.tree_node* %call6 to %struct.tree_common*, !dbg !7466
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7466
  %7 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !7466
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !7468
  br label %sw.epilog, !dbg !7469

sw.default:                                       ; preds = %if.else
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7470
  %call8 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %8), !dbg !7470
  %common9 = bitcast %union.tree_node* %call8 to %struct.tree_common*, !dbg !7470
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !7470
  %9 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !7470
  store %union.tree_node* %9, %union.tree_node** %type, align 8, !dbg !7471
  br label %sw.epilog, !dbg !7472

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %if.then3
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7473
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !7474
  br label %return, !dbg !7474

if.else11:                                        ; preds = %lor.lhs.false
  %11 = load i32, i32* %code, align 4, !dbg !7475
  %cmp12 = icmp eq i32 %11, 1, !dbg !7477
  br i1 %cmp12, label %if.then13, label %if.else14, !dbg !7478

if.then13:                                        ; preds = %if.else11
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !7479
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !7480
  br label %return, !dbg !7480

if.else14:                                        ; preds = %if.else11
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !7481
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !7482
  br label %return, !dbg !7482

return:                                           ; preds = %if.else14, %if.then13, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7483
  ret %union.tree_node* %14, !dbg !7483
}

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local zeroext i8 @expressions_equal_p(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %gs) #0 !dbg !7484 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %fn = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7485, metadata !DIExpression()), !dbg !7486
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !7487, metadata !DIExpression()), !dbg !7488
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7489
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !7490
  store %union.tree_node* %call, %union.tree_node** %fn, align 8, !dbg !7488
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7491, metadata !DIExpression()), !dbg !7492
  %1 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7493
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !7493
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7493
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !7493
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !7492
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7494
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !7494
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !7494
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !7494
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !7495
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7496
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !7496
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !7496
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !7496
  ret %union.tree_node* %6, !dbg !7497
}

; Function Attrs: noinline nounwind uwtable
define internal void @sort_dim_hot_level(i64* %a, i32* %dim_map, i32 %n) #0 !dbg !7498 {
entry:
  %a.addr = alloca i64*, align 8
  %dim_map.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %tmp1 = alloca i32, align 4
  %tmp = alloca i64, align 8
  store i64* %a, i64** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %a.addr, metadata !7501, metadata !DIExpression()), !dbg !7502
  store i32* %dim_map, i32** %dim_map.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %dim_map.addr, metadata !7503, metadata !DIExpression()), !dbg !7504
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !7505, metadata !DIExpression()), !dbg !7506
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7507, metadata !DIExpression()), !dbg !7508
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7509, metadata !DIExpression()), !dbg !7510
  call void @llvm.dbg.declare(metadata i32* %tmp1, metadata !7511, metadata !DIExpression()), !dbg !7512
  call void @llvm.dbg.declare(metadata i64* %tmp, metadata !7513, metadata !DIExpression()), !dbg !7514
  store i32 0, i32* %i, align 4, !dbg !7515
  br label %for.cond, !dbg !7517

for.cond:                                         ; preds = %for.inc29, %entry
  %0 = load i32, i32* %i, align 4, !dbg !7518
  %1 = load i32, i32* %n.addr, align 4, !dbg !7520
  %sub = sub nsw i32 %1, 1, !dbg !7521
  %cmp = icmp slt i32 %0, %sub, !dbg !7522
  br i1 %cmp, label %for.body, label %for.end31, !dbg !7523

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !7524
  br label %for.cond1, !dbg !7527

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4, !dbg !7528
  %3 = load i32, i32* %n.addr, align 4, !dbg !7530
  %sub2 = sub nsw i32 %3, 1, !dbg !7531
  %4 = load i32, i32* %i, align 4, !dbg !7532
  %sub3 = sub nsw i32 %sub2, %4, !dbg !7533
  %cmp4 = icmp slt i32 %2, %sub3, !dbg !7534
  br i1 %cmp4, label %for.body5, label %for.end, !dbg !7535

for.body5:                                        ; preds = %for.cond1
  %5 = load i64*, i64** %a.addr, align 8, !dbg !7536
  %6 = load i32, i32* %j, align 4, !dbg !7539
  %add = add nsw i32 %6, 1, !dbg !7540
  %idxprom = sext i32 %add to i64, !dbg !7536
  %arrayidx = getelementptr inbounds i64, i64* %5, i64 %idxprom, !dbg !7536
  %7 = load i64, i64* %arrayidx, align 8, !dbg !7536
  %8 = load i64*, i64** %a.addr, align 8, !dbg !7541
  %9 = load i32, i32* %j, align 4, !dbg !7542
  %idxprom6 = sext i32 %9 to i64, !dbg !7541
  %arrayidx7 = getelementptr inbounds i64, i64* %8, i64 %idxprom6, !dbg !7541
  %10 = load i64, i64* %arrayidx7, align 8, !dbg !7541
  %cmp8 = icmp slt i64 %7, %10, !dbg !7543
  br i1 %cmp8, label %if.then, label %if.end, !dbg !7544

if.then:                                          ; preds = %for.body5
  %11 = load i64*, i64** %a.addr, align 8, !dbg !7545
  %12 = load i32, i32* %j, align 4, !dbg !7547
  %idxprom9 = sext i32 %12 to i64, !dbg !7545
  %arrayidx10 = getelementptr inbounds i64, i64* %11, i64 %idxprom9, !dbg !7545
  %13 = load i64, i64* %arrayidx10, align 8, !dbg !7545
  store i64 %13, i64* %tmp, align 8, !dbg !7548
  %14 = load i64*, i64** %a.addr, align 8, !dbg !7549
  %15 = load i32, i32* %j, align 4, !dbg !7550
  %add11 = add nsw i32 %15, 1, !dbg !7551
  %idxprom12 = sext i32 %add11 to i64, !dbg !7549
  %arrayidx13 = getelementptr inbounds i64, i64* %14, i64 %idxprom12, !dbg !7549
  %16 = load i64, i64* %arrayidx13, align 8, !dbg !7549
  %17 = load i64*, i64** %a.addr, align 8, !dbg !7552
  %18 = load i32, i32* %j, align 4, !dbg !7553
  %idxprom14 = sext i32 %18 to i64, !dbg !7552
  %arrayidx15 = getelementptr inbounds i64, i64* %17, i64 %idxprom14, !dbg !7552
  store i64 %16, i64* %arrayidx15, align 8, !dbg !7554
  %19 = load i64, i64* %tmp, align 8, !dbg !7555
  %20 = load i64*, i64** %a.addr, align 8, !dbg !7556
  %21 = load i32, i32* %j, align 4, !dbg !7557
  %add16 = add nsw i32 %21, 1, !dbg !7558
  %idxprom17 = sext i32 %add16 to i64, !dbg !7556
  %arrayidx18 = getelementptr inbounds i64, i64* %20, i64 %idxprom17, !dbg !7556
  store i64 %19, i64* %arrayidx18, align 8, !dbg !7559
  %22 = load i32*, i32** %dim_map.addr, align 8, !dbg !7560
  %23 = load i32, i32* %j, align 4, !dbg !7561
  %idxprom19 = sext i32 %23 to i64, !dbg !7560
  %arrayidx20 = getelementptr inbounds i32, i32* %22, i64 %idxprom19, !dbg !7560
  %24 = load i32, i32* %arrayidx20, align 4, !dbg !7560
  store i32 %24, i32* %tmp1, align 4, !dbg !7562
  %25 = load i32*, i32** %dim_map.addr, align 8, !dbg !7563
  %26 = load i32, i32* %j, align 4, !dbg !7564
  %add21 = add nsw i32 %26, 1, !dbg !7565
  %idxprom22 = sext i32 %add21 to i64, !dbg !7563
  %arrayidx23 = getelementptr inbounds i32, i32* %25, i64 %idxprom22, !dbg !7563
  %27 = load i32, i32* %arrayidx23, align 4, !dbg !7563
  %28 = load i32*, i32** %dim_map.addr, align 8, !dbg !7566
  %29 = load i32, i32* %j, align 4, !dbg !7567
  %idxprom24 = sext i32 %29 to i64, !dbg !7566
  %arrayidx25 = getelementptr inbounds i32, i32* %28, i64 %idxprom24, !dbg !7566
  store i32 %27, i32* %arrayidx25, align 4, !dbg !7568
  %30 = load i32, i32* %tmp1, align 4, !dbg !7569
  %31 = load i32*, i32** %dim_map.addr, align 8, !dbg !7570
  %32 = load i32, i32* %j, align 4, !dbg !7571
  %add26 = add nsw i32 %32, 1, !dbg !7572
  %idxprom27 = sext i32 %add26 to i64, !dbg !7570
  %arrayidx28 = getelementptr inbounds i32, i32* %31, i64 %idxprom27, !dbg !7570
  store i32 %30, i32* %arrayidx28, align 4, !dbg !7573
  br label %if.end, !dbg !7574

if.end:                                           ; preds = %if.then, %for.body5
  br label %for.inc, !dbg !7575

for.inc:                                          ; preds = %if.end
  %33 = load i32, i32* %j, align 4, !dbg !7576
  %inc = add nsw i32 %33, 1, !dbg !7576
  store i32 %inc, i32* %j, align 4, !dbg !7576
  br label %for.cond1, !dbg !7577, !llvm.loop !7578

for.end:                                          ; preds = %for.cond1
  br label %for.inc29, !dbg !7580

for.inc29:                                        ; preds = %for.end
  %34 = load i32, i32* %i, align 4, !dbg !7581
  %inc30 = add nsw i32 %34, 1, !dbg !7581
  store i32 %inc30, i32* %i, align 4, !dbg !7581
  br label %for.cond, !dbg !7582, !llvm.loop !7583

for.end31:                                        ; preds = %for.cond
  ret void, !dbg !7585
}

declare dso_local %union.tree_node* @walk_tree_without_duplicates_1(%union.tree_node**, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @check_var_notmodified_p(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !7586 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %t = alloca %union.tree_node*, align 8
  %callback_data = alloca %struct.check_var_data*, align 8
  %fn = alloca %union.tree_node*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !7589, metadata !DIExpression()), !dbg !7590
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !7591, metadata !DIExpression()), !dbg !7592
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7593, metadata !DIExpression()), !dbg !7594
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !7595, metadata !DIExpression()), !dbg !7596
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !7597, metadata !DIExpression()), !dbg !7598
  %0 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7599
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7600
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !7598
  call void @llvm.dbg.declare(metadata %struct.check_var_data** %callback_data, metadata !7601, metadata !DIExpression()), !dbg !7602
  %2 = load i8*, i8** %data.addr, align 8, !dbg !7603
  %3 = bitcast i8* %2 to %struct.check_var_data*, !dbg !7604
  store %struct.check_var_data* %3, %struct.check_var_data** %callback_data, align 8, !dbg !7602
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !7605, metadata !DIExpression()), !dbg !7606
  %4 = load %struct.check_var_data*, %struct.check_var_data** %callback_data, align 8, !dbg !7607
  %fn1 = getelementptr inbounds %struct.check_var_data, %struct.check_var_data* %4, i32 0, i32 0, !dbg !7608
  %5 = load %union.tree_node*, %union.tree_node** %fn1, align 8, !dbg !7608
  store %union.tree_node* %5, %union.tree_node** %fn, align 8, !dbg !7606
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !7609, metadata !DIExpression()), !dbg !7610
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7611, metadata !DIExpression()), !dbg !7612
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7613
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !7613
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !7613
  %bf.load = load i64, i64* %7, align 8, !dbg !7613
  %bf.clear = and i64 %bf.load, 65535, !dbg !7613
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7613
  %cmp = icmp ne i32 %bf.cast, 32, !dbg !7615
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7616

land.lhs.true:                                    ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7617
  %base2 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7617
  %9 = bitcast %struct.tree_base* %base2 to i64*, !dbg !7617
  %bf.load3 = load i64, i64* %9, align 8, !dbg !7617
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !7617
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !7617
  %cmp6 = icmp ne i32 %bf.cast5, 34, !dbg !7618
  br i1 %cmp6, label %if.then, label %if.end, !dbg !7619

if.then:                                          ; preds = %land.lhs.true
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7620
  br label %return, !dbg !7620

if.end:                                           ; preds = %land.lhs.true, %entry
  %10 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7621
  %function_decl = bitcast %union.tree_node* %10 to %struct.tree_function_decl*, !dbg !7621
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !7621
  %11 = load %struct.function*, %struct.function** %f, align 8, !dbg !7621
  %cfg = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 1, !dbg !7621
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7621
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i32 0, i32 0, !dbg !7621
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !7621
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 6, !dbg !7621
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !7621
  store %struct.basic_block_def* %14, %struct.basic_block_def** %bb, align 8, !dbg !7621
  br label %for.cond, !dbg !7621

for.cond:                                         ; preds = %for.inc26, %if.end
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7623
  %16 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !7623
  %function_decl7 = bitcast %union.tree_node* %16 to %struct.tree_function_decl*, !dbg !7623
  %f8 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl7, i32 0, i32 1, !dbg !7623
  %17 = load %struct.function*, %struct.function** %f8, align 8, !dbg !7623
  %cfg9 = getelementptr inbounds %struct.function, %struct.function* %17, i32 0, i32 1, !dbg !7623
  %18 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg9, align 8, !dbg !7623
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %18, i32 0, i32 1, !dbg !7623
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !7623
  %cmp10 = icmp ne %struct.basic_block_def* %15, %19, !dbg !7623
  br i1 %cmp10, label %for.body, label %for.end28, !dbg !7621

for.body:                                         ; preds = %for.cond
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7625
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %20), !dbg !7628
  %21 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !7628
  %22 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !7628
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false), !dbg !7628
  br label %for.cond11, !dbg !7629

for.cond11:                                       ; preds = %for.inc, %for.body
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7630
  %tobool = icmp ne i8 %call, 0, !dbg !7632
  %lnot = xor i1 %tobool, true, !dbg !7632
  br i1 %lnot, label %for.body12, label %for.end, !dbg !7633

for.body12:                                       ; preds = %for.cond11
  %call13 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7634
  store %union.gimple_statement_d* %call13, %union.gimple_statement_d** %stmt, align 8, !dbg !7636
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7637
  %call14 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %23), !dbg !7639
  %tobool15 = icmp ne i8 %call14, 0, !dbg !7639
  br i1 %tobool15, label %if.end20, label %land.lhs.true16, !dbg !7640

land.lhs.true16:                                  ; preds = %for.body12
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7641
  %call17 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %24), !dbg !7642
  %tobool18 = icmp ne i8 %call17, 0, !dbg !7642
  br i1 %tobool18, label %if.end20, label %if.then19, !dbg !7643

if.then19:                                        ; preds = %land.lhs.true16
  br label %for.inc, !dbg !7644

if.end20:                                         ; preds = %land.lhs.true16, %for.body12
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7645
  %call21 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %25), !dbg !7647
  %26 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7648
  %cmp22 = icmp eq %union.tree_node* %call21, %26, !dbg !7649
  br i1 %cmp22, label %if.then23, label %if.end25, !dbg !7650

if.then23:                                        ; preds = %if.end20
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7651
  %28 = load %struct.check_var_data*, %struct.check_var_data** %callback_data, align 8, !dbg !7653
  %stmt24 = getelementptr inbounds %struct.check_var_data, %struct.check_var_data* %28, i32 0, i32 1, !dbg !7654
  store %union.gimple_statement_d* %27, %union.gimple_statement_d** %stmt24, align 8, !dbg !7655
  %29 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7656
  store %union.tree_node* %29, %union.tree_node** %retval, align 8, !dbg !7657
  br label %return, !dbg !7657

if.end25:                                         ; preds = %if.end20
  br label %for.inc, !dbg !7658

for.inc:                                          ; preds = %if.end25, %if.then19
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !7659
  br label %for.cond11, !dbg !7660, !llvm.loop !7661

for.end:                                          ; preds = %for.cond11
  br label %for.inc26, !dbg !7663

for.inc26:                                        ; preds = %for.end
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7623
  %next_bb27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 6, !dbg !7623
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb27, align 8, !dbg !7623
  store %struct.basic_block_def* %31, %struct.basic_block_def** %bb, align 8, !dbg !7623
  br label %for.cond, !dbg !7623, !llvm.loop !7664

for.end28:                                        ; preds = %for.cond
  %32 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !7666
  store i32 1, i32* %32, align 4, !dbg !7667
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7668
  br label %return, !dbg !7668

return:                                           ; preds = %for.end28, %if.then23, %if.then
  %33 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7669
  ret %union.tree_node* %33, !dbg !7669
}

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) #2

declare dso_local %union.tree_node* @add_new_static_var(%union.tree_node*) #2

declare dso_local %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator*, %union.tree_node*, i8 zeroext, %union.tree_node*, i8 zeroext, i32) #2

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @mark_symbols_for_renaming(%union.gimple_statement_d*) #2

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local void @update_ssa(i32) #2

declare dso_local %struct.cgraph_node* @cgraph_node(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !7670 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !7673, metadata !DIExpression()), !dbg !7674
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !7675, metadata !DIExpression()), !dbg !7676
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7677
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !7677
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !7677
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7678
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !7679
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !7680
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7681
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !7682
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !7682
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !7683
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !7683
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7684
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !7685
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !7686
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7687
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 3, !dbg !7688
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !7689
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7690
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 2, !dbg !7691
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !7692
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7693
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7694
  %iter_node2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 2, !dbg !7695
  %next3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node2, i32 0, i32 1, !dbg !7696
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next3, align 8, !dbg !7697
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7698
  %iter_node4 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %9, i32 0, i32 2, !dbg !7699
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node4, i32 0, i32 2, !dbg !7700
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !7701
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !7702
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7703
  %iter_node5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 2, !dbg !7704
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node5, i32 0, i32 3, !dbg !7705
  store %union.tree_node** null, %union.tree_node*** %use, align 8, !dbg !7706
  %11 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7707
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %11), !dbg !7709
  %tobool = icmp ne i8 %call, 0, !dbg !7709
  br i1 %tobool, label %if.then, label %if.end, !dbg !7710

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !7711
  br label %return, !dbg !7711

if.end:                                           ; preds = %entry
  %12 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7712
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %12, i32 0, i32 0, !dbg !7713
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !7713
  %14 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7714
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %13, %struct.immediate_use_iterator_d* %14), !dbg !7715
  %15 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7716
  %imm_use7 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %15, i32 0, i32 0, !dbg !7716
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use7, align 8, !dbg !7716
  %loc8 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %16, i32 0, i32 2, !dbg !7716
  %stmt9 = bitcast %union.anon* %loc8 to %union.gimple_statement_d**, !dbg !7716
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt9, align 8, !dbg !7716
  store %union.gimple_statement_d* %17, %union.gimple_statement_d** %retval, align 8, !dbg !7717
  br label %return, !dbg !7717

return:                                           ; preds = %if.end, %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !7718
  ret %union.gimple_statement_d* %18, !dbg !7718
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !7719 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !7720, metadata !DIExpression()), !dbg !7721
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7722
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !7723
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !7723
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7724
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !7725
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !7725
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !7726
  %conv = zext i1 %cmp to i32, !dbg !7726
  %conv1 = trunc i32 %conv to i8, !dbg !7727
  ret i8 %conv1, !dbg !7728
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !7729 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !7730, metadata !DIExpression()), !dbg !7731
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7732
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !7733
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !7733
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 1, !dbg !7734
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !7734
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7735
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %3, i32 0, i32 3, !dbg !7736
  store %struct.ssa_use_operand_d* %2, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !7737
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7738
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !7739
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !7739
  ret %struct.ssa_use_operand_d* %5, !dbg !7740
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !7741 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !7742, metadata !DIExpression()), !dbg !7743
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7744
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !7745
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !7745
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7746
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 2, !dbg !7747
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %iter_node, !dbg !7748
  %conv = zext i1 %cmp to i32, !dbg !7748
  %conv1 = trunc i32 %conv to i8, !dbg !7749
  ret i8 %conv1, !dbg !7750
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #0 !dbg !7751 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !7754, metadata !DIExpression()), !dbg !7755
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !7756, metadata !DIExpression()), !dbg !7757
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !7758
  call void @delink_imm_use(%struct.ssa_use_operand_d* %0), !dbg !7759
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !7760
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !7761
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 3, !dbg !7762
  %3 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !7762
  store %union.tree_node* %1, %union.tree_node** %3, align 8, !dbg !7763
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !7764
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !7765
  call void @link_imm_use(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !7766
  ret void, !dbg !7767
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !7768 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !7769, metadata !DIExpression()), !dbg !7770
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7771
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 3, !dbg !7772
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !7772
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7773
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !7774
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !7775
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7776
  %call = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !7778
  %tobool = icmp ne i8 %call, 0, !dbg !7778
  br i1 %tobool, label %if.then, label %if.else, !dbg !7779

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7780
  br label %return, !dbg !7780

if.else:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7781
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !7783
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !7783
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !7784
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !7784
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7785
  %next_imm_name2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 3, !dbg !7786
  store %struct.ssa_use_operand_d* %6, %struct.ssa_use_operand_d** %next_imm_name2, align 8, !dbg !7787
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7788
  %imm_use3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 0, !dbg !7789
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use3, align 8, !dbg !7789
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7790
  br label %return, !dbg !7790

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7791
  ret %struct.ssa_use_operand_d* %10, !dbg !7791
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !7792 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !7795, metadata !DIExpression()), !dbg !7796
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7797
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 2, !dbg !7798
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 1, !dbg !7799
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !7799
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7800
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !7801
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !7802
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7803
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !7805
  %tobool = icmp ne i8 %call, 0, !dbg !7805
  br i1 %tobool, label %if.then, label %if.end4, !dbg !7806

if.then:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7807
  %iter_node1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 2, !dbg !7810
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node1, i32 0, i32 0, !dbg !7811
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7811
  %cmp = icmp ne %struct.ssa_use_operand_d* %5, null, !dbg !7812
  br i1 %cmp, label %if.then2, label %if.end, !dbg !7813

if.then2:                                         ; preds = %if.then
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7814
  %iter_node3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 2, !dbg !7815
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node3), !dbg !7816
  br label %if.end, !dbg !7816

if.end:                                           ; preds = %if.then2, %if.then
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !7817
  br label %return, !dbg !7817

if.end4:                                          ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7818
  %imm_use5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !7819
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use5, align 8, !dbg !7819
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7820
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %8, %struct.immediate_use_iterator_d* %9), !dbg !7821
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7822
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 0, !dbg !7822
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !7822
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 2, !dbg !7822
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !7822
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7822
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %retval, align 8, !dbg !7823
  br label %return, !dbg !7823

return:                                           ; preds = %if.end4, %if.end
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !7824
  ret %union.gimple_statement_d* %13, !dbg !7824
}

declare dso_local %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node*, %union.gimple_statement_d*) #2

declare dso_local void @cgraph_remove_edge(%struct.cgraph_edge*) #2

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @link_use_stmts_after(%struct.ssa_use_operand_d* %head, %struct.immediate_use_iterator_d* %imm) #0 !dbg !7825 {
entry:
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %last_p = alloca %struct.ssa_use_operand_d*, align 8
  %head_stmt = alloca %union.gimple_statement_d*, align 8
  %use = alloca %union.tree_node*, align 8
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  %flag = alloca i32, align 4
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !7828, metadata !DIExpression()), !dbg !7829
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !7830, metadata !DIExpression()), !dbg !7831
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !7832, metadata !DIExpression()), !dbg !7833
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p, metadata !7834, metadata !DIExpression()), !dbg !7835
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !7836
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7835
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %head_stmt, metadata !7837, metadata !DIExpression()), !dbg !7838
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !7839
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 2, !dbg !7839
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !7839
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7839
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %head_stmt, align 8, !dbg !7838
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !7840, metadata !DIExpression()), !dbg !7841
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !7842
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %3), !dbg !7842
  store %union.tree_node* %call, %union.tree_node** %use, align 8, !dbg !7841
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !7843, metadata !DIExpression()), !dbg !7844
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !7845, metadata !DIExpression()), !dbg !7846
  %4 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !7847
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !7848
  %conv = zext i8 %call1 to i32, !dbg !7848
  %tobool = icmp ne i32 %conv, 0, !dbg !7848
  %5 = zext i1 %tobool to i64, !dbg !7848
  %cond = select i1 %tobool, i32 1, i32 4, !dbg !7848
  store i32 %cond, i32* %flag, align 4, !dbg !7849
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !7850
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !7852
  %cmp = icmp eq i32 %call2, 16, !dbg !7853
  br i1 %cmp, label %if.then, label %if.else, !dbg !7854

if.then:                                          ; preds = %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !7855
  %8 = load i32, i32* %flag, align 4, !dbg !7855
  %call4 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %7, i32 %8), !dbg !7855
  store %struct.ssa_use_operand_d* %call4, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7855
  br label %for.cond, !dbg !7855

for.cond:                                         ; preds = %for.inc, %if.then
  %call5 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !7858
  %tobool6 = icmp ne i8 %call5, 0, !dbg !7858
  %lnot = xor i1 %tobool6, true, !dbg !7858
  br i1 %lnot, label %for.body, label %for.end, !dbg !7855

for.body:                                         ; preds = %for.cond
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7860
  %call7 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %9), !dbg !7860
  %10 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !7862
  %cmp8 = icmp eq %union.tree_node* %call7, %10, !dbg !7863
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !7864

if.then10:                                        ; preds = %for.body
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7865
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !7866
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7867
  %call11 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %11, %struct.ssa_use_operand_d* %12, %struct.ssa_use_operand_d* %13), !dbg !7868
  store %struct.ssa_use_operand_d* %call11, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7869
  br label %if.end, !dbg !7870

if.end:                                           ; preds = %if.then10, %for.body
  br label %for.inc, !dbg !7862

for.inc:                                          ; preds = %if.end
  %call12 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !7858
  store %struct.ssa_use_operand_d* %call12, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7858
  br label %for.cond, !dbg !7858, !llvm.loop !7871

for.end:                                          ; preds = %for.cond
  br label %if.end44, !dbg !7873

if.else:                                          ; preds = %entry
  %14 = load i32, i32* %flag, align 4, !dbg !7874
  %cmp13 = icmp eq i32 %14, 1, !dbg !7877
  br i1 %cmp13, label %if.then15, label %if.else31, !dbg !7878

if.then15:                                        ; preds = %if.else
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !7879
  %16 = load i32, i32* %flag, align 4, !dbg !7879
  %call16 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %15, i32 %16), !dbg !7879
  store %struct.ssa_use_operand_d* %call16, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7879
  br label %for.cond17, !dbg !7879

for.cond17:                                       ; preds = %for.inc28, %if.then15
  %call18 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !7882
  %tobool19 = icmp ne i8 %call18, 0, !dbg !7882
  %lnot20 = xor i1 %tobool19, true, !dbg !7882
  br i1 %lnot20, label %for.body21, label %for.end30, !dbg !7879

for.body21:                                       ; preds = %for.cond17
  %17 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7884
  %call22 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %17), !dbg !7884
  %18 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !7886
  %cmp23 = icmp eq %union.tree_node* %call22, %18, !dbg !7887
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !7888

if.then25:                                        ; preds = %for.body21
  %19 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7889
  %20 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !7890
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7891
  %call26 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %19, %struct.ssa_use_operand_d* %20, %struct.ssa_use_operand_d* %21), !dbg !7892
  store %struct.ssa_use_operand_d* %call26, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7893
  br label %if.end27, !dbg !7894

if.end27:                                         ; preds = %if.then25, %for.body21
  br label %for.inc28, !dbg !7886

for.inc28:                                        ; preds = %if.end27
  %call29 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !7882
  store %struct.ssa_use_operand_d* %call29, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7882
  br label %for.cond17, !dbg !7882, !llvm.loop !7895

for.end30:                                        ; preds = %for.cond17
  br label %if.end43, !dbg !7897

if.else31:                                        ; preds = %if.else
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !7898
  %call32 = call %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %22), !dbg !7900
  store %struct.ssa_use_operand_d* %call32, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7901
  %cmp33 = icmp ne %struct.ssa_use_operand_d* %call32, null, !dbg !7902
  br i1 %cmp33, label %if.then35, label %if.end42, !dbg !7903

if.then35:                                        ; preds = %if.else31
  %23 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7904
  %call36 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %23), !dbg !7904
  %24 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !7907
  %cmp37 = icmp eq %union.tree_node* %call36, %24, !dbg !7908
  br i1 %cmp37, label %if.then39, label %if.end41, !dbg !7909

if.then39:                                        ; preds = %if.then35
  %25 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7910
  %26 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !7911
  %27 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7912
  %call40 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %25, %struct.ssa_use_operand_d* %26, %struct.ssa_use_operand_d* %27), !dbg !7913
  store %struct.ssa_use_operand_d* %call40, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7914
  br label %if.end41, !dbg !7915

if.end41:                                         ; preds = %if.then39, %if.then35
  br label %if.end42, !dbg !7916

if.end42:                                         ; preds = %if.end41, %if.else31
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %for.end30
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %for.end
  %28 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7917
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %28, i32 0, i32 2, !dbg !7919
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !7920
  %29 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7920
  %cmp45 = icmp ne %struct.ssa_use_operand_d* %29, null, !dbg !7921
  br i1 %cmp45, label %if.then47, label %if.end49, !dbg !7922

if.then47:                                        ; preds = %if.end44
  %30 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7923
  %iter_node48 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %30, i32 0, i32 2, !dbg !7924
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node48), !dbg !7925
  br label %if.end49, !dbg !7925

if.end49:                                         ; preds = %if.then47, %if.end44
  %31 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7926
  %iter_node50 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %31, i32 0, i32 2, !dbg !7927
  %32 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7928
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %iter_node50, %struct.ssa_use_operand_d* %32), !dbg !7929
  ret void, !dbg !7930
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !7931 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7935, metadata !DIExpression()), !dbg !7936
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !7937, metadata !DIExpression()), !dbg !7938
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7939, metadata !DIExpression()), !dbg !7940
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !7941, metadata !DIExpression()), !dbg !7942
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !7943
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !7944
  store %union.tree_node* %call, %union.tree_node** %phi_def, align 8, !dbg !7942
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !7945, metadata !DIExpression()), !dbg !7946
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7947
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !7948
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7949
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !7950
  store i8 0, i8* %done, align 8, !dbg !7951
  %3 = load i32, i32* %flags.addr, align 4, !dbg !7952
  %and = and i32 %3, 5, !dbg !7952
  %cmp = icmp ne i32 %and, 0, !dbg !7952
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7952

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.14, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7952
  br label %cond.end, !dbg !7952

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7952

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7952
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !7953
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !7954
  %conv = zext i8 %call1 to i32, !dbg !7954
  %tobool = icmp ne i32 %conv, 0, !dbg !7954
  %5 = zext i1 %tobool to i64, !dbg !7954
  %cond2 = select i1 %tobool, i32 1, i32 4, !dbg !7954
  store i32 %cond2, i32* %comp, align 4, !dbg !7955
  %6 = load i32, i32* %flags.addr, align 4, !dbg !7956
  %7 = load i32, i32* %comp, align 4, !dbg !7958
  %and3 = and i32 %6, %7, !dbg !7959
  %cmp4 = icmp eq i32 %and3, 0, !dbg !7960
  br i1 %cmp4, label %if.then, label %if.end, !dbg !7961

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7962
  %done6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !7964
  store i8 1, i8* %done6, align 8, !dbg !7965
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7966
  br label %return, !dbg !7966

if.end:                                           ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !7967
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7968
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 6, !dbg !7969
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7970
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !7971
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %11), !dbg !7972
  %12 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7973
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %12, i32 0, i32 5, !dbg !7974
  store i32 %call7, i32* %num_phi, align 4, !dbg !7975
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7976
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 1, !dbg !7977
  store i32 2, i32* %iter_type, align 4, !dbg !7978
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7979
  %call8 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %14), !dbg !7980
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7981
  br label %return, !dbg !7981

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7982
  ret %struct.ssa_use_operand_d* %15, !dbg !7982
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !7983 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7988, metadata !DIExpression()), !dbg !7989
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7990
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !7991
  %1 = load i8, i8* %done, align 8, !dbg !7991
  ret i8 %1, !dbg !7992
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p) #0 !dbg !7993 {
entry:
  %use_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %last_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p.addr, metadata !7996, metadata !DIExpression()), !dbg !7997
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !7998, metadata !DIExpression()), !dbg !7999
  store %struct.ssa_use_operand_d* %last_p, %struct.ssa_use_operand_d** %last_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p.addr, metadata !8000, metadata !DIExpression()), !dbg !8001
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8002
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !8004
  %cmp = icmp ne %struct.ssa_use_operand_d* %0, %1, !dbg !8005
  br i1 %cmp, label %if.then, label %if.end3, !dbg !8006

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !8007
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !8010
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8010
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8011
  %cmp1 = icmp eq %struct.ssa_use_operand_d* %3, %4, !dbg !8012
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !8013

if.then2:                                         ; preds = %if.then
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8014
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !8015
  br label %if.end, !dbg !8016

if.else:                                          ; preds = %if.then
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8017
  call void @delink_imm_use(%struct.ssa_use_operand_d* %6), !dbg !8019
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8020
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !8021
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d* %8), !dbg !8022
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !8023
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !8024
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end3, !dbg !8025

if.end3:                                          ; preds = %if.end, %entry
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !8026
  ret %struct.ssa_use_operand_d* %10, !dbg !8027
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !8028 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8031, metadata !DIExpression()), !dbg !8032
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !8033, metadata !DIExpression()), !dbg !8034
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8035
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !8037
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !8037
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !8035
  br i1 %tobool, label %if.then, label %if.end, !dbg !8038

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8039
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !8039
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !8039
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !8039
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8041
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8042
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !8043
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !8043
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !8044
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !8044
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8045
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !8046
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !8047
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8048
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8049
  br label %return, !dbg !8049

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8050
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !8052
  %10 = load i32, i32* %phi_i, align 8, !dbg !8052
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8053
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !8054
  %12 = load i32, i32* %num_phi, align 4, !dbg !8054
  %cmp = icmp slt i32 %10, %12, !dbg !8055
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !8056

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8057
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !8057
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !8057
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8057
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !8057
  %16 = load i32, i32* %phi_i5, align 8, !dbg !8057
  %inc = add nsw i32 %16, 1, !dbg !8057
  store i32 %inc, i32* %phi_i5, align 8, !dbg !8057
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !8057
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8059
  br label %return, !dbg !8059

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8060
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !8061
  store i8 1, i8* %done, align 8, !dbg !8062
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8063
  br label %return, !dbg !8063

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8064
  ret %struct.ssa_use_operand_d* %18, !dbg !8064
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !8065 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8066, metadata !DIExpression()), !dbg !8067
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8068, metadata !DIExpression()), !dbg !8069
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !8070, metadata !DIExpression()), !dbg !8071
  %0 = load i32, i32* %flags.addr, align 4, !dbg !8072
  %and = and i32 %0, 10, !dbg !8072
  %cmp = icmp eq i32 %and, 0, !dbg !8072
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !8072

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !8072
  %and1 = and i32 %1, 1, !dbg !8072
  %tobool = icmp ne i32 %and1, 0, !dbg !8072
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8072

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.14, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8072
  br label %cond.end, !dbg !8072

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !8072

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8072
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8073
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8074
  %4 = load i32, i32* %flags.addr, align 4, !dbg !8075
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !8076
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8077
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !8078
  store i32 2, i32* %iter_type, align 4, !dbg !8079
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8080
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !8081
  ret %struct.ssa_use_operand_d* %call, !dbg !8082
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %g) #0 !dbg !8083 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %ops = alloca %struct.use_optype_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8086, metadata !DIExpression()), !dbg !8087
  call void @llvm.dbg.declare(metadata %struct.use_optype_d** %ops, metadata !8088, metadata !DIExpression()), !dbg !8089
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8090
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !8092
  %tobool = icmp ne i8 %call, 0, !dbg !8092
  br i1 %tobool, label %if.end, label %if.then, !dbg !8093

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8094
  br label %return, !dbg !8094

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8095
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !8096
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !8097
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !8098
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !8098
  store %struct.use_optype_d* %2, %struct.use_optype_d** %ops, align 8, !dbg !8099
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !8100
  %tobool1 = icmp ne %struct.use_optype_d* %3, null, !dbg !8100
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !8102

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !8103
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %4, i32 0, i32 1, !dbg !8103
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use_ptr, i32 0, i32 3, !dbg !8104
  %5 = load %union.tree_node**, %union.tree_node*** %use, align 8, !dbg !8104
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8105
  %gsmembase = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_with_memory_ops_base*, !dbg !8106
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !8107
  %cmp = icmp eq %union.tree_node** %5, %vuse, !dbg !8108
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !8109

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !8110
  %use_ptr3 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %7, i32 0, i32 1, !dbg !8110
  store %struct.ssa_use_operand_d* %use_ptr3, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8111
  br label %return, !dbg !8111

if.end4:                                          ; preds = %land.lhs.true, %if.end
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8112
  br label %return, !dbg !8112

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8113
  ret %struct.ssa_use_operand_d* %8, !dbg !8113
}

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !8114 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !8117, metadata !DIExpression()), !dbg !8118
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8119
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !8121
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !8121
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !8122
  br i1 %cmp, label %if.then, label %if.end, !dbg !8123

if.then:                                          ; preds = %entry
  br label %return, !dbg !8124

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8125
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !8126
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8126
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8127
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !8128
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !8128
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !8129
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !8130
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8131
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !8132
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !8132
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8133
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !8134
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !8134
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !8135
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !8136
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8137
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !8138
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !8139
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8140
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !8141
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !8142
  br label %return, !dbg !8143

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !8143
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !8144 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !8147, metadata !DIExpression()), !dbg !8148
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !8149, metadata !DIExpression()), !dbg !8150
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !8151
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8152
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !8153
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !8154
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !8155
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !8156
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8156
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8157
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !8158
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !8159
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8160
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !8161
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !8162
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !8162
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !8163
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !8164
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8165
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !8166
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !8167
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !8168
  ret void, !dbg !8169
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !8170 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8171, metadata !DIExpression()), !dbg !8172
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8173
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !8174
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !8175
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8175
  ret %union.tree_node* %1, !dbg !8176
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !8177 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8180, metadata !DIExpression()), !dbg !8181
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8182
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !8183
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !8184
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8185
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %1, i32 0, i32 3, !dbg !8186
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !8187
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8188
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 1, !dbg !8189
  store i32 0, i32* %iter_type, align 4, !dbg !8190
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8191
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 4, !dbg !8192
  store i32 0, i32* %phi_i, align 8, !dbg !8193
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8194
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 5, !dbg !8195
  store i32 0, i32* %num_phi, align 4, !dbg !8196
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8197
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 6, !dbg !8198
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !8199
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8200
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 0, !dbg !8201
  store i8 1, i8* %done, align 8, !dbg !8202
  ret void, !dbg !8203
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !8204 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8207, metadata !DIExpression()), !dbg !8208
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8209, metadata !DIExpression()), !dbg !8210
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !8211, metadata !DIExpression()), !dbg !8212
  %0 = load i32, i32* %flags.addr, align 4, !dbg !8213
  %and = and i32 %0, 8, !dbg !8213
  %tobool = icmp ne i32 %and, 0, !dbg !8213
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !8213

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !8213
  %and1 = and i32 %1, 2, !dbg !8213
  %tobool2 = icmp ne i32 %and1, 0, !dbg !8213
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !8213

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !8213
  %and3 = and i32 %2, 4, !dbg !8213
  %tobool4 = icmp ne i32 %and3, 0, !dbg !8213
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !8213

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !8213
  %and6 = and i32 %3, 1, !dbg !8213
  %tobool7 = icmp ne i32 %and6, 0, !dbg !8213
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !8213

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.14, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8213
  br label %cond.end, !dbg !8213

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !8213

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8213
  %4 = load i32, i32* %flags.addr, align 4, !dbg !8214
  %and8 = and i32 %4, 10, !dbg !8215
  %tobool9 = icmp ne i32 %and8, 0, !dbg !8215
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !8216

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8217
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !8218
  br label %cond.end12, !dbg !8216

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !8216

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !8216
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8219
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !8220
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !8221
  %7 = load i32, i32* %flags.addr, align 4, !dbg !8222
  %and14 = and i32 %7, 8, !dbg !8224
  %tobool15 = icmp ne i32 %and14, 0, !dbg !8224
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !8225

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8226
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !8227
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !8227
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !8226
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !8228

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8229
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !8230
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !8231
  br i1 %cmp, label %if.then, label %if.end, !dbg !8232

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8233
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !8234
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !8234
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !8235
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !8235
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8236
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !8237
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !8238
  br label %if.end, !dbg !8236

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !8239
  %and23 = and i32 %15, 5, !dbg !8240
  %tobool24 = icmp ne i32 %and23, 0, !dbg !8240
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !8241

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8242
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !8243
  br label %cond.end28, !dbg !8241

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !8241

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !8241
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8244
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !8245
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !8246
  %18 = load i32, i32* %flags.addr, align 4, !dbg !8247
  %and30 = and i32 %18, 4, !dbg !8249
  %tobool31 = icmp ne i32 %and30, 0, !dbg !8249
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !8250

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8251
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !8252
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !8252
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !8251
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !8253

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8254
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !8255
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !8256
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !8257

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8258
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !8259
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !8259
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !8260
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !8260
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8261
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !8262
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !8263
  br label %if.end42, !dbg !8261

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8264
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !8265
  store i8 0, i8* %done, align 8, !dbg !8266
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8267
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !8268
  store i32 0, i32* %phi_i, align 8, !dbg !8269
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8270
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !8271
  store i32 0, i32* %num_phi, align 4, !dbg !8272
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8273
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !8274
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !8275
  ret void, !dbg !8276
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !8277 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8280, metadata !DIExpression()), !dbg !8281
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8282
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !8284
  %tobool = icmp ne i8 %call, 0, !dbg !8284
  br i1 %tobool, label %if.end, label %if.then, !dbg !8285

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !8286
  br label %return, !dbg !8286

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8287
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !8288
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !8289
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !8290
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !8290
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !8291
  br label %return, !dbg !8291

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !8292
  ret %struct.def_optype_d* %3, !dbg !8292
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !8293 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8294, metadata !DIExpression()), !dbg !8295
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8296
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !8298
  %tobool = icmp ne i8 %call, 0, !dbg !8298
  br i1 %tobool, label %if.end, label %if.then, !dbg !8299

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8300
  br label %return, !dbg !8300

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8301
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !8302
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !8303
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !8303
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !8304
  br label %return, !dbg !8304

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8305
  ret %union.tree_node* %3, !dbg !8305
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !8306 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8309, metadata !DIExpression()), !dbg !8310
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8311
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !8313
  %tobool = icmp ne i8 %call, 0, !dbg !8313
  br i1 %tobool, label %if.end, label %if.then, !dbg !8314

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !8315
  br label %return, !dbg !8315

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8316
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !8317
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !8318
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !8319
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !8319
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !8320
  br label %return, !dbg !8320

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !8321
  ret %struct.use_optype_d* %3, !dbg !8321
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !8322 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8323, metadata !DIExpression()), !dbg !8324
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8325
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !8327
  %tobool = icmp ne i8 %call, 0, !dbg !8327
  br i1 %tobool, label %if.end, label %if.then, !dbg !8328

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8329
  br label %return, !dbg !8329

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8330
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !8331
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !8332
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !8332
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !8333
  br label %return, !dbg !8333

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8334
  ret %union.tree_node* %3, !dbg !8334
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !8335 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8336, metadata !DIExpression()), !dbg !8337
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8338
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8339
  %cmp = icmp uge i32 %call, 6, !dbg !8340
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !8341

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8342
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !8343
  %cmp2 = icmp ule i32 %call1, 9, !dbg !8344
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !8345
  %land.ext = zext i1 %2 to i32, !dbg !8341
  %conv = trunc i32 %land.ext to i8, !dbg !8339
  ret i8 %conv, !dbg !8346
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) #0 !dbg !8347 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %root = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !8350, metadata !DIExpression()), !dbg !8351
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !8352, metadata !DIExpression()), !dbg !8353
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %root, metadata !8354, metadata !DIExpression()), !dbg !8355
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !8356
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !8356
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !8358

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !8359
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !8359
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !8359
  %bf.load = load i64, i64* %2, align 8, !dbg !8359
  %bf.clear = and i64 %bf.load, 65535, !dbg !8359
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8359
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !8360
  br i1 %cmp, label %if.then, label %if.else, !dbg !8361

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8362
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 0, !dbg !8363
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !8364
  br label %if.end, !dbg !8362

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !8365
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !8365
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !8365
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %root, align 8, !dbg !8367
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !8368
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %root, align 8, !dbg !8369
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d* %6), !dbg !8370
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !8371
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !8372 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !8375, metadata !DIExpression()), !dbg !8376
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8377, metadata !DIExpression()), !dbg !8376
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8376
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !8376
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8376

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8376
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8376
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !8376
  %3 = load i32, i32* %num, align 8, !dbg !8376
  %cmp = icmp ult i32 %1, %3, !dbg !8376
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !8378
  %land.ext = zext i1 %4 to i32, !dbg !8376
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8376
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !8376
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !8376
  %idxprom = zext i32 %6 to i64, !dbg !8376
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !8376
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8376
  ret %union.tree_node* %7, !dbg !8376
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !8379 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8382, metadata !DIExpression()), !dbg !8383
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8384, metadata !DIExpression()), !dbg !8385
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !8386, metadata !DIExpression()), !dbg !8387
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8388
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8389
  %2 = load i32, i32* %flags.addr, align 4, !dbg !8390
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %0, %union.gimple_statement_d* %1, i32 %2), !dbg !8391
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8392
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 1, !dbg !8393
  store i32 1, i32* %iter_type, align 4, !dbg !8394
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8395
  %call = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %4), !dbg !8396
  ret %union.tree_node* %call, !dbg !8397
}

declare dso_local void @mark_sym_for_renaming(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !8398 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %val = alloca %union.tree_node*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8401, metadata !DIExpression()), !dbg !8402
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !8403, metadata !DIExpression()), !dbg !8404
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8405
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !8407
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !8407
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !8405
  br i1 %tobool, label %if.then, label %if.end, !dbg !8408

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8409
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !8409
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !8409
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !8409
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use_ptr), !dbg !8409
  store %union.tree_node* %call, %union.tree_node** %val, align 8, !dbg !8411
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8412
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !8413
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !8413
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !8414
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !8414
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8415
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !8416
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !8417
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8418
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !8419
  br label %return, !dbg !8419

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8420
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 2, !dbg !8422
  %10 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !8422
  %tobool4 = icmp ne %struct.def_optype_d* %10, null, !dbg !8420
  br i1 %tobool4, label %if.then5, label %if.end11, !dbg !8423

if.then5:                                         ; preds = %if.end
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8424
  %defs6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !8424
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs6, align 8, !dbg !8424
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 1, !dbg !8424
  %13 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !8424
  %call7 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %13), !dbg !8424
  store %union.tree_node* %call7, %union.tree_node** %val, align 8, !dbg !8426
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8427
  %defs8 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !8428
  %15 = load %struct.def_optype_d*, %struct.def_optype_d** %defs8, align 8, !dbg !8428
  %next9 = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %15, i32 0, i32 0, !dbg !8429
  %16 = load %struct.def_optype_d*, %struct.def_optype_d** %next9, align 8, !dbg !8429
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8430
  %defs10 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 2, !dbg !8431
  store %struct.def_optype_d* %16, %struct.def_optype_d** %defs10, align 8, !dbg !8432
  %18 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8433
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !8434
  br label %return, !dbg !8434

if.end11:                                         ; preds = %if.end
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8435
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 0, !dbg !8436
  store i8 1, i8* %done, align 8, !dbg !8437
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8438
  br label %return, !dbg !8438

return:                                           ; preds = %if.end11, %if.then5, %if.then
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8439
  ret %union.tree_node* %20, !dbg !8439
}

declare dso_local %union.tree_node* @create_tmp_var(%union.tree_node*, i8*) #2

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !8440 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !8441, metadata !DIExpression()), !dbg !8442
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8443, metadata !DIExpression()), !dbg !8444
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8445
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !8445
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8446
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8447
  %call = call %union.tree_node* @make_ssa_name_fn(%struct.function* %add.ptr, %union.tree_node* %1, %union.gimple_statement_d* %2), !dbg !8448
  ret %union.tree_node* %call, !dbg !8449
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !8450 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8453, metadata !DIExpression()), !dbg !8454
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !8455, metadata !DIExpression()), !dbg !8456
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8457
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8458
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !8459
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8460
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !8460
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !8462

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8463
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !8463
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !8463
  %bf.load = load i64, i64* %4, align 8, !dbg !8463
  %bf.clear = and i64 %bf.load, 65535, !dbg !8463
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8463
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !8464
  br i1 %cmp, label %if.then, label %if.end, !dbg !8465

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8466
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8467
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !8467
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !8467
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8468
  br label %if.end, !dbg !8467

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !8469
}

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_rhs_code(%union.gimple_statement_d* %s, i32 %code) #0 !dbg !8470 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  %code.addr = alloca i32, align 4
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !8473, metadata !DIExpression()), !dbg !8474
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !8475, metadata !DIExpression()), !dbg !8476
  %0 = load i32, i32* %code.addr, align 4, !dbg !8477
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8478
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !8479
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !8480
  %bf.load = load i32, i32* %2, align 8, !dbg !8481
  %bf.value = and i32 %0, 65535, !dbg !8481
  %bf.shl = shl i32 %bf.value, 16, !dbg !8481
  %bf.clear = and i32 %bf.load, 65535, !dbg !8481
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !8481
  store i32 %bf.set, i32* %2, align 8, !dbg !8481
  ret void, !dbg !8482
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_rhs1(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !8483 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8484, metadata !DIExpression()), !dbg !8485
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !8486, metadata !DIExpression()), !dbg !8487
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8488
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8489
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !8490
  ret void, !dbg !8491
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @compute_offset(i64 %orig, i64 %new_val, %union.tree_node* %result) #0 !dbg !8492 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %orig.addr = alloca i64, align 8
  %new_val.addr = alloca i64, align 8
  %result.addr = alloca %union.tree_node*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %result1 = alloca %union.tree_node*, align 8
  %ratio = alloca %union.tree_node*, align 8
  %log = alloca %union.tree_node*, align 8
  %orig_tree = alloca %union.tree_node*, align 8
  %new_tree = alloca %union.tree_node*, align 8
  store i64 %orig, i64* %orig.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %orig.addr, metadata !8495, metadata !DIExpression()), !dbg !8496
  store i64 %new_val, i64* %new_val.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %new_val.addr, metadata !8497, metadata !DIExpression()), !dbg !8498
  store %union.tree_node* %result, %union.tree_node** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %result.addr, metadata !8499, metadata !DIExpression()), !dbg !8500
  call void @llvm.dbg.declare(metadata i32* %x, metadata !8501, metadata !DIExpression()), !dbg !8502
  call void @llvm.dbg.declare(metadata i32* %y, metadata !8503, metadata !DIExpression()), !dbg !8504
  call void @llvm.dbg.declare(metadata %union.tree_node** %result1, metadata !8505, metadata !DIExpression()), !dbg !8506
  call void @llvm.dbg.declare(metadata %union.tree_node** %ratio, metadata !8507, metadata !DIExpression()), !dbg !8508
  call void @llvm.dbg.declare(metadata %union.tree_node** %log, metadata !8509, metadata !DIExpression()), !dbg !8510
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_tree, metadata !8511, metadata !DIExpression()), !dbg !8512
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree, metadata !8513, metadata !DIExpression()), !dbg !8514
  %0 = load i64, i64* %orig.addr, align 8, !dbg !8515
  %call = call i32 @exact_log2(i64 %0), !dbg !8516
  store i32 %call, i32* %x, align 4, !dbg !8517
  %1 = load i64, i64* %new_val.addr, align 8, !dbg !8518
  %call1 = call i32 @exact_log2(i64 %1), !dbg !8519
  store i32 %call1, i32* %y, align 4, !dbg !8520
  %2 = load i32, i32* %x, align 4, !dbg !8521
  %cmp = icmp ne i32 %2, -1, !dbg !8523
  br i1 %cmp, label %land.lhs.true, label %if.end20, !dbg !8524

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* %y, align 4, !dbg !8525
  %cmp2 = icmp ne i32 %3, -1, !dbg !8526
  br i1 %cmp2, label %if.then, label %if.end20, !dbg !8527

if.then:                                          ; preds = %land.lhs.true
  %4 = load i32, i32* %x, align 4, !dbg !8528
  %5 = load i32, i32* %y, align 4, !dbg !8531
  %cmp3 = icmp eq i32 %4, %5, !dbg !8532
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !8533

if.then4:                                         ; preds = %if.then
  %6 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !8534
  store %union.tree_node* %6, %union.tree_node** %retval, align 8, !dbg !8535
  br label %return, !dbg !8535

if.else:                                          ; preds = %if.then
  %7 = load i32, i32* %x, align 4, !dbg !8536
  %8 = load i32, i32* %y, align 4, !dbg !8538
  %cmp5 = icmp sgt i32 %7, %8, !dbg !8539
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !8540

if.then6:                                         ; preds = %if.else
  %9 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !8541
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !8541
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8541
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8541
  %11 = load i32, i32* %x, align 4, !dbg !8543
  %12 = load i32, i32* %y, align 4, !dbg !8544
  %sub = sub nsw i32 %11, %12, !dbg !8545
  %conv = sext i32 %sub to i64, !dbg !8543
  %call7 = call %union.tree_node* @build_int_cst(%union.tree_node* %10, i64 %conv), !dbg !8546
  store %union.tree_node* %call7, %union.tree_node** %log, align 8, !dbg !8547
  %13 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !8548
  %common8 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !8548
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2, !dbg !8548
  %14 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !8548
  %15 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !8548
  %16 = load %union.tree_node*, %union.tree_node** %log, align 8, !dbg !8548
  %call10 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 83, %union.tree_node* %14, %union.tree_node* %15, %union.tree_node* %16), !dbg !8548
  store %union.tree_node* %call10, %union.tree_node** %result1, align 8, !dbg !8549
  %17 = load %union.tree_node*, %union.tree_node** %result1, align 8, !dbg !8550
  store %union.tree_node* %17, %union.tree_node** %retval, align 8, !dbg !8551
  br label %return, !dbg !8551

if.end:                                           ; preds = %if.else
  br label %if.end11

if.end11:                                         ; preds = %if.end
  %18 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !8552
  %common12 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !8552
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2, !dbg !8552
  %19 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !8552
  %20 = load i32, i32* %y, align 4, !dbg !8553
  %21 = load i32, i32* %x, align 4, !dbg !8554
  %sub14 = sub nsw i32 %20, %21, !dbg !8555
  %conv15 = sext i32 %sub14 to i64, !dbg !8553
  %call16 = call %union.tree_node* @build_int_cst(%union.tree_node* %19, i64 %conv15), !dbg !8556
  store %union.tree_node* %call16, %union.tree_node** %log, align 8, !dbg !8557
  %22 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !8558
  %common17 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !8558
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !8558
  %23 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !8558
  %24 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !8558
  %25 = load %union.tree_node*, %union.tree_node** %log, align 8, !dbg !8558
  %call19 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 84, %union.tree_node* %23, %union.tree_node* %24, %union.tree_node* %25), !dbg !8558
  store %union.tree_node* %call19, %union.tree_node** %result1, align 8, !dbg !8559
  %26 = load %union.tree_node*, %union.tree_node** %result1, align 8, !dbg !8560
  store %union.tree_node* %26, %union.tree_node** %retval, align 8, !dbg !8561
  br label %return, !dbg !8561

if.end20:                                         ; preds = %land.lhs.true, %entry
  %27 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !8562
  %common21 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !8562
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 2, !dbg !8562
  %28 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !8562
  %29 = load i64, i64* %orig.addr, align 8, !dbg !8563
  %call23 = call %union.tree_node* @build_int_cst(%union.tree_node* %28, i64 %29), !dbg !8564
  store %union.tree_node* %call23, %union.tree_node** %orig_tree, align 8, !dbg !8565
  %30 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !8566
  %common24 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !8566
  %type25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2, !dbg !8566
  %31 = load %union.tree_node*, %union.tree_node** %type25, align 8, !dbg !8566
  %32 = load i64, i64* %new_val.addr, align 8, !dbg !8567
  %call26 = call %union.tree_node* @build_int_cst(%union.tree_node* %31, i64 %32), !dbg !8568
  store %union.tree_node* %call26, %union.tree_node** %new_tree, align 8, !dbg !8569
  %33 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !8570
  %common27 = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !8570
  %type28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 2, !dbg !8570
  %34 = load %union.tree_node*, %union.tree_node** %type28, align 8, !dbg !8570
  %35 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !8570
  %36 = load %union.tree_node*, %union.tree_node** %orig_tree, align 8, !dbg !8570
  %call29 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 67, %union.tree_node* %34, %union.tree_node* %35, %union.tree_node* %36), !dbg !8570
  store %union.tree_node* %call29, %union.tree_node** %ratio, align 8, !dbg !8571
  %37 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !8572
  %common30 = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !8572
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !8572
  %38 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !8572
  %39 = load %union.tree_node*, %union.tree_node** %ratio, align 8, !dbg !8572
  %40 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !8572
  %call32 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 65, %union.tree_node* %38, %union.tree_node* %39, %union.tree_node* %40), !dbg !8572
  store %union.tree_node* %call32, %union.tree_node** %result1, align 8, !dbg !8573
  %41 = load %union.tree_node*, %union.tree_node** %result1, align 8, !dbg !8574
  store %union.tree_node* %41, %union.tree_node** %retval, align 8, !dbg !8575
  br label %return, !dbg !8575

return:                                           ; preds = %if.end20, %if.end11, %if.then6, %if.then4
  %42 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8576
  ret %union.tree_node* %42, !dbg !8576
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_rhs2(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !8577 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8578, metadata !DIExpression()), !dbg !8579
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !8580, metadata !DIExpression()), !dbg !8581
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8582
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8583
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 2, %union.tree_node* %1), !dbg !8584
  ret void, !dbg !8585
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !8586 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !8589, metadata !DIExpression()), !dbg !8590
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8591
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !8593
  %tobool = icmp ne i8 %call, 0, !dbg !8593
  br i1 %tobool, label %if.then, label %if.end, !dbg !8594

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8595
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !8597
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8598
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !8599
  br label %if.end, !dbg !8600

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !8601
}

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !8602 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8605, metadata !DIExpression()), !dbg !8606
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !8607, metadata !DIExpression()), !dbg !8608
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !8609, metadata !DIExpression()), !dbg !8610
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8611
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !8611
  %conv = zext i8 %call to i32, !dbg !8611
  %tobool = icmp ne i32 %conv, 0, !dbg !8611
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !8611

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !8611
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8611
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !8611
  %cmp = icmp ult i32 %1, %call1, !dbg !8611
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8611

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8611
  br label %cond.end, !dbg !8611

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !8611

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8611
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !8612
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8613
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !8614
  %5 = load i32, i32* %i.addr, align 4, !dbg !8615
  %idxprom = zext i32 %5 to i64, !dbg !8614
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !8614
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !8616
  ret void, !dbg !8617
}

declare dso_local i32 @exact_log2(i64) #2

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3037, !3038, !3039}
!llvm.ident = !{!3040}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "pass_ipa_matrix_reorg", scope: !2, file: !3, line: 2405, type: !3011, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1573, globals: !3004, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "matrix-reorg.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !13, !189, !317, !512, !521, !525, !531, !536, !541, !559, !566, !573, !596, !600, !610, !624, !663, !669, !695, !700, !1420, !1554, !1559, !1566}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !6, line: 104, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12}
!9 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!13 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !14, line: 74, baseType: !7, size: 32, elements: !15)
!14 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!15 = !{!16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188}
!16 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!17 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!18 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!19 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!20 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!21 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!22 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!23 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!24 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!25 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!26 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!27 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!28 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!29 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!30 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!31 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!32 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!33 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!34 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!35 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!36 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!37 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!38 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!39 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!40 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!41 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!42 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!43 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!44 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!45 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!46 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!47 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!48 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!49 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!50 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!51 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!52 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!53 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!54 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!55 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!56 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!57 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!58 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!59 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!60 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!61 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!62 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!63 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!64 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!65 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!66 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!67 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!68 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!69 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!70 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!71 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!72 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!73 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!74 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!75 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!76 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!77 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!78 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!79 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!80 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!81 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!82 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!83 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!84 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!85 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!86 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!87 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!88 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!89 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!90 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!91 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!92 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!93 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!94 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!95 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!96 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!97 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!98 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!99 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!100 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!101 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!102 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!103 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!104 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!105 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!106 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!107 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!108 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!109 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!110 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!111 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!112 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!113 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!114 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!115 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!116 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!117 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!118 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!119 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!120 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!121 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!122 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!123 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!124 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!125 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!126 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!127 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!128 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!129 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!130 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!131 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!132 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!133 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!134 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!135 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!136 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!137 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!138 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!139 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!140 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!141 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!142 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!143 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!144 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!145 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!146 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!147 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!148 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!149 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!150 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!151 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!152 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!153 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!154 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!155 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!156 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!157 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!158 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!159 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!160 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!161 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!162 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!163 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!164 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!165 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!166 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!167 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!168 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!169 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!170 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!171 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!172 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!173 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!174 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!175 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!176 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!177 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!178 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!179 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!180 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!181 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!182 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!183 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!184 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!185 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!186 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!187 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!188 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !190, line: 7, baseType: !7, size: 32, elements: !191)
!190 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!191 = !{!192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316}
!192 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!193 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!194 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!195 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!196 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!197 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!198 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!199 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!200 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!201 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!202 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!203 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!204 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!205 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!206 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!207 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!208 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!209 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!210 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!211 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!212 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!213 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!214 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!215 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!216 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!217 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!218 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!219 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!220 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!221 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!222 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!223 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!224 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!225 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!226 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!227 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!228 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!229 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!230 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!231 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!232 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!233 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!234 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!235 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!236 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!237 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!238 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!239 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!240 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!241 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!242 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!243 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!244 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!245 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!246 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!247 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!248 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!249 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!250 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!251 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!252 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!253 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!254 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!255 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!256 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!257 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!258 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!259 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!260 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!261 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!262 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!263 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!264 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!265 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!266 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!267 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!268 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!269 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!270 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!271 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!272 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!273 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!274 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!275 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!276 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!277 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!278 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!279 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!280 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!281 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!282 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!283 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!284 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!285 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!286 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!287 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!288 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!289 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!290 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!291 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!292 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!293 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!294 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!295 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!296 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!297 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!298 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!299 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!300 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!301 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!302 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!303 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!304 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!305 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!306 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!307 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!308 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!309 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!310 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!311 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!312 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!313 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!314 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!315 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!316 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!317 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !318, line: 39, baseType: !7, size: 32, elements: !319)
!318 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!319 = !{!320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511}
!320 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!321 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!322 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!323 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!324 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!325 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!326 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!327 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!328 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!329 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!330 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!331 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!332 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!333 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!334 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!335 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!336 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!337 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!338 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!339 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!340 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!341 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!342 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!343 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!344 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!345 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!346 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!347 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!348 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!349 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!350 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!351 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!352 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!353 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!354 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!355 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!356 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!357 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!358 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!359 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!360 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!361 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!362 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!363 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!364 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!365 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!366 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!367 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!368 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!369 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!370 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!371 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!372 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!373 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!374 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!375 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!376 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!377 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!378 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!379 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!380 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!381 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!382 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!383 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!384 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!385 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!386 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!387 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!388 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!389 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!390 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!391 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!392 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!393 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!394 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!395 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!396 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!397 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!398 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!399 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!400 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!401 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!402 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!403 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!404 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!405 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!406 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!407 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!408 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!409 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!410 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!411 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!412 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!413 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!414 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!415 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!416 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!417 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!418 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!419 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!420 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!421 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!422 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!423 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!424 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!425 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!426 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!427 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!428 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!429 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!430 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!431 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!432 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!433 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!434 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!435 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!436 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!437 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!438 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!439 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!440 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!441 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!442 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!443 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!444 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!445 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!446 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!447 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!448 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!449 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!450 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!451 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!452 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!453 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!454 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!455 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!456 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!457 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!458 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!459 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!460 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!461 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!462 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!463 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!464 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!465 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!466 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!467 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!468 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!469 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!470 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!471 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!472 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!473 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!474 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!475 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!476 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!477 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!478 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!479 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!480 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!481 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!482 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!483 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!484 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!485 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!486 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!487 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!488 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!489 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!490 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!491 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!492 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!493 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!494 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!495 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!496 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!497 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!498 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!499 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!500 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!501 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!502 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!503 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!504 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!505 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!506 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!507 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!508 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!509 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!510 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!511 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!512 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !513, line: 31, baseType: !7, size: 32, elements: !514)
!513 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!514 = !{!515, !516, !517, !518, !519, !520}
!515 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!516 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!517 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!518 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!519 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!520 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!521 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !513, line: 91, baseType: !7, size: 32, elements: !522)
!522 = !{!523, !524}
!523 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!524 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!525 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !526, line: 363, baseType: !7, size: 32, elements: !527)
!526 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!527 = !{!528, !529, !530}
!528 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!529 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!530 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!531 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !526, line: 355, baseType: !7, size: 32, elements: !532)
!532 = !{!533, !534, !535}
!533 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!534 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!535 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!536 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !537, line: 474, baseType: !7, size: 32, elements: !538)
!537 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!538 = !{!539, !540}
!539 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!540 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!541 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !318, line: 280, baseType: !7, size: 32, elements: !542)
!542 = !{!543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558}
!543 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!544 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!545 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!546 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!547 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!548 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!549 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!550 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!551 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!552 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!553 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!554 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!555 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!556 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!557 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!558 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!559 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !318, line: 1817, baseType: !7, size: 32, elements: !560)
!560 = !{!561, !562, !563, !564, !565}
!561 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!562 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!563 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!564 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!565 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!566 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !318, line: 1805, baseType: !7, size: 32, elements: !567)
!567 = !{!568, !569, !570, !571, !572}
!568 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!569 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!570 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!571 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!572 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!573 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !574, line: 309, baseType: !7, size: 32, elements: !575)
!574 = !DIFile(filename: "./cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!575 = !{!576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595}
!576 = !DIEnumerator(name: "CIF_OK", value: 0, isUnsigned: true)
!577 = !DIEnumerator(name: "CIF_UNSPECIFIED", value: 1, isUnsigned: true)
!578 = !DIEnumerator(name: "CIF_FUNCTION_NOT_CONSIDERED", value: 2, isUnsigned: true)
!579 = !DIEnumerator(name: "CIF_BODY_NOT_AVAILABLE", value: 3, isUnsigned: true)
!580 = !DIEnumerator(name: "CIF_REDEFINED_EXTERN_INLINE", value: 4, isUnsigned: true)
!581 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINABLE", value: 5, isUnsigned: true)
!582 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINE_CANDIDATE", value: 6, isUnsigned: true)
!583 = !DIEnumerator(name: "CIF_LARGE_FUNCTION_GROWTH_LIMIT", value: 7, isUnsigned: true)
!584 = !DIEnumerator(name: "CIF_LARGE_STACK_FRAME_GROWTH_LIMIT", value: 8, isUnsigned: true)
!585 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_SINGLE_LIMIT", value: 9, isUnsigned: true)
!586 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_AUTO_LIMIT", value: 10, isUnsigned: true)
!587 = !DIEnumerator(name: "CIF_INLINE_UNIT_GROWTH_LIMIT", value: 11, isUnsigned: true)
!588 = !DIEnumerator(name: "CIF_RECURSIVE_INLINING", value: 12, isUnsigned: true)
!589 = !DIEnumerator(name: "CIF_UNLIKELY_CALL", value: 13, isUnsigned: true)
!590 = !DIEnumerator(name: "CIF_NOT_DECLARED_INLINED", value: 14, isUnsigned: true)
!591 = !DIEnumerator(name: "CIF_OPTIMIZING_FOR_SIZE", value: 15, isUnsigned: true)
!592 = !DIEnumerator(name: "CIF_TARGET_OPTION_MISMATCH", value: 16, isUnsigned: true)
!593 = !DIEnumerator(name: "CIF_MISMATCHED_ARGUMENTS", value: 17, isUnsigned: true)
!594 = !DIEnumerator(name: "CIF_ORIGINALLY_INDIRECT_CALL", value: 18, isUnsigned: true)
!595 = !DIEnumerator(name: "CIF_N_REASONS", value: 19, isUnsigned: true)
!596 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !526, line: 912, baseType: !7, size: 32, elements: !597)
!597 = !{!598, !599}
!598 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!599 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!600 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !513, line: 170, baseType: !7, size: 32, elements: !601)
!601 = !{!602, !603, !604, !605, !606, !607, !608, !609}
!602 = !DIEnumerator(name: "LOOPS_HAVE_PREHEADERS", value: 1, isUnsigned: true)
!603 = !DIEnumerator(name: "LOOPS_HAVE_SIMPLE_LATCHES", value: 2, isUnsigned: true)
!604 = !DIEnumerator(name: "LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS", value: 4, isUnsigned: true)
!605 = !DIEnumerator(name: "LOOPS_HAVE_RECORDED_EXITS", value: 8, isUnsigned: true)
!606 = !DIEnumerator(name: "LOOPS_MAY_HAVE_MULTIPLE_LATCHES", value: 16, isUnsigned: true)
!607 = !DIEnumerator(name: "LOOP_CLOSED_SSA", value: 32, isUnsigned: true)
!608 = !DIEnumerator(name: "LOOPS_NEED_FIXUP", value: 64, isUnsigned: true)
!609 = !DIEnumerator(name: "LOOPS_HAVE_FALLTHRU_PREHEADERS", value: 128, isUnsigned: true)
!610 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !526, line: 295, baseType: !7, size: 32, elements: !611)
!611 = !{!612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623}
!612 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!613 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!614 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!615 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!616 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!617 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!618 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!619 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!620 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!621 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!622 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!623 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!624 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !625, line: 51, baseType: !7, size: 32, elements: !626)
!625 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!626 = !{!627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662}
!627 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!628 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!629 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!630 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!631 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!632 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!633 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!634 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!635 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!636 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!637 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!638 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!639 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!640 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!641 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!642 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!643 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!644 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!645 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!646 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!647 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!648 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!649 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!650 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!651 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!652 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!653 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!654 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!655 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!656 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!657 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!658 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!659 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!660 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!661 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!662 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!663 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !625, line: 80, baseType: !7, size: 32, elements: !664)
!664 = !{!665, !666, !667, !668}
!665 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!666 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!667 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!668 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!669 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !625, line: 727, baseType: !7, size: 32, elements: !670)
!670 = !{!671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694}
!671 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!672 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!673 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!674 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!675 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!676 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!677 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!678 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!679 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!680 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!681 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!682 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!683 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!684 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!685 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!686 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!687 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!688 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!689 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!690 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!691 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!692 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!693 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!694 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!695 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !696, line: 147, baseType: !7, size: 32, elements: !697)
!696 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!697 = !{!698, !699}
!698 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!699 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!700 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !318, line: 220, baseType: !7, size: 32, elements: !701)
!701 = !{!702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419}
!702 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!703 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!704 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!705 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!706 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!707 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!708 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!709 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!710 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!711 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!712 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!713 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!714 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!715 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!716 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!717 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!718 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!719 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!720 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!721 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!722 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!723 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!724 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!725 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!726 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!727 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!728 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!729 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!730 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!731 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!732 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!733 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!734 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!735 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!736 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!737 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!738 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!739 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!740 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!741 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!742 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!743 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!744 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!745 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!746 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!747 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!748 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!749 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!750 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!751 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!752 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!753 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!754 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!755 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!756 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!757 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!758 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!759 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!760 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!761 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!762 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!763 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!764 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!765 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!766 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!767 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!768 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!769 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!770 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!771 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!772 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!773 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!774 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!775 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!776 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!777 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!778 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!779 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!780 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!781 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!782 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!783 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!784 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!785 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!786 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!787 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!788 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!789 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!790 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!791 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!792 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!793 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!794 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!795 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!796 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!797 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!798 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!799 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!800 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!801 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!802 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!803 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!804 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!805 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!806 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!807 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!808 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!809 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!810 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!811 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!812 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!813 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!814 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!815 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!816 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!817 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!818 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!819 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!820 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!821 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!822 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!823 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!824 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!825 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!826 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!827 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!828 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!829 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!830 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!831 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!832 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!833 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!834 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!835 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!836 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!837 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!838 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!839 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!840 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!841 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!842 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!843 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!844 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!845 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!846 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!847 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!848 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!849 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!850 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!851 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!852 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!853 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!854 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!855 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!856 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!857 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!858 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!859 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!860 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!861 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!862 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!863 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!864 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!865 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!866 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!867 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!868 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!869 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!870 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!871 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!872 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!873 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!874 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!875 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!876 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!877 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!878 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!879 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!880 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!881 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!882 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!883 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!884 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!885 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!886 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!887 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!888 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!889 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!890 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!891 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!892 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!893 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!894 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!895 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!896 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!897 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!898 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!899 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!900 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!901 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!902 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!903 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!904 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!905 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!906 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!907 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!908 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!909 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!910 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!911 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!912 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!913 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!914 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!915 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!916 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!917 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!918 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!919 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!920 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!921 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!922 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!923 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!924 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!925 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!926 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!927 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!928 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!929 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!930 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!931 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!932 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!933 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!934 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!935 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!936 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!937 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!938 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!939 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!940 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!941 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!942 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!943 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!944 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!945 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!946 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!947 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!948 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!949 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!950 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!951 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!952 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!953 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!954 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!955 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!956 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!957 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!958 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!959 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!960 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!961 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!962 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!963 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!964 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!965 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!966 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!967 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!968 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!969 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!970 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!971 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!972 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!973 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!974 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!975 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!976 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!977 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!978 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!979 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!980 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!981 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!982 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!983 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!984 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!985 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!986 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!987 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!988 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!989 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!990 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!991 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!992 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!993 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!994 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!995 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!996 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!997 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!998 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!999 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!1000 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!1001 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!1002 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!1003 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!1004 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!1005 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!1006 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!1007 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!1008 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!1009 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!1010 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!1011 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!1012 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!1013 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!1014 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!1015 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!1016 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!1017 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!1018 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!1019 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!1020 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!1021 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!1022 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!1023 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!1024 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!1025 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!1026 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!1027 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!1028 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!1029 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!1030 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!1031 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!1032 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!1033 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!1034 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!1035 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!1036 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!1037 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!1038 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!1039 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!1040 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!1041 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!1042 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!1043 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!1044 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!1045 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!1046 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!1047 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!1048 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!1049 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!1050 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!1051 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!1052 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!1053 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!1054 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!1055 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!1056 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!1057 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!1058 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!1059 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!1060 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!1061 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!1062 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!1063 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!1064 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!1065 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!1066 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!1067 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!1068 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!1069 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!1070 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!1071 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!1072 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!1073 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!1074 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!1075 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!1076 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!1077 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!1078 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!1079 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!1080 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!1081 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!1082 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!1083 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!1084 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!1085 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!1086 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!1087 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!1088 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!1089 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!1090 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!1091 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!1092 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!1093 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!1094 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!1095 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!1096 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!1097 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!1098 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!1099 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!1100 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!1101 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!1102 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!1103 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!1104 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!1105 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!1106 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!1107 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!1108 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!1109 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!1110 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!1111 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!1112 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!1113 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!1114 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!1115 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!1116 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!1117 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!1118 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!1119 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!1120 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!1121 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!1122 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!1123 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!1124 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!1125 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!1126 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!1127 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!1128 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!1129 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!1130 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!1131 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!1132 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!1133 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!1134 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!1135 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!1136 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!1137 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!1138 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!1139 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!1140 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!1141 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!1142 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!1143 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!1144 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!1145 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!1146 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!1147 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!1148 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!1149 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!1150 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!1151 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!1152 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!1153 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!1154 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!1155 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!1156 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!1157 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!1158 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!1159 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!1160 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!1161 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!1162 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!1163 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!1164 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!1165 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!1166 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!1167 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!1168 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!1169 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!1170 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!1171 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!1172 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!1173 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!1174 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!1175 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!1176 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!1177 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!1178 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!1179 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!1180 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!1181 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!1182 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!1183 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!1184 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!1185 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!1186 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!1187 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!1188 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!1189 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!1190 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!1191 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!1192 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!1193 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!1194 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!1195 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!1196 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!1197 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!1198 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!1199 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!1200 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!1201 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!1202 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!1203 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!1204 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!1205 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!1206 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!1207 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!1208 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!1209 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!1210 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!1211 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!1212 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!1213 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!1214 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!1215 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!1216 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1217 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1218 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1219 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1220 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1221 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1222 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1223 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1224 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1225 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1226 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1227 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1228 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1229 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1230 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1231 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1232 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1233 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1234 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1235 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1236 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1237 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1238 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1239 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1240 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1241 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1242 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1243 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1244 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1245 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1246 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1247 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1248 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1249 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1250 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1251 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1252 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1253 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1254 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1255 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1256 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1257 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1258 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1259 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1260 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1261 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1262 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1263 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1264 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1265 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1266 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1267 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1268 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1269 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1270 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1271 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1272 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1273 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1274 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1275 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1276 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1277 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1278 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1279 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1280 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1281 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1282 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1283 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1284 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1285 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1286 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1287 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1288 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1289 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1290 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1291 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1292 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1293 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1294 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1295 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1296 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1297 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1298 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1299 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1300 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1301 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1302 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1303 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1304 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1305 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1306 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1307 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1308 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1309 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1310 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1311 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1312 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1313 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1314 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1315 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1316 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1317 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1318 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1319 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1320 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1321 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1322 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1323 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1324 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1325 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1326 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1327 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1328 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1329 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1330 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1331 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1332 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1333 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1334 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1335 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1336 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1337 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1338 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1339 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1340 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1341 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1342 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1343 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1344 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1345 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1346 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1347 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1348 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1349 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1350 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1351 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1352 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1353 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1354 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1355 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1356 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1357 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1358 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1359 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1360 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1361 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1362 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1363 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1364 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1365 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1366 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1367 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1368 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1369 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1370 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1371 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1372 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1373 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1374 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1375 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1376 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1377 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1378 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1379 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1380 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1381 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1382 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1383 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1384 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1385 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1386 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1387 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1388 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1389 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1390 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1391 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1392 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1393 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1394 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1395 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1396 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1397 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1398 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1399 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1400 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1401 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1402 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1403 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1404 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1405 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1406 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1407 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1408 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1409 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1410 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1411 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1412 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1413 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1414 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1415 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1416 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1417 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1418 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1419 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1420 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !318, line: 3410, baseType: !7, size: 32, elements: !1421)
!1421 = !{!1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553}
!1422 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!1423 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!1424 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!1425 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!1426 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!1427 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!1428 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!1429 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!1430 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!1431 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!1432 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!1433 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!1434 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!1435 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!1436 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!1437 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!1438 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!1439 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!1440 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!1441 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!1442 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!1443 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!1444 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!1445 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!1446 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!1447 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!1448 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!1449 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!1450 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!1451 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!1452 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!1453 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!1454 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!1455 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!1456 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!1457 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!1458 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!1459 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!1460 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!1461 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!1462 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!1463 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!1464 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!1465 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!1466 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!1467 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!1468 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!1469 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!1470 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!1471 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!1472 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!1473 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!1474 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!1475 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!1476 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!1477 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!1478 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!1479 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!1480 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!1481 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!1482 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!1483 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!1484 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!1485 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!1486 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!1487 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!1488 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!1489 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!1490 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!1491 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!1492 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!1493 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!1494 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!1495 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!1496 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!1497 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!1498 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!1499 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!1500 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!1501 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!1502 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!1503 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!1504 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!1505 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!1506 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!1507 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!1508 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!1509 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!1510 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!1511 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!1512 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!1513 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!1514 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!1515 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!1516 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!1517 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!1518 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!1519 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!1520 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!1521 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!1522 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!1523 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!1524 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!1525 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!1526 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!1527 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!1528 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!1529 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!1530 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!1531 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!1532 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!1533 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!1534 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!1535 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!1536 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!1537 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!1538 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!1539 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!1540 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!1541 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!1542 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!1543 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!1544 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!1545 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!1546 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!1547 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!1548 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!1549 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!1550 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!1551 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!1552 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!1553 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!1554 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !625, line: 4603, baseType: !7, size: 32, elements: !1555)
!1555 = !{!1556, !1557, !1558}
!1556 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!1557 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!1558 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!1559 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !1560, line: 119, baseType: !7, size: 32, elements: !1561)
!1560 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1561 = !{!1562, !1563, !1564, !1565}
!1562 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!1563 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!1564 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!1565 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!1566 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !318, line: 4288, baseType: !7, size: 32, elements: !1567)
!1567 = !{!1568, !1569, !1570, !1571, !1572}
!1568 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!1569 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!1570 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!1571 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!1572 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!1573 = !{!1574, !317, !663, !1575, !1576, !2932, !1762, !2173, !1738, !2934, !2986, !2948, !2987, !2943, !2956, !2993, !2996, !2997, !7, !1715, !2974, !2961, !2959, !2973, !1595, !2985, !1732, !2998}
!1574 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1575 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1577, size: 64)
!1577 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !625, line: 737, size: 768, elements: !1578)
!1578 = !{!1579, !2779, !2789, !2795, !2800, !2805, !2812, !2818, !2824, !2829, !2843, !2848, !2854, !2859, !2869, !2874, !2890, !2897, !2904, !2910, !2915, !2921, !2927}
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1577, file: !625, line: 738, baseType: !1580, size: 256)
!1580 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !625, line: 271, size: 256, elements: !1581)
!1581 = !{!1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1597, !1598, !2778}
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1580, file: !625, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1580, file: !625, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1580, file: !625, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1580, file: !625, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1580, file: !625, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1580, file: !625, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1580, file: !625, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1580, file: !625, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1580, file: !625, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1580, file: !625, line: 312, baseType: !7, size: 32, offset: 32)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1580, file: !625, line: 316, baseType: !1593, size: 32, offset: 64)
!1593 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1594, line: 58, baseType: !1595)
!1594 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1595 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1596, line: 44, baseType: !7)
!1596 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1580, file: !625, line: 319, baseType: !7, size: 32, offset: 96)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1580, file: !625, line: 323, baseType: !1599, size: 64, offset: 128)
!1599 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1600, size: 64)
!1600 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !526, line: 217, size: 832, elements: !1601)
!1601 = !{!1602, !2745, !2746, !2747, !2748, !2752, !2753, !2754, !2772, !2773, !2774, !2775, !2776, !2777}
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1600, file: !526, line: 219, baseType: !1603, size: 64)
!1603 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1604, size: 64)
!1604 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !526, line: 151, baseType: !1605)
!1605 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !526, line: 151, size: 128, elements: !1606)
!1606 = !{!1607}
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1605, file: !526, line: 151, baseType: !1608, size: 128)
!1608 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !526, line: 150, baseType: !1609)
!1609 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !526, line: 150, size: 128, elements: !1610)
!1610 = !{!1611, !1612, !1613}
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1609, file: !526, line: 150, baseType: !7, size: 32)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1609, file: !526, line: 150, baseType: !7, size: 32, offset: 32)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1609, file: !526, line: 150, baseType: !1614, size: 64, offset: 64)
!1614 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1615, size: 64, elements: !1680)
!1615 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1616, line: 108, baseType: !1617)
!1616 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1617 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1618, size: 64)
!1618 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !526, line: 122, size: 512, elements: !1619)
!1619 = !{!1620, !1621, !1622, !2737, !2738, !2739, !2740, !2741, !2742, !2743}
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1618, file: !526, line: 124, baseType: !1599, size: 64)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1618, file: !526, line: 125, baseType: !1599, size: 64, offset: 64)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1618, file: !526, line: 131, baseType: !1623, size: 64, offset: 128)
!1623 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !526, line: 128, size: 64, elements: !1624)
!1624 = !{!1625, !1641}
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1623, file: !526, line: 129, baseType: !1626, size: 64)
!1626 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1616, line: 66, baseType: !1627)
!1627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1628, size: 64)
!1628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !625, line: 143, size: 192, elements: !1629)
!1629 = !{!1630, !1639, !1640}
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1628, file: !625, line: 145, baseType: !1631, size: 64)
!1631 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1616, line: 69, baseType: !1632)
!1632 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1633, size: 64)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !625, line: 136, size: 192, elements: !1634)
!1634 = !{!1635, !1637, !1638}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1633, file: !625, line: 137, baseType: !1636, size: 64)
!1636 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1616, line: 58, baseType: !1576)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1633, file: !625, line: 138, baseType: !1632, size: 64, offset: 64)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1633, file: !625, line: 139, baseType: !1632, size: 64, offset: 128)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1628, file: !625, line: 146, baseType: !1631, size: 64, offset: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1628, file: !625, line: 152, baseType: !1626, size: 64, offset: 128)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1623, file: !526, line: 130, baseType: !1642, size: 64)
!1642 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1616, line: 50, baseType: !1643)
!1643 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1644, size: 64)
!1644 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1645, line: 240, size: 384, elements: !1646)
!1645 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1646 = !{!1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657}
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1644, file: !1645, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1644, file: !1645, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1644, file: !1645, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1644, file: !1645, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1644, file: !1645, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1644, file: !1645, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1644, file: !1645, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1644, file: !1645, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1644, file: !1645, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1644, file: !1645, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1644, file: !1645, line: 321, baseType: !1658, size: 320, offset: 64)
!1658 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1645, line: 315, size: 320, elements: !1659)
!1659 = !{!1660, !2704, !2706, !2735, !2736}
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1658, file: !1645, line: 316, baseType: !1661, size: 64)
!1661 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1662, size: 64, elements: !1680)
!1662 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1645, line: 183, baseType: !1663)
!1663 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1645, line: 166, size: 64, elements: !1664)
!1664 = !{!1665, !1666, !1667, !1671, !1672, !1682, !1683, !1695, !1698, !1761, !2682, !2683, !2694, !2701}
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1663, file: !1645, line: 168, baseType: !1575, size: 32)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1663, file: !1645, line: 169, baseType: !7, size: 32)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1663, file: !1645, line: 170, baseType: !1668, size: 64)
!1668 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1669, size: 64)
!1669 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1670)
!1670 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1663, file: !1645, line: 171, baseType: !1642, size: 64)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1663, file: !1645, line: 172, baseType: !1673, size: 64)
!1673 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1616, line: 53, baseType: !1674)
!1674 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1675, size: 64)
!1675 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1645, line: 359, size: 128, elements: !1676)
!1676 = !{!1677, !1678}
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1675, file: !1645, line: 360, baseType: !1575, size: 32)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1675, file: !1645, line: 361, baseType: !1679, size: 64, offset: 64)
!1679 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1642, size: 64, elements: !1680)
!1680 = !{!1681}
!1681 = !DISubrange(count: 1)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1663, file: !1645, line: 173, baseType: !189, size: 32)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1663, file: !1645, line: 174, baseType: !1684, size: 32)
!1684 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1645, line: 133, baseType: !1685)
!1685 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1645, line: 115, size: 32, elements: !1686)
!1686 = !{!1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694}
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1685, file: !1645, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1685, file: !1645, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1685, file: !1645, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1685, file: !1645, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1685, file: !1645, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1685, file: !1645, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1685, file: !1645, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1685, file: !1645, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1663, file: !1645, line: 175, baseType: !1696, size: 64)
!1696 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1697, size: 64)
!1697 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1645, line: 175, flags: DIFlagFwdDecl)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1663, file: !1645, line: 176, baseType: !1699, size: 64)
!1699 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1700, size: 64)
!1700 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1701, line: 75, size: 256, elements: !1702)
!1701 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1702 = !{!1703, !1718, !1719, !1720}
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1700, file: !1701, line: 76, baseType: !1704, size: 64)
!1704 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1705, size: 64)
!1705 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1701, line: 68, baseType: !1706)
!1706 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1701, line: 63, size: 320, elements: !1707)
!1707 = !{!1708, !1710, !1711, !1712}
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1706, file: !1701, line: 64, baseType: !1709, size: 64)
!1709 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1706, size: 64)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1706, file: !1701, line: 65, baseType: !1709, size: 64, offset: 64)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1706, file: !1701, line: 66, baseType: !7, size: 32, offset: 128)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1706, file: !1701, line: 67, baseType: !1713, size: 128, offset: 192)
!1713 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1714, size: 128, elements: !1716)
!1714 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1701, line: 29, baseType: !1715)
!1715 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1716 = !{!1717}
!1717 = !DISubrange(count: 2)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1700, file: !1701, line: 77, baseType: !1704, size: 64, offset: 64)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1700, file: !1701, line: 78, baseType: !7, size: 32, offset: 128)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1700, file: !1701, line: 79, baseType: !1721, size: 64, offset: 192)
!1721 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1722, size: 64)
!1722 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1701, line: 49, baseType: !1723)
!1723 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1701, line: 45, size: 832, elements: !1724)
!1724 = !{!1725, !1726, !1727}
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1723, file: !1701, line: 46, baseType: !1709, size: 64)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1723, file: !1701, line: 47, baseType: !1699, size: 64, offset: 64)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1723, file: !1701, line: 48, baseType: !1728, size: 704, offset: 128)
!1728 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1729, line: 164, size: 704, elements: !1730)
!1729 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1730 = !{!1731, !1733, !1744, !1745, !1746, !1747, !1748, !1749, !1753, !1757, !1758, !1759, !1760}
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1728, file: !1729, line: 166, baseType: !1732, size: 64)
!1732 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1728, file: !1729, line: 167, baseType: !1734, size: 64, offset: 64)
!1734 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1735, size: 64)
!1735 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1729, line: 157, size: 192, elements: !1736)
!1736 = !{!1737, !1739, !1740}
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1735, file: !1729, line: 159, baseType: !1738, size: 64)
!1738 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1670, size: 64)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1735, file: !1729, line: 160, baseType: !1734, size: 64, offset: 64)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1735, file: !1729, line: 161, baseType: !1741, size: 32, offset: 128)
!1741 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1670, size: 32, elements: !1742)
!1742 = !{!1743}
!1743 = !DISubrange(count: 4)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1728, file: !1729, line: 168, baseType: !1738, size: 64, offset: 128)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1728, file: !1729, line: 169, baseType: !1738, size: 64, offset: 192)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1728, file: !1729, line: 170, baseType: !1738, size: 64, offset: 256)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1728, file: !1729, line: 171, baseType: !1732, size: 64, offset: 320)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1728, file: !1729, line: 172, baseType: !1575, size: 32, offset: 384)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1728, file: !1729, line: 176, baseType: !1750, size: 64, offset: 448)
!1750 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1751, size: 64)
!1751 = !DISubroutineType(types: !1752)
!1752 = !{!1734, !1574, !1732}
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1728, file: !1729, line: 177, baseType: !1754, size: 64, offset: 512)
!1754 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1755, size: 64)
!1755 = !DISubroutineType(types: !1756)
!1756 = !{null, !1574, !1734}
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1728, file: !1729, line: 178, baseType: !1574, size: 64, offset: 576)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1728, file: !1729, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1728, file: !1729, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1728, file: !1729, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1663, file: !1645, line: 177, baseType: !1762, size: 64)
!1762 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1616, line: 56, baseType: !1763)
!1763 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1764, size: 64)
!1764 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !318, line: 3371, size: 1792, elements: !1765)
!1765 = !{!1766, !1799, !1805, !1816, !1835, !1846, !1851, !1858, !1864, !1878, !1886, !1924, !1929, !1957, !1974, !1975, !1980, !1989, !1995, !2000, !2004, !2008, !2331, !2380, !2386, !2392, !2399, !2412, !2426, !2443, !2455, !2477, !2492, !2664}
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1764, file: !318, line: 3372, baseType: !1767, size: 64)
!1767 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !318, line: 360, size: 64, elements: !1768)
!1768 = !{!1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798}
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1767, file: !318, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1767, file: !318, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1767, file: !318, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1767, file: !318, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1767, file: !318, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1767, file: !318, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1767, file: !318, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1767, file: !318, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1767, file: !318, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1767, file: !318, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1767, file: !318, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1767, file: !318, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1767, file: !318, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1767, file: !318, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1767, file: !318, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1767, file: !318, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1767, file: !318, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1767, file: !318, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1767, file: !318, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1767, file: !318, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1767, file: !318, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1767, file: !318, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1767, file: !318, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1767, file: !318, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1767, file: !318, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1767, file: !318, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1767, file: !318, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1767, file: !318, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1767, file: !318, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1767, file: !318, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1764, file: !318, line: 3373, baseType: !1800, size: 192)
!1800 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !318, line: 402, size: 192, elements: !1801)
!1801 = !{!1802, !1803, !1804}
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1800, file: !318, line: 403, baseType: !1767, size: 64)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1800, file: !318, line: 404, baseType: !1762, size: 64, offset: 64)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1800, file: !318, line: 405, baseType: !1762, size: 64, offset: 128)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1764, file: !318, line: 3374, baseType: !1806, size: 320)
!1806 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !318, line: 1384, size: 320, elements: !1807)
!1807 = !{!1808, !1809}
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1806, file: !318, line: 1385, baseType: !1800, size: 192)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1806, file: !318, line: 1386, baseType: !1810, size: 128, offset: 192)
!1810 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1811, line: 58, baseType: !1812)
!1811 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1812 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1811, line: 54, size: 128, elements: !1813)
!1813 = !{!1814, !1815}
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1812, file: !1811, line: 56, baseType: !1715, size: 64)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1812, file: !1811, line: 57, baseType: !1732, size: 64, offset: 64)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1764, file: !318, line: 3375, baseType: !1817, size: 256)
!1817 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !318, line: 1397, size: 256, elements: !1818)
!1818 = !{!1819, !1820}
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1817, file: !318, line: 1398, baseType: !1800, size: 192)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1817, file: !318, line: 1399, baseType: !1821, size: 64, offset: 192)
!1821 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1822, size: 64)
!1822 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1823, line: 52, size: 256, elements: !1824)
!1823 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1824 = !{!1825, !1826, !1827, !1828, !1829, !1830, !1831}
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1822, file: !1823, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1822, file: !1823, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1822, file: !1823, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1822, file: !1823, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1822, file: !1823, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1822, file: !1823, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1822, file: !1823, line: 62, baseType: !1832, size: 192, offset: 64)
!1832 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1715, size: 192, elements: !1833)
!1833 = !{!1834}
!1834 = !DISubrange(count: 3)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1764, file: !318, line: 3376, baseType: !1836, size: 256)
!1836 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !318, line: 1408, size: 256, elements: !1837)
!1837 = !{!1838, !1839}
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1836, file: !318, line: 1409, baseType: !1800, size: 192)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1836, file: !318, line: 1410, baseType: !1840, size: 64, offset: 192)
!1840 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1841, size: 64)
!1841 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1842, line: 27, size: 192, elements: !1843)
!1842 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1843 = !{!1844, !1845}
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1841, file: !1842, line: 29, baseType: !1810, size: 128)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1841, file: !1842, line: 30, baseType: !189, size: 32, offset: 128)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1764, file: !318, line: 3377, baseType: !1847, size: 256)
!1847 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !318, line: 1437, size: 256, elements: !1848)
!1848 = !{!1849, !1850}
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1847, file: !318, line: 1438, baseType: !1800, size: 192)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1847, file: !318, line: 1439, baseType: !1762, size: 64, offset: 192)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1764, file: !318, line: 3378, baseType: !1852, size: 256)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !318, line: 1418, size: 256, elements: !1853)
!1853 = !{!1854, !1855, !1856}
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1852, file: !318, line: 1419, baseType: !1800, size: 192)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1852, file: !318, line: 1420, baseType: !1575, size: 32, offset: 192)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1852, file: !318, line: 1421, baseType: !1857, size: 8, offset: 224)
!1857 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1670, size: 8, elements: !1680)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1764, file: !318, line: 3379, baseType: !1859, size: 320)
!1859 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !318, line: 1428, size: 320, elements: !1860)
!1860 = !{!1861, !1862, !1863}
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1859, file: !318, line: 1429, baseType: !1800, size: 192)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1859, file: !318, line: 1430, baseType: !1762, size: 64, offset: 192)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1859, file: !318, line: 1431, baseType: !1762, size: 64, offset: 256)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1764, file: !318, line: 3380, baseType: !1865, size: 320)
!1865 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !318, line: 1460, size: 320, elements: !1866)
!1866 = !{!1867, !1868}
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1865, file: !318, line: 1461, baseType: !1800, size: 192)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1865, file: !318, line: 1462, baseType: !1869, size: 128, offset: 192)
!1869 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1870, line: 31, size: 128, elements: !1871)
!1870 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1871 = !{!1872, !1876, !1877}
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1869, file: !1870, line: 32, baseType: !1873, size: 64)
!1873 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1874, size: 64)
!1874 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1875)
!1875 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1869, file: !1870, line: 33, baseType: !7, size: 32, offset: 64)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1869, file: !1870, line: 34, baseType: !7, size: 32, offset: 96)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1764, file: !318, line: 3381, baseType: !1879, size: 384)
!1879 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !318, line: 2507, size: 384, elements: !1880)
!1880 = !{!1881, !1882, !1883, !1884, !1885}
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1879, file: !318, line: 2508, baseType: !1800, size: 192)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1879, file: !318, line: 2509, baseType: !1593, size: 32, offset: 192)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1879, file: !318, line: 2510, baseType: !7, size: 32, offset: 224)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1879, file: !318, line: 2511, baseType: !1762, size: 64, offset: 256)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1879, file: !318, line: 2512, baseType: !1762, size: 64, offset: 320)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1764, file: !318, line: 3382, baseType: !1887, size: 896)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !318, line: 2652, size: 896, elements: !1888)
!1888 = !{!1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1887, file: !318, line: 2653, baseType: !1879, size: 384)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1887, file: !318, line: 2654, baseType: !1762, size: 64, offset: 384)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1887, file: !318, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1887, file: !318, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1887, file: !318, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1887, file: !318, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1887, file: !318, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1887, file: !318, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1887, file: !318, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1887, file: !318, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1887, file: !318, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1887, file: !318, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1887, file: !318, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1887, file: !318, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1887, file: !318, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1887, file: !318, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1887, file: !318, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1887, file: !318, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1887, file: !318, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1887, file: !318, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1887, file: !318, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1887, file: !318, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1887, file: !318, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1887, file: !318, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1887, file: !318, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1887, file: !318, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1887, file: !318, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1887, file: !318, line: 2703, baseType: !7, size: 32, offset: 512)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1887, file: !318, line: 2705, baseType: !1762, size: 64, offset: 576)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1887, file: !318, line: 2706, baseType: !1762, size: 64, offset: 640)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1887, file: !318, line: 2707, baseType: !1762, size: 64, offset: 704)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1887, file: !318, line: 2708, baseType: !1762, size: 64, offset: 768)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1887, file: !318, line: 2711, baseType: !1922, size: 64, offset: 832)
!1922 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1923, size: 64)
!1923 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !318, line: 2711, flags: DIFlagFwdDecl)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1764, file: !318, line: 3383, baseType: !1925, size: 960)
!1925 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !318, line: 2756, size: 960, elements: !1926)
!1926 = !{!1927, !1928}
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1925, file: !318, line: 2757, baseType: !1887, size: 896)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1925, file: !318, line: 2758, baseType: !1642, size: 64, offset: 896)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1764, file: !318, line: 3384, baseType: !1930, size: 1472)
!1930 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !318, line: 3114, size: 1472, elements: !1931)
!1931 = !{!1932, !1953, !1954, !1955, !1956}
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1930, file: !318, line: 3115, baseType: !1933, size: 1216)
!1933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !318, line: 2984, size: 1216, elements: !1934)
!1934 = !{!1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952}
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1933, file: !318, line: 2985, baseType: !1925, size: 960)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1933, file: !318, line: 2986, baseType: !1762, size: 64, offset: 960)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1933, file: !318, line: 2987, baseType: !1762, size: 64, offset: 1024)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1933, file: !318, line: 2988, baseType: !1762, size: 64, offset: 1088)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1933, file: !318, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1933, file: !318, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1933, file: !318, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1933, file: !318, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1933, file: !318, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1933, file: !318, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1933, file: !318, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1933, file: !318, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1933, file: !318, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1933, file: !318, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1933, file: !318, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1933, file: !318, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1933, file: !318, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1933, file: !318, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1930, file: !318, line: 3117, baseType: !1762, size: 64, offset: 1216)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1930, file: !318, line: 3119, baseType: !1762, size: 64, offset: 1280)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1930, file: !318, line: 3121, baseType: !1762, size: 64, offset: 1344)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1930, file: !318, line: 3123, baseType: !1762, size: 64, offset: 1408)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1764, file: !318, line: 3385, baseType: !1958, size: 1088)
!1958 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !318, line: 2874, size: 1088, elements: !1959)
!1959 = !{!1960, !1961, !1962}
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1958, file: !318, line: 2875, baseType: !1925, size: 960)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1958, file: !318, line: 2876, baseType: !1642, size: 64, offset: 960)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1958, file: !318, line: 2877, baseType: !1963, size: 64, offset: 1024)
!1963 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1964, size: 64)
!1964 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1965, line: 172, size: 128, elements: !1966)
!1965 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1966 = !{!1967, !1968, !1969, !1970, !1971, !1972, !1973}
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1964, file: !1965, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1964, file: !1965, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1964, file: !1965, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1964, file: !1965, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1964, file: !1965, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1964, file: !1965, line: 195, baseType: !7, size: 32, offset: 32)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1964, file: !1965, line: 199, baseType: !1762, size: 64, offset: 64)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1764, file: !318, line: 3386, baseType: !1933, size: 1216)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1764, file: !318, line: 3387, baseType: !1976, size: 1280)
!1976 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !318, line: 3093, size: 1280, elements: !1977)
!1977 = !{!1978, !1979}
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1976, file: !318, line: 3094, baseType: !1933, size: 1216)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1976, file: !318, line: 3095, baseType: !1963, size: 64, offset: 1216)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1764, file: !318, line: 3388, baseType: !1981, size: 1216)
!1981 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !318, line: 2824, size: 1216, elements: !1982)
!1982 = !{!1983, !1984, !1985, !1986, !1987, !1988}
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1981, file: !318, line: 2825, baseType: !1887, size: 896)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1981, file: !318, line: 2827, baseType: !1762, size: 64, offset: 896)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1981, file: !318, line: 2828, baseType: !1762, size: 64, offset: 960)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1981, file: !318, line: 2829, baseType: !1762, size: 64, offset: 1024)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1981, file: !318, line: 2830, baseType: !1762, size: 64, offset: 1088)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1981, file: !318, line: 2831, baseType: !1762, size: 64, offset: 1152)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1764, file: !318, line: 3389, baseType: !1990, size: 1024)
!1990 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !318, line: 2850, size: 1024, elements: !1991)
!1991 = !{!1992, !1993, !1994}
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1990, file: !318, line: 2851, baseType: !1925, size: 960)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1990, file: !318, line: 2852, baseType: !1575, size: 32, offset: 960)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1990, file: !318, line: 2853, baseType: !1575, size: 32, offset: 992)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1764, file: !318, line: 3390, baseType: !1996, size: 1024)
!1996 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !318, line: 2857, size: 1024, elements: !1997)
!1997 = !{!1998, !1999}
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1996, file: !318, line: 2858, baseType: !1925, size: 960)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1996, file: !318, line: 2859, baseType: !1963, size: 64, offset: 960)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1764, file: !318, line: 3391, baseType: !2001, size: 960)
!2001 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !318, line: 2862, size: 960, elements: !2002)
!2002 = !{!2003}
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2001, file: !318, line: 2863, baseType: !1925, size: 960)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1764, file: !318, line: 3392, baseType: !2005, size: 1472)
!2005 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !318, line: 3304, size: 1472, elements: !2006)
!2006 = !{!2007}
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2005, file: !318, line: 3305, baseType: !1930, size: 1472)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1764, file: !318, line: 3393, baseType: !2009, size: 1792)
!2009 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !318, line: 3248, size: 1792, elements: !2010)
!2010 = !{!2011, !2012, !2310, !2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327, !2328, !2329, !2330}
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2009, file: !318, line: 3249, baseType: !1930, size: 1472)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2009, file: !318, line: 3251, baseType: !2013, size: 64, offset: 1472)
!2013 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2014, size: 64)
!2014 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2015, line: 463, size: 1152, elements: !2016)
!2015 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2016 = !{!2017, !2020, !2051, !2052, !2191, !2254, !2255, !2256, !2257, !2258, !2259, !2283, !2286, !2287, !2288, !2289, !2290, !2291, !2292, !2293, !2294, !2295, !2296, !2297, !2298, !2299, !2300, !2301, !2302, !2303, !2304, !2305, !2306, !2307, !2308, !2309}
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2014, file: !2015, line: 464, baseType: !2018, size: 64)
!2018 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2019, size: 64)
!2019 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !2015, line: 464, flags: DIFlagFwdDecl)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2014, file: !2015, line: 467, baseType: !2021, size: 64, offset: 64)
!2021 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2022, size: 64)
!2022 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !526, line: 374, size: 640, elements: !2023)
!2023 = !{!2024, !2026, !2027, !2040, !2041, !2042, !2043, !2044, !2045, !2047, !2049, !2050}
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2022, file: !526, line: 377, baseType: !2025, size: 64)
!2025 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1616, line: 111, baseType: !1599)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2022, file: !526, line: 378, baseType: !2025, size: 64, offset: 64)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2022, file: !526, line: 381, baseType: !2028, size: 64, offset: 128)
!2028 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2029, size: 64)
!2029 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !526, line: 282, baseType: !2030)
!2030 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !526, line: 282, size: 128, elements: !2031)
!2031 = !{!2032}
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2030, file: !526, line: 282, baseType: !2033, size: 128)
!2033 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !526, line: 281, baseType: !2034)
!2034 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !526, line: 281, size: 128, elements: !2035)
!2035 = !{!2036, !2037, !2038}
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2034, file: !526, line: 281, baseType: !7, size: 32)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2034, file: !526, line: 281, baseType: !7, size: 32, offset: 32)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2034, file: !526, line: 281, baseType: !2039, size: 64, offset: 64)
!2039 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2025, size: 64, elements: !1680)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2022, file: !526, line: 384, baseType: !1575, size: 32, offset: 192)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2022, file: !526, line: 387, baseType: !1575, size: 32, offset: 224)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2022, file: !526, line: 390, baseType: !1575, size: 32, offset: 256)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2022, file: !526, line: 394, baseType: !2028, size: 64, offset: 320)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2022, file: !526, line: 396, baseType: !525, size: 32, offset: 384)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2022, file: !526, line: 399, baseType: !2046, size: 64, offset: 416)
!2046 = !DICompositeType(tag: DW_TAG_array_type, baseType: !531, size: 64, elements: !1716)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2022, file: !526, line: 402, baseType: !2048, size: 64, offset: 480)
!2048 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1716)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2022, file: !526, line: 406, baseType: !1575, size: 32, offset: 544)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2022, file: !526, line: 409, baseType: !1575, size: 32, offset: 576)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2014, file: !2015, line: 470, baseType: !1627, size: 64, offset: 128)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2014, file: !2015, line: 473, baseType: !2053, size: 64, offset: 192)
!2053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2054, size: 64)
!2054 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1965, line: 39, size: 1152, elements: !2055)
!2055 = !{!2056, !2107, !2120, !2133, !2134, !2146, !2147, !2151, !2152, !2153, !2154, !2155}
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2054, file: !1965, line: 41, baseType: !2057, size: 64)
!2057 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !696, line: 144, baseType: !2058)
!2058 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2059, size: 64)
!2059 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !696, line: 100, size: 896, elements: !2060)
!2060 = !{!2061, !2069, !2074, !2079, !2081, !2084, !2085, !2086, !2087, !2088, !2093, !2095, !2096, !2101, !2106}
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2059, file: !696, line: 102, baseType: !2062, size: 64)
!2062 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !696, line: 52, baseType: !2063)
!2063 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2064, size: 64)
!2064 = !DISubroutineType(types: !2065)
!2065 = !{!2066, !2067}
!2066 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !696, line: 47, baseType: !7)
!2067 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2068, size: 64)
!2068 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2059, file: !696, line: 105, baseType: !2070, size: 64, offset: 64)
!2070 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !696, line: 59, baseType: !2071)
!2071 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2072, size: 64)
!2072 = !DISubroutineType(types: !2073)
!2073 = !{!1575, !2067, !2067}
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2059, file: !696, line: 108, baseType: !2075, size: 64, offset: 128)
!2075 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !696, line: 63, baseType: !2076)
!2076 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2077, size: 64)
!2077 = !DISubroutineType(types: !2078)
!2078 = !{null, !1574}
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2059, file: !696, line: 111, baseType: !2080, size: 64, offset: 192)
!2080 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1574, size: 64)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2059, file: !696, line: 114, baseType: !2082, size: 64, offset: 256)
!2082 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2083, line: 46, baseType: !1715)
!2083 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2059, file: !696, line: 117, baseType: !2082, size: 64, offset: 320)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2059, file: !696, line: 120, baseType: !2082, size: 64, offset: 384)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2059, file: !696, line: 124, baseType: !7, size: 32, offset: 448)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2059, file: !696, line: 128, baseType: !7, size: 32, offset: 480)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2059, file: !696, line: 131, baseType: !2089, size: 64, offset: 512)
!2089 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !696, line: 75, baseType: !2090)
!2090 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2091, size: 64)
!2091 = !DISubroutineType(types: !2092)
!2092 = !{!1574, !2082, !2082}
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2059, file: !696, line: 132, baseType: !2094, size: 64, offset: 576)
!2094 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !696, line: 78, baseType: !2076)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2059, file: !696, line: 135, baseType: !1574, size: 64, offset: 640)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2059, file: !696, line: 136, baseType: !2097, size: 64, offset: 704)
!2097 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !696, line: 82, baseType: !2098)
!2098 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2099, size: 64)
!2099 = !DISubroutineType(types: !2100)
!2100 = !{!1574, !1574, !2082, !2082}
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2059, file: !696, line: 137, baseType: !2102, size: 64, offset: 768)
!2102 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !696, line: 83, baseType: !2103)
!2103 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2104, size: 64)
!2104 = !DISubroutineType(types: !2105)
!2105 = !{null, !1574, !1574}
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2059, file: !696, line: 141, baseType: !7, size: 32, offset: 832)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2054, file: !1965, line: 48, baseType: !2108, size: 64, offset: 64)
!2108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2109, size: 64)
!2109 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !625, line: 35, baseType: !2110)
!2110 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !625, line: 35, size: 128, elements: !2111)
!2111 = !{!2112}
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2110, file: !625, line: 35, baseType: !2113, size: 128)
!2113 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !625, line: 33, baseType: !2114)
!2114 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !625, line: 33, size: 128, elements: !2115)
!2115 = !{!2116, !2117, !2118}
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2114, file: !625, line: 33, baseType: !7, size: 32)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2114, file: !625, line: 33, baseType: !7, size: 32, offset: 32)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2114, file: !625, line: 33, baseType: !2119, size: 64, offset: 64)
!2119 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1636, size: 64, elements: !1680)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2054, file: !1965, line: 51, baseType: !2121, size: 64, offset: 128)
!2121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2122, size: 64)
!2122 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !318, line: 183, baseType: !2123)
!2123 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !318, line: 183, size: 128, elements: !2124)
!2124 = !{!2125}
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2123, file: !318, line: 183, baseType: !2126, size: 128)
!2126 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !318, line: 182, baseType: !2127)
!2127 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !318, line: 182, size: 128, elements: !2128)
!2128 = !{!2129, !2130, !2131}
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2127, file: !318, line: 182, baseType: !7, size: 32)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2127, file: !318, line: 182, baseType: !7, size: 32, offset: 32)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2127, file: !318, line: 182, baseType: !2132, size: 64, offset: 64)
!2132 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1762, size: 64, elements: !1680)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2054, file: !1965, line: 54, baseType: !1762, size: 64, offset: 192)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2054, file: !1965, line: 57, baseType: !2135, size: 128, offset: 256)
!2135 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2136, line: 31, size: 128, elements: !2137)
!2136 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2137 = !{!2138, !2139, !2140, !2141, !2142, !2143, !2144}
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2135, file: !2136, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2135, file: !2136, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2135, file: !2136, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2135, file: !2136, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2135, file: !2136, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2135, file: !2136, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2135, file: !2136, line: 56, baseType: !2145, size: 64, offset: 64)
!2145 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1616, line: 47, baseType: !1699)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2054, file: !1965, line: 60, baseType: !2135, size: 128, offset: 384)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2054, file: !1965, line: 64, baseType: !2148, size: 64, offset: 512)
!2148 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2149, size: 64)
!2149 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2150, line: 33, flags: DIFlagFwdDecl)
!2150 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2054, file: !1965, line: 67, baseType: !1762, size: 64, offset: 576)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2054, file: !1965, line: 73, baseType: !2057, size: 64, offset: 640)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2054, file: !1965, line: 77, baseType: !2145, size: 64, offset: 704)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2054, file: !1965, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2054, file: !1965, line: 82, baseType: !2156, size: 320, offset: 832)
!2156 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1560, line: 62, size: 320, elements: !2157)
!2157 = !{!2158, !2164, !2165, !2166, !2167, !2174}
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2156, file: !1560, line: 63, baseType: !2159, size: 64)
!2159 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2160, size: 64)
!2160 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1560, line: 56, size: 128, elements: !2161)
!2161 = !{!2162, !2163}
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2160, file: !1560, line: 57, baseType: !2159, size: 64)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2160, file: !1560, line: 58, baseType: !1857, size: 8, offset: 64)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2156, file: !1560, line: 64, baseType: !7, size: 32, offset: 64)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2156, file: !1560, line: 66, baseType: !7, size: 32, offset: 96)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2156, file: !1560, line: 68, baseType: !1875, size: 8, offset: 128)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2156, file: !1560, line: 70, baseType: !2168, size: 64, offset: 192)
!2168 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2169, size: 64)
!2169 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1560, line: 37, size: 128, elements: !2170)
!2170 = !{!2171, !2172}
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2169, file: !1560, line: 39, baseType: !2168, size: 64)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !2169, file: !1560, line: 40, baseType: !2173, size: 64, offset: 64)
!2173 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1762, size: 64)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2156, file: !1560, line: 71, baseType: !2175, size: 64, offset: 256)
!2175 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2176, size: 64)
!2176 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1560, line: 45, size: 320, elements: !2177)
!2177 = !{!2178, !2179}
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2176, file: !1560, line: 47, baseType: !2175, size: 64)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !2176, file: !1560, line: 48, baseType: !2180, size: 256, offset: 64)
!2180 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !318, line: 1883, size: 256, elements: !2181)
!2181 = !{!2182, !2184, !2185, !2190}
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2180, file: !318, line: 1884, baseType: !2183, size: 64)
!2183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2180, size: 64)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2180, file: !318, line: 1885, baseType: !2183, size: 64, offset: 64)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !2180, file: !318, line: 1891, baseType: !2186, size: 64, offset: 128)
!2186 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2180, file: !318, line: 1891, size: 64, elements: !2187)
!2187 = !{!2188, !2189}
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2186, file: !318, line: 1891, baseType: !1636, size: 64)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2186, file: !318, line: 1891, baseType: !1762, size: 64)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2180, file: !318, line: 1892, baseType: !2173, size: 64, offset: 192)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2014, file: !2015, line: 476, baseType: !2192, size: 64, offset: 256)
!2192 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2193, size: 64)
!2193 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !513, line: 187, size: 256, elements: !2194)
!2194 = !{!2195, !2196, !2252, !2253}
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !2193, file: !513, line: 189, baseType: !1575, size: 32)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !2193, file: !513, line: 192, baseType: !2197, size: 64, offset: 64)
!2197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2198, size: 64)
!2198 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !513, line: 87, baseType: !2199)
!2199 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !513, line: 87, size: 128, elements: !2200)
!2200 = !{!2201}
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2199, file: !513, line: 87, baseType: !2202, size: 128)
!2202 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !513, line: 85, baseType: !2203)
!2203 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !513, line: 85, size: 128, elements: !2204)
!2204 = !{!2205, !2206, !2207}
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2203, file: !513, line: 85, baseType: !7, size: 32)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2203, file: !513, line: 85, baseType: !7, size: 32, offset: 32)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2203, file: !513, line: 85, baseType: !2208, size: 64, offset: 64)
!2208 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2209, size: 64, elements: !1680)
!2209 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !513, line: 84, baseType: !2210)
!2210 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2211, size: 64)
!2211 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !513, line: 100, size: 1216, elements: !2212)
!2212 = !{!2213, !2214, !2215, !2216, !2217, !2222, !2223, !2224, !2225, !2226, !2227, !2228, !2229, !2230, !2231, !2232, !2233, !2234, !2242, !2250, !2251}
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2211, file: !513, line: 102, baseType: !1575, size: 32)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !2211, file: !513, line: 105, baseType: !7, size: 32, offset: 32)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2211, file: !513, line: 108, baseType: !1599, size: 64, offset: 64)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !2211, file: !513, line: 111, baseType: !1599, size: 64, offset: 128)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !2211, file: !513, line: 114, baseType: !2218, size: 64, offset: 192)
!2218 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !513, line: 41, size: 64, elements: !2219)
!2219 = !{!2220, !2221}
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !2218, file: !513, line: 42, baseType: !512, size: 32)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !2218, file: !513, line: 43, baseType: !7, size: 32, offset: 32)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !2211, file: !513, line: 117, baseType: !7, size: 32, offset: 256)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !2211, file: !513, line: 120, baseType: !7, size: 32, offset: 288)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !2211, file: !513, line: 123, baseType: !2197, size: 64, offset: 320)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !2211, file: !513, line: 126, baseType: !2210, size: 64, offset: 384)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2211, file: !513, line: 129, baseType: !2210, size: 64, offset: 448)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2211, file: !513, line: 132, baseType: !1574, size: 64, offset: 512)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !2211, file: !513, line: 139, baseType: !1762, size: 64, offset: 576)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !2211, file: !513, line: 143, baseType: !1810, size: 128, offset: 640)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !2211, file: !513, line: 146, baseType: !1810, size: 128, offset: 768)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !2211, file: !513, line: 148, baseType: !1875, size: 8, offset: 896)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !2211, file: !513, line: 149, baseType: !1875, size: 8, offset: 904)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !2211, file: !513, line: 153, baseType: !521, size: 32, offset: 928)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !2211, file: !513, line: 156, baseType: !2235, size: 64, offset: 960)
!2235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2236, size: 64)
!2236 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !513, line: 48, size: 320, elements: !2237)
!2237 = !{!2238, !2239, !2240, !2241}
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2236, file: !513, line: 50, baseType: !1636, size: 64)
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !2236, file: !513, line: 59, baseType: !1810, size: 128, offset: 64)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !2236, file: !513, line: 64, baseType: !1875, size: 8, offset: 192)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2236, file: !513, line: 67, baseType: !2235, size: 64, offset: 256)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !2211, file: !513, line: 159, baseType: !2243, size: 64, offset: 1024)
!2243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2244, size: 64)
!2244 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !513, line: 72, size: 256, elements: !2245)
!2245 = !{!2246, !2247, !2248, !2249}
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !2244, file: !513, line: 74, baseType: !1617, size: 64)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2244, file: !513, line: 77, baseType: !2243, size: 64, offset: 64)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2244, file: !513, line: 78, baseType: !2243, size: 64, offset: 128)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !2244, file: !513, line: 81, baseType: !2243, size: 64, offset: 192)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !2211, file: !513, line: 162, baseType: !1875, size: 8, offset: 1088)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !2211, file: !513, line: 166, baseType: !1762, size: 64, offset: 1152)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !2193, file: !513, line: 197, baseType: !2057, size: 64, offset: 128)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !2193, file: !513, line: 200, baseType: !2210, size: 64, offset: 192)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2014, file: !2015, line: 479, baseType: !2057, size: 64, offset: 320)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2014, file: !2015, line: 484, baseType: !1762, size: 64, offset: 384)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2014, file: !2015, line: 488, baseType: !1762, size: 64, offset: 448)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2014, file: !2015, line: 493, baseType: !1762, size: 64, offset: 512)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2014, file: !2015, line: 496, baseType: !1762, size: 64, offset: 576)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2014, file: !2015, line: 501, baseType: !2260, size: 64, offset: 640)
!2260 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2261, size: 64)
!2261 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !537, line: 2355, size: 576, elements: !2262)
!2262 = !{!2263, !2266, !2267, !2268, !2269, !2271, !2272, !2277, !2278, !2279, !2280, !2281, !2282}
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2261, file: !537, line: 2356, baseType: !2264, size: 64)
!2264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2265, size: 64)
!2265 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !537, line: 2356, flags: DIFlagFwdDecl)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2261, file: !537, line: 2357, baseType: !1668, size: 64, offset: 64)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2261, file: !537, line: 2358, baseType: !1575, size: 32, offset: 128)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2261, file: !537, line: 2359, baseType: !1575, size: 32, offset: 160)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2261, file: !537, line: 2360, baseType: !2270, size: 128, offset: 192)
!2270 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1575, size: 128, elements: !1742)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2261, file: !537, line: 2364, baseType: !1575, size: 32, offset: 320)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2261, file: !537, line: 2367, baseType: !2273, size: 128, offset: 384)
!2273 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !537, line: 2349, size: 128, elements: !2274)
!2274 = !{!2275, !2276}
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2273, file: !537, line: 2351, baseType: !1642, size: 64)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2273, file: !537, line: 2352, baseType: !1732, size: 64, offset: 64)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2261, file: !537, line: 2371, baseType: !536, size: 32, offset: 512)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2261, file: !537, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2261, file: !537, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2261, file: !537, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2261, file: !537, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2261, file: !537, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2014, file: !2015, line: 504, baseType: !2284, size: 64, offset: 704)
!2284 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2285, size: 64)
!2285 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2015, line: 504, flags: DIFlagFwdDecl)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2014, file: !2015, line: 507, baseType: !2057, size: 64, offset: 768)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2014, file: !2015, line: 510, baseType: !1575, size: 32, offset: 832)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2014, file: !2015, line: 513, baseType: !1575, size: 32, offset: 864)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2014, file: !2015, line: 516, baseType: !1593, size: 32, offset: 896)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2014, file: !2015, line: 519, baseType: !1593, size: 32, offset: 928)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2014, file: !2015, line: 522, baseType: !7, size: 32, offset: 960)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2014, file: !2015, line: 523, baseType: !7, size: 32, offset: 992)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2014, file: !2015, line: 528, baseType: !1668, size: 64, offset: 1024)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2014, file: !2015, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2014, file: !2015, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2014, file: !2015, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2014, file: !2015, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2014, file: !2015, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2014, file: !2015, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2014, file: !2015, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2014, file: !2015, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2014, file: !2015, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2014, file: !2015, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2014, file: !2015, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2014, file: !2015, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2014, file: !2015, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2014, file: !2015, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2014, file: !2015, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2014, file: !2015, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2009, file: !318, line: 3254, baseType: !1762, size: 64, offset: 1536)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2009, file: !318, line: 3257, baseType: !1762, size: 64, offset: 1600)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2009, file: !318, line: 3258, baseType: !1762, size: 64, offset: 1664)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2009, file: !318, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2009, file: !318, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2009, file: !318, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2009, file: !318, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2009, file: !318, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2009, file: !318, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2009, file: !318, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2009, file: !318, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2009, file: !318, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2009, file: !318, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2009, file: !318, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2009, file: !318, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2009, file: !318, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2009, file: !318, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2009, file: !318, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2009, file: !318, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2009, file: !318, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2009, file: !318, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1764, file: !318, line: 3394, baseType: !2332, size: 1344)
!2332 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !318, line: 2279, size: 1344, elements: !2333)
!2333 = !{!2334, !2335, !2336, !2337, !2338, !2339, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2359, !2360, !2361, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377}
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2332, file: !318, line: 2280, baseType: !1800, size: 192)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2332, file: !318, line: 2281, baseType: !1762, size: 64, offset: 192)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2332, file: !318, line: 2282, baseType: !1762, size: 64, offset: 256)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2332, file: !318, line: 2283, baseType: !1762, size: 64, offset: 320)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2332, file: !318, line: 2284, baseType: !1762, size: 64, offset: 384)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2332, file: !318, line: 2285, baseType: !7, size: 32, offset: 448)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2332, file: !318, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2332, file: !318, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2332, file: !318, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2332, file: !318, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2332, file: !318, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2332, file: !318, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2332, file: !318, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2332, file: !318, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2332, file: !318, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2332, file: !318, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2332, file: !318, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2332, file: !318, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2332, file: !318, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2332, file: !318, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2332, file: !318, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2332, file: !318, line: 2305, baseType: !7, size: 32, offset: 512)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2332, file: !318, line: 2306, baseType: !2357, size: 32, offset: 544)
!2357 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2358, line: 31, baseType: !1575)
!2358 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2332, file: !318, line: 2307, baseType: !1762, size: 64, offset: 576)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2332, file: !318, line: 2308, baseType: !1762, size: 64, offset: 640)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2332, file: !318, line: 2314, baseType: !2362, size: 64, offset: 704)
!2362 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !318, line: 2309, size: 64, elements: !2363)
!2363 = !{!2364, !2365, !2366}
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2362, file: !318, line: 2310, baseType: !1575, size: 32)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2362, file: !318, line: 2311, baseType: !1668, size: 64)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2362, file: !318, line: 2312, baseType: !2367, size: 64)
!2367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2368, size: 64)
!2368 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !318, line: 2277, flags: DIFlagFwdDecl)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2332, file: !318, line: 2315, baseType: !1762, size: 64, offset: 768)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2332, file: !318, line: 2316, baseType: !1762, size: 64, offset: 832)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2332, file: !318, line: 2317, baseType: !1762, size: 64, offset: 896)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2332, file: !318, line: 2318, baseType: !1762, size: 64, offset: 960)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2332, file: !318, line: 2319, baseType: !1762, size: 64, offset: 1024)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2332, file: !318, line: 2320, baseType: !1762, size: 64, offset: 1088)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2332, file: !318, line: 2321, baseType: !1762, size: 64, offset: 1152)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2332, file: !318, line: 2322, baseType: !1762, size: 64, offset: 1216)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2332, file: !318, line: 2324, baseType: !2378, size: 64, offset: 1280)
!2378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2379, size: 64)
!2379 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !318, line: 2324, flags: DIFlagFwdDecl)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1764, file: !318, line: 3395, baseType: !2381, size: 320)
!2381 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !318, line: 1469, size: 320, elements: !2382)
!2382 = !{!2383, !2384, !2385}
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2381, file: !318, line: 1470, baseType: !1800, size: 192)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2381, file: !318, line: 1471, baseType: !1762, size: 64, offset: 192)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2381, file: !318, line: 1472, baseType: !1762, size: 64, offset: 256)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1764, file: !318, line: 3396, baseType: !2387, size: 320)
!2387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !318, line: 1482, size: 320, elements: !2388)
!2388 = !{!2389, !2390, !2391}
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2387, file: !318, line: 1483, baseType: !1800, size: 192)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2387, file: !318, line: 1484, baseType: !1575, size: 32, offset: 192)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2387, file: !318, line: 1485, baseType: !2132, size: 64, offset: 256)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1764, file: !318, line: 3397, baseType: !2393, size: 384)
!2393 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !318, line: 1829, size: 384, elements: !2394)
!2394 = !{!2395, !2396, !2397, !2398}
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2393, file: !318, line: 1830, baseType: !1800, size: 192)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2393, file: !318, line: 1831, baseType: !1593, size: 32, offset: 192)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2393, file: !318, line: 1832, baseType: !1762, size: 64, offset: 256)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2393, file: !318, line: 1835, baseType: !2132, size: 64, offset: 320)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1764, file: !318, line: 3398, baseType: !2400, size: 704)
!2400 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !318, line: 1898, size: 704, elements: !2401)
!2401 = !{!2402, !2403, !2404, !2405, !2406, !2411}
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2400, file: !318, line: 1899, baseType: !1800, size: 192)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2400, file: !318, line: 1902, baseType: !1762, size: 64, offset: 192)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2400, file: !318, line: 1905, baseType: !1636, size: 64, offset: 256)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2400, file: !318, line: 1908, baseType: !7, size: 32, offset: 320)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2400, file: !318, line: 1911, baseType: !2407, size: 64, offset: 384)
!2407 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2408, size: 64)
!2408 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1965, line: 117, size: 128, elements: !2409)
!2409 = !{!2410}
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2408, file: !1965, line: 120, baseType: !2135, size: 128)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2400, file: !318, line: 1914, baseType: !2180, size: 256, offset: 448)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1764, file: !318, line: 3399, baseType: !2413, size: 704)
!2413 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !318, line: 2008, size: 704, elements: !2414)
!2414 = !{!2415, !2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423, !2424, !2425}
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2413, file: !318, line: 2009, baseType: !1800, size: 192)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2413, file: !318, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2413, file: !318, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2413, file: !318, line: 2014, baseType: !1593, size: 32, offset: 224)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2413, file: !318, line: 2016, baseType: !1762, size: 64, offset: 256)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2413, file: !318, line: 2017, baseType: !2121, size: 64, offset: 320)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2413, file: !318, line: 2019, baseType: !1762, size: 64, offset: 384)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2413, file: !318, line: 2020, baseType: !1762, size: 64, offset: 448)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2413, file: !318, line: 2021, baseType: !1762, size: 64, offset: 512)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2413, file: !318, line: 2022, baseType: !1762, size: 64, offset: 576)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2413, file: !318, line: 2023, baseType: !1762, size: 64, offset: 640)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1764, file: !318, line: 3400, baseType: !2427, size: 832)
!2427 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !318, line: 2430, size: 832, elements: !2428)
!2428 = !{!2429, !2430, !2431, !2432, !2433, !2434, !2435, !2436, !2437, !2438}
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2427, file: !318, line: 2431, baseType: !1800, size: 192)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2427, file: !318, line: 2433, baseType: !1762, size: 64, offset: 192)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2427, file: !318, line: 2434, baseType: !1762, size: 64, offset: 256)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2427, file: !318, line: 2435, baseType: !1762, size: 64, offset: 320)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2427, file: !318, line: 2436, baseType: !1762, size: 64, offset: 384)
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2427, file: !318, line: 2437, baseType: !2121, size: 64, offset: 448)
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2427, file: !318, line: 2438, baseType: !1762, size: 64, offset: 512)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2427, file: !318, line: 2440, baseType: !1762, size: 64, offset: 576)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2427, file: !318, line: 2441, baseType: !1762, size: 64, offset: 640)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2427, file: !318, line: 2443, baseType: !2439, size: 128, offset: 704)
!2439 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !318, line: 182, baseType: !2440)
!2440 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !318, line: 182, size: 128, elements: !2441)
!2441 = !{!2442}
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2440, file: !318, line: 182, baseType: !2126, size: 128)
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1764, file: !318, line: 3401, baseType: !2444, size: 320)
!2444 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !318, line: 3327, size: 320, elements: !2445)
!2445 = !{!2446, !2447, !2454}
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2444, file: !318, line: 3329, baseType: !1800, size: 192)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2444, file: !318, line: 3330, baseType: !2448, size: 64, offset: 192)
!2448 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2449, size: 64)
!2449 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !318, line: 3320, size: 192, elements: !2450)
!2450 = !{!2451, !2452, !2453}
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2449, file: !318, line: 3322, baseType: !2448, size: 64)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2449, file: !318, line: 3323, baseType: !2448, size: 64, offset: 64)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2449, file: !318, line: 3324, baseType: !1762, size: 64, offset: 128)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2444, file: !318, line: 3331, baseType: !2448, size: 64, offset: 256)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1764, file: !318, line: 3402, baseType: !2456, size: 256)
!2456 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !318, line: 1540, size: 256, elements: !2457)
!2457 = !{!2458, !2459}
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2456, file: !318, line: 1541, baseType: !1800, size: 192)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2456, file: !318, line: 1542, baseType: !2460, size: 64, offset: 192)
!2460 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2461, size: 64)
!2461 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !318, line: 1538, baseType: !2462)
!2462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !318, line: 1538, size: 192, elements: !2463)
!2463 = !{!2464}
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2462, file: !318, line: 1538, baseType: !2465, size: 192)
!2465 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !318, line: 1537, baseType: !2466)
!2466 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !318, line: 1537, size: 192, elements: !2467)
!2467 = !{!2468, !2469, !2470}
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2466, file: !318, line: 1537, baseType: !7, size: 32)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2466, file: !318, line: 1537, baseType: !7, size: 32, offset: 32)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2466, file: !318, line: 1537, baseType: !2471, size: 128, offset: 64)
!2471 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2472, size: 128, elements: !1680)
!2472 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !318, line: 1535, baseType: !2473)
!2473 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !318, line: 1532, size: 128, elements: !2474)
!2474 = !{!2475, !2476}
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2473, file: !318, line: 1533, baseType: !1762, size: 64)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2473, file: !318, line: 1534, baseType: !1762, size: 64, offset: 64)
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1764, file: !318, line: 3403, baseType: !2478, size: 512)
!2478 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !318, line: 1938, size: 512, elements: !2479)
!2479 = !{!2480, !2481, !2482, !2483, !2489, !2490, !2491}
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2478, file: !318, line: 1939, baseType: !1800, size: 192)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2478, file: !318, line: 1940, baseType: !1593, size: 32, offset: 192)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2478, file: !318, line: 1941, baseType: !541, size: 32, offset: 224)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2478, file: !318, line: 1946, baseType: !2484, size: 32, offset: 256)
!2484 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !318, line: 1942, size: 32, elements: !2485)
!2485 = !{!2486, !2487, !2488}
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2484, file: !318, line: 1943, baseType: !559, size: 32)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2484, file: !318, line: 1944, baseType: !566, size: 32)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2484, file: !318, line: 1945, baseType: !317, size: 32)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2478, file: !318, line: 1950, baseType: !1626, size: 64, offset: 320)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2478, file: !318, line: 1951, baseType: !1626, size: 64, offset: 384)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2478, file: !318, line: 1953, baseType: !2132, size: 64, offset: 448)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1764, file: !318, line: 3404, baseType: !2493, size: 1664)
!2493 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !318, line: 3337, size: 1664, elements: !2494)
!2494 = !{!2495, !2496}
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2493, file: !318, line: 3338, baseType: !1800, size: 192)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2493, file: !318, line: 3341, baseType: !2497, size: 1472, offset: 192)
!2497 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2498, line: 410, size: 1472, elements: !2499)
!2498 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2499 = !{!2500, !2501, !2502, !2503, !2504, !2505, !2506, !2507, !2508, !2510, !2511, !2512, !2513, !2514, !2515, !2516, !2517, !2518, !2519, !2520, !2521, !2522, !2523, !2524, !2525, !2526, !2527, !2528, !2529, !2530, !2531, !2532, !2533, !2534, !2535, !2536, !2537, !2538, !2539, !2540, !2541, !2542, !2543, !2544, !2545, !2546, !2547, !2548, !2549, !2550, !2551, !2552, !2553, !2554, !2555, !2556, !2557, !2558, !2559, !2560, !2561, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575, !2576, !2577, !2578, !2579, !2580, !2581, !2582, !2583, !2584, !2585, !2586, !2587, !2588, !2589, !2590, !2591, !2592, !2593, !2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612, !2613, !2614, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2623, !2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636, !2637, !2638, !2639, !2640, !2641, !2642, !2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656, !2657, !2658, !2659, !2660, !2661, !2662, !2663}
!2500 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2497, file: !2498, line: 412, baseType: !1575, size: 32)
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2497, file: !2498, line: 413, baseType: !1575, size: 32, offset: 32)
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2497, file: !2498, line: 414, baseType: !1575, size: 32, offset: 64)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2497, file: !2498, line: 415, baseType: !1575, size: 32, offset: 96)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2497, file: !2498, line: 416, baseType: !1575, size: 32, offset: 128)
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2497, file: !2498, line: 417, baseType: !1575, size: 32, offset: 160)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2497, file: !2498, line: 418, baseType: !1875, size: 8, offset: 192)
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2497, file: !2498, line: 419, baseType: !1875, size: 8, offset: 200)
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2497, file: !2498, line: 420, baseType: !2509, size: 8, offset: 208)
!2509 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2497, file: !2498, line: 421, baseType: !2509, size: 8, offset: 216)
!2511 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2497, file: !2498, line: 422, baseType: !2509, size: 8, offset: 224)
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2497, file: !2498, line: 423, baseType: !2509, size: 8, offset: 232)
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2497, file: !2498, line: 424, baseType: !2509, size: 8, offset: 240)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2497, file: !2498, line: 425, baseType: !2509, size: 8, offset: 248)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2497, file: !2498, line: 426, baseType: !2509, size: 8, offset: 256)
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2497, file: !2498, line: 427, baseType: !2509, size: 8, offset: 264)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2497, file: !2498, line: 428, baseType: !2509, size: 8, offset: 272)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2497, file: !2498, line: 429, baseType: !2509, size: 8, offset: 280)
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2497, file: !2498, line: 430, baseType: !2509, size: 8, offset: 288)
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2497, file: !2498, line: 431, baseType: !2509, size: 8, offset: 296)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2497, file: !2498, line: 432, baseType: !2509, size: 8, offset: 304)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2497, file: !2498, line: 433, baseType: !2509, size: 8, offset: 312)
!2523 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2497, file: !2498, line: 434, baseType: !2509, size: 8, offset: 320)
!2524 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2497, file: !2498, line: 435, baseType: !2509, size: 8, offset: 328)
!2525 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2497, file: !2498, line: 436, baseType: !2509, size: 8, offset: 336)
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2497, file: !2498, line: 437, baseType: !2509, size: 8, offset: 344)
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2497, file: !2498, line: 438, baseType: !2509, size: 8, offset: 352)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2497, file: !2498, line: 439, baseType: !2509, size: 8, offset: 360)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2497, file: !2498, line: 440, baseType: !2509, size: 8, offset: 368)
!2530 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2497, file: !2498, line: 441, baseType: !2509, size: 8, offset: 376)
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2497, file: !2498, line: 442, baseType: !2509, size: 8, offset: 384)
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2497, file: !2498, line: 443, baseType: !2509, size: 8, offset: 392)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2497, file: !2498, line: 444, baseType: !2509, size: 8, offset: 400)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2497, file: !2498, line: 445, baseType: !2509, size: 8, offset: 408)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2497, file: !2498, line: 446, baseType: !2509, size: 8, offset: 416)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2497, file: !2498, line: 447, baseType: !2509, size: 8, offset: 424)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2497, file: !2498, line: 448, baseType: !2509, size: 8, offset: 432)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2497, file: !2498, line: 449, baseType: !2509, size: 8, offset: 440)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2497, file: !2498, line: 450, baseType: !2509, size: 8, offset: 448)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2497, file: !2498, line: 451, baseType: !2509, size: 8, offset: 456)
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2497, file: !2498, line: 452, baseType: !2509, size: 8, offset: 464)
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2497, file: !2498, line: 453, baseType: !2509, size: 8, offset: 472)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2497, file: !2498, line: 454, baseType: !2509, size: 8, offset: 480)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2497, file: !2498, line: 455, baseType: !2509, size: 8, offset: 488)
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2497, file: !2498, line: 456, baseType: !2509, size: 8, offset: 496)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2497, file: !2498, line: 457, baseType: !2509, size: 8, offset: 504)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2497, file: !2498, line: 458, baseType: !2509, size: 8, offset: 512)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2497, file: !2498, line: 459, baseType: !2509, size: 8, offset: 520)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2497, file: !2498, line: 460, baseType: !2509, size: 8, offset: 528)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2497, file: !2498, line: 461, baseType: !2509, size: 8, offset: 536)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2497, file: !2498, line: 462, baseType: !2509, size: 8, offset: 544)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2497, file: !2498, line: 463, baseType: !2509, size: 8, offset: 552)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2497, file: !2498, line: 464, baseType: !2509, size: 8, offset: 560)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2497, file: !2498, line: 465, baseType: !2509, size: 8, offset: 568)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2497, file: !2498, line: 466, baseType: !2509, size: 8, offset: 576)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2497, file: !2498, line: 467, baseType: !2509, size: 8, offset: 584)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2497, file: !2498, line: 468, baseType: !2509, size: 8, offset: 592)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2497, file: !2498, line: 469, baseType: !2509, size: 8, offset: 600)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2497, file: !2498, line: 470, baseType: !2509, size: 8, offset: 608)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2497, file: !2498, line: 471, baseType: !2509, size: 8, offset: 616)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2497, file: !2498, line: 472, baseType: !2509, size: 8, offset: 624)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2497, file: !2498, line: 473, baseType: !2509, size: 8, offset: 632)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2497, file: !2498, line: 474, baseType: !2509, size: 8, offset: 640)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2497, file: !2498, line: 475, baseType: !2509, size: 8, offset: 648)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2497, file: !2498, line: 476, baseType: !2509, size: 8, offset: 656)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2497, file: !2498, line: 477, baseType: !2509, size: 8, offset: 664)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2497, file: !2498, line: 478, baseType: !2509, size: 8, offset: 672)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2497, file: !2498, line: 479, baseType: !2509, size: 8, offset: 680)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2497, file: !2498, line: 480, baseType: !2509, size: 8, offset: 688)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2497, file: !2498, line: 481, baseType: !2509, size: 8, offset: 696)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2497, file: !2498, line: 482, baseType: !2509, size: 8, offset: 704)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2497, file: !2498, line: 483, baseType: !2509, size: 8, offset: 712)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2497, file: !2498, line: 484, baseType: !2509, size: 8, offset: 720)
!2574 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2497, file: !2498, line: 485, baseType: !2509, size: 8, offset: 728)
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2497, file: !2498, line: 486, baseType: !2509, size: 8, offset: 736)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2497, file: !2498, line: 487, baseType: !2509, size: 8, offset: 744)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2497, file: !2498, line: 488, baseType: !2509, size: 8, offset: 752)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2497, file: !2498, line: 489, baseType: !2509, size: 8, offset: 760)
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2497, file: !2498, line: 490, baseType: !2509, size: 8, offset: 768)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2497, file: !2498, line: 491, baseType: !2509, size: 8, offset: 776)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2497, file: !2498, line: 492, baseType: !2509, size: 8, offset: 784)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2497, file: !2498, line: 493, baseType: !2509, size: 8, offset: 792)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2497, file: !2498, line: 494, baseType: !2509, size: 8, offset: 800)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2497, file: !2498, line: 495, baseType: !2509, size: 8, offset: 808)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2497, file: !2498, line: 496, baseType: !2509, size: 8, offset: 816)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2497, file: !2498, line: 497, baseType: !2509, size: 8, offset: 824)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2497, file: !2498, line: 498, baseType: !2509, size: 8, offset: 832)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2497, file: !2498, line: 499, baseType: !2509, size: 8, offset: 840)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2497, file: !2498, line: 500, baseType: !2509, size: 8, offset: 848)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2497, file: !2498, line: 501, baseType: !2509, size: 8, offset: 856)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2497, file: !2498, line: 502, baseType: !2509, size: 8, offset: 864)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2497, file: !2498, line: 503, baseType: !2509, size: 8, offset: 872)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2497, file: !2498, line: 504, baseType: !2509, size: 8, offset: 880)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2497, file: !2498, line: 505, baseType: !2509, size: 8, offset: 888)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2497, file: !2498, line: 506, baseType: !2509, size: 8, offset: 896)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2497, file: !2498, line: 507, baseType: !2509, size: 8, offset: 904)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2497, file: !2498, line: 508, baseType: !2509, size: 8, offset: 912)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2497, file: !2498, line: 509, baseType: !2509, size: 8, offset: 920)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2497, file: !2498, line: 510, baseType: !2509, size: 8, offset: 928)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2497, file: !2498, line: 511, baseType: !2509, size: 8, offset: 936)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2497, file: !2498, line: 512, baseType: !2509, size: 8, offset: 944)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2497, file: !2498, line: 513, baseType: !2509, size: 8, offset: 952)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2497, file: !2498, line: 514, baseType: !2509, size: 8, offset: 960)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2497, file: !2498, line: 515, baseType: !2509, size: 8, offset: 968)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2497, file: !2498, line: 516, baseType: !2509, size: 8, offset: 976)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2497, file: !2498, line: 517, baseType: !2509, size: 8, offset: 984)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2497, file: !2498, line: 518, baseType: !2509, size: 8, offset: 992)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2497, file: !2498, line: 519, baseType: !2509, size: 8, offset: 1000)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2497, file: !2498, line: 520, baseType: !2509, size: 8, offset: 1008)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2497, file: !2498, line: 521, baseType: !2509, size: 8, offset: 1016)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2497, file: !2498, line: 522, baseType: !2509, size: 8, offset: 1024)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2497, file: !2498, line: 523, baseType: !2509, size: 8, offset: 1032)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2497, file: !2498, line: 524, baseType: !2509, size: 8, offset: 1040)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2497, file: !2498, line: 525, baseType: !2509, size: 8, offset: 1048)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2497, file: !2498, line: 526, baseType: !2509, size: 8, offset: 1056)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2497, file: !2498, line: 527, baseType: !2509, size: 8, offset: 1064)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2497, file: !2498, line: 528, baseType: !2509, size: 8, offset: 1072)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2497, file: !2498, line: 529, baseType: !2509, size: 8, offset: 1080)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2497, file: !2498, line: 530, baseType: !2509, size: 8, offset: 1088)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2497, file: !2498, line: 531, baseType: !2509, size: 8, offset: 1096)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2497, file: !2498, line: 532, baseType: !2509, size: 8, offset: 1104)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2497, file: !2498, line: 533, baseType: !2509, size: 8, offset: 1112)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2497, file: !2498, line: 534, baseType: !2509, size: 8, offset: 1120)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2497, file: !2498, line: 535, baseType: !2509, size: 8, offset: 1128)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2497, file: !2498, line: 536, baseType: !2509, size: 8, offset: 1136)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2497, file: !2498, line: 537, baseType: !2509, size: 8, offset: 1144)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2497, file: !2498, line: 538, baseType: !2509, size: 8, offset: 1152)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2497, file: !2498, line: 539, baseType: !2509, size: 8, offset: 1160)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2497, file: !2498, line: 540, baseType: !2509, size: 8, offset: 1168)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2497, file: !2498, line: 541, baseType: !2509, size: 8, offset: 1176)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2497, file: !2498, line: 542, baseType: !2509, size: 8, offset: 1184)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2497, file: !2498, line: 543, baseType: !2509, size: 8, offset: 1192)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2497, file: !2498, line: 544, baseType: !2509, size: 8, offset: 1200)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2497, file: !2498, line: 545, baseType: !2509, size: 8, offset: 1208)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2497, file: !2498, line: 546, baseType: !2509, size: 8, offset: 1216)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2497, file: !2498, line: 547, baseType: !2509, size: 8, offset: 1224)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2497, file: !2498, line: 548, baseType: !2509, size: 8, offset: 1232)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2497, file: !2498, line: 549, baseType: !2509, size: 8, offset: 1240)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2497, file: !2498, line: 550, baseType: !2509, size: 8, offset: 1248)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2497, file: !2498, line: 551, baseType: !2509, size: 8, offset: 1256)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2497, file: !2498, line: 552, baseType: !2509, size: 8, offset: 1264)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2497, file: !2498, line: 553, baseType: !2509, size: 8, offset: 1272)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2497, file: !2498, line: 554, baseType: !2509, size: 8, offset: 1280)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2497, file: !2498, line: 555, baseType: !2509, size: 8, offset: 1288)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2497, file: !2498, line: 556, baseType: !2509, size: 8, offset: 1296)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2497, file: !2498, line: 557, baseType: !2509, size: 8, offset: 1304)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2497, file: !2498, line: 558, baseType: !2509, size: 8, offset: 1312)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2497, file: !2498, line: 559, baseType: !2509, size: 8, offset: 1320)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2497, file: !2498, line: 560, baseType: !2509, size: 8, offset: 1328)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2497, file: !2498, line: 561, baseType: !2509, size: 8, offset: 1336)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2497, file: !2498, line: 562, baseType: !2509, size: 8, offset: 1344)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2497, file: !2498, line: 563, baseType: !2509, size: 8, offset: 1352)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2497, file: !2498, line: 564, baseType: !2509, size: 8, offset: 1360)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2497, file: !2498, line: 565, baseType: !2509, size: 8, offset: 1368)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2497, file: !2498, line: 566, baseType: !2509, size: 8, offset: 1376)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2497, file: !2498, line: 567, baseType: !2509, size: 8, offset: 1384)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2497, file: !2498, line: 568, baseType: !2509, size: 8, offset: 1392)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2497, file: !2498, line: 569, baseType: !2509, size: 8, offset: 1400)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2497, file: !2498, line: 570, baseType: !2509, size: 8, offset: 1408)
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2497, file: !2498, line: 571, baseType: !2509, size: 8, offset: 1416)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2497, file: !2498, line: 572, baseType: !2509, size: 8, offset: 1424)
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2497, file: !2498, line: 573, baseType: !2509, size: 8, offset: 1432)
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2497, file: !2498, line: 574, baseType: !2509, size: 8, offset: 1440)
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1764, file: !318, line: 3405, baseType: !2665, size: 384)
!2665 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !318, line: 3352, size: 384, elements: !2666)
!2666 = !{!2667, !2668}
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2665, file: !318, line: 3353, baseType: !1800, size: 192)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2665, file: !318, line: 3356, baseType: !2669, size: 192, offset: 192)
!2669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2498, line: 578, size: 192, elements: !2670)
!2670 = !{!2671, !2672, !2673, !2674, !2675, !2676, !2677, !2678, !2679, !2680, !2681}
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2669, file: !2498, line: 580, baseType: !1575, size: 32)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2669, file: !2498, line: 581, baseType: !1575, size: 32, offset: 32)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2669, file: !2498, line: 582, baseType: !1575, size: 32, offset: 64)
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2669, file: !2498, line: 583, baseType: !1575, size: 32, offset: 96)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2669, file: !2498, line: 584, baseType: !1875, size: 8, offset: 128)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2669, file: !2498, line: 585, baseType: !1875, size: 8, offset: 136)
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2669, file: !2498, line: 586, baseType: !1875, size: 8, offset: 144)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2669, file: !2498, line: 587, baseType: !1875, size: 8, offset: 152)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2669, file: !2498, line: 588, baseType: !1875, size: 8, offset: 160)
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2669, file: !2498, line: 589, baseType: !1875, size: 8, offset: 168)
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2669, file: !2498, line: 590, baseType: !1875, size: 8, offset: 176)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1663, file: !1645, line: 178, baseType: !1599, size: 64)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1663, file: !1645, line: 179, baseType: !2684, size: 64)
!2684 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2685, size: 64)
!2685 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1645, line: 150, baseType: !2686)
!2686 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1645, line: 142, size: 320, elements: !2687)
!2687 = !{!2688, !2689, !2690, !2691, !2692, !2693}
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2686, file: !1645, line: 144, baseType: !1762, size: 64)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2686, file: !1645, line: 145, baseType: !1642, size: 64, offset: 64)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2686, file: !1645, line: 146, baseType: !1642, size: 64, offset: 128)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2686, file: !1645, line: 147, baseType: !2357, size: 32, offset: 192)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2686, file: !1645, line: 148, baseType: !7, size: 32, offset: 224)
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2686, file: !1645, line: 149, baseType: !1875, size: 8, offset: 256)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1663, file: !1645, line: 180, baseType: !2695, size: 64)
!2695 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2696, size: 64)
!2696 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1645, line: 162, baseType: !2697)
!2697 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1645, line: 159, size: 128, elements: !2698)
!2698 = !{!2699, !2700}
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2697, file: !1645, line: 160, baseType: !1762, size: 64)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2697, file: !1645, line: 161, baseType: !1732, size: 64, offset: 64)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1663, file: !1645, line: 181, baseType: !2702, size: 64)
!2702 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2703, size: 64)
!2703 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1645, line: 181, flags: DIFlagFwdDecl)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1658, file: !1645, line: 317, baseType: !2705, size: 64)
!2705 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1732, size: 64, elements: !1680)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1658, file: !1645, line: 318, baseType: !2707, size: 320)
!2707 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1645, line: 188, size: 320, elements: !2708)
!2708 = !{!2709, !2711, !2734}
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2707, file: !1645, line: 190, baseType: !2710, size: 192)
!2710 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1662, size: 192, elements: !1833)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2707, file: !1645, line: 193, baseType: !2712, size: 64, offset: 192)
!2712 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2713, size: 64)
!2713 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1645, line: 206, size: 320, elements: !2714)
!2714 = !{!2715, !2719, !2720, !2721, !2733}
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2713, file: !1645, line: 208, baseType: !2716, size: 64)
!2716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2717, size: 64)
!2717 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1616, line: 62, baseType: !2718)
!2718 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1616, line: 61, flags: DIFlagFwdDecl)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2713, file: !1645, line: 211, baseType: !7, size: 32, offset: 64)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2713, file: !1645, line: 214, baseType: !1732, size: 64, offset: 128)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2713, file: !1645, line: 224, baseType: !2722, size: 64, offset: 192)
!2722 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2723, size: 64)
!2723 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1645, line: 202, baseType: !2724)
!2724 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1645, line: 202, size: 128, elements: !2725)
!2725 = !{!2726}
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2724, file: !1645, line: 202, baseType: !2727, size: 128)
!2727 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1645, line: 200, baseType: !2728)
!2728 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1645, line: 200, size: 128, elements: !2729)
!2729 = !{!2730, !2731, !2732}
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2728, file: !1645, line: 200, baseType: !7, size: 32)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2728, file: !1645, line: 200, baseType: !7, size: 32, offset: 32)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2728, file: !1645, line: 200, baseType: !1679, size: 64, offset: 64)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2713, file: !1645, line: 234, baseType: !2722, size: 64, offset: 256)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2707, file: !1645, line: 197, baseType: !1732, size: 64, offset: 256)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1658, file: !1645, line: 319, baseType: !1822, size: 256)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1658, file: !1645, line: 320, baseType: !1841, size: 192)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1618, file: !526, line: 134, baseType: !1574, size: 64, offset: 192)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1618, file: !526, line: 137, baseType: !1762, size: 64, offset: 256)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1618, file: !526, line: 138, baseType: !1593, size: 32, offset: 320)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1618, file: !526, line: 142, baseType: !7, size: 32, offset: 352)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1618, file: !526, line: 144, baseType: !1575, size: 32, offset: 384)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1618, file: !526, line: 145, baseType: !1575, size: 32, offset: 416)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1618, file: !526, line: 146, baseType: !2744, size: 64, offset: 448)
!2744 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !526, line: 119, baseType: !1732)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1600, file: !526, line: 220, baseType: !1603, size: 64, offset: 64)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1600, file: !526, line: 223, baseType: !1574, size: 64, offset: 128)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1600, file: !526, line: 226, baseType: !2210, size: 64, offset: 192)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1600, file: !526, line: 229, baseType: !2749, size: 128, offset: 256)
!2749 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2750, size: 128, elements: !1716)
!2750 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2751, size: 64)
!2751 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !526, line: 229, flags: DIFlagFwdDecl)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1600, file: !526, line: 232, baseType: !1599, size: 64, offset: 384)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1600, file: !526, line: 233, baseType: !1599, size: 64, offset: 448)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1600, file: !526, line: 238, baseType: !2755, size: 64, offset: 512)
!2755 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !526, line: 235, size: 64, elements: !2756)
!2756 = !{!2757, !2763}
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2755, file: !526, line: 236, baseType: !2758, size: 64)
!2758 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2759, size: 64)
!2759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !526, line: 273, size: 128, elements: !2760)
!2760 = !{!2761, !2762}
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2759, file: !526, line: 275, baseType: !1626, size: 64)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2759, file: !526, line: 278, baseType: !1626, size: 64, offset: 64)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2755, file: !526, line: 237, baseType: !2764, size: 64)
!2764 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2765, size: 64)
!2765 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !526, line: 259, size: 320, elements: !2766)
!2766 = !{!2767, !2768, !2769, !2770, !2771}
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2765, file: !526, line: 261, baseType: !1642, size: 64)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2765, file: !526, line: 262, baseType: !1642, size: 64, offset: 64)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2765, file: !526, line: 266, baseType: !1642, size: 64, offset: 128)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2765, file: !526, line: 267, baseType: !1642, size: 64, offset: 192)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2765, file: !526, line: 270, baseType: !1575, size: 32, offset: 256)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1600, file: !526, line: 241, baseType: !2744, size: 64, offset: 576)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1600, file: !526, line: 244, baseType: !1575, size: 32, offset: 640)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1600, file: !526, line: 247, baseType: !1575, size: 32, offset: 672)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1600, file: !526, line: 250, baseType: !1575, size: 32, offset: 704)
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1600, file: !526, line: 253, baseType: !1575, size: 32, offset: 736)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1600, file: !526, line: 256, baseType: !1575, size: 32, offset: 768)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1580, file: !625, line: 327, baseType: !1762, size: 64, offset: 192)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1577, file: !625, line: 739, baseType: !2780, size: 448)
!2780 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !625, line: 350, size: 448, elements: !2781)
!2781 = !{!2782, !2788}
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2780, file: !625, line: 353, baseType: !2783, size: 384)
!2783 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !625, line: 333, size: 384, elements: !2784)
!2784 = !{!2785, !2786, !2787}
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2783, file: !625, line: 336, baseType: !1580, size: 256)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !2783, file: !625, line: 343, baseType: !2168, size: 64, offset: 256)
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !2783, file: !625, line: 344, baseType: !2175, size: 64, offset: 320)
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2780, file: !625, line: 359, baseType: !2132, size: 64, offset: 384)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1577, file: !625, line: 740, baseType: !2790, size: 512)
!2790 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !625, line: 365, size: 512, elements: !2791)
!2791 = !{!2792, !2793, !2794}
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2790, file: !625, line: 368, baseType: !2783, size: 384)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !2790, file: !625, line: 373, baseType: !1762, size: 64, offset: 384)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !2790, file: !625, line: 374, baseType: !1762, size: 64, offset: 448)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1577, file: !625, line: 741, baseType: !2796, size: 576)
!2796 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !625, line: 380, size: 576, elements: !2797)
!2797 = !{!2798, !2799}
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2796, file: !625, line: 383, baseType: !2790, size: 512)
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2796, file: !625, line: 389, baseType: !2132, size: 64, offset: 512)
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1577, file: !625, line: 742, baseType: !2801, size: 320)
!2801 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !625, line: 395, size: 320, elements: !2802)
!2802 = !{!2803, !2804}
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2801, file: !625, line: 397, baseType: !1580, size: 256)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2801, file: !625, line: 400, baseType: !1626, size: 64, offset: 256)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1577, file: !625, line: 743, baseType: !2806, size: 448)
!2806 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !625, line: 406, size: 448, elements: !2807)
!2807 = !{!2808, !2809, !2810, !2811}
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2806, file: !625, line: 408, baseType: !1580, size: 256)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2806, file: !625, line: 412, baseType: !1762, size: 64, offset: 256)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2806, file: !625, line: 420, baseType: !1762, size: 64, offset: 320)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2806, file: !625, line: 423, baseType: !1626, size: 64, offset: 384)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1577, file: !625, line: 744, baseType: !2813, size: 384)
!2813 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !625, line: 429, size: 384, elements: !2814)
!2814 = !{!2815, !2816, !2817}
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2813, file: !625, line: 431, baseType: !1580, size: 256)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2813, file: !625, line: 434, baseType: !1762, size: 64, offset: 256)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !2813, file: !625, line: 437, baseType: !1626, size: 64, offset: 320)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1577, file: !625, line: 745, baseType: !2819, size: 384)
!2819 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !625, line: 443, size: 384, elements: !2820)
!2820 = !{!2821, !2822, !2823}
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2819, file: !625, line: 445, baseType: !1580, size: 256)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2819, file: !625, line: 449, baseType: !1762, size: 64, offset: 256)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !2819, file: !625, line: 453, baseType: !1626, size: 64, offset: 320)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1577, file: !625, line: 746, baseType: !2825, size: 320)
!2825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !625, line: 459, size: 320, elements: !2826)
!2826 = !{!2827, !2828}
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2825, file: !625, line: 461, baseType: !1580, size: 256)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !2825, file: !625, line: 464, baseType: !1762, size: 64, offset: 256)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1577, file: !625, line: 747, baseType: !2830, size: 768)
!2830 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !625, line: 469, size: 768, elements: !2831)
!2831 = !{!2832, !2833, !2834, !2835, !2836}
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2830, file: !625, line: 471, baseType: !1580, size: 256)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2830, file: !625, line: 474, baseType: !7, size: 32, offset: 256)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !2830, file: !625, line: 475, baseType: !7, size: 32, offset: 288)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2830, file: !625, line: 478, baseType: !1762, size: 64, offset: 320)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !2830, file: !625, line: 481, baseType: !2837, size: 384, offset: 384)
!2837 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2838, size: 384, elements: !1680)
!2838 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !318, line: 1917, size: 384, elements: !2839)
!2839 = !{!2840, !2841, !2842}
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2838, file: !318, line: 1920, baseType: !2180, size: 256)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2838, file: !318, line: 1921, baseType: !1762, size: 64, offset: 256)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2838, file: !318, line: 1922, baseType: !1593, size: 32, offset: 320)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1577, file: !625, line: 748, baseType: !2844, size: 320)
!2844 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !625, line: 487, size: 320, elements: !2845)
!2845 = !{!2846, !2847}
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2844, file: !625, line: 490, baseType: !1580, size: 256)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2844, file: !625, line: 494, baseType: !1575, size: 32, offset: 256)
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1577, file: !625, line: 749, baseType: !2849, size: 384)
!2849 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !625, line: 500, size: 384, elements: !2850)
!2850 = !{!2851, !2852, !2853}
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2849, file: !625, line: 502, baseType: !1580, size: 256)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2849, file: !625, line: 506, baseType: !1626, size: 64, offset: 256)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2849, file: !625, line: 510, baseType: !1626, size: 64, offset: 320)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1577, file: !625, line: 750, baseType: !2855, size: 320)
!2855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !625, line: 529, size: 320, elements: !2856)
!2856 = !{!2857, !2858}
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2855, file: !625, line: 531, baseType: !1580, size: 256)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2855, file: !625, line: 540, baseType: !1626, size: 64, offset: 256)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1577, file: !625, line: 751, baseType: !2860, size: 704)
!2860 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !625, line: 546, size: 704, elements: !2861)
!2861 = !{!2862, !2863, !2864, !2865, !2866, !2867, !2868}
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2860, file: !625, line: 549, baseType: !2790, size: 512)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2860, file: !625, line: 553, baseType: !1668, size: 64, offset: 512)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2860, file: !625, line: 557, baseType: !1875, size: 8, offset: 576)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2860, file: !625, line: 558, baseType: !1875, size: 8, offset: 584)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2860, file: !625, line: 559, baseType: !1875, size: 8, offset: 592)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2860, file: !625, line: 560, baseType: !1875, size: 8, offset: 600)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2860, file: !625, line: 566, baseType: !2132, size: 64, offset: 640)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1577, file: !625, line: 752, baseType: !2870, size: 384)
!2870 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !625, line: 571, size: 384, elements: !2871)
!2871 = !{!2872, !2873}
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2870, file: !625, line: 573, baseType: !2801, size: 320)
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2870, file: !625, line: 577, baseType: !1762, size: 64, offset: 320)
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1577, file: !625, line: 753, baseType: !2875, size: 576)
!2875 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !625, line: 600, size: 576, elements: !2876)
!2876 = !{!2877, !2878, !2879, !2880, !2889}
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2875, file: !625, line: 602, baseType: !2801, size: 320)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2875, file: !625, line: 605, baseType: !1762, size: 64, offset: 320)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2875, file: !625, line: 609, baseType: !2082, size: 64, offset: 384)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2875, file: !625, line: 612, baseType: !2881, size: 64, offset: 448)
!2881 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2882, size: 64)
!2882 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !625, line: 581, size: 320, elements: !2883)
!2883 = !{!2884, !2885, !2886, !2887, !2888}
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2882, file: !625, line: 583, baseType: !317, size: 32)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2882, file: !625, line: 586, baseType: !1762, size: 64, offset: 64)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2882, file: !625, line: 589, baseType: !1762, size: 64, offset: 128)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2882, file: !625, line: 592, baseType: !1762, size: 64, offset: 192)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2882, file: !625, line: 595, baseType: !1762, size: 64, offset: 256)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2875, file: !625, line: 616, baseType: !1626, size: 64, offset: 512)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1577, file: !625, line: 754, baseType: !2891, size: 512)
!2891 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !625, line: 622, size: 512, elements: !2892)
!2892 = !{!2893, !2894, !2895, !2896}
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2891, file: !625, line: 624, baseType: !2801, size: 320)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2891, file: !625, line: 628, baseType: !1762, size: 64, offset: 320)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2891, file: !625, line: 632, baseType: !1762, size: 64, offset: 384)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2891, file: !625, line: 636, baseType: !1762, size: 64, offset: 448)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1577, file: !625, line: 755, baseType: !2898, size: 704)
!2898 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !625, line: 642, size: 704, elements: !2899)
!2899 = !{!2900, !2901, !2902, !2903}
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2898, file: !625, line: 644, baseType: !2891, size: 512)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2898, file: !625, line: 648, baseType: !1762, size: 64, offset: 512)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2898, file: !625, line: 652, baseType: !1762, size: 64, offset: 576)
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2898, file: !625, line: 653, baseType: !1762, size: 64, offset: 640)
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1577, file: !625, line: 756, baseType: !2905, size: 448)
!2905 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !625, line: 663, size: 448, elements: !2906)
!2906 = !{!2907, !2908, !2909}
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2905, file: !625, line: 665, baseType: !2801, size: 320)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2905, file: !625, line: 668, baseType: !1762, size: 64, offset: 320)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2905, file: !625, line: 673, baseType: !1762, size: 64, offset: 384)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1577, file: !625, line: 757, baseType: !2911, size: 384)
!2911 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !625, line: 694, size: 384, elements: !2912)
!2912 = !{!2913, !2914}
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2911, file: !625, line: 696, baseType: !2801, size: 320)
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2911, file: !625, line: 699, baseType: !1762, size: 64, offset: 320)
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1577, file: !625, line: 758, baseType: !2916, size: 384)
!2916 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !625, line: 681, size: 384, elements: !2917)
!2917 = !{!2918, !2919, !2920}
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2916, file: !625, line: 683, baseType: !1580, size: 256)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2916, file: !625, line: 686, baseType: !1762, size: 64, offset: 256)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2916, file: !625, line: 689, baseType: !1762, size: 64, offset: 320)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1577, file: !625, line: 759, baseType: !2922, size: 384)
!2922 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !625, line: 707, size: 384, elements: !2923)
!2923 = !{!2924, !2925, !2926}
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2922, file: !625, line: 709, baseType: !1580, size: 256)
!2925 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2922, file: !625, line: 712, baseType: !1762, size: 64, offset: 256)
!2926 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2922, file: !625, line: 712, baseType: !1762, size: 64, offset: 320)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1577, file: !625, line: 760, baseType: !2928, size: 320)
!2928 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !625, line: 718, size: 320, elements: !2929)
!2929 = !{!2930, !2931}
!2930 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2928, file: !625, line: 720, baseType: !1580, size: 256)
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2928, file: !625, line: 723, baseType: !1762, size: 64, offset: 256)
!2932 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2933, size: 64)
!2933 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1577)
!2934 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2935, size: 64)
!2935 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2936)
!2936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "matrix_info", file: !3, line: 256, size: 896, elements: !2937)
!2937 = !{!2938, !2939, !2940, !2941, !2942, !2944, !2945, !2946, !2947, !2953, !2954, !2955, !2957, !2958, !2960, !2984}
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2936, file: !3, line: 259, baseType: !1762, size: 64)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "num_dims", scope: !2936, file: !3, line: 262, baseType: !1575, size: 32, offset: 64)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "min_indirect_level_escape", scope: !2936, file: !3, line: 267, baseType: !1575, size: 32, offset: 96)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "min_indirect_level_escape_stmt", scope: !2936, file: !3, line: 269, baseType: !1636, size: 64, offset: 128)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_for_level", scope: !2936, file: !3, line: 275, baseType: !2943, size: 64, offset: 192)
!2943 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1636, size: 64)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "max_malloced_level", scope: !2936, file: !3, line: 277, baseType: !1575, size: 32, offset: 256)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "is_transposed_p", scope: !2936, file: !3, line: 280, baseType: !1875, size: 8, offset: 288)
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "allocation_function_decl", scope: !2936, file: !3, line: 284, baseType: !1762, size: 64, offset: 320)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "free_stmts", scope: !2936, file: !3, line: 287, baseType: !2948, size: 64, offset: 384)
!2948 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2949, size: 64)
!2949 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "free_info", file: !3, line: 249, size: 128, elements: !2950)
!2950 = !{!2951, !2952}
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2949, file: !3, line: 251, baseType: !1636, size: 64)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "func", scope: !2949, file: !3, line: 252, baseType: !1762, size: 64, offset: 64)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "dimension_size", scope: !2936, file: !3, line: 292, baseType: !2173, size: 64, offset: 448)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "dimension_size_orig", scope: !2936, file: !3, line: 296, baseType: !2173, size: 64, offset: 512)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "dimension_type_size", scope: !2936, file: !3, line: 300, baseType: !2956, size: 64, offset: 576)
!2956 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1732, size: 64)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "dimension_type_size_len", scope: !2936, file: !3, line: 302, baseType: !1575, size: 32, offset: 640)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "dim_hot_level", scope: !2936, file: !3, line: 305, baseType: !2959, size: 64, offset: 704)
!2959 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2744, size: 64)
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "access_l", scope: !2936, file: !3, line: 309, baseType: !2961, size: 64, offset: 768)
!2961 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2962, size: 64)
!2962 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_access_site_info_p_heap", file: !3, line: 245, baseType: !2963)
!2963 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_access_site_info_p_heap", file: !3, line: 245, size: 128, elements: !2964)
!2964 = !{!2965}
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2963, file: !3, line: 245, baseType: !2966, size: 128)
!2966 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_access_site_info_p_base", file: !3, line: 244, baseType: !2967)
!2967 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_access_site_info_p_base", file: !3, line: 244, size: 128, elements: !2968)
!2968 = !{!2969, !2970, !2971}
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2967, file: !3, line: 244, baseType: !7, size: 32)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2967, file: !3, line: 244, baseType: !7, size: 32, offset: 32)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2967, file: !3, line: 244, baseType: !2972, size: 64, offset: 64)
!2972 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2973, size: 64, elements: !1680)
!2973 = !DIDerivedType(tag: DW_TAG_typedef, name: "access_site_info_p", file: !3, line: 243, baseType: !2974)
!2974 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2975, size: 64)
!2975 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "access_site_info", file: !3, line: 219, size: 384, elements: !2976)
!2976 = !{!2977, !2978, !2979, !2980, !2981, !2982, !2983}
!2977 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2975, file: !3, line: 222, baseType: !1636, size: 64)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2975, file: !3, line: 225, baseType: !1762, size: 64, offset: 64)
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2975, file: !3, line: 228, baseType: !1762, size: 64, offset: 128)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !2975, file: !3, line: 231, baseType: !1575, size: 32, offset: 192)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "is_alloc", scope: !2975, file: !3, line: 234, baseType: !1875, size: 8, offset: 224)
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !2975, file: !3, line: 237, baseType: !1762, size: 64, offset: 256)
!2983 = !DIDerivedType(tag: DW_TAG_member, name: "iterated_by_inner_most_loop_p", scope: !2975, file: !3, line: 240, baseType: !1875, size: 8, offset: 320)
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "dim_map", scope: !2936, file: !3, line: 313, baseType: !2985, size: 64, offset: 832)
!2985 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1575, size: 64)
!2986 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2936, size: 64)
!2987 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2988, size: 64)
!2988 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2989)
!2989 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "matrix_access_phi_node", file: !3, line: 323, size: 128, elements: !2990)
!2990 = !{!2991, !2992}
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "phi", scope: !2989, file: !3, line: 325, baseType: !1636, size: 64)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "indirection_level", scope: !2989, file: !3, line: 326, baseType: !1575, size: 32, offset: 64)
!2993 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !1560, line: 30, baseType: !2994)
!2994 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2995, size: 64)
!2995 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !318, line: 1893, baseType: !2180)
!2996 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2989, size: 64)
!2997 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2996, size: 64)
!2998 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2999, size: 64)
!2999 = !DIDerivedType(tag: DW_TAG_typedef, name: "check_var_data", file: !3, line: 1405, baseType: !3000)
!3000 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 1401, size: 128, elements: !3001)
!3001 = !{!3002, !3003}
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "fn", scope: !3000, file: !3, line: 1403, baseType: !1762, size: 64)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3000, file: !3, line: 1404, baseType: !1636, size: 64, offset: 64)
!3004 = !{!0, !3005, !3007, !3009}
!3005 = !DIGlobalVariableExpression(var: !3006, expr: !DIExpression())
!3006 = distinct !DIGlobalVariable(name: "check_transpose_p", scope: !2, file: !3, line: 353, type: !1875, isLocal: true, isDefinition: true)
!3007 = !DIGlobalVariableExpression(var: !3008, expr: !DIExpression())
!3008 = distinct !DIGlobalVariable(name: "matrices_to_reorg", scope: !2, file: !3, line: 388, type: !2057, isLocal: true, isDefinition: true)
!3009 = !DIGlobalVariableExpression(var: !3010, expr: !DIExpression())
!3010 = distinct !DIGlobalVariable(name: "htab_mat_acc_phi_nodes", scope: !2, file: !3, line: 384, type: !2057, isLocal: true, isDefinition: true)
!3011 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_ipa_opt_pass", file: !6, line: 202, size: 640, elements: !3012)
!3012 = !{!3013}
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !3011, file: !6, line: 204, baseType: !3014, size: 640)
!3014 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !6, line: 114, size: 640, elements: !3015)
!3015 = !{!3016, !3017, !3018, !3022, !3026, !3028, !3029, !3030, !3032, !3033, !3034, !3035, !3036}
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3014, file: !6, line: 117, baseType: !5, size: 32)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3014, file: !6, line: 121, baseType: !1668, size: 64, offset: 64)
!3018 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !3014, file: !6, line: 125, baseType: !3019, size: 64, offset: 128)
!3019 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3020, size: 64)
!3020 = !DISubroutineType(types: !3021)
!3021 = !{!1875}
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !3014, file: !6, line: 130, baseType: !3023, size: 64, offset: 192)
!3023 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3024, size: 64)
!3024 = !DISubroutineType(types: !3025)
!3025 = !{!7}
!3026 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !3014, file: !6, line: 133, baseType: !3027, size: 64, offset: 256)
!3027 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3014, size: 64)
!3028 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3014, file: !6, line: 136, baseType: !3027, size: 64, offset: 320)
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !3014, file: !6, line: 139, baseType: !1575, size: 32, offset: 384)
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !3014, file: !6, line: 143, baseType: !3031, size: 32, offset: 416)
!3031 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !14, line: 80, baseType: !13)
!3032 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !3014, file: !6, line: 146, baseType: !7, size: 32, offset: 448)
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !3014, file: !6, line: 147, baseType: !7, size: 32, offset: 480)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !3014, file: !6, line: 148, baseType: !7, size: 32, offset: 512)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !3014, file: !6, line: 151, baseType: !7, size: 32, offset: 544)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !3014, file: !6, line: 152, baseType: !7, size: 32, offset: 576)
!3037 = !{i32 7, !"Dwarf Version", i32 4}
!3038 = !{i32 2, !"Debug Info Version", i32 3}
!3039 = !{i32 1, !"wchar_size", i32 4}
!3040 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3041 = distinct !DISubprogram(name: "gate_matrix_reorg", scope: !3, file: !3, line: 2400, type: !3020, scopeLine: 2401, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!3042 = !{}
!3043 = !DILocation(line: 2402, column: 10, scope: !3041)
!3044 = !DILocation(line: 2402, column: 32, scope: !3041)
!3045 = !DILocation(line: 2402, column: 35, scope: !3041)
!3046 = !DILocation(line: 0, scope: !3041)
!3047 = !DILocation(line: 2402, column: 3, scope: !3041)
!3048 = distinct !DISubprogram(name: "matrix_reorg", scope: !3, file: !3, line: 2287, type: !3024, scopeLine: 2288, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!3049 = !DILocalVariable(name: "node", scope: !3048, file: !3, line: 2289, type: !3050)
!3050 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3051, size: 64)
!3051 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node", file: !574, line: 181, size: 2496, elements: !3052)
!3052 = !{!3053, !3054, !3077, !3078, !3079, !3080, !3081, !3082, !3083, !3084, !3085, !3086, !3087, !3088, !3089, !3090, !3091, !3092, !3170, !3192, !3202, !3206, !3232, !3241, !3242, !3243, !3244, !3245, !3246, !3247, !3248, !3249, !3250, !3251, !3252, !3253, !3254}
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3051, file: !574, line: 182, baseType: !1762, size: 64)
!3054 = !DIDerivedType(tag: DW_TAG_member, name: "callees", scope: !3051, file: !574, line: 183, baseType: !3055, size: 64, offset: 64)
!3055 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3056, size: 64)
!3056 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge", file: !574, line: 314, size: 768, elements: !3057)
!3057 = !{!3058, !3059, !3060, !3061, !3062, !3063, !3064, !3065, !3066, !3067, !3069, !3070, !3071, !3072, !3074, !3075, !3076}
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3056, file: !574, line: 316, baseType: !2744, size: 64)
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !3056, file: !574, line: 317, baseType: !3050, size: 64, offset: 64)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "callee", scope: !3056, file: !574, line: 318, baseType: !3050, size: 64, offset: 128)
!3061 = !DIDerivedType(tag: DW_TAG_member, name: "prev_caller", scope: !3056, file: !574, line: 319, baseType: !3055, size: 64, offset: 192)
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "next_caller", scope: !3056, file: !574, line: 320, baseType: !3055, size: 64, offset: 256)
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "prev_callee", scope: !3056, file: !574, line: 321, baseType: !3055, size: 64, offset: 320)
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "next_callee", scope: !3056, file: !574, line: 322, baseType: !3055, size: 64, offset: 384)
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt", scope: !3056, file: !574, line: 323, baseType: !1636, size: 64, offset: 448)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3056, file: !574, line: 324, baseType: !1574, size: 64, offset: 512)
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "inline_failed", scope: !3056, file: !574, line: 327, baseType: !3068, size: 32, offset: 576)
!3068 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_inline_failed_t", file: !574, line: 312, baseType: !573)
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !3056, file: !574, line: 330, baseType: !7, size: 32, offset: 608)
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !3056, file: !574, line: 334, baseType: !1575, size: 32, offset: 640)
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3056, file: !574, line: 336, baseType: !1575, size: 32, offset: 672)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !3056, file: !574, line: 338, baseType: !3073, size: 16, offset: 704)
!3073 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "indirect_call", scope: !3056, file: !574, line: 340, baseType: !7, size: 1, offset: 720, flags: DIFlagBitField, extraData: i64 720)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt_cannot_inline_p", scope: !3056, file: !574, line: 342, baseType: !7, size: 1, offset: 721, flags: DIFlagBitField, extraData: i64 720)
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "can_throw_external", scope: !3056, file: !574, line: 344, baseType: !7, size: 1, offset: 722, flags: DIFlagBitField, extraData: i64 720)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "callers", scope: !3051, file: !574, line: 184, baseType: !3055, size: 64, offset: 128)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3051, file: !574, line: 185, baseType: !3050, size: 64, offset: 192)
!3079 = !DIDerivedType(tag: DW_TAG_member, name: "previous", scope: !3051, file: !574, line: 186, baseType: !3050, size: 64, offset: 256)
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !3051, file: !574, line: 188, baseType: !3050, size: 64, offset: 320)
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "nested", scope: !3051, file: !574, line: 190, baseType: !3050, size: 64, offset: 384)
!3082 = !DIDerivedType(tag: DW_TAG_member, name: "next_nested", scope: !3051, file: !574, line: 192, baseType: !3050, size: 64, offset: 448)
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !3051, file: !574, line: 194, baseType: !3050, size: 64, offset: 512)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "next_sibling_clone", scope: !3051, file: !574, line: 196, baseType: !3050, size: 64, offset: 576)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sibling_clone", scope: !3051, file: !574, line: 197, baseType: !3050, size: 64, offset: 640)
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "clones", scope: !3051, file: !574, line: 198, baseType: !3050, size: 64, offset: 704)
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "clone_of", scope: !3051, file: !574, line: 199, baseType: !3050, size: 64, offset: 768)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "same_body", scope: !3051, file: !574, line: 202, baseType: !3050, size: 64, offset: 832)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "same_comdat_group", scope: !3051, file: !574, line: 204, baseType: !3050, size: 64, offset: 896)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "call_site_hash", scope: !3051, file: !574, line: 207, baseType: !2057, size: 64, offset: 960)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3051, file: !574, line: 209, baseType: !1574, size: 64, offset: 1024)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "ipa_transforms_to_apply", scope: !3051, file: !574, line: 214, baseType: !3093, size: 64, offset: 1088)
!3093 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3094, size: 64)
!3094 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_heap", file: !2015, line: 177, baseType: !3095)
!3095 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_heap", file: !2015, line: 177, size: 128, elements: !3096)
!3096 = !{!3097}
!3097 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3095, file: !2015, line: 177, baseType: !3098, size: 128)
!3098 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_base", file: !2015, line: 176, baseType: !3099)
!3099 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_base", file: !2015, line: 176, size: 128, elements: !3100)
!3100 = !{!3101, !3102, !3103}
!3101 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3099, file: !2015, line: 176, baseType: !7, size: 32)
!3102 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3099, file: !2015, line: 176, baseType: !7, size: 32, offset: 32)
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3099, file: !2015, line: 176, baseType: !3104, size: 64, offset: 64)
!3104 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3105, size: 64, elements: !1680)
!3105 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_opt_pass", file: !2015, line: 174, baseType: !3106)
!3106 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3107, size: 64)
!3107 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_opt_pass_d", file: !6, line: 173, size: 1152, elements: !3108)
!3108 = !{!3109, !3110, !3114, !3137, !3138, !3142, !3146, !3147, !3151}
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !3107, file: !6, line: 175, baseType: !3014, size: 640)
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "generate_summary", scope: !3107, file: !6, line: 179, baseType: !3111, size: 64, offset: 640)
!3111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3112, size: 64)
!3112 = !DISubroutineType(types: !3113)
!3113 = !{null}
!3114 = !DIDerivedType(tag: DW_TAG_member, name: "write_summary", scope: !3107, file: !6, line: 182, baseType: !3115, size: 64, offset: 704)
!3115 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3116, size: 64)
!3116 = !DISubroutineType(types: !3117)
!3117 = !{null, !3118}
!3118 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3119, size: 64)
!3119 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_set_def", file: !574, line: 276, size: 192, elements: !3120)
!3120 = !{!3121, !3122, !3136}
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "hashtab", scope: !3119, file: !574, line: 278, baseType: !2057, size: 64)
!3122 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !3119, file: !574, line: 279, baseType: !3123, size: 64, offset: 64)
!3123 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3124, size: 64)
!3124 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_gc", file: !574, line: 272, baseType: !3125)
!3125 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_gc", file: !574, line: 272, size: 128, elements: !3126)
!3126 = !{!3127}
!3127 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3125, file: !574, line: 272, baseType: !3128, size: 128)
!3128 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_base", file: !574, line: 270, baseType: !3129)
!3129 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_base", file: !574, line: 270, size: 128, elements: !3130)
!3130 = !{!3131, !3132, !3133}
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3129, file: !574, line: 270, baseType: !7, size: 32)
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3129, file: !574, line: 270, baseType: !7, size: 32, offset: 32)
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3129, file: !574, line: 270, baseType: !3134, size: 64, offset: 64)
!3134 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3135, size: 64, elements: !1680)
!3135 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_ptr", file: !574, line: 268, baseType: !3050)
!3136 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3119, file: !574, line: 280, baseType: !1574, size: 64, offset: 128)
!3137 = !DIDerivedType(tag: DW_TAG_member, name: "read_summary", scope: !3107, file: !6, line: 187, baseType: !3111, size: 64, offset: 768)
!3138 = !DIDerivedType(tag: DW_TAG_member, name: "function_read_summary", scope: !3107, file: !6, line: 188, baseType: !3139, size: 64, offset: 832)
!3139 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3140, size: 64)
!3140 = !DISubroutineType(types: !3141)
!3141 = !{null, !3050}
!3142 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_fixup", scope: !3107, file: !6, line: 191, baseType: !3143, size: 64, offset: 896)
!3143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3144, size: 64)
!3144 = !DISubroutineType(types: !3145)
!3145 = !{null, !3050, !2943}
!3146 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform_todo_flags_start", scope: !3107, file: !6, line: 195, baseType: !7, size: 32, offset: 960)
!3147 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform", scope: !3107, file: !6, line: 196, baseType: !3148, size: 64, offset: 1024)
!3148 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3149, size: 64)
!3149 = !DISubroutineType(types: !3150)
!3150 = !{!7, !3050}
!3151 = !DIDerivedType(tag: DW_TAG_member, name: "variable_transform", scope: !3107, file: !6, line: 197, baseType: !3152, size: 64, offset: 1088)
!3152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3153, size: 64)
!3153 = !DISubroutineType(types: !3154)
!3154 = !{null, !3155}
!3155 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3156, size: 64)
!3156 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "varpool_node", file: !574, line: 358, size: 320, elements: !3157)
!3157 = !{!3158, !3159, !3160, !3161, !3162, !3163, !3164, !3165, !3166, !3167, !3168, !3169}
!3158 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3156, file: !574, line: 359, baseType: !1762, size: 64)
!3159 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3156, file: !574, line: 361, baseType: !3155, size: 64, offset: 64)
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !3156, file: !574, line: 363, baseType: !3155, size: 64, offset: 128)
!3161 = !DIDerivedType(tag: DW_TAG_member, name: "extra_name", scope: !3156, file: !574, line: 366, baseType: !3155, size: 64, offset: 192)
!3162 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !3156, file: !574, line: 368, baseType: !1575, size: 32, offset: 256)
!3163 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !3156, file: !574, line: 372, baseType: !7, size: 1, offset: 288, flags: DIFlagBitField, extraData: i64 288)
!3164 = !DIDerivedType(tag: DW_TAG_member, name: "force_output", scope: !3156, file: !574, line: 375, baseType: !7, size: 1, offset: 289, flags: DIFlagBitField, extraData: i64 288)
!3165 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !3156, file: !574, line: 378, baseType: !7, size: 1, offset: 290, flags: DIFlagBitField, extraData: i64 288)
!3166 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !3156, file: !574, line: 380, baseType: !7, size: 1, offset: 291, flags: DIFlagBitField, extraData: i64 288)
!3167 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !3156, file: !574, line: 382, baseType: !7, size: 1, offset: 292, flags: DIFlagBitField, extraData: i64 288)
!3168 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !3156, file: !574, line: 384, baseType: !7, size: 1, offset: 293, flags: DIFlagBitField, extraData: i64 288)
!3169 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3156, file: !574, line: 387, baseType: !7, size: 1, offset: 294, flags: DIFlagBitField, extraData: i64 288)
!3170 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !3051, file: !574, line: 216, baseType: !3171, size: 320, offset: 1152)
!3171 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_local_info", file: !574, line: 88, size: 320, elements: !3172)
!3172 = !{!3173, !3176, !3184, !3185, !3186, !3187, !3188, !3189, !3190, !3191}
!3173 = !DIDerivedType(tag: DW_TAG_member, name: "lto_file_data", scope: !3171, file: !574, line: 90, baseType: !3174, size: 64)
!3174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3175, size: 64)
!3175 = !DICompositeType(tag: DW_TAG_structure_type, name: "lto_file_decl_data", file: !574, line: 51, flags: DIFlagFwdDecl)
!3176 = !DIDerivedType(tag: DW_TAG_member, name: "inline_summary", scope: !3171, file: !574, line: 92, baseType: !3177, size: 192, offset: 64)
!3177 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inline_summary", file: !574, line: 57, size: 192, elements: !3178)
!3178 = !{!3179, !3180, !3181, !3182, !3183}
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_self_stack_size", scope: !3177, file: !574, line: 60, baseType: !1732, size: 64)
!3180 = !DIDerivedType(tag: DW_TAG_member, name: "self_size", scope: !3177, file: !574, line: 63, baseType: !1575, size: 32, offset: 64)
!3181 = !DIDerivedType(tag: DW_TAG_member, name: "size_inlining_benefit", scope: !3177, file: !574, line: 65, baseType: !1575, size: 32, offset: 96)
!3182 = !DIDerivedType(tag: DW_TAG_member, name: "self_time", scope: !3177, file: !574, line: 67, baseType: !1575, size: 32, offset: 128)
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "time_inlining_benefit", scope: !3177, file: !574, line: 69, baseType: !1575, size: 32, offset: 160)
!3184 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !3171, file: !574, line: 96, baseType: !7, size: 1, offset: 256, flags: DIFlagBitField, extraData: i64 256)
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !3171, file: !574, line: 99, baseType: !7, size: 1, offset: 257, flags: DIFlagBitField, extraData: i64 256)
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !3171, file: !574, line: 102, baseType: !7, size: 1, offset: 258, flags: DIFlagBitField, extraData: i64 256)
!3187 = !DIDerivedType(tag: DW_TAG_member, name: "inlinable", scope: !3171, file: !574, line: 105, baseType: !7, size: 1, offset: 259, flags: DIFlagBitField, extraData: i64 256)
!3188 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !3171, file: !574, line: 108, baseType: !7, size: 1, offset: 260, flags: DIFlagBitField, extraData: i64 256)
!3189 = !DIDerivedType(tag: DW_TAG_member, name: "redefined_extern_inline", scope: !3171, file: !574, line: 112, baseType: !7, size: 1, offset: 261, flags: DIFlagBitField, extraData: i64 256)
!3190 = !DIDerivedType(tag: DW_TAG_member, name: "for_functions_valid", scope: !3171, file: !574, line: 116, baseType: !7, size: 1, offset: 262, flags: DIFlagBitField, extraData: i64 256)
!3191 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_method", scope: !3171, file: !574, line: 120, baseType: !7, size: 1, offset: 263, flags: DIFlagBitField, extraData: i64 256)
!3192 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !3051, file: !574, line: 217, baseType: !3193, size: 320, offset: 1472)
!3193 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_global_info", file: !574, line: 126, size: 320, elements: !3194)
!3194 = !{!3195, !3196, !3197, !3198, !3199, !3200, !3201}
!3195 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_stack_size", scope: !3193, file: !574, line: 128, baseType: !1732, size: 64)
!3196 = !DIDerivedType(tag: DW_TAG_member, name: "stack_frame_offset", scope: !3193, file: !574, line: 130, baseType: !1732, size: 64, offset: 64)
!3197 = !DIDerivedType(tag: DW_TAG_member, name: "inlined_to", scope: !3193, file: !574, line: 134, baseType: !3050, size: 64, offset: 128)
!3198 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !3193, file: !574, line: 137, baseType: !1575, size: 32, offset: 192)
!3199 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3193, file: !574, line: 138, baseType: !1575, size: 32, offset: 224)
!3200 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_growth", scope: !3193, file: !574, line: 141, baseType: !1575, size: 32, offset: 256)
!3201 = !DIDerivedType(tag: DW_TAG_member, name: "inlined", scope: !3193, file: !574, line: 144, baseType: !1875, size: 8, offset: 288)
!3202 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3051, file: !574, line: 218, baseType: !3203, size: 32, offset: 1792)
!3203 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_rtl_info", file: !574, line: 150, size: 32, elements: !3204)
!3204 = !{!3205}
!3205 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_incoming_stack_boundary", scope: !3203, file: !574, line: 151, baseType: !7, size: 32)
!3206 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !3051, file: !574, line: 219, baseType: !3207, size: 192, offset: 1856)
!3207 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_clone_info", file: !574, line: 171, size: 192, elements: !3208)
!3208 = !{!3209, !3230, !3231}
!3209 = !DIDerivedType(tag: DW_TAG_member, name: "tree_map", scope: !3207, file: !574, line: 173, baseType: !3210, size: 64)
!3210 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3211, size: 64)
!3211 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_gc", file: !574, line: 169, baseType: !3212)
!3212 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_gc", file: !574, line: 169, size: 128, elements: !3213)
!3213 = !{!3214}
!3214 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3212, file: !574, line: 169, baseType: !3215, size: 128)
!3215 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_base", file: !574, line: 168, baseType: !3216)
!3216 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_base", file: !574, line: 168, size: 128, elements: !3217)
!3217 = !{!3218, !3219, !3220}
!3218 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3216, file: !574, line: 168, baseType: !7, size: 32)
!3219 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3216, file: !574, line: 168, baseType: !7, size: 32, offset: 32)
!3220 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3216, file: !574, line: 168, baseType: !3221, size: 64, offset: 64)
!3221 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3222, size: 64, elements: !1680)
!3222 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_replace_map_p", file: !574, line: 167, baseType: !3223)
!3223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3224, size: 64)
!3224 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_replace_map", file: !574, line: 156, size: 192, elements: !3225)
!3225 = !{!3226, !3227, !3228, !3229}
!3226 = !DIDerivedType(tag: DW_TAG_member, name: "old_tree", scope: !3224, file: !574, line: 159, baseType: !1762, size: 64)
!3227 = !DIDerivedType(tag: DW_TAG_member, name: "new_tree", scope: !3224, file: !574, line: 161, baseType: !1762, size: 64, offset: 64)
!3228 = !DIDerivedType(tag: DW_TAG_member, name: "replace_p", scope: !3224, file: !574, line: 163, baseType: !1875, size: 8, offset: 128)
!3229 = !DIDerivedType(tag: DW_TAG_member, name: "ref_p", scope: !3224, file: !574, line: 165, baseType: !1875, size: 8, offset: 136)
!3230 = !DIDerivedType(tag: DW_TAG_member, name: "args_to_skip", scope: !3207, file: !574, line: 174, baseType: !2145, size: 64, offset: 64)
!3231 = !DIDerivedType(tag: DW_TAG_member, name: "combined_args_to_skip", scope: !3207, file: !574, line: 175, baseType: !2145, size: 64, offset: 128)
!3232 = !DIDerivedType(tag: DW_TAG_member, name: "thunk", scope: !3051, file: !574, line: 220, baseType: !3233, size: 256, offset: 2048)
!3233 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_thunk_info", file: !574, line: 74, size: 256, elements: !3234)
!3234 = !{!3235, !3236, !3237, !3238, !3239, !3240}
!3235 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_offset", scope: !3233, file: !574, line: 76, baseType: !1732, size: 64)
!3236 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_value", scope: !3233, file: !574, line: 77, baseType: !1732, size: 64, offset: 64)
!3237 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3233, file: !574, line: 78, baseType: !1762, size: 64, offset: 128)
!3238 = !DIDerivedType(tag: DW_TAG_member, name: "this_adjusting", scope: !3233, file: !574, line: 79, baseType: !1875, size: 8, offset: 192)
!3239 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_offset_p", scope: !3233, file: !574, line: 80, baseType: !1875, size: 8, offset: 200)
!3240 = !DIDerivedType(tag: DW_TAG_member, name: "thunk_p", scope: !3233, file: !574, line: 82, baseType: !1875, size: 8, offset: 208)
!3241 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3051, file: !574, line: 223, baseType: !2744, size: 64, offset: 2304)
!3242 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3051, file: !574, line: 225, baseType: !1575, size: 32, offset: 2368)
!3243 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !3051, file: !574, line: 227, baseType: !1575, size: 32, offset: 2400)
!3244 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !3051, file: !574, line: 231, baseType: !1575, size: 32, offset: 2432)
!3245 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !3051, file: !574, line: 238, baseType: !7, size: 1, offset: 2464, flags: DIFlagBitField, extraData: i64 2464)
!3246 = !DIDerivedType(tag: DW_TAG_member, name: "address_taken", scope: !3051, file: !574, line: 241, baseType: !7, size: 1, offset: 2465, flags: DIFlagBitField, extraData: i64 2464)
!3247 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_and_needed", scope: !3051, file: !574, line: 244, baseType: !7, size: 1, offset: 2466, flags: DIFlagBitField, extraData: i64 2464)
!3248 = !DIDerivedType(tag: DW_TAG_member, name: "reachable", scope: !3051, file: !574, line: 251, baseType: !7, size: 1, offset: 2467, flags: DIFlagBitField, extraData: i64 2464)
!3249 = !DIDerivedType(tag: DW_TAG_member, name: "lowered", scope: !3051, file: !574, line: 253, baseType: !7, size: 1, offset: 2468, flags: DIFlagBitField, extraData: i64 2464)
!3250 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !3051, file: !574, line: 256, baseType: !7, size: 1, offset: 2469, flags: DIFlagBitField, extraData: i64 2464)
!3251 = !DIDerivedType(tag: DW_TAG_member, name: "process", scope: !3051, file: !574, line: 258, baseType: !7, size: 1, offset: 2470, flags: DIFlagBitField, extraData: i64 2464)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3051, file: !574, line: 260, baseType: !7, size: 1, offset: 2471, flags: DIFlagBitField, extraData: i64 2464)
!3253 = !DIDerivedType(tag: DW_TAG_member, name: "finalized_by_frontend", scope: !3051, file: !574, line: 262, baseType: !7, size: 1, offset: 2472, flags: DIFlagBitField, extraData: i64 2464)
!3254 = !DIDerivedType(tag: DW_TAG_member, name: "same_body_alias", scope: !3051, file: !574, line: 265, baseType: !7, size: 1, offset: 2473, flags: DIFlagBitField, extraData: i64 2464)
!3255 = !DILocation(line: 2289, column: 23, scope: !3048)
!3256 = !DILocation(line: 2291, column: 7, scope: !3257)
!3257 = distinct !DILexicalBlock(scope: !3048, file: !3, line: 2291, column: 7)
!3258 = !DILocation(line: 2291, column: 7, scope: !3048)
!3259 = !DILocation(line: 2292, column: 23, scope: !3257)
!3260 = !DILocation(line: 2292, column: 5, scope: !3257)
!3261 = !DILocation(line: 2294, column: 23, scope: !3257)
!3262 = !DILocation(line: 2296, column: 15, scope: !3263)
!3263 = distinct !DILexicalBlock(scope: !3048, file: !3, line: 2296, column: 3)
!3264 = !DILocation(line: 2296, column: 13, scope: !3263)
!3265 = !DILocation(line: 2296, column: 8, scope: !3263)
!3266 = !DILocation(line: 2296, column: 29, scope: !3267)
!3267 = distinct !DILexicalBlock(scope: !3263, file: !3, line: 2296, column: 3)
!3268 = !DILocation(line: 2296, column: 3, scope: !3263)
!3269 = !DILocation(line: 2297, column: 32, scope: !3270)
!3270 = distinct !DILexicalBlock(scope: !3267, file: !3, line: 2297, column: 9)
!3271 = !DILocation(line: 2297, column: 10, scope: !3270)
!3272 = !DILocation(line: 2297, column: 9, scope: !3267)
!3273 = !DILocation(line: 2298, column: 7, scope: !3270)
!3274 = !DILocation(line: 2297, column: 36, scope: !3270)
!3275 = !DILocation(line: 2296, column: 42, scope: !3267)
!3276 = !DILocation(line: 2296, column: 48, scope: !3267)
!3277 = !DILocation(line: 2296, column: 40, scope: !3267)
!3278 = !DILocation(line: 2296, column: 3, scope: !3267)
!3279 = distinct !{!3279, !3268, !3280}
!3280 = !DILocation(line: 2298, column: 14, scope: !3263)
!3281 = !DILocation(line: 2299, column: 23, scope: !3048)
!3282 = !DILocation(line: 2299, column: 21, scope: !3048)
!3283 = !DILocation(line: 2301, column: 3, scope: !3048)
!3284 = !DILocation(line: 2303, column: 15, scope: !3285)
!3285 = distinct !DILexicalBlock(scope: !3048, file: !3, line: 2303, column: 3)
!3286 = !DILocation(line: 2303, column: 13, scope: !3285)
!3287 = !DILocation(line: 2303, column: 8, scope: !3285)
!3288 = !DILocation(line: 2303, column: 29, scope: !3289)
!3289 = distinct !DILexicalBlock(scope: !3285, file: !3, line: 2303, column: 3)
!3290 = !DILocation(line: 2303, column: 3, scope: !3285)
!3291 = !DILocation(line: 2304, column: 9, scope: !3292)
!3292 = distinct !DILexicalBlock(scope: !3289, file: !3, line: 2304, column: 9)
!3293 = !DILocation(line: 2304, column: 15, scope: !3292)
!3294 = !DILocation(line: 2304, column: 9, scope: !3289)
!3295 = !DILocalVariable(name: "temp_fn", scope: !3296, file: !3, line: 2306, type: !1762)
!3296 = distinct !DILexicalBlock(scope: !3292, file: !3, line: 2305, column: 7)
!3297 = !DILocation(line: 2306, column: 7, scope: !3296)
!3298 = !DILocation(line: 2308, column: 12, scope: !3296)
!3299 = !DILocation(line: 2308, column: 10, scope: !3296)
!3300 = !DILocation(line: 2309, column: 26, scope: !3296)
!3301 = !DILocation(line: 2309, column: 32, scope: !3296)
!3302 = !DILocation(line: 2309, column: 24, scope: !3296)
!3303 = !DILocation(line: 2310, column: 13, scope: !3296)
!3304 = !DILocation(line: 2310, column: 2, scope: !3296)
!3305 = !DILocation(line: 2311, column: 2, scope: !3296)
!3306 = !DILocation(line: 2312, column: 2, scope: !3296)
!3307 = !DILocation(line: 2314, column: 24, scope: !3308)
!3308 = distinct !DILexicalBlock(scope: !3296, file: !3, line: 2314, column: 6)
!3309 = !DILocation(line: 2314, column: 7, scope: !3308)
!3310 = !DILocation(line: 2314, column: 6, scope: !3296)
!3311 = !DILocation(line: 2316, column: 6, scope: !3312)
!3312 = distinct !DILexicalBlock(scope: !3308, file: !3, line: 2315, column: 4)
!3313 = !DILocation(line: 2317, column: 6, scope: !3312)
!3314 = !DILocation(line: 2318, column: 6, scope: !3312)
!3315 = !DILocation(line: 2319, column: 30, scope: !3312)
!3316 = !DILocation(line: 2319, column: 28, scope: !3312)
!3317 = !DILocation(line: 2320, column: 6, scope: !3312)
!3318 = !DILocation(line: 2322, column: 6, scope: !3312)
!3319 = !DILocation(line: 2329, column: 7, scope: !3320)
!3320 = distinct !DILexicalBlock(scope: !3296, file: !3, line: 2329, column: 6)
!3321 = !DILocation(line: 2329, column: 6, scope: !3296)
!3322 = !DILocation(line: 2331, column: 6, scope: !3323)
!3323 = distinct !DILexicalBlock(scope: !3320, file: !3, line: 2330, column: 4)
!3324 = !DILocation(line: 2332, column: 6, scope: !3323)
!3325 = !DILocation(line: 2333, column: 6, scope: !3323)
!3326 = !DILocation(line: 2334, column: 30, scope: !3323)
!3327 = !DILocation(line: 2334, column: 28, scope: !3323)
!3328 = !DILocation(line: 2335, column: 6, scope: !3323)
!3329 = !DILocation(line: 2337, column: 6, scope: !3323)
!3330 = !DILocation(line: 2341, column: 27, scope: !3296)
!3331 = !DILocation(line: 2341, column: 25, scope: !3296)
!3332 = !DILocation(line: 2343, column: 7, scope: !3333)
!3333 = distinct !DILexicalBlock(scope: !3296, file: !3, line: 2343, column: 6)
!3334 = !DILocation(line: 2343, column: 6, scope: !3296)
!3335 = !DILocation(line: 2344, column: 4, scope: !3333)
!3336 = !DILocation(line: 2347, column: 6, scope: !3337)
!3337 = distinct !DILexicalBlock(scope: !3333, file: !3, line: 2346, column: 4)
!3338 = !DILocation(line: 2348, column: 6, scope: !3337)
!3339 = !DILocation(line: 2349, column: 10, scope: !3340)
!3340 = distinct !DILexicalBlock(scope: !3337, file: !3, line: 2349, column: 10)
!3341 = !DILocation(line: 2349, column: 10, scope: !3337)
!3342 = !DILocation(line: 2350, column: 8, scope: !3340)
!3343 = !DILocation(line: 2351, column: 21, scope: !3337)
!3344 = !DILocation(line: 2351, column: 6, scope: !3337)
!3345 = !DILocation(line: 2352, column: 10, scope: !3346)
!3346 = distinct !DILexicalBlock(scope: !3337, file: !3, line: 2352, column: 10)
!3347 = !DILocation(line: 2352, column: 10, scope: !3337)
!3348 = !DILocation(line: 2354, column: 3, scope: !3349)
!3349 = distinct !DILexicalBlock(scope: !3346, file: !3, line: 2353, column: 8)
!3350 = !DILocation(line: 2355, column: 3, scope: !3349)
!3351 = !DILocation(line: 2356, column: 3, scope: !3349)
!3352 = !DILocation(line: 2356, column: 17, scope: !3349)
!3353 = !DILocation(line: 2357, column: 8, scope: !3349)
!3354 = !DILocation(line: 2361, column: 17, scope: !3296)
!3355 = !DILocation(line: 2361, column: 2, scope: !3296)
!3356 = !DILocation(line: 2362, column: 2, scope: !3296)
!3357 = !DILocation(line: 2363, column: 2, scope: !3296)
!3358 = !DILocation(line: 2364, column: 2, scope: !3296)
!3359 = !DILocation(line: 2365, column: 26, scope: !3296)
!3360 = !DILocation(line: 2365, column: 24, scope: !3296)
!3361 = !DILocation(line: 2366, column: 2, scope: !3296)
!3362 = !DILocation(line: 2367, column: 7, scope: !3296)
!3363 = !DILocation(line: 2303, column: 42, scope: !3289)
!3364 = !DILocation(line: 2303, column: 48, scope: !3289)
!3365 = !DILocation(line: 2303, column: 40, scope: !3289)
!3366 = !DILocation(line: 2303, column: 3, scope: !3289)
!3367 = distinct !{!3367, !3290, !3368}
!3368 = !DILocation(line: 2367, column: 7, scope: !3285)
!3369 = !DILocation(line: 2368, column: 18, scope: !3048)
!3370 = !DILocation(line: 2368, column: 3, scope: !3048)
!3371 = !DILocation(line: 2370, column: 15, scope: !3372)
!3372 = distinct !DILexicalBlock(scope: !3048, file: !3, line: 2370, column: 3)
!3373 = !DILocation(line: 2370, column: 13, scope: !3372)
!3374 = !DILocation(line: 2370, column: 8, scope: !3372)
!3375 = !DILocation(line: 2370, column: 29, scope: !3376)
!3376 = distinct !DILexicalBlock(scope: !3372, file: !3, line: 2370, column: 3)
!3377 = !DILocation(line: 2370, column: 3, scope: !3372)
!3378 = !DILocation(line: 2371, column: 9, scope: !3379)
!3379 = distinct !DILexicalBlock(scope: !3376, file: !3, line: 2371, column: 9)
!3380 = !DILocation(line: 2371, column: 15, scope: !3379)
!3381 = !DILocation(line: 2371, column: 9, scope: !3376)
!3382 = !DILocalVariable(name: "temp_fn", scope: !3383, file: !3, line: 2374, type: !1762)
!3383 = distinct !DILexicalBlock(scope: !3379, file: !3, line: 2372, column: 7)
!3384 = !DILocation(line: 2374, column: 7, scope: !3383)
!3385 = !DILocation(line: 2376, column: 12, scope: !3383)
!3386 = !DILocation(line: 2376, column: 10, scope: !3383)
!3387 = !DILocation(line: 2377, column: 26, scope: !3383)
!3388 = !DILocation(line: 2377, column: 32, scope: !3383)
!3389 = !DILocation(line: 2377, column: 24, scope: !3383)
!3390 = !DILocation(line: 2378, column: 13, scope: !3383)
!3391 = !DILocation(line: 2378, column: 2, scope: !3383)
!3392 = !DILocation(line: 2379, column: 2, scope: !3383)
!3393 = !DILocation(line: 2380, column: 2, scope: !3383)
!3394 = !DILocation(line: 2381, column: 2, scope: !3383)
!3395 = !DILocation(line: 2382, column: 17, scope: !3383)
!3396 = !DILocation(line: 2382, column: 2, scope: !3383)
!3397 = !DILocation(line: 2383, column: 2, scope: !3383)
!3398 = !DILocation(line: 2384, column: 2, scope: !3383)
!3399 = !DILocation(line: 2385, column: 2, scope: !3383)
!3400 = !DILocation(line: 2386, column: 26, scope: !3383)
!3401 = !DILocation(line: 2386, column: 24, scope: !3383)
!3402 = !DILocation(line: 2387, column: 2, scope: !3383)
!3403 = !DILocation(line: 2388, column: 7, scope: !3383)
!3404 = !DILocation(line: 2370, column: 42, scope: !3376)
!3405 = !DILocation(line: 2370, column: 48, scope: !3376)
!3406 = !DILocation(line: 2370, column: 40, scope: !3376)
!3407 = !DILocation(line: 2370, column: 3, scope: !3376)
!3408 = distinct !{!3408, !3377, !3409}
!3409 = !DILocation(line: 2388, column: 7, scope: !3372)
!3410 = !DILocation(line: 2389, column: 18, scope: !3048)
!3411 = !DILocation(line: 2389, column: 3, scope: !3048)
!3412 = !DILocation(line: 2391, column: 25, scope: !3048)
!3413 = !DILocation(line: 2392, column: 3, scope: !3048)
!3414 = !DILocation(line: 2393, column: 21, scope: !3048)
!3415 = !DILocation(line: 2394, column: 3, scope: !3048)
!3416 = !DILocation(line: 2395, column: 1, scope: !3048)
!3417 = distinct !DISubprogram(name: "may_flatten_matrices", scope: !3, file: !3, line: 458, type: !3418, scopeLine: 459, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!3418 = !DISubroutineType(types: !3419)
!3419 = !{!1875, !3050}
!3420 = !DILocalVariable(name: "node", arg: 1, scope: !3417, file: !3, line: 458, type: !3050)
!3421 = !DILocation(line: 458, column: 43, scope: !3417)
!3422 = !DILocalVariable(name: "decl", scope: !3417, file: !3, line: 460, type: !1762)
!3423 = !DILocation(line: 460, column: 8, scope: !3417)
!3424 = !DILocalVariable(name: "func", scope: !3417, file: !3, line: 461, type: !2013)
!3425 = !DILocation(line: 461, column: 20, scope: !3417)
!3426 = !DILocalVariable(name: "bb", scope: !3417, file: !3, line: 462, type: !2025)
!3427 = !DILocation(line: 462, column: 15, scope: !3417)
!3428 = !DILocalVariable(name: "gsi", scope: !3417, file: !3, line: 463, type: !3429)
!3429 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !625, line: 265, baseType: !3430)
!3430 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !625, line: 254, size: 192, elements: !3431)
!3431 = !{!3432, !3433, !3434}
!3432 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3430, file: !625, line: 257, baseType: !1631, size: 64)
!3433 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3430, file: !625, line: 263, baseType: !1626, size: 64, offset: 64)
!3434 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3430, file: !625, line: 264, baseType: !2025, size: 64, offset: 128)
!3435 = !DILocation(line: 463, column: 24, scope: !3417)
!3436 = !DILocation(line: 465, column: 10, scope: !3417)
!3437 = !DILocation(line: 465, column: 16, scope: !3417)
!3438 = !DILocation(line: 465, column: 8, scope: !3417)
!3439 = !DILocation(line: 466, column: 7, scope: !3440)
!3440 = distinct !DILexicalBlock(scope: !3417, file: !3, line: 466, column: 7)
!3441 = !DILocation(line: 466, column: 13, scope: !3440)
!3442 = !DILocation(line: 466, column: 7, scope: !3417)
!3443 = !DILocation(line: 468, column: 14, scope: !3444)
!3444 = distinct !DILexicalBlock(scope: !3440, file: !3, line: 467, column: 5)
!3445 = !DILocation(line: 468, column: 12, scope: !3444)
!3446 = !DILocation(line: 469, column: 7, scope: !3447)
!3447 = distinct !DILexicalBlock(scope: !3444, file: !3, line: 469, column: 7)
!3448 = !DILocation(line: 469, column: 7, scope: !3449)
!3449 = distinct !DILexicalBlock(scope: !3447, file: !3, line: 469, column: 7)
!3450 = !DILocation(line: 470, column: 27, scope: !3451)
!3451 = distinct !DILexicalBlock(scope: !3449, file: !3, line: 470, column: 2)
!3452 = !DILocation(line: 470, column: 13, scope: !3451)
!3453 = !DILocation(line: 470, column: 7, scope: !3451)
!3454 = !DILocation(line: 470, column: 33, scope: !3455)
!3455 = distinct !DILexicalBlock(scope: !3451, file: !3, line: 470, column: 2)
!3456 = !DILocation(line: 470, column: 32, scope: !3455)
!3457 = !DILocation(line: 470, column: 2, scope: !3451)
!3458 = !DILocation(line: 471, column: 31, scope: !3459)
!3459 = distinct !DILexicalBlock(scope: !3455, file: !3, line: 471, column: 6)
!3460 = !DILocation(line: 471, column: 7, scope: !3459)
!3461 = !DILocation(line: 471, column: 6, scope: !3455)
!3462 = !DILocation(line: 472, column: 4, scope: !3459)
!3463 = !DILocation(line: 471, column: 45, scope: !3459)
!3464 = !DILocation(line: 470, column: 50, scope: !3455)
!3465 = !DILocation(line: 470, column: 2, scope: !3455)
!3466 = distinct !{!3466, !3457, !3467}
!3467 = !DILocation(line: 472, column: 11, scope: !3451)
!3468 = distinct !{!3468, !3446, !3469}
!3469 = !DILocation(line: 472, column: 11, scope: !3447)
!3470 = !DILocation(line: 473, column: 5, scope: !3444)
!3471 = !DILocation(line: 474, column: 3, scope: !3417)
!3472 = !DILocation(line: 475, column: 1, scope: !3417)
!3473 = distinct !DISubprogram(name: "mtt_info_hash", scope: !3, file: !3, line: 392, type: !2064, scopeLine: 393, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!3474 = !DILocalVariable(name: "mtt", arg: 1, scope: !3473, file: !3, line: 392, type: !2067)
!3475 = !DILocation(line: 392, column: 28, scope: !3473)
!3476 = !DILocation(line: 394, column: 10, scope: !3473)
!3477 = !DILocation(line: 394, column: 59, scope: !3473)
!3478 = !DILocation(line: 394, column: 30, scope: !3473)
!3479 = !DILocation(line: 394, column: 65, scope: !3473)
!3480 = !DILocation(line: 394, column: 29, scope: !3473)
!3481 = !DILocation(line: 394, column: 3, scope: !3473)
!3482 = distinct !DISubprogram(name: "mtt_info_eq", scope: !3, file: !3, line: 400, type: !2072, scopeLine: 401, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!3483 = !DILocalVariable(name: "mtt1", arg: 1, scope: !3482, file: !3, line: 400, type: !2067)
!3484 = !DILocation(line: 400, column: 26, scope: !3482)
!3485 = !DILocalVariable(name: "mtt2", arg: 2, scope: !3482, file: !3, line: 400, type: !2067)
!3486 = !DILocation(line: 400, column: 44, scope: !3482)
!3487 = !DILocalVariable(name: "i1", scope: !3482, file: !3, line: 402, type: !3488)
!3488 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2934)
!3489 = !DILocation(line: 402, column: 35, scope: !3482)
!3490 = !DILocation(line: 402, column: 69, scope: !3482)
!3491 = !DILocation(line: 402, column: 40, scope: !3482)
!3492 = !DILocalVariable(name: "i2", scope: !3482, file: !3, line: 403, type: !3488)
!3493 = !DILocation(line: 403, column: 35, scope: !3482)
!3494 = !DILocation(line: 403, column: 69, scope: !3482)
!3495 = !DILocation(line: 403, column: 40, scope: !3482)
!3496 = !DILocation(line: 405, column: 7, scope: !3497)
!3497 = distinct !DILexicalBlock(scope: !3482, file: !3, line: 405, column: 7)
!3498 = !DILocation(line: 405, column: 11, scope: !3497)
!3499 = !DILocation(line: 405, column: 19, scope: !3497)
!3500 = !DILocation(line: 405, column: 23, scope: !3497)
!3501 = !DILocation(line: 405, column: 16, scope: !3497)
!3502 = !DILocation(line: 405, column: 7, scope: !3482)
!3503 = !DILocation(line: 406, column: 5, scope: !3497)
!3504 = !DILocation(line: 408, column: 3, scope: !3482)
!3505 = !DILocation(line: 409, column: 1, scope: !3482)
!3506 = distinct !DISubprogram(name: "mat_free", scope: !3, file: !3, line: 541, type: !2077, scopeLine: 542, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!3507 = !DILocalVariable(name: "e", arg: 1, scope: !3506, file: !3, line: 541, type: !1574)
!3508 = !DILocation(line: 541, column: 17, scope: !3506)
!3509 = !DILocalVariable(name: "mat", scope: !3506, file: !3, line: 543, type: !2986)
!3510 = !DILocation(line: 543, column: 23, scope: !3506)
!3511 = !DILocation(line: 543, column: 52, scope: !3506)
!3512 = !DILocation(line: 543, column: 29, scope: !3506)
!3513 = !DILocation(line: 545, column: 8, scope: !3514)
!3514 = distinct !DILexicalBlock(scope: !3506, file: !3, line: 545, column: 7)
!3515 = !DILocation(line: 545, column: 7, scope: !3506)
!3516 = !DILocation(line: 546, column: 5, scope: !3514)
!3517 = !DILocation(line: 548, column: 7, scope: !3518)
!3518 = distinct !DILexicalBlock(scope: !3506, file: !3, line: 548, column: 7)
!3519 = !DILocation(line: 548, column: 12, scope: !3518)
!3520 = !DILocation(line: 548, column: 7, scope: !3506)
!3521 = !DILocation(line: 549, column: 11, scope: !3518)
!3522 = !DILocation(line: 549, column: 16, scope: !3518)
!3523 = !DILocation(line: 549, column: 5, scope: !3518)
!3524 = !DILocation(line: 550, column: 7, scope: !3525)
!3525 = distinct !DILexicalBlock(scope: !3506, file: !3, line: 550, column: 7)
!3526 = !DILocation(line: 550, column: 12, scope: !3525)
!3527 = !DILocation(line: 550, column: 7, scope: !3506)
!3528 = !DILocation(line: 551, column: 11, scope: !3525)
!3529 = !DILocation(line: 551, column: 16, scope: !3525)
!3530 = !DILocation(line: 551, column: 5, scope: !3525)
!3531 = !DILocation(line: 552, column: 7, scope: !3532)
!3532 = distinct !DILexicalBlock(scope: !3506, file: !3, line: 552, column: 7)
!3533 = !DILocation(line: 552, column: 12, scope: !3532)
!3534 = !DILocation(line: 552, column: 7, scope: !3506)
!3535 = !DILocation(line: 553, column: 11, scope: !3532)
!3536 = !DILocation(line: 553, column: 16, scope: !3532)
!3537 = !DILocation(line: 553, column: 5, scope: !3532)
!3538 = !DILocation(line: 554, column: 1, scope: !3506)
!3539 = distinct !DISubprogram(name: "find_matrices_decl", scope: !3, file: !3, line: 560, type: !3112, scopeLine: 561, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!3540 = !DILocalVariable(name: "tmp", scope: !3539, file: !3, line: 562, type: !2986)
!3541 = !DILocation(line: 562, column: 23, scope: !3539)
!3542 = !DILocalVariable(name: "slot", scope: !3539, file: !3, line: 563, type: !2080)
!3543 = !DILocation(line: 563, column: 8, scope: !3539)
!3544 = !DILocalVariable(name: "vnode", scope: !3539, file: !3, line: 564, type: !3155)
!3545 = !DILocation(line: 564, column: 24, scope: !3539)
!3546 = !DILocation(line: 566, column: 3, scope: !3539)
!3547 = !DILocation(line: 570, column: 16, scope: !3548)
!3548 = distinct !DILexicalBlock(scope: !3539, file: !3, line: 570, column: 3)
!3549 = !DILocation(line: 570, column: 14, scope: !3548)
!3550 = !DILocation(line: 570, column: 8, scope: !3548)
!3551 = !DILocation(line: 570, column: 37, scope: !3552)
!3552 = distinct !DILexicalBlock(scope: !3548, file: !3, line: 570, column: 3)
!3553 = !DILocation(line: 570, column: 3, scope: !3548)
!3554 = !DILocalVariable(name: "var_decl", scope: !3555, file: !3, line: 572, type: !1762)
!3555 = distinct !DILexicalBlock(scope: !3552, file: !3, line: 571, column: 5)
!3556 = !DILocation(line: 572, column: 12, scope: !3555)
!3557 = !DILocation(line: 572, column: 23, scope: !3555)
!3558 = !DILocation(line: 572, column: 30, scope: !3555)
!3559 = !DILocation(line: 574, column: 12, scope: !3560)
!3560 = distinct !DILexicalBlock(scope: !3555, file: !3, line: 574, column: 11)
!3561 = !DILocation(line: 574, column: 21, scope: !3560)
!3562 = !DILocation(line: 574, column: 24, scope: !3560)
!3563 = !DILocation(line: 574, column: 45, scope: !3560)
!3564 = !DILocation(line: 574, column: 11, scope: !3555)
!3565 = !DILocation(line: 575, column: 2, scope: !3560)
!3566 = !DILocation(line: 577, column: 11, scope: !3567)
!3567 = distinct !DILexicalBlock(scope: !3555, file: !3, line: 577, column: 11)
!3568 = !DILocation(line: 577, column: 11, scope: !3555)
!3569 = !DILocation(line: 578, column: 34, scope: !3570)
!3570 = distinct !DILexicalBlock(scope: !3567, file: !3, line: 578, column: 6)
!3571 = !DILocation(line: 578, column: 13, scope: !3570)
!3572 = !DILocation(line: 578, column: 11, scope: !3570)
!3573 = !DILocation(line: 578, column: 6, scope: !3567)
!3574 = !DILocation(line: 580, column: 11, scope: !3575)
!3575 = distinct !DILexicalBlock(scope: !3576, file: !3, line: 580, column: 10)
!3576 = distinct !DILexicalBlock(scope: !3570, file: !3, line: 579, column: 4)
!3577 = !DILocation(line: 580, column: 10, scope: !3576)
!3578 = !DILocation(line: 582, column: 26, scope: !3579)
!3579 = distinct !DILexicalBlock(scope: !3575, file: !3, line: 581, column: 8)
!3580 = !DILocation(line: 582, column: 45, scope: !3579)
!3581 = !DILocation(line: 582, column: 10, scope: !3579)
!3582 = !DILocation(line: 582, column: 8, scope: !3579)
!3583 = !DILocation(line: 583, column: 11, scope: !3579)
!3584 = !DILocation(line: 583, column: 4, scope: !3579)
!3585 = !DILocation(line: 583, column: 9, scope: !3579)
!3586 = !DILocation(line: 584, column: 8, scope: !3579)
!3587 = !DILocation(line: 585, column: 4, scope: !3576)
!3588 = !DILocation(line: 578, column: 43, scope: !3570)
!3589 = !DILocation(line: 586, column: 5, scope: !3555)
!3590 = !DILocation(line: 570, column: 52, scope: !3552)
!3591 = !DILocation(line: 570, column: 59, scope: !3552)
!3592 = !DILocation(line: 570, column: 50, scope: !3552)
!3593 = !DILocation(line: 570, column: 3, scope: !3552)
!3594 = distinct !{!3594, !3553, !3595}
!3595 = !DILocation(line: 586, column: 5, scope: !3548)
!3596 = !DILocation(line: 587, column: 3, scope: !3539)
!3597 = distinct !DISubprogram(name: "gimple_in_ssa_p", scope: !3598, file: !3598, line: 33, type: !3599, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!3598 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3599 = !DISubroutineType(types: !3600)
!3600 = !{!1875, !3601}
!3601 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3602, size: 64)
!3602 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2014)
!3603 = !DILocalVariable(name: "fun", arg: 1, scope: !3597, file: !3598, line: 33, type: !3601)
!3604 = !DILocation(line: 33, column: 41, scope: !3597)
!3605 = !DILocation(line: 35, column: 10, scope: !3597)
!3606 = !DILocation(line: 35, column: 14, scope: !3597)
!3607 = !DILocation(line: 35, column: 17, scope: !3597)
!3608 = !DILocation(line: 35, column: 22, scope: !3597)
!3609 = !DILocation(line: 35, column: 32, scope: !3597)
!3610 = !DILocation(line: 35, column: 35, scope: !3597)
!3611 = !DILocation(line: 35, column: 40, scope: !3597)
!3612 = !DILocation(line: 35, column: 51, scope: !3597)
!3613 = !DILocation(line: 0, scope: !3597)
!3614 = !DILocation(line: 35, column: 3, scope: !3597)
!3615 = distinct !DISubprogram(name: "mat_acc_phi_hash", scope: !3, file: !3, line: 358, type: !2064, scopeLine: 359, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!3616 = !DILocalVariable(name: "p", arg: 1, scope: !3615, file: !3, line: 358, type: !2067)
!3617 = !DILocation(line: 358, column: 31, scope: !3615)
!3618 = !DILocalVariable(name: "ma_phi", scope: !3615, file: !3, line: 360, type: !3619)
!3619 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2987)
!3620 = !DILocation(line: 360, column: 46, scope: !3615)
!3621 = !DILocation(line: 361, column: 45, scope: !3615)
!3622 = !DILocation(line: 361, column: 5, scope: !3615)
!3623 = !DILocation(line: 363, column: 10, scope: !3615)
!3624 = !DILocation(line: 363, column: 29, scope: !3615)
!3625 = !DILocation(line: 363, column: 37, scope: !3615)
!3626 = !DILocation(line: 363, column: 3, scope: !3615)
!3627 = distinct !DISubprogram(name: "mat_acc_phi_eq", scope: !3, file: !3, line: 369, type: !2072, scopeLine: 370, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!3628 = !DILocalVariable(name: "p1", arg: 1, scope: !3627, file: !3, line: 369, type: !2067)
!3629 = !DILocation(line: 369, column: 29, scope: !3627)
!3630 = !DILocalVariable(name: "p2", arg: 2, scope: !3627, file: !3, line: 369, type: !2067)
!3631 = !DILocation(line: 369, column: 45, scope: !3627)
!3632 = !DILocalVariable(name: "phi1", scope: !3627, file: !3, line: 371, type: !3619)
!3633 = !DILocation(line: 371, column: 46, scope: !3627)
!3634 = !DILocation(line: 372, column: 45, scope: !3627)
!3635 = !DILocation(line: 372, column: 5, scope: !3627)
!3636 = !DILocalVariable(name: "phi2", scope: !3627, file: !3, line: 373, type: !3619)
!3637 = !DILocation(line: 373, column: 46, scope: !3627)
!3638 = !DILocation(line: 374, column: 45, scope: !3627)
!3639 = !DILocation(line: 374, column: 5, scope: !3627)
!3640 = !DILocation(line: 376, column: 7, scope: !3641)
!3641 = distinct !DILexicalBlock(scope: !3627, file: !3, line: 376, column: 7)
!3642 = !DILocation(line: 376, column: 13, scope: !3641)
!3643 = !DILocation(line: 376, column: 20, scope: !3641)
!3644 = !DILocation(line: 376, column: 26, scope: !3641)
!3645 = !DILocation(line: 376, column: 17, scope: !3641)
!3646 = !DILocation(line: 376, column: 7, scope: !3627)
!3647 = !DILocation(line: 377, column: 5, scope: !3641)
!3648 = !DILocation(line: 379, column: 3, scope: !3627)
!3649 = !DILocation(line: 380, column: 1, scope: !3627)
!3650 = distinct !DISubprogram(name: "find_sites_in_func", scope: !3, file: !3, line: 1656, type: !3651, scopeLine: 1657, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!3651 = !DISubroutineType(types: !3652)
!3652 = !{null, !1875}
!3653 = !DILocalVariable(name: "record", arg: 1, scope: !3650, file: !3, line: 1656, type: !1875)
!3654 = !DILocation(line: 1656, column: 26, scope: !3650)
!3655 = !DILocalVariable(name: "visited_stmts_1", scope: !3650, file: !3, line: 1658, type: !3656)
!3656 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !3657, line: 45, baseType: !3658)
!3657 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3658 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3659, size: 64)
!3659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !3657, line: 39, size: 192, elements: !3660)
!3660 = !{!3661, !3663, !3664, !3665}
!3661 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !3659, file: !3657, line: 41, baseType: !3662, size: 64)
!3662 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1875, size: 64)
!3663 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !3659, file: !3657, line: 42, baseType: !7, size: 32, offset: 64)
!3664 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3659, file: !3657, line: 43, baseType: !7, size: 32, offset: 96)
!3665 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !3659, file: !3657, line: 44, baseType: !3666, size: 64, offset: 128)
!3666 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1715, size: 64, elements: !1680)
!3667 = !DILocation(line: 1658, column: 11, scope: !3650)
!3668 = !DILocalVariable(name: "gsi", scope: !3650, file: !3, line: 1660, type: !3429)
!3669 = !DILocation(line: 1660, column: 24, scope: !3650)
!3670 = !DILocalVariable(name: "stmt", scope: !3650, file: !3, line: 1661, type: !1636)
!3671 = !DILocation(line: 1661, column: 10, scope: !3650)
!3672 = !DILocalVariable(name: "bb", scope: !3650, file: !3, line: 1662, type: !2025)
!3673 = !DILocation(line: 1662, column: 15, scope: !3650)
!3674 = !DILocalVariable(name: "tmpmi", scope: !3650, file: !3, line: 1663, type: !2936)
!3675 = !DILocation(line: 1663, column: 22, scope: !3650)
!3676 = !DILocalVariable(name: "mi", scope: !3650, file: !3, line: 1663, type: !2986)
!3677 = !DILocation(line: 1663, column: 30, scope: !3650)
!3678 = !DILocation(line: 1665, column: 36, scope: !3650)
!3679 = !DILocation(line: 1665, column: 21, scope: !3650)
!3680 = !DILocation(line: 1665, column: 19, scope: !3650)
!3681 = !DILocation(line: 1667, column: 3, scope: !3682)
!3682 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 1667, column: 3)
!3683 = !DILocation(line: 1667, column: 3, scope: !3684)
!3684 = distinct !DILexicalBlock(scope: !3682, file: !3, line: 1667, column: 3)
!3685 = !DILocation(line: 1669, column: 30, scope: !3686)
!3686 = distinct !DILexicalBlock(scope: !3687, file: !3, line: 1669, column: 5)
!3687 = distinct !DILexicalBlock(scope: !3684, file: !3, line: 1668, column: 3)
!3688 = !DILocation(line: 1669, column: 16, scope: !3686)
!3689 = !DILocation(line: 1669, column: 10, scope: !3686)
!3690 = !DILocation(line: 1669, column: 36, scope: !3691)
!3691 = distinct !DILexicalBlock(scope: !3686, file: !3, line: 1669, column: 5)
!3692 = !DILocation(line: 1669, column: 35, scope: !3691)
!3693 = !DILocation(line: 1669, column: 5, scope: !3686)
!3694 = !DILocalVariable(name: "lhs", scope: !3695, file: !3, line: 1671, type: !1762)
!3695 = distinct !DILexicalBlock(scope: !3691, file: !3, line: 1670, column: 7)
!3696 = !DILocation(line: 1671, column: 7, scope: !3695)
!3697 = !DILocation(line: 1673, column: 9, scope: !3695)
!3698 = !DILocation(line: 1673, column: 7, scope: !3695)
!3699 = !DILocation(line: 1674, column: 24, scope: !3695)
!3700 = !DILocation(line: 1674, column: 8, scope: !3695)
!3701 = !DILocation(line: 1674, column: 6, scope: !3695)
!3702 = !DILocation(line: 1675, column: 6, scope: !3703)
!3703 = distinct !DILexicalBlock(scope: !3695, file: !3, line: 1675, column: 6)
!3704 = !DILocation(line: 1675, column: 10, scope: !3703)
!3705 = !DILocation(line: 1676, column: 6, scope: !3703)
!3706 = !DILocation(line: 1676, column: 9, scope: !3703)
!3707 = !DILocation(line: 1676, column: 25, scope: !3703)
!3708 = !DILocation(line: 1675, column: 6, scope: !3695)
!3709 = !DILocation(line: 1678, column: 19, scope: !3710)
!3710 = distinct !DILexicalBlock(scope: !3703, file: !3, line: 1677, column: 4)
!3711 = !DILocation(line: 1678, column: 12, scope: !3710)
!3712 = !DILocation(line: 1678, column: 17, scope: !3710)
!3713 = !DILocation(line: 1679, column: 50, scope: !3714)
!3714 = distinct !DILexicalBlock(scope: !3710, file: !3, line: 1679, column: 10)
!3715 = !DILocation(line: 1680, column: 8, scope: !3714)
!3716 = !DILocation(line: 1679, column: 39, scope: !3714)
!3717 = !DILocation(line: 1679, column: 16, scope: !3714)
!3718 = !DILocation(line: 1679, column: 14, scope: !3714)
!3719 = !DILocation(line: 1679, column: 10, scope: !3710)
!3720 = !DILocation(line: 1682, column: 17, scope: !3721)
!3721 = distinct !DILexicalBlock(scope: !3714, file: !3, line: 1681, column: 8)
!3722 = !DILocation(line: 1682, column: 3, scope: !3721)
!3723 = !DILocation(line: 1683, column: 35, scope: !3721)
!3724 = !DILocation(line: 1683, column: 39, scope: !3721)
!3725 = !DILocation(line: 1683, column: 48, scope: !3721)
!3726 = !DILocation(line: 1683, column: 3, scope: !3721)
!3727 = !DILocation(line: 1684, column: 8, scope: !3721)
!3728 = !DILocation(line: 1685, column: 4, scope: !3710)
!3729 = !DILocation(line: 1686, column: 24, scope: !3730)
!3730 = distinct !DILexicalBlock(scope: !3695, file: !3, line: 1686, column: 6)
!3731 = !DILocation(line: 1686, column: 6, scope: !3730)
!3732 = !DILocation(line: 1687, column: 6, scope: !3730)
!3733 = !DILocation(line: 1687, column: 33, scope: !3730)
!3734 = !DILocation(line: 1687, column: 9, scope: !3730)
!3735 = !DILocation(line: 1688, column: 6, scope: !3730)
!3736 = !DILocation(line: 1688, column: 9, scope: !3730)
!3737 = !DILocation(line: 1688, column: 25, scope: !3730)
!3738 = !DILocation(line: 1689, column: 6, scope: !3730)
!3739 = !DILocation(line: 1689, column: 9, scope: !3730)
!3740 = !DILocation(line: 1689, column: 47, scope: !3730)
!3741 = !DILocation(line: 1686, column: 6, scope: !3695)
!3742 = !DILocation(line: 1691, column: 39, scope: !3743)
!3743 = distinct !DILexicalBlock(scope: !3730, file: !3, line: 1690, column: 4)
!3744 = !DILocation(line: 1691, column: 19, scope: !3743)
!3745 = !DILocation(line: 1691, column: 12, scope: !3743)
!3746 = !DILocation(line: 1691, column: 17, scope: !3743)
!3747 = !DILocation(line: 1692, column: 50, scope: !3748)
!3748 = distinct !DILexicalBlock(scope: !3743, file: !3, line: 1692, column: 10)
!3749 = !DILocation(line: 1693, column: 8, scope: !3748)
!3750 = !DILocation(line: 1692, column: 39, scope: !3748)
!3751 = !DILocation(line: 1692, column: 16, scope: !3748)
!3752 = !DILocation(line: 1692, column: 14, scope: !3748)
!3753 = !DILocation(line: 1692, column: 10, scope: !3743)
!3754 = !DILocation(line: 1695, column: 17, scope: !3755)
!3755 = distinct !DILexicalBlock(scope: !3748, file: !3, line: 1694, column: 8)
!3756 = !DILocation(line: 1695, column: 3, scope: !3755)
!3757 = !DILocation(line: 1696, column: 28, scope: !3755)
!3758 = !DILocation(line: 1696, column: 32, scope: !3755)
!3759 = !DILocation(line: 1697, column: 14, scope: !3755)
!3760 = !DILocation(line: 1697, column: 31, scope: !3755)
!3761 = !DILocation(line: 1696, column: 3, scope: !3755)
!3762 = !DILocation(line: 1698, column: 8, scope: !3755)
!3763 = !DILocation(line: 1699, column: 4, scope: !3743)
!3764 = !DILocation(line: 1700, column: 7, scope: !3695)
!3765 = !DILocation(line: 1669, column: 53, scope: !3691)
!3766 = !DILocation(line: 1669, column: 5, scope: !3691)
!3767 = distinct !{!3767, !3693, !3768}
!3768 = !DILocation(line: 1700, column: 7, scope: !3686)
!3769 = !DILocation(line: 1701, column: 3, scope: !3687)
!3770 = distinct !{!3770, !3681, !3771}
!3771 = !DILocation(line: 1701, column: 3, scope: !3682)
!3772 = !DILocation(line: 1702, column: 3, scope: !3650)
!3773 = !DILocation(line: 1703, column: 1, scope: !3650)
!3774 = distinct !DISubprogram(name: "analyze_transpose", scope: !3, file: !3, line: 895, type: !3775, scopeLine: 896, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!3775 = !DISubroutineType(types: !3776)
!3776 = !{!1575, !2080, !1574}
!3777 = !DILocalVariable(name: "slot", arg: 1, scope: !3774, file: !3, line: 895, type: !2080)
!3778 = !DILocation(line: 895, column: 27, scope: !3774)
!3779 = !DILocalVariable(name: "data", arg: 2, scope: !3774, file: !3, line: 895, type: !1574)
!3780 = !DILocation(line: 895, column: 39, scope: !3774)
!3781 = !DILocalVariable(name: "mi", scope: !3774, file: !3, line: 897, type: !2986)
!3782 = !DILocation(line: 897, column: 23, scope: !3774)
!3783 = !DILocation(line: 897, column: 52, scope: !3774)
!3784 = !DILocation(line: 897, column: 51, scope: !3774)
!3785 = !DILocation(line: 897, column: 28, scope: !3774)
!3786 = !DILocalVariable(name: "min_escape_l", scope: !3774, file: !3, line: 898, type: !1575)
!3787 = !DILocation(line: 898, column: 7, scope: !3774)
!3788 = !DILocation(line: 898, column: 22, scope: !3774)
!3789 = !DILocation(line: 898, column: 26, scope: !3774)
!3790 = !DILocalVariable(name: "loop", scope: !3774, file: !3, line: 899, type: !2210)
!3791 = !DILocation(line: 899, column: 16, scope: !3774)
!3792 = !DILocalVariable(name: "iv", scope: !3774, file: !3, line: 900, type: !3793)
!3793 = !DIDerivedType(tag: DW_TAG_typedef, name: "affine_iv", file: !1965, line: 651, baseType: !3794)
!3794 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1965, line: 644, size: 192, elements: !3795)
!3795 = !{!3796, !3797, !3798}
!3796 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3794, file: !1965, line: 647, baseType: !1762, size: 64)
!3797 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !3794, file: !1965, line: 647, baseType: !1762, size: 64, offset: 64)
!3798 = !DIDerivedType(tag: DW_TAG_member, name: "no_overflow", scope: !3794, file: !1965, line: 650, baseType: !1875, size: 8, offset: 128)
!3799 = !DILocation(line: 900, column: 13, scope: !3774)
!3800 = !DILocalVariable(name: "acc_info", scope: !3774, file: !3, line: 901, type: !2974)
!3801 = !DILocation(line: 901, column: 28, scope: !3774)
!3802 = !DILocalVariable(name: "i", scope: !3774, file: !3, line: 902, type: !1575)
!3803 = !DILocation(line: 902, column: 7, scope: !3774)
!3804 = !DILocation(line: 904, column: 7, scope: !3805)
!3805 = distinct !DILexicalBlock(scope: !3774, file: !3, line: 904, column: 7)
!3806 = !DILocation(line: 904, column: 20, scope: !3805)
!3807 = !DILocation(line: 904, column: 24, scope: !3805)
!3808 = !DILocation(line: 904, column: 28, scope: !3805)
!3809 = !DILocation(line: 904, column: 32, scope: !3805)
!3810 = !DILocation(line: 904, column: 7, scope: !3774)
!3811 = !DILocation(line: 906, column: 11, scope: !3812)
!3812 = distinct !DILexicalBlock(scope: !3813, file: !3, line: 906, column: 11)
!3813 = distinct !DILexicalBlock(scope: !3805, file: !3, line: 905, column: 5)
!3814 = !DILocation(line: 906, column: 15, scope: !3812)
!3815 = !DILocation(line: 906, column: 11, scope: !3813)
!3816 = !DILocation(line: 908, column: 11, scope: !3817)
!3817 = distinct !DILexicalBlock(scope: !3818, file: !3, line: 908, column: 4)
!3818 = distinct !DILexicalBlock(scope: !3812, file: !3, line: 907, column: 2)
!3819 = !DILocation(line: 908, column: 9, scope: !3817)
!3820 = !DILocation(line: 909, column: 9, scope: !3821)
!3821 = distinct !DILexicalBlock(scope: !3817, file: !3, line: 908, column: 4)
!3822 = !DILocation(line: 908, column: 4, scope: !3817)
!3823 = !DILocation(line: 911, column: 12, scope: !3821)
!3824 = !DILocation(line: 911, column: 6, scope: !3821)
!3825 = !DILocation(line: 910, column: 10, scope: !3821)
!3826 = !DILocation(line: 908, column: 4, scope: !3821)
!3827 = distinct !{!3827, !3822, !3828}
!3828 = !DILocation(line: 911, column: 20, scope: !3817)
!3829 = !DILocation(line: 912, column: 4, scope: !3818)
!3830 = !DILocation(line: 914, column: 2, scope: !3818)
!3831 = !DILocation(line: 915, column: 7, scope: !3813)
!3832 = !DILocation(line: 917, column: 8, scope: !3833)
!3833 = distinct !DILexicalBlock(scope: !3774, file: !3, line: 917, column: 7)
!3834 = !DILocation(line: 917, column: 12, scope: !3833)
!3835 = !DILocation(line: 917, column: 7, scope: !3774)
!3836 = !DILocation(line: 919, column: 30, scope: !3833)
!3837 = !DILocation(line: 919, column: 21, scope: !3833)
!3838 = !DILocation(line: 919, column: 7, scope: !3833)
!3839 = !DILocation(line: 918, column: 5, scope: !3833)
!3840 = !DILocation(line: 918, column: 9, scope: !3833)
!3841 = !DILocation(line: 918, column: 23, scope: !3833)
!3842 = !DILocation(line: 922, column: 10, scope: !3843)
!3843 = distinct !DILexicalBlock(scope: !3774, file: !3, line: 922, column: 3)
!3844 = !DILocation(line: 922, column: 8, scope: !3843)
!3845 = !DILocation(line: 922, column: 15, scope: !3846)
!3846 = distinct !DILexicalBlock(scope: !3843, file: !3, line: 922, column: 3)
!3847 = !DILocation(line: 922, column: 3, scope: !3843)
!3848 = !DILocation(line: 925, column: 35, scope: !3849)
!3849 = distinct !DILexicalBlock(scope: !3850, file: !3, line: 925, column: 11)
!3850 = distinct !DILexicalBlock(scope: !3846, file: !3, line: 924, column: 5)
!3851 = !DILocation(line: 925, column: 45, scope: !3849)
!3852 = !DILocation(line: 925, column: 11, scope: !3849)
!3853 = !DILocation(line: 925, column: 51, scope: !3849)
!3854 = !DILocation(line: 926, column: 4, scope: !3849)
!3855 = !DILocation(line: 926, column: 7, scope: !3849)
!3856 = !DILocation(line: 926, column: 17, scope: !3849)
!3857 = !DILocation(line: 926, column: 25, scope: !3849)
!3858 = !DILocation(line: 926, column: 23, scope: !3849)
!3859 = !DILocation(line: 925, column: 11, scope: !3850)
!3860 = !DILocation(line: 928, column: 33, scope: !3861)
!3861 = distinct !DILexicalBlock(scope: !3849, file: !3, line: 927, column: 2)
!3862 = !DILocation(line: 928, column: 43, scope: !3861)
!3863 = !DILocation(line: 928, column: 11, scope: !3861)
!3864 = !DILocation(line: 928, column: 9, scope: !3861)
!3865 = !DILocation(line: 929, column: 9, scope: !3866)
!3866 = distinct !DILexicalBlock(scope: !3861, file: !3, line: 929, column: 8)
!3867 = !DILocation(line: 929, column: 14, scope: !3866)
!3868 = !DILocation(line: 929, column: 17, scope: !3866)
!3869 = !DILocation(line: 929, column: 23, scope: !3866)
!3870 = !DILocation(line: 929, column: 8, scope: !3861)
!3871 = !DILocation(line: 931, column: 14, scope: !3872)
!3872 = distinct !DILexicalBlock(scope: !3866, file: !3, line: 930, column: 6)
!3873 = !DILocation(line: 931, column: 8, scope: !3872)
!3874 = !DILocation(line: 932, column: 8, scope: !3872)
!3875 = !DILocation(line: 934, column: 19, scope: !3876)
!3876 = distinct !DILexicalBlock(scope: !3861, file: !3, line: 934, column: 8)
!3877 = !DILocation(line: 934, column: 25, scope: !3876)
!3878 = !DILocation(line: 934, column: 31, scope: !3876)
!3879 = !DILocation(line: 934, column: 41, scope: !3876)
!3880 = !DILocation(line: 934, column: 8, scope: !3876)
!3881 = !DILocation(line: 934, column: 8, scope: !3861)
!3882 = !DILocation(line: 936, column: 15, scope: !3883)
!3883 = distinct !DILexicalBlock(scope: !3884, file: !3, line: 936, column: 12)
!3884 = distinct !DILexicalBlock(scope: !3876, file: !3, line: 935, column: 6)
!3885 = !DILocation(line: 936, column: 20, scope: !3883)
!3886 = !DILocation(line: 936, column: 12, scope: !3884)
!3887 = !DILocalVariable(name: "istep", scope: !3888, file: !3, line: 938, type: !1732)
!3888 = distinct !DILexicalBlock(scope: !3883, file: !3, line: 937, column: 3)
!3889 = !DILocation(line: 938, column: 19, scope: !3888)
!3890 = !DILocation(line: 940, column: 31, scope: !3888)
!3891 = !DILocation(line: 940, column: 13, scope: !3888)
!3892 = !DILocation(line: 940, column: 11, scope: !3888)
!3893 = !DILocation(line: 941, column: 9, scope: !3894)
!3894 = distinct !DILexicalBlock(scope: !3888, file: !3, line: 941, column: 9)
!3895 = !DILocation(line: 941, column: 15, scope: !3894)
!3896 = !DILocation(line: 941, column: 9, scope: !3888)
!3897 = !DILocation(line: 943, column: 9, scope: !3898)
!3898 = distinct !DILexicalBlock(scope: !3894, file: !3, line: 942, column: 7)
!3899 = !DILocation(line: 943, column: 19, scope: !3898)
!3900 = !DILocation(line: 943, column: 49, scope: !3898)
!3901 = !DILocation(line: 945, column: 15, scope: !3898)
!3902 = !DILocation(line: 945, column: 25, scope: !3898)
!3903 = !DILocation(line: 945, column: 4, scope: !3898)
!3904 = !DILocation(line: 945, column: 32, scope: !3898)
!3905 = !DILocation(line: 944, column: 9, scope: !3898)
!3906 = !DILocation(line: 944, column: 13, scope: !3898)
!3907 = !DILocation(line: 944, column: 27, scope: !3898)
!3908 = !DILocation(line: 944, column: 37, scope: !3898)
!3909 = !DILocation(line: 944, column: 44, scope: !3898)
!3910 = !DILocation(line: 946, column: 7, scope: !3898)
!3911 = !DILocation(line: 948, column: 3, scope: !3888)
!3912 = !DILocation(line: 949, column: 6, scope: !3884)
!3913 = !DILocation(line: 950, column: 2, scope: !3861)
!3914 = !DILocation(line: 951, column: 13, scope: !3850)
!3915 = !DILocation(line: 951, column: 7, scope: !3850)
!3916 = !DILocation(line: 952, column: 5, scope: !3850)
!3917 = !DILocation(line: 923, column: 9, scope: !3846)
!3918 = !DILocation(line: 922, column: 3, scope: !3846)
!3919 = distinct !{!3919, !3847, !3920}
!3920 = !DILocation(line: 952, column: 5, scope: !3843)
!3921 = !DILocation(line: 953, column: 3, scope: !3774)
!3922 = !DILocation(line: 955, column: 3, scope: !3774)
!3923 = !DILocation(line: 956, column: 1, scope: !3774)
!3924 = distinct !DISubprogram(name: "check_allocation_function", scope: !3, file: !3, line: 1570, type: !3775, scopeLine: 1571, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!3925 = !DILocalVariable(name: "slot", arg: 1, scope: !3924, file: !3, line: 1570, type: !2080)
!3926 = !DILocation(line: 1570, column: 35, scope: !3924)
!3927 = !DILocalVariable(name: "data", arg: 2, scope: !3924, file: !3, line: 1570, type: !1574)
!3928 = !DILocation(line: 1570, column: 47, scope: !3924)
!3929 = !DILocalVariable(name: "level", scope: !3924, file: !3, line: 1572, type: !1575)
!3930 = !DILocation(line: 1572, column: 7, scope: !3924)
!3931 = !DILocalVariable(name: "mi", scope: !3924, file: !3, line: 1573, type: !2986)
!3932 = !DILocation(line: 1573, column: 23, scope: !3924)
!3933 = !DILocation(line: 1573, column: 52, scope: !3924)
!3934 = !DILocation(line: 1573, column: 51, scope: !3924)
!3935 = !DILocation(line: 1573, column: 28, scope: !3924)
!3936 = !DILocalVariable(name: "visited", scope: !3924, file: !3, line: 1574, type: !3656)
!3937 = !DILocation(line: 1574, column: 11, scope: !3924)
!3938 = !DILocation(line: 1576, column: 8, scope: !3939)
!3939 = distinct !DILexicalBlock(scope: !3924, file: !3, line: 1576, column: 7)
!3940 = !DILocation(line: 1576, column: 12, scope: !3939)
!3941 = !DILocation(line: 1576, column: 7, scope: !3924)
!3942 = !DILocation(line: 1577, column: 5, scope: !3939)
!3943 = !DILocation(line: 1579, column: 28, scope: !3924)
!3944 = !DILocation(line: 1579, column: 13, scope: !3924)
!3945 = !DILocation(line: 1579, column: 11, scope: !3924)
!3946 = !DILocation(line: 1583, column: 7, scope: !3947)
!3947 = distinct !DILexicalBlock(scope: !3924, file: !3, line: 1583, column: 7)
!3948 = !DILocation(line: 1583, column: 11, scope: !3947)
!3949 = !DILocation(line: 1583, column: 39, scope: !3947)
!3950 = !DILocation(line: 1583, column: 36, scope: !3947)
!3951 = !DILocation(line: 1585, column: 7, scope: !3947)
!3952 = !DILocation(line: 1585, column: 11, scope: !3947)
!3953 = !DILocation(line: 1585, column: 15, scope: !3947)
!3954 = !DILocation(line: 1583, column: 7, scope: !3924)
!3955 = !DILocation(line: 1586, column: 5, scope: !3947)
!3956 = !DILocation(line: 1588, column: 14, scope: !3957)
!3957 = distinct !DILexicalBlock(scope: !3924, file: !3, line: 1588, column: 3)
!3958 = !DILocation(line: 1588, column: 8, scope: !3957)
!3959 = !DILocation(line: 1588, column: 19, scope: !3960)
!3960 = distinct !DILexicalBlock(scope: !3957, file: !3, line: 1588, column: 3)
!3961 = !DILocation(line: 1588, column: 27, scope: !3960)
!3962 = !DILocation(line: 1588, column: 31, scope: !3960)
!3963 = !DILocation(line: 1588, column: 25, scope: !3960)
!3964 = !DILocation(line: 1588, column: 3, scope: !3957)
!3965 = !DILocation(line: 1589, column: 10, scope: !3966)
!3966 = distinct !DILexicalBlock(scope: !3960, file: !3, line: 1589, column: 9)
!3967 = !DILocation(line: 1589, column: 14, scope: !3966)
!3968 = !DILocation(line: 1589, column: 31, scope: !3966)
!3969 = !DILocation(line: 1589, column: 9, scope: !3960)
!3970 = !DILocation(line: 1590, column: 7, scope: !3966)
!3971 = !DILocation(line: 1589, column: 36, scope: !3966)
!3972 = !DILocation(line: 1588, column: 56, scope: !3960)
!3973 = !DILocation(line: 1588, column: 3, scope: !3960)
!3974 = distinct !{!3974, !3964, !3975}
!3975 = !DILocation(line: 1590, column: 7, scope: !3957)
!3976 = !DILocation(line: 1592, column: 33, scope: !3924)
!3977 = !DILocation(line: 1592, column: 37, scope: !3924)
!3978 = !DILocation(line: 1592, column: 3, scope: !3924)
!3979 = !DILocation(line: 1596, column: 14, scope: !3980)
!3980 = distinct !DILexicalBlock(scope: !3924, file: !3, line: 1596, column: 3)
!3981 = !DILocation(line: 1596, column: 8, scope: !3980)
!3982 = !DILocation(line: 1596, column: 19, scope: !3983)
!3983 = distinct !DILexicalBlock(scope: !3980, file: !3, line: 1596, column: 3)
!3984 = !DILocation(line: 1596, column: 27, scope: !3983)
!3985 = !DILocation(line: 1596, column: 31, scope: !3983)
!3986 = !DILocation(line: 1596, column: 25, scope: !3983)
!3987 = !DILocation(line: 1596, column: 3, scope: !3980)
!3988 = !DILocalVariable(name: "call_stmt", scope: !3989, file: !3, line: 1598, type: !1636)
!3989 = distinct !DILexicalBlock(scope: !3983, file: !3, line: 1597, column: 5)
!3990 = !DILocation(line: 1598, column: 14, scope: !3989)
!3991 = !DILocalVariable(name: "size", scope: !3989, file: !3, line: 1599, type: !1762)
!3992 = !DILocation(line: 1599, column: 12, scope: !3989)
!3993 = !DILocalVariable(name: "mcd", scope: !3989, file: !3, line: 1600, type: !3994)
!3994 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "malloc_call_data", file: !3, line: 161, size: 192, elements: !3995)
!3995 = !{!3996, !3997, !3998}
!3996 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt", scope: !3994, file: !3, line: 163, baseType: !1636, size: 64)
!3997 = !DIDerivedType(tag: DW_TAG_member, name: "size_var", scope: !3994, file: !3, line: 164, baseType: !1762, size: 64, offset: 64)
!3998 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_size", scope: !3994, file: !3, line: 165, baseType: !1762, size: 64, offset: 128)
!3999 = !DILocation(line: 1600, column: 31, scope: !3989)
!4000 = !DILocation(line: 1602, column: 19, scope: !3989)
!4001 = !DILocation(line: 1602, column: 23, scope: !3989)
!4002 = !DILocation(line: 1602, column: 40, scope: !3989)
!4003 = !DILocation(line: 1602, column: 17, scope: !3989)
!4004 = !DILocation(line: 1605, column: 37, scope: !3989)
!4005 = !DILocation(line: 1605, column: 7, scope: !3989)
!4006 = !DILocation(line: 1608, column: 11, scope: !4007)
!4007 = distinct !DILexicalBlock(scope: !3989, file: !3, line: 1608, column: 11)
!4008 = !DILocation(line: 1608, column: 36, scope: !4007)
!4009 = !DILocation(line: 1608, column: 11, scope: !3989)
!4010 = !DILocation(line: 1610, column: 9, scope: !4011)
!4011 = distinct !DILexicalBlock(scope: !4012, file: !3, line: 1610, column: 8)
!4012 = distinct !DILexicalBlock(scope: !4007, file: !3, line: 1609, column: 2)
!4013 = !DILocation(line: 1610, column: 13, scope: !4011)
!4014 = !DILocation(line: 1610, column: 8, scope: !4012)
!4015 = !DILocation(line: 1613, column: 21, scope: !4016)
!4016 = distinct !DILexicalBlock(scope: !4011, file: !3, line: 1611, column: 6)
!4017 = !DILocation(line: 1613, column: 25, scope: !4016)
!4018 = !DILocation(line: 1613, column: 12, scope: !4016)
!4019 = !DILocation(line: 1613, column: 3, scope: !4016)
!4020 = !DILocation(line: 1612, column: 8, scope: !4016)
!4021 = !DILocation(line: 1612, column: 12, scope: !4016)
!4022 = !DILocation(line: 1612, column: 27, scope: !4016)
!4023 = !DILocation(line: 1616, column: 21, scope: !4016)
!4024 = !DILocation(line: 1616, column: 25, scope: !4016)
!4025 = !DILocation(line: 1616, column: 12, scope: !4016)
!4026 = !DILocation(line: 1616, column: 3, scope: !4016)
!4027 = !DILocation(line: 1615, column: 8, scope: !4016)
!4028 = !DILocation(line: 1615, column: 12, scope: !4016)
!4029 = !DILocation(line: 1615, column: 32, scope: !4016)
!4030 = !DILocation(line: 1618, column: 6, scope: !4016)
!4031 = !DILocation(line: 1619, column: 36, scope: !4012)
!4032 = !DILocation(line: 1619, column: 4, scope: !4012)
!4033 = !DILocation(line: 1619, column: 8, scope: !4012)
!4034 = !DILocation(line: 1619, column: 23, scope: !4012)
!4035 = !DILocation(line: 1619, column: 30, scope: !4012)
!4036 = !DILocation(line: 1620, column: 41, scope: !4012)
!4037 = !DILocation(line: 1620, column: 4, scope: !4012)
!4038 = !DILocation(line: 1620, column: 8, scope: !4012)
!4039 = !DILocation(line: 1620, column: 28, scope: !4012)
!4040 = !DILocation(line: 1620, column: 35, scope: !4012)
!4041 = !DILocation(line: 1621, column: 4, scope: !4012)
!4042 = !DILocation(line: 1625, column: 21, scope: !3989)
!4043 = !DILocation(line: 1625, column: 7, scope: !3989)
!4044 = !DILocation(line: 1626, column: 50, scope: !3989)
!4045 = !DILocation(line: 1626, column: 60, scope: !3989)
!4046 = !DILocation(line: 1626, column: 14, scope: !3989)
!4047 = !DILocation(line: 1626, column: 12, scope: !3989)
!4048 = !DILocation(line: 1627, column: 11, scope: !4049)
!4049 = distinct !DILexicalBlock(scope: !3989, file: !3, line: 1627, column: 11)
!4050 = !DILocation(line: 1627, column: 16, scope: !4049)
!4051 = !DILocation(line: 1627, column: 11, scope: !3989)
!4052 = !DILocation(line: 1629, column: 34, scope: !4053)
!4053 = distinct !DILexicalBlock(scope: !4049, file: !3, line: 1628, column: 2)
!4054 = !DILocation(line: 1629, column: 38, scope: !4053)
!4055 = !DILocation(line: 1629, column: 45, scope: !4053)
!4056 = !DILocation(line: 1629, column: 4, scope: !4053)
!4057 = !DILocation(line: 1630, column: 8, scope: !4058)
!4058 = distinct !DILexicalBlock(scope: !4053, file: !3, line: 1630, column: 8)
!4059 = !DILocation(line: 1630, column: 8, scope: !4053)
!4060 = !DILocation(line: 1631, column: 15, scope: !4058)
!4061 = !DILocation(line: 1633, column: 18, scope: !4058)
!4062 = !DILocation(line: 1633, column: 22, scope: !4058)
!4063 = !DILocation(line: 1633, column: 8, scope: !4058)
!4064 = !DILocation(line: 1633, column: 29, scope: !4058)
!4065 = !DILocation(line: 1631, column: 6, scope: !4058)
!4066 = !DILocation(line: 1634, column: 4, scope: !4053)
!4067 = !DILocation(line: 1636, column: 12, scope: !4068)
!4068 = distinct !DILexicalBlock(scope: !3989, file: !3, line: 1636, column: 11)
!4069 = !DILocation(line: 1636, column: 16, scope: !4068)
!4070 = !DILocation(line: 1636, column: 11, scope: !3989)
!4071 = !DILocation(line: 1639, column: 24, scope: !4072)
!4072 = distinct !DILexicalBlock(scope: !4068, file: !3, line: 1637, column: 2)
!4073 = !DILocation(line: 1639, column: 28, scope: !4072)
!4074 = !DILocation(line: 1639, column: 15, scope: !4072)
!4075 = !DILocation(line: 1639, column: 6, scope: !4072)
!4076 = !DILocation(line: 1638, column: 4, scope: !4072)
!4077 = !DILocation(line: 1638, column: 8, scope: !4072)
!4078 = !DILocation(line: 1638, column: 23, scope: !4072)
!4079 = !DILocation(line: 1641, column: 24, scope: !4072)
!4080 = !DILocation(line: 1641, column: 28, scope: !4072)
!4081 = !DILocation(line: 1641, column: 15, scope: !4072)
!4082 = !DILocation(line: 1641, column: 6, scope: !4072)
!4083 = !DILocation(line: 1640, column: 4, scope: !4072)
!4084 = !DILocation(line: 1640, column: 8, scope: !4072)
!4085 = !DILocation(line: 1640, column: 28, scope: !4072)
!4086 = !DILocation(line: 1642, column: 2, scope: !4072)
!4087 = !DILocation(line: 1643, column: 35, scope: !3989)
!4088 = !DILocation(line: 1643, column: 7, scope: !3989)
!4089 = !DILocation(line: 1643, column: 11, scope: !3989)
!4090 = !DILocation(line: 1643, column: 26, scope: !3989)
!4091 = !DILocation(line: 1643, column: 33, scope: !3989)
!4092 = !DILocation(line: 1644, column: 40, scope: !3989)
!4093 = !DILocation(line: 1644, column: 7, scope: !3989)
!4094 = !DILocation(line: 1644, column: 11, scope: !3989)
!4095 = !DILocation(line: 1644, column: 31, scope: !3989)
!4096 = !DILocation(line: 1644, column: 38, scope: !3989)
!4097 = !DILocation(line: 1645, column: 5, scope: !3989)
!4098 = !DILocation(line: 1596, column: 63, scope: !3983)
!4099 = !DILocation(line: 1596, column: 3, scope: !3983)
!4100 = distinct !{!4100, !3987, !4101}
!4101 = !DILocation(line: 1645, column: 5, scope: !3980)
!4102 = !DILocation(line: 1648, column: 16, scope: !4103)
!4103 = distinct !DILexicalBlock(scope: !3924, file: !3, line: 1648, column: 3)
!4104 = !DILocation(line: 1648, column: 20, scope: !4103)
!4105 = !DILocation(line: 1648, column: 14, scope: !4103)
!4106 = !DILocation(line: 1648, column: 8, scope: !4103)
!4107 = !DILocation(line: 1649, column: 8, scope: !4108)
!4108 = distinct !DILexicalBlock(scope: !4103, file: !3, line: 1648, column: 3)
!4109 = !DILocation(line: 1649, column: 16, scope: !4108)
!4110 = !DILocation(line: 1649, column: 20, scope: !4108)
!4111 = !DILocation(line: 1649, column: 14, scope: !4108)
!4112 = !DILocation(line: 1648, column: 3, scope: !4103)
!4113 = !DILocation(line: 1650, column: 5, scope: !4108)
!4114 = !DILocation(line: 1650, column: 9, scope: !4108)
!4115 = !DILocation(line: 1650, column: 26, scope: !4108)
!4116 = !DILocation(line: 1650, column: 33, scope: !4108)
!4117 = !DILocation(line: 1649, column: 45, scope: !4108)
!4118 = !DILocation(line: 1648, column: 3, scope: !4108)
!4119 = distinct !{!4119, !4112, !4120}
!4120 = !DILocation(line: 1650, column: 35, scope: !4103)
!4121 = !DILocation(line: 1651, column: 3, scope: !3924)
!4122 = !DILocation(line: 1652, column: 1, scope: !3924)
!4123 = distinct !DISubprogram(name: "transform_allocation_sites", scope: !3, file: !3, line: 2013, type: !3775, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!4124 = !DILocalVariable(name: "slot", arg: 1, scope: !4123, file: !3, line: 2013, type: !2080)
!4125 = !DILocation(line: 2013, column: 36, scope: !4123)
!4126 = !DILocalVariable(name: "data", arg: 2, scope: !4123, file: !3, line: 2013, type: !1574)
!4127 = !DILocation(line: 2013, column: 48, scope: !4123)
!4128 = !DILocalVariable(name: "i", scope: !4123, file: !3, line: 2015, type: !1575)
!4129 = !DILocation(line: 2015, column: 7, scope: !4123)
!4130 = !DILocalVariable(name: "mi", scope: !4123, file: !3, line: 2016, type: !2986)
!4131 = !DILocation(line: 2016, column: 23, scope: !4123)
!4132 = !DILocalVariable(name: "type", scope: !4123, file: !3, line: 2017, type: !1762)
!4133 = !DILocation(line: 2017, column: 8, scope: !4123)
!4134 = !DILocalVariable(name: "oldfn", scope: !4123, file: !3, line: 2017, type: !1762)
!4135 = !DILocation(line: 2017, column: 14, scope: !4123)
!4136 = !DILocalVariable(name: "prev_dim_size", scope: !4123, file: !3, line: 2017, type: !1762)
!4137 = !DILocation(line: 2017, column: 21, scope: !4123)
!4138 = !DILocalVariable(name: "call_stmt_0", scope: !4123, file: !3, line: 2018, type: !1636)
!4139 = !DILocation(line: 2018, column: 10, scope: !4123)
!4140 = !DILocalVariable(name: "use_stmt", scope: !4123, file: !3, line: 2018, type: !1636)
!4141 = !DILocation(line: 2018, column: 23, scope: !4123)
!4142 = !DILocalVariable(name: "c_node", scope: !4123, file: !3, line: 2019, type: !3050)
!4143 = !DILocation(line: 2019, column: 23, scope: !4123)
!4144 = !DILocalVariable(name: "e", scope: !4123, file: !3, line: 2020, type: !3055)
!4145 = !DILocation(line: 2020, column: 23, scope: !4123)
!4146 = !DILocalVariable(name: "gsi", scope: !4123, file: !3, line: 2021, type: !3429)
!4147 = !DILocation(line: 2021, column: 24, scope: !4123)
!4148 = !DILocalVariable(name: "mcd", scope: !4123, file: !3, line: 2022, type: !3994)
!4149 = !DILocation(line: 2022, column: 27, scope: !4123)
!4150 = !DILocalVariable(name: "element_size", scope: !4123, file: !3, line: 2023, type: !1732)
!4151 = !DILocation(line: 2023, column: 17, scope: !4123)
!4152 = !DILocalVariable(name: "imm_iter", scope: !4123, file: !3, line: 2025, type: !4153)
!4153 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !1965, line: 249, baseType: !4154)
!4154 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !1965, line: 238, size: 448, elements: !4155)
!4155 = !{!4156, !4157, !4158, !4159}
!4156 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !4154, file: !1965, line: 241, baseType: !2994, size: 64)
!4157 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !4154, file: !1965, line: 243, baseType: !2994, size: 64, offset: 64)
!4158 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !4154, file: !1965, line: 245, baseType: !2995, size: 256, offset: 128)
!4159 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !4154, file: !1965, line: 248, baseType: !2994, size: 64, offset: 384)
!4160 = !DILocation(line: 2025, column: 20, scope: !4123)
!4161 = !DILocalVariable(name: "use_p", scope: !4123, file: !3, line: 2026, type: !2993)
!4162 = !DILocation(line: 2026, column: 17, scope: !4123)
!4163 = !DILocalVariable(name: "old_size_0", scope: !4123, file: !3, line: 2027, type: !1762)
!4164 = !DILocation(line: 2027, column: 8, scope: !4123)
!4165 = !DILocalVariable(name: "tmp", scope: !4123, file: !3, line: 2027, type: !1762)
!4166 = !DILocation(line: 2027, column: 20, scope: !4123)
!4167 = !DILocalVariable(name: "min_escape_l", scope: !4123, file: !3, line: 2028, type: !1575)
!4168 = !DILocation(line: 2028, column: 7, scope: !4123)
!4169 = !DILocalVariable(name: "id", scope: !4123, file: !3, line: 2029, type: !1575)
!4170 = !DILocation(line: 2029, column: 7, scope: !4123)
!4171 = !DILocation(line: 2031, column: 32, scope: !4123)
!4172 = !DILocation(line: 2031, column: 31, scope: !4123)
!4173 = !DILocation(line: 2031, column: 8, scope: !4123)
!4174 = !DILocation(line: 2031, column: 6, scope: !4123)
!4175 = !DILocation(line: 2033, column: 18, scope: !4123)
!4176 = !DILocation(line: 2033, column: 22, scope: !4123)
!4177 = !DILocation(line: 2033, column: 16, scope: !4123)
!4178 = !DILocation(line: 2035, column: 8, scope: !4179)
!4179 = distinct !DILexicalBlock(scope: !4123, file: !3, line: 2035, column: 7)
!4180 = !DILocation(line: 2035, column: 12, scope: !4179)
!4181 = !DILocation(line: 2035, column: 7, scope: !4123)
!4182 = !DILocation(line: 2036, column: 5, scope: !4179)
!4183 = !DILocation(line: 2036, column: 9, scope: !4179)
!4184 = !DILocation(line: 2036, column: 35, scope: !4179)
!4185 = !DILocation(line: 2038, column: 7, scope: !4186)
!4186 = distinct !DILexicalBlock(scope: !4123, file: !3, line: 2038, column: 7)
!4187 = !DILocation(line: 2038, column: 11, scope: !4186)
!4188 = !DILocation(line: 2038, column: 37, scope: !4186)
!4189 = !DILocation(line: 2038, column: 7, scope: !4123)
!4190 = !DILocation(line: 2039, column: 5, scope: !4186)
!4191 = !DILocation(line: 2041, column: 34, scope: !4123)
!4192 = !DILocation(line: 2041, column: 38, scope: !4123)
!4193 = !DILocation(line: 2041, column: 25, scope: !4123)
!4194 = !DILocation(line: 2041, column: 17, scope: !4123)
!4195 = !DILocation(line: 2041, column: 3, scope: !4123)
!4196 = !DILocation(line: 2041, column: 7, scope: !4123)
!4197 = !DILocation(line: 2041, column: 15, scope: !4123)
!4198 = !DILocation(line: 2042, column: 10, scope: !4199)
!4199 = distinct !DILexicalBlock(scope: !4123, file: !3, line: 2042, column: 3)
!4200 = !DILocation(line: 2042, column: 8, scope: !4199)
!4201 = !DILocation(line: 2042, column: 15, scope: !4202)
!4202 = distinct !DILexicalBlock(scope: !4199, file: !3, line: 2042, column: 3)
!4203 = !DILocation(line: 2042, column: 19, scope: !4202)
!4204 = !DILocation(line: 2042, column: 23, scope: !4202)
!4205 = !DILocation(line: 2042, column: 17, scope: !4202)
!4206 = !DILocation(line: 2042, column: 3, scope: !4199)
!4207 = !DILocation(line: 2043, column: 22, scope: !4202)
!4208 = !DILocation(line: 2043, column: 5, scope: !4202)
!4209 = !DILocation(line: 2043, column: 9, scope: !4202)
!4210 = !DILocation(line: 2043, column: 17, scope: !4202)
!4211 = !DILocation(line: 2043, column: 20, scope: !4202)
!4212 = !DILocation(line: 2042, column: 51, scope: !4202)
!4213 = !DILocation(line: 2042, column: 3, scope: !4202)
!4214 = distinct !{!4214, !4206, !4215}
!4215 = !DILocation(line: 2043, column: 22, scope: !4199)
!4216 = !DILocation(line: 2044, column: 7, scope: !4217)
!4217 = distinct !DILexicalBlock(scope: !4123, file: !3, line: 2044, column: 7)
!4218 = !DILocation(line: 2044, column: 7, scope: !4123)
!4219 = !DILocalVariable(name: "i", scope: !4220, file: !3, line: 2046, type: !1575)
!4220 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 2045, column: 5)
!4221 = !DILocation(line: 2046, column: 11, scope: !4220)
!4222 = !DILocation(line: 2048, column: 11, scope: !4223)
!4223 = distinct !DILexicalBlock(scope: !4220, file: !3, line: 2048, column: 11)
!4224 = !DILocation(line: 2048, column: 11, scope: !4220)
!4225 = !DILocation(line: 2050, column: 13, scope: !4226)
!4226 = distinct !DILexicalBlock(scope: !4223, file: !3, line: 2049, column: 2)
!4227 = !DILocation(line: 2050, column: 50, scope: !4226)
!4228 = !DILocation(line: 2050, column: 54, scope: !4226)
!4229 = !DILocation(line: 2050, column: 40, scope: !4226)
!4230 = !DILocation(line: 2050, column: 4, scope: !4226)
!4231 = !DILocation(line: 2051, column: 11, scope: !4232)
!4232 = distinct !DILexicalBlock(scope: !4226, file: !3, line: 2051, column: 4)
!4233 = !DILocation(line: 2051, column: 9, scope: !4232)
!4234 = !DILocation(line: 2051, column: 16, scope: !4235)
!4235 = distinct !DILexicalBlock(scope: !4232, file: !3, line: 2051, column: 4)
!4236 = !DILocation(line: 2051, column: 20, scope: !4235)
!4237 = !DILocation(line: 2051, column: 18, scope: !4235)
!4238 = !DILocation(line: 2051, column: 4, scope: !4232)
!4239 = !DILocation(line: 2053, column: 17, scope: !4240)
!4240 = distinct !DILexicalBlock(scope: !4235, file: !3, line: 2052, column: 6)
!4241 = !DILocation(line: 2053, column: 51, scope: !4240)
!4242 = !DILocation(line: 2053, column: 8, scope: !4240)
!4243 = !DILocation(line: 2054, column: 12, scope: !4244)
!4244 = distinct !DILexicalBlock(scope: !4240, file: !3, line: 2054, column: 12)
!4245 = !DILocation(line: 2054, column: 16, scope: !4244)
!4246 = !DILocation(line: 2054, column: 12, scope: !4240)
!4247 = !DILocation(line: 2055, column: 12, scope: !4244)
!4248 = !DILocation(line: 2057, column: 5, scope: !4244)
!4249 = !DILocation(line: 2057, column: 9, scope: !4244)
!4250 = !DILocation(line: 2057, column: 23, scope: !4244)
!4251 = !DILocation(line: 2055, column: 3, scope: !4244)
!4252 = !DILocation(line: 2058, column: 6, scope: !4240)
!4253 = !DILocation(line: 2051, column: 35, scope: !4235)
!4254 = !DILocation(line: 2051, column: 4, scope: !4235)
!4255 = distinct !{!4255, !4238, !4256}
!4256 = !DILocation(line: 2058, column: 6, scope: !4232)
!4257 = !DILocation(line: 2059, column: 2, scope: !4226)
!4258 = !DILocation(line: 2060, column: 27, scope: !4220)
!4259 = !DILocation(line: 2060, column: 31, scope: !4220)
!4260 = !DILocation(line: 2060, column: 46, scope: !4220)
!4261 = !DILocation(line: 2060, column: 50, scope: !4220)
!4262 = !DILocation(line: 2061, column: 6, scope: !4220)
!4263 = !DILocation(line: 2061, column: 10, scope: !4220)
!4264 = !DILocation(line: 2060, column: 7, scope: !4220)
!4265 = !DILocation(line: 2062, column: 11, scope: !4266)
!4266 = distinct !DILexicalBlock(scope: !4220, file: !3, line: 2062, column: 11)
!4267 = !DILocation(line: 2062, column: 11, scope: !4220)
!4268 = !DILocation(line: 2063, column: 9, scope: !4269)
!4269 = distinct !DILexicalBlock(scope: !4266, file: !3, line: 2063, column: 2)
!4270 = !DILocation(line: 2063, column: 7, scope: !4269)
!4271 = !DILocation(line: 2063, column: 14, scope: !4272)
!4272 = distinct !DILexicalBlock(scope: !4269, file: !3, line: 2063, column: 2)
!4273 = !DILocation(line: 2063, column: 18, scope: !4272)
!4274 = !DILocation(line: 2063, column: 16, scope: !4272)
!4275 = !DILocation(line: 2063, column: 2, scope: !4269)
!4276 = !DILocation(line: 2065, column: 15, scope: !4277)
!4277 = distinct !DILexicalBlock(scope: !4272, file: !3, line: 2064, column: 4)
!4278 = !DILocation(line: 2065, column: 49, scope: !4277)
!4279 = !DILocation(line: 2065, column: 6, scope: !4277)
!4280 = !DILocation(line: 2066, column: 10, scope: !4281)
!4281 = distinct !DILexicalBlock(scope: !4277, file: !3, line: 2066, column: 10)
!4282 = !DILocation(line: 2066, column: 14, scope: !4281)
!4283 = !DILocation(line: 2066, column: 10, scope: !4277)
!4284 = !DILocation(line: 2067, column: 17, scope: !4281)
!4285 = !DILocation(line: 2068, column: 34, scope: !4281)
!4286 = !DILocation(line: 2068, column: 38, scope: !4281)
!4287 = !DILocation(line: 2068, column: 52, scope: !4281)
!4288 = !DILocation(line: 2067, column: 8, scope: !4281)
!4289 = !DILocation(line: 2069, column: 4, scope: !4277)
!4290 = !DILocation(line: 2063, column: 33, scope: !4272)
!4291 = !DILocation(line: 2063, column: 2, scope: !4272)
!4292 = distinct !{!4292, !4275, !4293}
!4293 = !DILocation(line: 2069, column: 4, scope: !4269)
!4294 = !DILocation(line: 2070, column: 14, scope: !4295)
!4295 = distinct !DILexicalBlock(scope: !4220, file: !3, line: 2070, column: 7)
!4296 = !DILocation(line: 2070, column: 12, scope: !4295)
!4297 = !DILocation(line: 2070, column: 19, scope: !4298)
!4298 = distinct !DILexicalBlock(scope: !4295, file: !3, line: 2070, column: 7)
!4299 = !DILocation(line: 2070, column: 23, scope: !4298)
!4300 = !DILocation(line: 2070, column: 27, scope: !4298)
!4301 = !DILocation(line: 2070, column: 21, scope: !4298)
!4302 = !DILocation(line: 2070, column: 7, scope: !4295)
!4303 = !DILocation(line: 2072, column: 8, scope: !4304)
!4304 = distinct !DILexicalBlock(scope: !4305, file: !3, line: 2072, column: 8)
!4305 = distinct !DILexicalBlock(scope: !4298, file: !3, line: 2071, column: 2)
!4306 = !DILocation(line: 2072, column: 8, scope: !4305)
!4307 = !DILocation(line: 2073, column: 15, scope: !4304)
!4308 = !DILocation(line: 2073, column: 57, scope: !4304)
!4309 = !DILocation(line: 2074, column: 8, scope: !4304)
!4310 = !DILocation(line: 2074, column: 12, scope: !4304)
!4311 = !DILocation(line: 2074, column: 20, scope: !4304)
!4312 = !DILocation(line: 2073, column: 6, scope: !4304)
!4313 = !DILocation(line: 2075, column: 8, scope: !4314)
!4314 = distinct !DILexicalBlock(scope: !4305, file: !3, line: 2075, column: 8)
!4315 = !DILocation(line: 2075, column: 12, scope: !4314)
!4316 = !DILocation(line: 2075, column: 20, scope: !4314)
!4317 = !DILocation(line: 2075, column: 26, scope: !4314)
!4318 = !DILocation(line: 2075, column: 23, scope: !4314)
!4319 = !DILocation(line: 2075, column: 8, scope: !4305)
!4320 = !DILocation(line: 2077, column: 12, scope: !4321)
!4321 = distinct !DILexicalBlock(scope: !4322, file: !3, line: 2077, column: 12)
!4322 = distinct !DILexicalBlock(scope: !4314, file: !3, line: 2076, column: 6)
!4323 = !DILocation(line: 2077, column: 12, scope: !4322)
!4324 = !DILocation(line: 2078, column: 12, scope: !4321)
!4325 = !DILocation(line: 2080, column: 5, scope: !4321)
!4326 = !DILocation(line: 2080, column: 9, scope: !4321)
!4327 = !DILocation(line: 2080, column: 17, scope: !4321)
!4328 = !DILocation(line: 2080, column: 21, scope: !4321)
!4329 = !DILocation(line: 2078, column: 3, scope: !4321)
!4330 = !DILocation(line: 2081, column: 8, scope: !4322)
!4331 = !DILocation(line: 2081, column: 12, scope: !4322)
!4332 = !DILocation(line: 2081, column: 28, scope: !4322)
!4333 = !DILocation(line: 2082, column: 6, scope: !4322)
!4334 = !DILocation(line: 2083, column: 2, scope: !4305)
!4335 = !DILocation(line: 2070, column: 55, scope: !4298)
!4336 = !DILocation(line: 2070, column: 7, scope: !4298)
!4337 = distinct !{!4337, !4302, !4338}
!4338 = !DILocation(line: 2083, column: 2, scope: !4295)
!4339 = !DILocation(line: 2084, column: 5, scope: !4220)
!4340 = !DILocation(line: 2087, column: 14, scope: !4341)
!4341 = distinct !DILexicalBlock(scope: !4342, file: !3, line: 2087, column: 7)
!4342 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 2086, column: 5)
!4343 = !DILocation(line: 2087, column: 12, scope: !4341)
!4344 = !DILocation(line: 2087, column: 19, scope: !4345)
!4345 = distinct !DILexicalBlock(scope: !4341, file: !3, line: 2087, column: 7)
!4346 = !DILocation(line: 2087, column: 23, scope: !4345)
!4347 = !DILocation(line: 2087, column: 27, scope: !4345)
!4348 = !DILocation(line: 2087, column: 21, scope: !4345)
!4349 = !DILocation(line: 2087, column: 7, scope: !4341)
!4350 = !DILocation(line: 2088, column: 19, scope: !4345)
!4351 = !DILocation(line: 2088, column: 2, scope: !4345)
!4352 = !DILocation(line: 2088, column: 6, scope: !4345)
!4353 = !DILocation(line: 2088, column: 14, scope: !4345)
!4354 = !DILocation(line: 2088, column: 17, scope: !4345)
!4355 = !DILocation(line: 2087, column: 55, scope: !4345)
!4356 = !DILocation(line: 2087, column: 7, scope: !4345)
!4357 = distinct !{!4357, !4349, !4358}
!4358 = !DILocation(line: 2088, column: 19, scope: !4341)
!4359 = !DILocation(line: 2091, column: 17, scope: !4123)
!4360 = !DILocation(line: 2091, column: 21, scope: !4123)
!4361 = !DILocation(line: 2091, column: 15, scope: !4123)
!4362 = !DILocation(line: 2094, column: 33, scope: !4123)
!4363 = !DILocation(line: 2094, column: 3, scope: !4123)
!4364 = !DILocation(line: 2096, column: 31, scope: !4123)
!4365 = !DILocation(line: 2096, column: 3, scope: !4123)
!4366 = !DILocation(line: 2096, column: 7, scope: !4123)
!4367 = !DILocation(line: 2096, column: 25, scope: !4123)
!4368 = !DILocation(line: 2097, column: 36, scope: !4123)
!4369 = !DILocation(line: 2097, column: 3, scope: !4123)
!4370 = !DILocation(line: 2097, column: 7, scope: !4123)
!4371 = !DILocation(line: 2097, column: 30, scope: !4123)
!4372 = !DILocation(line: 2101, column: 10, scope: !4373)
!4373 = distinct !DILexicalBlock(scope: !4123, file: !3, line: 2101, column: 3)
!4374 = !DILocation(line: 2101, column: 8, scope: !4373)
!4375 = !DILocation(line: 2101, column: 15, scope: !4376)
!4376 = distinct !DILexicalBlock(scope: !4373, file: !3, line: 2101, column: 3)
!4377 = !DILocation(line: 2101, column: 19, scope: !4376)
!4378 = !DILocation(line: 2101, column: 23, scope: !4376)
!4379 = !DILocation(line: 2101, column: 17, scope: !4376)
!4380 = !DILocation(line: 2101, column: 3, scope: !4373)
!4381 = !DILocalVariable(name: "t", scope: !4382, file: !3, line: 2103, type: !1762)
!4382 = distinct !DILexicalBlock(scope: !4376, file: !3, line: 2102, column: 5)
!4383 = !DILocation(line: 2103, column: 12, scope: !4382)
!4384 = !DILocalVariable(name: "data", scope: !4382, file: !3, line: 2104, type: !2999)
!4385 = !DILocation(line: 2104, column: 22, scope: !4382)
!4386 = !DILocation(line: 2108, column: 7, scope: !4382)
!4387 = !DILocation(line: 2110, column: 17, scope: !4382)
!4388 = !DILocation(line: 2110, column: 21, scope: !4382)
!4389 = !DILocation(line: 2110, column: 12, scope: !4382)
!4390 = !DILocation(line: 2110, column: 15, scope: !4382)
!4391 = !DILocation(line: 2111, column: 12, scope: !4382)
!4392 = !DILocation(line: 2111, column: 17, scope: !4382)
!4393 = !DILocation(line: 2112, column: 11, scope: !4382)
!4394 = !DILocation(line: 2112, column: 9, scope: !4382)
!4395 = !DILocation(line: 2115, column: 11, scope: !4396)
!4396 = distinct !DILexicalBlock(scope: !4382, file: !3, line: 2115, column: 11)
!4397 = !DILocation(line: 2115, column: 13, scope: !4396)
!4398 = !DILocation(line: 2115, column: 11, scope: !4382)
!4399 = !DILocation(line: 2117, column: 34, scope: !4400)
!4400 = distinct !DILexicalBlock(scope: !4396, file: !3, line: 2116, column: 2)
!4401 = !DILocation(line: 2117, column: 38, scope: !4400)
!4402 = !DILocation(line: 2117, column: 46, scope: !4400)
!4403 = !DILocation(line: 2117, column: 4, scope: !4400)
!4404 = !DILocation(line: 2118, column: 4, scope: !4400)
!4405 = !DILocation(line: 2120, column: 5, scope: !4382)
!4406 = !DILocation(line: 2101, column: 51, scope: !4376)
!4407 = !DILocation(line: 2101, column: 3, scope: !4376)
!4408 = distinct !{!4408, !4380, !4409}
!4409 = !DILocation(line: 2120, column: 5, scope: !4373)
!4410 = !DILocation(line: 2122, column: 7, scope: !4411)
!4411 = distinct !DILexicalBlock(scope: !4123, file: !3, line: 2122, column: 7)
!4412 = !DILocation(line: 2122, column: 11, scope: !4411)
!4413 = !DILocation(line: 2122, column: 37, scope: !4411)
!4414 = !DILocation(line: 2122, column: 7, scope: !4123)
!4415 = !DILocation(line: 2123, column: 5, scope: !4411)
!4416 = !DILocation(line: 2127, column: 23, scope: !4123)
!4417 = !DILocation(line: 2127, column: 9, scope: !4123)
!4418 = !DILocation(line: 2134, column: 11, scope: !4123)
!4419 = !DILocation(line: 2134, column: 9, scope: !4123)
!4420 = !DILocation(line: 2135, column: 27, scope: !4123)
!4421 = !DILocation(line: 2135, column: 31, scope: !4123)
!4422 = !DILocation(line: 2135, column: 25, scope: !4123)
!4423 = !DILocation(line: 2136, column: 14, scope: !4123)
!4424 = !DILocation(line: 2136, column: 3, scope: !4123)
!4425 = !DILocation(line: 2141, column: 18, scope: !4123)
!4426 = !DILocation(line: 2141, column: 22, scope: !4123)
!4427 = !DILocation(line: 2141, column: 42, scope: !4123)
!4428 = !DILocation(line: 2141, column: 46, scope: !4123)
!4429 = !DILocation(line: 2141, column: 16, scope: !4123)
!4430 = !DILocation(line: 2142, column: 17, scope: !4123)
!4431 = !DILocation(line: 2144, column: 12, scope: !4432)
!4432 = distinct !DILexicalBlock(scope: !4123, file: !3, line: 2144, column: 3)
!4433 = !DILocation(line: 2144, column: 16, scope: !4432)
!4434 = !DILocation(line: 2144, column: 42, scope: !4432)
!4435 = !DILocation(line: 2144, column: 10, scope: !4432)
!4436 = !DILocation(line: 2144, column: 8, scope: !4432)
!4437 = !DILocation(line: 2144, column: 47, scope: !4438)
!4438 = distinct !DILexicalBlock(scope: !4432, file: !3, line: 2144, column: 3)
!4439 = !DILocation(line: 2144, column: 49, scope: !4438)
!4440 = !DILocation(line: 2144, column: 3, scope: !4432)
!4441 = !DILocalVariable(name: "dim_size", scope: !4442, file: !3, line: 2146, type: !1762)
!4442 = distinct !DILexicalBlock(scope: !4438, file: !3, line: 2145, column: 5)
!4443 = !DILocation(line: 2146, column: 12, scope: !4442)
!4444 = !DILocalVariable(name: "dim_var", scope: !4442, file: !3, line: 2146, type: !1762)
!4445 = !DILocation(line: 2146, column: 22, scope: !4442)
!4446 = !DILocalVariable(name: "stmt", scope: !4442, file: !3, line: 2147, type: !1636)
!4447 = !DILocation(line: 2147, column: 14, scope: !4442)
!4448 = !DILocalVariable(name: "d_type_size", scope: !4442, file: !3, line: 2148, type: !1762)
!4449 = !DILocation(line: 2148, column: 12, scope: !4442)
!4450 = !DILocation(line: 2153, column: 22, scope: !4442)
!4451 = !DILocation(line: 2153, column: 2, scope: !4442)
!4452 = !DILocation(line: 2152, column: 15, scope: !4442)
!4453 = !DILocation(line: 2155, column: 14, scope: !4442)
!4454 = !DILocation(line: 2155, column: 12, scope: !4442)
!4455 = !DILocation(line: 2159, column: 15, scope: !4456)
!4456 = distinct !DILexicalBlock(scope: !4442, file: !3, line: 2159, column: 7)
!4457 = !DILocation(line: 2159, column: 12, scope: !4456)
!4458 = !DILocation(line: 2159, column: 20, scope: !4459)
!4459 = distinct !DILexicalBlock(scope: !4456, file: !3, line: 2159, column: 7)
!4460 = !DILocation(line: 2159, column: 25, scope: !4459)
!4461 = !DILocation(line: 2159, column: 29, scope: !4459)
!4462 = !DILocation(line: 2159, column: 23, scope: !4459)
!4463 = !DILocation(line: 2159, column: 7, scope: !4456)
!4464 = !DILocation(line: 2160, column: 6, scope: !4465)
!4465 = distinct !DILexicalBlock(scope: !4459, file: !3, line: 2160, column: 6)
!4466 = !DILocation(line: 2160, column: 10, scope: !4465)
!4467 = !DILocation(line: 2160, column: 18, scope: !4465)
!4468 = !DILocation(line: 2160, column: 25, scope: !4465)
!4469 = !DILocation(line: 2160, column: 22, scope: !4465)
!4470 = !DILocation(line: 2160, column: 6, scope: !4459)
!4471 = !DILocation(line: 2161, column: 4, scope: !4465)
!4472 = !DILocation(line: 2159, column: 58, scope: !4459)
!4473 = !DILocation(line: 2159, column: 7, scope: !4459)
!4474 = distinct !{!4474, !4463, !4475}
!4475 = !DILocation(line: 2161, column: 4, scope: !4456)
!4476 = !DILocation(line: 2163, column: 24, scope: !4442)
!4477 = !DILocation(line: 2163, column: 30, scope: !4442)
!4478 = !DILocation(line: 2163, column: 34, scope: !4442)
!4479 = !DILocation(line: 2163, column: 54, scope: !4442)
!4480 = !DILocation(line: 2163, column: 57, scope: !4442)
!4481 = !DILocation(line: 2163, column: 9, scope: !4442)
!4482 = !DILocation(line: 2162, column: 20, scope: !4442)
!4483 = !DILocation(line: 2164, column: 12, scope: !4484)
!4484 = distinct !DILexicalBlock(scope: !4442, file: !3, line: 2164, column: 11)
!4485 = !DILocation(line: 2164, column: 11, scope: !4442)
!4486 = !DILocation(line: 2165, column: 33, scope: !4484)
!4487 = !DILocation(line: 2165, column: 39, scope: !4484)
!4488 = !DILocation(line: 2165, column: 18, scope: !4484)
!4489 = !DILocation(line: 2165, column: 16, scope: !4484)
!4490 = !DILocation(line: 2165, column: 2, scope: !4484)
!4491 = !DILocation(line: 2166, column: 12, scope: !4492)
!4492 = distinct !DILexicalBlock(scope: !4442, file: !3, line: 2166, column: 11)
!4493 = !DILocation(line: 2166, column: 30, scope: !4492)
!4494 = !DILocation(line: 2166, column: 33, scope: !4492)
!4495 = !DILocation(line: 2166, column: 38, scope: !4492)
!4496 = !DILocation(line: 2166, column: 42, scope: !4492)
!4497 = !DILocation(line: 2166, column: 68, scope: !4492)
!4498 = !DILocation(line: 2166, column: 35, scope: !4492)
!4499 = !DILocation(line: 2166, column: 11, scope: !4442)
!4500 = !DILocation(line: 2168, column: 15, scope: !4501)
!4501 = distinct !DILexicalBlock(scope: !4492, file: !3, line: 2167, column: 2)
!4502 = !DILocation(line: 2168, column: 19, scope: !4501)
!4503 = !DILocation(line: 2168, column: 39, scope: !4501)
!4504 = !DILocation(line: 2168, column: 13, scope: !4501)
!4505 = !DILocation(line: 2169, column: 2, scope: !4501)
!4506 = !DILocation(line: 2173, column: 6, scope: !4507)
!4507 = distinct !DILexicalBlock(scope: !4492, file: !3, line: 2171, column: 2)
!4508 = !DILocation(line: 2172, column: 13, scope: !4507)
!4509 = !DILocation(line: 2176, column: 15, scope: !4507)
!4510 = !DILocation(line: 2176, column: 13, scope: !4507)
!4511 = !DILocation(line: 2178, column: 50, scope: !4442)
!4512 = !DILocation(line: 2178, column: 18, scope: !4442)
!4513 = !DILocation(line: 2178, column: 16, scope: !4442)
!4514 = !DILocation(line: 2181, column: 14, scope: !4442)
!4515 = !DILocation(line: 2181, column: 12, scope: !4442)
!4516 = !DILocation(line: 2182, column: 34, scope: !4442)
!4517 = !DILocation(line: 2182, column: 7, scope: !4442)
!4518 = !DILocation(line: 2183, column: 32, scope: !4442)
!4519 = !DILocation(line: 2183, column: 7, scope: !4442)
!4520 = !DILocation(line: 2185, column: 47, scope: !4442)
!4521 = !DILocation(line: 2185, column: 23, scope: !4442)
!4522 = !DILocation(line: 2185, column: 27, scope: !4442)
!4523 = !DILocation(line: 2185, column: 42, scope: !4442)
!4524 = !DILocation(line: 2185, column: 45, scope: !4442)
!4525 = !DILocation(line: 2185, column: 21, scope: !4442)
!4526 = !DILocation(line: 2186, column: 5, scope: !4442)
!4527 = !DILocation(line: 2144, column: 56, scope: !4438)
!4528 = !DILocation(line: 2144, column: 3, scope: !4438)
!4529 = distinct !{!4529, !4440, !4530}
!4530 = !DILocation(line: 2186, column: 5, scope: !4432)
!4531 = !DILocation(line: 2187, column: 3, scope: !4123)
!4532 = !DILocation(line: 2190, column: 25, scope: !4123)
!4533 = !DILocation(line: 2190, column: 29, scope: !4123)
!4534 = !DILocation(line: 2190, column: 12, scope: !4123)
!4535 = !DILocation(line: 2190, column: 10, scope: !4123)
!4536 = !DILocation(line: 2191, column: 33, scope: !4123)
!4537 = !DILocation(line: 2191, column: 16, scope: !4123)
!4538 = !DILocation(line: 2191, column: 14, scope: !4123)
!4539 = !DILocation(line: 2192, column: 41, scope: !4123)
!4540 = !DILocation(line: 2192, column: 45, scope: !4123)
!4541 = !DILocation(line: 2192, column: 9, scope: !4123)
!4542 = !DILocation(line: 2192, column: 7, scope: !4123)
!4543 = !DILocation(line: 2194, column: 7, scope: !4544)
!4544 = distinct !DILexicalBlock(scope: !4123, file: !3, line: 2194, column: 7)
!4545 = !DILocation(line: 2194, column: 30, scope: !4544)
!4546 = !DILocation(line: 2194, column: 7, scope: !4123)
!4547 = !DILocation(line: 2196, column: 7, scope: !4548)
!4548 = distinct !DILexicalBlock(scope: !4549, file: !3, line: 2196, column: 7)
!4549 = distinct !DILexicalBlock(scope: !4544, file: !3, line: 2195, column: 5)
!4550 = !DILocation(line: 2196, column: 7, scope: !4551)
!4551 = distinct !DILexicalBlock(scope: !4548, file: !3, line: 2196, column: 7)
!4552 = !DILocation(line: 2197, column: 2, scope: !4553)
!4553 = distinct !DILexicalBlock(scope: !4551, file: !3, line: 2197, column: 2)
!4554 = !DILocation(line: 2197, column: 2, scope: !4555)
!4555 = distinct !DILexicalBlock(scope: !4553, file: !3, line: 2197, column: 2)
!4556 = !DILocation(line: 2198, column: 6, scope: !4557)
!4557 = distinct !DILexicalBlock(scope: !4555, file: !3, line: 2198, column: 6)
!4558 = !DILocation(line: 2198, column: 18, scope: !4557)
!4559 = !DILocation(line: 2198, column: 15, scope: !4557)
!4560 = !DILocation(line: 2198, column: 6, scope: !4555)
!4561 = !DILocation(line: 2199, column: 2, scope: !4557)
!4562 = distinct !{!4562, !4552, !4563}
!4563 = !DILocation(line: 2199, column: 2, scope: !4553)
!4564 = distinct !{!4564, !4547, !4565}
!4565 = !DILocation(line: 2199, column: 2, scope: !4548)
!4566 = !DILocation(line: 2200, column: 5, scope: !4549)
!4567 = !DILocation(line: 2206, column: 10, scope: !4568)
!4568 = distinct !DILexicalBlock(scope: !4123, file: !3, line: 2206, column: 3)
!4569 = !DILocation(line: 2206, column: 8, scope: !4568)
!4570 = !DILocation(line: 2206, column: 15, scope: !4571)
!4571 = distinct !DILexicalBlock(scope: !4568, file: !3, line: 2206, column: 3)
!4572 = !DILocation(line: 2206, column: 19, scope: !4571)
!4573 = !DILocation(line: 2206, column: 23, scope: !4571)
!4574 = !DILocation(line: 2206, column: 17, scope: !4571)
!4575 = !DILocation(line: 2206, column: 3, scope: !4568)
!4576 = !DILocalVariable(name: "gsi", scope: !4577, file: !3, line: 2208, type: !3429)
!4577 = distinct !DILexicalBlock(scope: !4571, file: !3, line: 2207, column: 5)
!4578 = !DILocation(line: 2208, column: 28, scope: !4577)
!4579 = !DILocalVariable(name: "use_stmt1", scope: !4577, file: !3, line: 2209, type: !1636)
!4580 = !DILocation(line: 2209, column: 14, scope: !4577)
!4581 = !DILocalVariable(name: "call_stmt", scope: !4577, file: !3, line: 2211, type: !1636)
!4582 = !DILocation(line: 2211, column: 14, scope: !4577)
!4583 = !DILocation(line: 2211, column: 26, scope: !4577)
!4584 = !DILocation(line: 2211, column: 30, scope: !4577)
!4585 = !DILocation(line: 2211, column: 47, scope: !4577)
!4586 = !DILocation(line: 2212, column: 7, scope: !4577)
!4587 = !DILocation(line: 2213, column: 24, scope: !4577)
!4588 = !DILocation(line: 2213, column: 32, scope: !4577)
!4589 = !DILocation(line: 2213, column: 11, scope: !4577)
!4590 = !DILocation(line: 2213, column: 9, scope: !4577)
!4591 = !DILocation(line: 2214, column: 7, scope: !4577)
!4592 = !DILocation(line: 2215, column: 27, scope: !4577)
!4593 = !DILocation(line: 2215, column: 7, scope: !4577)
!4594 = !DILocation(line: 2216, column: 27, scope: !4577)
!4595 = !DILocation(line: 2216, column: 13, scope: !4577)
!4596 = !DILocation(line: 2218, column: 7, scope: !4577)
!4597 = !DILocation(line: 2220, column: 7, scope: !4598)
!4598 = distinct !DILexicalBlock(scope: !4577, file: !3, line: 2220, column: 7)
!4599 = !DILocation(line: 2220, column: 7, scope: !4600)
!4600 = distinct !DILexicalBlock(scope: !4598, file: !3, line: 2220, column: 7)
!4601 = !DILocation(line: 2223, column: 14, scope: !4602)
!4602 = distinct !DILexicalBlock(scope: !4600, file: !3, line: 2222, column: 7)
!4603 = !DILocation(line: 2223, column: 12, scope: !4602)
!4604 = !DILocation(line: 2224, column: 22, scope: !4602)
!4605 = !DILocation(line: 2224, column: 8, scope: !4602)
!4606 = !DILocation(line: 2225, column: 2, scope: !4602)
!4607 = !DILocation(line: 2226, column: 7, scope: !4602)
!4608 = distinct !{!4608, !4597, !4609}
!4609 = !DILocation(line: 2226, column: 7, scope: !4598)
!4610 = !DILocation(line: 2228, column: 7, scope: !4611)
!4611 = distinct !DILexicalBlock(scope: !4577, file: !3, line: 2228, column: 7)
!4612 = !DILocation(line: 2228, column: 7, scope: !4613)
!4613 = distinct !DILexicalBlock(scope: !4611, file: !3, line: 2228, column: 7)
!4614 = !DILocation(line: 2231, column: 22, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !4613, file: !3, line: 2230, column: 7)
!4616 = !DILocation(line: 2231, column: 8, scope: !4615)
!4617 = !DILocation(line: 2232, column: 2, scope: !4615)
!4618 = !DILocation(line: 2233, column: 7, scope: !4615)
!4619 = distinct !{!4619, !4610, !4620}
!4620 = !DILocation(line: 2233, column: 7, scope: !4611)
!4621 = !DILocation(line: 2234, column: 5, scope: !4577)
!4622 = !DILocation(line: 2206, column: 51, scope: !4571)
!4623 = !DILocation(line: 2206, column: 3, scope: !4571)
!4624 = distinct !{!4624, !4575, !4625}
!4625 = !DILocation(line: 2234, column: 5, scope: !4568)
!4626 = !DILocation(line: 2235, column: 3, scope: !4123)
!4627 = !DILocation(line: 2240, column: 10, scope: !4628)
!4628 = distinct !DILexicalBlock(scope: !4123, file: !3, line: 2240, column: 3)
!4629 = !DILocation(line: 2240, column: 8, scope: !4628)
!4630 = !DILocation(line: 2240, column: 15, scope: !4631)
!4631 = distinct !DILexicalBlock(scope: !4628, file: !3, line: 2240, column: 3)
!4632 = !DILocation(line: 2240, column: 19, scope: !4631)
!4633 = !DILocation(line: 2240, column: 23, scope: !4631)
!4634 = !DILocation(line: 2240, column: 17, scope: !4631)
!4635 = !DILocation(line: 2240, column: 3, scope: !4628)
!4636 = !DILocalVariable(name: "gsi", scope: !4637, file: !3, line: 2242, type: !3429)
!4637 = distinct !DILexicalBlock(scope: !4631, file: !3, line: 2241, column: 5)
!4638 = !DILocation(line: 2242, column: 28, scope: !4637)
!4639 = !DILocation(line: 2245, column: 12, scope: !4640)
!4640 = distinct !DILexicalBlock(scope: !4637, file: !3, line: 2245, column: 11)
!4641 = !DILocation(line: 2245, column: 16, scope: !4640)
!4642 = !DILocation(line: 2245, column: 27, scope: !4640)
!4643 = !DILocation(line: 2245, column: 30, scope: !4640)
!4644 = !DILocation(line: 2245, column: 11, scope: !4637)
!4645 = !DILocation(line: 2246, column: 2, scope: !4640)
!4646 = !DILocation(line: 2248, column: 29, scope: !4637)
!4647 = !DILocation(line: 2248, column: 33, scope: !4637)
!4648 = !DILocation(line: 2248, column: 44, scope: !4637)
!4649 = !DILocation(line: 2248, column: 47, scope: !4637)
!4650 = !DILocation(line: 2248, column: 16, scope: !4637)
!4651 = !DILocation(line: 2248, column: 14, scope: !4637)
!4652 = !DILocation(line: 2249, column: 7, scope: !4637)
!4653 = !DILocation(line: 2250, column: 24, scope: !4637)
!4654 = !DILocation(line: 2250, column: 32, scope: !4637)
!4655 = !DILocation(line: 2250, column: 36, scope: !4637)
!4656 = !DILocation(line: 2250, column: 47, scope: !4637)
!4657 = !DILocation(line: 2250, column: 50, scope: !4637)
!4658 = !DILocation(line: 2250, column: 11, scope: !4637)
!4659 = !DILocation(line: 2250, column: 9, scope: !4637)
!4660 = !DILocation(line: 2251, column: 7, scope: !4637)
!4661 = !DILocation(line: 2252, column: 27, scope: !4637)
!4662 = !DILocation(line: 2252, column: 7, scope: !4637)
!4663 = !DILocation(line: 2253, column: 31, scope: !4637)
!4664 = !DILocation(line: 2253, column: 35, scope: !4637)
!4665 = !DILocation(line: 2253, column: 46, scope: !4637)
!4666 = !DILocation(line: 2253, column: 49, scope: !4637)
!4667 = !DILocation(line: 2253, column: 29, scope: !4637)
!4668 = !DILocation(line: 2254, column: 17, scope: !4637)
!4669 = !DILocation(line: 2254, column: 7, scope: !4637)
!4670 = !DILocation(line: 2255, column: 27, scope: !4637)
!4671 = !DILocation(line: 2255, column: 31, scope: !4637)
!4672 = !DILocation(line: 2255, column: 42, scope: !4637)
!4673 = !DILocation(line: 2255, column: 45, scope: !4637)
!4674 = !DILocation(line: 2255, column: 13, scope: !4637)
!4675 = !DILocation(line: 2256, column: 7, scope: !4637)
!4676 = !DILocation(line: 2257, column: 5, scope: !4637)
!4677 = !DILocation(line: 2240, column: 51, scope: !4631)
!4678 = !DILocation(line: 2240, column: 3, scope: !4631)
!4679 = distinct !{!4679, !4635, !4680}
!4680 = !DILocation(line: 2257, column: 5, scope: !4628)
!4681 = !DILocation(line: 2259, column: 27, scope: !4123)
!4682 = !DILocation(line: 2259, column: 25, scope: !4123)
!4683 = !DILocation(line: 2260, column: 3, scope: !4123)
!4684 = !DILocation(line: 2261, column: 3, scope: !4123)
!4685 = !DILocation(line: 2263, column: 1, scope: !4123)
!4686 = distinct !DISubprogram(name: "record_all_accesses_in_func", scope: !3, file: !3, line: 1714, type: !3112, scopeLine: 1715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!4687 = !DILocalVariable(name: "i", scope: !4686, file: !3, line: 1716, type: !7)
!4688 = !DILocation(line: 1716, column: 12, scope: !4686)
!4689 = !DILocalVariable(name: "visited_stmts_1", scope: !4686, file: !3, line: 1717, type: !3656)
!4690 = !DILocation(line: 1717, column: 11, scope: !4686)
!4691 = !DILocation(line: 1719, column: 36, scope: !4686)
!4692 = !DILocation(line: 1719, column: 21, scope: !4686)
!4693 = !DILocation(line: 1719, column: 19, scope: !4686)
!4694 = !DILocation(line: 1721, column: 10, scope: !4695)
!4695 = distinct !DILexicalBlock(scope: !4686, file: !3, line: 1721, column: 3)
!4696 = !DILocation(line: 1721, column: 8, scope: !4695)
!4697 = !DILocation(line: 1721, column: 15, scope: !4698)
!4698 = distinct !DILexicalBlock(scope: !4695, file: !3, line: 1721, column: 3)
!4699 = !DILocation(line: 1721, column: 19, scope: !4698)
!4700 = !DILocation(line: 1721, column: 17, scope: !4698)
!4701 = !DILocation(line: 1721, column: 3, scope: !4695)
!4702 = !DILocalVariable(name: "tmpmi", scope: !4703, file: !3, line: 1723, type: !2936)
!4703 = distinct !DILexicalBlock(scope: !4698, file: !3, line: 1722, column: 5)
!4704 = !DILocation(line: 1723, column: 26, scope: !4703)
!4705 = !DILocalVariable(name: "mi", scope: !4703, file: !3, line: 1723, type: !2986)
!4706 = !DILocation(line: 1723, column: 34, scope: !4703)
!4707 = !DILocalVariable(name: "ssa_var", scope: !4703, file: !3, line: 1724, type: !1762)
!4708 = !DILocation(line: 1724, column: 12, scope: !4703)
!4709 = !DILocation(line: 1724, column: 22, scope: !4703)
!4710 = !DILocalVariable(name: "rhs", scope: !4703, file: !3, line: 1725, type: !1762)
!4711 = !DILocation(line: 1725, column: 12, scope: !4703)
!4712 = !DILocalVariable(name: "lhs", scope: !4703, file: !3, line: 1725, type: !1762)
!4713 = !DILocation(line: 1725, column: 17, scope: !4703)
!4714 = !DILocation(line: 1727, column: 12, scope: !4715)
!4715 = distinct !DILexicalBlock(scope: !4703, file: !3, line: 1727, column: 11)
!4716 = !DILocation(line: 1728, column: 4, scope: !4715)
!4717 = !DILocation(line: 1728, column: 26, scope: !4715)
!4718 = !DILocation(line: 1728, column: 8, scope: !4715)
!4719 = !DILocation(line: 1729, column: 4, scope: !4715)
!4720 = !DILocation(line: 1729, column: 32, scope: !4715)
!4721 = !DILocation(line: 1729, column: 8, scope: !4715)
!4722 = !DILocation(line: 1727, column: 11, scope: !4703)
!4723 = !DILocation(line: 1730, column: 2, scope: !4715)
!4724 = !DILocation(line: 1731, column: 33, scope: !4703)
!4725 = !DILocation(line: 1731, column: 13, scope: !4703)
!4726 = !DILocation(line: 1731, column: 11, scope: !4703)
!4727 = !DILocation(line: 1732, column: 32, scope: !4703)
!4728 = !DILocation(line: 1732, column: 13, scope: !4703)
!4729 = !DILocation(line: 1732, column: 11, scope: !4703)
!4730 = !DILocation(line: 1733, column: 11, scope: !4731)
!4731 = distinct !DILexicalBlock(scope: !4703, file: !3, line: 1733, column: 11)
!4732 = !DILocation(line: 1733, column: 27, scope: !4731)
!4733 = !DILocation(line: 1733, column: 39, scope: !4731)
!4734 = !DILocation(line: 1733, column: 42, scope: !4731)
!4735 = !DILocation(line: 1733, column: 58, scope: !4731)
!4736 = !DILocation(line: 1733, column: 11, scope: !4703)
!4737 = !DILocation(line: 1734, column: 2, scope: !4731)
!4738 = !DILocation(line: 1739, column: 20, scope: !4703)
!4739 = !DILocation(line: 1739, column: 13, scope: !4703)
!4740 = !DILocation(line: 1739, column: 18, scope: !4703)
!4741 = !DILocation(line: 1740, column: 51, scope: !4742)
!4742 = distinct !DILexicalBlock(scope: !4703, file: !3, line: 1740, column: 11)
!4743 = !DILocation(line: 1740, column: 70, scope: !4742)
!4744 = !DILocation(line: 1740, column: 40, scope: !4742)
!4745 = !DILocation(line: 1740, column: 17, scope: !4742)
!4746 = !DILocation(line: 1740, column: 15, scope: !4742)
!4747 = !DILocation(line: 1740, column: 11, scope: !4703)
!4748 = !DILocation(line: 1744, column: 18, scope: !4749)
!4749 = distinct !DILexicalBlock(scope: !4742, file: !3, line: 1741, column: 2)
!4750 = !DILocation(line: 1744, column: 4, scope: !4749)
!4751 = !DILocation(line: 1745, column: 29, scope: !4749)
!4752 = !DILocation(line: 1745, column: 33, scope: !4749)
!4753 = !DILocation(line: 1746, column: 18, scope: !4749)
!4754 = !DILocation(line: 1745, column: 4, scope: !4749)
!4755 = !DILocation(line: 1748, column: 2, scope: !4749)
!4756 = !DILocation(line: 1749, column: 5, scope: !4703)
!4757 = !DILocation(line: 1721, column: 35, scope: !4698)
!4758 = !DILocation(line: 1721, column: 3, scope: !4698)
!4759 = distinct !{!4759, !4701, !4760}
!4760 = !DILocation(line: 1749, column: 5, scope: !4695)
!4761 = !DILocation(line: 1750, column: 3, scope: !4686)
!4762 = !DILocation(line: 1751, column: 1, scope: !4686)
!4763 = distinct !DISubprogram(name: "transform_access_sites", scope: !3, file: !3, line: 1810, type: !3775, scopeLine: 1811, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!4764 = !DILocalVariable(name: "slot", arg: 1, scope: !4763, file: !3, line: 1810, type: !2080)
!4765 = !DILocation(line: 1810, column: 32, scope: !4763)
!4766 = !DILocalVariable(name: "data", arg: 2, scope: !4763, file: !3, line: 1810, type: !1574)
!4767 = !DILocation(line: 1810, column: 44, scope: !4763)
!4768 = !DILocalVariable(name: "gsi", scope: !4763, file: !3, line: 1812, type: !3429)
!4769 = !DILocation(line: 1812, column: 24, scope: !4763)
!4770 = !DILocalVariable(name: "mi", scope: !4763, file: !3, line: 1813, type: !2986)
!4771 = !DILocation(line: 1813, column: 23, scope: !4763)
!4772 = !DILocation(line: 1813, column: 52, scope: !4763)
!4773 = !DILocation(line: 1813, column: 51, scope: !4763)
!4774 = !DILocation(line: 1813, column: 28, scope: !4763)
!4775 = !DILocalVariable(name: "min_escape_l", scope: !4763, file: !3, line: 1814, type: !1575)
!4776 = !DILocation(line: 1814, column: 7, scope: !4763)
!4777 = !DILocation(line: 1814, column: 22, scope: !4763)
!4778 = !DILocation(line: 1814, column: 26, scope: !4763)
!4779 = !DILocalVariable(name: "acc_info", scope: !4763, file: !3, line: 1815, type: !2974)
!4780 = !DILocation(line: 1815, column: 28, scope: !4763)
!4781 = !DILocalVariable(name: "code", scope: !4763, file: !3, line: 1816, type: !317)
!4782 = !DILocation(line: 1816, column: 18, scope: !4763)
!4783 = !DILocalVariable(name: "i", scope: !4763, file: !3, line: 1817, type: !1575)
!4784 = !DILocation(line: 1817, column: 7, scope: !4763)
!4785 = !DILocation(line: 1819, column: 7, scope: !4786)
!4786 = distinct !DILexicalBlock(scope: !4763, file: !3, line: 1819, column: 7)
!4787 = !DILocation(line: 1819, column: 20, scope: !4786)
!4788 = !DILocation(line: 1819, column: 24, scope: !4786)
!4789 = !DILocation(line: 1819, column: 28, scope: !4786)
!4790 = !DILocation(line: 1819, column: 32, scope: !4786)
!4791 = !DILocation(line: 1819, column: 7, scope: !4763)
!4792 = !DILocation(line: 1820, column: 5, scope: !4786)
!4793 = !DILocation(line: 1821, column: 10, scope: !4794)
!4794 = distinct !DILexicalBlock(scope: !4763, file: !3, line: 1821, column: 3)
!4795 = !DILocation(line: 1821, column: 8, scope: !4794)
!4796 = !DILocation(line: 1821, column: 15, scope: !4797)
!4797 = distinct !DILexicalBlock(scope: !4794, file: !3, line: 1821, column: 3)
!4798 = !DILocation(line: 1821, column: 3, scope: !4794)
!4799 = !DILocation(line: 1826, column: 11, scope: !4800)
!4800 = distinct !DILexicalBlock(scope: !4801, file: !3, line: 1826, column: 11)
!4801 = distinct !DILexicalBlock(scope: !4797, file: !3, line: 1823, column: 5)
!4802 = !DILocation(line: 1826, column: 21, scope: !4800)
!4803 = !DILocation(line: 1826, column: 30, scope: !4800)
!4804 = !DILocation(line: 1826, column: 27, scope: !4800)
!4805 = !DILocation(line: 1826, column: 11, scope: !4801)
!4806 = !DILocation(line: 1828, column: 10, scope: !4807)
!4807 = distinct !DILexicalBlock(scope: !4800, file: !3, line: 1827, column: 2)
!4808 = !DILocation(line: 1828, column: 4, scope: !4807)
!4809 = !DILocation(line: 1829, column: 4, scope: !4807)
!4810 = !DILocation(line: 1831, column: 11, scope: !4811)
!4811 = distinct !DILexicalBlock(scope: !4801, file: !3, line: 1831, column: 11)
!4812 = !DILocation(line: 1831, column: 21, scope: !4811)
!4813 = !DILocation(line: 1831, column: 11, scope: !4801)
!4814 = !DILocation(line: 1833, column: 8, scope: !4815)
!4815 = distinct !DILexicalBlock(scope: !4816, file: !3, line: 1833, column: 8)
!4816 = distinct !DILexicalBlock(scope: !4811, file: !3, line: 1832, column: 2)
!4817 = !DILocation(line: 1833, column: 18, scope: !4815)
!4818 = !DILocation(line: 1833, column: 24, scope: !4815)
!4819 = !DILocation(line: 1833, column: 29, scope: !4815)
!4820 = !DILocation(line: 1833, column: 43, scope: !4815)
!4821 = !DILocation(line: 1833, column: 53, scope: !4815)
!4822 = !DILocation(line: 1833, column: 32, scope: !4815)
!4823 = !DILocation(line: 1833, column: 8, scope: !4816)
!4824 = !DILocalVariable(name: "iter", scope: !4825, file: !3, line: 1835, type: !4826)
!4825 = distinct !DILexicalBlock(scope: !4815, file: !3, line: 1834, column: 6)
!4826 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !1560, line: 140, baseType: !4827)
!4827 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !1560, line: 131, size: 320, elements: !4828)
!4828 = !{!4829, !4830, !4831, !4833, !4835, !4836, !4837}
!4829 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !4827, file: !1560, line: 133, baseType: !1875, size: 8)
!4830 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !4827, file: !1560, line: 134, baseType: !1559, size: 32, offset: 32)
!4831 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !4827, file: !1560, line: 135, baseType: !4832, size: 64, offset: 64)
!4832 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !1560, line: 42, baseType: !2168)
!4833 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !4827, file: !1560, line: 136, baseType: !4834, size: 64, offset: 128)
!4834 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !1560, line: 50, baseType: !2175)
!4835 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !4827, file: !1560, line: 137, baseType: !1575, size: 32, offset: 192)
!4836 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !4827, file: !1560, line: 138, baseType: !1575, size: 32, offset: 224)
!4837 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !4827, file: !1560, line: 139, baseType: !1636, size: 64, offset: 256)
!4838 = !DILocation(line: 1835, column: 20, scope: !4825)
!4839 = !DILocalVariable(name: "def", scope: !4825, file: !3, line: 1836, type: !1762)
!4840 = !DILocation(line: 1836, column: 13, scope: !4825)
!4841 = !DILocalVariable(name: "stmt", scope: !4825, file: !3, line: 1837, type: !1636)
!4842 = !DILocation(line: 1837, column: 15, scope: !4825)
!4843 = !DILocation(line: 1837, column: 22, scope: !4825)
!4844 = !DILocation(line: 1837, column: 32, scope: !4825)
!4845 = !DILocalVariable(name: "lhs", scope: !4825, file: !3, line: 1838, type: !1762)
!4846 = !DILocation(line: 1838, column: 13, scope: !4825)
!4847 = !DILocation(line: 1840, column: 8, scope: !4848)
!4848 = distinct !DILexicalBlock(scope: !4825, file: !3, line: 1840, column: 8)
!4849 = !DILocation(line: 1840, column: 8, scope: !4850)
!4850 = distinct !DILexicalBlock(scope: !4848, file: !3, line: 1840, column: 8)
!4851 = !DILocation(line: 1841, column: 26, scope: !4850)
!4852 = !DILocation(line: 1841, column: 3, scope: !4850)
!4853 = distinct !{!4853, !4847, !4854}
!4854 = !DILocation(line: 1841, column: 44, scope: !4848)
!4855 = !DILocation(line: 1842, column: 28, scope: !4825)
!4856 = !DILocation(line: 1842, column: 14, scope: !4825)
!4857 = !DILocation(line: 1843, column: 8, scope: !4825)
!4858 = !DILocation(line: 1844, column: 33, scope: !4825)
!4859 = !DILocation(line: 1844, column: 43, scope: !4825)
!4860 = !DILocation(line: 1844, column: 14, scope: !4825)
!4861 = !DILocation(line: 1844, column: 12, scope: !4825)
!4862 = !DILocation(line: 1845, column: 12, scope: !4863)
!4863 = distinct !DILexicalBlock(scope: !4825, file: !3, line: 1845, column: 12)
!4864 = !DILocation(line: 1845, column: 28, scope: !4863)
!4865 = !DILocation(line: 1846, column: 5, scope: !4863)
!4866 = !DILocation(line: 1846, column: 8, scope: !4863)
!4867 = !DILocation(line: 1846, column: 18, scope: !4863)
!4868 = !DILocation(line: 1846, column: 26, scope: !4863)
!4869 = !DILocation(line: 1846, column: 39, scope: !4863)
!4870 = !DILocation(line: 1846, column: 24, scope: !4863)
!4871 = !DILocation(line: 1845, column: 12, scope: !4825)
!4872 = !DILocalVariable(name: "imm_iter", scope: !4873, file: !3, line: 1848, type: !4153)
!4873 = distinct !DILexicalBlock(scope: !4863, file: !3, line: 1847, column: 3)
!4874 = !DILocation(line: 1848, column: 22, scope: !4873)
!4875 = !DILocalVariable(name: "use_p", scope: !4873, file: !3, line: 1849, type: !2993)
!4876 = !DILocation(line: 1849, column: 19, scope: !4873)
!4877 = !DILocalVariable(name: "use_stmt", scope: !4873, file: !3, line: 1850, type: !1636)
!4878 = !DILocation(line: 1850, column: 12, scope: !4873)
!4879 = !DILocation(line: 1852, column: 5, scope: !4880)
!4880 = distinct !DILexicalBlock(scope: !4873, file: !3, line: 1852, column: 5)
!4881 = !DILocation(line: 1852, column: 5, scope: !4882)
!4882 = distinct !DILexicalBlock(scope: !4880, file: !3, line: 1852, column: 5)
!4883 = !DILocation(line: 1853, column: 7, scope: !4884)
!4884 = distinct !DILexicalBlock(scope: !4882, file: !3, line: 1853, column: 7)
!4885 = !DILocation(line: 1853, column: 7, scope: !4886)
!4886 = distinct !DILexicalBlock(scope: !4884, file: !3, line: 1853, column: 7)
!4887 = !DILocalVariable(name: "rhs", scope: !4888, file: !3, line: 1855, type: !1762)
!4888 = distinct !DILexicalBlock(scope: !4886, file: !3, line: 1854, column: 5)
!4889 = !DILocation(line: 1855, column: 12, scope: !4888)
!4890 = !DILocalVariable(name: "tmp", scope: !4888, file: !3, line: 1855, type: !1762)
!4891 = !DILocation(line: 1855, column: 17, scope: !4888)
!4892 = !DILocalVariable(name: "new_stmt", scope: !4888, file: !3, line: 1856, type: !1636)
!4893 = !DILocation(line: 1856, column: 14, scope: !4888)
!4894 = !DILocation(line: 1858, column: 7, scope: !4888)
!4895 = !DILocation(line: 1861, column: 29, scope: !4888)
!4896 = !DILocation(line: 1861, column: 13, scope: !4888)
!4897 = !DILocation(line: 1861, column: 11, scope: !4888)
!4898 = !DILocation(line: 1862, column: 27, scope: !4888)
!4899 = !DILocation(line: 1862, column: 7, scope: !4888)
!4900 = !DILocation(line: 1863, column: 33, scope: !4888)
!4901 = !DILocation(line: 1863, column: 43, scope: !4888)
!4902 = !DILocation(line: 1863, column: 13, scope: !4888)
!4903 = !DILocation(line: 1863, column: 11, scope: !4888)
!4904 = !DILocation(line: 1864, column: 13, scope: !4888)
!4905 = !DILocation(line: 1864, column: 11, scope: !4888)
!4906 = !DILocation(line: 1866, column: 18, scope: !4888)
!4907 = !DILocation(line: 1866, column: 16, scope: !4888)
!4908 = !DILocation(line: 1867, column: 28, scope: !4888)
!4909 = !DILocation(line: 1867, column: 33, scope: !4888)
!4910 = !DILocation(line: 1867, column: 13, scope: !4888)
!4911 = !DILocation(line: 1867, column: 11, scope: !4888)
!4912 = !DILocation(line: 1868, column: 30, scope: !4888)
!4913 = !DILocation(line: 1868, column: 40, scope: !4888)
!4914 = !DILocation(line: 1868, column: 7, scope: !4888)
!4915 = !DILocation(line: 1869, column: 27, scope: !4888)
!4916 = !DILocation(line: 1869, column: 37, scope: !4888)
!4917 = !DILocation(line: 1869, column: 13, scope: !4888)
!4918 = !DILocation(line: 1870, column: 31, scope: !4888)
!4919 = !DILocation(line: 1870, column: 7, scope: !4888)
!4920 = !DILocation(line: 1871, column: 7, scope: !4888)
!4921 = !DILocation(line: 1872, column: 5, scope: !4888)
!4922 = distinct !{!4922, !4883, !4923}
!4923 = !DILocation(line: 1872, column: 5, scope: !4884)
!4924 = distinct !{!4924, !4879, !4925}
!4925 = !DILocation(line: 1872, column: 5, scope: !4880)
!4926 = !DILocation(line: 1873, column: 3, scope: !4873)
!4927 = !DILocation(line: 1874, column: 12, scope: !4928)
!4928 = distinct !DILexicalBlock(scope: !4825, file: !3, line: 1874, column: 12)
!4929 = !DILocation(line: 1874, column: 22, scope: !4928)
!4930 = !DILocation(line: 1874, column: 30, scope: !4928)
!4931 = !DILocation(line: 1874, column: 43, scope: !4928)
!4932 = !DILocation(line: 1874, column: 28, scope: !4928)
!4933 = !DILocation(line: 1874, column: 12, scope: !4825)
!4934 = !DILocation(line: 1875, column: 3, scope: !4928)
!4935 = !DILocation(line: 1876, column: 6, scope: !4825)
!4936 = !DILocation(line: 1877, column: 10, scope: !4816)
!4937 = !DILocation(line: 1877, column: 4, scope: !4816)
!4938 = !DILocation(line: 1878, column: 4, scope: !4816)
!4939 = !DILocation(line: 1880, column: 38, scope: !4801)
!4940 = !DILocation(line: 1880, column: 48, scope: !4801)
!4941 = !DILocation(line: 1880, column: 14, scope: !4801)
!4942 = !DILocation(line: 1880, column: 12, scope: !4801)
!4943 = !DILocation(line: 1881, column: 11, scope: !4944)
!4944 = distinct !DILexicalBlock(scope: !4801, file: !3, line: 1881, column: 11)
!4945 = !DILocation(line: 1881, column: 16, scope: !4944)
!4946 = !DILocation(line: 1882, column: 4, scope: !4944)
!4947 = !DILocation(line: 1882, column: 7, scope: !4944)
!4948 = !DILocation(line: 1882, column: 17, scope: !4944)
!4949 = !DILocation(line: 1882, column: 25, scope: !4944)
!4950 = !DILocation(line: 1882, column: 38, scope: !4944)
!4951 = !DILocation(line: 1882, column: 23, scope: !4944)
!4952 = !DILocation(line: 1881, column: 11, scope: !4801)
!4953 = !DILocalVariable(name: "t", scope: !4954, file: !3, line: 1886, type: !1762)
!4954 = distinct !DILexicalBlock(scope: !4944, file: !3, line: 1883, column: 2)
!4955 = !DILocation(line: 1886, column: 9, scope: !4954)
!4956 = !DILocation(line: 1887, column: 6, scope: !4954)
!4957 = !DILocation(line: 1889, column: 32, scope: !4954)
!4958 = !DILocation(line: 1889, column: 42, scope: !4954)
!4959 = !DILocation(line: 1889, column: 4, scope: !4954)
!4960 = !DILocation(line: 1890, column: 28, scope: !4954)
!4961 = !DILocation(line: 1890, column: 38, scope: !4954)
!4962 = !DILocation(line: 1890, column: 44, scope: !4954)
!4963 = !DILocation(line: 1890, column: 4, scope: !4954)
!4964 = !DILocation(line: 1891, column: 2, scope: !4954)
!4965 = !DILocation(line: 1892, column: 16, scope: !4966)
!4966 = distinct !DILexicalBlock(scope: !4944, file: !3, line: 1892, column: 16)
!4967 = !DILocation(line: 1892, column: 21, scope: !4966)
!4968 = !DILocation(line: 1893, column: 9, scope: !4966)
!4969 = !DILocation(line: 1893, column: 12, scope: !4966)
!4970 = !DILocation(line: 1893, column: 22, scope: !4966)
!4971 = !DILocation(line: 1893, column: 31, scope: !4966)
!4972 = !DILocation(line: 1893, column: 28, scope: !4966)
!4973 = !DILocation(line: 1892, column: 16, scope: !4944)
!4974 = !DILocalVariable(name: "imm_iter", scope: !4975, file: !3, line: 1895, type: !4153)
!4975 = distinct !DILexicalBlock(scope: !4966, file: !3, line: 1894, column: 2)
!4976 = !DILocation(line: 1895, column: 21, scope: !4975)
!4977 = !DILocalVariable(name: "use_p", scope: !4975, file: !3, line: 1896, type: !2993)
!4978 = !DILocation(line: 1896, column: 18, scope: !4975)
!4979 = !DILocalVariable(name: "offset", scope: !4975, file: !3, line: 1898, type: !1762)
!4980 = !DILocation(line: 1898, column: 9, scope: !4975)
!4981 = !DILocalVariable(name: "k", scope: !4975, file: !3, line: 1899, type: !1575)
!4982 = !DILocation(line: 1899, column: 8, scope: !4975)
!4983 = !DILocation(line: 1899, column: 12, scope: !4975)
!4984 = !DILocation(line: 1899, column: 22, scope: !4975)
!4985 = !DILocalVariable(name: "num_elements", scope: !4975, file: !3, line: 1900, type: !1762)
!4986 = !DILocation(line: 1900, column: 9, scope: !4975)
!4987 = !DILocalVariable(name: "total_elements", scope: !4975, file: !3, line: 1900, type: !1762)
!4988 = !DILocation(line: 1900, column: 23, scope: !4975)
!4989 = !DILocalVariable(name: "tmp1", scope: !4975, file: !3, line: 1901, type: !1762)
!4990 = !DILocation(line: 1901, column: 9, scope: !4975)
!4991 = !DILocalVariable(name: "d_size", scope: !4975, file: !3, line: 1902, type: !1762)
!4992 = !DILocation(line: 1902, column: 9, scope: !4975)
!4993 = !DILocation(line: 1902, column: 18, scope: !4975)
!4994 = !DILocation(line: 1902, column: 22, scope: !4975)
!4995 = !DILocation(line: 1902, column: 37, scope: !4975)
!4996 = !DILocation(line: 1906, column: 13, scope: !4975)
!4997 = !DILocation(line: 1906, column: 23, scope: !4975)
!4998 = !DILocation(line: 1906, column: 11, scope: !4975)
!4999 = !DILocation(line: 1907, column: 8, scope: !5000)
!5000 = distinct !DILexicalBlock(scope: !4975, file: !3, line: 1907, column: 8)
!5001 = !DILocation(line: 1907, column: 12, scope: !5000)
!5002 = !DILocation(line: 1907, column: 20, scope: !5000)
!5003 = !DILocation(line: 1907, column: 26, scope: !5000)
!5004 = !DILocation(line: 1907, column: 39, scope: !5000)
!5005 = !DILocation(line: 1907, column: 23, scope: !5000)
!5006 = !DILocation(line: 1907, column: 8, scope: !4975)
!5007 = !DILocation(line: 1909, column: 13, scope: !5008)
!5008 = distinct !DILexicalBlock(scope: !5009, file: !3, line: 1909, column: 12)
!5009 = distinct !DILexicalBlock(scope: !5000, file: !3, line: 1908, column: 6)
!5010 = !DILocation(line: 1909, column: 31, scope: !5008)
!5011 = !DILocation(line: 1909, column: 34, scope: !5008)
!5012 = !DILocation(line: 1909, column: 38, scope: !5008)
!5013 = !DILocation(line: 1909, column: 54, scope: !5008)
!5014 = !DILocation(line: 1909, column: 12, scope: !5009)
!5015 = !DILocation(line: 1910, column: 10, scope: !5008)
!5016 = !DILocation(line: 1910, column: 8, scope: !5008)
!5017 = !DILocation(line: 1910, column: 3, scope: !5008)
!5018 = !DILocalVariable(name: "new_offset", scope: !5019, file: !3, line: 1913, type: !1762)
!5019 = distinct !DILexicalBlock(scope: !5008, file: !3, line: 1912, column: 3)
!5020 = !DILocation(line: 1913, column: 10, scope: !5019)
!5021 = !DILocation(line: 1916, column: 23, scope: !5019)
!5022 = !DILocation(line: 1916, column: 27, scope: !5019)
!5023 = !DILocation(line: 1916, column: 47, scope: !5019)
!5024 = !DILocation(line: 1917, column: 9, scope: !5019)
!5025 = !DILocation(line: 1917, column: 13, scope: !5019)
!5026 = !DILocation(line: 1917, column: 33, scope: !5019)
!5027 = !DILocation(line: 1917, column: 35, scope: !5019)
!5028 = !DILocation(line: 1917, column: 41, scope: !5019)
!5029 = !DILocation(line: 1916, column: 7, scope: !5019)
!5030 = !DILocation(line: 1915, column: 16, scope: !5019)
!5031 = !DILocation(line: 1919, column: 22, scope: !5019)
!5032 = !DILocation(line: 1919, column: 20, scope: !5019)
!5033 = !DILocation(line: 1920, column: 9, scope: !5034)
!5034 = distinct !DILexicalBlock(scope: !5019, file: !3, line: 1920, column: 9)
!5035 = !DILocation(line: 1920, column: 23, scope: !5034)
!5036 = !DILocation(line: 1920, column: 20, scope: !5034)
!5037 = !DILocation(line: 1920, column: 9, scope: !5019)
!5038 = !DILocation(line: 1922, column: 29, scope: !5039)
!5039 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1921, column: 7)
!5040 = !DILocation(line: 1922, column: 39, scope: !5039)
!5041 = !DILocation(line: 1922, column: 15, scope: !5039)
!5042 = !DILocation(line: 1923, column: 48, scope: !5039)
!5043 = !DILocation(line: 1923, column: 16, scope: !5039)
!5044 = !DILocation(line: 1923, column: 14, scope: !5039)
!5045 = !DILocation(line: 1926, column: 7, scope: !5039)
!5046 = !DILocation(line: 1928, column: 14, scope: !5034)
!5047 = !DILocation(line: 1928, column: 12, scope: !5034)
!5048 = !DILocation(line: 1930, column: 6, scope: !5009)
!5049 = !DILocation(line: 1933, column: 17, scope: !5050)
!5050 = distinct !DILexicalBlock(scope: !5000, file: !3, line: 1932, column: 6)
!5051 = !DILocation(line: 1933, column: 21, scope: !5050)
!5052 = !DILocation(line: 1933, column: 36, scope: !5050)
!5053 = !DILocation(line: 1933, column: 40, scope: !5050)
!5054 = !DILocation(line: 1933, column: 48, scope: !5050)
!5055 = !DILocation(line: 1933, column: 51, scope: !5050)
!5056 = !DILocation(line: 1933, column: 15, scope: !5050)
!5057 = !DILocation(line: 1935, column: 3, scope: !5050)
!5058 = !DILocation(line: 1934, column: 21, scope: !5050)
!5059 = !DILocation(line: 1937, column: 28, scope: !5050)
!5060 = !DILocation(line: 1937, column: 8, scope: !5050)
!5061 = !DILocation(line: 1938, column: 28, scope: !5050)
!5062 = !DILocation(line: 1938, column: 38, scope: !5050)
!5063 = !DILocation(line: 1938, column: 14, scope: !5050)
!5064 = !DILocation(line: 1939, column: 47, scope: !5050)
!5065 = !DILocation(line: 1939, column: 15, scope: !5050)
!5066 = !DILocation(line: 1939, column: 13, scope: !5050)
!5067 = !DILocation(line: 1943, column: 8, scope: !5068)
!5068 = distinct !DILexicalBlock(scope: !4975, file: !3, line: 1943, column: 8)
!5069 = !DILocation(line: 1943, column: 16, scope: !5068)
!5070 = !DILocation(line: 1943, column: 13, scope: !5068)
!5071 = !DILocation(line: 1943, column: 8, scope: !4975)
!5072 = !DILocation(line: 1945, column: 12, scope: !5073)
!5073 = distinct !DILexicalBlock(scope: !5074, file: !3, line: 1945, column: 12)
!5074 = distinct !DILexicalBlock(scope: !5068, file: !3, line: 1944, column: 6)
!5075 = !DILocation(line: 1945, column: 31, scope: !5073)
!5076 = !DILocation(line: 1945, column: 12, scope: !5074)
!5077 = !DILocalVariable(name: "use_stmt", scope: !5078, file: !3, line: 1947, type: !1636)
!5078 = distinct !DILexicalBlock(scope: !5073, file: !3, line: 1946, column: 3)
!5079 = !DILocation(line: 1947, column: 12, scope: !5078)
!5080 = !DILocation(line: 1949, column: 5, scope: !5081)
!5081 = distinct !DILexicalBlock(scope: !5078, file: !3, line: 1949, column: 5)
!5082 = !DILocation(line: 1949, column: 5, scope: !5083)
!5083 = distinct !DILexicalBlock(scope: !5081, file: !3, line: 1949, column: 5)
!5084 = !DILocation(line: 1950, column: 7, scope: !5085)
!5085 = distinct !DILexicalBlock(scope: !5083, file: !3, line: 1950, column: 7)
!5086 = !DILocation(line: 1950, column: 7, scope: !5087)
!5087 = distinct !DILexicalBlock(scope: !5085, file: !3, line: 1950, column: 7)
!5088 = !DILocation(line: 1951, column: 13, scope: !5089)
!5089 = distinct !DILexicalBlock(scope: !5087, file: !3, line: 1951, column: 13)
!5090 = !DILocation(line: 1951, column: 25, scope: !5089)
!5091 = !DILocation(line: 1951, column: 35, scope: !5089)
!5092 = !DILocation(line: 1951, column: 22, scope: !5089)
!5093 = !DILocation(line: 1951, column: 13, scope: !5087)
!5094 = !DILocation(line: 1952, column: 11, scope: !5089)
!5095 = distinct !{!5095, !5084, !5096}
!5096 = !DILocation(line: 1952, column: 11, scope: !5085)
!5097 = distinct !{!5097, !5080, !5098}
!5098 = !DILocation(line: 1952, column: 11, scope: !5081)
!5099 = !DILocation(line: 1953, column: 3, scope: !5078)
!5100 = !DILocation(line: 1956, column: 5, scope: !5101)
!5101 = distinct !DILexicalBlock(scope: !5073, file: !3, line: 1955, column: 3)
!5102 = !DILocation(line: 1957, column: 29, scope: !5101)
!5103 = !DILocation(line: 1957, column: 39, scope: !5101)
!5104 = !DILocation(line: 1957, column: 45, scope: !5101)
!5105 = !DILocation(line: 1957, column: 5, scope: !5101)
!5106 = !DILocation(line: 1958, column: 18, scope: !5101)
!5107 = !DILocation(line: 1958, column: 28, scope: !5101)
!5108 = !DILocation(line: 1958, column: 5, scope: !5101)
!5109 = !DILocation(line: 1960, column: 6, scope: !5074)
!5110 = !DILocation(line: 1961, column: 2, scope: !4975)
!5111 = !DILocation(line: 1968, column: 13, scope: !4801)
!5112 = !DILocation(line: 1968, column: 7, scope: !4801)
!5113 = !DILocation(line: 1969, column: 5, scope: !4801)
!5114 = !DILocation(line: 1822, column: 9, scope: !4797)
!5115 = !DILocation(line: 1821, column: 3, scope: !4797)
!5116 = distinct !{!5116, !4798, !5117}
!5117 = !DILocation(line: 1969, column: 5, scope: !4794)
!5118 = !DILocation(line: 1970, column: 3, scope: !4763)
!5119 = !DILocation(line: 1972, column: 3, scope: !4763)
!5120 = !DILocation(line: 1976, column: 3, scope: !4763)
!5121 = !DILocation(line: 1977, column: 1, scope: !4763)
!5122 = distinct !DISubprogram(name: "dump_matrix_reorg_analysis", scope: !3, file: !3, line: 2268, type: !3775, scopeLine: 2269, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5123 = !DILocalVariable(name: "slot", arg: 1, scope: !5122, file: !3, line: 2268, type: !2080)
!5124 = !DILocation(line: 2268, column: 36, scope: !5122)
!5125 = !DILocalVariable(name: "data", arg: 2, scope: !5122, file: !3, line: 2268, type: !1574)
!5126 = !DILocation(line: 2268, column: 48, scope: !5122)
!5127 = !DILocalVariable(name: "mi", scope: !5122, file: !3, line: 2270, type: !2986)
!5128 = !DILocation(line: 2270, column: 23, scope: !5122)
!5129 = !DILocation(line: 2270, column: 52, scope: !5122)
!5130 = !DILocation(line: 2270, column: 51, scope: !5122)
!5131 = !DILocation(line: 2270, column: 28, scope: !5122)
!5132 = !DILocation(line: 2272, column: 8, scope: !5133)
!5133 = distinct !DILexicalBlock(scope: !5122, file: !3, line: 2272, column: 7)
!5134 = !DILocation(line: 2272, column: 7, scope: !5122)
!5135 = !DILocation(line: 2273, column: 5, scope: !5133)
!5136 = !DILocation(line: 2274, column: 12, scope: !5122)
!5137 = !DILocation(line: 2275, column: 15, scope: !5122)
!5138 = !DILocation(line: 2275, column: 19, scope: !5122)
!5139 = !DILocation(line: 2275, column: 5, scope: !5122)
!5140 = !DILocation(line: 2275, column: 26, scope: !5122)
!5141 = !DILocation(line: 2275, column: 30, scope: !5122)
!5142 = !DILocation(line: 2275, column: 57, scope: !5122)
!5143 = !DILocation(line: 2275, column: 61, scope: !5122)
!5144 = !DILocation(line: 2274, column: 3, scope: !5122)
!5145 = !DILocation(line: 2276, column: 12, scope: !5122)
!5146 = !DILocation(line: 2276, column: 45, scope: !5122)
!5147 = !DILocation(line: 2276, column: 49, scope: !5122)
!5148 = !DILocation(line: 2276, column: 3, scope: !5122)
!5149 = !DILocation(line: 2277, column: 12, scope: !5122)
!5150 = !DILocation(line: 2277, column: 3, scope: !5122)
!5151 = !DILocation(line: 2278, column: 7, scope: !5152)
!5152 = distinct !DILexicalBlock(scope: !5122, file: !3, line: 2278, column: 7)
!5153 = !DILocation(line: 2278, column: 11, scope: !5152)
!5154 = !DILocation(line: 2278, column: 37, scope: !5152)
!5155 = !DILocation(line: 2278, column: 7, scope: !5122)
!5156 = !DILocation(line: 2279, column: 14, scope: !5152)
!5157 = !DILocation(line: 2280, column: 7, scope: !5152)
!5158 = !DILocation(line: 2280, column: 11, scope: !5152)
!5159 = !DILocation(line: 2279, column: 5, scope: !5152)
!5160 = !DILocation(line: 2281, column: 3, scope: !5122)
!5161 = !DILocation(line: 2282, column: 1, scope: !5122)
!5162 = distinct !DISubprogram(name: "gsi_start_bb", scope: !625, file: !625, line: 4418, type: !5163, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5163 = !DISubroutineType(types: !5164)
!5164 = !{!3429, !2025}
!5165 = !DILocalVariable(name: "bb", arg: 1, scope: !5162, file: !625, line: 4418, type: !2025)
!5166 = !DILocation(line: 4418, column: 27, scope: !5162)
!5167 = !DILocalVariable(name: "i", scope: !5162, file: !625, line: 4420, type: !3429)
!5168 = !DILocation(line: 4420, column: 24, scope: !5162)
!5169 = !DILocalVariable(name: "seq", scope: !5162, file: !625, line: 4421, type: !1626)
!5170 = !DILocation(line: 4421, column: 14, scope: !5162)
!5171 = !DILocation(line: 4423, column: 17, scope: !5162)
!5172 = !DILocation(line: 4423, column: 9, scope: !5162)
!5173 = !DILocation(line: 4423, column: 7, scope: !5162)
!5174 = !DILocation(line: 4424, column: 29, scope: !5162)
!5175 = !DILocation(line: 4424, column: 11, scope: !5162)
!5176 = !DILocation(line: 4424, column: 5, scope: !5162)
!5177 = !DILocation(line: 4424, column: 9, scope: !5162)
!5178 = !DILocation(line: 4425, column: 11, scope: !5162)
!5179 = !DILocation(line: 4425, column: 5, scope: !5162)
!5180 = !DILocation(line: 4425, column: 9, scope: !5162)
!5181 = !DILocation(line: 4426, column: 10, scope: !5162)
!5182 = !DILocation(line: 4426, column: 5, scope: !5162)
!5183 = !DILocation(line: 4426, column: 8, scope: !5162)
!5184 = !DILocation(line: 4428, column: 3, scope: !5162)
!5185 = distinct !DISubprogram(name: "gsi_end_p", scope: !625, file: !625, line: 4467, type: !5186, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5186 = !DISubroutineType(types: !5187)
!5187 = !{!1875, !3429}
!5188 = !DILocalVariable(name: "i", arg: 1, scope: !5185, file: !625, line: 4467, type: !3429)
!5189 = !DILocation(line: 4467, column: 33, scope: !5185)
!5190 = !DILocation(line: 4469, column: 12, scope: !5185)
!5191 = !DILocation(line: 4469, column: 16, scope: !5185)
!5192 = !DILocation(line: 4469, column: 10, scope: !5185)
!5193 = !DILocation(line: 4469, column: 3, scope: !5185)
!5194 = distinct !DISubprogram(name: "may_flatten_matrices_1", scope: !3, file: !3, line: 414, type: !5195, scopeLine: 415, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5195 = !DISubroutineType(types: !5196)
!5196 = !{!1875, !1636}
!5197 = !DILocalVariable(name: "stmt", arg: 1, scope: !5194, file: !3, line: 414, type: !1636)
!5198 = !DILocation(line: 414, column: 32, scope: !5194)
!5199 = !DILocalVariable(name: "t", scope: !5194, file: !3, line: 416, type: !1762)
!5200 = !DILocation(line: 416, column: 8, scope: !5194)
!5201 = !DILocation(line: 418, column: 24, scope: !5194)
!5202 = !DILocation(line: 418, column: 11, scope: !5194)
!5203 = !DILocation(line: 418, column: 3, scope: !5194)
!5204 = !DILocation(line: 421, column: 34, scope: !5205)
!5205 = distinct !DILexicalBlock(scope: !5206, file: !3, line: 421, column: 11)
!5206 = distinct !DILexicalBlock(scope: !5194, file: !3, line: 419, column: 5)
!5207 = !DILocation(line: 421, column: 12, scope: !5205)
!5208 = !DILocation(line: 421, column: 11, scope: !5206)
!5209 = !DILocation(line: 422, column: 2, scope: !5205)
!5210 = !DILocation(line: 424, column: 31, scope: !5206)
!5211 = !DILocation(line: 424, column: 11, scope: !5206)
!5212 = !DILocation(line: 424, column: 9, scope: !5206)
!5213 = !DILocation(line: 425, column: 7, scope: !5206)
!5214 = !DILocation(line: 425, column: 14, scope: !5206)
!5215 = !DILocation(line: 427, column: 8, scope: !5216)
!5216 = distinct !DILexicalBlock(scope: !5217, file: !3, line: 427, column: 8)
!5217 = distinct !DILexicalBlock(scope: !5206, file: !3, line: 426, column: 2)
!5218 = !DILocation(line: 427, column: 22, scope: !5216)
!5219 = !DILocation(line: 427, column: 25, scope: !5216)
!5220 = !DILocation(line: 427, column: 8, scope: !5217)
!5221 = !DILocalVariable(name: "pointee", scope: !5222, file: !3, line: 429, type: !1762)
!5222 = distinct !DILexicalBlock(scope: !5216, file: !3, line: 428, column: 6)
!5223 = !DILocation(line: 429, column: 13, scope: !5222)
!5224 = !DILocation(line: 431, column: 18, scope: !5222)
!5225 = !DILocation(line: 431, column: 16, scope: !5222)
!5226 = !DILocation(line: 432, column: 8, scope: !5222)
!5227 = !DILocation(line: 432, column: 15, scope: !5222)
!5228 = !DILocation(line: 433, column: 13, scope: !5222)
!5229 = !DILocation(line: 433, column: 11, scope: !5222)
!5230 = distinct !{!5230, !5226, !5228}
!5231 = !DILocation(line: 434, column: 12, scope: !5232)
!5232 = distinct !DILexicalBlock(scope: !5222, file: !3, line: 434, column: 12)
!5233 = !DILocation(line: 434, column: 32, scope: !5232)
!5234 = !DILocation(line: 434, column: 12, scope: !5222)
!5235 = !DILocation(line: 436, column: 9, scope: !5236)
!5236 = distinct !DILexicalBlock(scope: !5237, file: !3, line: 436, column: 9)
!5237 = distinct !DILexicalBlock(scope: !5232, file: !3, line: 435, column: 3)
!5238 = !DILocation(line: 436, column: 9, scope: !5237)
!5239 = !DILocation(line: 437, column: 16, scope: !5236)
!5240 = !DILocation(line: 437, column: 7, scope: !5236)
!5241 = !DILocation(line: 439, column: 5, scope: !5237)
!5242 = !DILocation(line: 441, column: 6, scope: !5222)
!5243 = !DILocation(line: 442, column: 8, scope: !5217)
!5244 = !DILocation(line: 442, column: 6, scope: !5217)
!5245 = distinct !{!5245, !5213, !5246}
!5246 = !DILocation(line: 443, column: 2, scope: !5206)
!5247 = !DILocation(line: 444, column: 7, scope: !5206)
!5248 = !DILocation(line: 447, column: 7, scope: !5206)
!5249 = !DILocation(line: 450, column: 7, scope: !5206)
!5250 = !DILocation(line: 452, column: 3, scope: !5194)
!5251 = !DILocation(line: 453, column: 1, scope: !5194)
!5252 = distinct !DISubprogram(name: "gsi_stmt", scope: !625, file: !625, line: 4501, type: !5253, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5253 = !DISubroutineType(types: !5254)
!5254 = !{!1636, !3429}
!5255 = !DILocalVariable(name: "i", arg: 1, scope: !5252, file: !625, line: 4501, type: !3429)
!5256 = !DILocation(line: 4501, column: 32, scope: !5252)
!5257 = !DILocation(line: 4503, column: 12, scope: !5252)
!5258 = !DILocation(line: 4503, column: 17, scope: !5252)
!5259 = !DILocation(line: 4503, column: 3, scope: !5252)
!5260 = distinct !DISubprogram(name: "gsi_next", scope: !625, file: !625, line: 4485, type: !5261, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5261 = !DISubroutineType(types: !5262)
!5262 = !{null, !5263}
!5263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3429, size: 64)
!5264 = !DILocalVariable(name: "i", arg: 1, scope: !5260, file: !625, line: 4485, type: !5263)
!5265 = !DILocation(line: 4485, column: 33, scope: !5260)
!5266 = !DILocation(line: 4487, column: 12, scope: !5260)
!5267 = !DILocation(line: 4487, column: 15, scope: !5260)
!5268 = !DILocation(line: 4487, column: 20, scope: !5260)
!5269 = !DILocation(line: 4487, column: 3, scope: !5260)
!5270 = !DILocation(line: 4487, column: 6, scope: !5260)
!5271 = !DILocation(line: 4487, column: 10, scope: !5260)
!5272 = !DILocation(line: 4488, column: 1, scope: !5260)
!5273 = distinct !DISubprogram(name: "bb_seq", scope: !625, file: !625, line: 237, type: !5274, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5274 = !DISubroutineType(types: !5275)
!5275 = !{!1626, !5276}
!5276 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1616, line: 112, baseType: !5277)
!5277 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5278, size: 64)
!5278 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1600)
!5279 = !DILocalVariable(name: "bb", arg: 1, scope: !5273, file: !625, line: 237, type: !5276)
!5280 = !DILocation(line: 237, column: 27, scope: !5273)
!5281 = !DILocation(line: 239, column: 13, scope: !5273)
!5282 = !DILocation(line: 239, column: 17, scope: !5273)
!5283 = !DILocation(line: 239, column: 23, scope: !5273)
!5284 = !DILocation(line: 239, column: 33, scope: !5273)
!5285 = !DILocation(line: 239, column: 36, scope: !5273)
!5286 = !DILocation(line: 239, column: 40, scope: !5273)
!5287 = !DILocation(line: 239, column: 43, scope: !5273)
!5288 = !DILocation(line: 239, column: 10, scope: !5273)
!5289 = !DILocation(line: 239, column: 53, scope: !5273)
!5290 = !DILocation(line: 239, column: 57, scope: !5273)
!5291 = !DILocation(line: 239, column: 60, scope: !5273)
!5292 = !DILocation(line: 239, column: 68, scope: !5273)
!5293 = !DILocation(line: 239, column: 3, scope: !5273)
!5294 = distinct !DISubprogram(name: "gimple_seq_first", scope: !625, file: !625, line: 159, type: !5295, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5295 = !DISubroutineType(types: !5296)
!5296 = !{!1631, !5297}
!5297 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1616, line: 67, baseType: !5298)
!5298 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5299, size: 64)
!5299 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1628)
!5300 = !DILocalVariable(name: "s", arg: 1, scope: !5294, file: !625, line: 159, type: !5297)
!5301 = !DILocation(line: 159, column: 36, scope: !5294)
!5302 = !DILocation(line: 161, column: 10, scope: !5294)
!5303 = !DILocation(line: 161, column: 14, scope: !5294)
!5304 = !DILocation(line: 161, column: 17, scope: !5294)
!5305 = !DILocation(line: 161, column: 3, scope: !5294)
!5306 = distinct !DISubprogram(name: "gimple_code", scope: !625, file: !625, line: 1052, type: !5307, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5307 = !DISubroutineType(types: !5308)
!5308 = !{!624, !5309}
!5309 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1616, line: 60, baseType: !2932)
!5310 = !DILocalVariable(name: "g", arg: 1, scope: !5306, file: !625, line: 1052, type: !5309)
!5311 = !DILocation(line: 1052, column: 27, scope: !5306)
!5312 = !DILocation(line: 1054, column: 10, scope: !5306)
!5313 = !DILocation(line: 1054, column: 13, scope: !5306)
!5314 = !DILocation(line: 1054, column: 20, scope: !5306)
!5315 = !DILocation(line: 1054, column: 3, scope: !5306)
!5316 = distinct !DISubprogram(name: "gimple_assign_cast_p", scope: !625, file: !625, line: 1853, type: !5195, scopeLine: 1854, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5317 = !DILocalVariable(name: "s", arg: 1, scope: !5316, file: !625, line: 1853, type: !1636)
!5318 = !DILocation(line: 1853, column: 30, scope: !5316)
!5319 = !DILocation(line: 1855, column: 25, scope: !5320)
!5320 = distinct !DILexicalBlock(scope: !5316, file: !625, line: 1855, column: 7)
!5321 = !DILocation(line: 1855, column: 7, scope: !5320)
!5322 = !DILocation(line: 1855, column: 7, scope: !5316)
!5323 = !DILocalVariable(name: "sc", scope: !5324, file: !625, line: 1857, type: !317)
!5324 = distinct !DILexicalBlock(scope: !5320, file: !625, line: 1856, column: 5)
!5325 = !DILocation(line: 1857, column: 22, scope: !5324)
!5326 = !DILocation(line: 1857, column: 51, scope: !5324)
!5327 = !DILocation(line: 1857, column: 27, scope: !5324)
!5328 = !DILocation(line: 1858, column: 14, scope: !5324)
!5329 = !DILocation(line: 1859, column: 7, scope: !5324)
!5330 = !DILocation(line: 1859, column: 10, scope: !5324)
!5331 = !DILocation(line: 1859, column: 13, scope: !5324)
!5332 = !DILocation(line: 1860, column: 7, scope: !5324)
!5333 = !DILocation(line: 1860, column: 10, scope: !5324)
!5334 = !DILocation(line: 1860, column: 13, scope: !5324)
!5335 = !DILocation(line: 1858, column: 7, scope: !5324)
!5336 = !DILocation(line: 1863, column: 3, scope: !5316)
!5337 = !DILocation(line: 1864, column: 1, scope: !5316)
!5338 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !625, file: !625, line: 1727, type: !5339, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5339 = !DISubroutineType(types: !5340)
!5340 = !{!1762, !5309}
!5341 = !DILocalVariable(name: "gs", arg: 1, scope: !5338, file: !625, line: 1727, type: !5309)
!5342 = !DILocation(line: 1727, column: 34, scope: !5338)
!5343 = !DILocation(line: 1730, column: 21, scope: !5338)
!5344 = !DILocation(line: 1730, column: 10, scope: !5338)
!5345 = !DILocation(line: 1730, column: 3, scope: !5338)
!5346 = distinct !DISubprogram(name: "is_gimple_assign", scope: !625, file: !625, line: 1677, type: !5347, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5347 = !DISubroutineType(types: !5348)
!5348 = !{!1875, !5309}
!5349 = !DILocalVariable(name: "gs", arg: 1, scope: !5346, file: !625, line: 1677, type: !5309)
!5350 = !DILocation(line: 1677, column: 32, scope: !5346)
!5351 = !DILocation(line: 1679, column: 23, scope: !5346)
!5352 = !DILocation(line: 1679, column: 10, scope: !5346)
!5353 = !DILocation(line: 1679, column: 27, scope: !5346)
!5354 = !DILocation(line: 1679, column: 3, scope: !5346)
!5355 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !625, file: !625, line: 1815, type: !5356, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5356 = !DISubroutineType(types: !5357)
!5357 = !{!317, !5309}
!5358 = !DILocalVariable(name: "gs", arg: 1, scope: !5355, file: !625, line: 1815, type: !5309)
!5359 = !DILocation(line: 1815, column: 38, scope: !5355)
!5360 = !DILocalVariable(name: "code", scope: !5355, file: !625, line: 1817, type: !317)
!5361 = !DILocation(line: 1817, column: 18, scope: !5355)
!5362 = !DILocation(line: 1820, column: 28, scope: !5355)
!5363 = !DILocation(line: 1820, column: 10, scope: !5355)
!5364 = !DILocation(line: 1820, column: 8, scope: !5355)
!5365 = !DILocation(line: 1821, column: 29, scope: !5366)
!5366 = distinct !DILexicalBlock(scope: !5355, file: !625, line: 1821, column: 7)
!5367 = !DILocation(line: 1821, column: 7, scope: !5366)
!5368 = !DILocation(line: 1821, column: 35, scope: !5366)
!5369 = !DILocation(line: 1821, column: 7, scope: !5355)
!5370 = !DILocation(line: 1822, column: 12, scope: !5366)
!5371 = !DILocation(line: 1822, column: 10, scope: !5366)
!5372 = !DILocation(line: 1822, column: 5, scope: !5366)
!5373 = !DILocation(line: 1824, column: 10, scope: !5355)
!5374 = !DILocation(line: 1824, column: 3, scope: !5355)
!5375 = distinct !DISubprogram(name: "gimple_expr_code", scope: !625, file: !625, line: 1438, type: !5356, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5376 = !DILocalVariable(name: "stmt", arg: 1, scope: !5375, file: !625, line: 1438, type: !5309)
!5377 = !DILocation(line: 1438, column: 32, scope: !5375)
!5378 = !DILocalVariable(name: "code", scope: !5375, file: !625, line: 1440, type: !624)
!5379 = !DILocation(line: 1440, column: 20, scope: !5375)
!5380 = !DILocation(line: 1440, column: 40, scope: !5375)
!5381 = !DILocation(line: 1440, column: 27, scope: !5375)
!5382 = !DILocation(line: 1441, column: 7, scope: !5383)
!5383 = distinct !DILexicalBlock(scope: !5375, file: !625, line: 1441, column: 7)
!5384 = !DILocation(line: 1441, column: 12, scope: !5383)
!5385 = !DILocation(line: 1441, column: 29, scope: !5383)
!5386 = !DILocation(line: 1441, column: 32, scope: !5383)
!5387 = !DILocation(line: 1441, column: 37, scope: !5383)
!5388 = !DILocation(line: 1441, column: 7, scope: !5375)
!5389 = !DILocation(line: 1442, column: 29, scope: !5383)
!5390 = !DILocation(line: 1442, column: 35, scope: !5383)
!5391 = !DILocation(line: 1442, column: 42, scope: !5383)
!5392 = !DILocation(line: 1442, column: 5, scope: !5383)
!5393 = !DILocation(line: 1443, column: 12, scope: !5394)
!5394 = distinct !DILexicalBlock(scope: !5383, file: !625, line: 1443, column: 12)
!5395 = !DILocation(line: 1443, column: 17, scope: !5394)
!5396 = !DILocation(line: 1443, column: 12, scope: !5383)
!5397 = !DILocation(line: 1444, column: 5, scope: !5394)
!5398 = !DILocation(line: 1446, column: 5, scope: !5394)
!5399 = !DILocation(line: 1448, column: 5, scope: !5375)
!5400 = !DILocation(line: 1450, column: 1, scope: !5375)
!5401 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !625, file: !625, line: 1686, type: !5402, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5402 = !DISubroutineType(types: !5403)
!5403 = !{!663, !317}
!5404 = !DILocalVariable(name: "code", arg: 1, scope: !5401, file: !625, line: 1686, type: !317)
!5405 = !DILocation(line: 1686, column: 38, scope: !5401)
!5406 = !DILocation(line: 1688, column: 63, scope: !5401)
!5407 = !DILocation(line: 1688, column: 34, scope: !5401)
!5408 = !DILocation(line: 1688, column: 10, scope: !5401)
!5409 = !DILocation(line: 1688, column: 3, scope: !5401)
!5410 = distinct !DISubprogram(name: "gimple_op", scope: !625, file: !625, line: 1631, type: !5411, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5411 = !DISubroutineType(types: !5412)
!5412 = !{!1762, !5309, !7}
!5413 = !DILocalVariable(name: "gs", arg: 1, scope: !5410, file: !625, line: 1631, type: !5309)
!5414 = !DILocation(line: 1631, column: 25, scope: !5410)
!5415 = !DILocalVariable(name: "i", arg: 2, scope: !5410, file: !625, line: 1631, type: !7)
!5416 = !DILocation(line: 1631, column: 38, scope: !5410)
!5417 = !DILocation(line: 1633, column: 23, scope: !5418)
!5418 = distinct !DILexicalBlock(scope: !5410, file: !625, line: 1633, column: 7)
!5419 = !DILocation(line: 1633, column: 7, scope: !5418)
!5420 = !DILocation(line: 1633, column: 7, scope: !5410)
!5421 = !DILocation(line: 1638, column: 26, scope: !5422)
!5422 = distinct !DILexicalBlock(scope: !5418, file: !625, line: 1634, column: 5)
!5423 = !DILocation(line: 1638, column: 14, scope: !5422)
!5424 = !DILocation(line: 1638, column: 50, scope: !5422)
!5425 = !DILocation(line: 1638, column: 7, scope: !5422)
!5426 = !DILocation(line: 1641, column: 5, scope: !5418)
!5427 = !DILocation(line: 1642, column: 1, scope: !5410)
!5428 = distinct !DISubprogram(name: "gimple_has_ops", scope: !625, file: !625, line: 1274, type: !5347, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5429 = !DILocalVariable(name: "g", arg: 1, scope: !5428, file: !625, line: 1274, type: !5309)
!5430 = !DILocation(line: 1274, column: 30, scope: !5428)
!5431 = !DILocation(line: 1276, column: 23, scope: !5428)
!5432 = !DILocation(line: 1276, column: 10, scope: !5428)
!5433 = !DILocation(line: 1276, column: 26, scope: !5428)
!5434 = !DILocation(line: 1276, column: 41, scope: !5428)
!5435 = !DILocation(line: 1276, column: 57, scope: !5428)
!5436 = !DILocation(line: 1276, column: 44, scope: !5428)
!5437 = !DILocation(line: 1276, column: 60, scope: !5428)
!5438 = !DILocation(line: 0, scope: !5428)
!5439 = !DILocation(line: 1276, column: 3, scope: !5428)
!5440 = distinct !DISubprogram(name: "gimple_ops", scope: !625, file: !625, line: 1614, type: !5441, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5441 = !DISubroutineType(types: !5442)
!5442 = !{!2173, !1636}
!5443 = !DILocalVariable(name: "gs", arg: 1, scope: !5440, file: !625, line: 1614, type: !1636)
!5444 = !DILocation(line: 1614, column: 20, scope: !5440)
!5445 = !DILocalVariable(name: "off", scope: !5440, file: !625, line: 1616, type: !2082)
!5446 = !DILocation(line: 1616, column: 10, scope: !5440)
!5447 = !DILocation(line: 1621, column: 56, scope: !5440)
!5448 = !DILocation(line: 1621, column: 28, scope: !5440)
!5449 = !DILocation(line: 1621, column: 9, scope: !5440)
!5450 = !DILocation(line: 1621, column: 7, scope: !5440)
!5451 = !DILocation(line: 1622, column: 3, scope: !5440)
!5452 = !DILocation(line: 1624, column: 29, scope: !5440)
!5453 = !DILocation(line: 1624, column: 20, scope: !5440)
!5454 = !DILocation(line: 1624, column: 34, scope: !5440)
!5455 = !DILocation(line: 1624, column: 32, scope: !5440)
!5456 = !DILocation(line: 1624, column: 10, scope: !5440)
!5457 = !DILocation(line: 1624, column: 3, scope: !5440)
!5458 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !625, file: !625, line: 1073, type: !5459, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5459 = !DISubroutineType(types: !5460)
!5460 = !{!669, !1636}
!5461 = !DILocalVariable(name: "gs", arg: 1, scope: !5458, file: !625, line: 1073, type: !1636)
!5462 = !DILocation(line: 1073, column: 36, scope: !5458)
!5463 = !DILocation(line: 1075, column: 37, scope: !5458)
!5464 = !DILocation(line: 1075, column: 24, scope: !5458)
!5465 = !DILocation(line: 1075, column: 10, scope: !5458)
!5466 = !DILocation(line: 1075, column: 3, scope: !5458)
!5467 = distinct !DISubprogram(name: "gss_for_code", scope: !625, file: !625, line: 1061, type: !5468, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5468 = !DISubroutineType(types: !5469)
!5469 = !{!669, !624}
!5470 = !DILocalVariable(name: "code", arg: 1, scope: !5467, file: !625, line: 1061, type: !624)
!5471 = !DILocation(line: 1061, column: 32, scope: !5467)
!5472 = !DILocation(line: 1066, column: 24, scope: !5467)
!5473 = !DILocation(line: 1066, column: 10, scope: !5467)
!5474 = !DILocation(line: 1066, column: 3, scope: !5467)
!5475 = distinct !DISubprogram(name: "analyze_matrix_decl", scope: !3, file: !3, line: 485, type: !5476, scopeLine: 486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5476 = !DISubroutineType(types: !5477)
!5477 = !{!2986, !1762}
!5478 = !DILocalVariable(name: "var_decl", arg: 1, scope: !5475, file: !3, line: 485, type: !1762)
!5479 = !DILocation(line: 485, column: 27, scope: !5475)
!5480 = !DILocalVariable(name: "m_node", scope: !5475, file: !3, line: 487, type: !2986)
!5481 = !DILocation(line: 487, column: 23, scope: !5475)
!5482 = !DILocalVariable(name: "tmpmi", scope: !5475, file: !3, line: 487, type: !2936)
!5483 = !DILocation(line: 487, column: 31, scope: !5475)
!5484 = !DILocalVariable(name: "mi", scope: !5475, file: !3, line: 487, type: !2986)
!5485 = !DILocation(line: 487, column: 39, scope: !5475)
!5486 = !DILocalVariable(name: "var_type", scope: !5475, file: !3, line: 488, type: !1762)
!5487 = !DILocation(line: 488, column: 8, scope: !5475)
!5488 = !DILocalVariable(name: "dim_num", scope: !5475, file: !3, line: 489, type: !1575)
!5489 = !DILocation(line: 489, column: 7, scope: !5475)
!5490 = !DILocation(line: 491, column: 3, scope: !5475)
!5491 = !DILocation(line: 493, column: 7, scope: !5492)
!5492 = distinct !DILexicalBlock(scope: !5475, file: !3, line: 493, column: 7)
!5493 = !DILocation(line: 493, column: 28, scope: !5492)
!5494 = !DILocation(line: 493, column: 7, scope: !5475)
!5495 = !DILocation(line: 494, column: 16, scope: !5492)
!5496 = !DILocation(line: 494, column: 14, scope: !5492)
!5497 = !DILocation(line: 494, column: 5, scope: !5492)
!5498 = !DILocation(line: 495, column: 12, scope: !5499)
!5499 = distinct !DILexicalBlock(scope: !5492, file: !3, line: 495, column: 12)
!5500 = !DILocation(line: 495, column: 33, scope: !5499)
!5501 = !DILocation(line: 495, column: 12, scope: !5492)
!5502 = !DILocation(line: 496, column: 16, scope: !5499)
!5503 = !DILocation(line: 496, column: 14, scope: !5499)
!5504 = !DILocation(line: 496, column: 5, scope: !5499)
!5505 = !DILocation(line: 498, column: 5, scope: !5499)
!5506 = !DILocation(line: 500, column: 8, scope: !5507)
!5507 = distinct !DILexicalBlock(scope: !5475, file: !3, line: 500, column: 7)
!5508 = !DILocation(line: 500, column: 7, scope: !5475)
!5509 = !DILocation(line: 501, column: 5, scope: !5507)
!5510 = !DILocation(line: 503, column: 3, scope: !5475)
!5511 = !DILocation(line: 503, column: 10, scope: !5475)
!5512 = !DILocation(line: 505, column: 18, scope: !5513)
!5513 = distinct !DILexicalBlock(scope: !5475, file: !3, line: 504, column: 5)
!5514 = !DILocation(line: 505, column: 16, scope: !5513)
!5515 = !DILocation(line: 506, column: 14, scope: !5513)
!5516 = distinct !{!5516, !5510, !5517}
!5517 = !DILocation(line: 507, column: 5, scope: !5475)
!5518 = !DILocation(line: 509, column: 7, scope: !5519)
!5519 = distinct !DILexicalBlock(scope: !5475, file: !3, line: 509, column: 7)
!5520 = !DILocation(line: 509, column: 15, scope: !5519)
!5521 = !DILocation(line: 509, column: 7, scope: !5475)
!5522 = !DILocation(line: 510, column: 5, scope: !5519)
!5523 = !DILocation(line: 512, column: 8, scope: !5524)
!5524 = distinct !DILexicalBlock(scope: !5475, file: !3, line: 512, column: 7)
!5525 = !DILocation(line: 513, column: 7, scope: !5524)
!5526 = !DILocation(line: 513, column: 10, scope: !5524)
!5527 = !DILocation(line: 513, column: 48, scope: !5524)
!5528 = !DILocation(line: 512, column: 7, scope: !5475)
!5529 = !DILocation(line: 514, column: 5, scope: !5524)
!5530 = !DILocation(line: 517, column: 16, scope: !5475)
!5531 = !DILocation(line: 517, column: 9, scope: !5475)
!5532 = !DILocation(line: 517, column: 14, scope: !5475)
!5533 = !DILocation(line: 518, column: 42, scope: !5475)
!5534 = !DILocation(line: 518, column: 61, scope: !5475)
!5535 = !DILocation(line: 518, column: 31, scope: !5475)
!5536 = !DILocation(line: 518, column: 8, scope: !5475)
!5537 = !DILocation(line: 518, column: 6, scope: !5475)
!5538 = !DILocation(line: 520, column: 7, scope: !5539)
!5539 = distinct !DILexicalBlock(scope: !5475, file: !3, line: 520, column: 7)
!5540 = !DILocation(line: 520, column: 7, scope: !5475)
!5541 = !DILocation(line: 521, column: 5, scope: !5539)
!5542 = !DILocation(line: 525, column: 35, scope: !5475)
!5543 = !DILocation(line: 525, column: 12, scope: !5475)
!5544 = !DILocation(line: 525, column: 10, scope: !5475)
!5545 = !DILocation(line: 526, column: 18, scope: !5475)
!5546 = !DILocation(line: 526, column: 3, scope: !5475)
!5547 = !DILocation(line: 526, column: 11, scope: !5475)
!5548 = !DILocation(line: 526, column: 16, scope: !5475)
!5549 = !DILocation(line: 527, column: 22, scope: !5475)
!5550 = !DILocation(line: 527, column: 3, scope: !5475)
!5551 = !DILocation(line: 527, column: 11, scope: !5475)
!5552 = !DILocation(line: 527, column: 20, scope: !5475)
!5553 = !DILocation(line: 529, column: 37, scope: !5475)
!5554 = !DILocation(line: 529, column: 28, scope: !5475)
!5555 = !DILocation(line: 529, column: 7, scope: !5475)
!5556 = !DILocation(line: 528, column: 3, scope: !5475)
!5557 = !DILocation(line: 528, column: 11, scope: !5475)
!5558 = !DILocation(line: 529, column: 5, scope: !5475)
!5559 = !DILocation(line: 533, column: 3, scope: !5475)
!5560 = !DILocation(line: 533, column: 11, scope: !5475)
!5561 = !DILocation(line: 533, column: 37, scope: !5475)
!5562 = !DILocation(line: 534, column: 3, scope: !5475)
!5563 = !DILocation(line: 534, column: 11, scope: !5475)
!5564 = !DILocation(line: 534, column: 27, scope: !5475)
!5565 = !DILocation(line: 536, column: 10, scope: !5475)
!5566 = !DILocation(line: 536, column: 3, scope: !5475)
!5567 = !DILocation(line: 537, column: 1, scope: !5475)
!5568 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !318, file: !318, line: 182, type: !5569, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5569 = !DISubroutineType(types: !5570)
!5570 = !{!7, !5571}
!5571 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5572, size: 64)
!5572 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2126)
!5573 = !DILocalVariable(name: "vec_", arg: 1, scope: !5568, file: !318, line: 182, type: !5571)
!5574 = !DILocation(line: 182, column: 1, scope: !5568)
!5575 = distinct !DISubprogram(name: "analyze_matrix_allocation_site", scope: !3, file: !3, line: 792, type: !5576, scopeLine: 794, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5576 = !DISubroutineType(types: !5577)
!5577 = !{null, !2986, !1636, !1575, !3656}
!5578 = !DILocalVariable(name: "mi", arg: 1, scope: !5575, file: !3, line: 792, type: !2986)
!5579 = !DILocation(line: 792, column: 53, scope: !5575)
!5580 = !DILocalVariable(name: "stmt", arg: 2, scope: !5575, file: !3, line: 792, type: !1636)
!5581 = !DILocation(line: 792, column: 64, scope: !5575)
!5582 = !DILocalVariable(name: "level", arg: 3, scope: !5575, file: !3, line: 793, type: !1575)
!5583 = !DILocation(line: 793, column: 9, scope: !5575)
!5584 = !DILocalVariable(name: "visited", arg: 4, scope: !5575, file: !3, line: 793, type: !3656)
!5585 = !DILocation(line: 793, column: 24, scope: !5575)
!5586 = !DILocation(line: 795, column: 29, scope: !5587)
!5587 = distinct !DILexicalBlock(scope: !5575, file: !3, line: 795, column: 7)
!5588 = !DILocation(line: 795, column: 7, scope: !5587)
!5589 = !DILocation(line: 795, column: 35, scope: !5587)
!5590 = !DILocation(line: 795, column: 60, scope: !5587)
!5591 = !DILocation(line: 795, column: 38, scope: !5587)
!5592 = !DILocation(line: 795, column: 7, scope: !5575)
!5593 = !DILocalVariable(name: "rhs", scope: !5594, file: !3, line: 797, type: !1762)
!5594 = distinct !DILexicalBlock(scope: !5587, file: !3, line: 796, column: 5)
!5595 = !DILocation(line: 797, column: 12, scope: !5594)
!5596 = !DILocation(line: 797, column: 38, scope: !5594)
!5597 = !DILocation(line: 797, column: 18, scope: !5594)
!5598 = !DILocation(line: 799, column: 11, scope: !5599)
!5599 = distinct !DILexicalBlock(scope: !5594, file: !3, line: 799, column: 11)
!5600 = !DILocation(line: 799, column: 27, scope: !5599)
!5601 = !DILocation(line: 799, column: 11, scope: !5594)
!5602 = !DILocalVariable(name: "def", scope: !5603, file: !3, line: 801, type: !1636)
!5603 = distinct !DILexicalBlock(scope: !5599, file: !3, line: 800, column: 2)
!5604 = !DILocation(line: 801, column: 11, scope: !5603)
!5605 = !DILocation(line: 801, column: 17, scope: !5603)
!5606 = !DILocation(line: 803, column: 36, scope: !5603)
!5607 = !DILocation(line: 803, column: 40, scope: !5603)
!5608 = !DILocation(line: 803, column: 45, scope: !5603)
!5609 = !DILocation(line: 803, column: 52, scope: !5603)
!5610 = !DILocation(line: 803, column: 4, scope: !5603)
!5611 = !DILocation(line: 804, column: 4, scope: !5603)
!5612 = !DILocation(line: 808, column: 16, scope: !5613)
!5613 = distinct !DILexicalBlock(scope: !5599, file: !3, line: 808, column: 16)
!5614 = !DILocation(line: 808, column: 23, scope: !5613)
!5615 = !DILocation(line: 808, column: 27, scope: !5613)
!5616 = !DILocation(line: 808, column: 20, scope: !5613)
!5617 = !DILocation(line: 808, column: 16, scope: !5599)
!5618 = !DILocation(line: 809, column: 2, scope: !5613)
!5619 = !DILocation(line: 810, column: 5, scope: !5594)
!5620 = !DILocation(line: 812, column: 28, scope: !5621)
!5621 = distinct !DILexicalBlock(scope: !5587, file: !3, line: 812, column: 12)
!5622 = !DILocation(line: 812, column: 12, scope: !5621)
!5623 = !DILocation(line: 812, column: 12, scope: !5587)
!5624 = !DILocalVariable(name: "call_flags", scope: !5625, file: !3, line: 814, type: !1575)
!5625 = distinct !DILexicalBlock(scope: !5621, file: !3, line: 813, column: 5)
!5626 = !DILocation(line: 814, column: 11, scope: !5625)
!5627 = !DILocation(line: 814, column: 43, scope: !5625)
!5628 = !DILocation(line: 814, column: 24, scope: !5625)
!5629 = !DILocation(line: 816, column: 13, scope: !5630)
!5630 = distinct !DILexicalBlock(scope: !5625, file: !3, line: 816, column: 11)
!5631 = !DILocation(line: 816, column: 24, scope: !5630)
!5632 = !DILocation(line: 816, column: 11, scope: !5625)
!5633 = !DILocation(line: 818, column: 34, scope: !5634)
!5634 = distinct !DILexicalBlock(scope: !5630, file: !3, line: 817, column: 2)
!5635 = !DILocation(line: 818, column: 38, scope: !5634)
!5636 = !DILocation(line: 818, column: 45, scope: !5634)
!5637 = !DILocation(line: 818, column: 4, scope: !5634)
!5638 = !DILocation(line: 819, column: 4, scope: !5634)
!5639 = !DILocalVariable(name: "malloc_fn_decl", scope: !5640, file: !3, line: 823, type: !1762)
!5640 = distinct !DILexicalBlock(scope: !5630, file: !3, line: 822, column: 2)
!5641 = !DILocation(line: 823, column: 9, scope: !5640)
!5642 = !DILocation(line: 825, column: 41, scope: !5640)
!5643 = !DILocation(line: 825, column: 21, scope: !5640)
!5644 = !DILocation(line: 825, column: 19, scope: !5640)
!5645 = !DILocation(line: 826, column: 8, scope: !5646)
!5646 = distinct !DILexicalBlock(scope: !5640, file: !3, line: 826, column: 8)
!5647 = !DILocation(line: 826, column: 23, scope: !5646)
!5648 = !DILocation(line: 826, column: 8, scope: !5640)
!5649 = !DILocation(line: 828, column: 38, scope: !5650)
!5650 = distinct !DILexicalBlock(scope: !5646, file: !3, line: 827, column: 6)
!5651 = !DILocation(line: 828, column: 42, scope: !5650)
!5652 = !DILocation(line: 828, column: 49, scope: !5650)
!5653 = !DILocation(line: 828, column: 8, scope: !5650)
!5654 = !DILocation(line: 829, column: 8, scope: !5650)
!5655 = !DILocation(line: 831, column: 8, scope: !5656)
!5656 = distinct !DILexicalBlock(scope: !5640, file: !3, line: 831, column: 8)
!5657 = !DILocation(line: 831, column: 44, scope: !5656)
!5658 = !DILocation(line: 831, column: 8, scope: !5640)
!5659 = !DILocation(line: 833, column: 12, scope: !5660)
!5660 = distinct !DILexicalBlock(scope: !5661, file: !3, line: 833, column: 12)
!5661 = distinct !DILexicalBlock(scope: !5656, file: !3, line: 832, column: 6)
!5662 = !DILocation(line: 833, column: 12, scope: !5661)
!5663 = !DILocation(line: 834, column: 12, scope: !5660)
!5664 = !DILocation(line: 836, column: 15, scope: !5660)
!5665 = !DILocation(line: 836, column: 19, scope: !5660)
!5666 = !DILocation(line: 836, column: 5, scope: !5660)
!5667 = !DILocation(line: 836, column: 36, scope: !5660)
!5668 = !DILocation(line: 836, column: 26, scope: !5660)
!5669 = !DILocation(line: 834, column: 3, scope: !5660)
!5670 = !DILocation(line: 837, column: 38, scope: !5661)
!5671 = !DILocation(line: 837, column: 42, scope: !5661)
!5672 = !DILocation(line: 837, column: 49, scope: !5661)
!5673 = !DILocation(line: 837, column: 8, scope: !5661)
!5674 = !DILocation(line: 838, column: 8, scope: !5661)
!5675 = !DILocation(line: 848, column: 11, scope: !5676)
!5676 = distinct !DILexicalBlock(scope: !5625, file: !3, line: 848, column: 11)
!5677 = !DILocation(line: 848, column: 15, scope: !5676)
!5678 = !DILocation(line: 849, column: 4, scope: !5676)
!5679 = !DILocation(line: 849, column: 7, scope: !5676)
!5680 = !DILocation(line: 849, column: 11, scope: !5676)
!5681 = !DILocation(line: 849, column: 29, scope: !5676)
!5682 = !DILocation(line: 849, column: 35, scope: !5676)
!5683 = !DILocation(line: 849, column: 32, scope: !5676)
!5684 = !DILocation(line: 850, column: 4, scope: !5676)
!5685 = !DILocation(line: 850, column: 7, scope: !5676)
!5686 = !DILocation(line: 850, column: 11, scope: !5676)
!5687 = !DILocation(line: 850, column: 28, scope: !5676)
!5688 = !DILocation(line: 850, column: 38, scope: !5676)
!5689 = !DILocation(line: 850, column: 35, scope: !5676)
!5690 = !DILocation(line: 848, column: 11, scope: !5625)
!5691 = !DILocation(line: 852, column: 34, scope: !5692)
!5692 = distinct !DILexicalBlock(scope: !5676, file: !3, line: 851, column: 2)
!5693 = !DILocation(line: 852, column: 38, scope: !5692)
!5694 = !DILocation(line: 852, column: 45, scope: !5692)
!5695 = !DILocation(line: 852, column: 4, scope: !5692)
!5696 = !DILocation(line: 853, column: 4, scope: !5692)
!5697 = !DILocation(line: 856, column: 23, scope: !5676)
!5698 = !DILocation(line: 856, column: 27, scope: !5676)
!5699 = !DILocation(line: 856, column: 33, scope: !5676)
!5700 = !DILocation(line: 856, column: 2, scope: !5676)
!5701 = !DILocation(line: 857, column: 7, scope: !5625)
!5702 = !DILocation(line: 861, column: 33, scope: !5575)
!5703 = !DILocation(line: 861, column: 37, scope: !5575)
!5704 = !DILocation(line: 861, column: 44, scope: !5575)
!5705 = !DILocation(line: 861, column: 3, scope: !5575)
!5706 = !DILocation(line: 862, column: 1, scope: !5575)
!5707 = distinct !DISubprogram(name: "analyze_matrix_accesses", scope: !3, file: !3, line: 1354, type: !5708, scopeLine: 1357, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5708 = !DISubroutineType(types: !5709)
!5709 = !{null, !2986, !1762, !1575, !1875, !3656, !1875}
!5710 = !DILocalVariable(name: "mi", arg: 1, scope: !5707, file: !3, line: 1354, type: !2986)
!5711 = !DILocation(line: 1354, column: 46, scope: !5707)
!5712 = !DILocalVariable(name: "ssa_var", arg: 2, scope: !5707, file: !3, line: 1354, type: !1762)
!5713 = !DILocation(line: 1354, column: 55, scope: !5707)
!5714 = !DILocalVariable(name: "current_indirect_level", arg: 3, scope: !5707, file: !3, line: 1355, type: !1575)
!5715 = !DILocation(line: 1355, column: 9, scope: !5707)
!5716 = !DILocalVariable(name: "last_op", arg: 4, scope: !5707, file: !3, line: 1355, type: !1875)
!5717 = !DILocation(line: 1355, column: 38, scope: !5707)
!5718 = !DILocalVariable(name: "visited", arg: 5, scope: !5707, file: !3, line: 1356, type: !3656)
!5719 = !DILocation(line: 1356, column: 13, scope: !5707)
!5720 = !DILocalVariable(name: "record_accesses", arg: 6, scope: !5707, file: !3, line: 1356, type: !1875)
!5721 = !DILocation(line: 1356, column: 27, scope: !5707)
!5722 = !DILocalVariable(name: "imm_iter", scope: !5707, file: !3, line: 1358, type: !4153)
!5723 = !DILocation(line: 1358, column: 20, scope: !5707)
!5724 = !DILocalVariable(name: "use_p", scope: !5707, file: !3, line: 1359, type: !2993)
!5725 = !DILocation(line: 1359, column: 17, scope: !5707)
!5726 = !DILocation(line: 1361, column: 21, scope: !5707)
!5727 = !DILocation(line: 1361, column: 25, scope: !5707)
!5728 = !DILocation(line: 1361, column: 54, scope: !5707)
!5729 = !DILocation(line: 1362, column: 7, scope: !5707)
!5730 = !DILocation(line: 1361, column: 3, scope: !5707)
!5731 = !DILocation(line: 1367, column: 7, scope: !5732)
!5732 = distinct !DILexicalBlock(scope: !5707, file: !3, line: 1367, column: 7)
!5733 = !DILocation(line: 1367, column: 11, scope: !5732)
!5734 = !DILocation(line: 1367, column: 37, scope: !5732)
!5735 = !DILocation(line: 1368, column: 7, scope: !5732)
!5736 = !DILocation(line: 1368, column: 10, scope: !5732)
!5737 = !DILocation(line: 1368, column: 14, scope: !5732)
!5738 = !DILocation(line: 1368, column: 43, scope: !5732)
!5739 = !DILocation(line: 1368, column: 40, scope: !5732)
!5740 = !DILocation(line: 1367, column: 7, scope: !5707)
!5741 = !DILocation(line: 1369, column: 5, scope: !5732)
!5742 = !DILocation(line: 1375, column: 3, scope: !5707)
!5743 = !DILocation(line: 1377, column: 3, scope: !5744)
!5744 = distinct !DILexicalBlock(scope: !5707, file: !3, line: 1377, column: 3)
!5745 = !DILocation(line: 1377, column: 3, scope: !5746)
!5746 = distinct !DILexicalBlock(scope: !5744, file: !3, line: 1377, column: 3)
!5747 = !DILocalVariable(name: "use_stmt", scope: !5748, file: !3, line: 1379, type: !1636)
!5748 = distinct !DILexicalBlock(scope: !5746, file: !3, line: 1378, column: 3)
!5749 = !DILocation(line: 1379, column: 12, scope: !5748)
!5750 = !DILocation(line: 1379, column: 23, scope: !5748)
!5751 = !DILocation(line: 1380, column: 22, scope: !5752)
!5752 = distinct !DILexicalBlock(scope: !5748, file: !3, line: 1380, column: 9)
!5753 = !DILocation(line: 1380, column: 9, scope: !5752)
!5754 = !DILocation(line: 1380, column: 32, scope: !5752)
!5755 = !DILocation(line: 1380, column: 9, scope: !5748)
!5756 = !DILocation(line: 1387, column: 38, scope: !5752)
!5757 = !DILocation(line: 1387, column: 42, scope: !5752)
!5758 = !DILocation(line: 1387, column: 52, scope: !5752)
!5759 = !DILocation(line: 1388, column: 10, scope: !5752)
!5760 = !DILocation(line: 1388, column: 19, scope: !5752)
!5761 = !DILocation(line: 1387, column: 7, scope: !5752)
!5762 = !DILocation(line: 1390, column: 30, scope: !5763)
!5763 = distinct !DILexicalBlock(scope: !5752, file: !3, line: 1390, column: 14)
!5764 = !DILocation(line: 1390, column: 14, scope: !5763)
!5765 = !DILocation(line: 1390, column: 14, scope: !5752)
!5766 = !DILocation(line: 1391, column: 39, scope: !5763)
!5767 = !DILocation(line: 1391, column: 43, scope: !5763)
!5768 = !DILocation(line: 1391, column: 52, scope: !5763)
!5769 = !DILocation(line: 1392, column: 11, scope: !5763)
!5770 = !DILocation(line: 1391, column: 7, scope: !5763)
!5771 = !DILocation(line: 1393, column: 32, scope: !5772)
!5772 = distinct !DILexicalBlock(scope: !5763, file: !3, line: 1393, column: 14)
!5773 = !DILocation(line: 1393, column: 14, scope: !5772)
!5774 = !DILocation(line: 1393, column: 14, scope: !5763)
!5775 = !DILocation(line: 1395, column: 36, scope: !5772)
!5776 = !DILocation(line: 1395, column: 40, scope: !5772)
!5777 = !DILocation(line: 1395, column: 49, scope: !5772)
!5778 = !DILocation(line: 1396, column: 8, scope: !5772)
!5779 = !DILocation(line: 1396, column: 32, scope: !5772)
!5780 = !DILocation(line: 1397, column: 8, scope: !5772)
!5781 = !DILocation(line: 1397, column: 17, scope: !5772)
!5782 = !DILocation(line: 1395, column: 2, scope: !5772)
!5783 = !DILocation(line: 1394, column: 30, scope: !5772)
!5784 = !DILocation(line: 1394, column: 7, scope: !5772)
!5785 = !DILocation(line: 1398, column: 3, scope: !5748)
!5786 = distinct !{!5786, !5743, !5787}
!5787 = !DILocation(line: 1398, column: 3, scope: !5744)
!5788 = !DILocation(line: 1399, column: 1, scope: !5707)
!5789 = distinct !DISubprogram(name: "is_gimple_call", scope: !625, file: !625, line: 1870, type: !5347, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5790 = !DILocalVariable(name: "gs", arg: 1, scope: !5789, file: !625, line: 1870, type: !5309)
!5791 = !DILocation(line: 1870, column: 30, scope: !5789)
!5792 = !DILocation(line: 1872, column: 23, scope: !5789)
!5793 = !DILocation(line: 1872, column: 10, scope: !5789)
!5794 = !DILocation(line: 1872, column: 27, scope: !5789)
!5795 = !DILocation(line: 1872, column: 3, scope: !5789)
!5796 = distinct !DISubprogram(name: "mark_min_matrix_escape_level", scope: !3, file: !3, line: 592, type: !5797, scopeLine: 593, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5797 = !DISubroutineType(types: !5798)
!5798 = !{null, !2986, !1575, !1636}
!5799 = !DILocalVariable(name: "mi", arg: 1, scope: !5796, file: !3, line: 592, type: !2986)
!5800 = !DILocation(line: 592, column: 51, scope: !5796)
!5801 = !DILocalVariable(name: "l", arg: 2, scope: !5796, file: !3, line: 592, type: !1575)
!5802 = !DILocation(line: 592, column: 59, scope: !5796)
!5803 = !DILocalVariable(name: "s", arg: 3, scope: !5796, file: !3, line: 592, type: !1636)
!5804 = !DILocation(line: 592, column: 69, scope: !5796)
!5805 = !DILocation(line: 594, column: 7, scope: !5806)
!5806 = distinct !DILexicalBlock(scope: !5796, file: !3, line: 594, column: 7)
!5807 = !DILocation(line: 594, column: 11, scope: !5806)
!5808 = !DILocation(line: 594, column: 37, scope: !5806)
!5809 = !DILocation(line: 595, column: 7, scope: !5806)
!5810 = !DILocation(line: 595, column: 11, scope: !5806)
!5811 = !DILocation(line: 595, column: 15, scope: !5806)
!5812 = !DILocation(line: 595, column: 43, scope: !5806)
!5813 = !DILocation(line: 595, column: 41, scope: !5806)
!5814 = !DILocation(line: 594, column: 7, scope: !5796)
!5815 = !DILocation(line: 597, column: 39, scope: !5816)
!5816 = distinct !DILexicalBlock(scope: !5806, file: !3, line: 596, column: 5)
!5817 = !DILocation(line: 597, column: 7, scope: !5816)
!5818 = !DILocation(line: 597, column: 11, scope: !5816)
!5819 = !DILocation(line: 597, column: 37, scope: !5816)
!5820 = !DILocation(line: 598, column: 44, scope: !5816)
!5821 = !DILocation(line: 598, column: 7, scope: !5816)
!5822 = !DILocation(line: 598, column: 11, scope: !5816)
!5823 = !DILocation(line: 598, column: 42, scope: !5816)
!5824 = !DILocation(line: 599, column: 5, scope: !5816)
!5825 = !DILocation(line: 600, column: 1, scope: !5796)
!5826 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !625, file: !625, line: 1954, type: !5339, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5827 = !DILocalVariable(name: "gs", arg: 1, scope: !5826, file: !625, line: 1954, type: !5309)
!5828 = !DILocation(line: 1954, column: 34, scope: !5826)
!5829 = !DILocalVariable(name: "addr", scope: !5826, file: !625, line: 1956, type: !1762)
!5830 = !DILocation(line: 1956, column: 8, scope: !5826)
!5831 = !DILocation(line: 1956, column: 31, scope: !5826)
!5832 = !DILocation(line: 1956, column: 15, scope: !5826)
!5833 = !DILocation(line: 1957, column: 7, scope: !5834)
!5834 = distinct !DILexicalBlock(scope: !5826, file: !625, line: 1957, column: 7)
!5835 = !DILocation(line: 1957, column: 24, scope: !5834)
!5836 = !DILocation(line: 1957, column: 7, scope: !5826)
!5837 = !DILocation(line: 1958, column: 12, scope: !5834)
!5838 = !DILocation(line: 1958, column: 5, scope: !5834)
!5839 = !DILocation(line: 1959, column: 3, scope: !5826)
!5840 = !DILocation(line: 1960, column: 1, scope: !5826)
!5841 = distinct !DISubprogram(name: "add_allocation_site", scope: !3, file: !3, line: 720, type: !5842, scopeLine: 721, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5842 = !DISubroutineType(types: !5843)
!5843 = !{null, !2986, !1636, !1575}
!5844 = !DILocalVariable(name: "mi", arg: 1, scope: !5841, file: !3, line: 720, type: !2986)
!5845 = !DILocation(line: 720, column: 42, scope: !5841)
!5846 = !DILocalVariable(name: "stmt", arg: 2, scope: !5841, file: !3, line: 720, type: !1636)
!5847 = !DILocation(line: 720, column: 53, scope: !5841)
!5848 = !DILocalVariable(name: "level", arg: 3, scope: !5841, file: !3, line: 720, type: !1575)
!5849 = !DILocation(line: 720, column: 63, scope: !5841)
!5850 = !DILocalVariable(name: "mcd", scope: !5841, file: !3, line: 722, type: !3994)
!5851 = !DILocation(line: 722, column: 27, scope: !5841)
!5852 = !DILocation(line: 725, column: 8, scope: !5853)
!5853 = distinct !DILexicalBlock(scope: !5841, file: !3, line: 725, column: 7)
!5854 = !DILocation(line: 725, column: 12, scope: !5853)
!5855 = !DILocation(line: 725, column: 7, scope: !5841)
!5856 = !DILocation(line: 726, column: 36, scope: !5853)
!5857 = !DILocation(line: 726, column: 5, scope: !5853)
!5858 = !DILocation(line: 726, column: 9, scope: !5853)
!5859 = !DILocation(line: 726, column: 34, scope: !5853)
!5860 = !DILocation(line: 727, column: 12, scope: !5861)
!5861 = distinct !DILexicalBlock(scope: !5853, file: !3, line: 727, column: 12)
!5862 = !DILocation(line: 727, column: 16, scope: !5861)
!5863 = !DILocation(line: 727, column: 44, scope: !5861)
!5864 = !DILocation(line: 727, column: 41, scope: !5861)
!5865 = !DILocation(line: 727, column: 12, scope: !5853)
!5866 = !DILocalVariable(name: "min_malloc_level", scope: !5867, file: !3, line: 729, type: !1575)
!5867 = distinct !DILexicalBlock(scope: !5861, file: !3, line: 728, column: 5)
!5868 = !DILocation(line: 729, column: 11, scope: !5867)
!5869 = !DILocation(line: 731, column: 7, scope: !5867)
!5870 = !DILocation(line: 739, column: 29, scope: !5871)
!5871 = distinct !DILexicalBlock(scope: !5867, file: !3, line: 739, column: 7)
!5872 = !DILocation(line: 739, column: 12, scope: !5871)
!5873 = !DILocation(line: 740, column: 5, scope: !5874)
!5874 = distinct !DILexicalBlock(scope: !5871, file: !3, line: 739, column: 7)
!5875 = !DILocation(line: 740, column: 24, scope: !5874)
!5876 = !DILocation(line: 740, column: 28, scope: !5874)
!5877 = !DILocation(line: 740, column: 22, scope: !5874)
!5878 = !DILocation(line: 741, column: 5, scope: !5874)
!5879 = !DILocation(line: 741, column: 8, scope: !5874)
!5880 = !DILocation(line: 741, column: 12, scope: !5874)
!5881 = !DILocation(line: 741, column: 29, scope: !5874)
!5882 = !DILocation(line: 0, scope: !5874)
!5883 = !DILocation(line: 739, column: 7, scope: !5871)
!5884 = !DILocation(line: 741, column: 64, scope: !5874)
!5885 = !DILocation(line: 739, column: 7, scope: !5874)
!5886 = distinct !{!5886, !5883, !5887}
!5887 = !DILocation(line: 741, column: 67, scope: !5871)
!5888 = !DILocation(line: 742, column: 11, scope: !5889)
!5889 = distinct !DILexicalBlock(scope: !5867, file: !3, line: 742, column: 11)
!5890 = !DILocation(line: 742, column: 19, scope: !5889)
!5891 = !DILocation(line: 742, column: 17, scope: !5889)
!5892 = !DILocation(line: 742, column: 11, scope: !5867)
!5893 = !DILocation(line: 744, column: 35, scope: !5894)
!5894 = distinct !DILexicalBlock(scope: !5889, file: !3, line: 743, column: 2)
!5895 = !DILocation(line: 744, column: 4, scope: !5894)
!5896 = !DILocation(line: 744, column: 8, scope: !5894)
!5897 = !DILocation(line: 744, column: 33, scope: !5894)
!5898 = !DILocation(line: 745, column: 34, scope: !5894)
!5899 = !DILocation(line: 745, column: 38, scope: !5894)
!5900 = !DILocation(line: 745, column: 56, scope: !5894)
!5901 = !DILocation(line: 745, column: 4, scope: !5894)
!5902 = !DILocation(line: 746, column: 2, scope: !5894)
!5903 = !DILocation(line: 749, column: 34, scope: !5904)
!5904 = distinct !DILexicalBlock(scope: !5889, file: !3, line: 748, column: 2)
!5905 = !DILocation(line: 749, column: 38, scope: !5904)
!5906 = !DILocation(line: 749, column: 45, scope: !5904)
!5907 = !DILocation(line: 749, column: 4, scope: !5904)
!5908 = !DILocation(line: 752, column: 4, scope: !5904)
!5909 = !DILocation(line: 754, column: 5, scope: !5867)
!5910 = !DILocation(line: 757, column: 33, scope: !5841)
!5911 = !DILocation(line: 757, column: 3, scope: !5841)
!5912 = !DILocation(line: 761, column: 8, scope: !5913)
!5913 = distinct !DILexicalBlock(scope: !5841, file: !3, line: 761, column: 7)
!5914 = !DILocation(line: 761, column: 12, scope: !5913)
!5915 = !DILocation(line: 761, column: 7, scope: !5841)
!5916 = !DILocation(line: 763, column: 30, scope: !5917)
!5917 = distinct !DILexicalBlock(scope: !5913, file: !3, line: 762, column: 5)
!5918 = !DILocation(line: 763, column: 7, scope: !5917)
!5919 = !DILocation(line: 763, column: 11, scope: !5917)
!5920 = !DILocation(line: 763, column: 28, scope: !5917)
!5921 = !DILocation(line: 764, column: 32, scope: !5917)
!5922 = !DILocation(line: 764, column: 38, scope: !5917)
!5923 = !DILocation(line: 764, column: 7, scope: !5917)
!5924 = !DILocation(line: 764, column: 11, scope: !5917)
!5925 = !DILocation(line: 764, column: 30, scope: !5917)
!5926 = !DILocation(line: 765, column: 5, scope: !5917)
!5927 = !DILocation(line: 766, column: 12, scope: !5928)
!5928 = distinct !DILexicalBlock(scope: !5913, file: !3, line: 766, column: 12)
!5929 = !DILocation(line: 766, column: 16, scope: !5928)
!5930 = !DILocation(line: 766, column: 38, scope: !5928)
!5931 = !DILocation(line: 766, column: 35, scope: !5928)
!5932 = !DILocation(line: 766, column: 12, scope: !5913)
!5933 = !DILocation(line: 769, column: 4, scope: !5934)
!5934 = distinct !DILexicalBlock(scope: !5928, file: !3, line: 767, column: 5)
!5935 = !DILocation(line: 768, column: 7, scope: !5934)
!5936 = !DILocation(line: 768, column: 11, scope: !5934)
!5937 = !DILocation(line: 769, column: 2, scope: !5934)
!5938 = !DILocation(line: 772, column: 17, scope: !5934)
!5939 = !DILocation(line: 772, column: 21, scope: !5934)
!5940 = !DILocation(line: 772, column: 38, scope: !5934)
!5941 = !DILocation(line: 772, column: 42, scope: !5934)
!5942 = !DILocation(line: 772, column: 61, scope: !5934)
!5943 = !DILocation(line: 772, column: 7, scope: !5934)
!5944 = !DILocation(line: 773, column: 12, scope: !5934)
!5945 = !DILocation(line: 773, column: 20, scope: !5934)
!5946 = !DILocation(line: 773, column: 24, scope: !5934)
!5947 = !DILocation(line: 773, column: 18, scope: !5934)
!5948 = !DILocation(line: 773, column: 11, scope: !5934)
!5949 = !DILocation(line: 773, column: 44, scope: !5934)
!5950 = !DILocation(line: 775, column: 32, scope: !5934)
!5951 = !DILocation(line: 775, column: 38, scope: !5934)
!5952 = !DILocation(line: 775, column: 7, scope: !5934)
!5953 = !DILocation(line: 775, column: 11, scope: !5934)
!5954 = !DILocation(line: 775, column: 30, scope: !5934)
!5955 = !DILocation(line: 776, column: 5, scope: !5934)
!5956 = !DILocation(line: 777, column: 33, scope: !5841)
!5957 = !DILocation(line: 777, column: 3, scope: !5841)
!5958 = !DILocation(line: 777, column: 7, scope: !5841)
!5959 = !DILocation(line: 777, column: 24, scope: !5841)
!5960 = !DILocation(line: 777, column: 31, scope: !5841)
!5961 = !DILocation(line: 778, column: 1, scope: !5841)
!5962 = distinct !DISubprogram(name: "gimple_call_fn", scope: !625, file: !625, line: 1911, type: !5339, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5963 = !DILocalVariable(name: "gs", arg: 1, scope: !5962, file: !625, line: 1911, type: !5309)
!5964 = !DILocation(line: 1911, column: 30, scope: !5962)
!5965 = !DILocation(line: 1914, column: 21, scope: !5962)
!5966 = !DILocation(line: 1914, column: 10, scope: !5962)
!5967 = !DILocation(line: 1914, column: 3, scope: !5962)
!5968 = distinct !DISubprogram(name: "collect_data_for_malloc_call", scope: !3, file: !3, line: 190, type: !5969, scopeLine: 191, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!5969 = !DISubroutineType(types: !5970)
!5970 = !{null, !1636, !5971}
!5971 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3994, size: 64)
!5972 = !DILocalVariable(name: "stmt", arg: 1, scope: !5968, file: !3, line: 190, type: !1636)
!5973 = !DILocation(line: 190, column: 38, scope: !5968)
!5974 = !DILocalVariable(name: "m_data", arg: 2, scope: !5968, file: !3, line: 190, type: !5971)
!5975 = !DILocation(line: 190, column: 69, scope: !5968)
!5976 = !DILocalVariable(name: "size_var", scope: !5968, file: !3, line: 192, type: !1762)
!5977 = !DILocation(line: 192, column: 8, scope: !5968)
!5978 = !DILocalVariable(name: "malloc_fn_decl", scope: !5968, file: !3, line: 193, type: !1762)
!5979 = !DILocation(line: 193, column: 8, scope: !5968)
!5980 = !DILocalVariable(name: "arg1", scope: !5968, file: !3, line: 194, type: !1762)
!5981 = !DILocation(line: 194, column: 8, scope: !5968)
!5982 = !DILocation(line: 196, column: 3, scope: !5968)
!5983 = !DILocation(line: 198, column: 40, scope: !5968)
!5984 = !DILocation(line: 198, column: 20, scope: !5968)
!5985 = !DILocation(line: 198, column: 18, scope: !5968)
!5986 = !DILocation(line: 199, column: 7, scope: !5987)
!5987 = distinct !DILexicalBlock(scope: !5968, file: !3, line: 199, column: 7)
!5988 = !DILocation(line: 199, column: 22, scope: !5987)
!5989 = !DILocation(line: 200, column: 7, scope: !5987)
!5990 = !DILocation(line: 200, column: 10, scope: !5987)
!5991 = !DILocation(line: 200, column: 46, scope: !5987)
!5992 = !DILocation(line: 199, column: 7, scope: !5968)
!5993 = !DILocation(line: 201, column: 5, scope: !5987)
!5994 = !DILocation(line: 203, column: 27, scope: !5968)
!5995 = !DILocation(line: 203, column: 10, scope: !5968)
!5996 = !DILocation(line: 203, column: 8, scope: !5968)
!5997 = !DILocation(line: 204, column: 14, scope: !5968)
!5998 = !DILocation(line: 204, column: 12, scope: !5968)
!5999 = !DILocation(line: 206, column: 23, scope: !5968)
!6000 = !DILocation(line: 206, column: 3, scope: !5968)
!6001 = !DILocation(line: 206, column: 11, scope: !5968)
!6002 = !DILocation(line: 206, column: 21, scope: !5968)
!6003 = !DILocation(line: 207, column: 22, scope: !5968)
!6004 = !DILocation(line: 207, column: 3, scope: !5968)
!6005 = !DILocation(line: 207, column: 11, scope: !5968)
!6006 = !DILocation(line: 207, column: 20, scope: !5968)
!6007 = !DILocation(line: 208, column: 7, scope: !6008)
!6008 = distinct !DILexicalBlock(scope: !5968, file: !3, line: 208, column: 7)
!6009 = !DILocation(line: 208, column: 28, scope: !6008)
!6010 = !DILocation(line: 208, column: 7, scope: !5968)
!6011 = !DILocation(line: 209, column: 27, scope: !6008)
!6012 = !DILocation(line: 209, column: 5, scope: !6008)
!6013 = !DILocation(line: 209, column: 13, scope: !6008)
!6014 = !DILocation(line: 209, column: 25, scope: !6008)
!6015 = !DILocation(line: 211, column: 5, scope: !6008)
!6016 = !DILocation(line: 211, column: 13, scope: !6008)
!6017 = !DILocation(line: 211, column: 25, scope: !6008)
!6018 = !DILocation(line: 212, column: 1, scope: !5968)
!6019 = distinct !DISubprogram(name: "gimple_call_arg", scope: !625, file: !625, line: 2025, type: !5411, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6020 = !DILocalVariable(name: "gs", arg: 1, scope: !6019, file: !625, line: 2025, type: !5309)
!6021 = !DILocation(line: 2025, column: 31, scope: !6019)
!6022 = !DILocalVariable(name: "index", arg: 2, scope: !6019, file: !625, line: 2025, type: !7)
!6023 = !DILocation(line: 2025, column: 44, scope: !6019)
!6024 = !DILocation(line: 2028, column: 21, scope: !6019)
!6025 = !DILocation(line: 2028, column: 25, scope: !6019)
!6026 = !DILocation(line: 2028, column: 31, scope: !6019)
!6027 = !DILocation(line: 2028, column: 10, scope: !6019)
!6028 = !DILocation(line: 2028, column: 3, scope: !6019)
!6029 = distinct !DISubprogram(name: "update_type_size", scope: !3, file: !3, line: 989, type: !6030, scopeLine: 991, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6030 = !DISubroutineType(types: !6031)
!6031 = !{null, !2986, !1636, !1762, !1575}
!6032 = !DILocalVariable(name: "mi", arg: 1, scope: !6029, file: !3, line: 989, type: !2986)
!6033 = !DILocation(line: 989, column: 39, scope: !6029)
!6034 = !DILocalVariable(name: "stmt", arg: 2, scope: !6029, file: !3, line: 989, type: !1636)
!6035 = !DILocation(line: 989, column: 50, scope: !6029)
!6036 = !DILocalVariable(name: "ssa_var", arg: 3, scope: !6029, file: !3, line: 989, type: !1762)
!6037 = !DILocation(line: 989, column: 61, scope: !6029)
!6038 = !DILocalVariable(name: "current_indirect_level", arg: 4, scope: !6029, file: !3, line: 990, type: !1575)
!6039 = !DILocation(line: 990, column: 9, scope: !6029)
!6040 = !DILocalVariable(name: "lhs", scope: !6029, file: !3, line: 992, type: !1762)
!6041 = !DILocation(line: 992, column: 8, scope: !6029)
!6042 = !DILocalVariable(name: "type_size", scope: !6029, file: !3, line: 993, type: !1732)
!6043 = !DILocation(line: 993, column: 17, scope: !6029)
!6044 = !DILocation(line: 996, column: 25, scope: !6045)
!6045 = distinct !DILexicalBlock(scope: !6029, file: !3, line: 996, column: 7)
!6046 = !DILocation(line: 996, column: 7, scope: !6045)
!6047 = !DILocation(line: 997, column: 7, scope: !6045)
!6048 = !DILocation(line: 997, column: 10, scope: !6045)
!6049 = !DILocation(line: 997, column: 47, scope: !6045)
!6050 = !DILocation(line: 996, column: 7, scope: !6029)
!6051 = !DILocation(line: 999, column: 32, scope: !6052)
!6052 = distinct !DILexicalBlock(scope: !6045, file: !3, line: 998, column: 5)
!6053 = !DILocation(line: 999, column: 13, scope: !6052)
!6054 = !DILocation(line: 999, column: 11, scope: !6052)
!6055 = !DILocation(line: 1000, column: 7, scope: !6052)
!6056 = !DILocation(line: 1003, column: 21, scope: !6052)
!6057 = !DILocation(line: 1003, column: 2, scope: !6052)
!6058 = !DILocation(line: 1002, column: 17, scope: !6052)
!6059 = !DILocation(line: 1006, column: 5, scope: !6052)
!6060 = !DILocation(line: 1008, column: 36, scope: !6045)
!6061 = !DILocation(line: 1008, column: 17, scope: !6045)
!6062 = !DILocation(line: 1008, column: 15, scope: !6045)
!6063 = !DILocation(line: 1013, column: 7, scope: !6064)
!6064 = distinct !DILexicalBlock(scope: !6029, file: !3, line: 1013, column: 7)
!6065 = !DILocation(line: 1013, column: 17, scope: !6064)
!6066 = !DILocation(line: 1013, column: 7, scope: !6029)
!6067 = !DILocation(line: 1014, column: 35, scope: !6064)
!6068 = !DILocation(line: 1014, column: 39, scope: !6064)
!6069 = !DILocation(line: 1014, column: 63, scope: !6064)
!6070 = !DILocation(line: 1014, column: 5, scope: !6064)
!6071 = !DILocalVariable(name: "l", scope: !6072, file: !3, line: 1017, type: !1575)
!6072 = distinct !DILexicalBlock(scope: !6064, file: !3, line: 1016, column: 5)
!6073 = !DILocation(line: 1017, column: 11, scope: !6072)
!6074 = !DILocation(line: 1017, column: 15, scope: !6072)
!6075 = !DILocation(line: 1019, column: 12, scope: !6076)
!6076 = distinct !DILexicalBlock(scope: !6072, file: !3, line: 1019, column: 11)
!6077 = !DILocation(line: 1019, column: 16, scope: !6076)
!6078 = !DILocation(line: 1019, column: 11, scope: !6072)
!6079 = !DILocation(line: 1022, column: 35, scope: !6080)
!6080 = distinct !DILexicalBlock(scope: !6076, file: !3, line: 1020, column: 2)
!6081 = !DILocation(line: 1022, column: 37, scope: !6080)
!6082 = !DILocation(line: 1022, column: 26, scope: !6080)
!6083 = !DILocation(line: 1022, column: 8, scope: !6080)
!6084 = !DILocation(line: 1021, column: 4, scope: !6080)
!6085 = !DILocation(line: 1021, column: 8, scope: !6080)
!6086 = !DILocation(line: 1022, column: 6, scope: !6080)
!6087 = !DILocation(line: 1023, column: 34, scope: !6080)
!6088 = !DILocation(line: 1023, column: 36, scope: !6080)
!6089 = !DILocation(line: 1023, column: 4, scope: !6080)
!6090 = !DILocation(line: 1023, column: 8, scope: !6080)
!6091 = !DILocation(line: 1023, column: 32, scope: !6080)
!6092 = !DILocation(line: 1024, column: 2, scope: !6080)
!6093 = !DILocation(line: 1025, column: 16, scope: !6094)
!6094 = distinct !DILexicalBlock(scope: !6076, file: !3, line: 1025, column: 16)
!6095 = !DILocation(line: 1025, column: 20, scope: !6094)
!6096 = !DILocation(line: 1025, column: 46, scope: !6094)
!6097 = !DILocation(line: 1025, column: 48, scope: !6094)
!6098 = !DILocation(line: 1025, column: 44, scope: !6094)
!6099 = !DILocation(line: 1025, column: 16, scope: !6076)
!6100 = !DILocation(line: 1028, column: 36, scope: !6101)
!6101 = distinct !DILexicalBlock(scope: !6094, file: !3, line: 1026, column: 2)
!6102 = !DILocation(line: 1028, column: 40, scope: !6101)
!6103 = !DILocation(line: 1029, column: 9, scope: !6101)
!6104 = !DILocation(line: 1029, column: 11, scope: !6101)
!6105 = !DILocation(line: 1029, column: 8, scope: !6101)
!6106 = !DILocation(line: 1029, column: 16, scope: !6101)
!6107 = !DILocation(line: 1028, column: 26, scope: !6101)
!6108 = !DILocation(line: 1028, column: 8, scope: !6101)
!6109 = !DILocation(line: 1027, column: 4, scope: !6101)
!6110 = !DILocation(line: 1027, column: 8, scope: !6101)
!6111 = !DILocation(line: 1028, column: 6, scope: !6101)
!6112 = !DILocation(line: 1030, column: 13, scope: !6101)
!6113 = !DILocation(line: 1030, column: 17, scope: !6101)
!6114 = !DILocation(line: 1030, column: 37, scope: !6101)
!6115 = !DILocation(line: 1030, column: 41, scope: !6101)
!6116 = !DILocation(line: 1030, column: 4, scope: !6101)
!6117 = !DILocation(line: 1031, column: 9, scope: !6101)
!6118 = !DILocation(line: 1031, column: 11, scope: !6101)
!6119 = !DILocation(line: 1031, column: 17, scope: !6101)
!6120 = !DILocation(line: 1031, column: 21, scope: !6101)
!6121 = !DILocation(line: 1031, column: 15, scope: !6101)
!6122 = !DILocation(line: 1031, column: 8, scope: !6101)
!6123 = !DILocation(line: 1032, column: 5, scope: !6101)
!6124 = !DILocation(line: 1033, column: 34, scope: !6101)
!6125 = !DILocation(line: 1033, column: 36, scope: !6101)
!6126 = !DILocation(line: 1033, column: 4, scope: !6101)
!6127 = !DILocation(line: 1033, column: 8, scope: !6101)
!6128 = !DILocation(line: 1033, column: 32, scope: !6101)
!6129 = !DILocation(line: 1034, column: 2, scope: !6101)
!6130 = !DILocation(line: 1037, column: 12, scope: !6131)
!6131 = distinct !DILexicalBlock(scope: !6072, file: !3, line: 1037, column: 11)
!6132 = !DILocation(line: 1037, column: 16, scope: !6131)
!6133 = !DILocation(line: 1037, column: 36, scope: !6131)
!6134 = !DILocation(line: 1037, column: 11, scope: !6072)
!6135 = !DILocation(line: 1038, column: 31, scope: !6131)
!6136 = !DILocation(line: 1038, column: 2, scope: !6131)
!6137 = !DILocation(line: 1038, column: 6, scope: !6131)
!6138 = !DILocation(line: 1038, column: 26, scope: !6131)
!6139 = !DILocation(line: 1038, column: 29, scope: !6131)
!6140 = !DILocation(line: 1039, column: 16, scope: !6141)
!6141 = distinct !DILexicalBlock(scope: !6131, file: !3, line: 1039, column: 16)
!6142 = !DILocation(line: 1039, column: 20, scope: !6141)
!6143 = !DILocation(line: 1039, column: 40, scope: !6141)
!6144 = !DILocation(line: 1039, column: 46, scope: !6141)
!6145 = !DILocation(line: 1039, column: 43, scope: !6141)
!6146 = !DILocation(line: 1039, column: 16, scope: !6131)
!6147 = !DILocation(line: 1040, column: 32, scope: !6141)
!6148 = !DILocation(line: 1040, column: 36, scope: !6141)
!6149 = !DILocation(line: 1040, column: 39, scope: !6141)
!6150 = !DILocation(line: 1040, column: 2, scope: !6141)
!6151 = !DILocation(line: 1042, column: 1, scope: !6029)
!6152 = distinct !DISubprogram(name: "first_readonly_imm_use", scope: !3598, file: !3598, line: 292, type: !6153, scopeLine: 293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6153 = !DISubroutineType(types: !6154)
!6154 = !{!2993, !6155, !1762}
!6155 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4153, size: 64)
!6156 = !DILocalVariable(name: "imm", arg: 1, scope: !6152, file: !3598, line: 292, type: !6155)
!6157 = !DILocation(line: 292, column: 43, scope: !6152)
!6158 = !DILocalVariable(name: "var", arg: 2, scope: !6152, file: !3598, line: 292, type: !1762)
!6159 = !DILocation(line: 292, column: 53, scope: !6152)
!6160 = !DILocation(line: 294, column: 18, scope: !6152)
!6161 = !DILocation(line: 294, column: 3, scope: !6152)
!6162 = !DILocation(line: 294, column: 8, scope: !6152)
!6163 = !DILocation(line: 294, column: 14, scope: !6152)
!6164 = !DILocation(line: 295, column: 18, scope: !6152)
!6165 = !DILocation(line: 295, column: 23, scope: !6152)
!6166 = !DILocation(line: 295, column: 30, scope: !6152)
!6167 = !DILocation(line: 295, column: 3, scope: !6152)
!6168 = !DILocation(line: 295, column: 8, scope: !6152)
!6169 = !DILocation(line: 295, column: 16, scope: !6152)
!6170 = !DILocation(line: 299, column: 31, scope: !6171)
!6171 = distinct !DILexicalBlock(scope: !6152, file: !3598, line: 299, column: 7)
!6172 = !DILocation(line: 299, column: 7, scope: !6171)
!6173 = !DILocation(line: 299, column: 7, scope: !6152)
!6174 = !DILocation(line: 300, column: 5, scope: !6171)
!6175 = !DILocation(line: 301, column: 10, scope: !6152)
!6176 = !DILocation(line: 301, column: 15, scope: !6152)
!6177 = !DILocation(line: 301, column: 3, scope: !6152)
!6178 = !DILocation(line: 302, column: 1, scope: !6152)
!6179 = distinct !DISubprogram(name: "end_readonly_imm_use_p", scope: !3598, file: !3598, line: 285, type: !6180, scopeLine: 286, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6180 = !DISubroutineType(types: !6181)
!6181 = !{!1875, !6182}
!6182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6183, size: 64)
!6183 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4153)
!6184 = !DILocalVariable(name: "imm", arg: 1, scope: !6179, file: !3598, line: 285, type: !6182)
!6185 = !DILocation(line: 285, column: 49, scope: !6179)
!6186 = !DILocation(line: 287, column: 11, scope: !6179)
!6187 = !DILocation(line: 287, column: 16, scope: !6179)
!6188 = !DILocation(line: 287, column: 27, scope: !6179)
!6189 = !DILocation(line: 287, column: 32, scope: !6179)
!6190 = !DILocation(line: 287, column: 24, scope: !6179)
!6191 = !DILocation(line: 287, column: 10, scope: !6179)
!6192 = !DILocation(line: 287, column: 3, scope: !6179)
!6193 = distinct !DISubprogram(name: "analyze_accesses_for_phi_node", scope: !3, file: !3, line: 1134, type: !6194, scopeLine: 1137, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6194 = !DISubroutineType(types: !6195)
!6195 = !{null, !2986, !1636, !1575, !3656, !1875}
!6196 = !DILocalVariable(name: "mi", arg: 1, scope: !6193, file: !3, line: 1134, type: !2986)
!6197 = !DILocation(line: 1134, column: 52, scope: !6193)
!6198 = !DILocalVariable(name: "use_stmt", arg: 2, scope: !6193, file: !3, line: 1134, type: !1636)
!6199 = !DILocation(line: 1134, column: 63, scope: !6193)
!6200 = !DILocalVariable(name: "current_indirect_level", arg: 3, scope: !6193, file: !3, line: 1135, type: !1575)
!6201 = !DILocation(line: 1135, column: 15, scope: !6193)
!6202 = !DILocalVariable(name: "visited", arg: 4, scope: !6193, file: !3, line: 1135, type: !3656)
!6203 = !DILocation(line: 1135, column: 47, scope: !6193)
!6204 = !DILocalVariable(name: "record_accesses", arg: 5, scope: !6193, file: !3, line: 1136, type: !1875)
!6205 = !DILocation(line: 1136, column: 16, scope: !6193)
!6206 = !DILocalVariable(name: "tmp_maphi", scope: !6193, file: !3, line: 1139, type: !2989)
!6207 = !DILocation(line: 1139, column: 33, scope: !6193)
!6208 = !DILocalVariable(name: "maphi", scope: !6193, file: !3, line: 1139, type: !2996)
!6209 = !DILocation(line: 1139, column: 45, scope: !6193)
!6210 = !DILocalVariable(name: "pmaphi", scope: !6193, file: !3, line: 1139, type: !2997)
!6211 = !DILocation(line: 1139, column: 54, scope: !6193)
!6212 = !DILocation(line: 1141, column: 19, scope: !6193)
!6213 = !DILocation(line: 1141, column: 13, scope: !6193)
!6214 = !DILocation(line: 1141, column: 17, scope: !6193)
!6215 = !DILocation(line: 1143, column: 19, scope: !6216)
!6216 = distinct !DILexicalBlock(scope: !6193, file: !3, line: 1142, column: 7)
!6217 = !DILocation(line: 1143, column: 43, scope: !6216)
!6218 = !DILocation(line: 1143, column: 8, scope: !6216)
!6219 = !DILocation(line: 1142, column: 16, scope: !6216)
!6220 = !DILocation(line: 1142, column: 14, scope: !6216)
!6221 = !DILocation(line: 1142, column: 7, scope: !6193)
!6222 = !DILocation(line: 1145, column: 11, scope: !6223)
!6223 = distinct !DILexicalBlock(scope: !6224, file: !3, line: 1145, column: 11)
!6224 = distinct !DILexicalBlock(scope: !6216, file: !3, line: 1144, column: 5)
!6225 = !DILocation(line: 1145, column: 18, scope: !6223)
!6226 = !DILocation(line: 1145, column: 39, scope: !6223)
!6227 = !DILocation(line: 1145, column: 36, scope: !6223)
!6228 = !DILocation(line: 1145, column: 11, scope: !6224)
!6229 = !DILocation(line: 1146, column: 2, scope: !6223)
!6230 = !DILocalVariable(name: "level", scope: !6231, file: !3, line: 1149, type: !1575)
!6231 = distinct !DILexicalBlock(scope: !6223, file: !3, line: 1148, column: 2)
!6232 = !DILocation(line: 1149, column: 8, scope: !6231)
!6233 = !DILocation(line: 1149, column: 16, scope: !6231)
!6234 = !DILocalVariable(name: "j", scope: !6231, file: !3, line: 1151, type: !2082)
!6235 = !DILocation(line: 1151, column: 11, scope: !6231)
!6236 = !DILocalVariable(name: "stmt", scope: !6231, file: !3, line: 1152, type: !1636)
!6237 = !DILocation(line: 1152, column: 11, scope: !6231)
!6238 = !DILocation(line: 1154, column: 31, scope: !6231)
!6239 = !DILocation(line: 1154, column: 4, scope: !6231)
!6240 = !DILocation(line: 1154, column: 11, scope: !6231)
!6241 = !DILocation(line: 1154, column: 29, scope: !6231)
!6242 = !DILocation(line: 1155, column: 11, scope: !6243)
!6243 = distinct !DILexicalBlock(scope: !6231, file: !3, line: 1155, column: 4)
!6244 = !DILocation(line: 1155, column: 9, scope: !6243)
!6245 = !DILocation(line: 1155, column: 16, scope: !6246)
!6246 = distinct !DILexicalBlock(scope: !6243, file: !3, line: 1155, column: 4)
!6247 = !DILocation(line: 1155, column: 41, scope: !6246)
!6248 = !DILocation(line: 1155, column: 20, scope: !6246)
!6249 = !DILocation(line: 1155, column: 18, scope: !6246)
!6250 = !DILocation(line: 1155, column: 4, scope: !6243)
!6251 = !DILocalVariable(name: "def", scope: !6252, file: !3, line: 1157, type: !1762)
!6252 = distinct !DILexicalBlock(scope: !6246, file: !3, line: 1156, column: 6)
!6253 = !DILocation(line: 1157, column: 13, scope: !6252)
!6254 = !DILocation(line: 1157, column: 19, scope: !6252)
!6255 = !DILocation(line: 1159, column: 25, scope: !6256)
!6256 = distinct !DILexicalBlock(scope: !6252, file: !3, line: 1159, column: 12)
!6257 = !DILocation(line: 1159, column: 12, scope: !6256)
!6258 = !DILocation(line: 1159, column: 50, scope: !6256)
!6259 = !DILocation(line: 1159, column: 12, scope: !6252)
!6260 = !DILocation(line: 1160, column: 10, scope: !6256)
!6261 = !DILocation(line: 1160, column: 8, scope: !6256)
!6262 = !DILocation(line: 1160, column: 3, scope: !6256)
!6263 = !DILocation(line: 1161, column: 6, scope: !6252)
!6264 = !DILocation(line: 1155, column: 53, scope: !6246)
!6265 = !DILocation(line: 1155, column: 4, scope: !6246)
!6266 = distinct !{!6266, !6250, !6267}
!6267 = !DILocation(line: 1161, column: 6, scope: !6243)
!6268 = !DILocation(line: 1162, column: 34, scope: !6231)
!6269 = !DILocation(line: 1162, column: 38, scope: !6231)
!6270 = !DILocation(line: 1162, column: 45, scope: !6231)
!6271 = !DILocation(line: 1162, column: 4, scope: !6231)
!6272 = !DILocation(line: 1164, column: 7, scope: !6224)
!6273 = !DILocation(line: 1167, column: 5, scope: !6193)
!6274 = !DILocation(line: 1166, column: 11, scope: !6193)
!6275 = !DILocation(line: 1166, column: 9, scope: !6193)
!6276 = !DILocation(line: 1168, column: 16, scope: !6193)
!6277 = !DILocation(line: 1168, column: 3, scope: !6193)
!6278 = !DILocation(line: 1168, column: 10, scope: !6193)
!6279 = !DILocation(line: 1168, column: 14, scope: !6193)
!6280 = !DILocation(line: 1169, column: 30, scope: !6193)
!6281 = !DILocation(line: 1169, column: 3, scope: !6193)
!6282 = !DILocation(line: 1169, column: 10, scope: !6193)
!6283 = !DILocation(line: 1169, column: 28, scope: !6193)
!6284 = !DILocation(line: 1173, column: 21, scope: !6193)
!6285 = !DILocation(line: 1173, column: 45, scope: !6193)
!6286 = !DILocation(line: 1173, column: 5, scope: !6193)
!6287 = !DILocation(line: 1172, column: 12, scope: !6193)
!6288 = !DILocation(line: 1172, column: 10, scope: !6193)
!6289 = !DILocation(line: 1174, column: 3, scope: !6193)
!6290 = !DILocation(line: 1175, column: 13, scope: !6193)
!6291 = !DILocation(line: 1175, column: 4, scope: !6193)
!6292 = !DILocation(line: 1175, column: 11, scope: !6193)
!6293 = !DILocation(line: 1177, column: 8, scope: !6294)
!6294 = distinct !DILexicalBlock(scope: !6193, file: !3, line: 1177, column: 7)
!6295 = !DILocation(line: 1177, column: 7, scope: !6193)
!6296 = !DILocation(line: 1179, column: 16, scope: !6297)
!6297 = distinct !DILexicalBlock(scope: !6294, file: !3, line: 1178, column: 5)
!6298 = !DILocation(line: 1179, column: 25, scope: !6297)
!6299 = !DILocation(line: 1179, column: 7, scope: !6297)
!6300 = !DILocation(line: 1180, column: 32, scope: !6297)
!6301 = !DILocation(line: 1180, column: 36, scope: !6297)
!6302 = !DILocation(line: 1181, column: 11, scope: !6297)
!6303 = !DILocation(line: 1181, column: 42, scope: !6297)
!6304 = !DILocation(line: 1182, column: 11, scope: !6297)
!6305 = !DILocation(line: 1180, column: 7, scope: !6297)
!6306 = !DILocation(line: 1183, column: 18, scope: !6297)
!6307 = !DILocation(line: 1183, column: 27, scope: !6297)
!6308 = !DILocation(line: 1183, column: 7, scope: !6297)
!6309 = !DILocation(line: 1184, column: 5, scope: !6297)
!6310 = !DILocation(line: 1185, column: 1, scope: !6193)
!6311 = distinct !DISubprogram(name: "analyze_accesses_for_call_stmt", scope: !3, file: !3, line: 1050, type: !6312, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6312 = !DISubroutineType(types: !6313)
!6313 = !{!1575, !2986, !1762, !1636, !1575}
!6314 = !DILocalVariable(name: "mi", arg: 1, scope: !6311, file: !3, line: 1050, type: !2986)
!6315 = !DILocation(line: 1050, column: 53, scope: !6311)
!6316 = !DILocalVariable(name: "ssa_var", arg: 2, scope: !6311, file: !3, line: 1050, type: !1762)
!6317 = !DILocation(line: 1050, column: 62, scope: !6311)
!6318 = !DILocalVariable(name: "use_stmt", arg: 3, scope: !6311, file: !3, line: 1051, type: !1636)
!6319 = !DILocation(line: 1051, column: 12, scope: !6311)
!6320 = !DILocalVariable(name: "current_indirect_level", arg: 4, scope: !6311, file: !3, line: 1051, type: !1575)
!6321 = !DILocation(line: 1051, column: 26, scope: !6311)
!6322 = !DILocalVariable(name: "fndecl", scope: !6311, file: !3, line: 1053, type: !1762)
!6323 = !DILocation(line: 1053, column: 8, scope: !6311)
!6324 = !DILocation(line: 1053, column: 37, scope: !6311)
!6325 = !DILocation(line: 1053, column: 17, scope: !6311)
!6326 = !DILocation(line: 1055, column: 24, scope: !6327)
!6327 = distinct !DILexicalBlock(scope: !6311, file: !3, line: 1055, column: 7)
!6328 = !DILocation(line: 1055, column: 7, scope: !6327)
!6329 = !DILocation(line: 1055, column: 7, scope: !6311)
!6330 = !DILocalVariable(name: "lhs", scope: !6331, file: !3, line: 1057, type: !1762)
!6331 = distinct !DILexicalBlock(scope: !6327, file: !3, line: 1056, column: 5)
!6332 = !DILocation(line: 1057, column: 12, scope: !6331)
!6333 = !DILocation(line: 1057, column: 35, scope: !6331)
!6334 = !DILocation(line: 1057, column: 18, scope: !6331)
!6335 = !DILocalVariable(name: "lhs_acc", scope: !6331, file: !3, line: 1058, type: !6336)
!6336 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_acc_in_tree", file: !3, line: 332, size: 384, elements: !6337)
!6337 = !{!6338, !6339, !6340, !6341, !6342, !6343}
!6338 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_var", scope: !6336, file: !3, line: 335, baseType: !1762, size: 64)
!6339 = !DIDerivedType(tag: DW_TAG_member, name: "t_code", scope: !6336, file: !3, line: 338, baseType: !317, size: 32, offset: 64)
!6340 = !DIDerivedType(tag: DW_TAG_member, name: "t_tree", scope: !6336, file: !3, line: 339, baseType: !1762, size: 64, offset: 128)
!6341 = !DIDerivedType(tag: DW_TAG_member, name: "tp", scope: !6336, file: !3, line: 341, baseType: !2173, size: 64, offset: 192)
!6342 = !DIDerivedType(tag: DW_TAG_member, name: "second_op", scope: !6336, file: !3, line: 342, baseType: !1762, size: 64, offset: 256)
!6343 = !DIDerivedType(tag: DW_TAG_member, name: "var_found", scope: !6336, file: !3, line: 343, baseType: !1875, size: 8, offset: 320)
!6344 = !DILocation(line: 1058, column: 30, scope: !6331)
!6345 = !DILocalVariable(name: "rhs_acc", scope: !6331, file: !3, line: 1058, type: !6336)
!6346 = !DILocation(line: 1058, column: 39, scope: !6331)
!6347 = !DILocation(line: 1060, column: 7, scope: !6331)
!6348 = !DILocation(line: 1061, column: 7, scope: !6331)
!6349 = !DILocation(line: 1063, column: 25, scope: !6331)
!6350 = !DILocation(line: 1063, column: 15, scope: !6331)
!6351 = !DILocation(line: 1063, column: 23, scope: !6331)
!6352 = !DILocation(line: 1064, column: 15, scope: !6331)
!6353 = !DILocation(line: 1064, column: 22, scope: !6331)
!6354 = !DILocation(line: 1065, column: 29, scope: !6331)
!6355 = !DILocation(line: 1065, column: 7, scope: !6331)
!6356 = !DILocation(line: 1066, column: 25, scope: !6331)
!6357 = !DILocation(line: 1066, column: 15, scope: !6331)
!6358 = !DILocation(line: 1066, column: 23, scope: !6331)
!6359 = !DILocation(line: 1067, column: 15, scope: !6331)
!6360 = !DILocation(line: 1067, column: 22, scope: !6331)
!6361 = !DILocation(line: 1068, column: 33, scope: !6331)
!6362 = !DILocation(line: 1068, column: 7, scope: !6331)
!6363 = !DILocation(line: 1075, column: 20, scope: !6364)
!6364 = distinct !DILexicalBlock(scope: !6331, file: !3, line: 1075, column: 11)
!6365 = !DILocation(line: 1075, column: 12, scope: !6364)
!6366 = !DILocation(line: 1075, column: 30, scope: !6364)
!6367 = !DILocation(line: 1075, column: 41, scope: !6364)
!6368 = !DILocation(line: 1075, column: 33, scope: !6364)
!6369 = !DILocation(line: 1076, column: 5, scope: !6364)
!6370 = !DILocation(line: 1076, column: 16, scope: !6364)
!6371 = !DILocation(line: 1076, column: 23, scope: !6364)
!6372 = !DILocation(line: 1077, column: 4, scope: !6364)
!6373 = !DILocation(line: 1077, column: 17, scope: !6364)
!6374 = !DILocation(line: 1077, column: 9, scope: !6364)
!6375 = !DILocation(line: 1077, column: 27, scope: !6364)
!6376 = !DILocation(line: 1077, column: 39, scope: !6364)
!6377 = !DILocation(line: 1077, column: 31, scope: !6364)
!6378 = !DILocation(line: 1075, column: 11, scope: !6331)
!6379 = !DILocation(line: 1079, column: 34, scope: !6380)
!6380 = distinct !DILexicalBlock(scope: !6364, file: !3, line: 1078, column: 2)
!6381 = !DILocation(line: 1079, column: 38, scope: !6380)
!6382 = !DILocation(line: 1079, column: 62, scope: !6380)
!6383 = !DILocation(line: 1079, column: 4, scope: !6380)
!6384 = !DILocation(line: 1080, column: 11, scope: !6380)
!6385 = !DILocation(line: 1080, column: 4, scope: !6380)
!6386 = !DILocation(line: 1082, column: 7, scope: !6331)
!6387 = !DILocation(line: 1086, column: 19, scope: !6388)
!6388 = distinct !DILexicalBlock(scope: !6331, file: !3, line: 1086, column: 11)
!6389 = !DILocation(line: 1086, column: 11, scope: !6388)
!6390 = !DILocation(line: 1086, column: 11, scope: !6331)
!6391 = !DILocalVariable(name: "l", scope: !6392, file: !3, line: 1088, type: !1575)
!6392 = distinct !DILexicalBlock(scope: !6388, file: !3, line: 1087, column: 2)
!6393 = !DILocation(line: 1088, column: 8, scope: !6392)
!6394 = !DILocation(line: 1088, column: 12, scope: !6392)
!6395 = !DILocation(line: 1088, column: 35, scope: !6392)
!6396 = !DILocation(line: 1090, column: 4, scope: !6392)
!6397 = !DILocation(line: 1091, column: 34, scope: !6392)
!6398 = !DILocation(line: 1091, column: 38, scope: !6392)
!6399 = !DILocation(line: 1091, column: 41, scope: !6392)
!6400 = !DILocation(line: 1091, column: 4, scope: !6392)
!6401 = !DILocation(line: 1092, column: 11, scope: !6392)
!6402 = !DILocation(line: 1092, column: 4, scope: !6392)
!6403 = !DILocation(line: 1094, column: 5, scope: !6331)
!6404 = !DILocation(line: 1096, column: 7, scope: !6405)
!6405 = distinct !DILexicalBlock(scope: !6311, file: !3, line: 1096, column: 7)
!6406 = !DILocation(line: 1096, column: 7, scope: !6311)
!6407 = !DILocation(line: 1098, column: 11, scope: !6408)
!6408 = distinct !DILexicalBlock(scope: !6409, file: !3, line: 1098, column: 11)
!6409 = distinct !DILexicalBlock(scope: !6405, file: !3, line: 1097, column: 5)
!6410 = !DILocation(line: 1098, column: 39, scope: !6408)
!6411 = !DILocation(line: 1098, column: 11, scope: !6409)
!6412 = !DILocation(line: 1100, column: 8, scope: !6413)
!6413 = distinct !DILexicalBlock(scope: !6414, file: !3, line: 1100, column: 8)
!6414 = distinct !DILexicalBlock(scope: !6408, file: !3, line: 1099, column: 2)
!6415 = !DILocation(line: 1100, column: 8, scope: !6414)
!6416 = !DILocation(line: 1101, column: 15, scope: !6413)
!6417 = !DILocation(line: 1103, column: 18, scope: !6413)
!6418 = !DILocation(line: 1103, column: 22, scope: !6413)
!6419 = !DILocation(line: 1103, column: 8, scope: !6413)
!6420 = !DILocation(line: 1103, column: 39, scope: !6413)
!6421 = !DILocation(line: 1103, column: 29, scope: !6413)
!6422 = !DILocation(line: 1104, column: 8, scope: !6413)
!6423 = !DILocation(line: 1101, column: 6, scope: !6413)
!6424 = !DILocation(line: 1105, column: 34, scope: !6414)
!6425 = !DILocation(line: 1105, column: 38, scope: !6414)
!6426 = !DILocation(line: 1105, column: 62, scope: !6414)
!6427 = !DILocation(line: 1105, column: 4, scope: !6414)
!6428 = !DILocation(line: 1106, column: 2, scope: !6414)
!6429 = !DILocation(line: 1107, column: 16, scope: !6430)
!6430 = distinct !DILexicalBlock(scope: !6408, file: !3, line: 1107, column: 16)
!6431 = !DILocation(line: 1107, column: 20, scope: !6430)
!6432 = !DILocation(line: 1107, column: 31, scope: !6430)
!6433 = !DILocation(line: 1107, column: 55, scope: !6430)
!6434 = !DILocation(line: 1107, column: 60, scope: !6430)
!6435 = !DILocation(line: 1108, column: 9, scope: !6430)
!6436 = !DILocation(line: 1108, column: 12, scope: !6430)
!6437 = !DILocation(line: 1108, column: 16, scope: !6430)
!6438 = !DILocation(line: 1108, column: 27, scope: !6430)
!6439 = !DILocation(line: 1108, column: 51, scope: !6430)
!6440 = !DILocation(line: 1108, column: 59, scope: !6430)
!6441 = !DILocation(line: 1108, column: 56, scope: !6430)
!6442 = !DILocation(line: 1107, column: 16, scope: !6408)
!6443 = !DILocation(line: 1109, column: 32, scope: !6430)
!6444 = !DILocation(line: 1109, column: 36, scope: !6430)
!6445 = !DILocation(line: 1109, column: 60, scope: !6430)
!6446 = !DILocation(line: 1109, column: 2, scope: !6430)
!6447 = !DILocalVariable(name: "l", scope: !6448, file: !3, line: 1114, type: !1575)
!6448 = distinct !DILexicalBlock(scope: !6430, file: !3, line: 1111, column: 2)
!6449 = !DILocation(line: 1114, column: 8, scope: !6448)
!6450 = !DILocation(line: 1114, column: 12, scope: !6448)
!6451 = !DILocation(line: 1116, column: 29, scope: !6448)
!6452 = !DILocation(line: 1116, column: 4, scope: !6448)
!6453 = !DILocation(line: 1116, column: 8, scope: !6448)
!6454 = !DILocation(line: 1116, column: 19, scope: !6448)
!6455 = !DILocation(line: 1116, column: 22, scope: !6448)
!6456 = !DILocation(line: 1116, column: 27, scope: !6448)
!6457 = !DILocation(line: 1117, column: 29, scope: !6448)
!6458 = !DILocation(line: 1117, column: 4, scope: !6448)
!6459 = !DILocation(line: 1117, column: 8, scope: !6448)
!6460 = !DILocation(line: 1117, column: 19, scope: !6448)
!6461 = !DILocation(line: 1117, column: 22, scope: !6448)
!6462 = !DILocation(line: 1117, column: 27, scope: !6448)
!6463 = !DILocation(line: 1119, column: 5, scope: !6409)
!6464 = !DILocation(line: 1120, column: 10, scope: !6311)
!6465 = !DILocation(line: 1120, column: 3, scope: !6311)
!6466 = !DILocation(line: 1121, column: 1, scope: !6311)
!6467 = distinct !DISubprogram(name: "analyze_accesses_for_assign_stmt", scope: !3, file: !3, line: 1192, type: !6468, scopeLine: 1196, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6468 = !DISubroutineType(types: !6469)
!6469 = !{!1575, !2986, !1762, !1636, !1575, !1875, !3656, !1875}
!6470 = !DILocalVariable(name: "mi", arg: 1, scope: !6467, file: !3, line: 1192, type: !2986)
!6471 = !DILocation(line: 1192, column: 55, scope: !6467)
!6472 = !DILocalVariable(name: "ssa_var", arg: 2, scope: !6467, file: !3, line: 1192, type: !1762)
!6473 = !DILocation(line: 1192, column: 64, scope: !6467)
!6474 = !DILocalVariable(name: "use_stmt", arg: 3, scope: !6467, file: !3, line: 1193, type: !1636)
!6475 = !DILocation(line: 1193, column: 14, scope: !6467)
!6476 = !DILocalVariable(name: "current_indirect_level", arg: 4, scope: !6467, file: !3, line: 1193, type: !1575)
!6477 = !DILocation(line: 1193, column: 28, scope: !6467)
!6478 = !DILocalVariable(name: "last_op", arg: 5, scope: !6467, file: !3, line: 1194, type: !1875)
!6479 = !DILocation(line: 1194, column: 12, scope: !6467)
!6480 = !DILocalVariable(name: "visited", arg: 6, scope: !6467, file: !3, line: 1194, type: !3656)
!6481 = !DILocation(line: 1194, column: 29, scope: !6467)
!6482 = !DILocalVariable(name: "record_accesses", arg: 7, scope: !6467, file: !3, line: 1195, type: !1875)
!6483 = !DILocation(line: 1195, column: 12, scope: !6467)
!6484 = !DILocalVariable(name: "lhs", scope: !6467, file: !3, line: 1197, type: !1762)
!6485 = !DILocation(line: 1197, column: 8, scope: !6467)
!6486 = !DILocation(line: 1197, column: 30, scope: !6467)
!6487 = !DILocation(line: 1197, column: 14, scope: !6467)
!6488 = !DILocalVariable(name: "lhs_acc", scope: !6467, file: !3, line: 1198, type: !6336)
!6489 = !DILocation(line: 1198, column: 26, scope: !6467)
!6490 = !DILocalVariable(name: "rhs_acc", scope: !6467, file: !3, line: 1198, type: !6336)
!6491 = !DILocation(line: 1198, column: 35, scope: !6467)
!6492 = !DILocation(line: 1200, column: 3, scope: !6467)
!6493 = !DILocation(line: 1201, column: 3, scope: !6467)
!6494 = !DILocation(line: 1203, column: 21, scope: !6467)
!6495 = !DILocation(line: 1203, column: 11, scope: !6467)
!6496 = !DILocation(line: 1203, column: 19, scope: !6467)
!6497 = !DILocation(line: 1204, column: 11, scope: !6467)
!6498 = !DILocation(line: 1204, column: 18, scope: !6467)
!6499 = !DILocation(line: 1205, column: 25, scope: !6467)
!6500 = !DILocation(line: 1205, column: 3, scope: !6467)
!6501 = !DILocation(line: 1206, column: 21, scope: !6467)
!6502 = !DILocation(line: 1206, column: 11, scope: !6467)
!6503 = !DILocation(line: 1206, column: 19, scope: !6467)
!6504 = !DILocation(line: 1207, column: 11, scope: !6467)
!6505 = !DILocation(line: 1207, column: 18, scope: !6467)
!6506 = !DILocation(line: 1208, column: 31, scope: !6467)
!6507 = !DILocation(line: 1208, column: 3, scope: !6467)
!6508 = !DILocation(line: 1215, column: 16, scope: !6509)
!6509 = distinct !DILexicalBlock(scope: !6467, file: !3, line: 1215, column: 7)
!6510 = !DILocation(line: 1215, column: 8, scope: !6509)
!6511 = !DILocation(line: 1215, column: 26, scope: !6509)
!6512 = !DILocation(line: 1215, column: 37, scope: !6509)
!6513 = !DILocation(line: 1215, column: 29, scope: !6509)
!6514 = !DILocation(line: 1216, column: 8, scope: !6509)
!6515 = !DILocation(line: 1216, column: 19, scope: !6509)
!6516 = !DILocation(line: 1216, column: 26, scope: !6509)
!6517 = !DILocation(line: 1217, column: 7, scope: !6509)
!6518 = !DILocation(line: 1217, column: 20, scope: !6509)
!6519 = !DILocation(line: 1217, column: 12, scope: !6509)
!6520 = !DILocation(line: 1217, column: 30, scope: !6509)
!6521 = !DILocation(line: 1217, column: 42, scope: !6509)
!6522 = !DILocation(line: 1217, column: 34, scope: !6509)
!6523 = !DILocation(line: 1215, column: 7, scope: !6467)
!6524 = !DILocation(line: 1219, column: 37, scope: !6525)
!6525 = distinct !DILexicalBlock(scope: !6509, file: !3, line: 1218, column: 5)
!6526 = !DILocation(line: 1219, column: 41, scope: !6525)
!6527 = !DILocation(line: 1219, column: 65, scope: !6525)
!6528 = !DILocation(line: 1219, column: 7, scope: !6525)
!6529 = !DILocation(line: 1220, column: 14, scope: !6525)
!6530 = !DILocation(line: 1220, column: 7, scope: !6525)
!6531 = !DILocation(line: 1222, column: 3, scope: !6467)
!6532 = !DILocation(line: 1226, column: 15, scope: !6533)
!6533 = distinct !DILexicalBlock(scope: !6467, file: !3, line: 1226, column: 7)
!6534 = !DILocation(line: 1226, column: 7, scope: !6533)
!6535 = !DILocation(line: 1226, column: 7, scope: !6467)
!6536 = !DILocalVariable(name: "l", scope: !6537, file: !3, line: 1228, type: !1575)
!6537 = distinct !DILexicalBlock(scope: !6533, file: !3, line: 1227, column: 5)
!6538 = !DILocation(line: 1228, column: 11, scope: !6537)
!6539 = !DILocation(line: 1228, column: 15, scope: !6537)
!6540 = !DILocation(line: 1228, column: 38, scope: !6537)
!6541 = !DILocation(line: 1230, column: 7, scope: !6537)
!6542 = !DILocation(line: 1232, column: 35, scope: !6543)
!6543 = distinct !DILexicalBlock(scope: !6537, file: !3, line: 1232, column: 11)
!6544 = !DILocation(line: 1232, column: 13, scope: !6543)
!6545 = !DILocation(line: 1233, column: 6, scope: !6543)
!6546 = !DILocation(line: 1233, column: 31, scope: !6543)
!6547 = !DILocation(line: 1233, column: 9, scope: !6543)
!6548 = !DILocation(line: 1234, column: 4, scope: !6543)
!6549 = !DILocation(line: 1234, column: 8, scope: !6543)
!6550 = !DILocation(line: 1234, column: 50, scope: !6543)
!6551 = !DILocation(line: 1232, column: 11, scope: !6537)
!6552 = !DILocation(line: 1235, column: 32, scope: !6543)
!6553 = !DILocation(line: 1235, column: 36, scope: !6543)
!6554 = !DILocation(line: 1235, column: 39, scope: !6543)
!6555 = !DILocation(line: 1235, column: 2, scope: !6543)
!6556 = !DILocalVariable(name: "def_stmt", scope: !6557, file: !3, line: 1238, type: !1636)
!6557 = distinct !DILexicalBlock(scope: !6543, file: !3, line: 1237, column: 2)
!6558 = !DILocation(line: 1238, column: 11, scope: !6557)
!6559 = !DILocation(line: 1238, column: 22, scope: !6557)
!6560 = !DILocation(line: 1239, column: 36, scope: !6557)
!6561 = !DILocation(line: 1239, column: 40, scope: !6557)
!6562 = !DILocation(line: 1239, column: 50, scope: !6557)
!6563 = !DILocation(line: 1239, column: 53, scope: !6557)
!6564 = !DILocation(line: 1239, column: 4, scope: !6557)
!6565 = !DILocation(line: 1240, column: 8, scope: !6566)
!6566 = distinct !DILexicalBlock(scope: !6557, file: !3, line: 1240, column: 8)
!6567 = !DILocation(line: 1240, column: 8, scope: !6557)
!6568 = !DILocation(line: 1241, column: 37, scope: !6566)
!6569 = !DILocation(line: 1241, column: 41, scope: !6566)
!6570 = !DILocation(line: 1242, column: 20, scope: !6566)
!6571 = !DILocation(line: 1241, column: 6, scope: !6566)
!6572 = !DILocation(line: 1243, column: 22, scope: !6557)
!6573 = !DILocation(line: 1243, column: 26, scope: !6557)
!6574 = !DILocation(line: 1243, column: 42, scope: !6557)
!6575 = !DILocation(line: 1243, column: 4, scope: !6557)
!6576 = !DILocation(line: 1245, column: 14, scope: !6537)
!6577 = !DILocation(line: 1245, column: 7, scope: !6537)
!6578 = !DILocation(line: 1249, column: 15, scope: !6579)
!6579 = distinct !DILexicalBlock(scope: !6467, file: !3, line: 1249, column: 7)
!6580 = !DILocation(line: 1249, column: 7, scope: !6579)
!6581 = !DILocation(line: 1249, column: 7, scope: !6467)
!6582 = !DILocation(line: 1251, column: 19, scope: !6583)
!6583 = distinct !DILexicalBlock(scope: !6584, file: !3, line: 1251, column: 11)
!6584 = distinct !DILexicalBlock(scope: !6579, file: !3, line: 1250, column: 5)
!6585 = !DILocation(line: 1251, column: 26, scope: !6583)
!6586 = !DILocation(line: 1252, column: 4, scope: !6583)
!6587 = !DILocation(line: 1252, column: 15, scope: !6583)
!6588 = !DILocation(line: 1252, column: 22, scope: !6583)
!6589 = !DILocation(line: 1252, column: 43, scope: !6583)
!6590 = !DILocation(line: 1252, column: 54, scope: !6583)
!6591 = !DILocation(line: 1252, column: 61, scope: !6583)
!6592 = !DILocation(line: 1251, column: 11, scope: !6584)
!6593 = !DILocation(line: 1254, column: 34, scope: !6594)
!6594 = distinct !DILexicalBlock(scope: !6583, file: !3, line: 1253, column: 2)
!6595 = !DILocation(line: 1254, column: 38, scope: !6594)
!6596 = !DILocation(line: 1254, column: 62, scope: !6594)
!6597 = !DILocation(line: 1254, column: 4, scope: !6594)
!6598 = !DILocation(line: 1255, column: 11, scope: !6594)
!6599 = !DILocation(line: 1255, column: 4, scope: !6594)
!6600 = !DILocation(line: 1259, column: 19, scope: !6601)
!6601 = distinct !DILexicalBlock(scope: !6584, file: !3, line: 1259, column: 11)
!6602 = !DILocation(line: 1259, column: 26, scope: !6601)
!6603 = !DILocation(line: 1259, column: 11, scope: !6584)
!6604 = !DILocation(line: 1261, column: 8, scope: !6605)
!6605 = distinct !DILexicalBlock(scope: !6606, file: !3, line: 1261, column: 8)
!6606 = distinct !DILexicalBlock(scope: !6601, file: !3, line: 1260, column: 2)
!6607 = !DILocation(line: 1261, column: 8, scope: !6606)
!6608 = !DILocation(line: 1262, column: 37, scope: !6605)
!6609 = !DILocation(line: 1262, column: 41, scope: !6605)
!6610 = !DILocation(line: 1264, column: 9, scope: !6605)
!6611 = !DILocation(line: 1262, column: 6, scope: !6605)
!6612 = !DILocation(line: 1265, column: 27, scope: !6606)
!6613 = !DILocation(line: 1266, column: 2, scope: !6606)
!6614 = !DILocation(line: 1267, column: 24, scope: !6615)
!6615 = distinct !DILexicalBlock(scope: !6601, file: !3, line: 1267, column: 16)
!6616 = !DILocation(line: 1267, column: 31, scope: !6615)
!6617 = !DILocation(line: 1267, column: 16, scope: !6601)
!6618 = !DILocation(line: 1269, column: 4, scope: !6619)
!6619 = distinct !DILexicalBlock(scope: !6615, file: !3, line: 1268, column: 2)
!6620 = !DILocation(line: 1270, column: 8, scope: !6621)
!6621 = distinct !DILexicalBlock(scope: !6619, file: !3, line: 1270, column: 8)
!6622 = !DILocation(line: 1270, column: 8, scope: !6619)
!6623 = !DILocation(line: 1276, column: 36, scope: !6621)
!6624 = !DILocation(line: 1276, column: 40, scope: !6621)
!6625 = !DILocation(line: 1277, column: 8, scope: !6621)
!6626 = !DILocation(line: 1276, column: 6, scope: !6621)
!6627 = !DILocalVariable(name: "index", scope: !6628, file: !3, line: 1280, type: !1762)
!6628 = distinct !DILexicalBlock(scope: !6621, file: !3, line: 1279, column: 6)
!6629 = !DILocation(line: 1280, column: 13, scope: !6628)
!6630 = !DILocalVariable(name: "op1", scope: !6628, file: !3, line: 1281, type: !1762)
!6631 = !DILocation(line: 1281, column: 13, scope: !6628)
!6632 = !DILocalVariable(name: "op2", scope: !6628, file: !3, line: 1281, type: !1762)
!6633 = !DILocation(line: 1281, column: 18, scope: !6628)
!6634 = !DILocation(line: 1283, column: 34, scope: !6628)
!6635 = !DILocation(line: 1283, column: 14, scope: !6628)
!6636 = !DILocation(line: 1283, column: 12, scope: !6628)
!6637 = !DILocation(line: 1284, column: 34, scope: !6628)
!6638 = !DILocation(line: 1284, column: 14, scope: !6628)
!6639 = !DILocation(line: 1284, column: 12, scope: !6628)
!6640 = !DILocation(line: 1286, column: 15, scope: !6628)
!6641 = !DILocation(line: 1286, column: 22, scope: !6628)
!6642 = !DILocation(line: 1286, column: 19, scope: !6628)
!6643 = !DILocation(line: 1286, column: 14, scope: !6628)
!6644 = !DILocation(line: 1286, column: 33, scope: !6628)
!6645 = !DILocation(line: 1286, column: 39, scope: !6628)
!6646 = !DILocation(line: 1286, column: 12, scope: !6628)
!6647 = !DILocation(line: 1287, column: 12, scope: !6648)
!6648 = distinct !DILexicalBlock(scope: !6628, file: !3, line: 1287, column: 12)
!6649 = !DILocation(line: 1287, column: 28, scope: !6648)
!6650 = !DILocation(line: 1287, column: 12, scope: !6628)
!6651 = !DILocation(line: 1289, column: 20, scope: !6648)
!6652 = !DILocation(line: 1290, column: 6, scope: !6648)
!6653 = !DILocation(line: 1291, column: 25, scope: !6648)
!6654 = !DILocation(line: 1291, column: 6, scope: !6648)
!6655 = !DILocation(line: 1290, column: 29, scope: !6648)
!6656 = !DILocation(line: 1289, column: 5, scope: !6648)
!6657 = !DILocation(line: 1288, column: 9, scope: !6648)
!6658 = !DILocation(line: 1288, column: 3, scope: !6648)
!6659 = !DILocation(line: 1295, column: 30, scope: !6660)
!6660 = distinct !DILexicalBlock(scope: !6648, file: !3, line: 1293, column: 3)
!6661 = !DILocation(line: 1295, column: 35, scope: !6660)
!6662 = !DILocation(line: 1295, column: 7, scope: !6660)
!6663 = !DILocation(line: 1294, column: 11, scope: !6660)
!6664 = !DILocation(line: 1296, column: 9, scope: !6665)
!6665 = distinct !DILexicalBlock(scope: !6660, file: !3, line: 1296, column: 9)
!6666 = !DILocation(line: 1296, column: 15, scope: !6665)
!6667 = !DILocation(line: 1296, column: 9, scope: !6660)
!6668 = !DILocation(line: 1298, column: 39, scope: !6669)
!6669 = distinct !DILexicalBlock(scope: !6665, file: !3, line: 1297, column: 7)
!6670 = !DILocation(line: 1299, column: 11, scope: !6669)
!6671 = !DILocation(line: 1300, column: 11, scope: !6669)
!6672 = !DILocation(line: 1298, column: 9, scope: !6669)
!6673 = !DILocation(line: 1301, column: 16, scope: !6669)
!6674 = !DILocation(line: 1301, column: 9, scope: !6669)
!6675 = !DILocation(line: 1304, column: 12, scope: !6676)
!6676 = distinct !DILexicalBlock(scope: !6628, file: !3, line: 1304, column: 12)
!6677 = !DILocation(line: 1304, column: 12, scope: !6628)
!6678 = !DILocation(line: 1305, column: 34, scope: !6676)
!6679 = !DILocation(line: 1305, column: 38, scope: !6676)
!6680 = !DILocation(line: 1305, column: 48, scope: !6676)
!6681 = !DILocation(line: 1306, column: 13, scope: !6676)
!6682 = !DILocation(line: 1307, column: 13, scope: !6676)
!6683 = !DILocation(line: 1305, column: 3, scope: !6676)
!6684 = !DILocation(line: 1309, column: 2, scope: !6619)
!6685 = !DILocation(line: 1312, column: 19, scope: !6686)
!6686 = distinct !DILexicalBlock(scope: !6584, file: !3, line: 1312, column: 11)
!6687 = !DILocation(line: 1312, column: 26, scope: !6686)
!6688 = !DILocation(line: 1312, column: 42, scope: !6686)
!6689 = !DILocation(line: 1312, column: 45, scope: !6686)
!6690 = !DILocation(line: 1312, column: 61, scope: !6686)
!6691 = !DILocation(line: 1312, column: 11, scope: !6584)
!6692 = !DILocalVariable(name: "l", scope: !6693, file: !3, line: 1314, type: !1575)
!6693 = distinct !DILexicalBlock(scope: !6686, file: !3, line: 1313, column: 2)
!6694 = !DILocation(line: 1314, column: 8, scope: !6693)
!6695 = !DILocation(line: 1314, column: 12, scope: !6693)
!6696 = !DILocation(line: 1321, column: 8, scope: !6697)
!6697 = distinct !DILexicalBlock(scope: !6693, file: !3, line: 1321, column: 8)
!6698 = !DILocation(line: 1321, column: 24, scope: !6697)
!6699 = !DILocation(line: 1321, column: 36, scope: !6697)
!6700 = !DILocation(line: 1321, column: 39, scope: !6697)
!6701 = !DILocation(line: 1321, column: 46, scope: !6697)
!6702 = !DILocation(line: 1321, column: 50, scope: !6697)
!6703 = !DILocation(line: 1321, column: 43, scope: !6697)
!6704 = !DILocation(line: 1321, column: 8, scope: !6693)
!6705 = !DILocation(line: 1322, column: 36, scope: !6697)
!6706 = !DILocation(line: 1322, column: 40, scope: !6697)
!6707 = !DILocation(line: 1323, column: 8, scope: !6697)
!6708 = !DILocation(line: 1322, column: 6, scope: !6697)
!6709 = !DILocation(line: 1327, column: 40, scope: !6710)
!6710 = distinct !DILexicalBlock(scope: !6697, file: !3, line: 1325, column: 6)
!6711 = !DILocation(line: 1327, column: 44, scope: !6710)
!6712 = !DILocation(line: 1327, column: 54, scope: !6710)
!6713 = !DILocation(line: 1327, column: 57, scope: !6710)
!6714 = !DILocation(line: 1327, column: 8, scope: !6710)
!6715 = !DILocation(line: 1328, column: 12, scope: !6716)
!6716 = distinct !DILexicalBlock(scope: !6710, file: !3, line: 1328, column: 12)
!6717 = !DILocation(line: 1328, column: 12, scope: !6710)
!6718 = !DILocation(line: 1329, column: 34, scope: !6716)
!6719 = !DILocation(line: 1329, column: 38, scope: !6716)
!6720 = !DILocation(line: 1330, column: 24, scope: !6716)
!6721 = !DILocation(line: 1329, column: 3, scope: !6716)
!6722 = !DILocation(line: 1332, column: 2, scope: !6693)
!6723 = !DILocation(line: 1336, column: 29, scope: !6724)
!6724 = distinct !DILexicalBlock(scope: !6686, file: !3, line: 1334, column: 2)
!6725 = !DILocation(line: 1336, column: 33, scope: !6724)
!6726 = !DILocation(line: 1337, column: 8, scope: !6724)
!6727 = !DILocation(line: 1338, column: 16, scope: !6724)
!6728 = !DILocation(line: 1338, column: 23, scope: !6724)
!6729 = !DILocation(line: 1338, column: 8, scope: !6724)
!6730 = !DILocation(line: 1339, column: 8, scope: !6724)
!6731 = !DILocation(line: 1339, column: 17, scope: !6724)
!6732 = !DILocation(line: 1336, column: 4, scope: !6724)
!6733 = !DILocation(line: 1341, column: 5, scope: !6584)
!6734 = !DILocation(line: 1342, column: 10, scope: !6467)
!6735 = !DILocation(line: 1342, column: 3, scope: !6467)
!6736 = !DILocation(line: 1343, column: 1, scope: !6467)
!6737 = distinct !DISubprogram(name: "next_readonly_imm_use", scope: !3598, file: !3598, line: 306, type: !6738, scopeLine: 307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6738 = !DISubroutineType(types: !6739)
!6739 = !{!2993, !6155}
!6740 = !DILocalVariable(name: "imm", arg: 1, scope: !6737, file: !3598, line: 306, type: !6155)
!6741 = !DILocation(line: 306, column: 42, scope: !6737)
!6742 = !DILocalVariable(name: "old", scope: !6737, file: !3598, line: 308, type: !2993)
!6743 = !DILocation(line: 308, column: 17, scope: !6737)
!6744 = !DILocation(line: 308, column: 23, scope: !6737)
!6745 = !DILocation(line: 308, column: 28, scope: !6737)
!6746 = !DILocation(line: 319, column: 18, scope: !6737)
!6747 = !DILocation(line: 319, column: 23, scope: !6737)
!6748 = !DILocation(line: 319, column: 3, scope: !6737)
!6749 = !DILocation(line: 319, column: 8, scope: !6737)
!6750 = !DILocation(line: 319, column: 16, scope: !6737)
!6751 = !DILocation(line: 320, column: 31, scope: !6752)
!6752 = distinct !DILexicalBlock(scope: !6737, file: !3598, line: 320, column: 7)
!6753 = !DILocation(line: 320, column: 7, scope: !6752)
!6754 = !DILocation(line: 320, column: 7, scope: !6737)
!6755 = !DILocation(line: 321, column: 5, scope: !6752)
!6756 = !DILocation(line: 322, column: 10, scope: !6737)
!6757 = !DILocation(line: 322, column: 15, scope: !6737)
!6758 = !DILocation(line: 322, column: 3, scope: !6737)
!6759 = !DILocation(line: 323, column: 1, scope: !6737)
!6760 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !625, file: !625, line: 1694, type: !5339, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6761 = !DILocalVariable(name: "gs", arg: 1, scope: !6760, file: !625, line: 1694, type: !5309)
!6762 = !DILocation(line: 1694, column: 33, scope: !6760)
!6763 = !DILocation(line: 1697, column: 21, scope: !6760)
!6764 = !DILocation(line: 1697, column: 10, scope: !6760)
!6765 = !DILocation(line: 1697, column: 3, scope: !6760)
!6766 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !625, file: !625, line: 3061, type: !6767, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6767 = !DISubroutineType(types: !6768)
!6768 = !{!7, !5309}
!6769 = !DILocalVariable(name: "gs", arg: 1, scope: !6766, file: !625, line: 3061, type: !5309)
!6770 = !DILocation(line: 3061, column: 35, scope: !6766)
!6771 = !DILocation(line: 3064, column: 10, scope: !6766)
!6772 = !DILocation(line: 3064, column: 14, scope: !6766)
!6773 = !DILocation(line: 3064, column: 25, scope: !6766)
!6774 = !DILocation(line: 3064, column: 3, scope: !6766)
!6775 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !3598, file: !3598, line: 427, type: !6776, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6776 = !DISubroutineType(types: !6777)
!6777 = !{!1762, !2993}
!6778 = !DILocalVariable(name: "use", arg: 1, scope: !6775, file: !3598, line: 427, type: !2993)
!6779 = !DILocation(line: 427, column: 33, scope: !6775)
!6780 = !DILocation(line: 429, column: 12, scope: !6775)
!6781 = !DILocation(line: 429, column: 17, scope: !6775)
!6782 = !DILocation(line: 429, column: 10, scope: !6775)
!6783 = !DILocation(line: 429, column: 3, scope: !6775)
!6784 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !3598, file: !3598, line: 442, type: !6785, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6785 = !DISubroutineType(types: !6786)
!6786 = !{!2993, !1636, !1575}
!6787 = !DILocalVariable(name: "gs", arg: 1, scope: !6784, file: !3598, line: 442, type: !1636)
!6788 = !DILocation(line: 442, column: 36, scope: !6784)
!6789 = !DILocalVariable(name: "i", arg: 2, scope: !6784, file: !3598, line: 442, type: !1575)
!6790 = !DILocation(line: 442, column: 44, scope: !6784)
!6791 = !DILocation(line: 444, column: 27, scope: !6784)
!6792 = !DILocation(line: 444, column: 31, scope: !6784)
!6793 = !DILocation(line: 444, column: 11, scope: !6784)
!6794 = !DILocation(line: 444, column: 35, scope: !6784)
!6795 = !DILocation(line: 444, column: 3, scope: !6784)
!6796 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !3598, file: !3598, line: 434, type: !6797, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6797 = !DISubroutineType(types: !6798)
!6798 = !{!1762, !6799}
!6799 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !1560, line: 27, baseType: !2173)
!6800 = !DILocalVariable(name: "def", arg: 1, scope: !6796, file: !3598, line: 434, type: !6799)
!6801 = !DILocation(line: 434, column: 33, scope: !6796)
!6802 = !DILocation(line: 436, column: 11, scope: !6796)
!6803 = !DILocation(line: 436, column: 10, scope: !6796)
!6804 = !DILocation(line: 436, column: 3, scope: !6796)
!6805 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !625, file: !625, line: 3080, type: !5441, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6806 = !DILocalVariable(name: "gs", arg: 1, scope: !6805, file: !625, line: 3080, type: !1636)
!6807 = !DILocation(line: 3080, column: 31, scope: !6805)
!6808 = !DILocation(line: 3083, column: 11, scope: !6805)
!6809 = !DILocation(line: 3083, column: 15, scope: !6805)
!6810 = !DILocation(line: 3083, column: 26, scope: !6805)
!6811 = !DILocation(line: 3083, column: 3, scope: !6805)
!6812 = distinct !DISubprogram(name: "SET_BIT", scope: !3657, file: !3657, line: 63, type: !6813, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6813 = !DISubroutineType(types: !6814)
!6814 = !{null, !3656, !7}
!6815 = !DILocalVariable(name: "map", arg: 1, scope: !6812, file: !3657, line: 63, type: !3656)
!6816 = !DILocation(line: 63, column: 18, scope: !6812)
!6817 = !DILocalVariable(name: "bitno", arg: 2, scope: !6812, file: !3657, line: 63, type: !7)
!6818 = !DILocation(line: 63, column: 36, scope: !6812)
!6819 = !DILocation(line: 65, column: 7, scope: !6820)
!6820 = distinct !DILexicalBlock(scope: !6812, file: !3657, line: 65, column: 7)
!6821 = !DILocation(line: 65, column: 12, scope: !6820)
!6822 = !DILocation(line: 65, column: 7, scope: !6812)
!6823 = !DILocalVariable(name: "oldbit", scope: !6824, file: !3657, line: 67, type: !1875)
!6824 = distinct !DILexicalBlock(scope: !6820, file: !3657, line: 66, column: 5)
!6825 = !DILocation(line: 67, column: 12, scope: !6824)
!6826 = !DILocation(line: 68, column: 16, scope: !6824)
!6827 = !DILocation(line: 68, column: 14, scope: !6824)
!6828 = !DILocation(line: 69, column: 12, scope: !6829)
!6829 = distinct !DILexicalBlock(scope: !6824, file: !3657, line: 69, column: 11)
!6830 = !DILocation(line: 69, column: 11, scope: !6824)
!6831 = !DILocation(line: 70, column: 2, scope: !6829)
!6832 = !DILocation(line: 70, column: 7, scope: !6829)
!6833 = !DILocation(line: 70, column: 16, scope: !6829)
!6834 = !DILocation(line: 70, column: 22, scope: !6829)
!6835 = !DILocation(line: 70, column: 41, scope: !6829)
!6836 = !DILocation(line: 71, column: 5, scope: !6824)
!6837 = !DILocation(line: 73, column: 33, scope: !6812)
!6838 = !DILocation(line: 73, column: 40, scope: !6812)
!6839 = !DILocation(line: 73, column: 29, scope: !6812)
!6840 = !DILocation(line: 72, column: 3, scope: !6812)
!6841 = !DILocation(line: 72, column: 8, scope: !6812)
!6842 = !DILocation(line: 72, column: 13, scope: !6812)
!6843 = !DILocation(line: 72, column: 19, scope: !6812)
!6844 = !DILocation(line: 73, column: 5, scope: !6812)
!6845 = !DILocation(line: 74, column: 1, scope: !6812)
!6846 = distinct !DISubprogram(name: "RESET_BIT", scope: !3657, file: !3657, line: 82, type: !6813, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6847 = !DILocalVariable(name: "map", arg: 1, scope: !6846, file: !3657, line: 82, type: !3656)
!6848 = !DILocation(line: 82, column: 20, scope: !6846)
!6849 = !DILocalVariable(name: "bitno", arg: 2, scope: !6846, file: !3657, line: 82, type: !7)
!6850 = !DILocation(line: 82, column: 39, scope: !6846)
!6851 = !DILocation(line: 84, column: 7, scope: !6852)
!6852 = distinct !DILexicalBlock(scope: !6846, file: !3657, line: 84, column: 7)
!6853 = !DILocation(line: 84, column: 12, scope: !6852)
!6854 = !DILocation(line: 84, column: 7, scope: !6846)
!6855 = !DILocalVariable(name: "oldbit", scope: !6856, file: !3657, line: 86, type: !1875)
!6856 = distinct !DILexicalBlock(scope: !6852, file: !3657, line: 85, column: 5)
!6857 = !DILocation(line: 86, column: 12, scope: !6856)
!6858 = !DILocation(line: 87, column: 16, scope: !6856)
!6859 = !DILocation(line: 87, column: 14, scope: !6856)
!6860 = !DILocation(line: 88, column: 11, scope: !6861)
!6861 = distinct !DILexicalBlock(scope: !6856, file: !3657, line: 88, column: 11)
!6862 = !DILocation(line: 88, column: 11, scope: !6856)
!6863 = !DILocation(line: 89, column: 2, scope: !6861)
!6864 = !DILocation(line: 89, column: 7, scope: !6861)
!6865 = !DILocation(line: 89, column: 16, scope: !6861)
!6866 = !DILocation(line: 89, column: 22, scope: !6861)
!6867 = !DILocation(line: 89, column: 41, scope: !6861)
!6868 = !DILocation(line: 90, column: 5, scope: !6856)
!6869 = !DILocation(line: 92, column: 35, scope: !6846)
!6870 = !DILocation(line: 92, column: 42, scope: !6846)
!6871 = !DILocation(line: 92, column: 31, scope: !6846)
!6872 = !DILocation(line: 92, column: 8, scope: !6846)
!6873 = !DILocation(line: 91, column: 3, scope: !6846)
!6874 = !DILocation(line: 91, column: 8, scope: !6846)
!6875 = !DILocation(line: 91, column: 13, scope: !6846)
!6876 = !DILocation(line: 91, column: 19, scope: !6846)
!6877 = !DILocation(line: 92, column: 5, scope: !6846)
!6878 = !DILocation(line: 93, column: 1, scope: !6846)
!6879 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !625, file: !625, line: 3100, type: !6880, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6880 = !DISubroutineType(types: !6881)
!6881 = !{!6882, !1636, !7}
!6882 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2838, size: 64)
!6883 = !DILocalVariable(name: "gs", arg: 1, scope: !6879, file: !625, line: 3100, type: !1636)
!6884 = !DILocation(line: 3100, column: 24, scope: !6879)
!6885 = !DILocalVariable(name: "index", arg: 2, scope: !6879, file: !625, line: 3100, type: !7)
!6886 = !DILocation(line: 3100, column: 37, scope: !6879)
!6887 = !DILocation(line: 3103, column: 3, scope: !6879)
!6888 = !DILocation(line: 3104, column: 12, scope: !6879)
!6889 = !DILocation(line: 3104, column: 16, scope: !6879)
!6890 = !DILocation(line: 3104, column: 27, scope: !6879)
!6891 = !DILocation(line: 3104, column: 32, scope: !6879)
!6892 = !DILocation(line: 3104, column: 3, scope: !6879)
!6893 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !625, file: !625, line: 1878, type: !5339, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6894 = !DILocalVariable(name: "gs", arg: 1, scope: !6893, file: !625, line: 1878, type: !5309)
!6895 = !DILocation(line: 1878, column: 31, scope: !6893)
!6896 = !DILocation(line: 1881, column: 21, scope: !6893)
!6897 = !DILocation(line: 1881, column: 10, scope: !6893)
!6898 = !DILocation(line: 1881, column: 3, scope: !6893)
!6899 = distinct !DISubprogram(name: "ssa_accessed_in_tree", scope: !3, file: !3, line: 607, type: !6900, scopeLine: 608, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6900 = !DISubroutineType(types: !6901)
!6901 = !{null, !1762, !6902}
!6902 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6336, size: 64)
!6903 = !DILocalVariable(name: "t", arg: 1, scope: !6899, file: !3, line: 607, type: !1762)
!6904 = !DILocation(line: 607, column: 28, scope: !6899)
!6905 = !DILocalVariable(name: "a", arg: 2, scope: !6899, file: !3, line: 607, type: !6902)
!6906 = !DILocation(line: 607, column: 55, scope: !6899)
!6907 = !DILocation(line: 609, column: 15, scope: !6899)
!6908 = !DILocation(line: 609, column: 3, scope: !6899)
!6909 = !DILocation(line: 609, column: 6, scope: !6899)
!6910 = !DILocation(line: 609, column: 13, scope: !6899)
!6911 = !DILocation(line: 610, column: 11, scope: !6899)
!6912 = !DILocation(line: 610, column: 14, scope: !6899)
!6913 = !DILocation(line: 610, column: 3, scope: !6899)
!6914 = !DILocation(line: 613, column: 11, scope: !6915)
!6915 = distinct !DILexicalBlock(scope: !6916, file: !3, line: 613, column: 11)
!6916 = distinct !DILexicalBlock(scope: !6899, file: !3, line: 611, column: 5)
!6917 = !DILocation(line: 613, column: 16, scope: !6915)
!6918 = !DILocation(line: 613, column: 19, scope: !6915)
!6919 = !DILocation(line: 613, column: 13, scope: !6915)
!6920 = !DILocation(line: 613, column: 11, scope: !6916)
!6921 = !DILocation(line: 614, column: 2, scope: !6915)
!6922 = !DILocation(line: 614, column: 5, scope: !6915)
!6923 = !DILocation(line: 614, column: 15, scope: !6915)
!6924 = !DILocation(line: 615, column: 7, scope: !6916)
!6925 = !DILocation(line: 617, column: 11, scope: !6926)
!6926 = distinct !DILexicalBlock(scope: !6916, file: !3, line: 617, column: 11)
!6927 = !DILocation(line: 618, column: 4, scope: !6926)
!6928 = !DILocation(line: 618, column: 7, scope: !6926)
!6929 = !DILocation(line: 618, column: 30, scope: !6926)
!6930 = !DILocation(line: 618, column: 33, scope: !6926)
!6931 = !DILocation(line: 618, column: 27, scope: !6926)
!6932 = !DILocation(line: 617, column: 11, scope: !6916)
!6933 = !DILocation(line: 619, column: 2, scope: !6926)
!6934 = !DILocation(line: 619, column: 5, scope: !6926)
!6935 = !DILocation(line: 619, column: 15, scope: !6926)
!6936 = !DILocation(line: 620, column: 7, scope: !6916)
!6937 = !DILocation(line: 622, column: 7, scope: !6916)
!6938 = !DILocation(line: 624, column: 1, scope: !6899)
!6939 = distinct !DISubprogram(name: "ssa_accessed_in_call_rhs", scope: !3, file: !3, line: 630, type: !6940, scopeLine: 631, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6940 = !DISubroutineType(types: !6941)
!6941 = !{null, !1636, !6902}
!6942 = !DILocalVariable(name: "stmt", arg: 1, scope: !6939, file: !3, line: 630, type: !1636)
!6943 = !DILocation(line: 630, column: 34, scope: !6939)
!6944 = !DILocalVariable(name: "a", arg: 2, scope: !6939, file: !3, line: 630, type: !6902)
!6945 = !DILocation(line: 630, column: 64, scope: !6939)
!6946 = !DILocalVariable(name: "decl", scope: !6939, file: !3, line: 632, type: !1762)
!6947 = !DILocation(line: 632, column: 8, scope: !6939)
!6948 = !DILocalVariable(name: "arg", scope: !6939, file: !3, line: 633, type: !1762)
!6949 = !DILocation(line: 633, column: 8, scope: !6939)
!6950 = !DILocalVariable(name: "i", scope: !6939, file: !3, line: 634, type: !2082)
!6951 = !DILocation(line: 634, column: 10, scope: !6939)
!6952 = !DILocation(line: 636, column: 3, scope: !6939)
!6953 = !DILocation(line: 636, column: 6, scope: !6939)
!6954 = !DILocation(line: 636, column: 13, scope: !6939)
!6955 = !DILocation(line: 637, column: 10, scope: !6956)
!6956 = distinct !DILexicalBlock(scope: !6939, file: !3, line: 637, column: 3)
!6957 = !DILocation(line: 637, column: 8, scope: !6956)
!6958 = !DILocation(line: 637, column: 15, scope: !6959)
!6959 = distinct !DILexicalBlock(scope: !6956, file: !3, line: 637, column: 3)
!6960 = !DILocation(line: 637, column: 41, scope: !6959)
!6961 = !DILocation(line: 637, column: 19, scope: !6959)
!6962 = !DILocation(line: 637, column: 17, scope: !6959)
!6963 = !DILocation(line: 637, column: 3, scope: !6956)
!6964 = !DILocation(line: 639, column: 30, scope: !6965)
!6965 = distinct !DILexicalBlock(scope: !6959, file: !3, line: 638, column: 5)
!6966 = !DILocation(line: 639, column: 36, scope: !6965)
!6967 = !DILocation(line: 639, column: 13, scope: !6965)
!6968 = !DILocation(line: 639, column: 11, scope: !6965)
!6969 = !DILocation(line: 640, column: 11, scope: !6970)
!6970 = distinct !DILexicalBlock(scope: !6965, file: !3, line: 640, column: 11)
!6971 = !DILocation(line: 640, column: 18, scope: !6970)
!6972 = !DILocation(line: 640, column: 21, scope: !6970)
!6973 = !DILocation(line: 640, column: 15, scope: !6970)
!6974 = !DILocation(line: 640, column: 11, scope: !6965)
!6975 = !DILocation(line: 642, column: 4, scope: !6976)
!6976 = distinct !DILexicalBlock(scope: !6970, file: !3, line: 641, column: 2)
!6977 = !DILocation(line: 642, column: 7, scope: !6976)
!6978 = !DILocation(line: 642, column: 17, scope: !6976)
!6979 = !DILocation(line: 643, column: 31, scope: !6976)
!6980 = !DILocation(line: 643, column: 11, scope: !6976)
!6981 = !DILocation(line: 643, column: 9, scope: !6976)
!6982 = !DILocation(line: 644, column: 16, scope: !6976)
!6983 = !DILocation(line: 644, column: 4, scope: !6976)
!6984 = !DILocation(line: 644, column: 7, scope: !6976)
!6985 = !DILocation(line: 644, column: 14, scope: !6976)
!6986 = !DILocation(line: 645, column: 4, scope: !6976)
!6987 = !DILocation(line: 647, column: 5, scope: !6965)
!6988 = !DILocation(line: 637, column: 49, scope: !6959)
!6989 = !DILocation(line: 637, column: 3, scope: !6959)
!6990 = distinct !{!6990, !6963, !6991}
!6991 = !DILocation(line: 647, column: 5, scope: !6956)
!6992 = !DILocation(line: 648, column: 1, scope: !6939)
!6993 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !625, file: !625, line: 2013, type: !6767, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!6994 = !DILocalVariable(name: "gs", arg: 1, scope: !6993, file: !625, line: 2013, type: !5309)
!6995 = !DILocation(line: 2013, column: 36, scope: !6993)
!6996 = !DILocalVariable(name: "num_ops", scope: !6993, file: !625, line: 2015, type: !7)
!6997 = !DILocation(line: 2015, column: 12, scope: !6993)
!6998 = !DILocation(line: 2017, column: 29, scope: !6993)
!6999 = !DILocation(line: 2017, column: 13, scope: !6993)
!7000 = !DILocation(line: 2017, column: 11, scope: !6993)
!7001 = !DILocation(line: 2018, column: 10, scope: !6993)
!7002 = !DILocation(line: 2018, column: 18, scope: !6993)
!7003 = !DILocation(line: 2018, column: 3, scope: !6993)
!7004 = distinct !DISubprogram(name: "gimple_num_ops", scope: !625, file: !625, line: 1596, type: !6767, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7005 = !DILocalVariable(name: "gs", arg: 1, scope: !7004, file: !625, line: 1596, type: !5309)
!7006 = !DILocation(line: 1596, column: 30, scope: !7004)
!7007 = !DILocation(line: 1598, column: 10, scope: !7004)
!7008 = !DILocation(line: 1598, column: 14, scope: !7004)
!7009 = !DILocation(line: 1598, column: 21, scope: !7004)
!7010 = !DILocation(line: 1598, column: 3, scope: !7004)
!7011 = distinct !DISubprogram(name: "ssa_accessed_in_assign_rhs", scope: !3, file: !3, line: 654, type: !6940, scopeLine: 655, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7012 = !DILocalVariable(name: "stmt", arg: 1, scope: !7011, file: !3, line: 654, type: !1636)
!7013 = !DILocation(line: 654, column: 36, scope: !7011)
!7014 = !DILocalVariable(name: "a", arg: 2, scope: !7011, file: !3, line: 654, type: !6902)
!7015 = !DILocation(line: 654, column: 66, scope: !7011)
!7016 = !DILocation(line: 657, column: 39, scope: !7011)
!7017 = !DILocation(line: 657, column: 15, scope: !7011)
!7018 = !DILocation(line: 657, column: 3, scope: !7011)
!7019 = !DILocation(line: 657, column: 6, scope: !7011)
!7020 = !DILocation(line: 657, column: 13, scope: !7011)
!7021 = !DILocation(line: 658, column: 11, scope: !7011)
!7022 = !DILocation(line: 658, column: 14, scope: !7011)
!7023 = !DILocation(line: 658, column: 3, scope: !7011)
!7024 = !DILocation(line: 666, column: 49, scope: !7025)
!7025 = distinct !DILexicalBlock(scope: !7011, file: !3, line: 659, column: 5)
!7026 = !DILocation(line: 666, column: 29, scope: !7025)
!7027 = !DILocation(line: 666, column: 56, scope: !7025)
!7028 = !DILocation(line: 666, column: 7, scope: !7025)
!7029 = !DILocation(line: 667, column: 7, scope: !7025)
!7030 = !DILocation(line: 671, column: 33, scope: !7025)
!7031 = !DILocation(line: 671, column: 13, scope: !7025)
!7032 = !DILocation(line: 671, column: 11, scope: !7025)
!7033 = !DILocation(line: 672, column: 33, scope: !7025)
!7034 = !DILocation(line: 672, column: 13, scope: !7025)
!7035 = !DILocation(line: 672, column: 11, scope: !7025)
!7036 = !DILocation(line: 674, column: 11, scope: !7037)
!7037 = distinct !DILexicalBlock(scope: !7025, file: !3, line: 674, column: 11)
!7038 = !DILocation(line: 674, column: 18, scope: !7037)
!7039 = !DILocation(line: 674, column: 21, scope: !7037)
!7040 = !DILocation(line: 674, column: 15, scope: !7037)
!7041 = !DILocation(line: 674, column: 11, scope: !7025)
!7042 = !DILocation(line: 676, column: 4, scope: !7043)
!7043 = distinct !DILexicalBlock(scope: !7037, file: !3, line: 675, column: 2)
!7044 = !DILocation(line: 676, column: 7, scope: !7043)
!7045 = !DILocation(line: 676, column: 17, scope: !7043)
!7046 = !DILocation(line: 677, column: 19, scope: !7043)
!7047 = !DILocation(line: 677, column: 4, scope: !7043)
!7048 = !DILocation(line: 677, column: 7, scope: !7043)
!7049 = !DILocation(line: 677, column: 17, scope: !7043)
!7050 = !DILocation(line: 678, column: 2, scope: !7043)
!7051 = !DILocation(line: 679, column: 16, scope: !7052)
!7052 = distinct !DILexicalBlock(scope: !7037, file: !3, line: 679, column: 16)
!7053 = !DILocation(line: 679, column: 23, scope: !7052)
!7054 = !DILocation(line: 679, column: 26, scope: !7052)
!7055 = !DILocation(line: 679, column: 20, scope: !7052)
!7056 = !DILocation(line: 679, column: 16, scope: !7037)
!7057 = !DILocation(line: 681, column: 4, scope: !7058)
!7058 = distinct !DILexicalBlock(scope: !7052, file: !3, line: 680, column: 2)
!7059 = !DILocation(line: 681, column: 7, scope: !7058)
!7060 = !DILocation(line: 681, column: 17, scope: !7058)
!7061 = !DILocation(line: 682, column: 19, scope: !7058)
!7062 = !DILocation(line: 682, column: 4, scope: !7058)
!7063 = !DILocation(line: 682, column: 7, scope: !7058)
!7064 = !DILocation(line: 682, column: 17, scope: !7058)
!7065 = !DILocation(line: 683, column: 2, scope: !7058)
!7066 = !DILocation(line: 684, column: 7, scope: !7025)
!7067 = !DILocation(line: 686, column: 7, scope: !7025)
!7068 = !DILocation(line: 688, column: 1, scope: !7011)
!7069 = distinct !DISubprogram(name: "record_access_alloc_site_info", scope: !3, file: !3, line: 693, type: !7070, scopeLine: 695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7070 = !DISubroutineType(types: !7071)
!7071 = !{null, !2986, !1636, !1762, !1762, !1575, !1875}
!7072 = !DILocalVariable(name: "mi", arg: 1, scope: !7069, file: !3, line: 693, type: !2986)
!7073 = !DILocation(line: 693, column: 52, scope: !7069)
!7074 = !DILocalVariable(name: "stmt", arg: 2, scope: !7069, file: !3, line: 693, type: !1636)
!7075 = !DILocation(line: 693, column: 63, scope: !7069)
!7076 = !DILocalVariable(name: "offset", arg: 3, scope: !7069, file: !3, line: 693, type: !1762)
!7077 = !DILocation(line: 693, column: 74, scope: !7069)
!7078 = !DILocalVariable(name: "index", arg: 4, scope: !7069, file: !3, line: 694, type: !1762)
!7079 = !DILocation(line: 694, column: 16, scope: !7069)
!7080 = !DILocalVariable(name: "level", arg: 5, scope: !7069, file: !3, line: 694, type: !1575)
!7081 = !DILocation(line: 694, column: 27, scope: !7069)
!7082 = !DILocalVariable(name: "is_alloc", arg: 6, scope: !7069, file: !3, line: 694, type: !1875)
!7083 = !DILocation(line: 694, column: 39, scope: !7069)
!7084 = !DILocalVariable(name: "acc_info", scope: !7069, file: !3, line: 696, type: !2974)
!7085 = !DILocation(line: 696, column: 28, scope: !7069)
!7086 = !DILocation(line: 698, column: 8, scope: !7087)
!7087 = distinct !DILexicalBlock(scope: !7069, file: !3, line: 698, column: 7)
!7088 = !DILocation(line: 698, column: 12, scope: !7087)
!7089 = !DILocation(line: 698, column: 7, scope: !7069)
!7090 = !DILocation(line: 699, column: 20, scope: !7087)
!7091 = !DILocation(line: 699, column: 5, scope: !7087)
!7092 = !DILocation(line: 699, column: 9, scope: !7087)
!7093 = !DILocation(line: 699, column: 18, scope: !7087)
!7094 = !DILocation(line: 703, column: 5, scope: !7069)
!7095 = !DILocation(line: 702, column: 7, scope: !7069)
!7096 = !DILocation(line: 702, column: 5, scope: !7069)
!7097 = !DILocation(line: 704, column: 20, scope: !7069)
!7098 = !DILocation(line: 704, column: 3, scope: !7069)
!7099 = !DILocation(line: 704, column: 13, scope: !7069)
!7100 = !DILocation(line: 704, column: 18, scope: !7069)
!7101 = !DILocation(line: 705, column: 22, scope: !7069)
!7102 = !DILocation(line: 705, column: 3, scope: !7069)
!7103 = !DILocation(line: 705, column: 13, scope: !7069)
!7104 = !DILocation(line: 705, column: 20, scope: !7069)
!7105 = !DILocation(line: 706, column: 21, scope: !7069)
!7106 = !DILocation(line: 706, column: 3, scope: !7069)
!7107 = !DILocation(line: 706, column: 13, scope: !7069)
!7108 = !DILocation(line: 706, column: 19, scope: !7069)
!7109 = !DILocation(line: 707, column: 29, scope: !7069)
!7110 = !DILocation(line: 707, column: 3, scope: !7069)
!7111 = !DILocation(line: 707, column: 13, scope: !7069)
!7112 = !DILocation(line: 707, column: 27, scope: !7069)
!7113 = !DILocation(line: 708, column: 21, scope: !7069)
!7114 = !DILocation(line: 708, column: 3, scope: !7069)
!7115 = !DILocation(line: 708, column: 13, scope: !7069)
!7116 = !DILocation(line: 708, column: 19, scope: !7069)
!7117 = !DILocation(line: 709, column: 24, scope: !7069)
!7118 = !DILocation(line: 709, column: 3, scope: !7069)
!7119 = !DILocation(line: 709, column: 13, scope: !7069)
!7120 = !DILocation(line: 709, column: 22, scope: !7069)
!7121 = !DILocation(line: 711, column: 3, scope: !7069)
!7122 = !DILocation(line: 713, column: 1, scope: !7069)
!7123 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !625, file: !625, line: 1759, type: !5339, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7124 = !DILocalVariable(name: "gs", arg: 1, scope: !7123, file: !625, line: 1759, type: !5309)
!7125 = !DILocation(line: 1759, column: 34, scope: !7123)
!7126 = !DILocation(line: 1763, column: 23, scope: !7127)
!7127 = distinct !DILexicalBlock(scope: !7123, file: !625, line: 1763, column: 7)
!7128 = !DILocation(line: 1763, column: 7, scope: !7127)
!7129 = !DILocation(line: 1763, column: 27, scope: !7127)
!7130 = !DILocation(line: 1763, column: 7, scope: !7123)
!7131 = !DILocation(line: 1764, column: 23, scope: !7127)
!7132 = !DILocation(line: 1764, column: 12, scope: !7127)
!7133 = !DILocation(line: 1764, column: 5, scope: !7127)
!7134 = !DILocation(line: 1766, column: 5, scope: !7127)
!7135 = !DILocation(line: 1767, column: 1, scope: !7123)
!7136 = distinct !DISubprogram(name: "get_index_from_offset", scope: !3, file: !3, line: 961, type: !7137, scopeLine: 962, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7137 = !DISubroutineType(types: !7138)
!7138 = !{!1762, !1762, !1636}
!7139 = !DILocalVariable(name: "offset", arg: 1, scope: !7136, file: !3, line: 961, type: !1762)
!7140 = !DILocation(line: 961, column: 29, scope: !7136)
!7141 = !DILocalVariable(name: "def_stmt", arg: 2, scope: !7136, file: !3, line: 961, type: !1636)
!7142 = !DILocation(line: 961, column: 44, scope: !7136)
!7143 = !DILocalVariable(name: "op1", scope: !7136, file: !3, line: 963, type: !1762)
!7144 = !DILocation(line: 963, column: 8, scope: !7136)
!7145 = !DILocalVariable(name: "op2", scope: !7136, file: !3, line: 963, type: !1762)
!7146 = !DILocation(line: 963, column: 13, scope: !7136)
!7147 = !DILocalVariable(name: "index", scope: !7136, file: !3, line: 963, type: !1762)
!7148 = !DILocation(line: 963, column: 18, scope: !7136)
!7149 = !DILocation(line: 965, column: 20, scope: !7150)
!7150 = distinct !DILexicalBlock(scope: !7136, file: !3, line: 965, column: 7)
!7151 = !DILocation(line: 965, column: 7, scope: !7150)
!7152 = !DILocation(line: 965, column: 30, scope: !7150)
!7153 = !DILocation(line: 965, column: 7, scope: !7136)
!7154 = !DILocation(line: 966, column: 5, scope: !7150)
!7155 = !DILocation(line: 967, column: 30, scope: !7156)
!7156 = distinct !DILexicalBlock(scope: !7136, file: !3, line: 967, column: 7)
!7157 = !DILocation(line: 967, column: 8, scope: !7156)
!7158 = !DILocation(line: 967, column: 40, scope: !7156)
!7159 = !DILocation(line: 967, column: 65, scope: !7156)
!7160 = !DILocation(line: 967, column: 43, scope: !7156)
!7161 = !DILocation(line: 968, column: 7, scope: !7156)
!7162 = !DILocation(line: 968, column: 10, scope: !7156)
!7163 = !DILocation(line: 968, column: 52, scope: !7156)
!7164 = !DILocation(line: 967, column: 7, scope: !7136)
!7165 = !DILocation(line: 969, column: 35, scope: !7156)
!7166 = !DILocation(line: 970, column: 7, scope: !7156)
!7167 = !DILocation(line: 969, column: 12, scope: !7156)
!7168 = !DILocation(line: 969, column: 5, scope: !7156)
!7169 = !DILocation(line: 971, column: 30, scope: !7170)
!7170 = distinct !DILexicalBlock(scope: !7156, file: !3, line: 971, column: 12)
!7171 = !DILocation(line: 971, column: 12, scope: !7170)
!7172 = !DILocation(line: 972, column: 5, scope: !7170)
!7173 = !DILocation(line: 972, column: 32, scope: !7170)
!7174 = !DILocation(line: 972, column: 8, scope: !7170)
!7175 = !DILocation(line: 972, column: 42, scope: !7170)
!7176 = !DILocation(line: 971, column: 12, scope: !7156)
!7177 = !DILocation(line: 974, column: 33, scope: !7178)
!7178 = distinct !DILexicalBlock(scope: !7170, file: !3, line: 973, column: 5)
!7179 = !DILocation(line: 974, column: 13, scope: !7178)
!7180 = !DILocation(line: 974, column: 11, scope: !7178)
!7181 = !DILocation(line: 975, column: 33, scope: !7178)
!7182 = !DILocation(line: 975, column: 13, scope: !7178)
!7183 = !DILocation(line: 975, column: 11, scope: !7178)
!7184 = !DILocation(line: 976, column: 11, scope: !7185)
!7185 = distinct !DILexicalBlock(scope: !7178, file: !3, line: 976, column: 11)
!7186 = !DILocation(line: 976, column: 27, scope: !7185)
!7187 = !DILocation(line: 976, column: 42, scope: !7185)
!7188 = !DILocation(line: 976, column: 45, scope: !7185)
!7189 = !DILocation(line: 976, column: 61, scope: !7185)
!7190 = !DILocation(line: 976, column: 11, scope: !7178)
!7191 = !DILocation(line: 977, column: 2, scope: !7185)
!7192 = !DILocation(line: 978, column: 16, scope: !7178)
!7193 = !DILocation(line: 978, column: 32, scope: !7178)
!7194 = !DILocation(line: 978, column: 15, scope: !7178)
!7195 = !DILocation(line: 978, column: 50, scope: !7178)
!7196 = !DILocation(line: 978, column: 56, scope: !7178)
!7197 = !DILocation(line: 978, column: 13, scope: !7178)
!7198 = !DILocation(line: 979, column: 14, scope: !7178)
!7199 = !DILocation(line: 979, column: 7, scope: !7178)
!7200 = !DILocation(line: 982, column: 5, scope: !7170)
!7201 = !DILocation(line: 983, column: 1, scope: !7136)
!7202 = distinct !DISubprogram(name: "VEC_access_site_info_p_heap_alloc", scope: !3, file: !3, line: 245, type: !7203, scopeLine: 245, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7203 = !DISubroutineType(types: !7204)
!7204 = !{!2961, !1575}
!7205 = !DILocalVariable(name: "alloc_", arg: 1, scope: !7202, file: !3, line: 245, type: !1575)
!7206 = !DILocation(line: 245, column: 1, scope: !7202)
!7207 = distinct !DISubprogram(name: "VEC_access_site_info_p_heap_safe_push", scope: !3, file: !3, line: 245, type: !7208, scopeLine: 245, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7208 = !DISubroutineType(types: !7209)
!7209 = !{!7210, !7211, !2973}
!7210 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2973, size: 64)
!7211 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2961, size: 64)
!7212 = !DILocalVariable(name: "vec_", arg: 1, scope: !7207, file: !3, line: 245, type: !7211)
!7213 = !DILocation(line: 245, column: 1, scope: !7207)
!7214 = !DILocalVariable(name: "obj_", arg: 2, scope: !7207, file: !3, line: 245, type: !2973)
!7215 = distinct !DISubprogram(name: "VEC_access_site_info_p_heap_reserve", scope: !3, file: !3, line: 245, type: !7216, scopeLine: 245, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7216 = !DISubroutineType(types: !7217)
!7217 = !{!1575, !7211, !1575}
!7218 = !DILocalVariable(name: "vec_", arg: 1, scope: !7215, file: !3, line: 245, type: !7211)
!7219 = !DILocation(line: 245, column: 1, scope: !7215)
!7220 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7215, file: !3, line: 245, type: !1575)
!7221 = !DILocalVariable(name: "extend", scope: !7215, file: !3, line: 245, type: !1575)
!7222 = !DILocation(line: 245, column: 1, scope: !7223)
!7223 = distinct !DILexicalBlock(scope: !7215, file: !3, line: 245, column: 1)
!7224 = distinct !DISubprogram(name: "VEC_access_site_info_p_base_quick_push", scope: !3, file: !3, line: 244, type: !7225, scopeLine: 244, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7225 = !DISubroutineType(types: !7226)
!7226 = !{!7210, !7227, !2973}
!7227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2966, size: 64)
!7228 = !DILocalVariable(name: "vec_", arg: 1, scope: !7224, file: !3, line: 244, type: !7227)
!7229 = !DILocation(line: 244, column: 1, scope: !7224)
!7230 = !DILocalVariable(name: "obj_", arg: 2, scope: !7224, file: !3, line: 244, type: !2973)
!7231 = !DILocalVariable(name: "slot_", scope: !7224, file: !3, line: 244, type: !7210)
!7232 = distinct !DISubprogram(name: "VEC_access_site_info_p_base_space", scope: !3, file: !3, line: 244, type: !7233, scopeLine: 244, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7233 = !DISubroutineType(types: !7234)
!7234 = !{!1575, !7227, !1575}
!7235 = !DILocalVariable(name: "vec_", arg: 1, scope: !7232, file: !3, line: 244, type: !7227)
!7236 = !DILocation(line: 244, column: 1, scope: !7232)
!7237 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7232, file: !3, line: 244, type: !1575)
!7238 = distinct !DISubprogram(name: "VEC_access_site_info_p_base_iterate", scope: !3, file: !3, line: 244, type: !7239, scopeLine: 244, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7239 = !DISubroutineType(types: !7240)
!7240 = !{!1575, !7241, !7, !7210}
!7241 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7242, size: 64)
!7242 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2966)
!7243 = !DILocalVariable(name: "vec_", arg: 1, scope: !7238, file: !3, line: 244, type: !7241)
!7244 = !DILocation(line: 244, column: 1, scope: !7238)
!7245 = !DILocalVariable(name: "ix_", arg: 2, scope: !7238, file: !3, line: 244, type: !7)
!7246 = !DILocalVariable(name: "ptr", arg: 3, scope: !7238, file: !3, line: 244, type: !7210)
!7247 = !DILocation(line: 244, column: 1, scope: !7248)
!7248 = distinct !DILexicalBlock(scope: !7238, file: !3, line: 244, column: 1)
!7249 = !DILocation(line: 244, column: 1, scope: !7250)
!7250 = distinct !DILexicalBlock(scope: !7248, file: !3, line: 244, column: 1)
!7251 = !DILocation(line: 244, column: 1, scope: !7252)
!7252 = distinct !DILexicalBlock(scope: !7248, file: !3, line: 244, column: 1)
!7253 = distinct !DISubprogram(name: "VEC_access_site_info_p_heap_free", scope: !3, file: !3, line: 245, type: !7254, scopeLine: 245, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7254 = !DISubroutineType(types: !7255)
!7255 = !{null, !7211}
!7256 = !DILocalVariable(name: "vec_", arg: 1, scope: !7253, file: !3, line: 245, type: !7211)
!7257 = !DILocation(line: 245, column: 1, scope: !7253)
!7258 = !DILocation(line: 245, column: 1, scope: !7259)
!7259 = distinct !DILexicalBlock(scope: !7253, file: !3, line: 245, column: 1)
!7260 = distinct !DISubprogram(name: "loop_containing_stmt", scope: !3598, file: !3598, line: 617, type: !7261, scopeLine: 618, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7261 = !DISubroutineType(types: !7262)
!7262 = !{!2210, !1636}
!7263 = !DILocalVariable(name: "stmt", arg: 1, scope: !7260, file: !3598, line: 617, type: !1636)
!7264 = !DILocation(line: 617, column: 30, scope: !7260)
!7265 = !DILocalVariable(name: "bb", scope: !7260, file: !3598, line: 619, type: !2025)
!7266 = !DILocation(line: 619, column: 15, scope: !7260)
!7267 = !DILocation(line: 619, column: 31, scope: !7260)
!7268 = !DILocation(line: 619, column: 20, scope: !7260)
!7269 = !DILocation(line: 620, column: 8, scope: !7270)
!7270 = distinct !DILexicalBlock(scope: !7260, file: !3598, line: 620, column: 7)
!7271 = !DILocation(line: 620, column: 7, scope: !7260)
!7272 = !DILocation(line: 621, column: 5, scope: !7270)
!7273 = !DILocation(line: 623, column: 10, scope: !7260)
!7274 = !DILocation(line: 623, column: 14, scope: !7260)
!7275 = !DILocation(line: 623, column: 3, scope: !7260)
!7276 = !DILocation(line: 624, column: 1, scope: !7260)
!7277 = distinct !DISubprogram(name: "gimple_bb", scope: !625, file: !625, line: 1112, type: !7278, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7278 = !DISubroutineType(types: !7279)
!7279 = !{!1599, !5309}
!7280 = !DILocalVariable(name: "g", arg: 1, scope: !7277, file: !625, line: 1112, type: !5309)
!7281 = !DILocation(line: 1112, column: 25, scope: !7277)
!7282 = !DILocation(line: 1114, column: 10, scope: !7277)
!7283 = !DILocation(line: 1114, column: 13, scope: !7277)
!7284 = !DILocation(line: 1114, column: 20, scope: !7277)
!7285 = !DILocation(line: 1114, column: 3, scope: !7277)
!7286 = distinct !DISubprogram(name: "can_calculate_expr_before_stmt", scope: !3, file: !3, line: 1520, type: !7287, scopeLine: 1521, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7287 = !DISubroutineType(types: !7288)
!7288 = !{!1762, !1762, !3656}
!7289 = !DILocalVariable(name: "expr", arg: 1, scope: !7286, file: !3, line: 1520, type: !1762)
!7290 = !DILocation(line: 1520, column: 38, scope: !7286)
!7291 = !DILocalVariable(name: "visited", arg: 2, scope: !7286, file: !3, line: 1520, type: !3656)
!7292 = !DILocation(line: 1520, column: 52, scope: !7286)
!7293 = !DILocalVariable(name: "def_stmt", scope: !7286, file: !3, line: 1522, type: !1636)
!7294 = !DILocation(line: 1522, column: 10, scope: !7286)
!7295 = !DILocalVariable(name: "res", scope: !7286, file: !3, line: 1523, type: !1762)
!7296 = !DILocation(line: 1523, column: 8, scope: !7286)
!7297 = !DILocation(line: 1525, column: 11, scope: !7286)
!7298 = !DILocation(line: 1525, column: 3, scope: !7286)
!7299 = !DILocation(line: 1529, column: 11, scope: !7300)
!7300 = distinct !DILexicalBlock(scope: !7301, file: !3, line: 1529, column: 11)
!7301 = distinct !DILexicalBlock(scope: !7286, file: !3, line: 1526, column: 5)
!7302 = !DILocation(line: 1529, column: 11, scope: !7301)
!7303 = !DILocation(line: 1530, column: 2, scope: !7300)
!7304 = !DILocation(line: 1532, column: 16, scope: !7301)
!7305 = !DILocation(line: 1532, column: 25, scope: !7301)
!7306 = !DILocation(line: 1532, column: 7, scope: !7301)
!7307 = !DILocation(line: 1533, column: 18, scope: !7301)
!7308 = !DILocation(line: 1533, column: 16, scope: !7301)
!7309 = !DILocation(line: 1534, column: 45, scope: !7301)
!7310 = !DILocation(line: 1534, column: 55, scope: !7301)
!7311 = !DILocation(line: 1534, column: 13, scope: !7301)
!7312 = !DILocation(line: 1534, column: 11, scope: !7301)
!7313 = !DILocation(line: 1535, column: 18, scope: !7301)
!7314 = !DILocation(line: 1535, column: 27, scope: !7301)
!7315 = !DILocation(line: 1535, column: 7, scope: !7301)
!7316 = !DILocation(line: 1536, column: 14, scope: !7301)
!7317 = !DILocation(line: 1536, column: 7, scope: !7301)
!7318 = !DILocation(line: 1540, column: 14, scope: !7301)
!7319 = !DILocation(line: 1540, column: 7, scope: !7301)
!7320 = !DILocation(line: 1543, column: 7, scope: !7301)
!7321 = !DILocation(line: 1545, column: 1, scope: !7286)
!7322 = distinct !DISubprogram(name: "can_calculate_stmt_before_stmt", scope: !3, file: !3, line: 1448, type: !7323, scopeLine: 1449, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7323 = !DISubroutineType(types: !7324)
!7324 = !{!1762, !1636, !3656}
!7325 = !DILocalVariable(name: "stmt", arg: 1, scope: !7322, file: !3, line: 1448, type: !1636)
!7326 = !DILocation(line: 1448, column: 40, scope: !7322)
!7327 = !DILocalVariable(name: "visited", arg: 2, scope: !7322, file: !3, line: 1448, type: !3656)
!7328 = !DILocation(line: 1448, column: 54, scope: !7322)
!7329 = !DILocalVariable(name: "op1", scope: !7322, file: !3, line: 1450, type: !1762)
!7330 = !DILocation(line: 1450, column: 8, scope: !7322)
!7331 = !DILocalVariable(name: "op2", scope: !7322, file: !3, line: 1450, type: !1762)
!7332 = !DILocation(line: 1450, column: 13, scope: !7322)
!7333 = !DILocalVariable(name: "res", scope: !7322, file: !3, line: 1450, type: !1762)
!7334 = !DILocation(line: 1450, column: 18, scope: !7322)
!7335 = !DILocalVariable(name: "code", scope: !7322, file: !3, line: 1451, type: !317)
!7336 = !DILocation(line: 1451, column: 18, scope: !7322)
!7337 = !DILocation(line: 1453, column: 24, scope: !7322)
!7338 = !DILocation(line: 1453, column: 11, scope: !7322)
!7339 = !DILocation(line: 1453, column: 3, scope: !7322)
!7340 = !DILocation(line: 1456, column: 38, scope: !7341)
!7341 = distinct !DILexicalBlock(scope: !7322, file: !3, line: 1454, column: 5)
!7342 = !DILocation(line: 1456, column: 14, scope: !7341)
!7343 = !DILocation(line: 1456, column: 12, scope: !7341)
!7344 = !DILocation(line: 1457, column: 33, scope: !7341)
!7345 = !DILocation(line: 1457, column: 13, scope: !7341)
!7346 = !DILocation(line: 1457, column: 11, scope: !7341)
!7347 = !DILocation(line: 1459, column: 15, scope: !7341)
!7348 = !DILocation(line: 1459, column: 7, scope: !7341)
!7349 = !DILocation(line: 1466, column: 30, scope: !7350)
!7350 = distinct !DILexicalBlock(scope: !7341, file: !3, line: 1460, column: 2)
!7351 = !DILocation(line: 1466, column: 10, scope: !7350)
!7352 = !DILocation(line: 1466, column: 8, scope: !7350)
!7353 = !DILocation(line: 1467, column: 42, scope: !7350)
!7354 = !DILocation(line: 1467, column: 47, scope: !7350)
!7355 = !DILocation(line: 1467, column: 10, scope: !7350)
!7356 = !DILocation(line: 1467, column: 8, scope: !7350)
!7357 = !DILocation(line: 1468, column: 9, scope: !7358)
!7358 = distinct !DILexicalBlock(scope: !7350, file: !3, line: 1468, column: 8)
!7359 = !DILocation(line: 1468, column: 8, scope: !7350)
!7360 = !DILocation(line: 1469, column: 6, scope: !7358)
!7361 = !DILocation(line: 1470, column: 42, scope: !7350)
!7362 = !DILocation(line: 1470, column: 47, scope: !7350)
!7363 = !DILocation(line: 1470, column: 10, scope: !7350)
!7364 = !DILocation(line: 1470, column: 8, scope: !7350)
!7365 = !DILocation(line: 1471, column: 8, scope: !7366)
!7366 = distinct !DILexicalBlock(scope: !7350, file: !3, line: 1471, column: 8)
!7367 = !DILocation(line: 1471, column: 8, scope: !7350)
!7368 = !DILocation(line: 1472, column: 13, scope: !7366)
!7369 = !DILocation(line: 1472, column: 6, scope: !7366)
!7370 = !DILocation(line: 1473, column: 4, scope: !7350)
!7371 = !DILocation(line: 1476, column: 42, scope: !7350)
!7372 = !DILocation(line: 1476, column: 47, scope: !7350)
!7373 = !DILocation(line: 1476, column: 10, scope: !7350)
!7374 = !DILocation(line: 1476, column: 8, scope: !7350)
!7375 = !DILocation(line: 1477, column: 8, scope: !7376)
!7376 = distinct !DILexicalBlock(scope: !7350, file: !3, line: 1477, column: 8)
!7377 = !DILocation(line: 1477, column: 12, scope: !7376)
!7378 = !DILocation(line: 1477, column: 8, scope: !7350)
!7379 = !DILocation(line: 1478, column: 13, scope: !7376)
!7380 = !DILocation(line: 1478, column: 6, scope: !7376)
!7381 = !DILocation(line: 1480, column: 6, scope: !7376)
!7382 = !DILocation(line: 1483, column: 32, scope: !7383)
!7383 = distinct !DILexicalBlock(scope: !7350, file: !3, line: 1483, column: 8)
!7384 = !DILocation(line: 1483, column: 8, scope: !7383)
!7385 = !DILocation(line: 1483, column: 8, scope: !7350)
!7386 = !DILocation(line: 1484, column: 45, scope: !7383)
!7387 = !DILocation(line: 1484, column: 50, scope: !7383)
!7388 = !DILocation(line: 1484, column: 13, scope: !7383)
!7389 = !DILocation(line: 1484, column: 6, scope: !7383)
!7390 = !DILocation(line: 1486, column: 6, scope: !7383)
!7391 = !DILocalVariable(name: "j", scope: !7392, file: !3, line: 1491, type: !2082)
!7392 = distinct !DILexicalBlock(scope: !7341, file: !3, line: 1490, column: 7)
!7393 = !DILocation(line: 1491, column: 9, scope: !7392)
!7394 = !DILocation(line: 1493, column: 6, scope: !7392)
!7395 = !DILocation(line: 1495, column: 9, scope: !7396)
!7396 = distinct !DILexicalBlock(scope: !7392, file: !3, line: 1495, column: 2)
!7397 = !DILocation(line: 1495, column: 7, scope: !7396)
!7398 = !DILocation(line: 1495, column: 14, scope: !7399)
!7399 = distinct !DILexicalBlock(scope: !7396, file: !3, line: 1495, column: 2)
!7400 = !DILocation(line: 1495, column: 39, scope: !7399)
!7401 = !DILocation(line: 1495, column: 18, scope: !7399)
!7402 = !DILocation(line: 1495, column: 16, scope: !7399)
!7403 = !DILocation(line: 1495, column: 2, scope: !7396)
!7404 = !DILocalVariable(name: "new_res", scope: !7405, file: !3, line: 1497, type: !1762)
!7405 = distinct !DILexicalBlock(scope: !7399, file: !3, line: 1496, column: 4)
!7406 = !DILocation(line: 1497, column: 11, scope: !7405)
!7407 = !DILocalVariable(name: "def", scope: !7405, file: !3, line: 1498, type: !1762)
!7408 = !DILocation(line: 1498, column: 11, scope: !7405)
!7409 = !DILocation(line: 1498, column: 17, scope: !7405)
!7410 = !DILocation(line: 1500, column: 48, scope: !7405)
!7411 = !DILocation(line: 1500, column: 53, scope: !7405)
!7412 = !DILocation(line: 1500, column: 16, scope: !7405)
!7413 = !DILocation(line: 1500, column: 14, scope: !7405)
!7414 = !DILocation(line: 1501, column: 10, scope: !7415)
!7415 = distinct !DILexicalBlock(scope: !7405, file: !3, line: 1501, column: 10)
!7416 = !DILocation(line: 1501, column: 14, scope: !7415)
!7417 = !DILocation(line: 1501, column: 10, scope: !7405)
!7418 = !DILocation(line: 1502, column: 14, scope: !7415)
!7419 = !DILocation(line: 1502, column: 12, scope: !7415)
!7420 = !DILocation(line: 1502, column: 8, scope: !7415)
!7421 = !DILocation(line: 1503, column: 16, scope: !7422)
!7422 = distinct !DILexicalBlock(scope: !7415, file: !3, line: 1503, column: 15)
!7423 = !DILocation(line: 1503, column: 24, scope: !7422)
!7424 = !DILocation(line: 1503, column: 49, scope: !7422)
!7425 = !DILocation(line: 1503, column: 54, scope: !7422)
!7426 = !DILocation(line: 1503, column: 28, scope: !7422)
!7427 = !DILocation(line: 1503, column: 15, scope: !7415)
!7428 = !DILocation(line: 1504, column: 8, scope: !7422)
!7429 = !DILocation(line: 1505, column: 4, scope: !7405)
!7430 = !DILocation(line: 1495, column: 47, scope: !7399)
!7431 = !DILocation(line: 1495, column: 2, scope: !7399)
!7432 = distinct !{!7432, !7403, !7433}
!7433 = !DILocation(line: 1505, column: 4, scope: !7396)
!7434 = !DILocation(line: 1506, column: 9, scope: !7392)
!7435 = !DILocation(line: 1506, column: 2, scope: !7392)
!7436 = !DILocation(line: 1510, column: 7, scope: !7341)
!7437 = !DILocation(line: 1512, column: 1, scope: !7322)
!7438 = distinct !DISubprogram(name: "gimple_expr_type", scope: !625, file: !625, line: 4366, type: !5339, scopeLine: 4367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7439 = !DILocalVariable(name: "stmt", arg: 1, scope: !7438, file: !625, line: 4366, type: !5309)
!7440 = !DILocation(line: 4366, column: 32, scope: !7438)
!7441 = !DILocalVariable(name: "code", scope: !7438, file: !625, line: 4368, type: !624)
!7442 = !DILocation(line: 4368, column: 20, scope: !7438)
!7443 = !DILocation(line: 4368, column: 40, scope: !7438)
!7444 = !DILocation(line: 4368, column: 27, scope: !7438)
!7445 = !DILocation(line: 4370, column: 7, scope: !7446)
!7446 = distinct !DILexicalBlock(scope: !7438, file: !625, line: 4370, column: 7)
!7447 = !DILocation(line: 4370, column: 12, scope: !7446)
!7448 = !DILocation(line: 4370, column: 29, scope: !7446)
!7449 = !DILocation(line: 4370, column: 32, scope: !7446)
!7450 = !DILocation(line: 4370, column: 37, scope: !7446)
!7451 = !DILocation(line: 4370, column: 7, scope: !7438)
!7452 = !DILocalVariable(name: "type", scope: !7453, file: !625, line: 4372, type: !1762)
!7453 = distinct !DILexicalBlock(scope: !7446, file: !625, line: 4371, column: 5)
!7454 = !DILocation(line: 4372, column: 12, scope: !7453)
!7455 = !DILocation(line: 4377, column: 11, scope: !7456)
!7456 = distinct !DILexicalBlock(scope: !7453, file: !625, line: 4377, column: 11)
!7457 = !DILocation(line: 4377, column: 16, scope: !7456)
!7458 = !DILocation(line: 4377, column: 11, scope: !7453)
!7459 = !DILocation(line: 4378, column: 34, scope: !7456)
!7460 = !DILocation(line: 4378, column: 9, scope: !7456)
!7461 = !DILocation(line: 4378, column: 7, scope: !7456)
!7462 = !DILocation(line: 4378, column: 2, scope: !7456)
!7463 = !DILocation(line: 4380, column: 34, scope: !7456)
!7464 = !DILocation(line: 4380, column: 10, scope: !7456)
!7465 = !DILocation(line: 4380, column: 2, scope: !7456)
!7466 = !DILocation(line: 4383, column: 13, scope: !7467)
!7467 = distinct !DILexicalBlock(scope: !7456, file: !625, line: 4381, column: 4)
!7468 = !DILocation(line: 4383, column: 11, scope: !7467)
!7469 = !DILocation(line: 4384, column: 6, scope: !7467)
!7470 = !DILocation(line: 4388, column: 13, scope: !7467)
!7471 = !DILocation(line: 4388, column: 11, scope: !7467)
!7472 = !DILocation(line: 4389, column: 6, scope: !7467)
!7473 = !DILocation(line: 4391, column: 14, scope: !7453)
!7474 = !DILocation(line: 4391, column: 7, scope: !7453)
!7475 = !DILocation(line: 4393, column: 12, scope: !7476)
!7476 = distinct !DILexicalBlock(scope: !7446, file: !625, line: 4393, column: 12)
!7477 = !DILocation(line: 4393, column: 17, scope: !7476)
!7478 = !DILocation(line: 4393, column: 12, scope: !7446)
!7479 = !DILocation(line: 4394, column: 12, scope: !7476)
!7480 = !DILocation(line: 4394, column: 5, scope: !7476)
!7481 = !DILocation(line: 4396, column: 12, scope: !7476)
!7482 = !DILocation(line: 4396, column: 5, scope: !7476)
!7483 = !DILocation(line: 4397, column: 1, scope: !7438)
!7484 = distinct !DISubprogram(name: "gimple_call_return_type", scope: !625, file: !625, line: 1966, type: !5339, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7485 = !DILocalVariable(name: "gs", arg: 1, scope: !7484, file: !625, line: 1966, type: !5309)
!7486 = !DILocation(line: 1966, column: 39, scope: !7484)
!7487 = !DILocalVariable(name: "fn", scope: !7484, file: !625, line: 1968, type: !1762)
!7488 = !DILocation(line: 1968, column: 8, scope: !7484)
!7489 = !DILocation(line: 1968, column: 29, scope: !7484)
!7490 = !DILocation(line: 1968, column: 13, scope: !7484)
!7491 = !DILocalVariable(name: "type", scope: !7484, file: !625, line: 1969, type: !1762)
!7492 = !DILocation(line: 1969, column: 8, scope: !7484)
!7493 = !DILocation(line: 1969, column: 15, scope: !7484)
!7494 = !DILocation(line: 1972, column: 10, scope: !7484)
!7495 = !DILocation(line: 1972, column: 8, scope: !7484)
!7496 = !DILocation(line: 1976, column: 10, scope: !7484)
!7497 = !DILocation(line: 1976, column: 3, scope: !7484)
!7498 = distinct !DISubprogram(name: "sort_dim_hot_level", scope: !3, file: !3, line: 1982, type: !7499, scopeLine: 1983, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7499 = !DISubroutineType(types: !7500)
!7500 = !{null, !2959, !2985, !1575}
!7501 = !DILocalVariable(name: "a", arg: 1, scope: !7498, file: !3, line: 1982, type: !2959)
!7502 = !DILocation(line: 1982, column: 33, scope: !7498)
!7503 = !DILocalVariable(name: "dim_map", arg: 2, scope: !7498, file: !3, line: 1982, type: !2985)
!7504 = !DILocation(line: 1982, column: 41, scope: !7498)
!7505 = !DILocalVariable(name: "n", arg: 3, scope: !7498, file: !3, line: 1982, type: !1575)
!7506 = !DILocation(line: 1982, column: 54, scope: !7498)
!7507 = !DILocalVariable(name: "i", scope: !7498, file: !3, line: 1984, type: !1575)
!7508 = !DILocation(line: 1984, column: 7, scope: !7498)
!7509 = !DILocalVariable(name: "j", scope: !7498, file: !3, line: 1984, type: !1575)
!7510 = !DILocation(line: 1984, column: 10, scope: !7498)
!7511 = !DILocalVariable(name: "tmp1", scope: !7498, file: !3, line: 1984, type: !1575)
!7512 = !DILocation(line: 1984, column: 13, scope: !7498)
!7513 = !DILocalVariable(name: "tmp", scope: !7498, file: !3, line: 1985, type: !2744)
!7514 = !DILocation(line: 1985, column: 13, scope: !7498)
!7515 = !DILocation(line: 1987, column: 10, scope: !7516)
!7516 = distinct !DILexicalBlock(scope: !7498, file: !3, line: 1987, column: 3)
!7517 = !DILocation(line: 1987, column: 8, scope: !7516)
!7518 = !DILocation(line: 1987, column: 15, scope: !7519)
!7519 = distinct !DILexicalBlock(scope: !7516, file: !3, line: 1987, column: 3)
!7520 = !DILocation(line: 1987, column: 19, scope: !7519)
!7521 = !DILocation(line: 1987, column: 21, scope: !7519)
!7522 = !DILocation(line: 1987, column: 17, scope: !7519)
!7523 = !DILocation(line: 1987, column: 3, scope: !7516)
!7524 = !DILocation(line: 1989, column: 14, scope: !7525)
!7525 = distinct !DILexicalBlock(scope: !7526, file: !3, line: 1989, column: 7)
!7526 = distinct !DILexicalBlock(scope: !7519, file: !3, line: 1988, column: 5)
!7527 = !DILocation(line: 1989, column: 12, scope: !7525)
!7528 = !DILocation(line: 1989, column: 19, scope: !7529)
!7529 = distinct !DILexicalBlock(scope: !7525, file: !3, line: 1989, column: 7)
!7530 = !DILocation(line: 1989, column: 23, scope: !7529)
!7531 = !DILocation(line: 1989, column: 25, scope: !7529)
!7532 = !DILocation(line: 1989, column: 31, scope: !7529)
!7533 = !DILocation(line: 1989, column: 29, scope: !7529)
!7534 = !DILocation(line: 1989, column: 21, scope: !7529)
!7535 = !DILocation(line: 1989, column: 7, scope: !7525)
!7536 = !DILocation(line: 1991, column: 8, scope: !7537)
!7537 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 1991, column: 8)
!7538 = distinct !DILexicalBlock(scope: !7529, file: !3, line: 1990, column: 2)
!7539 = !DILocation(line: 1991, column: 10, scope: !7537)
!7540 = !DILocation(line: 1991, column: 12, scope: !7537)
!7541 = !DILocation(line: 1991, column: 19, scope: !7537)
!7542 = !DILocation(line: 1991, column: 21, scope: !7537)
!7543 = !DILocation(line: 1991, column: 17, scope: !7537)
!7544 = !DILocation(line: 1991, column: 8, scope: !7538)
!7545 = !DILocation(line: 1993, column: 14, scope: !7546)
!7546 = distinct !DILexicalBlock(scope: !7537, file: !3, line: 1992, column: 6)
!7547 = !DILocation(line: 1993, column: 16, scope: !7546)
!7548 = !DILocation(line: 1993, column: 12, scope: !7546)
!7549 = !DILocation(line: 1994, column: 15, scope: !7546)
!7550 = !DILocation(line: 1994, column: 17, scope: !7546)
!7551 = !DILocation(line: 1994, column: 19, scope: !7546)
!7552 = !DILocation(line: 1994, column: 8, scope: !7546)
!7553 = !DILocation(line: 1994, column: 10, scope: !7546)
!7554 = !DILocation(line: 1994, column: 13, scope: !7546)
!7555 = !DILocation(line: 1995, column: 19, scope: !7546)
!7556 = !DILocation(line: 1995, column: 8, scope: !7546)
!7557 = !DILocation(line: 1995, column: 10, scope: !7546)
!7558 = !DILocation(line: 1995, column: 12, scope: !7546)
!7559 = !DILocation(line: 1995, column: 17, scope: !7546)
!7560 = !DILocation(line: 1996, column: 15, scope: !7546)
!7561 = !DILocation(line: 1996, column: 23, scope: !7546)
!7562 = !DILocation(line: 1996, column: 13, scope: !7546)
!7563 = !DILocation(line: 1997, column: 21, scope: !7546)
!7564 = !DILocation(line: 1997, column: 29, scope: !7546)
!7565 = !DILocation(line: 1997, column: 31, scope: !7546)
!7566 = !DILocation(line: 1997, column: 8, scope: !7546)
!7567 = !DILocation(line: 1997, column: 16, scope: !7546)
!7568 = !DILocation(line: 1997, column: 19, scope: !7546)
!7569 = !DILocation(line: 1998, column: 25, scope: !7546)
!7570 = !DILocation(line: 1998, column: 8, scope: !7546)
!7571 = !DILocation(line: 1998, column: 16, scope: !7546)
!7572 = !DILocation(line: 1998, column: 18, scope: !7546)
!7573 = !DILocation(line: 1998, column: 23, scope: !7546)
!7574 = !DILocation(line: 1999, column: 6, scope: !7546)
!7575 = !DILocation(line: 2000, column: 2, scope: !7538)
!7576 = !DILocation(line: 1989, column: 35, scope: !7529)
!7577 = !DILocation(line: 1989, column: 7, scope: !7529)
!7578 = distinct !{!7578, !7535, !7579}
!7579 = !DILocation(line: 2000, column: 2, scope: !7525)
!7580 = !DILocation(line: 2001, column: 5, scope: !7526)
!7581 = !DILocation(line: 1987, column: 27, scope: !7519)
!7582 = !DILocation(line: 1987, column: 3, scope: !7519)
!7583 = distinct !{!7583, !7523, !7584}
!7584 = !DILocation(line: 2001, column: 5, scope: !7516)
!7585 = !DILocation(line: 2002, column: 1, scope: !7498)
!7586 = distinct !DISubprogram(name: "check_var_notmodified_p", scope: !3, file: !3, line: 1411, type: !7587, scopeLine: 1412, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7587 = !DISubroutineType(types: !7588)
!7588 = !{!1762, !2173, !2985, !1574}
!7589 = !DILocalVariable(name: "tp", arg: 1, scope: !7586, file: !3, line: 1411, type: !2173)
!7590 = !DILocation(line: 1411, column: 33, scope: !7586)
!7591 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !7586, file: !3, line: 1411, type: !2985)
!7592 = !DILocation(line: 1411, column: 42, scope: !7586)
!7593 = !DILocalVariable(name: "data", arg: 3, scope: !7586, file: !3, line: 1411, type: !1574)
!7594 = !DILocation(line: 1411, column: 63, scope: !7586)
!7595 = !DILocalVariable(name: "bb", scope: !7586, file: !3, line: 1413, type: !2025)
!7596 = !DILocation(line: 1413, column: 15, scope: !7586)
!7597 = !DILocalVariable(name: "t", scope: !7586, file: !3, line: 1414, type: !1762)
!7598 = !DILocation(line: 1414, column: 8, scope: !7586)
!7599 = !DILocation(line: 1414, column: 13, scope: !7586)
!7600 = !DILocation(line: 1414, column: 12, scope: !7586)
!7601 = !DILocalVariable(name: "callback_data", scope: !7586, file: !3, line: 1415, type: !2998)
!7602 = !DILocation(line: 1415, column: 19, scope: !7586)
!7603 = !DILocation(line: 1415, column: 53, scope: !7586)
!7604 = !DILocation(line: 1415, column: 35, scope: !7586)
!7605 = !DILocalVariable(name: "fn", scope: !7586, file: !3, line: 1416, type: !1762)
!7606 = !DILocation(line: 1416, column: 8, scope: !7586)
!7607 = !DILocation(line: 1416, column: 13, scope: !7586)
!7608 = !DILocation(line: 1416, column: 28, scope: !7586)
!7609 = !DILocalVariable(name: "gsi", scope: !7586, file: !3, line: 1417, type: !3429)
!7610 = !DILocation(line: 1417, column: 24, scope: !7586)
!7611 = !DILocalVariable(name: "stmt", scope: !7586, file: !3, line: 1418, type: !1636)
!7612 = !DILocation(line: 1418, column: 10, scope: !7586)
!7613 = !DILocation(line: 1420, column: 7, scope: !7614)
!7614 = distinct !DILexicalBlock(scope: !7586, file: !3, line: 1420, column: 7)
!7615 = !DILocation(line: 1420, column: 21, scope: !7614)
!7616 = !DILocation(line: 1420, column: 33, scope: !7614)
!7617 = !DILocation(line: 1420, column: 36, scope: !7614)
!7618 = !DILocation(line: 1420, column: 50, scope: !7614)
!7619 = !DILocation(line: 1420, column: 7, scope: !7586)
!7620 = !DILocation(line: 1421, column: 5, scope: !7614)
!7621 = !DILocation(line: 1423, column: 3, scope: !7622)
!7622 = distinct !DILexicalBlock(scope: !7586, file: !3, line: 1423, column: 3)
!7623 = !DILocation(line: 1423, column: 3, scope: !7624)
!7624 = distinct !DILexicalBlock(scope: !7622, file: !3, line: 1423, column: 3)
!7625 = !DILocation(line: 1425, column: 30, scope: !7626)
!7626 = distinct !DILexicalBlock(scope: !7627, file: !3, line: 1425, column: 5)
!7627 = distinct !DILexicalBlock(scope: !7624, file: !3, line: 1424, column: 3)
!7628 = !DILocation(line: 1425, column: 16, scope: !7626)
!7629 = !DILocation(line: 1425, column: 10, scope: !7626)
!7630 = !DILocation(line: 1425, column: 36, scope: !7631)
!7631 = distinct !DILexicalBlock(scope: !7626, file: !3, line: 1425, column: 5)
!7632 = !DILocation(line: 1425, column: 35, scope: !7631)
!7633 = !DILocation(line: 1425, column: 5, scope: !7626)
!7634 = !DILocation(line: 1427, column: 9, scope: !7635)
!7635 = distinct !DILexicalBlock(scope: !7631, file: !3, line: 1426, column: 7)
!7636 = !DILocation(line: 1427, column: 7, scope: !7635)
!7637 = !DILocation(line: 1428, column: 25, scope: !7638)
!7638 = distinct !DILexicalBlock(scope: !7635, file: !3, line: 1428, column: 6)
!7639 = !DILocation(line: 1428, column: 7, scope: !7638)
!7640 = !DILocation(line: 1428, column: 31, scope: !7638)
!7641 = !DILocation(line: 1428, column: 51, scope: !7638)
!7642 = !DILocation(line: 1428, column: 35, scope: !7638)
!7643 = !DILocation(line: 1428, column: 6, scope: !7635)
!7644 = !DILocation(line: 1429, column: 4, scope: !7638)
!7645 = !DILocation(line: 1430, column: 22, scope: !7646)
!7646 = distinct !DILexicalBlock(scope: !7635, file: !3, line: 1430, column: 6)
!7647 = !DILocation(line: 1430, column: 6, scope: !7646)
!7648 = !DILocation(line: 1430, column: 31, scope: !7646)
!7649 = !DILocation(line: 1430, column: 28, scope: !7646)
!7650 = !DILocation(line: 1430, column: 6, scope: !7635)
!7651 = !DILocation(line: 1432, column: 28, scope: !7652)
!7652 = distinct !DILexicalBlock(scope: !7646, file: !3, line: 1431, column: 4)
!7653 = !DILocation(line: 1432, column: 6, scope: !7652)
!7654 = !DILocation(line: 1432, column: 21, scope: !7652)
!7655 = !DILocation(line: 1432, column: 26, scope: !7652)
!7656 = !DILocation(line: 1433, column: 13, scope: !7652)
!7657 = !DILocation(line: 1433, column: 6, scope: !7652)
!7658 = !DILocation(line: 1435, column: 7, scope: !7635)
!7659 = !DILocation(line: 1425, column: 53, scope: !7631)
!7660 = !DILocation(line: 1425, column: 5, scope: !7631)
!7661 = distinct !{!7661, !7633, !7662}
!7662 = !DILocation(line: 1435, column: 7, scope: !7626)
!7663 = !DILocation(line: 1436, column: 3, scope: !7627)
!7664 = distinct !{!7664, !7621, !7665}
!7665 = !DILocation(line: 1436, column: 3, scope: !7622)
!7666 = !DILocation(line: 1437, column: 4, scope: !7586)
!7667 = !DILocation(line: 1437, column: 18, scope: !7586)
!7668 = !DILocation(line: 1438, column: 3, scope: !7586)
!7669 = !DILocation(line: 1439, column: 1, scope: !7586)
!7670 = distinct !DISubprogram(name: "first_imm_use_stmt", scope: !3598, file: !3598, line: 1058, type: !7671, scopeLine: 1059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7671 = !DISubroutineType(types: !7672)
!7672 = !{!1636, !6155, !1762}
!7673 = !DILocalVariable(name: "imm", arg: 1, scope: !7670, file: !3598, line: 1058, type: !6155)
!7674 = !DILocation(line: 1058, column: 39, scope: !7670)
!7675 = !DILocalVariable(name: "var", arg: 2, scope: !7670, file: !3598, line: 1058, type: !1762)
!7676 = !DILocation(line: 1058, column: 49, scope: !7670)
!7677 = !DILocation(line: 1060, column: 18, scope: !7670)
!7678 = !DILocation(line: 1060, column: 3, scope: !7670)
!7679 = !DILocation(line: 1060, column: 8, scope: !7670)
!7680 = !DILocation(line: 1060, column: 14, scope: !7670)
!7681 = !DILocation(line: 1061, column: 18, scope: !7670)
!7682 = !DILocation(line: 1061, column: 23, scope: !7670)
!7683 = !DILocation(line: 1061, column: 30, scope: !7670)
!7684 = !DILocation(line: 1061, column: 3, scope: !7670)
!7685 = !DILocation(line: 1061, column: 8, scope: !7670)
!7686 = !DILocation(line: 1061, column: 16, scope: !7670)
!7687 = !DILocation(line: 1062, column: 3, scope: !7670)
!7688 = !DILocation(line: 1062, column: 8, scope: !7670)
!7689 = !DILocation(line: 1062, column: 22, scope: !7670)
!7690 = !DILocation(line: 1067, column: 3, scope: !7670)
!7691 = !DILocation(line: 1067, column: 8, scope: !7670)
!7692 = !DILocation(line: 1067, column: 18, scope: !7670)
!7693 = !DILocation(line: 1067, column: 23, scope: !7670)
!7694 = !DILocation(line: 1068, column: 3, scope: !7670)
!7695 = !DILocation(line: 1068, column: 8, scope: !7670)
!7696 = !DILocation(line: 1068, column: 18, scope: !7670)
!7697 = !DILocation(line: 1068, column: 23, scope: !7670)
!7698 = !DILocation(line: 1069, column: 3, scope: !7670)
!7699 = !DILocation(line: 1069, column: 8, scope: !7670)
!7700 = !DILocation(line: 1069, column: 18, scope: !7670)
!7701 = !DILocation(line: 1069, column: 22, scope: !7670)
!7702 = !DILocation(line: 1069, column: 27, scope: !7670)
!7703 = !DILocation(line: 1070, column: 3, scope: !7670)
!7704 = !DILocation(line: 1070, column: 8, scope: !7670)
!7705 = !DILocation(line: 1070, column: 18, scope: !7670)
!7706 = !DILocation(line: 1070, column: 22, scope: !7670)
!7707 = !DILocation(line: 1072, column: 27, scope: !7708)
!7708 = distinct !DILexicalBlock(scope: !7670, file: !3598, line: 1072, column: 7)
!7709 = !DILocation(line: 1072, column: 7, scope: !7708)
!7710 = !DILocation(line: 1072, column: 7, scope: !7670)
!7711 = !DILocation(line: 1073, column: 5, scope: !7708)
!7712 = !DILocation(line: 1075, column: 25, scope: !7670)
!7713 = !DILocation(line: 1075, column: 30, scope: !7670)
!7714 = !DILocation(line: 1075, column: 39, scope: !7670)
!7715 = !DILocation(line: 1075, column: 3, scope: !7670)
!7716 = !DILocation(line: 1077, column: 10, scope: !7670)
!7717 = !DILocation(line: 1077, column: 3, scope: !7670)
!7718 = !DILocation(line: 1078, column: 1, scope: !7670)
!7719 = distinct !DISubprogram(name: "end_imm_use_stmt_p", scope: !3598, file: !3598, line: 969, type: !6180, scopeLine: 970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7720 = !DILocalVariable(name: "imm", arg: 1, scope: !7719, file: !3598, line: 969, type: !6182)
!7721 = !DILocation(line: 969, column: 45, scope: !7719)
!7722 = !DILocation(line: 971, column: 11, scope: !7719)
!7723 = !DILocation(line: 971, column: 16, scope: !7719)
!7724 = !DILocation(line: 971, column: 27, scope: !7719)
!7725 = !DILocation(line: 971, column: 32, scope: !7719)
!7726 = !DILocation(line: 971, column: 24, scope: !7719)
!7727 = !DILocation(line: 971, column: 10, scope: !7719)
!7728 = !DILocation(line: 971, column: 3, scope: !7719)
!7729 = distinct !DISubprogram(name: "first_imm_use_on_stmt", scope: !3598, file: !3598, line: 1101, type: !6738, scopeLine: 1102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7730 = !DILocalVariable(name: "imm", arg: 1, scope: !7729, file: !3598, line: 1101, type: !6155)
!7731 = !DILocation(line: 1101, column: 42, scope: !7729)
!7732 = !DILocation(line: 1103, column: 24, scope: !7729)
!7733 = !DILocation(line: 1103, column: 29, scope: !7729)
!7734 = !DILocation(line: 1103, column: 38, scope: !7729)
!7735 = !DILocation(line: 1103, column: 3, scope: !7729)
!7736 = !DILocation(line: 1103, column: 8, scope: !7729)
!7737 = !DILocation(line: 1103, column: 22, scope: !7729)
!7738 = !DILocation(line: 1104, column: 10, scope: !7729)
!7739 = !DILocation(line: 1104, column: 15, scope: !7729)
!7740 = !DILocation(line: 1104, column: 3, scope: !7729)
!7741 = distinct !DISubprogram(name: "end_imm_use_on_stmt_p", scope: !3598, file: !3598, line: 1110, type: !6180, scopeLine: 1111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7742 = !DILocalVariable(name: "imm", arg: 1, scope: !7741, file: !3598, line: 1110, type: !6182)
!7743 = !DILocation(line: 1110, column: 48, scope: !7741)
!7744 = !DILocation(line: 1112, column: 11, scope: !7741)
!7745 = !DILocation(line: 1112, column: 16, scope: !7741)
!7746 = !DILocation(line: 1112, column: 29, scope: !7741)
!7747 = !DILocation(line: 1112, column: 34, scope: !7741)
!7748 = !DILocation(line: 1112, column: 24, scope: !7741)
!7749 = !DILocation(line: 1112, column: 10, scope: !7741)
!7750 = !DILocation(line: 1112, column: 3, scope: !7741)
!7751 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !3598, file: !3598, line: 233, type: !7752, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7752 = !DISubroutineType(types: !7753)
!7753 = !{null, !2993, !1762}
!7754 = !DILocalVariable(name: "use", arg: 1, scope: !7751, file: !3598, line: 233, type: !2993)
!7755 = !DILocation(line: 233, column: 37, scope: !7751)
!7756 = !DILocalVariable(name: "val", arg: 2, scope: !7751, file: !3598, line: 233, type: !1762)
!7757 = !DILocation(line: 233, column: 47, scope: !7751)
!7758 = !DILocation(line: 235, column: 19, scope: !7751)
!7759 = !DILocation(line: 235, column: 3, scope: !7751)
!7760 = !DILocation(line: 236, column: 17, scope: !7751)
!7761 = !DILocation(line: 236, column: 5, scope: !7751)
!7762 = !DILocation(line: 236, column: 10, scope: !7751)
!7763 = !DILocation(line: 236, column: 15, scope: !7751)
!7764 = !DILocation(line: 237, column: 17, scope: !7751)
!7765 = !DILocation(line: 237, column: 22, scope: !7751)
!7766 = !DILocation(line: 237, column: 3, scope: !7751)
!7767 = !DILocation(line: 238, column: 1, scope: !7751)
!7768 = distinct !DISubprogram(name: "next_imm_use_on_stmt", scope: !3598, file: !3598, line: 1118, type: !6738, scopeLine: 1119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7769 = !DILocalVariable(name: "imm", arg: 1, scope: !7768, file: !3598, line: 1118, type: !6155)
!7770 = !DILocation(line: 1118, column: 41, scope: !7768)
!7771 = !DILocation(line: 1120, column: 18, scope: !7768)
!7772 = !DILocation(line: 1120, column: 23, scope: !7768)
!7773 = !DILocation(line: 1120, column: 3, scope: !7768)
!7774 = !DILocation(line: 1120, column: 8, scope: !7768)
!7775 = !DILocation(line: 1120, column: 16, scope: !7768)
!7776 = !DILocation(line: 1121, column: 30, scope: !7777)
!7777 = distinct !DILexicalBlock(scope: !7768, file: !3598, line: 1121, column: 7)
!7778 = !DILocation(line: 1121, column: 7, scope: !7777)
!7779 = !DILocation(line: 1121, column: 7, scope: !7768)
!7780 = !DILocation(line: 1122, column: 5, scope: !7777)
!7781 = !DILocation(line: 1125, column: 28, scope: !7782)
!7782 = distinct !DILexicalBlock(scope: !7777, file: !3598, line: 1124, column: 5)
!7783 = !DILocation(line: 1125, column: 33, scope: !7782)
!7784 = !DILocation(line: 1125, column: 42, scope: !7782)
!7785 = !DILocation(line: 1125, column: 7, scope: !7782)
!7786 = !DILocation(line: 1125, column: 12, scope: !7782)
!7787 = !DILocation(line: 1125, column: 26, scope: !7782)
!7788 = !DILocation(line: 1126, column: 14, scope: !7782)
!7789 = !DILocation(line: 1126, column: 19, scope: !7782)
!7790 = !DILocation(line: 1126, column: 7, scope: !7782)
!7791 = !DILocation(line: 1128, column: 1, scope: !7768)
!7792 = distinct !DISubprogram(name: "next_imm_use_stmt", scope: !3598, file: !3598, line: 1083, type: !7793, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7793 = !DISubroutineType(types: !7794)
!7794 = !{!1636, !6155}
!7795 = !DILocalVariable(name: "imm", arg: 1, scope: !7792, file: !3598, line: 1083, type: !6155)
!7796 = !DILocation(line: 1083, column: 38, scope: !7792)
!7797 = !DILocation(line: 1085, column: 18, scope: !7792)
!7798 = !DILocation(line: 1085, column: 23, scope: !7792)
!7799 = !DILocation(line: 1085, column: 33, scope: !7792)
!7800 = !DILocation(line: 1085, column: 3, scope: !7792)
!7801 = !DILocation(line: 1085, column: 8, scope: !7792)
!7802 = !DILocation(line: 1085, column: 16, scope: !7792)
!7803 = !DILocation(line: 1086, column: 27, scope: !7804)
!7804 = distinct !DILexicalBlock(scope: !7792, file: !3598, line: 1086, column: 7)
!7805 = !DILocation(line: 1086, column: 7, scope: !7804)
!7806 = !DILocation(line: 1086, column: 7, scope: !7792)
!7807 = !DILocation(line: 1088, column: 11, scope: !7808)
!7808 = distinct !DILexicalBlock(scope: !7809, file: !3598, line: 1088, column: 11)
!7809 = distinct !DILexicalBlock(scope: !7804, file: !3598, line: 1087, column: 5)
!7810 = !DILocation(line: 1088, column: 16, scope: !7808)
!7811 = !DILocation(line: 1088, column: 26, scope: !7808)
!7812 = !DILocation(line: 1088, column: 31, scope: !7808)
!7813 = !DILocation(line: 1088, column: 11, scope: !7809)
!7814 = !DILocation(line: 1089, column: 19, scope: !7808)
!7815 = !DILocation(line: 1089, column: 24, scope: !7808)
!7816 = !DILocation(line: 1089, column: 2, scope: !7808)
!7817 = !DILocation(line: 1090, column: 7, scope: !7809)
!7818 = !DILocation(line: 1093, column: 25, scope: !7792)
!7819 = !DILocation(line: 1093, column: 30, scope: !7792)
!7820 = !DILocation(line: 1093, column: 39, scope: !7792)
!7821 = !DILocation(line: 1093, column: 3, scope: !7792)
!7822 = !DILocation(line: 1094, column: 10, scope: !7792)
!7823 = !DILocation(line: 1094, column: 3, scope: !7792)
!7824 = !DILocation(line: 1095, column: 1, scope: !7792)
!7825 = distinct !DISubprogram(name: "link_use_stmts_after", scope: !3598, file: !3598, line: 1018, type: !7826, scopeLine: 1019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7826 = !DISubroutineType(types: !7827)
!7827 = !{null, !2993, !6155}
!7828 = !DILocalVariable(name: "head", arg: 1, scope: !7825, file: !3598, line: 1018, type: !2993)
!7829 = !DILocation(line: 1018, column: 37, scope: !7825)
!7830 = !DILocalVariable(name: "imm", arg: 2, scope: !7825, file: !3598, line: 1018, type: !6155)
!7831 = !DILocation(line: 1018, column: 61, scope: !7825)
!7832 = !DILocalVariable(name: "use_p", scope: !7825, file: !3598, line: 1020, type: !2993)
!7833 = !DILocation(line: 1020, column: 17, scope: !7825)
!7834 = !DILocalVariable(name: "last_p", scope: !7825, file: !3598, line: 1021, type: !2993)
!7835 = !DILocation(line: 1021, column: 17, scope: !7825)
!7836 = !DILocation(line: 1021, column: 26, scope: !7825)
!7837 = !DILocalVariable(name: "head_stmt", scope: !7825, file: !3598, line: 1022, type: !1636)
!7838 = !DILocation(line: 1022, column: 10, scope: !7825)
!7839 = !DILocation(line: 1022, column: 22, scope: !7825)
!7840 = !DILocalVariable(name: "use", scope: !7825, file: !3598, line: 1023, type: !1762)
!7841 = !DILocation(line: 1023, column: 8, scope: !7825)
!7842 = !DILocation(line: 1023, column: 14, scope: !7825)
!7843 = !DILocalVariable(name: "op_iter", scope: !7825, file: !3598, line: 1024, type: !4826)
!7844 = !DILocation(line: 1024, column: 15, scope: !7825)
!7845 = !DILocalVariable(name: "flag", scope: !7825, file: !3598, line: 1025, type: !1575)
!7846 = !DILocation(line: 1025, column: 7, scope: !7825)
!7847 = !DILocation(line: 1028, column: 26, scope: !7825)
!7848 = !DILocation(line: 1028, column: 11, scope: !7825)
!7849 = !DILocation(line: 1028, column: 8, scope: !7825)
!7850 = !DILocation(line: 1030, column: 20, scope: !7851)
!7851 = distinct !DILexicalBlock(scope: !7825, file: !3598, line: 1030, column: 7)
!7852 = !DILocation(line: 1030, column: 7, scope: !7851)
!7853 = !DILocation(line: 1030, column: 31, scope: !7851)
!7854 = !DILocation(line: 1030, column: 7, scope: !7825)
!7855 = !DILocation(line: 1032, column: 7, scope: !7856)
!7856 = distinct !DILexicalBlock(scope: !7857, file: !3598, line: 1032, column: 7)
!7857 = distinct !DILexicalBlock(scope: !7851, file: !3598, line: 1031, column: 5)
!7858 = !DILocation(line: 1032, column: 7, scope: !7859)
!7859 = distinct !DILexicalBlock(scope: !7856, file: !3598, line: 1032, column: 7)
!7860 = !DILocation(line: 1033, column: 6, scope: !7861)
!7861 = distinct !DILexicalBlock(scope: !7859, file: !3598, line: 1033, column: 6)
!7862 = !DILocation(line: 1033, column: 30, scope: !7861)
!7863 = !DILocation(line: 1033, column: 27, scope: !7861)
!7864 = !DILocation(line: 1033, column: 6, scope: !7859)
!7865 = !DILocation(line: 1034, column: 34, scope: !7861)
!7866 = !DILocation(line: 1034, column: 41, scope: !7861)
!7867 = !DILocation(line: 1034, column: 47, scope: !7861)
!7868 = !DILocation(line: 1034, column: 13, scope: !7861)
!7869 = !DILocation(line: 1034, column: 11, scope: !7861)
!7870 = !DILocation(line: 1034, column: 4, scope: !7861)
!7871 = distinct !{!7871, !7855, !7872}
!7872 = !DILocation(line: 1034, column: 53, scope: !7856)
!7873 = !DILocation(line: 1035, column: 5, scope: !7857)
!7874 = !DILocation(line: 1038, column: 11, scope: !7875)
!7875 = distinct !DILexicalBlock(scope: !7876, file: !3598, line: 1038, column: 11)
!7876 = distinct !DILexicalBlock(scope: !7851, file: !3598, line: 1037, column: 5)
!7877 = !DILocation(line: 1038, column: 16, scope: !7875)
!7878 = !DILocation(line: 1038, column: 11, scope: !7876)
!7879 = !DILocation(line: 1040, column: 4, scope: !7880)
!7880 = distinct !DILexicalBlock(scope: !7881, file: !3598, line: 1040, column: 4)
!7881 = distinct !DILexicalBlock(scope: !7875, file: !3598, line: 1039, column: 2)
!7882 = !DILocation(line: 1040, column: 4, scope: !7883)
!7883 = distinct !DILexicalBlock(scope: !7880, file: !3598, line: 1040, column: 4)
!7884 = !DILocation(line: 1041, column: 10, scope: !7885)
!7885 = distinct !DILexicalBlock(scope: !7883, file: !3598, line: 1041, column: 10)
!7886 = !DILocation(line: 1041, column: 34, scope: !7885)
!7887 = !DILocation(line: 1041, column: 31, scope: !7885)
!7888 = !DILocation(line: 1041, column: 10, scope: !7883)
!7889 = !DILocation(line: 1042, column: 38, scope: !7885)
!7890 = !DILocation(line: 1042, column: 45, scope: !7885)
!7891 = !DILocation(line: 1042, column: 51, scope: !7885)
!7892 = !DILocation(line: 1042, column: 17, scope: !7885)
!7893 = !DILocation(line: 1042, column: 15, scope: !7885)
!7894 = !DILocation(line: 1042, column: 8, scope: !7885)
!7895 = distinct !{!7895, !7879, !7896}
!7896 = !DILocation(line: 1042, column: 57, scope: !7880)
!7897 = !DILocation(line: 1043, column: 2, scope: !7881)
!7898 = !DILocation(line: 1044, column: 41, scope: !7899)
!7899 = distinct !DILexicalBlock(scope: !7875, file: !3598, line: 1044, column: 16)
!7900 = !DILocation(line: 1044, column: 25, scope: !7899)
!7901 = !DILocation(line: 1044, column: 23, scope: !7899)
!7902 = !DILocation(line: 1044, column: 53, scope: !7899)
!7903 = !DILocation(line: 1044, column: 16, scope: !7875)
!7904 = !DILocation(line: 1046, column: 8, scope: !7905)
!7905 = distinct !DILexicalBlock(scope: !7906, file: !3598, line: 1046, column: 8)
!7906 = distinct !DILexicalBlock(scope: !7899, file: !3598, line: 1045, column: 2)
!7907 = !DILocation(line: 1046, column: 32, scope: !7905)
!7908 = !DILocation(line: 1046, column: 29, scope: !7905)
!7909 = !DILocation(line: 1046, column: 8, scope: !7906)
!7910 = !DILocation(line: 1047, column: 36, scope: !7905)
!7911 = !DILocation(line: 1047, column: 43, scope: !7905)
!7912 = !DILocation(line: 1047, column: 49, scope: !7905)
!7913 = !DILocation(line: 1047, column: 15, scope: !7905)
!7914 = !DILocation(line: 1047, column: 13, scope: !7905)
!7915 = !DILocation(line: 1047, column: 6, scope: !7905)
!7916 = !DILocation(line: 1048, column: 2, scope: !7906)
!7917 = !DILocation(line: 1051, column: 7, scope: !7918)
!7918 = distinct !DILexicalBlock(scope: !7825, file: !3598, line: 1051, column: 7)
!7919 = !DILocation(line: 1051, column: 12, scope: !7918)
!7920 = !DILocation(line: 1051, column: 22, scope: !7918)
!7921 = !DILocation(line: 1051, column: 27, scope: !7918)
!7922 = !DILocation(line: 1051, column: 7, scope: !7825)
!7923 = !DILocation(line: 1052, column: 22, scope: !7918)
!7924 = !DILocation(line: 1052, column: 27, scope: !7918)
!7925 = !DILocation(line: 1052, column: 5, scope: !7918)
!7926 = !DILocation(line: 1053, column: 27, scope: !7825)
!7927 = !DILocation(line: 1053, column: 32, scope: !7825)
!7928 = !DILocation(line: 1053, column: 44, scope: !7825)
!7929 = !DILocation(line: 1053, column: 3, scope: !7825)
!7930 = !DILocation(line: 1054, column: 1, scope: !7825)
!7931 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !3598, file: !3598, line: 910, type: !7932, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7932 = !DISubroutineType(types: !7933)
!7933 = !{!2993, !7934, !1636, !1575}
!7934 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4826, size: 64)
!7935 = !DILocalVariable(name: "ptr", arg: 1, scope: !7931, file: !3598, line: 910, type: !7934)
!7936 = !DILocation(line: 910, column: 35, scope: !7931)
!7937 = !DILocalVariable(name: "phi", arg: 2, scope: !7931, file: !3598, line: 910, type: !1636)
!7938 = !DILocation(line: 910, column: 47, scope: !7931)
!7939 = !DILocalVariable(name: "flags", arg: 3, scope: !7931, file: !3598, line: 910, type: !1575)
!7940 = !DILocation(line: 910, column: 56, scope: !7931)
!7941 = !DILocalVariable(name: "phi_def", scope: !7931, file: !3598, line: 912, type: !1762)
!7942 = !DILocation(line: 912, column: 8, scope: !7931)
!7943 = !DILocation(line: 912, column: 37, scope: !7931)
!7944 = !DILocation(line: 912, column: 18, scope: !7931)
!7945 = !DILocalVariable(name: "comp", scope: !7931, file: !3598, line: 913, type: !1575)
!7946 = !DILocation(line: 913, column: 7, scope: !7931)
!7947 = !DILocation(line: 915, column: 28, scope: !7931)
!7948 = !DILocation(line: 915, column: 3, scope: !7931)
!7949 = !DILocation(line: 916, column: 3, scope: !7931)
!7950 = !DILocation(line: 916, column: 8, scope: !7931)
!7951 = !DILocation(line: 916, column: 13, scope: !7931)
!7952 = !DILocation(line: 918, column: 3, scope: !7931)
!7953 = !DILocation(line: 920, column: 26, scope: !7931)
!7954 = !DILocation(line: 920, column: 11, scope: !7931)
!7955 = !DILocation(line: 920, column: 8, scope: !7931)
!7956 = !DILocation(line: 923, column: 8, scope: !7957)
!7957 = distinct !DILexicalBlock(scope: !7931, file: !3598, line: 923, column: 7)
!7958 = !DILocation(line: 923, column: 16, scope: !7957)
!7959 = !DILocation(line: 923, column: 14, scope: !7957)
!7960 = !DILocation(line: 923, column: 22, scope: !7957)
!7961 = !DILocation(line: 923, column: 7, scope: !7931)
!7962 = !DILocation(line: 925, column: 7, scope: !7963)
!7963 = distinct !DILexicalBlock(scope: !7957, file: !3598, line: 924, column: 5)
!7964 = !DILocation(line: 925, column: 12, scope: !7963)
!7965 = !DILocation(line: 925, column: 17, scope: !7963)
!7966 = !DILocation(line: 926, column: 7, scope: !7963)
!7967 = !DILocation(line: 929, column: 19, scope: !7931)
!7968 = !DILocation(line: 929, column: 3, scope: !7931)
!7969 = !DILocation(line: 929, column: 8, scope: !7931)
!7970 = !DILocation(line: 929, column: 17, scope: !7931)
!7971 = !DILocation(line: 930, column: 39, scope: !7931)
!7972 = !DILocation(line: 930, column: 18, scope: !7931)
!7973 = !DILocation(line: 930, column: 3, scope: !7931)
!7974 = !DILocation(line: 930, column: 8, scope: !7931)
!7975 = !DILocation(line: 930, column: 16, scope: !7931)
!7976 = !DILocation(line: 931, column: 3, scope: !7931)
!7977 = !DILocation(line: 931, column: 8, scope: !7931)
!7978 = !DILocation(line: 931, column: 18, scope: !7931)
!7979 = !DILocation(line: 932, column: 28, scope: !7931)
!7980 = !DILocation(line: 932, column: 10, scope: !7931)
!7981 = !DILocation(line: 932, column: 3, scope: !7931)
!7982 = !DILocation(line: 933, column: 1, scope: !7931)
!7983 = distinct !DISubprogram(name: "op_iter_done", scope: !3598, file: !3598, line: 652, type: !7984, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7984 = !DISubroutineType(types: !7985)
!7985 = !{!1875, !7986}
!7986 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7987, size: 64)
!7987 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4826)
!7988 = !DILocalVariable(name: "ptr", arg: 1, scope: !7983, file: !3598, line: 652, type: !7986)
!7989 = !DILocation(line: 652, column: 34, scope: !7983)
!7990 = !DILocation(line: 654, column: 10, scope: !7983)
!7991 = !DILocation(line: 654, column: 15, scope: !7983)
!7992 = !DILocation(line: 654, column: 3, scope: !7983)
!7993 = distinct !DISubprogram(name: "move_use_after_head", scope: !3598, file: !3598, line: 990, type: !7994, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!7994 = !DISubroutineType(types: !7995)
!7995 = !{!2993, !2993, !2993, !2993}
!7996 = !DILocalVariable(name: "use_p", arg: 1, scope: !7993, file: !3598, line: 990, type: !2993)
!7997 = !DILocation(line: 990, column: 36, scope: !7993)
!7998 = !DILocalVariable(name: "head", arg: 2, scope: !7993, file: !3598, line: 990, type: !2993)
!7999 = !DILocation(line: 990, column: 57, scope: !7993)
!8000 = !DILocalVariable(name: "last_p", arg: 3, scope: !7993, file: !3598, line: 991, type: !2993)
!8001 = !DILocation(line: 991, column: 23, scope: !7993)
!8002 = !DILocation(line: 997, column: 7, scope: !8003)
!8003 = distinct !DILexicalBlock(scope: !7993, file: !3598, line: 997, column: 7)
!8004 = !DILocation(line: 997, column: 16, scope: !8003)
!8005 = !DILocation(line: 997, column: 13, scope: !8003)
!8006 = !DILocation(line: 997, column: 7, scope: !7993)
!8007 = !DILocation(line: 1000, column: 11, scope: !8008)
!8008 = distinct !DILexicalBlock(scope: !8009, file: !3598, line: 1000, column: 11)
!8009 = distinct !DILexicalBlock(scope: !8003, file: !3598, line: 998, column: 5)
!8010 = !DILocation(line: 1000, column: 19, scope: !8008)
!8011 = !DILocation(line: 1000, column: 27, scope: !8008)
!8012 = !DILocation(line: 1000, column: 24, scope: !8008)
!8013 = !DILocation(line: 1000, column: 11, scope: !8009)
!8014 = !DILocation(line: 1001, column: 11, scope: !8008)
!8015 = !DILocation(line: 1001, column: 9, scope: !8008)
!8016 = !DILocation(line: 1001, column: 2, scope: !8008)
!8017 = !DILocation(line: 1005, column: 20, scope: !8018)
!8018 = distinct !DILexicalBlock(scope: !8008, file: !3598, line: 1003, column: 2)
!8019 = !DILocation(line: 1005, column: 4, scope: !8018)
!8020 = !DILocation(line: 1006, column: 26, scope: !8018)
!8021 = !DILocation(line: 1006, column: 33, scope: !8018)
!8022 = !DILocation(line: 1006, column: 4, scope: !8018)
!8023 = !DILocation(line: 1007, column: 13, scope: !8018)
!8024 = !DILocation(line: 1007, column: 11, scope: !8018)
!8025 = !DILocation(line: 1009, column: 5, scope: !8009)
!8026 = !DILocation(line: 1010, column: 10, scope: !7993)
!8027 = !DILocation(line: 1010, column: 3, scope: !7993)
!8028 = distinct !DISubprogram(name: "op_iter_next_use", scope: !3598, file: !3598, line: 659, type: !8029, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8029 = !DISubroutineType(types: !8030)
!8030 = !{!2993, !7934}
!8031 = !DILocalVariable(name: "ptr", arg: 1, scope: !8028, file: !3598, line: 659, type: !7934)
!8032 = !DILocation(line: 659, column: 32, scope: !8028)
!8033 = !DILocalVariable(name: "use_p", scope: !8028, file: !3598, line: 661, type: !2993)
!8034 = !DILocation(line: 661, column: 17, scope: !8028)
!8035 = !DILocation(line: 665, column: 7, scope: !8036)
!8036 = distinct !DILexicalBlock(scope: !8028, file: !3598, line: 665, column: 7)
!8037 = !DILocation(line: 665, column: 12, scope: !8036)
!8038 = !DILocation(line: 665, column: 7, scope: !8028)
!8039 = !DILocation(line: 667, column: 15, scope: !8040)
!8040 = distinct !DILexicalBlock(scope: !8036, file: !3598, line: 666, column: 5)
!8041 = !DILocation(line: 667, column: 13, scope: !8040)
!8042 = !DILocation(line: 668, column: 19, scope: !8040)
!8043 = !DILocation(line: 668, column: 24, scope: !8040)
!8044 = !DILocation(line: 668, column: 30, scope: !8040)
!8045 = !DILocation(line: 668, column: 7, scope: !8040)
!8046 = !DILocation(line: 668, column: 12, scope: !8040)
!8047 = !DILocation(line: 668, column: 17, scope: !8040)
!8048 = !DILocation(line: 669, column: 14, scope: !8040)
!8049 = !DILocation(line: 669, column: 7, scope: !8040)
!8050 = !DILocation(line: 671, column: 7, scope: !8051)
!8051 = distinct !DILexicalBlock(scope: !8028, file: !3598, line: 671, column: 7)
!8052 = !DILocation(line: 671, column: 12, scope: !8051)
!8053 = !DILocation(line: 671, column: 20, scope: !8051)
!8054 = !DILocation(line: 671, column: 25, scope: !8051)
!8055 = !DILocation(line: 671, column: 18, scope: !8051)
!8056 = !DILocation(line: 671, column: 7, scope: !8028)
!8057 = !DILocation(line: 673, column: 14, scope: !8058)
!8058 = distinct !DILexicalBlock(scope: !8051, file: !3598, line: 672, column: 5)
!8059 = !DILocation(line: 673, column: 7, scope: !8058)
!8060 = !DILocation(line: 675, column: 3, scope: !8028)
!8061 = !DILocation(line: 675, column: 8, scope: !8028)
!8062 = !DILocation(line: 675, column: 13, scope: !8028)
!8063 = !DILocation(line: 676, column: 3, scope: !8028)
!8064 = !DILocation(line: 677, column: 1, scope: !8028)
!8065 = distinct !DISubprogram(name: "op_iter_init_use", scope: !3598, file: !3598, line: 768, type: !7932, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8066 = !DILocalVariable(name: "ptr", arg: 1, scope: !8065, file: !3598, line: 768, type: !7934)
!8067 = !DILocation(line: 768, column: 32, scope: !8065)
!8068 = !DILocalVariable(name: "stmt", arg: 2, scope: !8065, file: !3598, line: 768, type: !1636)
!8069 = !DILocation(line: 768, column: 44, scope: !8065)
!8070 = !DILocalVariable(name: "flags", arg: 3, scope: !8065, file: !3598, line: 768, type: !1575)
!8071 = !DILocation(line: 768, column: 54, scope: !8065)
!8072 = !DILocation(line: 770, column: 3, scope: !8065)
!8073 = !DILocation(line: 772, column: 17, scope: !8065)
!8074 = !DILocation(line: 772, column: 22, scope: !8065)
!8075 = !DILocation(line: 772, column: 28, scope: !8065)
!8076 = !DILocation(line: 772, column: 3, scope: !8065)
!8077 = !DILocation(line: 773, column: 3, scope: !8065)
!8078 = !DILocation(line: 773, column: 8, scope: !8065)
!8079 = !DILocation(line: 773, column: 18, scope: !8065)
!8080 = !DILocation(line: 774, column: 28, scope: !8065)
!8081 = !DILocation(line: 774, column: 10, scope: !8065)
!8082 = !DILocation(line: 774, column: 3, scope: !8065)
!8083 = distinct !DISubprogram(name: "gimple_vuse_op", scope: !625, file: !625, line: 1334, type: !8084, scopeLine: 1335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8084 = !DISubroutineType(types: !8085)
!8085 = !{!2993, !5309}
!8086 = !DILocalVariable(name: "g", arg: 1, scope: !8083, file: !625, line: 1334, type: !5309)
!8087 = !DILocation(line: 1334, column: 30, scope: !8083)
!8088 = !DILocalVariable(name: "ops", scope: !8083, file: !625, line: 1336, type: !2175)
!8089 = !DILocation(line: 1336, column: 24, scope: !8083)
!8090 = !DILocation(line: 1337, column: 28, scope: !8091)
!8091 = distinct !DILexicalBlock(scope: !8083, file: !625, line: 1337, column: 7)
!8092 = !DILocation(line: 1337, column: 8, scope: !8091)
!8093 = !DILocation(line: 1337, column: 7, scope: !8083)
!8094 = !DILocation(line: 1338, column: 5, scope: !8091)
!8095 = !DILocation(line: 1339, column: 9, scope: !8083)
!8096 = !DILocation(line: 1339, column: 12, scope: !8083)
!8097 = !DILocation(line: 1339, column: 18, scope: !8083)
!8098 = !DILocation(line: 1339, column: 25, scope: !8083)
!8099 = !DILocation(line: 1339, column: 7, scope: !8083)
!8100 = !DILocation(line: 1340, column: 7, scope: !8101)
!8101 = distinct !DILexicalBlock(scope: !8083, file: !625, line: 1340, column: 7)
!8102 = !DILocation(line: 1341, column: 7, scope: !8101)
!8103 = !DILocation(line: 1341, column: 10, scope: !8101)
!8104 = !DILocation(line: 1341, column: 28, scope: !8101)
!8105 = !DILocation(line: 1341, column: 36, scope: !8101)
!8106 = !DILocation(line: 1341, column: 39, scope: !8101)
!8107 = !DILocation(line: 1341, column: 49, scope: !8101)
!8108 = !DILocation(line: 1341, column: 32, scope: !8101)
!8109 = !DILocation(line: 1340, column: 7, scope: !8083)
!8110 = !DILocation(line: 1342, column: 12, scope: !8101)
!8111 = !DILocation(line: 1342, column: 5, scope: !8101)
!8112 = !DILocation(line: 1343, column: 3, scope: !8083)
!8113 = !DILocation(line: 1344, column: 1, scope: !8083)
!8114 = distinct !DISubprogram(name: "delink_imm_use", scope: !3598, file: !3598, line: 188, type: !8115, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8115 = !DISubroutineType(types: !8116)
!8116 = !{null, !2994}
!8117 = !DILocalVariable(name: "linknode", arg: 1, scope: !8114, file: !3598, line: 188, type: !2994)
!8118 = !DILocation(line: 188, column: 36, scope: !8114)
!8119 = !DILocation(line: 191, column: 7, scope: !8120)
!8120 = distinct !DILexicalBlock(scope: !8114, file: !3598, line: 191, column: 7)
!8121 = !DILocation(line: 191, column: 17, scope: !8120)
!8122 = !DILocation(line: 191, column: 22, scope: !8120)
!8123 = !DILocation(line: 191, column: 7, scope: !8114)
!8124 = !DILocation(line: 192, column: 5, scope: !8120)
!8125 = !DILocation(line: 194, column: 26, scope: !8114)
!8126 = !DILocation(line: 194, column: 36, scope: !8114)
!8127 = !DILocation(line: 194, column: 3, scope: !8114)
!8128 = !DILocation(line: 194, column: 13, scope: !8114)
!8129 = !DILocation(line: 194, column: 19, scope: !8114)
!8130 = !DILocation(line: 194, column: 24, scope: !8114)
!8131 = !DILocation(line: 195, column: 26, scope: !8114)
!8132 = !DILocation(line: 195, column: 36, scope: !8114)
!8133 = !DILocation(line: 195, column: 3, scope: !8114)
!8134 = !DILocation(line: 195, column: 13, scope: !8114)
!8135 = !DILocation(line: 195, column: 19, scope: !8114)
!8136 = !DILocation(line: 195, column: 24, scope: !8114)
!8137 = !DILocation(line: 196, column: 3, scope: !8114)
!8138 = !DILocation(line: 196, column: 13, scope: !8114)
!8139 = !DILocation(line: 196, column: 18, scope: !8114)
!8140 = !DILocation(line: 197, column: 3, scope: !8114)
!8141 = !DILocation(line: 197, column: 13, scope: !8114)
!8142 = !DILocation(line: 197, column: 18, scope: !8114)
!8143 = !DILocation(line: 198, column: 1, scope: !8114)
!8144 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !3598, file: !3598, line: 202, type: !8145, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8145 = !DISubroutineType(types: !8146)
!8146 = !{null, !2994, !2994}
!8147 = !DILocalVariable(name: "linknode", arg: 1, scope: !8144, file: !3598, line: 202, type: !2994)
!8148 = !DILocation(line: 202, column: 42, scope: !8144)
!8149 = !DILocalVariable(name: "list", arg: 2, scope: !8144, file: !3598, line: 202, type: !2994)
!8150 = !DILocation(line: 202, column: 71, scope: !8144)
!8151 = !DILocation(line: 206, column: 20, scope: !8144)
!8152 = !DILocation(line: 206, column: 3, scope: !8144)
!8153 = !DILocation(line: 206, column: 13, scope: !8144)
!8154 = !DILocation(line: 206, column: 18, scope: !8144)
!8155 = !DILocation(line: 207, column: 20, scope: !8144)
!8156 = !DILocation(line: 207, column: 26, scope: !8144)
!8157 = !DILocation(line: 207, column: 3, scope: !8144)
!8158 = !DILocation(line: 207, column: 13, scope: !8144)
!8159 = !DILocation(line: 207, column: 18, scope: !8144)
!8160 = !DILocation(line: 208, column: 22, scope: !8144)
!8161 = !DILocation(line: 208, column: 3, scope: !8144)
!8162 = !DILocation(line: 208, column: 9, scope: !8144)
!8163 = !DILocation(line: 208, column: 15, scope: !8144)
!8164 = !DILocation(line: 208, column: 20, scope: !8144)
!8165 = !DILocation(line: 209, column: 16, scope: !8144)
!8166 = !DILocation(line: 209, column: 3, scope: !8144)
!8167 = !DILocation(line: 209, column: 9, scope: !8144)
!8168 = !DILocation(line: 209, column: 14, scope: !8144)
!8169 = !DILocation(line: 210, column: 1, scope: !8144)
!8170 = distinct !DISubprogram(name: "gimple_phi_result", scope: !625, file: !625, line: 3071, type: !5339, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8171 = !DILocalVariable(name: "gs", arg: 1, scope: !8170, file: !625, line: 3071, type: !5309)
!8172 = !DILocation(line: 3071, column: 33, scope: !8170)
!8173 = !DILocation(line: 3074, column: 10, scope: !8170)
!8174 = !DILocation(line: 3074, column: 14, scope: !8170)
!8175 = !DILocation(line: 3074, column: 25, scope: !8170)
!8176 = !DILocation(line: 3074, column: 3, scope: !8170)
!8177 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !3598, file: !3598, line: 729, type: !8178, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8178 = !DISubroutineType(types: !8179)
!8179 = !{null, !7934}
!8180 = !DILocalVariable(name: "ptr", arg: 1, scope: !8177, file: !3598, line: 729, type: !7934)
!8181 = !DILocation(line: 729, column: 39, scope: !8177)
!8182 = !DILocation(line: 731, column: 3, scope: !8177)
!8183 = !DILocation(line: 731, column: 8, scope: !8177)
!8184 = !DILocation(line: 731, column: 13, scope: !8177)
!8185 = !DILocation(line: 732, column: 3, scope: !8177)
!8186 = !DILocation(line: 732, column: 8, scope: !8177)
!8187 = !DILocation(line: 732, column: 13, scope: !8177)
!8188 = !DILocation(line: 733, column: 3, scope: !8177)
!8189 = !DILocation(line: 733, column: 8, scope: !8177)
!8190 = !DILocation(line: 733, column: 18, scope: !8177)
!8191 = !DILocation(line: 734, column: 3, scope: !8177)
!8192 = !DILocation(line: 734, column: 8, scope: !8177)
!8193 = !DILocation(line: 734, column: 14, scope: !8177)
!8194 = !DILocation(line: 735, column: 3, scope: !8177)
!8195 = !DILocation(line: 735, column: 8, scope: !8177)
!8196 = !DILocation(line: 735, column: 16, scope: !8177)
!8197 = !DILocation(line: 736, column: 3, scope: !8177)
!8198 = !DILocation(line: 736, column: 8, scope: !8177)
!8199 = !DILocation(line: 736, column: 17, scope: !8177)
!8200 = !DILocation(line: 737, column: 3, scope: !8177)
!8201 = !DILocation(line: 737, column: 8, scope: !8177)
!8202 = !DILocation(line: 737, column: 13, scope: !8177)
!8203 = !DILocation(line: 738, column: 1, scope: !8177)
!8204 = distinct !DISubprogram(name: "op_iter_init", scope: !3598, file: !3598, line: 742, type: !8205, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8205 = !DISubroutineType(types: !8206)
!8206 = !{null, !7934, !1636, !1575}
!8207 = !DILocalVariable(name: "ptr", arg: 1, scope: !8204, file: !3598, line: 742, type: !7934)
!8208 = !DILocation(line: 742, column: 28, scope: !8204)
!8209 = !DILocalVariable(name: "stmt", arg: 2, scope: !8204, file: !3598, line: 742, type: !1636)
!8210 = !DILocation(line: 742, column: 40, scope: !8204)
!8211 = !DILocalVariable(name: "flags", arg: 3, scope: !8204, file: !3598, line: 742, type: !1575)
!8212 = !DILocation(line: 742, column: 50, scope: !8204)
!8213 = !DILocation(line: 746, column: 3, scope: !8204)
!8214 = !DILocation(line: 748, column: 16, scope: !8204)
!8215 = !DILocation(line: 748, column: 22, scope: !8204)
!8216 = !DILocation(line: 748, column: 15, scope: !8204)
!8217 = !DILocation(line: 748, column: 68, scope: !8204)
!8218 = !DILocation(line: 748, column: 52, scope: !8204)
!8219 = !DILocation(line: 748, column: 3, scope: !8204)
!8220 = !DILocation(line: 748, column: 8, scope: !8204)
!8221 = !DILocation(line: 748, column: 13, scope: !8204)
!8222 = !DILocation(line: 749, column: 9, scope: !8223)
!8223 = distinct !DILexicalBlock(scope: !8204, file: !3598, line: 749, column: 7)
!8224 = !DILocation(line: 749, column: 15, scope: !8223)
!8225 = !DILocation(line: 750, column: 7, scope: !8223)
!8226 = !DILocation(line: 750, column: 10, scope: !8223)
!8227 = !DILocation(line: 750, column: 15, scope: !8223)
!8228 = !DILocation(line: 751, column: 7, scope: !8223)
!8229 = !DILocation(line: 751, column: 23, scope: !8223)
!8230 = !DILocation(line: 751, column: 10, scope: !8223)
!8231 = !DILocation(line: 751, column: 29, scope: !8223)
!8232 = !DILocation(line: 749, column: 7, scope: !8204)
!8233 = !DILocation(line: 752, column: 17, scope: !8223)
!8234 = !DILocation(line: 752, column: 22, scope: !8223)
!8235 = !DILocation(line: 752, column: 28, scope: !8223)
!8236 = !DILocation(line: 752, column: 5, scope: !8223)
!8237 = !DILocation(line: 752, column: 10, scope: !8223)
!8238 = !DILocation(line: 752, column: 15, scope: !8223)
!8239 = !DILocation(line: 753, column: 16, scope: !8204)
!8240 = !DILocation(line: 753, column: 22, scope: !8204)
!8241 = !DILocation(line: 753, column: 15, scope: !8204)
!8242 = !DILocation(line: 753, column: 68, scope: !8204)
!8243 = !DILocation(line: 753, column: 52, scope: !8204)
!8244 = !DILocation(line: 753, column: 3, scope: !8204)
!8245 = !DILocation(line: 753, column: 8, scope: !8204)
!8246 = !DILocation(line: 753, column: 13, scope: !8204)
!8247 = !DILocation(line: 754, column: 9, scope: !8248)
!8248 = distinct !DILexicalBlock(scope: !8204, file: !3598, line: 754, column: 7)
!8249 = !DILocation(line: 754, column: 15, scope: !8248)
!8250 = !DILocation(line: 755, column: 7, scope: !8248)
!8251 = !DILocation(line: 755, column: 10, scope: !8248)
!8252 = !DILocation(line: 755, column: 15, scope: !8248)
!8253 = !DILocation(line: 756, column: 7, scope: !8248)
!8254 = !DILocation(line: 756, column: 23, scope: !8248)
!8255 = !DILocation(line: 756, column: 10, scope: !8248)
!8256 = !DILocation(line: 756, column: 29, scope: !8248)
!8257 = !DILocation(line: 754, column: 7, scope: !8204)
!8258 = !DILocation(line: 757, column: 17, scope: !8248)
!8259 = !DILocation(line: 757, column: 22, scope: !8248)
!8260 = !DILocation(line: 757, column: 28, scope: !8248)
!8261 = !DILocation(line: 757, column: 5, scope: !8248)
!8262 = !DILocation(line: 757, column: 10, scope: !8248)
!8263 = !DILocation(line: 757, column: 15, scope: !8248)
!8264 = !DILocation(line: 758, column: 3, scope: !8204)
!8265 = !DILocation(line: 758, column: 8, scope: !8204)
!8266 = !DILocation(line: 758, column: 13, scope: !8204)
!8267 = !DILocation(line: 760, column: 3, scope: !8204)
!8268 = !DILocation(line: 760, column: 8, scope: !8204)
!8269 = !DILocation(line: 760, column: 14, scope: !8204)
!8270 = !DILocation(line: 761, column: 3, scope: !8204)
!8271 = !DILocation(line: 761, column: 8, scope: !8204)
!8272 = !DILocation(line: 761, column: 16, scope: !8204)
!8273 = !DILocation(line: 762, column: 3, scope: !8204)
!8274 = !DILocation(line: 762, column: 8, scope: !8204)
!8275 = !DILocation(line: 762, column: 17, scope: !8204)
!8276 = !DILocation(line: 763, column: 1, scope: !8204)
!8277 = distinct !DISubprogram(name: "gimple_def_ops", scope: !625, file: !625, line: 1292, type: !8278, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8278 = !DISubroutineType(types: !8279)
!8279 = !{!2168, !5309}
!8280 = !DILocalVariable(name: "g", arg: 1, scope: !8277, file: !625, line: 1292, type: !5309)
!8281 = !DILocation(line: 1292, column: 30, scope: !8277)
!8282 = !DILocation(line: 1294, column: 24, scope: !8283)
!8283 = distinct !DILexicalBlock(scope: !8277, file: !625, line: 1294, column: 7)
!8284 = !DILocation(line: 1294, column: 8, scope: !8283)
!8285 = !DILocation(line: 1294, column: 7, scope: !8277)
!8286 = !DILocation(line: 1295, column: 5, scope: !8283)
!8287 = !DILocation(line: 1296, column: 10, scope: !8277)
!8288 = !DILocation(line: 1296, column: 13, scope: !8277)
!8289 = !DILocation(line: 1296, column: 19, scope: !8277)
!8290 = !DILocation(line: 1296, column: 26, scope: !8277)
!8291 = !DILocation(line: 1296, column: 3, scope: !8277)
!8292 = !DILocation(line: 1297, column: 1, scope: !8277)
!8293 = distinct !DISubprogram(name: "gimple_vdef", scope: !625, file: !625, line: 1375, type: !5339, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8294 = !DILocalVariable(name: "g", arg: 1, scope: !8293, file: !625, line: 1375, type: !5309)
!8295 = !DILocation(line: 1375, column: 27, scope: !8293)
!8296 = !DILocation(line: 1377, column: 28, scope: !8297)
!8297 = distinct !DILexicalBlock(scope: !8293, file: !625, line: 1377, column: 7)
!8298 = !DILocation(line: 1377, column: 8, scope: !8297)
!8299 = !DILocation(line: 1377, column: 7, scope: !8293)
!8300 = !DILocation(line: 1378, column: 5, scope: !8297)
!8301 = !DILocation(line: 1379, column: 10, scope: !8293)
!8302 = !DILocation(line: 1379, column: 13, scope: !8293)
!8303 = !DILocation(line: 1379, column: 23, scope: !8293)
!8304 = !DILocation(line: 1379, column: 3, scope: !8293)
!8305 = !DILocation(line: 1380, column: 1, scope: !8293)
!8306 = distinct !DISubprogram(name: "gimple_use_ops", scope: !625, file: !625, line: 1313, type: !8307, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8307 = !DISubroutineType(types: !8308)
!8308 = !{!2175, !5309}
!8309 = !DILocalVariable(name: "g", arg: 1, scope: !8306, file: !625, line: 1313, type: !5309)
!8310 = !DILocation(line: 1313, column: 30, scope: !8306)
!8311 = !DILocation(line: 1315, column: 24, scope: !8312)
!8312 = distinct !DILexicalBlock(scope: !8306, file: !625, line: 1315, column: 7)
!8313 = !DILocation(line: 1315, column: 8, scope: !8312)
!8314 = !DILocation(line: 1315, column: 7, scope: !8306)
!8315 = !DILocation(line: 1316, column: 5, scope: !8312)
!8316 = !DILocation(line: 1317, column: 10, scope: !8306)
!8317 = !DILocation(line: 1317, column: 13, scope: !8306)
!8318 = !DILocation(line: 1317, column: 19, scope: !8306)
!8319 = !DILocation(line: 1317, column: 26, scope: !8306)
!8320 = !DILocation(line: 1317, column: 3, scope: !8306)
!8321 = !DILocation(line: 1318, column: 1, scope: !8306)
!8322 = distinct !DISubprogram(name: "gimple_vuse", scope: !625, file: !625, line: 1365, type: !5339, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8323 = !DILocalVariable(name: "g", arg: 1, scope: !8322, file: !625, line: 1365, type: !5309)
!8324 = !DILocation(line: 1365, column: 27, scope: !8322)
!8325 = !DILocation(line: 1367, column: 28, scope: !8326)
!8326 = distinct !DILexicalBlock(scope: !8322, file: !625, line: 1367, column: 7)
!8327 = !DILocation(line: 1367, column: 8, scope: !8326)
!8328 = !DILocation(line: 1367, column: 7, scope: !8322)
!8329 = !DILocation(line: 1368, column: 5, scope: !8326)
!8330 = !DILocation(line: 1369, column: 10, scope: !8322)
!8331 = !DILocation(line: 1369, column: 13, scope: !8322)
!8332 = !DILocation(line: 1369, column: 23, scope: !8322)
!8333 = !DILocation(line: 1369, column: 3, scope: !8322)
!8334 = !DILocation(line: 1370, column: 1, scope: !8322)
!8335 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !625, file: !625, line: 1283, type: !5347, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8336 = !DILocalVariable(name: "g", arg: 1, scope: !8335, file: !625, line: 1283, type: !5309)
!8337 = !DILocation(line: 1283, column: 34, scope: !8335)
!8338 = !DILocation(line: 1285, column: 23, scope: !8335)
!8339 = !DILocation(line: 1285, column: 10, scope: !8335)
!8340 = !DILocation(line: 1285, column: 26, scope: !8335)
!8341 = !DILocation(line: 1285, column: 43, scope: !8335)
!8342 = !DILocation(line: 1285, column: 59, scope: !8335)
!8343 = !DILocation(line: 1285, column: 46, scope: !8335)
!8344 = !DILocation(line: 1285, column: 62, scope: !8335)
!8345 = !DILocation(line: 0, scope: !8335)
!8346 = !DILocation(line: 1285, column: 3, scope: !8335)
!8347 = distinct !DISubprogram(name: "link_imm_use", scope: !3598, file: !3598, line: 214, type: !8348, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8348 = !DISubroutineType(types: !8349)
!8349 = !{null, !2994, !1762}
!8350 = !DILocalVariable(name: "linknode", arg: 1, scope: !8347, file: !3598, line: 214, type: !2994)
!8351 = !DILocation(line: 214, column: 34, scope: !8347)
!8352 = !DILocalVariable(name: "def", arg: 2, scope: !8347, file: !3598, line: 214, type: !1762)
!8353 = !DILocation(line: 214, column: 49, scope: !8347)
!8354 = !DILocalVariable(name: "root", scope: !8347, file: !3598, line: 216, type: !2994)
!8355 = !DILocation(line: 216, column: 22, scope: !8347)
!8356 = !DILocation(line: 218, column: 8, scope: !8357)
!8357 = distinct !DILexicalBlock(scope: !8347, file: !3598, line: 218, column: 7)
!8358 = !DILocation(line: 218, column: 12, scope: !8357)
!8359 = !DILocation(line: 218, column: 15, scope: !8357)
!8360 = !DILocation(line: 218, column: 31, scope: !8357)
!8361 = !DILocation(line: 218, column: 7, scope: !8347)
!8362 = !DILocation(line: 219, column: 5, scope: !8357)
!8363 = !DILocation(line: 219, column: 15, scope: !8357)
!8364 = !DILocation(line: 219, column: 20, scope: !8357)
!8365 = !DILocation(line: 222, column: 16, scope: !8366)
!8366 = distinct !DILexicalBlock(scope: !8357, file: !3598, line: 221, column: 5)
!8367 = !DILocation(line: 222, column: 12, scope: !8366)
!8368 = !DILocation(line: 227, column: 29, scope: !8366)
!8369 = !DILocation(line: 227, column: 39, scope: !8366)
!8370 = !DILocation(line: 227, column: 7, scope: !8366)
!8371 = !DILocation(line: 229, column: 1, scope: !8347)
!8372 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !318, file: !318, line: 182, type: !8373, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8373 = !DISubroutineType(types: !8374)
!8374 = !{!1762, !5571, !7}
!8375 = !DILocalVariable(name: "vec_", arg: 1, scope: !8372, file: !318, line: 182, type: !5571)
!8376 = !DILocation(line: 182, column: 1, scope: !8372)
!8377 = !DILocalVariable(name: "ix_", arg: 2, scope: !8372, file: !318, line: 182, type: !7)
!8378 = !DILocation(line: 0, scope: !8372)
!8379 = distinct !DISubprogram(name: "op_iter_init_tree", scope: !3598, file: !3598, line: 792, type: !8380, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8380 = !DISubroutineType(types: !8381)
!8381 = !{!1762, !7934, !1636, !1575}
!8382 = !DILocalVariable(name: "ptr", arg: 1, scope: !8379, file: !3598, line: 792, type: !7934)
!8383 = !DILocation(line: 792, column: 33, scope: !8379)
!8384 = !DILocalVariable(name: "stmt", arg: 2, scope: !8379, file: !3598, line: 792, type: !1636)
!8385 = !DILocation(line: 792, column: 45, scope: !8379)
!8386 = !DILocalVariable(name: "flags", arg: 3, scope: !8379, file: !3598, line: 792, type: !1575)
!8387 = !DILocation(line: 792, column: 55, scope: !8379)
!8388 = !DILocation(line: 794, column: 17, scope: !8379)
!8389 = !DILocation(line: 794, column: 22, scope: !8379)
!8390 = !DILocation(line: 794, column: 28, scope: !8379)
!8391 = !DILocation(line: 794, column: 3, scope: !8379)
!8392 = !DILocation(line: 795, column: 3, scope: !8379)
!8393 = !DILocation(line: 795, column: 8, scope: !8379)
!8394 = !DILocation(line: 795, column: 18, scope: !8379)
!8395 = !DILocation(line: 796, column: 29, scope: !8379)
!8396 = !DILocation(line: 796, column: 10, scope: !8379)
!8397 = !DILocation(line: 796, column: 3, scope: !8379)
!8398 = distinct !DISubprogram(name: "op_iter_next_tree", scope: !3598, file: !3598, line: 699, type: !8399, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8399 = !DISubroutineType(types: !8400)
!8400 = !{!1762, !7934}
!8401 = !DILocalVariable(name: "ptr", arg: 1, scope: !8398, file: !3598, line: 699, type: !7934)
!8402 = !DILocation(line: 699, column: 33, scope: !8398)
!8403 = !DILocalVariable(name: "val", scope: !8398, file: !3598, line: 701, type: !1762)
!8404 = !DILocation(line: 701, column: 8, scope: !8398)
!8405 = !DILocation(line: 705, column: 7, scope: !8406)
!8406 = distinct !DILexicalBlock(scope: !8398, file: !3598, line: 705, column: 7)
!8407 = !DILocation(line: 705, column: 12, scope: !8406)
!8408 = !DILocation(line: 705, column: 7, scope: !8398)
!8409 = !DILocation(line: 707, column: 13, scope: !8410)
!8410 = distinct !DILexicalBlock(scope: !8406, file: !3598, line: 706, column: 5)
!8411 = !DILocation(line: 707, column: 11, scope: !8410)
!8412 = !DILocation(line: 708, column: 19, scope: !8410)
!8413 = !DILocation(line: 708, column: 24, scope: !8410)
!8414 = !DILocation(line: 708, column: 30, scope: !8410)
!8415 = !DILocation(line: 708, column: 7, scope: !8410)
!8416 = !DILocation(line: 708, column: 12, scope: !8410)
!8417 = !DILocation(line: 708, column: 17, scope: !8410)
!8418 = !DILocation(line: 709, column: 14, scope: !8410)
!8419 = !DILocation(line: 709, column: 7, scope: !8410)
!8420 = !DILocation(line: 711, column: 7, scope: !8421)
!8421 = distinct !DILexicalBlock(scope: !8398, file: !3598, line: 711, column: 7)
!8422 = !DILocation(line: 711, column: 12, scope: !8421)
!8423 = !DILocation(line: 711, column: 7, scope: !8398)
!8424 = !DILocation(line: 713, column: 13, scope: !8425)
!8425 = distinct !DILexicalBlock(scope: !8421, file: !3598, line: 712, column: 5)
!8426 = !DILocation(line: 713, column: 11, scope: !8425)
!8427 = !DILocation(line: 714, column: 19, scope: !8425)
!8428 = !DILocation(line: 714, column: 24, scope: !8425)
!8429 = !DILocation(line: 714, column: 30, scope: !8425)
!8430 = !DILocation(line: 714, column: 7, scope: !8425)
!8431 = !DILocation(line: 714, column: 12, scope: !8425)
!8432 = !DILocation(line: 714, column: 17, scope: !8425)
!8433 = !DILocation(line: 715, column: 14, scope: !8425)
!8434 = !DILocation(line: 715, column: 7, scope: !8425)
!8435 = !DILocation(line: 718, column: 3, scope: !8398)
!8436 = !DILocation(line: 718, column: 8, scope: !8398)
!8437 = !DILocation(line: 718, column: 13, scope: !8398)
!8438 = !DILocation(line: 719, column: 3, scope: !8398)
!8439 = !DILocation(line: 721, column: 1, scope: !8398)
!8440 = distinct !DISubprogram(name: "make_ssa_name", scope: !3598, file: !3598, line: 1245, type: !7137, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8441 = !DILocalVariable(name: "var", arg: 1, scope: !8440, file: !3598, line: 1245, type: !1762)
!8442 = !DILocation(line: 1245, column: 21, scope: !8440)
!8443 = !DILocalVariable(name: "stmt", arg: 2, scope: !8440, file: !3598, line: 1245, type: !1636)
!8444 = !DILocation(line: 1245, column: 33, scope: !8440)
!8445 = !DILocation(line: 1247, column: 28, scope: !8440)
!8446 = !DILocation(line: 1247, column: 34, scope: !8440)
!8447 = !DILocation(line: 1247, column: 39, scope: !8440)
!8448 = !DILocation(line: 1247, column: 10, scope: !8440)
!8449 = !DILocation(line: 1247, column: 3, scope: !8440)
!8450 = distinct !DISubprogram(name: "gimple_assign_set_lhs", scope: !625, file: !625, line: 1714, type: !8451, scopeLine: 1715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8451 = !DISubroutineType(types: !8452)
!8452 = !{null, !1636, !1762}
!8453 = !DILocalVariable(name: "gs", arg: 1, scope: !8450, file: !625, line: 1714, type: !1636)
!8454 = !DILocation(line: 1714, column: 31, scope: !8450)
!8455 = !DILocalVariable(name: "lhs", arg: 2, scope: !8450, file: !625, line: 1714, type: !1762)
!8456 = !DILocation(line: 1714, column: 40, scope: !8450)
!8457 = !DILocation(line: 1717, column: 18, scope: !8450)
!8458 = !DILocation(line: 1717, column: 25, scope: !8450)
!8459 = !DILocation(line: 1717, column: 3, scope: !8450)
!8460 = !DILocation(line: 1719, column: 7, scope: !8461)
!8461 = distinct !DILexicalBlock(scope: !8450, file: !625, line: 1719, column: 7)
!8462 = !DILocation(line: 1719, column: 11, scope: !8461)
!8463 = !DILocation(line: 1719, column: 14, scope: !8461)
!8464 = !DILocation(line: 1719, column: 30, scope: !8461)
!8465 = !DILocation(line: 1719, column: 7, scope: !8450)
!8466 = !DILocation(line: 1720, column: 31, scope: !8461)
!8467 = !DILocation(line: 1720, column: 5, scope: !8461)
!8468 = !DILocation(line: 1720, column: 29, scope: !8461)
!8469 = !DILocation(line: 1721, column: 1, scope: !8450)
!8470 = distinct !DISubprogram(name: "gimple_assign_set_rhs_code", scope: !625, file: !625, line: 1832, type: !8471, scopeLine: 1833, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8471 = !DISubroutineType(types: !8472)
!8472 = !{null, !1636, !317}
!8473 = !DILocalVariable(name: "s", arg: 1, scope: !8470, file: !625, line: 1832, type: !1636)
!8474 = !DILocation(line: 1832, column: 36, scope: !8470)
!8475 = !DILocalVariable(name: "code", arg: 2, scope: !8470, file: !625, line: 1832, type: !317)
!8476 = !DILocation(line: 1832, column: 54, scope: !8470)
!8477 = !DILocation(line: 1835, column: 23, scope: !8470)
!8478 = !DILocation(line: 1835, column: 3, scope: !8470)
!8479 = !DILocation(line: 1835, column: 6, scope: !8470)
!8480 = !DILocation(line: 1835, column: 13, scope: !8470)
!8481 = !DILocation(line: 1835, column: 21, scope: !8470)
!8482 = !DILocation(line: 1836, column: 1, scope: !8470)
!8483 = distinct !DISubprogram(name: "gimple_assign_set_rhs1", scope: !625, file: !625, line: 1747, type: !8451, scopeLine: 1748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8484 = !DILocalVariable(name: "gs", arg: 1, scope: !8483, file: !625, line: 1747, type: !1636)
!8485 = !DILocation(line: 1747, column: 32, scope: !8483)
!8486 = !DILocalVariable(name: "rhs", arg: 2, scope: !8483, file: !625, line: 1747, type: !1762)
!8487 = !DILocation(line: 1747, column: 41, scope: !8483)
!8488 = !DILocation(line: 1751, column: 18, scope: !8483)
!8489 = !DILocation(line: 1751, column: 25, scope: !8483)
!8490 = !DILocation(line: 1751, column: 3, scope: !8483)
!8491 = !DILocation(line: 1752, column: 1, scope: !8483)
!8492 = distinct !DISubprogram(name: "compute_offset", scope: !3, file: !3, line: 1759, type: !8493, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8493 = !DISubroutineType(types: !8494)
!8494 = !{!1762, !1732, !1732, !1762}
!8495 = !DILocalVariable(name: "orig", arg: 1, scope: !8492, file: !3, line: 1759, type: !1732)
!8496 = !DILocation(line: 1759, column: 31, scope: !8492)
!8497 = !DILocalVariable(name: "new_val", arg: 2, scope: !8492, file: !3, line: 1759, type: !1732)
!8498 = !DILocation(line: 1759, column: 51, scope: !8492)
!8499 = !DILocalVariable(name: "result", arg: 3, scope: !8492, file: !3, line: 1759, type: !1762)
!8500 = !DILocation(line: 1759, column: 65, scope: !8492)
!8501 = !DILocalVariable(name: "x", scope: !8492, file: !3, line: 1762, type: !1575)
!8502 = !DILocation(line: 1762, column: 7, scope: !8492)
!8503 = !DILocalVariable(name: "y", scope: !8492, file: !3, line: 1762, type: !1575)
!8504 = !DILocation(line: 1762, column: 10, scope: !8492)
!8505 = !DILocalVariable(name: "result1", scope: !8492, file: !3, line: 1763, type: !1762)
!8506 = !DILocation(line: 1763, column: 8, scope: !8492)
!8507 = !DILocalVariable(name: "ratio", scope: !8492, file: !3, line: 1763, type: !1762)
!8508 = !DILocation(line: 1763, column: 17, scope: !8492)
!8509 = !DILocalVariable(name: "log", scope: !8492, file: !3, line: 1763, type: !1762)
!8510 = !DILocation(line: 1763, column: 24, scope: !8492)
!8511 = !DILocalVariable(name: "orig_tree", scope: !8492, file: !3, line: 1763, type: !1762)
!8512 = !DILocation(line: 1763, column: 29, scope: !8492)
!8513 = !DILocalVariable(name: "new_tree", scope: !8492, file: !3, line: 1763, type: !1762)
!8514 = !DILocation(line: 1763, column: 40, scope: !8492)
!8515 = !DILocation(line: 1765, column: 19, scope: !8492)
!8516 = !DILocation(line: 1765, column: 7, scope: !8492)
!8517 = !DILocation(line: 1765, column: 5, scope: !8492)
!8518 = !DILocation(line: 1766, column: 19, scope: !8492)
!8519 = !DILocation(line: 1766, column: 7, scope: !8492)
!8520 = !DILocation(line: 1766, column: 5, scope: !8492)
!8521 = !DILocation(line: 1768, column: 7, scope: !8522)
!8522 = distinct !DILexicalBlock(scope: !8492, file: !3, line: 1768, column: 7)
!8523 = !DILocation(line: 1768, column: 9, scope: !8522)
!8524 = !DILocation(line: 1768, column: 15, scope: !8522)
!8525 = !DILocation(line: 1768, column: 18, scope: !8522)
!8526 = !DILocation(line: 1768, column: 20, scope: !8522)
!8527 = !DILocation(line: 1768, column: 7, scope: !8492)
!8528 = !DILocation(line: 1770, column: 11, scope: !8529)
!8529 = distinct !DILexicalBlock(scope: !8530, file: !3, line: 1770, column: 11)
!8530 = distinct !DILexicalBlock(scope: !8522, file: !3, line: 1769, column: 5)
!8531 = !DILocation(line: 1770, column: 16, scope: !8529)
!8532 = !DILocation(line: 1770, column: 13, scope: !8529)
!8533 = !DILocation(line: 1770, column: 11, scope: !8530)
!8534 = !DILocation(line: 1771, column: 16, scope: !8529)
!8535 = !DILocation(line: 1771, column: 9, scope: !8529)
!8536 = !DILocation(line: 1772, column: 16, scope: !8537)
!8537 = distinct !DILexicalBlock(scope: !8529, file: !3, line: 1772, column: 16)
!8538 = !DILocation(line: 1772, column: 20, scope: !8537)
!8539 = !DILocation(line: 1772, column: 18, scope: !8537)
!8540 = !DILocation(line: 1772, column: 16, scope: !8529)
!8541 = !DILocation(line: 1774, column: 32, scope: !8542)
!8542 = distinct !DILexicalBlock(scope: !8537, file: !3, line: 1773, column: 9)
!8543 = !DILocation(line: 1774, column: 52, scope: !8542)
!8544 = !DILocation(line: 1774, column: 56, scope: !8542)
!8545 = !DILocation(line: 1774, column: 54, scope: !8542)
!8546 = !DILocation(line: 1774, column: 17, scope: !8542)
!8547 = !DILocation(line: 1774, column: 15, scope: !8542)
!8548 = !DILocation(line: 1776, column: 13, scope: !8542)
!8549 = !DILocation(line: 1775, column: 19, scope: !8542)
!8550 = !DILocation(line: 1777, column: 18, scope: !8542)
!8551 = !DILocation(line: 1777, column: 11, scope: !8542)
!8552 = !DILocation(line: 1779, column: 28, scope: !8530)
!8553 = !DILocation(line: 1779, column: 48, scope: !8530)
!8554 = !DILocation(line: 1779, column: 52, scope: !8530)
!8555 = !DILocation(line: 1779, column: 50, scope: !8530)
!8556 = !DILocation(line: 1779, column: 13, scope: !8530)
!8557 = !DILocation(line: 1779, column: 11, scope: !8530)
!8558 = !DILocation(line: 1780, column: 17, scope: !8530)
!8559 = !DILocation(line: 1780, column: 15, scope: !8530)
!8560 = !DILocation(line: 1782, column: 14, scope: !8530)
!8561 = !DILocation(line: 1782, column: 7, scope: !8530)
!8562 = !DILocation(line: 1784, column: 30, scope: !8492)
!8563 = !DILocation(line: 1784, column: 50, scope: !8492)
!8564 = !DILocation(line: 1784, column: 15, scope: !8492)
!8565 = !DILocation(line: 1784, column: 13, scope: !8492)
!8566 = !DILocation(line: 1785, column: 29, scope: !8492)
!8567 = !DILocation(line: 1785, column: 49, scope: !8492)
!8568 = !DILocation(line: 1785, column: 14, scope: !8492)
!8569 = !DILocation(line: 1785, column: 12, scope: !8492)
!8570 = !DILocation(line: 1786, column: 11, scope: !8492)
!8571 = !DILocation(line: 1786, column: 9, scope: !8492)
!8572 = !DILocation(line: 1787, column: 13, scope: !8492)
!8573 = !DILocation(line: 1787, column: 11, scope: !8492)
!8574 = !DILocation(line: 1789, column: 10, scope: !8492)
!8575 = !DILocation(line: 1789, column: 3, scope: !8492)
!8576 = !DILocation(line: 1790, column: 1, scope: !8492)
!8577 = distinct !DISubprogram(name: "gimple_assign_set_rhs2", scope: !625, file: !625, line: 1784, type: !8451, scopeLine: 1785, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8578 = !DILocalVariable(name: "gs", arg: 1, scope: !8577, file: !625, line: 1784, type: !1636)
!8579 = !DILocation(line: 1784, column: 32, scope: !8577)
!8580 = !DILocalVariable(name: "rhs", arg: 2, scope: !8577, file: !625, line: 1784, type: !1762)
!8581 = !DILocation(line: 1784, column: 41, scope: !8577)
!8582 = !DILocation(line: 1788, column: 18, scope: !8577)
!8583 = !DILocation(line: 1788, column: 25, scope: !8577)
!8584 = !DILocation(line: 1788, column: 3, scope: !8577)
!8585 = !DILocation(line: 1789, column: 1, scope: !8577)
!8586 = distinct !DISubprogram(name: "update_stmt", scope: !625, file: !625, line: 1456, type: !8587, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8587 = !DISubroutineType(types: !8588)
!8588 = !{null, !1636}
!8589 = !DILocalVariable(name: "s", arg: 1, scope: !8586, file: !625, line: 1456, type: !1636)
!8590 = !DILocation(line: 1456, column: 21, scope: !8586)
!8591 = !DILocation(line: 1458, column: 23, scope: !8592)
!8592 = distinct !DILexicalBlock(scope: !8586, file: !625, line: 1458, column: 7)
!8593 = !DILocation(line: 1458, column: 7, scope: !8592)
!8594 = !DILocation(line: 1458, column: 7, scope: !8586)
!8595 = !DILocation(line: 1460, column: 28, scope: !8596)
!8596 = distinct !DILexicalBlock(scope: !8592, file: !625, line: 1459, column: 5)
!8597 = !DILocation(line: 1460, column: 7, scope: !8596)
!8598 = !DILocation(line: 1461, column: 29, scope: !8596)
!8599 = !DILocation(line: 1461, column: 7, scope: !8596)
!8600 = !DILocation(line: 1462, column: 5, scope: !8596)
!8601 = !DILocation(line: 1463, column: 1, scope: !8586)
!8602 = distinct !DISubprogram(name: "gimple_set_op", scope: !625, file: !625, line: 1663, type: !8603, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3042)
!8603 = !DISubroutineType(types: !8604)
!8604 = !{null, !1636, !7, !1762}
!8605 = !DILocalVariable(name: "gs", arg: 1, scope: !8602, file: !625, line: 1663, type: !1636)
!8606 = !DILocation(line: 1663, column: 23, scope: !8602)
!8607 = !DILocalVariable(name: "i", arg: 2, scope: !8602, file: !625, line: 1663, type: !7)
!8608 = !DILocation(line: 1663, column: 36, scope: !8602)
!8609 = !DILocalVariable(name: "op", arg: 3, scope: !8602, file: !625, line: 1663, type: !1762)
!8610 = !DILocation(line: 1663, column: 44, scope: !8602)
!8611 = !DILocation(line: 1665, column: 3, scope: !8602)
!8612 = !DILocation(line: 1671, column: 24, scope: !8602)
!8613 = !DILocation(line: 1671, column: 15, scope: !8602)
!8614 = !DILocation(line: 1671, column: 3, scope: !8602)
!8615 = !DILocation(line: 1671, column: 19, scope: !8602)
!8616 = !DILocation(line: 1671, column: 22, scope: !8602)
!8617 = !DILocation(line: 1672, column: 1, scope: !8602)
