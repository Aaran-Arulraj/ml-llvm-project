; ModuleID = 'tree-cfg.c'
source_filename = "tree-cfg.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.diagnostic_context = type { %struct.pretty_print_info*, [12 x i32], i8, i8, [870 x i32], i8, i8, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (i8*, [1 x %struct.__va_list_tag]*)*, %union.tree_node*, %struct.line_map*, i32, i8 }
%struct.pretty_print_info = type { %struct.output_buffer*, i8*, i32, i32, i32, %struct.pp_wrapping_mode_t, i8 (%struct.pretty_print_info*, %struct.text_info*, i8*, i32, i8, i8, i8)*, i8, i8, i8 }
%struct.output_buffer = type { %struct.obstack, %struct.obstack, %struct.obstack*, %struct.chunk_info*, %struct._IO_FILE*, i32, [128 x i8] }
%struct.chunk_info = type { %struct.chunk_info*, [60 x i8*] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.pp_wrapping_mode_t = type { i32, i32 }
%struct.text_info = type { i8*, [1 x %struct.__va_list_tag]*, i32, i32*, %union.tree_node** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.diagnostic_info = type { %struct.text_info, i32, i32, %union.tree_node*, i32, i32 }
%struct.line_map = type { i8*, i32, i32, i32, i8, i8, i8 }
%struct.label_record = type { %union.tree_node*, i8 }
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.cfg_stats_d = type { i64 }
%struct.cfg_hooks = type { i8*, i32 ()*, void (%struct.basic_block_def*, %struct._IO_FILE*, i32, i32)*, %struct.basic_block_def* (i8*, i8*, %struct.basic_block_def*)*, %struct.edge_def* (%struct.edge_def*, %struct.basic_block_def*)*, %struct.basic_block_def* (%struct.edge_def*, %struct.basic_block_def*)*, i8 (%struct.edge_def*)*, void (%struct.basic_block_def*)*, %struct.basic_block_def* (%struct.basic_block_def*, i8*)*, i8 (%struct.basic_block_def*, %struct.basic_block_def*)*, i8 (%struct.basic_block_def*, %struct.basic_block_def*)*, void (%struct.basic_block_def*, %struct.basic_block_def*)*, void (%struct.edge_def*, i32, i32)*, i8 (%struct.basic_block_def*, i32)*, i8 (%struct.basic_block_def*)*, %struct.basic_block_def* (%struct.basic_block_def*)*, %struct.basic_block_def* (%struct.edge_def*)*, void (%struct.edge_def*)*, void (%struct.edge_def*)*, i8 (%struct.basic_block_def*)*, i8 (%struct.basic_block_def*)*, i32 (%struct.simple_bitmap_def*)*, void (%struct.edge_def*)*, void (%struct.edge_def*)*, i8 (%struct.loop*, %struct.edge_def*, i32, %struct.simple_bitmap_def*, %struct.edge_def*, %struct.VEC_edge_heap**, i32)*, void (%struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, i8*)*, void (%struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.edge_def*)*, void (%struct.basic_block_def*, %struct.edge_def**, %struct.edge_def**)*, void (%struct.edge_def*)* }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.VEC_edge_heap = type { %struct.VEC_edge_base }
%struct.omp_region = type { %struct.omp_region*, %struct.omp_region*, %struct.omp_region*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, %union.tree_node*, i32, i32, i8 }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.tree_label_decl = type { %struct.tree_decl_with_rtl, i32, i32 }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_asm = type { %struct.gimple_statement_with_memory_ops_base, i8*, i8, i8, i8, i8, [1 x %union.tree_node*] }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.eh_catch_d = type { %struct.eh_catch_d*, %struct.eh_catch_d*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.eh_region_u_try = type { %struct.eh_catch_d*, %struct.eh_catch_d* }
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }
%struct.loop_iterator = type { %struct.VEC_int_heap*, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.pointer_set_t = type opaque
%struct.walk_stmt_info = type { %struct.gimple_stmt_iterator, i8*, %struct.pointer_set_t*, i8, i8, i8, i8, %union.tree_node* }
%struct.throw_stmt_node = type { %union.gimple_statement_d*, i32 }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.VEC_basic_block_heap = type { %struct.VEC_basic_block_base }
%struct.move_stmt_d = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.pointer_map_t*, %struct.htab*, %struct.pointer_map_t*, i8 }
%struct.tree_block = type { %struct.tree_common, i32, i32, %union.tree_node*, %struct.VEC_tree_gc*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_map = type { %struct.tree_map_base, i32, %union.tree_node* }
%struct.tree_map_base = type { %union.tree_node* }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.locus_discrim_map = type { i32, i32 }
%struct.expanded_location = type { i8*, i32, i32, i8 }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.gimple_statement_bind = type { %struct.gimple_statement_base, %union.tree_node*, %union.tree_node*, %struct.gimple_seq_d* }
%struct.gimple_statement_try = type { %struct.gimple_statement_base, %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.gimple_statement_eh_filter = type { %struct.gimple_statement_base, %union.tree_node*, %struct.gimple_seq_d* }
%struct.gimple_statement_catch = type { %struct.gimple_statement_base, %union.tree_node*, %struct.gimple_seq_d* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.gimple_statement_eh_ctrl = type { %struct.gimple_statement_base, i32 }
%struct.gimple_statement_omp = type { %struct.gimple_statement_base, %struct.gimple_seq_d* }
%struct.VEC_edge_var_map_heap = type { %struct.VEC_edge_var_map_base }
%struct.VEC_edge_var_map_base = type { i32, i32, [1 x %struct._edge_var_map] }
%struct._edge_var_map = type { %union.tree_node*, %union.tree_node*, i32 }

@cfun = external dso_local global %struct.function*, align 8
@.str = private unnamed_addr constant [4 x i8] c"cfg\00", align 1
@pass_build_cfg = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8 ()* null, i32 ()* @execute_build_cfg, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 50, i32 4, i32 8, i32 0, i32 0, i32 49 } }, align 8, !dbg !0
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@edge_to_cases = internal global %struct.pointer_map_t* null, align 8, !dbg !4339
@.str.1 = private unnamed_addr constant [11 x i8] c"tree-cfg.c\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@global_dc = external dso_local global %struct.diagnostic_context*, align 8
@label_for_bb = internal global %struct.label_record* null, align 8, !dbg !4346
@cfgcleanup_altered_bbs = external dso_local global %struct.bitmap_head_def*, align 8
@stderr = external dso_local global %struct._IO_FILE*, align 8
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@current_function_decl = external dso_local global %union.tree_node*, align 8
@.str.3 = private unnamed_addr constant [17 x i8] c";; Function %s\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [54 x i8] c";; \0A%d basic blocks, %d edges, last basic block %d.\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@dump_cfg_stats.max_num_merged_labels = internal global i64 0, align 8, !dbg !4126
@.str.6 = private unnamed_addr constant [16 x i8] c"%-30s%-13s%12s\0A\00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"%-30s%13d%11lu%c\0A\00", align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"%-30s%13ld%11lu%c\0A\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"%-43s%11lu%c\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"\0ACFG Statistics for %s\0A\0A\00", align 1
@.str.11 = private unnamed_addr constant [59 x i8] c"---------------------------------------------------------\0A\00", align 1
@.str.12 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.13 = private unnamed_addr constant [14 x i8] c"  Number of  \00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"Memory\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"  instances  \00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"used \00", align 1
@.str.17 = private unnamed_addr constant [13 x i8] c"Basic blocks\00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c"Edges\00", align 1
@.str.19 = private unnamed_addr constant [30 x i8] c"Total memory used by CFG data\00", align 1
@cfg_stats = internal global %struct.cfg_stats_d zeroinitializer, align 8, !dbg !4341
@.str.20 = private unnamed_addr constant [47 x i8] c"Coalesced label blocks: %ld (Max so far: %ld)\0A\00", align 1
@.str.21 = private unnamed_addr constant [21 x i8] c"verify_gimple failed\00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@timevar_enable = external dso_local global i8, align 1
@.str.22 = private unnamed_addr constant [46 x i8] c"gimple_bb (phi) is set to a wrong basic block\00", align 1
@.str.23 = private unnamed_addr constant [16 x i8] c"missing PHI def\00", align 1
@.str.24 = private unnamed_addr constant [35 x i8] c"PHI argument is not a GIMPLE value\00", align 1
@.str.25 = private unnamed_addr constant [32 x i8] c"incorrect sharing of tree nodes\00", align 1
@.str.26 = private unnamed_addr constant [25 x i8] c"invalid GIMPLE statement\00", align 1
@.str.27 = private unnamed_addr constant [47 x i8] c"gimple_bb (stmt) is set to a wrong basic block\00", align 1
@.str.28 = private unnamed_addr constant [38 x i8] c"incorrect entry in label_to_block_map\00", align 1
@.str.29 = private unnamed_addr constant [40 x i8] c"incorrect setting of landing pad number\00", align 1
@eh_error_found = internal global i8 0, align 1, !dbg !4348
@.str.30 = private unnamed_addr constant [20 x i8] c"verify_stmts failed\00", align 1
@.str.31 = private unnamed_addr constant [5 x i8] c"%s (\00", align 1
@dump_flags = external dso_local global i32, align 4
@.str.32 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c")\0A\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"{\0A\00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"}\0A\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.38 = private unnamed_addr constant [21 x i8] c"%s  bb_%d (preds = {\00", align 1
@.str.39 = private unnamed_addr constant [13 x i8] c"}, succs = {\00", align 1
@.str.40 = private unnamed_addr constant [4 x i8] c"})\0A\00", align 1
@.str.41 = private unnamed_addr constant [7 x i8] c"%s  {\0A\00", align 1
@.str.42 = private unnamed_addr constant [7 x i8] c"%s  }\0A\00", align 1
@.str.43 = private unnamed_addr constant [7 x i8] c"gimple\00", align 1
@gimple_cfg_hooks = dso_local global %struct.cfg_hooks { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.43, i32 0, i32 0), i32 ()* @gimple_verify_flow_info, void (%struct.basic_block_def*, %struct._IO_FILE*, i32, i32)* @gimple_dump_bb, %struct.basic_block_def* (i8*, i8*, %struct.basic_block_def*)* @create_bb, %struct.edge_def* (%struct.edge_def*, %struct.basic_block_def*)* @gimple_redirect_edge_and_branch, %struct.basic_block_def* (%struct.edge_def*, %struct.basic_block_def*)* @gimple_redirect_edge_and_branch_force, i8 (%struct.edge_def*)* @gimple_can_remove_branch_p, void (%struct.basic_block_def*)* @remove_bb, %struct.basic_block_def* (%struct.basic_block_def*, i8*)* @gimple_split_block, i8 (%struct.basic_block_def*, %struct.basic_block_def*)* @gimple_move_block_after, i8 (%struct.basic_block_def*, %struct.basic_block_def*)* @gimple_can_merge_blocks_p, void (%struct.basic_block_def*, %struct.basic_block_def*)* @gimple_merge_blocks, void (%struct.edge_def*, i32, i32)* @gimple_predict_edge, i8 (%struct.basic_block_def*, i32)* @gimple_predicted_by_p, i8 (%struct.basic_block_def*)* @gimple_can_duplicate_bb_p, %struct.basic_block_def* (%struct.basic_block_def*)* @gimple_duplicate_bb, %struct.basic_block_def* (%struct.edge_def*)* @gimple_split_edge, void (%struct.edge_def*)* @gimple_make_forwarder_block, void (%struct.edge_def*)* null, i8 (%struct.basic_block_def*)* @gimple_block_ends_with_call_p, i8 (%struct.basic_block_def*)* @gimple_block_ends_with_condjump_p, i32 (%struct.simple_bitmap_def*)* @gimple_flow_call_edges_add, void (%struct.edge_def*)* @gimple_execute_on_growing_pred, void (%struct.edge_def*)* @gimple_execute_on_shrinking_pred, i8 (%struct.loop*, %struct.edge_def*, i32, %struct.simple_bitmap_def*, %struct.edge_def*, %struct.VEC_edge_heap**, i32)* @gimple_duplicate_loop_to_header_edge, void (%struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, i8*)* @gimple_lv_add_condition_to_bb, void (%struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.edge_def*)* @gimple_lv_adjust_loop_header_phi, void (%struct.basic_block_def*, %struct.edge_def**, %struct.edge_def**)* @extract_true_false_edges_from_block, void (%struct.edge_def*)* @flush_pending_stmts }, align 8, !dbg !4183
@.str.44 = private unnamed_addr constant [7 x i8] c"crited\00", align 1
@pass_split_crit_edges = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44, i32 0, i32 0), i8 ()* null, i32 ()* @split_critical_edges, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 67, i32 8, i32 64, i32 0, i32 0, i32 9 } }, align 8, !dbg !4305
@.str.45 = private unnamed_addr constant [22 x i8] c"*warn_function_return\00", align 1
@pass_warn_function_return = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.45, i32 0, i32 0), i8 ()* null, i32 ()* @execute_warn_function_return, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 8, i32 0, i32 0, i32 0, i32 0 } }, align 8, !dbg !4333
@.str.46 = private unnamed_addr constant [24 x i8] c"*warn_function_noreturn\00", align 1
@pass_warn_function_noreturn = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.46, i32 0, i32 0), i8 ()* null, i32 ()* @execute_warn_function_noreturn, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 8, i32 0, i32 0, i32 0, i32 0 } }, align 8, !dbg !4335
@.str.47 = private unnamed_addr constant [20 x i8] c"*warn_unused_result\00", align 1
@pass_warn_unused_result = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.47, i32 0, i32 0), i8 ()* @gate_warn_unused_result, i32 ()* @run_warn_unused_result, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0 } }, align 8, !dbg !4337
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.48 = private unnamed_addr constant [15 x i8] c"Scope blocks:\0A\00", align 1
@found_computed_goto = internal global i8 0, align 1, !dbg !4350
@discriminator_per_locus = internal global %struct.htab* null, align 8, !dbg !4352
@.str.49 = private unnamed_addr constant [8 x i8] c"gotovar\00", align 1
@root_omp_region = external dso_local global %struct.omp_region*, align 8
@.str.50 = private unnamed_addr constant [22 x i8] c"graph: { title: \22%s\22\0A\00", align 1
@.str.51 = private unnamed_addr constant [41 x i8] c"node: { title: \22ENTRY\22 label: \22ENTRY\22 }\0A\00", align 1
@.str.52 = private unnamed_addr constant [39 x i8] c"node: { title: \22EXIT\22 label: \22EXIT\22 }\0A\00", align 1
@.str.53 = private unnamed_addr constant [45 x i8] c"edge: { sourcename: \22ENTRY\22 targetname: \22%d\22\00", align 1
@.str.54 = private unnamed_addr constant [32 x i8] c" linestyle: dotted priority: 10\00", align 1
@.str.55 = private unnamed_addr constant [32 x i8] c" linestyle: solid priority: 100\00", align 1
@.str.56 = private unnamed_addr constant [4 x i8] c" }\0A\00", align 1
@gimple_code_name = external dso_local constant [0 x i8*], align 8
@.str.57 = private unnamed_addr constant [13 x i8] c"no-statement\00", align 1
@.str.58 = private unnamed_addr constant [53 x i8] c"node: { title: \22%d\22 label: \22#%d\\n%s (%d)\\n%s (%d)\22}\0A\00", align 1
@.str.59 = private unnamed_addr constant [44 x i8] c"edge: { sourcename: \22%d\22 targetname: \22EXIT\22\00", align 1
@.str.60 = private unnamed_addr constant [42 x i8] c"edge: { sourcename: \22%d\22 targetname: \22%d\22\00", align 1
@.str.61 = private unnamed_addr constant [32 x i8] c" priority: 10 linestyle: dotted\00", align 1
@.str.62 = private unnamed_addr constant [32 x i8] c" priority: 100 linestyle: solid\00", align 1
@.str.63 = private unnamed_addr constant [4 x i8] c"}\0A\0A\00", align 1
@.str.64 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@.str.65 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@flag_var_tracking_assignments = external dso_local global i32, align 4
@.str.66 = private unnamed_addr constant [39 x i8] c"invalid comparison code in gimple cond\00", align 1
@.str.67 = private unnamed_addr constant [30 x i8] c"invalid labels in gimple cond\00", align 1
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@.str.68 = private unnamed_addr constant [37 x i8] c"non-trivial conversion at assignment\00", align 1
@.str.69 = private unnamed_addr constant [36 x i8] c"invalid operand in unary expression\00", align 1
@.str.70 = private unnamed_addr constant [36 x i8] c"type mismatch in address expression\00", align 1
@.str.71 = private unnamed_addr constant [36 x i8] c"invalid rhs for gimple memory store\00", align 1
@.str.72 = private unnamed_addr constant [36 x i8] c"invalid operands to array reference\00", align 1
@.str.73 = private unnamed_addr constant [33 x i8] c"type mismatch in array reference\00", align 1
@.str.74 = private unnamed_addr constant [39 x i8] c"type mismatch in array range reference\00", align 1
@.str.75 = private unnamed_addr constant [41 x i8] c"type mismatch in real/imagpart reference\00", align 1
@.str.76 = private unnamed_addr constant [37 x i8] c"type mismatch in component reference\00", align 1
@.str.77 = private unnamed_addr constant [49 x i8] c"Conversion of an SSA_NAME on the left hand side.\00", align 1
@.str.78 = private unnamed_addr constant [34 x i8] c"invalid expression for min lvalue\00", align 1
@.str.79 = private unnamed_addr constant [38 x i8] c"invalid operand in indirect reference\00", align 1
@.str.80 = private unnamed_addr constant [36 x i8] c"type mismatch in indirect reference\00", align 1
@optimize = external dso_local global i32, align 4
@.str.81 = private unnamed_addr constant [39 x i8] c"non-register as LHS of unary operation\00", align 1
@.str.82 = private unnamed_addr constant [35 x i8] c"invalid operand in unary operation\00", align 1
@sizetype_tab = external dso_local global [4 x %union.tree_node*], align 16
@.str.83 = private unnamed_addr constant [32 x i8] c"invalid types in nop conversion\00", align 1
@.str.84 = private unnamed_addr constant [42 x i8] c"invalid types in address space conversion\00", align 1
@.str.85 = private unnamed_addr constant [40 x i8] c"invalid types in fixed-point conversion\00", align 1
@.str.86 = private unnamed_addr constant [46 x i8] c"invalid types in conversion to floating point\00", align 1
@.str.87 = private unnamed_addr constant [39 x i8] c"invalid types in conversion to integer\00", align 1
@.str.88 = private unnamed_addr constant [42 x i8] c"non-trivial conversion in unary operation\00", align 1
@.str.89 = private unnamed_addr constant [40 x i8] c"non-register as LHS of binary operation\00", align 1
@.str.90 = private unnamed_addr constant [37 x i8] c"invalid operands in binary operation\00", align 1
@.str.91 = private unnamed_addr constant [36 x i8] c"type mismatch in complex expression\00", align 1
@.str.92 = private unnamed_addr constant [34 x i8] c"type mismatch in shift expression\00", align 1
@.str.93 = private unnamed_addr constant [41 x i8] c"type mismatch in vector shift expression\00", align 1
@.str.94 = private unnamed_addr constant [56 x i8] c"non-element sized vector shift of floating point vector\00", align 1
@.str.95 = private unnamed_addr constant [50 x i8] c"invalid non-vector operands to vector valued plus\00", align 1
@.str.96 = private unnamed_addr constant [41 x i8] c"invalid (pointer) operands to plus/minus\00", align 1
@.str.97 = private unnamed_addr constant [41 x i8] c"type mismatch in pointer plus expression\00", align 1
@.str.98 = private unnamed_addr constant [41 x i8] c"type mismatch in binary truth expression\00", align 1
@.str.99 = private unnamed_addr constant [35 x i8] c"type mismatch in binary expression\00", align 1
@.str.100 = private unnamed_addr constant [32 x i8] c"invalid function in gimple call\00", align 1
@.str.101 = private unnamed_addr constant [28 x i8] c"non-function in gimple call\00", align 1
@.str.102 = private unnamed_addr constant [27 x i8] c"invalid LHS in gimple call\00", align 1
@.str.103 = private unnamed_addr constant [21 x i8] c"LHS in noreturn call\00", align 1
@.str.104 = private unnamed_addr constant [34 x i8] c"invalid conversion in gimple call\00", align 1
@.str.105 = private unnamed_addr constant [36 x i8] c"invalid static chain in gimple call\00", align 1
@.str.106 = private unnamed_addr constant [37 x i8] c"static chain in indirect gimple call\00", align 1
@.str.107 = private unnamed_addr constant [48 x i8] c"static chain with function that doesn't use one\00", align 1
@.str.108 = private unnamed_addr constant [32 x i8] c"invalid argument to gimple call\00", align 1
@.str.109 = private unnamed_addr constant [38 x i8] c"invalid operands in gimple comparison\00", align 1
@.str.110 = private unnamed_addr constant [39 x i8] c"type mismatch in comparison expression\00", align 1
@.str.111 = private unnamed_addr constant [50 x i8] c"goto destination is neither a label nor a pointer\00", align 1
@.str.112 = private unnamed_addr constant [36 x i8] c"invalid operand to switch statement\00", align 1
@.str.113 = private unnamed_addr constant [36 x i8] c"invalid operand in return statement\00", align 1
@.str.114 = private unnamed_addr constant [39 x i8] c"invalid conversion in return statement\00", align 1
@.str.115 = private unnamed_addr constant [19 x i8] c"Invalid PHI result\00", align 1
@.str.116 = private unnamed_addr constant [21 x i8] c"Invalid PHI argument\00", align 1
@.str.117 = private unnamed_addr constant [38 x i8] c"Incompatible types in PHI argument %u\00", align 1
@.str.118 = private unnamed_addr constant [35 x i8] c"invalid function in call statement\00", align 1
@.str.119 = private unnamed_addr constant [38 x i8] c"invalid pure const state for function\00", align 1
@.str.120 = private unnamed_addr constant [13 x i8] c"in statement\00", align 1
@cgraph_state = external dso_local global i32, align 4
@.str.121 = private unnamed_addr constant [41 x i8] c"statement marked for throw, but doesn%'t\00", align 1
@.str.122 = private unnamed_addr constant [46 x i8] c"statement marked for throw in middle of block\00", align 1
@.str.123 = private unnamed_addr constant [42 x i8] c"SSA name in freelist but still referenced\00", align 1
@.str.124 = private unnamed_addr constant [62 x i8] c"Indirect reference's operand is not a register or a constant.\00", align 1
@.str.125 = private unnamed_addr constant [43 x i8] c"ASSERT_EXPR with an always-false condition\00", align 1
@.str.126 = private unnamed_addr constant [46 x i8] c"MODIFY_EXPR not expected while having tuples.\00", align 1
@.str.127 = private unnamed_addr constant [47 x i8] c"constant not recomputed when ADDR_EXPR changed\00", align 1
@.str.128 = private unnamed_addr constant [51 x i8] c"side effects not recomputed when ADDR_EXPR changed\00", align 1
@.str.129 = private unnamed_addr constant [43 x i8] c"address taken, but ADDRESSABLE bit not set\00", align 1
@.str.130 = private unnamed_addr constant [55 x i8] c"DECL_GIMPLE_REG_P set on a variable with address taken\00", align 1
@.str.131 = private unnamed_addr constant [31 x i8] c"non-integral used in condition\00", align 1
@.str.132 = private unnamed_addr constant [28 x i8] c"invalid conditional operand\00", align 1
@.str.133 = private unnamed_addr constant [34 x i8] c"invalid operand to unary operator\00", align 1
@.str.134 = private unnamed_addr constant [38 x i8] c"invalid COMPONENT_REF offset operator\00", align 1
@.str.135 = private unnamed_addr constant [20 x i8] c"invalid array index\00", align 1
@.str.136 = private unnamed_addr constant [26 x i8] c"invalid array lower bound\00", align 1
@.str.137 = private unnamed_addr constant [21 x i8] c"invalid array stride\00", align 1
@.str.138 = private unnamed_addr constant [50 x i8] c"invalid position or size operand to BIT_FIELD_REF\00", align 1
@.str.139 = private unnamed_addr constant [74 x i8] c"integral result type precision does not match field size of BIT_FIELD_REF\00", align 1
@mode_precision = external dso_local constant [87 x i16], align 16
@.str.140 = private unnamed_addr constant [81 x i8] c"mode precision of non-integral result does not match field size of BIT_FIELD_REF\00", align 1
@.str.141 = private unnamed_addr constant [25 x i8] c"invalid reference prefix\00", align 1
@.str.142 = private unnamed_addr constant [49 x i8] c"invalid operand to plus/minus, type is a pointer\00", align 1
@.str.143 = private unnamed_addr constant [35 x i8] c"invalid operand to binary operator\00", align 1
@.str.144 = private unnamed_addr constant [64 x i8] c"invalid operand to pointer plus, first operand is not a pointer\00", align 1
@.str.145 = private unnamed_addr constant [89 x i8] c"invalid operand to pointer plus, second operand is not an integer with type of sizetype.\00", align 1
@.str.146 = private unnamed_addr constant [22 x i8] c"Dead STMT in EH table\00", align 1
@.str.147 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.148 = private unnamed_addr constant [7 x i8] c"bb_%d \00", align 1
@.str.149 = private unnamed_addr constant [35 x i8] c"%sloop_%d (header = %d, latch = %d\00", align 1
@.str.150 = private unnamed_addr constant [11 x i8] c", niter = \00", align 1
@.str.151 = private unnamed_addr constant [17 x i8] c", upper_bound = \00", align 1
@.str.152 = private unnamed_addr constant [14 x i8] c", estimate = \00", align 1
@.str.153 = private unnamed_addr constant [5 x i8] c"%s{\0A\00", align 1
@.str.154 = private unnamed_addr constant [5 x i8] c"%s}\0A\00", align 1
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@.str.155 = private unnamed_addr constant [38 x i8] c"ENTRY_BLOCK has IL associated with it\00", align 1
@.str.156 = private unnamed_addr constant [37 x i8] c"EXIT_BLOCK has IL associated with it\00", align 1
@.str.157 = private unnamed_addr constant [28 x i8] c"fallthru to exit from bb %d\00", align 1
@.str.158 = private unnamed_addr constant [16 x i8] c"nonlocal label \00", align 1
@.str.159 = private unnamed_addr constant [47 x i8] c" is not first in a sequence of labels in bb %d\00", align 1
@.str.160 = private unnamed_addr constant [22 x i8] c"EH landing pad label \00", align 1
@.str.161 = private unnamed_addr constant [7 x i8] c"label \00", align 1
@.str.162 = private unnamed_addr constant [34 x i8] c" to block does not match in bb %d\00", align 1
@.str.163 = private unnamed_addr constant [32 x i8] c" has incorrect context in bb %d\00", align 1
@.str.164 = private unnamed_addr constant [45 x i8] c"control flow in the middle of basic block %d\00", align 1
@.str.165 = private unnamed_addr constant [33 x i8] c" in the middle of basic block %d\00", align 1
@.str.166 = private unnamed_addr constant [49 x i8] c"fallthru edge after a control statement in bb %d\00", align 1
@.str.167 = private unnamed_addr constant [49 x i8] c"true/false edge after a non-GIMPLE_COND in bb %d\00", align 1
@.str.168 = private unnamed_addr constant [42 x i8] c"wrong outgoing edge flags at end of bb %d\00", align 1
@.str.169 = private unnamed_addr constant [30 x i8] c"explicit goto at end of bb %d\00", align 1
@.str.170 = private unnamed_addr constant [44 x i8] c"return edge does not point to exit in bb %d\00", align 1
@.str.171 = private unnamed_addr constant [51 x i8] c"found default case not at the start of case vector\00", align 1
@.str.172 = private unnamed_addr constant [25 x i8] c"case labels not sorted: \00", align 1
@.str.173 = private unnamed_addr constant [18 x i8] c" is greater than \00", align 1
@.str.174 = private unnamed_addr constant [23 x i8] c" but comes before it.\0A\00", align 1
@.str.175 = private unnamed_addr constant [27 x i8] c"extra outgoing edge %d->%d\00", align 1
@.str.176 = private unnamed_addr constant [20 x i8] c"missing edge %i->%i\00", align 1
@.str.177 = private unnamed_addr constant [25 x i8] c"Removing basic block %d\0A\00", align 1
@.str.178 = private unnamed_addr constant [26 x i8] c"Merging blocks %d and %d\0A\00", align 1
@.str.179 = private unnamed_addr constant [34 x i8] c"%<noreturn%> function does return\00", align 1
@warn_return_type = external dso_local global i32, align 4
@.str.180 = private unnamed_addr constant [41 x i8] c"control reaches end of non-void function\00", align 1
@warn_missing_noreturn = external dso_local global i32, align 4
@.str.181 = private unnamed_addr constant [64 x i8] c"function might be possible candidate for attribute %<noreturn%>\00", align 1
@flag_warn_unused_result = external dso_local global i8, align 1
@.str.182 = private unnamed_addr constant [19 x i8] c"warn_unused_result\00", align 1
@.str.183 = private unnamed_addr constant [73 x i8] c"ignoring return value of %qD, declared with attribute warn_unused_result\00", align 1
@.str.184 = private unnamed_addr constant [77 x i8] c"ignoring return value of function declared with attribute warn_unused_result\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_empty_tree_cfg_for_function(%struct.function* %fn) #0 !dbg !4358 {
entry:
  %fn.addr = alloca %struct.function*, align 8
  store %struct.function* %fn, %struct.function** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fn.addr, metadata !4361, metadata !DIExpression()), !dbg !4362
  %0 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4363
  call void @init_flow(%struct.function* %0), !dbg !4364
  %1 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4365
  %cfg = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 1, !dbg !4365
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4365
  %x_profile_status = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 7, !dbg !4365
  store i32 0, i32* %x_profile_status, align 8, !dbg !4366
  %3 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4367
  %cfg1 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 1, !dbg !4367
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg1, align 8, !dbg !4367
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 3, !dbg !4367
  store i32 2, i32* %x_n_basic_blocks, align 8, !dbg !4368
  %5 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4369
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %5, i32 0, i32 1, !dbg !4369
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4369
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 5, !dbg !4369
  store i32 2, i32* %x_last_basic_block, align 8, !dbg !4370
  %call = call %struct.VEC_basic_block_gc* @VEC_basic_block_gc_alloc(i32 20), !dbg !4371
  %7 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4372
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 1, !dbg !4372
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !4372
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 2, !dbg !4372
  store %struct.VEC_basic_block_gc* %call, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !4373
  %9 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4374
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %9, i32 0, i32 1, !dbg !4374
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !4374
  %x_basic_block_info5 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 2, !dbg !4374
  call void @VEC_basic_block_gc_safe_grow_cleared(%struct.VEC_basic_block_gc** %x_basic_block_info5, i32 20), !dbg !4374
  %call6 = call %struct.VEC_basic_block_gc* @VEC_basic_block_gc_alloc(i32 20), !dbg !4375
  %11 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4376
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 1, !dbg !4376
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !4376
  %x_label_to_block_map = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i32 0, i32 6, !dbg !4376
  store %struct.VEC_basic_block_gc* %call6, %struct.VEC_basic_block_gc** %x_label_to_block_map, align 8, !dbg !4377
  %13 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4378
  %cfg8 = getelementptr inbounds %struct.function, %struct.function* %13, i32 0, i32 1, !dbg !4378
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg8, align 8, !dbg !4378
  %x_label_to_block_map9 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 6, !dbg !4378
  call void @VEC_basic_block_gc_safe_grow_cleared(%struct.VEC_basic_block_gc** %x_label_to_block_map9, i32 20), !dbg !4378
  %15 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4379
  %cfg10 = getelementptr inbounds %struct.function, %struct.function* %15, i32 0, i32 1, !dbg !4379
  %16 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg10, align 8, !dbg !4379
  %x_basic_block_info11 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %16, i32 0, i32 2, !dbg !4379
  %17 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info11, align 8, !dbg !4379
  %tobool = icmp ne %struct.VEC_basic_block_gc* %17, null, !dbg !4379
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4379

cond.true:                                        ; preds = %entry
  %18 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4379
  %cfg12 = getelementptr inbounds %struct.function, %struct.function* %18, i32 0, i32 1, !dbg !4379
  %19 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg12, align 8, !dbg !4379
  %x_basic_block_info13 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %19, i32 0, i32 2, !dbg !4379
  %20 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info13, align 8, !dbg !4379
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %20, i32 0, i32 0, !dbg !4379
  br label %cond.end, !dbg !4379

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4379

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4379
  %21 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4379
  %cfg14 = getelementptr inbounds %struct.function, %struct.function* %21, i32 0, i32 1, !dbg !4379
  %22 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg14, align 8, !dbg !4379
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %22, i32 0, i32 0, !dbg !4379
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4379
  %call15 = call %struct.basic_block_def* @VEC_basic_block_base_replace(%struct.VEC_basic_block_base* %cond, i32 0, %struct.basic_block_def* %23), !dbg !4379
  %24 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4380
  %cfg16 = getelementptr inbounds %struct.function, %struct.function* %24, i32 0, i32 1, !dbg !4380
  %25 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg16, align 8, !dbg !4380
  %x_basic_block_info17 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %25, i32 0, i32 2, !dbg !4380
  %26 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info17, align 8, !dbg !4380
  %tobool18 = icmp ne %struct.VEC_basic_block_gc* %26, null, !dbg !4380
  br i1 %tobool18, label %cond.true19, label %cond.false23, !dbg !4380

cond.true19:                                      ; preds = %cond.end
  %27 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4380
  %cfg20 = getelementptr inbounds %struct.function, %struct.function* %27, i32 0, i32 1, !dbg !4380
  %28 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg20, align 8, !dbg !4380
  %x_basic_block_info21 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %28, i32 0, i32 2, !dbg !4380
  %29 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info21, align 8, !dbg !4380
  %base22 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %29, i32 0, i32 0, !dbg !4380
  br label %cond.end24, !dbg !4380

cond.false23:                                     ; preds = %cond.end
  br label %cond.end24, !dbg !4380

cond.end24:                                       ; preds = %cond.false23, %cond.true19
  %cond25 = phi %struct.VEC_basic_block_base* [ %base22, %cond.true19 ], [ null, %cond.false23 ], !dbg !4380
  %30 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4380
  %cfg26 = getelementptr inbounds %struct.function, %struct.function* %30, i32 0, i32 1, !dbg !4380
  %31 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg26, align 8, !dbg !4380
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %31, i32 0, i32 1, !dbg !4380
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4380
  %call27 = call %struct.basic_block_def* @VEC_basic_block_base_replace(%struct.VEC_basic_block_base* %cond25, i32 1, %struct.basic_block_def* %32), !dbg !4380
  %33 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4381
  %cfg28 = getelementptr inbounds %struct.function, %struct.function* %33, i32 0, i32 1, !dbg !4381
  %34 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg28, align 8, !dbg !4381
  %x_exit_block_ptr29 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %34, i32 0, i32 1, !dbg !4381
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr29, align 8, !dbg !4381
  %36 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4382
  %cfg30 = getelementptr inbounds %struct.function, %struct.function* %36, i32 0, i32 1, !dbg !4382
  %37 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg30, align 8, !dbg !4382
  %x_entry_block_ptr31 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %37, i32 0, i32 0, !dbg !4382
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr31, align 8, !dbg !4382
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 6, !dbg !4383
  store %struct.basic_block_def* %35, %struct.basic_block_def** %next_bb, align 8, !dbg !4384
  %39 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4385
  %cfg32 = getelementptr inbounds %struct.function, %struct.function* %39, i32 0, i32 1, !dbg !4385
  %40 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg32, align 8, !dbg !4385
  %x_entry_block_ptr33 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %40, i32 0, i32 0, !dbg !4385
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr33, align 8, !dbg !4385
  %42 = load %struct.function*, %struct.function** %fn.addr, align 8, !dbg !4386
  %cfg34 = getelementptr inbounds %struct.function, %struct.function* %42, i32 0, i32 1, !dbg !4386
  %43 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg34, align 8, !dbg !4386
  %x_exit_block_ptr35 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %43, i32 0, i32 1, !dbg !4386
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr35, align 8, !dbg !4386
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 5, !dbg !4387
  store %struct.basic_block_def* %41, %struct.basic_block_def** %prev_bb, align 8, !dbg !4388
  ret void, !dbg !4389
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local void @init_flow(%struct.function*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_basic_block_gc* @VEC_basic_block_gc_alloc(i32 %alloc_) #0 !dbg !4390 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4393, metadata !DIExpression()), !dbg !4394
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4394
  %call = call i8* @vec_gc_p_reserve_exact(i8* null, i32 %0), !dbg !4394
  %1 = bitcast i8* %call to %struct.VEC_basic_block_gc*, !dbg !4394
  ret %struct.VEC_basic_block_gc* %1, !dbg !4394
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_basic_block_gc_safe_grow_cleared(%struct.VEC_basic_block_gc** %vec_, i32 %size_) #0 !dbg !4395 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_gc**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_basic_block_gc** %vec_, %struct.VEC_basic_block_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_gc*** %vec_.addr, metadata !4399, metadata !DIExpression()), !dbg !4400
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !4401, metadata !DIExpression()), !dbg !4400
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !4402, metadata !DIExpression()), !dbg !4400
  %0 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4400
  %1 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %0, align 8, !dbg !4400
  %tobool = icmp ne %struct.VEC_basic_block_gc* %1, null, !dbg !4400
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4400

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4400
  %3 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %2, align 8, !dbg !4400
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %3, i32 0, i32 0, !dbg !4400
  br label %cond.end, !dbg !4400

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4400

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4400
  %call = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond), !dbg !4400
  store i32 %call, i32* %oldsize, align 4, !dbg !4400
  %4 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4400
  %5 = load i32, i32* %size_.addr, align 4, !dbg !4400
  call void @VEC_basic_block_gc_safe_grow(%struct.VEC_basic_block_gc** %4, i32 %5), !dbg !4400
  %6 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4400
  %7 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %6, align 8, !dbg !4400
  %tobool1 = icmp ne %struct.VEC_basic_block_gc* %7, null, !dbg !4400
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !4400

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !4400
  %9 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %8, align 8, !dbg !4400
  %base3 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %9, i32 0, i32 0, !dbg !4400
  br label %cond.end5, !dbg !4400

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !4400

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_basic_block_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !4400
  %call7 = call %struct.basic_block_def** @VEC_basic_block_base_address(%struct.VEC_basic_block_base* %cond6), !dbg !4400
  %10 = load i32, i32* %oldsize, align 4, !dbg !4400
  %idxprom = sext i32 %10 to i64, !dbg !4400
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %call7, i64 %idxprom, !dbg !4400
  %11 = bitcast %struct.basic_block_def** %arrayidx to i8*, !dbg !4400
  %12 = load i32, i32* %size_.addr, align 4, !dbg !4400
  %13 = load i32, i32* %oldsize, align 4, !dbg !4400
  %sub = sub nsw i32 %12, %13, !dbg !4400
  %conv = sext i32 %sub to i64, !dbg !4400
  %mul = mul i64 8, %conv, !dbg !4400
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %mul, i1 false), !dbg !4400
  ret void, !dbg !4400
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_replace(%struct.VEC_basic_block_base* %vec_, i32 %ix_, %struct.basic_block_def* %obj_) #0 !dbg !4403 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.basic_block_def*, align 8
  %old_obj_ = alloca %struct.basic_block_def*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !4407, metadata !DIExpression()), !dbg !4408
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4409, metadata !DIExpression()), !dbg !4408
  store %struct.basic_block_def* %obj_, %struct.basic_block_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_.addr, metadata !4410, metadata !DIExpression()), !dbg !4408
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %old_obj_, metadata !4411, metadata !DIExpression()), !dbg !4408
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !4408
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4408
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %1, i32 0, i32 0, !dbg !4408
  %2 = load i32, i32* %num, align 8, !dbg !4408
  %cmp = icmp ult i32 %0, %2, !dbg !4408
  %conv = zext i1 %cmp to i32, !dbg !4408
  %3 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4408
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %3, i32 0, i32 2, !dbg !4408
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !4408
  %idxprom = zext i32 %4 to i64, !dbg !4408
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !4408
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !4408
  store %struct.basic_block_def* %5, %struct.basic_block_def** %old_obj_, align 8, !dbg !4408
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_.addr, align 8, !dbg !4408
  %7 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4408
  %vec1 = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %7, i32 0, i32 2, !dbg !4408
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !4408
  %idxprom2 = zext i32 %8 to i64, !dbg !4408
  %arrayidx3 = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec1, i64 0, i64 %idxprom2, !dbg !4408
  store %struct.basic_block_def* %6, %struct.basic_block_def** %arrayidx3, align 8, !dbg !4408
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %old_obj_, align 8, !dbg !4408
  ret %struct.basic_block_def* %9, !dbg !4408
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_empty_tree_cfg() #0 !dbg !4412 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4415
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4415
  call void @init_empty_tree_cfg_for_function(%struct.function* %add.ptr), !dbg !4416
  ret void, !dbg !4417
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @execute_build_cfg() #0 !dbg !4418 {
entry:
  %body = alloca %struct.gimple_seq_d*, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body, metadata !4419, metadata !DIExpression()), !dbg !4420
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4421
  %call = call %struct.gimple_seq_d* @gimple_body(%union.tree_node* %0), !dbg !4422
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %body, align 8, !dbg !4420
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !4423
  call void @build_gimple_cfg(%struct.gimple_seq_d* %1), !dbg !4424
  %2 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4425
  call void @gimple_set_body(%union.tree_node* %2, %struct.gimple_seq_d* null), !dbg !4426
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4427
  %tobool = icmp ne %struct._IO_FILE* %3, null, !dbg !4427
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4429

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* @dump_flags, align 4, !dbg !4430
  %and = and i32 %4, 8, !dbg !4431
  %tobool1 = icmp ne i32 %and, 0, !dbg !4431
  br i1 %tobool1, label %if.then, label %if.end, !dbg !4432

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4433
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.48, i64 0, i64 0)), !dbg !4435
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4436
  %7 = load i32, i32* @dump_flags, align 4, !dbg !4437
  call void @dump_scope_blocks(%struct._IO_FILE* %6, i32 %7), !dbg !4438
  br label %if.end, !dbg !4439

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret i32 0, !dbg !4440
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @fold_cond_expr_cond() #0 !dbg !4441 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %loc = alloca i32, align 4
  %cond = alloca %union.tree_node*, align 8
  %zerop = alloca i8, align 1
  %onep = alloca i8, align 1
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4442, metadata !DIExpression()), !dbg !4443
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4444
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4444
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4444
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4444
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !4444
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4444
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !4444
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4444
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !4444
  br label %for.cond, !dbg !4444

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4446
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4446
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4446
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4446
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4446
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !4446
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4446
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !4446
  br i1 %cmp, label %for.body, label %for.end, !dbg !4444

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4448, metadata !DIExpression()), !dbg !4450
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4451
  %call = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %8), !dbg !4452
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !4450
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4453
  %tobool = icmp ne %union.gimple_statement_d* %9, null, !dbg !4453
  br i1 %tobool, label %land.lhs.true, label %if.end27, !dbg !4455

land.lhs.true:                                    ; preds = %for.body
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4456
  %call3 = call i32 @gimple_code(%union.gimple_statement_d* %10), !dbg !4457
  %cmp4 = icmp eq i32 %call3, 1, !dbg !4458
  br i1 %cmp4, label %if.then, label %if.end27, !dbg !4459

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !4460, metadata !DIExpression()), !dbg !4462
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4463
  %call5 = call i32 @gimple_location(%union.gimple_statement_d* %11), !dbg !4464
  store i32 %call5, i32* %loc, align 4, !dbg !4462
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond, metadata !4465, metadata !DIExpression()), !dbg !4466
  call void @llvm.dbg.declare(metadata i8* %zerop, metadata !4467, metadata !DIExpression()), !dbg !4468
  call void @llvm.dbg.declare(metadata i8* %onep, metadata !4469, metadata !DIExpression()), !dbg !4470
  call void @fold_defer_overflow_warnings(), !dbg !4471
  %12 = load i32, i32* %loc, align 4, !dbg !4472
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4473
  %call6 = call i32 @gimple_cond_code(%union.gimple_statement_d* %13), !dbg !4474
  %14 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4475
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4476
  %call7 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %15), !dbg !4477
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4478
  %call8 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %16), !dbg !4479
  %call9 = call %union.tree_node* @fold_binary_loc(i32 %12, i32 %call6, %union.tree_node* %14, %union.tree_node* %call7, %union.tree_node* %call8), !dbg !4480
  store %union.tree_node* %call9, %union.tree_node** %cond, align 8, !dbg !4481
  %17 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !4482
  %tobool10 = icmp ne %union.tree_node* %17, null, !dbg !4482
  br i1 %tobool10, label %if.then11, label %if.else, !dbg !4484

if.then11:                                        ; preds = %if.then
  %18 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !4485
  %call12 = call i32 @integer_zerop(%union.tree_node* %18), !dbg !4487
  %conv = trunc i32 %call12 to i8, !dbg !4487
  store i8 %conv, i8* %zerop, align 1, !dbg !4488
  %19 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !4489
  %call13 = call i32 @integer_onep(%union.tree_node* %19), !dbg !4490
  %conv14 = trunc i32 %call13 to i8, !dbg !4490
  store i8 %conv14, i8* %onep, align 1, !dbg !4491
  br label %if.end, !dbg !4492

if.else:                                          ; preds = %if.then
  store i8 0, i8* %onep, align 1, !dbg !4493
  store i8 0, i8* %zerop, align 1, !dbg !4494
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then11
  %20 = load i8, i8* %zerop, align 1, !dbg !4495
  %conv15 = zext i8 %20 to i32, !dbg !4495
  %tobool16 = icmp ne i32 %conv15, 0, !dbg !4495
  br i1 %tobool16, label %lor.end, label %lor.rhs, !dbg !4496

lor.rhs:                                          ; preds = %if.end
  %21 = load i8, i8* %onep, align 1, !dbg !4497
  %conv17 = zext i8 %21 to i32, !dbg !4497
  %tobool18 = icmp ne i32 %conv17, 0, !dbg !4496
  br label %lor.end, !dbg !4496

lor.end:                                          ; preds = %lor.rhs, %if.end
  %22 = phi i1 [ true, %if.end ], [ %tobool18, %lor.rhs ]
  %lor.ext = zext i1 %22 to i32, !dbg !4496
  %conv19 = trunc i32 %lor.ext to i8, !dbg !4495
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4498
  call void @fold_undefer_overflow_warnings(i8 zeroext %conv19, %union.gimple_statement_d* %23, i32 2), !dbg !4499
  %24 = load i8, i8* %zerop, align 1, !dbg !4500
  %tobool20 = icmp ne i8 %24, 0, !dbg !4500
  br i1 %tobool20, label %if.then21, label %if.else22, !dbg !4502

if.then21:                                        ; preds = %lor.end
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4503
  call void @gimple_cond_make_false(%union.gimple_statement_d* %25), !dbg !4504
  br label %if.end26, !dbg !4504

if.else22:                                        ; preds = %lor.end
  %26 = load i8, i8* %onep, align 1, !dbg !4505
  %tobool23 = icmp ne i8 %26, 0, !dbg !4505
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !4507

if.then24:                                        ; preds = %if.else22
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4508
  call void @gimple_cond_make_true(%union.gimple_statement_d* %27), !dbg !4509
  br label %if.end25, !dbg !4509

if.end25:                                         ; preds = %if.then24, %if.else22
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.then21
  br label %if.end27, !dbg !4510

if.end27:                                         ; preds = %if.end26, %land.lhs.true, %for.body
  br label %for.inc, !dbg !4511

for.inc:                                          ; preds = %if.end27
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4446
  %next_bb28 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 6, !dbg !4446
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb28, align 8, !dbg !4446
  store %struct.basic_block_def* %29, %struct.basic_block_def** %bb, align 8, !dbg !4446
  br label %for.cond, !dbg !4446, !llvm.loop !4512

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4514
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %bb) #0 !dbg !4515 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %i = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4518, metadata !DIExpression()), !dbg !4519
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4520, metadata !DIExpression()), !dbg !4521
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4522
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %i, %struct.basic_block_def* %0), !dbg !4523
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4524, metadata !DIExpression()), !dbg !4525
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !4525
  br label %while.cond, !dbg !4526

while.cond:                                       ; preds = %while.body, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !4527
  %tobool = icmp ne i8 %call, 0, !dbg !4527
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !4528

land.rhs:                                         ; preds = %while.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !4529
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !4530
  %call2 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %call1), !dbg !4531
  %conv = zext i8 %call2 to i32, !dbg !4531
  %tobool3 = icmp ne i32 %conv, 0, !dbg !4528
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %1 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ], !dbg !4532
  br i1 %1, label %while.body, label %while.end, !dbg !4526

while.body:                                       ; preds = %land.end
  call void @gsi_prev(%struct.gimple_stmt_iterator* %i), !dbg !4533
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !4535
  br label %while.cond, !dbg !4526, !llvm.loop !4536

while.end:                                        ; preds = %land.end
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4538
  ret %union.gimple_statement_d* %2, !dbg !4539
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !4540 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4544, metadata !DIExpression()), !dbg !4545
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4546
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4547
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4548
  %bf.load = load i32, i32* %1, align 8, !dbg !4548
  %bf.clear = and i32 %bf.load, 255, !dbg !4548
  ret i32 %bf.clear, !dbg !4549
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !4550 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4553, metadata !DIExpression()), !dbg !4554
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4555
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4556
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !4557
  %1 = load i32, i32* %location, align 8, !dbg !4557
  ret i32 %1, !dbg !4558
}

declare dso_local void @fold_defer_overflow_warnings() #2

declare dso_local %union.tree_node* @fold_binary_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_cond_code(%union.gimple_statement_d* %gs) #0 !dbg !4559 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4562, metadata !DIExpression()), !dbg !4563
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4564
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4565
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4566
  %bf.load = load i32, i32* %1, align 8, !dbg !4566
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4566
  ret i32 %bf.lshr, !dbg !4567
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %gs) #0 !dbg !4568 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4571, metadata !DIExpression()), !dbg !4572
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4573
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !4574
  ret %union.tree_node* %call, !dbg !4575
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %gs) #0 !dbg !4576 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4577, metadata !DIExpression()), !dbg !4578
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4579
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !4580
  ret %union.tree_node* %call, !dbg !4581
}

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

declare dso_local i32 @integer_onep(%union.tree_node*) #2

declare dso_local void @fold_undefer_overflow_warnings(i8 zeroext, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_make_false(%union.gimple_statement_d* %gs) #0 !dbg !4582 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4585, metadata !DIExpression()), !dbg !4586
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4587
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !4588
  call void @gimple_cond_set_lhs(%union.gimple_statement_d* %0, %union.tree_node* %1), !dbg !4589
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4590
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !4591
  call void @gimple_cond_set_rhs(%union.gimple_statement_d* %2, %union.tree_node* %3), !dbg !4592
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4593
  %gsbase = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_base*, !dbg !4594
  %5 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4595
  %bf.load = load i32, i32* %5, align 8, !dbg !4596
  %bf.clear = and i32 %bf.load, 65535, !dbg !4596
  %bf.set = or i32 %bf.clear, 6619136, !dbg !4596
  store i32 %bf.set, i32* %5, align 8, !dbg !4596
  ret void, !dbg !4597
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_make_true(%union.gimple_statement_d* %gs) #0 !dbg !4598 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4599, metadata !DIExpression()), !dbg !4600
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4601
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !4602
  call void @gimple_cond_set_lhs(%union.gimple_statement_d* %0, %union.tree_node* %1), !dbg !4603
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4604
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !4605
  call void @gimple_cond_set_rhs(%union.gimple_statement_d* %2, %union.tree_node* %3), !dbg !4606
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4607
  %gsbase = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_base*, !dbg !4608
  %5 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4609
  %bf.load = load i32, i32* %5, align 8, !dbg !4610
  %bf.clear = and i32 %bf.load, 65535, !dbg !4610
  %bf.set = or i32 %bf.clear, 6619136, !dbg !4610
  store i32 %bf.set, i32* %5, align 8, !dbg !4610
  ret void, !dbg !4611
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @start_recording_case_labels() #0 !dbg !4612 {
entry:
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @edge_to_cases, align 8, !dbg !4613
  %cmp = icmp eq %struct.pointer_map_t* %0, null, !dbg !4613
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4613

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 849, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4613
  br label %cond.end, !dbg !4613

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4613

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4613
  %call = call %struct.pointer_map_t* @pointer_map_create(), !dbg !4614
  store %struct.pointer_map_t* %call, %struct.pointer_map_t** @edge_to_cases, align 8, !dbg !4615
  ret void, !dbg !4616
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local %struct.pointer_map_t* @pointer_map_create() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @end_recording_case_labels() #0 !dbg !4617 {
entry:
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @edge_to_cases, align 8, !dbg !4618
  call void @pointer_map_traverse(%struct.pointer_map_t* %0, i8 (i8*, i8**, i8*)* @edge_to_cases_cleanup, i8* null), !dbg !4619
  %1 = load %struct.pointer_map_t*, %struct.pointer_map_t** @edge_to_cases, align 8, !dbg !4620
  call void @pointer_map_destroy(%struct.pointer_map_t* %1), !dbg !4621
  store %struct.pointer_map_t* null, %struct.pointer_map_t** @edge_to_cases, align 8, !dbg !4622
  ret void, !dbg !4623
}

declare dso_local void @pointer_map_traverse(%struct.pointer_map_t*, i8 (i8*, i8**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @edge_to_cases_cleanup(i8* %key, i8** %value, i8* %data) #0 !dbg !4624 {
entry:
  %key.addr = alloca i8*, align 8
  %value.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %t = alloca %union.tree_node*, align 8
  %next = alloca %union.tree_node*, align 8
  store i8* %key, i8** %key.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key.addr, metadata !4627, metadata !DIExpression()), !dbg !4628
  store i8** %value, i8*** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %value.addr, metadata !4629, metadata !DIExpression()), !dbg !4630
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4631, metadata !DIExpression()), !dbg !4632
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4633, metadata !DIExpression()), !dbg !4634
  call void @llvm.dbg.declare(metadata %union.tree_node** %next, metadata !4635, metadata !DIExpression()), !dbg !4636
  %0 = load i8**, i8*** %value.addr, align 8, !dbg !4637
  %1 = load i8*, i8** %0, align 8, !dbg !4639
  %2 = bitcast i8* %1 to %union.tree_node*, !dbg !4640
  store %union.tree_node* %2, %union.tree_node** %t, align 8, !dbg !4641
  br label %for.cond, !dbg !4642

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4643
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !4645
  br i1 %tobool, label %for.body, label %for.end, !dbg !4645

for.body:                                         ; preds = %for.cond
  %4 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4646
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !4646
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !4646
  %5 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4646
  store %union.tree_node* %5, %union.tree_node** %next, align 8, !dbg !4648
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4649
  %common1 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !4649
  %chain2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 1, !dbg !4649
  store %union.tree_node* null, %union.tree_node** %chain2, align 8, !dbg !4650
  br label %for.inc, !dbg !4651

for.inc:                                          ; preds = %for.body
  %7 = load %union.tree_node*, %union.tree_node** %next, align 8, !dbg !4652
  store %union.tree_node* %7, %union.tree_node** %t, align 8, !dbg !4653
  br label %for.cond, !dbg !4654, !llvm.loop !4655

for.end:                                          ; preds = %for.cond
  %8 = load i8**, i8*** %value.addr, align 8, !dbg !4657
  store i8* null, i8** %8, align 8, !dbg !4658
  ret i8 0, !dbg !4659
}

declare dso_local void @pointer_map_destroy(%struct.pointer_map_t*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.basic_block_def* @label_to_block_fn(%struct.function* %ifun, %union.tree_node* %dest) #0 !dbg !4660 {
entry:
  %retval = alloca %struct.basic_block_def*, align 8
  %ifun.addr = alloca %struct.function*, align 8
  %dest.addr = alloca %union.tree_node*, align 8
  %uid = alloca i32, align 4
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.function* %ifun, %struct.function** %ifun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %ifun.addr, metadata !4663, metadata !DIExpression()), !dbg !4664
  store %union.tree_node* %dest, %union.tree_node** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest.addr, metadata !4665, metadata !DIExpression()), !dbg !4666
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !4667, metadata !DIExpression()), !dbg !4668
  %0 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !4669
  %label_decl = bitcast %union.tree_node* %0 to %struct.tree_label_decl*, !dbg !4669
  %label_decl_uid = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl, i32 0, i32 1, !dbg !4669
  %1 = load i32, i32* %label_decl_uid, align 8, !dbg !4669
  store i32 %1, i32* %uid, align 4, !dbg !4668
  %2 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !4670
  %diagnostic_count = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %2, i32 0, i32 1, !dbg !4670
  %arrayidx = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count, i64 0, i64 4, !dbg !4670
  %3 = load i32, i32* %arrayidx, align 8, !dbg !4670
  %tobool = icmp ne i32 %3, 0, !dbg !4670
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false, !dbg !4672

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !4673
  %diagnostic_count1 = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %4, i32 0, i32 1, !dbg !4673
  %arrayidx2 = getelementptr inbounds [12 x i32], [12 x i32]* %diagnostic_count1, i64 0, i64 5, !dbg !4673
  %5 = load i32, i32* %arrayidx2, align 4, !dbg !4673
  %tobool3 = icmp ne i32 %5, 0, !dbg !4673
  br i1 %tobool3, label %land.lhs.true, label %if.end, !dbg !4674

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %6 = load i32, i32* %uid, align 4, !dbg !4675
  %cmp = icmp slt i32 %6, 0, !dbg !4676
  br i1 %cmp, label %if.then, label %if.end, !dbg !4677

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4678, metadata !DIExpression()), !dbg !4680
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4681
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !4681
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4681
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4681
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 2, !dbg !4681
  %9 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !4681
  %tobool4 = icmp ne %struct.VEC_basic_block_gc* %9, null, !dbg !4681
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !4681

cond.true:                                        ; preds = %if.then
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4681
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !4681
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !4681
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !4681
  %x_basic_block_info7 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 2, !dbg !4681
  %12 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info7, align 8, !dbg !4681
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %12, i32 0, i32 0, !dbg !4681
  br label %cond.end, !dbg !4681

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !4681

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4681
  %call = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 2), !dbg !4681
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %gsi, %struct.basic_block_def* %call), !dbg !4682
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4683, metadata !DIExpression()), !dbg !4684
  %13 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !4685
  %call8 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %13), !dbg !4686
  store %union.gimple_statement_d* %call8, %union.gimple_statement_d** %stmt, align 8, !dbg !4687
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4688
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %14, i32 0), !dbg !4689
  %15 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !4690
  %label_decl9 = bitcast %union.tree_node* %15 to %struct.tree_label_decl*, !dbg !4690
  %label_decl_uid10 = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl9, i32 0, i32 1, !dbg !4690
  %16 = load i32, i32* %label_decl_uid10, align 8, !dbg !4690
  store i32 %16, i32* %uid, align 4, !dbg !4691
  br label %if.end, !dbg !4692

if.end:                                           ; preds = %cond.end, %land.lhs.true, %lor.lhs.false
  %17 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !4693
  %cfg11 = getelementptr inbounds %struct.function, %struct.function* %17, i32 0, i32 1, !dbg !4693
  %18 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg11, align 8, !dbg !4693
  %x_label_to_block_map = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %18, i32 0, i32 6, !dbg !4693
  %19 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_label_to_block_map, align 8, !dbg !4693
  %tobool12 = icmp ne %struct.VEC_basic_block_gc* %19, null, !dbg !4693
  br i1 %tobool12, label %cond.true13, label %cond.false17, !dbg !4693

cond.true13:                                      ; preds = %if.end
  %20 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !4693
  %cfg14 = getelementptr inbounds %struct.function, %struct.function* %20, i32 0, i32 1, !dbg !4693
  %21 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg14, align 8, !dbg !4693
  %x_label_to_block_map15 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %21, i32 0, i32 6, !dbg !4693
  %22 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_label_to_block_map15, align 8, !dbg !4693
  %base16 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %22, i32 0, i32 0, !dbg !4693
  br label %cond.end18, !dbg !4693

cond.false17:                                     ; preds = %if.end
  br label %cond.end18, !dbg !4693

cond.end18:                                       ; preds = %cond.false17, %cond.true13
  %cond19 = phi %struct.VEC_basic_block_base* [ %base16, %cond.true13 ], [ null, %cond.false17 ], !dbg !4693
  %call20 = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond19), !dbg !4693
  %23 = load i32, i32* %uid, align 4, !dbg !4695
  %cmp21 = icmp ule i32 %call20, %23, !dbg !4696
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !4697

if.then22:                                        ; preds = %cond.end18
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !4698
  br label %return, !dbg !4698

if.end23:                                         ; preds = %cond.end18
  %24 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !4699
  %cfg24 = getelementptr inbounds %struct.function, %struct.function* %24, i32 0, i32 1, !dbg !4699
  %25 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg24, align 8, !dbg !4699
  %x_label_to_block_map25 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %25, i32 0, i32 6, !dbg !4699
  %26 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_label_to_block_map25, align 8, !dbg !4699
  %tobool26 = icmp ne %struct.VEC_basic_block_gc* %26, null, !dbg !4699
  br i1 %tobool26, label %cond.true27, label %cond.false31, !dbg !4699

cond.true27:                                      ; preds = %if.end23
  %27 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !4699
  %cfg28 = getelementptr inbounds %struct.function, %struct.function* %27, i32 0, i32 1, !dbg !4699
  %28 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg28, align 8, !dbg !4699
  %x_label_to_block_map29 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %28, i32 0, i32 6, !dbg !4699
  %29 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_label_to_block_map29, align 8, !dbg !4699
  %base30 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %29, i32 0, i32 0, !dbg !4699
  br label %cond.end32, !dbg !4699

cond.false31:                                     ; preds = %if.end23
  br label %cond.end32, !dbg !4699

cond.end32:                                       ; preds = %cond.false31, %cond.true27
  %cond33 = phi %struct.VEC_basic_block_base* [ %base30, %cond.true27 ], [ null, %cond.false31 ], !dbg !4699
  %30 = load i32, i32* %uid, align 4, !dbg !4699
  %call34 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond33, i32 %30), !dbg !4699
  store %struct.basic_block_def* %call34, %struct.basic_block_def** %retval, align 8, !dbg !4700
  br label %return, !dbg !4700

return:                                           ; preds = %cond.end32, %if.then22
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %retval, align 8, !dbg !4701
  ret %struct.basic_block_def* %31, !dbg !4701
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !4702 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4705, metadata !DIExpression()), !dbg !4706
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !4707, metadata !DIExpression()), !dbg !4708
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !4709, metadata !DIExpression()), !dbg !4710
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4711
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !4712
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !4713
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !4714
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !4715
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4716
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4717
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !4718
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !4719
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !4720
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4721
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !4722
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !4723
  ret void, !dbg !4724
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %vec_, i32 %ix_) #0 !dbg !4725 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !4730, metadata !DIExpression()), !dbg !4731
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4732, metadata !DIExpression()), !dbg !4731
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4731
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !4731
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4731

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4731
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4731
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !4731
  %3 = load i32, i32* %num, align 8, !dbg !4731
  %cmp = icmp ult i32 %1, %3, !dbg !4731
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4733
  %land.ext = zext i1 %4 to i32, !dbg !4731
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4731
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 2, !dbg !4731
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4731
  %idxprom = zext i32 %6 to i64, !dbg !4731
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !4731
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !4731
  ret %struct.basic_block_def* %7, !dbg !4731
}

declare dso_local %union.gimple_statement_d* @gimple_build_label(%union.tree_node*) #2

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %vec_) #0 !dbg !4734 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !4737, metadata !DIExpression()), !dbg !4738
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4738
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !4738
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4738

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4738
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %1, i32 0, i32 0, !dbg !4738
  %2 = load i32, i32* %num, align 8, !dbg !4738
  br label %cond.end, !dbg !4738

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4738

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4738
  ret i32 %cond, !dbg !4738
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @make_abnormal_goto_edges(%struct.basic_block_def* %bb, i8 zeroext %for_call) #0 !dbg !4739 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %for_call.addr = alloca i8, align 1
  %target_bb = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %label_stmt = alloca %union.gimple_statement_d*, align 8
  %target = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4742, metadata !DIExpression()), !dbg !4743
  store i8 %for_call, i8* %for_call.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %for_call.addr, metadata !4744, metadata !DIExpression()), !dbg !4745
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %target_bb, metadata !4746, metadata !DIExpression()), !dbg !4747
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4748, metadata !DIExpression()), !dbg !4749
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4750
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4750
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4750
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4750
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !4750
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4750
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !4750
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4750
  store %struct.basic_block_def* %3, %struct.basic_block_def** %target_bb, align 8, !dbg !4750
  br label %for.cond, !dbg !4750

for.cond:                                         ; preds = %for.inc21, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %target_bb, align 8, !dbg !4752
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4752
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4752
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4752
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4752
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !4752
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4752
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !4752
  br i1 %cmp, label %for.body, label %for.end23, !dbg !4750

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %target_bb, align 8, !dbg !4754
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %8), !dbg !4756
  %9 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4756
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4756
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !4756
  br label %for.cond3, !dbg !4757

for.cond3:                                        ; preds = %for.inc, %for.body
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4758
  %tobool = icmp ne i8 %call, 0, !dbg !4760
  %lnot = xor i1 %tobool, true, !dbg !4760
  br i1 %lnot, label %for.body4, label %for.end, !dbg !4761

for.body4:                                        ; preds = %for.cond3
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %label_stmt, metadata !4762, metadata !DIExpression()), !dbg !4764
  %call5 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4765
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %label_stmt, align 8, !dbg !4764
  call void @llvm.dbg.declare(metadata %union.tree_node** %target, metadata !4766, metadata !DIExpression()), !dbg !4767
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %label_stmt, align 8, !dbg !4768
  %call6 = call i32 @gimple_code(%union.gimple_statement_d* %11), !dbg !4770
  %cmp7 = icmp ne i32 %call6, 4, !dbg !4771
  br i1 %cmp7, label %if.then, label %if.end, !dbg !4772

if.then:                                          ; preds = %for.body4
  br label %for.end, !dbg !4773

if.end:                                           ; preds = %for.body4
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %label_stmt, align 8, !dbg !4774
  %call8 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %12), !dbg !4775
  store %union.tree_node* %call8, %union.tree_node** %target, align 8, !dbg !4776
  %13 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !4777
  %base = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !4777
  %14 = bitcast %struct.tree_base* %base to i64*, !dbg !4777
  %bf.load = load i64, i64* %14, align 8, !dbg !4777
  %bf.lshr = lshr i64 %bf.load, 16, !dbg !4777
  %bf.clear = and i64 %bf.lshr, 1, !dbg !4777
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4777
  %tobool9 = icmp ne i32 %bf.cast, 0, !dbg !4777
  br i1 %tobool9, label %land.lhs.true, label %lor.lhs.false, !dbg !4779

land.lhs.true:                                    ; preds = %if.end
  %15 = load i8, i8* %for_call.addr, align 1, !dbg !4780
  %tobool10 = icmp ne i8 %15, 0, !dbg !4780
  br i1 %tobool10, label %lor.lhs.false, label %if.then18, !dbg !4781

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.end
  %16 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !4782
  %decl_common = bitcast %union.tree_node* %16 to %struct.tree_decl_common*, !dbg !4782
  %nonlocal_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4782
  %17 = bitcast i40* %nonlocal_flag to i64*, !dbg !4782
  %bf.load11 = load i64, i64* %17, align 8, !dbg !4782
  %bf.lshr12 = lshr i64 %bf.load11, 8, !dbg !4782
  %bf.clear13 = and i64 %bf.lshr12, 1, !dbg !4782
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !4782
  %tobool15 = icmp ne i32 %bf.cast14, 0, !dbg !4782
  br i1 %tobool15, label %land.lhs.true16, label %if.end20, !dbg !4783

land.lhs.true16:                                  ; preds = %lor.lhs.false
  %18 = load i8, i8* %for_call.addr, align 1, !dbg !4784
  %conv = zext i8 %18 to i32, !dbg !4784
  %tobool17 = icmp ne i32 %conv, 0, !dbg !4784
  br i1 %tobool17, label %if.then18, label %if.end20, !dbg !4785

if.then18:                                        ; preds = %land.lhs.true16, %land.lhs.true
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4786
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %target_bb, align 8, !dbg !4788
  %call19 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %19, %struct.basic_block_def* %20, i32 2), !dbg !4789
  br label %for.end, !dbg !4790

if.end20:                                         ; preds = %land.lhs.true16, %lor.lhs.false
  br label %for.inc, !dbg !4791

for.inc:                                          ; preds = %if.end20
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4792
  br label %for.cond3, !dbg !4793, !llvm.loop !4794

for.end:                                          ; preds = %if.then18, %if.then, %for.cond3
  br label %for.inc21, !dbg !4795

for.inc21:                                        ; preds = %for.end
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %target_bb, align 8, !dbg !4752
  %next_bb22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 6, !dbg !4752
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb22, align 8, !dbg !4752
  store %struct.basic_block_def* %22, %struct.basic_block_def** %target_bb, align 8, !dbg !4752
  br label %for.cond, !dbg !4752, !llvm.loop !4796

for.end23:                                        ; preds = %for.cond
  ret void, !dbg !4798
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !4799 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4802, metadata !DIExpression()), !dbg !4803
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !4804
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4804
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !4805
  %conv = zext i1 %cmp to i32, !dbg !4805
  %conv1 = trunc i32 %conv to i8, !dbg !4806
  ret i8 %conv1, !dbg !4807
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !4808 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4811, metadata !DIExpression()), !dbg !4812
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !4813
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4813
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !4814
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4814
  ret %union.gimple_statement_d* %1, !dbg !4815
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %gs) #0 !dbg !4816 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4817, metadata !DIExpression()), !dbg !4818
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4819
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !4820
  ret %union.tree_node* %call, !dbg !4821
}

declare dso_local %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !4822 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !4826, metadata !DIExpression()), !dbg !4827
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !4828
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !4829
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4829
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !4830
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !4830
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !4831
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !4832
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !4833
  ret void, !dbg !4834
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cleanup_dead_labels() #0 !dbg !4835 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %i = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %label = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %stmt54 = alloca %union.gimple_statement_d*, align 8
  %true_label = alloca %union.tree_node*, align 8
  %false_label = alloca %union.tree_node*, align 8
  %i71 = alloca i64, align 8
  %n = alloca i64, align 8
  %case_label = alloca %union.tree_node*, align 8
  %label80 = alloca %union.tree_node*, align 8
  %i89 = alloca i32, align 4
  %n90 = alloca i32, align 4
  %cons = alloca %union.tree_node*, align 8
  %label97 = alloca %union.tree_node*, align 8
  %new_dest = alloca %union.tree_node*, align 8
  %i125 = alloca %struct.gimple_stmt_iterator, align 8
  %label_for_this_bb = alloca %union.tree_node*, align 8
  %tmp139 = alloca %struct.gimple_stmt_iterator, align 8
  %label145 = alloca %union.tree_node*, align 8
  %stmt146 = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4836, metadata !DIExpression()), !dbg !4837
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4838
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4838
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4838
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4838
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 5, !dbg !4838
  %2 = load i32, i32* %x_last_basic_block, align 8, !dbg !4838
  %conv = sext i32 %2 to i64, !dbg !4838
  %call = call i8* @xcalloc(i64 %conv, i64 16), !dbg !4838
  %3 = bitcast i8* %call to %struct.label_record*, !dbg !4838
  store %struct.label_record* %3, %struct.label_record** @label_for_bb, align 8, !dbg !4839
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4840
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !4840
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4840
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4840
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 0, !dbg !4840
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4840
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 6, !dbg !4840
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4840
  store %struct.basic_block_def* %7, %struct.basic_block_def** %bb, align 8, !dbg !4840
  br label %for.cond, !dbg !4840

for.cond:                                         ; preds = %for.inc40, %entry
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4842
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4842
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !4842
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !4842
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !4842
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 1, !dbg !4842
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4842
  %cmp = icmp ne %struct.basic_block_def* %8, %11, !dbg !4842
  br i1 %cmp, label %for.body, label %for.end42, !dbg !4840

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4844, metadata !DIExpression()), !dbg !4846
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4847
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %12), !dbg !4849
  %13 = bitcast %struct.gimple_stmt_iterator* %i to i8*, !dbg !4849
  %14 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4849
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 24, i1 false), !dbg !4849
  br label %for.cond6, !dbg !4850

for.cond6:                                        ; preds = %for.inc, %for.body
  %call7 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !4851
  %tobool = icmp ne i8 %call7, 0, !dbg !4853
  %lnot = xor i1 %tobool, true, !dbg !4853
  br i1 %lnot, label %for.body8, label %for.end, !dbg !4854

for.body8:                                        ; preds = %for.cond6
  call void @llvm.dbg.declare(metadata %union.tree_node** %label, metadata !4855, metadata !DIExpression()), !dbg !4857
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4858, metadata !DIExpression()), !dbg !4859
  %call9 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !4860
  store %union.gimple_statement_d* %call9, %union.gimple_statement_d** %stmt, align 8, !dbg !4859
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4861
  %call10 = call i32 @gimple_code(%union.gimple_statement_d* %15), !dbg !4863
  %cmp11 = icmp ne i32 %call10, 4, !dbg !4864
  br i1 %cmp11, label %if.then, label %if.end, !dbg !4865

if.then:                                          ; preds = %for.body8
  br label %for.end, !dbg !4866

if.end:                                           ; preds = %for.body8
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4867
  %call13 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %16), !dbg !4868
  store %union.tree_node* %call13, %union.tree_node** %label, align 8, !dbg !4869
  %17 = load %struct.label_record*, %struct.label_record** @label_for_bb, align 8, !dbg !4870
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4872
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 9, !dbg !4873
  %19 = load i32, i32* %index, align 8, !dbg !4873
  %idxprom = sext i32 %19 to i64, !dbg !4870
  %arrayidx = getelementptr inbounds %struct.label_record, %struct.label_record* %17, i64 %idxprom, !dbg !4870
  %label14 = getelementptr inbounds %struct.label_record, %struct.label_record* %arrayidx, i32 0, i32 0, !dbg !4874
  %20 = load %union.tree_node*, %union.tree_node** %label14, align 8, !dbg !4874
  %tobool15 = icmp ne %union.tree_node* %20, null, !dbg !4870
  br i1 %tobool15, label %if.end21, label %if.then16, !dbg !4875

if.then16:                                        ; preds = %if.end
  %21 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !4876
  %22 = load %struct.label_record*, %struct.label_record** @label_for_bb, align 8, !dbg !4878
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4879
  %index17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 9, !dbg !4880
  %24 = load i32, i32* %index17, align 8, !dbg !4880
  %idxprom18 = sext i32 %24 to i64, !dbg !4878
  %arrayidx19 = getelementptr inbounds %struct.label_record, %struct.label_record* %22, i64 %idxprom18, !dbg !4878
  %label20 = getelementptr inbounds %struct.label_record, %struct.label_record* %arrayidx19, i32 0, i32 0, !dbg !4881
  store %union.tree_node* %21, %union.tree_node** %label20, align 8, !dbg !4882
  br label %for.inc, !dbg !4883

if.end21:                                         ; preds = %if.end
  %25 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !4884
  %decl_common = bitcast %union.tree_node* %25 to %struct.tree_decl_common*, !dbg !4884
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4884
  %26 = bitcast i40* %artificial_flag to i64*, !dbg !4884
  %bf.load = load i64, i64* %26, align 8, !dbg !4884
  %bf.lshr = lshr i64 %bf.load, 12, !dbg !4884
  %bf.clear = and i64 %bf.lshr, 1, !dbg !4884
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4884
  %tobool22 = icmp ne i32 %bf.cast, 0, !dbg !4884
  br i1 %tobool22, label %if.end39, label %land.lhs.true, !dbg !4886

land.lhs.true:                                    ; preds = %if.end21
  %27 = load %struct.label_record*, %struct.label_record** @label_for_bb, align 8, !dbg !4887
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4887
  %index23 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 9, !dbg !4887
  %29 = load i32, i32* %index23, align 8, !dbg !4887
  %idxprom24 = sext i32 %29 to i64, !dbg !4887
  %arrayidx25 = getelementptr inbounds %struct.label_record, %struct.label_record* %27, i64 %idxprom24, !dbg !4887
  %label26 = getelementptr inbounds %struct.label_record, %struct.label_record* %arrayidx25, i32 0, i32 0, !dbg !4887
  %30 = load %union.tree_node*, %union.tree_node** %label26, align 8, !dbg !4887
  %decl_common27 = bitcast %union.tree_node* %30 to %struct.tree_decl_common*, !dbg !4887
  %artificial_flag28 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common27, i32 0, i32 2, !dbg !4887
  %31 = bitcast i40* %artificial_flag28 to i64*, !dbg !4887
  %bf.load29 = load i64, i64* %31, align 8, !dbg !4887
  %bf.lshr30 = lshr i64 %bf.load29, 12, !dbg !4887
  %bf.clear31 = and i64 %bf.lshr30, 1, !dbg !4887
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !4887
  %tobool33 = icmp ne i32 %bf.cast32, 0, !dbg !4887
  br i1 %tobool33, label %if.then34, label %if.end39, !dbg !4888

if.then34:                                        ; preds = %land.lhs.true
  %32 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !4889
  %33 = load %struct.label_record*, %struct.label_record** @label_for_bb, align 8, !dbg !4891
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4892
  %index35 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 9, !dbg !4893
  %35 = load i32, i32* %index35, align 8, !dbg !4893
  %idxprom36 = sext i32 %35 to i64, !dbg !4891
  %arrayidx37 = getelementptr inbounds %struct.label_record, %struct.label_record* %33, i64 %idxprom36, !dbg !4891
  %label38 = getelementptr inbounds %struct.label_record, %struct.label_record* %arrayidx37, i32 0, i32 0, !dbg !4894
  store %union.tree_node* %32, %union.tree_node** %label38, align 8, !dbg !4895
  br label %for.end, !dbg !4896

if.end39:                                         ; preds = %land.lhs.true, %if.end21
  br label %for.inc, !dbg !4897

for.inc:                                          ; preds = %if.end39, %if.then16
  call void @gsi_next(%struct.gimple_stmt_iterator* %i), !dbg !4898
  br label %for.cond6, !dbg !4899, !llvm.loop !4900

for.end:                                          ; preds = %if.then34, %if.then, %for.cond6
  br label %for.inc40, !dbg !4902

for.inc40:                                        ; preds = %for.end
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4842
  %next_bb41 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 6, !dbg !4842
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb41, align 8, !dbg !4842
  store %struct.basic_block_def* %37, %struct.basic_block_def** %bb, align 8, !dbg !4842
  br label %for.cond, !dbg !4842, !llvm.loop !4903

for.end42:                                        ; preds = %for.cond
  %38 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4905
  %add.ptr43 = getelementptr inbounds %struct.function, %struct.function* %38, i64 0, !dbg !4905
  %cfg44 = getelementptr inbounds %struct.function, %struct.function* %add.ptr43, i32 0, i32 1, !dbg !4905
  %39 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg44, align 8, !dbg !4905
  %x_entry_block_ptr45 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %39, i32 0, i32 0, !dbg !4905
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr45, align 8, !dbg !4905
  %next_bb46 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 6, !dbg !4905
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb46, align 8, !dbg !4905
  store %struct.basic_block_def* %41, %struct.basic_block_def** %bb, align 8, !dbg !4905
  br label %for.cond47, !dbg !4905

for.cond47:                                       ; preds = %for.inc111, %for.end42
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4907
  %43 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4907
  %add.ptr48 = getelementptr inbounds %struct.function, %struct.function* %43, i64 0, !dbg !4907
  %cfg49 = getelementptr inbounds %struct.function, %struct.function* %add.ptr48, i32 0, i32 1, !dbg !4907
  %44 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg49, align 8, !dbg !4907
  %x_exit_block_ptr50 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %44, i32 0, i32 1, !dbg !4907
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr50, align 8, !dbg !4907
  %cmp51 = icmp ne %struct.basic_block_def* %42, %45, !dbg !4907
  br i1 %cmp51, label %for.body53, label %for.end113, !dbg !4905

for.body53:                                       ; preds = %for.cond47
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt54, metadata !4909, metadata !DIExpression()), !dbg !4911
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4912
  %call55 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %46), !dbg !4913
  store %union.gimple_statement_d* %call55, %union.gimple_statement_d** %stmt54, align 8, !dbg !4911
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt54, align 8, !dbg !4914
  %tobool56 = icmp ne %union.gimple_statement_d* %47, null, !dbg !4914
  br i1 %tobool56, label %if.end58, label %if.then57, !dbg !4916

if.then57:                                        ; preds = %for.body53
  br label %for.inc111, !dbg !4917

if.end58:                                         ; preds = %for.body53
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt54, align 8, !dbg !4918
  %call59 = call i32 @gimple_code(%union.gimple_statement_d* %48), !dbg !4919
  switch i32 %call59, label %sw.default [
    i32 1, label %sw.bb
    i32 5, label %sw.bb70
    i32 7, label %sw.bb88
    i32 3, label %sw.bb104
  ], !dbg !4920

sw.bb:                                            ; preds = %if.end58
  call void @llvm.dbg.declare(metadata %union.tree_node** %true_label, metadata !4921, metadata !DIExpression()), !dbg !4924
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt54, align 8, !dbg !4925
  %call60 = call %union.tree_node* @gimple_cond_true_label(%union.gimple_statement_d* %49), !dbg !4926
  store %union.tree_node* %call60, %union.tree_node** %true_label, align 8, !dbg !4924
  call void @llvm.dbg.declare(metadata %union.tree_node** %false_label, metadata !4927, metadata !DIExpression()), !dbg !4928
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt54, align 8, !dbg !4929
  %call61 = call %union.tree_node* @gimple_cond_false_label(%union.gimple_statement_d* %50), !dbg !4930
  store %union.tree_node* %call61, %union.tree_node** %false_label, align 8, !dbg !4928
  %51 = load %union.tree_node*, %union.tree_node** %true_label, align 8, !dbg !4931
  %tobool62 = icmp ne %union.tree_node* %51, null, !dbg !4931
  br i1 %tobool62, label %if.then63, label %if.end65, !dbg !4933

if.then63:                                        ; preds = %sw.bb
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt54, align 8, !dbg !4934
  %53 = load %union.tree_node*, %union.tree_node** %true_label, align 8, !dbg !4935
  %call64 = call %union.tree_node* @main_block_label(%union.tree_node* %53), !dbg !4936
  call void @gimple_cond_set_true_label(%union.gimple_statement_d* %52, %union.tree_node* %call64), !dbg !4937
  br label %if.end65, !dbg !4937

if.end65:                                         ; preds = %if.then63, %sw.bb
  %54 = load %union.tree_node*, %union.tree_node** %false_label, align 8, !dbg !4938
  %tobool66 = icmp ne %union.tree_node* %54, null, !dbg !4938
  br i1 %tobool66, label %if.then67, label %if.end69, !dbg !4940

if.then67:                                        ; preds = %if.end65
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt54, align 8, !dbg !4941
  %56 = load %union.tree_node*, %union.tree_node** %false_label, align 8, !dbg !4942
  %call68 = call %union.tree_node* @main_block_label(%union.tree_node* %56), !dbg !4943
  call void @gimple_cond_set_false_label(%union.gimple_statement_d* %55, %union.tree_node* %call68), !dbg !4944
  br label %if.end69, !dbg !4944

if.end69:                                         ; preds = %if.then67, %if.end65
  br label %sw.epilog, !dbg !4945

sw.bb70:                                          ; preds = %if.end58
  call void @llvm.dbg.declare(metadata i64* %i71, metadata !4946, metadata !DIExpression()), !dbg !4948
  call void @llvm.dbg.declare(metadata i64* %n, metadata !4949, metadata !DIExpression()), !dbg !4950
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt54, align 8, !dbg !4951
  %call72 = call i32 @gimple_switch_num_labels(%union.gimple_statement_d* %57), !dbg !4952
  %conv73 = zext i32 %call72 to i64, !dbg !4952
  store i64 %conv73, i64* %n, align 8, !dbg !4950
  store i64 0, i64* %i71, align 8, !dbg !4953
  br label %for.cond74, !dbg !4955

for.cond74:                                       ; preds = %for.inc86, %sw.bb70
  %58 = load i64, i64* %i71, align 8, !dbg !4956
  %59 = load i64, i64* %n, align 8, !dbg !4958
  %cmp75 = icmp ult i64 %58, %59, !dbg !4959
  br i1 %cmp75, label %for.body77, label %for.end87, !dbg !4960

for.body77:                                       ; preds = %for.cond74
  call void @llvm.dbg.declare(metadata %union.tree_node** %case_label, metadata !4961, metadata !DIExpression()), !dbg !4963
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt54, align 8, !dbg !4964
  %61 = load i64, i64* %i71, align 8, !dbg !4965
  %conv78 = trunc i64 %61 to i32, !dbg !4965
  %call79 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %60, i32 %conv78), !dbg !4966
  store %union.tree_node* %call79, %union.tree_node** %case_label, align 8, !dbg !4963
  call void @llvm.dbg.declare(metadata %union.tree_node** %label80, metadata !4967, metadata !DIExpression()), !dbg !4968
  %62 = load %union.tree_node*, %union.tree_node** %case_label, align 8, !dbg !4969
  %exp = bitcast %union.tree_node* %62 to %struct.tree_exp*, !dbg !4969
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4969
  %arrayidx81 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !4969
  %63 = load %union.tree_node*, %union.tree_node** %arrayidx81, align 8, !dbg !4969
  %call82 = call %union.tree_node* @main_block_label(%union.tree_node* %63), !dbg !4970
  store %union.tree_node* %call82, %union.tree_node** %label80, align 8, !dbg !4968
  %64 = load %union.tree_node*, %union.tree_node** %label80, align 8, !dbg !4971
  %65 = load %union.tree_node*, %union.tree_node** %case_label, align 8, !dbg !4972
  %exp83 = bitcast %union.tree_node* %65 to %struct.tree_exp*, !dbg !4972
  %operands84 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp83, i32 0, i32 3, !dbg !4972
  %arrayidx85 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands84, i64 0, i64 2, !dbg !4972
  store %union.tree_node* %64, %union.tree_node** %arrayidx85, align 8, !dbg !4973
  br label %for.inc86, !dbg !4974

for.inc86:                                        ; preds = %for.body77
  %66 = load i64, i64* %i71, align 8, !dbg !4975
  %inc = add i64 %66, 1, !dbg !4975
  store i64 %inc, i64* %i71, align 8, !dbg !4975
  br label %for.cond74, !dbg !4976, !llvm.loop !4977

for.end87:                                        ; preds = %for.cond74
  br label %sw.epilog, !dbg !4979

sw.bb88:                                          ; preds = %if.end58
  call void @llvm.dbg.declare(metadata i32* %i89, metadata !4980, metadata !DIExpression()), !dbg !4982
  call void @llvm.dbg.declare(metadata i32* %n90, metadata !4983, metadata !DIExpression()), !dbg !4984
  %67 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt54, align 8, !dbg !4985
  %call91 = call i32 @gimple_asm_nlabels(%union.gimple_statement_d* %67), !dbg !4986
  store i32 %call91, i32* %n90, align 4, !dbg !4984
  store i32 0, i32* %i89, align 4, !dbg !4987
  br label %for.cond92, !dbg !4989

for.cond92:                                       ; preds = %for.inc101, %sw.bb88
  %68 = load i32, i32* %i89, align 4, !dbg !4990
  %69 = load i32, i32* %n90, align 4, !dbg !4992
  %cmp93 = icmp slt i32 %68, %69, !dbg !4993
  br i1 %cmp93, label %for.body95, label %for.end103, !dbg !4994

for.body95:                                       ; preds = %for.cond92
  call void @llvm.dbg.declare(metadata %union.tree_node** %cons, metadata !4995, metadata !DIExpression()), !dbg !4997
  %70 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt54, align 8, !dbg !4998
  %71 = load i32, i32* %i89, align 4, !dbg !4999
  %call96 = call %union.tree_node* @gimple_asm_label_op(%union.gimple_statement_d* %70, i32 %71), !dbg !5000
  store %union.tree_node* %call96, %union.tree_node** %cons, align 8, !dbg !4997
  call void @llvm.dbg.declare(metadata %union.tree_node** %label97, metadata !5001, metadata !DIExpression()), !dbg !5002
  %72 = load %union.tree_node*, %union.tree_node** %cons, align 8, !dbg !5003
  %list = bitcast %union.tree_node* %72 to %struct.tree_list*, !dbg !5003
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !5003
  %73 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5003
  %call98 = call %union.tree_node* @main_block_label(%union.tree_node* %73), !dbg !5004
  store %union.tree_node* %call98, %union.tree_node** %label97, align 8, !dbg !5002
  %74 = load %union.tree_node*, %union.tree_node** %label97, align 8, !dbg !5005
  %75 = load %union.tree_node*, %union.tree_node** %cons, align 8, !dbg !5006
  %list99 = bitcast %union.tree_node* %75 to %struct.tree_list*, !dbg !5006
  %value100 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list99, i32 0, i32 2, !dbg !5006
  store %union.tree_node* %74, %union.tree_node** %value100, align 8, !dbg !5007
  br label %for.inc101, !dbg !5008

for.inc101:                                       ; preds = %for.body95
  %76 = load i32, i32* %i89, align 4, !dbg !5009
  %inc102 = add nsw i32 %76, 1, !dbg !5009
  store i32 %inc102, i32* %i89, align 4, !dbg !5009
  br label %for.cond92, !dbg !5010, !llvm.loop !5011

for.end103:                                       ; preds = %for.cond92
  br label %sw.epilog, !dbg !5013

sw.bb104:                                         ; preds = %if.end58
  %77 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt54, align 8, !dbg !5014
  %call105 = call zeroext i8 @computed_goto_p(%union.gimple_statement_d* %77), !dbg !5016
  %tobool106 = icmp ne i8 %call105, 0, !dbg !5016
  br i1 %tobool106, label %if.end110, label %if.then107, !dbg !5017

if.then107:                                       ; preds = %sw.bb104
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_dest, metadata !5018, metadata !DIExpression()), !dbg !5020
  %78 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt54, align 8, !dbg !5021
  %call108 = call %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %78), !dbg !5022
  %call109 = call %union.tree_node* @main_block_label(%union.tree_node* %call108), !dbg !5023
  store %union.tree_node* %call109, %union.tree_node** %new_dest, align 8, !dbg !5020
  %79 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt54, align 8, !dbg !5024
  %80 = load %union.tree_node*, %union.tree_node** %new_dest, align 8, !dbg !5025
  call void @gimple_goto_set_dest(%union.gimple_statement_d* %79, %union.tree_node* %80), !dbg !5026
  br label %if.end110, !dbg !5027

if.end110:                                        ; preds = %if.then107, %sw.bb104
  br label %sw.epilog, !dbg !5028

sw.default:                                       ; preds = %if.end58
  br label %sw.epilog, !dbg !5029

sw.epilog:                                        ; preds = %sw.default, %if.end110, %for.end103, %for.end87, %if.end69
  br label %for.inc111, !dbg !5030

for.inc111:                                       ; preds = %sw.epilog, %if.then57
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4907
  %next_bb112 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %81, i32 0, i32 6, !dbg !4907
  %82 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb112, align 8, !dbg !4907
  store %struct.basic_block_def* %82, %struct.basic_block_def** %bb, align 8, !dbg !4907
  br label %for.cond47, !dbg !4907, !llvm.loop !5031

for.end113:                                       ; preds = %for.cond47
  call void @cleanup_dead_labels_eh(), !dbg !5033
  %83 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5034
  %add.ptr114 = getelementptr inbounds %struct.function, %struct.function* %83, i64 0, !dbg !5034
  %cfg115 = getelementptr inbounds %struct.function, %struct.function* %add.ptr114, i32 0, i32 1, !dbg !5034
  %84 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg115, align 8, !dbg !5034
  %x_entry_block_ptr116 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %84, i32 0, i32 0, !dbg !5034
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr116, align 8, !dbg !5034
  %next_bb117 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %85, i32 0, i32 6, !dbg !5034
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb117, align 8, !dbg !5034
  store %struct.basic_block_def* %86, %struct.basic_block_def** %bb, align 8, !dbg !5034
  br label %for.cond118, !dbg !5034

for.cond118:                                      ; preds = %for.inc179, %for.end113
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5036
  %88 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5036
  %add.ptr119 = getelementptr inbounds %struct.function, %struct.function* %88, i64 0, !dbg !5036
  %cfg120 = getelementptr inbounds %struct.function, %struct.function* %add.ptr119, i32 0, i32 1, !dbg !5036
  %89 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg120, align 8, !dbg !5036
  %x_exit_block_ptr121 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %89, i32 0, i32 1, !dbg !5036
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr121, align 8, !dbg !5036
  %cmp122 = icmp ne %struct.basic_block_def* %87, %90, !dbg !5036
  br i1 %cmp122, label %for.body124, label %for.end181, !dbg !5034

for.body124:                                      ; preds = %for.cond118
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i125, metadata !5038, metadata !DIExpression()), !dbg !5040
  call void @llvm.dbg.declare(metadata %union.tree_node** %label_for_this_bb, metadata !5041, metadata !DIExpression()), !dbg !5042
  %91 = load %struct.label_record*, %struct.label_record** @label_for_bb, align 8, !dbg !5043
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5044
  %index126 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %92, i32 0, i32 9, !dbg !5045
  %93 = load i32, i32* %index126, align 8, !dbg !5045
  %idxprom127 = sext i32 %93 to i64, !dbg !5043
  %arrayidx128 = getelementptr inbounds %struct.label_record, %struct.label_record* %91, i64 %idxprom127, !dbg !5043
  %label129 = getelementptr inbounds %struct.label_record, %struct.label_record* %arrayidx128, i32 0, i32 0, !dbg !5046
  %94 = load %union.tree_node*, %union.tree_node** %label129, align 8, !dbg !5046
  store %union.tree_node* %94, %union.tree_node** %label_for_this_bb, align 8, !dbg !5042
  %95 = load %union.tree_node*, %union.tree_node** %label_for_this_bb, align 8, !dbg !5047
  %tobool130 = icmp ne %union.tree_node* %95, null, !dbg !5047
  br i1 %tobool130, label %if.end132, label %if.then131, !dbg !5049

if.then131:                                       ; preds = %for.body124
  br label %for.inc179, !dbg !5050

if.end132:                                        ; preds = %for.body124
  %96 = load %struct.label_record*, %struct.label_record** @label_for_bb, align 8, !dbg !5051
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5053
  %index133 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %97, i32 0, i32 9, !dbg !5054
  %98 = load i32, i32* %index133, align 8, !dbg !5054
  %idxprom134 = sext i32 %98 to i64, !dbg !5051
  %arrayidx135 = getelementptr inbounds %struct.label_record, %struct.label_record* %96, i64 %idxprom134, !dbg !5051
  %used = getelementptr inbounds %struct.label_record, %struct.label_record* %arrayidx135, i32 0, i32 1, !dbg !5055
  %99 = load i8, i8* %used, align 8, !dbg !5055
  %tobool136 = icmp ne i8 %99, 0, !dbg !5051
  br i1 %tobool136, label %if.end138, label %if.then137, !dbg !5056

if.then137:                                       ; preds = %if.end132
  store %union.tree_node* null, %union.tree_node** %label_for_this_bb, align 8, !dbg !5057
  br label %if.end138, !dbg !5058

if.end138:                                        ; preds = %if.then137, %if.end132
  %100 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5059
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp139, %struct.basic_block_def* %100), !dbg !5061
  %101 = bitcast %struct.gimple_stmt_iterator* %i125 to i8*, !dbg !5061
  %102 = bitcast %struct.gimple_stmt_iterator* %tmp139 to i8*, !dbg !5061
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %101, i8* align 8 %102, i64 24, i1 false), !dbg !5061
  br label %for.cond140, !dbg !5062

for.cond140:                                      ; preds = %if.end177, %if.end138
  %call141 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i125), !dbg !5063
  %tobool142 = icmp ne i8 %call141, 0, !dbg !5065
  %lnot143 = xor i1 %tobool142, true, !dbg !5065
  br i1 %lnot143, label %for.body144, label %for.end178, !dbg !5066

for.body144:                                      ; preds = %for.cond140
  call void @llvm.dbg.declare(metadata %union.tree_node** %label145, metadata !5067, metadata !DIExpression()), !dbg !5069
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt146, metadata !5070, metadata !DIExpression()), !dbg !5071
  %call147 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i125), !dbg !5072
  store %union.gimple_statement_d* %call147, %union.gimple_statement_d** %stmt146, align 8, !dbg !5071
  %103 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt146, align 8, !dbg !5073
  %call148 = call i32 @gimple_code(%union.gimple_statement_d* %103), !dbg !5075
  %cmp149 = icmp ne i32 %call148, 4, !dbg !5076
  br i1 %cmp149, label %if.then151, label %if.end152, !dbg !5077

if.then151:                                       ; preds = %for.body144
  br label %for.end178, !dbg !5078

if.end152:                                        ; preds = %for.body144
  %104 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt146, align 8, !dbg !5079
  %call153 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %104), !dbg !5080
  store %union.tree_node* %call153, %union.tree_node** %label145, align 8, !dbg !5081
  %105 = load %union.tree_node*, %union.tree_node** %label145, align 8, !dbg !5082
  %106 = load %union.tree_node*, %union.tree_node** %label_for_this_bb, align 8, !dbg !5084
  %cmp154 = icmp eq %union.tree_node* %105, %106, !dbg !5085
  br i1 %cmp154, label %if.then176, label %lor.lhs.false, !dbg !5086

lor.lhs.false:                                    ; preds = %if.end152
  %107 = load %union.tree_node*, %union.tree_node** %label145, align 8, !dbg !5087
  %decl_common156 = bitcast %union.tree_node* %107 to %struct.tree_decl_common*, !dbg !5087
  %artificial_flag157 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common156, i32 0, i32 2, !dbg !5087
  %108 = bitcast i40* %artificial_flag157 to i64*, !dbg !5087
  %bf.load158 = load i64, i64* %108, align 8, !dbg !5087
  %bf.lshr159 = lshr i64 %bf.load158, 12, !dbg !5087
  %bf.clear160 = and i64 %bf.lshr159, 1, !dbg !5087
  %bf.cast161 = trunc i64 %bf.clear160 to i32, !dbg !5087
  %tobool162 = icmp ne i32 %bf.cast161, 0, !dbg !5087
  br i1 %tobool162, label %lor.lhs.false163, label %if.then176, !dbg !5088

lor.lhs.false163:                                 ; preds = %lor.lhs.false
  %109 = load %union.tree_node*, %union.tree_node** %label145, align 8, !dbg !5089
  %decl_common164 = bitcast %union.tree_node* %109 to %struct.tree_decl_common*, !dbg !5089
  %nonlocal_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common164, i32 0, i32 2, !dbg !5089
  %110 = bitcast i40* %nonlocal_flag to i64*, !dbg !5089
  %bf.load165 = load i64, i64* %110, align 8, !dbg !5089
  %bf.lshr166 = lshr i64 %bf.load165, 8, !dbg !5089
  %bf.clear167 = and i64 %bf.lshr166, 1, !dbg !5089
  %bf.cast168 = trunc i64 %bf.clear167 to i32, !dbg !5089
  %tobool169 = icmp ne i32 %bf.cast168, 0, !dbg !5089
  br i1 %tobool169, label %if.then176, label %lor.lhs.false170, !dbg !5090

lor.lhs.false170:                                 ; preds = %lor.lhs.false163
  %111 = load %union.tree_node*, %union.tree_node** %label145, align 8, !dbg !5091
  %base = bitcast %union.tree_node* %111 to %struct.tree_base*, !dbg !5091
  %112 = bitcast %struct.tree_base* %base to i64*, !dbg !5091
  %bf.load171 = load i64, i64* %112, align 8, !dbg !5091
  %bf.lshr172 = lshr i64 %bf.load171, 16, !dbg !5091
  %bf.clear173 = and i64 %bf.lshr172, 1, !dbg !5091
  %bf.cast174 = trunc i64 %bf.clear173 to i32, !dbg !5091
  %tobool175 = icmp ne i32 %bf.cast174, 0, !dbg !5091
  br i1 %tobool175, label %if.then176, label %if.else, !dbg !5092

if.then176:                                       ; preds = %lor.lhs.false170, %lor.lhs.false163, %lor.lhs.false, %if.end152
  call void @gsi_next(%struct.gimple_stmt_iterator* %i125), !dbg !5093
  br label %if.end177, !dbg !5093

if.else:                                          ; preds = %lor.lhs.false170
  call void @gsi_remove(%struct.gimple_stmt_iterator* %i125, i8 zeroext 1), !dbg !5094
  br label %if.end177

if.end177:                                        ; preds = %if.else, %if.then176
  br label %for.cond140, !dbg !5095, !llvm.loop !5096

for.end178:                                       ; preds = %if.then151, %for.cond140
  br label %for.inc179, !dbg !5098

for.inc179:                                       ; preds = %for.end178, %if.then131
  %113 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5036
  %next_bb180 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %113, i32 0, i32 6, !dbg !5036
  %114 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb180, align 8, !dbg !5036
  store %struct.basic_block_def* %114, %struct.basic_block_def** %bb, align 8, !dbg !5036
  br label %for.cond118, !dbg !5036, !llvm.loop !5099

for.end181:                                       ; preds = %for.cond118
  %115 = load %struct.label_record*, %struct.label_record** @label_for_bb, align 8, !dbg !5101
  %116 = bitcast %struct.label_record* %115 to i8*, !dbg !5101
  call void @free(i8* %116), !dbg !5102
  ret void, !dbg !5103
}

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_true_label(%union.gimple_statement_d* %gs) #0 !dbg !5104 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5105, metadata !DIExpression()), !dbg !5106
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5107
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 2), !dbg !5108
  ret %union.tree_node* %call, !dbg !5109
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_false_label(%union.gimple_statement_d* %gs) #0 !dbg !5110 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5111, metadata !DIExpression()), !dbg !5112
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5113
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 3), !dbg !5114
  ret %union.tree_node* %call, !dbg !5115
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_true_label(%union.gimple_statement_d* %gs, %union.tree_node* %label) #0 !dbg !5116 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %label.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5119, metadata !DIExpression()), !dbg !5120
  store %union.tree_node* %label, %union.tree_node** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %label.addr, metadata !5121, metadata !DIExpression()), !dbg !5122
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5123
  %1 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !5124
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 2, %union.tree_node* %1), !dbg !5125
  ret void, !dbg !5126
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @main_block_label(%union.tree_node* %label) #0 !dbg !5127 {
entry:
  %label.addr = alloca %union.tree_node*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %main_label = alloca %union.tree_node*, align 8
  store %union.tree_node* %label, %union.tree_node** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %label.addr, metadata !5130, metadata !DIExpression()), !dbg !5131
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5132, metadata !DIExpression()), !dbg !5133
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5134
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5134
  %1 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !5134
  %call = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr, %union.tree_node* %1), !dbg !5134
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !5133
  call void @llvm.dbg.declare(metadata %union.tree_node** %main_label, metadata !5135, metadata !DIExpression()), !dbg !5136
  %2 = load %struct.label_record*, %struct.label_record** @label_for_bb, align 8, !dbg !5137
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5138
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 9, !dbg !5139
  %4 = load i32, i32* %index, align 8, !dbg !5139
  %idxprom = sext i32 %4 to i64, !dbg !5137
  %arrayidx = getelementptr inbounds %struct.label_record, %struct.label_record* %2, i64 %idxprom, !dbg !5137
  %label1 = getelementptr inbounds %struct.label_record, %struct.label_record* %arrayidx, i32 0, i32 0, !dbg !5140
  %5 = load %union.tree_node*, %union.tree_node** %label1, align 8, !dbg !5140
  store %union.tree_node* %5, %union.tree_node** %main_label, align 8, !dbg !5136
  %6 = load %union.tree_node*, %union.tree_node** %main_label, align 8, !dbg !5141
  %tobool = icmp ne %union.tree_node* %6, null, !dbg !5141
  br i1 %tobool, label %if.end, label %if.then, !dbg !5143

if.then:                                          ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !5144
  %8 = load %struct.label_record*, %struct.label_record** @label_for_bb, align 8, !dbg !5146
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5147
  %index2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 9, !dbg !5148
  %10 = load i32, i32* %index2, align 8, !dbg !5148
  %idxprom3 = sext i32 %10 to i64, !dbg !5146
  %arrayidx4 = getelementptr inbounds %struct.label_record, %struct.label_record* %8, i64 %idxprom3, !dbg !5146
  %label5 = getelementptr inbounds %struct.label_record, %struct.label_record* %arrayidx4, i32 0, i32 0, !dbg !5149
  store %union.tree_node* %7, %union.tree_node** %label5, align 8, !dbg !5150
  %11 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !5151
  store %union.tree_node* %11, %union.tree_node** %main_label, align 8, !dbg !5152
  br label %if.end, !dbg !5153

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.label_record*, %struct.label_record** @label_for_bb, align 8, !dbg !5154
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5155
  %index6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 9, !dbg !5156
  %14 = load i32, i32* %index6, align 8, !dbg !5156
  %idxprom7 = sext i32 %14 to i64, !dbg !5154
  %arrayidx8 = getelementptr inbounds %struct.label_record, %struct.label_record* %12, i64 %idxprom7, !dbg !5154
  %used = getelementptr inbounds %struct.label_record, %struct.label_record* %arrayidx8, i32 0, i32 1, !dbg !5157
  store i8 1, i8* %used, align 8, !dbg !5158
  %15 = load %union.tree_node*, %union.tree_node** %main_label, align 8, !dbg !5159
  ret %union.tree_node* %15, !dbg !5160
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_false_label(%union.gimple_statement_d* %gs, %union.tree_node* %label) #0 !dbg !5161 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %label.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5162, metadata !DIExpression()), !dbg !5163
  store %union.tree_node* %label, %union.tree_node** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %label.addr, metadata !5164, metadata !DIExpression()), !dbg !5165
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5166
  %1 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !5167
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 3, %union.tree_node* %1), !dbg !5168
  ret void, !dbg !5169
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_switch_num_labels(%union.gimple_statement_d* %gs) #0 !dbg !5170 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5173, metadata !DIExpression()), !dbg !5174
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !5175, metadata !DIExpression()), !dbg !5176
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5177
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !5178
  store i32 %call, i32* %num_ops, align 4, !dbg !5179
  %1 = load i32, i32* %num_ops, align 4, !dbg !5180
  %cmp = icmp ugt i32 %1, 1, !dbg !5180
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5180

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.64, i64 0, i64 0), i32 3162, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5180
  br label %cond.end, !dbg !5180

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5180

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5180
  %2 = load i32, i32* %num_ops, align 4, !dbg !5181
  %sub = sub i32 %2, 1, !dbg !5182
  ret i32 %sub, !dbg !5183
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !5184 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5187, metadata !DIExpression()), !dbg !5188
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !5189, metadata !DIExpression()), !dbg !5190
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5191
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !5191
  %1 = load i32, i32* %index.addr, align 4, !dbg !5191
  %add = add i32 %1, 1, !dbg !5191
  %cmp = icmp ugt i32 %call, %add, !dbg !5191
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5191

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.64, i64 0, i64 0), i32 3215, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5191
  br label %cond.end, !dbg !5191

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5191

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5191
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5192
  %3 = load i32, i32* %index.addr, align 4, !dbg !5193
  %add1 = add i32 %3, 1, !dbg !5194
  %call2 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %2, i32 %add1), !dbg !5195
  ret %union.tree_node* %call2, !dbg !5196
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_asm_nlabels(%union.gimple_statement_d* %gs) #0 !dbg !5197 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5198, metadata !DIExpression()), !dbg !5199
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5200
  %gimple_asm = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_asm*, !dbg !5201
  %nl = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 5, !dbg !5202
  %1 = load i8, i8* %nl, align 1, !dbg !5202
  %conv = zext i8 %1 to i32, !dbg !5200
  ret i32 %conv, !dbg !5203
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_asm_label_op(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !5204 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5205, metadata !DIExpression()), !dbg !5206
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !5207, metadata !DIExpression()), !dbg !5208
  %0 = load i32, i32* %index.addr, align 4, !dbg !5209
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5209
  %gimple_asm = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_asm*, !dbg !5209
  %nl = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i32 0, i32 5, !dbg !5209
  %2 = load i8, i8* %nl, align 1, !dbg !5209
  %conv = zext i8 %2 to i32, !dbg !5209
  %cmp = icmp ule i32 %0, %conv, !dbg !5209
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5209

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.64, i64 0, i64 0), i32 2710, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5209
  br label %cond.end, !dbg !5209

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5209

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5209
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5210
  %4 = load i32, i32* %index.addr, align 4, !dbg !5211
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5212
  %gimple_asm2 = bitcast %union.gimple_statement_d* %5 to %struct.gimple_statement_asm*, !dbg !5213
  %ni = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm2, i32 0, i32 2, !dbg !5214
  %6 = load i8, i8* %ni, align 8, !dbg !5214
  %conv3 = zext i8 %6 to i32, !dbg !5212
  %add = add i32 %4, %conv3, !dbg !5215
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5216
  %gimple_asm4 = bitcast %union.gimple_statement_d* %7 to %struct.gimple_statement_asm*, !dbg !5217
  %nc = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm4, i32 0, i32 4, !dbg !5218
  %8 = load i8, i8* %nc, align 2, !dbg !5218
  %conv5 = zext i8 %8 to i32, !dbg !5216
  %add6 = add i32 %add, %conv5, !dbg !5219
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %3, i32 %add6), !dbg !5220
  ret %union.tree_node* %call, !dbg !5221
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @computed_goto_p(%union.gimple_statement_d* %t) #0 !dbg !5222 {
entry:
  %t.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %t, %union.gimple_statement_d** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t.addr, metadata !5225, metadata !DIExpression()), !dbg !5226
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !5227
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5228
  %cmp = icmp eq i32 %call, 3, !dbg !5229
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5230

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !5231
  %call1 = call %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %1), !dbg !5231
  %base = bitcast %union.tree_node* %call1 to %struct.tree_base*, !dbg !5231
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5231
  %bf.load = load i64, i64* %2, align 8, !dbg !5231
  %bf.clear = and i64 %bf.load, 65535, !dbg !5231
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5231
  %cmp2 = icmp ne i32 %bf.cast, 30, !dbg !5232
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !5233
  %land.ext = zext i1 %3 to i32, !dbg !5230
  %conv = trunc i32 %land.ext to i8, !dbg !5234
  ret i8 %conv, !dbg !5235
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %gs) #0 !dbg !5236 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5237, metadata !DIExpression()), !dbg !5238
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5239
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !5240
  ret %union.tree_node* %call, !dbg !5241
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_goto_set_dest(%union.gimple_statement_d* %gs, %union.tree_node* %dest) #0 !dbg !5242 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %dest.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5243, metadata !DIExpression()), !dbg !5244
  store %union.tree_node* %dest, %union.tree_node** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest.addr, metadata !5245, metadata !DIExpression()), !dbg !5246
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5247
  %1 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !5248
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !5249
  ret void, !dbg !5250
}

; Function Attrs: noinline nounwind uwtable
define internal void @cleanup_dead_labels_eh() #0 !dbg !5251 {
entry:
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %r = alloca %struct.eh_region_d*, align 8
  %lab = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %c = alloca %struct.eh_catch_d*, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !5252, metadata !DIExpression()), !dbg !5253
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r, metadata !5254, metadata !DIExpression()), !dbg !5255
  call void @llvm.dbg.declare(metadata %union.tree_node** %lab, metadata !5256, metadata !DIExpression()), !dbg !5257
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5258, metadata !DIExpression()), !dbg !5259
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5260
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5260
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !5262
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !5262
  %cmp = icmp eq %struct.eh_status* %1, null, !dbg !5263
  br i1 %cmp, label %if.then, label %if.end, !dbg !5264

if.then:                                          ; preds = %entry
  br label %for.end48, !dbg !5265

if.end:                                           ; preds = %entry
  store i32 1, i32* %i, align 4, !dbg !5266
  br label %for.cond, !dbg !5268

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5269
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !5269
  %eh2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 0, !dbg !5269
  %3 = load %struct.eh_status*, %struct.eh_status** %eh2, align 8, !dbg !5269
  %lp_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %3, i32 0, i32 2, !dbg !5269
  %4 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !5269
  %tobool = icmp ne %struct.VEC_eh_landing_pad_gc* %4, null, !dbg !5269
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5269

cond.true:                                        ; preds = %for.cond
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5269
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !5269
  %eh4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 0, !dbg !5269
  %6 = load %struct.eh_status*, %struct.eh_status** %eh4, align 8, !dbg !5269
  %lp_array5 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %6, i32 0, i32 2, !dbg !5269
  %7 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array5, align 8, !dbg !5269
  %base = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %7, i32 0, i32 0, !dbg !5269
  br label %cond.end, !dbg !5269

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5269

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_landing_pad_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5269
  %8 = load i32, i32* %i, align 4, !dbg !5269
  %call = call i32 @VEC_eh_landing_pad_base_iterate(%struct.VEC_eh_landing_pad_base* %cond, i32 %8, %struct.eh_landing_pad_d** %lp), !dbg !5269
  %tobool6 = icmp ne i32 %call, 0, !dbg !5271
  br i1 %tobool6, label %for.body, label %for.end, !dbg !5271

for.body:                                         ; preds = %cond.end
  %9 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5272
  %tobool7 = icmp ne %struct.eh_landing_pad_d* %9, null, !dbg !5272
  br i1 %tobool7, label %land.lhs.true, label %if.end19, !dbg !5274

land.lhs.true:                                    ; preds = %for.body
  %10 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5275
  %post_landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %10, i32 0, i32 2, !dbg !5276
  %11 = load %union.tree_node*, %union.tree_node** %post_landing_pad, align 8, !dbg !5276
  %tobool8 = icmp ne %union.tree_node* %11, null, !dbg !5275
  br i1 %tobool8, label %if.then9, label %if.end19, !dbg !5277

if.then9:                                         ; preds = %land.lhs.true
  %12 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5278
  %post_landing_pad10 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %12, i32 0, i32 2, !dbg !5280
  %13 = load %union.tree_node*, %union.tree_node** %post_landing_pad10, align 8, !dbg !5280
  %call11 = call %union.tree_node* @main_block_label(%union.tree_node* %13), !dbg !5281
  store %union.tree_node* %call11, %union.tree_node** %lab, align 8, !dbg !5282
  %14 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !5283
  %15 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5285
  %post_landing_pad12 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %15, i32 0, i32 2, !dbg !5286
  %16 = load %union.tree_node*, %union.tree_node** %post_landing_pad12, align 8, !dbg !5286
  %cmp13 = icmp ne %union.tree_node* %14, %16, !dbg !5287
  br i1 %cmp13, label %if.then14, label %if.end18, !dbg !5288

if.then14:                                        ; preds = %if.then9
  %17 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5289
  %post_landing_pad15 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %17, i32 0, i32 2, !dbg !5289
  %18 = load %union.tree_node*, %union.tree_node** %post_landing_pad15, align 8, !dbg !5289
  %label_decl = bitcast %union.tree_node* %18 to %struct.tree_label_decl*, !dbg !5289
  %eh_landing_pad_nr = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl, i32 0, i32 2, !dbg !5289
  store i32 0, i32* %eh_landing_pad_nr, align 4, !dbg !5291
  %19 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5292
  %index = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %19, i32 0, i32 4, !dbg !5293
  %20 = load i32, i32* %index, align 8, !dbg !5293
  %21 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !5294
  %label_decl16 = bitcast %union.tree_node* %21 to %struct.tree_label_decl*, !dbg !5294
  %eh_landing_pad_nr17 = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl16, i32 0, i32 2, !dbg !5294
  store i32 %20, i32* %eh_landing_pad_nr17, align 4, !dbg !5295
  br label %if.end18, !dbg !5296

if.end18:                                         ; preds = %if.then14, %if.then9
  br label %if.end19, !dbg !5297

if.end19:                                         ; preds = %if.end18, %land.lhs.true, %for.body
  br label %for.inc, !dbg !5276

for.inc:                                          ; preds = %if.end19
  %22 = load i32, i32* %i, align 4, !dbg !5298
  %inc = add nsw i32 %22, 1, !dbg !5298
  store i32 %inc, i32* %i, align 4, !dbg !5298
  br label %for.cond, !dbg !5299, !llvm.loop !5300

for.end:                                          ; preds = %cond.end
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5302
  %add.ptr20 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !5302
  %eh21 = getelementptr inbounds %struct.function, %struct.function* %add.ptr20, i32 0, i32 0, !dbg !5302
  %24 = load %struct.eh_status*, %struct.eh_status** %eh21, align 8, !dbg !5302
  %region_tree = getelementptr inbounds %struct.eh_status, %struct.eh_status* %24, i32 0, i32 0, !dbg !5302
  %25 = load %struct.eh_region_d*, %struct.eh_region_d** %region_tree, align 8, !dbg !5302
  store %struct.eh_region_d* %25, %struct.eh_region_d** %r, align 8, !dbg !5302
  br label %for.cond22, !dbg !5302

for.cond22:                                       ; preds = %for.inc46, %for.end
  %26 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5304
  %cmp23 = icmp ne %struct.eh_region_d* %26, null, !dbg !5304
  br i1 %cmp23, label %for.body24, label %for.end48, !dbg !5302

for.body24:                                       ; preds = %for.cond22
  %27 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5306
  %type = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %27, i32 0, i32 4, !dbg !5307
  %28 = load i32, i32* %type, align 4, !dbg !5307
  switch i32 %28, label %sw.epilog [
    i32 0, label %sw.bb
    i32 3, label %sw.bb
    i32 1, label %sw.bb25
    i32 2, label %sw.bb36
  ], !dbg !5308

sw.bb:                                            ; preds = %for.body24, %for.body24
  br label %sw.epilog, !dbg !5309

sw.bb25:                                          ; preds = %for.body24
  call void @llvm.dbg.declare(metadata %struct.eh_catch_d** %c, metadata !5311, metadata !DIExpression()), !dbg !5314
  %29 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5315
  %u = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %29, i32 0, i32 5, !dbg !5317
  %eh_try = bitcast %union.eh_region_u* %u to %struct.eh_region_u_try*, !dbg !5318
  %first_catch = getelementptr inbounds %struct.eh_region_u_try, %struct.eh_region_u_try* %eh_try, i32 0, i32 0, !dbg !5319
  %30 = load %struct.eh_catch_d*, %struct.eh_catch_d** %first_catch, align 8, !dbg !5319
  store %struct.eh_catch_d* %30, %struct.eh_catch_d** %c, align 8, !dbg !5320
  br label %for.cond26, !dbg !5321

for.cond26:                                       ; preds = %for.inc34, %sw.bb25
  %31 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !5322
  %tobool27 = icmp ne %struct.eh_catch_d* %31, null, !dbg !5324
  br i1 %tobool27, label %for.body28, label %for.end35, !dbg !5324

for.body28:                                       ; preds = %for.cond26
  %32 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !5325
  %label = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %32, i32 0, i32 4, !dbg !5327
  %33 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !5327
  store %union.tree_node* %33, %union.tree_node** %lab, align 8, !dbg !5328
  %34 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !5329
  %tobool29 = icmp ne %union.tree_node* %34, null, !dbg !5329
  br i1 %tobool29, label %if.then30, label %if.end33, !dbg !5331

if.then30:                                        ; preds = %for.body28
  %35 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !5332
  %call31 = call %union.tree_node* @main_block_label(%union.tree_node* %35), !dbg !5333
  %36 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !5334
  %label32 = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %36, i32 0, i32 4, !dbg !5335
  store %union.tree_node* %call31, %union.tree_node** %label32, align 8, !dbg !5336
  br label %if.end33, !dbg !5334

if.end33:                                         ; preds = %if.then30, %for.body28
  br label %for.inc34, !dbg !5337

for.inc34:                                        ; preds = %if.end33
  %37 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !5338
  %next_catch = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %37, i32 0, i32 0, !dbg !5339
  %38 = load %struct.eh_catch_d*, %struct.eh_catch_d** %next_catch, align 8, !dbg !5339
  store %struct.eh_catch_d* %38, %struct.eh_catch_d** %c, align 8, !dbg !5340
  br label %for.cond26, !dbg !5341, !llvm.loop !5342

for.end35:                                        ; preds = %for.cond26
  br label %sw.epilog, !dbg !5344

sw.bb36:                                          ; preds = %for.body24
  %39 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5345
  %u37 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %39, i32 0, i32 5, !dbg !5346
  %allowed = bitcast %union.eh_region_u* %u37 to %struct.eh_region_u_allowed*, !dbg !5347
  %label38 = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed, i32 0, i32 1, !dbg !5348
  %40 = load %union.tree_node*, %union.tree_node** %label38, align 8, !dbg !5348
  store %union.tree_node* %40, %union.tree_node** %lab, align 8, !dbg !5349
  %41 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !5350
  %tobool39 = icmp ne %union.tree_node* %41, null, !dbg !5350
  br i1 %tobool39, label %if.then40, label %if.end45, !dbg !5352

if.then40:                                        ; preds = %sw.bb36
  %42 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !5353
  %call41 = call %union.tree_node* @main_block_label(%union.tree_node* %42), !dbg !5354
  %43 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5355
  %u42 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %43, i32 0, i32 5, !dbg !5356
  %allowed43 = bitcast %union.eh_region_u* %u42 to %struct.eh_region_u_allowed*, !dbg !5357
  %label44 = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed43, i32 0, i32 1, !dbg !5358
  store %union.tree_node* %call41, %union.tree_node** %label44, align 8, !dbg !5359
  br label %if.end45, !dbg !5355

if.end45:                                         ; preds = %if.then40, %sw.bb36
  br label %sw.epilog, !dbg !5360

sw.epilog:                                        ; preds = %for.body24, %if.end45, %for.end35, %sw.bb
  br label %for.inc46, !dbg !5361

for.inc46:                                        ; preds = %sw.epilog
  %44 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !5304
  %call47 = call %struct.eh_region_d* @ehr_next(%struct.eh_region_d* %44, %struct.eh_region_d* null), !dbg !5304
  store %struct.eh_region_d* %call47, %struct.eh_region_d** %r, align 8, !dbg !5304
  br label %for.cond22, !dbg !5304, !llvm.loop !5362

for.end48:                                        ; preds = %if.then, %for.cond22
  ret void, !dbg !5364
}

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @group_case_labels() #0 !dbg !5365 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %old_size = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %new_size = alloca i32, align 4
  %default_case = alloca %union.tree_node*, align 8
  %default_label = alloca %union.tree_node*, align 8
  %has_default = alloca i8, align 1
  %base_case = alloca %union.tree_node*, align 8
  %base_label = alloca %union.tree_node*, align 8
  %base_high = alloca %union.tree_node*, align 8
  %merge_case = alloca %union.tree_node*, align 8
  %merge_label = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5366, metadata !DIExpression()), !dbg !5367
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5368
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5368
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5368
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5368
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !5368
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5368
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !5368
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5368
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !5368
  br label %for.cond, !dbg !5368

for.cond:                                         ; preds = %for.inc103, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5370
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5370
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !5370
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !5370
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !5370
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !5370
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5370
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !5370
  br i1 %cmp, label %for.body, label %for.end105, !dbg !5368

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5372, metadata !DIExpression()), !dbg !5374
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5375
  %call = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %8), !dbg !5376
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !5374
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5377
  %tobool = icmp ne %union.gimple_statement_d* %9, null, !dbg !5377
  br i1 %tobool, label %land.lhs.true, label %if.end102, !dbg !5379

land.lhs.true:                                    ; preds = %for.body
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5380
  %call3 = call i32 @gimple_code(%union.gimple_statement_d* %10), !dbg !5381
  %cmp4 = icmp eq i32 %call3, 5, !dbg !5382
  br i1 %cmp4, label %if.then, label %if.end102, !dbg !5383

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %old_size, metadata !5384, metadata !DIExpression()), !dbg !5386
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5387
  %call5 = call i32 @gimple_switch_num_labels(%union.gimple_statement_d* %11), !dbg !5388
  store i32 %call5, i32* %old_size, align 4, !dbg !5386
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5389, metadata !DIExpression()), !dbg !5390
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5391, metadata !DIExpression()), !dbg !5392
  call void @llvm.dbg.declare(metadata i32* %new_size, metadata !5393, metadata !DIExpression()), !dbg !5394
  %12 = load i32, i32* %old_size, align 4, !dbg !5395
  store i32 %12, i32* %new_size, align 4, !dbg !5394
  call void @llvm.dbg.declare(metadata %union.tree_node** %default_case, metadata !5396, metadata !DIExpression()), !dbg !5397
  store %union.tree_node* null, %union.tree_node** %default_case, align 8, !dbg !5397
  call void @llvm.dbg.declare(metadata %union.tree_node** %default_label, metadata !5398, metadata !DIExpression()), !dbg !5399
  store %union.tree_node* null, %union.tree_node** %default_label, align 8, !dbg !5399
  call void @llvm.dbg.declare(metadata i8* %has_default, metadata !5400, metadata !DIExpression()), !dbg !5401
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5402
  %call6 = call %union.tree_node* @gimple_switch_default_label(%union.gimple_statement_d* %13), !dbg !5402
  %exp = bitcast %union.tree_node* %call6 to %struct.tree_exp*, !dbg !5402
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5402
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5402
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5402
  %tobool7 = icmp ne %union.tree_node* %14, null, !dbg !5402
  br i1 %tobool7, label %if.else, label %land.lhs.true8, !dbg !5404

land.lhs.true8:                                   ; preds = %if.then
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5405
  %call9 = call %union.tree_node* @gimple_switch_default_label(%union.gimple_statement_d* %15), !dbg !5405
  %exp10 = bitcast %union.tree_node* %call9 to %struct.tree_exp*, !dbg !5405
  %operands11 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp10, i32 0, i32 3, !dbg !5405
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands11, i64 0, i64 1, !dbg !5405
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !5405
  %tobool13 = icmp ne %union.tree_node* %16, null, !dbg !5405
  br i1 %tobool13, label %if.else, label %if.then14, !dbg !5406

if.then14:                                        ; preds = %land.lhs.true8
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5407
  %call15 = call %union.tree_node* @gimple_switch_default_label(%union.gimple_statement_d* %17), !dbg !5409
  store %union.tree_node* %call15, %union.tree_node** %default_case, align 8, !dbg !5410
  %18 = load %union.tree_node*, %union.tree_node** %default_case, align 8, !dbg !5411
  %exp16 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !5411
  %operands17 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp16, i32 0, i32 3, !dbg !5411
  %arrayidx18 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands17, i64 0, i64 2, !dbg !5411
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx18, align 8, !dbg !5411
  store %union.tree_node* %19, %union.tree_node** %default_label, align 8, !dbg !5412
  store i8 1, i8* %has_default, align 1, !dbg !5413
  br label %if.end, !dbg !5414

if.else:                                          ; preds = %land.lhs.true8, %if.then
  store i8 0, i8* %has_default, align 1, !dbg !5415
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then14
  %20 = load i8, i8* %has_default, align 1, !dbg !5416
  %tobool19 = icmp ne i8 %20, 0, !dbg !5416
  br i1 %tobool19, label %if.then20, label %if.else21, !dbg !5418

if.then20:                                        ; preds = %if.end
  store i32 1, i32* %i, align 4, !dbg !5419
  br label %if.end22, !dbg !5420

if.else21:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !5421
  br label %if.end22

if.end22:                                         ; preds = %if.else21, %if.then20
  br label %while.cond, !dbg !5422

while.cond:                                       ; preds = %while.end, %if.then30, %if.end22
  %21 = load i32, i32* %i, align 4, !dbg !5423
  %22 = load i32, i32* %old_size, align 4, !dbg !5424
  %cmp23 = icmp slt i32 %21, %22, !dbg !5425
  br i1 %cmp23, label %while.body, label %while.end84, !dbg !5422

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %base_case, metadata !5426, metadata !DIExpression()), !dbg !5428
  call void @llvm.dbg.declare(metadata %union.tree_node** %base_label, metadata !5429, metadata !DIExpression()), !dbg !5430
  call void @llvm.dbg.declare(metadata %union.tree_node** %base_high, metadata !5431, metadata !DIExpression()), !dbg !5432
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5433
  %24 = load i32, i32* %i, align 4, !dbg !5434
  %call24 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %23, i32 %24), !dbg !5435
  store %union.tree_node* %call24, %union.tree_node** %base_case, align 8, !dbg !5436
  %25 = load %union.tree_node*, %union.tree_node** %base_case, align 8, !dbg !5437
  %tobool25 = icmp ne %union.tree_node* %25, null, !dbg !5437
  br i1 %tobool25, label %cond.false, label %cond.true, !dbg !5437

cond.true:                                        ; preds = %while.body
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1325, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5437
  br label %cond.end, !dbg !5437

cond.false:                                       ; preds = %while.body
  br label %cond.end, !dbg !5437

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5437
  %26 = load %union.tree_node*, %union.tree_node** %base_case, align 8, !dbg !5438
  %exp26 = bitcast %union.tree_node* %26 to %struct.tree_exp*, !dbg !5438
  %operands27 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp26, i32 0, i32 3, !dbg !5438
  %arrayidx28 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands27, i64 0, i64 2, !dbg !5438
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx28, align 8, !dbg !5438
  store %union.tree_node* %27, %union.tree_node** %base_label, align 8, !dbg !5439
  %28 = load %union.tree_node*, %union.tree_node** %base_label, align 8, !dbg !5440
  %29 = load %union.tree_node*, %union.tree_node** %default_label, align 8, !dbg !5442
  %cmp29 = icmp eq %union.tree_node* %28, %29, !dbg !5443
  br i1 %cmp29, label %if.then30, label %if.end31, !dbg !5444

if.then30:                                        ; preds = %cond.end
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5445
  %31 = load i32, i32* %i, align 4, !dbg !5447
  call void @gimple_switch_set_label(%union.gimple_statement_d* %30, i32 %31, %union.tree_node* null), !dbg !5448
  %32 = load i32, i32* %i, align 4, !dbg !5449
  %inc = add nsw i32 %32, 1, !dbg !5449
  store i32 %inc, i32* %i, align 4, !dbg !5449
  %33 = load i32, i32* %new_size, align 4, !dbg !5450
  %dec = add nsw i32 %33, -1, !dbg !5450
  store i32 %dec, i32* %new_size, align 4, !dbg !5450
  br label %while.cond, !dbg !5451, !llvm.loop !5452

if.end31:                                         ; preds = %cond.end
  %34 = load %union.tree_node*, %union.tree_node** %base_case, align 8, !dbg !5454
  %exp32 = bitcast %union.tree_node* %34 to %struct.tree_exp*, !dbg !5454
  %operands33 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp32, i32 0, i32 3, !dbg !5454
  %arrayidx34 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands33, i64 0, i64 1, !dbg !5454
  %35 = load %union.tree_node*, %union.tree_node** %arrayidx34, align 8, !dbg !5454
  %tobool35 = icmp ne %union.tree_node* %35, null, !dbg !5454
  br i1 %tobool35, label %cond.true36, label %cond.false40, !dbg !5454

cond.true36:                                      ; preds = %if.end31
  %36 = load %union.tree_node*, %union.tree_node** %base_case, align 8, !dbg !5455
  %exp37 = bitcast %union.tree_node* %36 to %struct.tree_exp*, !dbg !5455
  %operands38 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp37, i32 0, i32 3, !dbg !5455
  %arrayidx39 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands38, i64 0, i64 1, !dbg !5455
  %37 = load %union.tree_node*, %union.tree_node** %arrayidx39, align 8, !dbg !5455
  br label %cond.end44, !dbg !5454

cond.false40:                                     ; preds = %if.end31
  %38 = load %union.tree_node*, %union.tree_node** %base_case, align 8, !dbg !5456
  %exp41 = bitcast %union.tree_node* %38 to %struct.tree_exp*, !dbg !5456
  %operands42 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp41, i32 0, i32 3, !dbg !5456
  %arrayidx43 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands42, i64 0, i64 0, !dbg !5456
  %39 = load %union.tree_node*, %union.tree_node** %arrayidx43, align 8, !dbg !5456
  br label %cond.end44, !dbg !5454

cond.end44:                                       ; preds = %cond.false40, %cond.true36
  %cond45 = phi %union.tree_node* [ %37, %cond.true36 ], [ %39, %cond.false40 ], !dbg !5454
  store %union.tree_node* %cond45, %union.tree_node** %base_high, align 8, !dbg !5457
  %40 = load i32, i32* %i, align 4, !dbg !5458
  %inc46 = add nsw i32 %40, 1, !dbg !5458
  store i32 %inc46, i32* %i, align 4, !dbg !5458
  br label %while.cond47, !dbg !5459

while.cond47:                                     ; preds = %if.end83, %cond.end44
  %41 = load i32, i32* %i, align 4, !dbg !5460
  %42 = load i32, i32* %old_size, align 4, !dbg !5461
  %cmp48 = icmp slt i32 %41, %42, !dbg !5462
  br i1 %cmp48, label %while.body49, label %while.end, !dbg !5459

while.body49:                                     ; preds = %while.cond47
  call void @llvm.dbg.declare(metadata %union.tree_node** %merge_case, metadata !5463, metadata !DIExpression()), !dbg !5465
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5466
  %44 = load i32, i32* %i, align 4, !dbg !5467
  %call50 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %43, i32 %44), !dbg !5468
  store %union.tree_node* %call50, %union.tree_node** %merge_case, align 8, !dbg !5465
  call void @llvm.dbg.declare(metadata %union.tree_node** %merge_label, metadata !5469, metadata !DIExpression()), !dbg !5470
  %45 = load %union.tree_node*, %union.tree_node** %merge_case, align 8, !dbg !5471
  %exp51 = bitcast %union.tree_node* %45 to %struct.tree_exp*, !dbg !5471
  %operands52 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp51, i32 0, i32 3, !dbg !5471
  %arrayidx53 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands52, i64 0, i64 2, !dbg !5471
  %46 = load %union.tree_node*, %union.tree_node** %arrayidx53, align 8, !dbg !5471
  store %union.tree_node* %46, %union.tree_node** %merge_label, align 8, !dbg !5470
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5472, metadata !DIExpression()), !dbg !5473
  %47 = load %union.tree_node*, %union.tree_node** %base_high, align 8, !dbg !5474
  %48 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !5475
  %call54 = call %union.tree_node* @int_const_binop(i32 63, %union.tree_node* %47, %union.tree_node* %48, i32 1), !dbg !5476
  store %union.tree_node* %call54, %union.tree_node** %t, align 8, !dbg !5473
  %49 = load %union.tree_node*, %union.tree_node** %merge_label, align 8, !dbg !5477
  %50 = load %union.tree_node*, %union.tree_node** %base_label, align 8, !dbg !5479
  %cmp55 = icmp eq %union.tree_node* %49, %50, !dbg !5480
  br i1 %cmp55, label %land.lhs.true56, label %if.else82, !dbg !5481

land.lhs.true56:                                  ; preds = %while.body49
  %51 = load %union.tree_node*, %union.tree_node** %merge_case, align 8, !dbg !5482
  %exp57 = bitcast %union.tree_node* %51 to %struct.tree_exp*, !dbg !5482
  %operands58 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp57, i32 0, i32 3, !dbg !5482
  %arrayidx59 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands58, i64 0, i64 0, !dbg !5482
  %52 = load %union.tree_node*, %union.tree_node** %arrayidx59, align 8, !dbg !5482
  %53 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5483
  %call60 = call i32 @tree_int_cst_equal(%union.tree_node* %52, %union.tree_node* %53), !dbg !5484
  %tobool61 = icmp ne i32 %call60, 0, !dbg !5484
  br i1 %tobool61, label %if.then62, label %if.else82, !dbg !5485

if.then62:                                        ; preds = %land.lhs.true56
  %54 = load %union.tree_node*, %union.tree_node** %merge_case, align 8, !dbg !5486
  %exp63 = bitcast %union.tree_node* %54 to %struct.tree_exp*, !dbg !5486
  %operands64 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp63, i32 0, i32 3, !dbg !5486
  %arrayidx65 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands64, i64 0, i64 1, !dbg !5486
  %55 = load %union.tree_node*, %union.tree_node** %arrayidx65, align 8, !dbg !5486
  %tobool66 = icmp ne %union.tree_node* %55, null, !dbg !5486
  br i1 %tobool66, label %cond.true67, label %cond.false71, !dbg !5486

cond.true67:                                      ; preds = %if.then62
  %56 = load %union.tree_node*, %union.tree_node** %merge_case, align 8, !dbg !5488
  %exp68 = bitcast %union.tree_node* %56 to %struct.tree_exp*, !dbg !5488
  %operands69 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp68, i32 0, i32 3, !dbg !5488
  %arrayidx70 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands69, i64 0, i64 1, !dbg !5488
  %57 = load %union.tree_node*, %union.tree_node** %arrayidx70, align 8, !dbg !5488
  br label %cond.end75, !dbg !5486

cond.false71:                                     ; preds = %if.then62
  %58 = load %union.tree_node*, %union.tree_node** %merge_case, align 8, !dbg !5489
  %exp72 = bitcast %union.tree_node* %58 to %struct.tree_exp*, !dbg !5489
  %operands73 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp72, i32 0, i32 3, !dbg !5489
  %arrayidx74 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands73, i64 0, i64 0, !dbg !5489
  %59 = load %union.tree_node*, %union.tree_node** %arrayidx74, align 8, !dbg !5489
  br label %cond.end75, !dbg !5486

cond.end75:                                       ; preds = %cond.false71, %cond.true67
  %cond76 = phi %union.tree_node* [ %57, %cond.true67 ], [ %59, %cond.false71 ], !dbg !5486
  store %union.tree_node* %cond76, %union.tree_node** %base_high, align 8, !dbg !5490
  %60 = load %union.tree_node*, %union.tree_node** %base_high, align 8, !dbg !5491
  %61 = load %union.tree_node*, %union.tree_node** %base_case, align 8, !dbg !5492
  %exp77 = bitcast %union.tree_node* %61 to %struct.tree_exp*, !dbg !5492
  %operands78 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp77, i32 0, i32 3, !dbg !5492
  %arrayidx79 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands78, i64 0, i64 1, !dbg !5492
  store %union.tree_node* %60, %union.tree_node** %arrayidx79, align 8, !dbg !5493
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5494
  %63 = load i32, i32* %i, align 4, !dbg !5495
  call void @gimple_switch_set_label(%union.gimple_statement_d* %62, i32 %63, %union.tree_node* null), !dbg !5496
  %64 = load i32, i32* %new_size, align 4, !dbg !5497
  %dec80 = add nsw i32 %64, -1, !dbg !5497
  store i32 %dec80, i32* %new_size, align 4, !dbg !5497
  %65 = load i32, i32* %i, align 4, !dbg !5498
  %inc81 = add nsw i32 %65, 1, !dbg !5498
  store i32 %inc81, i32* %i, align 4, !dbg !5498
  br label %if.end83, !dbg !5499

if.else82:                                        ; preds = %land.lhs.true56, %while.body49
  br label %while.end, !dbg !5500

if.end83:                                         ; preds = %cond.end75
  br label %while.cond47, !dbg !5459, !llvm.loop !5501

while.end:                                        ; preds = %if.else82, %while.cond47
  br label %while.cond, !dbg !5422, !llvm.loop !5452

while.end84:                                      ; preds = %while.cond
  store i32 0, i32* %i, align 4, !dbg !5503
  store i32 0, i32* %j, align 4, !dbg !5505
  br label %for.cond85, !dbg !5506

for.cond85:                                       ; preds = %for.inc, %while.end84
  %66 = load i32, i32* %i, align 4, !dbg !5507
  %67 = load i32, i32* %new_size, align 4, !dbg !5509
  %cmp86 = icmp slt i32 %66, %67, !dbg !5510
  br i1 %cmp86, label %for.body87, label %for.end, !dbg !5511

for.body87:                                       ; preds = %for.cond85
  br label %while.cond88, !dbg !5512

while.cond88:                                     ; preds = %while.body91, %for.body87
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5514
  %69 = load i32, i32* %j, align 4, !dbg !5515
  %call89 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %68, i32 %69), !dbg !5516
  %tobool90 = icmp ne %union.tree_node* %call89, null, !dbg !5517
  %lnot = xor i1 %tobool90, true, !dbg !5517
  br i1 %lnot, label %while.body91, label %while.end93, !dbg !5512

while.body91:                                     ; preds = %while.cond88
  %70 = load i32, i32* %j, align 4, !dbg !5518
  %inc92 = add nsw i32 %70, 1, !dbg !5518
  store i32 %inc92, i32* %j, align 4, !dbg !5518
  br label %while.cond88, !dbg !5512, !llvm.loop !5519

while.end93:                                      ; preds = %while.cond88
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5520
  %72 = load i32, i32* %i, align 4, !dbg !5521
  %73 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5522
  %74 = load i32, i32* %j, align 4, !dbg !5523
  %inc94 = add nsw i32 %74, 1, !dbg !5523
  store i32 %inc94, i32* %j, align 4, !dbg !5523
  %call95 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %73, i32 %74), !dbg !5524
  call void @gimple_switch_set_label(%union.gimple_statement_d* %71, i32 %72, %union.tree_node* %call95), !dbg !5525
  br label %for.inc, !dbg !5526

for.inc:                                          ; preds = %while.end93
  %75 = load i32, i32* %i, align 4, !dbg !5527
  %inc96 = add nsw i32 %75, 1, !dbg !5527
  store i32 %inc96, i32* %i, align 4, !dbg !5527
  br label %for.cond85, !dbg !5528, !llvm.loop !5529

for.end:                                          ; preds = %for.cond85
  %76 = load i32, i32* %new_size, align 4, !dbg !5531
  %77 = load i32, i32* %old_size, align 4, !dbg !5531
  %cmp97 = icmp sle i32 %76, %77, !dbg !5531
  br i1 %cmp97, label %cond.false99, label %cond.true98, !dbg !5531

cond.true98:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1380, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5531
  br label %cond.end100, !dbg !5531

cond.false99:                                     ; preds = %for.end
  br label %cond.end100, !dbg !5531

cond.end100:                                      ; preds = %cond.false99, %cond.true98
  %cond101 = phi i32 [ 0, %cond.true98 ], [ 0, %cond.false99 ], !dbg !5531
  %78 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5532
  %79 = load i32, i32* %new_size, align 4, !dbg !5533
  call void @gimple_switch_set_num_labels(%union.gimple_statement_d* %78, i32 %79), !dbg !5534
  br label %if.end102, !dbg !5535

if.end102:                                        ; preds = %cond.end100, %land.lhs.true, %for.body
  br label %for.inc103, !dbg !5536

for.inc103:                                       ; preds = %if.end102
  %80 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5370
  %next_bb104 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %80, i32 0, i32 6, !dbg !5370
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb104, align 8, !dbg !5370
  store %struct.basic_block_def* %81, %struct.basic_block_def** %bb, align 8, !dbg !5370
  br label %for.cond, !dbg !5370, !llvm.loop !5537

for.end105:                                       ; preds = %for.cond
  ret void, !dbg !5539
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_switch_default_label(%union.gimple_statement_d* %gs) #0 !dbg !5540 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5541, metadata !DIExpression()), !dbg !5542
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5543
  %call = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %0, i32 0), !dbg !5544
  ret %union.tree_node* %call, !dbg !5545
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_switch_set_label(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %label) #0 !dbg !5546 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  %label.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5549, metadata !DIExpression()), !dbg !5550
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !5551, metadata !DIExpression()), !dbg !5552
  store %union.tree_node* %label, %union.tree_node** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %label.addr, metadata !5553, metadata !DIExpression()), !dbg !5554
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5555
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !5555
  %1 = load i32, i32* %index.addr, align 4, !dbg !5555
  %add = add i32 %1, 1, !dbg !5555
  %cmp = icmp ugt i32 %call, %add, !dbg !5555
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5555

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.64, i64 0, i64 0), i32 3225, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5555
  br label %cond.end, !dbg !5555

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5555

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5555
  %2 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !5556
  %cmp1 = icmp eq %union.tree_node* %2, null, !dbg !5556
  br i1 %cmp1, label %cond.false4, label %lor.lhs.false, !dbg !5556

lor.lhs.false:                                    ; preds = %cond.end
  %3 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !5556
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5556
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !5556
  %bf.load = load i64, i64* %4, align 8, !dbg !5556
  %bf.clear = and i64 %bf.load, 65535, !dbg !5556
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5556
  %cmp2 = icmp eq i32 %bf.cast, 139, !dbg !5556
  br i1 %cmp2, label %cond.false4, label %cond.true3, !dbg !5556

cond.true3:                                       ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.64, i64 0, i64 0), i32 3226, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5556
  br label %cond.end5, !dbg !5556

cond.false4:                                      ; preds = %lor.lhs.false, %cond.end
  br label %cond.end5, !dbg !5556

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !5556
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5557
  %6 = load i32, i32* %index.addr, align 4, !dbg !5558
  %add7 = add i32 %6, 1, !dbg !5559
  %7 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !5560
  call void @gimple_set_op(%union.gimple_statement_d* %5, i32 %add7, %union.tree_node* %7), !dbg !5561
  ret void, !dbg !5562
}

declare dso_local %union.tree_node* @int_const_binop(i32, %union.tree_node*, %union.tree_node*, i32) #2

declare dso_local i32 @tree_int_cst_equal(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_switch_set_num_labels(%union.gimple_statement_d* %g, i32 %nlabels) #0 !dbg !5563 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %nlabels.addr = alloca i32, align 4
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5566, metadata !DIExpression()), !dbg !5567
  store i32 %nlabels, i32* %nlabels.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nlabels.addr, metadata !5568, metadata !DIExpression()), !dbg !5569
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5570
  %1 = load i32, i32* %nlabels.addr, align 4, !dbg !5571
  %add = add i32 %1, 1, !dbg !5572
  call void @gimple_set_num_ops(%union.gimple_statement_d* %0, i32 %add), !dbg !5573
  ret void, !dbg !5574
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @has_zero_uses_1(%struct.ssa_use_operand_d* %head) #0 !dbg !5575 {
entry:
  %retval = alloca i8, align 1
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %ptr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !5580, metadata !DIExpression()), !dbg !5581
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %ptr, metadata !5582, metadata !DIExpression()), !dbg !5583
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !5584
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 1, !dbg !5586
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5586
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !5587
  br label %for.cond, !dbg !5588

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !5589
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !5591
  %cmp = icmp ne %struct.ssa_use_operand_d* %2, %3, !dbg !5592
  br i1 %cmp, label %for.body, label %for.end, !dbg !5593

for.body:                                         ; preds = %for.cond
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !5594
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 2, !dbg !5594
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !5594
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5594
  %call = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %5), !dbg !5596
  %tobool = icmp ne i8 %call, 0, !dbg !5596
  br i1 %tobool, label %if.end, label %if.then, !dbg !5597

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !5598
  br label %return, !dbg !5598

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !5599

for.inc:                                          ; preds = %if.end
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !5600
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !5601
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next1, align 8, !dbg !5601
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !5602
  br label %for.cond, !dbg !5603, !llvm.loop !5604

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !5606
  br label %return, !dbg !5606

return:                                           ; preds = %for.end, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !5607
  ret i8 %8, !dbg !5607
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !5608 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5611, metadata !DIExpression()), !dbg !5612
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5613
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5614
  %cmp = icmp eq i32 %call, 2, !dbg !5615
  %conv = zext i1 %cmp to i32, !dbg !5615
  %conv1 = trunc i32 %conv to i8, !dbg !5614
  ret i8 %conv1, !dbg !5616
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @single_imm_use_1(%struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %use_p, %union.gimple_statement_d** %stmt) #0 !dbg !5617 {
entry:
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %use_p.addr = alloca %struct.ssa_use_operand_d**, align 8
  %stmt.addr = alloca %union.gimple_statement_d**, align 8
  %ptr = alloca %struct.ssa_use_operand_d*, align 8
  %single_use = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !5622, metadata !DIExpression()), !dbg !5623
  store %struct.ssa_use_operand_d** %use_p, %struct.ssa_use_operand_d*** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d*** %use_p.addr, metadata !5624, metadata !DIExpression()), !dbg !5625
  store %union.gimple_statement_d** %stmt, %union.gimple_statement_d*** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %stmt.addr, metadata !5626, metadata !DIExpression()), !dbg !5627
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %ptr, metadata !5628, metadata !DIExpression()), !dbg !5629
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %single_use, metadata !5630, metadata !DIExpression()), !dbg !5631
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %single_use, align 8, !dbg !5631
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !5632
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 1, !dbg !5634
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5634
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !5635
  br label %for.cond, !dbg !5636

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !5637
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !5639
  %cmp = icmp ne %struct.ssa_use_operand_d* %2, %3, !dbg !5640
  br i1 %cmp, label %for.body, label %for.end, !dbg !5641

for.body:                                         ; preds = %for.cond
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !5642
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 2, !dbg !5642
  %stmt1 = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !5642
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !5642
  %call = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %5), !dbg !5644
  %tobool = icmp ne i8 %call, 0, !dbg !5644
  br i1 %tobool, label %if.end4, label %if.then, !dbg !5645

if.then:                                          ; preds = %for.body
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %single_use, align 8, !dbg !5646
  %tobool2 = icmp ne %struct.ssa_use_operand_d* %6, null, !dbg !5646
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !5649

if.then3:                                         ; preds = %if.then
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %single_use, align 8, !dbg !5650
  br label %for.end, !dbg !5652

if.end:                                           ; preds = %if.then
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !5653
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %single_use, align 8, !dbg !5654
  br label %if.end4, !dbg !5655

if.end4:                                          ; preds = %if.end, %for.body
  br label %for.inc, !dbg !5656

for.inc:                                          ; preds = %if.end4
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !5657
  %next5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !5658
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next5, align 8, !dbg !5658
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !5659
  br label %for.cond, !dbg !5660, !llvm.loop !5661

for.end:                                          ; preds = %if.then3, %for.cond
  %10 = load %struct.ssa_use_operand_d**, %struct.ssa_use_operand_d*** %use_p.addr, align 8, !dbg !5663
  %tobool6 = icmp ne %struct.ssa_use_operand_d** %10, null, !dbg !5663
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !5665

if.then7:                                         ; preds = %for.end
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %single_use, align 8, !dbg !5666
  %12 = load %struct.ssa_use_operand_d**, %struct.ssa_use_operand_d*** %use_p.addr, align 8, !dbg !5667
  store %struct.ssa_use_operand_d* %11, %struct.ssa_use_operand_d** %12, align 8, !dbg !5668
  br label %if.end8, !dbg !5669

if.end8:                                          ; preds = %if.then7, %for.end
  %13 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !5670
  %tobool9 = icmp ne %union.gimple_statement_d** %13, null, !dbg !5670
  br i1 %tobool9, label %if.then10, label %if.end14, !dbg !5672

if.then10:                                        ; preds = %if.end8
  %14 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %single_use, align 8, !dbg !5673
  %tobool11 = icmp ne %struct.ssa_use_operand_d* %14, null, !dbg !5673
  br i1 %tobool11, label %cond.true, label %cond.false, !dbg !5673

cond.true:                                        ; preds = %if.then10
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %single_use, align 8, !dbg !5674
  %loc12 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %15, i32 0, i32 2, !dbg !5675
  %stmt13 = bitcast %union.anon* %loc12 to %union.gimple_statement_d**, !dbg !5676
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt13, align 8, !dbg !5676
  br label %cond.end, !dbg !5673

cond.false:                                       ; preds = %if.then10
  br label %cond.end, !dbg !5673

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.gimple_statement_d* [ %16, %cond.true ], [ null, %cond.false ], !dbg !5673
  %17 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %stmt.addr, align 8, !dbg !5677
  store %union.gimple_statement_d* %cond, %union.gimple_statement_d** %17, align 8, !dbg !5678
  br label %if.end14, !dbg !5679

if.end14:                                         ; preds = %cond.end, %if.end8
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %single_use, align 8, !dbg !5680
  %tobool15 = icmp ne %struct.ssa_use_operand_d* %18, null, !dbg !5681
  %lnot = xor i1 %tobool15, true, !dbg !5681
  %lnot16 = xor i1 %lnot, true, !dbg !5682
  %lnot.ext = zext i1 %lnot16 to i32, !dbg !5682
  %conv = trunc i32 %lnot.ext to i8, !dbg !5682
  ret i8 %conv, !dbg !5683
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @replace_uses_by(%union.tree_node* %name, %union.tree_node* %val) #0 !dbg !5684 {
entry:
  %name.addr = alloca %union.tree_node*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  %imm_iter = alloca %struct.immediate_use_iterator_d, align 8
  %use = alloca %struct.ssa_use_operand_d*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %e = alloca %struct.edge_def*, align 8
  %i = alloca i64, align 8
  %op = alloca %union.tree_node*, align 8
  %loop = alloca %struct.loop*, align 8
  %li = alloca %struct.loop_iterator, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !5687, metadata !DIExpression()), !dbg !5688
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !5689, metadata !DIExpression()), !dbg !5690
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %imm_iter, metadata !5691, metadata !DIExpression()), !dbg !5699
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use, metadata !5700, metadata !DIExpression()), !dbg !5701
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5702, metadata !DIExpression()), !dbg !5703
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5704, metadata !DIExpression()), !dbg !5705
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5706
  %call = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter, %union.tree_node* %0), !dbg !5706
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !5706
  br label %for.cond, !dbg !5706

for.cond:                                         ; preds = %for.inc47, %entry
  %call1 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5708
  %tobool = icmp ne i8 %call1, 0, !dbg !5708
  %lnot = xor i1 %tobool, true, !dbg !5708
  br i1 %lnot, label %for.body, label %for.end49, !dbg !5706

for.body:                                         ; preds = %for.cond
  %call2 = call %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5710
  store %struct.ssa_use_operand_d* %call2, %struct.ssa_use_operand_d** %use, align 8, !dbg !5710
  br label %for.cond3, !dbg !5710

for.cond3:                                        ; preds = %for.inc, %for.body
  %call4 = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5713
  %tobool5 = icmp ne i8 %call4, 0, !dbg !5713
  %lnot6 = xor i1 %tobool5, true, !dbg !5713
  br i1 %lnot6, label %for.body7, label %for.end, !dbg !5710

for.body7:                                        ; preds = %for.cond3
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use, align 8, !dbg !5715
  %2 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !5717
  call void @replace_exp(%struct.ssa_use_operand_d* %1, %union.tree_node* %2), !dbg !5718
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5719
  %call8 = call i32 @gimple_code(%union.gimple_statement_d* %3), !dbg !5721
  %cmp = icmp eq i32 %call8, 16, !dbg !5722
  br i1 %cmp, label %if.then, label %if.end15, !dbg !5723

if.then:                                          ; preds = %for.body7
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5724
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use, align 8, !dbg !5726
  %call9 = call i32 @phi_arg_index_from_use(%struct.ssa_use_operand_d* %5), !dbg !5726
  %conv = sext i32 %call9 to i64, !dbg !5726
  %call10 = call %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %4, i64 %conv), !dbg !5727
  store %struct.edge_def* %call10, %struct.edge_def** %e, align 8, !dbg !5728
  %6 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5729
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %6, i32 0, i32 7, !dbg !5731
  %7 = load i32, i32* %flags, align 8, !dbg !5731
  %and = and i32 %7, 2, !dbg !5732
  %tobool11 = icmp ne i32 %and, 0, !dbg !5732
  br i1 %tobool11, label %if.then12, label %if.end, !dbg !5733

if.then12:                                        ; preds = %if.then
  %8 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5734
  %call13 = call zeroext i8 @is_gimple_reg(%union.tree_node* %8), !dbg !5734
  %tobool14 = icmp ne i8 %call13, 0, !dbg !5734
  br i1 %tobool14, label %cond.true, label %cond.false, !dbg !5734

cond.true:                                        ; preds = %if.then12
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1518, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5734
  br label %cond.end, !dbg !5734

cond.false:                                       ; preds = %if.then12
  br label %cond.end, !dbg !5734

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5734
  %9 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !5736
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !5736
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !5736
  %bf.load = load i64, i64* %10, align 8, !dbg !5737
  %bf.clear = and i64 %bf.load, -4194305, !dbg !5737
  %bf.set = or i64 %bf.clear, 4194304, !dbg !5737
  store i64 %bf.set, i64* %10, align 8, !dbg !5737
  br label %if.end, !dbg !5738

if.end:                                           ; preds = %cond.end, %if.then
  br label %if.end15, !dbg !5739

if.end15:                                         ; preds = %if.end, %for.body7
  br label %for.inc, !dbg !5740

for.inc:                                          ; preds = %if.end15
  %call16 = call %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5713
  store %struct.ssa_use_operand_d* %call16, %struct.ssa_use_operand_d** %use, align 8, !dbg !5713
  br label %for.cond3, !dbg !5713, !llvm.loop !5741

for.end:                                          ; preds = %for.cond3
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5743
  %call17 = call i32 @gimple_code(%union.gimple_statement_d* %11), !dbg !5745
  %cmp18 = icmp ne i32 %call17, 16, !dbg !5746
  br i1 %cmp18, label %if.then20, label %if.end46, !dbg !5747

if.then20:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata i64* %i, metadata !5748, metadata !DIExpression()), !dbg !5750
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5751
  %call21 = call zeroext i8 @fold_stmt_inplace(%union.gimple_statement_d* %12), !dbg !5752
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @cfgcleanup_altered_bbs, align 8, !dbg !5753
  %tobool22 = icmp ne %struct.bitmap_head_def* %13, null, !dbg !5753
  br i1 %tobool22, label %if.then23, label %if.end26, !dbg !5755

if.then23:                                        ; preds = %if.then20
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @cfgcleanup_altered_bbs, align 8, !dbg !5756
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5757
  %call24 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %15), !dbg !5758
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call24, i32 0, i32 9, !dbg !5759
  %16 = load i32, i32* %index, align 8, !dbg !5759
  %call25 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %14, i32 %16), !dbg !5760
  br label %if.end26, !dbg !5760

if.end26:                                         ; preds = %if.then23, %if.then20
  store i64 0, i64* %i, align 8, !dbg !5761
  br label %for.cond27, !dbg !5763

for.cond27:                                       ; preds = %for.inc43, %if.end26
  %17 = load i64, i64* %i, align 8, !dbg !5764
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5766
  %call28 = call i32 @gimple_num_ops(%union.gimple_statement_d* %18), !dbg !5767
  %conv29 = zext i32 %call28 to i64, !dbg !5767
  %cmp30 = icmp ult i64 %17, %conv29, !dbg !5768
  br i1 %cmp30, label %for.body32, label %for.end44, !dbg !5769

for.body32:                                       ; preds = %for.cond27
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !5770, metadata !DIExpression()), !dbg !5772
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5773
  %20 = load i64, i64* %i, align 8, !dbg !5774
  %conv33 = trunc i64 %20 to i32, !dbg !5774
  %call34 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %19, i32 %conv33), !dbg !5775
  store %union.tree_node* %call34, %union.tree_node** %op, align 8, !dbg !5772
  %21 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5776
  %tobool35 = icmp ne %union.tree_node* %21, null, !dbg !5776
  br i1 %tobool35, label %land.lhs.true, label %if.end42, !dbg !5778

land.lhs.true:                                    ; preds = %for.body32
  %22 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5779
  %base36 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !5779
  %23 = bitcast %struct.tree_base* %base36 to i64*, !dbg !5779
  %bf.load37 = load i64, i64* %23, align 8, !dbg !5779
  %bf.clear38 = and i64 %bf.load37, 65535, !dbg !5779
  %bf.cast = trunc i64 %bf.clear38 to i32, !dbg !5779
  %cmp39 = icmp eq i32 %bf.cast, 121, !dbg !5780
  br i1 %cmp39, label %if.then41, label %if.end42, !dbg !5781

if.then41:                                        ; preds = %land.lhs.true
  %24 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5782
  call void @recompute_tree_invariant_for_addr_expr(%union.tree_node* %24), !dbg !5783
  br label %if.end42, !dbg !5783

if.end42:                                         ; preds = %if.then41, %land.lhs.true, %for.body32
  br label %for.inc43, !dbg !5784

for.inc43:                                        ; preds = %if.end42
  %25 = load i64, i64* %i, align 8, !dbg !5785
  %inc = add i64 %25, 1, !dbg !5785
  store i64 %inc, i64* %i, align 8, !dbg !5785
  br label %for.cond27, !dbg !5786, !llvm.loop !5787

for.end44:                                        ; preds = %for.cond27
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5789
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5790
  %call45 = call zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d* %26, %union.gimple_statement_d* %27), !dbg !5791
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5792
  call void @update_stmt(%union.gimple_statement_d* %28), !dbg !5793
  br label %if.end46, !dbg !5794

if.end46:                                         ; preds = %for.end44, %for.end
  br label %for.inc47, !dbg !5795

for.inc47:                                        ; preds = %if.end46
  %call48 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5708
  store %union.gimple_statement_d* %call48, %union.gimple_statement_d** %stmt, align 8, !dbg !5708
  br label %for.cond, !dbg !5708, !llvm.loop !5796

for.end49:                                        ; preds = %for.cond
  %29 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5798
  %call50 = call zeroext i8 @has_zero_uses(%union.tree_node* %29), !dbg !5798
  %tobool51 = icmp ne i8 %call50, 0, !dbg !5798
  br i1 %tobool51, label %cond.false53, label %cond.true52, !dbg !5798

cond.true52:                                      ; preds = %for.end49
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1548, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5798
  br label %cond.end54, !dbg !5798

cond.false53:                                     ; preds = %for.end49
  br label %cond.end54, !dbg !5798

cond.end54:                                       ; preds = %cond.false53, %cond.true52
  %cond55 = phi i32 [ 0, %cond.true52 ], [ 0, %cond.false53 ], !dbg !5798
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5799
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !5799
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5799
  %31 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5799
  %tobool56 = icmp ne %struct.loops* %31, null, !dbg !5799
  br i1 %tobool56, label %if.then57, label %if.end63, !dbg !5801

if.then57:                                        ; preds = %cond.end54
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !5802, metadata !DIExpression()), !dbg !5804
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !5805, metadata !DIExpression()), !dbg !5811
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !5812
  br label %for.cond58, !dbg !5812

for.cond58:                                       ; preds = %for.inc61, %if.then57
  %32 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5814
  %tobool59 = icmp ne %struct.loop* %32, null, !dbg !5812
  br i1 %tobool59, label %for.body60, label %for.end62, !dbg !5812

for.body60:                                       ; preds = %for.cond58
  %33 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5816
  %34 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !5818
  %35 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !5819
  call void @substitute_in_loop_info(%struct.loop* %33, %union.tree_node* %34, %union.tree_node* %35), !dbg !5820
  br label %for.inc61, !dbg !5821

for.inc61:                                        ; preds = %for.body60
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !5814
  br label %for.cond58, !dbg !5814, !llvm.loop !5822

for.end62:                                        ; preds = %for.cond58
  br label %if.end63, !dbg !5824

if.end63:                                         ; preds = %for.end62, %cond.end54
  ret void, !dbg !5825
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !5826 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5831, metadata !DIExpression()), !dbg !5832
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !5833, metadata !DIExpression()), !dbg !5834
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !5835
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !5835
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !5835
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5836
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !5837
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !5838
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5839
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !5840
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !5840
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !5841
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5841
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5842
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !5843
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5844
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5845
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 3, !dbg !5846
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !5847
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5848
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 2, !dbg !5849
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !5850
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !5851
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5852
  %iter_node2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 2, !dbg !5853
  %next3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node2, i32 0, i32 1, !dbg !5854
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next3, align 8, !dbg !5855
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5856
  %iter_node4 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %9, i32 0, i32 2, !dbg !5857
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node4, i32 0, i32 2, !dbg !5858
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !5859
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !5860
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5861
  %iter_node5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 2, !dbg !5862
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node5, i32 0, i32 3, !dbg !5863
  store %union.tree_node** null, %union.tree_node*** %use, align 8, !dbg !5864
  %11 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5865
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %11), !dbg !5867
  %tobool = icmp ne i8 %call, 0, !dbg !5867
  br i1 %tobool, label %if.then, label %if.end, !dbg !5868

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !5869
  br label %return, !dbg !5869

if.end:                                           ; preds = %entry
  %12 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5870
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %12, i32 0, i32 0, !dbg !5871
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !5871
  %14 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5872
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %13, %struct.immediate_use_iterator_d* %14), !dbg !5873
  %15 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5874
  %imm_use7 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %15, i32 0, i32 0, !dbg !5874
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use7, align 8, !dbg !5874
  %loc8 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %16, i32 0, i32 2, !dbg !5874
  %stmt9 = bitcast %union.anon* %loc8 to %union.gimple_statement_d**, !dbg !5874
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt9, align 8, !dbg !5874
  store %union.gimple_statement_d* %17, %union.gimple_statement_d** %retval, align 8, !dbg !5875
  br label %return, !dbg !5875

return:                                           ; preds = %if.end, %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !5876
  ret %union.gimple_statement_d* %18, !dbg !5876
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !5877 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5882, metadata !DIExpression()), !dbg !5883
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5884
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !5885
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5885
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5886
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !5887
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !5887
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !5888
  %conv = zext i1 %cmp to i32, !dbg !5888
  %conv1 = trunc i32 %conv to i8, !dbg !5889
  ret i8 %conv1, !dbg !5890
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !5891 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5894, metadata !DIExpression()), !dbg !5895
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5896
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !5897
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5897
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 1, !dbg !5898
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5898
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5899
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %3, i32 0, i32 3, !dbg !5900
  store %struct.ssa_use_operand_d* %2, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !5901
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5902
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !5903
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !5903
  ret %struct.ssa_use_operand_d* %5, !dbg !5904
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !5905 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5906, metadata !DIExpression()), !dbg !5907
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5908
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !5909
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5909
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5910
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 2, !dbg !5911
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %iter_node, !dbg !5912
  %conv = zext i1 %cmp to i32, !dbg !5912
  %conv1 = trunc i32 %conv to i8, !dbg !5913
  ret i8 %conv1, !dbg !5914
}

declare dso_local void @replace_exp(%struct.ssa_use_operand_d*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !5915 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5918, metadata !DIExpression()), !dbg !5919
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !5920, metadata !DIExpression()), !dbg !5921
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5922
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !5922
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i32 0, i32 0, !dbg !5922
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !5922
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !5922
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5922

cond.true:                                        ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5922
  %call1 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %2), !dbg !5922
  %preds2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call1, i32 0, i32 0, !dbg !5922
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds2, align 8, !dbg !5922
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !5922
  br label %cond.end, !dbg !5922

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5922

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5922
  %4 = load i64, i64* %i.addr, align 8, !dbg !5922
  %conv = trunc i64 %4 to i32, !dbg !5922
  %call3 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %conv), !dbg !5922
  ret %struct.edge_def* %call3, !dbg !5923
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @phi_arg_index_from_use(%struct.ssa_use_operand_d* %use) #0 !dbg !5924 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %element = alloca %struct.phi_arg_d*, align 8
  %root = alloca %struct.phi_arg_d*, align 8
  %index = alloca i64, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !5927, metadata !DIExpression()), !dbg !5928
  call void @llvm.dbg.declare(metadata %struct.phi_arg_d** %element, metadata !5929, metadata !DIExpression()), !dbg !5930
  call void @llvm.dbg.declare(metadata %struct.phi_arg_d** %root, metadata !5931, metadata !DIExpression()), !dbg !5932
  call void @llvm.dbg.declare(metadata i64* %index, metadata !5933, metadata !DIExpression()), !dbg !5934
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !5935, metadata !DIExpression()), !dbg !5936
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !5937
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 2, !dbg !5937
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !5937
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5937
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %phi, align 8, !dbg !5938
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5939
  %call = call i32 @gimple_code(%union.gimple_statement_d* %2), !dbg !5939
  %cmp = icmp eq i32 %call, 16, !dbg !5939
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5939

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.65, i64 0, i64 0), i32 544, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5939
  br label %cond.end, !dbg !5939

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5939

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5939
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !5940
  %4 = bitcast %struct.ssa_use_operand_d* %3 to %struct.phi_arg_d*, !dbg !5941
  store %struct.phi_arg_d* %4, %struct.phi_arg_d** %element, align 8, !dbg !5942
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5943
  %call1 = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %5, i32 0), !dbg !5944
  store %struct.phi_arg_d* %call1, %struct.phi_arg_d** %root, align 8, !dbg !5945
  %6 = load %struct.phi_arg_d*, %struct.phi_arg_d** %element, align 8, !dbg !5946
  %7 = load %struct.phi_arg_d*, %struct.phi_arg_d** %root, align 8, !dbg !5947
  %sub.ptr.lhs.cast = ptrtoint %struct.phi_arg_d* %6 to i64, !dbg !5948
  %sub.ptr.rhs.cast = ptrtoint %struct.phi_arg_d* %7 to i64, !dbg !5948
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !5948
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 48, !dbg !5948
  store i64 %sub.ptr.div, i64* %index, align 8, !dbg !5949
  %8 = load i64, i64* %index, align 8, !dbg !5950
  %conv = trunc i64 %8 to i32, !dbg !5950
  ret i32 %conv, !dbg !5951
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !5952 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !5953, metadata !DIExpression()), !dbg !5954
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5955
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 3, !dbg !5956
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !5956
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5957
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !5958
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !5959
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5960
  %call = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !5962
  %tobool = icmp ne i8 %call, 0, !dbg !5962
  br i1 %tobool, label %if.then, label %if.else, !dbg !5963

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5964
  br label %return, !dbg !5964

if.else:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5965
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !5967
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !5967
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !5968
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5968
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5969
  %next_imm_name2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 3, !dbg !5970
  store %struct.ssa_use_operand_d* %6, %struct.ssa_use_operand_d** %next_imm_name2, align 8, !dbg !5971
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !5972
  %imm_use3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 0, !dbg !5973
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use3, align 8, !dbg !5973
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5974
  br label %return, !dbg !5974

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !5975
  ret %struct.ssa_use_operand_d* %10, !dbg !5975
}

declare dso_local zeroext i8 @fold_stmt_inplace(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !5976 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5979, metadata !DIExpression()), !dbg !5980
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5981
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5982
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !5983
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5983
  ret %struct.basic_block_def* %1, !dbg !5984
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !5985 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5986, metadata !DIExpression()), !dbg !5987
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5988
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5989
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !5990
  %1 = load i32, i32* %num_ops, align 4, !dbg !5990
  ret i32 %1, !dbg !5991
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5992 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5993, metadata !DIExpression()), !dbg !5994
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5995, metadata !DIExpression()), !dbg !5996
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5997
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5999
  %tobool = icmp ne i8 %call, 0, !dbg !5999
  br i1 %tobool, label %if.then, label %if.else, !dbg !6000

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6001
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !6003
  %2 = load i32, i32* %i.addr, align 4, !dbg !6004
  %idxprom = zext i32 %2 to i64, !dbg !6003
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !6003
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6003
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !6005
  br label %return, !dbg !6005

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6006
  br label %return, !dbg !6006

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6007
  ret %union.tree_node* %4, !dbg !6007
}

declare dso_local void @recompute_tree_invariant_for_addr_expr(%union.tree_node*) #2

declare dso_local zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !6008 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !6009, metadata !DIExpression()), !dbg !6010
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6011
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6013
  %tobool = icmp ne i8 %call, 0, !dbg !6013
  br i1 %tobool, label %if.then, label %if.end, !dbg !6014

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6015
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !6017
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6018
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !6019
  br label %if.end, !dbg !6020

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !6021
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6022 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6025, metadata !DIExpression()), !dbg !6026
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6027
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 2, !dbg !6028
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 1, !dbg !6029
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6029
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6030
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !6031
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6032
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6033
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !6035
  %tobool = icmp ne i8 %call, 0, !dbg !6035
  br i1 %tobool, label %if.then, label %if.end4, !dbg !6036

if.then:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6037
  %iter_node1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 2, !dbg !6040
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node1, i32 0, i32 0, !dbg !6041
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !6041
  %cmp = icmp ne %struct.ssa_use_operand_d* %5, null, !dbg !6042
  br i1 %cmp, label %if.then2, label %if.end, !dbg !6043

if.then2:                                         ; preds = %if.then
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6044
  %iter_node3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 2, !dbg !6045
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node3), !dbg !6046
  br label %if.end, !dbg !6046

if.end:                                           ; preds = %if.then2, %if.then
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !6047
  br label %return, !dbg !6047

if.end4:                                          ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6048
  %imm_use5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !6049
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use5, align 8, !dbg !6049
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6050
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %8, %struct.immediate_use_iterator_d* %9), !dbg !6051
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6052
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 0, !dbg !6052
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !6052
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 2, !dbg !6052
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !6052
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6052
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %retval, align 8, !dbg !6053
  br label %return, !dbg !6053

return:                                           ; preds = %if.end4, %if.end
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !6054
  ret %union.gimple_statement_d* %13, !dbg !6054
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @has_zero_uses(%union.tree_node* %var) #0 !dbg !6055 {
entry:
  %retval = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %ptr = alloca %struct.ssa_use_operand_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6059, metadata !DIExpression()), !dbg !6060
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %ptr, metadata !6061, metadata !DIExpression()), !dbg !6063
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6064
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !6064
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !6064
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6063
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6065
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6067
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !6068
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6068
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !6069
  br i1 %cmp, label %if.then, label %if.end, !dbg !6070

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !6071
  br label %return, !dbg !6071

if.end:                                           ; preds = %entry
  %4 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !6072
  %tobool = icmp ne i32 %4, 0, !dbg !6072
  br i1 %tobool, label %if.end2, label %if.then1, !dbg !6074

if.then1:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !6075
  br label %return, !dbg !6075

if.end2:                                          ; preds = %if.end
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !6076
  %call = call zeroext i8 @has_zero_uses_1(%struct.ssa_use_operand_d* %5), !dbg !6077
  store i8 %call, i8* %retval, align 1, !dbg !6078
  br label %return, !dbg !6078

return:                                           ; preds = %if.end2, %if.then1, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !6079
  ret i8 %6, !dbg !6079
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 %flags) #0 !dbg !6080 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %flags.addr = alloca i32, align 4
  %aloop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %mn = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !6085, metadata !DIExpression()), !dbg !6086
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !6087, metadata !DIExpression()), !dbg !6088
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6089, metadata !DIExpression()), !dbg !6090
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !6091, metadata !DIExpression()), !dbg !6092
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6093, metadata !DIExpression()), !dbg !6094
  call void @llvm.dbg.declare(metadata i32* %mn, metadata !6095, metadata !DIExpression()), !dbg !6096
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !6097
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 1, !dbg !6098
  store i32 0, i32* %idx, align 8, !dbg !6099
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6100
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !6100
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !6100
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !6100
  %tobool = icmp ne %struct.loops* %2, null, !dbg !6100
  br i1 %tobool, label %if.end, label %if.then, !dbg !6102

if.then:                                          ; preds = %entry
  %3 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !6103
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %3, i32 0, i32 0, !dbg !6105
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %to_visit, align 8, !dbg !6106
  %4 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !6107
  store %struct.loop* null, %struct.loop** %4, align 8, !dbg !6108
  br label %return, !dbg !6109

if.end:                                           ; preds = %entry
  %call = call i32 @number_of_loops(), !dbg !6110
  %call1 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %call), !dbg !6110
  %5 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !6111
  %to_visit2 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %5, i32 0, i32 0, !dbg !6112
  store %struct.VEC_int_heap* %call1, %struct.VEC_int_heap** %to_visit2, align 8, !dbg !6113
  %6 = load i32, i32* %flags.addr, align 4, !dbg !6114
  %and = and i32 %6, 1, !dbg !6115
  %tobool3 = icmp ne i32 %and, 0, !dbg !6116
  %7 = zext i1 %tobool3 to i64, !dbg !6116
  %cond = select i1 %tobool3, i32 0, i32 1, !dbg !6116
  store i32 %cond, i32* %mn, align 4, !dbg !6117
  %8 = load i32, i32* %flags.addr, align 4, !dbg !6118
  %and4 = and i32 %8, 4, !dbg !6120
  %tobool5 = icmp ne i32 %and4, 0, !dbg !6120
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !6121

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !6122
  br label %for.cond, !dbg !6125

for.cond:                                         ; preds = %for.inc, %if.then6
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6126
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !6126
  %x_current_loops8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 4, !dbg !6126
  %10 = load %struct.loops*, %struct.loops** %x_current_loops8, align 8, !dbg !6126
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %10, i32 0, i32 1, !dbg !6126
  %11 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !6126
  %tobool9 = icmp ne %struct.VEC_loop_p_gc* %11, null, !dbg !6126
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !6126

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6126
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !6126
  %x_current_loops11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 4, !dbg !6126
  %13 = load %struct.loops*, %struct.loops** %x_current_loops11, align 8, !dbg !6126
  %larray12 = getelementptr inbounds %struct.loops, %struct.loops* %13, i32 0, i32 1, !dbg !6126
  %14 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray12, align 8, !dbg !6126
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %14, i32 0, i32 0, !dbg !6126
  br label %cond.end, !dbg !6126

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !6126

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6126
  %15 = load i32, i32* %i, align 4, !dbg !6126
  %call14 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond13, i32 %15, %struct.loop** %aloop), !dbg !6126
  %tobool15 = icmp ne i32 %call14, 0, !dbg !6128
  br i1 %tobool15, label %for.body, label %for.end, !dbg !6128

for.body:                                         ; preds = %cond.end
  %16 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6129
  %cmp = icmp ne %struct.loop* %16, null, !dbg !6131
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !6132

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6133
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 8, !dbg !6134
  %18 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !6134
  %cmp16 = icmp eq %struct.loop* %18, null, !dbg !6135
  br i1 %cmp16, label %land.lhs.true17, label %if.end30, !dbg !6136

land.lhs.true17:                                  ; preds = %land.lhs.true
  %19 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6137
  %num = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 0, !dbg !6138
  %20 = load i32, i32* %num, align 8, !dbg !6138
  %21 = load i32, i32* %mn, align 4, !dbg !6139
  %cmp18 = icmp sge i32 %20, %21, !dbg !6140
  br i1 %cmp18, label %if.then19, label %if.end30, !dbg !6141

if.then19:                                        ; preds = %land.lhs.true17
  %22 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !6142
  %to_visit20 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %22, i32 0, i32 0, !dbg !6142
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit20, align 8, !dbg !6142
  %tobool21 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !6142
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !6142

cond.true22:                                      ; preds = %if.then19
  %24 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !6142
  %to_visit23 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %24, i32 0, i32 0, !dbg !6142
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit23, align 8, !dbg !6142
  %base24 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !6142
  br label %cond.end26, !dbg !6142

cond.false25:                                     ; preds = %if.then19
  br label %cond.end26, !dbg !6142

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_int_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !6142
  %26 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6142
  %num28 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 0, !dbg !6142
  %27 = load i32, i32* %num28, align 8, !dbg !6142
  %call29 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond27, i32 %27), !dbg !6142
  br label %if.end30, !dbg !6142

if.end30:                                         ; preds = %cond.end26, %land.lhs.true17, %land.lhs.true, %for.body
  br label %for.inc, !dbg !6139

for.inc:                                          ; preds = %if.end30
  %28 = load i32, i32* %i, align 4, !dbg !6143
  %inc = add i32 %28, 1, !dbg !6143
  store i32 %inc, i32* %i, align 4, !dbg !6143
  br label %for.cond, !dbg !6144, !llvm.loop !6145

for.end:                                          ; preds = %cond.end
  br label %if.end113, !dbg !6147

if.else:                                          ; preds = %if.end
  %29 = load i32, i32* %flags.addr, align 4, !dbg !6148
  %and31 = and i32 %29, 2, !dbg !6150
  %tobool32 = icmp ne i32 %and31, 0, !dbg !6150
  br i1 %tobool32, label %if.then33, label %if.else75, !dbg !6151

if.then33:                                        ; preds = %if.else
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6152
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !6152
  %x_current_loops35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 4, !dbg !6152
  %31 = load %struct.loops*, %struct.loops** %x_current_loops35, align 8, !dbg !6152
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %31, i32 0, i32 3, !dbg !6155
  %32 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !6155
  store %struct.loop* %32, %struct.loop** %aloop, align 8, !dbg !6156
  br label %for.cond36, !dbg !6157

for.cond36:                                       ; preds = %for.inc40, %if.then33
  %33 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6158
  %inner37 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 8, !dbg !6160
  %34 = load %struct.loop*, %struct.loop** %inner37, align 8, !dbg !6160
  %cmp38 = icmp ne %struct.loop* %34, null, !dbg !6161
  br i1 %cmp38, label %for.body39, label %for.end42, !dbg !6162

for.body39:                                       ; preds = %for.cond36
  br label %for.inc40, !dbg !6163

for.inc40:                                        ; preds = %for.body39
  %35 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6164
  %inner41 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 8, !dbg !6165
  %36 = load %struct.loop*, %struct.loop** %inner41, align 8, !dbg !6165
  store %struct.loop* %36, %struct.loop** %aloop, align 8, !dbg !6166
  br label %for.cond36, !dbg !6167, !llvm.loop !6168

for.end42:                                        ; preds = %for.cond36
  br label %while.body, !dbg !6170

while.body:                                       ; preds = %for.end42, %if.end74
  %37 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6171
  %num43 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !6174
  %38 = load i32, i32* %num43, align 8, !dbg !6174
  %39 = load i32, i32* %mn, align 4, !dbg !6175
  %cmp44 = icmp sge i32 %38, %39, !dbg !6176
  br i1 %cmp44, label %if.then45, label %if.end56, !dbg !6177

if.then45:                                        ; preds = %while.body
  %40 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !6178
  %to_visit46 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %40, i32 0, i32 0, !dbg !6178
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit46, align 8, !dbg !6178
  %tobool47 = icmp ne %struct.VEC_int_heap* %41, null, !dbg !6178
  br i1 %tobool47, label %cond.true48, label %cond.false51, !dbg !6178

cond.true48:                                      ; preds = %if.then45
  %42 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !6178
  %to_visit49 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %42, i32 0, i32 0, !dbg !6178
  %43 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit49, align 8, !dbg !6178
  %base50 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %43, i32 0, i32 0, !dbg !6178
  br label %cond.end52, !dbg !6178

cond.false51:                                     ; preds = %if.then45
  br label %cond.end52, !dbg !6178

cond.end52:                                       ; preds = %cond.false51, %cond.true48
  %cond53 = phi %struct.VEC_int_base* [ %base50, %cond.true48 ], [ null, %cond.false51 ], !dbg !6178
  %44 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6178
  %num54 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 0, !dbg !6178
  %45 = load i32, i32* %num54, align 8, !dbg !6178
  %call55 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond53, i32 %45), !dbg !6178
  br label %if.end56, !dbg !6178

if.end56:                                         ; preds = %cond.end52, %while.body
  %46 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6179
  %next = getelementptr inbounds %struct.loop, %struct.loop* %46, i32 0, i32 9, !dbg !6181
  %47 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !6181
  %tobool57 = icmp ne %struct.loop* %47, null, !dbg !6179
  br i1 %tobool57, label %if.then58, label %if.else67, !dbg !6182

if.then58:                                        ; preds = %if.end56
  %48 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6183
  %next59 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 9, !dbg !6186
  %49 = load %struct.loop*, %struct.loop** %next59, align 8, !dbg !6186
  store %struct.loop* %49, %struct.loop** %aloop, align 8, !dbg !6187
  br label %for.cond60, !dbg !6188

for.cond60:                                       ; preds = %for.inc64, %if.then58
  %50 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6189
  %inner61 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 8, !dbg !6191
  %51 = load %struct.loop*, %struct.loop** %inner61, align 8, !dbg !6191
  %cmp62 = icmp ne %struct.loop* %51, null, !dbg !6192
  br i1 %cmp62, label %for.body63, label %for.end66, !dbg !6193

for.body63:                                       ; preds = %for.cond60
  br label %for.inc64, !dbg !6194

for.inc64:                                        ; preds = %for.body63
  %52 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6195
  %inner65 = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 8, !dbg !6196
  %53 = load %struct.loop*, %struct.loop** %inner65, align 8, !dbg !6196
  store %struct.loop* %53, %struct.loop** %aloop, align 8, !dbg !6197
  br label %for.cond60, !dbg !6198, !llvm.loop !6199

for.end66:                                        ; preds = %for.cond60
  br label %if.end74, !dbg !6201

if.else67:                                        ; preds = %if.end56
  %54 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6202
  %call68 = call %struct.loop* @loop_outer(%struct.loop* %54), !dbg !6204
  %tobool69 = icmp ne %struct.loop* %call68, null, !dbg !6204
  br i1 %tobool69, label %if.else71, label %if.then70, !dbg !6205

if.then70:                                        ; preds = %if.else67
  br label %while.end, !dbg !6206

if.else71:                                        ; preds = %if.else67
  %55 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6207
  %call72 = call %struct.loop* @loop_outer(%struct.loop* %55), !dbg !6208
  store %struct.loop* %call72, %struct.loop** %aloop, align 8, !dbg !6209
  br label %if.end73

if.end73:                                         ; preds = %if.else71
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %for.end66
  br label %while.body, !dbg !6170, !llvm.loop !6210

while.end:                                        ; preds = %if.then70
  br label %if.end112, !dbg !6212

if.else75:                                        ; preds = %if.else
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6213
  %add.ptr76 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !6213
  %x_current_loops77 = getelementptr inbounds %struct.function, %struct.function* %add.ptr76, i32 0, i32 4, !dbg !6213
  %57 = load %struct.loops*, %struct.loops** %x_current_loops77, align 8, !dbg !6213
  %tree_root78 = getelementptr inbounds %struct.loops, %struct.loops* %57, i32 0, i32 3, !dbg !6215
  %58 = load %struct.loop*, %struct.loop** %tree_root78, align 8, !dbg !6215
  store %struct.loop* %58, %struct.loop** %aloop, align 8, !dbg !6216
  br label %while.body79, !dbg !6217

while.body79:                                     ; preds = %if.else75, %if.end110
  %59 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6218
  %num80 = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 0, !dbg !6221
  %60 = load i32, i32* %num80, align 8, !dbg !6221
  %61 = load i32, i32* %mn, align 4, !dbg !6222
  %cmp81 = icmp sge i32 %60, %61, !dbg !6223
  br i1 %cmp81, label %if.then82, label %if.end93, !dbg !6224

if.then82:                                        ; preds = %while.body79
  %62 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !6225
  %to_visit83 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %62, i32 0, i32 0, !dbg !6225
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit83, align 8, !dbg !6225
  %tobool84 = icmp ne %struct.VEC_int_heap* %63, null, !dbg !6225
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !6225

cond.true85:                                      ; preds = %if.then82
  %64 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !6225
  %to_visit86 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %64, i32 0, i32 0, !dbg !6225
  %65 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit86, align 8, !dbg !6225
  %base87 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %65, i32 0, i32 0, !dbg !6225
  br label %cond.end89, !dbg !6225

cond.false88:                                     ; preds = %if.then82
  br label %cond.end89, !dbg !6225

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_int_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !6225
  %66 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6225
  %num91 = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 0, !dbg !6225
  %67 = load i32, i32* %num91, align 8, !dbg !6225
  %call92 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond90, i32 %67), !dbg !6225
  br label %if.end93, !dbg !6225

if.end93:                                         ; preds = %cond.end89, %while.body79
  %68 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6226
  %inner94 = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 8, !dbg !6228
  %69 = load %struct.loop*, %struct.loop** %inner94, align 8, !dbg !6228
  %cmp95 = icmp ne %struct.loop* %69, null, !dbg !6229
  br i1 %cmp95, label %if.then96, label %if.else98, !dbg !6230

if.then96:                                        ; preds = %if.end93
  %70 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6231
  %inner97 = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 8, !dbg !6232
  %71 = load %struct.loop*, %struct.loop** %inner97, align 8, !dbg !6232
  store %struct.loop* %71, %struct.loop** %aloop, align 8, !dbg !6233
  br label %if.end110, !dbg !6234

if.else98:                                        ; preds = %if.end93
  br label %while.cond99, !dbg !6235

while.cond99:                                     ; preds = %while.body103, %if.else98
  %72 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6237
  %cmp100 = icmp ne %struct.loop* %72, null, !dbg !6238
  br i1 %cmp100, label %land.rhs, label %land.end, !dbg !6239

land.rhs:                                         ; preds = %while.cond99
  %73 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6240
  %next101 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 9, !dbg !6241
  %74 = load %struct.loop*, %struct.loop** %next101, align 8, !dbg !6241
  %cmp102 = icmp eq %struct.loop* %74, null, !dbg !6242
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond99
  %75 = phi i1 [ false, %while.cond99 ], [ %cmp102, %land.rhs ], !dbg !6243
  br i1 %75, label %while.body103, label %while.end105, !dbg !6235

while.body103:                                    ; preds = %land.end
  %76 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6244
  %call104 = call %struct.loop* @loop_outer(%struct.loop* %76), !dbg !6245
  store %struct.loop* %call104, %struct.loop** %aloop, align 8, !dbg !6246
  br label %while.cond99, !dbg !6235, !llvm.loop !6247

while.end105:                                     ; preds = %land.end
  %77 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6249
  %cmp106 = icmp eq %struct.loop* %77, null, !dbg !6251
  br i1 %cmp106, label %if.then107, label %if.end108, !dbg !6252

if.then107:                                       ; preds = %while.end105
  br label %while.end111, !dbg !6253

if.end108:                                        ; preds = %while.end105
  %78 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !6254
  %next109 = getelementptr inbounds %struct.loop, %struct.loop* %78, i32 0, i32 9, !dbg !6255
  %79 = load %struct.loop*, %struct.loop** %next109, align 8, !dbg !6255
  store %struct.loop* %79, %struct.loop** %aloop, align 8, !dbg !6256
  br label %if.end110

if.end110:                                        ; preds = %if.end108, %if.then96
  br label %while.body79, !dbg !6217, !llvm.loop !6257

while.end111:                                     ; preds = %if.then107
  br label %if.end112

if.end112:                                        ; preds = %while.end111, %while.end
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %for.end
  %80 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !6259
  %81 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !6260
  call void @fel_next(%struct.loop_iterator* %80, %struct.loop** %81), !dbg !6261
  br label %return, !dbg !6262

return:                                           ; preds = %if.end113, %if.then
  ret void, !dbg !6262
}

declare dso_local void @substitute_in_loop_info(%struct.loop*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop) #0 !dbg !6263 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %anum = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !6266, metadata !DIExpression()), !dbg !6267
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !6268, metadata !DIExpression()), !dbg !6269
  call void @llvm.dbg.declare(metadata i32* %anum, metadata !6270, metadata !DIExpression()), !dbg !6271
  br label %while.cond, !dbg !6272

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !6273
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 0, !dbg !6273
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit, align 8, !dbg !6273
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !6273
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6273

cond.true:                                        ; preds = %while.cond
  %2 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !6273
  %to_visit1 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %2, i32 0, i32 0, !dbg !6273
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit1, align 8, !dbg !6273
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !6273
  br label %cond.end, !dbg !6273

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !6273

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6273
  %4 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !6273
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %4, i32 0, i32 1, !dbg !6273
  %5 = load i32, i32* %idx, align 8, !dbg !6273
  %call = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %5, i32* %anum), !dbg !6273
  %tobool2 = icmp ne i32 %call, 0, !dbg !6272
  br i1 %tobool2, label %while.body, label %while.end, !dbg !6272

while.body:                                       ; preds = %cond.end
  %6 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !6274
  %idx3 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %6, i32 0, i32 1, !dbg !6276
  %7 = load i32, i32* %idx3, align 8, !dbg !6277
  %inc = add i32 %7, 1, !dbg !6277
  store i32 %inc, i32* %idx3, align 8, !dbg !6277
  %8 = load i32, i32* %anum, align 4, !dbg !6278
  %call4 = call %struct.loop* @get_loop(i32 %8), !dbg !6279
  %9 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !6280
  store %struct.loop* %call4, %struct.loop** %9, align 8, !dbg !6281
  %10 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !6282
  %11 = load %struct.loop*, %struct.loop** %10, align 8, !dbg !6284
  %tobool5 = icmp ne %struct.loop* %11, null, !dbg !6284
  br i1 %tobool5, label %if.then, label %if.end, !dbg !6285

if.then:                                          ; preds = %while.body
  br label %return, !dbg !6286

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !6272, !llvm.loop !6287

while.end:                                        ; preds = %cond.end
  %12 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !6289
  %to_visit6 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %12, i32 0, i32 0, !dbg !6289
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %to_visit6), !dbg !6289
  %13 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !6290
  store %struct.loop* null, %struct.loop** %13, align 8, !dbg !6291
  br label %return, !dbg !6292

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !6292
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.basic_block_def* @single_noncomplex_succ(%struct.basic_block_def* %bb) #0 !dbg !6293 {
entry:
  %retval = alloca %struct.basic_block_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e0 = alloca %struct.edge_def*, align 8
  %e1 = alloca %struct.edge_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6294, metadata !DIExpression()), !dbg !6295
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e0, metadata !6296, metadata !DIExpression()), !dbg !6297
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e1, metadata !6298, metadata !DIExpression()), !dbg !6299
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6300
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !6300
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6300
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !6300
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6300

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6300
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !6300
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !6300
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !6300
  br label %cond.end, !dbg !6300

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6300

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6300
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6300
  %cmp = icmp ne i32 %call, 2, !dbg !6302
  br i1 %cmp, label %if.then, label %if.end, !dbg !6303

if.then:                                          ; preds = %cond.end
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6304
  store %struct.basic_block_def* %4, %struct.basic_block_def** %retval, align 8, !dbg !6305
  br label %return, !dbg !6305

if.end:                                           ; preds = %cond.end
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6306
  %succs2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 1, !dbg !6306
  %6 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs2, align 8, !dbg !6306
  %tobool3 = icmp ne %struct.VEC_edge_gc* %6, null, !dbg !6306
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !6306

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6306
  %succs5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 1, !dbg !6306
  %8 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs5, align 8, !dbg !6306
  %base6 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %8, i32 0, i32 0, !dbg !6306
  br label %cond.end8, !dbg !6306

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !6306

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_edge_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !6306
  %call10 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond9, i32 0), !dbg !6306
  store %struct.edge_def* %call10, %struct.edge_def** %e0, align 8, !dbg !6307
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6308
  %succs11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 1, !dbg !6308
  %10 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs11, align 8, !dbg !6308
  %tobool12 = icmp ne %struct.VEC_edge_gc* %10, null, !dbg !6308
  br i1 %tobool12, label %cond.true13, label %cond.false16, !dbg !6308

cond.true13:                                      ; preds = %cond.end8
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6308
  %succs14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 1, !dbg !6308
  %12 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs14, align 8, !dbg !6308
  %base15 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %12, i32 0, i32 0, !dbg !6308
  br label %cond.end17, !dbg !6308

cond.false16:                                     ; preds = %cond.end8
  br label %cond.end17, !dbg !6308

cond.end17:                                       ; preds = %cond.false16, %cond.true13
  %cond18 = phi %struct.VEC_edge_base* [ %base15, %cond.true13 ], [ null, %cond.false16 ], !dbg !6308
  %call19 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond18, i32 1), !dbg !6308
  store %struct.edge_def* %call19, %struct.edge_def** %e1, align 8, !dbg !6309
  %13 = load %struct.edge_def*, %struct.edge_def** %e0, align 8, !dbg !6310
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 7, !dbg !6312
  %14 = load i32, i32* %flags, align 8, !dbg !6312
  %and = and i32 %14, 14, !dbg !6313
  %tobool20 = icmp ne i32 %and, 0, !dbg !6313
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !6314

if.then21:                                        ; preds = %cond.end17
  %15 = load %struct.edge_def*, %struct.edge_def** %e1, align 8, !dbg !6315
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %15, i32 0, i32 1, !dbg !6316
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6316
  store %struct.basic_block_def* %16, %struct.basic_block_def** %retval, align 8, !dbg !6317
  br label %return, !dbg !6317

if.end22:                                         ; preds = %cond.end17
  %17 = load %struct.edge_def*, %struct.edge_def** %e1, align 8, !dbg !6318
  %flags23 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %17, i32 0, i32 7, !dbg !6320
  %18 = load i32, i32* %flags23, align 8, !dbg !6320
  %and24 = and i32 %18, 14, !dbg !6321
  %tobool25 = icmp ne i32 %and24, 0, !dbg !6321
  br i1 %tobool25, label %if.then26, label %if.end28, !dbg !6322

if.then26:                                        ; preds = %if.end22
  %19 = load %struct.edge_def*, %struct.edge_def** %e0, align 8, !dbg !6323
  %dest27 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %19, i32 0, i32 1, !dbg !6324
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %dest27, align 8, !dbg !6324
  store %struct.basic_block_def* %20, %struct.basic_block_def** %retval, align 8, !dbg !6325
  br label %return, !dbg !6325

if.end28:                                         ; preds = %if.end22
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6326
  store %struct.basic_block_def* %21, %struct.basic_block_def** %retval, align 8, !dbg !6327
  br label %return, !dbg !6327

return:                                           ; preds = %if.end28, %if.then26, %if.then21, %if.then
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %retval, align 8, !dbg !6328
  ret %struct.basic_block_def* %22, !dbg !6328
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !6329 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6334, metadata !DIExpression()), !dbg !6335
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6335
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !6335
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6335

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6335
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !6335
  %2 = load i32, i32* %num, align 8, !dbg !6335
  br label %cond.end, !dbg !6335

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6335

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6335
  ret i32 %cond, !dbg !6335
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !6336 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6339, metadata !DIExpression()), !dbg !6340
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6341, metadata !DIExpression()), !dbg !6340
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6340
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !6340
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6340

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6340
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6340
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !6340
  %3 = load i32, i32* %num, align 8, !dbg !6340
  %cmp = icmp ult i32 %1, %3, !dbg !6340
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6342
  %land.ext = zext i1 %4 to i32, !dbg !6340
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6340
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !6340
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6340
  %idxprom = zext i32 %6 to i64, !dbg !6340
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !6340
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !6340
  ret %struct.edge_def* %7, !dbg !6340
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @notice_special_calls(%union.gimple_statement_d* %call) #0 !dbg !6343 {
entry:
  %call.addr = alloca %union.gimple_statement_d*, align 8
  %flags = alloca i32, align 4
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %call.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call.addr, metadata !6344, metadata !DIExpression()), !dbg !6345
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !6346, metadata !DIExpression()), !dbg !6347
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call.addr, align 8, !dbg !6348
  %call1 = call i32 @gimple_call_flags(%union.gimple_statement_d* %0), !dbg !6349
  store i32 %call1, i32* %flags, align 4, !dbg !6347
  %1 = load i32, i32* %flags, align 4, !dbg !6350
  %and = and i32 %1, 32, !dbg !6352
  %tobool = icmp ne i32 %and, 0, !dbg !6352
  br i1 %tobool, label %if.then, label %if.end, !dbg !6353

if.then:                                          ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6354
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !6354
  %calls_alloca = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !6355
  %bf.load = load i32, i32* %calls_alloca, align 8, !dbg !6356
  %bf.clear = and i32 %bf.load, -524289, !dbg !6356
  %bf.set = or i32 %bf.clear, 524288, !dbg !6356
  store i32 %bf.set, i32* %calls_alloca, align 8, !dbg !6356
  br label %if.end, !dbg !6354

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %flags, align 4, !dbg !6357
  %and2 = and i32 %3, 128, !dbg !6359
  %tobool3 = icmp ne i32 %and2, 0, !dbg !6359
  br i1 %tobool3, label %if.then4, label %if.end9, !dbg !6360

if.then4:                                         ; preds = %if.end
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6361
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !6361
  %calls_setjmp = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 20, !dbg !6362
  %bf.load6 = load i32, i32* %calls_setjmp, align 8, !dbg !6363
  %bf.clear7 = and i32 %bf.load6, -262145, !dbg !6363
  %bf.set8 = or i32 %bf.clear7, 262144, !dbg !6363
  store i32 %bf.set8, i32* %calls_setjmp, align 8, !dbg !6363
  br label %if.end9, !dbg !6361

if.end9:                                          ; preds = %if.then4, %if.end
  ret void, !dbg !6364
}

declare dso_local i32 @gimple_call_flags(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @clear_special_calls() #0 !dbg !6365 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6366
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6366
  %calls_alloca = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !6367
  %bf.load = load i32, i32* %calls_alloca, align 8, !dbg !6368
  %bf.clear = and i32 %bf.load, -524289, !dbg !6368
  store i32 %bf.clear, i32* %calls_alloca, align 8, !dbg !6368
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6369
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !6369
  %calls_setjmp = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 20, !dbg !6370
  %bf.load2 = load i32, i32* %calls_setjmp, align 8, !dbg !6371
  %bf.clear3 = and i32 %bf.load2, -262145, !dbg !6371
  store i32 %bf.clear3, i32* %calls_setjmp, align 8, !dbg !6371
  ret void, !dbg !6372
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.edge_def* @find_taken_edge(%struct.basic_block_def* %bb, %union.tree_node* %val) #0 !dbg !6373 {
entry:
  %retval = alloca %struct.edge_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6376, metadata !DIExpression()), !dbg !6377
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !6378, metadata !DIExpression()), !dbg !6379
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6380, metadata !DIExpression()), !dbg !6381
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6382
  %call = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %0), !dbg !6383
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !6384
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6385
  %tobool = icmp ne %union.gimple_statement_d* %1, null, !dbg !6385
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6385

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1839, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6385
  br label %cond.end, !dbg !6385

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6385

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6385
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6386
  %call1 = call zeroext i8 @is_ctrl_stmt(%union.gimple_statement_d* %2), !dbg !6386
  %tobool2 = icmp ne i8 %call1, 0, !dbg !6386
  br i1 %tobool2, label %cond.false4, label %cond.true3, !dbg !6386

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1840, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6386
  br label %cond.end5, !dbg !6386

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6386

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !6386
  %3 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6387
  %cmp = icmp eq %union.tree_node* %3, null, !dbg !6389
  br i1 %cmp, label %if.then, label %if.end, !dbg !6390

if.then:                                          ; preds = %cond.end5
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !6391
  br label %return, !dbg !6391

if.end:                                           ; preds = %cond.end5
  %4 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6392
  %call7 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %4), !dbg !6394
  %tobool8 = icmp ne i8 %call7, 0, !dbg !6394
  br i1 %tobool8, label %if.end10, label %if.then9, !dbg !6395

if.then9:                                         ; preds = %if.end
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !6396
  br label %return, !dbg !6396

if.end10:                                         ; preds = %if.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6397
  %call11 = call i32 @gimple_code(%union.gimple_statement_d* %5), !dbg !6399
  %cmp12 = icmp eq i32 %call11, 1, !dbg !6400
  br i1 %cmp12, label %if.then13, label %if.end15, !dbg !6401

if.then13:                                        ; preds = %if.end10
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6402
  %7 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6403
  %call14 = call %struct.edge_def* @find_taken_edge_cond_expr(%struct.basic_block_def* %6, %union.tree_node* %7), !dbg !6404
  store %struct.edge_def* %call14, %struct.edge_def** %retval, align 8, !dbg !6405
  br label %return, !dbg !6405

if.end15:                                         ; preds = %if.end10
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6406
  %call16 = call i32 @gimple_code(%union.gimple_statement_d* %8), !dbg !6408
  %cmp17 = icmp eq i32 %call16, 5, !dbg !6409
  br i1 %cmp17, label %if.then18, label %if.end20, !dbg !6410

if.then18:                                        ; preds = %if.end15
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6411
  %10 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6412
  %call19 = call %struct.edge_def* @find_taken_edge_switch_expr(%struct.basic_block_def* %9, %union.tree_node* %10), !dbg !6413
  store %struct.edge_def* %call19, %struct.edge_def** %retval, align 8, !dbg !6414
  br label %return, !dbg !6414

if.end20:                                         ; preds = %if.end15
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6415
  %call21 = call zeroext i8 @computed_goto_p(%union.gimple_statement_d* %11), !dbg !6417
  %tobool22 = icmp ne i8 %call21, 0, !dbg !6417
  br i1 %tobool22, label %if.then23, label %if.end41, !dbg !6418

if.then23:                                        ; preds = %if.end20
  %12 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6419
  %base = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !6419
  %13 = bitcast %struct.tree_base* %base to i64*, !dbg !6419
  %bf.load = load i64, i64* %13, align 8, !dbg !6419
  %bf.clear = and i64 %bf.load, 65535, !dbg !6419
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6419
  %cmp24 = icmp eq i32 %bf.cast, 121, !dbg !6422
  br i1 %cmp24, label %land.lhs.true, label %lor.lhs.false, !dbg !6423

lor.lhs.false:                                    ; preds = %if.then23
  %14 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6424
  %base25 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !6424
  %15 = bitcast %struct.tree_base* %base25 to i64*, !dbg !6424
  %bf.load26 = load i64, i64* %15, align 8, !dbg !6424
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !6424
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !6424
  %cmp29 = icmp eq i32 %bf.cast28, 133, !dbg !6425
  br i1 %cmp29, label %land.lhs.true, label %if.end40, !dbg !6426

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.then23
  %16 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6427
  %exp = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !6427
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6427
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6427
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6427
  %base30 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !6427
  %18 = bitcast %struct.tree_base* %base30 to i64*, !dbg !6427
  %bf.load31 = load i64, i64* %18, align 8, !dbg !6427
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !6427
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !6427
  %cmp34 = icmp eq i32 %bf.cast33, 30, !dbg !6428
  br i1 %cmp34, label %if.then35, label %if.end40, !dbg !6429

if.then35:                                        ; preds = %land.lhs.true
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6430
  %20 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6431
  %exp36 = bitcast %union.tree_node* %20 to %struct.tree_exp*, !dbg !6431
  %operands37 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp36, i32 0, i32 3, !dbg !6431
  %arrayidx38 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands37, i64 0, i64 0, !dbg !6431
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx38, align 8, !dbg !6431
  %call39 = call %struct.edge_def* @find_taken_edge_computed_goto(%struct.basic_block_def* %19, %union.tree_node* %21), !dbg !6432
  store %struct.edge_def* %call39, %struct.edge_def** %retval, align 8, !dbg !6433
  br label %return, !dbg !6433

if.end40:                                         ; preds = %land.lhs.true, %lor.lhs.false
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !6434
  br label %return, !dbg !6434

if.end41:                                         ; preds = %if.end20
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1868, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6435
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !6436
  br label %return, !dbg !6436

return:                                           ; preds = %if.end41, %if.end40, %if.then35, %if.then18, %if.then13, %if.then9, %if.then
  %22 = load %struct.edge_def*, %struct.edge_def** %retval, align 8, !dbg !6437
  ret %struct.edge_def* %22, !dbg !6437
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_ctrl_stmt(%union.gimple_statement_d* %t) #0 !dbg !6438 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %t, %union.gimple_statement_d** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t.addr, metadata !6439, metadata !DIExpression()), !dbg !6440
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !6441
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6442
  switch i32 %call, label %sw.default [
    i32 1, label %sw.bb
    i32 5, label %sw.bb
    i32 3, label %sw.bb
    i32 9, label %sw.bb
    i32 14, label %sw.bb
  ], !dbg !6443

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !6444
  br label %return, !dbg !6444

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6446
  br label %return, !dbg !6446

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i8, i8* %retval, align 1, !dbg !6447
  ret i8 %1, !dbg !6447
}

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @find_taken_edge_cond_expr(%struct.basic_block_def* %bb, %union.tree_node* %val) #0 !dbg !6448 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  %true_edge = alloca %struct.edge_def*, align 8
  %false_edge = alloca %struct.edge_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6449, metadata !DIExpression()), !dbg !6450
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !6451, metadata !DIExpression()), !dbg !6452
  call void @llvm.dbg.declare(metadata %struct.edge_def** %true_edge, metadata !6453, metadata !DIExpression()), !dbg !6454
  call void @llvm.dbg.declare(metadata %struct.edge_def** %false_edge, metadata !6455, metadata !DIExpression()), !dbg !6456
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6457
  call void @extract_true_false_edges_from_block(%struct.basic_block_def* %0, %struct.edge_def** %true_edge, %struct.edge_def** %false_edge), !dbg !6458
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6459
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6459
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6459
  %bf.load = load i64, i64* %2, align 8, !dbg !6459
  %bf.clear = and i64 %bf.load, 65535, !dbg !6459
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6459
  %cmp = icmp eq i32 %bf.cast, 23, !dbg !6459
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6459

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1905, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6459
  br label %cond.end, !dbg !6459

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6459

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6459
  %3 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6460
  %call = call i32 @integer_zerop(%union.tree_node* %3), !dbg !6461
  %tobool = icmp ne i32 %call, 0, !dbg !6461
  br i1 %tobool, label %cond.true1, label %cond.false2, !dbg !6461

cond.true1:                                       ; preds = %cond.end
  %4 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !6462
  br label %cond.end3, !dbg !6461

cond.false2:                                      ; preds = %cond.end
  %5 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !6463
  br label %cond.end3, !dbg !6461

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond4 = phi %struct.edge_def* [ %4, %cond.true1 ], [ %5, %cond.false2 ], !dbg !6461
  ret %struct.edge_def* %cond4, !dbg !6464
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @find_taken_edge_switch_expr(%struct.basic_block_def* %bb, %union.tree_node* %val) #0 !dbg !6465 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  %dest_bb = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %switch_stmt = alloca %union.gimple_statement_d*, align 8
  %taken_case = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6466, metadata !DIExpression()), !dbg !6467
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !6468, metadata !DIExpression()), !dbg !6469
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest_bb, metadata !6470, metadata !DIExpression()), !dbg !6471
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6472, metadata !DIExpression()), !dbg !6473
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %switch_stmt, metadata !6474, metadata !DIExpression()), !dbg !6475
  call void @llvm.dbg.declare(metadata %union.tree_node** %taken_case, metadata !6476, metadata !DIExpression()), !dbg !6477
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6478
  %call = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %0), !dbg !6479
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %switch_stmt, align 8, !dbg !6480
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %switch_stmt, align 8, !dbg !6481
  %2 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6482
  %call1 = call %union.tree_node* @find_case_label_for_value(%union.gimple_statement_d* %1, %union.tree_node* %2), !dbg !6483
  store %union.tree_node* %call1, %union.tree_node** %taken_case, align 8, !dbg !6484
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6485
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !6485
  %4 = load %union.tree_node*, %union.tree_node** %taken_case, align 8, !dbg !6485
  %exp = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !6485
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6485
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !6485
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6485
  %call2 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr, %union.tree_node* %5), !dbg !6485
  store %struct.basic_block_def* %call2, %struct.basic_block_def** %dest_bb, align 8, !dbg !6486
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6487
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %dest_bb, align 8, !dbg !6488
  %call3 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %6, %struct.basic_block_def* %7), !dbg !6489
  store %struct.edge_def* %call3, %struct.edge_def** %e, align 8, !dbg !6490
  %8 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6491
  %tobool = icmp ne %struct.edge_def* %8, null, !dbg !6491
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6491

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1926, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6491
  br label %cond.end, !dbg !6491

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6491

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6491
  %9 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6492
  ret %struct.edge_def* %9, !dbg !6493
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @find_taken_edge_computed_goto(%struct.basic_block_def* %bb, %union.tree_node* %val) #0 !dbg !6494 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  %dest = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6495, metadata !DIExpression()), !dbg !6496
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !6497, metadata !DIExpression()), !dbg !6498
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest, metadata !6499, metadata !DIExpression()), !dbg !6500
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6501, metadata !DIExpression()), !dbg !6502
  store %struct.edge_def* null, %struct.edge_def** %e, align 8, !dbg !6502
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6503
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6503
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6503
  %call = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr, %union.tree_node* %1), !dbg !6503
  store %struct.basic_block_def* %call, %struct.basic_block_def** %dest, align 8, !dbg !6504
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6505
  %tobool = icmp ne %struct.basic_block_def* %2, null, !dbg !6505
  br i1 %tobool, label %if.then, label %if.end, !dbg !6507

if.then:                                          ; preds = %entry
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6508
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6510
  %call1 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %3, %struct.basic_block_def* %4), !dbg !6511
  store %struct.edge_def* %call1, %struct.edge_def** %e, align 8, !dbg !6512
  %5 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6513
  %cmp = icmp ne %struct.edge_def* %5, null, !dbg !6513
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6513

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1888, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6513
  br label %cond.end, !dbg !6513

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !6513

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6513
  br label %if.end, !dbg !6514

if.end:                                           ; preds = %cond.end, %entry
  %6 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6515
  ret %struct.edge_def* %6, !dbg !6516
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_debug_bb(%struct.basic_block_def* %bb) #0 !dbg !6517 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6518, metadata !DIExpression()), !dbg !6519
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6520
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6521
  call void @gimple_dump_bb(%struct.basic_block_def* %0, %struct._IO_FILE* %1, i32 0, i32 16448), !dbg !6522
  ret void, !dbg !6523
}

declare dso_local void @gimple_dump_bb(%struct.basic_block_def*, %struct._IO_FILE*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.basic_block_def* @gimple_debug_bb_n(i32 %n) #0 !dbg !6524 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !6527, metadata !DIExpression()), !dbg !6528
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6529
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6529
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6529
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6529
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 2, !dbg !6529
  %2 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !6529
  %tobool = icmp ne %struct.VEC_basic_block_gc* %2, null, !dbg !6529
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6529

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6529
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !6529
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !6529
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !6529
  %x_basic_block_info3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 2, !dbg !6529
  %5 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info3, align 8, !dbg !6529
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %5, i32 0, i32 0, !dbg !6529
  br label %cond.end, !dbg !6529

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6529

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6529
  %6 = load i32, i32* %n.addr, align 4, !dbg !6529
  %call = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %6), !dbg !6529
  call void @gimple_debug_bb(%struct.basic_block_def* %call), !dbg !6530
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6531
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !6531
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 1, !dbg !6531
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !6531
  %x_basic_block_info6 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 2, !dbg !6531
  %9 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info6, align 8, !dbg !6531
  %tobool7 = icmp ne %struct.VEC_basic_block_gc* %9, null, !dbg !6531
  br i1 %tobool7, label %cond.true8, label %cond.false13, !dbg !6531

cond.true8:                                       ; preds = %cond.end
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6531
  %add.ptr9 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !6531
  %cfg10 = getelementptr inbounds %struct.function, %struct.function* %add.ptr9, i32 0, i32 1, !dbg !6531
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg10, align 8, !dbg !6531
  %x_basic_block_info11 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 2, !dbg !6531
  %12 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info11, align 8, !dbg !6531
  %base12 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %12, i32 0, i32 0, !dbg !6531
  br label %cond.end14, !dbg !6531

cond.false13:                                     ; preds = %cond.end
  br label %cond.end14, !dbg !6531

cond.end14:                                       ; preds = %cond.false13, %cond.true8
  %cond15 = phi %struct.VEC_basic_block_base* [ %base12, %cond.true8 ], [ null, %cond.false13 ], !dbg !6531
  %13 = load i32, i32* %n.addr, align 4, !dbg !6531
  %call16 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond15, i32 %13), !dbg !6531
  ret %struct.basic_block_def* %call16, !dbg !6532
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_debug_cfg(i32 %flags) #0 !dbg !6533 {
entry:
  %flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6536, metadata !DIExpression()), !dbg !6537
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6538
  %1 = load i32, i32* %flags.addr, align 4, !dbg !6539
  call void @gimple_dump_cfg(%struct._IO_FILE* %0, i32 %1), !dbg !6540
  ret void, !dbg !6541
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_dump_cfg(%struct._IO_FILE* %file, i32 %flags) #0 !dbg !6542 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %flags.addr = alloca i32, align 4
  %funcname = alloca i8*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !6545, metadata !DIExpression()), !dbg !6546
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6547, metadata !DIExpression()), !dbg !6548
  %0 = load i32, i32* %flags.addr, align 4, !dbg !6549
  %and = and i32 %0, 8, !dbg !6551
  %tobool = icmp ne i32 %and, 0, !dbg !6551
  br i1 %tobool, label %if.then, label %if.end, !dbg !6552

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8** %funcname, metadata !6553, metadata !DIExpression()), !dbg !6555
  %1 = load i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 22), align 8, !dbg !6556
  %2 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6557
  %call = call i8* %1(%union.tree_node* %2, i32 2), !dbg !6558
  store i8* %call, i8** %funcname, align 8, !dbg !6555
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6559
  %call1 = call i32 @fputc(i32 10, %struct._IO_FILE* %3), !dbg !6560
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6561
  %5 = load i8*, i8** %funcname, align 8, !dbg !6562
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i8* %5), !dbg !6563
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6564
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6565
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !6565
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6565
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6565
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 3, !dbg !6565
  %9 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !6565
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6566
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !6566
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !6566
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !6566
  %x_n_edges = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 4, !dbg !6566
  %12 = load i32, i32* %x_n_edges, align 4, !dbg !6566
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6567
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !6567
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !6567
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !6567
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 5, !dbg !6567
  %15 = load i32, i32* %x_last_basic_block, align 8, !dbg !6567
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.4, i64 0, i64 0), i32 %9, i32 %12, i32 %15), !dbg !6568
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6569
  call void @brief_dump_cfg(%struct._IO_FILE* %16), !dbg !6570
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6571
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6572
  br label %if.end, !dbg !6573

if.end:                                           ; preds = %if.then, %entry
  %18 = load i32, i32* %flags.addr, align 4, !dbg !6574
  %and9 = and i32 %18, 16, !dbg !6576
  %tobool10 = icmp ne i32 %and9, 0, !dbg !6576
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !6577

if.then11:                                        ; preds = %if.end
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6578
  call void @dump_cfg_stats(%struct._IO_FILE* %19), !dbg !6579
  br label %if.end12, !dbg !6579

if.end12:                                         ; preds = %if.then11, %if.end
  %20 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6580
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6581
  %22 = load i32, i32* %flags.addr, align 4, !dbg !6582
  %or = or i32 %22, 32, !dbg !6583
  call void @dump_function_to_file(%union.tree_node* %20, %struct._IO_FILE* %21, i32 %or), !dbg !6584
  ret void, !dbg !6585
}

declare dso_local i32 @fputc(i32, %struct._IO_FILE*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @brief_dump_cfg(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_cfg_stats(%struct._IO_FILE* %file) #0 !dbg !4128 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %size = alloca i64, align 8
  %total = alloca i64, align 8
  %num_edges = alloca i64, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %fmt_str = alloca i8*, align 8
  %fmt_str_1 = alloca i8*, align 8
  %fmt_str_2 = alloca i8*, align 8
  %fmt_str_3 = alloca i8*, align 8
  %funcname = alloca i8*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !6586, metadata !DIExpression()), !dbg !6587
  call void @llvm.dbg.declare(metadata i64* %size, metadata !6588, metadata !DIExpression()), !dbg !6589
  call void @llvm.dbg.declare(metadata i64* %total, metadata !6590, metadata !DIExpression()), !dbg !6591
  store i64 0, i64* %total, align 8, !dbg !6591
  call void @llvm.dbg.declare(metadata i64* %num_edges, metadata !6592, metadata !DIExpression()), !dbg !6593
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6594, metadata !DIExpression()), !dbg !6595
  call void @llvm.dbg.declare(metadata i8** %fmt_str, metadata !6596, metadata !DIExpression()), !dbg !6598
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i8** %fmt_str, align 8, !dbg !6598
  call void @llvm.dbg.declare(metadata i8** %fmt_str_1, metadata !6599, metadata !DIExpression()), !dbg !6600
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0), i8** %fmt_str_1, align 8, !dbg !6600
  call void @llvm.dbg.declare(metadata i8** %fmt_str_2, metadata !6601, metadata !DIExpression()), !dbg !6602
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i64 0, i64 0), i8** %fmt_str_2, align 8, !dbg !6602
  call void @llvm.dbg.declare(metadata i8** %fmt_str_3, metadata !6603, metadata !DIExpression()), !dbg !6604
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0), i8** %fmt_str_3, align 8, !dbg !6604
  call void @llvm.dbg.declare(metadata i8** %funcname, metadata !6605, metadata !DIExpression()), !dbg !6606
  %0 = load i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 22), align 8, !dbg !6607
  %1 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6608
  %call = call i8* %0(%union.tree_node* %1, i32 2), !dbg !6609
  store i8* %call, i8** %funcname, align 8, !dbg !6606
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6610
  %3 = load i8*, i8** %funcname, align 8, !dbg !6611
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0), i8* %3), !dbg !6612
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6613
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.11, i64 0, i64 0)), !dbg !6614
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6615
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i64 0, i64 0)), !dbg !6616
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6617
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i64 0, i64 0)), !dbg !6618
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6619
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.11, i64 0, i64 0)), !dbg !6620
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6621
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !6621
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6621
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6621
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 3, !dbg !6621
  %10 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !6621
  %conv = sext i32 %10 to i64, !dbg !6621
  %mul = mul i64 %conv, 104, !dbg !6622
  store i64 %mul, i64* %size, align 8, !dbg !6623
  %11 = load i64, i64* %size, align 8, !dbg !6624
  %12 = load i64, i64* %total, align 8, !dbg !6625
  %add = add i64 %12, %11, !dbg !6625
  store i64 %add, i64* %total, align 8, !dbg !6625
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6626
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6627
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !6627
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !6627
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !6627
  %x_n_basic_blocks8 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 3, !dbg !6627
  %16 = load i32, i32* %x_n_basic_blocks8, align 8, !dbg !6627
  %17 = load i64, i64* %size, align 8, !dbg !6628
  %cmp = icmp ult i64 %17, 10240, !dbg !6628
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6628

cond.true:                                        ; preds = %entry
  %18 = load i64, i64* %size, align 8, !dbg !6628
  br label %cond.end15, !dbg !6628

cond.false:                                       ; preds = %entry
  %19 = load i64, i64* %size, align 8, !dbg !6628
  %cmp10 = icmp ult i64 %19, 10485760, !dbg !6628
  br i1 %cmp10, label %cond.true12, label %cond.false13, !dbg !6628

cond.true12:                                      ; preds = %cond.false
  %20 = load i64, i64* %size, align 8, !dbg !6628
  %div = udiv i64 %20, 1024, !dbg !6628
  br label %cond.end, !dbg !6628

cond.false13:                                     ; preds = %cond.false
  %21 = load i64, i64* %size, align 8, !dbg !6628
  %div14 = udiv i64 %21, 1048576, !dbg !6628
  br label %cond.end, !dbg !6628

cond.end:                                         ; preds = %cond.false13, %cond.true12
  %cond = phi i64 [ %div, %cond.true12 ], [ %div14, %cond.false13 ], !dbg !6628
  br label %cond.end15, !dbg !6628

cond.end15:                                       ; preds = %cond.end, %cond.true
  %cond16 = phi i64 [ %18, %cond.true ], [ %cond, %cond.end ], !dbg !6628
  %22 = load i64, i64* %size, align 8, !dbg !6629
  %cmp17 = icmp ult i64 %22, 10240, !dbg !6629
  br i1 %cmp17, label %cond.true19, label %cond.false20, !dbg !6629

cond.true19:                                      ; preds = %cond.end15
  br label %cond.end24, !dbg !6629

cond.false20:                                     ; preds = %cond.end15
  %23 = load i64, i64* %size, align 8, !dbg !6629
  %cmp21 = icmp ult i64 %23, 10485760, !dbg !6629
  %24 = zext i1 %cmp21 to i64, !dbg !6629
  %cond23 = select i1 %cmp21, i32 107, i32 77, !dbg !6629
  br label %cond.end24, !dbg !6629

cond.end24:                                       ; preds = %cond.false20, %cond.true19
  %cond25 = phi i32 [ 98, %cond.true19 ], [ %cond23, %cond.false20 ], !dbg !6629
  %call26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17, i64 0, i64 0), i32 %16, i64 %cond16, i32 %cond25), !dbg !6630
  store i64 0, i64* %num_edges, align 8, !dbg !6631
  %25 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6632
  %add.ptr27 = getelementptr inbounds %struct.function, %struct.function* %25, i64 0, !dbg !6632
  %cfg28 = getelementptr inbounds %struct.function, %struct.function* %add.ptr27, i32 0, i32 1, !dbg !6632
  %26 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg28, align 8, !dbg !6632
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %26, i32 0, i32 0, !dbg !6632
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !6632
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 6, !dbg !6632
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !6632
  store %struct.basic_block_def* %28, %struct.basic_block_def** %bb, align 8, !dbg !6632
  br label %for.cond, !dbg !6632

for.cond:                                         ; preds = %for.inc, %cond.end24
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6634
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6634
  %add.ptr29 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !6634
  %cfg30 = getelementptr inbounds %struct.function, %struct.function* %add.ptr29, i32 0, i32 1, !dbg !6634
  %31 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg30, align 8, !dbg !6634
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %31, i32 0, i32 1, !dbg !6634
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !6634
  %cmp31 = icmp ne %struct.basic_block_def* %29, %32, !dbg !6634
  br i1 %cmp31, label %for.body, label %for.end, !dbg !6632

for.body:                                         ; preds = %for.cond
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6636
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 1, !dbg !6636
  %34 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6636
  %tobool = icmp ne %struct.VEC_edge_gc* %34, null, !dbg !6636
  br i1 %tobool, label %cond.true33, label %cond.false35, !dbg !6636

cond.true33:                                      ; preds = %for.body
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6636
  %succs34 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 1, !dbg !6636
  %36 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs34, align 8, !dbg !6636
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %36, i32 0, i32 0, !dbg !6636
  br label %cond.end36, !dbg !6636

cond.false35:                                     ; preds = %for.body
  br label %cond.end36, !dbg !6636

cond.end36:                                       ; preds = %cond.false35, %cond.true33
  %cond37 = phi %struct.VEC_edge_base* [ %base, %cond.true33 ], [ null, %cond.false35 ], !dbg !6636
  %call38 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond37), !dbg !6636
  %conv39 = zext i32 %call38 to i64, !dbg !6636
  %37 = load i64, i64* %num_edges, align 8, !dbg !6637
  %add40 = add nsw i64 %37, %conv39, !dbg !6637
  store i64 %add40, i64* %num_edges, align 8, !dbg !6637
  br label %for.inc, !dbg !6638

for.inc:                                          ; preds = %cond.end36
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6634
  %next_bb41 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 6, !dbg !6634
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb41, align 8, !dbg !6634
  store %struct.basic_block_def* %39, %struct.basic_block_def** %bb, align 8, !dbg !6634
  br label %for.cond, !dbg !6634, !llvm.loop !6639

for.end:                                          ; preds = %for.cond
  %40 = load i64, i64* %num_edges, align 8, !dbg !6641
  %mul42 = mul i64 %40, 64, !dbg !6642
  store i64 %mul42, i64* %size, align 8, !dbg !6643
  %41 = load i64, i64* %size, align 8, !dbg !6644
  %42 = load i64, i64* %total, align 8, !dbg !6645
  %add43 = add i64 %42, %41, !dbg !6645
  store i64 %add43, i64* %total, align 8, !dbg !6645
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6646
  %44 = load i64, i64* %num_edges, align 8, !dbg !6647
  %45 = load i64, i64* %size, align 8, !dbg !6648
  %cmp44 = icmp ult i64 %45, 10240, !dbg !6648
  br i1 %cmp44, label %cond.true46, label %cond.false47, !dbg !6648

cond.true46:                                      ; preds = %for.end
  %46 = load i64, i64* %size, align 8, !dbg !6648
  br label %cond.end56, !dbg !6648

cond.false47:                                     ; preds = %for.end
  %47 = load i64, i64* %size, align 8, !dbg !6648
  %cmp48 = icmp ult i64 %47, 10485760, !dbg !6648
  br i1 %cmp48, label %cond.true50, label %cond.false52, !dbg !6648

cond.true50:                                      ; preds = %cond.false47
  %48 = load i64, i64* %size, align 8, !dbg !6648
  %div51 = udiv i64 %48, 1024, !dbg !6648
  br label %cond.end54, !dbg !6648

cond.false52:                                     ; preds = %cond.false47
  %49 = load i64, i64* %size, align 8, !dbg !6648
  %div53 = udiv i64 %49, 1048576, !dbg !6648
  br label %cond.end54, !dbg !6648

cond.end54:                                       ; preds = %cond.false52, %cond.true50
  %cond55 = phi i64 [ %div51, %cond.true50 ], [ %div53, %cond.false52 ], !dbg !6648
  br label %cond.end56, !dbg !6648

cond.end56:                                       ; preds = %cond.end54, %cond.true46
  %cond57 = phi i64 [ %46, %cond.true46 ], [ %cond55, %cond.end54 ], !dbg !6648
  %50 = load i64, i64* %size, align 8, !dbg !6649
  %cmp58 = icmp ult i64 %50, 10240, !dbg !6649
  br i1 %cmp58, label %cond.true60, label %cond.false61, !dbg !6649

cond.true60:                                      ; preds = %cond.end56
  br label %cond.end65, !dbg !6649

cond.false61:                                     ; preds = %cond.end56
  %51 = load i64, i64* %size, align 8, !dbg !6649
  %cmp62 = icmp ult i64 %51, 10485760, !dbg !6649
  %52 = zext i1 %cmp62 to i64, !dbg !6649
  %cond64 = select i1 %cmp62, i32 107, i32 77, !dbg !6649
  br label %cond.end65, !dbg !6649

cond.end65:                                       ; preds = %cond.false61, %cond.true60
  %cond66 = phi i32 [ 98, %cond.true60 ], [ %cond64, %cond.false61 ], !dbg !6649
  %call67 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i64 0, i64 0), i64 %44, i64 %cond57, i32 %cond66), !dbg !6650
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6651
  %call68 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %53, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.11, i64 0, i64 0)), !dbg !6652
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6653
  %55 = load i64, i64* %total, align 8, !dbg !6654
  %cmp69 = icmp ult i64 %55, 10240, !dbg !6654
  br i1 %cmp69, label %cond.true71, label %cond.false72, !dbg !6654

cond.true71:                                      ; preds = %cond.end65
  %56 = load i64, i64* %total, align 8, !dbg !6654
  br label %cond.end81, !dbg !6654

cond.false72:                                     ; preds = %cond.end65
  %57 = load i64, i64* %total, align 8, !dbg !6654
  %cmp73 = icmp ult i64 %57, 10485760, !dbg !6654
  br i1 %cmp73, label %cond.true75, label %cond.false77, !dbg !6654

cond.true75:                                      ; preds = %cond.false72
  %58 = load i64, i64* %total, align 8, !dbg !6654
  %div76 = udiv i64 %58, 1024, !dbg !6654
  br label %cond.end79, !dbg !6654

cond.false77:                                     ; preds = %cond.false72
  %59 = load i64, i64* %total, align 8, !dbg !6654
  %div78 = udiv i64 %59, 1048576, !dbg !6654
  br label %cond.end79, !dbg !6654

cond.end79:                                       ; preds = %cond.false77, %cond.true75
  %cond80 = phi i64 [ %div76, %cond.true75 ], [ %div78, %cond.false77 ], !dbg !6654
  br label %cond.end81, !dbg !6654

cond.end81:                                       ; preds = %cond.end79, %cond.true71
  %cond82 = phi i64 [ %56, %cond.true71 ], [ %cond80, %cond.end79 ], !dbg !6654
  %60 = load i64, i64* %total, align 8, !dbg !6655
  %cmp83 = icmp ult i64 %60, 10240, !dbg !6655
  br i1 %cmp83, label %cond.true85, label %cond.false86, !dbg !6655

cond.true85:                                      ; preds = %cond.end81
  br label %cond.end90, !dbg !6655

cond.false86:                                     ; preds = %cond.end81
  %61 = load i64, i64* %total, align 8, !dbg !6655
  %cmp87 = icmp ult i64 %61, 10485760, !dbg !6655
  %62 = zext i1 %cmp87 to i64, !dbg !6655
  %cond89 = select i1 %cmp87, i32 107, i32 77, !dbg !6655
  br label %cond.end90, !dbg !6655

cond.end90:                                       ; preds = %cond.false86, %cond.true85
  %cond91 = phi i32 [ 98, %cond.true85 ], [ %cond89, %cond.false86 ], !dbg !6655
  %call92 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.19, i64 0, i64 0), i64 %cond82, i32 %cond91), !dbg !6656
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6657
  %call93 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %63, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.11, i64 0, i64 0)), !dbg !6658
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6659
  %call94 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %64, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6660
  %65 = load i64, i64* getelementptr inbounds (%struct.cfg_stats_d, %struct.cfg_stats_d* @cfg_stats, i32 0, i32 0), align 8, !dbg !6661
  %66 = load i64, i64* @dump_cfg_stats.max_num_merged_labels, align 8, !dbg !6663
  %cmp95 = icmp sgt i64 %65, %66, !dbg !6664
  br i1 %cmp95, label %if.then, label %if.end, !dbg !6665

if.then:                                          ; preds = %cond.end90
  %67 = load i64, i64* getelementptr inbounds (%struct.cfg_stats_d, %struct.cfg_stats_d* @cfg_stats, i32 0, i32 0), align 8, !dbg !6666
  store i64 %67, i64* @dump_cfg_stats.max_num_merged_labels, align 8, !dbg !6667
  br label %if.end, !dbg !6668

if.end:                                           ; preds = %if.then, %cond.end90
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6669
  %69 = load i64, i64* getelementptr inbounds (%struct.cfg_stats_d, %struct.cfg_stats_d* @cfg_stats, i32 0, i32 0), align 8, !dbg !6670
  %70 = load i64, i64* @dump_cfg_stats.max_num_merged_labels, align 8, !dbg !6671
  %call97 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %68, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.20, i64 0, i64 0), i64 %69, i64 %70), !dbg !6672
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6673
  %call98 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6674
  ret void, !dbg !6675
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_function_to_file(%union.tree_node* %fn, %struct._IO_FILE* %file, i32 %flags) #0 !dbg !6676 {
entry:
  %fn.addr = alloca %union.tree_node*, align 8
  %file.addr = alloca %struct._IO_FILE*, align 8
  %flags.addr = alloca i32, align 4
  %arg = alloca %union.tree_node*, align 8
  %vars = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %dsf = alloca %struct.function*, align 8
  %ignore_topmost_bind = alloca i8, align 1
  %any_var = alloca i8, align 1
  %bb = alloca %struct.basic_block_def*, align 8
  %chain = alloca %union.tree_node*, align 8
  %body = alloca %struct.gimple_seq_d*, align 8
  %indent = alloca i32, align 4
  store %union.tree_node* %fn, %union.tree_node** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn.addr, metadata !6679, metadata !DIExpression()), !dbg !6680
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !6681, metadata !DIExpression()), !dbg !6682
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6683, metadata !DIExpression()), !dbg !6684
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !6685, metadata !DIExpression()), !dbg !6686
  call void @llvm.dbg.declare(metadata %union.tree_node** %vars, metadata !6687, metadata !DIExpression()), !dbg !6688
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !6689, metadata !DIExpression()), !dbg !6690
  call void @llvm.dbg.declare(metadata %struct.function** %dsf, metadata !6691, metadata !DIExpression()), !dbg !6692
  call void @llvm.dbg.declare(metadata i8* %ignore_topmost_bind, metadata !6693, metadata !DIExpression()), !dbg !6694
  store i8 0, i8* %ignore_topmost_bind, align 1, !dbg !6694
  call void @llvm.dbg.declare(metadata i8* %any_var, metadata !6695, metadata !DIExpression()), !dbg !6696
  store i8 0, i8* %any_var, align 1, !dbg !6696
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6697, metadata !DIExpression()), !dbg !6698
  call void @llvm.dbg.declare(metadata %union.tree_node** %chain, metadata !6699, metadata !DIExpression()), !dbg !6700
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6701
  %1 = load i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 22), align 8, !dbg !6702
  %2 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6703
  %call = call i8* %1(%union.tree_node* %2, i32 2), !dbg !6704
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i64 0, i64 0), i8* %call), !dbg !6705
  %3 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6706
  %decl_non_common = bitcast %union.tree_node* %3 to %struct.tree_decl_non_common*, !dbg !6706
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !6706
  %4 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !6706
  store %union.tree_node* %4, %union.tree_node** %arg, align 8, !dbg !6707
  br label %while.cond, !dbg !6708

while.cond:                                       ; preds = %if.end9, %entry
  %5 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6709
  %tobool = icmp ne %union.tree_node* %5, null, !dbg !6708
  br i1 %tobool, label %while.body, label %while.end, !dbg !6708

while.body:                                       ; preds = %while.cond
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6710
  %7 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6712
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !6712
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6712
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6712
  %9 = load i32, i32* @dump_flags, align 4, !dbg !6713
  call void @print_generic_expr(%struct._IO_FILE* %6, %union.tree_node* %8, i32 %9), !dbg !6714
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6715
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)), !dbg !6716
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6717
  %12 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6718
  %13 = load i32, i32* @dump_flags, align 4, !dbg !6719
  call void @print_generic_expr(%struct._IO_FILE* %11, %union.tree_node* %12, i32 %13), !dbg !6720
  %14 = load i32, i32* %flags.addr, align 4, !dbg !6721
  %and = and i32 %14, 65536, !dbg !6723
  %tobool3 = icmp ne i32 %and, 0, !dbg !6723
  br i1 %tobool3, label %if.then, label %if.end, !dbg !6724

if.then:                                          ; preds = %while.body
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6725
  %16 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6726
  call void @print_node(%struct._IO_FILE* %15, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.12, i64 0, i64 0), %union.tree_node* %16, i32 4), !dbg !6727
  br label %if.end, !dbg !6727

if.end:                                           ; preds = %if.then, %while.body
  %17 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6728
  %common4 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !6728
  %chain5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 1, !dbg !6728
  %18 = load %union.tree_node*, %union.tree_node** %chain5, align 8, !dbg !6728
  %tobool6 = icmp ne %union.tree_node* %18, null, !dbg !6728
  br i1 %tobool6, label %if.then7, label %if.end9, !dbg !6730

if.then7:                                         ; preds = %if.end
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6731
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0)), !dbg !6732
  br label %if.end9, !dbg !6732

if.end9:                                          ; preds = %if.then7, %if.end
  %20 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6733
  %common10 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !6733
  %chain11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 1, !dbg !6733
  %21 = load %union.tree_node*, %union.tree_node** %chain11, align 8, !dbg !6733
  store %union.tree_node* %21, %union.tree_node** %arg, align 8, !dbg !6734
  br label %while.cond, !dbg !6708, !llvm.loop !6735

while.end:                                        ; preds = %while.cond
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6737
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i64 0, i64 0)), !dbg !6738
  %23 = load i32, i32* %flags.addr, align 4, !dbg !6739
  %and13 = and i32 %23, 65536, !dbg !6741
  %tobool14 = icmp ne i32 %and13, 0, !dbg !6741
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !6742

if.then15:                                        ; preds = %while.end
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6743
  %25 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6744
  call void @print_node(%struct._IO_FILE* %24, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.12, i64 0, i64 0), %union.tree_node* %25, i32 2), !dbg !6745
  br label %if.end16, !dbg !6745

if.end16:                                         ; preds = %if.then15, %while.end
  %26 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6746
  %function_decl = bitcast %union.tree_node* %26 to %struct.tree_function_decl*, !dbg !6746
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !6746
  %27 = load %struct.function*, %struct.function** %f, align 8, !dbg !6746
  store %struct.function* %27, %struct.function** %dsf, align 8, !dbg !6747
  %28 = load %struct.function*, %struct.function** %dsf, align 8, !dbg !6748
  %tobool17 = icmp ne %struct.function* %28, null, !dbg !6748
  br i1 %tobool17, label %land.lhs.true, label %if.end21, !dbg !6750

land.lhs.true:                                    ; preds = %if.end16
  %29 = load i32, i32* %flags.addr, align 4, !dbg !6751
  %and18 = and i32 %29, 524288, !dbg !6752
  %tobool19 = icmp ne i32 %and18, 0, !dbg !6752
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !6753

if.then20:                                        ; preds = %land.lhs.true
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6754
  %31 = load %struct.function*, %struct.function** %dsf, align 8, !dbg !6755
  call void @dump_eh_tree(%struct._IO_FILE* %30, %struct.function* %31), !dbg !6756
  br label %if.end21, !dbg !6756

if.end21:                                         ; preds = %if.then20, %land.lhs.true, %if.end16
  %32 = load i32, i32* %flags.addr, align 4, !dbg !6757
  %and22 = and i32 %32, 4, !dbg !6759
  %tobool23 = icmp ne i32 %and22, 0, !dbg !6759
  br i1 %tobool23, label %land.lhs.true24, label %if.end28, !dbg !6760

land.lhs.true24:                                  ; preds = %if.end21
  %33 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6761
  %call25 = call zeroext i8 @gimple_has_body_p(%union.tree_node* %33), !dbg !6762
  %tobool26 = icmp ne i8 %call25, 0, !dbg !6762
  br i1 %tobool26, label %if.end28, label %if.then27, !dbg !6763

if.then27:                                        ; preds = %land.lhs.true24
  %34 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6764
  %35 = load i32, i32* %flags.addr, align 4, !dbg !6766
  %or = or i32 2, %35, !dbg !6767
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6768
  call void @dump_node(%union.tree_node* %34, i32 %or, %struct._IO_FILE* %36), !dbg !6769
  br label %return, !dbg !6770

if.end28:                                         ; preds = %land.lhs.true24, %if.end21
  %37 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6771
  %function_decl29 = bitcast %union.tree_node* %37 to %struct.tree_function_decl*, !dbg !6771
  %f30 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl29, i32 0, i32 1, !dbg !6771
  %38 = load %struct.function*, %struct.function** %f30, align 8, !dbg !6771
  call void @push_cfun(%struct.function* %38), !dbg !6772
  %39 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6773
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %39, i64 0, !dbg !6773
  %tobool31 = icmp ne %struct.function* %add.ptr, null, !dbg !6773
  br i1 %tobool31, label %land.lhs.true32, label %if.end49, !dbg !6775

land.lhs.true32:                                  ; preds = %if.end28
  %40 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6776
  %add.ptr33 = getelementptr inbounds %struct.function, %struct.function* %40, i64 0, !dbg !6776
  %decl = getelementptr inbounds %struct.function, %struct.function* %add.ptr33, i32 0, i32 6, !dbg !6777
  %41 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6777
  %42 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6778
  %cmp = icmp eq %union.tree_node* %41, %42, !dbg !6779
  br i1 %cmp, label %land.lhs.true34, label %if.end49, !dbg !6780

land.lhs.true34:                                  ; preds = %land.lhs.true32
  %43 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6781
  %add.ptr35 = getelementptr inbounds %struct.function, %struct.function* %43, i64 0, !dbg !6781
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %add.ptr35, i32 0, i32 9, !dbg !6782
  %44 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !6782
  %tobool36 = icmp ne %union.tree_node* %44, null, !dbg !6781
  br i1 %tobool36, label %if.then37, label %if.end49, !dbg !6783

if.then37:                                        ; preds = %land.lhs.true34
  store i8 1, i8* %ignore_topmost_bind, align 1, !dbg !6784
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6786
  %call38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i64 0, i64 0)), !dbg !6787
  %46 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6788
  %add.ptr39 = getelementptr inbounds %struct.function, %struct.function* %46, i64 0, !dbg !6788
  %local_decls40 = getelementptr inbounds %struct.function, %struct.function* %add.ptr39, i32 0, i32 9, !dbg !6790
  %47 = load %union.tree_node*, %union.tree_node** %local_decls40, align 8, !dbg !6790
  store %union.tree_node* %47, %union.tree_node** %vars, align 8, !dbg !6791
  br label %for.cond, !dbg !6792

for.cond:                                         ; preds = %for.inc, %if.then37
  %48 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !6793
  %tobool41 = icmp ne %union.tree_node* %48, null, !dbg !6795
  br i1 %tobool41, label %for.body, label %for.end, !dbg !6795

for.body:                                         ; preds = %for.cond
  %49 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !6796
  %list = bitcast %union.tree_node* %49 to %struct.tree_list*, !dbg !6796
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !6796
  %50 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !6796
  store %union.tree_node* %50, %union.tree_node** %var, align 8, !dbg !6798
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6799
  %52 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6800
  %53 = load i32, i32* %flags.addr, align 4, !dbg !6801
  call void @print_generic_decl(%struct._IO_FILE* %51, %union.tree_node* %52, i32 %53), !dbg !6802
  %54 = load i32, i32* %flags.addr, align 4, !dbg !6803
  %and42 = and i32 %54, 65536, !dbg !6805
  %tobool43 = icmp ne i32 %and42, 0, !dbg !6805
  br i1 %tobool43, label %if.then44, label %if.end45, !dbg !6806

if.then44:                                        ; preds = %for.body
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6807
  %56 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6808
  call void @print_node(%struct._IO_FILE* %55, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.12, i64 0, i64 0), %union.tree_node* %56, i32 4), !dbg !6809
  br label %if.end45, !dbg !6809

if.end45:                                         ; preds = %if.then44, %for.body
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6810
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %57, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6811
  store i8 1, i8* %any_var, align 1, !dbg !6812
  br label %for.inc, !dbg !6813

for.inc:                                          ; preds = %if.end45
  %58 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !6814
  %common47 = bitcast %union.tree_node* %58 to %struct.tree_common*, !dbg !6814
  %chain48 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common47, i32 0, i32 1, !dbg !6814
  %59 = load %union.tree_node*, %union.tree_node** %chain48, align 8, !dbg !6814
  store %union.tree_node* %59, %union.tree_node** %vars, align 8, !dbg !6815
  br label %for.cond, !dbg !6816, !llvm.loop !6817

for.end:                                          ; preds = %for.cond
  br label %if.end49, !dbg !6819

if.end49:                                         ; preds = %for.end, %land.lhs.true34, %land.lhs.true32, %if.end28
  %60 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6820
  %add.ptr50 = getelementptr inbounds %struct.function, %struct.function* %60, i64 0, !dbg !6820
  %tobool51 = icmp ne %struct.function* %add.ptr50, null, !dbg !6820
  br i1 %tobool51, label %land.lhs.true52, label %if.else, !dbg !6822

land.lhs.true52:                                  ; preds = %if.end49
  %61 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6823
  %add.ptr53 = getelementptr inbounds %struct.function, %struct.function* %61, i64 0, !dbg !6823
  %decl54 = getelementptr inbounds %struct.function, %struct.function* %add.ptr53, i32 0, i32 6, !dbg !6824
  %62 = load %union.tree_node*, %union.tree_node** %decl54, align 8, !dbg !6824
  %63 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6825
  %cmp55 = icmp eq %union.tree_node* %62, %63, !dbg !6826
  br i1 %cmp55, label %land.lhs.true56, label %if.else, !dbg !6827

land.lhs.true56:                                  ; preds = %land.lhs.true52
  %64 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6828
  %add.ptr57 = getelementptr inbounds %struct.function, %struct.function* %64, i64 0, !dbg !6828
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr57, i32 0, i32 1, !dbg !6829
  %65 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6829
  %tobool58 = icmp ne %struct.control_flow_graph* %65, null, !dbg !6828
  br i1 %tobool58, label %land.lhs.true59, label %if.else, !dbg !6830

land.lhs.true59:                                  ; preds = %land.lhs.true56
  %66 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6831
  %add.ptr60 = getelementptr inbounds %struct.function, %struct.function* %66, i64 0, !dbg !6831
  %cfg61 = getelementptr inbounds %struct.function, %struct.function* %add.ptr60, i32 0, i32 1, !dbg !6831
  %67 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg61, align 8, !dbg !6831
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %67, i32 0, i32 2, !dbg !6831
  %68 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !6831
  %tobool62 = icmp ne %struct.VEC_basic_block_gc* %68, null, !dbg !6831
  br i1 %tobool62, label %if.then63, label %if.else, !dbg !6832

if.then63:                                        ; preds = %land.lhs.true59
  %69 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6833
  %add.ptr64 = getelementptr inbounds %struct.function, %struct.function* %69, i64 0, !dbg !6833
  %cfg65 = getelementptr inbounds %struct.function, %struct.function* %add.ptr64, i32 0, i32 1, !dbg !6833
  %70 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg65, align 8, !dbg !6833
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %70, i32 0, i32 0, !dbg !6833
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !6833
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6835
  call void @check_bb_profile(%struct.basic_block_def* %71, %struct._IO_FILE* %72), !dbg !6836
  %73 = load i8, i8* %ignore_topmost_bind, align 1, !dbg !6837
  %tobool66 = icmp ne i8 %73, 0, !dbg !6837
  br i1 %tobool66, label %if.end69, label %if.then67, !dbg !6839

if.then67:                                        ; preds = %if.then63
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6840
  %call68 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %74, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i64 0, i64 0)), !dbg !6841
  br label %if.end69, !dbg !6841

if.end69:                                         ; preds = %if.then67, %if.then63
  %75 = load i8, i8* %any_var, align 1, !dbg !6842
  %conv = zext i8 %75 to i32, !dbg !6842
  %tobool70 = icmp ne i32 %conv, 0, !dbg !6842
  br i1 %tobool70, label %land.lhs.true71, label %if.end77, !dbg !6844

land.lhs.true71:                                  ; preds = %if.end69
  %76 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6845
  %add.ptr72 = getelementptr inbounds %struct.function, %struct.function* %76, i64 0, !dbg !6845
  %cfg73 = getelementptr inbounds %struct.function, %struct.function* %add.ptr72, i32 0, i32 1, !dbg !6845
  %77 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg73, align 8, !dbg !6845
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %77, i32 0, i32 3, !dbg !6845
  %78 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !6845
  %tobool74 = icmp ne i32 %78, 0, !dbg !6845
  br i1 %tobool74, label %if.then75, label %if.end77, !dbg !6846

if.then75:                                        ; preds = %land.lhs.true71
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6847
  %call76 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %79, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6848
  br label %if.end77, !dbg !6848

if.end77:                                         ; preds = %if.then75, %land.lhs.true71, %if.end69
  %80 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6849
  %add.ptr78 = getelementptr inbounds %struct.function, %struct.function* %80, i64 0, !dbg !6849
  %cfg79 = getelementptr inbounds %struct.function, %struct.function* %add.ptr78, i32 0, i32 1, !dbg !6849
  %81 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg79, align 8, !dbg !6849
  %x_entry_block_ptr80 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %81, i32 0, i32 0, !dbg !6849
  %82 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr80, align 8, !dbg !6849
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %82, i32 0, i32 6, !dbg !6849
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !6849
  store %struct.basic_block_def* %83, %struct.basic_block_def** %bb, align 8, !dbg !6849
  br label %for.cond81, !dbg !6849

for.cond81:                                       ; preds = %for.inc87, %if.end77
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6851
  %85 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6851
  %add.ptr82 = getelementptr inbounds %struct.function, %struct.function* %85, i64 0, !dbg !6851
  %cfg83 = getelementptr inbounds %struct.function, %struct.function* %add.ptr82, i32 0, i32 1, !dbg !6851
  %86 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg83, align 8, !dbg !6851
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %86, i32 0, i32 1, !dbg !6851
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !6851
  %cmp84 = icmp ne %struct.basic_block_def* %84, %87, !dbg !6851
  br i1 %cmp84, label %for.body86, label %for.end89, !dbg !6849

for.body86:                                       ; preds = %for.cond81
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6853
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6854
  %90 = load i32, i32* %flags.addr, align 4, !dbg !6855
  call void @gimple_dump_bb(%struct.basic_block_def* %88, %struct._IO_FILE* %89, i32 2, i32 %90), !dbg !6856
  br label %for.inc87, !dbg !6856

for.inc87:                                        ; preds = %for.body86
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6851
  %next_bb88 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %91, i32 0, i32 6, !dbg !6851
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb88, align 8, !dbg !6851
  store %struct.basic_block_def* %92, %struct.basic_block_def** %bb, align 8, !dbg !6851
  br label %for.cond81, !dbg !6851, !llvm.loop !6857

for.end89:                                        ; preds = %for.cond81
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6859
  %call90 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %93, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i64 0, i64 0)), !dbg !6860
  %94 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6861
  %add.ptr91 = getelementptr inbounds %struct.function, %struct.function* %94, i64 0, !dbg !6861
  %cfg92 = getelementptr inbounds %struct.function, %struct.function* %add.ptr91, i32 0, i32 1, !dbg !6861
  %95 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg92, align 8, !dbg !6861
  %x_exit_block_ptr93 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %95, i32 0, i32 1, !dbg !6861
  %96 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr93, align 8, !dbg !6861
  %97 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6862
  call void @check_bb_profile(%struct.basic_block_def* %96, %struct._IO_FILE* %97), !dbg !6863
  br label %if.end150, !dbg !6864

if.else:                                          ; preds = %land.lhs.true59, %land.lhs.true56, %land.lhs.true52, %if.end49
  %98 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6865
  %decl_non_common94 = bitcast %union.tree_node* %98 to %struct.tree_decl_non_common*, !dbg !6865
  %saved_tree = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common94, i32 0, i32 1, !dbg !6865
  %99 = load %union.tree_node*, %union.tree_node** %saved_tree, align 8, !dbg !6865
  %cmp95 = icmp eq %union.tree_node* %99, null, !dbg !6867
  br i1 %cmp95, label %if.then97, label %if.else123, !dbg !6868

if.then97:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %body, metadata !6869, metadata !DIExpression()), !dbg !6871
  %100 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6872
  %call98 = call %struct.gimple_seq_d* @gimple_body(%union.tree_node* %100), !dbg !6873
  store %struct.gimple_seq_d* %call98, %struct.gimple_seq_d** %body, align 8, !dbg !6871
  %101 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !6874
  %call99 = call %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %101), !dbg !6876
  %tobool100 = icmp ne %union.gimple_statement_d* %call99, null, !dbg !6876
  br i1 %tobool100, label %land.lhs.true101, label %if.else112, !dbg !6877

land.lhs.true101:                                 ; preds = %if.then97
  %102 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !6878
  %call102 = call %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %102), !dbg !6879
  %103 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !6880
  %call103 = call %union.gimple_statement_d* @gimple_seq_last_stmt(%struct.gimple_seq_d* %103), !dbg !6881
  %cmp104 = icmp eq %union.gimple_statement_d* %call102, %call103, !dbg !6882
  br i1 %cmp104, label %land.lhs.true106, label %if.else112, !dbg !6883

land.lhs.true106:                                 ; preds = %land.lhs.true101
  %104 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !6884
  %call107 = call %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %104), !dbg !6885
  %call108 = call i32 @gimple_code(%union.gimple_statement_d* %call107), !dbg !6886
  %cmp109 = icmp eq i32 %call108, 10, !dbg !6887
  br i1 %cmp109, label %if.then111, label %if.else112, !dbg !6888

if.then111:                                       ; preds = %land.lhs.true106
  %105 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6889
  %106 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !6890
  %107 = load i32, i32* %flags.addr, align 4, !dbg !6891
  call void @print_gimple_seq(%struct._IO_FILE* %105, %struct.gimple_seq_d* %106, i32 0, i32 %107), !dbg !6892
  br label %if.end122, !dbg !6892

if.else112:                                       ; preds = %land.lhs.true106, %land.lhs.true101, %if.then97
  %108 = load i8, i8* %ignore_topmost_bind, align 1, !dbg !6893
  %tobool113 = icmp ne i8 %108, 0, !dbg !6893
  br i1 %tobool113, label %if.end116, label %if.then114, !dbg !6896

if.then114:                                       ; preds = %if.else112
  %109 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6897
  %call115 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %109, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i64 0, i64 0)), !dbg !6898
  br label %if.end116, !dbg !6898

if.end116:                                        ; preds = %if.then114, %if.else112
  %110 = load i8, i8* %any_var, align 1, !dbg !6899
  %tobool117 = icmp ne i8 %110, 0, !dbg !6899
  br i1 %tobool117, label %if.then118, label %if.end120, !dbg !6901

if.then118:                                       ; preds = %if.end116
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6902
  %call119 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %111, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6903
  br label %if.end120, !dbg !6903

if.end120:                                        ; preds = %if.then118, %if.end116
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6904
  %113 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !6905
  %114 = load i32, i32* %flags.addr, align 4, !dbg !6906
  call void @print_gimple_seq(%struct._IO_FILE* %112, %struct.gimple_seq_d* %113, i32 2, i32 %114), !dbg !6907
  %115 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6908
  %call121 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %115, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i64 0, i64 0)), !dbg !6909
  br label %if.end122

if.end122:                                        ; preds = %if.end120, %if.then111
  br label %if.end149, !dbg !6910

if.else123:                                       ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %indent, metadata !6911, metadata !DIExpression()), !dbg !6913
  %116 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !6914
  %decl_non_common124 = bitcast %union.tree_node* %116 to %struct.tree_decl_non_common*, !dbg !6914
  %saved_tree125 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common124, i32 0, i32 1, !dbg !6914
  %117 = load %union.tree_node*, %union.tree_node** %saved_tree125, align 8, !dbg !6914
  store %union.tree_node* %117, %union.tree_node** %chain, align 8, !dbg !6915
  %118 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6916
  %tobool126 = icmp ne %union.tree_node* %118, null, !dbg !6916
  br i1 %tobool126, label %land.lhs.true127, label %if.else135, !dbg !6918

land.lhs.true127:                                 ; preds = %if.else123
  %119 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6919
  %base = bitcast %union.tree_node* %119 to %struct.tree_base*, !dbg !6919
  %120 = bitcast %struct.tree_base* %base to i64*, !dbg !6919
  %bf.load = load i64, i64* %120, align 8, !dbg !6919
  %bf.clear = and i64 %bf.load, 65535, !dbg !6919
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6919
  %cmp128 = icmp eq i32 %bf.cast, 58, !dbg !6920
  br i1 %cmp128, label %if.then130, label %if.else135, !dbg !6921

if.then130:                                       ; preds = %land.lhs.true127
  %121 = load i8, i8* %ignore_topmost_bind, align 1, !dbg !6922
  %tobool131 = icmp ne i8 %121, 0, !dbg !6922
  br i1 %tobool131, label %if.then132, label %if.else133, !dbg !6925

if.then132:                                       ; preds = %if.then130
  %122 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6926
  %exp = bitcast %union.tree_node* %122 to %struct.tree_exp*, !dbg !6926
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6926
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !6926
  %123 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6926
  store %union.tree_node* %123, %union.tree_node** %chain, align 8, !dbg !6928
  store i32 2, i32* %indent, align 4, !dbg !6929
  br label %if.end134, !dbg !6930

if.else133:                                       ; preds = %if.then130
  store i32 0, i32* %indent, align 4, !dbg !6931
  br label %if.end134

if.end134:                                        ; preds = %if.else133, %if.then132
  br label %if.end140, !dbg !6932

if.else135:                                       ; preds = %land.lhs.true127, %if.else123
  %124 = load i8, i8* %ignore_topmost_bind, align 1, !dbg !6933
  %tobool136 = icmp ne i8 %124, 0, !dbg !6933
  br i1 %tobool136, label %if.end139, label %if.then137, !dbg !6936

if.then137:                                       ; preds = %if.else135
  %125 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6937
  %call138 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %125, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i64 0, i64 0)), !dbg !6938
  br label %if.end139, !dbg !6938

if.end139:                                        ; preds = %if.then137, %if.else135
  store i32 2, i32* %indent, align 4, !dbg !6939
  br label %if.end140

if.end140:                                        ; preds = %if.end139, %if.end134
  %126 = load i8, i8* %any_var, align 1, !dbg !6940
  %tobool141 = icmp ne i8 %126, 0, !dbg !6940
  br i1 %tobool141, label %if.then142, label %if.end144, !dbg !6942

if.then142:                                       ; preds = %if.end140
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6943
  %call143 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %127, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6944
  br label %if.end144, !dbg !6944

if.end144:                                        ; preds = %if.then142, %if.end140
  %128 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6945
  %129 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6946
  %130 = load i32, i32* %flags.addr, align 4, !dbg !6947
  %131 = load i32, i32* %indent, align 4, !dbg !6948
  call void @print_generic_stmt_indented(%struct._IO_FILE* %128, %union.tree_node* %129, i32 %130, i32 %131), !dbg !6949
  %132 = load i8, i8* %ignore_topmost_bind, align 1, !dbg !6950
  %tobool145 = icmp ne i8 %132, 0, !dbg !6950
  br i1 %tobool145, label %if.then146, label %if.end148, !dbg !6952

if.then146:                                       ; preds = %if.end144
  %133 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6953
  %call147 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %133, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i64 0, i64 0)), !dbg !6954
  br label %if.end148, !dbg !6954

if.end148:                                        ; preds = %if.then146, %if.end144
  br label %if.end149

if.end149:                                        ; preds = %if.end148, %if.end122
  br label %if.end150

if.end150:                                        ; preds = %if.end149, %for.end89
  %134 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6955
  %call151 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %134, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0)), !dbg !6956
  call void @pop_cfun(), !dbg !6957
  br label %return, !dbg !6958

return:                                           ; preds = %if.end150, %if.then27
  ret void, !dbg !6958
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_cfg_stats() #0 !dbg !6959 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6960
  call void @dump_cfg_stats(%struct._IO_FILE* %0), !dbg !6961
  ret void, !dbg !6962
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @is_ctrl_altering_stmt(%union.gimple_statement_d* %t) #0 !dbg !6963 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.gimple_statement_d*, align 8
  %flags = alloca i32, align 4
  store %union.gimple_statement_d* %t, %union.gimple_statement_d** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t.addr, metadata !6964, metadata !DIExpression()), !dbg !6965
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !6966
  %tobool = icmp ne %union.gimple_statement_d* %0, null, !dbg !6966
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6966

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 2210, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6966
  br label %cond.end, !dbg !6966

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6966

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6966
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !6967
  %call = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6968
  switch i32 %call, label %sw.default [
    i32 8, label %sw.bb
    i32 15, label %sw.bb8
    i32 7, label %sw.bb9
    i32 26, label %sw.bb13
    i32 27, label %sw.bb13
    i32 23, label %sw.bb13
    i32 30, label %sw.bb13
    i32 31, label %sw.bb13
    i32 32, label %sw.bb13
    i32 29, label %sw.bb13
    i32 24, label %sw.bb13
    i32 25, label %sw.bb13
    i32 22, label %sw.bb13
    i32 28, label %sw.bb13
    i32 19, label %sw.bb13
    i32 20, label %sw.bb13
    i32 21, label %sw.bb13
  ], !dbg !6969

sw.bb:                                            ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !6970, metadata !DIExpression()), !dbg !6973
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !6974
  %call1 = call i32 @gimple_call_flags(%union.gimple_statement_d* %2), !dbg !6975
  store i32 %call1, i32* %flags, align 4, !dbg !6973
  %3 = load i32, i32* %flags, align 4, !dbg !6976
  %and = and i32 %3, 3, !dbg !6978
  %tobool2 = icmp ne i32 %and, 0, !dbg !6978
  br i1 %tobool2, label %if.end, label %land.lhs.true, !dbg !6979

land.lhs.true:                                    ; preds = %sw.bb
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6980
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !6980
  %has_nonlocal_label = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !6981
  %bf.load = load i32, i32* %has_nonlocal_label, align 8, !dbg !6981
  %bf.lshr = lshr i32 %bf.load, 20, !dbg !6981
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6981
  %tobool3 = icmp ne i32 %bf.clear, 0, !dbg !6980
  br i1 %tobool3, label %if.then, label %if.end, !dbg !6982

if.then:                                          ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !6983
  br label %return, !dbg !6983

if.end:                                           ; preds = %land.lhs.true, %sw.bb
  %5 = load i32, i32* %flags, align 4, !dbg !6984
  %and4 = and i32 %5, 8, !dbg !6986
  %tobool5 = icmp ne i32 %and4, 0, !dbg !6986
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !6987

if.then6:                                         ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !6988
  br label %return, !dbg !6988

if.end7:                                          ; preds = %if.end
  br label %sw.epilog, !dbg !6989

sw.bb8:                                           ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !6990
  br label %return, !dbg !6990

sw.bb9:                                           ; preds = %cond.end
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !6991
  %call10 = call i32 @gimple_asm_nlabels(%union.gimple_statement_d* %6), !dbg !6993
  %cmp = icmp ugt i32 %call10, 0, !dbg !6994
  br i1 %cmp, label %if.then11, label %if.end12, !dbg !6995

if.then11:                                        ; preds = %sw.bb9
  store i8 1, i8* %retval, align 1, !dbg !6996
  br label %return, !dbg !6996

if.end12:                                         ; preds = %sw.bb9
  br label %sw.epilog, !dbg !6997

sw.bb13:                                          ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  store i8 1, i8* %retval, align 1, !dbg !6998
  br label %return, !dbg !6998

sw.default:                                       ; preds = %cond.end
  br label %sw.epilog, !dbg !6999

sw.epilog:                                        ; preds = %sw.default, %if.end12, %if.end7
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !7000
  %call14 = call zeroext i8 @stmt_can_throw_internal(%union.gimple_statement_d* %7), !dbg !7001
  store i8 %call14, i8* %retval, align 1, !dbg !7002
  br label %return, !dbg !7002

return:                                           ; preds = %sw.epilog, %sw.bb13, %if.then11, %sw.bb8, %if.then6, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !7003
  ret i8 %8, !dbg !7003
}

declare dso_local zeroext i8 @stmt_can_throw_internal(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @simple_goto_p(%union.gimple_statement_d* %t) #0 !dbg !7004 {
entry:
  %t.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %t, %union.gimple_statement_d** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t.addr, metadata !7005, metadata !DIExpression()), !dbg !7006
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !7007
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7008
  %cmp = icmp eq i32 %call, 3, !dbg !7009
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7010

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !7011
  %call1 = call %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %1), !dbg !7011
  %base = bitcast %union.tree_node* %call1 to %struct.tree_base*, !dbg !7011
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7011
  %bf.load = load i64, i64* %2, align 8, !dbg !7011
  %bf.clear = and i64 %bf.load, 65535, !dbg !7011
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7011
  %cmp2 = icmp eq i32 %bf.cast, 30, !dbg !7012
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !7013
  %land.ext = zext i1 %3 to i32, !dbg !7010
  %conv = trunc i32 %land.ext to i8, !dbg !7014
  ret i8 %conv, !dbg !7015
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @stmt_can_make_abnormal_goto(%union.gimple_statement_d* %t) #0 !dbg !7016 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %t, %union.gimple_statement_d** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t.addr, metadata !7017, metadata !DIExpression()), !dbg !7018
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !7019
  %call = call zeroext i8 @computed_goto_p(%union.gimple_statement_d* %0), !dbg !7021
  %tobool = icmp ne i8 %call, 0, !dbg !7021
  br i1 %tobool, label %if.then, label %if.end, !dbg !7022

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !7023
  br label %return, !dbg !7023

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !7024
  %call1 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %1), !dbg !7026
  %tobool2 = icmp ne i8 %call1, 0, !dbg !7026
  br i1 %tobool2, label %if.then3, label %if.end8, !dbg !7027

if.then3:                                         ; preds = %if.end
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !7028
  %call4 = call zeroext i8 @gimple_has_side_effects(%union.gimple_statement_d* %2), !dbg !7029
  %conv = zext i8 %call4 to i32, !dbg !7029
  %tobool5 = icmp ne i32 %conv, 0, !dbg !7029
  br i1 %tobool5, label %land.rhs, label %land.end, !dbg !7030

land.rhs:                                         ; preds = %if.then3
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7031
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !7031
  %has_nonlocal_label = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !7032
  %bf.load = load i32, i32* %has_nonlocal_label, align 8, !dbg !7032
  %bf.lshr = lshr i32 %bf.load, 20, !dbg !7032
  %bf.clear = and i32 %bf.lshr, 1, !dbg !7032
  %tobool6 = icmp ne i32 %bf.clear, 0, !dbg !7030
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then3
  %4 = phi i1 [ false, %if.then3 ], [ %tobool6, %land.rhs ], !dbg !7033
  %land.ext = zext i1 %4 to i32, !dbg !7030
  %conv7 = trunc i32 %land.ext to i8, !dbg !7029
  store i8 %conv7, i8* %retval, align 1, !dbg !7034
  br label %return, !dbg !7034

if.end8:                                          ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !7035
  br label %return, !dbg !7035

return:                                           ; preds = %if.end8, %land.end, %if.then
  %5 = load i8, i8* %retval, align 1, !dbg !7036
  ret i8 %5, !dbg !7036
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !7037 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7038, metadata !DIExpression()), !dbg !7039
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7040
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7041
  %cmp = icmp eq i32 %call, 8, !dbg !7042
  %conv = zext i1 %cmp to i32, !dbg !7042
  %conv1 = trunc i32 %conv to i8, !dbg !7041
  ret i8 %conv1, !dbg !7043
}

declare dso_local zeroext i8 @gimple_has_side_effects(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %t) #0 !dbg !7044 {
entry:
  %t.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %t, %union.gimple_statement_d** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t.addr, metadata !7045, metadata !DIExpression()), !dbg !7046
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !7047
  %call = call zeroext i8 @is_ctrl_stmt(%union.gimple_statement_d* %0), !dbg !7048
  %conv = zext i8 %call to i32, !dbg !7048
  %tobool = icmp ne i32 %conv, 0, !dbg !7048
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !7049

lor.rhs:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !7050
  %call1 = call zeroext i8 @is_ctrl_altering_stmt(%union.gimple_statement_d* %1), !dbg !7051
  %conv2 = zext i8 %call1 to i32, !dbg !7051
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !7049
  br label %lor.end, !dbg !7049

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %tobool3, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32, !dbg !7049
  %conv4 = trunc i32 %lor.ext to i8, !dbg !7048
  ret i8 %conv4, !dbg !7052
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @delete_tree_cfg_annotations() #0 !dbg !7053 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7054
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !7054
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7054
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7054
  %x_label_to_block_map = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 6, !dbg !7054
  store %struct.VEC_basic_block_gc* null, %struct.VEC_basic_block_gc** %x_label_to_block_map, align 8, !dbg !7055
  ret void, !dbg !7056
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @first_stmt(%struct.basic_block_def* %bb) #0 !dbg !7057 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %i = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7058, metadata !DIExpression()), !dbg !7059
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !7060, metadata !DIExpression()), !dbg !7061
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7062
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %i, %struct.basic_block_def* %0), !dbg !7063
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7064, metadata !DIExpression()), !dbg !7065
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !7065
  br label %while.cond, !dbg !7066

while.cond:                                       ; preds = %while.body, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !7067
  %tobool = icmp ne i8 %call, 0, !dbg !7067
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !7068

land.rhs:                                         ; preds = %while.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !7069
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !7070
  %call2 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %call1), !dbg !7071
  %conv = zext i8 %call2 to i32, !dbg !7071
  %tobool3 = icmp ne i32 %conv, 0, !dbg !7068
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %1 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ], !dbg !7072
  br i1 %1, label %while.body, label %while.end, !dbg !7066

while.body:                                       ; preds = %land.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %i), !dbg !7073
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !7075
  br label %while.cond, !dbg !7066, !llvm.loop !7076

while.end:                                        ; preds = %land.end
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7078
  ret %union.gimple_statement_d* %2, !dbg !7079
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !7080 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7081, metadata !DIExpression()), !dbg !7082
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !7083, metadata !DIExpression()), !dbg !7084
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !7085, metadata !DIExpression()), !dbg !7086
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7087
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !7088
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !7089
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !7090
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %1), !dbg !7091
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !7092
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !7093
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !7094
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !7095
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !7096
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7097
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !7098
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !7099
  ret void, !dbg !7100
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_prev(%struct.gimple_stmt_iterator* %i) #0 !dbg !7101 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !7102, metadata !DIExpression()), !dbg !7103
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !7104
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !7105
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !7105
  %prev = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 1, !dbg !7106
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %prev, align 8, !dbg !7106
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !7107
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !7108
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !7109
  ret void, !dbg !7110
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.gimple_statement_d* @last_and_only_stmt(%struct.basic_block_def* %bb) #0 !dbg !7111 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %i = alloca %struct.gimple_stmt_iterator, align 8
  %last = alloca %union.gimple_statement_d*, align 8
  %prev = alloca %union.gimple_statement_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7112, metadata !DIExpression()), !dbg !7113
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !7114, metadata !DIExpression()), !dbg !7115
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7116
  call void @gsi_last_nondebug_bb(%struct.gimple_stmt_iterator* sret %i, %struct.basic_block_def* %0), !dbg !7117
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last, metadata !7118, metadata !DIExpression()), !dbg !7119
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %prev, metadata !7120, metadata !DIExpression()), !dbg !7121
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !7122
  %tobool = icmp ne i8 %call, 0, !dbg !7122
  br i1 %tobool, label %if.then, label %if.end, !dbg !7124

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !7125
  br label %return, !dbg !7125

if.end:                                           ; preds = %entry
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !7126
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %last, align 8, !dbg !7127
  call void @gsi_prev_nondebug(%struct.gimple_stmt_iterator* %i), !dbg !7128
  %call2 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !7129
  %tobool3 = icmp ne i8 %call2, 0, !dbg !7129
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !7131

if.then4:                                         ; preds = %if.end
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !7132
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %retval, align 8, !dbg !7133
  br label %return, !dbg !7133

if.end5:                                          ; preds = %if.end
  %call6 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !7134
  store %union.gimple_statement_d* %call6, %union.gimple_statement_d** %prev, align 8, !dbg !7135
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %prev, align 8, !dbg !7136
  %call7 = call i32 @gimple_code(%union.gimple_statement_d* %2), !dbg !7138
  %cmp = icmp eq i32 %call7, 4, !dbg !7139
  br i1 %cmp, label %if.then8, label %if.else, !dbg !7140

if.then8:                                         ; preds = %if.end5
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !7141
  store %union.gimple_statement_d* %3, %union.gimple_statement_d** %retval, align 8, !dbg !7142
  br label %return, !dbg !7142

if.else:                                          ; preds = %if.end5
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !7143
  br label %return, !dbg !7143

return:                                           ; preds = %if.else, %if.then8, %if.then4, %if.then
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !7144
  ret %union.gimple_statement_d* %4, !dbg !7144
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last_nondebug_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !7145 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7146, metadata !DIExpression()), !dbg !7147
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !7148, metadata !DIExpression()), !dbg !7149
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7150
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %agg.result, %struct.basic_block_def* %0), !dbg !7151
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !7152
  %tobool = icmp ne i8 %call, 0, !dbg !7152
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !7154

land.lhs.true:                                    ; preds = %entry
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !7155
  %call2 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %call1), !dbg !7156
  %conv = zext i8 %call2 to i32, !dbg !7156
  %tobool3 = icmp ne i32 %conv, 0, !dbg !7156
  br i1 %tobool3, label %if.then, label %if.end, !dbg !7157

if.then:                                          ; preds = %land.lhs.true
  call void @gsi_prev_nondebug(%struct.gimple_stmt_iterator* %agg.result), !dbg !7158
  br label %if.end, !dbg !7158

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !7159
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_prev_nondebug(%struct.gimple_stmt_iterator* %i) #0 !dbg !7160 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !7161, metadata !DIExpression()), !dbg !7162
  br label %do.body, !dbg !7163

do.body:                                          ; preds = %land.end, %entry
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !7164
  call void @gsi_prev(%struct.gimple_stmt_iterator* %0), !dbg !7166
  br label %do.cond, !dbg !7167

do.cond:                                          ; preds = %do.body
  %1 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !7168
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %1), !dbg !7169
  %tobool = icmp ne i8 %call, 0, !dbg !7169
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !7170

land.rhs:                                         ; preds = %do.cond
  %2 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !7171
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %2), !dbg !7172
  %call2 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %call1), !dbg !7173
  %conv = zext i8 %call2 to i32, !dbg !7173
  %tobool3 = icmp ne i32 %conv, 0, !dbg !7170
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %3 = phi i1 [ false, %do.cond ], [ %tobool3, %land.rhs ], !dbg !7174
  br i1 %3, label %do.body, label %do.end, !dbg !7167, !llvm.loop !7175

do.end:                                           ; preds = %land.end
  ret void, !dbg !7177
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @verify_types_in_gimple_seq(%struct.gimple_seq_d* %stmts) #0 !dbg !7178 {
entry:
  %stmts.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %stmts, %struct.gimple_seq_d** %stmts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts.addr, metadata !7181, metadata !DIExpression()), !dbg !7182
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts.addr, align 8, !dbg !7183
  %call = call zeroext i8 @verify_types_in_gimple_seq_2(%struct.gimple_seq_d* %0), !dbg !7185
  %tobool = icmp ne i8 %call, 0, !dbg !7185
  br i1 %tobool, label %if.then, label %if.end, !dbg !7186

if.then:                                          ; preds = %entry
  call void (i8*, ...) @internal_error(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21, i64 0, i64 0)), !dbg !7187
  br label %if.end, !dbg !7187

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !7188
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_types_in_gimple_seq_2(%struct.gimple_seq_d* %stmts) #0 !dbg !7189 {
entry:
  %stmts.addr = alloca %struct.gimple_seq_d*, align 8
  %ittr = alloca %struct.gimple_stmt_iterator, align 8
  %err = alloca i8, align 1
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %err2 = alloca i8, align 1
  store %struct.gimple_seq_d* %stmts, %struct.gimple_seq_d** %stmts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts.addr, metadata !7192, metadata !DIExpression()), !dbg !7193
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %ittr, metadata !7194, metadata !DIExpression()), !dbg !7195
  call void @llvm.dbg.declare(metadata i8* %err, metadata !7196, metadata !DIExpression()), !dbg !7197
  store i8 0, i8* %err, align 1, !dbg !7197
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts.addr, align 8, !dbg !7198
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %0), !dbg !7200
  %1 = bitcast %struct.gimple_stmt_iterator* %ittr to i8*, !dbg !7200
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !7200
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !7200
  br label %for.cond, !dbg !7201

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %ittr), !dbg !7202
  %tobool = icmp ne i8 %call, 0, !dbg !7204
  %lnot = xor i1 %tobool, true, !dbg !7204
  br i1 %lnot, label %for.body, label %for.end, !dbg !7205

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7206, metadata !DIExpression()), !dbg !7208
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %ittr), !dbg !7209
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !7208
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7210
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %3), !dbg !7211
  switch i32 %call2, label %sw.default [
    i32 10, label %sw.bb
    i32 17, label %sw.bb7
    i32 12, label %sw.bb20
    i32 11, label %sw.bb27
  ], !dbg !7212

sw.bb:                                            ; preds = %for.body
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7213
  %call3 = call %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %4), !dbg !7215
  %call4 = call zeroext i8 @verify_types_in_gimple_seq_2(%struct.gimple_seq_d* %call3), !dbg !7216
  %conv = zext i8 %call4 to i32, !dbg !7216
  %5 = load i8, i8* %err, align 1, !dbg !7217
  %conv5 = zext i8 %5 to i32, !dbg !7217
  %or = or i32 %conv5, %conv, !dbg !7217
  %conv6 = trunc i32 %or to i8, !dbg !7217
  store i8 %conv6, i8* %err, align 1, !dbg !7217
  br label %sw.epilog, !dbg !7218

sw.bb7:                                           ; preds = %for.body
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7219
  %call8 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %6), !dbg !7220
  %call9 = call zeroext i8 @verify_types_in_gimple_seq_2(%struct.gimple_seq_d* %call8), !dbg !7221
  %conv10 = zext i8 %call9 to i32, !dbg !7221
  %7 = load i8, i8* %err, align 1, !dbg !7222
  %conv11 = zext i8 %7 to i32, !dbg !7222
  %or12 = or i32 %conv11, %conv10, !dbg !7222
  %conv13 = trunc i32 %or12 to i8, !dbg !7222
  store i8 %conv13, i8* %err, align 1, !dbg !7222
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7223
  %call14 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %8), !dbg !7224
  %call15 = call zeroext i8 @verify_types_in_gimple_seq_2(%struct.gimple_seq_d* %call14), !dbg !7225
  %conv16 = zext i8 %call15 to i32, !dbg !7225
  %9 = load i8, i8* %err, align 1, !dbg !7226
  %conv17 = zext i8 %9 to i32, !dbg !7226
  %or18 = or i32 %conv17, %conv16, !dbg !7226
  %conv19 = trunc i32 %or18 to i8, !dbg !7226
  store i8 %conv19, i8* %err, align 1, !dbg !7226
  br label %sw.epilog, !dbg !7227

sw.bb20:                                          ; preds = %for.body
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7228
  %call21 = call %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %10), !dbg !7229
  %call22 = call zeroext i8 @verify_types_in_gimple_seq_2(%struct.gimple_seq_d* %call21), !dbg !7230
  %conv23 = zext i8 %call22 to i32, !dbg !7230
  %11 = load i8, i8* %err, align 1, !dbg !7231
  %conv24 = zext i8 %11 to i32, !dbg !7231
  %or25 = or i32 %conv24, %conv23, !dbg !7231
  %conv26 = trunc i32 %or25 to i8, !dbg !7231
  store i8 %conv26, i8* %err, align 1, !dbg !7231
  br label %sw.epilog, !dbg !7232

sw.bb27:                                          ; preds = %for.body
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7233
  %call28 = call %struct.gimple_seq_d* @gimple_catch_handler(%union.gimple_statement_d* %12), !dbg !7234
  %call29 = call zeroext i8 @verify_types_in_gimple_seq_2(%struct.gimple_seq_d* %call28), !dbg !7235
  %conv30 = zext i8 %call29 to i32, !dbg !7235
  %13 = load i8, i8* %err, align 1, !dbg !7236
  %conv31 = zext i8 %13 to i32, !dbg !7236
  %or32 = or i32 %conv31, %conv30, !dbg !7236
  %conv33 = trunc i32 %or32 to i8, !dbg !7236
  store i8 %conv33, i8* %err, align 1, !dbg !7236
  br label %sw.epilog, !dbg !7237

sw.default:                                       ; preds = %for.body
  call void @llvm.dbg.declare(metadata i8* %err2, metadata !7238, metadata !DIExpression()), !dbg !7240
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7241
  %call34 = call zeroext i8 @verify_types_in_gimple_stmt(%union.gimple_statement_d* %14), !dbg !7242
  store i8 %call34, i8* %err2, align 1, !dbg !7240
  %15 = load i8, i8* %err2, align 1, !dbg !7243
  %tobool35 = icmp ne i8 %15, 0, !dbg !7243
  br i1 %tobool35, label %if.then, label %if.end, !dbg !7245

if.then:                                          ; preds = %sw.default
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7246
  call void @debug_gimple_stmt(%union.gimple_statement_d* %16), !dbg !7247
  br label %if.end, !dbg !7247

if.end:                                           ; preds = %if.then, %sw.default
  %17 = load i8, i8* %err2, align 1, !dbg !7248
  %conv36 = zext i8 %17 to i32, !dbg !7248
  %18 = load i8, i8* %err, align 1, !dbg !7249
  %conv37 = zext i8 %18 to i32, !dbg !7249
  %or38 = or i32 %conv37, %conv36, !dbg !7249
  %conv39 = trunc i32 %or38 to i8, !dbg !7249
  store i8 %conv39, i8* %err, align 1, !dbg !7249
  br label %sw.epilog, !dbg !7250

sw.epilog:                                        ; preds = %if.end, %sw.bb27, %sw.bb20, %sw.bb7, %sw.bb
  br label %for.inc, !dbg !7251

for.inc:                                          ; preds = %sw.epilog
  call void @gsi_next(%struct.gimple_stmt_iterator* %ittr), !dbg !7252
  br label %for.cond, !dbg !7253, !llvm.loop !7254

for.end:                                          ; preds = %for.cond
  %19 = load i8, i8* %err, align 1, !dbg !7256
  ret i8 %19, !dbg !7257
}

declare dso_local void @internal_error(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @tree_node_can_be_shared(%union.tree_node* %t) #0 !dbg !7258 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7261, metadata !DIExpression()), !dbg !7262
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7263
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7263
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7263
  %bf.load = load i64, i64* %1, align 8, !dbg !7263
  %bf.clear = and i64 %bf.load, 65535, !dbg !7263
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7263
  %idxprom = sext i32 %bf.cast to i64, !dbg !7263
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7263
  %2 = load i32, i32* %arrayidx, align 4, !dbg !7263
  %cmp = icmp eq i32 %2, 2, !dbg !7263
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7263

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7263
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !7263
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7263
  %bf.load2 = load i64, i64* %4, align 8, !dbg !7263
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !7263
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7263
  %idxprom5 = sext i32 %bf.cast4 to i64, !dbg !7263
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !7263
  %5 = load i32, i32* %arrayidx6, align 4, !dbg !7263
  %cmp7 = icmp eq i32 %5, 3, !dbg !7263
  br i1 %cmp7, label %if.then, label %lor.lhs.false8, !dbg !7265

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7266
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %6), !dbg !7267
  %conv = zext i8 %call to i32, !dbg !7267
  %tobool = icmp ne i32 %conv, 0, !dbg !7267
  br i1 %tobool, label %if.then, label %lor.lhs.false9, !dbg !7268

lor.lhs.false9:                                   ; preds = %lor.lhs.false8
  %7 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7269
  %base10 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !7269
  %8 = bitcast %struct.tree_base* %base10 to i64*, !dbg !7269
  %bf.load11 = load i64, i64* %8, align 8, !dbg !7269
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !7269
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !7269
  %cmp14 = icmp eq i32 %bf.cast13, 141, !dbg !7270
  br i1 %cmp14, label %if.then, label %lor.lhs.false16, !dbg !7271

lor.lhs.false16:                                  ; preds = %lor.lhs.false9
  %9 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7272
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !7273
  %cmp17 = icmp eq %union.tree_node* %9, %10, !dbg !7274
  br i1 %cmp17, label %if.then, label %lor.lhs.false19, !dbg !7275

lor.lhs.false19:                                  ; preds = %lor.lhs.false16
  %11 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7276
  %base20 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !7276
  %12 = bitcast %struct.tree_base* %base20 to i64*, !dbg !7276
  %bf.load21 = load i64, i64* %12, align 8, !dbg !7276
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !7276
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !7276
  %cmp24 = icmp eq i32 %bf.cast23, 1, !dbg !7277
  br i1 %cmp24, label %if.then, label %if.end, !dbg !7278

if.then:                                          ; preds = %lor.lhs.false19, %lor.lhs.false16, %lor.lhs.false9, %lor.lhs.false8, %lor.lhs.false, %entry
  store i8 1, i8* %retval, align 1, !dbg !7279
  br label %return, !dbg !7279

if.end:                                           ; preds = %lor.lhs.false19
  %13 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7280
  %base26 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !7280
  %14 = bitcast %struct.tree_base* %base26 to i64*, !dbg !7280
  %bf.load27 = load i64, i64* %14, align 8, !dbg !7280
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !7280
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !7280
  %cmp30 = icmp eq i32 %bf.cast29, 139, !dbg !7282
  br i1 %cmp30, label %if.then32, label %if.end33, !dbg !7283

if.then32:                                        ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !7284
  br label %return, !dbg !7284

if.end33:                                         ; preds = %if.end
  br label %while.cond, !dbg !7285

while.cond:                                       ; preds = %while.body, %if.end33
  %15 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7286
  %base34 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !7286
  %16 = bitcast %struct.tree_base* %base34 to i64*, !dbg !7286
  %bf.load35 = load i64, i64* %16, align 8, !dbg !7286
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !7286
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !7286
  %cmp38 = icmp eq i32 %bf.cast37, 45, !dbg !7287
  br i1 %cmp38, label %land.lhs.true, label %lor.lhs.false40, !dbg !7288

lor.lhs.false40:                                  ; preds = %while.cond
  %17 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7289
  %base41 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !7289
  %18 = bitcast %struct.tree_base* %base41 to i64*, !dbg !7289
  %bf.load42 = load i64, i64* %18, align 8, !dbg !7289
  %bf.clear43 = and i64 %bf.load42, 65535, !dbg !7289
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !7289
  %cmp45 = icmp eq i32 %bf.cast44, 46, !dbg !7290
  br i1 %cmp45, label %land.lhs.true, label %lor.lhs.false51, !dbg !7291

land.lhs.true:                                    ; preds = %lor.lhs.false40, %while.cond
  %19 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7292
  %exp = bitcast %union.tree_node* %19 to %struct.tree_exp*, !dbg !7292
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7292
  %arrayidx47 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !7292
  %20 = load %union.tree_node*, %union.tree_node** %arrayidx47, align 8, !dbg !7292
  %call48 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %20), !dbg !7293
  %conv49 = zext i8 %call48 to i32, !dbg !7293
  %tobool50 = icmp ne i32 %conv49, 0, !dbg !7293
  br i1 %tobool50, label %lor.end, label %lor.lhs.false51, !dbg !7294

lor.lhs.false51:                                  ; preds = %land.lhs.true, %lor.lhs.false40
  %21 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7295
  %base52 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !7295
  %22 = bitcast %struct.tree_base* %base52 to i64*, !dbg !7295
  %bf.load53 = load i64, i64* %22, align 8, !dbg !7295
  %bf.clear54 = and i64 %bf.load53, 65535, !dbg !7295
  %bf.cast55 = trunc i64 %bf.clear54 to i32, !dbg !7295
  %cmp56 = icmp eq i32 %bf.cast55, 41, !dbg !7296
  br i1 %cmp56, label %lor.end, label %lor.lhs.false58, !dbg !7297

lor.lhs.false58:                                  ; preds = %lor.lhs.false51
  %23 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7298
  %base59 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !7298
  %24 = bitcast %struct.tree_base* %base59 to i64*, !dbg !7298
  %bf.load60 = load i64, i64* %24, align 8, !dbg !7298
  %bf.clear61 = and i64 %bf.load60, 65535, !dbg !7298
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !7298
  %cmp63 = icmp eq i32 %bf.cast62, 43, !dbg !7299
  br i1 %cmp63, label %lor.end, label %lor.rhs, !dbg !7300

lor.rhs:                                          ; preds = %lor.lhs.false58
  %25 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7301
  %base65 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !7301
  %26 = bitcast %struct.tree_base* %base65 to i64*, !dbg !7301
  %bf.load66 = load i64, i64* %26, align 8, !dbg !7301
  %bf.clear67 = and i64 %bf.load66, 65535, !dbg !7301
  %bf.cast68 = trunc i64 %bf.clear67 to i32, !dbg !7301
  %cmp69 = icmp eq i32 %bf.cast68, 44, !dbg !7302
  br label %lor.end, !dbg !7300

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false58, %lor.lhs.false51, %land.lhs.true
  %27 = phi i1 [ true, %lor.lhs.false58 ], [ true, %lor.lhs.false51 ], [ true, %land.lhs.true ], [ %cmp69, %lor.rhs ]
  br i1 %27, label %while.body, label %while.end, !dbg !7285

while.body:                                       ; preds = %lor.end
  %28 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7303
  %exp71 = bitcast %union.tree_node* %28 to %struct.tree_exp*, !dbg !7303
  %operands72 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp71, i32 0, i32 3, !dbg !7303
  %arrayidx73 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands72, i64 0, i64 0, !dbg !7303
  %29 = load %union.tree_node*, %union.tree_node** %arrayidx73, align 8, !dbg !7303
  store %union.tree_node* %29, %union.tree_node** %t.addr, align 8, !dbg !7304
  br label %while.cond, !dbg !7285, !llvm.loop !7305

while.end:                                        ; preds = %lor.end
  %30 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7306
  %base74 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !7306
  %31 = bitcast %struct.tree_base* %base74 to i64*, !dbg !7306
  %bf.load75 = load i64, i64* %31, align 8, !dbg !7306
  %bf.clear76 = and i64 %bf.load75, 65535, !dbg !7306
  %bf.cast77 = trunc i64 %bf.clear76 to i32, !dbg !7306
  %idxprom78 = sext i32 %bf.cast77 to i64, !dbg !7306
  %arrayidx79 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom78, !dbg !7306
  %32 = load i32, i32* %arrayidx79, align 4, !dbg !7306
  %cmp80 = icmp eq i32 %32, 3, !dbg !7306
  br i1 %cmp80, label %if.then82, label %if.end83, !dbg !7308

if.then82:                                        ; preds = %while.end
  store i8 1, i8* %retval, align 1, !dbg !7309
  br label %return, !dbg !7309

if.end83:                                         ; preds = %while.end
  store i8 0, i8* %retval, align 1, !dbg !7310
  br label %return, !dbg !7310

return:                                           ; preds = %if.end83, %if.then82, %if.then32, %if.then
  %33 = load i8, i8* %retval, align 1, !dbg !7311
  ret i8 %33, !dbg !7311
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @verify_stmts() #0 !dbg !7312 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %err = alloca i8, align 1
  %visited = alloca %struct.pointer_set_t*, align 8
  %visited_stmts = alloca %struct.pointer_set_t*, align 8
  %addr = alloca %union.tree_node*, align 8
  %wi = alloca %struct.walk_stmt_info, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %i = alloca i64, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %t = alloca %union.tree_node*, align 8
  %addr22 = alloca %union.tree_node*, align 8
  %tmp54 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %decl = alloca %union.tree_node*, align 8
  %uid = alloca i32, align 4
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !7313, metadata !DIExpression()), !dbg !7314
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !7315, metadata !DIExpression()), !dbg !7316
  call void @llvm.dbg.declare(metadata i8* %err, metadata !7317, metadata !DIExpression()), !dbg !7318
  store i8 0, i8* %err, align 1, !dbg !7318
  call void @llvm.dbg.declare(metadata %struct.pointer_set_t** %visited, metadata !7319, metadata !DIExpression()), !dbg !7320
  call void @llvm.dbg.declare(metadata %struct.pointer_set_t** %visited_stmts, metadata !7321, metadata !DIExpression()), !dbg !7322
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !7323, metadata !DIExpression()), !dbg !7324
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info* %wi, metadata !7325, metadata !DIExpression()), !dbg !7326
  br label %do.body, !dbg !7327

do.body:                                          ; preds = %entry
  %0 = load i8, i8* @timevar_enable, align 1, !dbg !7328
  %tobool = icmp ne i8 %0, 0, !dbg !7328
  br i1 %tobool, label %if.then, label %if.end, !dbg !7331

if.then:                                          ; preds = %do.body
  call void @timevar_push_1(i32 108), !dbg !7328
  br label %if.end, !dbg !7328

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end, !dbg !7331

do.end:                                           ; preds = %if.end
  %call = call %struct.pointer_set_t* @pointer_set_create(), !dbg !7332
  store %struct.pointer_set_t* %call, %struct.pointer_set_t** %visited, align 8, !dbg !7333
  %call1 = call %struct.pointer_set_t* @pointer_set_create(), !dbg !7334
  store %struct.pointer_set_t* %call1, %struct.pointer_set_t** %visited_stmts, align 8, !dbg !7335
  %1 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !7336
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 56, i1 false), !dbg !7336
  %2 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited, align 8, !dbg !7337
  %3 = bitcast %struct.pointer_set_t* %2 to i8*, !dbg !7338
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 1, !dbg !7339
  store i8* %3, i8** %info, align 8, !dbg !7340
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7341
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !7341
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7341
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7341
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 0, !dbg !7341
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !7341
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 6, !dbg !7341
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !7341
  store %struct.basic_block_def* %7, %struct.basic_block_def** %bb, align 8, !dbg !7341
  br label %for.cond, !dbg !7341

for.cond:                                         ; preds = %for.inc131, %do.end
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7343
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7343
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !7343
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 1, !dbg !7343
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !7343
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 1, !dbg !7343
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !7343
  %cmp = icmp ne %struct.basic_block_def* %8, %11, !dbg !7343
  br i1 %cmp, label %for.body, label %for.end133, !dbg !7341

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !7345, metadata !DIExpression()), !dbg !7347
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7348, metadata !DIExpression()), !dbg !7349
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7350
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %12), !dbg !7352
  %13 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !7352
  %14 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !7352
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 24, i1 false), !dbg !7352
  br label %for.cond4, !dbg !7353

for.cond4:                                        ; preds = %for.inc52, %for.body
  %call5 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7354
  %tobool6 = icmp ne i8 %call5, 0, !dbg !7356
  %lnot = xor i1 %tobool6, true, !dbg !7356
  br i1 %lnot, label %for.body7, label %for.end53, !dbg !7357

for.body7:                                        ; preds = %for.cond4
  %call8 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7358
  store %union.gimple_statement_d* %call8, %union.gimple_statement_d** %phi, align 8, !dbg !7360
  %15 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited_stmts, align 8, !dbg !7361
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7362
  %17 = bitcast %union.gimple_statement_d* %16 to i8*, !dbg !7362
  %call9 = call i32 @pointer_set_insert(%struct.pointer_set_t* %15, i8* %17), !dbg !7363
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7364
  %call10 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %18), !dbg !7366
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7367
  %cmp11 = icmp ne %struct.basic_block_def* %call10, %19, !dbg !7368
  br i1 %cmp11, label %if.then12, label %if.end14, !dbg !7369

if.then12:                                        ; preds = %for.body7
  call void (i8*, ...) @error(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.22, i64 0, i64 0)), !dbg !7370
  %20 = load i8, i8* %err, align 1, !dbg !7372
  %conv = zext i8 %20 to i32, !dbg !7372
  %or = or i32 %conv, 1, !dbg !7372
  %conv13 = trunc i32 %or to i8, !dbg !7372
  store i8 %conv13, i8* %err, align 1, !dbg !7372
  br label %if.end14, !dbg !7373

if.end14:                                         ; preds = %if.then12, %for.body7
  store i64 0, i64* %i, align 8, !dbg !7374
  br label %for.cond15, !dbg !7376

for.cond15:                                       ; preds = %for.inc, %if.end14
  %21 = load i64, i64* %i, align 8, !dbg !7377
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7379
  %call16 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %22), !dbg !7380
  %conv17 = zext i32 %call16 to i64, !dbg !7380
  %cmp18 = icmp ult i64 %21, %conv17, !dbg !7381
  br i1 %cmp18, label %for.body20, label %for.end, !dbg !7382

for.body20:                                       ; preds = %for.cond15
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !7383, metadata !DIExpression()), !dbg !7385
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7386
  %24 = load i64, i64* %i, align 8, !dbg !7387
  %call21 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %23, i64 %24), !dbg !7388
  store %union.tree_node* %call21, %union.tree_node** %t, align 8, !dbg !7385
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr22, metadata !7389, metadata !DIExpression()), !dbg !7390
  %25 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7391
  %tobool23 = icmp ne %union.tree_node* %25, null, !dbg !7391
  br i1 %tobool23, label %if.else, label %if.then24, !dbg !7393

if.then24:                                        ; preds = %for.body20
  call void (i8*, ...) @error(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23, i64 0, i64 0)), !dbg !7394
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7396
  call void @debug_gimple_stmt(%union.gimple_statement_d* %26), !dbg !7397
  %27 = load i8, i8* %err, align 1, !dbg !7398
  %conv25 = zext i8 %27 to i32, !dbg !7398
  %or26 = or i32 %conv25, 1, !dbg !7398
  %conv27 = trunc i32 %or26 to i8, !dbg !7398
  store i8 %conv27, i8* %err, align 1, !dbg !7398
  br label %for.inc, !dbg !7399

if.else:                                          ; preds = %for.body20
  %28 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7400
  %base = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !7400
  %29 = bitcast %struct.tree_base* %base to i64*, !dbg !7400
  %bf.load = load i64, i64* %29, align 8, !dbg !7400
  %bf.clear = and i64 %bf.load, 65535, !dbg !7400
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7400
  %cmp28 = icmp ne i32 %bf.cast, 141, !dbg !7402
  br i1 %cmp28, label %land.lhs.true, label %if.end43, !dbg !7403

land.lhs.true:                                    ; preds = %if.else
  %30 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7404
  %base30 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !7404
  %31 = bitcast %struct.tree_base* %base30 to i64*, !dbg !7404
  %bf.load31 = load i64, i64* %31, align 8, !dbg !7404
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !7404
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !7404
  %cmp34 = icmp ne i32 %bf.cast33, 29, !dbg !7405
  br i1 %cmp34, label %land.lhs.true36, label %if.end43, !dbg !7406

land.lhs.true36:                                  ; preds = %land.lhs.true
  %32 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7407
  %call37 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %32), !dbg !7408
  %tobool38 = icmp ne i8 %call37, 0, !dbg !7408
  br i1 %tobool38, label %if.end43, label %if.then39, !dbg !7409

if.then39:                                        ; preds = %land.lhs.true36
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.24, i64 0, i64 0)), !dbg !7410
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7412
  call void @debug_gimple_stmt(%union.gimple_statement_d* %33), !dbg !7413
  %34 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7414
  call void @debug_generic_expr(%union.tree_node* %34), !dbg !7415
  %35 = load i8, i8* %err, align 1, !dbg !7416
  %conv40 = zext i8 %35 to i32, !dbg !7416
  %or41 = or i32 %conv40, 1, !dbg !7416
  %conv42 = trunc i32 %or41 to i8, !dbg !7416
  store i8 %conv42, i8* %err, align 1, !dbg !7416
  br label %if.end43, !dbg !7417

if.end43:                                         ; preds = %if.then39, %land.lhs.true36, %land.lhs.true, %if.else
  br label %if.end44

if.end44:                                         ; preds = %if.end43
  %36 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited, align 8, !dbg !7418
  %37 = bitcast %struct.pointer_set_t* %36 to i8*, !dbg !7418
  %call45 = call %union.tree_node* @walk_tree_1(%union.tree_node** %t, %union.tree_node* (%union.tree_node**, i32*, i8*)* @verify_node_sharing, i8* %37, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !7418
  store %union.tree_node* %call45, %union.tree_node** %addr22, align 8, !dbg !7419
  %38 = load %union.tree_node*, %union.tree_node** %addr22, align 8, !dbg !7420
  %tobool46 = icmp ne %union.tree_node* %38, null, !dbg !7420
  br i1 %tobool46, label %if.then47, label %if.end51, !dbg !7422

if.then47:                                        ; preds = %if.end44
  call void (i8*, ...) @error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.25, i64 0, i64 0)), !dbg !7423
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7425
  call void @debug_gimple_stmt(%union.gimple_statement_d* %39), !dbg !7426
  %40 = load %union.tree_node*, %union.tree_node** %addr22, align 8, !dbg !7427
  call void @debug_generic_expr(%union.tree_node* %40), !dbg !7428
  %41 = load i8, i8* %err, align 1, !dbg !7429
  %conv48 = zext i8 %41 to i32, !dbg !7429
  %or49 = or i32 %conv48, 1, !dbg !7429
  %conv50 = trunc i32 %or49 to i8, !dbg !7429
  store i8 %conv50, i8* %err, align 1, !dbg !7429
  br label %if.end51, !dbg !7430

if.end51:                                         ; preds = %if.then47, %if.end44
  br label %for.inc, !dbg !7431

for.inc:                                          ; preds = %if.end51, %if.then24
  %42 = load i64, i64* %i, align 8, !dbg !7432
  %inc = add i64 %42, 1, !dbg !7432
  store i64 %inc, i64* %i, align 8, !dbg !7432
  br label %for.cond15, !dbg !7433, !llvm.loop !7434

for.end:                                          ; preds = %for.cond15
  br label %for.inc52, !dbg !7436

for.inc52:                                        ; preds = %for.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !7437
  br label %for.cond4, !dbg !7438, !llvm.loop !7439

for.end53:                                        ; preds = %for.cond4
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7441
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp54, %struct.basic_block_def* %43), !dbg !7443
  %44 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !7443
  %45 = bitcast %struct.gimple_stmt_iterator* %tmp54 to i8*, !dbg !7443
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* align 8 %45, i64 24, i1 false), !dbg !7443
  br label %for.cond55, !dbg !7444

for.cond55:                                       ; preds = %if.end129, %for.end53
  %call56 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7445
  %tobool57 = icmp ne i8 %call56, 0, !dbg !7447
  %lnot58 = xor i1 %tobool57, true, !dbg !7447
  br i1 %lnot58, label %for.body59, label %for.end130, !dbg !7448

for.body59:                                       ; preds = %for.cond55
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7449, metadata !DIExpression()), !dbg !7451
  %call60 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7452
  store %union.gimple_statement_d* %call60, %union.gimple_statement_d** %stmt, align 8, !dbg !7451
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7453
  %call61 = call i32 @gimple_code(%union.gimple_statement_d* %46), !dbg !7455
  %cmp62 = icmp eq i32 %call61, 34, !dbg !7456
  br i1 %cmp62, label %if.then67, label %lor.lhs.false, !dbg !7457

lor.lhs.false:                                    ; preds = %for.body59
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7458
  %call64 = call i32 @gimple_code(%union.gimple_statement_d* %47), !dbg !7459
  %cmp65 = icmp eq i32 %call64, 10, !dbg !7460
  br i1 %cmp65, label %if.then67, label %if.end71, !dbg !7461

if.then67:                                        ; preds = %lor.lhs.false, %for.body59
  call void (i8*, ...) @error(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.26, i64 0, i64 0)), !dbg !7462
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7464
  call void @debug_gimple_stmt(%union.gimple_statement_d* %48), !dbg !7465
  %49 = load i8, i8* %err, align 1, !dbg !7466
  %conv68 = zext i8 %49 to i32, !dbg !7466
  %or69 = or i32 %conv68, 1, !dbg !7466
  %conv70 = trunc i32 %or69 to i8, !dbg !7466
  store i8 %conv70, i8* %err, align 1, !dbg !7466
  br label %if.end71, !dbg !7467

if.end71:                                         ; preds = %if.then67, %lor.lhs.false
  %50 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited_stmts, align 8, !dbg !7468
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7469
  %52 = bitcast %union.gimple_statement_d* %51 to i8*, !dbg !7469
  %call72 = call i32 @pointer_set_insert(%struct.pointer_set_t* %50, i8* %52), !dbg !7470
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7471
  %call73 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %53), !dbg !7473
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7474
  %cmp74 = icmp ne %struct.basic_block_def* %call73, %54, !dbg !7475
  br i1 %cmp74, label %if.then76, label %if.end80, !dbg !7476

if.then76:                                        ; preds = %if.end71
  call void (i8*, ...) @error(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.27, i64 0, i64 0)), !dbg !7477
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7479
  call void @debug_gimple_stmt(%union.gimple_statement_d* %55), !dbg !7480
  %56 = load i8, i8* %err, align 1, !dbg !7481
  %conv77 = zext i8 %56 to i32, !dbg !7481
  %or78 = or i32 %conv77, 1, !dbg !7481
  %conv79 = trunc i32 %or78 to i8, !dbg !7481
  store i8 %conv79, i8* %err, align 1, !dbg !7481
  br label %if.end80, !dbg !7482

if.end80:                                         ; preds = %if.then76, %if.end71
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7483
  %call81 = call i32 @gimple_code(%union.gimple_statement_d* %57), !dbg !7485
  %cmp82 = icmp eq i32 %call81, 4, !dbg !7486
  br i1 %cmp82, label %if.then84, label %if.end116, !dbg !7487

if.then84:                                        ; preds = %if.end80
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !7488, metadata !DIExpression()), !dbg !7490
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7491
  %call85 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %58), !dbg !7492
  store %union.tree_node* %call85, %union.tree_node** %decl, align 8, !dbg !7490
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !7493, metadata !DIExpression()), !dbg !7494
  %59 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7495
  %label_decl = bitcast %union.tree_node* %59 to %struct.tree_label_decl*, !dbg !7495
  %label_decl_uid = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl, i32 0, i32 1, !dbg !7495
  %60 = load i32, i32* %label_decl_uid, align 8, !dbg !7495
  store i32 %60, i32* %uid, align 4, !dbg !7494
  %61 = load i32, i32* %uid, align 4, !dbg !7496
  %cmp86 = icmp eq i32 %61, -1, !dbg !7498
  br i1 %cmp86, label %if.then99, label %lor.lhs.false88, !dbg !7499

lor.lhs.false88:                                  ; preds = %if.then84
  %62 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7500
  %add.ptr89 = getelementptr inbounds %struct.function, %struct.function* %62, i64 0, !dbg !7500
  %cfg90 = getelementptr inbounds %struct.function, %struct.function* %add.ptr89, i32 0, i32 1, !dbg !7500
  %63 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg90, align 8, !dbg !7500
  %x_label_to_block_map = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %63, i32 0, i32 6, !dbg !7500
  %64 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_label_to_block_map, align 8, !dbg !7500
  %tobool91 = icmp ne %struct.VEC_basic_block_gc* %64, null, !dbg !7500
  br i1 %tobool91, label %cond.true, label %cond.false, !dbg !7500

cond.true:                                        ; preds = %lor.lhs.false88
  %65 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7500
  %add.ptr92 = getelementptr inbounds %struct.function, %struct.function* %65, i64 0, !dbg !7500
  %cfg93 = getelementptr inbounds %struct.function, %struct.function* %add.ptr92, i32 0, i32 1, !dbg !7500
  %66 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg93, align 8, !dbg !7500
  %x_label_to_block_map94 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %66, i32 0, i32 6, !dbg !7500
  %67 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_label_to_block_map94, align 8, !dbg !7500
  %base95 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %67, i32 0, i32 0, !dbg !7500
  br label %cond.end, !dbg !7500

cond.false:                                       ; preds = %lor.lhs.false88
  br label %cond.end, !dbg !7500

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base95, %cond.true ], [ null, %cond.false ], !dbg !7500
  %68 = load i32, i32* %uid, align 4, !dbg !7500
  %call96 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %68), !dbg !7500
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7501
  %cmp97 = icmp ne %struct.basic_block_def* %call96, %69, !dbg !7502
  br i1 %cmp97, label %if.then99, label %if.end103, !dbg !7503

if.then99:                                        ; preds = %cond.end, %if.then84
  call void (i8*, ...) @error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.28, i64 0, i64 0)), !dbg !7504
  %70 = load i8, i8* %err, align 1, !dbg !7506
  %conv100 = zext i8 %70 to i32, !dbg !7506
  %or101 = or i32 %conv100, 1, !dbg !7506
  %conv102 = trunc i32 %or101 to i8, !dbg !7506
  store i8 %conv102, i8* %err, align 1, !dbg !7506
  br label %if.end103, !dbg !7507

if.end103:                                        ; preds = %if.then99, %cond.end
  %71 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7508
  %label_decl104 = bitcast %union.tree_node* %71 to %struct.tree_label_decl*, !dbg !7508
  %eh_landing_pad_nr = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl104, i32 0, i32 2, !dbg !7508
  %72 = load i32, i32* %eh_landing_pad_nr, align 4, !dbg !7508
  store i32 %72, i32* %uid, align 4, !dbg !7509
  %73 = load i32, i32* %uid, align 4, !dbg !7510
  %tobool105 = icmp ne i32 %73, 0, !dbg !7510
  br i1 %tobool105, label %if.then106, label %if.end115, !dbg !7512

if.then106:                                       ; preds = %if.end103
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !7513, metadata !DIExpression()), !dbg !7515
  %74 = load i32, i32* %uid, align 4, !dbg !7516
  %call107 = call %struct.eh_landing_pad_d* @get_eh_landing_pad_from_number(i32 %74), !dbg !7517
  store %struct.eh_landing_pad_d* %call107, %struct.eh_landing_pad_d** %lp, align 8, !dbg !7515
  %75 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7518
  %76 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !7520
  %post_landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %76, i32 0, i32 2, !dbg !7521
  %77 = load %union.tree_node*, %union.tree_node** %post_landing_pad, align 8, !dbg !7521
  %cmp108 = icmp ne %union.tree_node* %75, %77, !dbg !7522
  br i1 %cmp108, label %if.then110, label %if.end114, !dbg !7523

if.then110:                                       ; preds = %if.then106
  call void (i8*, ...) @error(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.29, i64 0, i64 0)), !dbg !7524
  %78 = load i8, i8* %err, align 1, !dbg !7526
  %conv111 = zext i8 %78 to i32, !dbg !7526
  %or112 = or i32 %conv111, 1, !dbg !7526
  %conv113 = trunc i32 %or112 to i8, !dbg !7526
  store i8 %conv113, i8* %err, align 1, !dbg !7526
  br label %if.end114, !dbg !7527

if.end114:                                        ; preds = %if.then110, %if.then106
  br label %if.end115, !dbg !7528

if.end115:                                        ; preds = %if.end114, %if.end103
  br label %if.end116, !dbg !7529

if.end116:                                        ; preds = %if.end115, %if.end80
  %call117 = call zeroext i8 @verify_stmt(%struct.gimple_stmt_iterator* %gsi), !dbg !7530
  %conv118 = zext i8 %call117 to i32, !dbg !7530
  %79 = load i8, i8* %err, align 1, !dbg !7531
  %conv119 = zext i8 %79 to i32, !dbg !7531
  %or120 = or i32 %conv119, %conv118, !dbg !7531
  %conv121 = trunc i32 %or120 to i8, !dbg !7531
  store i8 %conv121, i8* %err, align 1, !dbg !7531
  %call122 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7532
  %call123 = call %union.tree_node* @walk_gimple_op(%union.gimple_statement_d* %call122, %union.tree_node* (%union.tree_node**, i32*, i8*)* @verify_node_sharing, %struct.walk_stmt_info* %wi), !dbg !7533
  store %union.tree_node* %call123, %union.tree_node** %addr, align 8, !dbg !7534
  %80 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !7535
  %tobool124 = icmp ne %union.tree_node* %80, null, !dbg !7535
  br i1 %tobool124, label %if.then125, label %if.end129, !dbg !7537

if.then125:                                       ; preds = %if.end116
  call void (i8*, ...) @error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.25, i64 0, i64 0)), !dbg !7538
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7540
  call void @debug_gimple_stmt(%union.gimple_statement_d* %81), !dbg !7541
  %82 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !7542
  call void @debug_generic_expr(%union.tree_node* %82), !dbg !7543
  %83 = load i8, i8* %err, align 1, !dbg !7544
  %conv126 = zext i8 %83 to i32, !dbg !7544
  %or127 = or i32 %conv126, 1, !dbg !7544
  %conv128 = trunc i32 %or127 to i8, !dbg !7544
  store i8 %conv128, i8* %err, align 1, !dbg !7544
  br label %if.end129, !dbg !7545

if.end129:                                        ; preds = %if.then125, %if.end116
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !7546
  br label %for.cond55, !dbg !7547, !llvm.loop !7548

for.end130:                                       ; preds = %for.cond55
  br label %for.inc131, !dbg !7550

for.inc131:                                       ; preds = %for.end130
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7343
  %next_bb132 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %84, i32 0, i32 6, !dbg !7343
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb132, align 8, !dbg !7343
  store %struct.basic_block_def* %85, %struct.basic_block_def** %bb, align 8, !dbg !7343
  br label %for.cond, !dbg !7343, !llvm.loop !7551

for.end133:                                       ; preds = %for.cond
  store i8 0, i8* @eh_error_found, align 1, !dbg !7553
  %86 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7554
  %add.ptr134 = getelementptr inbounds %struct.function, %struct.function* %86, i64 0, !dbg !7554
  %call135 = call %struct.htab* @get_eh_throw_stmt_table(%struct.function* %add.ptr134), !dbg !7556
  %tobool136 = icmp ne %struct.htab* %call135, null, !dbg !7556
  br i1 %tobool136, label %if.then137, label %if.end140, !dbg !7557

if.then137:                                       ; preds = %for.end133
  %87 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7558
  %add.ptr138 = getelementptr inbounds %struct.function, %struct.function* %87, i64 0, !dbg !7558
  %call139 = call %struct.htab* @get_eh_throw_stmt_table(%struct.function* %add.ptr138), !dbg !7559
  %88 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited_stmts, align 8, !dbg !7560
  %89 = bitcast %struct.pointer_set_t* %88 to i8*, !dbg !7560
  call void @htab_traverse(%struct.htab* %call139, i32 (i8**, i8*)* @verify_eh_throw_stmt_node, i8* %89), !dbg !7561
  br label %if.end140, !dbg !7561

if.end140:                                        ; preds = %if.then137, %for.end133
  %90 = load i8, i8* %err, align 1, !dbg !7562
  %conv141 = zext i8 %90 to i32, !dbg !7562
  %91 = load i8, i8* @eh_error_found, align 1, !dbg !7564
  %conv142 = zext i8 %91 to i32, !dbg !7564
  %or143 = or i32 %conv141, %conv142, !dbg !7565
  %tobool144 = icmp ne i32 %or143, 0, !dbg !7565
  br i1 %tobool144, label %if.then145, label %if.end146, !dbg !7566

if.then145:                                       ; preds = %if.end140
  call void (i8*, ...) @internal_error(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.30, i64 0, i64 0)), !dbg !7567
  br label %if.end146, !dbg !7567

if.end146:                                        ; preds = %if.then145, %if.end140
  %92 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited, align 8, !dbg !7568
  call void @pointer_set_destroy(%struct.pointer_set_t* %92), !dbg !7569
  %93 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited_stmts, align 8, !dbg !7570
  call void @pointer_set_destroy(%struct.pointer_set_t* %93), !dbg !7571
  call void @verify_histograms(), !dbg !7572
  br label %do.body147, !dbg !7573

do.body147:                                       ; preds = %if.end146
  %94 = load i8, i8* @timevar_enable, align 1, !dbg !7574
  %tobool148 = icmp ne i8 %94, 0, !dbg !7574
  br i1 %tobool148, label %if.then149, label %if.end150, !dbg !7577

if.then149:                                       ; preds = %do.body147
  call void @timevar_pop_1(i32 108), !dbg !7574
  br label %if.end150, !dbg !7574

if.end150:                                        ; preds = %if.then149, %do.body147
  br label %do.end151, !dbg !7577

do.end151:                                        ; preds = %if.end150
  ret void, !dbg !7578
}

declare dso_local void @timevar_push_1(i32) #2

declare dso_local %struct.pointer_set_t* @pointer_set_create() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

declare dso_local i32 @pointer_set_insert(%struct.pointer_set_t*, i8*) #2

declare dso_local void @error(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !7579 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7580, metadata !DIExpression()), !dbg !7581
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7582
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !7583
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !7584
  %1 = load i32, i32* %nargs, align 4, !dbg !7584
  ret i32 %1, !dbg !7585
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %gs, i64 %index) #0 !dbg !7586 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i64, align 8
  %pd = alloca %struct.phi_arg_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7589, metadata !DIExpression()), !dbg !7590
  store i64 %index, i64* %index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %index.addr, metadata !7591, metadata !DIExpression()), !dbg !7592
  call void @llvm.dbg.declare(metadata %struct.phi_arg_d** %pd, metadata !7593, metadata !DIExpression()), !dbg !7594
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7595
  %1 = load i64, i64* %index.addr, align 8, !dbg !7596
  %conv = trunc i64 %1 to i32, !dbg !7596
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %conv), !dbg !7597
  store %struct.phi_arg_d* %call, %struct.phi_arg_d** %pd, align 8, !dbg !7594
  %2 = load %struct.phi_arg_d*, %struct.phi_arg_d** %pd, align 8, !dbg !7598
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %2, i32 0, i32 0, !dbg !7599
  %call1 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %imm_use), !dbg !7600
  ret %union.tree_node* %call1, !dbg !7601
}

declare dso_local void @debug_gimple_stmt(%union.gimple_statement_d*) #2

declare dso_local void @debug_generic_expr(%union.tree_node*) #2

declare dso_local %union.tree_node* @walk_tree_1(%union.tree_node**, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @verify_node_sharing(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !7602 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %wi = alloca %struct.walk_stmt_info*, align 8
  %visited = alloca %struct.pointer_set_t*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !7605, metadata !DIExpression()), !dbg !7606
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !7607, metadata !DIExpression()), !dbg !7608
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7609, metadata !DIExpression()), !dbg !7610
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi, metadata !7611, metadata !DIExpression()), !dbg !7612
  %0 = load i8*, i8** %data.addr, align 8, !dbg !7613
  %1 = bitcast i8* %0 to %struct.walk_stmt_info*, !dbg !7614
  store %struct.walk_stmt_info* %1, %struct.walk_stmt_info** %wi, align 8, !dbg !7612
  call void @llvm.dbg.declare(metadata %struct.pointer_set_t** %visited, metadata !7615, metadata !DIExpression()), !dbg !7616
  %2 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !7617
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %2, i32 0, i32 1, !dbg !7618
  %3 = load i8*, i8** %info, align 8, !dbg !7618
  %4 = bitcast i8* %3 to %struct.pointer_set_t*, !dbg !7619
  store %struct.pointer_set_t* %4, %struct.pointer_set_t** %visited, align 8, !dbg !7616
  %5 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7620
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !7622
  %call = call zeroext i8 @tree_node_can_be_shared(%union.tree_node* %6), !dbg !7623
  %tobool = icmp ne i8 %call, 0, !dbg !7623
  br i1 %tobool, label %if.then, label %if.end, !dbg !7624

if.then:                                          ; preds = %entry
  %7 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !7625
  store i32 0, i32* %7, align 4, !dbg !7627
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7628
  br label %return, !dbg !7628

if.end:                                           ; preds = %entry
  %8 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited, align 8, !dbg !7629
  %9 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7631
  %10 = load %union.tree_node*, %union.tree_node** %9, align 8, !dbg !7632
  %11 = bitcast %union.tree_node* %10 to i8*, !dbg !7632
  %call1 = call i32 @pointer_set_insert(%struct.pointer_set_t* %8, i8* %11), !dbg !7633
  %tobool2 = icmp ne i32 %call1, 0, !dbg !7633
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !7634

if.then3:                                         ; preds = %if.end
  %12 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7635
  %13 = load %union.tree_node*, %union.tree_node** %12, align 8, !dbg !7636
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !7637
  br label %return, !dbg !7637

if.end4:                                          ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7638
  br label %return, !dbg !7638

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7639
  ret %union.tree_node* %14, !dbg !7639
}

declare dso_local %struct.eh_landing_pad_d* @get_eh_landing_pad_from_number(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_stmt(%struct.gimple_stmt_iterator* %gsi) #0 !dbg !7640 {
entry:
  %retval = alloca i8, align 1
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %addr = alloca %union.tree_node*, align 8
  %wi = alloca %struct.walk_stmt_info, align 8
  %last_in_block = alloca i8, align 1
  %stmt = alloca %union.gimple_statement_d*, align 8
  %lp_nr = alloca i32, align 4
  %decl = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !7643, metadata !DIExpression()), !dbg !7644
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !7645, metadata !DIExpression()), !dbg !7646
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info* %wi, metadata !7647, metadata !DIExpression()), !dbg !7648
  call void @llvm.dbg.declare(metadata i8* %last_in_block, metadata !7649, metadata !DIExpression()), !dbg !7650
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7651
  %call = call zeroext i8 @gsi_one_before_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !7652
  store i8 %call, i8* %last_in_block, align 1, !dbg !7650
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7653, metadata !DIExpression()), !dbg !7654
  %1 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7655
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %1), !dbg !7656
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !7654
  call void @llvm.dbg.declare(metadata i32* %lp_nr, metadata !7657, metadata !DIExpression()), !dbg !7658
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7659
  %call2 = call zeroext i8 @is_gimple_omp(%union.gimple_statement_d* %2), !dbg !7661
  %tobool = icmp ne i8 %call2, 0, !dbg !7661
  br i1 %tobool, label %if.then, label %if.end, !dbg !7662

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7663
  br label %return, !dbg !7663

if.end:                                           ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7665
  %call3 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %3), !dbg !7667
  %tobool4 = icmp ne i8 %call3, 0, !dbg !7667
  br i1 %tobool4, label %if.then5, label %if.end32, !dbg !7668

if.then5:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !7669, metadata !DIExpression()), !dbg !7671
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7672
  %call6 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %4), !dbg !7674
  %call7 = call zeroext i8 @is_gimple_call_addr(%union.tree_node* %call6), !dbg !7675
  %tobool8 = icmp ne i8 %call7, 0, !dbg !7675
  br i1 %tobool8, label %if.end10, label %if.then9, !dbg !7676

if.then9:                                         ; preds = %if.then5
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.118, i64 0, i64 0)), !dbg !7677
  store i8 1, i8* %retval, align 1, !dbg !7679
  br label %return, !dbg !7679

if.end10:                                         ; preds = %if.then5
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7680
  %call11 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %5), !dbg !7681
  store %union.tree_node* %call11, %union.tree_node** %decl, align 8, !dbg !7682
  %6 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7683
  %tobool12 = icmp ne %union.tree_node* %6, null, !dbg !7683
  br i1 %tobool12, label %land.lhs.true, label %if.end31, !dbg !7685

land.lhs.true:                                    ; preds = %if.end10
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7686
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !7686
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !7686
  %bf.load = load i64, i64* %8, align 8, !dbg !7686
  %bf.clear = and i64 %bf.load, 65535, !dbg !7686
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7686
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !7687
  br i1 %cmp, label %land.lhs.true13, label %if.end31, !dbg !7688

land.lhs.true13:                                  ; preds = %land.lhs.true
  %9 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7689
  %function_decl = bitcast %union.tree_node* %9 to %struct.tree_function_decl*, !dbg !7689
  %looping_const_or_pure_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !7689
  %bf.load14 = load i32, i32* %looping_const_or_pure_flag, align 8, !dbg !7689
  %bf.lshr = lshr i32 %bf.load14, 28, !dbg !7689
  %bf.clear15 = and i32 %bf.lshr, 1, !dbg !7689
  %tobool16 = icmp ne i32 %bf.clear15, 0, !dbg !7689
  br i1 %tobool16, label %land.lhs.true17, label %if.end31, !dbg !7690

land.lhs.true17:                                  ; preds = %land.lhs.true13
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7691
  %function_decl18 = bitcast %union.tree_node* %10 to %struct.tree_function_decl*, !dbg !7691
  %pure_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl18, i32 0, i32 5, !dbg !7691
  %bf.load19 = load i32, i32* %pure_flag, align 8, !dbg !7691
  %bf.lshr20 = lshr i32 %bf.load19, 27, !dbg !7691
  %bf.clear21 = and i32 %bf.lshr20, 1, !dbg !7691
  %tobool22 = icmp ne i32 %bf.clear21, 0, !dbg !7691
  br i1 %tobool22, label %if.end31, label %land.lhs.true23, !dbg !7692

land.lhs.true23:                                  ; preds = %land.lhs.true17
  %11 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7693
  %base24 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !7693
  %12 = bitcast %struct.tree_base* %base24 to i64*, !dbg !7693
  %bf.load25 = load i64, i64* %12, align 8, !dbg !7693
  %bf.lshr26 = lshr i64 %bf.load25, 20, !dbg !7693
  %bf.clear27 = and i64 %bf.lshr26, 1, !dbg !7693
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !7693
  %tobool29 = icmp ne i32 %bf.cast28, 0, !dbg !7693
  br i1 %tobool29, label %if.end31, label %if.then30, !dbg !7694

if.then30:                                        ; preds = %land.lhs.true23
  call void (i8*, ...) @error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.119, i64 0, i64 0)), !dbg !7695
  store i8 1, i8* %retval, align 1, !dbg !7697
  br label %return, !dbg !7697

if.end31:                                         ; preds = %land.lhs.true23, %land.lhs.true17, %land.lhs.true13, %land.lhs.true, %if.end10
  br label %if.end32, !dbg !7698

if.end32:                                         ; preds = %if.end31, %if.end
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7699
  %call33 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %13), !dbg !7701
  %tobool34 = icmp ne i8 %call33, 0, !dbg !7701
  br i1 %tobool34, label %if.then35, label %if.end36, !dbg !7702

if.then35:                                        ; preds = %if.end32
  store i8 0, i8* %retval, align 1, !dbg !7703
  br label %return, !dbg !7703

if.end36:                                         ; preds = %if.end32
  %14 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !7704
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 56, i1 false), !dbg !7704
  %15 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7705
  %call37 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %15), !dbg !7706
  %call38 = call %union.tree_node* @walk_gimple_op(%union.gimple_statement_d* %call37, %union.tree_node* (%union.tree_node**, i32*, i8*)* @verify_expr, %struct.walk_stmt_info* %wi), !dbg !7707
  store %union.tree_node* %call38, %union.tree_node** %addr, align 8, !dbg !7708
  %16 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !7709
  %tobool39 = icmp ne %union.tree_node* %16, null, !dbg !7709
  br i1 %tobool39, label %if.then40, label %if.end43, !dbg !7711

if.then40:                                        ; preds = %if.end36
  %17 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !7712
  call void @debug_generic_expr(%union.tree_node* %17), !dbg !7714
  %18 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7715
  %call41 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %18), !dbg !7716
  %call42 = call i32 @gimple_location(%union.gimple_statement_d* %call41), !dbg !7717
  call void (i32, i8*, ...) @inform(i32 %call42, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.120, i64 0, i64 0)), !dbg !7718
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7719
  call void @debug_gimple_stmt(%union.gimple_statement_d* %19), !dbg !7720
  store i8 1, i8* %retval, align 1, !dbg !7721
  br label %return, !dbg !7721

if.end43:                                         ; preds = %if.end36
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7722
  %call44 = call i32 @lookup_stmt_eh_lp(%union.gimple_statement_d* %20), !dbg !7723
  store i32 %call44, i32* %lp_nr, align 4, !dbg !7724
  %21 = load i32, i32* %lp_nr, align 4, !dbg !7725
  %cmp45 = icmp ne i32 %21, 0, !dbg !7727
  br i1 %cmp45, label %if.then46, label %if.end62, !dbg !7728

if.then46:                                        ; preds = %if.end43
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7729
  %call47 = call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %22), !dbg !7732
  %tobool48 = icmp ne i8 %call47, 0, !dbg !7732
  br i1 %tobool48, label %if.else, label %if.then49, !dbg !7733

if.then49:                                        ; preds = %if.then46
  %23 = load i32, i32* @cgraph_state, align 4, !dbg !7734
  %cmp50 = icmp ne i32 %23, 2, !dbg !7737
  br i1 %cmp50, label %if.then51, label %if.end52, !dbg !7738

if.then51:                                        ; preds = %if.then49
  call void (i8*, ...) @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.121, i64 0, i64 0)), !dbg !7739
  br label %fail, !dbg !7741

if.end52:                                         ; preds = %if.then49
  br label %if.end61, !dbg !7742

if.else:                                          ; preds = %if.then46
  %24 = load i32, i32* %lp_nr, align 4, !dbg !7743
  %cmp53 = icmp sgt i32 %24, 0, !dbg !7745
  br i1 %cmp53, label %land.lhs.true54, label %if.end60, !dbg !7746

land.lhs.true54:                                  ; preds = %if.else
  %25 = load i8, i8* %last_in_block, align 1, !dbg !7747
  %tobool55 = icmp ne i8 %25, 0, !dbg !7747
  br i1 %tobool55, label %if.end60, label %land.lhs.true56, !dbg !7748

land.lhs.true56:                                  ; preds = %land.lhs.true54
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7749
  %call57 = call zeroext i8 @stmt_can_throw_internal(%union.gimple_statement_d* %26), !dbg !7750
  %conv = zext i8 %call57 to i32, !dbg !7750
  %tobool58 = icmp ne i32 %conv, 0, !dbg !7750
  br i1 %tobool58, label %if.then59, label %if.end60, !dbg !7751

if.then59:                                        ; preds = %land.lhs.true56
  call void (i8*, ...) @error(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.122, i64 0, i64 0)), !dbg !7752
  br label %fail, !dbg !7754

if.end60:                                         ; preds = %land.lhs.true56, %land.lhs.true54, %if.else
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.end52
  br label %if.end62, !dbg !7755

if.end62:                                         ; preds = %if.end61, %if.end43
  store i8 0, i8* %retval, align 1, !dbg !7756
  br label %return, !dbg !7756

fail:                                             ; preds = %if.then59, %if.then51
  call void @llvm.dbg.label(metadata !7757), !dbg !7758
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7759
  call void @debug_gimple_stmt(%union.gimple_statement_d* %27), !dbg !7760
  store i8 1, i8* %retval, align 1, !dbg !7761
  br label %return, !dbg !7761

return:                                           ; preds = %fail, %if.end62, %if.then40, %if.then35, %if.then30, %if.then9, %if.then
  %28 = load i8, i8* %retval, align 1, !dbg !7762
  ret i8 %28, !dbg !7762
}

declare dso_local %union.tree_node* @walk_gimple_op(%union.gimple_statement_d*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, %struct.walk_stmt_info*) #2

declare dso_local %struct.htab* @get_eh_throw_stmt_table(%struct.function*) #2

declare dso_local void @htab_traverse(%struct.htab*, i32 (i8**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @verify_eh_throw_stmt_node(i8** %slot, i8* %data) #0 !dbg !7763 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %node = alloca %struct.throw_stmt_node*, align 8
  %visited = alloca %struct.pointer_set_t*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !7766, metadata !DIExpression()), !dbg !7767
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7768, metadata !DIExpression()), !dbg !7769
  call void @llvm.dbg.declare(metadata %struct.throw_stmt_node** %node, metadata !7770, metadata !DIExpression()), !dbg !7771
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !7772
  %1 = load i8*, i8** %0, align 8, !dbg !7773
  %2 = bitcast i8* %1 to %struct.throw_stmt_node*, !dbg !7774
  store %struct.throw_stmt_node* %2, %struct.throw_stmt_node** %node, align 8, !dbg !7771
  call void @llvm.dbg.declare(metadata %struct.pointer_set_t** %visited, metadata !7775, metadata !DIExpression()), !dbg !7776
  %3 = load i8*, i8** %data.addr, align 8, !dbg !7777
  %4 = bitcast i8* %3 to %struct.pointer_set_t*, !dbg !7778
  store %struct.pointer_set_t* %4, %struct.pointer_set_t** %visited, align 8, !dbg !7776
  %5 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited, align 8, !dbg !7779
  %6 = load %struct.throw_stmt_node*, %struct.throw_stmt_node** %node, align 8, !dbg !7781
  %stmt = getelementptr inbounds %struct.throw_stmt_node, %struct.throw_stmt_node* %6, i32 0, i32 0, !dbg !7782
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7782
  %8 = bitcast %union.gimple_statement_d* %7 to i8*, !dbg !7781
  %call = call i32 @pointer_set_contains(%struct.pointer_set_t* %5, i8* %8), !dbg !7783
  %tobool = icmp ne i32 %call, 0, !dbg !7783
  br i1 %tobool, label %if.end, label %if.then, !dbg !7784

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.146, i64 0, i64 0)), !dbg !7785
  %9 = load %struct.throw_stmt_node*, %struct.throw_stmt_node** %node, align 8, !dbg !7787
  %stmt1 = getelementptr inbounds %struct.throw_stmt_node, %struct.throw_stmt_node* %9, i32 0, i32 0, !dbg !7788
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !7788
  call void @debug_gimple_stmt(%union.gimple_statement_d* %10), !dbg !7789
  store i8 1, i8* @eh_error_found, align 1, !dbg !7790
  br label %if.end, !dbg !7791

if.end:                                           ; preds = %if.then, %entry
  ret i32 1, !dbg !7792
}

declare dso_local void @pointer_set_destroy(%struct.pointer_set_t*) #2

declare dso_local void @verify_histograms() #2

declare dso_local void @timevar_pop_1(i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @gimple_block_label(%struct.basic_block_def* %bb) #0 !dbg !7793 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %i = alloca %struct.gimple_stmt_iterator, align 8
  %s = alloca %struct.gimple_stmt_iterator, align 8
  %first = alloca i8, align 1
  %label = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7796, metadata !DIExpression()), !dbg !7797
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !7798, metadata !DIExpression()), !dbg !7799
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %s, metadata !7800, metadata !DIExpression()), !dbg !7801
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7802
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %s, %struct.basic_block_def* %0), !dbg !7803
  call void @llvm.dbg.declare(metadata i8* %first, metadata !7804, metadata !DIExpression()), !dbg !7805
  store i8 1, i8* %first, align 1, !dbg !7805
  call void @llvm.dbg.declare(metadata %union.tree_node** %label, metadata !7806, metadata !DIExpression()), !dbg !7807
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7808, metadata !DIExpression()), !dbg !7809
  %1 = bitcast %struct.gimple_stmt_iterator* %i to i8*, !dbg !7810
  %2 = bitcast %struct.gimple_stmt_iterator* %s to i8*, !dbg !7810
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !7810
  br label %for.cond, !dbg !7812

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !7813
  %tobool = icmp ne i8 %call, 0, !dbg !7815
  %lnot = xor i1 %tobool, true, !dbg !7815
  br i1 %lnot, label %for.body, label %for.end, !dbg !7816

for.body:                                         ; preds = %for.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !7817
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !7819
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7820
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %3), !dbg !7822
  %cmp = icmp ne i32 %call2, 4, !dbg !7823
  br i1 %cmp, label %if.then, label %if.end, !dbg !7824

if.then:                                          ; preds = %for.body
  br label %for.end, !dbg !7825

if.end:                                           ; preds = %for.body
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7826
  %call3 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %4), !dbg !7827
  store %union.tree_node* %call3, %union.tree_node** %label, align 8, !dbg !7828
  %5 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !7829
  %decl_common = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !7829
  %nonlocal_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7829
  %6 = bitcast i40* %nonlocal_flag to i64*, !dbg !7829
  %bf.load = load i64, i64* %6, align 8, !dbg !7829
  %bf.lshr = lshr i64 %bf.load, 8, !dbg !7829
  %bf.clear = and i64 %bf.lshr, 1, !dbg !7829
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7829
  %tobool4 = icmp ne i32 %bf.cast, 0, !dbg !7829
  br i1 %tobool4, label %if.end9, label %if.then5, !dbg !7831

if.then5:                                         ; preds = %if.end
  %7 = load i8, i8* %first, align 1, !dbg !7832
  %tobool6 = icmp ne i8 %7, 0, !dbg !7832
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !7835

if.then7:                                         ; preds = %if.then5
  call void @gsi_move_before(%struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator* %s), !dbg !7836
  br label %if.end8, !dbg !7836

if.end8:                                          ; preds = %if.then7, %if.then5
  %8 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !7837
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !7838
  br label %return, !dbg !7838

if.end9:                                          ; preds = %if.end
  br label %for.inc, !dbg !7839

for.inc:                                          ; preds = %if.end9
  store i8 0, i8* %first, align 1, !dbg !7840
  call void @gsi_next(%struct.gimple_stmt_iterator* %i), !dbg !7841
  br label %for.cond, !dbg !7842, !llvm.loop !7843

for.end:                                          ; preds = %if.then, %for.cond
  %call10 = call %union.tree_node* @create_artificial_label(i32 0), !dbg !7845
  store %union.tree_node* %call10, %union.tree_node** %label, align 8, !dbg !7846
  %9 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !7847
  %call11 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %9), !dbg !7848
  store %union.gimple_statement_d* %call11, %union.gimple_statement_d** %stmt, align 8, !dbg !7849
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7850
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %s, %union.gimple_statement_d* %10, i32 0), !dbg !7851
  %11 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !7852
  store %union.tree_node* %11, %union.tree_node** %retval, align 8, !dbg !7853
  br label %return, !dbg !7853

return:                                           ; preds = %for.end, %if.end8
  %12 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7854
  ret %union.tree_node* %12, !dbg !7854
}

declare dso_local void @gsi_move_before(%struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator*) #2

declare dso_local %union.tree_node* @create_artificial_label(i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @add_phi_args_after_copy_bb(%struct.basic_block_def* %bb_copy) #0 !dbg !7855 {
entry:
  %bb_copy.addr = alloca %struct.basic_block_def*, align 8
  %e_copy = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %bb_copy, %struct.basic_block_def** %bb_copy.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_copy.addr, metadata !7856, metadata !DIExpression()), !dbg !7857
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_copy, metadata !7858, metadata !DIExpression()), !dbg !7859
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !7860, metadata !DIExpression()), !dbg !7867
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_copy.addr, align 8, !dbg !7868
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !7868
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !7868
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !7868
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !7868
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !7868
  store i32 %3, i32* %2, align 8, !dbg !7868
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !7868
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !7868
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !7868
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !7868
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !7868
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !7868
  br label %for.cond, !dbg !7868

for.cond:                                         ; preds = %for.inc, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7870
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !7870
  %10 = load i32, i32* %9, align 8, !dbg !7870
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !7870
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !7870
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e_copy), !dbg !7870
  %tobool = icmp ne i8 %call1, 0, !dbg !7868
  br i1 %tobool, label %for.body, label %for.end, !dbg !7868

for.body:                                         ; preds = %for.cond
  %13 = load %struct.edge_def*, %struct.edge_def** %e_copy, align 8, !dbg !7872
  call void @add_phi_args_after_copy_edge(%struct.edge_def* %13), !dbg !7874
  br label %for.inc, !dbg !7875

for.inc:                                          ; preds = %for.body
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !7870
  br label %for.cond, !dbg !7870, !llvm.loop !7876

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7878
}

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !7879 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !7882, metadata !DIExpression()), !dbg !7883
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !7884, metadata !DIExpression()), !dbg !7885
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !7886
  store i32 0, i32* %index, align 8, !dbg !7887
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !7888
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !7889
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !7890
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !7891
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !7891
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !7891
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !7892 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !7895, metadata !DIExpression()), !dbg !7896
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !7897, metadata !DIExpression()), !dbg !7898
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7899
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !7899
  %5 = load i32, i32* %4, align 8, !dbg !7899
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !7899
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !7899
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !7899
  %tobool = icmp ne i8 %call, 0, !dbg !7899
  br i1 %tobool, label %if.else, label %if.then, !dbg !7901

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7902
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !7902
  %10 = load i32, i32* %9, align 8, !dbg !7902
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !7902
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !7902
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !7902
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !7904
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !7905
  store i8 1, i8* %retval, align 1, !dbg !7906
  br label %return, !dbg !7906

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !7907
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !7909
  store i8 0, i8* %retval, align 1, !dbg !7910
  br label %return, !dbg !7910

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !7911
  ret i8 %15, !dbg !7911
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_phi_args_after_copy_edge(%struct.edge_def* %e_copy) #0 !dbg !7912 {
entry:
  %e_copy.addr = alloca %struct.edge_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %bb_copy = alloca %struct.basic_block_def*, align 8
  %dest = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %phi_copy = alloca %union.gimple_statement_d*, align 8
  %def = alloca %union.tree_node*, align 8
  %psi = alloca %struct.gimple_stmt_iterator, align 8
  %psi_copy = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp34 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp36 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.edge_def* %e_copy, %struct.edge_def** %e_copy.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_copy.addr, metadata !7913, metadata !DIExpression()), !dbg !7914
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !7915, metadata !DIExpression()), !dbg !7916
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_copy, metadata !7917, metadata !DIExpression()), !dbg !7918
  %0 = load %struct.edge_def*, %struct.edge_def** %e_copy.addr, align 8, !dbg !7919
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !7920
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !7920
  store %struct.basic_block_def* %1, %struct.basic_block_def** %bb_copy, align 8, !dbg !7918
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest, metadata !7921, metadata !DIExpression()), !dbg !7922
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !7923, metadata !DIExpression()), !dbg !7924
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !7925, metadata !DIExpression()), !dbg !7926
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !7927, metadata !DIExpression()), !dbg !7928
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi_copy, metadata !7929, metadata !DIExpression()), !dbg !7930
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !7931, metadata !DIExpression()), !dbg !7932
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi, metadata !7933, metadata !DIExpression()), !dbg !7934
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi_copy, metadata !7935, metadata !DIExpression()), !dbg !7936
  %2 = load %struct.edge_def*, %struct.edge_def** %e_copy.addr, align 8, !dbg !7937
  %dest1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 1, !dbg !7939
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %dest1, align 8, !dbg !7939
  %call = call %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %3), !dbg !7940
  %call2 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %call), !dbg !7941
  %tobool = icmp ne i8 %call2, 0, !dbg !7941
  br i1 %tobool, label %if.then, label %if.end, !dbg !7942

if.then:                                          ; preds = %entry
  br label %for.end48, !dbg !7943

if.end:                                           ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_copy, align 8, !dbg !7944
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 13, !dbg !7945
  %5 = load i32, i32* %flags, align 8, !dbg !7945
  %and = and i32 %5, 128, !dbg !7946
  %tobool3 = icmp ne i32 %and, 0, !dbg !7946
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !7944

cond.true:                                        ; preds = %if.end
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_copy, align 8, !dbg !7947
  %call4 = call %struct.basic_block_def* @get_bb_original(%struct.basic_block_def* %6), !dbg !7948
  br label %cond.end, !dbg !7944

cond.false:                                       ; preds = %if.end
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_copy, align 8, !dbg !7949
  br label %cond.end, !dbg !7944

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %call4, %cond.true ], [ %7, %cond.false ], !dbg !7944
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb, align 8, !dbg !7950
  %8 = load %struct.edge_def*, %struct.edge_def** %e_copy.addr, align 8, !dbg !7951
  %dest5 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %8, i32 0, i32 1, !dbg !7953
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %dest5, align 8, !dbg !7953
  %flags6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 13, !dbg !7954
  %10 = load i32, i32* %flags6, align 8, !dbg !7954
  %and7 = and i32 %10, 128, !dbg !7955
  %tobool8 = icmp ne i32 %and7, 0, !dbg !7955
  br i1 %tobool8, label %if.then9, label %if.else, !dbg !7956

if.then9:                                         ; preds = %cond.end
  %11 = load %struct.edge_def*, %struct.edge_def** %e_copy.addr, align 8, !dbg !7957
  %dest10 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %11, i32 0, i32 1, !dbg !7958
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %dest10, align 8, !dbg !7958
  %call11 = call %struct.basic_block_def* @get_bb_original(%struct.basic_block_def* %12), !dbg !7959
  store %struct.basic_block_def* %call11, %struct.basic_block_def** %dest, align 8, !dbg !7960
  br label %if.end13, !dbg !7961

if.else:                                          ; preds = %cond.end
  %13 = load %struct.edge_def*, %struct.edge_def** %e_copy.addr, align 8, !dbg !7962
  %dest12 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 1, !dbg !7963
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %dest12, align 8, !dbg !7963
  store %struct.basic_block_def* %14, %struct.basic_block_def** %dest, align 8, !dbg !7964
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then9
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7965
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !7966
  %call14 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %15, %struct.basic_block_def* %16), !dbg !7967
  store %struct.edge_def* %call14, %struct.edge_def** %e, align 8, !dbg !7968
  %17 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7969
  %tobool15 = icmp ne %struct.edge_def* %17, null, !dbg !7969
  br i1 %tobool15, label %if.end33, label %if.then16, !dbg !7971

if.then16:                                        ; preds = %if.end13
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7972
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 1, !dbg !7972
  %call17 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !7972
  %19 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !7972
  %20 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %19, i32 0, i32 0, !dbg !7972
  %21 = extractvalue { i32, %struct.VEC_edge_gc** } %call17, 0, !dbg !7972
  store i32 %21, i32* %20, align 8, !dbg !7972
  %22 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %19, i32 0, i32 1, !dbg !7972
  %23 = extractvalue { i32, %struct.VEC_edge_gc** } %call17, 1, !dbg !7972
  store %struct.VEC_edge_gc** %23, %struct.VEC_edge_gc*** %22, align 8, !dbg !7972
  %24 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !7972
  %25 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !7972
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 16, i1 false), !dbg !7972
  br label %for.cond, !dbg !7972

for.cond:                                         ; preds = %for.inc, %if.then16
  %26 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7975
  %27 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %26, i32 0, i32 0, !dbg !7975
  %28 = load i32, i32* %27, align 8, !dbg !7975
  %29 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %26, i32 0, i32 1, !dbg !7975
  %30 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %29, align 8, !dbg !7975
  %call18 = call zeroext i8 @ei_cond(i32 %28, %struct.VEC_edge_gc** %30, %struct.edge_def** %e), !dbg !7975
  %tobool19 = icmp ne i8 %call18, 0, !dbg !7972
  br i1 %tobool19, label %for.body, label %for.end, !dbg !7972

for.body:                                         ; preds = %for.cond
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7977
  %dest20 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %31, i32 0, i32 1, !dbg !7980
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %dest20, align 8, !dbg !7980
  %flags21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 13, !dbg !7981
  %33 = load i32, i32* %flags21, align 8, !dbg !7981
  %and22 = and i32 %33, 128, !dbg !7982
  %tobool23 = icmp ne i32 %and22, 0, !dbg !7982
  br i1 %tobool23, label %land.lhs.true, label %if.end27, !dbg !7983

land.lhs.true:                                    ; preds = %for.body
  %34 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7984
  %dest24 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 1, !dbg !7985
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %dest24, align 8, !dbg !7985
  %call25 = call %struct.basic_block_def* @get_bb_original(%struct.basic_block_def* %35), !dbg !7986
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !7987
  %cmp = icmp eq %struct.basic_block_def* %call25, %36, !dbg !7988
  br i1 %cmp, label %if.then26, label %if.end27, !dbg !7989

if.then26:                                        ; preds = %land.lhs.true
  br label %for.end, !dbg !7990

if.end27:                                         ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !7991

for.inc:                                          ; preds = %if.end27
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !7975
  br label %for.cond, !dbg !7975, !llvm.loop !7992

for.end:                                          ; preds = %if.then26, %for.cond
  %37 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7994
  %cmp28 = icmp ne %struct.edge_def* %37, null, !dbg !7994
  br i1 %cmp28, label %cond.false30, label %cond.true29, !dbg !7994

cond.true29:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4962, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7994
  br label %cond.end31, !dbg !7994

cond.false30:                                     ; preds = %for.end
  br label %cond.end31, !dbg !7994

cond.end31:                                       ; preds = %cond.false30, %cond.true29
  %cond32 = phi i32 [ 0, %cond.true29 ], [ 0, %cond.false30 ], !dbg !7994
  br label %if.end33, !dbg !7995

if.end33:                                         ; preds = %cond.end31, %if.end13
  %38 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7996
  %dest35 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %38, i32 0, i32 1, !dbg !7998
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %dest35, align 8, !dbg !7998
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp34, %struct.basic_block_def* %39), !dbg !7999
  %40 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !7999
  %41 = bitcast %struct.gimple_stmt_iterator* %tmp34 to i8*, !dbg !7999
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false), !dbg !7999
  %42 = load %struct.edge_def*, %struct.edge_def** %e_copy.addr, align 8, !dbg !8000
  %dest37 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %42, i32 0, i32 1, !dbg !8001
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %dest37, align 8, !dbg !8001
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp36, %struct.basic_block_def* %43), !dbg !8002
  %44 = bitcast %struct.gimple_stmt_iterator* %psi_copy to i8*, !dbg !8002
  %45 = bitcast %struct.gimple_stmt_iterator* %tmp36 to i8*, !dbg !8002
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* align 8 %45, i64 24, i1 false), !dbg !8002
  br label %for.cond38, !dbg !8003

for.cond38:                                       ; preds = %for.inc47, %if.end33
  %call39 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !8004
  %tobool40 = icmp ne i8 %call39, 0, !dbg !8006
  %lnot = xor i1 %tobool40, true, !dbg !8006
  br i1 %lnot, label %for.body41, label %for.end48, !dbg !8007

for.body41:                                       ; preds = %for.cond38
  %call42 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !8008
  store %union.gimple_statement_d* %call42, %union.gimple_statement_d** %phi, align 8, !dbg !8010
  %call43 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi_copy), !dbg !8011
  store %union.gimple_statement_d* %call43, %union.gimple_statement_d** %phi_copy, align 8, !dbg !8012
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !8013
  %47 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8013
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %47, i32 0, i32 6, !dbg !8013
  %48 = load i32, i32* %dest_idx, align 4, !dbg !8013
  %call44 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %46, i32 %48), !dbg !8013
  %call45 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call44), !dbg !8013
  store %union.tree_node* %call45, %union.tree_node** %def, align 8, !dbg !8014
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_copy, align 8, !dbg !8015
  %50 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8016
  %51 = load %struct.edge_def*, %struct.edge_def** %e_copy.addr, align 8, !dbg !8017
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !8018
  %53 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8019
  %call46 = call i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %52, %struct.edge_def* %53), !dbg !8020
  call void @add_phi_arg(%union.gimple_statement_d* %49, %union.tree_node* %50, %struct.edge_def* %51, i32 %call46), !dbg !8021
  br label %for.inc47, !dbg !8022

for.inc47:                                        ; preds = %for.body41
  call void @gsi_next(%struct.gimple_stmt_iterator* %psi), !dbg !8023
  call void @gsi_next(%struct.gimple_stmt_iterator* %psi_copy), !dbg !8024
  br label %for.cond38, !dbg !8025, !llvm.loop !8026

for.end48:                                        ; preds = %if.then, %for.cond38
  ret void, !dbg !8028
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !8029 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !8033, metadata !DIExpression()), !dbg !8034
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !8035
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !8035
  %1 = load i32, i32* %index, align 8, !dbg !8035
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !8035
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !8035
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !8035
  %5 = load i32, i32* %4, align 8, !dbg !8035
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !8035
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !8035
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !8035
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !8035
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8035

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !8035
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !8035
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !8035
  %11 = load i32, i32* %10, align 8, !dbg !8035
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !8035
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !8035
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !8035
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !8035
  br label %cond.end, !dbg !8035

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8035

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8035
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !8035
  %cmp = icmp ult i32 %1, %call2, !dbg !8035
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !8035

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.147, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8035
  br label %cond.end5, !dbg !8035

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !8035

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !8035
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !8036
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !8037
  %15 = load i32, i32* %index7, align 8, !dbg !8038
  %inc = add i32 %15, 1, !dbg !8038
  store i32 %inc, i32* %index7, align 8, !dbg !8038
  ret void, !dbg !8039
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @add_phi_args_after_copy(%struct.basic_block_def** %region_copy, i32 %n_region, %struct.edge_def* %e_copy) #0 !dbg !8040 {
entry:
  %region_copy.addr = alloca %struct.basic_block_def**, align 8
  %n_region.addr = alloca i32, align 4
  %e_copy.addr = alloca %struct.edge_def*, align 8
  %i = alloca i32, align 4
  store %struct.basic_block_def** %region_copy, %struct.basic_block_def*** %region_copy.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %region_copy.addr, metadata !8043, metadata !DIExpression()), !dbg !8044
  store i32 %n_region, i32* %n_region.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_region.addr, metadata !8045, metadata !DIExpression()), !dbg !8046
  store %struct.edge_def* %e_copy, %struct.edge_def** %e_copy.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_copy.addr, metadata !8047, metadata !DIExpression()), !dbg !8048
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8049, metadata !DIExpression()), !dbg !8050
  store i32 0, i32* %i, align 4, !dbg !8051
  br label %for.cond, !dbg !8053

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !8054
  %1 = load i32, i32* %n_region.addr, align 4, !dbg !8056
  %cmp = icmp ult i32 %0, %1, !dbg !8057
  br i1 %cmp, label %for.body, label %for.end, !dbg !8058

for.body:                                         ; preds = %for.cond
  %2 = load %struct.basic_block_def**, %struct.basic_block_def*** %region_copy.addr, align 8, !dbg !8059
  %3 = load i32, i32* %i, align 4, !dbg !8060
  %idxprom = zext i32 %3 to i64, !dbg !8059
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %2, i64 %idxprom, !dbg !8059
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !8059
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 13, !dbg !8061
  %5 = load i32, i32* %flags, align 8, !dbg !8062
  %or = or i32 %5, 128, !dbg !8062
  store i32 %or, i32* %flags, align 8, !dbg !8062
  br label %for.inc, !dbg !8059

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !8063
  %inc = add i32 %6, 1, !dbg !8063
  store i32 %inc, i32* %i, align 4, !dbg !8063
  br label %for.cond, !dbg !8064, !llvm.loop !8065

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !8067
  br label %for.cond1, !dbg !8069

for.cond1:                                        ; preds = %for.inc6, %for.end
  %7 = load i32, i32* %i, align 4, !dbg !8070
  %8 = load i32, i32* %n_region.addr, align 4, !dbg !8072
  %cmp2 = icmp ult i32 %7, %8, !dbg !8073
  br i1 %cmp2, label %for.body3, label %for.end8, !dbg !8074

for.body3:                                        ; preds = %for.cond1
  %9 = load %struct.basic_block_def**, %struct.basic_block_def*** %region_copy.addr, align 8, !dbg !8075
  %10 = load i32, i32* %i, align 4, !dbg !8076
  %idxprom4 = zext i32 %10 to i64, !dbg !8075
  %arrayidx5 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %9, i64 %idxprom4, !dbg !8075
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx5, align 8, !dbg !8075
  call void @add_phi_args_after_copy_bb(%struct.basic_block_def* %11), !dbg !8077
  br label %for.inc6, !dbg !8077

for.inc6:                                         ; preds = %for.body3
  %12 = load i32, i32* %i, align 4, !dbg !8078
  %inc7 = add i32 %12, 1, !dbg !8078
  store i32 %inc7, i32* %i, align 4, !dbg !8078
  br label %for.cond1, !dbg !8079, !llvm.loop !8080

for.end8:                                         ; preds = %for.cond1
  %13 = load %struct.edge_def*, %struct.edge_def** %e_copy.addr, align 8, !dbg !8082
  %tobool = icmp ne %struct.edge_def* %13, null, !dbg !8082
  br i1 %tobool, label %if.then, label %if.end, !dbg !8084

if.then:                                          ; preds = %for.end8
  %14 = load %struct.edge_def*, %struct.edge_def** %e_copy.addr, align 8, !dbg !8085
  call void @add_phi_args_after_copy_edge(%struct.edge_def* %14), !dbg !8086
  br label %if.end, !dbg !8086

if.end:                                           ; preds = %if.then, %for.end8
  store i32 0, i32* %i, align 4, !dbg !8087
  br label %for.cond9, !dbg !8089

for.cond9:                                        ; preds = %for.inc15, %if.end
  %15 = load i32, i32* %i, align 4, !dbg !8090
  %16 = load i32, i32* %n_region.addr, align 4, !dbg !8092
  %cmp10 = icmp ult i32 %15, %16, !dbg !8093
  br i1 %cmp10, label %for.body11, label %for.end17, !dbg !8094

for.body11:                                       ; preds = %for.cond9
  %17 = load %struct.basic_block_def**, %struct.basic_block_def*** %region_copy.addr, align 8, !dbg !8095
  %18 = load i32, i32* %i, align 4, !dbg !8096
  %idxprom12 = zext i32 %18 to i64, !dbg !8095
  %arrayidx13 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %17, i64 %idxprom12, !dbg !8095
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx13, align 8, !dbg !8095
  %flags14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 13, !dbg !8097
  %20 = load i32, i32* %flags14, align 8, !dbg !8098
  %and = and i32 %20, -129, !dbg !8098
  store i32 %and, i32* %flags14, align 8, !dbg !8098
  br label %for.inc15, !dbg !8095

for.inc15:                                        ; preds = %for.body11
  %21 = load i32, i32* %i, align 4, !dbg !8099
  %inc16 = add i32 %21, 1, !dbg !8099
  store i32 %inc16, i32* %i, align 4, !dbg !8099
  br label %for.cond9, !dbg !8100, !llvm.loop !8101

for.end17:                                        ; preds = %for.cond9
  ret void, !dbg !8103
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gimple_duplicate_sese_region(%struct.edge_def* %entry1, %struct.edge_def* %exit, %struct.basic_block_def** %region, i32 %n_region, %struct.basic_block_def** %region_copy) #0 !dbg !8104 {
entry:
  %retval = alloca i8, align 1
  %entry.addr = alloca %struct.edge_def*, align 8
  %exit.addr = alloca %struct.edge_def*, align 8
  %region.addr = alloca %struct.basic_block_def**, align 8
  %n_region.addr = alloca i32, align 4
  %region_copy.addr = alloca %struct.basic_block_def**, align 8
  %i = alloca i32, align 4
  %free_region_copy = alloca i8, align 1
  %copying_header = alloca i8, align 1
  %loop = alloca %struct.loop*, align 8
  %exit_copy = alloca %struct.edge_def*, align 8
  %doms = alloca %struct.VEC_basic_block_heap*, align 8
  %redirected = alloca %struct.edge_def*, align 8
  %total_freq = alloca i32, align 4
  %entry_freq = alloca i32, align 4
  %total_count = alloca i64, align 8
  %entry_count = alloca i64, align 8
  store %struct.edge_def* %entry1, %struct.edge_def** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry.addr, metadata !8107, metadata !DIExpression()), !dbg !8108
  store %struct.edge_def* %exit, %struct.edge_def** %exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit.addr, metadata !8109, metadata !DIExpression()), !dbg !8110
  store %struct.basic_block_def** %region, %struct.basic_block_def*** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %region.addr, metadata !8111, metadata !DIExpression()), !dbg !8112
  store i32 %n_region, i32* %n_region.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_region.addr, metadata !8113, metadata !DIExpression()), !dbg !8114
  store %struct.basic_block_def** %region_copy, %struct.basic_block_def*** %region_copy.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %region_copy.addr, metadata !8115, metadata !DIExpression()), !dbg !8116
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8117, metadata !DIExpression()), !dbg !8118
  call void @llvm.dbg.declare(metadata i8* %free_region_copy, metadata !8119, metadata !DIExpression()), !dbg !8120
  store i8 0, i8* %free_region_copy, align 1, !dbg !8120
  call void @llvm.dbg.declare(metadata i8* %copying_header, metadata !8121, metadata !DIExpression()), !dbg !8122
  store i8 0, i8* %copying_header, align 1, !dbg !8122
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !8123, metadata !DIExpression()), !dbg !8124
  %0 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8125
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 1, !dbg !8126
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8126
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 3, !dbg !8127
  %2 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !8127
  store %struct.loop* %2, %struct.loop** %loop, align 8, !dbg !8124
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit_copy, metadata !8128, metadata !DIExpression()), !dbg !8129
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %doms, metadata !8130, metadata !DIExpression()), !dbg !8131
  call void @llvm.dbg.declare(metadata %struct.edge_def** %redirected, metadata !8132, metadata !DIExpression()), !dbg !8133
  call void @llvm.dbg.declare(metadata i32* %total_freq, metadata !8134, metadata !DIExpression()), !dbg !8135
  store i32 0, i32* %total_freq, align 4, !dbg !8135
  call void @llvm.dbg.declare(metadata i32* %entry_freq, metadata !8136, metadata !DIExpression()), !dbg !8137
  store i32 0, i32* %entry_freq, align 4, !dbg !8137
  call void @llvm.dbg.declare(metadata i64* %total_count, metadata !8138, metadata !DIExpression()), !dbg !8139
  store i64 0, i64* %total_count, align 8, !dbg !8139
  call void @llvm.dbg.declare(metadata i64* %entry_count, metadata !8140, metadata !DIExpression()), !dbg !8141
  store i64 0, i64* %entry_count, align 8, !dbg !8141
  %3 = load %struct.basic_block_def**, %struct.basic_block_def*** %region.addr, align 8, !dbg !8142
  %4 = load i32, i32* %n_region.addr, align 4, !dbg !8144
  %call = call zeroext i8 @can_copy_bbs_p(%struct.basic_block_def** %3, i32 %4), !dbg !8145
  %tobool = icmp ne i8 %call, 0, !dbg !8145
  br i1 %tobool, label %if.end, label %if.then, !dbg !8146

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !8147
  br label %return, !dbg !8147

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !8148
  br label %for.cond, !dbg !8150

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4, !dbg !8151
  %6 = load i32, i32* %n_region.addr, align 4, !dbg !8153
  %cmp = icmp ult i32 %5, %6, !dbg !8154
  br i1 %cmp, label %for.body, label %for.end, !dbg !8155

for.body:                                         ; preds = %for.cond
  %7 = load %struct.basic_block_def**, %struct.basic_block_def*** %region.addr, align 8, !dbg !8156
  %8 = load i32, i32* %i, align 4, !dbg !8159
  %idxprom = zext i32 %8 to i64, !dbg !8156
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %7, i64 %idxprom, !dbg !8156
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !8156
  %loop_father2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 3, !dbg !8160
  %10 = load %struct.loop*, %struct.loop** %loop_father2, align 8, !dbg !8160
  %11 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8161
  %cmp3 = icmp ne %struct.loop* %10, %11, !dbg !8162
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !8163

if.then4:                                         ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !8164
  br label %return, !dbg !8164

if.end5:                                          ; preds = %for.body
  %12 = load %struct.basic_block_def**, %struct.basic_block_def*** %region.addr, align 8, !dbg !8165
  %13 = load i32, i32* %i, align 4, !dbg !8167
  %idxprom6 = zext i32 %13 to i64, !dbg !8165
  %arrayidx7 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %12, i64 %idxprom6, !dbg !8165
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx7, align 8, !dbg !8165
  %15 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8168
  %dest8 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %15, i32 0, i32 1, !dbg !8169
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %dest8, align 8, !dbg !8169
  %cmp9 = icmp ne %struct.basic_block_def* %14, %16, !dbg !8170
  br i1 %cmp9, label %land.lhs.true, label %if.end14, !dbg !8171

land.lhs.true:                                    ; preds = %if.end5
  %17 = load %struct.basic_block_def**, %struct.basic_block_def*** %region.addr, align 8, !dbg !8172
  %18 = load i32, i32* %i, align 4, !dbg !8173
  %idxprom10 = zext i32 %18 to i64, !dbg !8172
  %arrayidx11 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %17, i64 %idxprom10, !dbg !8172
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx11, align 8, !dbg !8172
  %20 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8174
  %header = getelementptr inbounds %struct.loop, %struct.loop* %20, i32 0, i32 2, !dbg !8175
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !8175
  %cmp12 = icmp eq %struct.basic_block_def* %19, %21, !dbg !8176
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !8177

if.then13:                                        ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !8178
  br label %return, !dbg !8178

if.end14:                                         ; preds = %land.lhs.true, %if.end5
  br label %for.inc, !dbg !8179

for.inc:                                          ; preds = %if.end14
  %22 = load i32, i32* %i, align 4, !dbg !8180
  %inc = add i32 %22, 1, !dbg !8180
  store i32 %inc, i32* %i, align 4, !dbg !8180
  br label %for.cond, !dbg !8181, !llvm.loop !8182

for.end:                                          ; preds = %for.cond
  %23 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8184
  %24 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8185
  call void @set_loop_copy(%struct.loop* %23, %struct.loop* %24), !dbg !8186
  %25 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8187
  %header15 = getelementptr inbounds %struct.loop, %struct.loop* %25, i32 0, i32 2, !dbg !8189
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %header15, align 8, !dbg !8189
  %27 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8190
  %dest16 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %27, i32 0, i32 1, !dbg !8191
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %dest16, align 8, !dbg !8191
  %cmp17 = icmp eq %struct.basic_block_def* %26, %28, !dbg !8192
  br i1 %cmp17, label %if.then18, label %if.end42, !dbg !8193

if.then18:                                        ; preds = %for.end
  store i8 1, i8* %copying_header, align 1, !dbg !8194
  %29 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8196
  %30 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8197
  %call19 = call %struct.loop* @loop_outer(%struct.loop* %30), !dbg !8198
  call void @set_loop_copy(%struct.loop* %29, %struct.loop* %call19), !dbg !8199
  %31 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8200
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %31, i32 0, i32 3, !dbg !8202
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !8202
  %33 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8203
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %33, i32 0, i32 0, !dbg !8204
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !8204
  %call20 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %32, %struct.basic_block_def* %34), !dbg !8205
  %tobool21 = icmp ne i8 %call20, 0, !dbg !8205
  br i1 %tobool21, label %if.end23, label %if.then22, !dbg !8206

if.then22:                                        ; preds = %if.then18
  store i8 0, i8* %retval, align 1, !dbg !8207
  br label %return, !dbg !8207

if.end23:                                         ; preds = %if.then18
  store i32 0, i32* %i, align 4, !dbg !8208
  br label %for.cond24, !dbg !8210

for.cond24:                                       ; preds = %for.inc39, %if.end23
  %35 = load i32, i32* %i, align 4, !dbg !8211
  %36 = load i32, i32* %n_region.addr, align 4, !dbg !8213
  %cmp25 = icmp ult i32 %35, %36, !dbg !8214
  br i1 %cmp25, label %for.body26, label %for.end41, !dbg !8215

for.body26:                                       ; preds = %for.cond24
  %37 = load %struct.basic_block_def**, %struct.basic_block_def*** %region.addr, align 8, !dbg !8216
  %38 = load i32, i32* %i, align 4, !dbg !8218
  %idxprom27 = zext i32 %38 to i64, !dbg !8216
  %arrayidx28 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %37, i64 %idxprom27, !dbg !8216
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx28, align 8, !dbg !8216
  %40 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8219
  %src29 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %40, i32 0, i32 0, !dbg !8220
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %src29, align 8, !dbg !8220
  %cmp30 = icmp ne %struct.basic_block_def* %39, %41, !dbg !8221
  br i1 %cmp30, label %land.lhs.true31, label %if.end38, !dbg !8222

land.lhs.true31:                                  ; preds = %for.body26
  %42 = load %struct.basic_block_def**, %struct.basic_block_def*** %region.addr, align 8, !dbg !8223
  %43 = load i32, i32* %i, align 4, !dbg !8224
  %idxprom32 = zext i32 %43 to i64, !dbg !8223
  %arrayidx33 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %42, i64 %idxprom32, !dbg !8223
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx33, align 8, !dbg !8223
  %45 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8225
  %src34 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %45, i32 0, i32 0, !dbg !8226
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %src34, align 8, !dbg !8226
  %call35 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %44, %struct.basic_block_def* %46), !dbg !8227
  %conv = zext i8 %call35 to i32, !dbg !8227
  %tobool36 = icmp ne i32 %conv, 0, !dbg !8227
  br i1 %tobool36, label %if.then37, label %if.end38, !dbg !8228

if.then37:                                        ; preds = %land.lhs.true31
  store i8 0, i8* %retval, align 1, !dbg !8229
  br label %return, !dbg !8229

if.end38:                                         ; preds = %land.lhs.true31, %for.body26
  br label %for.inc39, !dbg !8230

for.inc39:                                        ; preds = %if.end38
  %47 = load i32, i32* %i, align 4, !dbg !8231
  %inc40 = add i32 %47, 1, !dbg !8231
  store i32 %inc40, i32* %i, align 4, !dbg !8231
  br label %for.cond24, !dbg !8232, !llvm.loop !8233

for.end41:                                        ; preds = %for.cond24
  br label %if.end42, !dbg !8235

if.end42:                                         ; preds = %for.end41, %for.end
  %48 = load %struct.basic_block_def**, %struct.basic_block_def*** %region_copy.addr, align 8, !dbg !8236
  %tobool43 = icmp ne %struct.basic_block_def** %48, null, !dbg !8236
  br i1 %tobool43, label %if.end47, label %if.then44, !dbg !8238

if.then44:                                        ; preds = %if.end42
  %49 = load i32, i32* %n_region.addr, align 4, !dbg !8239
  %conv45 = zext i32 %49 to i64, !dbg !8239
  %mul = mul i64 8, %conv45, !dbg !8239
  %call46 = call i8* @xmalloc(i64 %mul), !dbg !8239
  %50 = bitcast i8* %call46 to %struct.basic_block_def**, !dbg !8239
  store %struct.basic_block_def** %50, %struct.basic_block_def*** %region_copy.addr, align 8, !dbg !8241
  store i8 1, i8* %free_region_copy, align 1, !dbg !8242
  br label %if.end47, !dbg !8243

if.end47:                                         ; preds = %if.then44, %if.end42
  %51 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8244
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %51, i64 0, !dbg !8244
  %call48 = call zeroext i8 @need_ssa_update_p(%struct.function* %add.ptr), !dbg !8244
  %tobool49 = icmp ne i8 %call48, 0, !dbg !8244
  br i1 %tobool49, label %cond.true, label %cond.false, !dbg !8244

cond.true:                                        ; preds = %if.end47
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5085, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8244
  br label %cond.end, !dbg !8244

cond.false:                                       ; preds = %if.end47
  br label %cond.end, !dbg !8244

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8244
  store %struct.VEC_basic_block_heap* null, %struct.VEC_basic_block_heap** %doms, align 8, !dbg !8245
  call void @initialize_original_copy_tables(), !dbg !8246
  %52 = load %struct.basic_block_def**, %struct.basic_block_def*** %region.addr, align 8, !dbg !8247
  %53 = load i32, i32* %n_region.addr, align 4, !dbg !8248
  %call50 = call %struct.VEC_basic_block_heap* @get_dominated_by_region(i32 1, %struct.basic_block_def** %52, i32 %53), !dbg !8249
  store %struct.VEC_basic_block_heap* %call50, %struct.VEC_basic_block_heap** %doms, align 8, !dbg !8250
  %54 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8251
  %dest51 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %54, i32 0, i32 1, !dbg !8253
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %dest51, align 8, !dbg !8253
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 8, !dbg !8254
  %56 = load i64, i64* %count, align 8, !dbg !8254
  %tobool52 = icmp ne i64 %56, 0, !dbg !8251
  br i1 %tobool52, label %if.then53, label %if.else, !dbg !8255

if.then53:                                        ; preds = %cond.end
  %57 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8256
  %dest54 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %57, i32 0, i32 1, !dbg !8258
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %dest54, align 8, !dbg !8258
  %count55 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 8, !dbg !8259
  %59 = load i64, i64* %count55, align 8, !dbg !8259
  store i64 %59, i64* %total_count, align 8, !dbg !8260
  %60 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8261
  %count56 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %60, i32 0, i32 9, !dbg !8262
  %61 = load i64, i64* %count56, align 8, !dbg !8262
  store i64 %61, i64* %entry_count, align 8, !dbg !8263
  %62 = load i64, i64* %entry_count, align 8, !dbg !8264
  %63 = load i64, i64* %total_count, align 8, !dbg !8266
  %cmp57 = icmp sgt i64 %62, %63, !dbg !8267
  br i1 %cmp57, label %if.then59, label %if.end60, !dbg !8268

if.then59:                                        ; preds = %if.then53
  %64 = load i64, i64* %total_count, align 8, !dbg !8269
  store i64 %64, i64* %entry_count, align 8, !dbg !8270
  br label %if.end60, !dbg !8271

if.end60:                                         ; preds = %if.then59, %if.then53
  br label %if.end74, !dbg !8272

if.else:                                          ; preds = %cond.end
  %65 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8273
  %dest61 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %65, i32 0, i32 1, !dbg !8275
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %dest61, align 8, !dbg !8275
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %66, i32 0, i32 11, !dbg !8276
  %67 = load i32, i32* %frequency, align 8, !dbg !8276
  store i32 %67, i32* %total_freq, align 4, !dbg !8277
  %68 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8278
  %src62 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %68, i32 0, i32 0, !dbg !8278
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %src62, align 8, !dbg !8278
  %frequency63 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %69, i32 0, i32 11, !dbg !8278
  %70 = load i32, i32* %frequency63, align 8, !dbg !8278
  %71 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8278
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %71, i32 0, i32 8, !dbg !8278
  %72 = load i32, i32* %probability, align 4, !dbg !8278
  %mul64 = mul nsw i32 %70, %72, !dbg !8278
  %add = add nsw i32 %mul64, 5000, !dbg !8278
  %div = sdiv i32 %add, 10000, !dbg !8278
  store i32 %div, i32* %entry_freq, align 4, !dbg !8279
  %73 = load i32, i32* %total_freq, align 4, !dbg !8280
  %cmp65 = icmp eq i32 %73, 0, !dbg !8282
  br i1 %cmp65, label %if.then67, label %if.else68, !dbg !8283

if.then67:                                        ; preds = %if.else
  store i32 1, i32* %total_freq, align 4, !dbg !8284
  br label %if.end73, !dbg !8285

if.else68:                                        ; preds = %if.else
  %74 = load i32, i32* %entry_freq, align 4, !dbg !8286
  %75 = load i32, i32* %total_freq, align 4, !dbg !8288
  %cmp69 = icmp sgt i32 %74, %75, !dbg !8289
  br i1 %cmp69, label %if.then71, label %if.end72, !dbg !8290

if.then71:                                        ; preds = %if.else68
  %76 = load i32, i32* %total_freq, align 4, !dbg !8291
  store i32 %76, i32* %entry_freq, align 4, !dbg !8292
  br label %if.end72, !dbg !8293

if.end72:                                         ; preds = %if.then71, %if.else68
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.then67
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %if.end60
  %77 = load %struct.basic_block_def**, %struct.basic_block_def*** %region.addr, align 8, !dbg !8294
  %78 = load i32, i32* %n_region.addr, align 4, !dbg !8295
  %79 = load %struct.basic_block_def**, %struct.basic_block_def*** %region_copy.addr, align 8, !dbg !8296
  %80 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8297
  %81 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8298
  %call75 = call %struct.basic_block_def* @split_edge_bb_loc(%struct.edge_def* %81), !dbg !8299
  call void @copy_bbs(%struct.basic_block_def** %77, i32 %78, %struct.basic_block_def** %79, %struct.edge_def** %exit.addr, i32 1, %struct.edge_def** %exit_copy, %struct.loop* %80, %struct.basic_block_def* %call75), !dbg !8300
  %82 = load i64, i64* %total_count, align 8, !dbg !8301
  %tobool76 = icmp ne i64 %82, 0, !dbg !8301
  br i1 %tobool76, label %if.then77, label %if.else78, !dbg !8303

if.then77:                                        ; preds = %if.end74
  %83 = load %struct.basic_block_def**, %struct.basic_block_def*** %region.addr, align 8, !dbg !8304
  %84 = load i32, i32* %n_region.addr, align 4, !dbg !8306
  %85 = load i64, i64* %total_count, align 8, !dbg !8307
  %86 = load i64, i64* %entry_count, align 8, !dbg !8308
  %sub = sub nsw i64 %85, %86, !dbg !8309
  %87 = load i64, i64* %total_count, align 8, !dbg !8310
  call void @scale_bbs_frequencies_gcov_type(%struct.basic_block_def** %83, i32 %84, i64 %sub, i64 %87), !dbg !8311
  %88 = load %struct.basic_block_def**, %struct.basic_block_def*** %region_copy.addr, align 8, !dbg !8312
  %89 = load i32, i32* %n_region.addr, align 4, !dbg !8313
  %90 = load i64, i64* %entry_count, align 8, !dbg !8314
  %91 = load i64, i64* %total_count, align 8, !dbg !8315
  call void @scale_bbs_frequencies_gcov_type(%struct.basic_block_def** %88, i32 %89, i64 %90, i64 %91), !dbg !8316
  br label %if.end80, !dbg !8317

if.else78:                                        ; preds = %if.end74
  %92 = load %struct.basic_block_def**, %struct.basic_block_def*** %region.addr, align 8, !dbg !8318
  %93 = load i32, i32* %n_region.addr, align 4, !dbg !8320
  %94 = load i32, i32* %total_freq, align 4, !dbg !8321
  %95 = load i32, i32* %entry_freq, align 4, !dbg !8322
  %sub79 = sub nsw i32 %94, %95, !dbg !8323
  %96 = load i32, i32* %total_freq, align 4, !dbg !8324
  call void @scale_bbs_frequencies_int(%struct.basic_block_def** %92, i32 %93, i32 %sub79, i32 %96), !dbg !8325
  %97 = load %struct.basic_block_def**, %struct.basic_block_def*** %region_copy.addr, align 8, !dbg !8326
  %98 = load i32, i32* %n_region.addr, align 4, !dbg !8327
  %99 = load i32, i32* %entry_freq, align 4, !dbg !8328
  %100 = load i32, i32* %total_freq, align 4, !dbg !8329
  call void @scale_bbs_frequencies_int(%struct.basic_block_def** %97, i32 %98, i32 %99, i32 %100), !dbg !8330
  br label %if.end80

if.end80:                                         ; preds = %if.else78, %if.then77
  %101 = load i8, i8* %copying_header, align 1, !dbg !8331
  %tobool81 = icmp ne i8 %101, 0, !dbg !8331
  br i1 %tobool81, label %if.then82, label %if.end87, !dbg !8333

if.then82:                                        ; preds = %if.end80
  %102 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8334
  %dest83 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %102, i32 0, i32 1, !dbg !8336
  %103 = load %struct.basic_block_def*, %struct.basic_block_def** %dest83, align 8, !dbg !8336
  %104 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8337
  %header84 = getelementptr inbounds %struct.loop, %struct.loop* %104, i32 0, i32 2, !dbg !8338
  store %struct.basic_block_def* %103, %struct.basic_block_def** %header84, align 8, !dbg !8339
  %105 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8340
  %src85 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %105, i32 0, i32 0, !dbg !8341
  %106 = load %struct.basic_block_def*, %struct.basic_block_def** %src85, align 8, !dbg !8341
  %107 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8342
  %latch86 = getelementptr inbounds %struct.loop, %struct.loop* %107, i32 0, i32 3, !dbg !8343
  store %struct.basic_block_def* %106, %struct.basic_block_def** %latch86, align 8, !dbg !8344
  br label %if.end87, !dbg !8345

if.end87:                                         ; preds = %if.then82, %if.end80
  %108 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8346
  %109 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8347
  %dest88 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %109, i32 0, i32 1, !dbg !8348
  %110 = load %struct.basic_block_def*, %struct.basic_block_def** %dest88, align 8, !dbg !8348
  %call89 = call %struct.basic_block_def* @get_bb_copy(%struct.basic_block_def* %110), !dbg !8349
  %call90 = call %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def* %108, %struct.basic_block_def* %call89), !dbg !8350
  store %struct.edge_def* %call90, %struct.edge_def** %redirected, align 8, !dbg !8351
  %111 = load %struct.edge_def*, %struct.edge_def** %redirected, align 8, !dbg !8352
  %cmp91 = icmp ne %struct.edge_def* %111, null, !dbg !8352
  br i1 %cmp91, label %cond.false94, label %cond.true93, !dbg !8352

cond.true93:                                      ; preds = %if.end87
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5140, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8352
  br label %cond.end95, !dbg !8352

cond.false94:                                     ; preds = %if.end87
  br label %cond.end95, !dbg !8352

cond.end95:                                       ; preds = %cond.false94, %cond.true93
  %cond96 = phi i32 [ 0, %cond.true93 ], [ 0, %cond.false94 ], !dbg !8352
  %112 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8353
  call void @flush_pending_stmts(%struct.edge_def* %112), !dbg !8354
  %113 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8355
  %dest97 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %113, i32 0, i32 1, !dbg !8356
  %114 = load %struct.basic_block_def*, %struct.basic_block_def** %dest97, align 8, !dbg !8356
  %115 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8357
  %src98 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %115, i32 0, i32 0, !dbg !8358
  %116 = load %struct.basic_block_def*, %struct.basic_block_def** %src98, align 8, !dbg !8358
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %114, %struct.basic_block_def* %116), !dbg !8359
  %117 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8360
  %dest99 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %117, i32 0, i32 1, !dbg !8360
  %118 = load %struct.basic_block_def*, %struct.basic_block_def** %dest99, align 8, !dbg !8360
  %call100 = call %struct.basic_block_def* @get_bb_original(%struct.basic_block_def* %118), !dbg !8360
  %call101 = call %struct.basic_block_def** @VEC_basic_block_heap_safe_push(%struct.VEC_basic_block_heap** %doms, %struct.basic_block_def* %call100), !dbg !8360
  %119 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %doms, align 8, !dbg !8361
  call void @iterate_fix_dominators(i32 1, %struct.VEC_basic_block_heap* %119, i8 zeroext 0), !dbg !8362
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %doms), !dbg !8363
  %120 = load %struct.basic_block_def**, %struct.basic_block_def*** %region_copy.addr, align 8, !dbg !8364
  %121 = load i32, i32* %n_region.addr, align 4, !dbg !8365
  call void @add_phi_args_after_copy(%struct.basic_block_def** %120, i32 %121, %struct.edge_def* null), !dbg !8366
  call void @update_ssa(i32 2048), !dbg !8367
  %122 = load i8, i8* %free_region_copy, align 1, !dbg !8368
  %tobool102 = icmp ne i8 %122, 0, !dbg !8368
  br i1 %tobool102, label %if.then103, label %if.end104, !dbg !8370

if.then103:                                       ; preds = %cond.end95
  %123 = load %struct.basic_block_def**, %struct.basic_block_def*** %region_copy.addr, align 8, !dbg !8371
  %124 = bitcast %struct.basic_block_def** %123 to i8*, !dbg !8371
  call void @free(i8* %124), !dbg !8372
  br label %if.end104, !dbg !8372

if.end104:                                        ; preds = %if.then103, %cond.end95
  call void @free_original_copy_tables(), !dbg !8373
  store i8 1, i8* %retval, align 1, !dbg !8374
  br label %return, !dbg !8374

return:                                           ; preds = %if.end104, %if.then37, %if.then22, %if.then13, %if.then4, %if.then
  %125 = load i8, i8* %retval, align 1, !dbg !8375
  ret i8 %125, !dbg !8375
}

declare dso_local zeroext i8 @can_copy_bbs_p(%struct.basic_block_def**, i32) #2

declare dso_local void @set_loop_copy(%struct.loop*, %struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !8376 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8381, metadata !DIExpression()), !dbg !8382
  call void @llvm.dbg.declare(metadata i32* %n, metadata !8383, metadata !DIExpression()), !dbg !8384
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8385
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !8385
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !8385
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !8385
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8385

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8385
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !8385
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !8385
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !8385
  br label %cond.end, !dbg !8385

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8385

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8385
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !8385
  store i32 %call, i32* %n, align 4, !dbg !8384
  %4 = load i32, i32* %n, align 4, !dbg !8386
  %cmp = icmp eq i32 %4, 0, !dbg !8388
  br i1 %cmp, label %if.then, label %if.end, !dbg !8389

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !8390
  br label %return, !dbg !8390

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8391
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !8391
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !8391
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !8391
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !8391

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8391
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !8391
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !8391
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !8391
  br label %cond.end8, !dbg !8391

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !8391

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !8391
  %9 = load i32, i32* %n, align 4, !dbg !8391
  %sub = sub i32 %9, 1, !dbg !8391
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !8391
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !8392
  br label %return, !dbg !8392

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !8393
  ret %struct.loop* %10, !dbg !8393
}

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local i8* @xmalloc(i64) #2

declare dso_local zeroext i8 @need_ssa_update_p(%struct.function*) #2

declare dso_local void @initialize_original_copy_tables() #2

declare dso_local %struct.VEC_basic_block_heap* @get_dominated_by_region(i32, %struct.basic_block_def**, i32) #2

declare dso_local void @copy_bbs(%struct.basic_block_def**, i32, %struct.basic_block_def**, %struct.edge_def**, i32, %struct.edge_def**, %struct.loop*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @split_edge_bb_loc(%struct.edge_def* %edge_in) #0 !dbg !8394 {
entry:
  %retval = alloca %struct.basic_block_def*, align 8
  %edge_in.addr = alloca %struct.edge_def*, align 8
  %dest = alloca %struct.basic_block_def*, align 8
  %dest_prev = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  store %struct.edge_def* %edge_in, %struct.edge_def** %edge_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %edge_in.addr, metadata !8395, metadata !DIExpression()), !dbg !8396
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest, metadata !8397, metadata !DIExpression()), !dbg !8398
  %0 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !8399
  %dest1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 1, !dbg !8400
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest1, align 8, !dbg !8400
  store %struct.basic_block_def* %1, %struct.basic_block_def** %dest, align 8, !dbg !8398
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest_prev, metadata !8401, metadata !DIExpression()), !dbg !8402
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8403
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 5, !dbg !8404
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !8404
  store %struct.basic_block_def* %3, %struct.basic_block_def** %dest_prev, align 8, !dbg !8402
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %dest_prev, align 8, !dbg !8405
  %tobool = icmp ne %struct.basic_block_def* %4, null, !dbg !8405
  br i1 %tobool, label %if.then, label %if.end5, !dbg !8407

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !8408, metadata !DIExpression()), !dbg !8410
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %dest_prev, align 8, !dbg !8411
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8412
  %call = call %struct.edge_def* @find_edge(%struct.basic_block_def* %5, %struct.basic_block_def* %6), !dbg !8413
  store %struct.edge_def* %call, %struct.edge_def** %e, align 8, !dbg !8410
  %7 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8414
  %tobool2 = icmp ne %struct.edge_def* %7, null, !dbg !8414
  br i1 %tobool2, label %land.lhs.true, label %if.end, !dbg !8416

land.lhs.true:                                    ; preds = %if.then
  %8 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8417
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %8, i32 0, i32 7, !dbg !8418
  %9 = load i32, i32* %flags, align 8, !dbg !8418
  %and = and i32 %9, 14, !dbg !8419
  %tobool3 = icmp ne i32 %and, 0, !dbg !8419
  br i1 %tobool3, label %if.end, label %if.then4, !dbg !8420

if.then4:                                         ; preds = %land.lhs.true
  %10 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !8421
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %10, i32 0, i32 0, !dbg !8422
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !8422
  store %struct.basic_block_def* %11, %struct.basic_block_def** %retval, align 8, !dbg !8423
  br label %return, !dbg !8423

if.end:                                           ; preds = %land.lhs.true, %if.then
  br label %if.end5, !dbg !8424

if.end5:                                          ; preds = %if.end, %entry
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %dest_prev, align 8, !dbg !8425
  store %struct.basic_block_def* %12, %struct.basic_block_def** %retval, align 8, !dbg !8426
  br label %return, !dbg !8426

return:                                           ; preds = %if.end5, %if.then4
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %retval, align 8, !dbg !8427
  ret %struct.basic_block_def* %13, !dbg !8427
}

declare dso_local void @scale_bbs_frequencies_gcov_type(%struct.basic_block_def**, i32, i64, i64) #2

declare dso_local void @scale_bbs_frequencies_int(%struct.basic_block_def**, i32, i32, i32) #2

declare dso_local %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def*, %struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def* @get_bb_copy(%struct.basic_block_def*) #2

declare dso_local void @flush_pending_stmts(%struct.edge_def*) #2

declare dso_local void @set_immediate_dominator(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def** @VEC_basic_block_heap_safe_push(%struct.VEC_basic_block_heap** %vec_, %struct.basic_block_def* %obj_) #0 !dbg !8428 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  %obj_.addr = alloca %struct.basic_block_def*, align 8
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !8432, metadata !DIExpression()), !dbg !8433
  store %struct.basic_block_def* %obj_, %struct.basic_block_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_.addr, metadata !8434, metadata !DIExpression()), !dbg !8433
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !8433
  %call = call i32 @VEC_basic_block_heap_reserve(%struct.VEC_basic_block_heap** %0, i32 1), !dbg !8433
  %1 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !8433
  %2 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %1, align 8, !dbg !8433
  %tobool = icmp ne %struct.VEC_basic_block_heap* %2, null, !dbg !8433
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8433

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !8433
  %4 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %3, align 8, !dbg !8433
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %4, i32 0, i32 0, !dbg !8433
  br label %cond.end, !dbg !8433

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8433

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8433
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_.addr, align 8, !dbg !8433
  %call1 = call %struct.basic_block_def** @VEC_basic_block_base_quick_push(%struct.VEC_basic_block_base* %cond, %struct.basic_block_def* %5), !dbg !8433
  ret %struct.basic_block_def** %call1, !dbg !8433
}

declare dso_local %struct.basic_block_def* @get_bb_original(%struct.basic_block_def*) #2

declare dso_local void @iterate_fix_dominators(i32, %struct.VEC_basic_block_heap*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %vec_) #0 !dbg !8435 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !8438, metadata !DIExpression()), !dbg !8439
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !8440
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %0, align 8, !dbg !8440
  %tobool = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !8440
  br i1 %tobool, label %if.then, label %if.end, !dbg !8439

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !8440
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %2, align 8, !dbg !8440
  %4 = bitcast %struct.VEC_basic_block_heap* %3 to i8*, !dbg !8440
  call void @free(i8* %4), !dbg !8440
  br label %if.end, !dbg !8440

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !8439
  store %struct.VEC_basic_block_heap* null, %struct.VEC_basic_block_heap** %5, align 8, !dbg !8439
  ret void, !dbg !8439
}

declare dso_local void @update_ssa(i32) #2

declare dso_local void @free_original_copy_tables() #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gimple_duplicate_sese_tail(%struct.edge_def* %entry1, %struct.edge_def* %exit, %struct.basic_block_def** %region, i32 %n_region, %struct.basic_block_def** %region_copy) #0 !dbg !8442 {
entry:
  %retval = alloca i8, align 1
  %entry.addr = alloca %struct.edge_def*, align 8
  %exit.addr = alloca %struct.edge_def*, align 8
  %region.addr = alloca %struct.basic_block_def**, align 8
  %n_region.addr = alloca i32, align 4
  %region_copy.addr = alloca %struct.basic_block_def**, align 8
  %i = alloca i32, align 4
  %free_region_copy = alloca i8, align 1
  %loop = alloca %struct.loop*, align 8
  %orig_loop = alloca %struct.loop*, align 8
  %switch_bb = alloca %struct.basic_block_def*, align 8
  %entry_bb = alloca %struct.basic_block_def*, align 8
  %nentry_bb = alloca %struct.basic_block_def*, align 8
  %doms = alloca %struct.VEC_basic_block_heap*, align 8
  %total_freq = alloca i32, align 4
  %exit_freq = alloca i32, align 4
  %total_count = alloca i64, align 8
  %exit_count = alloca i64, align 8
  %exits = alloca [2 x %struct.edge_def*], align 16
  %nexits = alloca [2 x %struct.edge_def*], align 16
  %e = alloca %struct.edge_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %gsi1 = alloca %struct.gimple_stmt_iterator, align 8
  %cond_stmt = alloca %union.gimple_statement_d*, align 8
  %sorig = alloca %struct.edge_def*, align 8
  %snew = alloca %struct.edge_def*, align 8
  %exit_bb = alloca %struct.basic_block_def*, align 8
  %iters_bb = alloca %struct.basic_block_def*, align 8
  %new_rhs = alloca %union.tree_node*, align 8
  %psi = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %def = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp123 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp175 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.edge_def* %entry1, %struct.edge_def** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry.addr, metadata !8443, metadata !DIExpression()), !dbg !8444
  store %struct.edge_def* %exit, %struct.edge_def** %exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit.addr, metadata !8445, metadata !DIExpression()), !dbg !8446
  store %struct.basic_block_def** %region, %struct.basic_block_def*** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %region.addr, metadata !8447, metadata !DIExpression()), !dbg !8448
  store i32 %n_region, i32* %n_region.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_region.addr, metadata !8449, metadata !DIExpression()), !dbg !8450
  store %struct.basic_block_def** %region_copy, %struct.basic_block_def*** %region_copy.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %region_copy.addr, metadata !8451, metadata !DIExpression()), !dbg !8452
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8453, metadata !DIExpression()), !dbg !8454
  call void @llvm.dbg.declare(metadata i8* %free_region_copy, metadata !8455, metadata !DIExpression()), !dbg !8456
  store i8 0, i8* %free_region_copy, align 1, !dbg !8456
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !8457, metadata !DIExpression()), !dbg !8458
  %0 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8459
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 1, !dbg !8460
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8460
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 3, !dbg !8461
  %2 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !8461
  store %struct.loop* %2, %struct.loop** %loop, align 8, !dbg !8458
  call void @llvm.dbg.declare(metadata %struct.loop** %orig_loop, metadata !8462, metadata !DIExpression()), !dbg !8463
  %3 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8464
  %dest2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 1, !dbg !8465
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %dest2, align 8, !dbg !8465
  %loop_father3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 3, !dbg !8466
  %5 = load %struct.loop*, %struct.loop** %loop_father3, align 8, !dbg !8466
  store %struct.loop* %5, %struct.loop** %orig_loop, align 8, !dbg !8463
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %switch_bb, metadata !8467, metadata !DIExpression()), !dbg !8468
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %entry_bb, metadata !8469, metadata !DIExpression()), !dbg !8470
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %nentry_bb, metadata !8471, metadata !DIExpression()), !dbg !8472
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %doms, metadata !8473, metadata !DIExpression()), !dbg !8474
  call void @llvm.dbg.declare(metadata i32* %total_freq, metadata !8475, metadata !DIExpression()), !dbg !8476
  store i32 0, i32* %total_freq, align 4, !dbg !8476
  call void @llvm.dbg.declare(metadata i32* %exit_freq, metadata !8477, metadata !DIExpression()), !dbg !8478
  store i32 0, i32* %exit_freq, align 4, !dbg !8478
  call void @llvm.dbg.declare(metadata i64* %total_count, metadata !8479, metadata !DIExpression()), !dbg !8480
  store i64 0, i64* %total_count, align 8, !dbg !8480
  call void @llvm.dbg.declare(metadata i64* %exit_count, metadata !8481, metadata !DIExpression()), !dbg !8482
  store i64 0, i64* %exit_count, align 8, !dbg !8482
  call void @llvm.dbg.declare(metadata [2 x %struct.edge_def*]* %exits, metadata !8483, metadata !DIExpression()), !dbg !8485
  call void @llvm.dbg.declare(metadata [2 x %struct.edge_def*]* %nexits, metadata !8486, metadata !DIExpression()), !dbg !8487
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !8488, metadata !DIExpression()), !dbg !8489
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !8490, metadata !DIExpression()), !dbg !8491
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi1, metadata !8492, metadata !DIExpression()), !dbg !8493
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond_stmt, metadata !8494, metadata !DIExpression()), !dbg !8495
  call void @llvm.dbg.declare(metadata %struct.edge_def** %sorig, metadata !8496, metadata !DIExpression()), !dbg !8497
  call void @llvm.dbg.declare(metadata %struct.edge_def** %snew, metadata !8498, metadata !DIExpression()), !dbg !8499
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %exit_bb, metadata !8500, metadata !DIExpression()), !dbg !8501
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %iters_bb, metadata !8502, metadata !DIExpression()), !dbg !8503
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_rhs, metadata !8504, metadata !DIExpression()), !dbg !8505
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi, metadata !8506, metadata !DIExpression()), !dbg !8507
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !8508, metadata !DIExpression()), !dbg !8509
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !8510, metadata !DIExpression()), !dbg !8511
  %6 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8512
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %6, i32 0, i32 0, !dbg !8512
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !8512
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 1, !dbg !8512
  %8 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !8512
  %tobool = icmp ne %struct.VEC_edge_gc* %8, null, !dbg !8512
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8512

cond.true:                                        ; preds = %entry
  %9 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8512
  %src4 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %9, i32 0, i32 0, !dbg !8512
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %src4, align 8, !dbg !8512
  %succs5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 1, !dbg !8512
  %11 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs5, align 8, !dbg !8512
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %11, i32 0, i32 0, !dbg !8512
  br label %cond.end, !dbg !8512

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8512

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8512
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !8512
  %cmp = icmp eq i32 %call, 2, !dbg !8512
  br i1 %cmp, label %cond.false7, label %cond.true6, !dbg !8512

cond.true6:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5218, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8512
  br label %cond.end8, !dbg !8512

cond.false7:                                      ; preds = %cond.end
  br label %cond.end8, !dbg !8512

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i32 [ 0, %cond.true6 ], [ 0, %cond.false7 ], !dbg !8512
  %12 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8513
  %arrayidx = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %exits, i64 0, i64 0, !dbg !8514
  store %struct.edge_def* %12, %struct.edge_def** %arrayidx, align 16, !dbg !8515
  %13 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8516
  %src10 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 0, !dbg !8516
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %src10, align 8, !dbg !8516
  %succs11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 1, !dbg !8516
  %15 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs11, align 8, !dbg !8516
  %tobool12 = icmp ne %struct.VEC_edge_gc* %15, null, !dbg !8516
  br i1 %tobool12, label %cond.true13, label %cond.false17, !dbg !8516

cond.true13:                                      ; preds = %cond.end8
  %16 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8516
  %src14 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 0, !dbg !8516
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %src14, align 8, !dbg !8516
  %succs15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 1, !dbg !8516
  %18 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs15, align 8, !dbg !8516
  %base16 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %18, i32 0, i32 0, !dbg !8516
  br label %cond.end18, !dbg !8516

cond.false17:                                     ; preds = %cond.end8
  br label %cond.end18, !dbg !8516

cond.end18:                                       ; preds = %cond.false17, %cond.true13
  %cond19 = phi %struct.VEC_edge_base* [ %base16, %cond.true13 ], [ null, %cond.false17 ], !dbg !8516
  %19 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8516
  %src20 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %19, i32 0, i32 0, !dbg !8516
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %src20, align 8, !dbg !8516
  %succs21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 1, !dbg !8516
  %21 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs21, align 8, !dbg !8516
  %tobool22 = icmp ne %struct.VEC_edge_gc* %21, null, !dbg !8516
  br i1 %tobool22, label %cond.true23, label %cond.false27, !dbg !8516

cond.true23:                                      ; preds = %cond.end18
  %22 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8516
  %src24 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 0, !dbg !8516
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %src24, align 8, !dbg !8516
  %succs25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 1, !dbg !8516
  %24 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs25, align 8, !dbg !8516
  %base26 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %24, i32 0, i32 0, !dbg !8516
  br label %cond.end28, !dbg !8516

cond.false27:                                     ; preds = %cond.end18
  br label %cond.end28, !dbg !8516

cond.end28:                                       ; preds = %cond.false27, %cond.true23
  %cond29 = phi %struct.VEC_edge_base* [ %base26, %cond.true23 ], [ null, %cond.false27 ], !dbg !8516
  %call30 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond29, i32 0), !dbg !8516
  %25 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8516
  %cmp31 = icmp eq %struct.edge_def* %call30, %25, !dbg !8516
  %conv = zext i1 %cmp31 to i32, !dbg !8516
  %call32 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond19, i32 %conv), !dbg !8516
  %arrayidx33 = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %exits, i64 0, i64 1, !dbg !8517
  store %struct.edge_def* %call32, %struct.edge_def** %arrayidx33, align 8, !dbg !8518
  %26 = load %struct.basic_block_def**, %struct.basic_block_def*** %region.addr, align 8, !dbg !8519
  %27 = load i32, i32* %n_region.addr, align 4, !dbg !8521
  %call34 = call zeroext i8 @can_copy_bbs_p(%struct.basic_block_def** %26, i32 %27), !dbg !8522
  %tobool35 = icmp ne i8 %call34, 0, !dbg !8522
  br i1 %tobool35, label %if.end, label %if.then, !dbg !8523

if.then:                                          ; preds = %cond.end28
  store i8 0, i8* %retval, align 1, !dbg !8524
  br label %return, !dbg !8524

if.end:                                           ; preds = %cond.end28
  call void @initialize_original_copy_tables(), !dbg !8525
  %28 = load %struct.loop*, %struct.loop** %orig_loop, align 8, !dbg !8526
  %29 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8527
  call void @set_loop_copy(%struct.loop* %28, %struct.loop* %29), !dbg !8528
  %30 = load %struct.loop*, %struct.loop** %orig_loop, align 8, !dbg !8529
  %31 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8530
  call void @duplicate_subloops(%struct.loop* %30, %struct.loop* %31), !dbg !8531
  %32 = load %struct.basic_block_def**, %struct.basic_block_def*** %region_copy.addr, align 8, !dbg !8532
  %tobool36 = icmp ne %struct.basic_block_def** %32, null, !dbg !8532
  br i1 %tobool36, label %if.end40, label %if.then37, !dbg !8534

if.then37:                                        ; preds = %if.end
  %33 = load i32, i32* %n_region.addr, align 4, !dbg !8535
  %conv38 = zext i32 %33 to i64, !dbg !8535
  %mul = mul i64 8, %conv38, !dbg !8535
  %call39 = call i8* @xmalloc(i64 %mul), !dbg !8535
  %34 = bitcast i8* %call39 to %struct.basic_block_def**, !dbg !8535
  store %struct.basic_block_def** %34, %struct.basic_block_def*** %region_copy.addr, align 8, !dbg !8537
  store i8 1, i8* %free_region_copy, align 1, !dbg !8538
  br label %if.end40, !dbg !8539

if.end40:                                         ; preds = %if.then37, %if.end
  %35 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8540
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %35, i64 0, !dbg !8540
  %call41 = call zeroext i8 @need_ssa_update_p(%struct.function* %add.ptr), !dbg !8540
  %tobool42 = icmp ne i8 %call41, 0, !dbg !8540
  br i1 %tobool42, label %cond.true43, label %cond.false44, !dbg !8540

cond.true43:                                      ; preds = %if.end40
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5235, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8540
  br label %cond.end45, !dbg !8540

cond.false44:                                     ; preds = %if.end40
  br label %cond.end45, !dbg !8540

cond.end45:                                       ; preds = %cond.false44, %cond.true43
  %cond46 = phi i32 [ 0, %cond.true43 ], [ 0, %cond.false44 ], !dbg !8540
  %36 = load %struct.basic_block_def**, %struct.basic_block_def*** %region.addr, align 8, !dbg !8541
  %37 = load i32, i32* %n_region.addr, align 4, !dbg !8542
  %call47 = call %struct.VEC_basic_block_heap* @get_dominated_by_region(i32 1, %struct.basic_block_def** %36, i32 %37), !dbg !8543
  store %struct.VEC_basic_block_heap* %call47, %struct.VEC_basic_block_heap** %doms, align 8, !dbg !8544
  %38 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8545
  %src48 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %38, i32 0, i32 0, !dbg !8547
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %src48, align 8, !dbg !8547
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 8, !dbg !8548
  %40 = load i64, i64* %count, align 8, !dbg !8548
  %tobool49 = icmp ne i64 %40, 0, !dbg !8545
  br i1 %tobool49, label %if.then50, label %if.else, !dbg !8549

if.then50:                                        ; preds = %cond.end45
  %41 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8550
  %src51 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %41, i32 0, i32 0, !dbg !8552
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %src51, align 8, !dbg !8552
  %count52 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 8, !dbg !8553
  %43 = load i64, i64* %count52, align 8, !dbg !8553
  store i64 %43, i64* %total_count, align 8, !dbg !8554
  %44 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8555
  %count53 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %44, i32 0, i32 9, !dbg !8556
  %45 = load i64, i64* %count53, align 8, !dbg !8556
  store i64 %45, i64* %exit_count, align 8, !dbg !8557
  %46 = load i64, i64* %exit_count, align 8, !dbg !8558
  %47 = load i64, i64* %total_count, align 8, !dbg !8560
  %cmp54 = icmp sgt i64 %46, %47, !dbg !8561
  br i1 %cmp54, label %if.then56, label %if.end57, !dbg !8562

if.then56:                                        ; preds = %if.then50
  %48 = load i64, i64* %total_count, align 8, !dbg !8563
  store i64 %48, i64* %exit_count, align 8, !dbg !8564
  br label %if.end57, !dbg !8565

if.end57:                                         ; preds = %if.then56, %if.then50
  br label %if.end70, !dbg !8566

if.else:                                          ; preds = %cond.end45
  %49 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8567
  %src58 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %49, i32 0, i32 0, !dbg !8569
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %src58, align 8, !dbg !8569
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 11, !dbg !8570
  %51 = load i32, i32* %frequency, align 8, !dbg !8570
  store i32 %51, i32* %total_freq, align 4, !dbg !8571
  %52 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8572
  %src59 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %52, i32 0, i32 0, !dbg !8572
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %src59, align 8, !dbg !8572
  %frequency60 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 11, !dbg !8572
  %54 = load i32, i32* %frequency60, align 8, !dbg !8572
  %55 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8572
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %55, i32 0, i32 8, !dbg !8572
  %56 = load i32, i32* %probability, align 4, !dbg !8572
  %mul61 = mul nsw i32 %54, %56, !dbg !8572
  %add = add nsw i32 %mul61, 5000, !dbg !8572
  %div = sdiv i32 %add, 10000, !dbg !8572
  store i32 %div, i32* %exit_freq, align 4, !dbg !8573
  %57 = load i32, i32* %total_freq, align 4, !dbg !8574
  %cmp62 = icmp eq i32 %57, 0, !dbg !8576
  br i1 %cmp62, label %if.then64, label %if.end65, !dbg !8577

if.then64:                                        ; preds = %if.else
  store i32 1, i32* %total_freq, align 4, !dbg !8578
  br label %if.end65, !dbg !8579

if.end65:                                         ; preds = %if.then64, %if.else
  %58 = load i32, i32* %exit_freq, align 4, !dbg !8580
  %59 = load i32, i32* %total_freq, align 4, !dbg !8582
  %cmp66 = icmp sgt i32 %58, %59, !dbg !8583
  br i1 %cmp66, label %if.then68, label %if.end69, !dbg !8584

if.then68:                                        ; preds = %if.end65
  %60 = load i32, i32* %total_freq, align 4, !dbg !8585
  store i32 %60, i32* %exit_freq, align 4, !dbg !8586
  br label %if.end69, !dbg !8587

if.end69:                                         ; preds = %if.then68, %if.end65
  br label %if.end70

if.end70:                                         ; preds = %if.end69, %if.end57
  %61 = load %struct.basic_block_def**, %struct.basic_block_def*** %region.addr, align 8, !dbg !8588
  %62 = load i32, i32* %n_region.addr, align 4, !dbg !8589
  %63 = load %struct.basic_block_def**, %struct.basic_block_def*** %region_copy.addr, align 8, !dbg !8590
  %arraydecay = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %exits, i64 0, i64 0, !dbg !8591
  %arraydecay71 = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %nexits, i64 0, i64 0, !dbg !8592
  %64 = load %struct.loop*, %struct.loop** %orig_loop, align 8, !dbg !8593
  %65 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8594
  %call72 = call %struct.basic_block_def* @split_edge_bb_loc(%struct.edge_def* %65), !dbg !8595
  call void @copy_bbs(%struct.basic_block_def** %61, i32 %62, %struct.basic_block_def** %63, %struct.edge_def** %arraydecay, i32 2, %struct.edge_def** %arraydecay71, %struct.loop* %64, %struct.basic_block_def* %call72), !dbg !8596
  %66 = load i64, i64* %total_count, align 8, !dbg !8597
  %tobool73 = icmp ne i64 %66, 0, !dbg !8597
  br i1 %tobool73, label %if.then74, label %if.else75, !dbg !8599

if.then74:                                        ; preds = %if.end70
  %67 = load %struct.basic_block_def**, %struct.basic_block_def*** %region.addr, align 8, !dbg !8600
  %68 = load i32, i32* %n_region.addr, align 4, !dbg !8602
  %69 = load i64, i64* %total_count, align 8, !dbg !8603
  %70 = load i64, i64* %exit_count, align 8, !dbg !8604
  %sub = sub nsw i64 %69, %70, !dbg !8605
  %71 = load i64, i64* %total_count, align 8, !dbg !8606
  call void @scale_bbs_frequencies_gcov_type(%struct.basic_block_def** %67, i32 %68, i64 %sub, i64 %71), !dbg !8607
  %72 = load %struct.basic_block_def**, %struct.basic_block_def*** %region_copy.addr, align 8, !dbg !8608
  %73 = load i32, i32* %n_region.addr, align 4, !dbg !8609
  %74 = load i64, i64* %exit_count, align 8, !dbg !8610
  %75 = load i64, i64* %total_count, align 8, !dbg !8611
  call void @scale_bbs_frequencies_gcov_type(%struct.basic_block_def** %72, i32 %73, i64 %74, i64 %75), !dbg !8612
  br label %if.end77, !dbg !8613

if.else75:                                        ; preds = %if.end70
  %76 = load %struct.basic_block_def**, %struct.basic_block_def*** %region.addr, align 8, !dbg !8614
  %77 = load i32, i32* %n_region.addr, align 4, !dbg !8616
  %78 = load i32, i32* %total_freq, align 4, !dbg !8617
  %79 = load i32, i32* %exit_freq, align 4, !dbg !8618
  %sub76 = sub nsw i32 %78, %79, !dbg !8619
  %80 = load i32, i32* %total_freq, align 4, !dbg !8620
  call void @scale_bbs_frequencies_int(%struct.basic_block_def** %76, i32 %77, i32 %sub76, i32 %80), !dbg !8621
  %81 = load %struct.basic_block_def**, %struct.basic_block_def*** %region_copy.addr, align 8, !dbg !8622
  %82 = load i32, i32* %n_region.addr, align 4, !dbg !8623
  %83 = load i32, i32* %exit_freq, align 4, !dbg !8624
  %84 = load i32, i32* %total_freq, align 4, !dbg !8625
  call void @scale_bbs_frequencies_int(%struct.basic_block_def** %81, i32 %82, i32 %83, i32 %84), !dbg !8626
  br label %if.end77

if.end77:                                         ; preds = %if.else75, %if.then74
  %85 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8627
  %dest78 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %85, i32 0, i32 1, !dbg !8628
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %dest78, align 8, !dbg !8628
  store %struct.basic_block_def* %86, %struct.basic_block_def** %entry_bb, align 8, !dbg !8629
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb, align 8, !dbg !8630
  %call79 = call %struct.basic_block_def* @get_bb_copy(%struct.basic_block_def* %87), !dbg !8631
  store %struct.basic_block_def* %call79, %struct.basic_block_def** %nentry_bb, align 8, !dbg !8632
  %88 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8633
  %src80 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %88, i32 0, i32 0, !dbg !8635
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %src80, align 8, !dbg !8635
  %call81 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %89), !dbg !8636
  %tobool82 = icmp ne %union.gimple_statement_d* %call81, null, !dbg !8636
  br i1 %tobool82, label %lor.lhs.false, label %if.then87, !dbg !8637

lor.lhs.false:                                    ; preds = %if.end77
  %90 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8638
  %src83 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %90, i32 0, i32 0, !dbg !8639
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %src83, align 8, !dbg !8639
  %call84 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %91), !dbg !8640
  %call85 = call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %call84), !dbg !8641
  %tobool86 = icmp ne i8 %call85, 0, !dbg !8641
  br i1 %tobool86, label %if.else89, label %if.then87, !dbg !8642

if.then87:                                        ; preds = %lor.lhs.false, %if.end77
  %92 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8643
  %src88 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %92, i32 0, i32 0, !dbg !8644
  %93 = load %struct.basic_block_def*, %struct.basic_block_def** %src88, align 8, !dbg !8644
  store %struct.basic_block_def* %93, %struct.basic_block_def** %switch_bb, align 8, !dbg !8645
  br label %if.end91, !dbg !8646

if.else89:                                        ; preds = %lor.lhs.false
  %94 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !8647
  %call90 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %94), !dbg !8648
  store %struct.basic_block_def* %call90, %struct.basic_block_def** %switch_bb, align 8, !dbg !8649
  br label %if.end91

if.end91:                                         ; preds = %if.else89, %if.then87
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %nentry_bb, align 8, !dbg !8650
  %96 = load %struct.basic_block_def*, %struct.basic_block_def** %switch_bb, align 8, !dbg !8651
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %95, %struct.basic_block_def* %96), !dbg !8652
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %switch_bb, align 8, !dbg !8653
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %97), !dbg !8654
  %98 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !8654
  %99 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !8654
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 %99, i64 24, i1 false), !dbg !8654
  %100 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8655
  %src92 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %100, i32 0, i32 0, !dbg !8656
  %101 = load %struct.basic_block_def*, %struct.basic_block_def** %src92, align 8, !dbg !8656
  %call93 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %101), !dbg !8657
  store %union.gimple_statement_d* %call93, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !8658
  %102 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !8659
  %call94 = call i32 @gimple_code(%union.gimple_statement_d* %102), !dbg !8659
  %cmp95 = icmp eq i32 %call94, 1, !dbg !8659
  br i1 %cmp95, label %cond.false98, label %cond.true97, !dbg !8659

cond.true97:                                      ; preds = %if.end91
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5291, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8659
  br label %cond.end99, !dbg !8659

cond.false98:                                     ; preds = %if.end91
  br label %cond.end99, !dbg !8659

cond.end99:                                       ; preds = %cond.false98, %cond.true97
  %cond100 = phi i32 [ 0, %cond.true97 ], [ 0, %cond.false98 ], !dbg !8659
  %103 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !8660
  %call101 = call %union.gimple_statement_d* @gimple_copy(%union.gimple_statement_d* %103), !dbg !8661
  store %union.gimple_statement_d* %call101, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !8662
  %arrayidx102 = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %exits, i64 0, i64 1, !dbg !8663
  %104 = load %struct.edge_def*, %struct.edge_def** %arrayidx102, align 8, !dbg !8663
  %dest103 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %104, i32 0, i32 1, !dbg !8665
  %105 = load %struct.basic_block_def*, %struct.basic_block_def** %dest103, align 8, !dbg !8665
  %106 = load %struct.loop*, %struct.loop** %orig_loop, align 8, !dbg !8666
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %106, i32 0, i32 3, !dbg !8667
  %107 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !8667
  %cmp104 = icmp eq %struct.basic_block_def* %105, %107, !dbg !8668
  br i1 %cmp104, label %if.then106, label %if.else108, !dbg !8669

if.then106:                                       ; preds = %cond.end99
  %108 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !8670
  %call107 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %108), !dbg !8671
  store %union.tree_node* %call107, %union.tree_node** %new_rhs, align 8, !dbg !8672
  br label %if.end136, !dbg !8673

if.else108:                                       ; preds = %cond.end99
  %109 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !8674
  %call109 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %109), !dbg !8674
  %common = bitcast %union.tree_node* %call109 to %struct.tree_common*, !dbg !8674
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8674
  %110 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8674
  %111 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !8674
  %call110 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %111), !dbg !8674
  %112 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !8674
  %call111 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %112), !dbg !8674
  %common112 = bitcast %union.tree_node* %call111 to %struct.tree_common*, !dbg !8674
  %type113 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common112, i32 0, i32 2, !dbg !8674
  %113 = load %union.tree_node*, %union.tree_node** %type113, align 8, !dbg !8674
  %call114 = call %union.tree_node* @build_int_cst(%union.tree_node* %113, i64 1), !dbg !8674
  %call115 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %110, %union.tree_node* %call110, %union.tree_node* %call114), !dbg !8674
  store %union.tree_node* %call115, %union.tree_node** %new_rhs, align 8, !dbg !8676
  %114 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !8677
  %call116 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %114), !dbg !8677
  %base117 = bitcast %union.tree_node* %call116 to %struct.tree_base*, !dbg !8677
  %115 = bitcast %struct.tree_base* %base117 to i64*, !dbg !8677
  %bf.load = load i64, i64* %115, align 8, !dbg !8677
  %bf.clear = and i64 %bf.load, 65535, !dbg !8677
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8677
  %cmp118 = icmp eq i32 %bf.cast, 141, !dbg !8679
  br i1 %cmp118, label %if.then120, label %if.end135, !dbg !8680

if.then120:                                       ; preds = %if.else108
  %116 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !8681
  %call121 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %116), !dbg !8681
  %ssa_name = bitcast %union.tree_node* %call121 to %struct.tree_ssa_name*, !dbg !8681
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !8681
  %117 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8681
  %call122 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %117), !dbg !8683
  store %struct.basic_block_def* %call122, %struct.basic_block_def** %iters_bb, align 8, !dbg !8684
  %118 = load %struct.basic_block_def*, %struct.basic_block_def** %iters_bb, align 8, !dbg !8685
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp123, %struct.basic_block_def* %118), !dbg !8687
  %119 = bitcast %struct.gimple_stmt_iterator* %gsi1 to i8*, !dbg !8687
  %120 = bitcast %struct.gimple_stmt_iterator* %tmp123 to i8*, !dbg !8687
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %120, i64 24, i1 false), !dbg !8687
  br label %for.cond, !dbg !8688

for.cond:                                         ; preds = %for.inc, %if.then120
  %call124 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi1), !dbg !8689
  %tobool125 = icmp ne i8 %call124, 0, !dbg !8691
  %lnot = xor i1 %tobool125, true, !dbg !8691
  br i1 %lnot, label %for.body, label %for.end, !dbg !8692

for.body:                                         ; preds = %for.cond
  %call126 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi1), !dbg !8693
  %121 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !8695
  %call127 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %121), !dbg !8695
  %ssa_name128 = bitcast %union.tree_node* %call127 to %struct.tree_ssa_name*, !dbg !8695
  %def_stmt129 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name128, i32 0, i32 2, !dbg !8695
  %122 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt129, align 8, !dbg !8695
  %cmp130 = icmp eq %union.gimple_statement_d* %call126, %122, !dbg !8696
  br i1 %cmp130, label %if.then132, label %if.end133, !dbg !8697

if.then132:                                       ; preds = %for.body
  br label %for.end, !dbg !8698

if.end133:                                        ; preds = %for.body
  br label %for.inc, !dbg !8695

for.inc:                                          ; preds = %if.end133
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi1), !dbg !8699
  br label %for.cond, !dbg !8700, !llvm.loop !8701

for.end:                                          ; preds = %if.then132, %for.cond
  %123 = load %union.tree_node*, %union.tree_node** %new_rhs, align 8, !dbg !8703
  %call134 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %gsi1, %union.tree_node* %123, i8 zeroext 1, %union.tree_node* null, i8 zeroext 0, i32 2), !dbg !8704
  store %union.tree_node* %call134, %union.tree_node** %new_rhs, align 8, !dbg !8705
  br label %if.end135, !dbg !8706

if.end135:                                        ; preds = %for.end, %if.else108
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %if.then106
  %124 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !8707
  %125 = load %union.tree_node*, %union.tree_node** %new_rhs, align 8, !dbg !8708
  %call137 = call %union.tree_node* @unshare_expr(%union.tree_node* %125), !dbg !8709
  call void @gimple_cond_set_rhs(%union.gimple_statement_d* %124, %union.tree_node* %call137), !dbg !8710
  %126 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !8711
  %127 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !8712
  %call138 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %127), !dbg !8713
  %call139 = call %union.tree_node* @unshare_expr(%union.tree_node* %call138), !dbg !8714
  call void @gimple_cond_set_lhs(%union.gimple_statement_d* %126, %union.tree_node* %call139), !dbg !8715
  %128 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !8716
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %128, i32 0), !dbg !8717
  %129 = load %struct.basic_block_def*, %struct.basic_block_def** %switch_bb, align 8, !dbg !8718
  %call140 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %129), !dbg !8719
  store %struct.edge_def* %call140, %struct.edge_def** %sorig, align 8, !dbg !8720
  %arrayidx141 = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %exits, i64 0, i64 1, !dbg !8721
  %130 = load %struct.edge_def*, %struct.edge_def** %arrayidx141, align 8, !dbg !8721
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %130, i32 0, i32 7, !dbg !8722
  %131 = load i32, i32* %flags, align 8, !dbg !8722
  %132 = load %struct.edge_def*, %struct.edge_def** %sorig, align 8, !dbg !8723
  %flags142 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %132, i32 0, i32 7, !dbg !8724
  store i32 %131, i32* %flags142, align 8, !dbg !8725
  %133 = load %struct.basic_block_def*, %struct.basic_block_def** %switch_bb, align 8, !dbg !8726
  %134 = load %struct.basic_block_def*, %struct.basic_block_def** %nentry_bb, align 8, !dbg !8727
  %arrayidx143 = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %exits, i64 0, i64 0, !dbg !8728
  %135 = load %struct.edge_def*, %struct.edge_def** %arrayidx143, align 16, !dbg !8728
  %flags144 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %135, i32 0, i32 7, !dbg !8729
  %136 = load i32, i32* %flags144, align 8, !dbg !8729
  %call145 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %133, %struct.basic_block_def* %134, i32 %136), !dbg !8730
  store %struct.edge_def* %call145, %struct.edge_def** %snew, align 8, !dbg !8731
  %137 = load %struct.edge_def*, %struct.edge_def** %snew, align 8, !dbg !8732
  call void @rescan_loop_exit(%struct.edge_def* %137, i8 zeroext 1, i8 zeroext 0), !dbg !8733
  %138 = load %struct.basic_block_def**, %struct.basic_block_def*** %region_copy.addr, align 8, !dbg !8734
  %139 = load i32, i32* %n_region.addr, align 4, !dbg !8735
  %140 = load %struct.edge_def*, %struct.edge_def** %snew, align 8, !dbg !8736
  call void @add_phi_args_after_copy(%struct.basic_block_def** %138, i32 %139, %struct.edge_def* %140), !dbg !8737
  %141 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !8738
  %dest146 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %141, i32 0, i32 1, !dbg !8739
  %142 = load %struct.basic_block_def*, %struct.basic_block_def** %dest146, align 8, !dbg !8739
  store %struct.basic_block_def* %142, %struct.basic_block_def** %exit_bb, align 8, !dbg !8740
  %arrayidx147 = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %exits, i64 0, i64 0, !dbg !8741
  %143 = load %struct.edge_def*, %struct.edge_def** %arrayidx147, align 16, !dbg !8741
  %arrayidx148 = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %exits, i64 0, i64 1, !dbg !8742
  %144 = load %struct.edge_def*, %struct.edge_def** %arrayidx148, align 8, !dbg !8742
  %dest149 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %144, i32 0, i32 1, !dbg !8743
  %145 = load %struct.basic_block_def*, %struct.basic_block_def** %dest149, align 8, !dbg !8743
  %call150 = call %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def* %143, %struct.basic_block_def* %145), !dbg !8744
  store %struct.edge_def* %call150, %struct.edge_def** %e, align 8, !dbg !8745
  %146 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8746
  %insns = getelementptr inbounds %struct.edge_def, %struct.edge_def* %146, i32 0, i32 2, !dbg !8746
  %g = bitcast %union.edge_def_insns* %insns to %struct.gimple_seq_d**, !dbg !8746
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %g, align 8, !dbg !8747
  store i32 0, i32* %i, align 4, !dbg !8748
  br label %for.cond151, !dbg !8750

for.cond151:                                      ; preds = %for.inc189, %if.end136
  %147 = load i32, i32* %i, align 4, !dbg !8751
  %148 = load i32, i32* %n_region.addr, align 4, !dbg !8753
  %cmp152 = icmp ult i32 %147, %148, !dbg !8754
  br i1 %cmp152, label %for.body154, label %for.end190, !dbg !8755

for.body154:                                      ; preds = %for.cond151
  %149 = load %struct.basic_block_def**, %struct.basic_block_def*** %region_copy.addr, align 8, !dbg !8756
  %150 = load i32, i32* %i, align 4, !dbg !8758
  %idxprom = zext i32 %150 to i64, !dbg !8756
  %arrayidx155 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %149, i64 %idxprom, !dbg !8756
  %151 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx155, align 8, !dbg !8756
  %call156 = call %struct.basic_block_def* @get_bb_original(%struct.basic_block_def* %151), !dbg !8759
  %152 = load %struct.loop*, %struct.loop** %orig_loop, align 8, !dbg !8760
  %latch157 = getelementptr inbounds %struct.loop, %struct.loop* %152, i32 0, i32 3, !dbg !8761
  %153 = load %struct.basic_block_def*, %struct.basic_block_def** %latch157, align 8, !dbg !8761
  %cmp158 = icmp eq %struct.basic_block_def* %call156, %153, !dbg !8762
  br i1 %cmp158, label %if.then160, label %if.end188, !dbg !8763

if.then160:                                       ; preds = %for.body154
  %154 = load %struct.basic_block_def**, %struct.basic_block_def*** %region_copy.addr, align 8, !dbg !8764
  %155 = load i32, i32* %i, align 4, !dbg !8764
  %idxprom161 = zext i32 %155 to i64, !dbg !8764
  %arrayidx162 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %154, i64 %idxprom161, !dbg !8764
  %156 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx162, align 8, !dbg !8764
  %call163 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %156), !dbg !8764
  %tobool164 = icmp ne %struct.edge_def* %call163, null, !dbg !8764
  br i1 %tobool164, label %cond.false166, label %cond.true165, !dbg !8764

cond.true165:                                     ; preds = %if.then160
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5347, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8764
  br label %cond.end167, !dbg !8764

cond.false166:                                    ; preds = %if.then160
  br label %cond.end167, !dbg !8764

cond.end167:                                      ; preds = %cond.false166, %cond.true165
  %cond168 = phi i32 [ 0, %cond.true165 ], [ 0, %cond.false166 ], !dbg !8764
  %157 = load %struct.basic_block_def**, %struct.basic_block_def*** %region_copy.addr, align 8, !dbg !8766
  %158 = load i32, i32* %i, align 4, !dbg !8767
  %idxprom169 = zext i32 %158 to i64, !dbg !8766
  %arrayidx170 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %157, i64 %idxprom169, !dbg !8766
  %159 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx170, align 8, !dbg !8766
  %call171 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %159), !dbg !8768
  %160 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb, align 8, !dbg !8769
  %call172 = call %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def* %call171, %struct.basic_block_def* %160), !dbg !8770
  store %struct.edge_def* %call172, %struct.edge_def** %e, align 8, !dbg !8771
  %161 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8772
  %insns173 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %161, i32 0, i32 2, !dbg !8772
  %g174 = bitcast %union.edge_def_insns* %insns173 to %struct.gimple_seq_d**, !dbg !8772
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %g174, align 8, !dbg !8773
  %162 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb, align 8, !dbg !8774
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp175, %struct.basic_block_def* %162), !dbg !8776
  %163 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !8776
  %164 = bitcast %struct.gimple_stmt_iterator* %tmp175 to i8*, !dbg !8776
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %163, i8* align 8 %164, i64 24, i1 false), !dbg !8776
  br label %for.cond176, !dbg !8777

for.cond176:                                      ; preds = %for.inc186, %cond.end167
  %call177 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !8778
  %tobool178 = icmp ne i8 %call177, 0, !dbg !8780
  %lnot179 = xor i1 %tobool178, true, !dbg !8780
  br i1 %lnot179, label %for.body180, label %for.end187, !dbg !8781

for.body180:                                      ; preds = %for.cond176
  %call181 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !8782
  store %union.gimple_statement_d* %call181, %union.gimple_statement_d** %phi, align 8, !dbg !8784
  %165 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !8785
  %arrayidx182 = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %nexits, i64 0, i64 0, !dbg !8785
  %166 = load %struct.edge_def*, %struct.edge_def** %arrayidx182, align 16, !dbg !8785
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %166, i32 0, i32 6, !dbg !8785
  %167 = load i32, i32* %dest_idx, align 4, !dbg !8785
  %call183 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %165, i32 %167), !dbg !8785
  %call184 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call183), !dbg !8785
  store %union.tree_node* %call184, %union.tree_node** %def, align 8, !dbg !8786
  %168 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !8787
  %169 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !8788
  %170 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8789
  %171 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !8790
  %172 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8791
  %call185 = call i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %171, %struct.edge_def* %172), !dbg !8792
  call void @add_phi_arg(%union.gimple_statement_d* %168, %union.tree_node* %169, %struct.edge_def* %170, i32 %call185), !dbg !8793
  br label %for.inc186, !dbg !8794

for.inc186:                                       ; preds = %for.body180
  call void @gsi_next(%struct.gimple_stmt_iterator* %psi), !dbg !8795
  br label %for.cond176, !dbg !8796, !llvm.loop !8797

for.end187:                                       ; preds = %for.cond176
  br label %if.end188, !dbg !8799

if.end188:                                        ; preds = %for.end187, %for.body154
  br label %for.inc189, !dbg !8761

for.inc189:                                       ; preds = %if.end188
  %173 = load i32, i32* %i, align 4, !dbg !8800
  %inc = add i32 %173, 1, !dbg !8800
  store i32 %inc, i32* %i, align 4, !dbg !8800
  br label %for.cond151, !dbg !8801, !llvm.loop !8802

for.end190:                                       ; preds = %for.cond151
  %arrayidx191 = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %nexits, i64 0, i64 0, !dbg !8804
  %174 = load %struct.edge_def*, %struct.edge_def** %arrayidx191, align 16, !dbg !8804
  %arrayidx192 = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %nexits, i64 0, i64 1, !dbg !8805
  %175 = load %struct.edge_def*, %struct.edge_def** %arrayidx192, align 8, !dbg !8805
  %dest193 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %175, i32 0, i32 1, !dbg !8806
  %176 = load %struct.basic_block_def*, %struct.basic_block_def** %dest193, align 8, !dbg !8806
  %call194 = call %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def* %174, %struct.basic_block_def* %176), !dbg !8807
  store %struct.edge_def* %call194, %struct.edge_def** %e, align 8, !dbg !8808
  %177 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8809
  %insns195 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %177, i32 0, i32 2, !dbg !8809
  %g196 = bitcast %union.edge_def_insns* %insns195 to %struct.gimple_seq_d**, !dbg !8809
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %g196, align 8, !dbg !8810
  %178 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %doms, align 8, !dbg !8811
  call void @iterate_fix_dominators(i32 1, %struct.VEC_basic_block_heap* %178, i8 zeroext 0), !dbg !8812
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %doms), !dbg !8813
  call void @update_ssa(i32 2048), !dbg !8814
  %179 = load i8, i8* %free_region_copy, align 1, !dbg !8815
  %tobool197 = icmp ne i8 %179, 0, !dbg !8815
  br i1 %tobool197, label %if.then198, label %if.end199, !dbg !8817

if.then198:                                       ; preds = %for.end190
  %180 = load %struct.basic_block_def**, %struct.basic_block_def*** %region_copy.addr, align 8, !dbg !8818
  %181 = bitcast %struct.basic_block_def** %180 to i8*, !dbg !8818
  call void @free(i8* %181), !dbg !8819
  br label %if.end199, !dbg !8819

if.end199:                                        ; preds = %if.then198, %for.end190
  call void @free_original_copy_tables(), !dbg !8820
  store i8 1, i8* %retval, align 1, !dbg !8821
  br label %return, !dbg !8821

return:                                           ; preds = %if.end199, %if.then
  %182 = load i8, i8* %retval, align 1, !dbg !8822
  ret i8 %182, !dbg !8822
}

declare dso_local void @duplicate_subloops(%struct.loop*, %struct.loop*) #2

declare dso_local %struct.basic_block_def* @split_edge(%struct.edge_def*) #2

declare dso_local %union.gimple_statement_d* @gimple_copy(%union.gimple_statement_d*) #2

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

declare dso_local %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator*, %union.tree_node*, i8 zeroext, %union.tree_node*, i8 zeroext, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_rhs(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !8823 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8824, metadata !DIExpression()), !dbg !8825
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !8826, metadata !DIExpression()), !dbg !8827
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8828
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8829
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !8830
  ret void, !dbg !8831
}

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !8832 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8833, metadata !DIExpression()), !dbg !8834
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !8835, metadata !DIExpression()), !dbg !8836
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8837
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8838
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !8839
  ret void, !dbg !8840
}

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !8841 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8844, metadata !DIExpression()), !dbg !8845
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8846
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !8846
  %tobool = icmp ne i8 %call, 0, !dbg !8846
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8846

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.147, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8846
  br label %cond.end, !dbg !8846

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8846

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8846
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8847
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !8847
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !8847
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !8847
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !8847

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8847
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !8847
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !8847
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !8847
  br label %cond.end5, !dbg !8847

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !8847

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !8847
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !8847
  ret %struct.edge_def* %call7, !dbg !8848
}

declare dso_local void @rescan_loop_exit(%struct.edge_def*, i8 zeroext, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !8849 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !8852, metadata !DIExpression()), !dbg !8853
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !8854
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !8855
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !8855
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !8856
  ret %union.tree_node* %2, !dbg !8857
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !8858 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8861, metadata !DIExpression()), !dbg !8862
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !8863, metadata !DIExpression()), !dbg !8864
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8865
  %1 = load i32, i32* %i.addr, align 4, !dbg !8866
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !8867
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !8868
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !8869
}

declare dso_local void @add_phi_arg(%union.gimple_statement_d*, %union.tree_node*, %struct.edge_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %gs, %struct.edge_def* %e) #0 !dbg !8870 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8873, metadata !DIExpression()), !dbg !8874
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !8875, metadata !DIExpression()), !dbg !8876
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8877
  %1 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !8878
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1, i32 0, i32 6, !dbg !8879
  %2 = load i32, i32* %dest_idx, align 4, !dbg !8879
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %2), !dbg !8880
  %locus = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 2, !dbg !8881
  %3 = load i32, i32* %locus, align 8, !dbg !8881
  ret i32 %3, !dbg !8882
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gather_blocks_in_sese_region(%struct.basic_block_def* %entry1, %struct.basic_block_def* %exit, %struct.VEC_basic_block_heap** %bbs_p) #0 !dbg !8883 {
entry:
  %entry.addr = alloca %struct.basic_block_def*, align 8
  %exit.addr = alloca %struct.basic_block_def*, align 8
  %bbs_p.addr = alloca %struct.VEC_basic_block_heap**, align 8
  %son = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %entry1, %struct.basic_block_def** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %entry.addr, metadata !8886, metadata !DIExpression()), !dbg !8887
  store %struct.basic_block_def* %exit, %struct.basic_block_def** %exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %exit.addr, metadata !8888, metadata !DIExpression()), !dbg !8889
  store %struct.VEC_basic_block_heap** %bbs_p, %struct.VEC_basic_block_heap*** %bbs_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %bbs_p.addr, metadata !8890, metadata !DIExpression()), !dbg !8891
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %son, metadata !8892, metadata !DIExpression()), !dbg !8893
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %entry.addr, align 8, !dbg !8894
  %call = call %struct.basic_block_def* @first_dom_son(i32 1, %struct.basic_block_def* %0), !dbg !8896
  store %struct.basic_block_def* %call, %struct.basic_block_def** %son, align 8, !dbg !8897
  br label %for.cond, !dbg !8898

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !8899
  %tobool = icmp ne %struct.basic_block_def* %1, null, !dbg !8901
  br i1 %tobool, label %for.body, label %for.end, !dbg !8901

for.body:                                         ; preds = %for.cond
  %2 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %bbs_p.addr, align 8, !dbg !8902
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !8902
  %call2 = call %struct.basic_block_def** @VEC_basic_block_heap_safe_push(%struct.VEC_basic_block_heap** %2, %struct.basic_block_def* %3), !dbg !8902
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !8904
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %exit.addr, align 8, !dbg !8906
  %cmp = icmp ne %struct.basic_block_def* %4, %5, !dbg !8907
  br i1 %cmp, label %if.then, label %if.end, !dbg !8908

if.then:                                          ; preds = %for.body
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !8909
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %exit.addr, align 8, !dbg !8910
  %8 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %bbs_p.addr, align 8, !dbg !8911
  call void @gather_blocks_in_sese_region(%struct.basic_block_def* %6, %struct.basic_block_def* %7, %struct.VEC_basic_block_heap** %8), !dbg !8912
  br label %if.end, !dbg !8912

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !8913

for.inc:                                          ; preds = %if.end
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !8914
  %call3 = call %struct.basic_block_def* @next_dom_son(i32 1, %struct.basic_block_def* %9), !dbg !8915
  store %struct.basic_block_def* %call3, %struct.basic_block_def** %son, align 8, !dbg !8916
  br label %for.cond, !dbg !8917, !llvm.loop !8918

for.end:                                          ; preds = %for.cond
  ret void, !dbg !8920
}

declare dso_local %struct.basic_block_def* @first_dom_son(i32, %struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def* @next_dom_son(i32, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @mark_virtual_ops_in_bb(%struct.basic_block_def* %bb) #0 !dbg !8921 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp2 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8922, metadata !DIExpression()), !dbg !8923
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !8924, metadata !DIExpression()), !dbg !8925
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8926
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %0), !dbg !8928
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !8928
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !8928
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !8928
  br label %for.cond, !dbg !8929

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !8930
  %tobool = icmp ne i8 %call, 0, !dbg !8932
  %lnot = xor i1 %tobool, true, !dbg !8932
  br i1 %lnot, label %for.body, label %for.end, !dbg !8933

for.body:                                         ; preds = %for.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !8934
  call void @mark_virtual_ops_for_renaming(%union.gimple_statement_d* %call1), !dbg !8935
  br label %for.inc, !dbg !8935

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !8936
  br label %for.cond, !dbg !8937, !llvm.loop !8938

for.end:                                          ; preds = %for.cond
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8940
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp2, %struct.basic_block_def* %3), !dbg !8942
  %4 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !8942
  %5 = bitcast %struct.gimple_stmt_iterator* %tmp2 to i8*, !dbg !8942
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !8942
  br label %for.cond3, !dbg !8943

for.cond3:                                        ; preds = %for.inc9, %for.end
  %call4 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !8944
  %tobool5 = icmp ne i8 %call4, 0, !dbg !8946
  %lnot6 = xor i1 %tobool5, true, !dbg !8946
  br i1 %lnot6, label %for.body7, label %for.end10, !dbg !8947

for.body7:                                        ; preds = %for.cond3
  %call8 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !8948
  call void @mark_virtual_ops_for_renaming(%union.gimple_statement_d* %call8), !dbg !8949
  br label %for.inc9, !dbg !8949

for.inc9:                                         ; preds = %for.body7
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !8950
  br label %for.cond3, !dbg !8951, !llvm.loop !8952

for.end10:                                        ; preds = %for.cond3
  ret void, !dbg !8954
}

declare dso_local void @mark_virtual_ops_for_renaming(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.basic_block_def* @move_sese_region_to_fn(%struct.function* %dest_cfun, %struct.basic_block_def* %entry_bb, %struct.basic_block_def* %exit_bb, %union.tree_node* %orig_block) #0 !dbg !8955 {
entry:
  %dest_cfun.addr = alloca %struct.function*, align 8
  %entry_bb.addr = alloca %struct.basic_block_def*, align 8
  %exit_bb.addr = alloca %struct.basic_block_def*, align 8
  %orig_block.addr = alloca %union.tree_node*, align 8
  %bbs = alloca %struct.VEC_basic_block_heap*, align 8
  %dom_bbs = alloca %struct.VEC_basic_block_heap*, align 8
  %dom_entry = alloca %struct.basic_block_def*, align 8
  %after = alloca %struct.basic_block_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %entry_pred = alloca %struct.basic_block_def**, align 8
  %exit_succ = alloca %struct.basic_block_def**, align 8
  %abb = alloca %struct.basic_block_def*, align 8
  %saved_cfun = alloca %struct.function*, align 8
  %entry_flag = alloca i32*, align 8
  %exit_flag = alloca i32*, align 8
  %entry_prob = alloca i32*, align 8
  %exit_prob = alloca i32*, align 8
  %i = alloca i32, align 4
  %num_entry_edges = alloca i32, align 4
  %num_exit_edges = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %new_label_map = alloca %struct.htab*, align 8
  %vars_map = alloca %struct.pointer_map_t*, align 8
  %eh_map = alloca %struct.pointer_map_t*, align 8
  %loop = alloca %struct.loop*, align 8
  %d = alloca %struct.move_stmt_d, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp57 = alloca %struct.edge_iterator, align 8
  %region = alloca %struct.eh_region_d*, align 8
  %block = alloca %union.tree_node*, align 8
  store %struct.function* %dest_cfun, %struct.function** %dest_cfun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %dest_cfun.addr, metadata !8958, metadata !DIExpression()), !dbg !8959
  store %struct.basic_block_def* %entry_bb, %struct.basic_block_def** %entry_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %entry_bb.addr, metadata !8960, metadata !DIExpression()), !dbg !8961
  store %struct.basic_block_def* %exit_bb, %struct.basic_block_def** %exit_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %exit_bb.addr, metadata !8962, metadata !DIExpression()), !dbg !8963
  store %union.tree_node* %orig_block, %union.tree_node** %orig_block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_block.addr, metadata !8964, metadata !DIExpression()), !dbg !8965
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %bbs, metadata !8966, metadata !DIExpression()), !dbg !8967
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %dom_bbs, metadata !8968, metadata !DIExpression()), !dbg !8969
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dom_entry, metadata !8970, metadata !DIExpression()), !dbg !8971
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb.addr, align 8, !dbg !8972
  %call = call %struct.basic_block_def* @get_immediate_dominator(i32 1, %struct.basic_block_def* %0), !dbg !8973
  store %struct.basic_block_def* %call, %struct.basic_block_def** %dom_entry, align 8, !dbg !8971
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %after, metadata !8974, metadata !DIExpression()), !dbg !8975
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !8976, metadata !DIExpression()), !dbg !8977
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %entry_pred, metadata !8978, metadata !DIExpression()), !dbg !8979
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %exit_succ, metadata !8980, metadata !DIExpression()), !dbg !8981
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %abb, metadata !8982, metadata !DIExpression()), !dbg !8983
  call void @llvm.dbg.declare(metadata %struct.function** %saved_cfun, metadata !8984, metadata !DIExpression()), !dbg !8985
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8986
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !8986
  store %struct.function* %add.ptr, %struct.function** %saved_cfun, align 8, !dbg !8985
  call void @llvm.dbg.declare(metadata i32** %entry_flag, metadata !8987, metadata !DIExpression()), !dbg !8988
  call void @llvm.dbg.declare(metadata i32** %exit_flag, metadata !8989, metadata !DIExpression()), !dbg !8990
  call void @llvm.dbg.declare(metadata i32** %entry_prob, metadata !8991, metadata !DIExpression()), !dbg !8992
  call void @llvm.dbg.declare(metadata i32** %exit_prob, metadata !8993, metadata !DIExpression()), !dbg !8994
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8995, metadata !DIExpression()), !dbg !8996
  call void @llvm.dbg.declare(metadata i32* %num_entry_edges, metadata !8997, metadata !DIExpression()), !dbg !8998
  call void @llvm.dbg.declare(metadata i32* %num_exit_edges, metadata !8999, metadata !DIExpression()), !dbg !9000
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !9001, metadata !DIExpression()), !dbg !9002
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !9003, metadata !DIExpression()), !dbg !9004
  call void @llvm.dbg.declare(metadata %struct.htab** %new_label_map, metadata !9005, metadata !DIExpression()), !dbg !9006
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t** %vars_map, metadata !9007, metadata !DIExpression()), !dbg !9008
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t** %eh_map, metadata !9009, metadata !DIExpression()), !dbg !9010
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !9011, metadata !DIExpression()), !dbg !9012
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb.addr, align 8, !dbg !9013
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 3, !dbg !9014
  %3 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !9014
  store %struct.loop* %3, %struct.loop** %loop, align 8, !dbg !9012
  call void @llvm.dbg.declare(metadata %struct.move_stmt_d* %d, metadata !9015, metadata !DIExpression()), !dbg !9016
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb.addr, align 8, !dbg !9017
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb.addr, align 8, !dbg !9017
  %cmp = icmp ne %struct.basic_block_def* %4, %5, !dbg !9017
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !9017

land.lhs.true:                                    ; preds = %entry
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb.addr, align 8, !dbg !9017
  %tobool = icmp ne %struct.basic_block_def* %6, null, !dbg !9017
  br i1 %tobool, label %lor.lhs.false, label %cond.false, !dbg !9017

lor.lhs.false:                                    ; preds = %land.lhs.true
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb.addr, align 8, !dbg !9017
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb.addr, align 8, !dbg !9017
  %call1 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %7, %struct.basic_block_def* %8), !dbg !9017
  %conv = zext i8 %call1 to i32, !dbg !9017
  %tobool2 = icmp ne i32 %conv, 0, !dbg !9017
  br i1 %tobool2, label %cond.false, label %cond.true, !dbg !9017

cond.true:                                        ; preds = %lor.lhs.false, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5967, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !9017
  br label %cond.end, !dbg !9017

cond.false:                                       ; preds = %lor.lhs.false, %land.lhs.true
  br label %cond.end, !dbg !9017

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9017
  store %struct.VEC_basic_block_heap* null, %struct.VEC_basic_block_heap** %bbs, align 8, !dbg !9018
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb.addr, align 8, !dbg !9019
  %call3 = call %struct.basic_block_def** @VEC_basic_block_heap_safe_push(%struct.VEC_basic_block_heap** %bbs, %struct.basic_block_def* %9), !dbg !9019
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb.addr, align 8, !dbg !9020
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb.addr, align 8, !dbg !9021
  call void @gather_blocks_in_sese_region(%struct.basic_block_def* %10, %struct.basic_block_def* %11, %struct.VEC_basic_block_heap** %bbs), !dbg !9022
  %12 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs, align 8, !dbg !9023
  %tobool4 = icmp ne %struct.VEC_basic_block_heap* %12, null, !dbg !9023
  br i1 %tobool4, label %cond.true5, label %cond.false6, !dbg !9023

cond.true5:                                       ; preds = %cond.end
  %13 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs, align 8, !dbg !9023
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %13, i32 0, i32 0, !dbg !9023
  br label %cond.end7, !dbg !9023

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !9023

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi %struct.VEC_basic_block_base* [ %base, %cond.true5 ], [ null, %cond.false6 ], !dbg !9023
  %call9 = call %struct.basic_block_def** @VEC_basic_block_base_address(%struct.VEC_basic_block_base* %cond8), !dbg !9023
  %14 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs, align 8, !dbg !9024
  %tobool10 = icmp ne %struct.VEC_basic_block_heap* %14, null, !dbg !9024
  br i1 %tobool10, label %cond.true11, label %cond.false13, !dbg !9024

cond.true11:                                      ; preds = %cond.end7
  %15 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs, align 8, !dbg !9024
  %base12 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %15, i32 0, i32 0, !dbg !9024
  br label %cond.end14, !dbg !9024

cond.false13:                                     ; preds = %cond.end7
  br label %cond.end14, !dbg !9024

cond.end14:                                       ; preds = %cond.false13, %cond.true11
  %cond15 = phi %struct.VEC_basic_block_base* [ %base12, %cond.true11 ], [ null, %cond.false13 ], !dbg !9024
  %call16 = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond15), !dbg !9024
  %call17 = call %struct.VEC_basic_block_heap* @get_dominated_by_region(i32 1, %struct.basic_block_def** %call9, i32 %call16), !dbg !9025
  store %struct.VEC_basic_block_heap* %call17, %struct.VEC_basic_block_heap** %dom_bbs, align 8, !dbg !9026
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb.addr, align 8, !dbg !9027
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 0, !dbg !9027
  %17 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !9027
  %tobool18 = icmp ne %struct.VEC_edge_gc* %17, null, !dbg !9027
  br i1 %tobool18, label %cond.true19, label %cond.false22, !dbg !9027

cond.true19:                                      ; preds = %cond.end14
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb.addr, align 8, !dbg !9027
  %preds20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 0, !dbg !9027
  %19 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds20, align 8, !dbg !9027
  %base21 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %19, i32 0, i32 0, !dbg !9027
  br label %cond.end23, !dbg !9027

cond.false22:                                     ; preds = %cond.end14
  br label %cond.end23, !dbg !9027

cond.end23:                                       ; preds = %cond.false22, %cond.true19
  %cond24 = phi %struct.VEC_edge_base* [ %base21, %cond.true19 ], [ null, %cond.false22 ], !dbg !9027
  %call25 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond24), !dbg !9027
  store i32 %call25, i32* %num_entry_edges, align 4, !dbg !9028
  %20 = load i32, i32* %num_entry_edges, align 4, !dbg !9029
  %conv26 = zext i32 %20 to i64, !dbg !9029
  %call27 = call i8* @xcalloc(i64 %conv26, i64 8), !dbg !9030
  %21 = bitcast i8* %call27 to %struct.basic_block_def**, !dbg !9031
  store %struct.basic_block_def** %21, %struct.basic_block_def*** %entry_pred, align 8, !dbg !9032
  %22 = load i32, i32* %num_entry_edges, align 4, !dbg !9033
  %conv28 = zext i32 %22 to i64, !dbg !9033
  %call29 = call i8* @xcalloc(i64 %conv28, i64 4), !dbg !9034
  %23 = bitcast i8* %call29 to i32*, !dbg !9035
  store i32* %23, i32** %entry_flag, align 8, !dbg !9036
  %24 = load i32, i32* %num_entry_edges, align 4, !dbg !9037
  %conv30 = zext i32 %24 to i64, !dbg !9037
  %mul = mul i64 4, %conv30, !dbg !9037
  %call31 = call i8* @xmalloc(i64 %mul), !dbg !9037
  %25 = bitcast i8* %call31 to i32*, !dbg !9037
  store i32* %25, i32** %entry_prob, align 8, !dbg !9038
  store i32 0, i32* %i, align 4, !dbg !9039
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb.addr, align 8, !dbg !9040
  %preds32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 0, !dbg !9040
  %call33 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds32), !dbg !9040
  %27 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !9040
  %28 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %27, i32 0, i32 0, !dbg !9040
  %29 = extractvalue { i32, %struct.VEC_edge_gc** } %call33, 0, !dbg !9040
  store i32 %29, i32* %28, align 8, !dbg !9040
  %30 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %27, i32 0, i32 1, !dbg !9040
  %31 = extractvalue { i32, %struct.VEC_edge_gc** } %call33, 1, !dbg !9040
  store %struct.VEC_edge_gc** %31, %struct.VEC_edge_gc*** %30, align 8, !dbg !9040
  %32 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !9040
  %33 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !9040
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 16, i1 false), !dbg !9040
  br label %for.cond, !dbg !9042

for.cond:                                         ; preds = %for.body, %cond.end23
  %34 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !9043
  %35 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %34, i32 0, i32 0, !dbg !9043
  %36 = load i32, i32* %35, align 8, !dbg !9043
  %37 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %34, i32 0, i32 1, !dbg !9043
  %38 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %37, align 8, !dbg !9043
  %call34 = call %struct.edge_def* @ei_safe_edge(i32 %36, %struct.VEC_edge_gc** %38), !dbg !9043
  store %struct.edge_def* %call34, %struct.edge_def** %e, align 8, !dbg !9045
  %cmp35 = icmp ne %struct.edge_def* %call34, null, !dbg !9046
  br i1 %cmp35, label %for.body, label %for.end, !dbg !9047

for.body:                                         ; preds = %for.cond
  %39 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9048
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %39, i32 0, i32 8, !dbg !9050
  %40 = load i32, i32* %probability, align 4, !dbg !9050
  %41 = load i32*, i32** %entry_prob, align 8, !dbg !9051
  %42 = load i32, i32* %i, align 4, !dbg !9052
  %idxprom = zext i32 %42 to i64, !dbg !9051
  %arrayidx = getelementptr inbounds i32, i32* %41, i64 %idxprom, !dbg !9051
  store i32 %40, i32* %arrayidx, align 4, !dbg !9053
  %43 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9054
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %43, i32 0, i32 7, !dbg !9055
  %44 = load i32, i32* %flags, align 8, !dbg !9055
  %45 = load i32*, i32** %entry_flag, align 8, !dbg !9056
  %46 = load i32, i32* %i, align 4, !dbg !9057
  %idxprom37 = zext i32 %46 to i64, !dbg !9056
  %arrayidx38 = getelementptr inbounds i32, i32* %45, i64 %idxprom37, !dbg !9056
  store i32 %44, i32* %arrayidx38, align 4, !dbg !9058
  %47 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9059
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %47, i32 0, i32 0, !dbg !9060
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !9060
  %49 = load %struct.basic_block_def**, %struct.basic_block_def*** %entry_pred, align 8, !dbg !9061
  %50 = load i32, i32* %i, align 4, !dbg !9062
  %inc = add i32 %50, 1, !dbg !9062
  store i32 %inc, i32* %i, align 4, !dbg !9062
  %idxprom39 = zext i32 %50 to i64, !dbg !9061
  %arrayidx40 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %49, i64 %idxprom39, !dbg !9061
  store %struct.basic_block_def* %48, %struct.basic_block_def** %arrayidx40, align 8, !dbg !9063
  %51 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9064
  call void @remove_edge(%struct.edge_def* %51), !dbg !9065
  br label %for.cond, !dbg !9066, !llvm.loop !9067

for.end:                                          ; preds = %for.cond
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb.addr, align 8, !dbg !9069
  %tobool41 = icmp ne %struct.basic_block_def* %52, null, !dbg !9069
  br i1 %tobool41, label %if.then, label %if.else, !dbg !9071

if.then:                                          ; preds = %for.end
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb.addr, align 8, !dbg !9072
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 1, !dbg !9072
  %54 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !9072
  %tobool42 = icmp ne %struct.VEC_edge_gc* %54, null, !dbg !9072
  br i1 %tobool42, label %cond.true43, label %cond.false46, !dbg !9072

cond.true43:                                      ; preds = %if.then
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb.addr, align 8, !dbg !9072
  %succs44 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 1, !dbg !9072
  %56 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs44, align 8, !dbg !9072
  %base45 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %56, i32 0, i32 0, !dbg !9072
  br label %cond.end47, !dbg !9072

cond.false46:                                     ; preds = %if.then
  br label %cond.end47, !dbg !9072

cond.end47:                                       ; preds = %cond.false46, %cond.true43
  %cond48 = phi %struct.VEC_edge_base* [ %base45, %cond.true43 ], [ null, %cond.false46 ], !dbg !9072
  %call49 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond48), !dbg !9072
  store i32 %call49, i32* %num_exit_edges, align 4, !dbg !9074
  %57 = load i32, i32* %num_exit_edges, align 4, !dbg !9075
  %conv50 = zext i32 %57 to i64, !dbg !9075
  %call51 = call i8* @xcalloc(i64 %conv50, i64 8), !dbg !9076
  %58 = bitcast i8* %call51 to %struct.basic_block_def**, !dbg !9077
  store %struct.basic_block_def** %58, %struct.basic_block_def*** %exit_succ, align 8, !dbg !9078
  %59 = load i32, i32* %num_exit_edges, align 4, !dbg !9079
  %conv52 = zext i32 %59 to i64, !dbg !9079
  %call53 = call i8* @xcalloc(i64 %conv52, i64 4), !dbg !9080
  %60 = bitcast i8* %call53 to i32*, !dbg !9081
  store i32* %60, i32** %exit_flag, align 8, !dbg !9082
  %61 = load i32, i32* %num_exit_edges, align 4, !dbg !9083
  %conv54 = zext i32 %61 to i64, !dbg !9083
  %mul55 = mul i64 4, %conv54, !dbg !9083
  %call56 = call i8* @xmalloc(i64 %mul55), !dbg !9083
  %62 = bitcast i8* %call56 to i32*, !dbg !9083
  store i32* %62, i32** %exit_prob, align 8, !dbg !9084
  store i32 0, i32* %i, align 4, !dbg !9085
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb.addr, align 8, !dbg !9086
  %succs58 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 1, !dbg !9086
  %call59 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs58), !dbg !9086
  %64 = bitcast %struct.edge_iterator* %tmp57 to { i32, %struct.VEC_edge_gc** }*, !dbg !9086
  %65 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %64, i32 0, i32 0, !dbg !9086
  %66 = extractvalue { i32, %struct.VEC_edge_gc** } %call59, 0, !dbg !9086
  store i32 %66, i32* %65, align 8, !dbg !9086
  %67 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %64, i32 0, i32 1, !dbg !9086
  %68 = extractvalue { i32, %struct.VEC_edge_gc** } %call59, 1, !dbg !9086
  store %struct.VEC_edge_gc** %68, %struct.VEC_edge_gc*** %67, align 8, !dbg !9086
  %69 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !9086
  %70 = bitcast %struct.edge_iterator* %tmp57 to i8*, !dbg !9086
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* align 8 %70, i64 16, i1 false), !dbg !9086
  br label %for.cond60, !dbg !9088

for.cond60:                                       ; preds = %for.body64, %cond.end47
  %71 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !9089
  %72 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %71, i32 0, i32 0, !dbg !9089
  %73 = load i32, i32* %72, align 8, !dbg !9089
  %74 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %71, i32 0, i32 1, !dbg !9089
  %75 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %74, align 8, !dbg !9089
  %call61 = call %struct.edge_def* @ei_safe_edge(i32 %73, %struct.VEC_edge_gc** %75), !dbg !9089
  store %struct.edge_def* %call61, %struct.edge_def** %e, align 8, !dbg !9091
  %cmp62 = icmp ne %struct.edge_def* %call61, null, !dbg !9092
  br i1 %cmp62, label %for.body64, label %for.end74, !dbg !9093

for.body64:                                       ; preds = %for.cond60
  %76 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9094
  %probability65 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %76, i32 0, i32 8, !dbg !9096
  %77 = load i32, i32* %probability65, align 4, !dbg !9096
  %78 = load i32*, i32** %exit_prob, align 8, !dbg !9097
  %79 = load i32, i32* %i, align 4, !dbg !9098
  %idxprom66 = zext i32 %79 to i64, !dbg !9097
  %arrayidx67 = getelementptr inbounds i32, i32* %78, i64 %idxprom66, !dbg !9097
  store i32 %77, i32* %arrayidx67, align 4, !dbg !9099
  %80 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9100
  %flags68 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %80, i32 0, i32 7, !dbg !9101
  %81 = load i32, i32* %flags68, align 8, !dbg !9101
  %82 = load i32*, i32** %exit_flag, align 8, !dbg !9102
  %83 = load i32, i32* %i, align 4, !dbg !9103
  %idxprom69 = zext i32 %83 to i64, !dbg !9102
  %arrayidx70 = getelementptr inbounds i32, i32* %82, i64 %idxprom69, !dbg !9102
  store i32 %81, i32* %arrayidx70, align 4, !dbg !9104
  %84 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9105
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %84, i32 0, i32 1, !dbg !9106
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !9106
  %86 = load %struct.basic_block_def**, %struct.basic_block_def*** %exit_succ, align 8, !dbg !9107
  %87 = load i32, i32* %i, align 4, !dbg !9108
  %inc71 = add i32 %87, 1, !dbg !9108
  store i32 %inc71, i32* %i, align 4, !dbg !9108
  %idxprom72 = zext i32 %87 to i64, !dbg !9107
  %arrayidx73 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %86, i64 %idxprom72, !dbg !9107
  store %struct.basic_block_def* %85, %struct.basic_block_def** %arrayidx73, align 8, !dbg !9109
  %88 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9110
  call void @remove_edge(%struct.edge_def* %88), !dbg !9111
  br label %for.cond60, !dbg !9112, !llvm.loop !9113

for.end74:                                        ; preds = %for.cond60
  br label %if.end, !dbg !9115

if.else:                                          ; preds = %for.end
  store i32 0, i32* %num_exit_edges, align 4, !dbg !9116
  store %struct.basic_block_def** null, %struct.basic_block_def*** %exit_succ, align 8, !dbg !9118
  store i32* null, i32** %exit_flag, align 8, !dbg !9119
  store i32* null, i32** %exit_prob, align 8, !dbg !9120
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end74
  %89 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9121
  %cfg = getelementptr inbounds %struct.function, %struct.function* %89, i32 0, i32 1, !dbg !9121
  %90 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9121
  %cmp75 = icmp eq %struct.control_flow_graph* %90, null, !dbg !9121
  br i1 %cmp75, label %cond.false78, label %cond.true77, !dbg !9121

cond.true77:                                      ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 6023, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !9121
  br label %cond.end79, !dbg !9121

cond.false78:                                     ; preds = %if.end
  br label %cond.end79, !dbg !9121

cond.end79:                                       ; preds = %cond.false78, %cond.true77
  %cond80 = phi i32 [ 0, %cond.true77 ], [ 0, %cond.false78 ], !dbg !9121
  %91 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9122
  call void @push_cfun(%struct.function* %91), !dbg !9123
  call void @init_empty_tree_cfg(), !dbg !9124
  store %struct.pointer_map_t* null, %struct.pointer_map_t** %eh_map, align 8, !dbg !9125
  store %struct.htab* null, %struct.htab** %new_label_map, align 8, !dbg !9126
  %92 = load %struct.function*, %struct.function** %saved_cfun, align 8, !dbg !9127
  %eh = getelementptr inbounds %struct.function, %struct.function* %92, i32 0, i32 0, !dbg !9129
  %93 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !9129
  %tobool81 = icmp ne %struct.eh_status* %93, null, !dbg !9127
  br i1 %tobool81, label %if.then82, label %if.end102, !dbg !9130

if.then82:                                        ; preds = %cond.end79
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %region, metadata !9131, metadata !DIExpression()), !dbg !9133
  store %struct.eh_region_d* null, %struct.eh_region_d** %region, align 8, !dbg !9133
  store i32 0, i32* %i, align 4, !dbg !9134
  br label %for.cond83, !dbg !9136

for.cond83:                                       ; preds = %for.inc, %if.then82
  %94 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs, align 8, !dbg !9137
  %tobool84 = icmp ne %struct.VEC_basic_block_heap* %94, null, !dbg !9137
  br i1 %tobool84, label %cond.true85, label %cond.false87, !dbg !9137

cond.true85:                                      ; preds = %for.cond83
  %95 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs, align 8, !dbg !9137
  %base86 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %95, i32 0, i32 0, !dbg !9137
  br label %cond.end88, !dbg !9137

cond.false87:                                     ; preds = %for.cond83
  br label %cond.end88, !dbg !9137

cond.end88:                                       ; preds = %cond.false87, %cond.true85
  %cond89 = phi %struct.VEC_basic_block_base* [ %base86, %cond.true85 ], [ null, %cond.false87 ], !dbg !9137
  %96 = load i32, i32* %i, align 4, !dbg !9137
  %call90 = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond89, i32 %96, %struct.basic_block_def** %bb), !dbg !9137
  %tobool91 = icmp ne i32 %call90, 0, !dbg !9139
  br i1 %tobool91, label %for.body92, label %for.end95, !dbg !9139

for.body92:                                       ; preds = %cond.end88
  %97 = load %struct.function*, %struct.function** %saved_cfun, align 8, !dbg !9140
  %98 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9141
  %99 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !9142
  %call93 = call %struct.eh_region_d* @find_outermost_region_in_block(%struct.function* %97, %struct.basic_block_def* %98, %struct.eh_region_d* %99), !dbg !9143
  store %struct.eh_region_d* %call93, %struct.eh_region_d** %region, align 8, !dbg !9144
  br label %for.inc, !dbg !9145

for.inc:                                          ; preds = %for.body92
  %100 = load i32, i32* %i, align 4, !dbg !9146
  %inc94 = add i32 %100, 1, !dbg !9146
  store i32 %inc94, i32* %i, align 4, !dbg !9146
  br label %for.cond83, !dbg !9147, !llvm.loop !9148

for.end95:                                        ; preds = %cond.end88
  call void @init_eh_for_function(), !dbg !9150
  %101 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !9151
  %cmp96 = icmp ne %struct.eh_region_d* %101, null, !dbg !9153
  br i1 %cmp96, label %if.then98, label %if.end101, !dbg !9154

if.then98:                                        ; preds = %for.end95
  %call99 = call %struct.htab* @htab_create(i64 17, i32 (i8*)* @tree_map_hash, i32 (i8*, i8*)* @tree_map_base_eq, void (i8*)* @free), !dbg !9155
  store %struct.htab* %call99, %struct.htab** %new_label_map, align 8, !dbg !9157
  %102 = load %struct.function*, %struct.function** %saved_cfun, align 8, !dbg !9158
  %103 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !9159
  %104 = load %struct.htab*, %struct.htab** %new_label_map, align 8, !dbg !9160
  %105 = bitcast %struct.htab* %104 to i8*, !dbg !9160
  %call100 = call %struct.pointer_map_t* @duplicate_eh_regions(%struct.function* %102, %struct.eh_region_d* %103, i32 0, %union.tree_node* (%union.tree_node*, i8*)* @new_label_mapper, i8* %105), !dbg !9161
  store %struct.pointer_map_t* %call100, %struct.pointer_map_t** %eh_map, align 8, !dbg !9162
  br label %if.end101, !dbg !9163

if.end101:                                        ; preds = %if.then98, %for.end95
  br label %if.end102, !dbg !9164

if.end102:                                        ; preds = %if.end101, %cond.end79
  call void @pop_cfun(), !dbg !9165
  %106 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs, align 8, !dbg !9166
  %tobool103 = icmp ne %struct.VEC_basic_block_heap* %106, null, !dbg !9166
  br i1 %tobool103, label %cond.true104, label %cond.false106, !dbg !9166

cond.true104:                                     ; preds = %if.end102
  %107 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs, align 8, !dbg !9166
  %base105 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %107, i32 0, i32 0, !dbg !9166
  br label %cond.end107, !dbg !9166

cond.false106:                                    ; preds = %if.end102
  br label %cond.end107, !dbg !9166

cond.end107:                                      ; preds = %cond.false106, %cond.true104
  %cond108 = phi %struct.VEC_basic_block_base* [ %base105, %cond.true104 ], [ null, %cond.false106 ], !dbg !9166
  %call109 = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond108), !dbg !9166
  %cmp110 = icmp uge i32 %call109, 2, !dbg !9166
  br i1 %cmp110, label %cond.false113, label %cond.true112, !dbg !9166

cond.true112:                                     ; preds = %cond.end107
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 6050, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !9166
  br label %cond.end114, !dbg !9166

cond.false113:                                    ; preds = %cond.end107
  br label %cond.end114, !dbg !9166

cond.end114:                                      ; preds = %cond.false113, %cond.true112
  %cond115 = phi i32 [ 0, %cond.true112 ], [ 0, %cond.false113 ], !dbg !9166
  %108 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9167
  %cfg116 = getelementptr inbounds %struct.function, %struct.function* %108, i32 0, i32 1, !dbg !9168
  %109 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg116, align 8, !dbg !9168
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %109, i32 0, i32 0, !dbg !9169
  %110 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !9169
  store %struct.basic_block_def* %110, %struct.basic_block_def** %after, align 8, !dbg !9170
  %call117 = call %struct.pointer_map_t* @pointer_map_create(), !dbg !9171
  store %struct.pointer_map_t* %call117, %struct.pointer_map_t** %vars_map, align 8, !dbg !9172
  %111 = bitcast %struct.move_stmt_d* %d to i8*, !dbg !9173
  call void @llvm.memset.p0i8.i64(i8* align 8 %111, i8 0, i64 64, i1 false), !dbg !9173
  %112 = load %union.tree_node*, %union.tree_node** %orig_block.addr, align 8, !dbg !9174
  %orig_block118 = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %d, i32 0, i32 0, !dbg !9175
  store %union.tree_node* %112, %union.tree_node** %orig_block118, align 8, !dbg !9176
  %113 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9177
  %decl = getelementptr inbounds %struct.function, %struct.function* %113, i32 0, i32 6, !dbg !9177
  %114 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9177
  %decl_common = bitcast %union.tree_node* %114 to %struct.tree_decl_common*, !dbg !9177
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !9177
  %115 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !9177
  %new_block = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %d, i32 0, i32 1, !dbg !9178
  store %union.tree_node* %115, %union.tree_node** %new_block, align 8, !dbg !9179
  %116 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9180
  %add.ptr119 = getelementptr inbounds %struct.function, %struct.function* %116, i64 0, !dbg !9180
  %decl120 = getelementptr inbounds %struct.function, %struct.function* %add.ptr119, i32 0, i32 6, !dbg !9181
  %117 = load %union.tree_node*, %union.tree_node** %decl120, align 8, !dbg !9181
  %from_context = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %d, i32 0, i32 2, !dbg !9182
  store %union.tree_node* %117, %union.tree_node** %from_context, align 8, !dbg !9183
  %118 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9184
  %decl121 = getelementptr inbounds %struct.function, %struct.function* %118, i32 0, i32 6, !dbg !9185
  %119 = load %union.tree_node*, %union.tree_node** %decl121, align 8, !dbg !9185
  %to_context = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %d, i32 0, i32 3, !dbg !9186
  store %union.tree_node* %119, %union.tree_node** %to_context, align 8, !dbg !9187
  %120 = load %struct.pointer_map_t*, %struct.pointer_map_t** %vars_map, align 8, !dbg !9188
  %vars_map122 = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %d, i32 0, i32 4, !dbg !9189
  store %struct.pointer_map_t* %120, %struct.pointer_map_t** %vars_map122, align 8, !dbg !9190
  %121 = load %struct.htab*, %struct.htab** %new_label_map, align 8, !dbg !9191
  %new_label_map123 = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %d, i32 0, i32 5, !dbg !9192
  store %struct.htab* %121, %struct.htab** %new_label_map123, align 8, !dbg !9193
  %122 = load %struct.pointer_map_t*, %struct.pointer_map_t** %eh_map, align 8, !dbg !9194
  %eh_map124 = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %d, i32 0, i32 6, !dbg !9195
  store %struct.pointer_map_t* %122, %struct.pointer_map_t** %eh_map124, align 8, !dbg !9196
  %remap_decls_p = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %d, i32 0, i32 7, !dbg !9197
  store i8 1, i8* %remap_decls_p, align 8, !dbg !9198
  store i32 0, i32* %i, align 4, !dbg !9199
  br label %for.cond125, !dbg !9201

for.cond125:                                      ; preds = %for.inc138, %cond.end114
  %123 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs, align 8, !dbg !9202
  %tobool126 = icmp ne %struct.VEC_basic_block_heap* %123, null, !dbg !9202
  br i1 %tobool126, label %cond.true127, label %cond.false129, !dbg !9202

cond.true127:                                     ; preds = %for.cond125
  %124 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs, align 8, !dbg !9202
  %base128 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %124, i32 0, i32 0, !dbg !9202
  br label %cond.end130, !dbg !9202

cond.false129:                                    ; preds = %for.cond125
  br label %cond.end130, !dbg !9202

cond.end130:                                      ; preds = %cond.false129, %cond.true127
  %cond131 = phi %struct.VEC_basic_block_base* [ %base128, %cond.true127 ], [ null, %cond.false129 ], !dbg !9202
  %125 = load i32, i32* %i, align 4, !dbg !9202
  %call132 = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond131, i32 %125, %struct.basic_block_def** %bb), !dbg !9202
  %tobool133 = icmp ne i32 %call132, 0, !dbg !9204
  br i1 %tobool133, label %for.body134, label %for.end140, !dbg !9204

for.body134:                                      ; preds = %cond.end130
  %126 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9205
  %127 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9207
  %128 = load %struct.basic_block_def*, %struct.basic_block_def** %after, align 8, !dbg !9208
  %129 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9209
  %130 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb.addr, align 8, !dbg !9210
  %cmp135 = icmp ne %struct.basic_block_def* %129, %130, !dbg !9211
  %conv136 = zext i1 %cmp135 to i32, !dbg !9211
  %conv137 = trunc i32 %conv136 to i8, !dbg !9209
  call void @move_block_to_fn(%struct.function* %126, %struct.basic_block_def* %127, %struct.basic_block_def* %128, i8 zeroext %conv137, %struct.move_stmt_d* %d), !dbg !9212
  %131 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9213
  store %struct.basic_block_def* %131, %struct.basic_block_def** %after, align 8, !dbg !9214
  br label %for.inc138, !dbg !9215

for.inc138:                                       ; preds = %for.body134
  %132 = load i32, i32* %i, align 4, !dbg !9216
  %inc139 = add i32 %132, 1, !dbg !9216
  store i32 %inc139, i32* %i, align 4, !dbg !9216
  br label %for.cond125, !dbg !9217, !llvm.loop !9218

for.end140:                                       ; preds = %cond.end130
  %133 = load %union.tree_node*, %union.tree_node** %orig_block.addr, align 8, !dbg !9220
  %tobool141 = icmp ne %union.tree_node* %133, null, !dbg !9220
  br i1 %tobool141, label %if.then142, label %if.end173, !dbg !9222

if.then142:                                       ; preds = %for.end140
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !9223, metadata !DIExpression()), !dbg !9225
  %134 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9226
  %decl143 = getelementptr inbounds %struct.function, %struct.function* %134, i32 0, i32 6, !dbg !9226
  %135 = load %union.tree_node*, %union.tree_node** %decl143, align 8, !dbg !9226
  %decl_common144 = bitcast %union.tree_node* %135 to %struct.tree_decl_common*, !dbg !9226
  %initial145 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common144, i32 0, i32 5, !dbg !9226
  %136 = load %union.tree_node*, %union.tree_node** %initial145, align 8, !dbg !9226
  %block146 = bitcast %union.tree_node* %136 to %struct.tree_block*, !dbg !9226
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block146, i32 0, i32 5, !dbg !9226
  %137 = load %union.tree_node*, %union.tree_node** %subblocks, align 8, !dbg !9226
  %cmp147 = icmp eq %union.tree_node* %137, null, !dbg !9226
  br i1 %cmp147, label %cond.false150, label %cond.true149, !dbg !9226

cond.true149:                                     ; preds = %if.then142
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 6078, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !9226
  br label %cond.end151, !dbg !9226

cond.false150:                                    ; preds = %if.then142
  br label %cond.end151, !dbg !9226

cond.end151:                                      ; preds = %cond.false150, %cond.true149
  %cond152 = phi i32 [ 0, %cond.true149 ], [ 0, %cond.false150 ], !dbg !9226
  %138 = load %union.tree_node*, %union.tree_node** %orig_block.addr, align 8, !dbg !9227
  %block153 = bitcast %union.tree_node* %138 to %struct.tree_block*, !dbg !9227
  %subblocks154 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block153, i32 0, i32 5, !dbg !9227
  %139 = load %union.tree_node*, %union.tree_node** %subblocks154, align 8, !dbg !9227
  %140 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9228
  %decl155 = getelementptr inbounds %struct.function, %struct.function* %140, i32 0, i32 6, !dbg !9228
  %141 = load %union.tree_node*, %union.tree_node** %decl155, align 8, !dbg !9228
  %decl_common156 = bitcast %union.tree_node* %141 to %struct.tree_decl_common*, !dbg !9228
  %initial157 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common156, i32 0, i32 5, !dbg !9228
  %142 = load %union.tree_node*, %union.tree_node** %initial157, align 8, !dbg !9228
  %block158 = bitcast %union.tree_node* %142 to %struct.tree_block*, !dbg !9228
  %subblocks159 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block158, i32 0, i32 5, !dbg !9228
  store %union.tree_node* %139, %union.tree_node** %subblocks159, align 8, !dbg !9229
  %143 = load %union.tree_node*, %union.tree_node** %orig_block.addr, align 8, !dbg !9230
  %block160 = bitcast %union.tree_node* %143 to %struct.tree_block*, !dbg !9230
  %subblocks161 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block160, i32 0, i32 5, !dbg !9230
  %144 = load %union.tree_node*, %union.tree_node** %subblocks161, align 8, !dbg !9230
  store %union.tree_node* %144, %union.tree_node** %block, align 8, !dbg !9232
  br label %for.cond162, !dbg !9233

for.cond162:                                      ; preds = %for.inc169, %cond.end151
  %145 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !9234
  %tobool163 = icmp ne %union.tree_node* %145, null, !dbg !9236
  br i1 %tobool163, label %for.body164, label %for.end170, !dbg !9236

for.body164:                                      ; preds = %for.cond162
  %146 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9237
  %decl165 = getelementptr inbounds %struct.function, %struct.function* %146, i32 0, i32 6, !dbg !9237
  %147 = load %union.tree_node*, %union.tree_node** %decl165, align 8, !dbg !9237
  %decl_common166 = bitcast %union.tree_node* %147 to %struct.tree_decl_common*, !dbg !9237
  %initial167 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common166, i32 0, i32 5, !dbg !9237
  %148 = load %union.tree_node*, %union.tree_node** %initial167, align 8, !dbg !9237
  %149 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !9238
  %block168 = bitcast %union.tree_node* %149 to %struct.tree_block*, !dbg !9238
  %supercontext = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block168, i32 0, i32 6, !dbg !9238
  store %union.tree_node* %148, %union.tree_node** %supercontext, align 8, !dbg !9239
  br label %for.inc169, !dbg !9238

for.inc169:                                       ; preds = %for.body164
  %150 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !9240
  %common = bitcast %union.tree_node* %150 to %struct.tree_common*, !dbg !9240
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !9240
  %151 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !9240
  store %union.tree_node* %151, %union.tree_node** %block, align 8, !dbg !9241
  br label %for.cond162, !dbg !9242, !llvm.loop !9243

for.end170:                                       ; preds = %for.cond162
  %152 = load %union.tree_node*, %union.tree_node** %orig_block.addr, align 8, !dbg !9245
  %block171 = bitcast %union.tree_node* %152 to %struct.tree_block*, !dbg !9245
  %subblocks172 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block171, i32 0, i32 5, !dbg !9245
  store %union.tree_node* null, %union.tree_node** %subblocks172, align 8, !dbg !9246
  br label %if.end173, !dbg !9247

if.end173:                                        ; preds = %for.end170, %for.end140
  %153 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9248
  %decl174 = getelementptr inbounds %struct.function, %struct.function* %153, i32 0, i32 6, !dbg !9248
  %154 = load %union.tree_node*, %union.tree_node** %decl174, align 8, !dbg !9248
  %decl_common175 = bitcast %union.tree_node* %154 to %struct.tree_decl_common*, !dbg !9248
  %initial176 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common175, i32 0, i32 5, !dbg !9248
  %155 = load %union.tree_node*, %union.tree_node** %initial176, align 8, !dbg !9248
  %156 = load %struct.pointer_map_t*, %struct.pointer_map_t** %vars_map, align 8, !dbg !9249
  %157 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9250
  %decl177 = getelementptr inbounds %struct.function, %struct.function* %157, i32 0, i32 6, !dbg !9251
  %158 = load %union.tree_node*, %union.tree_node** %decl177, align 8, !dbg !9251
  call void @replace_block_vars_by_duplicates(%union.tree_node* %155, %struct.pointer_map_t* %156, %union.tree_node* %158), !dbg !9252
  %159 = load %struct.htab*, %struct.htab** %new_label_map, align 8, !dbg !9253
  %tobool178 = icmp ne %struct.htab* %159, null, !dbg !9253
  br i1 %tobool178, label %if.then179, label %if.end180, !dbg !9255

if.then179:                                       ; preds = %if.end173
  %160 = load %struct.htab*, %struct.htab** %new_label_map, align 8, !dbg !9256
  call void @htab_delete(%struct.htab* %160), !dbg !9257
  br label %if.end180, !dbg !9257

if.end180:                                        ; preds = %if.then179, %if.end173
  %161 = load %struct.pointer_map_t*, %struct.pointer_map_t** %eh_map, align 8, !dbg !9258
  %tobool181 = icmp ne %struct.pointer_map_t* %161, null, !dbg !9258
  br i1 %tobool181, label %if.then182, label %if.end183, !dbg !9260

if.then182:                                       ; preds = %if.end180
  %162 = load %struct.pointer_map_t*, %struct.pointer_map_t** %eh_map, align 8, !dbg !9261
  call void @pointer_map_destroy(%struct.pointer_map_t* %162), !dbg !9262
  br label %if.end183, !dbg !9262

if.end183:                                        ; preds = %if.then182, %if.end180
  %163 = load %struct.pointer_map_t*, %struct.pointer_map_t** %vars_map, align 8, !dbg !9263
  call void @pointer_map_destroy(%struct.pointer_map_t* %163), !dbg !9264
  %164 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9265
  call void @push_cfun(%struct.function* %164), !dbg !9266
  %165 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9267
  %add.ptr184 = getelementptr inbounds %struct.function, %struct.function* %165, i64 0, !dbg !9267
  %cfg185 = getelementptr inbounds %struct.function, %struct.function* %add.ptr184, i32 0, i32 1, !dbg !9267
  %166 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg185, align 8, !dbg !9267
  %x_entry_block_ptr186 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %166, i32 0, i32 0, !dbg !9267
  %167 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr186, align 8, !dbg !9267
  %168 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb.addr, align 8, !dbg !9268
  %call187 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %167, %struct.basic_block_def* %168, i32 1), !dbg !9269
  %169 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb.addr, align 8, !dbg !9270
  %tobool188 = icmp ne %struct.basic_block_def* %169, null, !dbg !9270
  br i1 %tobool188, label %if.then189, label %if.end193, !dbg !9272

if.then189:                                       ; preds = %if.end183
  %170 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb.addr, align 8, !dbg !9273
  %171 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9274
  %add.ptr190 = getelementptr inbounds %struct.function, %struct.function* %171, i64 0, !dbg !9274
  %cfg191 = getelementptr inbounds %struct.function, %struct.function* %add.ptr190, i32 0, i32 1, !dbg !9274
  %172 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg191, align 8, !dbg !9274
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %172, i32 0, i32 1, !dbg !9274
  %173 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !9274
  %call192 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %170, %struct.basic_block_def* %173, i32 0), !dbg !9275
  br label %if.end193, !dbg !9275

if.end193:                                        ; preds = %if.then189, %if.end183
  call void @pop_cfun(), !dbg !9276
  %174 = load %struct.basic_block_def**, %struct.basic_block_def*** %entry_pred, align 8, !dbg !9277
  %arrayidx194 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %174, i64 0, !dbg !9277
  %175 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx194, align 8, !dbg !9277
  %call195 = call %struct.basic_block_def* @create_empty_bb(%struct.basic_block_def* %175), !dbg !9278
  store %struct.basic_block_def* %call195, %struct.basic_block_def** %bb, align 8, !dbg !9279
  %176 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9280
  %add.ptr196 = getelementptr inbounds %struct.function, %struct.function* %176, i64 0, !dbg !9280
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr196, i32 0, i32 4, !dbg !9280
  %177 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !9280
  %tobool197 = icmp ne %struct.loops* %177, null, !dbg !9280
  br i1 %tobool197, label %if.then198, label %if.end199, !dbg !9282

if.then198:                                       ; preds = %if.end193
  %178 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9283
  %179 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !9284
  call void @add_bb_to_loop(%struct.basic_block_def* %178, %struct.loop* %179), !dbg !9285
  br label %if.end199, !dbg !9285

if.end199:                                        ; preds = %if.then198, %if.end193
  store i32 0, i32* %i, align 4, !dbg !9286
  br label %for.cond200, !dbg !9288

for.cond200:                                      ; preds = %for.inc212, %if.end199
  %180 = load i32, i32* %i, align 4, !dbg !9289
  %181 = load i32, i32* %num_entry_edges, align 4, !dbg !9291
  %cmp201 = icmp ult i32 %180, %181, !dbg !9292
  br i1 %cmp201, label %for.body203, label %for.end214, !dbg !9293

for.body203:                                      ; preds = %for.cond200
  %182 = load %struct.basic_block_def**, %struct.basic_block_def*** %entry_pred, align 8, !dbg !9294
  %183 = load i32, i32* %i, align 4, !dbg !9296
  %idxprom204 = zext i32 %183 to i64, !dbg !9294
  %arrayidx205 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %182, i64 %idxprom204, !dbg !9294
  %184 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx205, align 8, !dbg !9294
  %185 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9297
  %186 = load i32*, i32** %entry_flag, align 8, !dbg !9298
  %187 = load i32, i32* %i, align 4, !dbg !9299
  %idxprom206 = zext i32 %187 to i64, !dbg !9298
  %arrayidx207 = getelementptr inbounds i32, i32* %186, i64 %idxprom206, !dbg !9298
  %188 = load i32, i32* %arrayidx207, align 4, !dbg !9298
  %call208 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %184, %struct.basic_block_def* %185, i32 %188), !dbg !9300
  store %struct.edge_def* %call208, %struct.edge_def** %e, align 8, !dbg !9301
  %189 = load i32*, i32** %entry_prob, align 8, !dbg !9302
  %190 = load i32, i32* %i, align 4, !dbg !9303
  %idxprom209 = zext i32 %190 to i64, !dbg !9302
  %arrayidx210 = getelementptr inbounds i32, i32* %189, i64 %idxprom209, !dbg !9302
  %191 = load i32, i32* %arrayidx210, align 4, !dbg !9302
  %192 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9304
  %probability211 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %192, i32 0, i32 8, !dbg !9305
  store i32 %191, i32* %probability211, align 4, !dbg !9306
  br label %for.inc212, !dbg !9307

for.inc212:                                       ; preds = %for.body203
  %193 = load i32, i32* %i, align 4, !dbg !9308
  %inc213 = add i32 %193, 1, !dbg !9308
  store i32 %inc213, i32* %i, align 4, !dbg !9308
  br label %for.cond200, !dbg !9309, !llvm.loop !9310

for.end214:                                       ; preds = %for.cond200
  store i32 0, i32* %i, align 4, !dbg !9312
  br label %for.cond215, !dbg !9314

for.cond215:                                      ; preds = %for.inc227, %for.end214
  %194 = load i32, i32* %i, align 4, !dbg !9315
  %195 = load i32, i32* %num_exit_edges, align 4, !dbg !9317
  %cmp216 = icmp ult i32 %194, %195, !dbg !9318
  br i1 %cmp216, label %for.body218, label %for.end229, !dbg !9319

for.body218:                                      ; preds = %for.cond215
  %196 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9320
  %197 = load %struct.basic_block_def**, %struct.basic_block_def*** %exit_succ, align 8, !dbg !9322
  %198 = load i32, i32* %i, align 4, !dbg !9323
  %idxprom219 = zext i32 %198 to i64, !dbg !9322
  %arrayidx220 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %197, i64 %idxprom219, !dbg !9322
  %199 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx220, align 8, !dbg !9322
  %200 = load i32*, i32** %exit_flag, align 8, !dbg !9324
  %201 = load i32, i32* %i, align 4, !dbg !9325
  %idxprom221 = zext i32 %201 to i64, !dbg !9324
  %arrayidx222 = getelementptr inbounds i32, i32* %200, i64 %idxprom221, !dbg !9324
  %202 = load i32, i32* %arrayidx222, align 4, !dbg !9324
  %call223 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %196, %struct.basic_block_def* %199, i32 %202), !dbg !9326
  store %struct.edge_def* %call223, %struct.edge_def** %e, align 8, !dbg !9327
  %203 = load i32*, i32** %exit_prob, align 8, !dbg !9328
  %204 = load i32, i32* %i, align 4, !dbg !9329
  %idxprom224 = zext i32 %204 to i64, !dbg !9328
  %arrayidx225 = getelementptr inbounds i32, i32* %203, i64 %idxprom224, !dbg !9328
  %205 = load i32, i32* %arrayidx225, align 4, !dbg !9328
  %206 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9330
  %probability226 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %206, i32 0, i32 8, !dbg !9331
  store i32 %205, i32* %probability226, align 4, !dbg !9332
  br label %for.inc227, !dbg !9333

for.inc227:                                       ; preds = %for.body218
  %207 = load i32, i32* %i, align 4, !dbg !9334
  %inc228 = add i32 %207, 1, !dbg !9334
  store i32 %inc228, i32* %i, align 4, !dbg !9334
  br label %for.cond215, !dbg !9335, !llvm.loop !9336

for.end229:                                       ; preds = %for.cond215
  %208 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9338
  %209 = load %struct.basic_block_def*, %struct.basic_block_def** %dom_entry, align 8, !dbg !9339
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %208, %struct.basic_block_def* %209), !dbg !9340
  store i32 0, i32* %i, align 4, !dbg !9341
  br label %for.cond230, !dbg !9343

for.cond230:                                      ; preds = %for.inc240, %for.end229
  %210 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %dom_bbs, align 8, !dbg !9344
  %tobool231 = icmp ne %struct.VEC_basic_block_heap* %210, null, !dbg !9344
  br i1 %tobool231, label %cond.true232, label %cond.false234, !dbg !9344

cond.true232:                                     ; preds = %for.cond230
  %211 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %dom_bbs, align 8, !dbg !9344
  %base233 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %211, i32 0, i32 0, !dbg !9344
  br label %cond.end235, !dbg !9344

cond.false234:                                    ; preds = %for.cond230
  br label %cond.end235, !dbg !9344

cond.end235:                                      ; preds = %cond.false234, %cond.true232
  %cond236 = phi %struct.VEC_basic_block_base* [ %base233, %cond.true232 ], [ null, %cond.false234 ], !dbg !9344
  %212 = load i32, i32* %i, align 4, !dbg !9344
  %call237 = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond236, i32 %212, %struct.basic_block_def** %abb), !dbg !9344
  %tobool238 = icmp ne i32 %call237, 0, !dbg !9346
  br i1 %tobool238, label %for.body239, label %for.end242, !dbg !9346

for.body239:                                      ; preds = %cond.end235
  %213 = load %struct.basic_block_def*, %struct.basic_block_def** %abb, align 8, !dbg !9347
  %214 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9348
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %213, %struct.basic_block_def* %214), !dbg !9349
  br label %for.inc240, !dbg !9349

for.inc240:                                       ; preds = %for.body239
  %215 = load i32, i32* %i, align 4, !dbg !9350
  %inc241 = add i32 %215, 1, !dbg !9350
  store i32 %inc241, i32* %i, align 4, !dbg !9350
  br label %for.cond230, !dbg !9351, !llvm.loop !9352

for.end242:                                       ; preds = %cond.end235
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %dom_bbs), !dbg !9354
  %216 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb.addr, align 8, !dbg !9355
  %tobool243 = icmp ne %struct.basic_block_def* %216, null, !dbg !9355
  br i1 %tobool243, label %if.then244, label %if.end245, !dbg !9357

if.then244:                                       ; preds = %for.end242
  %217 = load i32*, i32** %exit_prob, align 8, !dbg !9358
  %218 = bitcast i32* %217 to i8*, !dbg !9358
  call void @free(i8* %218), !dbg !9360
  %219 = load i32*, i32** %exit_flag, align 8, !dbg !9361
  %220 = bitcast i32* %219 to i8*, !dbg !9361
  call void @free(i8* %220), !dbg !9362
  %221 = load %struct.basic_block_def**, %struct.basic_block_def*** %exit_succ, align 8, !dbg !9363
  %222 = bitcast %struct.basic_block_def** %221 to i8*, !dbg !9363
  call void @free(i8* %222), !dbg !9364
  br label %if.end245, !dbg !9365

if.end245:                                        ; preds = %if.then244, %for.end242
  %223 = load i32*, i32** %entry_prob, align 8, !dbg !9366
  %224 = bitcast i32* %223 to i8*, !dbg !9366
  call void @free(i8* %224), !dbg !9367
  %225 = load i32*, i32** %entry_flag, align 8, !dbg !9368
  %226 = bitcast i32* %225 to i8*, !dbg !9368
  call void @free(i8* %226), !dbg !9369
  %227 = load %struct.basic_block_def**, %struct.basic_block_def*** %entry_pred, align 8, !dbg !9370
  %228 = bitcast %struct.basic_block_def** %227 to i8*, !dbg !9370
  call void @free(i8* %228), !dbg !9371
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %bbs), !dbg !9372
  %229 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9373
  ret %struct.basic_block_def* %229, !dbg !9374
}

declare dso_local %struct.basic_block_def* @get_immediate_dominator(i32, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def** @VEC_basic_block_base_address(%struct.VEC_basic_block_base* %vec_) #0 !dbg !9375 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !9378, metadata !DIExpression()), !dbg !9379
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !9379
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !9379
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9379

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !9379
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %1, i32 0, i32 2, !dbg !9379
  %arraydecay = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 0, !dbg !9379
  br label %cond.end, !dbg !9379

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9379

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !9379
  ret %struct.basic_block_def** %cond, !dbg !9379
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_safe_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !9380 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !9383, metadata !DIExpression()), !dbg !9384
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !9385
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !9385
  %5 = load i32, i32* %4, align 8, !dbg !9385
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !9385
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !9385
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !9385
  %tobool = icmp ne i8 %call, 0, !dbg !9385
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !9386

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !9387
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !9387
  %10 = load i32, i32* %9, align 8, !dbg !9387
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !9387
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !9387
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !9387
  br label %cond.end, !dbg !9386

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9386

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.edge_def* [ %call1, %cond.true ], [ null, %cond.false ], !dbg !9386
  ret %struct.edge_def* %cond, !dbg !9388
}

declare dso_local void @remove_edge(%struct.edge_def*) #2

declare dso_local void @push_cfun(%struct.function*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %vec_, i32 %ix_, %struct.basic_block_def** %ptr) #0 !dbg !9389 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.basic_block_def**, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !9392, metadata !DIExpression()), !dbg !9393
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !9394, metadata !DIExpression()), !dbg !9393
  store %struct.basic_block_def** %ptr, %struct.basic_block_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %ptr.addr, metadata !9395, metadata !DIExpression()), !dbg !9393
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !9396
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !9396
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !9396

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !9396
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !9396
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !9396
  %3 = load i32, i32* %num, align 8, !dbg !9396
  %cmp = icmp ult i32 %1, %3, !dbg !9396
  br i1 %cmp, label %if.then, label %if.else, !dbg !9393

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !9398
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 2, !dbg !9398
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !9398
  %idxprom = zext i32 %5 to i64, !dbg !9398
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !9398
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !9398
  %7 = load %struct.basic_block_def**, %struct.basic_block_def*** %ptr.addr, align 8, !dbg !9398
  store %struct.basic_block_def* %6, %struct.basic_block_def** %7, align 8, !dbg !9398
  store i32 1, i32* %retval, align 4, !dbg !9398
  br label %return, !dbg !9398

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %ptr.addr, align 8, !dbg !9400
  store %struct.basic_block_def* null, %struct.basic_block_def** %8, align 8, !dbg !9400
  store i32 0, i32* %retval, align 4, !dbg !9400
  br label %return, !dbg !9400

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !9393
  ret i32 %9, !dbg !9393
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_region_d* @find_outermost_region_in_block(%struct.function* %src_cfun, %struct.basic_block_def* %bb, %struct.eh_region_d* %region) #0 !dbg !9402 {
entry:
  %src_cfun.addr = alloca %struct.function*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %region.addr = alloca %struct.eh_region_d*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %stmt_region = alloca %struct.eh_region_d*, align 8
  %lp_nr = alloca i32, align 4
  store %struct.function* %src_cfun, %struct.function** %src_cfun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %src_cfun.addr, metadata !9405, metadata !DIExpression()), !dbg !9406
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9407, metadata !DIExpression()), !dbg !9408
  store %struct.eh_region_d* %region, %struct.eh_region_d** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %region.addr, metadata !9409, metadata !DIExpression()), !dbg !9410
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !9411, metadata !DIExpression()), !dbg !9412
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9413
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %0), !dbg !9415
  %1 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !9415
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !9415
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !9415
  br label %for.cond, !dbg !9416

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !9417
  %tobool = icmp ne i8 %call, 0, !dbg !9419
  %lnot = xor i1 %tobool, true, !dbg !9419
  br i1 %lnot, label %for.body, label %for.end, !dbg !9420

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !9421, metadata !DIExpression()), !dbg !9423
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !9424
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !9423
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %stmt_region, metadata !9425, metadata !DIExpression()), !dbg !9426
  call void @llvm.dbg.declare(metadata i32* %lp_nr, metadata !9427, metadata !DIExpression()), !dbg !9428
  %3 = load %struct.function*, %struct.function** %src_cfun.addr, align 8, !dbg !9429
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9430
  %call2 = call i32 @lookup_stmt_eh_lp_fn(%struct.function* %3, %union.gimple_statement_d* %4), !dbg !9431
  store i32 %call2, i32* %lp_nr, align 4, !dbg !9432
  %5 = load %struct.function*, %struct.function** %src_cfun.addr, align 8, !dbg !9433
  %6 = load i32, i32* %lp_nr, align 4, !dbg !9434
  %call3 = call %struct.eh_region_d* @get_eh_region_from_lp_number_fn(%struct.function* %5, i32 %6), !dbg !9435
  store %struct.eh_region_d* %call3, %struct.eh_region_d** %stmt_region, align 8, !dbg !9436
  %7 = load %struct.eh_region_d*, %struct.eh_region_d** %stmt_region, align 8, !dbg !9437
  %tobool4 = icmp ne %struct.eh_region_d* %7, null, !dbg !9437
  br i1 %tobool4, label %if.then, label %if.end11, !dbg !9439

if.then:                                          ; preds = %for.body
  %8 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !9440
  %cmp = icmp eq %struct.eh_region_d* %8, null, !dbg !9443
  br i1 %cmp, label %if.then5, label %if.else, !dbg !9444

if.then5:                                         ; preds = %if.then
  %9 = load %struct.eh_region_d*, %struct.eh_region_d** %stmt_region, align 8, !dbg !9445
  store %struct.eh_region_d* %9, %struct.eh_region_d** %region.addr, align 8, !dbg !9446
  br label %if.end10, !dbg !9447

if.else:                                          ; preds = %if.then
  %10 = load %struct.eh_region_d*, %struct.eh_region_d** %stmt_region, align 8, !dbg !9448
  %11 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !9450
  %cmp6 = icmp ne %struct.eh_region_d* %10, %11, !dbg !9451
  br i1 %cmp6, label %if.then7, label %if.end, !dbg !9452

if.then7:                                         ; preds = %if.else
  %12 = load %struct.function*, %struct.function** %src_cfun.addr, align 8, !dbg !9453
  %13 = load %struct.eh_region_d*, %struct.eh_region_d** %stmt_region, align 8, !dbg !9455
  %14 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !9456
  %call8 = call %struct.eh_region_d* @eh_region_outermost(%struct.function* %12, %struct.eh_region_d* %13, %struct.eh_region_d* %14), !dbg !9457
  store %struct.eh_region_d* %call8, %struct.eh_region_d** %region.addr, align 8, !dbg !9458
  %15 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !9459
  %cmp9 = icmp ne %struct.eh_region_d* %15, null, !dbg !9459
  br i1 %cmp9, label %cond.false, label %cond.true, !dbg !9459

cond.true:                                        ; preds = %if.then7
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5863, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !9459
  br label %cond.end, !dbg !9459

cond.false:                                       ; preds = %if.then7
  br label %cond.end, !dbg !9459

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9459
  br label %if.end, !dbg !9460

if.end:                                           ; preds = %cond.end, %if.else
  br label %if.end10

if.end10:                                         ; preds = %if.end, %if.then5
  br label %if.end11, !dbg !9461

if.end11:                                         ; preds = %if.end10, %for.body
  br label %for.inc, !dbg !9462

for.inc:                                          ; preds = %if.end11
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !9463
  br label %for.cond, !dbg !9464, !llvm.loop !9465

for.end:                                          ; preds = %for.cond
  %16 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !9467
  ret %struct.eh_region_d* %16, !dbg !9468
}

declare dso_local void @init_eh_for_function() #2

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

declare dso_local i32 @tree_map_hash(i8*) #2

declare dso_local i32 @tree_map_base_eq(i8*, i8*) #2

declare dso_local %struct.pointer_map_t* @duplicate_eh_regions(%struct.function*, %struct.eh_region_d*, i32, %union.tree_node* (%union.tree_node*, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @new_label_mapper(%union.tree_node* %decl, i8* %data) #0 !dbg !9469 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %data.addr = alloca i8*, align 8
  %hash = alloca %struct.htab*, align 8
  %m = alloca %struct.tree_map*, align 8
  %slot = alloca i8**, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !9472, metadata !DIExpression()), !dbg !9473
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !9474, metadata !DIExpression()), !dbg !9475
  call void @llvm.dbg.declare(metadata %struct.htab** %hash, metadata !9476, metadata !DIExpression()), !dbg !9477
  %0 = load i8*, i8** %data.addr, align 8, !dbg !9478
  %1 = bitcast i8* %0 to %struct.htab*, !dbg !9479
  store %struct.htab* %1, %struct.htab** %hash, align 8, !dbg !9477
  call void @llvm.dbg.declare(metadata %struct.tree_map** %m, metadata !9480, metadata !DIExpression()), !dbg !9481
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !9482, metadata !DIExpression()), !dbg !9483
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9484
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !9484
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !9484
  %bf.load = load i64, i64* %3, align 8, !dbg !9484
  %bf.clear = and i64 %bf.load, 65535, !dbg !9484
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9484
  %cmp = icmp eq i32 %bf.cast, 30, !dbg !9484
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9484

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5878, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !9484
  br label %cond.end, !dbg !9484

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9484

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9484
  %call = call i8* @xmalloc(i64 24), !dbg !9485
  %4 = bitcast i8* %call to %struct.tree_map*, !dbg !9485
  store %struct.tree_map* %4, %struct.tree_map** %m, align 8, !dbg !9486
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9487
  %decl_minimal = bitcast %union.tree_node* %5 to %struct.tree_decl_minimal*, !dbg !9487
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !9487
  %6 = load i32, i32* %uid, align 4, !dbg !9487
  %7 = load %struct.tree_map*, %struct.tree_map** %m, align 8, !dbg !9488
  %hash1 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %7, i32 0, i32 1, !dbg !9489
  store i32 %6, i32* %hash1, align 8, !dbg !9490
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9491
  %9 = load %struct.tree_map*, %struct.tree_map** %m, align 8, !dbg !9492
  %base2 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %9, i32 0, i32 0, !dbg !9493
  %from = getelementptr inbounds %struct.tree_map_base, %struct.tree_map_base* %base2, i32 0, i32 0, !dbg !9494
  store %union.tree_node* %8, %union.tree_node** %from, align 8, !dbg !9495
  %call3 = call %union.tree_node* @create_artificial_label(i32 0), !dbg !9496
  %10 = load %struct.tree_map*, %struct.tree_map** %m, align 8, !dbg !9497
  %to = getelementptr inbounds %struct.tree_map, %struct.tree_map* %10, i32 0, i32 2, !dbg !9498
  store %union.tree_node* %call3, %union.tree_node** %to, align 8, !dbg !9499
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9500
  %label_decl = bitcast %union.tree_node* %11 to %struct.tree_label_decl*, !dbg !9500
  %label_decl_uid = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl, i32 0, i32 1, !dbg !9500
  %12 = load i32, i32* %label_decl_uid, align 8, !dbg !9500
  %13 = load %struct.tree_map*, %struct.tree_map** %m, align 8, !dbg !9501
  %to4 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %13, i32 0, i32 2, !dbg !9501
  %14 = load %union.tree_node*, %union.tree_node** %to4, align 8, !dbg !9501
  %label_decl5 = bitcast %union.tree_node* %14 to %struct.tree_label_decl*, !dbg !9501
  %label_decl_uid6 = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl5, i32 0, i32 1, !dbg !9501
  store i32 %12, i32* %label_decl_uid6, align 8, !dbg !9502
  %15 = load %struct.tree_map*, %struct.tree_map** %m, align 8, !dbg !9503
  %to7 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %15, i32 0, i32 2, !dbg !9503
  %16 = load %union.tree_node*, %union.tree_node** %to7, align 8, !dbg !9503
  %label_decl8 = bitcast %union.tree_node* %16 to %struct.tree_label_decl*, !dbg !9503
  %label_decl_uid9 = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl8, i32 0, i32 1, !dbg !9503
  %17 = load i32, i32* %label_decl_uid9, align 8, !dbg !9503
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9505
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !9505
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !9506
  %19 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9506
  %last_label_uid = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %19, i32 0, i32 11, !dbg !9507
  %20 = load i32, i32* %last_label_uid, align 8, !dbg !9507
  %cmp10 = icmp sge i32 %17, %20, !dbg !9508
  br i1 %cmp10, label %if.then, label %if.end, !dbg !9509

if.then:                                          ; preds = %cond.end
  %21 = load %struct.tree_map*, %struct.tree_map** %m, align 8, !dbg !9510
  %to11 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %21, i32 0, i32 2, !dbg !9510
  %22 = load %union.tree_node*, %union.tree_node** %to11, align 8, !dbg !9510
  %label_decl12 = bitcast %union.tree_node* %22 to %struct.tree_label_decl*, !dbg !9510
  %label_decl_uid13 = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl12, i32 0, i32 1, !dbg !9510
  %23 = load i32, i32* %label_decl_uid13, align 8, !dbg !9510
  %add = add nsw i32 %23, 1, !dbg !9511
  %24 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9512
  %add.ptr14 = getelementptr inbounds %struct.function, %struct.function* %24, i64 0, !dbg !9512
  %cfg15 = getelementptr inbounds %struct.function, %struct.function* %add.ptr14, i32 0, i32 1, !dbg !9513
  %25 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg15, align 8, !dbg !9513
  %last_label_uid16 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %25, i32 0, i32 11, !dbg !9514
  store i32 %add, i32* %last_label_uid16, align 8, !dbg !9515
  br label %if.end, !dbg !9512

if.end:                                           ; preds = %if.then, %cond.end
  %26 = load %struct.htab*, %struct.htab** %hash, align 8, !dbg !9516
  %27 = load %struct.tree_map*, %struct.tree_map** %m, align 8, !dbg !9517
  %28 = bitcast %struct.tree_map* %27 to i8*, !dbg !9517
  %29 = load %struct.tree_map*, %struct.tree_map** %m, align 8, !dbg !9518
  %hash17 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %29, i32 0, i32 1, !dbg !9519
  %30 = load i32, i32* %hash17, align 8, !dbg !9519
  %call18 = call i8** @htab_find_slot_with_hash(%struct.htab* %26, i8* %28, i32 %30, i32 1), !dbg !9520
  store i8** %call18, i8*** %slot, align 8, !dbg !9521
  %31 = load i8**, i8*** %slot, align 8, !dbg !9522
  %32 = load i8*, i8** %31, align 8, !dbg !9522
  %cmp19 = icmp eq i8* %32, null, !dbg !9522
  br i1 %cmp19, label %cond.false21, label %cond.true20, !dbg !9522

cond.true20:                                      ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5889, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !9522
  br label %cond.end22, !dbg !9522

cond.false21:                                     ; preds = %if.end
  br label %cond.end22, !dbg !9522

cond.end22:                                       ; preds = %cond.false21, %cond.true20
  %cond23 = phi i32 [ 0, %cond.true20 ], [ 0, %cond.false21 ], !dbg !9522
  %33 = load %struct.tree_map*, %struct.tree_map** %m, align 8, !dbg !9523
  %34 = bitcast %struct.tree_map* %33 to i8*, !dbg !9523
  %35 = load i8**, i8*** %slot, align 8, !dbg !9524
  store i8* %34, i8** %35, align 8, !dbg !9525
  %36 = load %struct.tree_map*, %struct.tree_map** %m, align 8, !dbg !9526
  %to24 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %36, i32 0, i32 2, !dbg !9527
  %37 = load %union.tree_node*, %union.tree_node** %to24, align 8, !dbg !9527
  ret %union.tree_node* %37, !dbg !9528
}

declare dso_local void @pop_cfun() #2

; Function Attrs: noinline nounwind uwtable
define internal void @move_block_to_fn(%struct.function* %dest_cfun, %struct.basic_block_def* %bb, %struct.basic_block_def* %after, i8 zeroext %update_edge_count_p, %struct.move_stmt_d* %d) #0 !dbg !9529 {
entry:
  %dest_cfun.addr = alloca %struct.function*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %after.addr = alloca %struct.basic_block_def*, align 8
  %update_edge_count_p.addr = alloca i8, align 1
  %d.addr = alloca %struct.move_stmt_d*, align 8
  %cfg = alloca %struct.control_flow_graph*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %old_len = alloca i32, align 4
  %new_len = alloca i32, align 4
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp57 = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %use = alloca %struct.ssa_use_operand_d*, align 8
  %op = alloca %union.tree_node*, align 8
  %oi = alloca %struct.ssa_operand_iterator_d, align 8
  %tmp89 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %wi = alloca %struct.walk_stmt_info, align 8
  %label = alloca %union.tree_node*, align 8
  %uid = alloca i32, align 4
  %tmp164 = alloca %struct.edge_iterator, align 8
  %block = alloca %union.tree_node*, align 8
  store %struct.function* %dest_cfun, %struct.function** %dest_cfun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %dest_cfun.addr, metadata !9532, metadata !DIExpression()), !dbg !9533
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9534, metadata !DIExpression()), !dbg !9535
  store %struct.basic_block_def* %after, %struct.basic_block_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %after.addr, metadata !9536, metadata !DIExpression()), !dbg !9537
  store i8 %update_edge_count_p, i8* %update_edge_count_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %update_edge_count_p.addr, metadata !9538, metadata !DIExpression()), !dbg !9539
  store %struct.move_stmt_d* %d, %struct.move_stmt_d** %d.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.move_stmt_d** %d.addr, metadata !9540, metadata !DIExpression()), !dbg !9541
  call void @llvm.dbg.declare(metadata %struct.control_flow_graph** %cfg, metadata !9542, metadata !DIExpression()), !dbg !9543
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !9544, metadata !DIExpression()), !dbg !9545
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !9546, metadata !DIExpression()), !dbg !9547
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !9548, metadata !DIExpression()), !dbg !9549
  call void @llvm.dbg.declare(metadata i32* %old_len, metadata !9550, metadata !DIExpression()), !dbg !9551
  call void @llvm.dbg.declare(metadata i32* %new_len, metadata !9552, metadata !DIExpression()), !dbg !9553
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9554
  call void @delete_from_dominance_info(i32 1, %struct.basic_block_def* %0), !dbg !9555
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9556
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !9556
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !9556
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !9556
  %tobool = icmp ne %struct.loops* %2, null, !dbg !9556
  br i1 %tobool, label %if.then, label %if.end, !dbg !9558

if.then:                                          ; preds = %entry
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9559
  call void @remove_bb_from_loops(%struct.basic_block_def* %3), !dbg !9560
  br label %if.end, !dbg !9560

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9561
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %after.addr, align 8, !dbg !9562
  %call = call zeroext i8 @move_block_after(%struct.basic_block_def* %4, %struct.basic_block_def* %5), !dbg !9563
  %6 = load i8, i8* %update_edge_count_p.addr, align 1, !dbg !9564
  %tobool1 = icmp ne i8 %6, 0, !dbg !9564
  br i1 %tobool1, label %if.then2, label %if.end10, !dbg !9566

if.then2:                                         ; preds = %if.end
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9567
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 1, !dbg !9567
  %call3 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !9567
  %8 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !9567
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !9567
  %10 = extractvalue { i32, %struct.VEC_edge_gc** } %call3, 0, !dbg !9567
  store i32 %10, i32* %9, align 8, !dbg !9567
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !9567
  %12 = extractvalue { i32, %struct.VEC_edge_gc** } %call3, 1, !dbg !9567
  store %struct.VEC_edge_gc** %12, %struct.VEC_edge_gc*** %11, align 8, !dbg !9567
  %13 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !9567
  %14 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !9567
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 16, i1 false), !dbg !9567
  br label %for.cond, !dbg !9567

for.cond:                                         ; preds = %for.inc, %if.then2
  %15 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !9569
  %16 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %15, i32 0, i32 0, !dbg !9569
  %17 = load i32, i32* %16, align 8, !dbg !9569
  %18 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %15, i32 0, i32 1, !dbg !9569
  %19 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %18, align 8, !dbg !9569
  %call4 = call zeroext i8 @ei_cond(i32 %17, %struct.VEC_edge_gc** %19, %struct.edge_def** %e), !dbg !9569
  %tobool5 = icmp ne i8 %call4, 0, !dbg !9567
  br i1 %tobool5, label %for.body, label %for.end, !dbg !9567

for.body:                                         ; preds = %for.cond
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9571
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !9571
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !9573
  %21 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !9573
  %x_n_edges = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %21, i32 0, i32 4, !dbg !9574
  %22 = load i32, i32* %x_n_edges, align 4, !dbg !9575
  %dec = add nsw i32 %22, -1, !dbg !9575
  store i32 %dec, i32* %x_n_edges, align 4, !dbg !9575
  %23 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9576
  %cfg8 = getelementptr inbounds %struct.function, %struct.function* %23, i32 0, i32 1, !dbg !9577
  %24 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg8, align 8, !dbg !9577
  %x_n_edges9 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %24, i32 0, i32 4, !dbg !9578
  %25 = load i32, i32* %x_n_edges9, align 4, !dbg !9579
  %inc = add nsw i32 %25, 1, !dbg !9579
  store i32 %inc, i32* %x_n_edges9, align 4, !dbg !9579
  br label %for.inc, !dbg !9580

for.inc:                                          ; preds = %for.body
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !9569
  br label %for.cond, !dbg !9569, !llvm.loop !9581

for.end:                                          ; preds = %for.cond
  br label %if.end10, !dbg !9582

if.end10:                                         ; preds = %for.end, %if.end
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9583
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !9583
  %cfg12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 1, !dbg !9583
  %27 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg12, align 8, !dbg !9583
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %27, i32 0, i32 2, !dbg !9583
  %28 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !9583
  %tobool13 = icmp ne %struct.VEC_basic_block_gc* %28, null, !dbg !9583
  br i1 %tobool13, label %cond.true, label %cond.false, !dbg !9583

cond.true:                                        ; preds = %if.end10
  %29 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9583
  %add.ptr14 = getelementptr inbounds %struct.function, %struct.function* %29, i64 0, !dbg !9583
  %cfg15 = getelementptr inbounds %struct.function, %struct.function* %add.ptr14, i32 0, i32 1, !dbg !9583
  %30 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg15, align 8, !dbg !9583
  %x_basic_block_info16 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %30, i32 0, i32 2, !dbg !9583
  %31 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info16, align 8, !dbg !9583
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %31, i32 0, i32 0, !dbg !9583
  br label %cond.end, !dbg !9583

cond.false:                                       ; preds = %if.end10
  br label %cond.end, !dbg !9583

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9583
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9583
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 9, !dbg !9583
  %33 = load i32, i32* %index, align 8, !dbg !9583
  %call17 = call %struct.basic_block_def* @VEC_basic_block_base_replace(%struct.VEC_basic_block_base* %cond, i32 %33, %struct.basic_block_def* null), !dbg !9583
  %34 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9584
  %add.ptr18 = getelementptr inbounds %struct.function, %struct.function* %34, i64 0, !dbg !9584
  %cfg19 = getelementptr inbounds %struct.function, %struct.function* %add.ptr18, i32 0, i32 1, !dbg !9585
  %35 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg19, align 8, !dbg !9585
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %35, i32 0, i32 3, !dbg !9586
  %36 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !9587
  %dec20 = add nsw i32 %36, -1, !dbg !9587
  store i32 %dec20, i32* %x_n_basic_blocks, align 8, !dbg !9587
  %37 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9588
  %cfg21 = getelementptr inbounds %struct.function, %struct.function* %37, i32 0, i32 1, !dbg !9589
  %38 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg21, align 8, !dbg !9589
  store %struct.control_flow_graph* %38, %struct.control_flow_graph** %cfg, align 8, !dbg !9590
  %39 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9591
  %x_n_basic_blocks22 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %39, i32 0, i32 3, !dbg !9592
  %40 = load i32, i32* %x_n_basic_blocks22, align 8, !dbg !9593
  %inc23 = add nsw i32 %40, 1, !dbg !9593
  store i32 %inc23, i32* %x_n_basic_blocks22, align 8, !dbg !9593
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9594
  %index24 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 9, !dbg !9596
  %42 = load i32, i32* %index24, align 8, !dbg !9596
  %43 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9597
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %43, i32 0, i32 5, !dbg !9598
  %44 = load i32, i32* %x_last_basic_block, align 8, !dbg !9598
  %cmp = icmp sge i32 %42, %44, !dbg !9599
  br i1 %cmp, label %if.then25, label %if.end28, !dbg !9600

if.then25:                                        ; preds = %cond.end
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9601
  %index26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 9, !dbg !9602
  %46 = load i32, i32* %index26, align 8, !dbg !9602
  %add = add nsw i32 %46, 1, !dbg !9603
  %47 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9604
  %x_last_basic_block27 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %47, i32 0, i32 5, !dbg !9605
  store i32 %add, i32* %x_last_basic_block27, align 8, !dbg !9606
  br label %if.end28, !dbg !9604

if.end28:                                         ; preds = %if.then25, %cond.end
  %48 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9607
  %x_basic_block_info29 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %48, i32 0, i32 2, !dbg !9607
  %49 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info29, align 8, !dbg !9607
  %tobool30 = icmp ne %struct.VEC_basic_block_gc* %49, null, !dbg !9607
  br i1 %tobool30, label %cond.true31, label %cond.false34, !dbg !9607

cond.true31:                                      ; preds = %if.end28
  %50 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9607
  %x_basic_block_info32 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %50, i32 0, i32 2, !dbg !9607
  %51 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info32, align 8, !dbg !9607
  %base33 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %51, i32 0, i32 0, !dbg !9607
  br label %cond.end35, !dbg !9607

cond.false34:                                     ; preds = %if.end28
  br label %cond.end35, !dbg !9607

cond.end35:                                       ; preds = %cond.false34, %cond.true31
  %cond36 = phi %struct.VEC_basic_block_base* [ %base33, %cond.true31 ], [ null, %cond.false34 ], !dbg !9607
  %call37 = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond36), !dbg !9607
  store i32 %call37, i32* %old_len, align 4, !dbg !9608
  %52 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9609
  %x_last_basic_block38 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %52, i32 0, i32 5, !dbg !9611
  %53 = load i32, i32* %x_last_basic_block38, align 8, !dbg !9611
  %54 = load i32, i32* %old_len, align 4, !dbg !9612
  %cmp39 = icmp uge i32 %53, %54, !dbg !9613
  br i1 %cmp39, label %if.then40, label %if.end46, !dbg !9614

if.then40:                                        ; preds = %cond.end35
  %55 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9615
  %x_last_basic_block41 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %55, i32 0, i32 5, !dbg !9617
  %56 = load i32, i32* %x_last_basic_block41, align 8, !dbg !9617
  %57 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9618
  %x_last_basic_block42 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %57, i32 0, i32 5, !dbg !9619
  %58 = load i32, i32* %x_last_basic_block42, align 8, !dbg !9619
  %add43 = add nsw i32 %58, 3, !dbg !9620
  %div = sdiv i32 %add43, 4, !dbg !9621
  %add44 = add nsw i32 %56, %div, !dbg !9622
  store i32 %add44, i32* %new_len, align 4, !dbg !9623
  %59 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9624
  %x_basic_block_info45 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %59, i32 0, i32 2, !dbg !9624
  %60 = load i32, i32* %new_len, align 4, !dbg !9624
  call void @VEC_basic_block_gc_safe_grow_cleared(%struct.VEC_basic_block_gc** %x_basic_block_info45, i32 %60), !dbg !9624
  br label %if.end46, !dbg !9625

if.end46:                                         ; preds = %if.then40, %cond.end35
  %61 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9626
  %x_basic_block_info47 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %61, i32 0, i32 2, !dbg !9626
  %62 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info47, align 8, !dbg !9626
  %tobool48 = icmp ne %struct.VEC_basic_block_gc* %62, null, !dbg !9626
  br i1 %tobool48, label %cond.true49, label %cond.false52, !dbg !9626

cond.true49:                                      ; preds = %if.end46
  %63 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9626
  %x_basic_block_info50 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %63, i32 0, i32 2, !dbg !9626
  %64 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info50, align 8, !dbg !9626
  %base51 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %64, i32 0, i32 0, !dbg !9626
  br label %cond.end53, !dbg !9626

cond.false52:                                     ; preds = %if.end46
  br label %cond.end53, !dbg !9626

cond.end53:                                       ; preds = %cond.false52, %cond.true49
  %cond54 = phi %struct.VEC_basic_block_base* [ %base51, %cond.true49 ], [ null, %cond.false52 ], !dbg !9626
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9626
  %index55 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %65, i32 0, i32 9, !dbg !9626
  %66 = load i32, i32* %index55, align 8, !dbg !9626
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9626
  %call56 = call %struct.basic_block_def* @VEC_basic_block_base_replace(%struct.VEC_basic_block_base* %cond54, i32 %66, %struct.basic_block_def* %67), !dbg !9626
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9627
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp57, %struct.basic_block_def* %68), !dbg !9629
  %69 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !9629
  %70 = bitcast %struct.gimple_stmt_iterator* %tmp57 to i8*, !dbg !9629
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* align 8 %70, i64 24, i1 false), !dbg !9629
  br label %for.cond58, !dbg !9630

for.cond58:                                       ; preds = %for.end87, %if.then67, %cond.end53
  %call59 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !9631
  %tobool60 = icmp ne i8 %call59, 0, !dbg !9633
  %lnot = xor i1 %tobool60, true, !dbg !9633
  br i1 %lnot, label %for.body61, label %for.end88, !dbg !9634

for.body61:                                       ; preds = %for.cond58
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !9635, metadata !DIExpression()), !dbg !9637
  %call62 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !9638
  store %union.gimple_statement_d* %call62, %union.gimple_statement_d** %phi, align 8, !dbg !9637
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use, metadata !9639, metadata !DIExpression()), !dbg !9640
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !9641, metadata !DIExpression()), !dbg !9642
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !9643
  %call63 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %71), !dbg !9643
  %call64 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call63), !dbg !9643
  store %union.tree_node* %call64, %union.tree_node** %op, align 8, !dbg !9642
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %oi, metadata !9644, metadata !DIExpression()), !dbg !9657
  %72 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !9658
  %call65 = call zeroext i8 @is_gimple_reg(%union.tree_node* %72), !dbg !9660
  %tobool66 = icmp ne i8 %call65, 0, !dbg !9660
  br i1 %tobool66, label %if.end68, label %if.then67, !dbg !9661

if.then67:                                        ; preds = %for.body61
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %si, i8 zeroext 1), !dbg !9662
  br label %for.cond58, !dbg !9664, !llvm.loop !9665

if.end68:                                         ; preds = %for.body61
  %73 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !9667
  %74 = load %struct.move_stmt_d*, %struct.move_stmt_d** %d.addr, align 8, !dbg !9667
  %vars_map = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %74, i32 0, i32 4, !dbg !9667
  %75 = load %struct.pointer_map_t*, %struct.pointer_map_t** %vars_map, align 8, !dbg !9667
  %76 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9667
  %decl = getelementptr inbounds %struct.function, %struct.function* %76, i32 0, i32 6, !dbg !9667
  %77 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9667
  %call69 = call %union.tree_node* @replace_ssa_name(%union.tree_node* %73, %struct.pointer_map_t* %75, %union.tree_node* %77), !dbg !9667
  %78 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !9667
  %call70 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %78), !dbg !9667
  store %union.tree_node* %call69, %union.tree_node** %call70, align 8, !dbg !9667
  %79 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !9668
  %call71 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %oi, %union.gimple_statement_d* %79, i32 1), !dbg !9668
  store %struct.ssa_use_operand_d* %call71, %struct.ssa_use_operand_d** %use, align 8, !dbg !9668
  br label %for.cond72, !dbg !9668

for.cond72:                                       ; preds = %for.inc85, %if.end68
  %call73 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %oi), !dbg !9670
  %tobool74 = icmp ne i8 %call73, 0, !dbg !9670
  %lnot75 = xor i1 %tobool74, true, !dbg !9670
  br i1 %lnot75, label %for.body76, label %for.end87, !dbg !9668

for.body76:                                       ; preds = %for.cond72
  %80 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use, align 8, !dbg !9672
  %call77 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %80), !dbg !9672
  store %union.tree_node* %call77, %union.tree_node** %op, align 8, !dbg !9674
  %81 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !9675
  %base78 = bitcast %union.tree_node* %81 to %struct.tree_base*, !dbg !9675
  %82 = bitcast %struct.tree_base* %base78 to i64*, !dbg !9675
  %bf.load = load i64, i64* %82, align 8, !dbg !9675
  %bf.clear = and i64 %bf.load, 65535, !dbg !9675
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9675
  %cmp79 = icmp eq i32 %bf.cast, 141, !dbg !9677
  br i1 %cmp79, label %if.then80, label %if.end84, !dbg !9678

if.then80:                                        ; preds = %for.body76
  %83 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use, align 8, !dbg !9679
  %84 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !9679
  %85 = load %struct.move_stmt_d*, %struct.move_stmt_d** %d.addr, align 8, !dbg !9679
  %vars_map81 = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %85, i32 0, i32 4, !dbg !9679
  %86 = load %struct.pointer_map_t*, %struct.pointer_map_t** %vars_map81, align 8, !dbg !9679
  %87 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9679
  %decl82 = getelementptr inbounds %struct.function, %struct.function* %87, i32 0, i32 6, !dbg !9679
  %88 = load %union.tree_node*, %union.tree_node** %decl82, align 8, !dbg !9679
  %call83 = call %union.tree_node* @replace_ssa_name(%union.tree_node* %84, %struct.pointer_map_t* %86, %union.tree_node* %88), !dbg !9679
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %83, %union.tree_node* %call83), !dbg !9679
  br label %if.end84, !dbg !9679

if.end84:                                         ; preds = %if.then80, %for.body76
  br label %for.inc85, !dbg !9680

for.inc85:                                        ; preds = %if.end84
  %call86 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %oi), !dbg !9670
  store %struct.ssa_use_operand_d* %call86, %struct.ssa_use_operand_d** %use, align 8, !dbg !9670
  br label %for.cond72, !dbg !9670, !llvm.loop !9681

for.end87:                                        ; preds = %for.cond72
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !9683
  br label %for.cond58, !dbg !9684, !llvm.loop !9665

for.end88:                                        ; preds = %for.cond58
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9685
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp89, %struct.basic_block_def* %89), !dbg !9687
  %90 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !9687
  %91 = bitcast %struct.gimple_stmt_iterator* %tmp89 to i8*, !dbg !9687
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %90, i8* align 8 %91, i64 24, i1 false), !dbg !9687
  br label %for.cond90, !dbg !9688

for.cond90:                                       ; preds = %for.inc162, %for.end88
  %call91 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !9689
  %tobool92 = icmp ne i8 %call91, 0, !dbg !9691
  %lnot93 = xor i1 %tobool92, true, !dbg !9691
  br i1 %lnot93, label %for.body94, label %for.end163, !dbg !9692

for.body94:                                       ; preds = %for.cond90
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !9693, metadata !DIExpression()), !dbg !9695
  %call95 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !9696
  store %union.gimple_statement_d* %call95, %union.gimple_statement_d** %stmt, align 8, !dbg !9695
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info* %wi, metadata !9697, metadata !DIExpression()), !dbg !9698
  %92 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !9699
  call void @llvm.memset.p0i8.i64(i8* align 8 %92, i8 0, i64 56, i1 false), !dbg !9699
  %93 = load %struct.move_stmt_d*, %struct.move_stmt_d** %d.addr, align 8, !dbg !9700
  %94 = bitcast %struct.move_stmt_d* %93 to i8*, !dbg !9700
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i32 0, i32 1, !dbg !9701
  store i8* %94, i8** %info, align 8, !dbg !9702
  %call96 = call %union.tree_node* @walk_gimple_stmt(%struct.gimple_stmt_iterator* %si, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @move_stmt_r, %union.tree_node* (%union.tree_node**, i32*, i8*)* @move_stmt_op, %struct.walk_stmt_info* %wi), !dbg !9703
  %95 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9704
  %call97 = call i32 @gimple_code(%union.gimple_statement_d* %95), !dbg !9706
  %cmp98 = icmp eq i32 %call97, 4, !dbg !9707
  br i1 %cmp98, label %if.then99, label %if.end155, !dbg !9708

if.then99:                                        ; preds = %for.body94
  call void @llvm.dbg.declare(metadata %union.tree_node** %label, metadata !9709, metadata !DIExpression()), !dbg !9711
  %96 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9712
  %call100 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %96), !dbg !9713
  store %union.tree_node* %call100, %union.tree_node** %label, align 8, !dbg !9711
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !9714, metadata !DIExpression()), !dbg !9715
  %97 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !9716
  %label_decl = bitcast %union.tree_node* %97 to %struct.tree_label_decl*, !dbg !9716
  %label_decl_uid = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl, i32 0, i32 1, !dbg !9716
  %98 = load i32, i32* %label_decl_uid, align 8, !dbg !9716
  store i32 %98, i32* %uid, align 4, !dbg !9715
  %99 = load i32, i32* %uid, align 4, !dbg !9717
  %cmp101 = icmp sgt i32 %99, -1, !dbg !9717
  br i1 %cmp101, label %cond.false103, label %cond.true102, !dbg !9717

cond.true102:                                     ; preds = %if.then99
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5788, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !9717
  br label %cond.end104, !dbg !9717

cond.false103:                                    ; preds = %if.then99
  br label %cond.end104, !dbg !9717

cond.end104:                                      ; preds = %cond.false103, %cond.true102
  %cond105 = phi i32 [ 0, %cond.true102 ], [ 0, %cond.false103 ], !dbg !9717
  %100 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9718
  %x_label_to_block_map = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %100, i32 0, i32 6, !dbg !9718
  %101 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_label_to_block_map, align 8, !dbg !9718
  %tobool106 = icmp ne %struct.VEC_basic_block_gc* %101, null, !dbg !9718
  br i1 %tobool106, label %cond.true107, label %cond.false110, !dbg !9718

cond.true107:                                     ; preds = %cond.end104
  %102 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9718
  %x_label_to_block_map108 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %102, i32 0, i32 6, !dbg !9718
  %103 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_label_to_block_map108, align 8, !dbg !9718
  %base109 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %103, i32 0, i32 0, !dbg !9718
  br label %cond.end111, !dbg !9718

cond.false110:                                    ; preds = %cond.end104
  br label %cond.end111, !dbg !9718

cond.end111:                                      ; preds = %cond.false110, %cond.true107
  %cond112 = phi %struct.VEC_basic_block_base* [ %base109, %cond.true107 ], [ null, %cond.false110 ], !dbg !9718
  %call113 = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond112), !dbg !9718
  store i32 %call113, i32* %old_len, align 4, !dbg !9719
  %104 = load i32, i32* %old_len, align 4, !dbg !9720
  %105 = load i32, i32* %uid, align 4, !dbg !9722
  %cmp114 = icmp ule i32 %104, %105, !dbg !9723
  br i1 %cmp114, label %if.then115, label %if.end119, !dbg !9724

if.then115:                                       ; preds = %cond.end111
  %106 = load i32, i32* %uid, align 4, !dbg !9725
  %mul = mul nsw i32 3, %106, !dbg !9727
  %div116 = sdiv i32 %mul, 2, !dbg !9728
  %add117 = add nsw i32 %div116, 1, !dbg !9729
  store i32 %add117, i32* %new_len, align 4, !dbg !9730
  %107 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9731
  %x_label_to_block_map118 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %107, i32 0, i32 6, !dbg !9731
  %108 = load i32, i32* %new_len, align 4, !dbg !9731
  call void @VEC_basic_block_gc_safe_grow_cleared(%struct.VEC_basic_block_gc** %x_label_to_block_map118, i32 %108), !dbg !9731
  br label %if.end119, !dbg !9732

if.end119:                                        ; preds = %if.then115, %cond.end111
  %109 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9733
  %x_label_to_block_map120 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %109, i32 0, i32 6, !dbg !9733
  %110 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_label_to_block_map120, align 8, !dbg !9733
  %tobool121 = icmp ne %struct.VEC_basic_block_gc* %110, null, !dbg !9733
  br i1 %tobool121, label %cond.true122, label %cond.false125, !dbg !9733

cond.true122:                                     ; preds = %if.end119
  %111 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9733
  %x_label_to_block_map123 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %111, i32 0, i32 6, !dbg !9733
  %112 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_label_to_block_map123, align 8, !dbg !9733
  %base124 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %112, i32 0, i32 0, !dbg !9733
  br label %cond.end126, !dbg !9733

cond.false125:                                    ; preds = %if.end119
  br label %cond.end126, !dbg !9733

cond.end126:                                      ; preds = %cond.false125, %cond.true122
  %cond127 = phi %struct.VEC_basic_block_base* [ %base124, %cond.true122 ], [ null, %cond.false125 ], !dbg !9733
  %113 = load i32, i32* %uid, align 4, !dbg !9733
  %114 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9733
  %call128 = call %struct.basic_block_def* @VEC_basic_block_base_replace(%struct.VEC_basic_block_base* %cond127, i32 %113, %struct.basic_block_def* %114), !dbg !9733
  %115 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9734
  %add.ptr129 = getelementptr inbounds %struct.function, %struct.function* %115, i64 0, !dbg !9734
  %cfg130 = getelementptr inbounds %struct.function, %struct.function* %add.ptr129, i32 0, i32 1, !dbg !9734
  %116 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg130, align 8, !dbg !9734
  %x_label_to_block_map131 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %116, i32 0, i32 6, !dbg !9734
  %117 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_label_to_block_map131, align 8, !dbg !9734
  %tobool132 = icmp ne %struct.VEC_basic_block_gc* %117, null, !dbg !9734
  br i1 %tobool132, label %cond.true133, label %cond.false138, !dbg !9734

cond.true133:                                     ; preds = %cond.end126
  %118 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9734
  %add.ptr134 = getelementptr inbounds %struct.function, %struct.function* %118, i64 0, !dbg !9734
  %cfg135 = getelementptr inbounds %struct.function, %struct.function* %add.ptr134, i32 0, i32 1, !dbg !9734
  %119 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg135, align 8, !dbg !9734
  %x_label_to_block_map136 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %119, i32 0, i32 6, !dbg !9734
  %120 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_label_to_block_map136, align 8, !dbg !9734
  %base137 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %120, i32 0, i32 0, !dbg !9734
  br label %cond.end139, !dbg !9734

cond.false138:                                    ; preds = %cond.end126
  br label %cond.end139, !dbg !9734

cond.end139:                                      ; preds = %cond.false138, %cond.true133
  %cond140 = phi %struct.VEC_basic_block_base* [ %base137, %cond.true133 ], [ null, %cond.false138 ], !dbg !9734
  %121 = load i32, i32* %uid, align 4, !dbg !9734
  %call141 = call %struct.basic_block_def* @VEC_basic_block_base_replace(%struct.VEC_basic_block_base* %cond140, i32 %121, %struct.basic_block_def* null), !dbg !9734
  %122 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !9735
  %decl_minimal = bitcast %union.tree_node* %122 to %struct.tree_decl_minimal*, !dbg !9735
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !9735
  %123 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !9735
  %124 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9735
  %decl142 = getelementptr inbounds %struct.function, %struct.function* %124, i32 0, i32 6, !dbg !9735
  %125 = load %union.tree_node*, %union.tree_node** %decl142, align 8, !dbg !9735
  %cmp143 = icmp eq %union.tree_node* %123, %125, !dbg !9735
  br i1 %cmp143, label %cond.false145, label %cond.true144, !dbg !9735

cond.true144:                                     ; preds = %cond.end139
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5801, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !9735
  br label %cond.end146, !dbg !9735

cond.false145:                                    ; preds = %cond.end139
  br label %cond.end146, !dbg !9735

cond.end146:                                      ; preds = %cond.false145, %cond.true144
  %cond147 = phi i32 [ 0, %cond.true144 ], [ 0, %cond.false145 ], !dbg !9735
  %126 = load i32, i32* %uid, align 4, !dbg !9736
  %127 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9738
  %cfg148 = getelementptr inbounds %struct.function, %struct.function* %127, i32 0, i32 1, !dbg !9739
  %128 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg148, align 8, !dbg !9739
  %last_label_uid = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %128, i32 0, i32 11, !dbg !9740
  %129 = load i32, i32* %last_label_uid, align 8, !dbg !9740
  %cmp149 = icmp sge i32 %126, %129, !dbg !9741
  br i1 %cmp149, label %if.then150, label %if.end154, !dbg !9742

if.then150:                                       ; preds = %cond.end146
  %130 = load i32, i32* %uid, align 4, !dbg !9743
  %add151 = add nsw i32 %130, 1, !dbg !9744
  %131 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9745
  %cfg152 = getelementptr inbounds %struct.function, %struct.function* %131, i32 0, i32 1, !dbg !9746
  %132 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg152, align 8, !dbg !9746
  %last_label_uid153 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %132, i32 0, i32 11, !dbg !9747
  store i32 %add151, i32* %last_label_uid153, align 8, !dbg !9748
  br label %if.end154, !dbg !9745

if.end154:                                        ; preds = %if.then150, %cond.end146
  br label %if.end155, !dbg !9749

if.end155:                                        ; preds = %if.end154, %for.body94
  %133 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9750
  %134 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9751
  %135 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9752
  %add.ptr156 = getelementptr inbounds %struct.function, %struct.function* %135, i64 0, !dbg !9752
  %136 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9753
  %137 = load %struct.move_stmt_d*, %struct.move_stmt_d** %d.addr, align 8, !dbg !9754
  %eh_map = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %137, i32 0, i32 6, !dbg !9755
  %138 = load %struct.pointer_map_t*, %struct.pointer_map_t** %eh_map, align 8, !dbg !9755
  %call157 = call zeroext i8 @maybe_duplicate_eh_stmt_fn(%struct.function* %133, %union.gimple_statement_d* %134, %struct.function* %add.ptr156, %union.gimple_statement_d* %136, %struct.pointer_map_t* %138, i32 0), !dbg !9756
  %139 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9757
  %add.ptr158 = getelementptr inbounds %struct.function, %struct.function* %139, i64 0, !dbg !9757
  %140 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9758
  %call159 = call zeroext i8 @remove_stmt_from_eh_lp_fn(%struct.function* %add.ptr158, %union.gimple_statement_d* %140), !dbg !9759
  %141 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9760
  %142 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9761
  %143 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9762
  %add.ptr160 = getelementptr inbounds %struct.function, %struct.function* %143, i64 0, !dbg !9762
  %144 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9763
  call void @gimple_duplicate_stmt_histograms(%struct.function* %141, %union.gimple_statement_d* %142, %struct.function* %add.ptr160, %union.gimple_statement_d* %144), !dbg !9764
  %145 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9765
  %add.ptr161 = getelementptr inbounds %struct.function, %struct.function* %145, i64 0, !dbg !9765
  %146 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9766
  call void @gimple_remove_stmt_histograms(%struct.function* %add.ptr161, %union.gimple_statement_d* %146), !dbg !9767
  %147 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9768
  call void @free_stmt_operands(%union.gimple_statement_d* %147), !dbg !9769
  %148 = load %struct.function*, %struct.function** %dest_cfun.addr, align 8, !dbg !9770
  call void @push_cfun(%struct.function* %148), !dbg !9771
  %149 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9772
  call void @update_stmt(%union.gimple_statement_d* %149), !dbg !9773
  call void @pop_cfun(), !dbg !9774
  br label %for.inc162, !dbg !9775

for.inc162:                                       ; preds = %if.end155
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !9776
  br label %for.cond90, !dbg !9777, !llvm.loop !9778

for.end163:                                       ; preds = %for.cond90
  %150 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9780
  %succs165 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %150, i32 0, i32 1, !dbg !9780
  %call166 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs165), !dbg !9780
  %151 = bitcast %struct.edge_iterator* %tmp164 to { i32, %struct.VEC_edge_gc** }*, !dbg !9780
  %152 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %151, i32 0, i32 0, !dbg !9780
  %153 = extractvalue { i32, %struct.VEC_edge_gc** } %call166, 0, !dbg !9780
  store i32 %153, i32* %152, align 8, !dbg !9780
  %154 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %151, i32 0, i32 1, !dbg !9780
  %155 = extractvalue { i32, %struct.VEC_edge_gc** } %call166, 1, !dbg !9780
  store %struct.VEC_edge_gc** %155, %struct.VEC_edge_gc*** %154, align 8, !dbg !9780
  %156 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !9780
  %157 = bitcast %struct.edge_iterator* %tmp164 to i8*, !dbg !9780
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %156, i8* align 8 %157, i64 16, i1 false), !dbg !9780
  br label %for.cond167, !dbg !9780

for.cond167:                                      ; preds = %for.inc180, %for.end163
  %158 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !9782
  %159 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %158, i32 0, i32 0, !dbg !9782
  %160 = load i32, i32* %159, align 8, !dbg !9782
  %161 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %158, i32 0, i32 1, !dbg !9782
  %162 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %161, align 8, !dbg !9782
  %call168 = call zeroext i8 @ei_cond(i32 %160, %struct.VEC_edge_gc** %162, %struct.edge_def** %e), !dbg !9782
  %tobool169 = icmp ne i8 %call168, 0, !dbg !9780
  br i1 %tobool169, label %for.body170, label %for.end181, !dbg !9780

for.body170:                                      ; preds = %for.cond167
  %163 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9784
  %goto_locus = getelementptr inbounds %struct.edge_def, %struct.edge_def* %163, i32 0, i32 5, !dbg !9786
  %164 = load i32, i32* %goto_locus, align 8, !dbg !9786
  %tobool171 = icmp ne i32 %164, 0, !dbg !9784
  br i1 %tobool171, label %if.then172, label %if.end179, !dbg !9787

if.then172:                                       ; preds = %for.body170
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !9788, metadata !DIExpression()), !dbg !9790
  %165 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9791
  %goto_block = getelementptr inbounds %struct.edge_def, %struct.edge_def* %165, i32 0, i32 4, !dbg !9792
  %166 = load %union.tree_node*, %union.tree_node** %goto_block, align 8, !dbg !9792
  store %union.tree_node* %166, %union.tree_node** %block, align 8, !dbg !9790
  %167 = load %struct.move_stmt_d*, %struct.move_stmt_d** %d.addr, align 8, !dbg !9793
  %orig_block = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %167, i32 0, i32 0, !dbg !9795
  %168 = load %union.tree_node*, %union.tree_node** %orig_block, align 8, !dbg !9795
  %cmp173 = icmp eq %union.tree_node* %168, null, !dbg !9796
  br i1 %cmp173, label %if.then176, label %lor.lhs.false, !dbg !9797

lor.lhs.false:                                    ; preds = %if.then172
  %169 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !9798
  %170 = load %struct.move_stmt_d*, %struct.move_stmt_d** %d.addr, align 8, !dbg !9799
  %orig_block174 = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %170, i32 0, i32 0, !dbg !9800
  %171 = load %union.tree_node*, %union.tree_node** %orig_block174, align 8, !dbg !9800
  %cmp175 = icmp eq %union.tree_node* %169, %171, !dbg !9801
  br i1 %cmp175, label %if.then176, label %if.end178, !dbg !9802

if.then176:                                       ; preds = %lor.lhs.false, %if.then172
  %172 = load %struct.move_stmt_d*, %struct.move_stmt_d** %d.addr, align 8, !dbg !9803
  %new_block = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %172, i32 0, i32 1, !dbg !9804
  %173 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !9804
  %174 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9805
  %goto_block177 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %174, i32 0, i32 4, !dbg !9806
  store %union.tree_node* %173, %union.tree_node** %goto_block177, align 8, !dbg !9807
  br label %if.end178, !dbg !9805

if.end178:                                        ; preds = %if.then176, %lor.lhs.false
  br label %if.end179, !dbg !9808

if.end179:                                        ; preds = %if.end178, %for.body170
  br label %for.inc180, !dbg !9786

for.inc180:                                       ; preds = %if.end179
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !9782
  br label %for.cond167, !dbg !9782, !llvm.loop !9809

for.end181:                                       ; preds = %for.cond167
  ret void, !dbg !9811
}

; Function Attrs: noinline nounwind uwtable
define internal void @replace_block_vars_by_duplicates(%union.tree_node* %block, %struct.pointer_map_t* %vars_map, %union.tree_node* %to_context) #0 !dbg !9812 {
entry:
  %block.addr = alloca %union.tree_node*, align 8
  %vars_map.addr = alloca %struct.pointer_map_t*, align 8
  %to_context.addr = alloca %union.tree_node*, align 8
  %tp = alloca %union.tree_node**, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !9815, metadata !DIExpression()), !dbg !9816
  store %struct.pointer_map_t* %vars_map, %struct.pointer_map_t** %vars_map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t** %vars_map.addr, metadata !9817, metadata !DIExpression()), !dbg !9818
  store %union.tree_node* %to_context, %union.tree_node** %to_context.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %to_context.addr, metadata !9819, metadata !DIExpression()), !dbg !9820
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp, metadata !9821, metadata !DIExpression()), !dbg !9822
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !9823, metadata !DIExpression()), !dbg !9824
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !9825
  %block1 = bitcast %union.tree_node* %0 to %struct.tree_block*, !dbg !9825
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 3, !dbg !9825
  store %union.tree_node** %vars, %union.tree_node*** %tp, align 8, !dbg !9827
  br label %for.cond, !dbg !9828

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %union.tree_node**, %union.tree_node*** %tp, align 8, !dbg !9829
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !9831
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !9832
  br i1 %tobool, label %for.body, label %for.end, !dbg !9832

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node**, %union.tree_node*** %tp, align 8, !dbg !9833
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !9835
  store %union.tree_node* %4, %union.tree_node** %t, align 8, !dbg !9836
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9837
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !9837
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !9837
  %bf.load = load i64, i64* %6, align 8, !dbg !9837
  %bf.clear = and i64 %bf.load, 65535, !dbg !9837
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9837
  %cmp = icmp ne i32 %bf.cast, 32, !dbg !9839
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !9840

land.lhs.true:                                    ; preds = %for.body
  %7 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9841
  %base2 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !9841
  %8 = bitcast %struct.tree_base* %base2 to i64*, !dbg !9841
  %bf.load3 = load i64, i64* %8, align 8, !dbg !9841
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !9841
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !9841
  %cmp6 = icmp ne i32 %bf.cast5, 33, !dbg !9842
  br i1 %cmp6, label %if.then, label %if.end, !dbg !9843

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc, !dbg !9844

if.end:                                           ; preds = %land.lhs.true, %for.body
  %9 = load %struct.pointer_map_t*, %struct.pointer_map_t** %vars_map.addr, align 8, !dbg !9845
  %10 = load %union.tree_node*, %union.tree_node** %to_context.addr, align 8, !dbg !9846
  call void @replace_by_duplicate_decl(%union.tree_node** %t, %struct.pointer_map_t* %9, %union.tree_node* %10), !dbg !9847
  %11 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9848
  %12 = load %union.tree_node**, %union.tree_node*** %tp, align 8, !dbg !9850
  %13 = load %union.tree_node*, %union.tree_node** %12, align 8, !dbg !9851
  %cmp7 = icmp ne %union.tree_node* %11, %13, !dbg !9852
  br i1 %cmp7, label %if.then8, label %if.end27, !dbg !9853

if.then8:                                         ; preds = %if.end
  %14 = load %union.tree_node**, %union.tree_node*** %tp, align 8, !dbg !9854
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !9854
  %base9 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !9854
  %16 = bitcast %struct.tree_base* %base9 to i64*, !dbg !9854
  %bf.load10 = load i64, i64* %16, align 8, !dbg !9854
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !9854
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !9854
  %cmp13 = icmp eq i32 %bf.cast12, 32, !dbg !9857
  br i1 %cmp13, label %land.lhs.true14, label %if.end24, !dbg !9858

land.lhs.true14:                                  ; preds = %if.then8
  %17 = load %union.tree_node**, %union.tree_node*** %tp, align 8, !dbg !9859
  %18 = load %union.tree_node*, %union.tree_node** %17, align 8, !dbg !9859
  %decl_common = bitcast %union.tree_node* %18 to %struct.tree_decl_common*, !dbg !9859
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !9859
  %19 = bitcast i40* %decl_flag_2 to i64*, !dbg !9859
  %bf.load15 = load i64, i64* %19, align 8, !dbg !9859
  %bf.lshr = lshr i64 %bf.load15, 26, !dbg !9859
  %bf.clear16 = and i64 %bf.lshr, 1, !dbg !9859
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !9859
  %tobool18 = icmp ne i32 %bf.cast17, 0, !dbg !9859
  br i1 %tobool18, label %if.then19, label %if.end24, !dbg !9860

if.then19:                                        ; preds = %land.lhs.true14
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9861
  %21 = load %union.tree_node**, %union.tree_node*** %tp, align 8, !dbg !9861
  %22 = load %union.tree_node*, %union.tree_node** %21, align 8, !dbg !9861
  %call = call %union.tree_node* @decl_value_expr_lookup(%union.tree_node* %22), !dbg !9861
  call void @decl_value_expr_insert(%union.tree_node* %20, %union.tree_node* %call), !dbg !9861
  %23 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9863
  %decl_common20 = bitcast %union.tree_node* %23 to %struct.tree_decl_common*, !dbg !9863
  %decl_flag_221 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common20, i32 0, i32 2, !dbg !9863
  %24 = bitcast i40* %decl_flag_221 to i64*, !dbg !9863
  %bf.load22 = load i64, i64* %24, align 8, !dbg !9864
  %bf.clear23 = and i64 %bf.load22, -67108865, !dbg !9864
  %bf.set = or i64 %bf.clear23, 67108864, !dbg !9864
  store i64 %bf.set, i64* %24, align 8, !dbg !9864
  br label %if.end24, !dbg !9865

if.end24:                                         ; preds = %if.then19, %land.lhs.true14, %if.then8
  %25 = load %union.tree_node**, %union.tree_node*** %tp, align 8, !dbg !9866
  %26 = load %union.tree_node*, %union.tree_node** %25, align 8, !dbg !9866
  %common = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !9866
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !9866
  %27 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !9866
  %28 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9867
  %common25 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !9867
  %chain26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 1, !dbg !9867
  store %union.tree_node* %27, %union.tree_node** %chain26, align 8, !dbg !9868
  %29 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9869
  %30 = load %union.tree_node**, %union.tree_node*** %tp, align 8, !dbg !9870
  store %union.tree_node* %29, %union.tree_node** %30, align 8, !dbg !9871
  br label %if.end27, !dbg !9872

if.end27:                                         ; preds = %if.end24, %if.end
  br label %for.inc, !dbg !9873

for.inc:                                          ; preds = %if.end27, %if.then
  %31 = load %union.tree_node**, %union.tree_node*** %tp, align 8, !dbg !9874
  %32 = load %union.tree_node*, %union.tree_node** %31, align 8, !dbg !9874
  %common28 = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !9874
  %chain29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 1, !dbg !9874
  store %union.tree_node** %chain29, %union.tree_node*** %tp, align 8, !dbg !9875
  br label %for.cond, !dbg !9876, !llvm.loop !9877

for.end:                                          ; preds = %for.cond
  %33 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !9879
  %block30 = bitcast %union.tree_node* %33 to %struct.tree_block*, !dbg !9879
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block30, i32 0, i32 5, !dbg !9879
  %34 = load %union.tree_node*, %union.tree_node** %subblocks, align 8, !dbg !9879
  store %union.tree_node* %34, %union.tree_node** %block.addr, align 8, !dbg !9881
  br label %for.cond31, !dbg !9882

for.cond31:                                       ; preds = %for.inc34, %for.end
  %35 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !9883
  %tobool32 = icmp ne %union.tree_node* %35, null, !dbg !9885
  br i1 %tobool32, label %for.body33, label %for.end37, !dbg !9885

for.body33:                                       ; preds = %for.cond31
  %36 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !9886
  %37 = load %struct.pointer_map_t*, %struct.pointer_map_t** %vars_map.addr, align 8, !dbg !9887
  %38 = load %union.tree_node*, %union.tree_node** %to_context.addr, align 8, !dbg !9888
  call void @replace_block_vars_by_duplicates(%union.tree_node* %36, %struct.pointer_map_t* %37, %union.tree_node* %38), !dbg !9889
  br label %for.inc34, !dbg !9889

for.inc34:                                        ; preds = %for.body33
  %39 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !9890
  %common35 = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !9890
  %chain36 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 1, !dbg !9890
  %40 = load %union.tree_node*, %union.tree_node** %chain36, align 8, !dbg !9890
  store %union.tree_node* %40, %union.tree_node** %block.addr, align 8, !dbg !9891
  br label %for.cond31, !dbg !9892, !llvm.loop !9893

for.end37:                                        ; preds = %for.cond31
  ret void, !dbg !9895
}

declare dso_local void @htab_delete(%struct.htab*) #2

declare dso_local %struct.basic_block_def* @create_empty_bb(%struct.basic_block_def*) #2

declare dso_local void @add_bb_to_loop(%struct.basic_block_def*, %struct.loop*) #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

declare dso_local void @print_node(%struct._IO_FILE*, i8*, %union.tree_node*, i32) #2

declare dso_local void @dump_eh_tree(%struct._IO_FILE*, %struct.function*) #2

declare dso_local zeroext i8 @gimple_has_body_p(%union.tree_node*) #2

declare dso_local void @dump_node(%union.tree_node*, i32, %struct._IO_FILE*) #2

declare dso_local void @print_generic_decl(%struct._IO_FILE*, %union.tree_node*, i32) #2

declare dso_local void @check_bb_profile(%struct.basic_block_def*, %struct._IO_FILE*) #2

declare dso_local %struct.gimple_seq_d* @gimple_body(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %s) #0 !dbg !9896 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  %n = alloca %struct.gimple_seq_node_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !9902, metadata !DIExpression()), !dbg !9903
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_node_d** %n, metadata !9904, metadata !DIExpression()), !dbg !9905
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !9906
  %call = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %0), !dbg !9907
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %n, align 8, !dbg !9905
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %n, align 8, !dbg !9908
  %tobool = icmp ne %struct.gimple_seq_node_d* %1, null, !dbg !9909
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9909

cond.true:                                        ; preds = %entry
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %n, align 8, !dbg !9910
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %2, i32 0, i32 0, !dbg !9911
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9911
  br label %cond.end, !dbg !9909

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9909

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.gimple_statement_d* [ %3, %cond.true ], [ null, %cond.false ], !dbg !9909
  ret %union.gimple_statement_d* %cond, !dbg !9912
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gimple_seq_last_stmt(%struct.gimple_seq_d* %s) #0 !dbg !9913 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  %n = alloca %struct.gimple_seq_node_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !9914, metadata !DIExpression()), !dbg !9915
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_node_d** %n, metadata !9916, metadata !DIExpression()), !dbg !9917
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !9918
  %call = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %0), !dbg !9919
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %n, align 8, !dbg !9917
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %n, align 8, !dbg !9920
  %tobool = icmp ne %struct.gimple_seq_node_d* %1, null, !dbg !9921
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9921

cond.true:                                        ; preds = %entry
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %n, align 8, !dbg !9922
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %2, i32 0, i32 0, !dbg !9923
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9923
  br label %cond.end, !dbg !9921

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9921

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.gimple_statement_d* [ %3, %cond.true ], [ null, %cond.false ], !dbg !9921
  ret %union.gimple_statement_d* %cond, !dbg !9924
}

declare dso_local void @print_gimple_seq(%struct._IO_FILE*, %struct.gimple_seq_d*, i32, i32) #2

declare dso_local void @print_generic_stmt_indented(%struct._IO_FILE*, %union.tree_node*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_function(%union.tree_node* %fn, i32 %flags) #0 !dbg !9925 {
entry:
  %fn.addr = alloca %union.tree_node*, align 8
  %flags.addr = alloca i32, align 4
  store %union.tree_node* %fn, %union.tree_node** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn.addr, metadata !9928, metadata !DIExpression()), !dbg !9929
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !9930, metadata !DIExpression()), !dbg !9931
  %0 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !9932
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !9933
  %2 = load i32, i32* %flags.addr, align 4, !dbg !9934
  call void @dump_function_to_file(%union.tree_node* %0, %struct._IO_FILE* %1, i32 %2), !dbg !9935
  ret void, !dbg !9936
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @print_loops_bb(%struct._IO_FILE* %file, %struct.basic_block_def* %bb, i32 %indent, i32 %verbosity) #0 !dbg !9937 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %indent.addr = alloca i32, align 4
  %verbosity.addr = alloca i32, align 4
  %s_indent = alloca i8*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !9940, metadata !DIExpression()), !dbg !9941
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9942, metadata !DIExpression()), !dbg !9943
  store i32 %indent, i32* %indent.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %indent.addr, metadata !9944, metadata !DIExpression()), !dbg !9945
  store i32 %verbosity, i32* %verbosity.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %verbosity.addr, metadata !9946, metadata !DIExpression()), !dbg !9947
  call void @llvm.dbg.declare(metadata i8** %s_indent, metadata !9948, metadata !DIExpression()), !dbg !9949
  %0 = load i32, i32* %indent.addr, align 4, !dbg !9950
  %conv = sext i32 %0 to i64, !dbg !9950
  %add = add i64 %conv, 1, !dbg !9950
  %1 = alloca i8, i64 %add, align 16, !dbg !9950
  store i8* %1, i8** %s_indent, align 8, !dbg !9949
  %2 = load i8*, i8** %s_indent, align 8, !dbg !9951
  %3 = load i32, i32* %indent.addr, align 4, !dbg !9952
  %conv1 = sext i32 %3 to i64, !dbg !9953
  call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 32, i64 %conv1, i1 false), !dbg !9954
  %4 = load i8*, i8** %s_indent, align 8, !dbg !9955
  %5 = load i32, i32* %indent.addr, align 4, !dbg !9956
  %idxprom = sext i32 %5 to i64, !dbg !9955
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom, !dbg !9955
  store i8 0, i8* %arrayidx, align 1, !dbg !9957
  %6 = load i32, i32* %verbosity.addr, align 4, !dbg !9958
  %cmp = icmp sge i32 %6, 2, !dbg !9960
  br i1 %cmp, label %if.then, label %if.end, !dbg !9961

if.then:                                          ; preds = %entry
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !9962
  %8 = load i8*, i8** %s_indent, align 8, !dbg !9964
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9965
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 9, !dbg !9966
  %10 = load i32, i32* %index, align 8, !dbg !9966
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.38, i64 0, i64 0), i8* %8, i32 %10), !dbg !9967
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !9968
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9969
  call void @print_pred_bbs(%struct._IO_FILE* %11, %struct.basic_block_def* %12), !dbg !9970
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !9971
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.39, i64 0, i64 0)), !dbg !9972
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !9973
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9974
  call void @print_succ_bbs(%struct._IO_FILE* %14, %struct.basic_block_def* %15), !dbg !9975
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !9976
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.40, i64 0, i64 0)), !dbg !9977
  br label %if.end, !dbg !9978

if.end:                                           ; preds = %if.then, %entry
  %17 = load i32, i32* %verbosity.addr, align 4, !dbg !9979
  %cmp5 = icmp sge i32 %17, 3, !dbg !9981
  br i1 %cmp5, label %if.then7, label %if.end11, !dbg !9982

if.then7:                                         ; preds = %if.end
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !9983
  %19 = load i8*, i8** %s_indent, align 8, !dbg !9985
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i64 0, i64 0), i8* %19), !dbg !9986
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9987
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !9988
  %22 = load i32, i32* %indent.addr, align 4, !dbg !9989
  %add9 = add nsw i32 %22, 4, !dbg !9990
  call void @gimple_dump_bb(%struct.basic_block_def* %20, %struct._IO_FILE* %21, i32 %add9, i32 16448), !dbg !9991
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !9992
  %24 = load i8*, i8** %s_indent, align 8, !dbg !9993
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.42, i64 0, i64 0), i8* %24), !dbg !9994
  br label %if.end11, !dbg !9995

if.end11:                                         ; preds = %if.then7, %if.end
  ret void, !dbg !9996
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_pred_bbs(%struct._IO_FILE* %file, %struct.basic_block_def* %bb) #0 !dbg !9997 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !10000, metadata !DIExpression()), !dbg !10001
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !10002, metadata !DIExpression()), !dbg !10003
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !10004, metadata !DIExpression()), !dbg !10005
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !10006, metadata !DIExpression()), !dbg !10007
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10008
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !10008
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !10008
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !10008
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !10008
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !10008
  store i32 %3, i32* %2, align 8, !dbg !10008
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !10008
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !10008
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !10008
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !10008
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !10008
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !10008
  br label %for.cond, !dbg !10008

for.cond:                                         ; preds = %for.inc, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !10010
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !10010
  %10 = load i32, i32* %9, align 8, !dbg !10010
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !10010
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !10010
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e), !dbg !10010
  %tobool = icmp ne i8 %call1, 0, !dbg !10008
  br i1 %tobool, label %for.body, label %for.end, !dbg !10008

for.body:                                         ; preds = %for.cond
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !10012
  %14 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10013
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i32 0, i32 0, !dbg !10014
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !10014
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 9, !dbg !10015
  %16 = load i32, i32* %index, align 8, !dbg !10015
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.148, i64 0, i64 0), i32 %16), !dbg !10016
  br label %for.inc, !dbg !10016

for.inc:                                          ; preds = %for.body
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !10010
  br label %for.cond, !dbg !10010, !llvm.loop !10017

for.end:                                          ; preds = %for.cond
  ret void, !dbg !10019
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_succ_bbs(%struct._IO_FILE* %file, %struct.basic_block_def* %bb) #0 !dbg !10020 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !10021, metadata !DIExpression()), !dbg !10022
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !10023, metadata !DIExpression()), !dbg !10024
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !10025, metadata !DIExpression()), !dbg !10026
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !10027, metadata !DIExpression()), !dbg !10028
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10029
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !10029
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !10029
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !10029
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !10029
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !10029
  store i32 %3, i32* %2, align 8, !dbg !10029
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !10029
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !10029
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !10029
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !10029
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !10029
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !10029
  br label %for.cond, !dbg !10029

for.cond:                                         ; preds = %for.inc, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !10031
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !10031
  %10 = load i32, i32* %9, align 8, !dbg !10031
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !10031
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !10031
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e), !dbg !10031
  %tobool = icmp ne i8 %call1, 0, !dbg !10029
  br i1 %tobool, label %for.body, label %for.end, !dbg !10029

for.body:                                         ; preds = %for.cond
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !10033
  %14 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10034
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i32 0, i32 1, !dbg !10035
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !10035
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 9, !dbg !10036
  %16 = load i32, i32* %index, align 8, !dbg !10036
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.148, i64 0, i64 0), i32 %16), !dbg !10037
  br label %for.inc, !dbg !10037

for.inc:                                          ; preds = %for.body
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !10031
  br label %for.cond, !dbg !10031, !llvm.loop !10038

for.end:                                          ; preds = %for.cond
  ret void, !dbg !10040
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @print_loops(%struct._IO_FILE* %file, i32 %verbosity) #0 !dbg !10041 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %verbosity.addr = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !10042, metadata !DIExpression()), !dbg !10043
  store i32 %verbosity, i32* %verbosity.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %verbosity.addr, metadata !10044, metadata !DIExpression()), !dbg !10045
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !10046, metadata !DIExpression()), !dbg !10047
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10048
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !10048
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10048
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10048
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !10048
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !10048
  store %struct.basic_block_def* %2, %struct.basic_block_def** %bb, align 8, !dbg !10049
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10050
  %tobool = icmp ne %struct.basic_block_def* %3, null, !dbg !10050
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !10052

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10053
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 3, !dbg !10054
  %5 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !10054
  %tobool1 = icmp ne %struct.loop* %5, null, !dbg !10053
  br i1 %tobool1, label %if.then, label %if.end, !dbg !10055

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !10056
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10057
  %loop_father2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 3, !dbg !10058
  %8 = load %struct.loop*, %struct.loop** %loop_father2, align 8, !dbg !10058
  %9 = load i32, i32* %verbosity.addr, align 4, !dbg !10059
  call void @print_loop_and_siblings(%struct._IO_FILE* %6, %struct.loop* %8, i32 0, i32 %9), !dbg !10060
  br label %if.end, !dbg !10060

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !10061
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_loop_and_siblings(%struct._IO_FILE* %file, %struct.loop* %loop, i32 %indent, i32 %verbosity) #0 !dbg !10062 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %indent.addr = alloca i32, align 4
  %verbosity.addr = alloca i32, align 4
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !10065, metadata !DIExpression()), !dbg !10066
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !10067, metadata !DIExpression()), !dbg !10068
  store i32 %indent, i32* %indent.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %indent.addr, metadata !10069, metadata !DIExpression()), !dbg !10070
  store i32 %verbosity, i32* %verbosity.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %verbosity.addr, metadata !10071, metadata !DIExpression()), !dbg !10072
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10073
  %cmp = icmp eq %struct.loop* %0, null, !dbg !10075
  br i1 %cmp, label %if.then, label %if.end, !dbg !10076

if.then:                                          ; preds = %entry
  br label %return, !dbg !10077

if.end:                                           ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !10078
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10079
  %3 = load i32, i32* %indent.addr, align 4, !dbg !10080
  %4 = load i32, i32* %verbosity.addr, align 4, !dbg !10081
  call void @print_loop(%struct._IO_FILE* %1, %struct.loop* %2, i32 %3, i32 %4), !dbg !10082
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !10083
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10084
  %next = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 9, !dbg !10085
  %7 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !10085
  %8 = load i32, i32* %indent.addr, align 4, !dbg !10086
  %9 = load i32, i32* %verbosity.addr, align 4, !dbg !10087
  call void @print_loop_and_siblings(%struct._IO_FILE* %5, %struct.loop* %7, i32 %8, i32 %9), !dbg !10088
  br label %return, !dbg !10089

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !10089
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_loops(i32 %verbosity) #0 !dbg !10090 {
entry:
  %verbosity.addr = alloca i32, align 4
  store i32 %verbosity, i32* %verbosity.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %verbosity.addr, metadata !10091, metadata !DIExpression()), !dbg !10092
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10093
  %1 = load i32, i32* %verbosity.addr, align 4, !dbg !10094
  call void @print_loops(%struct._IO_FILE* %0, i32 %1), !dbg !10095
  ret void, !dbg !10096
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_loop(%struct.loop* %loop, i32 %verbosity) #0 !dbg !10097 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %verbosity.addr = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !10100, metadata !DIExpression()), !dbg !10101
  store i32 %verbosity, i32* %verbosity.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %verbosity.addr, metadata !10102, metadata !DIExpression()), !dbg !10103
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10104
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10105
  %2 = load i32, i32* %verbosity.addr, align 4, !dbg !10106
  call void @print_loop(%struct._IO_FILE* %0, %struct.loop* %1, i32 0, i32 %2), !dbg !10107
  ret void, !dbg !10108
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_loop(%struct._IO_FILE* %file, %struct.loop* %loop, i32 %indent, i32 %verbosity) #0 !dbg !10109 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %indent.addr = alloca i32, align 4
  %verbosity.addr = alloca i32, align 4
  %s_indent = alloca i8*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !10110, metadata !DIExpression()), !dbg !10111
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !10112, metadata !DIExpression()), !dbg !10113
  store i32 %indent, i32* %indent.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %indent.addr, metadata !10114, metadata !DIExpression()), !dbg !10115
  store i32 %verbosity, i32* %verbosity.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %verbosity.addr, metadata !10116, metadata !DIExpression()), !dbg !10117
  call void @llvm.dbg.declare(metadata i8** %s_indent, metadata !10118, metadata !DIExpression()), !dbg !10119
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !10120, metadata !DIExpression()), !dbg !10121
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10122
  %cmp = icmp eq %struct.loop* %0, null, !dbg !10124
  br i1 %cmp, label %if.then, label %if.end, !dbg !10125

if.then:                                          ; preds = %entry
  br label %if.end27, !dbg !10126

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %indent.addr, align 4, !dbg !10127
  %conv = sext i32 %1 to i64, !dbg !10127
  %add = add i64 %conv, 1, !dbg !10127
  %2 = alloca i8, i64 %add, align 16, !dbg !10127
  store i8* %2, i8** %s_indent, align 8, !dbg !10128
  %3 = load i8*, i8** %s_indent, align 8, !dbg !10129
  %4 = load i32, i32* %indent.addr, align 4, !dbg !10130
  %conv1 = sext i32 %4 to i64, !dbg !10131
  call void @llvm.memset.p0i8.i64(i8* align 1 %3, i8 32, i64 %conv1, i1 false), !dbg !10132
  %5 = load i8*, i8** %s_indent, align 8, !dbg !10133
  %6 = load i32, i32* %indent.addr, align 4, !dbg !10134
  %idxprom = sext i32 %6 to i64, !dbg !10133
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %idxprom, !dbg !10133
  store i8 0, i8* %arrayidx, align 1, !dbg !10135
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !10136
  %8 = load i8*, i8** %s_indent, align 8, !dbg !10137
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10138
  %num = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 0, !dbg !10139
  %10 = load i32, i32* %num, align 8, !dbg !10139
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10140
  %header = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 2, !dbg !10141
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !10141
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 9, !dbg !10142
  %13 = load i32, i32* %index, align 8, !dbg !10142
  %14 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10143
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %14, i32 0, i32 3, !dbg !10144
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !10144
  %index2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 9, !dbg !10145
  %16 = load i32, i32* %index2, align 8, !dbg !10145
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.149, i64 0, i64 0), i8* %8, i32 %10, i32 %13, i32 %16), !dbg !10146
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !10147
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.150, i64 0, i64 0)), !dbg !10148
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !10149
  %19 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10150
  %nb_iterations = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 11, !dbg !10151
  %20 = load %union.tree_node*, %union.tree_node** %nb_iterations, align 8, !dbg !10151
  call void @print_generic_expr(%struct._IO_FILE* %18, %union.tree_node* %20, i32 0), !dbg !10152
  %21 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10153
  %any_upper_bound = getelementptr inbounds %struct.loop, %struct.loop* %21, i32 0, i32 14, !dbg !10155
  %22 = load i8, i8* %any_upper_bound, align 8, !dbg !10155
  %tobool = icmp ne i8 %22, 0, !dbg !10153
  br i1 %tobool, label %if.then4, label %if.end6, !dbg !10156

if.then4:                                         ; preds = %if.end
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !10157
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.151, i64 0, i64 0)), !dbg !10159
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !10160
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10161
  %nb_iterations_upper_bound = getelementptr inbounds %struct.loop, %struct.loop* %25, i32 0, i32 12, !dbg !10162
  %26 = bitcast %struct.double_int* %nb_iterations_upper_bound to { i64, i64 }*, !dbg !10163
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !10163
  %28 = load i64, i64* %27, align 8, !dbg !10163
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1, !dbg !10163
  %30 = load i64, i64* %29, align 8, !dbg !10163
  call void @dump_double_int(%struct._IO_FILE* %24, i64 %28, i64 %30, i8 zeroext 1), !dbg !10163
  br label %if.end6, !dbg !10164

if.end6:                                          ; preds = %if.then4, %if.end
  %31 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10165
  %any_estimate = getelementptr inbounds %struct.loop, %struct.loop* %31, i32 0, i32 15, !dbg !10167
  %32 = load i8, i8* %any_estimate, align 1, !dbg !10167
  %tobool7 = icmp ne i8 %32, 0, !dbg !10165
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !10168

if.then8:                                         ; preds = %if.end6
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !10169
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.152, i64 0, i64 0)), !dbg !10171
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !10172
  %35 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10173
  %nb_iterations_estimate = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 13, !dbg !10174
  %36 = bitcast %struct.double_int* %nb_iterations_estimate to { i64, i64 }*, !dbg !10175
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 0, !dbg !10175
  %38 = load i64, i64* %37, align 8, !dbg !10175
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 1, !dbg !10175
  %40 = load i64, i64* %39, align 8, !dbg !10175
  call void @dump_double_int(%struct._IO_FILE* %34, i64 %38, i64 %40, i8 zeroext 1), !dbg !10175
  br label %if.end10, !dbg !10176

if.end10:                                         ; preds = %if.then8, %if.end6
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !10177
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i64 0, i64 0)), !dbg !10178
  %42 = load i32, i32* %verbosity.addr, align 4, !dbg !10179
  %cmp12 = icmp sge i32 %42, 1, !dbg !10181
  br i1 %cmp12, label %if.then14, label %if.end27, !dbg !10182

if.then14:                                        ; preds = %if.end10
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !10183
  %44 = load i8*, i8** %s_indent, align 8, !dbg !10185
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.153, i64 0, i64 0), i8* %44), !dbg !10186
  %45 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10187
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %45, i64 0, !dbg !10187
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10187
  %46 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10187
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %46, i32 0, i32 0, !dbg !10187
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !10187
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 6, !dbg !10187
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !10187
  store %struct.basic_block_def* %48, %struct.basic_block_def** %bb, align 8, !dbg !10187
  br label %for.cond, !dbg !10187

for.cond:                                         ; preds = %for.inc, %if.then14
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10189
  %50 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10189
  %add.ptr16 = getelementptr inbounds %struct.function, %struct.function* %50, i64 0, !dbg !10189
  %cfg17 = getelementptr inbounds %struct.function, %struct.function* %add.ptr16, i32 0, i32 1, !dbg !10189
  %51 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg17, align 8, !dbg !10189
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %51, i32 0, i32 1, !dbg !10189
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !10189
  %cmp18 = icmp ne %struct.basic_block_def* %49, %52, !dbg !10189
  br i1 %cmp18, label %for.body, label %for.end, !dbg !10187

for.body:                                         ; preds = %for.cond
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10191
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 3, !dbg !10193
  %54 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !10193
  %55 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10194
  %cmp20 = icmp eq %struct.loop* %54, %55, !dbg !10195
  br i1 %cmp20, label %if.then22, label %if.end23, !dbg !10196

if.then22:                                        ; preds = %for.body
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !10197
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10198
  %58 = load i32, i32* %indent.addr, align 4, !dbg !10199
  %59 = load i32, i32* %verbosity.addr, align 4, !dbg !10200
  call void @print_loops_bb(%struct._IO_FILE* %56, %struct.basic_block_def* %57, i32 %58, i32 %59), !dbg !10201
  br label %if.end23, !dbg !10201

if.end23:                                         ; preds = %if.then22, %for.body
  br label %for.inc, !dbg !10194

for.inc:                                          ; preds = %if.end23
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10189
  %next_bb24 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 6, !dbg !10189
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb24, align 8, !dbg !10189
  store %struct.basic_block_def* %61, %struct.basic_block_def** %bb, align 8, !dbg !10189
  br label %for.cond, !dbg !10189, !llvm.loop !10202

for.end:                                          ; preds = %for.cond
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !10204
  %63 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10205
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %63, i32 0, i32 8, !dbg !10206
  %64 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !10206
  %65 = load i32, i32* %indent.addr, align 4, !dbg !10207
  %add25 = add nsw i32 %65, 2, !dbg !10208
  %66 = load i32, i32* %verbosity.addr, align 4, !dbg !10209
  call void @print_loop_and_siblings(%struct._IO_FILE* %62, %struct.loop* %64, i32 %add25, i32 %66), !dbg !10210
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !10211
  %68 = load i8*, i8** %s_indent, align 8, !dbg !10212
  %call26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %67, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.154, i64 0, i64 0), i8* %68), !dbg !10213
  br label %if.end27, !dbg !10214

if.end27:                                         ; preds = %if.then, %for.end, %if.end10
  ret void, !dbg !10215
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_loop_num(i32 %num, i32 %verbosity) #0 !dbg !10216 {
entry:
  %num.addr = alloca i32, align 4
  %verbosity.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !10219, metadata !DIExpression()), !dbg !10220
  store i32 %verbosity, i32* %verbosity.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %verbosity.addr, metadata !10221, metadata !DIExpression()), !dbg !10222
  %0 = load i32, i32* %num.addr, align 4, !dbg !10223
  %call = call %struct.loop* @get_loop(i32 %0), !dbg !10224
  %1 = load i32, i32* %verbosity.addr, align 4, !dbg !10225
  call void @debug_loop(%struct.loop* %call, i32 %1), !dbg !10226
  ret void, !dbg !10227
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_loop(i32 %num) #0 !dbg !10228 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !10231, metadata !DIExpression()), !dbg !10232
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10233
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !10233
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !10233
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !10233
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 1, !dbg !10233
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !10233
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !10233
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10233

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10233
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !10233
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !10233
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !10233
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 1, !dbg !10233
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !10233
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !10233
  br label %cond.end, !dbg !10233

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10233

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10233
  %6 = load i32, i32* %num.addr, align 4, !dbg !10233
  %call = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %6), !dbg !10233
  ret %struct.loop* %call, !dbg !10234
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gimple_purge_dead_abnormal_call_edges(%struct.basic_block_def* %bb) #0 !dbg !10235 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %changed = alloca i8, align 1
  %stmt = alloca %union.gimple_statement_d*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !10236, metadata !DIExpression()), !dbg !10237
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !10238, metadata !DIExpression()), !dbg !10239
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10240
  %call = call zeroext i8 @gimple_purge_dead_eh_edges(%struct.basic_block_def* %0), !dbg !10241
  store i8 %call, i8* %changed, align 1, !dbg !10239
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10242
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !10242
  %has_nonlocal_label = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !10244
  %bf.load = load i32, i32* %has_nonlocal_label, align 8, !dbg !10244
  %bf.lshr = lshr i32 %bf.load, 20, !dbg !10244
  %bf.clear = and i32 %bf.lshr, 1, !dbg !10244
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !10242
  br i1 %tobool, label %if.then, label %if.end15, !dbg !10245

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !10246, metadata !DIExpression()), !dbg !10248
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10249
  %call1 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %2), !dbg !10250
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !10248
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !10251, metadata !DIExpression()), !dbg !10252
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !10253, metadata !DIExpression()), !dbg !10254
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10255
  %tobool2 = icmp ne %union.gimple_statement_d* %3, null, !dbg !10255
  br i1 %tobool2, label %land.lhs.true, label %if.then5, !dbg !10257

land.lhs.true:                                    ; preds = %if.then
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10258
  %call3 = call zeroext i8 @stmt_can_make_abnormal_goto(%union.gimple_statement_d* %4), !dbg !10259
  %conv = zext i8 %call3 to i32, !dbg !10259
  %tobool4 = icmp ne i32 %conv, 0, !dbg !10259
  br i1 %tobool4, label %if.end11, label %if.then5, !dbg !10260

if.then5:                                         ; preds = %land.lhs.true, %if.then
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10261
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 1, !dbg !10261
  %call6 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !10261
  %6 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !10261
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %6, i32 0, i32 0, !dbg !10261
  %8 = extractvalue { i32, %struct.VEC_edge_gc** } %call6, 0, !dbg !10261
  store i32 %8, i32* %7, align 8, !dbg !10261
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %6, i32 0, i32 1, !dbg !10261
  %10 = extractvalue { i32, %struct.VEC_edge_gc** } %call6, 1, !dbg !10261
  store %struct.VEC_edge_gc** %10, %struct.VEC_edge_gc*** %9, align 8, !dbg !10261
  %11 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !10261
  %12 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !10261
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 16, i1 false), !dbg !10261
  br label %for.cond, !dbg !10263

for.cond:                                         ; preds = %if.end, %if.then5
  %13 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !10264
  %14 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %13, i32 0, i32 0, !dbg !10264
  %15 = load i32, i32* %14, align 8, !dbg !10264
  %16 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %13, i32 0, i32 1, !dbg !10264
  %17 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %16, align 8, !dbg !10264
  %call7 = call %struct.edge_def* @ei_safe_edge(i32 %15, %struct.VEC_edge_gc** %17), !dbg !10264
  store %struct.edge_def* %call7, %struct.edge_def** %e, align 8, !dbg !10266
  %tobool8 = icmp ne %struct.edge_def* %call7, null, !dbg !10267
  br i1 %tobool8, label %for.body, label %for.end, !dbg !10267

for.body:                                         ; preds = %for.cond
  %18 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10268
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %18, i32 0, i32 7, !dbg !10271
  %19 = load i32, i32* %flags, align 8, !dbg !10271
  %and = and i32 %19, 2, !dbg !10272
  %tobool9 = icmp ne i32 %and, 0, !dbg !10272
  br i1 %tobool9, label %if.then10, label %if.else, !dbg !10273

if.then10:                                        ; preds = %for.body
  %20 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10274
  call void @remove_edge(%struct.edge_def* %20), !dbg !10276
  store i8 1, i8* %changed, align 1, !dbg !10277
  br label %if.end, !dbg !10278

if.else:                                          ; preds = %for.body
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !10279
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then10
  br label %for.cond, !dbg !10280, !llvm.loop !10281

for.end:                                          ; preds = %for.cond
  br label %if.end11, !dbg !10282

if.end11:                                         ; preds = %for.end, %land.lhs.true
  %21 = load i8, i8* %changed, align 1, !dbg !10283
  %tobool12 = icmp ne i8 %21, 0, !dbg !10283
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !10285

if.then13:                                        ; preds = %if.end11
  call void @free_dominance_info(i32 1), !dbg !10286
  br label %if.end14, !dbg !10286

if.end14:                                         ; preds = %if.then13, %if.end11
  br label %if.end15, !dbg !10287

if.end15:                                         ; preds = %if.end14, %entry
  %22 = load i8, i8* %changed, align 1, !dbg !10288
  ret i8 %22, !dbg !10289
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gimple_purge_dead_eh_edges(%struct.basic_block_def* %bb) #0 !dbg !10290 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %changed = alloca i8, align 1
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !10291, metadata !DIExpression()), !dbg !10292
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !10293, metadata !DIExpression()), !dbg !10294
  store i8 0, i8* %changed, align 1, !dbg !10294
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !10295, metadata !DIExpression()), !dbg !10296
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !10297, metadata !DIExpression()), !dbg !10298
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !10299, metadata !DIExpression()), !dbg !10300
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10301
  %call = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %0), !dbg !10302
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !10300
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10303
  %tobool = icmp ne %union.gimple_statement_d* %1, null, !dbg !10303
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !10305

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10306
  %call1 = call zeroext i8 @stmt_can_throw_internal(%union.gimple_statement_d* %2), !dbg !10307
  %conv = zext i8 %call1 to i32, !dbg !10307
  %tobool2 = icmp ne i32 %conv, 0, !dbg !10307
  br i1 %tobool2, label %if.then, label %if.end, !dbg !10308

if.then:                                          ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !10309
  br label %return, !dbg !10309

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10310
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !10310
  %call3 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !10310
  %4 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !10310
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !10310
  %6 = extractvalue { i32, %struct.VEC_edge_gc** } %call3, 0, !dbg !10310
  store i32 %6, i32* %5, align 8, !dbg !10310
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !10310
  %8 = extractvalue { i32, %struct.VEC_edge_gc** } %call3, 1, !dbg !10310
  store %struct.VEC_edge_gc** %8, %struct.VEC_edge_gc*** %7, align 8, !dbg !10310
  %9 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !10310
  %10 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !10310
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 16, i1 false), !dbg !10310
  br label %for.cond, !dbg !10312

for.cond:                                         ; preds = %if.end8, %if.end
  %11 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !10313
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %11, i32 0, i32 0, !dbg !10313
  %13 = load i32, i32* %12, align 8, !dbg !10313
  %14 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %11, i32 0, i32 1, !dbg !10313
  %15 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %14, align 8, !dbg !10313
  %call4 = call %struct.edge_def* @ei_safe_edge(i32 %13, %struct.VEC_edge_gc** %15), !dbg !10313
  store %struct.edge_def* %call4, %struct.edge_def** %e, align 8, !dbg !10315
  %tobool5 = icmp ne %struct.edge_def* %call4, null, !dbg !10316
  br i1 %tobool5, label %for.body, label %for.end, !dbg !10316

for.body:                                         ; preds = %for.cond
  %16 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10317
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 7, !dbg !10320
  %17 = load i32, i32* %flags, align 8, !dbg !10320
  %and = and i32 %17, 8, !dbg !10321
  %tobool6 = icmp ne i32 %and, 0, !dbg !10321
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !10322

if.then7:                                         ; preds = %for.body
  %18 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10323
  call void @remove_edge_and_dominated_blocks(%struct.edge_def* %18), !dbg !10325
  store i8 1, i8* %changed, align 1, !dbg !10326
  br label %if.end8, !dbg !10327

if.else:                                          ; preds = %for.body
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !10328
  br label %if.end8

if.end8:                                          ; preds = %if.else, %if.then7
  br label %for.cond, !dbg !10329, !llvm.loop !10330

for.end:                                          ; preds = %for.cond
  %19 = load i8, i8* %changed, align 1, !dbg !10332
  store i8 %19, i8* %retval, align 1, !dbg !10333
  br label %return, !dbg !10333

return:                                           ; preds = %for.end, %if.then
  %20 = load i8, i8* %retval, align 1, !dbg !10334
  ret i8 %20, !dbg !10334
}

declare dso_local void @free_dominance_info(i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @remove_edge_and_dominated_blocks(%struct.edge_def* %e) #0 !dbg !10335 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %bbs_to_remove = alloca %struct.VEC_basic_block_heap*, align 8
  %bbs_to_fix_dom = alloca %struct.VEC_basic_block_heap*, align 8
  %df = alloca %struct.bitmap_head_def*, align 8
  %df_idom = alloca %struct.bitmap_head_def*, align 8
  %f = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %none_removed = alloca i8, align 1
  %i = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %dbb = alloca %struct.basic_block_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp35 = alloca %struct.edge_iterator, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !10336, metadata !DIExpression()), !dbg !10337
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %bbs_to_remove, metadata !10338, metadata !DIExpression()), !dbg !10339
  store %struct.VEC_basic_block_heap* null, %struct.VEC_basic_block_heap** %bbs_to_remove, align 8, !dbg !10339
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %bbs_to_fix_dom, metadata !10340, metadata !DIExpression()), !dbg !10341
  store %struct.VEC_basic_block_heap* null, %struct.VEC_basic_block_heap** %bbs_to_fix_dom, align 8, !dbg !10341
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %df, metadata !10342, metadata !DIExpression()), !dbg !10343
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %df_idom, metadata !10344, metadata !DIExpression()), !dbg !10345
  call void @llvm.dbg.declare(metadata %struct.edge_def** %f, metadata !10346, metadata !DIExpression()), !dbg !10347
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !10348, metadata !DIExpression()), !dbg !10349
  call void @llvm.dbg.declare(metadata i8* %none_removed, metadata !10350, metadata !DIExpression()), !dbg !10351
  store i8 0, i8* %none_removed, align 1, !dbg !10351
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10352, metadata !DIExpression()), !dbg !10353
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !10354, metadata !DIExpression()), !dbg !10355
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dbb, metadata !10356, metadata !DIExpression()), !dbg !10357
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !10358, metadata !DIExpression()), !dbg !10366
  %call = call zeroext i8 @dom_info_available_p(i32 1), !dbg !10367
  %tobool = icmp ne i8 %call, 0, !dbg !10367
  br i1 %tobool, label %if.end, label %if.then, !dbg !10369

if.then:                                          ; preds = %entry
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !10370
  call void @remove_edge(%struct.edge_def* %0), !dbg !10372
  br label %return, !dbg !10373

if.end:                                           ; preds = %entry
  %1 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !10374
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1, i32 0, i32 1, !dbg !10376
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !10376
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10377
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !10377
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10377
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10377
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 1, !dbg !10377
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !10377
  %cmp = icmp eq %struct.basic_block_def* %2, %5, !dbg !10378
  br i1 %cmp, label %if.then1, label %if.end6, !dbg !10379

if.then1:                                         ; preds = %if.end
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @cfgcleanup_altered_bbs, align 8, !dbg !10380
  %tobool2 = icmp ne %struct.bitmap_head_def* %6, null, !dbg !10380
  br i1 %tobool2, label %if.then3, label %if.end5, !dbg !10383

if.then3:                                         ; preds = %if.then1
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @cfgcleanup_altered_bbs, align 8, !dbg !10384
  %8 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !10385
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %8, i32 0, i32 0, !dbg !10386
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !10386
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 9, !dbg !10387
  %10 = load i32, i32* %index, align 8, !dbg !10387
  %call4 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %7, i32 %10), !dbg !10388
  br label %if.end5, !dbg !10388

if.end5:                                          ; preds = %if.then3, %if.then1
  %11 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !10389
  call void @remove_edge(%struct.edge_def* %11), !dbg !10390
  br label %return, !dbg !10391

if.end6:                                          ; preds = %if.end
  %12 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !10392
  %dest7 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %12, i32 0, i32 1, !dbg !10392
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %dest7, align 8, !dbg !10392
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 0, !dbg !10392
  %call8 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !10392
  %14 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !10392
  %15 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %14, i32 0, i32 0, !dbg !10392
  %16 = extractvalue { i32, %struct.VEC_edge_gc** } %call8, 0, !dbg !10392
  store i32 %16, i32* %15, align 8, !dbg !10392
  %17 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %14, i32 0, i32 1, !dbg !10392
  %18 = extractvalue { i32, %struct.VEC_edge_gc** } %call8, 1, !dbg !10392
  store %struct.VEC_edge_gc** %18, %struct.VEC_edge_gc*** %17, align 8, !dbg !10392
  %19 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !10392
  %20 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !10392
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 16, i1 false), !dbg !10392
  br label %for.cond, !dbg !10392

for.cond:                                         ; preds = %for.inc, %if.end6
  %21 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !10394
  %22 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %21, i32 0, i32 0, !dbg !10394
  %23 = load i32, i32* %22, align 8, !dbg !10394
  %24 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %21, i32 0, i32 1, !dbg !10394
  %25 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %24, align 8, !dbg !10394
  %call9 = call zeroext i8 @ei_cond(i32 %23, %struct.VEC_edge_gc** %25, %struct.edge_def** %f), !dbg !10394
  %tobool10 = icmp ne i8 %call9, 0, !dbg !10392
  br i1 %tobool10, label %for.body, label %for.end, !dbg !10392

for.body:                                         ; preds = %for.cond
  %26 = load %struct.edge_def*, %struct.edge_def** %f, align 8, !dbg !10396
  %27 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !10399
  %cmp11 = icmp eq %struct.edge_def* %26, %27, !dbg !10400
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !10401

if.then12:                                        ; preds = %for.body
  br label %for.inc, !dbg !10402

if.end13:                                         ; preds = %for.body
  %28 = load %struct.edge_def*, %struct.edge_def** %f, align 8, !dbg !10403
  %src14 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %28, i32 0, i32 0, !dbg !10405
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %src14, align 8, !dbg !10405
  %30 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !10406
  %dest15 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %30, i32 0, i32 1, !dbg !10407
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %dest15, align 8, !dbg !10407
  %call16 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %29, %struct.basic_block_def* %31), !dbg !10408
  %tobool17 = icmp ne i8 %call16, 0, !dbg !10408
  br i1 %tobool17, label %if.end19, label %if.then18, !dbg !10409

if.then18:                                        ; preds = %if.end13
  store i8 1, i8* %none_removed, align 1, !dbg !10410
  br label %for.end, !dbg !10412

if.end19:                                         ; preds = %if.end13
  br label %for.inc, !dbg !10413

for.inc:                                          ; preds = %if.end19, %if.then12
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !10394
  br label %for.cond, !dbg !10394, !llvm.loop !10414

for.end:                                          ; preds = %if.then18, %for.cond
  %call20 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !10416
  store %struct.bitmap_head_def* %call20, %struct.bitmap_head_def** %df, align 8, !dbg !10417
  %call21 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !10418
  store %struct.bitmap_head_def* %call21, %struct.bitmap_head_def** %df_idom, align 8, !dbg !10419
  %32 = load i8, i8* %none_removed, align 1, !dbg !10420
  %tobool22 = icmp ne i8 %32, 0, !dbg !10420
  br i1 %tobool22, label %if.then23, label %if.else, !dbg !10422

if.then23:                                        ; preds = %for.end
  %33 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %df_idom, align 8, !dbg !10423
  %34 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !10424
  %dest24 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 1, !dbg !10425
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %dest24, align 8, !dbg !10425
  %call25 = call %struct.basic_block_def* @get_immediate_dominator(i32 1, %struct.basic_block_def* %35), !dbg !10426
  %index26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call25, i32 0, i32 9, !dbg !10427
  %36 = load i32, i32* %index26, align 8, !dbg !10427
  %call27 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %33, i32 %36), !dbg !10428
  br label %if.end91, !dbg !10428

if.else:                                          ; preds = %for.end
  %37 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !10429
  %dest28 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %37, i32 0, i32 1, !dbg !10431
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %dest28, align 8, !dbg !10431
  %call29 = call %struct.VEC_basic_block_heap* @get_all_dominated_blocks(i32 1, %struct.basic_block_def* %38), !dbg !10432
  store %struct.VEC_basic_block_heap* %call29, %struct.VEC_basic_block_heap** %bbs_to_remove, align 8, !dbg !10433
  store i32 0, i32* %i, align 4, !dbg !10434
  br label %for.cond30, !dbg !10436

for.cond30:                                       ; preds = %for.inc53, %if.else
  %39 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs_to_remove, align 8, !dbg !10437
  %tobool31 = icmp ne %struct.VEC_basic_block_heap* %39, null, !dbg !10437
  br i1 %tobool31, label %cond.true, label %cond.false, !dbg !10437

cond.true:                                        ; preds = %for.cond30
  %40 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs_to_remove, align 8, !dbg !10437
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %40, i32 0, i32 0, !dbg !10437
  br label %cond.end, !dbg !10437

cond.false:                                       ; preds = %for.cond30
  br label %cond.end, !dbg !10437

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10437
  %41 = load i32, i32* %i, align 4, !dbg !10437
  %call32 = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond, i32 %41, %struct.basic_block_def** %bb), !dbg !10437
  %tobool33 = icmp ne i32 %call32, 0, !dbg !10439
  br i1 %tobool33, label %for.body34, label %for.end54, !dbg !10439

for.body34:                                       ; preds = %cond.end
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10440
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 1, !dbg !10440
  %call36 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !10440
  %43 = bitcast %struct.edge_iterator* %tmp35 to { i32, %struct.VEC_edge_gc** }*, !dbg !10440
  %44 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %43, i32 0, i32 0, !dbg !10440
  %45 = extractvalue { i32, %struct.VEC_edge_gc** } %call36, 0, !dbg !10440
  store i32 %45, i32* %44, align 8, !dbg !10440
  %46 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %43, i32 0, i32 1, !dbg !10440
  %47 = extractvalue { i32, %struct.VEC_edge_gc** } %call36, 1, !dbg !10440
  store %struct.VEC_edge_gc** %47, %struct.VEC_edge_gc*** %46, align 8, !dbg !10440
  %48 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !10440
  %49 = bitcast %struct.edge_iterator* %tmp35 to i8*, !dbg !10440
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 16, i1 false), !dbg !10440
  br label %for.cond37, !dbg !10440

for.cond37:                                       ; preds = %for.inc51, %for.body34
  %50 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !10443
  %51 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %50, i32 0, i32 0, !dbg !10443
  %52 = load i32, i32* %51, align 8, !dbg !10443
  %53 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %50, i32 0, i32 1, !dbg !10443
  %54 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %53, align 8, !dbg !10443
  %call38 = call zeroext i8 @ei_cond(i32 %52, %struct.VEC_edge_gc** %54, %struct.edge_def** %f), !dbg !10443
  %tobool39 = icmp ne i8 %call38, 0, !dbg !10440
  br i1 %tobool39, label %for.body40, label %for.end52, !dbg !10440

for.body40:                                       ; preds = %for.cond37
  %55 = load %struct.edge_def*, %struct.edge_def** %f, align 8, !dbg !10445
  %dest41 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %55, i32 0, i32 1, !dbg !10448
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %dest41, align 8, !dbg !10448
  %57 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10449
  %add.ptr42 = getelementptr inbounds %struct.function, %struct.function* %57, i64 0, !dbg !10449
  %cfg43 = getelementptr inbounds %struct.function, %struct.function* %add.ptr42, i32 0, i32 1, !dbg !10449
  %58 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg43, align 8, !dbg !10449
  %x_exit_block_ptr44 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %58, i32 0, i32 1, !dbg !10449
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr44, align 8, !dbg !10449
  %cmp45 = icmp ne %struct.basic_block_def* %56, %59, !dbg !10450
  br i1 %cmp45, label %if.then46, label %if.end50, !dbg !10451

if.then46:                                        ; preds = %for.body40
  %60 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %df, align 8, !dbg !10452
  %61 = load %struct.edge_def*, %struct.edge_def** %f, align 8, !dbg !10453
  %dest47 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %61, i32 0, i32 1, !dbg !10454
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %dest47, align 8, !dbg !10454
  %index48 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %62, i32 0, i32 9, !dbg !10455
  %63 = load i32, i32* %index48, align 8, !dbg !10455
  %call49 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %60, i32 %63), !dbg !10456
  br label %if.end50, !dbg !10456

if.end50:                                         ; preds = %if.then46, %for.body40
  br label %for.inc51, !dbg !10457

for.inc51:                                        ; preds = %if.end50
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !10443
  br label %for.cond37, !dbg !10443, !llvm.loop !10458

for.end52:                                        ; preds = %for.cond37
  br label %for.inc53, !dbg !10460

for.inc53:                                        ; preds = %for.end52
  %64 = load i32, i32* %i, align 4, !dbg !10461
  %inc = add i32 %64, 1, !dbg !10461
  store i32 %inc, i32* %i, align 4, !dbg !10461
  br label %for.cond30, !dbg !10462, !llvm.loop !10463

for.end54:                                        ; preds = %cond.end
  store i32 0, i32* %i, align 4, !dbg !10465
  br label %for.cond55, !dbg !10467

for.cond55:                                       ; preds = %for.inc67, %for.end54
  %65 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs_to_remove, align 8, !dbg !10468
  %tobool56 = icmp ne %struct.VEC_basic_block_heap* %65, null, !dbg !10468
  br i1 %tobool56, label %cond.true57, label %cond.false59, !dbg !10468

cond.true57:                                      ; preds = %for.cond55
  %66 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs_to_remove, align 8, !dbg !10468
  %base58 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %66, i32 0, i32 0, !dbg !10468
  br label %cond.end60, !dbg !10468

cond.false59:                                     ; preds = %for.cond55
  br label %cond.end60, !dbg !10468

cond.end60:                                       ; preds = %cond.false59, %cond.true57
  %cond61 = phi %struct.VEC_basic_block_base* [ %base58, %cond.true57 ], [ null, %cond.false59 ], !dbg !10468
  %67 = load i32, i32* %i, align 4, !dbg !10468
  %call62 = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond61, i32 %67, %struct.basic_block_def** %bb), !dbg !10468
  %tobool63 = icmp ne i32 %call62, 0, !dbg !10470
  br i1 %tobool63, label %for.body64, label %for.end69, !dbg !10470

for.body64:                                       ; preds = %cond.end60
  %68 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %df, align 8, !dbg !10471
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10472
  %index65 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %69, i32 0, i32 9, !dbg !10473
  %70 = load i32, i32* %index65, align 8, !dbg !10473
  %call66 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %68, i32 %70), !dbg !10474
  br label %for.inc67, !dbg !10474

for.inc67:                                        ; preds = %for.body64
  %71 = load i32, i32* %i, align 4, !dbg !10475
  %inc68 = add i32 %71, 1, !dbg !10475
  store i32 %inc68, i32* %i, align 4, !dbg !10475
  br label %for.cond55, !dbg !10476, !llvm.loop !10477

for.end69:                                        ; preds = %cond.end60
  %72 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %df, align 8, !dbg !10479
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %72, i32 0, i32* %i), !dbg !10479
  br label %for.cond70, !dbg !10479

for.cond70:                                       ; preds = %for.inc89, %for.end69
  %call71 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !10481
  %tobool72 = icmp ne i8 %call71, 0, !dbg !10479
  br i1 %tobool72, label %for.body73, label %for.end90, !dbg !10479

for.body73:                                       ; preds = %for.cond70
  %73 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10483
  %add.ptr74 = getelementptr inbounds %struct.function, %struct.function* %73, i64 0, !dbg !10483
  %cfg75 = getelementptr inbounds %struct.function, %struct.function* %add.ptr74, i32 0, i32 1, !dbg !10483
  %74 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg75, align 8, !dbg !10483
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %74, i32 0, i32 2, !dbg !10483
  %75 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !10483
  %tobool76 = icmp ne %struct.VEC_basic_block_gc* %75, null, !dbg !10483
  br i1 %tobool76, label %cond.true77, label %cond.false82, !dbg !10483

cond.true77:                                      ; preds = %for.body73
  %76 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10483
  %add.ptr78 = getelementptr inbounds %struct.function, %struct.function* %76, i64 0, !dbg !10483
  %cfg79 = getelementptr inbounds %struct.function, %struct.function* %add.ptr78, i32 0, i32 1, !dbg !10483
  %77 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg79, align 8, !dbg !10483
  %x_basic_block_info80 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %77, i32 0, i32 2, !dbg !10483
  %78 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info80, align 8, !dbg !10483
  %base81 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %78, i32 0, i32 0, !dbg !10483
  br label %cond.end83, !dbg !10483

cond.false82:                                     ; preds = %for.body73
  br label %cond.end83, !dbg !10483

cond.end83:                                       ; preds = %cond.false82, %cond.true77
  %cond84 = phi %struct.VEC_basic_block_base* [ %base81, %cond.true77 ], [ null, %cond.false82 ], !dbg !10483
  %79 = load i32, i32* %i, align 4, !dbg !10483
  %call85 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond84, i32 %79), !dbg !10483
  store %struct.basic_block_def* %call85, %struct.basic_block_def** %bb, align 8, !dbg !10485
  %80 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %df_idom, align 8, !dbg !10486
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10487
  %call86 = call %struct.basic_block_def* @get_immediate_dominator(i32 1, %struct.basic_block_def* %81), !dbg !10488
  %index87 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call86, i32 0, i32 9, !dbg !10489
  %82 = load i32, i32* %index87, align 8, !dbg !10489
  %call88 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %80, i32 %82), !dbg !10490
  br label %for.inc89, !dbg !10491

for.inc89:                                        ; preds = %cond.end83
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !10481
  br label %for.cond70, !dbg !10481, !llvm.loop !10492

for.end90:                                        ; preds = %for.cond70
  br label %if.end91

if.end91:                                         ; preds = %for.end90, %if.then23
  %83 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @cfgcleanup_altered_bbs, align 8, !dbg !10494
  %tobool92 = icmp ne %struct.bitmap_head_def* %83, null, !dbg !10494
  br i1 %tobool92, label %if.then93, label %if.end98, !dbg !10496

if.then93:                                        ; preds = %if.end91
  %84 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @cfgcleanup_altered_bbs, align 8, !dbg !10497
  %85 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !10499
  %src94 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %85, i32 0, i32 0, !dbg !10500
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %src94, align 8, !dbg !10500
  %index95 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %86, i32 0, i32 9, !dbg !10501
  %87 = load i32, i32* %index95, align 8, !dbg !10501
  %call96 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %84, i32 %87), !dbg !10502
  %88 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @cfgcleanup_altered_bbs, align 8, !dbg !10503
  %89 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %df, align 8, !dbg !10504
  %call97 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %88, %struct.bitmap_head_def* %89), !dbg !10505
  br label %if.end98, !dbg !10506

if.end98:                                         ; preds = %if.then93, %if.end91
  %90 = load i8, i8* %none_removed, align 1, !dbg !10507
  %tobool99 = icmp ne i8 %90, 0, !dbg !10507
  br i1 %tobool99, label %if.then100, label %if.else101, !dbg !10509

if.then100:                                       ; preds = %if.end98
  %91 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !10510
  call void @remove_edge(%struct.edge_def* %91), !dbg !10511
  br label %if.end120, !dbg !10511

if.else101:                                       ; preds = %if.end98
  %92 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs_to_remove, align 8, !dbg !10512
  %tobool102 = icmp ne %struct.VEC_basic_block_heap* %92, null, !dbg !10512
  br i1 %tobool102, label %cond.true103, label %cond.false105, !dbg !10512

cond.true103:                                     ; preds = %if.else101
  %93 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs_to_remove, align 8, !dbg !10512
  %base104 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %93, i32 0, i32 0, !dbg !10512
  br label %cond.end106, !dbg !10512

cond.false105:                                    ; preds = %if.else101
  br label %cond.end106, !dbg !10512

cond.end106:                                      ; preds = %cond.false105, %cond.true103
  %cond107 = phi %struct.VEC_basic_block_base* [ %base104, %cond.true103 ], [ null, %cond.false105 ], !dbg !10512
  %call108 = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond107), !dbg !10512
  store i32 %call108, i32* %i, align 4, !dbg !10515
  br label %for.cond109, !dbg !10516

for.cond109:                                      ; preds = %cond.end116, %cond.end106
  %94 = load i32, i32* %i, align 4, !dbg !10517
  %dec = add i32 %94, -1, !dbg !10517
  store i32 %dec, i32* %i, align 4, !dbg !10517
  %cmp110 = icmp ugt i32 %94, 0, !dbg !10519
  br i1 %cmp110, label %for.body111, label %for.end119, !dbg !10520

for.body111:                                      ; preds = %for.cond109
  %95 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs_to_remove, align 8, !dbg !10521
  %tobool112 = icmp ne %struct.VEC_basic_block_heap* %95, null, !dbg !10521
  br i1 %tobool112, label %cond.true113, label %cond.false115, !dbg !10521

cond.true113:                                     ; preds = %for.body111
  %96 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs_to_remove, align 8, !dbg !10521
  %base114 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %96, i32 0, i32 0, !dbg !10521
  br label %cond.end116, !dbg !10521

cond.false115:                                    ; preds = %for.body111
  br label %cond.end116, !dbg !10521

cond.end116:                                      ; preds = %cond.false115, %cond.true113
  %cond117 = phi %struct.VEC_basic_block_base* [ %base114, %cond.true113 ], [ null, %cond.false115 ], !dbg !10521
  %97 = load i32, i32* %i, align 4, !dbg !10521
  %call118 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond117, i32 %97), !dbg !10521
  call void @delete_basic_block(%struct.basic_block_def* %call118), !dbg !10522
  br label %for.cond109, !dbg !10523, !llvm.loop !10524

for.end119:                                       ; preds = %for.cond109
  br label %if.end120

if.end120:                                        ; preds = %for.end119, %if.then100
  %98 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %df_idom, align 8, !dbg !10526
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %98, i32 0, i32* %i), !dbg !10526
  br label %for.cond121, !dbg !10526

for.cond121:                                      ; preds = %for.inc146, %if.end120
  %call122 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !10528
  %tobool123 = icmp ne i8 %call122, 0, !dbg !10526
  br i1 %tobool123, label %for.body124, label %for.end147, !dbg !10526

for.body124:                                      ; preds = %for.cond121
  %99 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10530
  %add.ptr125 = getelementptr inbounds %struct.function, %struct.function* %99, i64 0, !dbg !10530
  %cfg126 = getelementptr inbounds %struct.function, %struct.function* %add.ptr125, i32 0, i32 1, !dbg !10530
  %100 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg126, align 8, !dbg !10530
  %x_basic_block_info127 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %100, i32 0, i32 2, !dbg !10530
  %101 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info127, align 8, !dbg !10530
  %tobool128 = icmp ne %struct.VEC_basic_block_gc* %101, null, !dbg !10530
  br i1 %tobool128, label %cond.true129, label %cond.false134, !dbg !10530

cond.true129:                                     ; preds = %for.body124
  %102 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10530
  %add.ptr130 = getelementptr inbounds %struct.function, %struct.function* %102, i64 0, !dbg !10530
  %cfg131 = getelementptr inbounds %struct.function, %struct.function* %add.ptr130, i32 0, i32 1, !dbg !10530
  %103 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg131, align 8, !dbg !10530
  %x_basic_block_info132 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %103, i32 0, i32 2, !dbg !10530
  %104 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info132, align 8, !dbg !10530
  %base133 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %104, i32 0, i32 0, !dbg !10530
  br label %cond.end135, !dbg !10530

cond.false134:                                    ; preds = %for.body124
  br label %cond.end135, !dbg !10530

cond.end135:                                      ; preds = %cond.false134, %cond.true129
  %cond136 = phi %struct.VEC_basic_block_base* [ %base133, %cond.true129 ], [ null, %cond.false134 ], !dbg !10530
  %105 = load i32, i32* %i, align 4, !dbg !10530
  %call137 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond136, i32 %105), !dbg !10530
  store %struct.basic_block_def* %call137, %struct.basic_block_def** %bb, align 8, !dbg !10532
  %106 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10533
  %call138 = call %struct.basic_block_def* @first_dom_son(i32 1, %struct.basic_block_def* %106), !dbg !10535
  store %struct.basic_block_def* %call138, %struct.basic_block_def** %dbb, align 8, !dbg !10536
  br label %for.cond139, !dbg !10537

for.cond139:                                      ; preds = %for.inc143, %cond.end135
  %107 = load %struct.basic_block_def*, %struct.basic_block_def** %dbb, align 8, !dbg !10538
  %tobool140 = icmp ne %struct.basic_block_def* %107, null, !dbg !10540
  br i1 %tobool140, label %for.body141, label %for.end145, !dbg !10540

for.body141:                                      ; preds = %for.cond139
  %108 = load %struct.basic_block_def*, %struct.basic_block_def** %dbb, align 8, !dbg !10541
  %call142 = call %struct.basic_block_def** @VEC_basic_block_heap_safe_push(%struct.VEC_basic_block_heap** %bbs_to_fix_dom, %struct.basic_block_def* %108), !dbg !10541
  br label %for.inc143, !dbg !10541

for.inc143:                                       ; preds = %for.body141
  %109 = load %struct.basic_block_def*, %struct.basic_block_def** %dbb, align 8, !dbg !10542
  %call144 = call %struct.basic_block_def* @next_dom_son(i32 1, %struct.basic_block_def* %109), !dbg !10543
  store %struct.basic_block_def* %call144, %struct.basic_block_def** %dbb, align 8, !dbg !10544
  br label %for.cond139, !dbg !10545, !llvm.loop !10546

for.end145:                                       ; preds = %for.cond139
  br label %for.inc146, !dbg !10548

for.inc146:                                       ; preds = %for.end145
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !10528
  br label %for.cond121, !dbg !10528, !llvm.loop !10549

for.end147:                                       ; preds = %for.cond121
  %110 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs_to_fix_dom, align 8, !dbg !10551
  call void @iterate_fix_dominators(i32 1, %struct.VEC_basic_block_heap* %110, i8 zeroext 1), !dbg !10552
  %111 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %df, align 8, !dbg !10553
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %111), !dbg !10553
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %df, align 8, !dbg !10553
  %112 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %df_idom, align 8, !dbg !10554
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %112), !dbg !10554
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %df_idom, align 8, !dbg !10554
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %bbs_to_remove), !dbg !10555
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %bbs_to_fix_dom), !dbg !10556
  br label %return, !dbg !10557

return:                                           ; preds = %for.end147, %if.end5, %if.then
  ret void, !dbg !10557
}

declare dso_local zeroext i8 @dom_info_available_p(i32) #2

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

declare dso_local %struct.VEC_basic_block_heap* @get_all_dominated_blocks(i32, %struct.basic_block_def*) #2

declare dso_local zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !10558 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !10565, metadata !DIExpression()), !dbg !10566
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !10567, metadata !DIExpression()), !dbg !10568
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !10569, metadata !DIExpression()), !dbg !10570
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !10571, metadata !DIExpression()), !dbg !10572
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !10573
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !10574
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !10574
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10575
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !10576
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !10577
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10578
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !10579
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !10580
  br label %while.body, !dbg !10581

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10582
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !10585
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !10585
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !10582
  br i1 %tobool, label %if.end, label %if.then, !dbg !10586

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10587
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !10589
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !10590
  br label %while.end, !dbg !10591

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10592
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !10594
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !10594
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !10595
  %9 = load i32, i32* %indx, align 8, !dbg !10595
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !10596
  %div = udiv i32 %10, 128, !dbg !10597
  %cmp = icmp uge i32 %9, %div, !dbg !10598
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !10599

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !10600

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10601
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !10602
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !10602
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !10603
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !10603
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10604
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !10605
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !10606
  br label %while.body, !dbg !10581, !llvm.loop !10607

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10609
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !10611
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !10611
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !10612
  %17 = load i32, i32* %indx9, align 8, !dbg !10612
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !10613
  %div10 = udiv i32 %18, 128, !dbg !10614
  %cmp11 = icmp ne i32 %17, %div10, !dbg !10615
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !10616

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10617
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !10618
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !10618
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !10619
  %21 = load i32, i32* %indx14, align 8, !dbg !10619
  %mul = mul i32 %21, 128, !dbg !10620
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !10621
  br label %if.end15, !dbg !10622

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !10623
  %div16 = udiv i32 %22, 64, !dbg !10624
  %rem = urem i32 %div16, 2, !dbg !10625
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10626
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !10627
  store i32 %rem, i32* %word_no, align 8, !dbg !10628
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10629
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !10630
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !10630
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !10631
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10632
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !10633
  %27 = load i32, i32* %word_no18, align 8, !dbg !10633
  %idxprom = zext i32 %27 to i64, !dbg !10629
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !10629
  %28 = load i64, i64* %arrayidx, align 8, !dbg !10629
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10634
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !10635
  store i64 %28, i64* %bits19, align 8, !dbg !10636
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !10637
  %rem20 = urem i32 %30, 64, !dbg !10638
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10639
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !10640
  %32 = load i64, i64* %bits21, align 8, !dbg !10641
  %sh_prom = zext i32 %rem20 to i64, !dbg !10641
  %shr = lshr i64 %32, %sh_prom, !dbg !10641
  store i64 %shr, i64* %bits21, align 8, !dbg !10641
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10642
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !10643
  %34 = load i64, i64* %bits22, align 8, !dbg !10643
  %tobool23 = icmp ne i64 %34, 0, !dbg !10644
  %lnot = xor i1 %tobool23, true, !dbg !10644
  %lnot.ext = zext i1 %lnot to i32, !dbg !10644
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !10645
  %add = add i32 %35, %lnot.ext, !dbg !10645
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !10645
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !10646
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !10647
  store i32 %36, i32* %37, align 4, !dbg !10648
  ret void, !dbg !10649
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !10650 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !10653, metadata !DIExpression()), !dbg !10654
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !10655, metadata !DIExpression()), !dbg !10656
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10657
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !10659
  %1 = load i64, i64* %bits, align 8, !dbg !10659
  %tobool = icmp ne i64 %1, 0, !dbg !10657
  br i1 %tobool, label %if.then, label %if.end, !dbg !10660

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !10661

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !10662), !dbg !10664
  br label %while.cond, !dbg !10665

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10666
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !10667
  %3 = load i64, i64* %bits1, align 8, !dbg !10667
  %and = and i64 %3, 1, !dbg !10668
  %tobool2 = icmp ne i64 %and, 0, !dbg !10669
  %lnot = xor i1 %tobool2, true, !dbg !10669
  br i1 %lnot, label %while.body, label %while.end, !dbg !10665

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10670
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !10672
  %5 = load i64, i64* %bits3, align 8, !dbg !10673
  %shr = lshr i64 %5, 1, !dbg !10673
  store i64 %shr, i64* %bits3, align 8, !dbg !10673
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !10674
  %7 = load i32, i32* %6, align 4, !dbg !10675
  %add = add i32 %7, 1, !dbg !10675
  store i32 %add, i32* %6, align 4, !dbg !10675
  br label %while.cond, !dbg !10665, !llvm.loop !10676

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !10678
  br label %return, !dbg !10678

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !10679
  %9 = load i32, i32* %8, align 4, !dbg !10680
  %add4 = add i32 %9, 64, !dbg !10681
  %sub = sub i32 %add4, 1, !dbg !10682
  %div = udiv i32 %sub, 64, !dbg !10683
  %mul = mul i32 %div, 64, !dbg !10684
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !10685
  store i32 %mul, i32* %10, align 4, !dbg !10686
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10687
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !10688
  %12 = load i32, i32* %word_no, align 8, !dbg !10689
  %inc = add i32 %12, 1, !dbg !10689
  store i32 %inc, i32* %word_no, align 8, !dbg !10689
  br label %while.body6, !dbg !10690

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !10691

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10693
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !10694
  %14 = load i32, i32* %word_no8, align 8, !dbg !10694
  %cmp = icmp ne i32 %14, 2, !dbg !10695
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !10691

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10696
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !10698
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !10698
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !10699
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10700
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !10701
  %18 = load i32, i32* %word_no11, align 8, !dbg !10701
  %idxprom = zext i32 %18 to i64, !dbg !10696
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !10696
  %19 = load i64, i64* %arrayidx, align 8, !dbg !10696
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10702
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !10703
  store i64 %19, i64* %bits12, align 8, !dbg !10704
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10705
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !10707
  %22 = load i64, i64* %bits13, align 8, !dbg !10707
  %tobool14 = icmp ne i64 %22, 0, !dbg !10705
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !10708

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !10709

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !10710
  %24 = load i32, i32* %23, align 4, !dbg !10711
  %add17 = add i32 %24, 64, !dbg !10711
  store i32 %add17, i32* %23, align 4, !dbg !10711
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10712
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !10713
  %26 = load i32, i32* %word_no18, align 8, !dbg !10714
  %inc19 = add i32 %26, 1, !dbg !10714
  store i32 %inc19, i32* %word_no18, align 8, !dbg !10714
  br label %while.cond7, !dbg !10691, !llvm.loop !10715

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10717
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !10718
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !10718
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !10719
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !10719
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10720
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !10721
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !10722
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10723
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !10725
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !10725
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !10723
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !10726

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !10727
  br label %return, !dbg !10727

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10728
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !10729
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !10729
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !10730
  %35 = load i32, i32* %indx, align 8, !dbg !10730
  %mul28 = mul i32 %35, 128, !dbg !10731
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !10732
  store i32 %mul28, i32* %36, align 4, !dbg !10733
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10734
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !10735
  store i32 0, i32* %word_no29, align 8, !dbg !10736
  br label %while.body6, !dbg !10690, !llvm.loop !10737

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !10739
  ret i8 %38, !dbg !10739
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !10740 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !10743, metadata !DIExpression()), !dbg !10744
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !10745, metadata !DIExpression()), !dbg !10746
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10747
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !10748
  %1 = load i64, i64* %bits, align 8, !dbg !10749
  %shr = lshr i64 %1, 1, !dbg !10749
  store i64 %shr, i64* %bits, align 8, !dbg !10749
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !10750
  %3 = load i32, i32* %2, align 4, !dbg !10751
  %add = add i32 %3, 1, !dbg !10751
  store i32 %add, i32* %2, align 4, !dbg !10751
  ret void, !dbg !10752
}

declare dso_local zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

declare dso_local void @delete_basic_block(%struct.basic_block_def*) #2

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gimple_purge_all_dead_eh_edges(%struct.bitmap_head_def* %blocks) #0 !dbg !10753 {
entry:
  %blocks.addr = alloca %struct.bitmap_head_def*, align 8
  %changed = alloca i8, align 1
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %struct.bitmap_head_def* %blocks, %struct.bitmap_head_def** %blocks.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %blocks.addr, metadata !10756, metadata !DIExpression()), !dbg !10757
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !10758, metadata !DIExpression()), !dbg !10759
  store i8 0, i8* %changed, align 1, !dbg !10759
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10760, metadata !DIExpression()), !dbg !10761
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !10762, metadata !DIExpression()), !dbg !10763
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %blocks.addr, align 8, !dbg !10764
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %0, i32 0, i32* %i), !dbg !10764
  br label %for.cond, !dbg !10764

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !10766
  %tobool = icmp ne i8 %call, 0, !dbg !10764
  br i1 %tobool, label %for.body, label %for.end, !dbg !10764

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !10768, metadata !DIExpression()), !dbg !10770
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10771
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !10771
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10771
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10771
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 2, !dbg !10771
  %3 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !10771
  %tobool1 = icmp ne %struct.VEC_basic_block_gc* %3, null, !dbg !10771
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !10771

cond.true:                                        ; preds = %for.body
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10771
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !10771
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 1, !dbg !10771
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !10771
  %x_basic_block_info4 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 2, !dbg !10771
  %6 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info4, align 8, !dbg !10771
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %6, i32 0, i32 0, !dbg !10771
  br label %cond.end, !dbg !10771

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !10771

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10771
  %7 = load i32, i32* %i, align 4, !dbg !10771
  %call5 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %7), !dbg !10771
  store %struct.basic_block_def* %call5, %struct.basic_block_def** %bb, align 8, !dbg !10770
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10772
  %tobool6 = icmp ne %struct.basic_block_def* %8, null, !dbg !10772
  br i1 %tobool6, label %cond.false9, label %lor.lhs.false, !dbg !10772

lor.lhs.false:                                    ; preds = %cond.end
  %9 = load i8, i8* %changed, align 1, !dbg !10772
  %conv = zext i8 %9 to i32, !dbg !10772
  %tobool7 = icmp ne i32 %conv, 0, !dbg !10772
  br i1 %tobool7, label %cond.false9, label %cond.true8, !dbg !10772

cond.true8:                                       ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 6844, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !10772
  br label %cond.end10, !dbg !10772

cond.false9:                                      ; preds = %lor.lhs.false, %cond.end
  br label %cond.end10, !dbg !10772

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi i32 [ 0, %cond.true8 ], [ 0, %cond.false9 ], !dbg !10772
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10773
  %cmp = icmp ne %struct.basic_block_def* %10, null, !dbg !10775
  br i1 %cmp, label %if.then, label %if.end, !dbg !10776

if.then:                                          ; preds = %cond.end10
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10777
  %call13 = call zeroext i8 @gimple_purge_dead_eh_edges(%struct.basic_block_def* %11), !dbg !10778
  %conv14 = zext i8 %call13 to i32, !dbg !10778
  %12 = load i8, i8* %changed, align 1, !dbg !10779
  %conv15 = zext i8 %12 to i32, !dbg !10779
  %or = or i32 %conv15, %conv14, !dbg !10779
  %conv16 = trunc i32 %or to i8, !dbg !10779
  store i8 %conv16, i8* %changed, align 1, !dbg !10779
  br label %if.end, !dbg !10780

if.end:                                           ; preds = %if.then, %cond.end10
  br label %for.inc, !dbg !10781

for.inc:                                          ; preds = %if.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !10766
  br label %for.cond, !dbg !10766, !llvm.loop !10782

for.end:                                          ; preds = %for.cond
  %13 = load i8, i8* %changed, align 1, !dbg !10784
  ret i8 %13, !dbg !10785
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_verify_flow_info() #0 !dbg !10786 {
entry:
  %err = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %found_ctrl_stmt = alloca i8, align 1
  %tmp24 = alloca %struct.gimple_stmt_iterator, align 8
  %label = alloca %union.tree_node*, align 8
  %prev_stmt = alloca %union.gimple_statement_d*, align 8
  %stmt68 = alloca %union.gimple_statement_d*, align 8
  %tmp87 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp101 = alloca %struct.edge_iterator, align 8
  %tmp120 = alloca %struct.edge_iterator, align 8
  %true_edge = alloca %struct.edge_def*, align 8
  %false_edge = alloca %struct.edge_def*, align 8
  %tmp170 = alloca %struct.edge_iterator, align 8
  %prev = alloca %union.tree_node*, align 8
  %e211 = alloca %struct.edge_def*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %lab = alloca %union.tree_node*, align 8
  %label_bb = alloca %struct.basic_block_def*, align 8
  %c = alloca %union.tree_node*, align 8
  %tmp267 = alloca %struct.edge_iterator, align 8
  %lab295 = alloca %union.tree_node*, align 8
  %label_bb301 = alloca %struct.basic_block_def*, align 8
  %tmp314 = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.declare(metadata i32* %err, metadata !10787, metadata !DIExpression()), !dbg !10788
  store i32 0, i32* %err, align 4, !dbg !10788
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !10789, metadata !DIExpression()), !dbg !10790
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !10791, metadata !DIExpression()), !dbg !10792
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !10793, metadata !DIExpression()), !dbg !10794
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !10795, metadata !DIExpression()), !dbg !10796
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !10797, metadata !DIExpression()), !dbg !10798
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10799
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !10799
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10799
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10799
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !10799
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !10799
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !10801
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !10802
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !10802
  %tobool = icmp ne %struct.gimple_bb_info* %3, null, !dbg !10799
  br i1 %tobool, label %if.then, label %if.end, !dbg !10803

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.155, i64 0, i64 0)), !dbg !10804
  store i32 1, i32* %err, align 4, !dbg !10806
  br label %if.end, !dbg !10807

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10808
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !10808
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !10808
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !10808
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 1, !dbg !10808
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !10808
  %il3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 7, !dbg !10810
  %gimple4 = bitcast %union.basic_block_il_dependent* %il3 to %struct.gimple_bb_info**, !dbg !10811
  %7 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple4, align 8, !dbg !10811
  %tobool5 = icmp ne %struct.gimple_bb_info* %7, null, !dbg !10808
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !10812

if.then6:                                         ; preds = %if.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.156, i64 0, i64 0)), !dbg !10813
  store i32 1, i32* %err, align 4, !dbg !10815
  br label %if.end7, !dbg !10816

if.end7:                                          ; preds = %if.then6, %if.end
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10817
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !10817
  %cfg9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 1, !dbg !10817
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg9, align 8, !dbg !10817
  %x_exit_block_ptr10 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 1, !dbg !10817
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr10, align 8, !dbg !10817
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 0, !dbg !10817
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !10817
  %11 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !10817
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %11, i32 0, i32 0, !dbg !10817
  %13 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !10817
  store i32 %13, i32* %12, align 8, !dbg !10817
  %14 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %11, i32 0, i32 1, !dbg !10817
  %15 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !10817
  store %struct.VEC_edge_gc** %15, %struct.VEC_edge_gc*** %14, align 8, !dbg !10817
  %16 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !10817
  %17 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !10817
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 16, i1 false), !dbg !10817
  br label %for.cond, !dbg !10817

for.cond:                                         ; preds = %for.inc, %if.end7
  %18 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !10819
  %19 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %18, i32 0, i32 0, !dbg !10819
  %20 = load i32, i32* %19, align 8, !dbg !10819
  %21 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %18, i32 0, i32 1, !dbg !10819
  %22 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %21, align 8, !dbg !10819
  %call11 = call zeroext i8 @ei_cond(i32 %20, %struct.VEC_edge_gc** %22, %struct.edge_def** %e), !dbg !10819
  %tobool12 = icmp ne i8 %call11, 0, !dbg !10817
  br i1 %tobool12, label %for.body, label %for.end, !dbg !10817

for.body:                                         ; preds = %for.cond
  %23 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10821
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %23, i32 0, i32 7, !dbg !10823
  %24 = load i32, i32* %flags, align 8, !dbg !10823
  %and = and i32 %24, 1, !dbg !10824
  %tobool13 = icmp ne i32 %and, 0, !dbg !10824
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !10825

if.then14:                                        ; preds = %for.body
  %25 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10826
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %25, i32 0, i32 0, !dbg !10828
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !10828
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 9, !dbg !10829
  %27 = load i32, i32* %index, align 8, !dbg !10829
  call void (i8*, ...) @error(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.157, i64 0, i64 0), i32 %27), !dbg !10830
  store i32 1, i32* %err, align 4, !dbg !10831
  br label %if.end15, !dbg !10832

if.end15:                                         ; preds = %if.then14, %for.body
  br label %for.inc, !dbg !10833

for.inc:                                          ; preds = %if.end15
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !10819
  br label %for.cond, !dbg !10819, !llvm.loop !10834

for.end:                                          ; preds = %for.cond
  %28 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10836
  %add.ptr16 = getelementptr inbounds %struct.function, %struct.function* %28, i64 0, !dbg !10836
  %cfg17 = getelementptr inbounds %struct.function, %struct.function* %add.ptr16, i32 0, i32 1, !dbg !10836
  %29 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg17, align 8, !dbg !10836
  %x_entry_block_ptr18 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %29, i32 0, i32 0, !dbg !10836
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr18, align 8, !dbg !10836
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 6, !dbg !10836
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !10836
  store %struct.basic_block_def* %31, %struct.basic_block_def** %bb, align 8, !dbg !10836
  br label %for.cond19, !dbg !10836

for.cond19:                                       ; preds = %for.inc329, %for.end
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10838
  %33 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10838
  %add.ptr20 = getelementptr inbounds %struct.function, %struct.function* %33, i64 0, !dbg !10838
  %cfg21 = getelementptr inbounds %struct.function, %struct.function* %add.ptr20, i32 0, i32 1, !dbg !10838
  %34 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg21, align 8, !dbg !10838
  %x_exit_block_ptr22 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %34, i32 0, i32 1, !dbg !10838
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr22, align 8, !dbg !10838
  %cmp = icmp ne %struct.basic_block_def* %32, %35, !dbg !10838
  br i1 %cmp, label %for.body23, label %for.end331, !dbg !10836

for.body23:                                       ; preds = %for.cond19
  call void @llvm.dbg.declare(metadata i8* %found_ctrl_stmt, metadata !10840, metadata !DIExpression()), !dbg !10842
  store i8 0, i8* %found_ctrl_stmt, align 1, !dbg !10842
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !10843
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10844
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp24, %struct.basic_block_def* %36), !dbg !10846
  %37 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !10846
  %38 = bitcast %struct.gimple_stmt_iterator* %tmp24 to i8*, !dbg !10846
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false), !dbg !10846
  br label %for.cond25, !dbg !10847

for.cond25:                                       ; preds = %for.inc61, %for.body23
  %call26 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !10848
  %tobool27 = icmp ne i8 %call26, 0, !dbg !10850
  %lnot = xor i1 %tobool27, true, !dbg !10850
  br i1 %lnot, label %for.body28, label %for.end62, !dbg !10851

for.body28:                                       ; preds = %for.cond25
  call void @llvm.dbg.declare(metadata %union.tree_node** %label, metadata !10852, metadata !DIExpression()), !dbg !10854
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %prev_stmt, metadata !10855, metadata !DIExpression()), !dbg !10856
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10857
  store %union.gimple_statement_d* %39, %union.gimple_statement_d** %prev_stmt, align 8, !dbg !10856
  %call29 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !10858
  store %union.gimple_statement_d* %call29, %union.gimple_statement_d** %stmt, align 8, !dbg !10859
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10860
  %call30 = call i32 @gimple_code(%union.gimple_statement_d* %40), !dbg !10862
  %cmp31 = icmp ne i32 %call30, 4, !dbg !10863
  br i1 %cmp31, label %if.then32, label %if.end33, !dbg !10864

if.then32:                                        ; preds = %for.body28
  br label %for.end62, !dbg !10865

if.end33:                                         ; preds = %for.body28
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10866
  %call34 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %41), !dbg !10867
  store %union.tree_node* %call34, %union.tree_node** %label, align 8, !dbg !10868
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %prev_stmt, align 8, !dbg !10869
  %tobool35 = icmp ne %union.gimple_statement_d* %42, null, !dbg !10869
  br i1 %tobool35, label %land.lhs.true, label %if.end40, !dbg !10871

land.lhs.true:                                    ; preds = %if.end33
  %43 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !10872
  %decl_common = bitcast %union.tree_node* %43 to %struct.tree_decl_common*, !dbg !10872
  %nonlocal_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !10872
  %44 = bitcast i40* %nonlocal_flag to i64*, !dbg !10872
  %bf.load = load i64, i64* %44, align 8, !dbg !10872
  %bf.lshr = lshr i64 %bf.load, 8, !dbg !10872
  %bf.clear = and i64 %bf.lshr, 1, !dbg !10872
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10872
  %tobool36 = icmp ne i32 %bf.cast, 0, !dbg !10872
  br i1 %tobool36, label %if.then37, label %if.end40, !dbg !10873

if.then37:                                        ; preds = %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.158, i64 0, i64 0)), !dbg !10874
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10876
  %46 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !10877
  call void @print_generic_expr(%struct._IO_FILE* %45, %union.tree_node* %46, i32 0), !dbg !10878
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10879
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10880
  %index38 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 9, !dbg !10881
  %49 = load i32, i32* %index38, align 8, !dbg !10881
  %call39 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.159, i64 0, i64 0), i32 %49), !dbg !10882
  store i32 1, i32* %err, align 4, !dbg !10883
  br label %if.end40, !dbg !10884

if.end40:                                         ; preds = %if.then37, %land.lhs.true, %if.end33
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %prev_stmt, align 8, !dbg !10885
  %tobool41 = icmp ne %union.gimple_statement_d* %50, null, !dbg !10885
  br i1 %tobool41, label %land.lhs.true42, label %if.end47, !dbg !10887

land.lhs.true42:                                  ; preds = %if.end40
  %51 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !10888
  %label_decl = bitcast %union.tree_node* %51 to %struct.tree_label_decl*, !dbg !10888
  %eh_landing_pad_nr = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl, i32 0, i32 2, !dbg !10888
  %52 = load i32, i32* %eh_landing_pad_nr, align 4, !dbg !10888
  %cmp43 = icmp ne i32 %52, 0, !dbg !10889
  br i1 %cmp43, label %if.then44, label %if.end47, !dbg !10890

if.then44:                                        ; preds = %land.lhs.true42
  call void (i8*, ...) @error(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.160, i64 0, i64 0)), !dbg !10891
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10893
  %54 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !10894
  call void @print_generic_expr(%struct._IO_FILE* %53, %union.tree_node* %54, i32 0), !dbg !10895
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10896
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10897
  %index45 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %56, i32 0, i32 9, !dbg !10898
  %57 = load i32, i32* %index45, align 8, !dbg !10898
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %55, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.159, i64 0, i64 0), i32 %57), !dbg !10899
  store i32 1, i32* %err, align 4, !dbg !10900
  br label %if.end47, !dbg !10901

if.end47:                                         ; preds = %if.then44, %land.lhs.true42, %if.end40
  %58 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10902
  %add.ptr48 = getelementptr inbounds %struct.function, %struct.function* %58, i64 0, !dbg !10902
  %59 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !10902
  %call49 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr48, %union.tree_node* %59), !dbg !10902
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10904
  %cmp50 = icmp ne %struct.basic_block_def* %call49, %60, !dbg !10905
  br i1 %cmp50, label %if.then51, label %if.end54, !dbg !10906

if.then51:                                        ; preds = %if.end47
  call void (i8*, ...) @error(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.161, i64 0, i64 0)), !dbg !10907
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10909
  %62 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !10910
  call void @print_generic_expr(%struct._IO_FILE* %61, %union.tree_node* %62, i32 0), !dbg !10911
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10912
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10913
  %index52 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %64, i32 0, i32 9, !dbg !10914
  %65 = load i32, i32* %index52, align 8, !dbg !10914
  %call53 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %63, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.162, i64 0, i64 0), i32 %65), !dbg !10915
  store i32 1, i32* %err, align 4, !dbg !10916
  br label %if.end54, !dbg !10917

if.end54:                                         ; preds = %if.then51, %if.end47
  %66 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !10918
  %call55 = call %union.tree_node* @decl_function_context(%union.tree_node* %66), !dbg !10920
  %67 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !10921
  %cmp56 = icmp ne %union.tree_node* %call55, %67, !dbg !10922
  br i1 %cmp56, label %if.then57, label %if.end60, !dbg !10923

if.then57:                                        ; preds = %if.end54
  call void (i8*, ...) @error(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.161, i64 0, i64 0)), !dbg !10924
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10926
  %69 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !10927
  call void @print_generic_expr(%struct._IO_FILE* %68, %union.tree_node* %69, i32 0), !dbg !10928
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10929
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10930
  %index58 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %71, i32 0, i32 9, !dbg !10931
  %72 = load i32, i32* %index58, align 8, !dbg !10931
  %call59 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %70, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.163, i64 0, i64 0), i32 %72), !dbg !10932
  store i32 1, i32* %err, align 4, !dbg !10933
  br label %if.end60, !dbg !10934

if.end60:                                         ; preds = %if.then57, %if.end54
  br label %for.inc61, !dbg !10935

for.inc61:                                        ; preds = %if.end60
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !10936
  br label %for.cond25, !dbg !10937, !llvm.loop !10938

for.end62:                                        ; preds = %if.then32, %for.cond25
  br label %for.cond63, !dbg !10940

for.cond63:                                       ; preds = %for.inc85, %for.end62
  %call64 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !10941
  %tobool65 = icmp ne i8 %call64, 0, !dbg !10944
  %lnot66 = xor i1 %tobool65, true, !dbg !10944
  br i1 %lnot66, label %for.body67, label %for.end86, !dbg !10945

for.body67:                                       ; preds = %for.cond63
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt68, metadata !10946, metadata !DIExpression()), !dbg !10948
  %call69 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !10949
  store %union.gimple_statement_d* %call69, %union.gimple_statement_d** %stmt68, align 8, !dbg !10948
  %73 = load i8, i8* %found_ctrl_stmt, align 1, !dbg !10950
  %tobool70 = icmp ne i8 %73, 0, !dbg !10950
  br i1 %tobool70, label %if.then71, label %if.end73, !dbg !10952

if.then71:                                        ; preds = %for.body67
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10953
  %index72 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %74, i32 0, i32 9, !dbg !10955
  %75 = load i32, i32* %index72, align 8, !dbg !10955
  call void (i8*, ...) @error(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.164, i64 0, i64 0), i32 %75), !dbg !10956
  store i32 1, i32* %err, align 4, !dbg !10957
  br label %if.end73, !dbg !10958

if.end73:                                         ; preds = %if.then71, %for.body67
  %76 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt68, align 8, !dbg !10959
  %call74 = call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %76), !dbg !10961
  %tobool75 = icmp ne i8 %call74, 0, !dbg !10961
  br i1 %tobool75, label %if.then76, label %if.end77, !dbg !10962

if.then76:                                        ; preds = %if.end73
  store i8 1, i8* %found_ctrl_stmt, align 1, !dbg !10963
  br label %if.end77, !dbg !10964

if.end77:                                         ; preds = %if.then76, %if.end73
  %77 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt68, align 8, !dbg !10965
  %call78 = call i32 @gimple_code(%union.gimple_statement_d* %77), !dbg !10967
  %cmp79 = icmp eq i32 %call78, 4, !dbg !10968
  br i1 %cmp79, label %if.then80, label %if.end84, !dbg !10969

if.then80:                                        ; preds = %if.end77
  call void (i8*, ...) @error(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.161, i64 0, i64 0)), !dbg !10970
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10972
  %79 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt68, align 8, !dbg !10973
  %call81 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %79), !dbg !10974
  call void @print_generic_expr(%struct._IO_FILE* %78, %union.tree_node* %call81, i32 0), !dbg !10975
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !10976
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10977
  %index82 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %81, i32 0, i32 9, !dbg !10978
  %82 = load i32, i32* %index82, align 8, !dbg !10978
  %call83 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %80, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.165, i64 0, i64 0), i32 %82), !dbg !10979
  store i32 1, i32* %err, align 4, !dbg !10980
  br label %if.end84, !dbg !10981

if.end84:                                         ; preds = %if.then80, %if.end77
  br label %for.inc85, !dbg !10982

for.inc85:                                        ; preds = %if.end84
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !10983
  br label %for.cond63, !dbg !10984, !llvm.loop !10985

for.end86:                                        ; preds = %for.cond63
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10987
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp87, %struct.basic_block_def* %83), !dbg !10988
  %84 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !10988
  %85 = bitcast %struct.gimple_stmt_iterator* %tmp87 to i8*, !dbg !10988
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %85, i64 24, i1 false), !dbg !10988
  %call88 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !10989
  %tobool89 = icmp ne i8 %call88, 0, !dbg !10989
  br i1 %tobool89, label %if.then90, label %if.end91, !dbg !10991

if.then90:                                        ; preds = %for.end86
  br label %for.inc329, !dbg !10992

if.end91:                                         ; preds = %for.end86
  %call92 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !10993
  store %union.gimple_statement_d* %call92, %union.gimple_statement_d** %stmt, align 8, !dbg !10994
  %86 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10995
  %call93 = call i32 @gimple_code(%union.gimple_statement_d* %86), !dbg !10997
  %cmp94 = icmp eq i32 %call93, 4, !dbg !10998
  br i1 %cmp94, label %if.then95, label %if.end96, !dbg !10999

if.then95:                                        ; preds = %if.end91
  br label %for.inc329, !dbg !11000

if.end96:                                         ; preds = %if.end91
  %87 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11001
  %call97 = call zeroext i8 @verify_eh_edges(%union.gimple_statement_d* %87), !dbg !11002
  %conv = zext i8 %call97 to i32, !dbg !11002
  %88 = load i32, i32* %err, align 4, !dbg !11003
  %or = or i32 %88, %conv, !dbg !11003
  store i32 %or, i32* %err, align 4, !dbg !11003
  %89 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11004
  %call98 = call zeroext i8 @is_ctrl_stmt(%union.gimple_statement_d* %89), !dbg !11006
  %tobool99 = icmp ne i8 %call98, 0, !dbg !11006
  br i1 %tobool99, label %if.then100, label %if.end115, !dbg !11007

if.then100:                                       ; preds = %if.end96
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11008
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %90, i32 0, i32 1, !dbg !11008
  %call102 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !11008
  %91 = bitcast %struct.edge_iterator* %tmp101 to { i32, %struct.VEC_edge_gc** }*, !dbg !11008
  %92 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %91, i32 0, i32 0, !dbg !11008
  %93 = extractvalue { i32, %struct.VEC_edge_gc** } %call102, 0, !dbg !11008
  store i32 %93, i32* %92, align 8, !dbg !11008
  %94 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %91, i32 0, i32 1, !dbg !11008
  %95 = extractvalue { i32, %struct.VEC_edge_gc** } %call102, 1, !dbg !11008
  store %struct.VEC_edge_gc** %95, %struct.VEC_edge_gc*** %94, align 8, !dbg !11008
  %96 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !11008
  %97 = bitcast %struct.edge_iterator* %tmp101 to i8*, !dbg !11008
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %96, i8* align 8 %97, i64 16, i1 false), !dbg !11008
  br label %for.cond103, !dbg !11008

for.cond103:                                      ; preds = %for.inc113, %if.then100
  %98 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !11011
  %99 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %98, i32 0, i32 0, !dbg !11011
  %100 = load i32, i32* %99, align 8, !dbg !11011
  %101 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %98, i32 0, i32 1, !dbg !11011
  %102 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %101, align 8, !dbg !11011
  %call104 = call zeroext i8 @ei_cond(i32 %100, %struct.VEC_edge_gc** %102, %struct.edge_def** %e), !dbg !11011
  %tobool105 = icmp ne i8 %call104, 0, !dbg !11008
  br i1 %tobool105, label %for.body106, label %for.end114, !dbg !11008

for.body106:                                      ; preds = %for.cond103
  %103 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11013
  %flags107 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %103, i32 0, i32 7, !dbg !11015
  %104 = load i32, i32* %flags107, align 8, !dbg !11015
  %and108 = and i32 %104, 1, !dbg !11016
  %tobool109 = icmp ne i32 %and108, 0, !dbg !11016
  br i1 %tobool109, label %if.then110, label %if.end112, !dbg !11017

if.then110:                                       ; preds = %for.body106
  %105 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11018
  %index111 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %105, i32 0, i32 9, !dbg !11020
  %106 = load i32, i32* %index111, align 8, !dbg !11020
  call void (i8*, ...) @error(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.166, i64 0, i64 0), i32 %106), !dbg !11021
  store i32 1, i32* %err, align 4, !dbg !11022
  br label %if.end112, !dbg !11023

if.end112:                                        ; preds = %if.then110, %for.body106
  br label %for.inc113, !dbg !11024

for.inc113:                                       ; preds = %if.end112
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !11011
  br label %for.cond103, !dbg !11011, !llvm.loop !11025

for.end114:                                       ; preds = %for.cond103
  br label %if.end115, !dbg !11027

if.end115:                                        ; preds = %for.end114, %if.end96
  %107 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11028
  %call116 = call i32 @gimple_code(%union.gimple_statement_d* %107), !dbg !11030
  %cmp117 = icmp ne i32 %call116, 1, !dbg !11031
  br i1 %cmp117, label %if.then119, label %if.end135, !dbg !11032

if.then119:                                       ; preds = %if.end115
  %108 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11033
  %succs121 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %108, i32 0, i32 1, !dbg !11033
  %call122 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs121), !dbg !11033
  %109 = bitcast %struct.edge_iterator* %tmp120 to { i32, %struct.VEC_edge_gc** }*, !dbg !11033
  %110 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %109, i32 0, i32 0, !dbg !11033
  %111 = extractvalue { i32, %struct.VEC_edge_gc** } %call122, 0, !dbg !11033
  store i32 %111, i32* %110, align 8, !dbg !11033
  %112 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %109, i32 0, i32 1, !dbg !11033
  %113 = extractvalue { i32, %struct.VEC_edge_gc** } %call122, 1, !dbg !11033
  store %struct.VEC_edge_gc** %113, %struct.VEC_edge_gc*** %112, align 8, !dbg !11033
  %114 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !11033
  %115 = bitcast %struct.edge_iterator* %tmp120 to i8*, !dbg !11033
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 8 %115, i64 16, i1 false), !dbg !11033
  br label %for.cond123, !dbg !11033

for.cond123:                                      ; preds = %for.inc133, %if.then119
  %116 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !11036
  %117 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %116, i32 0, i32 0, !dbg !11036
  %118 = load i32, i32* %117, align 8, !dbg !11036
  %119 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %116, i32 0, i32 1, !dbg !11036
  %120 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %119, align 8, !dbg !11036
  %call124 = call zeroext i8 @ei_cond(i32 %118, %struct.VEC_edge_gc** %120, %struct.edge_def** %e), !dbg !11036
  %tobool125 = icmp ne i8 %call124, 0, !dbg !11033
  br i1 %tobool125, label %for.body126, label %for.end134, !dbg !11033

for.body126:                                      ; preds = %for.cond123
  %121 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11038
  %flags127 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %121, i32 0, i32 7, !dbg !11040
  %122 = load i32, i32* %flags127, align 8, !dbg !11040
  %and128 = and i32 %122, 3072, !dbg !11041
  %tobool129 = icmp ne i32 %and128, 0, !dbg !11041
  br i1 %tobool129, label %if.then130, label %if.end132, !dbg !11042

if.then130:                                       ; preds = %for.body126
  %123 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11043
  %index131 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %123, i32 0, i32 9, !dbg !11045
  %124 = load i32, i32* %index131, align 8, !dbg !11045
  call void (i8*, ...) @error(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.167, i64 0, i64 0), i32 %124), !dbg !11046
  store i32 1, i32* %err, align 4, !dbg !11047
  br label %if.end132, !dbg !11048

if.end132:                                        ; preds = %if.then130, %for.body126
  br label %for.inc133, !dbg !11049

for.inc133:                                       ; preds = %if.end132
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !11036
  br label %for.cond123, !dbg !11036, !llvm.loop !11050

for.end134:                                       ; preds = %for.cond123
  br label %if.end135, !dbg !11052

if.end135:                                        ; preds = %for.end134, %if.end115
  %125 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11053
  %call136 = call i32 @gimple_code(%union.gimple_statement_d* %125), !dbg !11054
  switch i32 %call136, label %sw.default [
    i32 1, label %sw.bb
    i32 3, label %sw.bb165
    i32 9, label %sw.bb190
    i32 5, label %sw.bb210
    i32 15, label %sw.bb325
  ], !dbg !11055

sw.bb:                                            ; preds = %if.end135
  call void @llvm.dbg.declare(metadata %struct.edge_def** %true_edge, metadata !11056, metadata !DIExpression()), !dbg !11059
  call void @llvm.dbg.declare(metadata %struct.edge_def** %false_edge, metadata !11060, metadata !DIExpression()), !dbg !11061
  %126 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11062
  call void @extract_true_false_edges_from_block(%struct.basic_block_def* %126, %struct.edge_def** %true_edge, %struct.edge_def** %false_edge), !dbg !11063
  %127 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !11064
  %tobool137 = icmp ne %struct.edge_def* %127, null, !dbg !11064
  br i1 %tobool137, label %lor.lhs.false, label %if.then162, !dbg !11066

lor.lhs.false:                                    ; preds = %sw.bb
  %128 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !11067
  %tobool138 = icmp ne %struct.edge_def* %128, null, !dbg !11067
  br i1 %tobool138, label %lor.lhs.false139, label %if.then162, !dbg !11068

lor.lhs.false139:                                 ; preds = %lor.lhs.false
  %129 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !11069
  %flags140 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %129, i32 0, i32 7, !dbg !11070
  %130 = load i32, i32* %flags140, align 8, !dbg !11070
  %and141 = and i32 %130, 1024, !dbg !11071
  %tobool142 = icmp ne i32 %and141, 0, !dbg !11071
  br i1 %tobool142, label %lor.lhs.false143, label %if.then162, !dbg !11072

lor.lhs.false143:                                 ; preds = %lor.lhs.false139
  %131 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !11073
  %flags144 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %131, i32 0, i32 7, !dbg !11074
  %132 = load i32, i32* %flags144, align 8, !dbg !11074
  %and145 = and i32 %132, 2048, !dbg !11075
  %tobool146 = icmp ne i32 %and145, 0, !dbg !11075
  br i1 %tobool146, label %lor.lhs.false147, label %if.then162, !dbg !11076

lor.lhs.false147:                                 ; preds = %lor.lhs.false143
  %133 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !11077
  %flags148 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %133, i32 0, i32 7, !dbg !11078
  %134 = load i32, i32* %flags148, align 8, !dbg !11078
  %and149 = and i32 %134, 3, !dbg !11079
  %tobool150 = icmp ne i32 %and149, 0, !dbg !11079
  br i1 %tobool150, label %if.then162, label %lor.lhs.false151, !dbg !11080

lor.lhs.false151:                                 ; preds = %lor.lhs.false147
  %135 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !11081
  %flags152 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %135, i32 0, i32 7, !dbg !11082
  %136 = load i32, i32* %flags152, align 8, !dbg !11082
  %and153 = and i32 %136, 3, !dbg !11083
  %tobool154 = icmp ne i32 %and153, 0, !dbg !11083
  br i1 %tobool154, label %if.then162, label %lor.lhs.false155, !dbg !11084

lor.lhs.false155:                                 ; preds = %lor.lhs.false151
  %137 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11085
  %succs156 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %137, i32 0, i32 1, !dbg !11085
  %138 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs156, align 8, !dbg !11085
  %tobool157 = icmp ne %struct.VEC_edge_gc* %138, null, !dbg !11085
  br i1 %tobool157, label %cond.true, label %cond.false, !dbg !11085

cond.true:                                        ; preds = %lor.lhs.false155
  %139 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11085
  %succs158 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %139, i32 0, i32 1, !dbg !11085
  %140 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs158, align 8, !dbg !11085
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %140, i32 0, i32 0, !dbg !11085
  br label %cond.end, !dbg !11085

cond.false:                                       ; preds = %lor.lhs.false155
  br label %cond.end, !dbg !11085

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11085
  %call159 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !11085
  %cmp160 = icmp uge i32 %call159, 3, !dbg !11086
  br i1 %cmp160, label %if.then162, label %if.end164, !dbg !11087

if.then162:                                       ; preds = %cond.end, %lor.lhs.false151, %lor.lhs.false147, %lor.lhs.false143, %lor.lhs.false139, %lor.lhs.false, %sw.bb
  %141 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11088
  %index163 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %141, i32 0, i32 9, !dbg !11090
  %142 = load i32, i32* %index163, align 8, !dbg !11090
  call void (i8*, ...) @error(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.168, i64 0, i64 0), i32 %142), !dbg !11091
  store i32 1, i32* %err, align 4, !dbg !11092
  br label %if.end164, !dbg !11093

if.end164:                                        ; preds = %if.then162, %cond.end
  br label %sw.epilog, !dbg !11094

sw.bb165:                                         ; preds = %if.end135
  %143 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11095
  %call166 = call zeroext i8 @simple_goto_p(%union.gimple_statement_d* %143), !dbg !11097
  %tobool167 = icmp ne i8 %call166, 0, !dbg !11097
  br i1 %tobool167, label %if.then168, label %if.else, !dbg !11098

if.then168:                                       ; preds = %sw.bb165
  %144 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11099
  %index169 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %144, i32 0, i32 9, !dbg !11101
  %145 = load i32, i32* %index169, align 8, !dbg !11101
  call void (i8*, ...) @error(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.169, i64 0, i64 0), i32 %145), !dbg !11102
  store i32 1, i32* %err, align 4, !dbg !11103
  br label %if.end189, !dbg !11104

if.else:                                          ; preds = %sw.bb165
  %146 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11105
  %succs171 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %146, i32 0, i32 1, !dbg !11105
  %call172 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs171), !dbg !11105
  %147 = bitcast %struct.edge_iterator* %tmp170 to { i32, %struct.VEC_edge_gc** }*, !dbg !11105
  %148 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %147, i32 0, i32 0, !dbg !11105
  %149 = extractvalue { i32, %struct.VEC_edge_gc** } %call172, 0, !dbg !11105
  store i32 %149, i32* %148, align 8, !dbg !11105
  %150 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %147, i32 0, i32 1, !dbg !11105
  %151 = extractvalue { i32, %struct.VEC_edge_gc** } %call172, 1, !dbg !11105
  store %struct.VEC_edge_gc** %151, %struct.VEC_edge_gc*** %150, align 8, !dbg !11105
  %152 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !11105
  %153 = bitcast %struct.edge_iterator* %tmp170 to i8*, !dbg !11105
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %152, i8* align 8 %153, i64 16, i1 false), !dbg !11105
  br label %for.cond173, !dbg !11105

for.cond173:                                      ; preds = %for.inc187, %if.else
  %154 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !11108
  %155 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %154, i32 0, i32 0, !dbg !11108
  %156 = load i32, i32* %155, align 8, !dbg !11108
  %157 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %154, i32 0, i32 1, !dbg !11108
  %158 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %157, align 8, !dbg !11108
  %call174 = call zeroext i8 @ei_cond(i32 %156, %struct.VEC_edge_gc** %158, %struct.edge_def** %e), !dbg !11108
  %tobool175 = icmp ne i8 %call174, 0, !dbg !11105
  br i1 %tobool175, label %for.body176, label %for.end188, !dbg !11105

for.body176:                                      ; preds = %for.cond173
  %159 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11110
  %flags177 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %159, i32 0, i32 7, !dbg !11112
  %160 = load i32, i32* %flags177, align 8, !dbg !11112
  %and178 = and i32 %160, 3073, !dbg !11113
  %tobool179 = icmp ne i32 %and178, 0, !dbg !11113
  br i1 %tobool179, label %if.then184, label %lor.lhs.false180, !dbg !11114

lor.lhs.false180:                                 ; preds = %for.body176
  %161 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11115
  %flags181 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %161, i32 0, i32 7, !dbg !11116
  %162 = load i32, i32* %flags181, align 8, !dbg !11116
  %and182 = and i32 %162, 2, !dbg !11117
  %tobool183 = icmp ne i32 %and182, 0, !dbg !11117
  br i1 %tobool183, label %if.end186, label %if.then184, !dbg !11118

if.then184:                                       ; preds = %lor.lhs.false180, %for.body176
  %163 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11119
  %index185 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %163, i32 0, i32 9, !dbg !11121
  %164 = load i32, i32* %index185, align 8, !dbg !11121
  call void (i8*, ...) @error(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.168, i64 0, i64 0), i32 %164), !dbg !11122
  store i32 1, i32* %err, align 4, !dbg !11123
  br label %if.end186, !dbg !11124

if.end186:                                        ; preds = %if.then184, %lor.lhs.false180
  br label %for.inc187, !dbg !11125

for.inc187:                                       ; preds = %if.end186
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !11108
  br label %for.cond173, !dbg !11108, !llvm.loop !11126

for.end188:                                       ; preds = %for.cond173
  br label %if.end189

if.end189:                                        ; preds = %for.end188, %if.then168
  br label %sw.epilog, !dbg !11128

sw.bb190:                                         ; preds = %if.end135
  %165 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11129
  %call191 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %165), !dbg !11131
  %tobool192 = icmp ne i8 %call191, 0, !dbg !11131
  br i1 %tobool192, label %lor.lhs.false193, label %if.then198, !dbg !11132

lor.lhs.false193:                                 ; preds = %sw.bb190
  %166 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11133
  %call194 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %166), !dbg !11134
  %flags195 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call194, i32 0, i32 7, !dbg !11135
  %167 = load i32, i32* %flags195, align 8, !dbg !11135
  %and196 = and i32 %167, 3075, !dbg !11136
  %tobool197 = icmp ne i32 %and196, 0, !dbg !11136
  br i1 %tobool197, label %if.then198, label %if.end200, !dbg !11137

if.then198:                                       ; preds = %lor.lhs.false193, %sw.bb190
  %168 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11138
  %index199 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %168, i32 0, i32 9, !dbg !11140
  %169 = load i32, i32* %index199, align 8, !dbg !11140
  call void (i8*, ...) @error(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.168, i64 0, i64 0), i32 %169), !dbg !11141
  store i32 1, i32* %err, align 4, !dbg !11142
  br label %if.end200, !dbg !11143

if.end200:                                        ; preds = %if.then198, %lor.lhs.false193
  %170 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11144
  %call201 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %170), !dbg !11146
  %171 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11147
  %add.ptr202 = getelementptr inbounds %struct.function, %struct.function* %171, i64 0, !dbg !11147
  %cfg203 = getelementptr inbounds %struct.function, %struct.function* %add.ptr202, i32 0, i32 1, !dbg !11147
  %172 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg203, align 8, !dbg !11147
  %x_exit_block_ptr204 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %172, i32 0, i32 1, !dbg !11147
  %173 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr204, align 8, !dbg !11147
  %cmp205 = icmp ne %struct.basic_block_def* %call201, %173, !dbg !11148
  br i1 %cmp205, label %if.then207, label %if.end209, !dbg !11149

if.then207:                                       ; preds = %if.end200
  %174 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11150
  %index208 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %174, i32 0, i32 9, !dbg !11152
  %175 = load i32, i32* %index208, align 8, !dbg !11152
  call void (i8*, ...) @error(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.170, i64 0, i64 0), i32 %175), !dbg !11153
  store i32 1, i32* %err, align 4, !dbg !11154
  br label %if.end209, !dbg !11155

if.end209:                                        ; preds = %if.then207, %if.end200
  br label %sw.epilog, !dbg !11156

sw.bb210:                                         ; preds = %if.end135
  call void @llvm.dbg.declare(metadata %union.tree_node** %prev, metadata !11157, metadata !DIExpression()), !dbg !11159
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e211, metadata !11160, metadata !DIExpression()), !dbg !11161
  call void @llvm.dbg.declare(metadata i64* %i, metadata !11162, metadata !DIExpression()), !dbg !11163
  call void @llvm.dbg.declare(metadata i64* %n, metadata !11164, metadata !DIExpression()), !dbg !11165
  %176 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11166
  %call212 = call i32 @gimple_switch_num_labels(%union.gimple_statement_d* %176), !dbg !11167
  %conv213 = zext i32 %call212 to i64, !dbg !11167
  store i64 %conv213, i64* %n, align 8, !dbg !11168
  store i64 0, i64* %i, align 8, !dbg !11169
  br label %for.cond214, !dbg !11171

for.cond214:                                      ; preds = %for.inc232, %sw.bb210
  %177 = load i64, i64* %i, align 8, !dbg !11172
  %178 = load i64, i64* %n, align 8, !dbg !11174
  %cmp215 = icmp ult i64 %177, %178, !dbg !11175
  br i1 %cmp215, label %for.body217, label %for.end233, !dbg !11176

for.body217:                                      ; preds = %for.cond214
  call void @llvm.dbg.declare(metadata %union.tree_node** %lab, metadata !11177, metadata !DIExpression()), !dbg !11179
  %179 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11180
  %180 = load i64, i64* %i, align 8, !dbg !11180
  %conv218 = trunc i64 %180 to i32, !dbg !11180
  %call219 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %179, i32 %conv218), !dbg !11180
  %exp = bitcast %union.tree_node* %call219 to %struct.tree_exp*, !dbg !11180
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !11180
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !11180
  %181 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !11180
  store %union.tree_node* %181, %union.tree_node** %lab, align 8, !dbg !11179
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %label_bb, metadata !11181, metadata !DIExpression()), !dbg !11182
  %182 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11183
  %add.ptr220 = getelementptr inbounds %struct.function, %struct.function* %182, i64 0, !dbg !11183
  %183 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !11183
  %call221 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr220, %union.tree_node* %183), !dbg !11183
  store %struct.basic_block_def* %call221, %struct.basic_block_def** %label_bb, align 8, !dbg !11182
  %184 = load %struct.basic_block_def*, %struct.basic_block_def** %label_bb, align 8, !dbg !11184
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %184, i32 0, i32 2, !dbg !11184
  %185 = load i8*, i8** %aux, align 8, !dbg !11184
  %tobool222 = icmp ne i8* %185, null, !dbg !11184
  br i1 %tobool222, label %lor.lhs.false223, label %cond.false228, !dbg !11184

lor.lhs.false223:                                 ; preds = %for.body217
  %186 = load %struct.basic_block_def*, %struct.basic_block_def** %label_bb, align 8, !dbg !11184
  %aux224 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %186, i32 0, i32 2, !dbg !11184
  %187 = load i8*, i8** %aux224, align 8, !dbg !11184
  %cmp225 = icmp eq i8* %187, inttoptr (i64 1 to i8*), !dbg !11184
  br i1 %cmp225, label %cond.false228, label %cond.true227, !dbg !11184

cond.true227:                                     ; preds = %lor.lhs.false223
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4431, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !11184
  br label %cond.end229, !dbg !11184

cond.false228:                                    ; preds = %lor.lhs.false223, %for.body217
  br label %cond.end229, !dbg !11184

cond.end229:                                      ; preds = %cond.false228, %cond.true227
  %cond230 = phi i32 [ 0, %cond.true227 ], [ 0, %cond.false228 ], !dbg !11184
  %188 = load %struct.basic_block_def*, %struct.basic_block_def** %label_bb, align 8, !dbg !11185
  %aux231 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %188, i32 0, i32 2, !dbg !11186
  store i8* inttoptr (i64 1 to i8*), i8** %aux231, align 8, !dbg !11187
  br label %for.inc232, !dbg !11188

for.inc232:                                       ; preds = %cond.end229
  %189 = load i64, i64* %i, align 8, !dbg !11189
  %inc = add i64 %189, 1, !dbg !11189
  store i64 %inc, i64* %i, align 8, !dbg !11189
  br label %for.cond214, !dbg !11190, !llvm.loop !11191

for.end233:                                       ; preds = %for.cond214
  %190 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11193
  %call234 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %190, i32 0), !dbg !11194
  store %union.tree_node* %call234, %union.tree_node** %prev, align 8, !dbg !11195
  store i64 1, i64* %i, align 8, !dbg !11196
  br label %for.cond235, !dbg !11198

for.cond235:                                      ; preds = %for.inc264, %for.end233
  %191 = load i64, i64* %i, align 8, !dbg !11199
  %192 = load i64, i64* %n, align 8, !dbg !11201
  %cmp236 = icmp ult i64 %191, %192, !dbg !11202
  br i1 %cmp236, label %for.body238, label %for.end266, !dbg !11203

for.body238:                                      ; preds = %for.cond235
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !11204, metadata !DIExpression()), !dbg !11206
  %193 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11207
  %194 = load i64, i64* %i, align 8, !dbg !11208
  %conv239 = trunc i64 %194 to i32, !dbg !11208
  %call240 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %193, i32 %conv239), !dbg !11209
  store %union.tree_node* %call240, %union.tree_node** %c, align 8, !dbg !11206
  %195 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !11210
  %exp241 = bitcast %union.tree_node* %195 to %struct.tree_exp*, !dbg !11210
  %operands242 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp241, i32 0, i32 3, !dbg !11210
  %arrayidx243 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands242, i64 0, i64 0, !dbg !11210
  %196 = load %union.tree_node*, %union.tree_node** %arrayidx243, align 8, !dbg !11210
  %tobool244 = icmp ne %union.tree_node* %196, null, !dbg !11210
  br i1 %tobool244, label %if.end246, label %if.then245, !dbg !11212

if.then245:                                       ; preds = %for.body238
  call void (i8*, ...) @error(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.171, i64 0, i64 0)), !dbg !11213
  store i32 1, i32* %err, align 4, !dbg !11215
  br label %for.inc264, !dbg !11216

if.end246:                                        ; preds = %for.body238
  %197 = load %union.tree_node*, %union.tree_node** %prev, align 8, !dbg !11217
  %exp247 = bitcast %union.tree_node* %197 to %struct.tree_exp*, !dbg !11217
  %operands248 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp247, i32 0, i32 3, !dbg !11217
  %arrayidx249 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands248, i64 0, i64 0, !dbg !11217
  %198 = load %union.tree_node*, %union.tree_node** %arrayidx249, align 8, !dbg !11217
  %tobool250 = icmp ne %union.tree_node* %198, null, !dbg !11217
  br i1 %tobool250, label %land.lhs.true251, label %if.end263, !dbg !11219

land.lhs.true251:                                 ; preds = %if.end246
  %199 = load %union.tree_node*, %union.tree_node** %prev, align 8, !dbg !11220
  %exp252 = bitcast %union.tree_node* %199 to %struct.tree_exp*, !dbg !11220
  %operands253 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp252, i32 0, i32 3, !dbg !11220
  %arrayidx254 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands253, i64 0, i64 0, !dbg !11220
  %200 = load %union.tree_node*, %union.tree_node** %arrayidx254, align 8, !dbg !11220
  %201 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !11221
  %exp255 = bitcast %union.tree_node* %201 to %struct.tree_exp*, !dbg !11221
  %operands256 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp255, i32 0, i32 3, !dbg !11221
  %arrayidx257 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands256, i64 0, i64 0, !dbg !11221
  %202 = load %union.tree_node*, %union.tree_node** %arrayidx257, align 8, !dbg !11221
  %call258 = call i32 @tree_int_cst_lt(%union.tree_node* %200, %union.tree_node* %202), !dbg !11222
  %tobool259 = icmp ne i32 %call258, 0, !dbg !11222
  br i1 %tobool259, label %if.end263, label %if.then260, !dbg !11223

if.then260:                                       ; preds = %land.lhs.true251
  call void (i8*, ...) @error(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.172, i64 0, i64 0)), !dbg !11224
  %203 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !11226
  %204 = load %union.tree_node*, %union.tree_node** %prev, align 8, !dbg !11227
  call void @print_generic_expr(%struct._IO_FILE* %203, %union.tree_node* %204, i32 0), !dbg !11228
  %205 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !11229
  %call261 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %205, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.173, i64 0, i64 0)), !dbg !11230
  %206 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !11231
  %207 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !11232
  call void @print_generic_expr(%struct._IO_FILE* %206, %union.tree_node* %207, i32 0), !dbg !11233
  %208 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !11234
  %call262 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %208, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.174, i64 0, i64 0)), !dbg !11235
  store i32 1, i32* %err, align 4, !dbg !11236
  br label %if.end263, !dbg !11237

if.end263:                                        ; preds = %if.then260, %land.lhs.true251, %if.end246
  %209 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !11238
  store %union.tree_node* %209, %union.tree_node** %prev, align 8, !dbg !11239
  br label %for.inc264, !dbg !11240

for.inc264:                                       ; preds = %if.end263, %if.then245
  %210 = load i64, i64* %i, align 8, !dbg !11241
  %inc265 = add i64 %210, 1, !dbg !11241
  store i64 %inc265, i64* %i, align 8, !dbg !11241
  br label %for.cond235, !dbg !11242, !llvm.loop !11243

for.end266:                                       ; preds = %for.cond235
  %211 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11245
  %succs268 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %211, i32 0, i32 1, !dbg !11245
  %call269 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs268), !dbg !11245
  %212 = bitcast %struct.edge_iterator* %tmp267 to { i32, %struct.VEC_edge_gc** }*, !dbg !11245
  %213 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %212, i32 0, i32 0, !dbg !11245
  %214 = extractvalue { i32, %struct.VEC_edge_gc** } %call269, 0, !dbg !11245
  store i32 %214, i32* %213, align 8, !dbg !11245
  %215 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %212, i32 0, i32 1, !dbg !11245
  %216 = extractvalue { i32, %struct.VEC_edge_gc** } %call269, 1, !dbg !11245
  store %struct.VEC_edge_gc** %216, %struct.VEC_edge_gc*** %215, align 8, !dbg !11245
  %217 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !11245
  %218 = bitcast %struct.edge_iterator* %tmp267 to i8*, !dbg !11245
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %217, i8* align 8 %218, i64 16, i1 false), !dbg !11245
  br label %for.cond270, !dbg !11245

for.cond270:                                      ; preds = %for.inc289, %for.end266
  %219 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !11247
  %220 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %219, i32 0, i32 0, !dbg !11247
  %221 = load i32, i32* %220, align 8, !dbg !11247
  %222 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %219, i32 0, i32 1, !dbg !11247
  %223 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %222, align 8, !dbg !11247
  %call271 = call zeroext i8 @ei_cond(i32 %221, %struct.VEC_edge_gc** %223, %struct.edge_def** %e211), !dbg !11247
  %tobool272 = icmp ne i8 %call271, 0, !dbg !11245
  br i1 %tobool272, label %for.body273, label %for.end290, !dbg !11245

for.body273:                                      ; preds = %for.cond270
  %224 = load %struct.edge_def*, %struct.edge_def** %e211, align 8, !dbg !11249
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %224, i32 0, i32 1, !dbg !11252
  %225 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !11252
  %aux274 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %225, i32 0, i32 2, !dbg !11253
  %226 = load i8*, i8** %aux274, align 8, !dbg !11253
  %tobool275 = icmp ne i8* %226, null, !dbg !11249
  br i1 %tobool275, label %if.end280, label %if.then276, !dbg !11254

if.then276:                                       ; preds = %for.body273
  %227 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11255
  %index277 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %227, i32 0, i32 9, !dbg !11257
  %228 = load i32, i32* %index277, align 8, !dbg !11257
  %229 = load %struct.edge_def*, %struct.edge_def** %e211, align 8, !dbg !11258
  %dest278 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %229, i32 0, i32 1, !dbg !11259
  %230 = load %struct.basic_block_def*, %struct.basic_block_def** %dest278, align 8, !dbg !11259
  %index279 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %230, i32 0, i32 9, !dbg !11260
  %231 = load i32, i32* %index279, align 8, !dbg !11260
  call void (i8*, ...) @error(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.175, i64 0, i64 0), i32 %228, i32 %231), !dbg !11261
  store i32 1, i32* %err, align 4, !dbg !11262
  br label %if.end280, !dbg !11263

if.end280:                                        ; preds = %if.then276, %for.body273
  %232 = load %struct.edge_def*, %struct.edge_def** %e211, align 8, !dbg !11264
  %dest281 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %232, i32 0, i32 1, !dbg !11265
  %233 = load %struct.basic_block_def*, %struct.basic_block_def** %dest281, align 8, !dbg !11265
  %aux282 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %233, i32 0, i32 2, !dbg !11266
  store i8* inttoptr (i64 2 to i8*), i8** %aux282, align 8, !dbg !11267
  %234 = load %struct.edge_def*, %struct.edge_def** %e211, align 8, !dbg !11268
  %flags283 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %234, i32 0, i32 7, !dbg !11270
  %235 = load i32, i32* %flags283, align 8, !dbg !11270
  %and284 = and i32 %235, 3075, !dbg !11271
  %tobool285 = icmp ne i32 %and284, 0, !dbg !11271
  br i1 %tobool285, label %if.then286, label %if.end288, !dbg !11272

if.then286:                                       ; preds = %if.end280
  %236 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11273
  %index287 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %236, i32 0, i32 9, !dbg !11275
  %237 = load i32, i32* %index287, align 8, !dbg !11275
  call void (i8*, ...) @error(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.168, i64 0, i64 0), i32 %237), !dbg !11276
  store i32 1, i32* %err, align 4, !dbg !11277
  br label %if.end288, !dbg !11278

if.end288:                                        ; preds = %if.then286, %if.end280
  br label %for.inc289, !dbg !11279

for.inc289:                                       ; preds = %if.end288
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !11247
  br label %for.cond270, !dbg !11247, !llvm.loop !11280

for.end290:                                       ; preds = %for.cond270
  store i64 0, i64* %i, align 8, !dbg !11282
  br label %for.cond291, !dbg !11284

for.cond291:                                      ; preds = %for.inc311, %for.end290
  %238 = load i64, i64* %i, align 8, !dbg !11285
  %239 = load i64, i64* %n, align 8, !dbg !11287
  %cmp292 = icmp ult i64 %238, %239, !dbg !11288
  br i1 %cmp292, label %for.body294, label %for.end313, !dbg !11289

for.body294:                                      ; preds = %for.cond291
  call void @llvm.dbg.declare(metadata %union.tree_node** %lab295, metadata !11290, metadata !DIExpression()), !dbg !11292
  %240 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11293
  %241 = load i64, i64* %i, align 8, !dbg !11293
  %conv296 = trunc i64 %241 to i32, !dbg !11293
  %call297 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %240, i32 %conv296), !dbg !11293
  %exp298 = bitcast %union.tree_node* %call297 to %struct.tree_exp*, !dbg !11293
  %operands299 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp298, i32 0, i32 3, !dbg !11293
  %arrayidx300 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands299, i64 0, i64 2, !dbg !11293
  %242 = load %union.tree_node*, %union.tree_node** %arrayidx300, align 8, !dbg !11293
  store %union.tree_node* %242, %union.tree_node** %lab295, align 8, !dbg !11292
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %label_bb301, metadata !11294, metadata !DIExpression()), !dbg !11295
  %243 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11296
  %add.ptr302 = getelementptr inbounds %struct.function, %struct.function* %243, i64 0, !dbg !11296
  %244 = load %union.tree_node*, %union.tree_node** %lab295, align 8, !dbg !11296
  %call303 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr302, %union.tree_node* %244), !dbg !11296
  store %struct.basic_block_def* %call303, %struct.basic_block_def** %label_bb301, align 8, !dbg !11295
  %245 = load %struct.basic_block_def*, %struct.basic_block_def** %label_bb301, align 8, !dbg !11297
  %aux304 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %245, i32 0, i32 2, !dbg !11299
  %246 = load i8*, i8** %aux304, align 8, !dbg !11299
  %cmp305 = icmp ne i8* %246, inttoptr (i64 2 to i8*), !dbg !11300
  br i1 %cmp305, label %if.then307, label %if.end310, !dbg !11301

if.then307:                                       ; preds = %for.body294
  %247 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11302
  %index308 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %247, i32 0, i32 9, !dbg !11304
  %248 = load i32, i32* %index308, align 8, !dbg !11304
  %249 = load %struct.basic_block_def*, %struct.basic_block_def** %label_bb301, align 8, !dbg !11305
  %index309 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %249, i32 0, i32 9, !dbg !11306
  %250 = load i32, i32* %index309, align 8, !dbg !11306
  call void (i8*, ...) @error(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.176, i64 0, i64 0), i32 %248, i32 %250), !dbg !11307
  store i32 1, i32* %err, align 4, !dbg !11308
  br label %if.end310, !dbg !11309

if.end310:                                        ; preds = %if.then307, %for.body294
  br label %for.inc311, !dbg !11310

for.inc311:                                       ; preds = %if.end310
  %251 = load i64, i64* %i, align 8, !dbg !11311
  %inc312 = add i64 %251, 1, !dbg !11311
  store i64 %inc312, i64* %i, align 8, !dbg !11311
  br label %for.cond291, !dbg !11312, !llvm.loop !11313

for.end313:                                       ; preds = %for.cond291
  %252 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11315
  %succs315 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %252, i32 0, i32 1, !dbg !11315
  %call316 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs315), !dbg !11315
  %253 = bitcast %struct.edge_iterator* %tmp314 to { i32, %struct.VEC_edge_gc** }*, !dbg !11315
  %254 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %253, i32 0, i32 0, !dbg !11315
  %255 = extractvalue { i32, %struct.VEC_edge_gc** } %call316, 0, !dbg !11315
  store i32 %255, i32* %254, align 8, !dbg !11315
  %256 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %253, i32 0, i32 1, !dbg !11315
  %257 = extractvalue { i32, %struct.VEC_edge_gc** } %call316, 1, !dbg !11315
  store %struct.VEC_edge_gc** %257, %struct.VEC_edge_gc*** %256, align 8, !dbg !11315
  %258 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !11315
  %259 = bitcast %struct.edge_iterator* %tmp314 to i8*, !dbg !11315
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %258, i8* align 8 %259, i64 16, i1 false), !dbg !11315
  br label %for.cond317, !dbg !11315

for.cond317:                                      ; preds = %for.inc323, %for.end313
  %260 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !11317
  %261 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %260, i32 0, i32 0, !dbg !11317
  %262 = load i32, i32* %261, align 8, !dbg !11317
  %263 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %260, i32 0, i32 1, !dbg !11317
  %264 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %263, align 8, !dbg !11317
  %call318 = call zeroext i8 @ei_cond(i32 %262, %struct.VEC_edge_gc** %264, %struct.edge_def** %e211), !dbg !11317
  %tobool319 = icmp ne i8 %call318, 0, !dbg !11315
  br i1 %tobool319, label %for.body320, label %for.end324, !dbg !11315

for.body320:                                      ; preds = %for.cond317
  %265 = load %struct.edge_def*, %struct.edge_def** %e211, align 8, !dbg !11319
  %dest321 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %265, i32 0, i32 1, !dbg !11320
  %266 = load %struct.basic_block_def*, %struct.basic_block_def** %dest321, align 8, !dbg !11320
  %aux322 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %266, i32 0, i32 2, !dbg !11321
  store i8* null, i8** %aux322, align 8, !dbg !11322
  br label %for.inc323, !dbg !11319

for.inc323:                                       ; preds = %for.body320
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !11317
  br label %for.cond317, !dbg !11317, !llvm.loop !11323

for.end324:                                       ; preds = %for.cond317
  br label %sw.epilog, !dbg !11325

sw.bb325:                                         ; preds = %if.end135
  %267 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11326
  %call326 = call zeroext i8 @verify_eh_dispatch_edge(%union.gimple_statement_d* %267), !dbg !11327
  %conv327 = zext i8 %call326 to i32, !dbg !11327
  %268 = load i32, i32* %err, align 4, !dbg !11328
  %or328 = or i32 %268, %conv327, !dbg !11328
  store i32 %or328, i32* %err, align 4, !dbg !11328
  br label %sw.epilog, !dbg !11329

sw.default:                                       ; preds = %if.end135
  br label %sw.epilog, !dbg !11330

sw.epilog:                                        ; preds = %sw.default, %sw.bb325, %for.end324, %if.end209, %if.end189, %if.end164
  br label %for.inc329, !dbg !11331

for.inc329:                                       ; preds = %sw.epilog, %if.then95, %if.then90
  %269 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10838
  %next_bb330 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %269, i32 0, i32 6, !dbg !10838
  %270 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb330, align 8, !dbg !10838
  store %struct.basic_block_def* %270, %struct.basic_block_def** %bb, align 8, !dbg !10838
  br label %for.cond19, !dbg !10838, !llvm.loop !11332

for.end331:                                       ; preds = %for.cond19
  %call332 = call i32 @dom_info_state(i32 1), !dbg !11334
  %cmp333 = icmp uge i32 %call332, 1, !dbg !11336
  br i1 %cmp333, label %if.then335, label %if.end336, !dbg !11337

if.then335:                                       ; preds = %for.end331
  call void @verify_dominators(i32 1), !dbg !11338
  br label %if.end336, !dbg !11338

if.end336:                                        ; preds = %if.then335, %for.end331
  %271 = load i32, i32* %err, align 4, !dbg !11339
  ret i32 %271, !dbg !11340
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @create_bb(i8* %h, i8* %e, %struct.basic_block_def* %after) #0 !dbg !11341 {
entry:
  %h.addr = alloca i8*, align 8
  %e.addr = alloca i8*, align 8
  %after.addr = alloca %struct.basic_block_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %new_size = alloca i64, align 8
  store i8* %h, i8** %h.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %h.addr, metadata !11342, metadata !DIExpression()), !dbg !11343
  store i8* %e, i8** %e.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %e.addr, metadata !11344, metadata !DIExpression()), !dbg !11345
  store %struct.basic_block_def* %after, %struct.basic_block_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %after.addr, metadata !11346, metadata !DIExpression()), !dbg !11347
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !11348, metadata !DIExpression()), !dbg !11349
  %0 = load i8*, i8** %e.addr, align 8, !dbg !11350
  %tobool = icmp ne i8* %0, null, !dbg !11350
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11350

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 431, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !11350
  br label %cond.end, !dbg !11350

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11350

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11350
  %call = call %struct.basic_block_def* @alloc_block(), !dbg !11351
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !11352
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11353
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !11353
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !11353
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !11353
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 5, !dbg !11353
  %3 = load i32, i32* %x_last_basic_block, align 8, !dbg !11353
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11354
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 9, !dbg !11355
  store i32 %3, i32* %index, align 8, !dbg !11356
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11357
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 13, !dbg !11358
  store i32 1, i32* %flags, align 8, !dbg !11359
  %call1 = call i8* @ggc_alloc_cleared_stat(i64 16), !dbg !11360
  %6 = bitcast i8* %call1 to %struct.gimple_bb_info*, !dbg !11360
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11361
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 7, !dbg !11362
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !11363
  store %struct.gimple_bb_info* %6, %struct.gimple_bb_info** %gimple, align 8, !dbg !11364
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11365
  %9 = load i8*, i8** %h.addr, align 8, !dbg !11366
  %tobool2 = icmp ne i8* %9, null, !dbg !11366
  br i1 %tobool2, label %cond.true3, label %cond.false4, !dbg !11366

cond.true3:                                       ; preds = %cond.end
  %10 = load i8*, i8** %h.addr, align 8, !dbg !11367
  %11 = bitcast i8* %10 to %struct.gimple_seq_d*, !dbg !11368
  br label %cond.end6, !dbg !11366

cond.false4:                                      ; preds = %cond.end
  %call5 = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !11369
  br label %cond.end6, !dbg !11366

cond.end6:                                        ; preds = %cond.false4, %cond.true3
  %cond7 = phi %struct.gimple_seq_d* [ %11, %cond.true3 ], [ %call5, %cond.false4 ], !dbg !11366
  call void @set_bb_seq(%struct.basic_block_def* %8, %struct.gimple_seq_d* %cond7), !dbg !11370
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11371
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %after.addr, align 8, !dbg !11372
  call void @link_block(%struct.basic_block_def* %12, %struct.basic_block_def* %13), !dbg !11373
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11374
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !11374
  %cfg9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 1, !dbg !11374
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg9, align 8, !dbg !11374
  %x_last_basic_block10 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 5, !dbg !11374
  %16 = load i32, i32* %x_last_basic_block10, align 8, !dbg !11374
  %conv = sext i32 %16 to i64, !dbg !11376
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11377
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !11377
  %cfg12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 1, !dbg !11377
  %18 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg12, align 8, !dbg !11377
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %18, i32 0, i32 2, !dbg !11377
  %19 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !11377
  %tobool13 = icmp ne %struct.VEC_basic_block_gc* %19, null, !dbg !11377
  br i1 %tobool13, label %cond.true14, label %cond.false18, !dbg !11377

cond.true14:                                      ; preds = %cond.end6
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11377
  %add.ptr15 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !11377
  %cfg16 = getelementptr inbounds %struct.function, %struct.function* %add.ptr15, i32 0, i32 1, !dbg !11377
  %21 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg16, align 8, !dbg !11377
  %x_basic_block_info17 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %21, i32 0, i32 2, !dbg !11377
  %22 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info17, align 8, !dbg !11377
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %22, i32 0, i32 0, !dbg !11377
  br label %cond.end19, !dbg !11377

cond.false18:                                     ; preds = %cond.end6
  br label %cond.end19, !dbg !11377

cond.end19:                                       ; preds = %cond.false18, %cond.true14
  %cond20 = phi %struct.VEC_basic_block_base* [ %base, %cond.true14 ], [ null, %cond.false18 ], !dbg !11377
  %call21 = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond20), !dbg !11377
  %conv22 = zext i32 %call21 to i64, !dbg !11377
  %cmp = icmp eq i64 %conv, %conv22, !dbg !11378
  br i1 %cmp, label %if.then, label %if.end, !dbg !11379

if.then:                                          ; preds = %cond.end19
  call void @llvm.dbg.declare(metadata i64* %new_size, metadata !11380, metadata !DIExpression()), !dbg !11382
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11383
  %add.ptr24 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !11383
  %cfg25 = getelementptr inbounds %struct.function, %struct.function* %add.ptr24, i32 0, i32 1, !dbg !11383
  %24 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg25, align 8, !dbg !11383
  %x_last_basic_block26 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %24, i32 0, i32 5, !dbg !11383
  %25 = load i32, i32* %x_last_basic_block26, align 8, !dbg !11383
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11384
  %add.ptr27 = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !11384
  %cfg28 = getelementptr inbounds %struct.function, %struct.function* %add.ptr27, i32 0, i32 1, !dbg !11384
  %27 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg28, align 8, !dbg !11384
  %x_last_basic_block29 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %27, i32 0, i32 5, !dbg !11384
  %28 = load i32, i32* %x_last_basic_block29, align 8, !dbg !11384
  %add = add nsw i32 %28, 3, !dbg !11385
  %div = sdiv i32 %add, 4, !dbg !11386
  %add30 = add nsw i32 %25, %div, !dbg !11387
  %conv31 = sext i32 %add30 to i64, !dbg !11383
  store i64 %conv31, i64* %new_size, align 8, !dbg !11382
  %29 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11388
  %add.ptr32 = getelementptr inbounds %struct.function, %struct.function* %29, i64 0, !dbg !11388
  %cfg33 = getelementptr inbounds %struct.function, %struct.function* %add.ptr32, i32 0, i32 1, !dbg !11388
  %30 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg33, align 8, !dbg !11388
  %x_basic_block_info34 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %30, i32 0, i32 2, !dbg !11388
  %31 = load i64, i64* %new_size, align 8, !dbg !11388
  %conv35 = trunc i64 %31 to i32, !dbg !11388
  call void @VEC_basic_block_gc_safe_grow_cleared(%struct.VEC_basic_block_gc** %x_basic_block_info34, i32 %conv35), !dbg !11388
  br label %if.end, !dbg !11389

if.end:                                           ; preds = %if.then, %cond.end19
  %32 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11390
  %add.ptr36 = getelementptr inbounds %struct.function, %struct.function* %32, i64 0, !dbg !11390
  %cfg37 = getelementptr inbounds %struct.function, %struct.function* %add.ptr36, i32 0, i32 1, !dbg !11390
  %33 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg37, align 8, !dbg !11390
  %x_basic_block_info38 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %33, i32 0, i32 2, !dbg !11390
  %34 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info38, align 8, !dbg !11390
  %tobool39 = icmp ne %struct.VEC_basic_block_gc* %34, null, !dbg !11390
  br i1 %tobool39, label %cond.true40, label %cond.false45, !dbg !11390

cond.true40:                                      ; preds = %if.end
  %35 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11390
  %add.ptr41 = getelementptr inbounds %struct.function, %struct.function* %35, i64 0, !dbg !11390
  %cfg42 = getelementptr inbounds %struct.function, %struct.function* %add.ptr41, i32 0, i32 1, !dbg !11390
  %36 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg42, align 8, !dbg !11390
  %x_basic_block_info43 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %36, i32 0, i32 2, !dbg !11390
  %37 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info43, align 8, !dbg !11390
  %base44 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %37, i32 0, i32 0, !dbg !11390
  br label %cond.end46, !dbg !11390

cond.false45:                                     ; preds = %if.end
  br label %cond.end46, !dbg !11390

cond.end46:                                       ; preds = %cond.false45, %cond.true40
  %cond47 = phi %struct.VEC_basic_block_base* [ %base44, %cond.true40 ], [ null, %cond.false45 ], !dbg !11390
  %38 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11390
  %add.ptr48 = getelementptr inbounds %struct.function, %struct.function* %38, i64 0, !dbg !11390
  %cfg49 = getelementptr inbounds %struct.function, %struct.function* %add.ptr48, i32 0, i32 1, !dbg !11390
  %39 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg49, align 8, !dbg !11390
  %x_last_basic_block50 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %39, i32 0, i32 5, !dbg !11390
  %40 = load i32, i32* %x_last_basic_block50, align 8, !dbg !11390
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11390
  %call51 = call %struct.basic_block_def* @VEC_basic_block_base_replace(%struct.VEC_basic_block_base* %cond47, i32 %40, %struct.basic_block_def* %41), !dbg !11390
  %42 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11391
  %add.ptr52 = getelementptr inbounds %struct.function, %struct.function* %42, i64 0, !dbg !11391
  %cfg53 = getelementptr inbounds %struct.function, %struct.function* %add.ptr52, i32 0, i32 1, !dbg !11391
  %43 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg53, align 8, !dbg !11391
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %43, i32 0, i32 3, !dbg !11391
  %44 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !11392
  %inc = add nsw i32 %44, 1, !dbg !11392
  store i32 %inc, i32* %x_n_basic_blocks, align 8, !dbg !11392
  %45 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11393
  %add.ptr54 = getelementptr inbounds %struct.function, %struct.function* %45, i64 0, !dbg !11393
  %cfg55 = getelementptr inbounds %struct.function, %struct.function* %add.ptr54, i32 0, i32 1, !dbg !11393
  %46 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg55, align 8, !dbg !11393
  %x_last_basic_block56 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %46, i32 0, i32 5, !dbg !11393
  %47 = load i32, i32* %x_last_basic_block56, align 8, !dbg !11394
  %inc57 = add nsw i32 %47, 1, !dbg !11394
  store i32 %inc57, i32* %x_last_basic_block56, align 8, !dbg !11394
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11395
  ret %struct.basic_block_def* %48, !dbg !11396
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @gimple_redirect_edge_and_branch(%struct.edge_def* %e, %struct.basic_block_def* %dest) #0 !dbg !11397 {
entry:
  %retval = alloca %struct.edge_def*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %dest.addr = alloca %struct.basic_block_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %ret = alloca %struct.edge_def*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %label = alloca %union.tree_node*, align 8
  %cases = alloca %union.tree_node*, align 8
  %e2 = alloca %struct.edge_def*, align 8
  %last = alloca %union.tree_node*, align 8
  %first = alloca %union.tree_node*, align 8
  %cases2 = alloca %union.tree_node*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %elt = alloca %union.tree_node*, align 8
  %i66 = alloca i32, align 4
  %n67 = alloca i32, align 4
  %label69 = alloca %union.tree_node*, align 8
  %cons = alloca %union.tree_node*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !11398, metadata !DIExpression()), !dbg !11399
  store %struct.basic_block_def* %dest, %struct.basic_block_def** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest.addr, metadata !11400, metadata !DIExpression()), !dbg !11401
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !11402, metadata !DIExpression()), !dbg !11403
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11404
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !11405
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !11405
  store %struct.basic_block_def* %1, %struct.basic_block_def** %bb, align 8, !dbg !11403
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !11406, metadata !DIExpression()), !dbg !11407
  call void @llvm.dbg.declare(metadata %struct.edge_def** %ret, metadata !11408, metadata !DIExpression()), !dbg !11409
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !11410, metadata !DIExpression()), !dbg !11411
  %2 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11412
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 7, !dbg !11414
  %3 = load i32, i32* %flags, align 8, !dbg !11414
  %and = and i32 %3, 2, !dbg !11415
  %tobool = icmp ne i32 %and, 0, !dbg !11415
  br i1 %tobool, label %if.then, label %if.end, !dbg !11416

if.then:                                          ; preds = %entry
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !11417
  br label %return, !dbg !11417

if.end:                                           ; preds = %entry
  %4 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11418
  %dest1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %4, i32 0, i32 1, !dbg !11420
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %dest1, align 8, !dbg !11420
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !11421
  %cmp = icmp eq %struct.basic_block_def* %5, %6, !dbg !11422
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !11423

if.then2:                                         ; preds = %if.end
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !11424
  br label %return, !dbg !11424

if.end3:                                          ; preds = %if.end
  %7 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11425
  %flags4 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %7, i32 0, i32 7, !dbg !11427
  %8 = load i32, i32* %flags4, align 8, !dbg !11427
  %and5 = and i32 %8, 8, !dbg !11428
  %tobool6 = icmp ne i32 %and5, 0, !dbg !11428
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !11429

if.then7:                                         ; preds = %if.end3
  %9 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11430
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !11431
  %call = call %struct.edge_def* @redirect_eh_edge(%struct.edge_def* %9, %struct.basic_block_def* %10), !dbg !11432
  store %struct.edge_def* %call, %struct.edge_def** %retval, align 8, !dbg !11433
  br label %return, !dbg !11433

if.end8:                                          ; preds = %if.end3
  %11 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11434
  %src9 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %11, i32 0, i32 0, !dbg !11436
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %src9, align 8, !dbg !11436
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11437
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !11437
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !11437
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !11437
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 0, !dbg !11437
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !11437
  %cmp10 = icmp ne %struct.basic_block_def* %12, %15, !dbg !11438
  br i1 %cmp10, label %if.then11, label %if.end16, !dbg !11439

if.then11:                                        ; preds = %if.end8
  %16 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11440
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !11442
  %call12 = call %struct.edge_def* @gimple_try_redirect_by_replacing_jump(%struct.edge_def* %16, %struct.basic_block_def* %17), !dbg !11443
  store %struct.edge_def* %call12, %struct.edge_def** %ret, align 8, !dbg !11444
  %18 = load %struct.edge_def*, %struct.edge_def** %ret, align 8, !dbg !11445
  %tobool13 = icmp ne %struct.edge_def* %18, null, !dbg !11445
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !11447

if.then14:                                        ; preds = %if.then11
  %19 = load %struct.edge_def*, %struct.edge_def** %ret, align 8, !dbg !11448
  store %struct.edge_def* %19, %struct.edge_def** %retval, align 8, !dbg !11449
  br label %return, !dbg !11449

if.end15:                                         ; preds = %if.then11
  br label %if.end16, !dbg !11450

if.end16:                                         ; preds = %if.end15, %if.end8
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11451
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %20), !dbg !11452
  %21 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !11452
  %22 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !11452
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false), !dbg !11452
  %call17 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !11453
  %conv = zext i8 %call17 to i32, !dbg !11453
  %tobool18 = icmp ne i32 %conv, 0, !dbg !11453
  br i1 %tobool18, label %cond.true, label %cond.false, !dbg !11453

cond.true:                                        ; preds = %if.end16
  br label %cond.end, !dbg !11453

cond.false:                                       ; preds = %if.end16
  %call19 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !11454
  br label %cond.end, !dbg !11453

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.gimple_statement_d* [ null, %cond.true ], [ %call19, %cond.false ], !dbg !11453
  store %union.gimple_statement_d* %cond, %union.gimple_statement_d** %stmt, align 8, !dbg !11455
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11456
  %tobool20 = icmp ne %union.gimple_statement_d* %23, null, !dbg !11456
  br i1 %tobool20, label %cond.true21, label %cond.false23, !dbg !11456

cond.true21:                                      ; preds = %cond.end
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11457
  %call22 = call i32 @gimple_code(%union.gimple_statement_d* %24), !dbg !11458
  br label %cond.end24, !dbg !11456

cond.false23:                                     ; preds = %cond.end
  br label %cond.end24, !dbg !11456

cond.end24:                                       ; preds = %cond.false23, %cond.true21
  %cond25 = phi i32 [ %call22, %cond.true21 ], [ 0, %cond.false23 ], !dbg !11456
  switch i32 %cond25, label %sw.default [
    i32 1, label %sw.bb
    i32 3, label %sw.bb26
    i32 5, label %sw.bb27
    i32 7, label %sw.bb65
    i32 9, label %sw.bb99
    i32 28, label %sw.bb101
    i32 21, label %sw.bb101
    i32 31, label %sw.bb101
    i32 23, label %sw.bb101
    i32 15, label %sw.bb102
  ], !dbg !11459

sw.bb:                                            ; preds = %cond.end24
  br label %sw.epilog, !dbg !11460

sw.bb26:                                          ; preds = %cond.end24
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4670, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !11462
  br label %sw.bb27, !dbg !11462

sw.bb27:                                          ; preds = %cond.end24, %sw.bb26
  call void @llvm.dbg.declare(metadata %union.tree_node** %label, metadata !11463, metadata !DIExpression()), !dbg !11465
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !11466
  %call28 = call %union.tree_node* @gimple_block_label(%struct.basic_block_def* %25), !dbg !11467
  store %union.tree_node* %call28, %union.tree_node** %label, align 8, !dbg !11465
  call void @llvm.dbg.declare(metadata %union.tree_node** %cases, metadata !11468, metadata !DIExpression()), !dbg !11469
  %26 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11470
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11471
  %call29 = call %union.tree_node* @get_cases_for_edge(%struct.edge_def* %26, %union.gimple_statement_d* %27), !dbg !11472
  store %union.tree_node* %call29, %union.tree_node** %cases, align 8, !dbg !11469
  %28 = load %union.tree_node*, %union.tree_node** %cases, align 8, !dbg !11473
  %tobool30 = icmp ne %union.tree_node* %28, null, !dbg !11473
  br i1 %tobool30, label %if.then31, label %if.else, !dbg !11475

if.then31:                                        ; preds = %sw.bb27
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e2, metadata !11476, metadata !DIExpression()), !dbg !11478
  %29 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11479
  %src32 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %29, i32 0, i32 0, !dbg !11480
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %src32, align 8, !dbg !11480
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !11481
  %call33 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %30, %struct.basic_block_def* %31), !dbg !11482
  store %struct.edge_def* %call33, %struct.edge_def** %e2, align 8, !dbg !11478
  call void @llvm.dbg.declare(metadata %union.tree_node** %last, metadata !11483, metadata !DIExpression()), !dbg !11484
  call void @llvm.dbg.declare(metadata %union.tree_node** %first, metadata !11485, metadata !DIExpression()), !dbg !11486
  %32 = load %union.tree_node*, %union.tree_node** %cases, align 8, !dbg !11487
  store %union.tree_node* %32, %union.tree_node** %first, align 8, !dbg !11488
  br label %while.cond, !dbg !11489

while.cond:                                       ; preds = %while.body, %if.then31
  %33 = load %union.tree_node*, %union.tree_node** %cases, align 8, !dbg !11490
  %tobool34 = icmp ne %union.tree_node* %33, null, !dbg !11489
  br i1 %tobool34, label %while.body, label %while.end, !dbg !11489

while.body:                                       ; preds = %while.cond
  %34 = load %union.tree_node*, %union.tree_node** %cases, align 8, !dbg !11491
  store %union.tree_node* %34, %union.tree_node** %last, align 8, !dbg !11493
  %35 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !11494
  %36 = load %union.tree_node*, %union.tree_node** %cases, align 8, !dbg !11495
  %exp = bitcast %union.tree_node* %36 to %struct.tree_exp*, !dbg !11495
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !11495
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !11495
  store %union.tree_node* %35, %union.tree_node** %arrayidx, align 8, !dbg !11496
  %37 = load %union.tree_node*, %union.tree_node** %cases, align 8, !dbg !11497
  %common = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !11497
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !11497
  %38 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !11497
  store %union.tree_node* %38, %union.tree_node** %cases, align 8, !dbg !11498
  br label %while.cond, !dbg !11489, !llvm.loop !11499

while.end:                                        ; preds = %while.cond
  %39 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !11501
  %tobool35 = icmp ne %struct.edge_def* %39, null, !dbg !11501
  br i1 %tobool35, label %if.then36, label %if.end44, !dbg !11503

if.then36:                                        ; preds = %while.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %cases2, metadata !11504, metadata !DIExpression()), !dbg !11506
  %40 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !11507
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11508
  %call37 = call %union.tree_node* @get_cases_for_edge(%struct.edge_def* %40, %union.gimple_statement_d* %41), !dbg !11509
  store %union.tree_node* %call37, %union.tree_node** %cases2, align 8, !dbg !11506
  %42 = load %union.tree_node*, %union.tree_node** %cases2, align 8, !dbg !11510
  %common38 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !11510
  %chain39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 1, !dbg !11510
  %43 = load %union.tree_node*, %union.tree_node** %chain39, align 8, !dbg !11510
  %44 = load %union.tree_node*, %union.tree_node** %last, align 8, !dbg !11511
  %common40 = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !11511
  %chain41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 1, !dbg !11511
  store %union.tree_node* %43, %union.tree_node** %chain41, align 8, !dbg !11512
  %45 = load %union.tree_node*, %union.tree_node** %first, align 8, !dbg !11513
  %46 = load %union.tree_node*, %union.tree_node** %cases2, align 8, !dbg !11514
  %common42 = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !11514
  %chain43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 1, !dbg !11514
  store %union.tree_node* %45, %union.tree_node** %chain43, align 8, !dbg !11515
  br label %if.end44, !dbg !11516

if.end44:                                         ; preds = %if.then36, %while.end
  br label %if.end64, !dbg !11517

if.else:                                          ; preds = %sw.bb27
  call void @llvm.dbg.declare(metadata i64* %i, metadata !11518, metadata !DIExpression()), !dbg !11520
  call void @llvm.dbg.declare(metadata i64* %n, metadata !11521, metadata !DIExpression()), !dbg !11522
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11523
  %call45 = call i32 @gimple_switch_num_labels(%union.gimple_statement_d* %47), !dbg !11524
  %conv46 = zext i32 %call45 to i64, !dbg !11524
  store i64 %conv46, i64* %n, align 8, !dbg !11522
  store i64 0, i64* %i, align 8, !dbg !11525
  br label %for.cond, !dbg !11527

for.cond:                                         ; preds = %for.inc, %if.else
  %48 = load i64, i64* %i, align 8, !dbg !11528
  %49 = load i64, i64* %n, align 8, !dbg !11530
  %cmp47 = icmp ult i64 %48, %49, !dbg !11531
  br i1 %cmp47, label %for.body, label %for.end, !dbg !11532

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %elt, metadata !11533, metadata !DIExpression()), !dbg !11535
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11536
  %51 = load i64, i64* %i, align 8, !dbg !11537
  %conv49 = trunc i64 %51 to i32, !dbg !11537
  %call50 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %50, i32 %conv49), !dbg !11538
  store %union.tree_node* %call50, %union.tree_node** %elt, align 8, !dbg !11535
  %52 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11539
  %add.ptr51 = getelementptr inbounds %struct.function, %struct.function* %52, i64 0, !dbg !11539
  %53 = load %union.tree_node*, %union.tree_node** %elt, align 8, !dbg !11539
  %exp52 = bitcast %union.tree_node* %53 to %struct.tree_exp*, !dbg !11539
  %operands53 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp52, i32 0, i32 3, !dbg !11539
  %arrayidx54 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands53, i64 0, i64 2, !dbg !11539
  %54 = load %union.tree_node*, %union.tree_node** %arrayidx54, align 8, !dbg !11539
  %call55 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr51, %union.tree_node* %54), !dbg !11539
  %55 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11541
  %dest56 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %55, i32 0, i32 1, !dbg !11542
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %dest56, align 8, !dbg !11542
  %cmp57 = icmp eq %struct.basic_block_def* %call55, %56, !dbg !11543
  br i1 %cmp57, label %if.then59, label %if.end63, !dbg !11544

if.then59:                                        ; preds = %for.body
  %57 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !11545
  %58 = load %union.tree_node*, %union.tree_node** %elt, align 8, !dbg !11546
  %exp60 = bitcast %union.tree_node* %58 to %struct.tree_exp*, !dbg !11546
  %operands61 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp60, i32 0, i32 3, !dbg !11546
  %arrayidx62 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands61, i64 0, i64 2, !dbg !11546
  store %union.tree_node* %57, %union.tree_node** %arrayidx62, align 8, !dbg !11547
  br label %if.end63, !dbg !11546

if.end63:                                         ; preds = %if.then59, %for.body
  br label %for.inc, !dbg !11548

for.inc:                                          ; preds = %if.end63
  %59 = load i64, i64* %i, align 8, !dbg !11549
  %inc = add i64 %59, 1, !dbg !11549
  store i64 %inc, i64* %i, align 8, !dbg !11549
  br label %for.cond, !dbg !11550, !llvm.loop !11551

for.end:                                          ; preds = %for.cond
  br label %if.end64

if.end64:                                         ; preds = %for.end, %if.end44
  br label %sw.epilog, !dbg !11553

sw.bb65:                                          ; preds = %cond.end24
  call void @llvm.dbg.declare(metadata i32* %i66, metadata !11554, metadata !DIExpression()), !dbg !11556
  call void @llvm.dbg.declare(metadata i32* %n67, metadata !11557, metadata !DIExpression()), !dbg !11558
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11559
  %call68 = call i32 @gimple_asm_nlabels(%union.gimple_statement_d* %60), !dbg !11560
  store i32 %call68, i32* %n67, align 4, !dbg !11558
  call void @llvm.dbg.declare(metadata %union.tree_node** %label69, metadata !11561, metadata !DIExpression()), !dbg !11562
  store %union.tree_node* null, %union.tree_node** %label69, align 8, !dbg !11562
  store i32 0, i32* %i66, align 4, !dbg !11563
  br label %for.cond70, !dbg !11565

for.cond70:                                       ; preds = %for.inc88, %sw.bb65
  %61 = load i32, i32* %i66, align 4, !dbg !11566
  %62 = load i32, i32* %n67, align 4, !dbg !11568
  %cmp71 = icmp slt i32 %61, %62, !dbg !11569
  br i1 %cmp71, label %for.body73, label %for.end90, !dbg !11570

for.body73:                                       ; preds = %for.cond70
  call void @llvm.dbg.declare(metadata %union.tree_node** %cons, metadata !11571, metadata !DIExpression()), !dbg !11573
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11574
  %64 = load i32, i32* %i66, align 4, !dbg !11575
  %call74 = call %union.tree_node* @gimple_asm_label_op(%union.gimple_statement_d* %63, i32 %64), !dbg !11576
  store %union.tree_node* %call74, %union.tree_node** %cons, align 8, !dbg !11573
  %65 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11577
  %add.ptr75 = getelementptr inbounds %struct.function, %struct.function* %65, i64 0, !dbg !11577
  %66 = load %union.tree_node*, %union.tree_node** %cons, align 8, !dbg !11577
  %list = bitcast %union.tree_node* %66 to %struct.tree_list*, !dbg !11577
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !11577
  %67 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !11577
  %call76 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr75, %union.tree_node* %67), !dbg !11577
  %68 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11579
  %dest77 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %68, i32 0, i32 1, !dbg !11580
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %dest77, align 8, !dbg !11580
  %cmp78 = icmp eq %struct.basic_block_def* %call76, %69, !dbg !11581
  br i1 %cmp78, label %if.then80, label %if.end87, !dbg !11582

if.then80:                                        ; preds = %for.body73
  %70 = load %union.tree_node*, %union.tree_node** %label69, align 8, !dbg !11583
  %tobool81 = icmp ne %union.tree_node* %70, null, !dbg !11583
  br i1 %tobool81, label %if.end84, label %if.then82, !dbg !11586

if.then82:                                        ; preds = %if.then80
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !11587
  %call83 = call %union.tree_node* @gimple_block_label(%struct.basic_block_def* %71), !dbg !11588
  store %union.tree_node* %call83, %union.tree_node** %label69, align 8, !dbg !11589
  br label %if.end84, !dbg !11590

if.end84:                                         ; preds = %if.then82, %if.then80
  %72 = load %union.tree_node*, %union.tree_node** %label69, align 8, !dbg !11591
  %73 = load %union.tree_node*, %union.tree_node** %cons, align 8, !dbg !11592
  %list85 = bitcast %union.tree_node* %73 to %struct.tree_list*, !dbg !11592
  %value86 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list85, i32 0, i32 2, !dbg !11592
  store %union.tree_node* %72, %union.tree_node** %value86, align 8, !dbg !11593
  br label %if.end87, !dbg !11594

if.end87:                                         ; preds = %if.end84, %for.body73
  br label %for.inc88, !dbg !11595

for.inc88:                                        ; preds = %if.end87
  %74 = load i32, i32* %i66, align 4, !dbg !11596
  %inc89 = add nsw i32 %74, 1, !dbg !11596
  store i32 %inc89, i32* %i66, align 4, !dbg !11596
  br label %for.cond70, !dbg !11597, !llvm.loop !11598

for.end90:                                        ; preds = %for.cond70
  %75 = load %union.tree_node*, %union.tree_node** %label69, align 8, !dbg !11600
  %tobool91 = icmp ne %union.tree_node* %75, null, !dbg !11600
  br i1 %tobool91, label %cond.false96, label %lor.lhs.false, !dbg !11600

lor.lhs.false:                                    ; preds = %for.end90
  %76 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11600
  %flags92 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %76, i32 0, i32 7, !dbg !11600
  %77 = load i32, i32* %flags92, align 8, !dbg !11600
  %and93 = and i32 %77, 1, !dbg !11600
  %tobool94 = icmp ne i32 %and93, 0, !dbg !11600
  br i1 %tobool94, label %cond.false96, label %cond.true95, !dbg !11600

cond.true95:                                      ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4735, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !11600
  br label %cond.end97, !dbg !11600

cond.false96:                                     ; preds = %lor.lhs.false, %for.end90
  br label %cond.end97, !dbg !11600

cond.end97:                                       ; preds = %cond.false96, %cond.true95
  %cond98 = phi i32 [ 0, %cond.true95 ], [ 0, %cond.false96 ], !dbg !11600
  br label %sw.epilog, !dbg !11601

sw.bb99:                                          ; preds = %cond.end24
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !11602
  %78 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11603
  %flags100 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %78, i32 0, i32 7, !dbg !11604
  %79 = load i32, i32* %flags100, align 8, !dbg !11605
  %or = or i32 %79, 1, !dbg !11605
  store i32 %or, i32* %flags100, align 8, !dbg !11605
  br label %sw.epilog, !dbg !11606

sw.bb101:                                         ; preds = %cond.end24, %cond.end24, %cond.end24, %cond.end24
  br label %sw.epilog, !dbg !11607

sw.bb102:                                         ; preds = %cond.end24
  %80 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11608
  %flags103 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %80, i32 0, i32 7, !dbg !11610
  %81 = load i32, i32* %flags103, align 8, !dbg !11610
  %and104 = and i32 %81, 1, !dbg !11611
  %tobool105 = icmp ne i32 %and104, 0, !dbg !11611
  br i1 %tobool105, label %if.end107, label %if.then106, !dbg !11612

if.then106:                                       ; preds = %sw.bb102
  %82 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11613
  %83 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11614
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !11615
  call void @redirect_eh_dispatch_edge(%union.gimple_statement_d* %82, %struct.edge_def* %83, %struct.basic_block_def* %84), !dbg !11616
  br label %if.end107, !dbg !11616

if.end107:                                        ; preds = %if.then106, %sw.bb102
  br label %sw.epilog, !dbg !11617

sw.default:                                       ; preds = %cond.end24
  %85 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11618
  %flags108 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %85, i32 0, i32 7, !dbg !11618
  %86 = load i32, i32* %flags108, align 8, !dbg !11618
  %and109 = and i32 %86, 1, !dbg !11618
  %tobool110 = icmp ne i32 %and109, 0, !dbg !11618
  br i1 %tobool110, label %cond.false112, label %cond.true111, !dbg !11618

cond.true111:                                     ; preds = %sw.default
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4759, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !11618
  br label %cond.end113, !dbg !11618

cond.false112:                                    ; preds = %sw.default
  br label %cond.end113, !dbg !11618

cond.end113:                                      ; preds = %cond.false112, %cond.true111
  %cond114 = phi i32 [ 0, %cond.true111 ], [ 0, %cond.false112 ], !dbg !11618
  br label %sw.epilog, !dbg !11619

sw.epilog:                                        ; preds = %cond.end113, %if.end107, %sw.bb101, %sw.bb99, %cond.end97, %if.end64, %sw.bb
  %87 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11620
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !11621
  %call115 = call %struct.edge_def* @ssa_redirect_edge(%struct.edge_def* %87, %struct.basic_block_def* %88), !dbg !11622
  store %struct.edge_def* %call115, %struct.edge_def** %e.addr, align 8, !dbg !11623
  %89 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11624
  store %struct.edge_def* %89, %struct.edge_def** %retval, align 8, !dbg !11625
  br label %return, !dbg !11625

return:                                           ; preds = %sw.epilog, %if.then14, %if.then7, %if.then2, %if.then
  %90 = load %struct.edge_def*, %struct.edge_def** %retval, align 8, !dbg !11626
  ret %struct.edge_def* %90, !dbg !11626
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_redirect_edge_and_branch_force(%struct.edge_def* %e, %struct.basic_block_def* %dest) #0 !dbg !11627 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %dest.addr = alloca %struct.basic_block_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !11628, metadata !DIExpression()), !dbg !11629
  store %struct.basic_block_def* %dest, %struct.basic_block_def** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest.addr, metadata !11630, metadata !DIExpression()), !dbg !11631
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11632
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !11633
  %call = call %struct.edge_def* @gimple_redirect_edge_and_branch(%struct.edge_def* %0, %struct.basic_block_def* %1), !dbg !11634
  store %struct.edge_def* %call, %struct.edge_def** %e.addr, align 8, !dbg !11635
  %2 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11636
  %tobool = icmp ne %struct.edge_def* %2, null, !dbg !11636
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !11636

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4789, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !11636
  br label %cond.end, !dbg !11636

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11636

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11636
  ret %struct.basic_block_def* null, !dbg !11637
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_can_remove_branch_p(%struct.edge_def* %e) #0 !dbg !11638 {
entry:
  %retval = alloca i8, align 1
  %e.addr = alloca %struct.edge_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !11639, metadata !DIExpression()), !dbg !11640
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !11641
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 7, !dbg !11643
  %1 = load i32, i32* %flags, align 8, !dbg !11643
  %and = and i32 %1, 10, !dbg !11644
  %tobool = icmp ne i32 %and, 0, !dbg !11644
  br i1 %tobool, label %if.then, label %if.end, !dbg !11645

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !11646
  br label %return, !dbg !11646

if.end:                                           ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !11647
  br label %return, !dbg !11647

return:                                           ; preds = %if.end, %if.then
  %2 = load i8, i8* %retval, align 1, !dbg !11648
  ret i8 %2, !dbg !11648
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_bb(%struct.basic_block_def* %bb) #0 !dbg !11649 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %i = alloca %struct.gimple_stmt_iterator, align 8
  %loop = alloca %struct.loop*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %new_gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp48 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp58 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !11650, metadata !DIExpression()), !dbg !11651
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !11652, metadata !DIExpression()), !dbg !11653
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11654
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !11654
  br i1 %tobool, label %if.then, label %if.end4, !dbg !11656

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11657
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11659
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !11660
  %3 = load i32, i32* %index, align 8, !dbg !11660
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.177, i64 0, i64 0), i32 %3), !dbg !11661
  %4 = load i32, i32* @dump_flags, align 4, !dbg !11662
  %and = and i32 %4, 8, !dbg !11664
  %tobool1 = icmp ne i32 %and, 0, !dbg !11664
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !11665

if.then2:                                         ; preds = %if.then
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11666
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11668
  call void @dump_bb(%struct.basic_block_def* %5, %struct._IO_FILE* %6, i32 0), !dbg !11669
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11670
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !11671
  br label %if.end, !dbg !11672

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end4, !dbg !11673

if.end4:                                          ; preds = %if.end, %entry
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11674
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !11674
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !11674
  %9 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !11674
  %tobool5 = icmp ne %struct.loops* %9, null, !dbg !11674
  br i1 %tobool5, label %if.then6, label %if.end10, !dbg !11676

if.then6:                                         ; preds = %if.end4
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !11677, metadata !DIExpression()), !dbg !11679
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11680
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 3, !dbg !11681
  %11 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !11681
  store %struct.loop* %11, %struct.loop** %loop, align 8, !dbg !11679
  %12 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !11682
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %12, i32 0, i32 3, !dbg !11684
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !11684
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11685
  %cmp = icmp eq %struct.basic_block_def* %13, %14, !dbg !11686
  br i1 %cmp, label %if.then8, label %lor.lhs.false, !dbg !11687

lor.lhs.false:                                    ; preds = %if.then6
  %15 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !11688
  %header = getelementptr inbounds %struct.loop, %struct.loop* %15, i32 0, i32 2, !dbg !11689
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !11689
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11690
  %cmp7 = icmp eq %struct.basic_block_def* %16, %17, !dbg !11691
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !11692

if.then8:                                         ; preds = %lor.lhs.false, %if.then6
  %18 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !11693
  call void @free_numbers_of_iterations_estimates_loop(%struct.loop* %18), !dbg !11694
  br label %if.end9, !dbg !11694

if.end9:                                          ; preds = %if.then8, %lor.lhs.false
  br label %if.end10, !dbg !11695

if.end10:                                         ; preds = %if.end9, %if.end4
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11696
  %call11 = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %19), !dbg !11698
  %cmp12 = icmp ne %struct.gimple_seq_d* %call11, null, !dbg !11699
  br i1 %cmp12, label %if.then13, label %if.end61, !dbg !11700

if.then13:                                        ; preds = %if.end10
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11701
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %20), !dbg !11704
  %21 = bitcast %struct.gimple_stmt_iterator* %i to i8*, !dbg !11704
  %22 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !11704
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false), !dbg !11704
  br label %for.cond, !dbg !11705

for.cond:                                         ; preds = %if.end60, %if.then13
  %call14 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !11706
  %tobool15 = icmp ne i8 %call14, 0, !dbg !11708
  %lnot = xor i1 %tobool15, true, !dbg !11708
  br i1 %lnot, label %for.body, label %for.end, !dbg !11709

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !11710, metadata !DIExpression()), !dbg !11712
  %call16 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !11713
  store %union.gimple_statement_d* %call16, %union.gimple_statement_d** %stmt, align 8, !dbg !11712
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11714
  %call17 = call i32 @gimple_code(%union.gimple_statement_d* %23), !dbg !11716
  %cmp18 = icmp eq i32 %call17, 4, !dbg !11717
  br i1 %cmp18, label %land.lhs.true, label %if.else, !dbg !11718

land.lhs.true:                                    ; preds = %for.body
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11719
  %call19 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %24), !dbg !11719
  %base = bitcast %union.tree_node* %call19 to %struct.tree_base*, !dbg !11719
  %25 = bitcast %struct.tree_base* %base to i64*, !dbg !11719
  %bf.load = load i64, i64* %25, align 8, !dbg !11719
  %bf.lshr = lshr i64 %bf.load, 16, !dbg !11719
  %bf.clear = and i64 %bf.lshr, 1, !dbg !11719
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11719
  %tobool20 = icmp ne i32 %bf.cast, 0, !dbg !11719
  br i1 %tobool20, label %if.then28, label %lor.lhs.false21, !dbg !11720

lor.lhs.false21:                                  ; preds = %land.lhs.true
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11721
  %call22 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %26), !dbg !11721
  %decl_common = bitcast %union.tree_node* %call22 to %struct.tree_decl_common*, !dbg !11721
  %nonlocal_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !11721
  %27 = bitcast i40* %nonlocal_flag to i64*, !dbg !11721
  %bf.load23 = load i64, i64* %27, align 8, !dbg !11721
  %bf.lshr24 = lshr i64 %bf.load23, 8, !dbg !11721
  %bf.clear25 = and i64 %bf.lshr24, 1, !dbg !11721
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !11721
  %tobool27 = icmp ne i32 %bf.cast26, 0, !dbg !11721
  br i1 %tobool27, label %if.then28, label %if.else, !dbg !11722

if.then28:                                        ; preds = %lor.lhs.false21, %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !11723, metadata !DIExpression()), !dbg !11725
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %new_gsi, metadata !11726, metadata !DIExpression()), !dbg !11727
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11728
  %call29 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %28), !dbg !11728
  %decl_common30 = bitcast %union.tree_node* %call29 to %struct.tree_decl_common*, !dbg !11728
  %nonlocal_flag31 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common30, i32 0, i32 2, !dbg !11728
  %29 = bitcast i40* %nonlocal_flag31 to i64*, !dbg !11728
  %bf.load32 = load i64, i64* %29, align 8, !dbg !11728
  %bf.lshr33 = lshr i64 %bf.load32, 8, !dbg !11728
  %bf.clear34 = and i64 %bf.lshr33, 1, !dbg !11728
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !11728
  %tobool36 = icmp ne i32 %bf.cast35, 0, !dbg !11728
  br i1 %tobool36, label %if.then37, label %if.end47, !dbg !11730

if.then37:                                        ; preds = %if.then28
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11731
  %call38 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %30), !dbg !11731
  %decl_common39 = bitcast %union.tree_node* %call38 to %struct.tree_decl_common*, !dbg !11731
  %nonlocal_flag40 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common39, i32 0, i32 2, !dbg !11731
  %31 = bitcast i40* %nonlocal_flag40 to i64*, !dbg !11731
  %bf.load41 = load i64, i64* %31, align 8, !dbg !11733
  %bf.clear42 = and i64 %bf.load41, -257, !dbg !11733
  store i64 %bf.clear42, i64* %31, align 8, !dbg !11733
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11734
  %call43 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %32), !dbg !11734
  %base44 = bitcast %union.tree_node* %call43 to %struct.tree_base*, !dbg !11734
  %33 = bitcast %struct.tree_base* %base44 to i64*, !dbg !11734
  %bf.load45 = load i64, i64* %33, align 8, !dbg !11735
  %bf.clear46 = and i64 %bf.load45, -65537, !dbg !11735
  %bf.set = or i64 %bf.clear46, 65536, !dbg !11735
  store i64 %bf.set, i64* %33, align 8, !dbg !11735
  br label %if.end47, !dbg !11736

if.end47:                                         ; preds = %if.then37, %if.then28
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11737
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 5, !dbg !11738
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !11738
  store %struct.basic_block_def* %35, %struct.basic_block_def** %new_bb, align 8, !dbg !11739
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !11740
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp48, %struct.basic_block_def* %36), !dbg !11741
  %37 = bitcast %struct.gimple_stmt_iterator* %new_gsi to i8*, !dbg !11741
  %38 = bitcast %struct.gimple_stmt_iterator* %tmp48 to i8*, !dbg !11741
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false), !dbg !11741
  call void @gsi_remove(%struct.gimple_stmt_iterator* %i, i8 zeroext 0), !dbg !11742
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11743
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %new_gsi, %union.gimple_statement_d* %39, i32 0), !dbg !11744
  br label %if.end54, !dbg !11745

if.else:                                          ; preds = %lor.lhs.false21, %for.body
  %40 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11746
  %add.ptr49 = getelementptr inbounds %struct.function, %struct.function* %40, i64 0, !dbg !11746
  %call50 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr49), !dbg !11749
  %tobool51 = icmp ne i8 %call50, 0, !dbg !11749
  br i1 %tobool51, label %if.then52, label %if.end53, !dbg !11750

if.then52:                                        ; preds = %if.else
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11751
  call void @release_defs(%union.gimple_statement_d* %41), !dbg !11752
  br label %if.end53, !dbg !11752

if.end53:                                         ; preds = %if.then52, %if.else
  call void @gsi_remove(%struct.gimple_stmt_iterator* %i, i8 zeroext 1), !dbg !11753
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.end47
  %call55 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !11754
  %tobool56 = icmp ne i8 %call55, 0, !dbg !11754
  br i1 %tobool56, label %if.then57, label %if.else59, !dbg !11756

if.then57:                                        ; preds = %if.end54
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11757
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp58, %struct.basic_block_def* %42), !dbg !11758
  %43 = bitcast %struct.gimple_stmt_iterator* %i to i8*, !dbg !11758
  %44 = bitcast %struct.gimple_stmt_iterator* %tmp58 to i8*, !dbg !11758
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %44, i64 24, i1 false), !dbg !11758
  br label %if.end60, !dbg !11759

if.else59:                                        ; preds = %if.end54
  call void @gsi_prev(%struct.gimple_stmt_iterator* %i), !dbg !11760
  br label %if.end60

if.end60:                                         ; preds = %if.else59, %if.then57
  br label %for.cond, !dbg !11761, !llvm.loop !11762

for.end:                                          ; preds = %for.cond
  br label %if.end61, !dbg !11764

if.end61:                                         ; preds = %for.end, %if.end10
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11765
  call void @remove_phi_nodes_and_edges_for_unreachable_block(%struct.basic_block_def* %45), !dbg !11766
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11767
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 7, !dbg !11768
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !11769
  store %struct.gimple_bb_info* null, %struct.gimple_bb_info** %gimple, align 8, !dbg !11770
  ret void, !dbg !11771
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_split_block(%struct.basic_block_def* %bb, i8* %stmt) #0 !dbg !11772 {
entry:
  %retval = alloca %struct.basic_block_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %stmt.addr = alloca i8*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %gsi_tgt = alloca %struct.gimple_stmt_iterator, align 8
  %act = alloca %union.gimple_statement_d*, align 8
  %list = alloca %struct.gimple_seq_d*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp8 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp31 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !11773, metadata !DIExpression()), !dbg !11774
  store i8* %stmt, i8** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %stmt.addr, metadata !11775, metadata !DIExpression()), !dbg !11776
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !11777, metadata !DIExpression()), !dbg !11778
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi_tgt, metadata !11779, metadata !DIExpression()), !dbg !11780
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %act, metadata !11781, metadata !DIExpression()), !dbg !11782
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %list, metadata !11783, metadata !DIExpression()), !dbg !11784
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !11785, metadata !DIExpression()), !dbg !11786
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !11787, metadata !DIExpression()), !dbg !11788
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !11789, metadata !DIExpression()), !dbg !11790
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11791
  %call = call %struct.basic_block_def* @create_empty_bb(%struct.basic_block_def* %0), !dbg !11792
  store %struct.basic_block_def* %call, %struct.basic_block_def** %new_bb, align 8, !dbg !11793
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11794
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !11795
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !11795
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !11796
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !11797
  store %struct.VEC_edge_gc* %2, %struct.VEC_edge_gc** %succs1, align 8, !dbg !11798
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11799
  %succs2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 1, !dbg !11800
  store %struct.VEC_edge_gc* null, %struct.VEC_edge_gc** %succs2, align 8, !dbg !11801
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !11802
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 1, !dbg !11802
  %call4 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs3), !dbg !11802
  %6 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !11802
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %6, i32 0, i32 0, !dbg !11802
  %8 = extractvalue { i32, %struct.VEC_edge_gc** } %call4, 0, !dbg !11802
  store i32 %8, i32* %7, align 8, !dbg !11802
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %6, i32 0, i32 1, !dbg !11802
  %10 = extractvalue { i32, %struct.VEC_edge_gc** } %call4, 1, !dbg !11802
  store %struct.VEC_edge_gc** %10, %struct.VEC_edge_gc*** %9, align 8, !dbg !11802
  %11 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !11802
  %12 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !11802
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 16, i1 false), !dbg !11802
  br label %for.cond, !dbg !11802

for.cond:                                         ; preds = %for.inc, %entry
  %13 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !11804
  %14 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %13, i32 0, i32 0, !dbg !11804
  %15 = load i32, i32* %14, align 8, !dbg !11804
  %16 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %13, i32 0, i32 1, !dbg !11804
  %17 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %16, align 8, !dbg !11804
  %call5 = call zeroext i8 @ei_cond(i32 %15, %struct.VEC_edge_gc** %17, %struct.edge_def** %e), !dbg !11804
  %tobool = icmp ne i8 %call5, 0, !dbg !11802
  br i1 %tobool, label %for.body, label %for.end, !dbg !11802

for.body:                                         ; preds = %for.cond
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !11806
  %19 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11807
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %19, i32 0, i32 0, !dbg !11808
  store %struct.basic_block_def* %18, %struct.basic_block_def** %src, align 8, !dbg !11809
  br label %for.inc, !dbg !11807

for.inc:                                          ; preds = %for.body
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !11804
  br label %for.cond, !dbg !11804, !llvm.loop !11810

for.end:                                          ; preds = %for.cond
  %20 = load i8*, i8** %stmt.addr, align 8, !dbg !11812
  %tobool6 = icmp ne i8* %20, null, !dbg !11812
  br i1 %tobool6, label %land.lhs.true, label %if.end, !dbg !11814

land.lhs.true:                                    ; preds = %for.end
  %21 = load i8*, i8** %stmt.addr, align 8, !dbg !11815
  %22 = bitcast i8* %21 to %union.gimple_statement_d*, !dbg !11816
  %call7 = call i32 @gimple_code(%union.gimple_statement_d* %22), !dbg !11817
  %cmp = icmp eq i32 %call7, 4, !dbg !11818
  br i1 %cmp, label %if.then, label %if.end, !dbg !11819

if.then:                                          ; preds = %land.lhs.true
  store i8* null, i8** %stmt.addr, align 8, !dbg !11820
  br label %if.end, !dbg !11821

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.end
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11822
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp8, %struct.basic_block_def* %23), !dbg !11824
  %24 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !11824
  %25 = bitcast %struct.gimple_stmt_iterator* %tmp8 to i8*, !dbg !11824
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 24, i1 false), !dbg !11824
  br label %for.cond9, !dbg !11825

for.cond9:                                        ; preds = %for.inc24, %if.end
  %call10 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !11826
  %tobool11 = icmp ne i8 %call10, 0, !dbg !11828
  %lnot = xor i1 %tobool11, true, !dbg !11828
  br i1 %lnot, label %for.body12, label %for.end25, !dbg !11829

for.body12:                                       ; preds = %for.cond9
  %call13 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !11830
  store %union.gimple_statement_d* %call13, %union.gimple_statement_d** %act, align 8, !dbg !11832
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %act, align 8, !dbg !11833
  %call14 = call i32 @gimple_code(%union.gimple_statement_d* %26), !dbg !11835
  %cmp15 = icmp eq i32 %call14, 4, !dbg !11836
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !11837

if.then16:                                        ; preds = %for.body12
  br label %for.inc24, !dbg !11838

if.end17:                                         ; preds = %for.body12
  %27 = load i8*, i8** %stmt.addr, align 8, !dbg !11839
  %tobool18 = icmp ne i8* %27, null, !dbg !11839
  br i1 %tobool18, label %if.end20, label %if.then19, !dbg !11841

if.then19:                                        ; preds = %if.end17
  br label %for.end25, !dbg !11842

if.end20:                                         ; preds = %if.end17
  %28 = load i8*, i8** %stmt.addr, align 8, !dbg !11843
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %act, align 8, !dbg !11845
  %30 = bitcast %union.gimple_statement_d* %29 to i8*, !dbg !11845
  %cmp21 = icmp eq i8* %28, %30, !dbg !11846
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !11847

if.then22:                                        ; preds = %if.end20
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !11848
  br label %for.end25, !dbg !11850

if.end23:                                         ; preds = %if.end20
  br label %for.inc24, !dbg !11851

for.inc24:                                        ; preds = %if.end23, %if.then16
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !11852
  br label %for.cond9, !dbg !11853, !llvm.loop !11854

for.end25:                                        ; preds = %if.then22, %if.then19, %for.cond9
  %call26 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !11856
  %tobool27 = icmp ne i8 %call26, 0, !dbg !11856
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !11858

if.then28:                                        ; preds = %for.end25
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !11859
  store %struct.basic_block_def* %31, %struct.basic_block_def** %retval, align 8, !dbg !11860
  br label %return, !dbg !11860

if.end29:                                         ; preds = %for.end25
  %call30 = call %struct.gimple_seq_d* @gsi_split_seq_before(%struct.gimple_stmt_iterator* %gsi), !dbg !11861
  store %struct.gimple_seq_d* %call30, %struct.gimple_seq_d** %list, align 8, !dbg !11862
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !11863
  %33 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %list, align 8, !dbg !11864
  call void @set_bb_seq(%struct.basic_block_def* %32, %struct.gimple_seq_d* %33), !dbg !11865
  %34 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %list, align 8, !dbg !11866
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp31, %struct.gimple_seq_d* %34), !dbg !11868
  %35 = bitcast %struct.gimple_stmt_iterator* %gsi_tgt to i8*, !dbg !11868
  %36 = bitcast %struct.gimple_stmt_iterator* %tmp31 to i8*, !dbg !11868
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 24, i1 false), !dbg !11868
  br label %for.cond32, !dbg !11869

for.cond32:                                       ; preds = %for.inc38, %if.end29
  %call33 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi_tgt), !dbg !11870
  %tobool34 = icmp ne i8 %call33, 0, !dbg !11872
  %lnot35 = xor i1 %tobool34, true, !dbg !11872
  br i1 %lnot35, label %for.body36, label %for.end39, !dbg !11873

for.body36:                                       ; preds = %for.cond32
  %call37 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi_tgt), !dbg !11874
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !11875
  call void @gimple_set_bb(%union.gimple_statement_d* %call37, %struct.basic_block_def* %37), !dbg !11876
  br label %for.inc38, !dbg !11876

for.inc38:                                        ; preds = %for.body36
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi_tgt), !dbg !11877
  br label %for.cond32, !dbg !11878, !llvm.loop !11879

for.end39:                                        ; preds = %for.cond32
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !11881
  store %struct.basic_block_def* %38, %struct.basic_block_def** %retval, align 8, !dbg !11882
  br label %return, !dbg !11882

return:                                           ; preds = %for.end39, %if.then28
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %retval, align 8, !dbg !11883
  ret %struct.basic_block_def* %39, !dbg !11883
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_move_block_after(%struct.basic_block_def* %bb, %struct.basic_block_def* %after) #0 !dbg !11884 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %after.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !11885, metadata !DIExpression()), !dbg !11886
  store %struct.basic_block_def* %after, %struct.basic_block_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %after.addr, metadata !11887, metadata !DIExpression()), !dbg !11888
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11889
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 5, !dbg !11891
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !11891
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %after.addr, align 8, !dbg !11892
  %cmp = icmp eq %struct.basic_block_def* %1, %2, !dbg !11893
  br i1 %cmp, label %if.then, label %if.end, !dbg !11894

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !11895
  br label %return, !dbg !11895

if.end:                                           ; preds = %entry
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11896
  call void @unlink_block(%struct.basic_block_def* %3), !dbg !11897
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11898
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %after.addr, align 8, !dbg !11899
  call void @link_block(%struct.basic_block_def* %4, %struct.basic_block_def* %5), !dbg !11900
  store i8 1, i8* %retval, align 1, !dbg !11901
  br label %return, !dbg !11901

return:                                           ; preds = %if.end, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !11902
  ret i8 %6, !dbg !11902
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_can_merge_blocks_p(%struct.basic_block_def* %a, %struct.basic_block_def* %b) #0 !dbg !11903 {
entry:
  %retval = alloca i8, align 1
  %a.addr = alloca %struct.basic_block_def*, align 8
  %b.addr = alloca %struct.basic_block_def*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %phis = alloca %struct.gimple_seq_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %lab = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %a, %struct.basic_block_def** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %a.addr, metadata !11904, metadata !DIExpression()), !dbg !11905
  store %struct.basic_block_def* %b, %struct.basic_block_def** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b.addr, metadata !11906, metadata !DIExpression()), !dbg !11907
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !11908, metadata !DIExpression()), !dbg !11909
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !11910, metadata !DIExpression()), !dbg !11911
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %phis, metadata !11912, metadata !DIExpression()), !dbg !11913
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !11914
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !11916
  %tobool = icmp ne i8 %call, 0, !dbg !11916
  br i1 %tobool, label %if.end, label %if.then, !dbg !11917

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !11918
  br label %return, !dbg !11918

if.end:                                           ; preds = %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !11919
  %call1 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %1), !dbg !11921
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call1, i32 0, i32 7, !dbg !11922
  %2 = load i32, i32* %flags, align 8, !dbg !11922
  %and = and i32 %2, 10, !dbg !11923
  %tobool2 = icmp ne i32 %and, 0, !dbg !11923
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !11924

if.then3:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !11925
  br label %return, !dbg !11925

if.end4:                                          ; preds = %if.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !11926
  %call5 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %3), !dbg !11928
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !11929
  %cmp = icmp ne %struct.basic_block_def* %call5, %4, !dbg !11930
  br i1 %cmp, label %if.then6, label %if.end7, !dbg !11931

if.then6:                                         ; preds = %if.end4
  store i8 0, i8* %retval, align 1, !dbg !11932
  br label %return, !dbg !11932

if.end7:                                          ; preds = %if.end4
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !11933
  %call8 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %5), !dbg !11935
  %tobool9 = icmp ne i8 %call8, 0, !dbg !11935
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !11936

if.then10:                                        ; preds = %if.end7
  store i8 0, i8* %retval, align 1, !dbg !11937
  br label %return, !dbg !11937

if.end11:                                         ; preds = %if.end7
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !11938
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11940
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !11940
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !11940
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !11940
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 1, !dbg !11940
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !11940
  %cmp12 = icmp eq %struct.basic_block_def* %6, %9, !dbg !11941
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !11942

if.then13:                                        ; preds = %if.end11
  store i8 0, i8* %retval, align 1, !dbg !11943
  br label %return, !dbg !11943

if.end14:                                         ; preds = %if.end11
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !11944
  %call15 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %10), !dbg !11945
  store %union.gimple_statement_d* %call15, %union.gimple_statement_d** %stmt, align 8, !dbg !11946
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11947
  %tobool16 = icmp ne %union.gimple_statement_d* %11, null, !dbg !11947
  br i1 %tobool16, label %land.lhs.true, label %if.end20, !dbg !11949

land.lhs.true:                                    ; preds = %if.end14
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11950
  %call17 = call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %12), !dbg !11951
  %conv = zext i8 %call17 to i32, !dbg !11951
  %tobool18 = icmp ne i32 %conv, 0, !dbg !11951
  br i1 %tobool18, label %if.then19, label %if.end20, !dbg !11952

if.then19:                                        ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !11953
  br label %return, !dbg !11953

if.end20:                                         ; preds = %land.lhs.true, %if.end14
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11954
  %tobool21 = icmp ne %union.gimple_statement_d* %13, null, !dbg !11954
  br i1 %tobool21, label %land.lhs.true22, label %if.end30, !dbg !11956

land.lhs.true22:                                  ; preds = %if.end20
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11957
  %call23 = call i32 @gimple_code(%union.gimple_statement_d* %14), !dbg !11958
  %cmp24 = icmp eq i32 %call23, 4, !dbg !11959
  br i1 %cmp24, label %land.lhs.true26, label %if.end30, !dbg !11960

land.lhs.true26:                                  ; preds = %land.lhs.true22
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11961
  %call27 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %15), !dbg !11961
  %decl_common = bitcast %union.tree_node* %call27 to %struct.tree_decl_common*, !dbg !11961
  %nonlocal_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !11961
  %16 = bitcast i40* %nonlocal_flag to i64*, !dbg !11961
  %bf.load = load i64, i64* %16, align 8, !dbg !11961
  %bf.lshr = lshr i64 %bf.load, 8, !dbg !11961
  %bf.clear = and i64 %bf.lshr, 1, !dbg !11961
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11961
  %tobool28 = icmp ne i32 %bf.cast, 0, !dbg !11961
  br i1 %tobool28, label %if.then29, label %if.end30, !dbg !11962

if.then29:                                        ; preds = %land.lhs.true26
  store i8 0, i8* %retval, align 1, !dbg !11963
  br label %return, !dbg !11963

if.end30:                                         ; preds = %land.lhs.true26, %land.lhs.true22, %if.end20
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !11964
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %17), !dbg !11966
  %18 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !11966
  %19 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !11966
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 24, i1 false), !dbg !11966
  br label %for.cond, !dbg !11967

for.cond:                                         ; preds = %for.inc, %if.end30
  %call31 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !11968
  %tobool32 = icmp ne i8 %call31, 0, !dbg !11970
  %lnot = xor i1 %tobool32, true, !dbg !11970
  br i1 %lnot, label %for.body, label %for.end, !dbg !11971

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %lab, metadata !11972, metadata !DIExpression()), !dbg !11974
  %call33 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !11975
  store %union.gimple_statement_d* %call33, %union.gimple_statement_d** %stmt, align 8, !dbg !11976
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11977
  %call34 = call i32 @gimple_code(%union.gimple_statement_d* %20), !dbg !11979
  %cmp35 = icmp ne i32 %call34, 4, !dbg !11980
  br i1 %cmp35, label %if.then37, label %if.end38, !dbg !11981

if.then37:                                        ; preds = %for.body
  br label %for.end, !dbg !11982

if.end38:                                         ; preds = %for.body
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !11983
  %call39 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %21), !dbg !11984
  store %union.tree_node* %call39, %union.tree_node** %lab, align 8, !dbg !11985
  %22 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !11986
  %decl_common40 = bitcast %union.tree_node* %22 to %struct.tree_decl_common*, !dbg !11986
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common40, i32 0, i32 2, !dbg !11986
  %23 = bitcast i40* %artificial_flag to i64*, !dbg !11986
  %bf.load41 = load i64, i64* %23, align 8, !dbg !11986
  %bf.lshr42 = lshr i64 %bf.load41, 12, !dbg !11986
  %bf.clear43 = and i64 %bf.lshr42, 1, !dbg !11986
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !11986
  %tobool45 = icmp ne i32 %bf.cast44, 0, !dbg !11986
  br i1 %tobool45, label %if.end47, label %if.then46, !dbg !11988

if.then46:                                        ; preds = %if.end38
  store i8 0, i8* %retval, align 1, !dbg !11989
  br label %return, !dbg !11989

if.end47:                                         ; preds = %if.end38
  br label %for.inc, !dbg !11990

for.inc:                                          ; preds = %if.end47
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !11991
  br label %for.cond, !dbg !11992, !llvm.loop !11993

for.end:                                          ; preds = %if.then37, %for.cond
  %24 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11995
  %add.ptr48 = getelementptr inbounds %struct.function, %struct.function* %24, i64 0, !dbg !11995
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr48, i32 0, i32 4, !dbg !11995
  %25 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !11995
  %tobool49 = icmp ne %struct.loops* %25, null, !dbg !11995
  br i1 %tobool49, label %land.lhs.true50, label %if.end54, !dbg !11997

land.lhs.true50:                                  ; preds = %for.end
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !11998
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 3, !dbg !11999
  %27 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !11999
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %27, i32 0, i32 3, !dbg !12000
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !12000
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !12001
  %cmp51 = icmp eq %struct.basic_block_def* %28, %29, !dbg !12002
  br i1 %cmp51, label %if.then53, label %if.end54, !dbg !12003

if.then53:                                        ; preds = %land.lhs.true50
  store i8 0, i8* %retval, align 1, !dbg !12004
  br label %return, !dbg !12004

if.end54:                                         ; preds = %land.lhs.true50, %for.end
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !12005
  %call55 = call %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %30), !dbg !12006
  store %struct.gimple_seq_d* %call55, %struct.gimple_seq_d** %phis, align 8, !dbg !12007
  %31 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %phis, align 8, !dbg !12008
  %call56 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %31), !dbg !12010
  %tobool57 = icmp ne i8 %call56, 0, !dbg !12010
  br i1 %tobool57, label %if.end63, label %land.lhs.true58, !dbg !12011

land.lhs.true58:                                  ; preds = %if.end54
  %call59 = call zeroext i8 @name_mappings_registered_p(), !dbg !12012
  %conv60 = zext i8 %call59 to i32, !dbg !12012
  %tobool61 = icmp ne i32 %conv60, 0, !dbg !12012
  br i1 %tobool61, label %if.then62, label %if.end63, !dbg !12013

if.then62:                                        ; preds = %land.lhs.true58
  store i8 0, i8* %retval, align 1, !dbg !12014
  br label %return, !dbg !12014

if.end63:                                         ; preds = %land.lhs.true58, %if.end54
  store i8 1, i8* %retval, align 1, !dbg !12015
  br label %return, !dbg !12015

return:                                           ; preds = %if.end63, %if.then62, %if.then53, %if.then46, %if.then29, %if.then19, %if.then13, %if.then10, %if.then6, %if.then3, %if.then
  %32 = load i8, i8* %retval, align 1, !dbg !12016
  ret i8 %32, !dbg !12016
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_merge_blocks(%struct.basic_block_def* %a, %struct.basic_block_def* %b) #0 !dbg !12017 {
entry:
  %a.addr = alloca %struct.basic_block_def*, align 8
  %b.addr = alloca %struct.basic_block_def*, align 8
  %last = alloca %struct.gimple_stmt_iterator, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %psi = alloca %struct.gimple_stmt_iterator, align 8
  %phis = alloca %struct.gimple_seq_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp3 = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %def = alloca %union.tree_node*, align 8
  %use = alloca %union.tree_node*, align 8
  %copy = alloca %union.gimple_statement_d*, align 8
  %may_replace_uses = alloca i8, align 1
  %iter = alloca %struct.immediate_use_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %tmp84 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt90 = alloca %union.gimple_statement_d*, align 8
  %label = alloca %union.tree_node*, align 8
  %lp_nr = alloca i32, align 4
  %dest_gsi = alloca %struct.gimple_stmt_iterator, align 8
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %tmp112 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.basic_block_def* %a, %struct.basic_block_def** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %a.addr, metadata !12018, metadata !DIExpression()), !dbg !12019
  store %struct.basic_block_def* %b, %struct.basic_block_def** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b.addr, metadata !12020, metadata !DIExpression()), !dbg !12021
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %last, metadata !12022, metadata !DIExpression()), !dbg !12023
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !12024, metadata !DIExpression()), !dbg !12025
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi, metadata !12026, metadata !DIExpression()), !dbg !12027
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %phis, metadata !12028, metadata !DIExpression()), !dbg !12029
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !12030
  %call = call %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %0), !dbg !12031
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %phis, align 8, !dbg !12029
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !12032
  %tobool = icmp ne %struct._IO_FILE* %1, null, !dbg !12032
  br i1 %tobool, label %if.then, label %if.end, !dbg !12034

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !12035
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !12036
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 9, !dbg !12037
  %4 = load i32, i32* %index, align 8, !dbg !12037
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !12038
  %index1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 9, !dbg !12039
  %6 = load i32, i32* %index1, align 8, !dbg !12039
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.178, i64 0, i64 0), i32 %4, i32 %6), !dbg !12040
  br label %if.end, !dbg !12040

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !12041
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %7), !dbg !12042
  %8 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !12042
  %9 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !12042
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false), !dbg !12042
  %10 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %phis, align 8, !dbg !12043
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp3, %struct.gimple_seq_d* %10), !dbg !12045
  %11 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !12045
  %12 = bitcast %struct.gimple_stmt_iterator* %tmp3 to i8*, !dbg !12045
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 24, i1 false), !dbg !12045
  br label %for.cond, !dbg !12046

for.cond:                                         ; preds = %if.end66, %if.end
  %call4 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !12047
  %tobool5 = icmp ne i8 %call4, 0, !dbg !12049
  %lnot = xor i1 %tobool5, true, !dbg !12049
  br i1 %lnot, label %for.body, label %for.end67, !dbg !12050

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !12051, metadata !DIExpression()), !dbg !12053
  %call6 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !12054
  store %union.gimple_statement_d* %call6, %union.gimple_statement_d** %phi, align 8, !dbg !12053
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !12055, metadata !DIExpression()), !dbg !12056
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !12057
  %call7 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %13), !dbg !12058
  store %union.tree_node* %call7, %union.tree_node** %def, align 8, !dbg !12056
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !12059, metadata !DIExpression()), !dbg !12060
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !12061
  %call8 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %14, i64 0), !dbg !12062
  store %union.tree_node* %call8, %union.tree_node** %use, align 8, !dbg !12060
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %copy, metadata !12063, metadata !DIExpression()), !dbg !12064
  call void @llvm.dbg.declare(metadata i8* %may_replace_uses, metadata !12065, metadata !DIExpression()), !dbg !12066
  %15 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !12067
  %call9 = call zeroext i8 @is_gimple_reg(%union.tree_node* %15), !dbg !12068
  %tobool10 = icmp ne i8 %call9, 0, !dbg !12068
  br i1 %tobool10, label %lor.rhs, label %lor.end, !dbg !12069

lor.rhs:                                          ; preds = %for.body
  %16 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !12070
  %17 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !12071
  %call11 = call zeroext i8 @may_propagate_copy(%union.tree_node* %16, %union.tree_node* %17), !dbg !12072
  %conv = zext i8 %call11 to i32, !dbg !12072
  %tobool12 = icmp ne i32 %conv, 0, !dbg !12069
  br label %lor.end, !dbg !12069

lor.end:                                          ; preds = %lor.rhs, %for.body
  %18 = phi i1 [ true, %for.body ], [ %tobool12, %lor.rhs ]
  %lor.ext = zext i1 %18 to i32, !dbg !12069
  %conv13 = trunc i32 %lor.ext to i8, !dbg !12073
  store i8 %conv13, i8* %may_replace_uses, align 1, !dbg !12066
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12074
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !12074
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !12074
  %20 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !12074
  %tobool14 = icmp ne %struct.loops* %20, null, !dbg !12074
  br i1 %tobool14, label %land.lhs.true, label %if.end29, !dbg !12076

land.lhs.true:                                    ; preds = %lor.end
  %call15 = call zeroext i8 @loops_state_satisfies_p(i32 32), !dbg !12077
  %conv16 = zext i8 %call15 to i32, !dbg !12077
  %tobool17 = icmp ne i32 %conv16, 0, !dbg !12077
  br i1 %tobool17, label %land.lhs.true18, label %if.end29, !dbg !12078

land.lhs.true18:                                  ; preds = %land.lhs.true
  %21 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !12079
  %call19 = call zeroext i8 @is_gimple_reg(%union.tree_node* %21), !dbg !12080
  %conv20 = zext i8 %call19 to i32, !dbg !12080
  %tobool21 = icmp ne i32 %conv20, 0, !dbg !12080
  br i1 %tobool21, label %land.lhs.true22, label %if.end29, !dbg !12081

land.lhs.true22:                                  ; preds = %land.lhs.true18
  %22 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !12082
  %base = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !12082
  %23 = bitcast %struct.tree_base* %base to i64*, !dbg !12082
  %bf.load = load i64, i64* %23, align 8, !dbg !12082
  %bf.clear = and i64 %bf.load, 65535, !dbg !12082
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12082
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !12083
  br i1 %cmp, label %land.lhs.true24, label %if.end29, !dbg !12084

land.lhs.true24:                                  ; preds = %land.lhs.true22
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !12085
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 3, !dbg !12086
  %25 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !12086
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !12087
  %loop_father25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 3, !dbg !12088
  %27 = load %struct.loop*, %struct.loop** %loop_father25, align 8, !dbg !12088
  %cmp26 = icmp ne %struct.loop* %25, %27, !dbg !12089
  br i1 %cmp26, label %if.then28, label %if.end29, !dbg !12090

if.then28:                                        ; preds = %land.lhs.true24
  store i8 0, i8* %may_replace_uses, align 1, !dbg !12091
  br label %if.end29, !dbg !12092

if.end29:                                         ; preds = %if.then28, %land.lhs.true24, %land.lhs.true22, %land.lhs.true18, %land.lhs.true, %lor.end
  %28 = load i8, i8* %may_replace_uses, align 1, !dbg !12093
  %tobool30 = icmp ne i8 %28, 0, !dbg !12093
  br i1 %tobool30, label %if.else, label %if.then31, !dbg !12095

if.then31:                                        ; preds = %if.end29
  %29 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !12096
  %call32 = call zeroext i8 @is_gimple_reg(%union.tree_node* %29), !dbg !12096
  %tobool33 = icmp ne i8 %call32, 0, !dbg !12096
  br i1 %tobool33, label %cond.false, label %cond.true, !dbg !12096

cond.true:                                        ; preds = %if.then31
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1596, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !12096
  br label %cond.end, !dbg !12096

cond.false:                                       ; preds = %if.then31
  br label %cond.end, !dbg !12096

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12096
  %30 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !12098
  %31 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !12098
  %call34 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %30, %union.tree_node* %31), !dbg !12098
  store %union.gimple_statement_d* %call34, %union.gimple_statement_d** %copy, align 8, !dbg !12099
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !12100
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %32, i32 0), !dbg !12101
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %psi, i8 zeroext 0), !dbg !12102
  br label %if.end66, !dbg !12103

if.else:                                          ; preds = %if.end29
  %33 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !12104
  %call35 = call zeroext i8 @is_gimple_reg(%union.tree_node* %33), !dbg !12107
  %tobool36 = icmp ne i8 %call35, 0, !dbg !12107
  br i1 %tobool36, label %if.else64, label %if.then37, !dbg !12108

if.then37:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %iter, metadata !12109, metadata !DIExpression()), !dbg !12111
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !12112, metadata !DIExpression()), !dbg !12113
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !12114, metadata !DIExpression()), !dbg !12115
  %34 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !12116
  %call38 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %iter, %union.tree_node* %34), !dbg !12116
  store %union.gimple_statement_d* %call38, %union.gimple_statement_d** %stmt, align 8, !dbg !12116
  br label %for.cond39, !dbg !12116

for.cond39:                                       ; preds = %for.inc51, %if.then37
  %call40 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %iter), !dbg !12118
  %tobool41 = icmp ne i8 %call40, 0, !dbg !12118
  %lnot42 = xor i1 %tobool41, true, !dbg !12118
  br i1 %lnot42, label %for.body43, label %for.end53, !dbg !12116

for.body43:                                       ; preds = %for.cond39
  %call44 = call %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !12120
  store %struct.ssa_use_operand_d* %call44, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !12120
  br label %for.cond45, !dbg !12120

for.cond45:                                       ; preds = %for.inc, %for.body43
  %call46 = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %iter), !dbg !12122
  %tobool47 = icmp ne i8 %call46, 0, !dbg !12122
  %lnot48 = xor i1 %tobool47, true, !dbg !12122
  br i1 %lnot48, label %for.body49, label %for.end, !dbg !12120

for.body49:                                       ; preds = %for.cond45
  %35 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !12124
  %36 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !12124
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %35, %union.tree_node* %36), !dbg !12124
  br label %for.inc, !dbg !12124

for.inc:                                          ; preds = %for.body49
  %call50 = call %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !12122
  store %struct.ssa_use_operand_d* %call50, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !12122
  br label %for.cond45, !dbg !12122, !llvm.loop !12125

for.end:                                          ; preds = %for.cond45
  br label %for.inc51, !dbg !12126

for.inc51:                                        ; preds = %for.end
  %call52 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !12118
  store %union.gimple_statement_d* %call52, %union.gimple_statement_d** %stmt, align 8, !dbg !12118
  br label %for.cond39, !dbg !12118, !llvm.loop !12127

for.end53:                                        ; preds = %for.cond39
  %37 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !12129
  %base54 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !12129
  %38 = bitcast %struct.tree_base* %base54 to i64*, !dbg !12129
  %bf.load55 = load i64, i64* %38, align 8, !dbg !12129
  %bf.lshr = lshr i64 %bf.load55, 22, !dbg !12129
  %bf.clear56 = and i64 %bf.lshr, 1, !dbg !12129
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !12129
  %tobool58 = icmp ne i32 %bf.cast57, 0, !dbg !12129
  br i1 %tobool58, label %if.then59, label %if.end63, !dbg !12131

if.then59:                                        ; preds = %for.end53
  %39 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !12132
  %base60 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !12132
  %40 = bitcast %struct.tree_base* %base60 to i64*, !dbg !12132
  %bf.load61 = load i64, i64* %40, align 8, !dbg !12133
  %bf.clear62 = and i64 %bf.load61, -4194305, !dbg !12133
  %bf.set = or i64 %bf.clear62, 4194304, !dbg !12133
  store i64 %bf.set, i64* %40, align 8, !dbg !12133
  br label %if.end63, !dbg !12132

if.end63:                                         ; preds = %if.then59, %for.end53
  br label %if.end65, !dbg !12134

if.else64:                                        ; preds = %if.else
  %41 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !12135
  %42 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !12136
  call void @replace_uses_by(%union.tree_node* %41, %union.tree_node* %42), !dbg !12137
  br label %if.end65

if.end65:                                         ; preds = %if.else64, %if.end63
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %psi, i8 zeroext 1), !dbg !12138
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %cond.end
  br label %for.cond, !dbg !12139, !llvm.loop !12140

for.end67:                                        ; preds = %for.cond
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !12142
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !12143
  %call68 = call zeroext i8 @move_block_after(%struct.basic_block_def* %43, %struct.basic_block_def* %44), !dbg !12144
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !12145
  %call69 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %45), !dbg !12145
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call69, i32 0, i32 7, !dbg !12145
  %46 = load i32, i32* %flags, align 8, !dbg !12145
  %and = and i32 %46, 1, !dbg !12145
  %tobool70 = icmp ne i32 %and, 0, !dbg !12145
  br i1 %tobool70, label %cond.false72, label %cond.true71, !dbg !12145

cond.true71:                                      ; preds = %for.end67
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1634, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !12145
  br label %cond.end73, !dbg !12145

cond.false72:                                     ; preds = %for.end67
  br label %cond.end73, !dbg !12145

cond.end73:                                       ; preds = %cond.false72, %cond.true71
  %cond74 = phi i32 [ 0, %cond.true71 ], [ 0, %cond.false72 ], !dbg !12145
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !12146
  %call75 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %47), !dbg !12146
  %tobool76 = icmp ne %union.gimple_statement_d* %call75, null, !dbg !12146
  br i1 %tobool76, label %lor.lhs.false, label %cond.false81, !dbg !12146

lor.lhs.false:                                    ; preds = %cond.end73
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !12146
  %call77 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %48), !dbg !12146
  %call78 = call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %call77), !dbg !12146
  %tobool79 = icmp ne i8 %call78, 0, !dbg !12146
  br i1 %tobool79, label %cond.true80, label %cond.false81, !dbg !12146

cond.true80:                                      ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1635, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !12146
  br label %cond.end82, !dbg !12146

cond.false81:                                     ; preds = %lor.lhs.false, %cond.end73
  br label %cond.end82, !dbg !12146

cond.end82:                                       ; preds = %cond.false81, %cond.true80
  %cond83 = phi i32 [ 0, %cond.true80 ], [ 0, %cond.false81 ], !dbg !12146
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !12147
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp84, %struct.basic_block_def* %49), !dbg !12149
  %50 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !12149
  %51 = bitcast %struct.gimple_stmt_iterator* %tmp84 to i8*, !dbg !12149
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 24, i1 false), !dbg !12149
  br label %for.cond85, !dbg !12150

for.cond85:                                       ; preds = %if.end110, %cond.end82
  %call86 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12151
  %tobool87 = icmp ne i8 %call86, 0, !dbg !12153
  %lnot88 = xor i1 %tobool87, true, !dbg !12153
  br i1 %lnot88, label %for.body89, label %for.end111, !dbg !12154

for.body89:                                       ; preds = %for.cond85
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt90, metadata !12155, metadata !DIExpression()), !dbg !12157
  %call91 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12158
  store %union.gimple_statement_d* %call91, %union.gimple_statement_d** %stmt90, align 8, !dbg !12157
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt90, align 8, !dbg !12159
  %call92 = call i32 @gimple_code(%union.gimple_statement_d* %52), !dbg !12161
  %cmp93 = icmp eq i32 %call92, 4, !dbg !12162
  br i1 %cmp93, label %if.then95, label %if.else109, !dbg !12163

if.then95:                                        ; preds = %for.body89
  call void @llvm.dbg.declare(metadata %union.tree_node** %label, metadata !12164, metadata !DIExpression()), !dbg !12166
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt90, align 8, !dbg !12167
  %call96 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %53), !dbg !12168
  store %union.tree_node* %call96, %union.tree_node** %label, align 8, !dbg !12166
  call void @llvm.dbg.declare(metadata i32* %lp_nr, metadata !12169, metadata !DIExpression()), !dbg !12170
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 0), !dbg !12171
  %54 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !12172
  %base97 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !12172
  %55 = bitcast %struct.tree_base* %base97 to i64*, !dbg !12172
  %bf.load98 = load i64, i64* %55, align 8, !dbg !12172
  %bf.lshr99 = lshr i64 %bf.load98, 16, !dbg !12172
  %bf.clear100 = and i64 %bf.lshr99, 1, !dbg !12172
  %bf.cast101 = trunc i64 %bf.clear100 to i32, !dbg !12172
  %tobool102 = icmp ne i32 %bf.cast101, 0, !dbg !12172
  br i1 %tobool102, label %if.then103, label %if.end104, !dbg !12174

if.then103:                                       ; preds = %if.then95
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %dest_gsi, metadata !12175, metadata !DIExpression()), !dbg !12177
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !12178
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %dest_gsi, %struct.basic_block_def* %56), !dbg !12179
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt90, align 8, !dbg !12180
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %dest_gsi, %union.gimple_statement_d* %57, i32 0), !dbg !12181
  br label %if.end104, !dbg !12182

if.end104:                                        ; preds = %if.then103, %if.then95
  %58 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !12183
  %label_decl = bitcast %union.tree_node* %58 to %struct.tree_label_decl*, !dbg !12183
  %eh_landing_pad_nr = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl, i32 0, i32 2, !dbg !12183
  %59 = load i32, i32* %eh_landing_pad_nr, align 4, !dbg !12183
  store i32 %59, i32* %lp_nr, align 4, !dbg !12184
  %60 = load i32, i32* %lp_nr, align 4, !dbg !12185
  %tobool105 = icmp ne i32 %60, 0, !dbg !12185
  br i1 %tobool105, label %if.then106, label %if.end108, !dbg !12187

if.then106:                                       ; preds = %if.end104
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !12188, metadata !DIExpression()), !dbg !12190
  %61 = load i32, i32* %lp_nr, align 4, !dbg !12191
  %call107 = call %struct.eh_landing_pad_d* @get_eh_landing_pad_from_number(i32 %61), !dbg !12192
  store %struct.eh_landing_pad_d* %call107, %struct.eh_landing_pad_d** %lp, align 8, !dbg !12190
  %62 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !12193
  %post_landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %62, i32 0, i32 2, !dbg !12194
  store %union.tree_node* null, %union.tree_node** %post_landing_pad, align 8, !dbg !12195
  br label %if.end108, !dbg !12196

if.end108:                                        ; preds = %if.then106, %if.end104
  br label %if.end110, !dbg !12197

if.else109:                                       ; preds = %for.body89
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt90, align 8, !dbg !12198
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !12200
  call void @gimple_set_bb(%union.gimple_statement_d* %63, %struct.basic_block_def* %64), !dbg !12201
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !12202
  br label %if.end110

if.end110:                                        ; preds = %if.else109, %if.end108
  br label %for.cond85, !dbg !12203, !llvm.loop !12204

for.end111:                                       ; preds = %for.cond85
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !12206
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp112, %struct.basic_block_def* %65), !dbg !12207
  %66 = bitcast %struct.gimple_stmt_iterator* %last to i8*, !dbg !12207
  %67 = bitcast %struct.gimple_stmt_iterator* %tmp112 to i8*, !dbg !12207
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 24, i1 false), !dbg !12207
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !12208
  %call113 = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %68), !dbg !12209
  call void @gsi_insert_seq_after(%struct.gimple_stmt_iterator* %last, %struct.gimple_seq_d* %call113, i32 0), !dbg !12210
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !12211
  call void @set_bb_seq(%struct.basic_block_def* %69, %struct.gimple_seq_d* null), !dbg !12212
  %70 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @cfgcleanup_altered_bbs, align 8, !dbg !12213
  %tobool114 = icmp ne %struct.bitmap_head_def* %70, null, !dbg !12213
  br i1 %tobool114, label %if.then115, label %if.end118, !dbg !12215

if.then115:                                       ; preds = %for.end111
  %71 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @cfgcleanup_altered_bbs, align 8, !dbg !12216
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !12217
  %index116 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %72, i32 0, i32 9, !dbg !12218
  %73 = load i32, i32* %index116, align 8, !dbg !12218
  %call117 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %71, i32 %73), !dbg !12219
  br label %if.end118, !dbg !12219

if.end118:                                        ; preds = %if.then115, %for.end111
  ret void, !dbg !12220
}

declare dso_local void @gimple_predict_edge(%struct.edge_def*, i32, i32) #2

declare dso_local zeroext i8 @gimple_predicted_by_p(%struct.basic_block_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_can_duplicate_bb_p(%struct.basic_block_def* %bb) #0 !dbg !12221 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !12222, metadata !DIExpression()), !dbg !12223
  ret i8 1, !dbg !12224
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_duplicate_bb(%struct.basic_block_def* %bb) #0 !dbg !12225 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %gsi_tgt = alloca %struct.gimple_stmt_iterator, align 8
  %phis = alloca %struct.gimple_seq_d*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %copy = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp9 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp10 = alloca %struct.gimple_stmt_iterator, align 8
  %def_p = alloca %union.tree_node**, align 8
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !12226, metadata !DIExpression()), !dbg !12227
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !12228, metadata !DIExpression()), !dbg !12229
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !12230, metadata !DIExpression()), !dbg !12231
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi_tgt, metadata !12232, metadata !DIExpression()), !dbg !12233
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %phis, metadata !12234, metadata !DIExpression()), !dbg !12235
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12236
  %call = call %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %0), !dbg !12237
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %phis, align 8, !dbg !12235
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !12238, metadata !DIExpression()), !dbg !12239
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !12240, metadata !DIExpression()), !dbg !12241
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %copy, metadata !12242, metadata !DIExpression()), !dbg !12243
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12244
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !12244
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !12244
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !12244
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 1, !dbg !12244
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !12244
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 5, !dbg !12245
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !12245
  %call1 = call %struct.basic_block_def* @create_empty_bb(%struct.basic_block_def* %4), !dbg !12246
  store %struct.basic_block_def* %call1, %struct.basic_block_def** %new_bb, align 8, !dbg !12247
  %5 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %phis, align 8, !dbg !12248
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %5), !dbg !12250
  %6 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !12250
  %7 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !12250
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 24, i1 false), !dbg !12250
  br label %for.cond, !dbg !12251

for.cond:                                         ; preds = %for.inc, %entry
  %call2 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12252
  %tobool = icmp ne i8 %call2, 0, !dbg !12254
  %lnot = xor i1 %tobool, true, !dbg !12254
  br i1 %lnot, label %for.body, label %for.end, !dbg !12255

for.body:                                         ; preds = %for.cond
  %call3 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12256
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %phi, align 8, !dbg !12258
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !12259
  %call4 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %8), !dbg !12260
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !12261
  %call5 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %call4, %struct.basic_block_def* %9), !dbg !12262
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %copy, align 8, !dbg !12263
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !12264
  %call6 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %10), !dbg !12265
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !12266
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !12267
  %call7 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %12), !dbg !12268
  %call8 = call %union.tree_node* @create_new_def_for(%union.tree_node* %call6, %union.gimple_statement_d* %11, %union.tree_node** %call7), !dbg !12269
  br label %for.inc, !dbg !12270

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !12271
  br label %for.cond, !dbg !12272, !llvm.loop !12273

for.end:                                          ; preds = %for.cond
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !12275
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp9, %struct.basic_block_def* %13), !dbg !12276
  %14 = bitcast %struct.gimple_stmt_iterator* %gsi_tgt to i8*, !dbg !12276
  %15 = bitcast %struct.gimple_stmt_iterator* %tmp9 to i8*, !dbg !12276
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false), !dbg !12276
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12277
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp10, %struct.basic_block_def* %16), !dbg !12279
  %17 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !12279
  %18 = bitcast %struct.gimple_stmt_iterator* %tmp10 to i8*, !dbg !12279
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 24, i1 false), !dbg !12279
  br label %for.cond11, !dbg !12280

for.cond11:                                       ; preds = %for.inc33, %for.end
  %call12 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12281
  %tobool13 = icmp ne i8 %call12, 0, !dbg !12283
  %lnot14 = xor i1 %tobool13, true, !dbg !12283
  br i1 %lnot14, label %for.body15, label %for.end34, !dbg !12284

for.body15:                                       ; preds = %for.cond11
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def_p, metadata !12285, metadata !DIExpression()), !dbg !12287
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !12288, metadata !DIExpression()), !dbg !12289
  %call16 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12290
  store %union.gimple_statement_d* %call16, %union.gimple_statement_d** %stmt, align 8, !dbg !12291
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12292
  %call17 = call i32 @gimple_code(%union.gimple_statement_d* %19), !dbg !12294
  %cmp = icmp eq i32 %call17, 4, !dbg !12295
  br i1 %cmp, label %if.then, label %if.end, !dbg !12296

if.then:                                          ; preds = %for.body15
  br label %for.inc33, !dbg !12297

if.end:                                           ; preds = %for.body15
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12298
  %call18 = call %union.gimple_statement_d* @gimple_copy(%union.gimple_statement_d* %20), !dbg !12299
  store %union.gimple_statement_d* %call18, %union.gimple_statement_d** %copy, align 8, !dbg !12300
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !12301
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi_tgt, %union.gimple_statement_d* %21, i32 0), !dbg !12302
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !12303
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12304
  %call19 = call zeroext i8 @maybe_duplicate_eh_stmt(%union.gimple_statement_d* %22, %union.gimple_statement_d* %23), !dbg !12305
  %24 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12306
  %add.ptr20 = getelementptr inbounds %struct.function, %struct.function* %24, i64 0, !dbg !12306
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !12307
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12308
  %add.ptr21 = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !12308
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12309
  call void @gimple_duplicate_stmt_histograms(%struct.function* %add.ptr20, %union.gimple_statement_d* %25, %struct.function* %add.ptr21, %union.gimple_statement_d* %27), !dbg !12310
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !12311
  %call22 = call %union.tree_node** @op_iter_init_def(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %28, i32 10), !dbg !12311
  store %union.tree_node** %call22, %union.tree_node*** %def_p, align 8, !dbg !12311
  br label %for.cond23, !dbg !12311

for.cond23:                                       ; preds = %for.inc30, %if.end
  %call24 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !12313
  %tobool25 = icmp ne i8 %call24, 0, !dbg !12313
  %lnot26 = xor i1 %tobool25, true, !dbg !12313
  br i1 %lnot26, label %for.body27, label %for.end32, !dbg !12311

for.body27:                                       ; preds = %for.cond23
  %29 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !12315
  %call28 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %29), !dbg !12315
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %copy, align 8, !dbg !12316
  %31 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !12317
  %call29 = call %union.tree_node* @create_new_def_for(%union.tree_node* %call28, %union.gimple_statement_d* %30, %union.tree_node** %31), !dbg !12318
  br label %for.inc30, !dbg !12318

for.inc30:                                        ; preds = %for.body27
  %call31 = call %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %op_iter), !dbg !12313
  store %union.tree_node** %call31, %union.tree_node*** %def_p, align 8, !dbg !12313
  br label %for.cond23, !dbg !12313, !llvm.loop !12319

for.end32:                                        ; preds = %for.cond23
  br label %for.inc33, !dbg !12321

for.inc33:                                        ; preds = %for.end32, %if.then
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !12322
  br label %for.cond11, !dbg !12323, !llvm.loop !12324

for.end34:                                        ; preds = %for.cond11
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !12326
  ret %struct.basic_block_def* %32, !dbg !12327
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_split_edge(%struct.edge_def* %edge_in) #0 !dbg !12328 {
entry:
  %edge_in.addr = alloca %struct.edge_def*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %after_bb = alloca %struct.basic_block_def*, align 8
  %dest = alloca %struct.basic_block_def*, align 8
  %new_edge = alloca %struct.edge_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  store %struct.edge_def* %edge_in, %struct.edge_def** %edge_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %edge_in.addr, metadata !12329, metadata !DIExpression()), !dbg !12330
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !12331, metadata !DIExpression()), !dbg !12332
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %after_bb, metadata !12333, metadata !DIExpression()), !dbg !12334
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest, metadata !12335, metadata !DIExpression()), !dbg !12336
  call void @llvm.dbg.declare(metadata %struct.edge_def** %new_edge, metadata !12337, metadata !DIExpression()), !dbg !12338
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !12339, metadata !DIExpression()), !dbg !12340
  %0 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !12341
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 7, !dbg !12341
  %1 = load i32, i32* %flags, align 8, !dbg !12341
  %and = and i32 %1, 2, !dbg !12341
  %tobool = icmp ne i32 %and, 0, !dbg !12341
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12341

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 2468, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !12341
  br label %cond.end, !dbg !12341

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12341

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12341
  %2 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !12342
  %dest1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 1, !dbg !12343
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %dest1, align 8, !dbg !12343
  store %struct.basic_block_def* %3, %struct.basic_block_def** %dest, align 8, !dbg !12344
  %4 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !12345
  %call = call %struct.basic_block_def* @split_edge_bb_loc(%struct.edge_def* %4), !dbg !12346
  store %struct.basic_block_def* %call, %struct.basic_block_def** %after_bb, align 8, !dbg !12347
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %after_bb, align 8, !dbg !12348
  %call2 = call %struct.basic_block_def* @create_empty_bb(%struct.basic_block_def* %5), !dbg !12349
  store %struct.basic_block_def* %call2, %struct.basic_block_def** %new_bb, align 8, !dbg !12350
  %6 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !12351
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %6, i32 0, i32 0, !dbg !12351
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !12351
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 11, !dbg !12351
  %8 = load i32, i32* %frequency, align 8, !dbg !12351
  %9 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !12351
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %9, i32 0, i32 8, !dbg !12351
  %10 = load i32, i32* %probability, align 4, !dbg !12351
  %mul = mul nsw i32 %8, %10, !dbg !12351
  %add = add nsw i32 %mul, 5000, !dbg !12351
  %div = sdiv i32 %add, 10000, !dbg !12351
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !12352
  %frequency3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 11, !dbg !12353
  store i32 %div, i32* %frequency3, align 8, !dbg !12354
  %12 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !12355
  %count = getelementptr inbounds %struct.edge_def, %struct.edge_def* %12, i32 0, i32 9, !dbg !12356
  %13 = load i64, i64* %count, align 8, !dbg !12356
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !12357
  %count4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 8, !dbg !12358
  store i64 %13, i64* %count4, align 8, !dbg !12359
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !12360
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !12361
  %call5 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %15, %struct.basic_block_def* %16, i32 1), !dbg !12362
  store %struct.edge_def* %call5, %struct.edge_def** %new_edge, align 8, !dbg !12363
  %17 = load %struct.edge_def*, %struct.edge_def** %new_edge, align 8, !dbg !12364
  %probability6 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %17, i32 0, i32 8, !dbg !12365
  store i32 10000, i32* %probability6, align 4, !dbg !12366
  %18 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !12367
  %count7 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %18, i32 0, i32 9, !dbg !12368
  %19 = load i64, i64* %count7, align 8, !dbg !12368
  %20 = load %struct.edge_def*, %struct.edge_def** %new_edge, align 8, !dbg !12369
  %count8 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i32 0, i32 9, !dbg !12370
  store i64 %19, i64* %count8, align 8, !dbg !12371
  %21 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !12372
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !12373
  %call9 = call %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def* %21, %struct.basic_block_def* %22), !dbg !12374
  store %struct.edge_def* %call9, %struct.edge_def** %e, align 8, !dbg !12375
  %23 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12376
  %24 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !12376
  %cmp = icmp eq %struct.edge_def* %23, %24, !dbg !12376
  br i1 %cmp, label %cond.false11, label %cond.true10, !dbg !12376

cond.true10:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 2482, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !12376
  br label %cond.end12, !dbg !12376

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !12376

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi i32 [ 0, %cond.true10 ], [ 0, %cond.false11 ], !dbg !12376
  %25 = load %struct.edge_def*, %struct.edge_def** %new_edge, align 8, !dbg !12377
  %26 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12378
  call void @reinstall_phi_args(%struct.edge_def* %25, %struct.edge_def* %26), !dbg !12379
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !12380
  ret %struct.basic_block_def* %27, !dbg !12381
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_make_forwarder_block(%struct.edge_def* %fallthru) #0 !dbg !12382 {
entry:
  %fallthru.addr = alloca %struct.edge_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %dummy = alloca %struct.basic_block_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %var = alloca %union.tree_node*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %new_phi = alloca %union.gimple_statement_d*, align 8
  %tmp10 = alloca %struct.edge_iterator, align 8
  store %struct.edge_def* %fallthru, %struct.edge_def** %fallthru.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %fallthru.addr, metadata !12383, metadata !DIExpression()), !dbg !12384
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !12385, metadata !DIExpression()), !dbg !12386
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !12387, metadata !DIExpression()), !dbg !12388
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dummy, metadata !12389, metadata !DIExpression()), !dbg !12390
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !12391, metadata !DIExpression()), !dbg !12392
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !12393, metadata !DIExpression()), !dbg !12394
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !12395, metadata !DIExpression()), !dbg !12396
  %0 = load %struct.edge_def*, %struct.edge_def** %fallthru.addr, align 8, !dbg !12397
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !12398
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !12398
  store %struct.basic_block_def* %1, %struct.basic_block_def** %dummy, align 8, !dbg !12399
  %2 = load %struct.edge_def*, %struct.edge_def** %fallthru.addr, align 8, !dbg !12400
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 1, !dbg !12401
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !12401
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !12402
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12403
  %call = call zeroext i8 @single_pred_p(%struct.basic_block_def* %4), !dbg !12405
  %tobool = icmp ne i8 %call, 0, !dbg !12405
  br i1 %tobool, label %if.then, label %if.end, !dbg !12406

if.then:                                          ; preds = %entry
  br label %for.end19, !dbg !12407

if.end:                                           ; preds = %entry
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %dummy, align 8, !dbg !12408
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %5), !dbg !12410
  %6 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !12410
  %7 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !12410
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 24, i1 false), !dbg !12410
  br label %for.cond, !dbg !12411

for.cond:                                         ; preds = %for.inc, %if.end
  %call1 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12412
  %tobool2 = icmp ne i8 %call1, 0, !dbg !12414
  %lnot = xor i1 %tobool2, true, !dbg !12414
  br i1 %lnot, label %for.body, label %for.end, !dbg !12415

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !12416, metadata !DIExpression()), !dbg !12418
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_phi, metadata !12419, metadata !DIExpression()), !dbg !12420
  %call3 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12421
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %phi, align 8, !dbg !12422
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !12423
  %call4 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %8), !dbg !12424
  store %union.tree_node* %call4, %union.tree_node** %var, align 8, !dbg !12425
  %9 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !12426
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12427
  %call5 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %9, %struct.basic_block_def* %10), !dbg !12428
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %new_phi, align 8, !dbg !12429
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !12430
  %12 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !12431
  %ssa_name = bitcast %union.tree_node* %12 to %struct.tree_ssa_name*, !dbg !12431
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !12431
  store %union.gimple_statement_d* %11, %union.gimple_statement_d** %def_stmt, align 8, !dbg !12432
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !12433
  %14 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !12434
  %ssa_name6 = bitcast %union.tree_node* %14 to %struct.tree_ssa_name*, !dbg !12434
  %var7 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name6, i32 0, i32 1, !dbg !12434
  %15 = load %union.tree_node*, %union.tree_node** %var7, align 8, !dbg !12434
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !12435
  %call8 = call %union.tree_node* @make_ssa_name(%union.tree_node* %15, %union.gimple_statement_d* %16), !dbg !12436
  call void @gimple_phi_set_result(%union.gimple_statement_d* %13, %union.tree_node* %call8), !dbg !12437
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !12438
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !12439
  %call9 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %18), !dbg !12440
  %19 = load %struct.edge_def*, %struct.edge_def** %fallthru.addr, align 8, !dbg !12441
  call void @add_phi_arg(%union.gimple_statement_d* %17, %union.tree_node* %call9, %struct.edge_def* %19, i32 0), !dbg !12442
  br label %for.inc, !dbg !12443

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !12444
  br label %for.cond, !dbg !12445, !llvm.loop !12446

for.end:                                          ; preds = %for.cond
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12448
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 0, !dbg !12448
  %call11 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !12448
  %21 = bitcast %struct.edge_iterator* %tmp10 to { i32, %struct.VEC_edge_gc** }*, !dbg !12448
  %22 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %21, i32 0, i32 0, !dbg !12448
  %23 = extractvalue { i32, %struct.VEC_edge_gc** } %call11, 0, !dbg !12448
  store i32 %23, i32* %22, align 8, !dbg !12448
  %24 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %21, i32 0, i32 1, !dbg !12448
  %25 = extractvalue { i32, %struct.VEC_edge_gc** } %call11, 1, !dbg !12448
  store %struct.VEC_edge_gc** %25, %struct.VEC_edge_gc*** %24, align 8, !dbg !12448
  %26 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !12448
  %27 = bitcast %struct.edge_iterator* %tmp10 to i8*, !dbg !12448
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 16, i1 false), !dbg !12448
  br label %for.cond12, !dbg !12448

for.cond12:                                       ; preds = %for.inc18, %for.end
  %28 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !12450
  %29 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %28, i32 0, i32 0, !dbg !12450
  %30 = load i32, i32* %29, align 8, !dbg !12450
  %31 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %28, i32 0, i32 1, !dbg !12450
  %32 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %31, align 8, !dbg !12450
  %call13 = call zeroext i8 @ei_cond(i32 %30, %struct.VEC_edge_gc** %32, %struct.edge_def** %e), !dbg !12450
  %tobool14 = icmp ne i8 %call13, 0, !dbg !12448
  br i1 %tobool14, label %for.body15, label %for.end19, !dbg !12448

for.body15:                                       ; preds = %for.cond12
  %33 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12452
  %34 = load %struct.edge_def*, %struct.edge_def** %fallthru.addr, align 8, !dbg !12455
  %cmp = icmp eq %struct.edge_def* %33, %34, !dbg !12456
  br i1 %cmp, label %if.then16, label %if.end17, !dbg !12457

if.then16:                                        ; preds = %for.body15
  br label %for.inc18, !dbg !12458

if.end17:                                         ; preds = %for.body15
  %35 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12459
  call void @flush_pending_stmts(%struct.edge_def* %35), !dbg !12460
  br label %for.inc18, !dbg !12461

for.inc18:                                        ; preds = %if.end17, %if.then16
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !12450
  br label %for.cond12, !dbg !12450, !llvm.loop !12462

for.end19:                                        ; preds = %if.then, %for.cond12
  ret void, !dbg !12464
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_block_ends_with_call_p(%struct.basic_block_def* %bb) #0 !dbg !12465 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !12466, metadata !DIExpression()), !dbg !12467
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !12468, metadata !DIExpression()), !dbg !12469
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12470
  call void @gsi_last_nondebug_bb(%struct.gimple_stmt_iterator* sret %gsi, %struct.basic_block_def* %0), !dbg !12471
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12472
  %call1 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %call), !dbg !12473
  ret i8 %call1, !dbg !12474
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_block_ends_with_condjump_p(%struct.basic_block_def* %bb) #0 !dbg !12475 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !12476, metadata !DIExpression()), !dbg !12477
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !12478, metadata !DIExpression()), !dbg !12479
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12480
  %call = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %0), !dbg !12481
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !12479
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12482
  %tobool = icmp ne %union.gimple_statement_d* %1, null, !dbg !12482
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !12483

land.rhs:                                         ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12484
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %2), !dbg !12485
  %cmp = icmp eq i32 %call1, 1, !dbg !12486
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !12487
  %land.ext = zext i1 %3 to i32, !dbg !12483
  %conv = trunc i32 %land.ext to i8, !dbg !12488
  ret i8 %conv, !dbg !12489
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_flow_call_edges_add(%struct.simple_bitmap_def* %blocks) #0 !dbg !12490 {
entry:
  %retval = alloca i32, align 4
  %blocks.addr = alloca %struct.simple_bitmap_def*, align 8
  %i = alloca i32, align 4
  %blocks_split = alloca i32, align 4
  %last_bb = alloca i32, align 4
  %check_last_block = alloca i8, align 1
  %bb = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %t = alloca %union.gimple_statement_d*, align 8
  %e = alloca %struct.edge_def*, align 8
  %bb39 = alloca %struct.basic_block_def*, align 8
  %gsi47 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %last_stmt = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %e72 = alloca %struct.edge_def*, align 8
  store %struct.simple_bitmap_def* %blocks, %struct.simple_bitmap_def** %blocks.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %blocks.addr, metadata !12491, metadata !DIExpression()), !dbg !12492
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12493, metadata !DIExpression()), !dbg !12494
  call void @llvm.dbg.declare(metadata i32* %blocks_split, metadata !12495, metadata !DIExpression()), !dbg !12496
  store i32 0, i32* %blocks_split, align 4, !dbg !12496
  call void @llvm.dbg.declare(metadata i32* %last_bb, metadata !12497, metadata !DIExpression()), !dbg !12498
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12499
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !12499
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !12499
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !12499
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 5, !dbg !12499
  %2 = load i32, i32* %x_last_basic_block, align 8, !dbg !12499
  store i32 %2, i32* %last_bb, align 4, !dbg !12498
  call void @llvm.dbg.declare(metadata i8* %check_last_block, metadata !12500, metadata !DIExpression()), !dbg !12501
  store i8 0, i8* %check_last_block, align 1, !dbg !12501
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12502
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !12502
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !12502
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !12502
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 3, !dbg !12502
  %5 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !12502
  %cmp = icmp eq i32 %5, 2, !dbg !12504
  br i1 %cmp, label %if.then, label %if.end, !dbg !12505

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !12506
  br label %return, !dbg !12506

if.end:                                           ; preds = %entry
  %6 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %blocks.addr, align 8, !dbg !12507
  %tobool = icmp ne %struct.simple_bitmap_def* %6, null, !dbg !12507
  br i1 %tobool, label %if.else, label %if.then3, !dbg !12509

if.then3:                                         ; preds = %if.end
  store i8 1, i8* %check_last_block, align 1, !dbg !12510
  br label %if.end11, !dbg !12511

if.else:                                          ; preds = %if.end
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %blocks.addr, align 8, !dbg !12512
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 3, !dbg !12512
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12512
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !12512
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 1, !dbg !12512
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !12512
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 1, !dbg !12512
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !12512
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 5, !dbg !12512
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !12512
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 9, !dbg !12512
  %12 = load i32, i32* %index, align 8, !dbg !12512
  %div = udiv i32 %12, 64, !dbg !12512
  %idxprom = zext i32 %div to i64, !dbg !12512
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !12512
  %13 = load i64, i64* %arrayidx, align 8, !dbg !12512
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12512
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !12512
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !12512
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !12512
  %x_exit_block_ptr8 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 1, !dbg !12512
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr8, align 8, !dbg !12512
  %prev_bb9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 5, !dbg !12512
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb9, align 8, !dbg !12512
  %index10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 9, !dbg !12512
  %18 = load i32, i32* %index10, align 8, !dbg !12512
  %rem = urem i32 %18, 64, !dbg !12512
  %sh_prom = zext i32 %rem to i64, !dbg !12512
  %shr = lshr i64 %13, %sh_prom, !dbg !12512
  %and = and i64 %shr, 1, !dbg !12512
  %conv = trunc i64 %and to i8, !dbg !12512
  store i8 %conv, i8* %check_last_block, align 1, !dbg !12513
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then3
  %19 = load i8, i8* %check_last_block, align 1, !dbg !12514
  %tobool12 = icmp ne i8 %19, 0, !dbg !12514
  br i1 %tobool12, label %if.then13, label %if.end36, !dbg !12516

if.then13:                                        ; preds = %if.end11
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !12517, metadata !DIExpression()), !dbg !12519
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12520
  %add.ptr14 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !12520
  %cfg15 = getelementptr inbounds %struct.function, %struct.function* %add.ptr14, i32 0, i32 1, !dbg !12520
  %21 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg15, align 8, !dbg !12520
  %x_exit_block_ptr16 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %21, i32 0, i32 1, !dbg !12520
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr16, align 8, !dbg !12520
  %prev_bb17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 5, !dbg !12521
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb17, align 8, !dbg !12521
  store %struct.basic_block_def* %23, %struct.basic_block_def** %bb, align 8, !dbg !12519
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !12522, metadata !DIExpression()), !dbg !12523
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12524
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %gsi, %struct.basic_block_def* %24), !dbg !12525
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t, metadata !12526, metadata !DIExpression()), !dbg !12527
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %t, align 8, !dbg !12527
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12528
  %tobool18 = icmp ne i8 %call, 0, !dbg !12528
  br i1 %tobool18, label %if.end21, label %if.then19, !dbg !12530

if.then19:                                        ; preds = %if.then13
  %call20 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12531
  store %union.gimple_statement_d* %call20, %union.gimple_statement_d** %t, align 8, !dbg !12532
  br label %if.end21, !dbg !12533

if.end21:                                         ; preds = %if.then19, %if.then13
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !12534
  %tobool22 = icmp ne %union.gimple_statement_d* %25, null, !dbg !12534
  br i1 %tobool22, label %land.lhs.true, label %if.end35, !dbg !12536

land.lhs.true:                                    ; preds = %if.end21
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t, align 8, !dbg !12537
  %call23 = call zeroext i8 @need_fake_edge_p(%union.gimple_statement_d* %26), !dbg !12538
  %conv24 = zext i8 %call23 to i32, !dbg !12538
  %tobool25 = icmp ne i32 %conv24, 0, !dbg !12538
  br i1 %tobool25, label %if.then26, label %if.end35, !dbg !12539

if.then26:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !12540, metadata !DIExpression()), !dbg !12542
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12543
  %28 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12544
  %add.ptr27 = getelementptr inbounds %struct.function, %struct.function* %28, i64 0, !dbg !12544
  %cfg28 = getelementptr inbounds %struct.function, %struct.function* %add.ptr27, i32 0, i32 1, !dbg !12544
  %29 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg28, align 8, !dbg !12544
  %x_exit_block_ptr29 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %29, i32 0, i32 1, !dbg !12544
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr29, align 8, !dbg !12544
  %call30 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %27, %struct.basic_block_def* %30), !dbg !12545
  store %struct.edge_def* %call30, %struct.edge_def** %e, align 8, !dbg !12546
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12547
  %tobool31 = icmp ne %struct.edge_def* %31, null, !dbg !12547
  br i1 %tobool31, label %if.then32, label %if.end34, !dbg !12549

if.then32:                                        ; preds = %if.then26
  %32 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12550
  %call33 = call %union.gimple_statement_d* @gimple_build_nop(), !dbg !12552
  call void @gsi_insert_on_edge(%struct.edge_def* %32, %union.gimple_statement_d* %call33), !dbg !12553
  call void @gsi_commit_edge_inserts(), !dbg !12554
  br label %if.end34, !dbg !12555

if.end34:                                         ; preds = %if.then32, %if.then26
  br label %if.end35, !dbg !12556

if.end35:                                         ; preds = %if.end34, %land.lhs.true, %if.end21
  br label %if.end36, !dbg !12557

if.end36:                                         ; preds = %if.end35, %if.end11
  store i32 0, i32* %i, align 4, !dbg !12558
  br label %for.cond, !dbg !12560

for.cond:                                         ; preds = %for.inc, %if.end36
  %33 = load i32, i32* %i, align 4, !dbg !12561
  %34 = load i32, i32* %last_bb, align 4, !dbg !12563
  %cmp37 = icmp slt i32 %33, %34, !dbg !12564
  br i1 %cmp37, label %for.body, label %for.end, !dbg !12565

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb39, metadata !12566, metadata !DIExpression()), !dbg !12568
  %35 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12569
  %add.ptr40 = getelementptr inbounds %struct.function, %struct.function* %35, i64 0, !dbg !12569
  %cfg41 = getelementptr inbounds %struct.function, %struct.function* %add.ptr40, i32 0, i32 1, !dbg !12569
  %36 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg41, align 8, !dbg !12569
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %36, i32 0, i32 2, !dbg !12569
  %37 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !12569
  %tobool42 = icmp ne %struct.VEC_basic_block_gc* %37, null, !dbg !12569
  br i1 %tobool42, label %cond.true, label %cond.false, !dbg !12569

cond.true:                                        ; preds = %for.body
  %38 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12569
  %add.ptr43 = getelementptr inbounds %struct.function, %struct.function* %38, i64 0, !dbg !12569
  %cfg44 = getelementptr inbounds %struct.function, %struct.function* %add.ptr43, i32 0, i32 1, !dbg !12569
  %39 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg44, align 8, !dbg !12569
  %x_basic_block_info45 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %39, i32 0, i32 2, !dbg !12569
  %40 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info45, align 8, !dbg !12569
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %40, i32 0, i32 0, !dbg !12569
  br label %cond.end, !dbg !12569

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !12569

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12569
  %41 = load i32, i32* %i, align 4, !dbg !12569
  %call46 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %41), !dbg !12569
  store %struct.basic_block_def* %call46, %struct.basic_block_def** %bb39, align 8, !dbg !12568
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi47, metadata !12570, metadata !DIExpression()), !dbg !12571
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !12572, metadata !DIExpression()), !dbg !12573
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last_stmt, metadata !12574, metadata !DIExpression()), !dbg !12575
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb39, align 8, !dbg !12576
  %tobool48 = icmp ne %struct.basic_block_def* %42, null, !dbg !12576
  br i1 %tobool48, label %if.end50, label %if.then49, !dbg !12578

if.then49:                                        ; preds = %cond.end
  br label %for.inc, !dbg !12579

if.end50:                                         ; preds = %cond.end
  %43 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %blocks.addr, align 8, !dbg !12580
  %tobool51 = icmp ne %struct.simple_bitmap_def* %43, null, !dbg !12580
  br i1 %tobool51, label %land.lhs.true52, label %if.end63, !dbg !12582

land.lhs.true52:                                  ; preds = %if.end50
  %44 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %blocks.addr, align 8, !dbg !12583
  %elms53 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %44, i32 0, i32 3, !dbg !12583
  %45 = load i32, i32* %i, align 4, !dbg !12583
  %div54 = udiv i32 %45, 64, !dbg !12583
  %idxprom55 = zext i32 %div54 to i64, !dbg !12583
  %arrayidx56 = getelementptr inbounds [1 x i64], [1 x i64]* %elms53, i64 0, i64 %idxprom55, !dbg !12583
  %46 = load i64, i64* %arrayidx56, align 8, !dbg !12583
  %47 = load i32, i32* %i, align 4, !dbg !12583
  %rem57 = urem i32 %47, 64, !dbg !12583
  %sh_prom58 = zext i32 %rem57 to i64, !dbg !12583
  %shr59 = lshr i64 %46, %sh_prom58, !dbg !12583
  %and60 = and i64 %shr59, 1, !dbg !12583
  %tobool61 = icmp ne i64 %and60, 0, !dbg !12583
  br i1 %tobool61, label %if.end63, label %if.then62, !dbg !12584

if.then62:                                        ; preds = %land.lhs.true52
  br label %for.inc, !dbg !12585

if.end63:                                         ; preds = %land.lhs.true52, %if.end50
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %bb39, align 8, !dbg !12586
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %48), !dbg !12587
  %49 = bitcast %struct.gimple_stmt_iterator* %gsi47 to i8*, !dbg !12587
  %50 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !12587
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %49, i8* align 8 %50, i64 24, i1 false), !dbg !12587
  %call64 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi47), !dbg !12588
  %tobool65 = icmp ne i8 %call64, 0, !dbg !12588
  br i1 %tobool65, label %if.end88, label %if.then66, !dbg !12590

if.then66:                                        ; preds = %if.end63
  %call67 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi47), !dbg !12591
  store %union.gimple_statement_d* %call67, %union.gimple_statement_d** %last_stmt, align 8, !dbg !12593
  br label %do.body, !dbg !12594

do.body:                                          ; preds = %do.cond, %if.then66
  %call68 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi47), !dbg !12595
  store %union.gimple_statement_d* %call68, %union.gimple_statement_d** %stmt, align 8, !dbg !12597
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12598
  %call69 = call zeroext i8 @need_fake_edge_p(%union.gimple_statement_d* %51), !dbg !12600
  %tobool70 = icmp ne i8 %call69, 0, !dbg !12600
  br i1 %tobool70, label %if.then71, label %if.end85, !dbg !12601

if.then71:                                        ; preds = %do.body
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e72, metadata !12602, metadata !DIExpression()), !dbg !12604
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12605
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last_stmt, align 8, !dbg !12607
  %cmp73 = icmp ne %union.gimple_statement_d* %52, %53, !dbg !12608
  br i1 %cmp73, label %if.then75, label %if.end80, !dbg !12609

if.then75:                                        ; preds = %if.then71
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %bb39, align 8, !dbg !12610
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12612
  %56 = bitcast %union.gimple_statement_d* %55 to i8*, !dbg !12612
  %call76 = call %struct.edge_def* @split_block(%struct.basic_block_def* %54, i8* %56), !dbg !12613
  store %struct.edge_def* %call76, %struct.edge_def** %e72, align 8, !dbg !12614
  %57 = load %struct.edge_def*, %struct.edge_def** %e72, align 8, !dbg !12615
  %tobool77 = icmp ne %struct.edge_def* %57, null, !dbg !12615
  br i1 %tobool77, label %if.then78, label %if.end79, !dbg !12617

if.then78:                                        ; preds = %if.then75
  %58 = load i32, i32* %blocks_split, align 4, !dbg !12618
  %inc = add nsw i32 %58, 1, !dbg !12618
  store i32 %inc, i32* %blocks_split, align 4, !dbg !12618
  br label %if.end79, !dbg !12619

if.end79:                                         ; preds = %if.then78, %if.then75
  br label %if.end80, !dbg !12620

if.end80:                                         ; preds = %if.end79, %if.then71
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %bb39, align 8, !dbg !12621
  %60 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12622
  %add.ptr81 = getelementptr inbounds %struct.function, %struct.function* %60, i64 0, !dbg !12622
  %cfg82 = getelementptr inbounds %struct.function, %struct.function* %add.ptr81, i32 0, i32 1, !dbg !12622
  %61 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg82, align 8, !dbg !12622
  %x_exit_block_ptr83 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %61, i32 0, i32 1, !dbg !12622
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr83, align 8, !dbg !12622
  %call84 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %59, %struct.basic_block_def* %62, i32 16), !dbg !12623
  br label %if.end85, !dbg !12624

if.end85:                                         ; preds = %if.end80, %do.body
  call void @gsi_prev(%struct.gimple_stmt_iterator* %gsi47), !dbg !12625
  br label %do.cond, !dbg !12626

do.cond:                                          ; preds = %if.end85
  %call86 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi47), !dbg !12627
  %tobool87 = icmp ne i8 %call86, 0, !dbg !12628
  %lnot = xor i1 %tobool87, true, !dbg !12628
  br i1 %lnot, label %do.body, label %do.end, !dbg !12626, !llvm.loop !12629

do.end:                                           ; preds = %do.cond
  br label %if.end88, !dbg !12631

if.end88:                                         ; preds = %do.end, %if.end63
  br label %for.inc, !dbg !12632

for.inc:                                          ; preds = %if.end88, %if.then62, %if.then49
  %63 = load i32, i32* %i, align 4, !dbg !12633
  %inc89 = add nsw i32 %63, 1, !dbg !12633
  store i32 %inc89, i32* %i, align 4, !dbg !12633
  br label %for.cond, !dbg !12634, !llvm.loop !12635

for.end:                                          ; preds = %for.cond
  %64 = load i32, i32* %blocks_split, align 4, !dbg !12637
  %tobool90 = icmp ne i32 %64, 0, !dbg !12637
  br i1 %tobool90, label %if.then91, label %if.end92, !dbg !12639

if.then91:                                        ; preds = %for.end
  call void @verify_flow_info(), !dbg !12640
  br label %if.end92, !dbg !12640

if.end92:                                         ; preds = %if.then91, %for.end
  %65 = load i32, i32* %blocks_split, align 4, !dbg !12641
  store i32 %65, i32* %retval, align 4, !dbg !12642
  br label %return, !dbg !12642

return:                                           ; preds = %if.end92, %if.then
  %66 = load i32, i32* %retval, align 4, !dbg !12643
  ret i32 %66, !dbg !12643
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_execute_on_growing_pred(%struct.edge_def* %e) #0 !dbg !12644 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !12645, metadata !DIExpression()), !dbg !12646
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !12647, metadata !DIExpression()), !dbg !12648
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !12649
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 1, !dbg !12650
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !12650
  store %struct.basic_block_def* %1, %struct.basic_block_def** %bb, align 8, !dbg !12648
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12651
  %call = call %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %2), !dbg !12653
  %call1 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %call), !dbg !12654
  %tobool = icmp ne i8 %call1, 0, !dbg !12654
  br i1 %tobool, label %if.end, label %if.then, !dbg !12655

if.then:                                          ; preds = %entry
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12656
  call void @reserve_phi_args_for_new_edge(%struct.basic_block_def* %3), !dbg !12657
  br label %if.end, !dbg !12657

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !12658
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_execute_on_shrinking_pred(%struct.edge_def* %e) #0 !dbg !12659 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !12660, metadata !DIExpression()), !dbg !12661
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !12662
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 1, !dbg !12664
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !12664
  %call = call %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %1), !dbg !12665
  %call1 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %call), !dbg !12666
  %tobool = icmp ne i8 %call1, 0, !dbg !12666
  br i1 %tobool, label %if.end, label %if.then, !dbg !12667

if.then:                                          ; preds = %entry
  %2 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !12668
  call void @remove_phi_args(%struct.edge_def* %2), !dbg !12669
  br label %if.end, !dbg !12669

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !12670
}

declare dso_local zeroext i8 @gimple_duplicate_loop_to_header_edge(%struct.loop*, %struct.edge_def*, i32, %struct.simple_bitmap_def*, %struct.edge_def*, %struct.VEC_edge_heap**, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_lv_add_condition_to_bb(%struct.basic_block_def* %first_head, %struct.basic_block_def* %second_head, %struct.basic_block_def* %cond_bb, i8* %cond_e) #0 !dbg !12671 {
entry:
  %first_head.addr = alloca %struct.basic_block_def*, align 8
  %second_head.addr = alloca %struct.basic_block_def*, align 8
  %cond_bb.addr = alloca %struct.basic_block_def*, align 8
  %cond_e.addr = alloca i8*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %new_cond_expr = alloca %union.gimple_statement_d*, align 8
  %cond_expr = alloca %union.tree_node*, align 8
  %e0 = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.basic_block_def* %first_head, %struct.basic_block_def** %first_head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %first_head.addr, metadata !12672, metadata !DIExpression()), !dbg !12673
  store %struct.basic_block_def* %second_head, %struct.basic_block_def** %second_head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %second_head.addr, metadata !12674, metadata !DIExpression()), !dbg !12675
  store %struct.basic_block_def* %cond_bb, %struct.basic_block_def** %cond_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %cond_bb.addr, metadata !12676, metadata !DIExpression()), !dbg !12677
  store i8* %cond_e, i8** %cond_e.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cond_e.addr, metadata !12678, metadata !DIExpression()), !dbg !12679
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !12680, metadata !DIExpression()), !dbg !12681
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_cond_expr, metadata !12682, metadata !DIExpression()), !dbg !12683
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond_expr, metadata !12684, metadata !DIExpression()), !dbg !12685
  %0 = load i8*, i8** %cond_e.addr, align 8, !dbg !12686
  %1 = bitcast i8* %0 to %union.tree_node*, !dbg !12687
  store %union.tree_node* %1, %union.tree_node** %cond_expr, align 8, !dbg !12685
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e0, metadata !12688, metadata !DIExpression()), !dbg !12689
  %2 = load %union.tree_node*, %union.tree_node** %cond_expr, align 8, !dbg !12690
  %call = call %union.gimple_statement_d* @gimple_build_cond_from_tree(%union.tree_node* %2, %union.tree_node* null, %union.tree_node* null), !dbg !12691
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %new_cond_expr, align 8, !dbg !12692
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb.addr, align 8, !dbg !12693
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %3), !dbg !12694
  %4 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !12694
  %5 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !12694
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !12694
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_cond_expr, align 8, !dbg !12695
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %6, i32 0), !dbg !12696
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb.addr, align 8, !dbg !12697
  %call1 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %7), !dbg !12698
  store %struct.edge_def* %call1, %struct.edge_def** %e0, align 8, !dbg !12699
  %8 = load %struct.edge_def*, %struct.edge_def** %e0, align 8, !dbg !12700
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %8, i32 0, i32 7, !dbg !12701
  %9 = load i32, i32* %flags, align 8, !dbg !12702
  %and = and i32 %9, -2, !dbg !12702
  store i32 %and, i32* %flags, align 8, !dbg !12702
  %10 = load %struct.edge_def*, %struct.edge_def** %e0, align 8, !dbg !12703
  %flags2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %10, i32 0, i32 7, !dbg !12704
  %11 = load i32, i32* %flags2, align 8, !dbg !12705
  %or = or i32 %11, 2048, !dbg !12705
  store i32 %or, i32* %flags2, align 8, !dbg !12705
  ret void, !dbg !12706
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_lv_adjust_loop_header_phi(%struct.basic_block_def* %first, %struct.basic_block_def* %second, %struct.basic_block_def* %new_head, %struct.edge_def* %e) #0 !dbg !12707 {
entry:
  %first.addr = alloca %struct.basic_block_def*, align 8
  %second.addr = alloca %struct.basic_block_def*, align 8
  %new_head.addr = alloca %struct.basic_block_def*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %phi1 = alloca %union.gimple_statement_d*, align 8
  %phi2 = alloca %union.gimple_statement_d*, align 8
  %psi1 = alloca %struct.gimple_stmt_iterator, align 8
  %psi2 = alloca %struct.gimple_stmt_iterator, align 8
  %def = alloca %union.tree_node*, align 8
  %e2 = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp1 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.basic_block_def* %first, %struct.basic_block_def** %first.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %first.addr, metadata !12708, metadata !DIExpression()), !dbg !12709
  store %struct.basic_block_def* %second, %struct.basic_block_def** %second.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %second.addr, metadata !12710, metadata !DIExpression()), !dbg !12711
  store %struct.basic_block_def* %new_head, %struct.basic_block_def** %new_head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_head.addr, metadata !12712, metadata !DIExpression()), !dbg !12713
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !12714, metadata !DIExpression()), !dbg !12715
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi1, metadata !12716, metadata !DIExpression()), !dbg !12717
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi2, metadata !12718, metadata !DIExpression()), !dbg !12719
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi1, metadata !12720, metadata !DIExpression()), !dbg !12721
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi2, metadata !12722, metadata !DIExpression()), !dbg !12723
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !12724, metadata !DIExpression()), !dbg !12725
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e2, metadata !12726, metadata !DIExpression()), !dbg !12727
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %new_head.addr, align 8, !dbg !12728
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %second.addr, align 8, !dbg !12729
  %call = call %struct.edge_def* @find_edge(%struct.basic_block_def* %0, %struct.basic_block_def* %1), !dbg !12730
  store %struct.edge_def* %call, %struct.edge_def** %e2, align 8, !dbg !12727
  %2 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !12731
  %cmp = icmp ne %struct.edge_def* %2, null, !dbg !12731
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !12731

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 6897, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !12731
  br label %cond.end, !dbg !12731

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12731

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12731
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %second.addr, align 8, !dbg !12732
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %3), !dbg !12734
  %4 = bitcast %struct.gimple_stmt_iterator* %psi2 to i8*, !dbg !12734
  %5 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !12734
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !12734
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %first.addr, align 8, !dbg !12735
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp1, %struct.basic_block_def* %6), !dbg !12736
  %7 = bitcast %struct.gimple_stmt_iterator* %psi1 to i8*, !dbg !12736
  %8 = bitcast %struct.gimple_stmt_iterator* %tmp1 to i8*, !dbg !12736
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 24, i1 false), !dbg !12736
  br label %for.cond, !dbg !12737

for.cond:                                         ; preds = %for.inc, %cond.end
  %call2 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi2), !dbg !12738
  %tobool = icmp ne i8 %call2, 0, !dbg !12738
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !12740

land.rhs:                                         ; preds = %for.cond
  %call3 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi1), !dbg !12741
  %tobool4 = icmp ne i8 %call3, 0, !dbg !12742
  %lnot = xor i1 %tobool4, true, !dbg !12742
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ], !dbg !12743
  br i1 %9, label %for.body, label %for.end, !dbg !12744

for.body:                                         ; preds = %land.end
  %call5 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi1), !dbg !12745
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %phi1, align 8, !dbg !12747
  %call6 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi2), !dbg !12748
  store %union.gimple_statement_d* %call6, %union.gimple_statement_d** %phi2, align 8, !dbg !12749
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi2, align 8, !dbg !12750
  %11 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !12750
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %11, i32 0, i32 6, !dbg !12750
  %12 = load i32, i32* %dest_idx, align 4, !dbg !12750
  %call7 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %10, i32 %12), !dbg !12750
  %call8 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call7), !dbg !12750
  store %union.tree_node* %call8, %union.tree_node** %def, align 8, !dbg !12751
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi1, align 8, !dbg !12752
  %14 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !12753
  %15 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !12754
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi2, align 8, !dbg !12755
  %17 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !12756
  %call9 = call i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %16, %struct.edge_def* %17), !dbg !12757
  call void @add_phi_arg(%union.gimple_statement_d* %13, %union.tree_node* %14, %struct.edge_def* %15, i32 %call9), !dbg !12758
  br label %for.inc, !dbg !12759

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %psi2), !dbg !12760
  call void @gsi_next(%struct.gimple_stmt_iterator* %psi1), !dbg !12761
  br label %for.cond, !dbg !12762, !llvm.loop !12763

for.end:                                          ; preds = %land.end
  ret void, !dbg !12765
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @extract_true_false_edges_from_block(%struct.basic_block_def* %b, %struct.edge_def** %true_edge, %struct.edge_def** %false_edge) #0 !dbg !12766 {
entry:
  %b.addr = alloca %struct.basic_block_def*, align 8
  %true_edge.addr = alloca %struct.edge_def**, align 8
  %false_edge.addr = alloca %struct.edge_def**, align 8
  %e = alloca %struct.edge_def*, align 8
  store %struct.basic_block_def* %b, %struct.basic_block_def** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b.addr, metadata !12767, metadata !DIExpression()), !dbg !12768
  store %struct.edge_def** %true_edge, %struct.edge_def*** %true_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %true_edge.addr, metadata !12769, metadata !DIExpression()), !dbg !12770
  store %struct.edge_def** %false_edge, %struct.edge_def*** %false_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %false_edge.addr, metadata !12771, metadata !DIExpression()), !dbg !12772
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !12773, metadata !DIExpression()), !dbg !12774
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !12775
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !12775
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !12775
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !12775
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12775

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !12775
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !12775
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !12775
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !12775
  br label %cond.end, !dbg !12775

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12775

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12775
  %call = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 0), !dbg !12775
  store %struct.edge_def* %call, %struct.edge_def** %e, align 8, !dbg !12774
  %4 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12776
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %4, i32 0, i32 7, !dbg !12778
  %5 = load i32, i32* %flags, align 8, !dbg !12778
  %and = and i32 %5, 1024, !dbg !12779
  %tobool2 = icmp ne i32 %and, 0, !dbg !12779
  br i1 %tobool2, label %if.then, label %if.else, !dbg !12780

if.then:                                          ; preds = %cond.end
  %6 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12781
  %7 = load %struct.edge_def**, %struct.edge_def*** %true_edge.addr, align 8, !dbg !12783
  store %struct.edge_def* %6, %struct.edge_def** %7, align 8, !dbg !12784
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !12785
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 1, !dbg !12785
  %9 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !12785
  %tobool4 = icmp ne %struct.VEC_edge_gc* %9, null, !dbg !12785
  br i1 %tobool4, label %cond.true5, label %cond.false8, !dbg !12785

cond.true5:                                       ; preds = %if.then
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !12785
  %succs6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 1, !dbg !12785
  %11 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs6, align 8, !dbg !12785
  %base7 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %11, i32 0, i32 0, !dbg !12785
  br label %cond.end9, !dbg !12785

cond.false8:                                      ; preds = %if.then
  br label %cond.end9, !dbg !12785

cond.end9:                                        ; preds = %cond.false8, %cond.true5
  %cond10 = phi %struct.VEC_edge_base* [ %base7, %cond.true5 ], [ null, %cond.false8 ], !dbg !12785
  %call11 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond10, i32 1), !dbg !12785
  %12 = load %struct.edge_def**, %struct.edge_def*** %false_edge.addr, align 8, !dbg !12786
  store %struct.edge_def* %call11, %struct.edge_def** %12, align 8, !dbg !12787
  br label %if.end, !dbg !12788

if.else:                                          ; preds = %cond.end
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12789
  %14 = load %struct.edge_def**, %struct.edge_def*** %false_edge.addr, align 8, !dbg !12791
  store %struct.edge_def* %13, %struct.edge_def** %14, align 8, !dbg !12792
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !12793
  %succs12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 1, !dbg !12793
  %16 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs12, align 8, !dbg !12793
  %tobool13 = icmp ne %struct.VEC_edge_gc* %16, null, !dbg !12793
  br i1 %tobool13, label %cond.true14, label %cond.false17, !dbg !12793

cond.true14:                                      ; preds = %if.else
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !12793
  %succs15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 1, !dbg !12793
  %18 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs15, align 8, !dbg !12793
  %base16 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %18, i32 0, i32 0, !dbg !12793
  br label %cond.end18, !dbg !12793

cond.false17:                                     ; preds = %if.else
  br label %cond.end18, !dbg !12793

cond.end18:                                       ; preds = %cond.false17, %cond.true14
  %cond19 = phi %struct.VEC_edge_base* [ %base16, %cond.true14 ], [ null, %cond.false17 ], !dbg !12793
  %call20 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond19, i32 1), !dbg !12793
  %19 = load %struct.edge_def**, %struct.edge_def*** %true_edge.addr, align 8, !dbg !12794
  store %struct.edge_def* %call20, %struct.edge_def** %19, align 8, !dbg !12795
  br label %if.end

if.end:                                           ; preds = %cond.end18, %cond.end9
  ret void, !dbg !12796
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @split_critical_edges() #0 !dbg !12797 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp46 = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !12798, metadata !DIExpression()), !dbg !12799
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !12800, metadata !DIExpression()), !dbg !12801
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !12802, metadata !DIExpression()), !dbg !12803
  call void @start_recording_case_labels(), !dbg !12804
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12805
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !12805
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !12805
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !12805
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !12805
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !12805
  store %struct.basic_block_def* %2, %struct.basic_block_def** %bb, align 8, !dbg !12805
  br label %for.cond, !dbg !12805

for.cond:                                         ; preds = %for.inc63, %entry
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12807
  %tobool = icmp ne %struct.basic_block_def* %3, null, !dbg !12805
  br i1 %tobool, label %for.body, label %for.end64, !dbg !12805

for.body:                                         ; preds = %for.cond
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12809
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 1, !dbg !12809
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !12809
  %5 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !12809
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %5, i32 0, i32 0, !dbg !12809
  %7 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !12809
  store i32 %7, i32* %6, align 8, !dbg !12809
  %8 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %5, i32 0, i32 1, !dbg !12809
  %9 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !12809
  store %struct.VEC_edge_gc** %9, %struct.VEC_edge_gc*** %8, align 8, !dbg !12809
  %10 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !12809
  %11 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !12809
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false), !dbg !12809
  br label %for.cond1, !dbg !12809

for.cond1:                                        ; preds = %for.inc, %for.body
  %12 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !12812
  %13 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %12, i32 0, i32 0, !dbg !12812
  %14 = load i32, i32* %13, align 8, !dbg !12812
  %15 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %12, i32 0, i32 1, !dbg !12812
  %16 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %15, align 8, !dbg !12812
  %call2 = call zeroext i8 @ei_cond(i32 %14, %struct.VEC_edge_gc** %16, %struct.edge_def** %e), !dbg !12812
  %tobool3 = icmp ne i8 %call2, 0, !dbg !12809
  br i1 %tobool3, label %for.body4, label %for.end, !dbg !12809

for.body4:                                        ; preds = %for.cond1
  %17 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12814
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %17, i32 0, i32 0, !dbg !12814
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !12814
  %succs5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 1, !dbg !12814
  %19 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs5, align 8, !dbg !12814
  %tobool6 = icmp ne %struct.VEC_edge_gc* %19, null, !dbg !12814
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !12814

cond.true:                                        ; preds = %for.body4
  %20 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12814
  %src7 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i32 0, i32 0, !dbg !12814
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %src7, align 8, !dbg !12814
  %succs8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 1, !dbg !12814
  %22 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs8, align 8, !dbg !12814
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %22, i32 0, i32 0, !dbg !12814
  br label %cond.end, !dbg !12814

cond.false:                                       ; preds = %for.body4
  br label %cond.end, !dbg !12814

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12814
  %call9 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !12814
  %cmp = icmp uge i32 %call9, 2, !dbg !12814
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !12814

land.lhs.true:                                    ; preds = %cond.end
  %23 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12814
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %23, i32 0, i32 1, !dbg !12814
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !12814
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 0, !dbg !12814
  %25 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !12814
  %tobool10 = icmp ne %struct.VEC_edge_gc* %25, null, !dbg !12814
  br i1 %tobool10, label %cond.true11, label %cond.false15, !dbg !12814

cond.true11:                                      ; preds = %land.lhs.true
  %26 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12814
  %dest12 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %26, i32 0, i32 1, !dbg !12814
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %dest12, align 8, !dbg !12814
  %preds13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 0, !dbg !12814
  %28 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds13, align 8, !dbg !12814
  %base14 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %28, i32 0, i32 0, !dbg !12814
  br label %cond.end16, !dbg !12814

cond.false15:                                     ; preds = %land.lhs.true
  br label %cond.end16, !dbg !12814

cond.end16:                                       ; preds = %cond.false15, %cond.true11
  %cond17 = phi %struct.VEC_edge_base* [ %base14, %cond.true11 ], [ null, %cond.false15 ], !dbg !12814
  %call18 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond17), !dbg !12814
  %cmp19 = icmp uge i32 %call18, 2, !dbg !12814
  br i1 %cmp19, label %land.lhs.true20, label %if.else, !dbg !12817

land.lhs.true20:                                  ; preds = %cond.end16
  %29 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12818
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %29, i32 0, i32 7, !dbg !12819
  %30 = load i32, i32* %flags, align 8, !dbg !12819
  %and = and i32 %30, 2, !dbg !12820
  %tobool21 = icmp ne i32 %and, 0, !dbg !12820
  br i1 %tobool21, label %if.else, label %if.then, !dbg !12821

if.then:                                          ; preds = %land.lhs.true20
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12822
  %call22 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %31), !dbg !12823
  br label %if.end62, !dbg !12823

if.else:                                          ; preds = %land.lhs.true20, %cond.end16, %cond.end
  %32 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12824
  %dest23 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %32, i32 0, i32 1, !dbg !12826
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %dest23, align 8, !dbg !12826
  %call24 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %33), !dbg !12827
  %tobool25 = icmp ne i8 %call24, 0, !dbg !12827
  br i1 %tobool25, label %lor.lhs.false, label %land.lhs.true35, !dbg !12828

lor.lhs.false:                                    ; preds = %if.else
  %34 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12829
  %dest26 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 1, !dbg !12830
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %dest26, align 8, !dbg !12830
  %call27 = call %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %35), !dbg !12831
  %call28 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %call27), !dbg !12832
  %tobool29 = icmp ne i8 %call28, 0, !dbg !12832
  br i1 %tobool29, label %lor.lhs.false30, label %land.lhs.true35, !dbg !12833

lor.lhs.false30:                                  ; preds = %lor.lhs.false
  %36 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12834
  %dest31 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %36, i32 0, i32 1, !dbg !12835
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %dest31, align 8, !dbg !12835
  %38 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12836
  %add.ptr32 = getelementptr inbounds %struct.function, %struct.function* %38, i64 0, !dbg !12836
  %cfg33 = getelementptr inbounds %struct.function, %struct.function* %add.ptr32, i32 0, i32 1, !dbg !12836
  %39 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg33, align 8, !dbg !12836
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %39, i32 0, i32 1, !dbg !12836
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !12836
  %cmp34 = icmp eq %struct.basic_block_def* %37, %40, !dbg !12837
  br i1 %cmp34, label %land.lhs.true35, label %if.end61, !dbg !12838

land.lhs.true35:                                  ; preds = %lor.lhs.false30, %lor.lhs.false, %if.else
  %41 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12839
  %src36 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %41, i32 0, i32 0, !dbg !12840
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %src36, align 8, !dbg !12840
  %43 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12841
  %add.ptr37 = getelementptr inbounds %struct.function, %struct.function* %43, i64 0, !dbg !12841
  %cfg38 = getelementptr inbounds %struct.function, %struct.function* %add.ptr37, i32 0, i32 1, !dbg !12841
  %44 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg38, align 8, !dbg !12841
  %x_entry_block_ptr39 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %44, i32 0, i32 0, !dbg !12841
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr39, align 8, !dbg !12841
  %cmp40 = icmp ne %struct.basic_block_def* %42, %45, !dbg !12842
  br i1 %cmp40, label %land.lhs.true41, label %if.end61, !dbg !12843

land.lhs.true41:                                  ; preds = %land.lhs.true35
  %46 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12844
  %flags42 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %46, i32 0, i32 7, !dbg !12845
  %47 = load i32, i32* %flags42, align 8, !dbg !12845
  %and43 = and i32 %47, 2, !dbg !12846
  %tobool44 = icmp ne i32 %and43, 0, !dbg !12846
  br i1 %tobool44, label %if.end61, label %if.then45, !dbg !12847

if.then45:                                        ; preds = %land.lhs.true41
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !12848, metadata !DIExpression()), !dbg !12850
  %48 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12851
  %src47 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %48, i32 0, i32 0, !dbg !12852
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %src47, align 8, !dbg !12852
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp46, %struct.basic_block_def* %49), !dbg !12853
  %50 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !12853
  %51 = bitcast %struct.gimple_stmt_iterator* %tmp46 to i8*, !dbg !12853
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 24, i1 false), !dbg !12853
  %call48 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12854
  %tobool49 = icmp ne i8 %call48, 0, !dbg !12854
  br i1 %tobool49, label %if.end, label %land.lhs.true50, !dbg !12856

land.lhs.true50:                                  ; preds = %if.then45
  %call51 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12857
  %call52 = call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %call51), !dbg !12858
  %conv = zext i8 %call52 to i32, !dbg !12858
  %tobool53 = icmp ne i32 %conv, 0, !dbg !12858
  br i1 %tobool53, label %land.lhs.true54, label %if.end, !dbg !12859

land.lhs.true54:                                  ; preds = %land.lhs.true50
  %call55 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !12860
  %call56 = call i32 @gimple_code(%union.gimple_statement_d* %call55), !dbg !12861
  %cmp57 = icmp ne i32 %call56, 9, !dbg !12862
  br i1 %cmp57, label %if.then59, label %if.end, !dbg !12863

if.then59:                                        ; preds = %land.lhs.true54
  %52 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12864
  %call60 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %52), !dbg !12865
  br label %if.end, !dbg !12865

if.end:                                           ; preds = %if.then59, %land.lhs.true54, %land.lhs.true50, %if.then45
  br label %if.end61, !dbg !12866

if.end61:                                         ; preds = %if.end, %land.lhs.true41, %land.lhs.true35, %lor.lhs.false30
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.then
  br label %for.inc, !dbg !12867

for.inc:                                          ; preds = %if.end62
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !12812
  br label %for.cond1, !dbg !12812, !llvm.loop !12868

for.end:                                          ; preds = %for.cond1
  br label %for.inc63, !dbg !12870

for.inc63:                                        ; preds = %for.end
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12807
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 6, !dbg !12807
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !12807
  store %struct.basic_block_def* %54, %struct.basic_block_def** %bb, align 8, !dbg !12807
  br label %for.cond, !dbg !12807, !llvm.loop !12871

for.end64:                                        ; preds = %for.cond
  call void @end_recording_case_labels(), !dbg !12873
  ret i32 0, !dbg !12874
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @gimplify_build3(%struct.gimple_stmt_iterator* %gsi, i32 %code, %union.tree_node* %type, %union.tree_node* %a, %union.tree_node* %b, %union.tree_node* %c) #0 !dbg !12875 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %code.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %a.addr = alloca %union.tree_node*, align 8
  %b.addr = alloca %union.tree_node*, align 8
  %c.addr = alloca %union.tree_node*, align 8
  %ret = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !12878, metadata !DIExpression()), !dbg !12879
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !12880, metadata !DIExpression()), !dbg !12881
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !12882, metadata !DIExpression()), !dbg !12883
  store %union.tree_node* %a, %union.tree_node** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %a.addr, metadata !12884, metadata !DIExpression()), !dbg !12885
  store %union.tree_node* %b, %union.tree_node** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %b.addr, metadata !12886, metadata !DIExpression()), !dbg !12887
  store %union.tree_node* %c, %union.tree_node** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %c.addr, metadata !12888, metadata !DIExpression()), !dbg !12889
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !12890, metadata !DIExpression()), !dbg !12891
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !12892, metadata !DIExpression()), !dbg !12893
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !12894
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !12895
  %call1 = call i32 @gimple_location(%union.gimple_statement_d* %call), !dbg !12896
  store i32 %call1, i32* %loc, align 4, !dbg !12893
  %1 = load i32, i32* %loc, align 4, !dbg !12897
  %2 = load i32, i32* %code.addr, align 4, !dbg !12897
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12897
  %4 = load %union.tree_node*, %union.tree_node** %a.addr, align 8, !dbg !12897
  %5 = load %union.tree_node*, %union.tree_node** %b.addr, align 8, !dbg !12897
  %6 = load %union.tree_node*, %union.tree_node** %c.addr, align 8, !dbg !12897
  %call2 = call %union.tree_node* @fold_build3_stat_loc(i32 %1, i32 %2, %union.tree_node* %3, %union.tree_node* %4, %union.tree_node* %5, %union.tree_node* %6), !dbg !12897
  store %union.tree_node* %call2, %union.tree_node** %ret, align 8, !dbg !12898
  %7 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !12899
  %call3 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %7), !dbg !12899
  store %union.tree_node* %call3, %union.tree_node** %ret, align 8, !dbg !12899
  %8 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !12900
  %9 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !12901
  %call4 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %8, %union.tree_node* %9, i8 zeroext 1, %union.tree_node* null, i8 zeroext 1, i32 1), !dbg !12902
  ret %union.tree_node* %call4, !dbg !12903
}

declare dso_local %union.tree_node* @fold_build3_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @tree_strip_nop_conversions(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @gimplify_build2(%struct.gimple_stmt_iterator* %gsi, i32 %code, %union.tree_node* %type, %union.tree_node* %a, %union.tree_node* %b) #0 !dbg !12904 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %code.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %a.addr = alloca %union.tree_node*, align 8
  %b.addr = alloca %union.tree_node*, align 8
  %ret = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !12907, metadata !DIExpression()), !dbg !12908
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !12909, metadata !DIExpression()), !dbg !12910
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !12911, metadata !DIExpression()), !dbg !12912
  store %union.tree_node* %a, %union.tree_node** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %a.addr, metadata !12913, metadata !DIExpression()), !dbg !12914
  store %union.tree_node* %b, %union.tree_node** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %b.addr, metadata !12915, metadata !DIExpression()), !dbg !12916
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !12917, metadata !DIExpression()), !dbg !12918
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !12919
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !12919
  %call1 = call i32 @gimple_location(%union.gimple_statement_d* %call), !dbg !12919
  %1 = load i32, i32* %code.addr, align 4, !dbg !12919
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12919
  %3 = load %union.tree_node*, %union.tree_node** %a.addr, align 8, !dbg !12919
  %4 = load %union.tree_node*, %union.tree_node** %b.addr, align 8, !dbg !12919
  %call2 = call %union.tree_node* @fold_build2_stat_loc(i32 %call1, i32 %1, %union.tree_node* %2, %union.tree_node* %3, %union.tree_node* %4), !dbg !12919
  store %union.tree_node* %call2, %union.tree_node** %ret, align 8, !dbg !12920
  %5 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !12921
  %call3 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %5), !dbg !12921
  store %union.tree_node* %call3, %union.tree_node** %ret, align 8, !dbg !12921
  %6 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !12922
  %7 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !12923
  %call4 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %6, %union.tree_node* %7, i8 zeroext 1, %union.tree_node* null, i8 zeroext 1, i32 1), !dbg !12924
  ret %union.tree_node* %call4, !dbg !12925
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @gimplify_build1(%struct.gimple_stmt_iterator* %gsi, i32 %code, %union.tree_node* %type, %union.tree_node* %a) #0 !dbg !12926 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %code.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %a.addr = alloca %union.tree_node*, align 8
  %ret = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !12929, metadata !DIExpression()), !dbg !12930
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !12931, metadata !DIExpression()), !dbg !12932
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !12933, metadata !DIExpression()), !dbg !12934
  store %union.tree_node* %a, %union.tree_node** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %a.addr, metadata !12935, metadata !DIExpression()), !dbg !12936
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !12937, metadata !DIExpression()), !dbg !12938
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !12939
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !12939
  %call1 = call i32 @gimple_location(%union.gimple_statement_d* %call), !dbg !12939
  %1 = load i32, i32* %code.addr, align 4, !dbg !12939
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12939
  %3 = load %union.tree_node*, %union.tree_node** %a.addr, align 8, !dbg !12939
  %call2 = call %union.tree_node* @fold_build1_stat_loc(i32 %call1, i32 %1, %union.tree_node* %2, %union.tree_node* %3), !dbg !12939
  store %union.tree_node* %call2, %union.tree_node** %ret, align 8, !dbg !12940
  %4 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !12941
  %call3 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %4), !dbg !12941
  store %union.tree_node* %call3, %union.tree_node** %ret, align 8, !dbg !12941
  %5 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !12942
  %6 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !12943
  %call4 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %5, %union.tree_node* %6, i8 zeroext 1, %union.tree_node* null, i8 zeroext 1, i32 1), !dbg !12944
  ret %union.tree_node* %call4, !dbg !12945
}

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @execute_warn_function_return() #0 !dbg !12946 {
entry:
  %location = alloca i32, align 4
  %last = alloca %union.gimple_statement_d*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp65 = alloca %struct.edge_iterator, align 8
  %last75 = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.declare(metadata i32* %location, metadata !12947, metadata !DIExpression()), !dbg !12948
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last, metadata !12949, metadata !DIExpression()), !dbg !12950
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !12951, metadata !DIExpression()), !dbg !12952
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !12953, metadata !DIExpression()), !dbg !12954
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12955
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !12955
  %decl = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 6, !dbg !12955
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !12955
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !12955
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !12955
  %bf.load = load i64, i64* %2, align 8, !dbg !12955
  %bf.lshr = lshr i64 %bf.load, 19, !dbg !12955
  %bf.clear = and i64 %bf.lshr, 1, !dbg !12955
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12955
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !12955
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !12957

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12958
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !12958
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !12958
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !12958
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 1, !dbg !12958
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !12958
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 0, !dbg !12958
  %6 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !12958
  %tobool2 = icmp ne %struct.VEC_edge_gc* %6, null, !dbg !12958
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !12958

cond.true:                                        ; preds = %land.lhs.true
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12958
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !12958
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !12958
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !12958
  %x_exit_block_ptr5 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 1, !dbg !12958
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr5, align 8, !dbg !12958
  %preds6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 0, !dbg !12958
  %10 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds6, align 8, !dbg !12958
  %base7 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %10, i32 0, i32 0, !dbg !12958
  br label %cond.end, !dbg !12958

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !12958

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base7, %cond.true ], [ null, %cond.false ], !dbg !12958
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !12958
  %cmp = icmp ugt i32 %call, 0, !dbg !12959
  br i1 %cmp, label %if.then, label %if.else, !dbg !12960

if.then:                                          ; preds = %cond.end
  store i32 0, i32* %location, align 4, !dbg !12961
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12963
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !12963
  %cfg9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 1, !dbg !12963
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg9, align 8, !dbg !12963
  %x_exit_block_ptr10 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i32 0, i32 1, !dbg !12963
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr10, align 8, !dbg !12963
  %preds11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 0, !dbg !12963
  %call12 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds11), !dbg !12963
  %14 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !12963
  %15 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %14, i32 0, i32 0, !dbg !12963
  %16 = extractvalue { i32, %struct.VEC_edge_gc** } %call12, 0, !dbg !12963
  store i32 %16, i32* %15, align 8, !dbg !12963
  %17 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %14, i32 0, i32 1, !dbg !12963
  %18 = extractvalue { i32, %struct.VEC_edge_gc** } %call12, 1, !dbg !12963
  store %struct.VEC_edge_gc** %18, %struct.VEC_edge_gc*** %17, align 8, !dbg !12963
  %19 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !12963
  %20 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !12963
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 16, i1 false), !dbg !12963
  br label %for.cond, !dbg !12963

for.cond:                                         ; preds = %for.inc, %if.then
  %21 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !12965
  %22 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %21, i32 0, i32 0, !dbg !12965
  %23 = load i32, i32* %22, align 8, !dbg !12965
  %24 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %21, i32 0, i32 1, !dbg !12965
  %25 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %24, align 8, !dbg !12965
  %call13 = call zeroext i8 @ei_cond(i32 %23, %struct.VEC_edge_gc** %25, %struct.edge_def** %e), !dbg !12965
  %tobool14 = icmp ne i8 %call13, 0, !dbg !12963
  br i1 %tobool14, label %for.body, label %for.end, !dbg !12963

for.body:                                         ; preds = %for.cond
  %26 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12967
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %26, i32 0, i32 0, !dbg !12969
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !12969
  %call15 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %27), !dbg !12970
  store %union.gimple_statement_d* %call15, %union.gimple_statement_d** %last, align 8, !dbg !12971
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !12972
  %call16 = call i32 @gimple_code(%union.gimple_statement_d* %28), !dbg !12974
  %cmp17 = icmp eq i32 %call16, 9, !dbg !12975
  br i1 %cmp17, label %land.lhs.true18, label %if.end, !dbg !12976

land.lhs.true18:                                  ; preds = %for.body
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !12977
  %call19 = call i32 @gimple_location(%union.gimple_statement_d* %29), !dbg !12978
  store i32 %call19, i32* %location, align 4, !dbg !12979
  %cmp20 = icmp ne i32 %call19, 0, !dbg !12980
  br i1 %cmp20, label %if.then21, label %if.end, !dbg !12981

if.then21:                                        ; preds = %land.lhs.true18
  br label %for.end, !dbg !12982

if.end:                                           ; preds = %land.lhs.true18, %for.body
  br label %for.inc, !dbg !12983

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !12965
  br label %for.cond, !dbg !12965, !llvm.loop !12984

for.end:                                          ; preds = %if.then21, %for.cond
  %30 = load i32, i32* %location, align 4, !dbg !12986
  %cmp22 = icmp eq i32 %30, 0, !dbg !12988
  br i1 %cmp22, label %if.then23, label %if.end25, !dbg !12989

if.then23:                                        ; preds = %for.end
  %31 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12990
  %add.ptr24 = getelementptr inbounds %struct.function, %struct.function* %31, i64 0, !dbg !12990
  %function_end_locus = getelementptr inbounds %struct.function, %struct.function* %add.ptr24, i32 0, i32 16, !dbg !12991
  %32 = load i32, i32* %function_end_locus, align 4, !dbg !12991
  store i32 %32, i32* %location, align 4, !dbg !12992
  br label %if.end25, !dbg !12993

if.end25:                                         ; preds = %if.then23, %for.end
  %33 = load i32, i32* %location, align 4, !dbg !12994
  %call26 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %33, i32 0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.179, i64 0, i64 0)), !dbg !12995
  br label %if.end103, !dbg !12996

if.else:                                          ; preds = %cond.end, %entry
  %34 = load i32, i32* @warn_return_type, align 4, !dbg !12997
  %tobool27 = icmp ne i32 %34, 0, !dbg !12997
  br i1 %tobool27, label %land.lhs.true28, label %if.end102, !dbg !12999

land.lhs.true28:                                  ; preds = %if.else
  %35 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13000
  %add.ptr29 = getelementptr inbounds %struct.function, %struct.function* %35, i64 0, !dbg !13000
  %decl30 = getelementptr inbounds %struct.function, %struct.function* %add.ptr29, i32 0, i32 6, !dbg !13000
  %36 = load %union.tree_node*, %union.tree_node** %decl30, align 8, !dbg !13000
  %base31 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !13000
  %37 = bitcast %struct.tree_base* %base31 to i64*, !dbg !13000
  %bf.load32 = load i64, i64* %37, align 8, !dbg !13000
  %bf.lshr33 = lshr i64 %bf.load32, 23, !dbg !13000
  %bf.clear34 = and i64 %bf.lshr33, 1, !dbg !13000
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !13000
  %tobool36 = icmp ne i32 %bf.cast35, 0, !dbg !13000
  br i1 %tobool36, label %if.end102, label %land.lhs.true37, !dbg !13001

land.lhs.true37:                                  ; preds = %land.lhs.true28
  %38 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13002
  %add.ptr38 = getelementptr inbounds %struct.function, %struct.function* %38, i64 0, !dbg !13002
  %cfg39 = getelementptr inbounds %struct.function, %struct.function* %add.ptr38, i32 0, i32 1, !dbg !13002
  %39 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg39, align 8, !dbg !13002
  %x_exit_block_ptr40 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %39, i32 0, i32 1, !dbg !13002
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr40, align 8, !dbg !13002
  %preds41 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 0, !dbg !13002
  %41 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds41, align 8, !dbg !13002
  %tobool42 = icmp ne %struct.VEC_edge_gc* %41, null, !dbg !13002
  br i1 %tobool42, label %cond.true43, label %cond.false49, !dbg !13002

cond.true43:                                      ; preds = %land.lhs.true37
  %42 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13002
  %add.ptr44 = getelementptr inbounds %struct.function, %struct.function* %42, i64 0, !dbg !13002
  %cfg45 = getelementptr inbounds %struct.function, %struct.function* %add.ptr44, i32 0, i32 1, !dbg !13002
  %43 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg45, align 8, !dbg !13002
  %x_exit_block_ptr46 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %43, i32 0, i32 1, !dbg !13002
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr46, align 8, !dbg !13002
  %preds47 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 0, !dbg !13002
  %45 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds47, align 8, !dbg !13002
  %base48 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %45, i32 0, i32 0, !dbg !13002
  br label %cond.end50, !dbg !13002

cond.false49:                                     ; preds = %land.lhs.true37
  br label %cond.end50, !dbg !13002

cond.end50:                                       ; preds = %cond.false49, %cond.true43
  %cond51 = phi %struct.VEC_edge_base* [ %base48, %cond.true43 ], [ null, %cond.false49 ], !dbg !13002
  %call52 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond51), !dbg !13002
  %cmp53 = icmp ugt i32 %call52, 0, !dbg !13003
  br i1 %cmp53, label %land.lhs.true54, label %if.end102, !dbg !13004

land.lhs.true54:                                  ; preds = %cond.end50
  %46 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13005
  %add.ptr55 = getelementptr inbounds %struct.function, %struct.function* %46, i64 0, !dbg !13005
  %decl56 = getelementptr inbounds %struct.function, %struct.function* %add.ptr55, i32 0, i32 6, !dbg !13005
  %47 = load %union.tree_node*, %union.tree_node** %decl56, align 8, !dbg !13005
  %common = bitcast %union.tree_node* %47 to %struct.tree_common*, !dbg !13005
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !13005
  %48 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13005
  %common57 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !13005
  %type58 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common57, i32 0, i32 2, !dbg !13005
  %49 = load %union.tree_node*, %union.tree_node** %type58, align 8, !dbg !13005
  %base59 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !13005
  %50 = bitcast %struct.tree_base* %base59 to i64*, !dbg !13005
  %bf.load60 = load i64, i64* %50, align 8, !dbg !13005
  %bf.clear61 = and i64 %bf.load60, 65535, !dbg !13005
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !13005
  %cmp63 = icmp eq i32 %bf.cast62, 19, !dbg !13005
  br i1 %cmp63, label %if.end102, label %if.then64, !dbg !13006

if.then64:                                        ; preds = %land.lhs.true54
  %51 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13007
  %add.ptr66 = getelementptr inbounds %struct.function, %struct.function* %51, i64 0, !dbg !13007
  %cfg67 = getelementptr inbounds %struct.function, %struct.function* %add.ptr66, i32 0, i32 1, !dbg !13007
  %52 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg67, align 8, !dbg !13007
  %x_exit_block_ptr68 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %52, i32 0, i32 1, !dbg !13007
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr68, align 8, !dbg !13007
  %preds69 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 0, !dbg !13007
  %call70 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds69), !dbg !13007
  %54 = bitcast %struct.edge_iterator* %tmp65 to { i32, %struct.VEC_edge_gc** }*, !dbg !13007
  %55 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %54, i32 0, i32 0, !dbg !13007
  %56 = extractvalue { i32, %struct.VEC_edge_gc** } %call70, 0, !dbg !13007
  store i32 %56, i32* %55, align 8, !dbg !13007
  %57 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %54, i32 0, i32 1, !dbg !13007
  %58 = extractvalue { i32, %struct.VEC_edge_gc** } %call70, 1, !dbg !13007
  store %struct.VEC_edge_gc** %58, %struct.VEC_edge_gc*** %57, align 8, !dbg !13007
  %59 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !13007
  %60 = bitcast %struct.edge_iterator* %tmp65 to i8*, !dbg !13007
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 16, i1 false), !dbg !13007
  br label %for.cond71, !dbg !13007

for.cond71:                                       ; preds = %for.inc100, %if.then64
  %61 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !13010
  %62 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %61, i32 0, i32 0, !dbg !13010
  %63 = load i32, i32* %62, align 8, !dbg !13010
  %64 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %61, i32 0, i32 1, !dbg !13010
  %65 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %64, align 8, !dbg !13010
  %call72 = call zeroext i8 @ei_cond(i32 %63, %struct.VEC_edge_gc** %65, %struct.edge_def** %e), !dbg !13010
  %tobool73 = icmp ne i8 %call72, 0, !dbg !13007
  br i1 %tobool73, label %for.body74, label %for.end101, !dbg !13007

for.body74:                                       ; preds = %for.cond71
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last75, metadata !13012, metadata !DIExpression()), !dbg !13014
  %66 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13015
  %src76 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %66, i32 0, i32 0, !dbg !13016
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %src76, align 8, !dbg !13016
  %call77 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %67), !dbg !13017
  store %union.gimple_statement_d* %call77, %union.gimple_statement_d** %last75, align 8, !dbg !13014
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last75, align 8, !dbg !13018
  %call78 = call i32 @gimple_code(%union.gimple_statement_d* %68), !dbg !13020
  %cmp79 = icmp eq i32 %call78, 9, !dbg !13021
  br i1 %cmp79, label %land.lhs.true80, label %if.end99, !dbg !13022

land.lhs.true80:                                  ; preds = %for.body74
  %69 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last75, align 8, !dbg !13023
  %call81 = call %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %69), !dbg !13024
  %cmp82 = icmp eq %union.tree_node* %call81, null, !dbg !13025
  br i1 %cmp82, label %land.lhs.true83, label %if.end99, !dbg !13026

land.lhs.true83:                                  ; preds = %land.lhs.true80
  %70 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last75, align 8, !dbg !13027
  %call84 = call zeroext i8 @gimple_no_warning_p(%union.gimple_statement_d* %70), !dbg !13028
  %tobool85 = icmp ne i8 %call84, 0, !dbg !13028
  br i1 %tobool85, label %if.end99, label %if.then86, !dbg !13029

if.then86:                                        ; preds = %land.lhs.true83
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last75, align 8, !dbg !13030
  %call87 = call i32 @gimple_location(%union.gimple_statement_d* %71), !dbg !13032
  store i32 %call87, i32* %location, align 4, !dbg !13033
  %72 = load i32, i32* %location, align 4, !dbg !13034
  %cmp88 = icmp eq i32 %72, 0, !dbg !13036
  br i1 %cmp88, label %if.then89, label %if.end92, !dbg !13037

if.then89:                                        ; preds = %if.then86
  %73 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13038
  %add.ptr90 = getelementptr inbounds %struct.function, %struct.function* %73, i64 0, !dbg !13038
  %function_end_locus91 = getelementptr inbounds %struct.function, %struct.function* %add.ptr90, i32 0, i32 16, !dbg !13039
  %74 = load i32, i32* %function_end_locus91, align 4, !dbg !13039
  store i32 %74, i32* %location, align 4, !dbg !13040
  br label %if.end92, !dbg !13041

if.end92:                                         ; preds = %if.then89, %if.then86
  %75 = load i32, i32* %location, align 4, !dbg !13042
  %call93 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %75, i32 172, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.180, i64 0, i64 0)), !dbg !13043
  %76 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13044
  %add.ptr94 = getelementptr inbounds %struct.function, %struct.function* %76, i64 0, !dbg !13044
  %decl95 = getelementptr inbounds %struct.function, %struct.function* %add.ptr94, i32 0, i32 6, !dbg !13044
  %77 = load %union.tree_node*, %union.tree_node** %decl95, align 8, !dbg !13044
  %base96 = bitcast %union.tree_node* %77 to %struct.tree_base*, !dbg !13044
  %78 = bitcast %struct.tree_base* %base96 to i64*, !dbg !13044
  %bf.load97 = load i64, i64* %78, align 8, !dbg !13045
  %bf.clear98 = and i64 %bf.load97, -8388609, !dbg !13045
  %bf.set = or i64 %bf.clear98, 8388608, !dbg !13045
  store i64 %bf.set, i64* %78, align 8, !dbg !13045
  br label %for.end101, !dbg !13046

if.end99:                                         ; preds = %land.lhs.true83, %land.lhs.true80, %for.body74
  br label %for.inc100, !dbg !13047

for.inc100:                                       ; preds = %if.end99
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !13010
  br label %for.cond71, !dbg !13010, !llvm.loop !13048

for.end101:                                       ; preds = %if.end92, %for.cond71
  br label %if.end102, !dbg !13050

if.end102:                                        ; preds = %for.end101, %land.lhs.true54, %cond.end50, %land.lhs.true28, %if.else
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %if.end25
  ret i32 0, !dbg !13051
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @execute_warn_function_noreturn() #0 !dbg !13052 {
entry:
  %0 = load i32, i32* @warn_missing_noreturn, align 4, !dbg !13053
  %tobool = icmp ne i32 %0, 0, !dbg !13053
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !13055

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13056
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !13056
  %decl = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 6, !dbg !13056
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13056
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !13056
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !13056
  %bf.load = load i64, i64* %3, align 8, !dbg !13056
  %bf.lshr = lshr i64 %bf.load, 19, !dbg !13056
  %bf.clear = and i64 %bf.lshr, 1, !dbg !13056
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13056
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !13056
  br i1 %tobool1, label %if.end, label %land.lhs.true2, !dbg !13057

land.lhs.true2:                                   ; preds = %land.lhs.true
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13058
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !13058
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !13058
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !13058
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 1, !dbg !13058
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !13058
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 0, !dbg !13058
  %7 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !13058
  %tobool4 = icmp ne %struct.VEC_edge_gc* %7, null, !dbg !13058
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !13058

cond.true:                                        ; preds = %land.lhs.true2
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13058
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !13058
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !13058
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !13058
  %x_exit_block_ptr7 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 1, !dbg !13058
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr7, align 8, !dbg !13058
  %preds8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 0, !dbg !13058
  %11 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds8, align 8, !dbg !13058
  %base9 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %11, i32 0, i32 0, !dbg !13058
  br label %cond.end, !dbg !13058

cond.false:                                       ; preds = %land.lhs.true2
  br label %cond.end, !dbg !13058

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base9, %cond.true ], [ null, %cond.false ], !dbg !13058
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !13058
  %cmp = icmp eq i32 %call, 0, !dbg !13059
  br i1 %cmp, label %land.lhs.true10, label %if.end, !dbg !13060

land.lhs.true10:                                  ; preds = %cond.end
  %12 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 12), align 8, !dbg !13061
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13062
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !13062
  %decl12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 6, !dbg !13063
  %14 = load %union.tree_node*, %union.tree_node** %decl12, align 8, !dbg !13063
  %call13 = call zeroext i8 %12(%union.tree_node* %14), !dbg !13064
  %tobool14 = icmp ne i8 %call13, 0, !dbg !13064
  br i1 %tobool14, label %if.end, label %if.then, !dbg !13065

if.then:                                          ; preds = %land.lhs.true10
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13066
  %add.ptr15 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !13066
  %decl16 = getelementptr inbounds %struct.function, %struct.function* %add.ptr15, i32 0, i32 6, !dbg !13066
  %16 = load %union.tree_node*, %union.tree_node** %decl16, align 8, !dbg !13066
  %decl_minimal = bitcast %union.tree_node* %16 to %struct.tree_decl_minimal*, !dbg !13066
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !13066
  %17 = load i32, i32* %locus, align 8, !dbg !13066
  %call17 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %17, i32 133, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.181, i64 0, i64 0)), !dbg !13067
  br label %if.end, !dbg !13067

if.end:                                           ; preds = %if.then, %land.lhs.true10, %cond.end, %land.lhs.true, %entry
  ret i32 0, !dbg !13068
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_warn_unused_result() #0 !dbg !13069 {
entry:
  %0 = load i8, i8* @flag_warn_unused_result, align 1, !dbg !13070
  ret i8 %0, !dbg !13071
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @run_warn_unused_result() #0 !dbg !13072 {
entry:
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !13073
  %call = call %struct.gimple_seq_d* @gimple_body(%union.tree_node* %0), !dbg !13074
  call void @do_warn_unused_result(%struct.gimple_seq_d* %call), !dbg !13075
  ret i32 0, !dbg !13076
}

declare dso_local i8* @vec_gc_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_basic_block_gc_safe_grow(%struct.VEC_basic_block_gc** %vec_, i32 %size_) #0 !dbg !13077 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_gc**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_gc** %vec_, %struct.VEC_basic_block_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_gc*** %vec_.addr, metadata !13078, metadata !DIExpression()), !dbg !13079
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !13080, metadata !DIExpression()), !dbg !13079
  %0 = load i32, i32* %size_.addr, align 4, !dbg !13079
  %cmp = icmp sge i32 %0, 0, !dbg !13079
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !13079

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !13079
  %2 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %1, align 8, !dbg !13079
  %tobool = icmp ne %struct.VEC_basic_block_gc* %2, null, !dbg !13079
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13079

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !13079
  %4 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %3, align 8, !dbg !13079
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %4, i32 0, i32 0, !dbg !13079
  br label %cond.end, !dbg !13079

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !13079

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13079
  %call = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond), !dbg !13079
  %5 = load i32, i32* %size_.addr, align 4, !dbg !13079
  %cmp1 = icmp ule i32 %call, %5, !dbg !13079
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !13081
  %land.ext = zext i1 %6 to i32, !dbg !13079
  %7 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !13079
  %8 = load i32, i32* %size_.addr, align 4, !dbg !13079
  %9 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !13079
  %10 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %9, align 8, !dbg !13079
  %tobool2 = icmp ne %struct.VEC_basic_block_gc* %10, null, !dbg !13079
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !13079

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !13079
  %12 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %11, align 8, !dbg !13079
  %tobool4 = icmp ne %struct.VEC_basic_block_gc* %12, null, !dbg !13079
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !13079

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !13079
  %14 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %13, align 8, !dbg !13079
  %base6 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %14, i32 0, i32 0, !dbg !13079
  br label %cond.end8, !dbg !13079

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !13079

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_basic_block_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !13079
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %cond9, i32 0, i32 0, !dbg !13079
  %15 = load i32, i32* %num, align 8, !dbg !13079
  br label %cond.end11, !dbg !13079

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !13079

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !13079
  %sub = sub nsw i32 %8, %cond12, !dbg !13079
  %call13 = call i32 @VEC_basic_block_gc_reserve_exact(%struct.VEC_basic_block_gc** %7, i32 %sub), !dbg !13079
  %16 = load i32, i32* %size_.addr, align 4, !dbg !13079
  %17 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !13079
  %18 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %17, align 8, !dbg !13079
  %tobool14 = icmp ne %struct.VEC_basic_block_gc* %18, null, !dbg !13079
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !13079

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !13079
  %20 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %19, align 8, !dbg !13079
  %base16 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %20, i32 0, i32 0, !dbg !13079
  br label %cond.end18, !dbg !13079

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !13079

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_basic_block_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !13079
  %num20 = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %cond19, i32 0, i32 0, !dbg !13079
  store i32 %16, i32* %num20, align 8, !dbg !13079
  ret void, !dbg !13079
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_gc_reserve_exact(%struct.VEC_basic_block_gc** %vec_, i32 %alloc_) #0 !dbg !13082 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_basic_block_gc** %vec_, %struct.VEC_basic_block_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_gc*** %vec_.addr, metadata !13085, metadata !DIExpression()), !dbg !13086
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !13087, metadata !DIExpression()), !dbg !13086
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !13088, metadata !DIExpression()), !dbg !13086
  %0 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !13086
  %1 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %0, align 8, !dbg !13086
  %tobool = icmp ne %struct.VEC_basic_block_gc* %1, null, !dbg !13086
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13086

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !13086
  %3 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %2, align 8, !dbg !13086
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %3, i32 0, i32 0, !dbg !13086
  br label %cond.end, !dbg !13086

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13086

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13086
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !13086
  %call = call i32 @VEC_basic_block_base_space(%struct.VEC_basic_block_base* %cond, i32 %4), !dbg !13086
  %tobool1 = icmp ne i32 %call, 0, !dbg !13086
  %lnot = xor i1 %tobool1, true, !dbg !13086
  %lnot.ext = zext i1 %lnot to i32, !dbg !13086
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !13086
  %5 = load i32, i32* %extend, align 4, !dbg !13089
  %tobool2 = icmp ne i32 %5, 0, !dbg !13089
  br i1 %tobool2, label %if.then, label %if.end, !dbg !13086

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !13089
  %7 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %6, align 8, !dbg !13089
  %8 = bitcast %struct.VEC_basic_block_gc* %7 to i8*, !dbg !13089
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !13089
  %call3 = call i8* @vec_gc_p_reserve_exact(i8* %8, i32 %9), !dbg !13089
  %10 = bitcast i8* %call3 to %struct.VEC_basic_block_gc*, !dbg !13089
  %11 = load %struct.VEC_basic_block_gc**, %struct.VEC_basic_block_gc*** %vec_.addr, align 8, !dbg !13089
  store %struct.VEC_basic_block_gc* %10, %struct.VEC_basic_block_gc** %11, align 8, !dbg !13089
  br label %if.end, !dbg !13089

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !13086
  ret i32 %12, !dbg !13086
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_space(%struct.VEC_basic_block_base* %vec_, i32 %alloc_) #0 !dbg !13091 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !13094, metadata !DIExpression()), !dbg !13095
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !13096, metadata !DIExpression()), !dbg !13095
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !13095
  %cmp = icmp sge i32 %0, 0, !dbg !13095
  %conv = zext i1 %cmp to i32, !dbg !13095
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !13095
  %tobool = icmp ne %struct.VEC_basic_block_base* %1, null, !dbg !13095
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13095

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !13095
  %alloc = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 1, !dbg !13095
  %3 = load i32, i32* %alloc, align 4, !dbg !13095
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !13095
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 0, !dbg !13095
  %5 = load i32, i32* %num, align 8, !dbg !13095
  %sub = sub i32 %3, %5, !dbg !13095
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !13095
  %cmp1 = icmp uge i32 %sub, %6, !dbg !13095
  %conv2 = zext i1 %cmp1 to i32, !dbg !13095
  br label %cond.end, !dbg !13095

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !13095
  %tobool3 = icmp ne i32 %7, 0, !dbg !13095
  %lnot = xor i1 %tobool3, true, !dbg !13095
  %lnot.ext = zext i1 %lnot to i32, !dbg !13095
  br label %cond.end, !dbg !13095

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !13095
  ret i32 %cond, !dbg !13095
}

; Function Attrs: noinline nounwind uwtable
define internal void @build_gimple_cfg(%struct.gimple_seq_d* %seq) #0 !dbg !13097 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  %local_dump_flags = alloca i32, align 4
  %vcg_file = alloca %struct._IO_FILE*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !13098, metadata !DIExpression()), !dbg !13099
  call void @gimple_register_cfg_hooks(), !dbg !13100
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%struct.cfg_stats_d* @cfg_stats to i8*), i8 0, i64 8, i1 false), !dbg !13101
  call void @init_empty_tree_cfg(), !dbg !13102
  store i8 0, i8* @found_computed_goto, align 1, !dbg !13103
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !13104
  call void @make_blocks(%struct.gimple_seq_d* %0), !dbg !13105
  %1 = load i8, i8* @found_computed_goto, align 1, !dbg !13106
  %tobool = icmp ne i8 %1, 0, !dbg !13106
  br i1 %tobool, label %if.then, label %if.end, !dbg !13108

if.then:                                          ; preds = %entry
  call void @factor_computed_gotos(), !dbg !13109
  br label %if.end, !dbg !13109

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13110
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !13110
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !13110
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !13110
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 3, !dbg !13110
  %4 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !13110
  %cmp = icmp eq i32 %4, 2, !dbg !13112
  br i1 %cmp, label %if.then1, label %if.end4, !dbg !13113

if.then1:                                         ; preds = %if.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13114
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !13114
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 1, !dbg !13114
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !13114
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 0, !dbg !13114
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !13114
  %call = call %struct.basic_block_def* @create_empty_bb(%struct.basic_block_def* %7), !dbg !13115
  br label %if.end4, !dbg !13115

if.end4:                                          ; preds = %if.then1, %if.end
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13116
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !13116
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !13116
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !13116
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 2, !dbg !13116
  %10 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !13116
  %tobool7 = icmp ne %struct.VEC_basic_block_gc* %10, null, !dbg !13116
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !13116

cond.true:                                        ; preds = %if.end4
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13116
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !13116
  %cfg9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 1, !dbg !13116
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg9, align 8, !dbg !13116
  %x_basic_block_info10 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i32 0, i32 2, !dbg !13116
  %13 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info10, align 8, !dbg !13116
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %13, i32 0, i32 0, !dbg !13116
  br label %cond.end, !dbg !13116

cond.false:                                       ; preds = %if.end4
  br label %cond.end, !dbg !13116

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13116
  %call11 = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond), !dbg !13116
  %conv = zext i32 %call11 to i64, !dbg !13116
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13118
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !13118
  %cfg13 = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 1, !dbg !13118
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !13118
  %x_n_basic_blocks14 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 3, !dbg !13118
  %16 = load i32, i32* %x_n_basic_blocks14, align 8, !dbg !13118
  %conv15 = sext i32 %16 to i64, !dbg !13119
  %cmp16 = icmp ult i64 %conv, %conv15, !dbg !13120
  br i1 %cmp16, label %if.then18, label %if.end25, !dbg !13121

if.then18:                                        ; preds = %cond.end
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13122
  %add.ptr19 = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !13122
  %cfg20 = getelementptr inbounds %struct.function, %struct.function* %add.ptr19, i32 0, i32 1, !dbg !13122
  %18 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg20, align 8, !dbg !13122
  %x_basic_block_info21 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %18, i32 0, i32 2, !dbg !13122
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13122
  %add.ptr22 = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !13122
  %cfg23 = getelementptr inbounds %struct.function, %struct.function* %add.ptr22, i32 0, i32 1, !dbg !13122
  %20 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg23, align 8, !dbg !13122
  %x_n_basic_blocks24 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %20, i32 0, i32 3, !dbg !13122
  %21 = load i32, i32* %x_n_basic_blocks24, align 8, !dbg !13122
  call void @VEC_basic_block_gc_safe_grow_cleared(%struct.VEC_basic_block_gc** %x_basic_block_info21, i32 %21), !dbg !13122
  br label %if.end25, !dbg !13122

if.end25:                                         ; preds = %if.then18, %cond.end
  call void @cleanup_dead_labels(), !dbg !13123
  call void @group_case_labels(), !dbg !13124
  %call26 = call %struct.htab* @htab_create(i64 13, i32 (i8*)* @locus_map_hash, i32 (i8*, i8*)* @locus_map_eq, void (i8*)* @free), !dbg !13125
  store %struct.htab* %call26, %struct.htab** @discriminator_per_locus, align 8, !dbg !13126
  call void @make_edges(), !dbg !13127
  call void @cleanup_dead_labels(), !dbg !13128
  %22 = load %struct.htab*, %struct.htab** @discriminator_per_locus, align 8, !dbg !13129
  call void @htab_delete(%struct.htab* %22), !dbg !13130
  call void @llvm.dbg.declare(metadata i32* %local_dump_flags, metadata !13131, metadata !DIExpression()), !dbg !13133
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %vcg_file, metadata !13134, metadata !DIExpression()), !dbg !13135
  %call27 = call %struct._IO_FILE* @dump_begin(i32 7, i32* %local_dump_flags), !dbg !13136
  store %struct._IO_FILE* %call27, %struct._IO_FILE** %vcg_file, align 8, !dbg !13135
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %vcg_file, align 8, !dbg !13137
  %tobool28 = icmp ne %struct._IO_FILE* %23, null, !dbg !13137
  br i1 %tobool28, label %if.then29, label %if.end30, !dbg !13139

if.then29:                                        ; preds = %if.end25
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %vcg_file, align 8, !dbg !13140
  call void @gimple_cfg2vcg(%struct._IO_FILE* %24), !dbg !13142
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %vcg_file, align 8, !dbg !13143
  call void @dump_end(i32 7, %struct._IO_FILE* %25), !dbg !13144
  br label %if.end30, !dbg !13145

if.end30:                                         ; preds = %if.then29, %if.end25
  ret void, !dbg !13146
}

declare dso_local void @gimple_set_body(%union.tree_node*, %struct.gimple_seq_d*) #2

declare dso_local void @dump_scope_blocks(%struct._IO_FILE*, i32) #2

declare dso_local void @gimple_register_cfg_hooks() #2

; Function Attrs: noinline nounwind uwtable
define internal void @make_blocks(%struct.gimple_seq_d* %seq) #0 !dbg !13147 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  %i = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %start_new_block = alloca i8, align 1
  %first_stmt_of_seq = alloca i8, align 1
  %bb = alloca %struct.basic_block_def*, align 8
  %prev_stmt = alloca %union.gimple_statement_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %s = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !13148, metadata !DIExpression()), !dbg !13149
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !13150, metadata !DIExpression()), !dbg !13151
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !13152
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %i, %struct.gimple_seq_d* %0), !dbg !13153
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !13154, metadata !DIExpression()), !dbg !13155
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !13155
  call void @llvm.dbg.declare(metadata i8* %start_new_block, metadata !13156, metadata !DIExpression()), !dbg !13157
  store i8 1, i8* %start_new_block, align 1, !dbg !13157
  call void @llvm.dbg.declare(metadata i8* %first_stmt_of_seq, metadata !13158, metadata !DIExpression()), !dbg !13159
  store i8 1, i8* %first_stmt_of_seq, align 1, !dbg !13159
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !13160, metadata !DIExpression()), !dbg !13161
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13162
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !13162
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !13162
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !13162
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 0, !dbg !13162
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !13162
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !13161
  br label %while.cond, !dbg !13163

while.cond:                                       ; preds = %if.end54, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !13164
  %tobool = icmp ne i8 %call, 0, !dbg !13165
  %lnot = xor i1 %tobool, true, !dbg !13165
  br i1 %lnot, label %while.body, label %while.end, !dbg !13163

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %prev_stmt, metadata !13166, metadata !DIExpression()), !dbg !13168
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13169
  store %union.gimple_statement_d* %4, %union.gimple_statement_d** %prev_stmt, align 8, !dbg !13170
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !13171
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !13172
  %5 = load i8, i8* %start_new_block, align 1, !dbg !13173
  %conv = zext i8 %5 to i32, !dbg !13173
  %tobool2 = icmp ne i32 %conv, 0, !dbg !13173
  br i1 %tobool2, label %if.then, label %lor.lhs.false, !dbg !13175

lor.lhs.false:                                    ; preds = %while.body
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13176
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %prev_stmt, align 8, !dbg !13177
  %call3 = call zeroext i8 @stmt_starts_bb_p(%union.gimple_statement_d* %6, %union.gimple_statement_d* %7), !dbg !13178
  %conv4 = zext i8 %call3 to i32, !dbg !13178
  %tobool5 = icmp ne i32 %conv4, 0, !dbg !13178
  br i1 %tobool5, label %if.then, label %if.end10, !dbg !13179

if.then:                                          ; preds = %lor.lhs.false, %while.body
  %8 = load i8, i8* %first_stmt_of_seq, align 1, !dbg !13180
  %tobool6 = icmp ne i8 %8, 0, !dbg !13180
  br i1 %tobool6, label %if.end, label %if.then7, !dbg !13183

if.then7:                                         ; preds = %if.then
  %call8 = call %struct.gimple_seq_d* @gsi_split_seq_before(%struct.gimple_stmt_iterator* %i), !dbg !13184
  store %struct.gimple_seq_d* %call8, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !13185
  br label %if.end, !dbg !13186

if.end:                                           ; preds = %if.then7, %if.then
  %9 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !13187
  %10 = bitcast %struct.gimple_seq_d* %9 to i8*, !dbg !13187
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13188
  %call9 = call %struct.basic_block_def* @create_basic_block(i8* %10, i8* null, %struct.basic_block_def* %11), !dbg !13189
  store %struct.basic_block_def* %call9, %struct.basic_block_def** %bb, align 8, !dbg !13190
  store i8 0, i8* %start_new_block, align 1, !dbg !13191
  br label %if.end10, !dbg !13192

if.end10:                                         ; preds = %if.end, %lor.lhs.false
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13193
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13194
  call void @gimple_set_bb(%union.gimple_statement_d* %12, %struct.basic_block_def* %13), !dbg !13195
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13196
  %call11 = call zeroext i8 @computed_goto_p(%union.gimple_statement_d* %14), !dbg !13198
  %tobool12 = icmp ne i8 %call11, 0, !dbg !13198
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !13199

if.then13:                                        ; preds = %if.end10
  store i8 1, i8* @found_computed_goto, align 1, !dbg !13200
  br label %if.end14, !dbg !13201

if.end14:                                         ; preds = %if.then13, %if.end10
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13202
  %call15 = call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %15), !dbg !13204
  %tobool16 = icmp ne i8 %call15, 0, !dbg !13204
  br i1 %tobool16, label %if.then17, label %if.end54, !dbg !13205

if.then17:                                        ; preds = %if.end14
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13206
  %call18 = call zeroext i8 @gimple_has_lhs(%union.gimple_statement_d* %16), !dbg !13209
  %conv19 = zext i8 %call18 to i32, !dbg !13209
  %tobool20 = icmp ne i32 %conv19, 0, !dbg !13209
  br i1 %tobool20, label %land.lhs.true, label %if.end53, !dbg !13210

land.lhs.true:                                    ; preds = %if.then17
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13211
  %call21 = call zeroext i8 @stmt_can_make_abnormal_goto(%union.gimple_statement_d* %17), !dbg !13212
  %conv22 = zext i8 %call21 to i32, !dbg !13212
  %tobool23 = icmp ne i32 %conv22, 0, !dbg !13212
  br i1 %tobool23, label %land.lhs.true24, label %if.end53, !dbg !13213

land.lhs.true24:                                  ; preds = %land.lhs.true
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13214
  %call25 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %18), !dbg !13214
  %common = bitcast %union.tree_node* %call25 to %struct.tree_common*, !dbg !13214
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !13214
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13214
  %call26 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %19), !dbg !13215
  %conv27 = zext i8 %call26 to i32, !dbg !13215
  %tobool28 = icmp ne i32 %conv27, 0, !dbg !13215
  br i1 %tobool28, label %if.then29, label %if.end53, !dbg !13216

if.then29:                                        ; preds = %land.lhs.true24
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !13217, metadata !DIExpression()), !dbg !13219
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13220
  %call30 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %20), !dbg !13221
  store %union.tree_node* %call30, %union.tree_node** %lhs, align 8, !dbg !13219
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !13222, metadata !DIExpression()), !dbg !13223
  %21 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !13224
  %common31 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !13224
  %type32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2, !dbg !13224
  %22 = load %union.tree_node*, %union.tree_node** %type32, align 8, !dbg !13224
  %call33 = call %union.tree_node* @create_tmp_var(%union.tree_node* %22, i8* null), !dbg !13225
  store %union.tree_node* %call33, %union.tree_node** %tmp, align 8, !dbg !13223
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s, metadata !13226, metadata !DIExpression()), !dbg !13227
  %23 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !13228
  %24 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !13228
  %call34 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %23, %union.tree_node* %24), !dbg !13228
  store %union.gimple_statement_d* %call34, %union.gimple_statement_d** %s, align 8, !dbg !13227
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s, align 8, !dbg !13229
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13230
  %call35 = call i32 @gimple_location(%union.gimple_statement_d* %26), !dbg !13231
  call void @gimple_set_location(%union.gimple_statement_d* %25, i32 %call35), !dbg !13232
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s, align 8, !dbg !13233
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13234
  %call36 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %28), !dbg !13235
  call void @gimple_set_block(%union.gimple_statement_d* %27, %union.tree_node* %call36), !dbg !13236
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13237
  %30 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !13238
  call void @gimple_set_lhs(%union.gimple_statement_d* %29, %union.tree_node* %30), !dbg !13239
  %31 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !13240
  %common37 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !13240
  %type38 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common37, i32 0, i32 2, !dbg !13240
  %32 = load %union.tree_node*, %union.tree_node** %type38, align 8, !dbg !13240
  %base = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !13240
  %33 = bitcast %struct.tree_base* %base to i64*, !dbg !13240
  %bf.load = load i64, i64* %33, align 8, !dbg !13240
  %bf.clear = and i64 %bf.load, 65535, !dbg !13240
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13240
  %cmp = icmp eq i32 %bf.cast, 13, !dbg !13242
  br i1 %cmp, label %if.then49, label %lor.lhs.false40, !dbg !13243

lor.lhs.false40:                                  ; preds = %if.then29
  %34 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !13244
  %common41 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !13244
  %type42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 2, !dbg !13244
  %35 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !13244
  %base43 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !13244
  %36 = bitcast %struct.tree_base* %base43 to i64*, !dbg !13244
  %bf.load44 = load i64, i64* %36, align 8, !dbg !13244
  %bf.clear45 = and i64 %bf.load44, 65535, !dbg !13244
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !13244
  %cmp47 = icmp eq i32 %bf.cast46, 14, !dbg !13245
  br i1 %cmp47, label %if.then49, label %if.end52, !dbg !13246

if.then49:                                        ; preds = %lor.lhs.false40, %if.then29
  %37 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !13247
  %decl_common = bitcast %union.tree_node* %37 to %struct.tree_decl_common*, !dbg !13247
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !13247
  %38 = bitcast i40* %gimple_reg_flag to i64*, !dbg !13247
  %bf.load50 = load i64, i64* %38, align 8, !dbg !13248
  %bf.clear51 = and i64 %bf.load50, -134217729, !dbg !13248
  %bf.set = or i64 %bf.clear51, 134217728, !dbg !13248
  store i64 %bf.set, i64* %38, align 8, !dbg !13248
  br label %if.end52, !dbg !13247

if.end52:                                         ; preds = %if.then49, %lor.lhs.false40
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s, align 8, !dbg !13249
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %i, %union.gimple_statement_d* %39, i32 1), !dbg !13250
  br label %if.end53, !dbg !13251

if.end53:                                         ; preds = %if.end52, %land.lhs.true24, %land.lhs.true, %if.then17
  store i8 1, i8* %start_new_block, align 1, !dbg !13252
  br label %if.end54, !dbg !13253

if.end54:                                         ; preds = %if.end53, %if.end14
  call void @gsi_next(%struct.gimple_stmt_iterator* %i), !dbg !13254
  store i8 0, i8* %first_stmt_of_seq, align 1, !dbg !13255
  br label %while.cond, !dbg !13163, !llvm.loop !13256

while.end:                                        ; preds = %while.cond
  ret void, !dbg !13258
}

; Function Attrs: noinline nounwind uwtable
define internal void @factor_computed_gotos() #0 !dbg !13259 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %factored_label_decl = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %factored_computed_goto_label = alloca %union.gimple_statement_d*, align 8
  %factored_computed_goto = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %last = alloca %union.gimple_statement_d*, align 8
  %assignment = alloca %union.gimple_statement_d*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %new_gsi = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !13260, metadata !DIExpression()), !dbg !13261
  call void @llvm.dbg.declare(metadata %union.tree_node** %factored_label_decl, metadata !13262, metadata !DIExpression()), !dbg !13263
  store %union.tree_node* null, %union.tree_node** %factored_label_decl, align 8, !dbg !13263
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !13264, metadata !DIExpression()), !dbg !13265
  store %union.tree_node* null, %union.tree_node** %var, align 8, !dbg !13265
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %factored_computed_goto_label, metadata !13266, metadata !DIExpression()), !dbg !13267
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %factored_computed_goto_label, align 8, !dbg !13267
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %factored_computed_goto, metadata !13268, metadata !DIExpression()), !dbg !13269
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %factored_computed_goto, align 8, !dbg !13269
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13270
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !13270
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !13270
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !13270
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !13270
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !13270
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !13270
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !13270
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !13270
  br label %for.cond, !dbg !13270

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13272
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13272
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !13272
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !13272
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !13272
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !13272
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !13272
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !13272
  br i1 %cmp, label %for.body, label %for.end, !dbg !13270

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !13274, metadata !DIExpression()), !dbg !13276
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13277
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %gsi, %struct.basic_block_def* %8), !dbg !13278
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last, metadata !13279, metadata !DIExpression()), !dbg !13280
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !13281
  %tobool = icmp ne i8 %call, 0, !dbg !13281
  br i1 %tobool, label %if.then, label %if.end, !dbg !13283

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !13284

if.end:                                           ; preds = %for.body
  %call3 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !13285
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %last, align 8, !dbg !13286
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !13287
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %factored_computed_goto, align 8, !dbg !13289
  %cmp4 = icmp eq %union.gimple_statement_d* %9, %10, !dbg !13290
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !13291

if.then5:                                         ; preds = %if.end
  br label %for.inc, !dbg !13292

if.end6:                                          ; preds = %if.end
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !13293
  %call7 = call zeroext i8 @computed_goto_p(%union.gimple_statement_d* %11), !dbg !13295
  %tobool8 = icmp ne i8 %call7, 0, !dbg !13295
  br i1 %tobool8, label %if.then9, label %if.end20, !dbg !13296

if.then9:                                         ; preds = %if.end6
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %assignment, metadata !13297, metadata !DIExpression()), !dbg !13299
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %factored_computed_goto, align 8, !dbg !13300
  %tobool10 = icmp ne %union.gimple_statement_d* %12, null, !dbg !13300
  br i1 %tobool10, label %if.end17, label %if.then11, !dbg !13302

if.then11:                                        ; preds = %if.then9
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !13303, metadata !DIExpression()), !dbg !13305
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13306
  %call12 = call %struct.basic_block_def* @create_empty_bb(%struct.basic_block_def* %13), !dbg !13307
  store %struct.basic_block_def* %call12, %struct.basic_block_def** %new_bb, align 8, !dbg !13305
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %new_gsi, metadata !13308, metadata !DIExpression()), !dbg !13309
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !13310
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %new_gsi, %struct.basic_block_def* %14), !dbg !13311
  %15 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !13312
  %call13 = call %union.tree_node* @create_tmp_var(%union.tree_node* %15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.49, i64 0, i64 0)), !dbg !13313
  store %union.tree_node* %call13, %union.tree_node** %var, align 8, !dbg !13314
  %call14 = call %union.tree_node* @create_artificial_label(i32 0), !dbg !13315
  store %union.tree_node* %call14, %union.tree_node** %factored_label_decl, align 8, !dbg !13316
  %16 = load %union.tree_node*, %union.tree_node** %factored_label_decl, align 8, !dbg !13317
  %call15 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %16), !dbg !13318
  store %union.gimple_statement_d* %call15, %union.gimple_statement_d** %factored_computed_goto_label, align 8, !dbg !13319
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %factored_computed_goto_label, align 8, !dbg !13320
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %new_gsi, %union.gimple_statement_d* %17, i32 0), !dbg !13321
  %18 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !13322
  %call16 = call %union.gimple_statement_d* @gimple_build_goto(%union.tree_node* %18), !dbg !13323
  store %union.gimple_statement_d* %call16, %union.gimple_statement_d** %factored_computed_goto, align 8, !dbg !13324
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %factored_computed_goto, align 8, !dbg !13325
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %new_gsi, %union.gimple_statement_d* %19, i32 0), !dbg !13326
  br label %if.end17, !dbg !13327

if.end17:                                         ; preds = %if.then11, %if.then9
  %20 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !13328
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !13328
  %call18 = call %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %21), !dbg !13328
  %call19 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %20, %union.tree_node* %call18), !dbg !13328
  store %union.gimple_statement_d* %call19, %union.gimple_statement_d** %assignment, align 8, !dbg !13329
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %assignment, align 8, !dbg !13330
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %22, i32 1), !dbg !13331
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !13332
  %24 = load %union.tree_node*, %union.tree_node** %factored_label_decl, align 8, !dbg !13333
  call void @gimple_goto_set_dest(%union.gimple_statement_d* %23, %union.tree_node* %24), !dbg !13334
  br label %if.end20, !dbg !13335

if.end20:                                         ; preds = %if.end17, %if.end6
  br label %for.inc, !dbg !13336

for.inc:                                          ; preds = %if.end20, %if.then5, %if.then
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13272
  %next_bb21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 6, !dbg !13272
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb21, align 8, !dbg !13272
  store %struct.basic_block_def* %26, %struct.basic_block_def** %bb, align 8, !dbg !13272
  br label %for.cond, !dbg !13272, !llvm.loop !13337

for.end:                                          ; preds = %for.cond
  ret void, !dbg !13339
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @locus_map_hash(i8* %item) #0 !dbg !13340 {
entry:
  %item.addr = alloca i8*, align 8
  store i8* %item, i8** %item.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %item.addr, metadata !13343, metadata !DIExpression()), !dbg !13344
  %0 = load i8*, i8** %item.addr, align 8, !dbg !13345
  %1 = bitcast i8* %0 to %struct.locus_discrim_map*, !dbg !13346
  %locus = getelementptr inbounds %struct.locus_discrim_map, %struct.locus_discrim_map* %1, i32 0, i32 0, !dbg !13347
  %2 = load i32, i32* %locus, align 4, !dbg !13347
  ret i32 %2, !dbg !13348
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @locus_map_eq(i8* %va, i8* %vb) #0 !dbg !13349 {
entry:
  %va.addr = alloca i8*, align 8
  %vb.addr = alloca i8*, align 8
  %a = alloca %struct.locus_discrim_map*, align 8
  %b = alloca %struct.locus_discrim_map*, align 8
  store i8* %va, i8** %va.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %va.addr, metadata !13350, metadata !DIExpression()), !dbg !13351
  store i8* %vb, i8** %vb.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vb.addr, metadata !13352, metadata !DIExpression()), !dbg !13353
  call void @llvm.dbg.declare(metadata %struct.locus_discrim_map** %a, metadata !13354, metadata !DIExpression()), !dbg !13355
  %0 = load i8*, i8** %va.addr, align 8, !dbg !13356
  %1 = bitcast i8* %0 to %struct.locus_discrim_map*, !dbg !13357
  store %struct.locus_discrim_map* %1, %struct.locus_discrim_map** %a, align 8, !dbg !13355
  call void @llvm.dbg.declare(metadata %struct.locus_discrim_map** %b, metadata !13358, metadata !DIExpression()), !dbg !13359
  %2 = load i8*, i8** %vb.addr, align 8, !dbg !13360
  %3 = bitcast i8* %2 to %struct.locus_discrim_map*, !dbg !13361
  store %struct.locus_discrim_map* %3, %struct.locus_discrim_map** %b, align 8, !dbg !13359
  %4 = load %struct.locus_discrim_map*, %struct.locus_discrim_map** %a, align 8, !dbg !13362
  %locus = getelementptr inbounds %struct.locus_discrim_map, %struct.locus_discrim_map* %4, i32 0, i32 0, !dbg !13363
  %5 = load i32, i32* %locus, align 4, !dbg !13363
  %6 = load %struct.locus_discrim_map*, %struct.locus_discrim_map** %b, align 8, !dbg !13364
  %locus1 = getelementptr inbounds %struct.locus_discrim_map, %struct.locus_discrim_map* %6, i32 0, i32 0, !dbg !13365
  %7 = load i32, i32* %locus1, align 4, !dbg !13365
  %cmp = icmp eq i32 %5, %7, !dbg !13366
  %conv = zext i1 %cmp to i32, !dbg !13366
  ret i32 %conv, !dbg !13367
}

; Function Attrs: noinline nounwind uwtable
define internal void @make_edges() #0 !dbg !13368 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %cur_region = alloca %struct.omp_region*, align 8
  %last = alloca %union.gimple_statement_d*, align 8
  %fallthru = alloca i8, align 1
  %code = alloca i32, align 4
  %switch_bb = alloca %struct.basic_block_def*, align 8
  %i = alloca %struct.omp_region*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !13369, metadata !DIExpression()), !dbg !13370
  call void @llvm.dbg.declare(metadata %struct.omp_region** %cur_region, metadata !13371, metadata !DIExpression()), !dbg !13385
  store %struct.omp_region* null, %struct.omp_region** %cur_region, align 8, !dbg !13385
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13386
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !13386
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !13386
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !13386
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !13386
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !13386
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13387
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !13387
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !13387
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !13387
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 2, !dbg !13387
  %5 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !13387
  %tobool = icmp ne %struct.VEC_basic_block_gc* %5, null, !dbg !13387
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13387

cond.true:                                        ; preds = %entry
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13387
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !13387
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !13387
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !13387
  %x_basic_block_info5 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 2, !dbg !13387
  %8 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info5, align 8, !dbg !13387
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %8, i32 0, i32 0, !dbg !13387
  br label %cond.end, !dbg !13387

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13387

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13387
  %call = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 2), !dbg !13387
  %call6 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %2, %struct.basic_block_def* %call, i32 1), !dbg !13388
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13389
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !13389
  %cfg8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 1, !dbg !13389
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg8, align 8, !dbg !13389
  %x_entry_block_ptr9 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 0, !dbg !13389
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr9, align 8, !dbg !13389
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 6, !dbg !13389
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !13389
  store %struct.basic_block_def* %12, %struct.basic_block_def** %bb, align 8, !dbg !13389
  br label %for.cond, !dbg !13389

for.cond:                                         ; preds = %for.inc99, %cond.end
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13391
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13391
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !13391
  %cfg11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 1, !dbg !13391
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg11, align 8, !dbg !13391
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 1, !dbg !13391
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !13391
  %cmp = icmp ne %struct.basic_block_def* %13, %16, !dbg !13391
  br i1 %cmp, label %for.body, label %for.end101, !dbg !13389

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last, metadata !13393, metadata !DIExpression()), !dbg !13395
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13396
  %call12 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %17), !dbg !13397
  store %union.gimple_statement_d* %call12, %union.gimple_statement_d** %last, align 8, !dbg !13395
  call void @llvm.dbg.declare(metadata i8* %fallthru, metadata !13398, metadata !DIExpression()), !dbg !13399
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !13400
  %tobool13 = icmp ne %union.gimple_statement_d* %18, null, !dbg !13400
  br i1 %tobool13, label %if.then, label %if.else, !dbg !13402

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %code, metadata !13403, metadata !DIExpression()), !dbg !13405
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !13406
  %call14 = call i32 @gimple_code(%union.gimple_statement_d* %19), !dbg !13407
  store i32 %call14, i32* %code, align 4, !dbg !13405
  %20 = load i32, i32* %code, align 4, !dbg !13408
  switch i32 %20, label %sw.default80 [
    i32 3, label %sw.bb
    i32 9, label %sw.bb15
    i32 1, label %sw.bb20
    i32 5, label %sw.bb21
    i32 14, label %sw.bb22
    i32 15, label %sw.bb23
    i32 8, label %sw.bb25
    i32 6, label %sw.bb31
    i32 7, label %sw.bb36
    i32 26, label %sw.bb37
    i32 27, label %sw.bb37
    i32 23, label %sw.bb37
    i32 32, label %sw.bb37
    i32 24, label %sw.bb37
    i32 25, label %sw.bb37
    i32 22, label %sw.bb37
    i32 29, label %sw.bb37
    i32 30, label %sw.bb39
    i32 31, label %sw.bb41
    i32 19, label %sw.bb42
    i32 20, label %sw.bb42
    i32 28, label %sw.bb43
    i32 21, label %sw.bb47
  ], !dbg !13409

sw.bb:                                            ; preds = %if.then
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13410
  call void @make_goto_expr_edges(%struct.basic_block_def* %21), !dbg !13412
  store i8 0, i8* %fallthru, align 1, !dbg !13413
  br label %sw.epilog87, !dbg !13414

sw.bb15:                                          ; preds = %if.then
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13415
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13416
  %add.ptr16 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !13416
  %cfg17 = getelementptr inbounds %struct.function, %struct.function* %add.ptr16, i32 0, i32 1, !dbg !13416
  %24 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg17, align 8, !dbg !13416
  %x_exit_block_ptr18 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %24, i32 0, i32 1, !dbg !13416
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr18, align 8, !dbg !13416
  %call19 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %22, %struct.basic_block_def* %25, i32 0), !dbg !13417
  store i8 0, i8* %fallthru, align 1, !dbg !13418
  br label %sw.epilog87, !dbg !13419

sw.bb20:                                          ; preds = %if.then
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13420
  call void @make_cond_expr_edges(%struct.basic_block_def* %26), !dbg !13421
  store i8 0, i8* %fallthru, align 1, !dbg !13422
  br label %sw.epilog87, !dbg !13423

sw.bb21:                                          ; preds = %if.then
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13424
  call void @make_gimple_switch_edges(%struct.basic_block_def* %27), !dbg !13425
  store i8 0, i8* %fallthru, align 1, !dbg !13426
  br label %sw.epilog87, !dbg !13427

sw.bb22:                                          ; preds = %if.then
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !13428
  call void @make_eh_edges(%union.gimple_statement_d* %28), !dbg !13429
  store i8 0, i8* %fallthru, align 1, !dbg !13430
  br label %sw.epilog87, !dbg !13431

sw.bb23:                                          ; preds = %if.then
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !13432
  %call24 = call zeroext i8 @make_eh_dispatch_edges(%union.gimple_statement_d* %29), !dbg !13433
  store i8 %call24, i8* %fallthru, align 1, !dbg !13434
  br label %sw.epilog87, !dbg !13435

sw.bb25:                                          ; preds = %if.then
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !13436
  %call26 = call zeroext i8 @stmt_can_make_abnormal_goto(%union.gimple_statement_d* %30), !dbg !13438
  %tobool27 = icmp ne i8 %call26, 0, !dbg !13438
  br i1 %tobool27, label %if.then28, label %if.end, !dbg !13439

if.then28:                                        ; preds = %sw.bb25
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13440
  call void @make_abnormal_goto_edges(%struct.basic_block_def* %31, i8 zeroext 1), !dbg !13441
  br label %if.end, !dbg !13441

if.end:                                           ; preds = %if.then28, %sw.bb25
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !13442
  call void @make_eh_edges(%union.gimple_statement_d* %32), !dbg !13443
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !13444
  %call29 = call i32 @gimple_call_flags(%union.gimple_statement_d* %33), !dbg !13445
  %and = and i32 %call29, 8, !dbg !13446
  %tobool30 = icmp ne i32 %and, 0, !dbg !13447
  %lnot = xor i1 %tobool30, true, !dbg !13447
  %lnot.ext = zext i1 %lnot to i32, !dbg !13447
  %conv = trunc i32 %lnot.ext to i8, !dbg !13447
  store i8 %conv, i8* %fallthru, align 1, !dbg !13448
  br label %sw.epilog87, !dbg !13449

sw.bb31:                                          ; preds = %if.then
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !13450
  %call32 = call zeroext i8 @is_ctrl_altering_stmt(%union.gimple_statement_d* %34), !dbg !13452
  %tobool33 = icmp ne i8 %call32, 0, !dbg !13452
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !13453

if.then34:                                        ; preds = %sw.bb31
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !13454
  call void @make_eh_edges(%union.gimple_statement_d* %35), !dbg !13455
  br label %if.end35, !dbg !13455

if.end35:                                         ; preds = %if.then34, %sw.bb31
  store i8 1, i8* %fallthru, align 1, !dbg !13456
  br label %sw.epilog87, !dbg !13457

sw.bb36:                                          ; preds = %if.then
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13458
  call void @make_gimple_asm_edges(%struct.basic_block_def* %36), !dbg !13459
  store i8 1, i8* %fallthru, align 1, !dbg !13460
  br label %sw.epilog87, !dbg !13461

sw.bb37:                                          ; preds = %if.then, %if.then, %if.then, %if.then, %if.then, %if.then, %if.then, %if.then
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13462
  %38 = load i32, i32* %code, align 4, !dbg !13463
  %39 = load %struct.omp_region*, %struct.omp_region** %cur_region, align 8, !dbg !13464
  %call38 = call %struct.omp_region* @new_omp_region(%struct.basic_block_def* %37, i32 %38, %struct.omp_region* %39), !dbg !13465
  store %struct.omp_region* %call38, %struct.omp_region** %cur_region, align 8, !dbg !13466
  store i8 1, i8* %fallthru, align 1, !dbg !13467
  br label %sw.epilog87, !dbg !13468

sw.bb39:                                          ; preds = %if.then
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13469
  %41 = load i32, i32* %code, align 4, !dbg !13470
  %42 = load %struct.omp_region*, %struct.omp_region** %cur_region, align 8, !dbg !13471
  %call40 = call %struct.omp_region* @new_omp_region(%struct.basic_block_def* %40, i32 %41, %struct.omp_region* %42), !dbg !13472
  store %struct.omp_region* %call40, %struct.omp_region** %cur_region, align 8, !dbg !13473
  store i8 1, i8* %fallthru, align 1, !dbg !13474
  br label %sw.epilog87, !dbg !13475

sw.bb41:                                          ; preds = %if.then
  store i8 0, i8* %fallthru, align 1, !dbg !13476
  br label %sw.epilog87, !dbg !13477

sw.bb42:                                          ; preds = %if.then, %if.then
  store i8 1, i8* %fallthru, align 1, !dbg !13478
  br label %sw.epilog87, !dbg !13479

sw.bb43:                                          ; preds = %if.then
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13480
  %44 = load %struct.omp_region*, %struct.omp_region** %cur_region, align 8, !dbg !13481
  %exit = getelementptr inbounds %struct.omp_region, %struct.omp_region* %44, i32 0, i32 4, !dbg !13482
  store %struct.basic_block_def* %43, %struct.basic_block_def** %exit, align 8, !dbg !13483
  %45 = load %struct.omp_region*, %struct.omp_region** %cur_region, align 8, !dbg !13484
  %type = getelementptr inbounds %struct.omp_region, %struct.omp_region* %45, i32 0, i32 7, !dbg !13485
  %46 = load i32, i32* %type, align 8, !dbg !13485
  %cmp44 = icmp ne i32 %46, 29, !dbg !13486
  %conv45 = zext i1 %cmp44 to i32, !dbg !13486
  %conv46 = trunc i32 %conv45 to i8, !dbg !13484
  store i8 %conv46, i8* %fallthru, align 1, !dbg !13487
  %47 = load %struct.omp_region*, %struct.omp_region** %cur_region, align 8, !dbg !13488
  %outer = getelementptr inbounds %struct.omp_region, %struct.omp_region* %47, i32 0, i32 0, !dbg !13489
  %48 = load %struct.omp_region*, %struct.omp_region** %outer, align 8, !dbg !13489
  store %struct.omp_region* %48, %struct.omp_region** %cur_region, align 8, !dbg !13490
  br label %sw.epilog87, !dbg !13491

sw.bb47:                                          ; preds = %if.then
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13492
  %50 = load %struct.omp_region*, %struct.omp_region** %cur_region, align 8, !dbg !13493
  %cont = getelementptr inbounds %struct.omp_region, %struct.omp_region* %50, i32 0, i32 5, !dbg !13494
  store %struct.basic_block_def* %49, %struct.basic_block_def** %cont, align 8, !dbg !13495
  %51 = load %struct.omp_region*, %struct.omp_region** %cur_region, align 8, !dbg !13496
  %type48 = getelementptr inbounds %struct.omp_region, %struct.omp_region* %51, i32 0, i32 7, !dbg !13497
  %52 = load i32, i32* %type48, align 8, !dbg !13497
  switch i32 %52, label %sw.default [
    i32 23, label %sw.bb49
    i32 30, label %sw.bb60
  ], !dbg !13498

sw.bb49:                                          ; preds = %sw.bb47
  %53 = load %struct.omp_region*, %struct.omp_region** %cur_region, align 8, !dbg !13499
  %entry50 = getelementptr inbounds %struct.omp_region, %struct.omp_region* %53, i32 0, i32 3, !dbg !13501
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %entry50, align 8, !dbg !13501
  %call51 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %54), !dbg !13502
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call51, i32 0, i32 7, !dbg !13503
  %55 = load i32, i32* %flags, align 8, !dbg !13504
  %or = or i32 %55, 2, !dbg !13504
  store i32 %or, i32* %flags, align 8, !dbg !13504
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13505
  %57 = load %struct.omp_region*, %struct.omp_region** %cur_region, align 8, !dbg !13506
  %entry52 = getelementptr inbounds %struct.omp_region, %struct.omp_region* %57, i32 0, i32 3, !dbg !13507
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %entry52, align 8, !dbg !13507
  %call53 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %58), !dbg !13508
  %call54 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %56, %struct.basic_block_def* %call53, i32 2), !dbg !13509
  %59 = load %struct.omp_region*, %struct.omp_region** %cur_region, align 8, !dbg !13510
  %entry55 = getelementptr inbounds %struct.omp_region, %struct.omp_region* %59, i32 0, i32 3, !dbg !13511
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %entry55, align 8, !dbg !13511
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13512
  %next_bb56 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %61, i32 0, i32 6, !dbg !13513
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb56, align 8, !dbg !13513
  %call57 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %60, %struct.basic_block_def* %62, i32 2), !dbg !13514
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13515
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13516
  %next_bb58 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %64, i32 0, i32 6, !dbg !13517
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb58, align 8, !dbg !13517
  %call59 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %63, %struct.basic_block_def* %65, i32 3), !dbg !13518
  store i8 0, i8* %fallthru, align 1, !dbg !13519
  br label %sw.epilog, !dbg !13520

sw.bb60:                                          ; preds = %sw.bb47
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %switch_bb, metadata !13521, metadata !DIExpression()), !dbg !13523
  %66 = load %struct.omp_region*, %struct.omp_region** %cur_region, align 8, !dbg !13524
  %entry61 = getelementptr inbounds %struct.omp_region, %struct.omp_region* %66, i32 0, i32 3, !dbg !13525
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %entry61, align 8, !dbg !13525
  %call62 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %67), !dbg !13526
  store %struct.basic_block_def* %call62, %struct.basic_block_def** %switch_bb, align 8, !dbg !13523
  call void @llvm.dbg.declare(metadata %struct.omp_region** %i, metadata !13527, metadata !DIExpression()), !dbg !13528
  %68 = load %struct.omp_region*, %struct.omp_region** %cur_region, align 8, !dbg !13529
  %inner = getelementptr inbounds %struct.omp_region, %struct.omp_region* %68, i32 0, i32 1, !dbg !13531
  %69 = load %struct.omp_region*, %struct.omp_region** %inner, align 8, !dbg !13531
  store %struct.omp_region* %69, %struct.omp_region** %i, align 8, !dbg !13532
  br label %for.cond63, !dbg !13533

for.cond63:                                       ; preds = %for.inc, %sw.bb60
  %70 = load %struct.omp_region*, %struct.omp_region** %i, align 8, !dbg !13534
  %tobool64 = icmp ne %struct.omp_region* %70, null, !dbg !13536
  br i1 %tobool64, label %for.body65, label %for.end, !dbg !13536

for.body65:                                       ; preds = %for.cond63
  %71 = load %struct.omp_region*, %struct.omp_region** %i, align 8, !dbg !13537
  %type66 = getelementptr inbounds %struct.omp_region, %struct.omp_region* %71, i32 0, i32 7, !dbg !13537
  %72 = load i32, i32* %type66, align 8, !dbg !13537
  %cmp67 = icmp eq i32 %72, 29, !dbg !13537
  br i1 %cmp67, label %cond.false70, label %cond.true69, !dbg !13537

cond.true69:                                      ; preds = %for.body65
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !13537
  br label %cond.end71, !dbg !13537

cond.false70:                                     ; preds = %for.body65
  br label %cond.end71, !dbg !13537

cond.end71:                                       ; preds = %cond.false70, %cond.true69
  %cond72 = phi i32 [ 0, %cond.true69 ], [ 0, %cond.false70 ], !dbg !13537
  %73 = load %struct.basic_block_def*, %struct.basic_block_def** %switch_bb, align 8, !dbg !13539
  %74 = load %struct.omp_region*, %struct.omp_region** %i, align 8, !dbg !13540
  %entry73 = getelementptr inbounds %struct.omp_region, %struct.omp_region* %74, i32 0, i32 3, !dbg !13541
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %entry73, align 8, !dbg !13541
  %call74 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %73, %struct.basic_block_def* %75, i32 0), !dbg !13542
  %76 = load %struct.omp_region*, %struct.omp_region** %i, align 8, !dbg !13543
  %exit75 = getelementptr inbounds %struct.omp_region, %struct.omp_region* %76, i32 0, i32 4, !dbg !13544
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %exit75, align 8, !dbg !13544
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13545
  %call76 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %77, %struct.basic_block_def* %78, i32 1), !dbg !13546
  br label %for.inc, !dbg !13547

for.inc:                                          ; preds = %cond.end71
  %79 = load %struct.omp_region*, %struct.omp_region** %i, align 8, !dbg !13548
  %next = getelementptr inbounds %struct.omp_region, %struct.omp_region* %79, i32 0, i32 2, !dbg !13549
  %80 = load %struct.omp_region*, %struct.omp_region** %next, align 8, !dbg !13549
  store %struct.omp_region* %80, %struct.omp_region** %i, align 8, !dbg !13550
  br label %for.cond63, !dbg !13551, !llvm.loop !13552

for.end:                                          ; preds = %for.cond63
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13554
  %82 = load %struct.basic_block_def*, %struct.basic_block_def** %switch_bb, align 8, !dbg !13555
  %call77 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %81, %struct.basic_block_def* %82, i32 0), !dbg !13556
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %switch_bb, align 8, !dbg !13557
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13558
  %next_bb78 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %84, i32 0, i32 6, !dbg !13559
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb78, align 8, !dbg !13559
  %call79 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %83, %struct.basic_block_def* %85, i32 0), !dbg !13560
  store i8 0, i8* %fallthru, align 1, !dbg !13561
  br label %sw.epilog, !dbg !13562

sw.default:                                       ; preds = %sw.bb47
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 661, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !13563
  br label %sw.epilog, !dbg !13564

sw.epilog:                                        ; preds = %sw.default, %for.end, %sw.bb49
  br label %sw.epilog87, !dbg !13565

sw.default80:                                     ; preds = %if.then
  %86 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !13566
  %call81 = call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %86), !dbg !13566
  %tobool82 = icmp ne i8 %call81, 0, !dbg !13566
  br i1 %tobool82, label %cond.true83, label %cond.false84, !dbg !13566

cond.true83:                                      ; preds = %sw.default80
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 666, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !13566
  br label %cond.end85, !dbg !13566

cond.false84:                                     ; preds = %sw.default80
  br label %cond.end85, !dbg !13566

cond.end85:                                       ; preds = %cond.false84, %cond.true83
  %cond86 = phi i32 [ 0, %cond.true83 ], [ 0, %cond.false84 ], !dbg !13566
  store i8 1, i8* %fallthru, align 1, !dbg !13567
  br label %sw.epilog87, !dbg !13568

sw.epilog87:                                      ; preds = %cond.end85, %sw.epilog, %sw.bb43, %sw.bb42, %sw.bb41, %sw.bb39, %sw.bb37, %sw.bb36, %if.end35, %if.end, %sw.bb23, %sw.bb22, %sw.bb21, %sw.bb20, %sw.bb15, %sw.bb
  br label %if.end88, !dbg !13569

if.else:                                          ; preds = %for.body
  store i8 1, i8* %fallthru, align 1, !dbg !13570
  br label %if.end88

if.end88:                                         ; preds = %if.else, %sw.epilog87
  %87 = load i8, i8* %fallthru, align 1, !dbg !13571
  %tobool89 = icmp ne i8 %87, 0, !dbg !13571
  br i1 %tobool89, label %if.then90, label %if.end98, !dbg !13573

if.then90:                                        ; preds = %if.end88
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13574
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13576
  %next_bb91 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %89, i32 0, i32 6, !dbg !13577
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb91, align 8, !dbg !13577
  %call92 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %88, %struct.basic_block_def* %90, i32 1), !dbg !13578
  %91 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !13579
  %tobool93 = icmp ne %union.gimple_statement_d* %91, null, !dbg !13579
  br i1 %tobool93, label %if.then94, label %if.end97, !dbg !13581

if.then94:                                        ; preds = %if.then90
  %92 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !13582
  %call95 = call i32 @gimple_location(%union.gimple_statement_d* %92), !dbg !13583
  %93 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13584
  %next_bb96 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %93, i32 0, i32 6, !dbg !13585
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb96, align 8, !dbg !13585
  call void @assign_discriminator(i32 %call95, %struct.basic_block_def* %94), !dbg !13586
  br label %if.end97, !dbg !13586

if.end97:                                         ; preds = %if.then94, %if.then90
  br label %if.end98, !dbg !13587

if.end98:                                         ; preds = %if.end97, %if.end88
  br label %for.inc99, !dbg !13588

for.inc99:                                        ; preds = %if.end98
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13391
  %next_bb100 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %95, i32 0, i32 6, !dbg !13391
  %96 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb100, align 8, !dbg !13391
  store %struct.basic_block_def* %96, %struct.basic_block_def** %bb, align 8, !dbg !13391
  br label %for.cond, !dbg !13391, !llvm.loop !13589

for.end101:                                       ; preds = %for.cond
  %97 = load %struct.omp_region*, %struct.omp_region** @root_omp_region, align 8, !dbg !13591
  %tobool102 = icmp ne %struct.omp_region* %97, null, !dbg !13591
  br i1 %tobool102, label %if.then103, label %if.end104, !dbg !13593

if.then103:                                       ; preds = %for.end101
  call void @free_omp_regions(), !dbg !13594
  br label %if.end104, !dbg !13594

if.end104:                                        ; preds = %if.then103, %for.end101
  call void @fold_cond_expr_cond(), !dbg !13595
  ret void, !dbg !13596
}

declare dso_local %struct._IO_FILE* @dump_begin(i32, i32*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cfg2vcg(%struct._IO_FILE* %file) #0 !dbg !13597 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %funcname = alloca i8*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %head_code = alloca i32, align 4
  %end_code = alloca i32, align 4
  %head_name = alloca i8*, align 8
  %end_name = alloca i8*, align 8
  %head_line = alloca i32, align 4
  %end_line = alloca i32, align 4
  %first = alloca %union.gimple_statement_d*, align 8
  %last = alloca %union.gimple_statement_d*, align 8
  %tmp38 = alloca %struct.edge_iterator, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !13598, metadata !DIExpression()), !dbg !13599
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !13600, metadata !DIExpression()), !dbg !13601
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !13602, metadata !DIExpression()), !dbg !13603
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !13604, metadata !DIExpression()), !dbg !13605
  call void @llvm.dbg.declare(metadata i8** %funcname, metadata !13606, metadata !DIExpression()), !dbg !13607
  %0 = load i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 22), align 8, !dbg !13608
  %1 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !13609
  %call = call i8* %0(%union.tree_node* %1, i32 2), !dbg !13610
  store i8* %call, i8** %funcname, align 8, !dbg !13607
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !13611
  %3 = load i8*, i8** %funcname, align 8, !dbg !13612
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.50, i64 0, i64 0), i8* %3), !dbg !13613
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !13614
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.51, i64 0, i64 0)), !dbg !13615
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !13616
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.52, i64 0, i64 0)), !dbg !13617
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13618
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !13618
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !13618
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !13618
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 0, !dbg !13618
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !13618
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 1, !dbg !13618
  %call4 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !13618
  %9 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !13618
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !13618
  %11 = extractvalue { i32, %struct.VEC_edge_gc** } %call4, 0, !dbg !13618
  store i32 %11, i32* %10, align 8, !dbg !13618
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !13618
  %13 = extractvalue { i32, %struct.VEC_edge_gc** } %call4, 1, !dbg !13618
  store %struct.VEC_edge_gc** %13, %struct.VEC_edge_gc*** %12, align 8, !dbg !13618
  %14 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !13618
  %15 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !13618
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 16, i1 false), !dbg !13618
  br label %for.cond, !dbg !13618

for.cond:                                         ; preds = %for.inc, %entry
  %16 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !13620
  %17 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 0, !dbg !13620
  %18 = load i32, i32* %17, align 8, !dbg !13620
  %19 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 1, !dbg !13620
  %20 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %19, align 8, !dbg !13620
  %call5 = call zeroext i8 @ei_cond(i32 %18, %struct.VEC_edge_gc** %20, %struct.edge_def** %e), !dbg !13620
  %tobool = icmp ne i8 %call5, 0, !dbg !13618
  br i1 %tobool, label %for.body, label %for.end, !dbg !13618

for.body:                                         ; preds = %for.cond
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !13622
  %22 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13624
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 1, !dbg !13625
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !13625
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 9, !dbg !13626
  %24 = load i32, i32* %index, align 8, !dbg !13626
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.53, i64 0, i64 0), i32 %24), !dbg !13627
  %25 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13628
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %25, i32 0, i32 7, !dbg !13630
  %26 = load i32, i32* %flags, align 8, !dbg !13630
  %and = and i32 %26, 16, !dbg !13631
  %tobool7 = icmp ne i32 %and, 0, !dbg !13631
  br i1 %tobool7, label %if.then, label %if.else, !dbg !13632

if.then:                                          ; preds = %for.body
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !13633
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.54, i64 0, i64 0)), !dbg !13634
  br label %if.end, !dbg !13634

if.else:                                          ; preds = %for.body
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !13635
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.55, i64 0, i64 0)), !dbg !13636
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !13637
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.56, i64 0, i64 0)), !dbg !13638
  br label %for.inc, !dbg !13639

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !13620
  br label %for.cond, !dbg !13620, !llvm.loop !13640

for.end:                                          ; preds = %for.cond
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !13642
  %call11 = call i32 @fputc(i32 10, %struct._IO_FILE* %30), !dbg !13643
  %31 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13644
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %31, i64 0, !dbg !13644
  %cfg13 = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 1, !dbg !13644
  %32 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !13644
  %x_entry_block_ptr14 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %32, i32 0, i32 0, !dbg !13644
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr14, align 8, !dbg !13644
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 6, !dbg !13644
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !13644
  store %struct.basic_block_def* %34, %struct.basic_block_def** %bb, align 8, !dbg !13644
  br label %for.cond15, !dbg !13644

for.cond15:                                       ; preds = %for.inc78, %for.end
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13646
  %36 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13646
  %add.ptr16 = getelementptr inbounds %struct.function, %struct.function* %36, i64 0, !dbg !13646
  %cfg17 = getelementptr inbounds %struct.function, %struct.function* %add.ptr16, i32 0, i32 1, !dbg !13646
  %37 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg17, align 8, !dbg !13646
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %37, i32 0, i32 1, !dbg !13646
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !13646
  %cmp = icmp ne %struct.basic_block_def* %35, %38, !dbg !13646
  br i1 %cmp, label %for.body18, label %for.end80, !dbg !13644

for.body18:                                       ; preds = %for.cond15
  call void @llvm.dbg.declare(metadata i32* %head_code, metadata !13648, metadata !DIExpression()), !dbg !13650
  call void @llvm.dbg.declare(metadata i32* %end_code, metadata !13651, metadata !DIExpression()), !dbg !13652
  call void @llvm.dbg.declare(metadata i8** %head_name, metadata !13653, metadata !DIExpression()), !dbg !13654
  call void @llvm.dbg.declare(metadata i8** %end_name, metadata !13655, metadata !DIExpression()), !dbg !13656
  call void @llvm.dbg.declare(metadata i32* %head_line, metadata !13657, metadata !DIExpression()), !dbg !13658
  store i32 0, i32* %head_line, align 4, !dbg !13658
  call void @llvm.dbg.declare(metadata i32* %end_line, metadata !13659, metadata !DIExpression()), !dbg !13660
  store i32 0, i32* %end_line, align 4, !dbg !13660
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %first, metadata !13661, metadata !DIExpression()), !dbg !13662
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13663
  %call19 = call %union.gimple_statement_d* @first_stmt(%struct.basic_block_def* %39), !dbg !13664
  store %union.gimple_statement_d* %call19, %union.gimple_statement_d** %first, align 8, !dbg !13662
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last, metadata !13665, metadata !DIExpression()), !dbg !13666
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13667
  %call20 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %40), !dbg !13668
  store %union.gimple_statement_d* %call20, %union.gimple_statement_d** %last, align 8, !dbg !13666
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first, align 8, !dbg !13669
  %tobool21 = icmp ne %union.gimple_statement_d* %41, null, !dbg !13669
  br i1 %tobool21, label %if.then22, label %if.else25, !dbg !13671

if.then22:                                        ; preds = %for.body18
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first, align 8, !dbg !13672
  %call23 = call i32 @gimple_code(%union.gimple_statement_d* %42), !dbg !13674
  store i32 %call23, i32* %head_code, align 4, !dbg !13675
  %43 = load i32, i32* %head_code, align 4, !dbg !13676
  %idxprom = zext i32 %43 to i64, !dbg !13677
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @gimple_code_name, i64 0, i64 %idxprom, !dbg !13677
  %44 = load i8*, i8** %arrayidx, align 8, !dbg !13677
  store i8* %44, i8** %head_name, align 8, !dbg !13678
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first, align 8, !dbg !13679
  %call24 = call i32 @get_lineno(%union.gimple_statement_d* %45), !dbg !13680
  store i32 %call24, i32* %head_line, align 4, !dbg !13681
  br label %if.end26, !dbg !13682

if.else25:                                        ; preds = %for.body18
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.57, i64 0, i64 0), i8** %head_name, align 8, !dbg !13683
  br label %if.end26

if.end26:                                         ; preds = %if.else25, %if.then22
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !13684
  %tobool27 = icmp ne %union.gimple_statement_d* %46, null, !dbg !13684
  br i1 %tobool27, label %if.then28, label %if.else33, !dbg !13686

if.then28:                                        ; preds = %if.end26
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !13687
  %call29 = call i32 @gimple_code(%union.gimple_statement_d* %47), !dbg !13689
  store i32 %call29, i32* %end_code, align 4, !dbg !13690
  %48 = load i32, i32* %end_code, align 4, !dbg !13691
  %idxprom30 = zext i32 %48 to i64, !dbg !13692
  %arrayidx31 = getelementptr inbounds [0 x i8*], [0 x i8*]* @gimple_code_name, i64 0, i64 %idxprom30, !dbg !13692
  %49 = load i8*, i8** %arrayidx31, align 8, !dbg !13692
  store i8* %49, i8** %end_name, align 8, !dbg !13693
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !13694
  %call32 = call i32 @get_lineno(%union.gimple_statement_d* %50), !dbg !13695
  store i32 %call32, i32* %end_line, align 4, !dbg !13696
  br label %if.end34, !dbg !13697

if.else33:                                        ; preds = %if.end26
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.57, i64 0, i64 0), i8** %end_name, align 8, !dbg !13698
  br label %if.end34

if.end34:                                         ; preds = %if.else33, %if.then28
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !13699
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13700
  %index35 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %52, i32 0, i32 9, !dbg !13701
  %53 = load i32, i32* %index35, align 8, !dbg !13701
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13702
  %index36 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 9, !dbg !13703
  %55 = load i32, i32* %index36, align 8, !dbg !13703
  %56 = load i8*, i8** %head_name, align 8, !dbg !13704
  %57 = load i32, i32* %head_line, align 4, !dbg !13705
  %58 = load i8*, i8** %end_name, align 8, !dbg !13706
  %59 = load i32, i32* %end_line, align 4, !dbg !13707
  %call37 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.58, i64 0, i64 0), i32 %53, i32 %55, i8* %56, i32 %57, i8* %58, i32 %59), !dbg !13708
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13709
  %succs39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 1, !dbg !13709
  %call40 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs39), !dbg !13709
  %61 = bitcast %struct.edge_iterator* %tmp38 to { i32, %struct.VEC_edge_gc** }*, !dbg !13709
  %62 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %61, i32 0, i32 0, !dbg !13709
  %63 = extractvalue { i32, %struct.VEC_edge_gc** } %call40, 0, !dbg !13709
  store i32 %63, i32* %62, align 8, !dbg !13709
  %64 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %61, i32 0, i32 1, !dbg !13709
  %65 = extractvalue { i32, %struct.VEC_edge_gc** } %call40, 1, !dbg !13709
  store %struct.VEC_edge_gc** %65, %struct.VEC_edge_gc*** %64, align 8, !dbg !13709
  %66 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !13709
  %67 = bitcast %struct.edge_iterator* %tmp38 to i8*, !dbg !13709
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 16, i1 false), !dbg !13709
  br label %for.cond41, !dbg !13709

for.cond41:                                       ; preds = %for.inc68, %if.end34
  %68 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !13711
  %69 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %68, i32 0, i32 0, !dbg !13711
  %70 = load i32, i32* %69, align 8, !dbg !13711
  %71 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %68, i32 0, i32 1, !dbg !13711
  %72 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %71, align 8, !dbg !13711
  %call42 = call zeroext i8 @ei_cond(i32 %70, %struct.VEC_edge_gc** %72, %struct.edge_def** %e), !dbg !13711
  %tobool43 = icmp ne i8 %call42, 0, !dbg !13709
  br i1 %tobool43, label %for.body44, label %for.end69, !dbg !13709

for.body44:                                       ; preds = %for.cond41
  %73 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13713
  %dest45 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %73, i32 0, i32 1, !dbg !13716
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %dest45, align 8, !dbg !13716
  %75 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13717
  %add.ptr46 = getelementptr inbounds %struct.function, %struct.function* %75, i64 0, !dbg !13717
  %cfg47 = getelementptr inbounds %struct.function, %struct.function* %add.ptr46, i32 0, i32 1, !dbg !13717
  %76 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg47, align 8, !dbg !13717
  %x_exit_block_ptr48 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %76, i32 0, i32 1, !dbg !13717
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr48, align 8, !dbg !13717
  %cmp49 = icmp eq %struct.basic_block_def* %74, %77, !dbg !13718
  br i1 %cmp49, label %if.then50, label %if.else53, !dbg !13719

if.then50:                                        ; preds = %for.body44
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !13720
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13721
  %index51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %79, i32 0, i32 9, !dbg !13722
  %80 = load i32, i32* %index51, align 8, !dbg !13722
  %call52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %78, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.59, i64 0, i64 0), i32 %80), !dbg !13723
  br label %if.end58, !dbg !13723

if.else53:                                        ; preds = %for.body44
  %81 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !13724
  %82 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13725
  %index54 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %82, i32 0, i32 9, !dbg !13726
  %83 = load i32, i32* %index54, align 8, !dbg !13726
  %84 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13727
  %dest55 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %84, i32 0, i32 1, !dbg !13728
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %dest55, align 8, !dbg !13728
  %index56 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %85, i32 0, i32 9, !dbg !13729
  %86 = load i32, i32* %index56, align 8, !dbg !13729
  %call57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %81, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.60, i64 0, i64 0), i32 %83, i32 %86), !dbg !13730
  br label %if.end58

if.end58:                                         ; preds = %if.else53, %if.then50
  %87 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13731
  %flags59 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %87, i32 0, i32 7, !dbg !13733
  %88 = load i32, i32* %flags59, align 8, !dbg !13733
  %and60 = and i32 %88, 16, !dbg !13734
  %tobool61 = icmp ne i32 %and60, 0, !dbg !13734
  br i1 %tobool61, label %if.then62, label %if.else64, !dbg !13735

if.then62:                                        ; preds = %if.end58
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !13736
  %call63 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %89, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.61, i64 0, i64 0)), !dbg !13737
  br label %if.end66, !dbg !13737

if.else64:                                        ; preds = %if.end58
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !13738
  %call65 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %90, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.62, i64 0, i64 0)), !dbg !13739
  br label %if.end66

if.end66:                                         ; preds = %if.else64, %if.then62
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !13740
  %call67 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %91, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.56, i64 0, i64 0)), !dbg !13741
  br label %for.inc68, !dbg !13742

for.inc68:                                        ; preds = %if.end66
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !13711
  br label %for.cond41, !dbg !13711, !llvm.loop !13743

for.end69:                                        ; preds = %for.cond41
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13745
  %next_bb70 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %92, i32 0, i32 6, !dbg !13747
  %93 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb70, align 8, !dbg !13747
  %94 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13748
  %add.ptr71 = getelementptr inbounds %struct.function, %struct.function* %94, i64 0, !dbg !13748
  %cfg72 = getelementptr inbounds %struct.function, %struct.function* %add.ptr71, i32 0, i32 1, !dbg !13748
  %95 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg72, align 8, !dbg !13748
  %x_exit_block_ptr73 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %95, i32 0, i32 1, !dbg !13748
  %96 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr73, align 8, !dbg !13748
  %cmp74 = icmp ne %struct.basic_block_def* %93, %96, !dbg !13749
  br i1 %cmp74, label %if.then75, label %if.end77, !dbg !13750

if.then75:                                        ; preds = %for.end69
  %97 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !13751
  %call76 = call i32 @fputc(i32 10, %struct._IO_FILE* %97), !dbg !13752
  br label %if.end77, !dbg !13752

if.end77:                                         ; preds = %if.then75, %for.end69
  br label %for.inc78, !dbg !13753

for.inc78:                                        ; preds = %if.end77
  %98 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !13646
  %next_bb79 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %98, i32 0, i32 6, !dbg !13646
  %99 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb79, align 8, !dbg !13646
  store %struct.basic_block_def* %99, %struct.basic_block_def** %bb, align 8, !dbg !13646
  br label %for.cond15, !dbg !13646, !llvm.loop !13754

for.end80:                                        ; preds = %for.cond15
  %100 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !13756
  %call81 = call i32 @fputs(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.63, i64 0, i64 0), %struct._IO_FILE* %100), !dbg !13757
  ret void, !dbg !13758
}

declare dso_local void @dump_end(i32, %struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.gimple_seq_d* %seq) #0 !dbg !13759 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !13762, metadata !DIExpression()), !dbg !13763
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !13764, metadata !DIExpression()), !dbg !13765
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !13766
  %call = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %0), !dbg !13767
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !13768
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !13769
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !13770
  %seq1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !13771
  store %struct.gimple_seq_d* %1, %struct.gimple_seq_d** %seq1, align 8, !dbg !13772
  %ptr2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !13773
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr2, align 8, !dbg !13773
  %tobool = icmp ne %struct.gimple_seq_node_d* %2, null, !dbg !13774
  br i1 %tobool, label %land.lhs.true, label %cond.false, !dbg !13775

land.lhs.true:                                    ; preds = %entry
  %ptr3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !13776
  %3 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr3, align 8, !dbg !13776
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %3, i32 0, i32 0, !dbg !13777
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !13777
  %tobool4 = icmp ne %union.gimple_statement_d* %4, null, !dbg !13778
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !13779

cond.true:                                        ; preds = %land.lhs.true
  %ptr5 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !13780
  %5 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr5, align 8, !dbg !13780
  %stmt6 = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %5, i32 0, i32 0, !dbg !13781
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !13781
  %call7 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %6), !dbg !13782
  br label %cond.end, !dbg !13779

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !13779

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %call7, %cond.true ], [ null, %cond.false ], !dbg !13779
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !13783
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb, align 8, !dbg !13784
  ret void, !dbg !13785
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @stmt_starts_bb_p(%union.gimple_statement_d* %stmt, %union.gimple_statement_d* %prev_stmt) #0 !dbg !13786 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %prev_stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !13789, metadata !DIExpression()), !dbg !13790
  store %union.gimple_statement_d* %prev_stmt, %union.gimple_statement_d** %prev_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %prev_stmt.addr, metadata !13791, metadata !DIExpression()), !dbg !13792
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !13793
  %cmp = icmp eq %union.gimple_statement_d* %0, null, !dbg !13795
  br i1 %cmp, label %if.then, label %if.end, !dbg !13796

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !13797
  br label %return, !dbg !13797

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !13798
  %call = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !13800
  %cmp1 = icmp eq i32 %call, 4, !dbg !13801
  br i1 %cmp1, label %if.then2, label %if.end26, !dbg !13802

if.then2:                                         ; preds = %if.end
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !13803
  %call3 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %2), !dbg !13803
  %decl_common = bitcast %union.tree_node* %call3 to %struct.tree_decl_common*, !dbg !13803
  %nonlocal_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !13803
  %3 = bitcast i40* %nonlocal_flag to i64*, !dbg !13803
  %bf.load = load i64, i64* %3, align 8, !dbg !13803
  %bf.lshr = lshr i64 %bf.load, 8, !dbg !13803
  %bf.clear = and i64 %bf.lshr, 1, !dbg !13803
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13803
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !13803
  br i1 %tobool, label %if.then10, label %lor.lhs.false, !dbg !13806

lor.lhs.false:                                    ; preds = %if.then2
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !13807
  %call4 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %4), !dbg !13807
  %base = bitcast %union.tree_node* %call4 to %struct.tree_base*, !dbg !13807
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !13807
  %bf.load5 = load i64, i64* %5, align 8, !dbg !13807
  %bf.lshr6 = lshr i64 %bf.load5, 16, !dbg !13807
  %bf.clear7 = and i64 %bf.lshr6, 1, !dbg !13807
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !13807
  %tobool9 = icmp ne i32 %bf.cast8, 0, !dbg !13807
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !13808

if.then10:                                        ; preds = %lor.lhs.false, %if.then2
  store i8 1, i8* %retval, align 1, !dbg !13809
  br label %return, !dbg !13809

if.end11:                                         ; preds = %lor.lhs.false
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %prev_stmt.addr, align 8, !dbg !13810
  %tobool12 = icmp ne %union.gimple_statement_d* %6, null, !dbg !13810
  br i1 %tobool12, label %land.lhs.true, label %if.else, !dbg !13812

land.lhs.true:                                    ; preds = %if.end11
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %prev_stmt.addr, align 8, !dbg !13813
  %call13 = call i32 @gimple_code(%union.gimple_statement_d* %7), !dbg !13814
  %cmp14 = icmp eq i32 %call13, 4, !dbg !13815
  br i1 %cmp14, label %if.then15, label %if.else, !dbg !13816

if.then15:                                        ; preds = %land.lhs.true
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %prev_stmt.addr, align 8, !dbg !13817
  %call16 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %8), !dbg !13817
  %decl_common17 = bitcast %union.tree_node* %call16 to %struct.tree_decl_common*, !dbg !13817
  %nonlocal_flag18 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common17, i32 0, i32 2, !dbg !13817
  %9 = bitcast i40* %nonlocal_flag18 to i64*, !dbg !13817
  %bf.load19 = load i64, i64* %9, align 8, !dbg !13817
  %bf.lshr20 = lshr i64 %bf.load19, 8, !dbg !13817
  %bf.clear21 = and i64 %bf.lshr20, 1, !dbg !13817
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !13817
  %tobool23 = icmp ne i32 %bf.cast22, 0, !dbg !13817
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !13820

if.then24:                                        ; preds = %if.then15
  store i8 1, i8* %retval, align 1, !dbg !13821
  br label %return, !dbg !13821

if.end25:                                         ; preds = %if.then15
  %10 = load i64, i64* getelementptr inbounds (%struct.cfg_stats_d, %struct.cfg_stats_d* @cfg_stats, i32 0, i32 0), align 8, !dbg !13822
  %inc = add nsw i64 %10, 1, !dbg !13822
  store i64 %inc, i64* getelementptr inbounds (%struct.cfg_stats_d, %struct.cfg_stats_d* @cfg_stats, i32 0, i32 0), align 8, !dbg !13822
  store i8 0, i8* %retval, align 1, !dbg !13823
  br label %return, !dbg !13823

if.else:                                          ; preds = %land.lhs.true, %if.end11
  store i8 1, i8* %retval, align 1, !dbg !13824
  br label %return, !dbg !13824

if.end26:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !13825
  br label %return, !dbg !13825

return:                                           ; preds = %if.end26, %if.else, %if.end25, %if.then24, %if.then10, %if.then
  %11 = load i8, i8* %retval, align 1, !dbg !13826
  ret i8 %11, !dbg !13826
}

declare dso_local %struct.gimple_seq_d* @gsi_split_seq_before(%struct.gimple_stmt_iterator*) #2

declare dso_local %struct.basic_block_def* @create_basic_block(i8*, i8*, %struct.basic_block_def*) #2

declare dso_local void @gimple_set_bb(%union.gimple_statement_d*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_lhs(%union.gimple_statement_d* %stmt) #0 !dbg !13827 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !13828, metadata !DIExpression()), !dbg !13829
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !13830
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !13831
  %conv = zext i8 %call to i32, !dbg !13831
  %tobool = icmp ne i32 %conv, 0, !dbg !13831
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !13832

lor.rhs:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !13833
  %call1 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %1), !dbg !13834
  %conv2 = zext i8 %call1 to i32, !dbg !13834
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !13834
  br i1 %tobool3, label %land.rhs, label %land.end, !dbg !13835

land.rhs:                                         ; preds = %lor.rhs
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !13836
  %call4 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %2), !dbg !13837
  %cmp = icmp ne %union.tree_node* %call4, null, !dbg !13838
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %3 = phi i1 [ false, %lor.rhs ], [ %cmp, %land.rhs ], !dbg !13839
  br label %lor.end, !dbg !13832

lor.end:                                          ; preds = %land.end, %entry
  %4 = phi i1 [ true, %entry ], [ %3, %land.end ]
  %lor.ext = zext i1 %4 to i32, !dbg !13832
  %conv6 = trunc i32 %lor.ext to i8, !dbg !13840
  ret i8 %conv6, !dbg !13841
}

declare dso_local zeroext i8 @is_gimple_reg_type(%union.tree_node*) #2

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

declare dso_local %union.tree_node* @create_tmp_var(%union.tree_node*, i8*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_location(%union.gimple_statement_d* %g, i32 %location) #0 !dbg !13842 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %location.addr = alloca i32, align 4
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !13845, metadata !DIExpression()), !dbg !13846
  store i32 %location, i32* %location.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %location.addr, metadata !13847, metadata !DIExpression()), !dbg !13848
  %0 = load i32, i32* %location.addr, align 4, !dbg !13849
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !13850
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !13851
  %location1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !13852
  store i32 %0, i32* %location1, align 8, !dbg !13853
  ret void, !dbg !13854
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_block(%union.gimple_statement_d* %g, %union.tree_node* %block) #0 !dbg !13855 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %block.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !13856, metadata !DIExpression()), !dbg !13857
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !13858, metadata !DIExpression()), !dbg !13859
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !13860
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !13861
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !13862
  %block1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 5, !dbg !13863
  store %union.tree_node* %0, %union.tree_node** %block1, align 8, !dbg !13864
  ret void, !dbg !13865
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_block(%union.gimple_statement_d* %g) #0 !dbg !13866 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !13867, metadata !DIExpression()), !dbg !13868
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !13869
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !13870
  %block = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 5, !dbg !13871
  %1 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !13871
  ret %union.tree_node* %1, !dbg !13872
}

declare dso_local void @gimple_set_lhs(%union.gimple_statement_d*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !13873 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !13876, metadata !DIExpression()), !dbg !13877
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !13878
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !13878
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13878

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !13879
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !13880
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !13880
  br label %cond.end, !dbg !13878

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13878

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !13878
  ret %struct.gimple_seq_node_d* %cond, !dbg !13881
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !13882 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !13883, metadata !DIExpression()), !dbg !13884
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !13885
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !13886
  %cmp = icmp eq i32 %call, 6, !dbg !13887
  %conv = zext i1 %cmp to i32, !dbg !13887
  %conv1 = trunc i32 %conv to i8, !dbg !13886
  ret i8 %conv1, !dbg !13888
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !13889 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !13890, metadata !DIExpression()), !dbg !13891
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !13892
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !13893
  ret %union.tree_node* %call, !dbg !13894
}

declare dso_local %union.gimple_statement_d* @gimple_build_goto(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @make_goto_expr_edges(%struct.basic_block_def* %bb) #0 !dbg !13895 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %last = alloca %struct.gimple_stmt_iterator, align 8
  %goto_t = alloca %union.gimple_statement_d*, align 8
  %dest = alloca %union.tree_node*, align 8
  %label_bb = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !13896, metadata !DIExpression()), !dbg !13897
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %last, metadata !13898, metadata !DIExpression()), !dbg !13899
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !13900
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %last, %struct.basic_block_def* %0), !dbg !13901
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %goto_t, metadata !13902, metadata !DIExpression()), !dbg !13903
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %last), !dbg !13904
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %goto_t, align 8, !dbg !13903
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %goto_t, align 8, !dbg !13905
  %call1 = call zeroext i8 @simple_goto_p(%union.gimple_statement_d* %1), !dbg !13907
  %tobool = icmp ne i8 %call1, 0, !dbg !13907
  br i1 %tobool, label %if.then, label %if.end11, !dbg !13908

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest, metadata !13909, metadata !DIExpression()), !dbg !13911
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %goto_t, align 8, !dbg !13912
  %call2 = call %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %2), !dbg !13913
  store %union.tree_node* %call2, %union.tree_node** %dest, align 8, !dbg !13911
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %label_bb, metadata !13914, metadata !DIExpression()), !dbg !13915
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13916
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !13916
  %4 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !13916
  %call3 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr, %union.tree_node* %4), !dbg !13916
  store %struct.basic_block_def* %call3, %struct.basic_block_def** %label_bb, align 8, !dbg !13915
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !13917, metadata !DIExpression()), !dbg !13918
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !13919
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %label_bb, align 8, !dbg !13920
  %call4 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %5, %struct.basic_block_def* %6, i32 1), !dbg !13921
  store %struct.edge_def* %call4, %struct.edge_def** %e, align 8, !dbg !13918
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %goto_t, align 8, !dbg !13922
  %call5 = call i32 @gimple_location(%union.gimple_statement_d* %7), !dbg !13923
  %8 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13924
  %goto_locus = getelementptr inbounds %struct.edge_def, %struct.edge_def* %8, i32 0, i32 5, !dbg !13925
  store i32 %call5, i32* %goto_locus, align 8, !dbg !13926
  %9 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13927
  %goto_locus6 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %9, i32 0, i32 5, !dbg !13928
  %10 = load i32, i32* %goto_locus6, align 8, !dbg !13928
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %label_bb, align 8, !dbg !13929
  call void @assign_discriminator(i32 %10, %struct.basic_block_def* %11), !dbg !13930
  %12 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13931
  %goto_locus7 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %12, i32 0, i32 5, !dbg !13933
  %13 = load i32, i32* %goto_locus7, align 8, !dbg !13933
  %tobool8 = icmp ne i32 %13, 0, !dbg !13931
  br i1 %tobool8, label %if.then9, label %if.end, !dbg !13934

if.then9:                                         ; preds = %if.then
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %goto_t, align 8, !dbg !13935
  %call10 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %14), !dbg !13936
  %15 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13937
  %goto_block = getelementptr inbounds %struct.edge_def, %struct.edge_def* %15, i32 0, i32 4, !dbg !13938
  store %union.tree_node* %call10, %union.tree_node** %goto_block, align 8, !dbg !13939
  br label %if.end, !dbg !13937

if.end:                                           ; preds = %if.then9, %if.then
  call void @gsi_remove(%struct.gimple_stmt_iterator* %last, i8 zeroext 1), !dbg !13940
  br label %return, !dbg !13941

if.end11:                                         ; preds = %entry
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !13942
  call void @make_abnormal_goto_edges(%struct.basic_block_def* %16, i8 zeroext 0), !dbg !13943
  br label %return, !dbg !13944

return:                                           ; preds = %if.end11, %if.end
  ret void, !dbg !13944
}

; Function Attrs: noinline nounwind uwtable
define internal void @make_cond_expr_edges(%struct.basic_block_def* %bb) #0 !dbg !13945 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %entry1 = alloca %union.gimple_statement_d*, align 8
  %then_stmt = alloca %union.gimple_statement_d*, align 8
  %else_stmt = alloca %union.gimple_statement_d*, align 8
  %then_bb = alloca %struct.basic_block_def*, align 8
  %else_bb = alloca %struct.basic_block_def*, align 8
  %then_label = alloca %union.tree_node*, align 8
  %else_label = alloca %union.tree_node*, align 8
  %e = alloca %struct.edge_def*, align 8
  %entry_locus = alloca i32, align 4
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !13946, metadata !DIExpression()), !dbg !13947
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %entry1, metadata !13948, metadata !DIExpression()), !dbg !13949
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !13950
  %call = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %0), !dbg !13951
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %entry1, align 8, !dbg !13949
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %then_stmt, metadata !13952, metadata !DIExpression()), !dbg !13953
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %else_stmt, metadata !13954, metadata !DIExpression()), !dbg !13955
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %then_bb, metadata !13956, metadata !DIExpression()), !dbg !13957
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %else_bb, metadata !13958, metadata !DIExpression()), !dbg !13959
  call void @llvm.dbg.declare(metadata %union.tree_node** %then_label, metadata !13960, metadata !DIExpression()), !dbg !13961
  call void @llvm.dbg.declare(metadata %union.tree_node** %else_label, metadata !13962, metadata !DIExpression()), !dbg !13963
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !13964, metadata !DIExpression()), !dbg !13965
  call void @llvm.dbg.declare(metadata i32* %entry_locus, metadata !13966, metadata !DIExpression()), !dbg !13967
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %entry1, align 8, !dbg !13968
  %tobool = icmp ne %union.gimple_statement_d* %1, null, !dbg !13968
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !13968

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 788, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !13968
  br label %cond.end, !dbg !13968

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13968

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13968
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %entry1, align 8, !dbg !13969
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %2), !dbg !13969
  %cmp = icmp eq i32 %call2, 1, !dbg !13969
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !13969

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 789, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !13969
  br label %cond.end5, !dbg !13969

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !13969

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !13969
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %entry1, align 8, !dbg !13970
  %call7 = call i32 @gimple_location(%union.gimple_statement_d* %3), !dbg !13971
  store i32 %call7, i32* %entry_locus, align 4, !dbg !13972
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %entry1, align 8, !dbg !13973
  %call8 = call %union.tree_node* @gimple_cond_true_label(%union.gimple_statement_d* %4), !dbg !13974
  store %union.tree_node* %call8, %union.tree_node** %then_label, align 8, !dbg !13975
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %entry1, align 8, !dbg !13976
  %call9 = call %union.tree_node* @gimple_cond_false_label(%union.gimple_statement_d* %5), !dbg !13977
  store %union.tree_node* %call9, %union.tree_node** %else_label, align 8, !dbg !13978
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13979
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !13979
  %7 = load %union.tree_node*, %union.tree_node** %then_label, align 8, !dbg !13979
  %call10 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr, %union.tree_node* %7), !dbg !13979
  store %struct.basic_block_def* %call10, %struct.basic_block_def** %then_bb, align 8, !dbg !13980
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13981
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !13981
  %9 = load %union.tree_node*, %union.tree_node** %else_label, align 8, !dbg !13981
  %call12 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr11, %union.tree_node* %9), !dbg !13981
  store %struct.basic_block_def* %call12, %struct.basic_block_def** %else_bb, align 8, !dbg !13982
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !13983
  %call13 = call %union.gimple_statement_d* @first_stmt(%struct.basic_block_def* %10), !dbg !13984
  store %union.gimple_statement_d* %call13, %union.gimple_statement_d** %then_stmt, align 8, !dbg !13985
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !13986
  %call14 = call %union.gimple_statement_d* @first_stmt(%struct.basic_block_def* %11), !dbg !13987
  store %union.gimple_statement_d* %call14, %union.gimple_statement_d** %else_stmt, align 8, !dbg !13988
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !13989
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !13990
  %call15 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %12, %struct.basic_block_def* %13, i32 1024), !dbg !13991
  store %struct.edge_def* %call15, %struct.edge_def** %e, align 8, !dbg !13992
  %14 = load i32, i32* %entry_locus, align 4, !dbg !13993
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !13994
  call void @assign_discriminator(i32 %14, %struct.basic_block_def* %15), !dbg !13995
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %then_stmt, align 8, !dbg !13996
  %call16 = call i32 @gimple_location(%union.gimple_statement_d* %16), !dbg !13997
  %17 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !13998
  %goto_locus = getelementptr inbounds %struct.edge_def, %struct.edge_def* %17, i32 0, i32 5, !dbg !13999
  store i32 %call16, i32* %goto_locus, align 8, !dbg !14000
  %18 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !14001
  %goto_locus17 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %18, i32 0, i32 5, !dbg !14003
  %19 = load i32, i32* %goto_locus17, align 8, !dbg !14003
  %tobool18 = icmp ne i32 %19, 0, !dbg !14001
  br i1 %tobool18, label %if.then, label %if.end, !dbg !14004

if.then:                                          ; preds = %cond.end5
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %then_stmt, align 8, !dbg !14005
  %call19 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %20), !dbg !14006
  %21 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !14007
  %goto_block = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i32 0, i32 4, !dbg !14008
  store %union.tree_node* %call19, %union.tree_node** %goto_block, align 8, !dbg !14009
  br label %if.end, !dbg !14007

if.end:                                           ; preds = %if.then, %cond.end5
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14010
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !14011
  %call20 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %22, %struct.basic_block_def* %23, i32 2048), !dbg !14012
  store %struct.edge_def* %call20, %struct.edge_def** %e, align 8, !dbg !14013
  %24 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !14014
  %tobool21 = icmp ne %struct.edge_def* %24, null, !dbg !14014
  br i1 %tobool21, label %if.then22, label %if.end31, !dbg !14016

if.then22:                                        ; preds = %if.end
  %25 = load i32, i32* %entry_locus, align 4, !dbg !14017
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !14019
  call void @assign_discriminator(i32 %25, %struct.basic_block_def* %26), !dbg !14020
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %else_stmt, align 8, !dbg !14021
  %call23 = call i32 @gimple_location(%union.gimple_statement_d* %27), !dbg !14022
  %28 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !14023
  %goto_locus24 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %28, i32 0, i32 5, !dbg !14024
  store i32 %call23, i32* %goto_locus24, align 8, !dbg !14025
  %29 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !14026
  %goto_locus25 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %29, i32 0, i32 5, !dbg !14028
  %30 = load i32, i32* %goto_locus25, align 8, !dbg !14028
  %tobool26 = icmp ne i32 %30, 0, !dbg !14026
  br i1 %tobool26, label %if.then27, label %if.end30, !dbg !14029

if.then27:                                        ; preds = %if.then22
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %else_stmt, align 8, !dbg !14030
  %call28 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %31), !dbg !14031
  %32 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !14032
  %goto_block29 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %32, i32 0, i32 4, !dbg !14033
  store %union.tree_node* %call28, %union.tree_node** %goto_block29, align 8, !dbg !14034
  br label %if.end30, !dbg !14032

if.end30:                                         ; preds = %if.then27, %if.then22
  br label %if.end31, !dbg !14035

if.end31:                                         ; preds = %if.end30, %if.end
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %entry1, align 8, !dbg !14036
  call void @gimple_cond_set_true_label(%union.gimple_statement_d* %33, %union.tree_node* null), !dbg !14037
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %entry1, align 8, !dbg !14038
  call void @gimple_cond_set_false_label(%union.gimple_statement_d* %34, %union.tree_node* null), !dbg !14039
  ret void, !dbg !14040
}

; Function Attrs: noinline nounwind uwtable
define internal void @make_gimple_switch_edges(%struct.basic_block_def* %bb) #0 !dbg !14041 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %entry1 = alloca %union.gimple_statement_d*, align 8
  %entry_locus = alloca i32, align 4
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %lab = alloca %union.tree_node*, align 8
  %label_bb = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !14042, metadata !DIExpression()), !dbg !14043
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %entry1, metadata !14044, metadata !DIExpression()), !dbg !14045
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14046
  %call = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %0), !dbg !14047
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %entry1, align 8, !dbg !14045
  call void @llvm.dbg.declare(metadata i32* %entry_locus, metadata !14048, metadata !DIExpression()), !dbg !14049
  call void @llvm.dbg.declare(metadata i64* %i, metadata !14050, metadata !DIExpression()), !dbg !14051
  call void @llvm.dbg.declare(metadata i64* %n, metadata !14052, metadata !DIExpression()), !dbg !14053
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %entry1, align 8, !dbg !14054
  %call2 = call i32 @gimple_location(%union.gimple_statement_d* %1), !dbg !14055
  store i32 %call2, i32* %entry_locus, align 4, !dbg !14056
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %entry1, align 8, !dbg !14057
  %call3 = call i32 @gimple_switch_num_labels(%union.gimple_statement_d* %2), !dbg !14058
  %conv = zext i32 %call3 to i64, !dbg !14058
  store i64 %conv, i64* %n, align 8, !dbg !14059
  store i64 0, i64* %i, align 8, !dbg !14060
  br label %for.cond, !dbg !14062

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i64, i64* %i, align 8, !dbg !14063
  %4 = load i64, i64* %n, align 8, !dbg !14065
  %cmp = icmp ult i64 %3, %4, !dbg !14066
  br i1 %cmp, label %for.body, label %for.end, !dbg !14067

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %lab, metadata !14068, metadata !DIExpression()), !dbg !14070
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %entry1, align 8, !dbg !14071
  %6 = load i64, i64* %i, align 8, !dbg !14071
  %conv5 = trunc i64 %6 to i32, !dbg !14071
  %call6 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %5, i32 %conv5), !dbg !14071
  %exp = bitcast %union.tree_node* %call6 to %struct.tree_exp*, !dbg !14071
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !14071
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !14071
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !14071
  store %union.tree_node* %7, %union.tree_node** %lab, align 8, !dbg !14070
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %label_bb, metadata !14072, metadata !DIExpression()), !dbg !14073
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !14074
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !14074
  %9 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !14074
  %call7 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr, %union.tree_node* %9), !dbg !14074
  store %struct.basic_block_def* %call7, %struct.basic_block_def** %label_bb, align 8, !dbg !14073
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14075
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %label_bb, align 8, !dbg !14076
  %call8 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %10, %struct.basic_block_def* %11, i32 0), !dbg !14077
  %12 = load i32, i32* %entry_locus, align 4, !dbg !14078
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %label_bb, align 8, !dbg !14079
  call void @assign_discriminator(i32 %12, %struct.basic_block_def* %13), !dbg !14080
  br label %for.inc, !dbg !14081

for.inc:                                          ; preds = %for.body
  %14 = load i64, i64* %i, align 8, !dbg !14082
  %inc = add i64 %14, 1, !dbg !14082
  store i64 %inc, i64* %i, align 8, !dbg !14082
  br label %for.cond, !dbg !14083, !llvm.loop !14084

for.end:                                          ; preds = %for.cond
  ret void, !dbg !14086
}

declare dso_local void @make_eh_edges(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @make_eh_dispatch_edges(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @make_gimple_asm_edges(%struct.basic_block_def* %bb) #0 !dbg !14087 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %stmt_loc = alloca i32, align 4
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %label = alloca %union.tree_node*, align 8
  %label_bb = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !14088, metadata !DIExpression()), !dbg !14089
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !14090, metadata !DIExpression()), !dbg !14091
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14092
  %call = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %0), !dbg !14093
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !14091
  call void @llvm.dbg.declare(metadata i32* %stmt_loc, metadata !14094, metadata !DIExpression()), !dbg !14095
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !14096
  %call1 = call i32 @gimple_location(%union.gimple_statement_d* %1), !dbg !14097
  store i32 %call1, i32* %stmt_loc, align 4, !dbg !14095
  call void @llvm.dbg.declare(metadata i32* %i, metadata !14098, metadata !DIExpression()), !dbg !14099
  call void @llvm.dbg.declare(metadata i32* %n, metadata !14100, metadata !DIExpression()), !dbg !14101
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !14102
  %call2 = call i32 @gimple_asm_nlabels(%union.gimple_statement_d* %2), !dbg !14103
  store i32 %call2, i32* %n, align 4, !dbg !14101
  store i32 0, i32* %i, align 4, !dbg !14104
  br label %for.cond, !dbg !14106

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !14107
  %4 = load i32, i32* %n, align 4, !dbg !14109
  %cmp = icmp slt i32 %3, %4, !dbg !14110
  br i1 %cmp, label %for.body, label %for.end, !dbg !14111

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %label, metadata !14112, metadata !DIExpression()), !dbg !14114
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !14115
  %6 = load i32, i32* %i, align 4, !dbg !14115
  %call3 = call %union.tree_node* @gimple_asm_label_op(%union.gimple_statement_d* %5, i32 %6), !dbg !14115
  %list = bitcast %union.tree_node* %call3 to %struct.tree_list*, !dbg !14115
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !14115
  %7 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14115
  store %union.tree_node* %7, %union.tree_node** %label, align 8, !dbg !14114
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %label_bb, metadata !14116, metadata !DIExpression()), !dbg !14117
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !14118
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !14118
  %9 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !14118
  %call4 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr, %union.tree_node* %9), !dbg !14118
  store %struct.basic_block_def* %call4, %struct.basic_block_def** %label_bb, align 8, !dbg !14117
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14119
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %label_bb, align 8, !dbg !14120
  %call5 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %10, %struct.basic_block_def* %11, i32 0), !dbg !14121
  %12 = load i32, i32* %stmt_loc, align 4, !dbg !14122
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %label_bb, align 8, !dbg !14123
  call void @assign_discriminator(i32 %12, %struct.basic_block_def* %13), !dbg !14124
  br label %for.inc, !dbg !14125

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4, !dbg !14126
  %inc = add nsw i32 %14, 1, !dbg !14126
  store i32 %inc, i32* %i, align 4, !dbg !14126
  br label %for.cond, !dbg !14127, !llvm.loop !14128

for.end:                                          ; preds = %for.cond
  ret void, !dbg !14130
}

declare dso_local %struct.omp_region* @new_omp_region(%struct.basic_block_def*, i32, %struct.omp_region*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_succ(%struct.basic_block_def* %bb) #0 !dbg !14131 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !14134, metadata !DIExpression()), !dbg !14135
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14136
  %call = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %0), !dbg !14137
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !14138
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !14138
  ret %struct.basic_block_def* %1, !dbg !14139
}

; Function Attrs: noinline nounwind uwtable
define internal void @assign_discriminator(i32 %locus, %struct.basic_block_def* %bb) #0 !dbg !14140 {
entry:
  %locus.addr = alloca i32, align 4
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %first_in_to_bb = alloca %union.gimple_statement_d*, align 8
  %last_in_to_bb = alloca %union.gimple_statement_d*, align 8
  store i32 %locus, i32* %locus.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %locus.addr, metadata !14143, metadata !DIExpression()), !dbg !14144
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !14145, metadata !DIExpression()), !dbg !14146
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %first_in_to_bb, metadata !14147, metadata !DIExpression()), !dbg !14148
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last_in_to_bb, metadata !14149, metadata !DIExpression()), !dbg !14150
  %0 = load i32, i32* %locus.addr, align 4, !dbg !14151
  %cmp = icmp eq i32 %0, 0, !dbg !14153
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !14154

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14155
  %discriminator = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 12, !dbg !14156
  %2 = load i32, i32* %discriminator, align 4, !dbg !14156
  %cmp1 = icmp ne i32 %2, 0, !dbg !14157
  br i1 %cmp1, label %if.then, label %if.end, !dbg !14158

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end16, !dbg !14159

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14160
  %call = call %union.gimple_statement_d* @first_non_label_stmt(%struct.basic_block_def* %3), !dbg !14161
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %first_in_to_bb, align 8, !dbg !14162
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14163
  %call2 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %4), !dbg !14164
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %last_in_to_bb, align 8, !dbg !14165
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_in_to_bb, align 8, !dbg !14166
  %tobool = icmp ne %union.gimple_statement_d* %5, null, !dbg !14166
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false6, !dbg !14168

land.lhs.true:                                    ; preds = %if.end
  %6 = load i32, i32* %locus.addr, align 4, !dbg !14169
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_in_to_bb, align 8, !dbg !14170
  %call3 = call i32 @gimple_location(%union.gimple_statement_d* %7), !dbg !14171
  %call4 = call zeroext i8 @same_line_p(i32 %6, i32 %call3), !dbg !14172
  %conv = zext i8 %call4 to i32, !dbg !14172
  %tobool5 = icmp ne i32 %conv, 0, !dbg !14172
  br i1 %tobool5, label %if.then13, label %lor.lhs.false6, !dbg !14173

lor.lhs.false6:                                   ; preds = %land.lhs.true, %if.end
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last_in_to_bb, align 8, !dbg !14174
  %tobool7 = icmp ne %union.gimple_statement_d* %8, null, !dbg !14174
  br i1 %tobool7, label %land.lhs.true8, label %if.end16, !dbg !14175

land.lhs.true8:                                   ; preds = %lor.lhs.false6
  %9 = load i32, i32* %locus.addr, align 4, !dbg !14176
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last_in_to_bb, align 8, !dbg !14177
  %call9 = call i32 @gimple_location(%union.gimple_statement_d* %10), !dbg !14178
  %call10 = call zeroext i8 @same_line_p(i32 %9, i32 %call9), !dbg !14179
  %conv11 = zext i8 %call10 to i32, !dbg !14179
  %tobool12 = icmp ne i32 %conv11, 0, !dbg !14179
  br i1 %tobool12, label %if.then13, label %if.end16, !dbg !14180

if.then13:                                        ; preds = %land.lhs.true8, %land.lhs.true
  %11 = load i32, i32* %locus.addr, align 4, !dbg !14181
  %call14 = call i32 @next_discriminator_for_locus(i32 %11), !dbg !14182
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14183
  %discriminator15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 12, !dbg !14184
  store i32 %call14, i32* %discriminator15, align 4, !dbg !14185
  br label %if.end16, !dbg !14183

if.end16:                                         ; preds = %if.then, %if.then13, %land.lhs.true8, %lor.lhs.false6
  ret void, !dbg !14186
}

declare dso_local void @free_omp_regions() #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @first_non_label_stmt(%struct.basic_block_def* %bb) #0 !dbg !14187 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %i = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !14188, metadata !DIExpression()), !dbg !14189
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !14190, metadata !DIExpression()), !dbg !14191
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14192
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %i, %struct.basic_block_def* %0), !dbg !14193
  br label %while.cond, !dbg !14194

while.cond:                                       ; preds = %while.body, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !14195
  %tobool = icmp ne i8 %call, 0, !dbg !14195
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !14196

land.rhs:                                         ; preds = %while.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !14197
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %call1), !dbg !14198
  %cmp = icmp eq i32 %call2, 4, !dbg !14199
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %1 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !14200
  br i1 %1, label %while.body, label %while.end, !dbg !14194

while.body:                                       ; preds = %land.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %i), !dbg !14201
  br label %while.cond, !dbg !14194, !llvm.loop !14202

while.end:                                        ; preds = %land.end
  %call3 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !14204
  %tobool4 = icmp ne i8 %call3, 0, !dbg !14204
  br i1 %tobool4, label %cond.false, label %cond.true, !dbg !14205

cond.true:                                        ; preds = %while.end
  %call5 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !14206
  br label %cond.end, !dbg !14205

cond.false:                                       ; preds = %while.end
  br label %cond.end, !dbg !14205

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.gimple_statement_d* [ %call5, %cond.true ], [ null, %cond.false ], !dbg !14205
  ret %union.gimple_statement_d* %cond, !dbg !14207
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @same_line_p(i32 %locus1, i32 %locus2) #0 !dbg !14208 {
entry:
  %retval = alloca i8, align 1
  %locus1.addr = alloca i32, align 4
  %locus2.addr = alloca i32, align 4
  %from = alloca %struct.expanded_location, align 8
  %to = alloca %struct.expanded_location, align 8
  %tmp = alloca %struct.expanded_location, align 8
  %tmp1 = alloca %struct.expanded_location, align 8
  store i32 %locus1, i32* %locus1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %locus1.addr, metadata !14211, metadata !DIExpression()), !dbg !14212
  store i32 %locus2, i32* %locus2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %locus2.addr, metadata !14213, metadata !DIExpression()), !dbg !14214
  call void @llvm.dbg.declare(metadata %struct.expanded_location* %from, metadata !14215, metadata !DIExpression()), !dbg !14223
  call void @llvm.dbg.declare(metadata %struct.expanded_location* %to, metadata !14224, metadata !DIExpression()), !dbg !14225
  %0 = load i32, i32* %locus1.addr, align 4, !dbg !14226
  %1 = load i32, i32* %locus2.addr, align 4, !dbg !14228
  %cmp = icmp eq i32 %0, %1, !dbg !14229
  br i1 %cmp, label %if.then, label %if.end, !dbg !14230

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !14231
  br label %return, !dbg !14231

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %locus1.addr, align 4, !dbg !14232
  call void @expand_location(%struct.expanded_location* sret %tmp, i32 %2), !dbg !14233
  %3 = bitcast %struct.expanded_location* %from to i8*, !dbg !14233
  %4 = bitcast %struct.expanded_location* %tmp to i8*, !dbg !14233
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false), !dbg !14233
  %5 = load i32, i32* %locus2.addr, align 4, !dbg !14234
  call void @expand_location(%struct.expanded_location* sret %tmp1, i32 %5), !dbg !14235
  %6 = bitcast %struct.expanded_location* %to to i8*, !dbg !14235
  %7 = bitcast %struct.expanded_location* %tmp1 to i8*, !dbg !14235
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 24, i1 false), !dbg !14235
  %line = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %from, i32 0, i32 1, !dbg !14236
  %8 = load i32, i32* %line, align 8, !dbg !14236
  %line2 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %to, i32 0, i32 1, !dbg !14238
  %9 = load i32, i32* %line2, align 8, !dbg !14238
  %cmp3 = icmp ne i32 %8, %9, !dbg !14239
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !14240

if.then4:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !14241
  br label %return, !dbg !14241

if.end5:                                          ; preds = %if.end
  %file = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %from, i32 0, i32 0, !dbg !14242
  %10 = load i8*, i8** %file, align 8, !dbg !14242
  %file6 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %to, i32 0, i32 0, !dbg !14244
  %11 = load i8*, i8** %file6, align 8, !dbg !14244
  %cmp7 = icmp eq i8* %10, %11, !dbg !14245
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !14246

if.then8:                                         ; preds = %if.end5
  store i8 1, i8* %retval, align 1, !dbg !14247
  br label %return, !dbg !14247

if.end9:                                          ; preds = %if.end5
  %file10 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %from, i32 0, i32 0, !dbg !14248
  %12 = load i8*, i8** %file10, align 8, !dbg !14248
  %cmp11 = icmp ne i8* %12, null, !dbg !14249
  br i1 %cmp11, label %land.lhs.true, label %land.end, !dbg !14250

land.lhs.true:                                    ; preds = %if.end9
  %file12 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %to, i32 0, i32 0, !dbg !14251
  %13 = load i8*, i8** %file12, align 8, !dbg !14251
  %cmp13 = icmp ne i8* %13, null, !dbg !14252
  br i1 %cmp13, label %land.rhs, label %land.end, !dbg !14253

land.rhs:                                         ; preds = %land.lhs.true
  %file14 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %from, i32 0, i32 0, !dbg !14254
  %14 = load i8*, i8** %file14, align 8, !dbg !14254
  %file15 = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %to, i32 0, i32 0, !dbg !14255
  %15 = load i8*, i8** %file15, align 8, !dbg !14255
  %call = call i32 @strcmp(i8* %14, i8* %15), !dbg !14256
  %cmp16 = icmp eq i32 %call, 0, !dbg !14257
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %if.end9
  %16 = phi i1 [ false, %land.lhs.true ], [ false, %if.end9 ], [ %cmp16, %land.rhs ], !dbg !14258
  %land.ext = zext i1 %16 to i32, !dbg !14253
  %conv = trunc i32 %land.ext to i8, !dbg !14259
  store i8 %conv, i8* %retval, align 1, !dbg !14260
  br label %return, !dbg !14260

return:                                           ; preds = %land.end, %if.then8, %if.then4, %if.then
  %17 = load i8, i8* %retval, align 1, !dbg !14261
  ret i8 %17, !dbg !14261
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @next_discriminator_for_locus(i32 %locus) #0 !dbg !14262 {
entry:
  %locus.addr = alloca i32, align 4
  %item = alloca %struct.locus_discrim_map, align 4
  %slot = alloca %struct.locus_discrim_map**, align 8
  store i32 %locus, i32* %locus.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %locus.addr, metadata !14265, metadata !DIExpression()), !dbg !14266
  call void @llvm.dbg.declare(metadata %struct.locus_discrim_map* %item, metadata !14267, metadata !DIExpression()), !dbg !14268
  call void @llvm.dbg.declare(metadata %struct.locus_discrim_map*** %slot, metadata !14269, metadata !DIExpression()), !dbg !14270
  %0 = load i32, i32* %locus.addr, align 4, !dbg !14271
  %locus1 = getelementptr inbounds %struct.locus_discrim_map, %struct.locus_discrim_map* %item, i32 0, i32 0, !dbg !14272
  store i32 %0, i32* %locus1, align 4, !dbg !14273
  %discriminator = getelementptr inbounds %struct.locus_discrim_map, %struct.locus_discrim_map* %item, i32 0, i32 1, !dbg !14274
  store i32 0, i32* %discriminator, align 4, !dbg !14275
  %1 = load %struct.htab*, %struct.htab** @discriminator_per_locus, align 8, !dbg !14276
  %2 = bitcast %struct.locus_discrim_map* %item to i8*, !dbg !14277
  %3 = load i32, i32* %locus.addr, align 4, !dbg !14278
  %call = call i8** @htab_find_slot_with_hash(%struct.htab* %1, i8* %2, i32 %3, i32 1), !dbg !14279
  %4 = bitcast i8** %call to %struct.locus_discrim_map**, !dbg !14280
  store %struct.locus_discrim_map** %4, %struct.locus_discrim_map*** %slot, align 8, !dbg !14281
  %5 = load %struct.locus_discrim_map**, %struct.locus_discrim_map*** %slot, align 8, !dbg !14282
  %tobool = icmp ne %struct.locus_discrim_map** %5, null, !dbg !14282
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !14282

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 724, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !14282
  br label %cond.end, !dbg !14282

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14282

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !14282
  %6 = load %struct.locus_discrim_map**, %struct.locus_discrim_map*** %slot, align 8, !dbg !14283
  %7 = load %struct.locus_discrim_map*, %struct.locus_discrim_map** %6, align 8, !dbg !14285
  %cmp = icmp eq %struct.locus_discrim_map* %7, null, !dbg !14286
  br i1 %cmp, label %if.then, label %if.end, !dbg !14287

if.then:                                          ; preds = %cond.end
  %call2 = call i8* @xmalloc(i64 8), !dbg !14288
  %8 = bitcast i8* %call2 to %struct.locus_discrim_map*, !dbg !14288
  %9 = load %struct.locus_discrim_map**, %struct.locus_discrim_map*** %slot, align 8, !dbg !14290
  store %struct.locus_discrim_map* %8, %struct.locus_discrim_map** %9, align 8, !dbg !14291
  %10 = load %struct.locus_discrim_map**, %struct.locus_discrim_map*** %slot, align 8, !dbg !14292
  %11 = load %struct.locus_discrim_map*, %struct.locus_discrim_map** %10, align 8, !dbg !14292
  %tobool3 = icmp ne %struct.locus_discrim_map* %11, null, !dbg !14292
  br i1 %tobool3, label %cond.false5, label %cond.true4, !dbg !14292

cond.true4:                                       ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 728, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !14292
  br label %cond.end6, !dbg !14292

cond.false5:                                      ; preds = %if.then
  br label %cond.end6, !dbg !14292

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond7 = phi i32 [ 0, %cond.true4 ], [ 0, %cond.false5 ], !dbg !14292
  %12 = load i32, i32* %locus.addr, align 4, !dbg !14293
  %13 = load %struct.locus_discrim_map**, %struct.locus_discrim_map*** %slot, align 8, !dbg !14294
  %14 = load %struct.locus_discrim_map*, %struct.locus_discrim_map** %13, align 8, !dbg !14295
  %locus8 = getelementptr inbounds %struct.locus_discrim_map, %struct.locus_discrim_map* %14, i32 0, i32 0, !dbg !14296
  store i32 %12, i32* %locus8, align 4, !dbg !14297
  %15 = load %struct.locus_discrim_map**, %struct.locus_discrim_map*** %slot, align 8, !dbg !14298
  %16 = load %struct.locus_discrim_map*, %struct.locus_discrim_map** %15, align 8, !dbg !14299
  %discriminator9 = getelementptr inbounds %struct.locus_discrim_map, %struct.locus_discrim_map* %16, i32 0, i32 1, !dbg !14300
  store i32 0, i32* %discriminator9, align 4, !dbg !14301
  br label %if.end, !dbg !14302

if.end:                                           ; preds = %cond.end6, %cond.end
  %17 = load %struct.locus_discrim_map**, %struct.locus_discrim_map*** %slot, align 8, !dbg !14303
  %18 = load %struct.locus_discrim_map*, %struct.locus_discrim_map** %17, align 8, !dbg !14304
  %discriminator10 = getelementptr inbounds %struct.locus_discrim_map, %struct.locus_discrim_map* %18, i32 0, i32 1, !dbg !14305
  %19 = load i32, i32* %discriminator10, align 4, !dbg !14306
  %inc = add nsw i32 %19, 1, !dbg !14306
  store i32 %inc, i32* %discriminator10, align 4, !dbg !14306
  %20 = load %struct.locus_discrim_map**, %struct.locus_discrim_map*** %slot, align 8, !dbg !14307
  %21 = load %struct.locus_discrim_map*, %struct.locus_discrim_map** %20, align 8, !dbg !14308
  %discriminator11 = getelementptr inbounds %struct.locus_discrim_map, %struct.locus_discrim_map* %21, i32 0, i32 1, !dbg !14309
  %22 = load i32, i32* %discriminator11, align 4, !dbg !14309
  ret i32 %22, !dbg !14310
}

declare dso_local void @expand_location(%struct.expanded_location* sret, i32) #2

declare dso_local i32 @strcmp(i8*, i8*) #2

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_lineno(%union.gimple_statement_d* %stmt) #0 !dbg !14311 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %loc = alloca i32, align 4
  %tmp = alloca %struct.expanded_location, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !14314, metadata !DIExpression()), !dbg !14315
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !14316, metadata !DIExpression()), !dbg !14317
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14318
  %tobool = icmp ne %union.gimple_statement_d* %0, null, !dbg !14318
  br i1 %tobool, label %if.end, label %if.then, !dbg !14320

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !14321
  br label %return, !dbg !14321

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14322
  %call = call i32 @gimple_location(%union.gimple_statement_d* %1), !dbg !14323
  store i32 %call, i32* %loc, align 4, !dbg !14324
  %2 = load i32, i32* %loc, align 4, !dbg !14325
  %cmp = icmp eq i32 %2, 0, !dbg !14327
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !14328

if.then1:                                         ; preds = %if.end
  store i32 -1, i32* %retval, align 4, !dbg !14329
  br label %return, !dbg !14329

if.end2:                                          ; preds = %if.end
  %3 = load i32, i32* %loc, align 4, !dbg !14330
  call void @expand_location(%struct.expanded_location* sret %tmp, i32 %3), !dbg !14330
  %line = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %tmp, i32 0, i32 1, !dbg !14330
  %4 = load i32, i32* %line, align 8, !dbg !14330
  store i32 %4, i32* %retval, align 4, !dbg !14331
  br label %return, !dbg !14331

return:                                           ; preds = %if.end2, %if.then1, %if.then
  %5 = load i32, i32* %retval, align 4, !dbg !14332
  ret i32 %5, !dbg !14332
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !14333 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !14336, metadata !DIExpression()), !dbg !14337
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14338
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !14339
  %1 = load i32, i32* %flags, align 8, !dbg !14339
  %and = and i32 %1, 512, !dbg !14340
  %tobool = icmp ne i32 %and, 0, !dbg !14340
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !14341

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14342
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !14343
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !14344
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !14344
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !14342
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !14345

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !14346
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !14347
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !14348
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !14348
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !14349
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !14349
  br label %cond.end, !dbg !14345

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !14345

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !14345
  ret %struct.gimple_seq_d* %cond, !dbg !14350
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !14351 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !14352, metadata !DIExpression()), !dbg !14353
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !14354, metadata !DIExpression()), !dbg !14355
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !14356, metadata !DIExpression()), !dbg !14357
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14358
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !14358
  %conv = zext i8 %call to i32, !dbg !14358
  %tobool = icmp ne i32 %conv, 0, !dbg !14358
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !14358

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !14358
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14358
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !14358
  %cmp = icmp ult i32 %1, %call1, !dbg !14358
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !14358

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.64, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !14358
  br label %cond.end, !dbg !14358

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !14358

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !14358
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !14359
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14360
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !14361
  %5 = load i32, i32* %i.addr, align 4, !dbg !14362
  %idxprom = zext i32 %5 to i64, !dbg !14361
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !14361
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !14363
  ret void, !dbg !14364
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !14365 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !14366, metadata !DIExpression()), !dbg !14367
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !14368
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !14369
  %cmp = icmp uge i32 %call, 1, !dbg !14370
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !14371

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !14372
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !14373
  %cmp2 = icmp ule i32 %call1, 9, !dbg !14374
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !14375
  %land.ext = zext i1 %2 to i32, !dbg !14371
  %conv = trunc i32 %land.ext to i8, !dbg !14369
  ret i8 %conv, !dbg !14376
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !14377 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !14380, metadata !DIExpression()), !dbg !14381
  call void @llvm.dbg.declare(metadata i64* %off, metadata !14382, metadata !DIExpression()), !dbg !14383
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14384
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !14385
  %idxprom = zext i32 %call to i64, !dbg !14386
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !14386
  %1 = load i64, i64* %arrayidx, align 8, !dbg !14386
  store i64 %1, i64* %off, align 8, !dbg !14387
  %2 = load i64, i64* %off, align 8, !dbg !14388
  %cmp = icmp ne i64 %2, 0, !dbg !14388
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !14388

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.64, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !14388
  br label %cond.end, !dbg !14388

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14388

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !14388
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14389
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !14390
  %5 = load i64, i64* %off, align 8, !dbg !14391
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !14392
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !14393
  ret %union.tree_node** %6, !dbg !14394
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !14395 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !14398, metadata !DIExpression()), !dbg !14399
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14400
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !14401
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !14402
  ret i32 %call1, !dbg !14403
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !14404 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !14407, metadata !DIExpression()), !dbg !14408
  %0 = load i32, i32* %code.addr, align 4, !dbg !14409
  %idxprom = zext i32 %0 to i64, !dbg !14410
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !14410
  %1 = load i32, i32* %arrayidx, align 4, !dbg !14410
  ret i32 %1, !dbg !14411
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_landing_pad_base_iterate(%struct.VEC_eh_landing_pad_base* %vec_, i32 %ix_, %struct.eh_landing_pad_d** %ptr) #0 !dbg !14412 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.eh_landing_pad_d**, align 8
  store %struct.VEC_eh_landing_pad_base* %vec_, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_base** %vec_.addr, metadata !14418, metadata !DIExpression()), !dbg !14419
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !14420, metadata !DIExpression()), !dbg !14419
  store %struct.eh_landing_pad_d** %ptr, %struct.eh_landing_pad_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d*** %ptr.addr, metadata !14421, metadata !DIExpression()), !dbg !14419
  %0 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !14422
  %tobool = icmp ne %struct.VEC_eh_landing_pad_base* %0, null, !dbg !14422
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !14422

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !14422
  %2 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !14422
  %num = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %2, i32 0, i32 0, !dbg !14422
  %3 = load i32, i32* %num, align 8, !dbg !14422
  %cmp = icmp ult i32 %1, %3, !dbg !14422
  br i1 %cmp, label %if.then, label %if.else, !dbg !14419

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !14424
  %vec = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %4, i32 0, i32 2, !dbg !14424
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !14424
  %idxprom = zext i32 %5 to i64, !dbg !14424
  %arrayidx = getelementptr inbounds [1 x %struct.eh_landing_pad_d*], [1 x %struct.eh_landing_pad_d*]* %vec, i64 0, i64 %idxprom, !dbg !14424
  %6 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %arrayidx, align 8, !dbg !14424
  %7 = load %struct.eh_landing_pad_d**, %struct.eh_landing_pad_d*** %ptr.addr, align 8, !dbg !14424
  store %struct.eh_landing_pad_d* %6, %struct.eh_landing_pad_d** %7, align 8, !dbg !14424
  store i32 1, i32* %retval, align 4, !dbg !14424
  br label %return, !dbg !14424

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.eh_landing_pad_d**, %struct.eh_landing_pad_d*** %ptr.addr, align 8, !dbg !14426
  store %struct.eh_landing_pad_d* null, %struct.eh_landing_pad_d** %8, align 8, !dbg !14426
  store i32 0, i32* %retval, align 4, !dbg !14426
  br label %return, !dbg !14426

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !14419
  ret i32 %9, !dbg !14419
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_region_d* @ehr_next(%struct.eh_region_d* %r, %struct.eh_region_d* %start) #0 !dbg !14428 {
entry:
  %retval = alloca %struct.eh_region_d*, align 8
  %r.addr = alloca %struct.eh_region_d*, align 8
  %start.addr = alloca %struct.eh_region_d*, align 8
  store %struct.eh_region_d* %r, %struct.eh_region_d** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r.addr, metadata !14431, metadata !DIExpression()), !dbg !14432
  store %struct.eh_region_d* %start, %struct.eh_region_d** %start.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %start.addr, metadata !14433, metadata !DIExpression()), !dbg !14434
  %0 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !14435
  %inner = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %0, i32 0, i32 1, !dbg !14437
  %1 = load %struct.eh_region_d*, %struct.eh_region_d** %inner, align 8, !dbg !14437
  %tobool = icmp ne %struct.eh_region_d* %1, null, !dbg !14435
  br i1 %tobool, label %if.then, label %if.else, !dbg !14438

if.then:                                          ; preds = %entry
  %2 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !14439
  %inner1 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %2, i32 0, i32 1, !dbg !14440
  %3 = load %struct.eh_region_d*, %struct.eh_region_d** %inner1, align 8, !dbg !14440
  store %struct.eh_region_d* %3, %struct.eh_region_d** %r.addr, align 8, !dbg !14441
  br label %if.end12, !dbg !14442

if.else:                                          ; preds = %entry
  %4 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !14443
  %next_peer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %4, i32 0, i32 2, !dbg !14445
  %5 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer, align 8, !dbg !14445
  %tobool2 = icmp ne %struct.eh_region_d* %5, null, !dbg !14443
  br i1 %tobool2, label %land.lhs.true, label %if.else5, !dbg !14446

land.lhs.true:                                    ; preds = %if.else
  %6 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !14447
  %7 = load %struct.eh_region_d*, %struct.eh_region_d** %start.addr, align 8, !dbg !14448
  %cmp = icmp ne %struct.eh_region_d* %6, %7, !dbg !14449
  br i1 %cmp, label %if.then3, label %if.else5, !dbg !14450

if.then3:                                         ; preds = %land.lhs.true
  %8 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !14451
  %next_peer4 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %8, i32 0, i32 2, !dbg !14452
  %9 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer4, align 8, !dbg !14452
  store %struct.eh_region_d* %9, %struct.eh_region_d** %r.addr, align 8, !dbg !14453
  br label %if.end11, !dbg !14454

if.else5:                                         ; preds = %land.lhs.true, %if.else
  br label %do.body, !dbg !14455

do.body:                                          ; preds = %do.cond, %if.else5
  %10 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !14457
  %outer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %10, i32 0, i32 0, !dbg !14459
  %11 = load %struct.eh_region_d*, %struct.eh_region_d** %outer, align 8, !dbg !14459
  store %struct.eh_region_d* %11, %struct.eh_region_d** %r.addr, align 8, !dbg !14460
  %12 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !14461
  %13 = load %struct.eh_region_d*, %struct.eh_region_d** %start.addr, align 8, !dbg !14463
  %cmp6 = icmp eq %struct.eh_region_d* %12, %13, !dbg !14464
  br i1 %cmp6, label %if.then7, label %if.end, !dbg !14465

if.then7:                                         ; preds = %do.body
  store %struct.eh_region_d* null, %struct.eh_region_d** %retval, align 8, !dbg !14466
  br label %return, !dbg !14466

if.end:                                           ; preds = %do.body
  br label %do.cond, !dbg !14467

do.cond:                                          ; preds = %if.end
  %14 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !14468
  %next_peer8 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %14, i32 0, i32 2, !dbg !14469
  %15 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer8, align 8, !dbg !14469
  %cmp9 = icmp eq %struct.eh_region_d* %15, null, !dbg !14470
  br i1 %cmp9, label %do.body, label %do.end, !dbg !14467, !llvm.loop !14471

do.end:                                           ; preds = %do.cond
  %16 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !14473
  %next_peer10 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %16, i32 0, i32 2, !dbg !14474
  %17 = load %struct.eh_region_d*, %struct.eh_region_d** %next_peer10, align 8, !dbg !14474
  store %struct.eh_region_d* %17, %struct.eh_region_d** %r.addr, align 8, !dbg !14475
  br label %if.end11

if.end11:                                         ; preds = %do.end, %if.then3
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %if.then
  %18 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !14476
  store %struct.eh_region_d* %18, %struct.eh_region_d** %retval, align 8, !dbg !14477
  br label %return, !dbg !14477

return:                                           ; preds = %if.end12, %if.then7
  %19 = load %struct.eh_region_d*, %struct.eh_region_d** %retval, align 8, !dbg !14478
  ret %struct.eh_region_d* %19, !dbg !14478
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_num_ops(%union.gimple_statement_d* %gs, i32 %num_ops) #0 !dbg !14479 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !14480, metadata !DIExpression()), !dbg !14481
  store i32 %num_ops, i32* %num_ops.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_ops.addr, metadata !14482, metadata !DIExpression()), !dbg !14483
  %0 = load i32, i32* %num_ops.addr, align 4, !dbg !14484
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14485
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !14486
  %num_ops1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !14487
  store i32 %0, i32* %num_ops1, align 4, !dbg !14488
  ret void, !dbg !14489
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_use_stmts_after(%struct.ssa_use_operand_d* %head, %struct.immediate_use_iterator_d* %imm) #0 !dbg !14490 {
entry:
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %last_p = alloca %struct.ssa_use_operand_d*, align 8
  %head_stmt = alloca %union.gimple_statement_d*, align 8
  %use = alloca %union.tree_node*, align 8
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  %flag = alloca i32, align 4
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !14493, metadata !DIExpression()), !dbg !14494
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !14495, metadata !DIExpression()), !dbg !14496
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !14497, metadata !DIExpression()), !dbg !14498
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p, metadata !14499, metadata !DIExpression()), !dbg !14500
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !14501
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !14500
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %head_stmt, metadata !14502, metadata !DIExpression()), !dbg !14503
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !14504
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 2, !dbg !14504
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !14504
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !14504
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %head_stmt, align 8, !dbg !14503
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !14505, metadata !DIExpression()), !dbg !14506
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !14507
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %3), !dbg !14507
  store %union.tree_node* %call, %union.tree_node** %use, align 8, !dbg !14506
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !14508, metadata !DIExpression()), !dbg !14509
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !14510, metadata !DIExpression()), !dbg !14511
  %4 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !14512
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !14513
  %conv = zext i8 %call1 to i32, !dbg !14513
  %tobool = icmp ne i32 %conv, 0, !dbg !14513
  %5 = zext i1 %tobool to i64, !dbg !14513
  %cond = select i1 %tobool, i32 1, i32 4, !dbg !14513
  store i32 %cond, i32* %flag, align 4, !dbg !14514
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !14515
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !14517
  %cmp = icmp eq i32 %call2, 16, !dbg !14518
  br i1 %cmp, label %if.then, label %if.else, !dbg !14519

if.then:                                          ; preds = %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !14520
  %8 = load i32, i32* %flag, align 4, !dbg !14520
  %call4 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %7, i32 %8), !dbg !14520
  store %struct.ssa_use_operand_d* %call4, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !14520
  br label %for.cond, !dbg !14520

for.cond:                                         ; preds = %for.inc, %if.then
  %call5 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !14523
  %tobool6 = icmp ne i8 %call5, 0, !dbg !14523
  %lnot = xor i1 %tobool6, true, !dbg !14523
  br i1 %lnot, label %for.body, label %for.end, !dbg !14520

for.body:                                         ; preds = %for.cond
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !14525
  %call7 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %9), !dbg !14525
  %10 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !14527
  %cmp8 = icmp eq %union.tree_node* %call7, %10, !dbg !14528
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !14529

if.then10:                                        ; preds = %for.body
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !14530
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !14531
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !14532
  %call11 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %11, %struct.ssa_use_operand_d* %12, %struct.ssa_use_operand_d* %13), !dbg !14533
  store %struct.ssa_use_operand_d* %call11, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !14534
  br label %if.end, !dbg !14535

if.end:                                           ; preds = %if.then10, %for.body
  br label %for.inc, !dbg !14527

for.inc:                                          ; preds = %if.end
  %call12 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !14523
  store %struct.ssa_use_operand_d* %call12, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !14523
  br label %for.cond, !dbg !14523, !llvm.loop !14536

for.end:                                          ; preds = %for.cond
  br label %if.end44, !dbg !14538

if.else:                                          ; preds = %entry
  %14 = load i32, i32* %flag, align 4, !dbg !14539
  %cmp13 = icmp eq i32 %14, 1, !dbg !14542
  br i1 %cmp13, label %if.then15, label %if.else31, !dbg !14543

if.then15:                                        ; preds = %if.else
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !14544
  %16 = load i32, i32* %flag, align 4, !dbg !14544
  %call16 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %15, i32 %16), !dbg !14544
  store %struct.ssa_use_operand_d* %call16, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !14544
  br label %for.cond17, !dbg !14544

for.cond17:                                       ; preds = %for.inc28, %if.then15
  %call18 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !14547
  %tobool19 = icmp ne i8 %call18, 0, !dbg !14547
  %lnot20 = xor i1 %tobool19, true, !dbg !14547
  br i1 %lnot20, label %for.body21, label %for.end30, !dbg !14544

for.body21:                                       ; preds = %for.cond17
  %17 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !14549
  %call22 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %17), !dbg !14549
  %18 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !14551
  %cmp23 = icmp eq %union.tree_node* %call22, %18, !dbg !14552
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !14553

if.then25:                                        ; preds = %for.body21
  %19 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !14554
  %20 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !14555
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !14556
  %call26 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %19, %struct.ssa_use_operand_d* %20, %struct.ssa_use_operand_d* %21), !dbg !14557
  store %struct.ssa_use_operand_d* %call26, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !14558
  br label %if.end27, !dbg !14559

if.end27:                                         ; preds = %if.then25, %for.body21
  br label %for.inc28, !dbg !14551

for.inc28:                                        ; preds = %if.end27
  %call29 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !14547
  store %struct.ssa_use_operand_d* %call29, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !14547
  br label %for.cond17, !dbg !14547, !llvm.loop !14560

for.end30:                                        ; preds = %for.cond17
  br label %if.end43, !dbg !14562

if.else31:                                        ; preds = %if.else
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !14563
  %call32 = call %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %22), !dbg !14565
  store %struct.ssa_use_operand_d* %call32, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !14566
  %cmp33 = icmp ne %struct.ssa_use_operand_d* %call32, null, !dbg !14567
  br i1 %cmp33, label %if.then35, label %if.end42, !dbg !14568

if.then35:                                        ; preds = %if.else31
  %23 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !14569
  %call36 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %23), !dbg !14569
  %24 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !14572
  %cmp37 = icmp eq %union.tree_node* %call36, %24, !dbg !14573
  br i1 %cmp37, label %if.then39, label %if.end41, !dbg !14574

if.then39:                                        ; preds = %if.then35
  %25 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !14575
  %26 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !14576
  %27 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !14577
  %call40 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %25, %struct.ssa_use_operand_d* %26, %struct.ssa_use_operand_d* %27), !dbg !14578
  store %struct.ssa_use_operand_d* %call40, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !14579
  br label %if.end41, !dbg !14580

if.end41:                                         ; preds = %if.then39, %if.then35
  br label %if.end42, !dbg !14581

if.end42:                                         ; preds = %if.end41, %if.else31
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %for.end30
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %for.end
  %28 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !14582
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %28, i32 0, i32 2, !dbg !14584
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !14585
  %29 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !14585
  %cmp45 = icmp ne %struct.ssa_use_operand_d* %29, null, !dbg !14586
  br i1 %cmp45, label %if.then47, label %if.end49, !dbg !14587

if.then47:                                        ; preds = %if.end44
  %30 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !14588
  %iter_node48 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %30, i32 0, i32 2, !dbg !14589
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node48), !dbg !14590
  br label %if.end49, !dbg !14590

if.end49:                                         ; preds = %if.then47, %if.end44
  %31 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !14591
  %iter_node50 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %31, i32 0, i32 2, !dbg !14592
  %32 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !14593
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %iter_node50, %struct.ssa_use_operand_d* %32), !dbg !14594
  ret void, !dbg !14595
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !14596 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !14600, metadata !DIExpression()), !dbg !14601
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !14602, metadata !DIExpression()), !dbg !14603
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !14604, metadata !DIExpression()), !dbg !14605
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !14606, metadata !DIExpression()), !dbg !14607
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !14608
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !14609
  store %union.tree_node* %call, %union.tree_node** %phi_def, align 8, !dbg !14607
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !14610, metadata !DIExpression()), !dbg !14611
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14612
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !14613
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14614
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !14615
  store i8 0, i8* %done, align 8, !dbg !14616
  %3 = load i32, i32* %flags.addr, align 4, !dbg !14617
  %and = and i32 %3, 5, !dbg !14617
  %cmp = icmp ne i32 %and, 0, !dbg !14617
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !14617

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.65, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !14617
  br label %cond.end, !dbg !14617

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14617

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !14617
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !14618
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !14619
  %conv = zext i8 %call1 to i32, !dbg !14619
  %tobool = icmp ne i32 %conv, 0, !dbg !14619
  %5 = zext i1 %tobool to i64, !dbg !14619
  %cond2 = select i1 %tobool, i32 1, i32 4, !dbg !14619
  store i32 %cond2, i32* %comp, align 4, !dbg !14620
  %6 = load i32, i32* %flags.addr, align 4, !dbg !14621
  %7 = load i32, i32* %comp, align 4, !dbg !14623
  %and3 = and i32 %6, %7, !dbg !14624
  %cmp4 = icmp eq i32 %and3, 0, !dbg !14625
  br i1 %cmp4, label %if.then, label %if.end, !dbg !14626

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14627
  %done6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !14629
  store i8 1, i8* %done6, align 8, !dbg !14630
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !14631
  br label %return, !dbg !14631

if.end:                                           ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !14632
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14633
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 6, !dbg !14634
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !14635
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !14636
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %11), !dbg !14637
  %12 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14638
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %12, i32 0, i32 5, !dbg !14639
  store i32 %call7, i32* %num_phi, align 4, !dbg !14640
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14641
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 1, !dbg !14642
  store i32 2, i32* %iter_type, align 4, !dbg !14643
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14644
  %call8 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %14), !dbg !14645
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !14646
  br label %return, !dbg !14646

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !14647
  ret %struct.ssa_use_operand_d* %15, !dbg !14647
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !14648 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !14653, metadata !DIExpression()), !dbg !14654
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14655
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !14656
  %1 = load i8, i8* %done, align 8, !dbg !14656
  ret i8 %1, !dbg !14657
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p) #0 !dbg !14658 {
entry:
  %use_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %last_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p.addr, metadata !14661, metadata !DIExpression()), !dbg !14662
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !14663, metadata !DIExpression()), !dbg !14664
  store %struct.ssa_use_operand_d* %last_p, %struct.ssa_use_operand_d** %last_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p.addr, metadata !14665, metadata !DIExpression()), !dbg !14666
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !14667
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !14669
  %cmp = icmp ne %struct.ssa_use_operand_d* %0, %1, !dbg !14670
  br i1 %cmp, label %if.then, label %if.end3, !dbg !14671

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !14672
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !14675
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !14675
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !14676
  %cmp1 = icmp eq %struct.ssa_use_operand_d* %3, %4, !dbg !14677
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !14678

if.then2:                                         ; preds = %if.then
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !14679
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !14680
  br label %if.end, !dbg !14681

if.else:                                          ; preds = %if.then
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !14682
  call void @delink_imm_use(%struct.ssa_use_operand_d* %6), !dbg !14684
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !14685
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !14686
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d* %8), !dbg !14687
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !14688
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !14689
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end3, !dbg !14690

if.end3:                                          ; preds = %if.end, %entry
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !14691
  ret %struct.ssa_use_operand_d* %10, !dbg !14692
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !14693 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !14696, metadata !DIExpression()), !dbg !14697
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !14698, metadata !DIExpression()), !dbg !14699
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14700
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !14702
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !14702
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !14700
  br i1 %tobool, label %if.then, label %if.end, !dbg !14703

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14704
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !14704
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !14704
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !14704
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !14706
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14707
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !14708
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !14708
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !14709
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !14709
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14710
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !14711
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !14712
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !14713
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !14714
  br label %return, !dbg !14714

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14715
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !14717
  %10 = load i32, i32* %phi_i, align 8, !dbg !14717
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14718
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !14719
  %12 = load i32, i32* %num_phi, align 4, !dbg !14719
  %cmp = icmp slt i32 %10, %12, !dbg !14720
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !14721

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14722
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !14722
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !14722
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14722
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !14722
  %16 = load i32, i32* %phi_i5, align 8, !dbg !14722
  %inc = add nsw i32 %16, 1, !dbg !14722
  store i32 %inc, i32* %phi_i5, align 8, !dbg !14722
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !14722
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !14724
  br label %return, !dbg !14724

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14725
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !14726
  store i8 1, i8* %done, align 8, !dbg !14727
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !14728
  br label %return, !dbg !14728

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !14729
  ret %struct.ssa_use_operand_d* %18, !dbg !14729
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !14730 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !14731, metadata !DIExpression()), !dbg !14732
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !14733, metadata !DIExpression()), !dbg !14734
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !14735, metadata !DIExpression()), !dbg !14736
  %0 = load i32, i32* %flags.addr, align 4, !dbg !14737
  %and = and i32 %0, 10, !dbg !14737
  %cmp = icmp eq i32 %and, 0, !dbg !14737
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !14737

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !14737
  %and1 = and i32 %1, 1, !dbg !14737
  %tobool = icmp ne i32 %and1, 0, !dbg !14737
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !14737

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.65, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !14737
  br label %cond.end, !dbg !14737

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !14737

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !14737
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14738
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14739
  %4 = load i32, i32* %flags.addr, align 4, !dbg !14740
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !14741
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14742
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !14743
  store i32 2, i32* %iter_type, align 4, !dbg !14744
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14745
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !14746
  ret %struct.ssa_use_operand_d* %call, !dbg !14747
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %g) #0 !dbg !14748 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %ops = alloca %struct.use_optype_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !14751, metadata !DIExpression()), !dbg !14752
  call void @llvm.dbg.declare(metadata %struct.use_optype_d** %ops, metadata !14753, metadata !DIExpression()), !dbg !14754
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !14755
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !14757
  %tobool = icmp ne i8 %call, 0, !dbg !14757
  br i1 %tobool, label %if.end, label %if.then, !dbg !14758

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !14759
  br label %return, !dbg !14759

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !14760
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !14761
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !14762
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !14763
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !14763
  store %struct.use_optype_d* %2, %struct.use_optype_d** %ops, align 8, !dbg !14764
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !14765
  %tobool1 = icmp ne %struct.use_optype_d* %3, null, !dbg !14765
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !14767

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !14768
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %4, i32 0, i32 1, !dbg !14768
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use_ptr, i32 0, i32 3, !dbg !14769
  %5 = load %union.tree_node**, %union.tree_node*** %use, align 8, !dbg !14769
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !14770
  %gsmembase = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_with_memory_ops_base*, !dbg !14771
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !14772
  %cmp = icmp eq %union.tree_node** %5, %vuse, !dbg !14773
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !14774

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !14775
  %use_ptr3 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %7, i32 0, i32 1, !dbg !14775
  store %struct.ssa_use_operand_d* %use_ptr3, %struct.ssa_use_operand_d** %retval, align 8, !dbg !14776
  br label %return, !dbg !14776

if.end4:                                          ; preds = %land.lhs.true, %if.end
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !14777
  br label %return, !dbg !14777

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !14778
  ret %struct.ssa_use_operand_d* %8, !dbg !14778
}

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !14779 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !14782, metadata !DIExpression()), !dbg !14783
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14784
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !14786
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !14786
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !14787
  br i1 %cmp, label %if.then, label %if.end, !dbg !14788

if.then:                                          ; preds = %entry
  br label %return, !dbg !14789

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14790
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !14791
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !14791
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14792
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !14793
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !14793
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !14794
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !14795
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14796
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !14797
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !14797
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14798
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !14799
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !14799
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !14800
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !14801
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14802
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !14803
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !14804
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14805
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !14806
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !14807
  br label %return, !dbg !14808

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !14808
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !14809 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !14812, metadata !DIExpression()), !dbg !14813
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !14814, metadata !DIExpression()), !dbg !14815
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !14816
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14817
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !14818
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !14819
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !14820
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !14821
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !14821
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14822
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !14823
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !14824
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14825
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !14826
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !14827
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !14827
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !14828
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !14829
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !14830
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !14831
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !14832
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !14833
  ret void, !dbg !14834
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !14835 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !14836, metadata !DIExpression()), !dbg !14837
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !14838
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !14839
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !14840
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !14840
  ret %union.tree_node* %1, !dbg !14841
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !14842 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !14845, metadata !DIExpression()), !dbg !14846
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14847
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !14848
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !14849
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14850
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %1, i32 0, i32 3, !dbg !14851
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !14852
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14853
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 1, !dbg !14854
  store i32 0, i32* %iter_type, align 4, !dbg !14855
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14856
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 4, !dbg !14857
  store i32 0, i32* %phi_i, align 8, !dbg !14858
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14859
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 5, !dbg !14860
  store i32 0, i32* %num_phi, align 4, !dbg !14861
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14862
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 6, !dbg !14863
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !14864
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14865
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 0, !dbg !14866
  store i8 1, i8* %done, align 8, !dbg !14867
  ret void, !dbg !14868
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !14869 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !14872, metadata !DIExpression()), !dbg !14873
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !14874, metadata !DIExpression()), !dbg !14875
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !14876, metadata !DIExpression()), !dbg !14877
  %0 = load i32, i32* %flags.addr, align 4, !dbg !14878
  %and = and i32 %0, 8, !dbg !14878
  %tobool = icmp ne i32 %and, 0, !dbg !14878
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !14878

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !14878
  %and1 = and i32 %1, 2, !dbg !14878
  %tobool2 = icmp ne i32 %and1, 0, !dbg !14878
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !14878

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !14878
  %and3 = and i32 %2, 4, !dbg !14878
  %tobool4 = icmp ne i32 %and3, 0, !dbg !14878
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !14878

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !14878
  %and6 = and i32 %3, 1, !dbg !14878
  %tobool7 = icmp ne i32 %and6, 0, !dbg !14878
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !14878

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.65, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !14878
  br label %cond.end, !dbg !14878

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !14878

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !14878
  %4 = load i32, i32* %flags.addr, align 4, !dbg !14879
  %and8 = and i32 %4, 10, !dbg !14880
  %tobool9 = icmp ne i32 %and8, 0, !dbg !14880
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !14881

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14882
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !14883
  br label %cond.end12, !dbg !14881

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !14881

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !14881
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14884
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !14885
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !14886
  %7 = load i32, i32* %flags.addr, align 4, !dbg !14887
  %and14 = and i32 %7, 8, !dbg !14889
  %tobool15 = icmp ne i32 %and14, 0, !dbg !14889
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !14890

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14891
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !14892
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !14892
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !14891
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !14893

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14894
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !14895
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !14896
  br i1 %cmp, label %if.then, label %if.end, !dbg !14897

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14898
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !14899
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !14899
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !14900
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !14900
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14901
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !14902
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !14903
  br label %if.end, !dbg !14901

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !14904
  %and23 = and i32 %15, 5, !dbg !14905
  %tobool24 = icmp ne i32 %and23, 0, !dbg !14905
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !14906

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14907
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !14908
  br label %cond.end28, !dbg !14906

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !14906

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !14906
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14909
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !14910
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !14911
  %18 = load i32, i32* %flags.addr, align 4, !dbg !14912
  %and30 = and i32 %18, 4, !dbg !14914
  %tobool31 = icmp ne i32 %and30, 0, !dbg !14914
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !14915

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14916
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !14917
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !14917
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !14916
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !14918

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !14919
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !14920
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !14921
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !14922

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14923
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !14924
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !14924
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !14925
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !14925
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14926
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !14927
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !14928
  br label %if.end42, !dbg !14926

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14929
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !14930
  store i8 0, i8* %done, align 8, !dbg !14931
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14932
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !14933
  store i32 0, i32* %phi_i, align 8, !dbg !14934
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14935
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !14936
  store i32 0, i32* %num_phi, align 4, !dbg !14937
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !14938
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !14939
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !14940
  ret void, !dbg !14941
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !14942 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !14945, metadata !DIExpression()), !dbg !14946
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !14947
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !14949
  %tobool = icmp ne i8 %call, 0, !dbg !14949
  br i1 %tobool, label %if.end, label %if.then, !dbg !14950

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !14951
  br label %return, !dbg !14951

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !14952
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !14953
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !14954
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !14955
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !14955
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !14956
  br label %return, !dbg !14956

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !14957
  ret %struct.def_optype_d* %3, !dbg !14957
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !14958 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !14959, metadata !DIExpression()), !dbg !14960
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !14961
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !14963
  %tobool = icmp ne i8 %call, 0, !dbg !14963
  br i1 %tobool, label %if.end, label %if.then, !dbg !14964

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14965
  br label %return, !dbg !14965

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !14966
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !14967
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !14968
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !14968
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !14969
  br label %return, !dbg !14969

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !14970
  ret %union.tree_node* %3, !dbg !14970
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !14971 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !14974, metadata !DIExpression()), !dbg !14975
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !14976
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !14978
  %tobool = icmp ne i8 %call, 0, !dbg !14978
  br i1 %tobool, label %if.end, label %if.then, !dbg !14979

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !14980
  br label %return, !dbg !14980

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !14981
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !14982
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !14983
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !14984
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !14984
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !14985
  br label %return, !dbg !14985

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !14986
  ret %struct.use_optype_d* %3, !dbg !14986
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !14987 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !14988, metadata !DIExpression()), !dbg !14989
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !14990
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !14992
  %tobool = icmp ne i8 %call, 0, !dbg !14992
  br i1 %tobool, label %if.end, label %if.then, !dbg !14993

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14994
  br label %return, !dbg !14994

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !14995
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !14996
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !14997
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !14997
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !14998
  br label %return, !dbg !14998

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !14999
  ret %union.tree_node* %3, !dbg !14999
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !15000 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !15001, metadata !DIExpression()), !dbg !15002
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !15003
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !15004
  %cmp = icmp uge i32 %call, 6, !dbg !15005
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !15006

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !15007
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !15008
  %cmp2 = icmp ule i32 %call1, 9, !dbg !15009
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !15010
  %land.ext = zext i1 %2 to i32, !dbg !15006
  %conv = trunc i32 %land.ext to i8, !dbg !15004
  ret i8 %conv, !dbg !15011
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !15012 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15015, metadata !DIExpression()), !dbg !15016
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !15017, metadata !DIExpression()), !dbg !15018
  %0 = load i32, i32* %index.addr, align 4, !dbg !15019
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15019
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !15019
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !15019
  %2 = load i32, i32* %capacity, align 8, !dbg !15019
  %cmp = icmp ule i32 %0, %2, !dbg !15019
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !15019

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.64, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !15019
  br label %cond.end, !dbg !15019

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !15019

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !15019
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15020
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !15021
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !15022
  %4 = load i32, i32* %index.addr, align 4, !dbg !15023
  %idxprom = zext i32 %4 to i64, !dbg !15020
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !15020
  ret %struct.phi_arg_d* %arrayidx, !dbg !15024
}

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) #0 !dbg !15025 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !15028, metadata !DIExpression()), !dbg !15029
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !15029
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !15029
  %1 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !15029
  ret %struct.VEC_int_heap* %1, !dbg !15029
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @number_of_loops() #0 !dbg !15030 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !15031
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !15031
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !15031
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !15031
  %tobool = icmp ne %struct.loops* %1, null, !dbg !15031
  br i1 %tobool, label %if.end, label %if.then, !dbg !15033

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !15034
  br label %return, !dbg !15034

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !15035
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !15035
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !15035
  %3 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !15035
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 1, !dbg !15035
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !15035
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %4, null, !dbg !15035
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !15035

cond.true:                                        ; preds = %if.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !15035
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !15035
  %x_current_loops5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 4, !dbg !15035
  %6 = load %struct.loops*, %struct.loops** %x_current_loops5, align 8, !dbg !15035
  %larray6 = getelementptr inbounds %struct.loops, %struct.loops* %6, i32 0, i32 1, !dbg !15035
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray6, align 8, !dbg !15035
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %7, i32 0, i32 0, !dbg !15035
  br label %cond.end, !dbg !15035

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !15035

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !15035
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !15035
  store i32 %call, i32* %retval, align 4, !dbg !15036
  br label %return, !dbg !15036

return:                                           ; preds = %cond.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !15037
  ret i32 %8, !dbg !15037
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) #0 !dbg !15038 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !15043, metadata !DIExpression()), !dbg !15044
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !15045, metadata !DIExpression()), !dbg !15044
  store %struct.loop** %ptr, %struct.loop*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %ptr.addr, metadata !15046, metadata !DIExpression()), !dbg !15044
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !15047
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !15047
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !15047

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !15047
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !15047
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !15047
  %3 = load i32, i32* %num, align 8, !dbg !15047
  %cmp = icmp ult i32 %1, %3, !dbg !15047
  br i1 %cmp, label %if.then, label %if.else, !dbg !15044

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !15049
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !15049
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !15049
  %idxprom = zext i32 %5 to i64, !dbg !15049
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !15049
  %6 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !15049
  %7 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !15049
  store %struct.loop* %6, %struct.loop** %7, align 8, !dbg !15049
  store i32 1, i32* %retval, align 4, !dbg !15049
  br label %return, !dbg !15049

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !15051
  store %struct.loop* null, %struct.loop** %8, align 8, !dbg !15051
  store i32 0, i32* %retval, align 4, !dbg !15051
  br label %return, !dbg !15051

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !15044
  ret i32 %9, !dbg !15044
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !15053 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !15057, metadata !DIExpression()), !dbg !15058
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !15059, metadata !DIExpression()), !dbg !15058
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !15060, metadata !DIExpression()), !dbg !15058
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !15058
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !15058
  %1 = load i32, i32* %num, align 4, !dbg !15058
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !15058
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !15058
  %3 = load i32, i32* %alloc, align 4, !dbg !15058
  %cmp = icmp ult i32 %1, %3, !dbg !15058
  %conv = zext i1 %cmp to i32, !dbg !15058
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !15058
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !15058
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !15058
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !15058
  %6 = load i32, i32* %num1, align 4, !dbg !15058
  %inc = add i32 %6, 1, !dbg !15058
  store i32 %inc, i32* %num1, align 4, !dbg !15058
  %idxprom = zext i32 %6 to i64, !dbg !15058
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !15058
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !15058
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !15058
  %8 = load i32*, i32** %slot_, align 8, !dbg !15058
  store i32 %7, i32* %8, align 4, !dbg !15058
  %9 = load i32*, i32** %slot_, align 8, !dbg !15058
  ret i32* %9, !dbg !15058
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !15061 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !15064, metadata !DIExpression()), !dbg !15065
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !15065
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !15065
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !15065

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !15065
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !15065
  %2 = load i32, i32* %num, align 8, !dbg !15065
  br label %cond.end, !dbg !15065

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !15065

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !15065
  ret i32 %cond, !dbg !15065
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !15066 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !15071, metadata !DIExpression()), !dbg !15072
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !15073, metadata !DIExpression()), !dbg !15072
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !15074, metadata !DIExpression()), !dbg !15072
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !15075
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !15075
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !15075

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !15075
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !15075
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !15075
  %3 = load i32, i32* %num, align 4, !dbg !15075
  %cmp = icmp ult i32 %1, %3, !dbg !15075
  br i1 %cmp, label %if.then, label %if.else, !dbg !15072

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !15077
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !15077
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !15077
  %idxprom = zext i32 %5 to i64, !dbg !15077
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !15077
  %6 = load i32, i32* %arrayidx, align 4, !dbg !15077
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !15077
  store i32 %6, i32* %7, align 4, !dbg !15077
  store i32 1, i32* %retval, align 4, !dbg !15077
  br label %return, !dbg !15077

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !15079
  store i32 0, i32* %8, align 4, !dbg !15079
  store i32 0, i32* %retval, align 4, !dbg !15079
  br label %return, !dbg !15079

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !15072
  ret i32 %9, !dbg !15072
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !15081 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !15085, metadata !DIExpression()), !dbg !15086
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !15087
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !15087
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !15087
  br i1 %tobool, label %if.then, label %if.end, !dbg !15086

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !15087
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !15087
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !15087
  call void @free(i8* %4), !dbg !15087
  br label %if.end, !dbg !15087

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !15086
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !15086
  ret void, !dbg !15086
}

declare dso_local %struct.edge_def* @find_edge(%struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @find_case_label_for_value(%union.gimple_statement_d* %switch_stmt, %union.tree_node* %val) #0 !dbg !15089 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %switch_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  %low = alloca i64, align 8
  %high = alloca i64, align 8
  %n = alloca i64, align 8
  %default_case = alloca %union.tree_node*, align 8
  %i = alloca i64, align 8
  %t = alloca %union.tree_node*, align 8
  %cmp5 = alloca i32, align 4
  store %union.gimple_statement_d* %switch_stmt, %union.gimple_statement_d** %switch_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %switch_stmt.addr, metadata !15092, metadata !DIExpression()), !dbg !15093
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !15094, metadata !DIExpression()), !dbg !15095
  call void @llvm.dbg.declare(metadata i64* %low, metadata !15096, metadata !DIExpression()), !dbg !15097
  call void @llvm.dbg.declare(metadata i64* %high, metadata !15098, metadata !DIExpression()), !dbg !15099
  call void @llvm.dbg.declare(metadata i64* %n, metadata !15100, metadata !DIExpression()), !dbg !15101
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %switch_stmt.addr, align 8, !dbg !15102
  %call = call i32 @gimple_switch_num_labels(%union.gimple_statement_d* %0), !dbg !15103
  %conv = zext i32 %call to i64, !dbg !15103
  store i64 %conv, i64* %n, align 8, !dbg !15101
  call void @llvm.dbg.declare(metadata %union.tree_node** %default_case, metadata !15104, metadata !DIExpression()), !dbg !15105
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %switch_stmt.addr, align 8, !dbg !15106
  %call1 = call %union.tree_node* @gimple_switch_default_label(%union.gimple_statement_d* %1), !dbg !15107
  store %union.tree_node* %call1, %union.tree_node** %default_case, align 8, !dbg !15105
  store i64 0, i64* %low, align 8, !dbg !15108
  %2 = load i64, i64* %n, align 8, !dbg !15110
  store i64 %2, i64* %high, align 8, !dbg !15111
  br label %for.cond, !dbg !15112

for.cond:                                         ; preds = %if.end30, %entry
  %3 = load i64, i64* %high, align 8, !dbg !15113
  %4 = load i64, i64* %low, align 8, !dbg !15115
  %sub = sub i64 %3, %4, !dbg !15116
  %cmp = icmp ugt i64 %sub, 1, !dbg !15117
  br i1 %cmp, label %for.body, label %for.end, !dbg !15118

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %i, metadata !15119, metadata !DIExpression()), !dbg !15121
  %5 = load i64, i64* %high, align 8, !dbg !15122
  %6 = load i64, i64* %low, align 8, !dbg !15123
  %add = add i64 %5, %6, !dbg !15124
  %div = udiv i64 %add, 2, !dbg !15125
  store i64 %div, i64* %i, align 8, !dbg !15121
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !15126, metadata !DIExpression()), !dbg !15127
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %switch_stmt.addr, align 8, !dbg !15128
  %8 = load i64, i64* %i, align 8, !dbg !15129
  %conv3 = trunc i64 %8 to i32, !dbg !15129
  %call4 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %7, i32 %conv3), !dbg !15130
  store %union.tree_node* %call4, %union.tree_node** %t, align 8, !dbg !15127
  call void @llvm.dbg.declare(metadata i32* %cmp5, metadata !15131, metadata !DIExpression()), !dbg !15132
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !15133
  %exp = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !15133
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !15133
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !15133
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !15133
  %11 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !15134
  %call6 = call i32 @tree_int_cst_compare(%union.tree_node* %10, %union.tree_node* %11), !dbg !15135
  store i32 %call6, i32* %cmp5, align 4, !dbg !15136
  %12 = load i32, i32* %cmp5, align 4, !dbg !15137
  %cmp7 = icmp sgt i32 %12, 0, !dbg !15139
  br i1 %cmp7, label %if.then, label %if.else, !dbg !15140

if.then:                                          ; preds = %for.body
  %13 = load i64, i64* %i, align 8, !dbg !15141
  store i64 %13, i64* %high, align 8, !dbg !15142
  br label %if.end, !dbg !15143

if.else:                                          ; preds = %for.body
  %14 = load i64, i64* %i, align 8, !dbg !15144
  store i64 %14, i64* %low, align 8, !dbg !15145
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !15146
  %exp9 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !15146
  %operands10 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp9, i32 0, i32 3, !dbg !15146
  %arrayidx11 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands10, i64 0, i64 1, !dbg !15146
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx11, align 8, !dbg !15146
  %cmp12 = icmp eq %union.tree_node* %16, null, !dbg !15148
  br i1 %cmp12, label %if.then14, label %if.else19, !dbg !15149

if.then14:                                        ; preds = %if.end
  %17 = load i32, i32* %cmp5, align 4, !dbg !15150
  %cmp15 = icmp eq i32 %17, 0, !dbg !15153
  br i1 %cmp15, label %if.then17, label %if.end18, !dbg !15154

if.then17:                                        ; preds = %if.then14
  %18 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !15155
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !15156
  br label %return, !dbg !15156

if.end18:                                         ; preds = %if.then14
  br label %if.end30, !dbg !15157

if.else19:                                        ; preds = %if.end
  %19 = load i32, i32* %cmp5, align 4, !dbg !15158
  %cmp20 = icmp sle i32 %19, 0, !dbg !15161
  br i1 %cmp20, label %land.lhs.true, label %if.end29, !dbg !15162

land.lhs.true:                                    ; preds = %if.else19
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !15163
  %exp22 = bitcast %union.tree_node* %20 to %struct.tree_exp*, !dbg !15163
  %operands23 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp22, i32 0, i32 3, !dbg !15163
  %arrayidx24 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands23, i64 0, i64 1, !dbg !15163
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx24, align 8, !dbg !15163
  %22 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !15164
  %call25 = call i32 @tree_int_cst_compare(%union.tree_node* %21, %union.tree_node* %22), !dbg !15165
  %cmp26 = icmp sge i32 %call25, 0, !dbg !15166
  br i1 %cmp26, label %if.then28, label %if.end29, !dbg !15167

if.then28:                                        ; preds = %land.lhs.true
  %23 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !15168
  store %union.tree_node* %23, %union.tree_node** %retval, align 8, !dbg !15169
  br label %return, !dbg !15169

if.end29:                                         ; preds = %land.lhs.true, %if.else19
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.end18
  br label %for.cond, !dbg !15170, !llvm.loop !15171

for.end:                                          ; preds = %for.cond
  %24 = load %union.tree_node*, %union.tree_node** %default_case, align 8, !dbg !15173
  store %union.tree_node* %24, %union.tree_node** %retval, align 8, !dbg !15174
  br label %return, !dbg !15174

return:                                           ; preds = %for.end, %if.then28, %if.then17
  %25 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !15175
  ret %union.tree_node* %25, !dbg !15175
}

declare dso_local i32 @tree_int_cst_compare(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !15176 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !15177, metadata !DIExpression()), !dbg !15178
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !15179
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !15179
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !15179

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !15180
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !15181
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !15181
  br label %cond.end, !dbg !15179

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !15179

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !15179
  ret %struct.gimple_seq_node_d* %cond, !dbg !15182
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %gs) #0 !dbg !15183 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15186, metadata !DIExpression()), !dbg !15187
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15188
  %gimple_bind = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_bind*, !dbg !15189
  %body = getelementptr inbounds %struct.gimple_statement_bind, %struct.gimple_statement_bind* %gimple_bind, i32 0, i32 3, !dbg !15190
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !15190
  ret %struct.gimple_seq_d* %1, !dbg !15191
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %gs) #0 !dbg !15192 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15193, metadata !DIExpression()), !dbg !15194
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15195
  %gimple_try = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_try*, !dbg !15196
  %eval = getelementptr inbounds %struct.gimple_statement_try, %struct.gimple_statement_try* %gimple_try, i32 0, i32 1, !dbg !15197
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %eval, align 8, !dbg !15197
  ret %struct.gimple_seq_d* %1, !dbg !15198
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %gs) #0 !dbg !15199 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15200, metadata !DIExpression()), !dbg !15201
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15202
  %gimple_try = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_try*, !dbg !15203
  %cleanup = getelementptr inbounds %struct.gimple_statement_try, %struct.gimple_statement_try* %gimple_try, i32 0, i32 2, !dbg !15204
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup, align 8, !dbg !15204
  ret %struct.gimple_seq_d* %1, !dbg !15205
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %gs) #0 !dbg !15206 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15207, metadata !DIExpression()), !dbg !15208
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15209
  %gimple_eh_filter = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_eh_filter*, !dbg !15210
  %failure = getelementptr inbounds %struct.gimple_statement_eh_filter, %struct.gimple_statement_eh_filter* %gimple_eh_filter, i32 0, i32 2, !dbg !15211
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %failure, align 8, !dbg !15211
  ret %struct.gimple_seq_d* %1, !dbg !15212
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_catch_handler(%union.gimple_statement_d* %gs) #0 !dbg !15213 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15214, metadata !DIExpression()), !dbg !15215
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15216
  %gimple_catch = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_catch*, !dbg !15217
  %handler = getelementptr inbounds %struct.gimple_statement_catch, %struct.gimple_statement_catch* %gimple_catch, i32 0, i32 2, !dbg !15218
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %handler, align 8, !dbg !15218
  ret %struct.gimple_seq_d* %1, !dbg !15219
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_types_in_gimple_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !15220 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !15221, metadata !DIExpression()), !dbg !15222
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15223
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !15224
  switch i32 %call, label %sw.default [
    i32 6, label %sw.bb
    i32 4, label %sw.bb2
    i32 8, label %sw.bb5
    i32 1, label %sw.bb7
    i32 3, label %sw.bb35
    i32 5, label %sw.bb37
    i32 9, label %sw.bb39
    i32 7, label %sw.bb41
    i32 16, label %sw.bb42
    i32 18, label %sw.bb44
    i32 33, label %sw.bb44
    i32 14, label %sw.bb44
    i32 15, label %sw.bb44
    i32 13, label %sw.bb44
    i32 26, label %sw.bb45
    i32 27, label %sw.bb45
    i32 23, label %sw.bb45
    i32 30, label %sw.bb45
    i32 31, label %sw.bb45
    i32 32, label %sw.bb45
    i32 29, label %sw.bb45
    i32 24, label %sw.bb45
    i32 25, label %sw.bb45
    i32 22, label %sw.bb45
    i32 28, label %sw.bb45
    i32 19, label %sw.bb45
    i32 20, label %sw.bb45
    i32 21, label %sw.bb45
    i32 2, label %sw.bb46
  ], !dbg !15225

sw.bb:                                            ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15226
  %call1 = call zeroext i8 @verify_gimple_assign(%union.gimple_statement_d* %1), !dbg !15228
  store i8 %call1, i8* %retval, align 1, !dbg !15229
  br label %return, !dbg !15229

sw.bb2:                                           ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15230
  %call3 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %2), !dbg !15230
  %base = bitcast %union.tree_node* %call3 to %struct.tree_base*, !dbg !15230
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !15230
  %bf.load = load i64, i64* %3, align 8, !dbg !15230
  %bf.clear = and i64 %bf.load, 65535, !dbg !15230
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !15230
  %cmp = icmp ne i32 %bf.cast, 30, !dbg !15231
  %conv = zext i1 %cmp to i32, !dbg !15231
  %conv4 = trunc i32 %conv to i8, !dbg !15230
  store i8 %conv4, i8* %retval, align 1, !dbg !15232
  br label %return, !dbg !15232

sw.bb5:                                           ; preds = %entry
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15233
  %call6 = call zeroext i8 @verify_gimple_call(%union.gimple_statement_d* %4), !dbg !15234
  store i8 %call6, i8* %retval, align 1, !dbg !15235
  br label %return, !dbg !15235

sw.bb7:                                           ; preds = %entry
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15236
  %call8 = call i32 @gimple_cond_code(%union.gimple_statement_d* %5), !dbg !15236
  %idxprom = sext i32 %call8 to i64, !dbg !15236
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !15236
  %6 = load i32, i32* %arrayidx, align 4, !dbg !15236
  %cmp9 = icmp ne i32 %6, 5, !dbg !15238
  br i1 %cmp9, label %if.then, label %if.end, !dbg !15239

if.then:                                          ; preds = %sw.bb7
  call void (i8*, ...) @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.66, i64 0, i64 0)), !dbg !15240
  store i8 1, i8* %retval, align 1, !dbg !15242
  br label %return, !dbg !15242

if.end:                                           ; preds = %sw.bb7
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15243
  %call11 = call %union.tree_node* @gimple_cond_true_label(%union.gimple_statement_d* %7), !dbg !15245
  %tobool = icmp ne %union.tree_node* %call11, null, !dbg !15245
  br i1 %tobool, label %lor.lhs.false, label %lor.lhs.false19, !dbg !15246

lor.lhs.false:                                    ; preds = %if.end
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15247
  %call12 = call %union.tree_node* @gimple_cond_true_label(%union.gimple_statement_d* %8), !dbg !15247
  %base13 = bitcast %union.tree_node* %call12 to %struct.tree_base*, !dbg !15247
  %9 = bitcast %struct.tree_base* %base13 to i64*, !dbg !15247
  %bf.load14 = load i64, i64* %9, align 8, !dbg !15247
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !15247
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !15247
  %cmp17 = icmp eq i32 %bf.cast16, 30, !dbg !15248
  br i1 %cmp17, label %lor.lhs.false19, label %if.then30, !dbg !15249

lor.lhs.false19:                                  ; preds = %lor.lhs.false, %if.end
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15250
  %call20 = call %union.tree_node* @gimple_cond_false_label(%union.gimple_statement_d* %10), !dbg !15251
  %tobool21 = icmp ne %union.tree_node* %call20, null, !dbg !15251
  br i1 %tobool21, label %lor.lhs.false22, label %if.end31, !dbg !15252

lor.lhs.false22:                                  ; preds = %lor.lhs.false19
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15253
  %call23 = call %union.tree_node* @gimple_cond_false_label(%union.gimple_statement_d* %11), !dbg !15253
  %base24 = bitcast %union.tree_node* %call23 to %struct.tree_base*, !dbg !15253
  %12 = bitcast %struct.tree_base* %base24 to i64*, !dbg !15253
  %bf.load25 = load i64, i64* %12, align 8, !dbg !15253
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !15253
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !15253
  %cmp28 = icmp eq i32 %bf.cast27, 30, !dbg !15254
  br i1 %cmp28, label %if.end31, label %if.then30, !dbg !15255

if.then30:                                        ; preds = %lor.lhs.false22, %lor.lhs.false
  call void (i8*, ...) @error(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.67, i64 0, i64 0)), !dbg !15256
  store i8 1, i8* %retval, align 1, !dbg !15258
  br label %return, !dbg !15258

if.end31:                                         ; preds = %lor.lhs.false22, %lor.lhs.false19
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !15259
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15260
  %call32 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %14), !dbg !15261
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15262
  %call33 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %15), !dbg !15263
  %call34 = call zeroext i8 @verify_gimple_comparison(%union.tree_node* %13, %union.tree_node* %call32, %union.tree_node* %call33), !dbg !15264
  store i8 %call34, i8* %retval, align 1, !dbg !15265
  br label %return, !dbg !15265

sw.bb35:                                          ; preds = %entry
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15266
  %call36 = call zeroext i8 @verify_gimple_goto(%union.gimple_statement_d* %16), !dbg !15267
  store i8 %call36, i8* %retval, align 1, !dbg !15268
  br label %return, !dbg !15268

sw.bb37:                                          ; preds = %entry
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15269
  %call38 = call zeroext i8 @verify_gimple_switch(%union.gimple_statement_d* %17), !dbg !15270
  store i8 %call38, i8* %retval, align 1, !dbg !15271
  br label %return, !dbg !15271

sw.bb39:                                          ; preds = %entry
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15272
  %call40 = call zeroext i8 @verify_gimple_return(%union.gimple_statement_d* %18), !dbg !15273
  store i8 %call40, i8* %retval, align 1, !dbg !15274
  br label %return, !dbg !15274

sw.bb41:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !15275
  br label %return, !dbg !15275

sw.bb42:                                          ; preds = %entry
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15276
  %call43 = call zeroext i8 @verify_gimple_phi(%union.gimple_statement_d* %19), !dbg !15277
  store i8 %call43, i8* %retval, align 1, !dbg !15278
  br label %return, !dbg !15278

sw.bb44:                                          ; preds = %entry, %entry, %entry, %entry, %entry
  store i8 0, i8* %retval, align 1, !dbg !15279
  br label %return, !dbg !15279

sw.bb45:                                          ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 0, i8* %retval, align 1, !dbg !15280
  br label %return, !dbg !15280

sw.bb46:                                          ; preds = %entry
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15281
  %call47 = call zeroext i8 @verify_gimple_debug(%union.gimple_statement_d* %20), !dbg !15282
  store i8 %call47, i8* %retval, align 1, !dbg !15283
  br label %return, !dbg !15283

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 3828, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !15284
  br label %sw.epilog, !dbg !15285

sw.epilog:                                        ; preds = %sw.default
  store i8 0, i8* %retval, align 1, !dbg !15286
  br label %return, !dbg !15286

return:                                           ; preds = %sw.epilog, %sw.bb46, %sw.bb45, %sw.bb44, %sw.bb42, %sw.bb41, %sw.bb39, %sw.bb37, %sw.bb35, %if.end31, %if.then30, %if.then, %sw.bb5, %sw.bb2, %sw.bb
  %21 = load i8, i8* %retval, align 1, !dbg !15287
  ret i8 %21, !dbg !15287
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_gimple_assign(%union.gimple_statement_d* %stmt) #0 !dbg !15288 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !15289, metadata !DIExpression()), !dbg !15290
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15291
  %call = call i32 @gimple_assign_rhs_class(%union.gimple_statement_d* %0), !dbg !15292
  switch i32 %call, label %sw.default [
    i32 3, label %sw.bb
    i32 2, label %sw.bb2
    i32 1, label %sw.bb4
  ], !dbg !15293

sw.bb:                                            ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15294
  %call1 = call zeroext i8 @verify_gimple_assign_single(%union.gimple_statement_d* %1), !dbg !15296
  store i8 %call1, i8* %retval, align 1, !dbg !15297
  br label %return, !dbg !15297

sw.bb2:                                           ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15298
  %call3 = call zeroext i8 @verify_gimple_assign_unary(%union.gimple_statement_d* %2), !dbg !15299
  store i8 %call3, i8* %retval, align 1, !dbg !15300
  br label %return, !dbg !15300

sw.bb4:                                           ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15301
  %call5 = call zeroext i8 @verify_gimple_assign_binary(%union.gimple_statement_d* %3), !dbg !15302
  store i8 %call5, i8* %retval, align 1, !dbg !15303
  br label %return, !dbg !15303

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 3616, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !15304
  br label %sw.epilog, !dbg !15305

sw.epilog:                                        ; preds = %sw.default
  store i8 0, i8* %retval, align 1, !dbg !15306
  br label %return, !dbg !15306

return:                                           ; preds = %sw.epilog, %sw.bb4, %sw.bb2, %sw.bb
  %4 = load i8, i8* %retval, align 1, !dbg !15307
  ret i8 %4, !dbg !15307
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_gimple_call(%union.gimple_statement_d* %stmt) #0 !dbg !15308 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %fn = alloca %union.tree_node*, align 8
  %fntype = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %arg = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !15309, metadata !DIExpression()), !dbg !15310
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !15311, metadata !DIExpression()), !dbg !15312
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15313
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !15314
  store %union.tree_node* %call, %union.tree_node** %fn, align 8, !dbg !15312
  call void @llvm.dbg.declare(metadata %union.tree_node** %fntype, metadata !15315, metadata !DIExpression()), !dbg !15316
  call void @llvm.dbg.declare(metadata i32* %i, metadata !15317, metadata !DIExpression()), !dbg !15318
  %1 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !15319
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !15319
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !15319
  %bf.load = load i64, i64* %2, align 8, !dbg !15319
  %bf.clear = and i64 %bf.load, 65535, !dbg !15319
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !15319
  %cmp = icmp ne i32 %bf.cast, 50, !dbg !15321
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !15322

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !15323
  %call1 = call zeroext i8 @is_gimple_val(%union.tree_node* %3), !dbg !15324
  %tobool = icmp ne i8 %call1, 0, !dbg !15324
  br i1 %tobool, label %if.end, label %if.then, !dbg !15325

if.then:                                          ; preds = %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.100, i64 0, i64 0)), !dbg !15326
  %4 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !15328
  call void @debug_generic_stmt(%union.tree_node* %4), !dbg !15329
  store i8 1, i8* %retval, align 1, !dbg !15330
  br label %return, !dbg !15330

if.end:                                           ; preds = %land.lhs.true, %entry
  %5 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !15331
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !15331
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !15331
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15331
  %base2 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !15331
  %7 = bitcast %struct.tree_base* %base2 to i64*, !dbg !15331
  %bf.load3 = load i64, i64* %7, align 8, !dbg !15331
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !15331
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !15331
  %cmp6 = icmp eq i32 %bf.cast5, 10, !dbg !15331
  br i1 %cmp6, label %lor.lhs.false14, label %lor.lhs.false, !dbg !15331

lor.lhs.false:                                    ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !15331
  %common7 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !15331
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2, !dbg !15331
  %9 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !15331
  %base9 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !15331
  %10 = bitcast %struct.tree_base* %base9 to i64*, !dbg !15331
  %bf.load10 = load i64, i64* %10, align 8, !dbg !15331
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !15331
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !15331
  %cmp13 = icmp eq i32 %bf.cast12, 12, !dbg !15331
  br i1 %cmp13, label %lor.lhs.false14, label %if.then34, !dbg !15333

lor.lhs.false14:                                  ; preds = %lor.lhs.false, %if.end
  %11 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !15334
  %common15 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !15334
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !15334
  %12 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !15334
  %common17 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !15334
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !15334
  %13 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !15334
  %base19 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !15334
  %14 = bitcast %struct.tree_base* %base19 to i64*, !dbg !15334
  %bf.load20 = load i64, i64* %14, align 8, !dbg !15334
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !15334
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !15334
  %cmp23 = icmp ne i32 %bf.cast22, 20, !dbg !15335
  br i1 %cmp23, label %land.lhs.true24, label %if.end35, !dbg !15336

land.lhs.true24:                                  ; preds = %lor.lhs.false14
  %15 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !15337
  %common25 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !15337
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2, !dbg !15337
  %16 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !15337
  %common27 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !15337
  %type28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 2, !dbg !15337
  %17 = load %union.tree_node*, %union.tree_node** %type28, align 8, !dbg !15337
  %base29 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !15337
  %18 = bitcast %struct.tree_base* %base29 to i64*, !dbg !15337
  %bf.load30 = load i64, i64* %18, align 8, !dbg !15337
  %bf.clear31 = and i64 %bf.load30, 65535, !dbg !15337
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !15337
  %cmp33 = icmp ne i32 %bf.cast32, 21, !dbg !15338
  br i1 %cmp33, label %if.then34, label %if.end35, !dbg !15339

if.then34:                                        ; preds = %land.lhs.true24, %lor.lhs.false
  call void (i8*, ...) @error(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.101, i64 0, i64 0)), !dbg !15340
  store i8 1, i8* %retval, align 1, !dbg !15342
  br label %return, !dbg !15342

if.end35:                                         ; preds = %land.lhs.true24, %lor.lhs.false14
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15343
  %call36 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %19), !dbg !15345
  %tobool37 = icmp ne %union.tree_node* %call36, null, !dbg !15345
  br i1 %tobool37, label %land.lhs.true38, label %if.end47, !dbg !15346

land.lhs.true38:                                  ; preds = %if.end35
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15347
  %call39 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %20), !dbg !15348
  %call40 = call zeroext i8 @is_gimple_lvalue(%union.tree_node* %call39), !dbg !15349
  %tobool41 = icmp ne i8 %call40, 0, !dbg !15349
  br i1 %tobool41, label %lor.lhs.false42, label %if.then46, !dbg !15350

lor.lhs.false42:                                  ; preds = %land.lhs.true38
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15351
  %call43 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %21), !dbg !15352
  %call44 = call zeroext i8 @verify_types_in_gimple_reference(%union.tree_node* %call43, i8 zeroext 1), !dbg !15353
  %conv = zext i8 %call44 to i32, !dbg !15353
  %tobool45 = icmp ne i32 %conv, 0, !dbg !15353
  br i1 %tobool45, label %if.then46, label %if.end47, !dbg !15354

if.then46:                                        ; preds = %lor.lhs.false42, %land.lhs.true38
  call void (i8*, ...) @error(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.102, i64 0, i64 0)), !dbg !15355
  store i8 1, i8* %retval, align 1, !dbg !15357
  br label %return, !dbg !15357

if.end47:                                         ; preds = %lor.lhs.false42, %if.end35
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15358
  %call48 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %22), !dbg !15360
  %tobool49 = icmp ne %union.tree_node* %call48, null, !dbg !15360
  br i1 %tobool49, label %land.lhs.true50, label %if.end55, !dbg !15361

land.lhs.true50:                                  ; preds = %if.end47
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15362
  %call51 = call zeroext i8 @gimple_call_noreturn_p(%union.gimple_statement_d* %23), !dbg !15363
  %conv52 = zext i8 %call51 to i32, !dbg !15363
  %tobool53 = icmp ne i32 %conv52, 0, !dbg !15363
  br i1 %tobool53, label %if.then54, label %if.end55, !dbg !15364

if.then54:                                        ; preds = %land.lhs.true50
  call void (i8*, ...) @error(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.103, i64 0, i64 0)), !dbg !15365
  store i8 1, i8* %retval, align 1, !dbg !15367
  br label %return, !dbg !15367

if.end55:                                         ; preds = %land.lhs.true50, %if.end47
  %24 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !15368
  %common56 = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !15368
  %type57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 2, !dbg !15368
  %25 = load %union.tree_node*, %union.tree_node** %type57, align 8, !dbg !15368
  %common58 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !15368
  %type59 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common58, i32 0, i32 2, !dbg !15368
  %26 = load %union.tree_node*, %union.tree_node** %type59, align 8, !dbg !15368
  store %union.tree_node* %26, %union.tree_node** %fntype, align 8, !dbg !15369
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15370
  %call60 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %27), !dbg !15372
  %tobool61 = icmp ne %union.tree_node* %call60, null, !dbg !15372
  br i1 %tobool61, label %land.lhs.true62, label %if.end114, !dbg !15373

land.lhs.true62:                                  ; preds = %if.end55
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15374
  %call63 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %28), !dbg !15374
  %common64 = bitcast %union.tree_node* %call63 to %struct.tree_common*, !dbg !15374
  %type65 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common64, i32 0, i32 2, !dbg !15374
  %29 = load %union.tree_node*, %union.tree_node** %type65, align 8, !dbg !15374
  %30 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !15375
  %common66 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !15375
  %type67 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common66, i32 0, i32 2, !dbg !15375
  %31 = load %union.tree_node*, %union.tree_node** %type67, align 8, !dbg !15375
  %call68 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %29, %union.tree_node* %31), !dbg !15376
  %tobool69 = icmp ne i8 %call68, 0, !dbg !15376
  br i1 %tobool69, label %if.end114, label %land.lhs.true70, !dbg !15377

land.lhs.true70:                                  ; preds = %land.lhs.true62
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15378
  %call71 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %32), !dbg !15378
  %common72 = bitcast %union.tree_node* %call71 to %struct.tree_common*, !dbg !15378
  %type73 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common72, i32 0, i32 2, !dbg !15378
  %33 = load %union.tree_node*, %union.tree_node** %type73, align 8, !dbg !15378
  %base74 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !15378
  %34 = bitcast %struct.tree_base* %base74 to i64*, !dbg !15378
  %bf.load75 = load i64, i64* %34, align 8, !dbg !15378
  %bf.clear76 = and i64 %bf.load75, 65535, !dbg !15378
  %bf.cast77 = trunc i64 %bf.clear76 to i32, !dbg !15378
  %cmp78 = icmp eq i32 %bf.cast77, 10, !dbg !15378
  br i1 %cmp78, label %land.lhs.true90, label %lor.lhs.false80, !dbg !15378

lor.lhs.false80:                                  ; preds = %land.lhs.true70
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15378
  %call81 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %35), !dbg !15378
  %common82 = bitcast %union.tree_node* %call81 to %struct.tree_common*, !dbg !15378
  %type83 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common82, i32 0, i32 2, !dbg !15378
  %36 = load %union.tree_node*, %union.tree_node** %type83, align 8, !dbg !15378
  %base84 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !15378
  %37 = bitcast %struct.tree_base* %base84 to i64*, !dbg !15378
  %bf.load85 = load i64, i64* %37, align 8, !dbg !15378
  %bf.clear86 = and i64 %bf.load85, 65535, !dbg !15378
  %bf.cast87 = trunc i64 %bf.clear86 to i32, !dbg !15378
  %cmp88 = icmp eq i32 %bf.cast87, 12, !dbg !15378
  br i1 %cmp88, label %land.lhs.true90, label %if.then108, !dbg !15379

land.lhs.true90:                                  ; preds = %lor.lhs.false80, %land.lhs.true70
  %38 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !15380
  %common91 = bitcast %union.tree_node* %38 to %struct.tree_common*, !dbg !15380
  %type92 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common91, i32 0, i32 2, !dbg !15380
  %39 = load %union.tree_node*, %union.tree_node** %type92, align 8, !dbg !15380
  %base93 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !15380
  %40 = bitcast %struct.tree_base* %base93 to i64*, !dbg !15380
  %bf.load94 = load i64, i64* %40, align 8, !dbg !15380
  %bf.clear95 = and i64 %bf.load94, 65535, !dbg !15380
  %bf.cast96 = trunc i64 %bf.clear95 to i32, !dbg !15380
  %cmp97 = icmp eq i32 %bf.cast96, 10, !dbg !15380
  br i1 %cmp97, label %if.end114, label %lor.lhs.false99, !dbg !15380

lor.lhs.false99:                                  ; preds = %land.lhs.true90
  %41 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !15380
  %common100 = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !15380
  %type101 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common100, i32 0, i32 2, !dbg !15380
  %42 = load %union.tree_node*, %union.tree_node** %type101, align 8, !dbg !15380
  %base102 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !15380
  %43 = bitcast %struct.tree_base* %base102 to i64*, !dbg !15380
  %bf.load103 = load i64, i64* %43, align 8, !dbg !15380
  %bf.clear104 = and i64 %bf.load103, 65535, !dbg !15380
  %bf.cast105 = trunc i64 %bf.clear104 to i32, !dbg !15380
  %cmp106 = icmp eq i32 %bf.cast105, 12, !dbg !15380
  br i1 %cmp106, label %if.end114, label %if.then108, !dbg !15381

if.then108:                                       ; preds = %lor.lhs.false99, %lor.lhs.false80
  call void (i8*, ...) @error(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.104, i64 0, i64 0)), !dbg !15382
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15384
  %call109 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %44), !dbg !15384
  %common110 = bitcast %union.tree_node* %call109 to %struct.tree_common*, !dbg !15384
  %type111 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common110, i32 0, i32 2, !dbg !15384
  %45 = load %union.tree_node*, %union.tree_node** %type111, align 8, !dbg !15384
  call void @debug_generic_stmt(%union.tree_node* %45), !dbg !15385
  %46 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !15386
  %common112 = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !15386
  %type113 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common112, i32 0, i32 2, !dbg !15386
  %47 = load %union.tree_node*, %union.tree_node** %type113, align 8, !dbg !15386
  call void @debug_generic_stmt(%union.tree_node* %47), !dbg !15387
  store i8 1, i8* %retval, align 1, !dbg !15388
  br label %return, !dbg !15388

if.end114:                                        ; preds = %lor.lhs.false99, %land.lhs.true90, %land.lhs.true62, %if.end55
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15389
  %call115 = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %48), !dbg !15391
  %tobool116 = icmp ne %union.tree_node* %call115, null, !dbg !15391
  br i1 %tobool116, label %land.lhs.true117, label %if.end123, !dbg !15392

land.lhs.true117:                                 ; preds = %if.end114
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15393
  %call118 = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %49), !dbg !15394
  %call119 = call zeroext i8 @is_gimple_val(%union.tree_node* %call118), !dbg !15395
  %tobool120 = icmp ne i8 %call119, 0, !dbg !15395
  br i1 %tobool120, label %if.end123, label %if.then121, !dbg !15396

if.then121:                                       ; preds = %land.lhs.true117
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.105, i64 0, i64 0)), !dbg !15397
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15399
  %call122 = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %50), !dbg !15400
  call void @debug_generic_stmt(%union.tree_node* %call122), !dbg !15401
  store i8 1, i8* %retval, align 1, !dbg !15402
  br label %return, !dbg !15402

if.end123:                                        ; preds = %land.lhs.true117, %if.end114
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15403
  %call124 = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %51), !dbg !15405
  %tobool125 = icmp ne %union.tree_node* %call124, null, !dbg !15405
  br i1 %tobool125, label %if.then126, label %if.end150, !dbg !15406

if.then126:                                       ; preds = %if.end123
  %52 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !15407
  %base127 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !15407
  %53 = bitcast %struct.tree_base* %base127 to i64*, !dbg !15407
  %bf.load128 = load i64, i64* %53, align 8, !dbg !15407
  %bf.clear129 = and i64 %bf.load128, 65535, !dbg !15407
  %bf.cast130 = trunc i64 %bf.clear129 to i32, !dbg !15407
  %cmp131 = icmp ne i32 %bf.cast130, 121, !dbg !15410
  br i1 %cmp131, label %if.then140, label %lor.lhs.false133, !dbg !15411

lor.lhs.false133:                                 ; preds = %if.then126
  %54 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !15412
  %exp = bitcast %union.tree_node* %54 to %struct.tree_exp*, !dbg !15412
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !15412
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !15412
  %55 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !15412
  %base134 = bitcast %union.tree_node* %55 to %struct.tree_base*, !dbg !15412
  %56 = bitcast %struct.tree_base* %base134 to i64*, !dbg !15412
  %bf.load135 = load i64, i64* %56, align 8, !dbg !15412
  %bf.clear136 = and i64 %bf.load135, 65535, !dbg !15412
  %bf.cast137 = trunc i64 %bf.clear136 to i32, !dbg !15412
  %cmp138 = icmp ne i32 %bf.cast137, 29, !dbg !15413
  br i1 %cmp138, label %if.then140, label %if.end141, !dbg !15414

if.then140:                                       ; preds = %lor.lhs.false133, %if.then126
  call void (i8*, ...) @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.106, i64 0, i64 0)), !dbg !15415
  store i8 1, i8* %retval, align 1, !dbg !15417
  br label %return, !dbg !15417

if.end141:                                        ; preds = %lor.lhs.false133
  %57 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !15418
  %exp142 = bitcast %union.tree_node* %57 to %struct.tree_exp*, !dbg !15418
  %operands143 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp142, i32 0, i32 3, !dbg !15418
  %arrayidx144 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands143, i64 0, i64 0, !dbg !15418
  %58 = load %union.tree_node*, %union.tree_node** %arrayidx144, align 8, !dbg !15418
  store %union.tree_node* %58, %union.tree_node** %fn, align 8, !dbg !15419
  %59 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !15420
  %function_decl = bitcast %union.tree_node* %59 to %struct.tree_function_decl*, !dbg !15420
  %regdecl_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !15420
  %bf.load145 = load i32, i32* %regdecl_flag, align 8, !dbg !15420
  %bf.lshr = lshr i32 %bf.load145, 22, !dbg !15420
  %bf.clear146 = and i32 %bf.lshr, 1, !dbg !15420
  %tobool147 = icmp ne i32 %bf.clear146, 0, !dbg !15420
  br i1 %tobool147, label %if.end149, label %if.then148, !dbg !15422

if.then148:                                       ; preds = %if.end141
  call void (i8*, ...) @error(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.107, i64 0, i64 0)), !dbg !15423
  store i8 1, i8* %retval, align 1, !dbg !15425
  br label %return, !dbg !15425

if.end149:                                        ; preds = %if.end141
  br label %if.end150, !dbg !15426

if.end150:                                        ; preds = %if.end149, %if.end123
  store i32 0, i32* %i, align 4, !dbg !15427
  br label %for.cond, !dbg !15429

for.cond:                                         ; preds = %for.inc, %if.end150
  %60 = load i32, i32* %i, align 4, !dbg !15430
  %61 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15432
  %call151 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %61), !dbg !15433
  %cmp152 = icmp ult i32 %60, %call151, !dbg !15434
  br i1 %cmp152, label %for.body, label %for.end, !dbg !15435

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !15436, metadata !DIExpression()), !dbg !15438
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15439
  %63 = load i32, i32* %i, align 4, !dbg !15440
  %call154 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %62, i32 %63), !dbg !15441
  store %union.tree_node* %call154, %union.tree_node** %arg, align 8, !dbg !15438
  %64 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !15442
  %call155 = call zeroext i8 @is_gimple_operand(%union.tree_node* %64), !dbg !15444
  %tobool156 = icmp ne i8 %call155, 0, !dbg !15444
  br i1 %tobool156, label %if.end158, label %if.then157, !dbg !15445

if.then157:                                       ; preds = %for.body
  call void (i8*, ...) @error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.108, i64 0, i64 0)), !dbg !15446
  %65 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !15448
  call void @debug_generic_expr(%union.tree_node* %65), !dbg !15449
  br label %if.end158, !dbg !15450

if.end158:                                        ; preds = %if.then157, %for.body
  br label %for.inc, !dbg !15451

for.inc:                                          ; preds = %if.end158
  %66 = load i32, i32* %i, align 4, !dbg !15452
  %inc = add i32 %66, 1, !dbg !15452
  store i32 %inc, i32* %i, align 4, !dbg !15452
  br label %for.cond, !dbg !15453, !llvm.loop !15454

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !15456
  br label %return, !dbg !15456

return:                                           ; preds = %for.end, %if.then148, %if.then140, %if.then121, %if.then108, %if.then54, %if.then46, %if.then34, %if.then
  %67 = load i8, i8* %retval, align 1, !dbg !15457
  ret i8 %67, !dbg !15457
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_gimple_comparison(%union.tree_node* %type, %union.tree_node* %op0, %union.tree_node* %op1) #0 !dbg !15458 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca %union.tree_node*, align 8
  %op0.addr = alloca %union.tree_node*, align 8
  %op1.addr = alloca %union.tree_node*, align 8
  %op0_type = alloca %union.tree_node*, align 8
  %op1_type = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !15461, metadata !DIExpression()), !dbg !15462
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !15463, metadata !DIExpression()), !dbg !15464
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !15465, metadata !DIExpression()), !dbg !15466
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0_type, metadata !15467, metadata !DIExpression()), !dbg !15468
  %0 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !15469
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !15469
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !15469
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !15469
  store %union.tree_node* %1, %union.tree_node** %op0_type, align 8, !dbg !15468
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1_type, metadata !15470, metadata !DIExpression()), !dbg !15471
  %2 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !15472
  %common2 = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !15472
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !15472
  %3 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !15472
  store %union.tree_node* %3, %union.tree_node** %op1_type, align 8, !dbg !15471
  %4 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !15473
  %call = call zeroext i8 @is_gimple_val(%union.tree_node* %4), !dbg !15475
  %tobool = icmp ne i8 %call, 0, !dbg !15475
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !15476

lor.lhs.false:                                    ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !15477
  %call4 = call zeroext i8 @is_gimple_val(%union.tree_node* %5), !dbg !15478
  %tobool5 = icmp ne i8 %call4, 0, !dbg !15478
  br i1 %tobool5, label %if.end, label %if.then, !dbg !15479

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.109, i64 0, i64 0)), !dbg !15480
  store i8 1, i8* %retval, align 1, !dbg !15482
  br label %return, !dbg !15482

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %op0_type, align 8, !dbg !15483
  %7 = load %union.tree_node*, %union.tree_node** %op1_type, align 8, !dbg !15485
  %call6 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %6, %union.tree_node* %7), !dbg !15486
  %tobool7 = icmp ne i8 %call6, 0, !dbg !15486
  br i1 %tobool7, label %lor.lhs.false55, label %land.lhs.true, !dbg !15487

land.lhs.true:                                    ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %op1_type, align 8, !dbg !15488
  %9 = load %union.tree_node*, %union.tree_node** %op0_type, align 8, !dbg !15489
  %call8 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %8, %union.tree_node* %9), !dbg !15490
  %tobool9 = icmp ne i8 %call8, 0, !dbg !15490
  br i1 %tobool9, label %lor.lhs.false55, label %land.lhs.true10, !dbg !15491

land.lhs.true10:                                  ; preds = %land.lhs.true
  %10 = load %union.tree_node*, %union.tree_node** %op0_type, align 8, !dbg !15492
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !15492
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !15492
  %bf.load = load i64, i64* %11, align 8, !dbg !15492
  %bf.clear = and i64 %bf.load, 65535, !dbg !15492
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !15492
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !15492
  br i1 %cmp, label %lor.lhs.false17, label %lor.lhs.false11, !dbg !15492

lor.lhs.false11:                                  ; preds = %land.lhs.true10
  %12 = load %union.tree_node*, %union.tree_node** %op0_type, align 8, !dbg !15492
  %base12 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !15492
  %13 = bitcast %struct.tree_base* %base12 to i64*, !dbg !15492
  %bf.load13 = load i64, i64* %13, align 8, !dbg !15492
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !15492
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !15492
  %cmp16 = icmp eq i32 %bf.cast15, 12, !dbg !15492
  br i1 %cmp16, label %lor.lhs.false17, label %if.then73, !dbg !15493

lor.lhs.false17:                                  ; preds = %lor.lhs.false11, %land.lhs.true10
  %14 = load %union.tree_node*, %union.tree_node** %op1_type, align 8, !dbg !15494
  %base18 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !15494
  %15 = bitcast %struct.tree_base* %base18 to i64*, !dbg !15494
  %bf.load19 = load i64, i64* %15, align 8, !dbg !15494
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !15494
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !15494
  %cmp22 = icmp eq i32 %bf.cast21, 10, !dbg !15494
  br i1 %cmp22, label %lor.lhs.false29, label %lor.lhs.false23, !dbg !15494

lor.lhs.false23:                                  ; preds = %lor.lhs.false17
  %16 = load %union.tree_node*, %union.tree_node** %op1_type, align 8, !dbg !15494
  %base24 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !15494
  %17 = bitcast %struct.tree_base* %base24 to i64*, !dbg !15494
  %bf.load25 = load i64, i64* %17, align 8, !dbg !15494
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !15494
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !15494
  %cmp28 = icmp eq i32 %bf.cast27, 12, !dbg !15494
  br i1 %cmp28, label %lor.lhs.false29, label %if.then73, !dbg !15495

lor.lhs.false29:                                  ; preds = %lor.lhs.false23, %lor.lhs.false17
  %18 = load %union.tree_node*, %union.tree_node** %op0_type, align 8, !dbg !15496
  %base30 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !15496
  %19 = bitcast %struct.tree_base* %base30 to i64*, !dbg !15496
  %bf.load31 = load i64, i64* %19, align 8, !dbg !15496
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !15496
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !15496
  %cmp34 = icmp eq i32 %bf.cast33, 14, !dbg !15496
  br i1 %cmp34, label %cond.true, label %cond.false, !dbg !15496

cond.true:                                        ; preds = %lor.lhs.false29
  %20 = load %union.tree_node*, %union.tree_node** %op0_type, align 8, !dbg !15496
  %call35 = call i32 @vector_type_mode(%union.tree_node* %20), !dbg !15496
  br label %cond.end, !dbg !15496

cond.false:                                       ; preds = %lor.lhs.false29
  %21 = load %union.tree_node*, %union.tree_node** %op0_type, align 8, !dbg !15496
  %type36 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !15496
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type36, i32 0, i32 6, !dbg !15496
  %bf.load37 = load i32, i32* %mode, align 4, !dbg !15496
  %bf.lshr = lshr i32 %bf.load37, 16, !dbg !15496
  %bf.clear38 = and i32 %bf.lshr, 255, !dbg !15496
  br label %cond.end, !dbg !15496

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call35, %cond.true ], [ %bf.clear38, %cond.false ], !dbg !15496
  %22 = load %union.tree_node*, %union.tree_node** %op1_type, align 8, !dbg !15497
  %base39 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !15497
  %23 = bitcast %struct.tree_base* %base39 to i64*, !dbg !15497
  %bf.load40 = load i64, i64* %23, align 8, !dbg !15497
  %bf.clear41 = and i64 %bf.load40, 65535, !dbg !15497
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !15497
  %cmp43 = icmp eq i32 %bf.cast42, 14, !dbg !15497
  br i1 %cmp43, label %cond.true44, label %cond.false46, !dbg !15497

cond.true44:                                      ; preds = %cond.end
  %24 = load %union.tree_node*, %union.tree_node** %op1_type, align 8, !dbg !15497
  %call45 = call i32 @vector_type_mode(%union.tree_node* %24), !dbg !15497
  br label %cond.end52, !dbg !15497

cond.false46:                                     ; preds = %cond.end
  %25 = load %union.tree_node*, %union.tree_node** %op1_type, align 8, !dbg !15497
  %type47 = bitcast %union.tree_node* %25 to %struct.tree_type*, !dbg !15497
  %mode48 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type47, i32 0, i32 6, !dbg !15497
  %bf.load49 = load i32, i32* %mode48, align 4, !dbg !15497
  %bf.lshr50 = lshr i32 %bf.load49, 16, !dbg !15497
  %bf.clear51 = and i32 %bf.lshr50, 255, !dbg !15497
  br label %cond.end52, !dbg !15497

cond.end52:                                       ; preds = %cond.false46, %cond.true44
  %cond53 = phi i32 [ %call45, %cond.true44 ], [ %bf.clear51, %cond.false46 ], !dbg !15497
  %cmp54 = icmp ne i32 %cond, %cond53, !dbg !15498
  br i1 %cmp54, label %if.then73, label %lor.lhs.false55, !dbg !15499

lor.lhs.false55:                                  ; preds = %cond.end52, %land.lhs.true, %if.end
  %26 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !15500
  %base56 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !15500
  %27 = bitcast %struct.tree_base* %base56 to i64*, !dbg !15500
  %bf.load57 = load i64, i64* %27, align 8, !dbg !15500
  %bf.clear58 = and i64 %bf.load57, 65535, !dbg !15500
  %bf.cast59 = trunc i64 %bf.clear58 to i32, !dbg !15500
  %cmp60 = icmp eq i32 %bf.cast59, 6, !dbg !15500
  br i1 %cmp60, label %if.end74, label %lor.lhs.false61, !dbg !15500

lor.lhs.false61:                                  ; preds = %lor.lhs.false55
  %28 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !15500
  %base62 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !15500
  %29 = bitcast %struct.tree_base* %base62 to i64*, !dbg !15500
  %bf.load63 = load i64, i64* %29, align 8, !dbg !15500
  %bf.clear64 = and i64 %bf.load63, 65535, !dbg !15500
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !15500
  %cmp66 = icmp eq i32 %bf.cast65, 7, !dbg !15500
  br i1 %cmp66, label %if.end74, label %lor.lhs.false67, !dbg !15500

lor.lhs.false67:                                  ; preds = %lor.lhs.false61
  %30 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !15500
  %base68 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !15500
  %31 = bitcast %struct.tree_base* %base68 to i64*, !dbg !15500
  %bf.load69 = load i64, i64* %31, align 8, !dbg !15500
  %bf.clear70 = and i64 %bf.load69, 65535, !dbg !15500
  %bf.cast71 = trunc i64 %bf.clear70 to i32, !dbg !15500
  %cmp72 = icmp eq i32 %bf.cast71, 8, !dbg !15500
  br i1 %cmp72, label %if.end74, label %if.then73, !dbg !15501

if.then73:                                        ; preds = %lor.lhs.false67, %cond.end52, %lor.lhs.false23, %lor.lhs.false11
  call void (i8*, ...) @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.110, i64 0, i64 0)), !dbg !15502
  %32 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !15504
  call void @debug_generic_expr(%union.tree_node* %32), !dbg !15505
  %33 = load %union.tree_node*, %union.tree_node** %op0_type, align 8, !dbg !15506
  call void @debug_generic_expr(%union.tree_node* %33), !dbg !15507
  %34 = load %union.tree_node*, %union.tree_node** %op1_type, align 8, !dbg !15508
  call void @debug_generic_expr(%union.tree_node* %34), !dbg !15509
  store i8 1, i8* %retval, align 1, !dbg !15510
  br label %return, !dbg !15510

if.end74:                                         ; preds = %lor.lhs.false67, %lor.lhs.false61, %lor.lhs.false55
  store i8 0, i8* %retval, align 1, !dbg !15511
  br label %return, !dbg !15511

return:                                           ; preds = %if.end74, %if.then73, %if.then
  %35 = load i8, i8* %retval, align 1, !dbg !15512
  ret i8 %35, !dbg !15512
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_gimple_goto(%union.gimple_statement_d* %stmt) #0 !dbg !15513 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %dest = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !15514, metadata !DIExpression()), !dbg !15515
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest, metadata !15516, metadata !DIExpression()), !dbg !15517
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15518
  %call = call %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %0), !dbg !15519
  store %union.tree_node* %call, %union.tree_node** %dest, align 8, !dbg !15517
  %1 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !15520
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !15520
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !15520
  %bf.load = load i64, i64* %2, align 8, !dbg !15520
  %bf.clear = and i64 %bf.load, 65535, !dbg !15520
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !15520
  %cmp = icmp ne i32 %bf.cast, 30, !dbg !15522
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !15523

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !15524
  %call1 = call zeroext i8 @is_gimple_val(%union.tree_node* %3), !dbg !15525
  %tobool = icmp ne i8 %call1, 0, !dbg !15525
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !15526

lor.lhs.false:                                    ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !15527
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !15527
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !15527
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15527
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !15527
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !15527
  %bf.load3 = load i64, i64* %6, align 8, !dbg !15527
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !15527
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !15527
  %cmp6 = icmp eq i32 %bf.cast5, 10, !dbg !15527
  br i1 %cmp6, label %if.end, label %lor.lhs.false7, !dbg !15527

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %7 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !15527
  %common8 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !15527
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2, !dbg !15527
  %8 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !15527
  %base10 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !15527
  %9 = bitcast %struct.tree_base* %base10 to i64*, !dbg !15527
  %bf.load11 = load i64, i64* %9, align 8, !dbg !15527
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !15527
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !15527
  %cmp14 = icmp eq i32 %bf.cast13, 12, !dbg !15527
  br i1 %cmp14, label %if.end, label %if.then, !dbg !15528

if.then:                                          ; preds = %lor.lhs.false7, %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.111, i64 0, i64 0)), !dbg !15529
  store i8 1, i8* %retval, align 1, !dbg !15531
  br label %return, !dbg !15531

if.end:                                           ; preds = %lor.lhs.false7, %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !15532
  br label %return, !dbg !15532

return:                                           ; preds = %if.end, %if.then
  %10 = load i8, i8* %retval, align 1, !dbg !15533
  ret i8 %10, !dbg !15533
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_gimple_switch(%union.gimple_statement_d* %stmt) #0 !dbg !15534 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !15535, metadata !DIExpression()), !dbg !15536
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15537
  %call = call %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %0), !dbg !15539
  %call1 = call zeroext i8 @is_gimple_val(%union.tree_node* %call), !dbg !15540
  %tobool = icmp ne i8 %call1, 0, !dbg !15540
  br i1 %tobool, label %if.end, label %if.then, !dbg !15541

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i64 0, i64 0)), !dbg !15542
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15544
  %call2 = call %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %1), !dbg !15545
  call void @debug_generic_stmt(%union.tree_node* %call2), !dbg !15546
  store i8 1, i8* %retval, align 1, !dbg !15547
  br label %return, !dbg !15547

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !15548
  br label %return, !dbg !15548

return:                                           ; preds = %if.end, %if.then
  %2 = load i8, i8* %retval, align 1, !dbg !15549
  ret i8 %2, !dbg !15549
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_gimple_return(%union.gimple_statement_d* %stmt) #0 !dbg !15550 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %op = alloca %union.tree_node*, align 8
  %restype = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !15551, metadata !DIExpression()), !dbg !15552
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !15553, metadata !DIExpression()), !dbg !15554
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15555
  %call = call %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %0), !dbg !15556
  store %union.tree_node* %call, %union.tree_node** %op, align 8, !dbg !15554
  call void @llvm.dbg.declare(metadata %union.tree_node** %restype, metadata !15557, metadata !DIExpression()), !dbg !15558
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !15559
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !15559
  %decl = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 6, !dbg !15559
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15559
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !15559
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !15559
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15559
  %common1 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !15559
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2, !dbg !15559
  %4 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !15559
  store %union.tree_node* %4, %union.tree_node** %restype, align 8, !dbg !15558
  %5 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !15560
  %cmp = icmp eq %union.tree_node* %5, null, !dbg !15562
  br i1 %cmp, label %if.then, label %if.end, !dbg !15563

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !15564
  br label %return, !dbg !15564

if.end:                                           ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !15565
  %call3 = call zeroext i8 @is_gimple_val(%union.tree_node* %6), !dbg !15567
  %tobool = icmp ne i8 %call3, 0, !dbg !15567
  br i1 %tobool, label %if.end6, label %land.lhs.true, !dbg !15568

land.lhs.true:                                    ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !15569
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !15569
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !15569
  %bf.load = load i64, i64* %8, align 8, !dbg !15569
  %bf.clear = and i64 %bf.load, 65535, !dbg !15569
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !15569
  %cmp4 = icmp ne i32 %bf.cast, 36, !dbg !15570
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !15571

if.then5:                                         ; preds = %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.113, i64 0, i64 0)), !dbg !15572
  %9 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !15574
  call void @debug_generic_stmt(%union.tree_node* %9), !dbg !15575
  store i8 1, i8* %retval, align 1, !dbg !15576
  br label %return, !dbg !15576

if.end6:                                          ; preds = %land.lhs.true, %if.end
  %10 = load %union.tree_node*, %union.tree_node** %restype, align 8, !dbg !15577
  %11 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !15579
  %common7 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !15579
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2, !dbg !15579
  %12 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !15579
  %call9 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %10, %union.tree_node* %12), !dbg !15580
  %tobool10 = icmp ne i8 %call9, 0, !dbg !15580
  br i1 %tobool10, label %if.end35, label %land.lhs.true11, !dbg !15581

land.lhs.true11:                                  ; preds = %if.end6
  %13 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !15582
  %base12 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !15582
  %14 = bitcast %struct.tree_base* %base12 to i64*, !dbg !15582
  %bf.load13 = load i64, i64* %14, align 8, !dbg !15582
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !15582
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !15582
  %cmp16 = icmp eq i32 %bf.cast15, 36, !dbg !15583
  br i1 %cmp16, label %land.lhs.true17, label %if.then32, !dbg !15584

land.lhs.true17:                                  ; preds = %land.lhs.true11
  %15 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !15585
  %common18 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !15585
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !15585
  %16 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !15585
  %base20 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !15585
  %17 = bitcast %struct.tree_base* %base20 to i64*, !dbg !15585
  %bf.load21 = load i64, i64* %17, align 8, !dbg !15585
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !15585
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !15585
  %cmp24 = icmp eq i32 %bf.cast23, 12, !dbg !15586
  br i1 %cmp24, label %land.lhs.true25, label %if.then32, !dbg !15587

land.lhs.true25:                                  ; preds = %land.lhs.true17
  %18 = load %union.tree_node*, %union.tree_node** %restype, align 8, !dbg !15588
  %19 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !15589
  %common26 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !15589
  %type27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2, !dbg !15589
  %20 = load %union.tree_node*, %union.tree_node** %type27, align 8, !dbg !15589
  %common28 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !15589
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !15589
  %21 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !15589
  %call30 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %18, %union.tree_node* %21), !dbg !15590
  %conv = zext i8 %call30 to i32, !dbg !15590
  %tobool31 = icmp ne i32 %conv, 0, !dbg !15590
  br i1 %tobool31, label %if.end35, label %if.then32, !dbg !15591

if.then32:                                        ; preds = %land.lhs.true25, %land.lhs.true17, %land.lhs.true11
  call void (i8*, ...) @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.114, i64 0, i64 0)), !dbg !15592
  %22 = load %union.tree_node*, %union.tree_node** %restype, align 8, !dbg !15594
  call void @debug_generic_stmt(%union.tree_node* %22), !dbg !15595
  %23 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !15596
  %common33 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !15596
  %type34 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 2, !dbg !15596
  %24 = load %union.tree_node*, %union.tree_node** %type34, align 8, !dbg !15596
  call void @debug_generic_stmt(%union.tree_node* %24), !dbg !15597
  store i8 1, i8* %retval, align 1, !dbg !15598
  br label %return, !dbg !15598

if.end35:                                         ; preds = %land.lhs.true25, %if.end6
  store i8 0, i8* %retval, align 1, !dbg !15599
  br label %return, !dbg !15599

return:                                           ; preds = %if.end35, %if.then32, %if.then5, %if.then
  %25 = load i8, i8* %retval, align 1, !dbg !15600
  ret i8 %25, !dbg !15600
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_gimple_phi(%union.gimple_statement_d* %stmt) #0 !dbg !15601 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %type = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %arg = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !15602, metadata !DIExpression()), !dbg !15603
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !15604, metadata !DIExpression()), !dbg !15605
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15606
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !15606
  %common = bitcast %union.tree_node* %call to %struct.tree_common*, !dbg !15606
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !15606
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !15606
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !15605
  call void @llvm.dbg.declare(metadata i32* %i, metadata !15607, metadata !DIExpression()), !dbg !15608
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15609
  %call2 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %2), !dbg !15609
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !15609
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !15609
  %bf.load = load i64, i64* %3, align 8, !dbg !15609
  %bf.clear = and i64 %bf.load, 65535, !dbg !15609
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !15609
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !15611
  br i1 %cmp, label %if.then, label %if.end, !dbg !15612

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.115, i64 0, i64 0)), !dbg !15613
  store i8 1, i8* %retval, align 1, !dbg !15615
  br label %return, !dbg !15615

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !15616
  br label %for.cond, !dbg !15618

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4, !dbg !15619
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15621
  %call3 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %5), !dbg !15622
  %cmp4 = icmp ult i32 %4, %call3, !dbg !15623
  br i1 %cmp4, label %for.body, label %for.end, !dbg !15624

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !15625, metadata !DIExpression()), !dbg !15627
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15628
  %7 = load i32, i32* %i, align 4, !dbg !15629
  %conv = zext i32 %7 to i64, !dbg !15629
  %call5 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %6, i64 %conv), !dbg !15630
  store %union.tree_node* %call5, %union.tree_node** %arg, align 8, !dbg !15627
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15631
  %call6 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %8), !dbg !15633
  %call7 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call6), !dbg !15634
  %conv8 = zext i8 %call7 to i32, !dbg !15634
  %tobool = icmp ne i32 %conv8, 0, !dbg !15634
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false, !dbg !15635

land.lhs.true:                                    ; preds = %for.body
  %9 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !15636
  %call9 = call zeroext i8 @is_gimple_val(%union.tree_node* %9), !dbg !15637
  %tobool10 = icmp ne i8 %call9, 0, !dbg !15637
  br i1 %tobool10, label %lor.lhs.false, label %if.then17, !dbg !15638

lor.lhs.false:                                    ; preds = %land.lhs.true, %for.body
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15639
  %call11 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %10), !dbg !15640
  %call12 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call11), !dbg !15641
  %tobool13 = icmp ne i8 %call12, 0, !dbg !15641
  br i1 %tobool13, label %if.end18, label %land.lhs.true14, !dbg !15642

land.lhs.true14:                                  ; preds = %lor.lhs.false
  %11 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !15643
  %call15 = call zeroext i8 @is_gimple_addressable(%union.tree_node* %11), !dbg !15644
  %tobool16 = icmp ne i8 %call15, 0, !dbg !15644
  br i1 %tobool16, label %if.end18, label %if.then17, !dbg !15645

if.then17:                                        ; preds = %land.lhs.true14, %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.116, i64 0, i64 0)), !dbg !15646
  %12 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !15648
  call void @debug_generic_stmt(%union.tree_node* %12), !dbg !15649
  store i8 1, i8* %retval, align 1, !dbg !15650
  br label %return, !dbg !15650

if.end18:                                         ; preds = %land.lhs.true14, %lor.lhs.false
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15651
  %14 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !15653
  %common19 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !15653
  %type20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2, !dbg !15653
  %15 = load %union.tree_node*, %union.tree_node** %type20, align 8, !dbg !15653
  %call21 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %13, %union.tree_node* %15), !dbg !15654
  %tobool22 = icmp ne i8 %call21, 0, !dbg !15654
  br i1 %tobool22, label %if.end26, label %if.then23, !dbg !15655

if.then23:                                        ; preds = %if.end18
  %16 = load i32, i32* %i, align 4, !dbg !15656
  call void (i8*, ...) @error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.117, i64 0, i64 0), i32 %16), !dbg !15658
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15659
  call void @debug_generic_stmt(%union.tree_node* %17), !dbg !15660
  %18 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !15661
  %common24 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !15661
  %type25 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common24, i32 0, i32 2, !dbg !15661
  %19 = load %union.tree_node*, %union.tree_node** %type25, align 8, !dbg !15661
  call void @debug_generic_stmt(%union.tree_node* %19), !dbg !15662
  store i8 1, i8* %retval, align 1, !dbg !15663
  br label %return, !dbg !15663

if.end26:                                         ; preds = %if.end18
  br label %for.inc, !dbg !15664

for.inc:                                          ; preds = %if.end26
  %20 = load i32, i32* %i, align 4, !dbg !15665
  %inc = add i32 %20, 1, !dbg !15665
  store i32 %inc, i32* %i, align 4, !dbg !15665
  br label %for.cond, !dbg !15666, !llvm.loop !15667

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !15669
  br label %return, !dbg !15669

return:                                           ; preds = %for.end, %if.then23, %if.then17, %if.then
  %21 = load i8, i8* %retval, align 1, !dbg !15670
  ret i8 %21, !dbg !15670
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_gimple_debug(%union.gimple_statement_d* %stmt) #0 !dbg !15671 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !15672, metadata !DIExpression()), !dbg !15673
  ret i8 0, !dbg !15674
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_class(%union.gimple_statement_d* %gs) #0 !dbg !15675 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !15678, metadata !DIExpression()), !dbg !15679
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !15680
  %call = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %0), !dbg !15681
  %call1 = call i32 @get_gimple_rhs_class(i32 %call), !dbg !15682
  ret i32 %call1, !dbg !15683
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_gimple_assign_single(%union.gimple_statement_d* %stmt) #0 !dbg !15684 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %rhs_code = alloca i32, align 4
  %lhs = alloca %union.tree_node*, align 8
  %lhs_type = alloca %union.tree_node*, align 8
  %rhs1 = alloca %union.tree_node*, align 8
  %rhs1_type = alloca %union.tree_node*, align 8
  %res = alloca i8, align 1
  %op = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !15685, metadata !DIExpression()), !dbg !15686
  call void @llvm.dbg.declare(metadata i32* %rhs_code, metadata !15687, metadata !DIExpression()), !dbg !15688
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15689
  %call = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %0), !dbg !15690
  store i32 %call, i32* %rhs_code, align 4, !dbg !15688
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !15691, metadata !DIExpression()), !dbg !15692
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15693
  %call1 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %1), !dbg !15694
  store %union.tree_node* %call1, %union.tree_node** %lhs, align 8, !dbg !15692
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs_type, metadata !15695, metadata !DIExpression()), !dbg !15696
  %2 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !15697
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !15697
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !15697
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15697
  store %union.tree_node* %3, %union.tree_node** %lhs_type, align 8, !dbg !15696
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs1, metadata !15698, metadata !DIExpression()), !dbg !15699
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15700
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %4), !dbg !15701
  store %union.tree_node* %call2, %union.tree_node** %rhs1, align 8, !dbg !15699
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs1_type, metadata !15702, metadata !DIExpression()), !dbg !15703
  %5 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !15704
  %common3 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !15704
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !15704
  %6 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !15704
  store %union.tree_node* %6, %union.tree_node** %rhs1_type, align 8, !dbg !15703
  call void @llvm.dbg.declare(metadata i8* %res, metadata !15705, metadata !DIExpression()), !dbg !15706
  store i8 0, i8* %res, align 1, !dbg !15706
  %7 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15707
  %8 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15709
  %call5 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %7, %union.tree_node* %8), !dbg !15710
  %tobool = icmp ne i8 %call5, 0, !dbg !15710
  br i1 %tobool, label %if.end, label %if.then, !dbg !15711

if.then:                                          ; preds = %entry
  call void (i8*, ...) @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.68, i64 0, i64 0)), !dbg !15712
  %9 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15714
  call void @debug_generic_expr(%union.tree_node* %9), !dbg !15715
  %10 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15716
  call void @debug_generic_expr(%union.tree_node* %10), !dbg !15717
  store i8 1, i8* %retval, align 1, !dbg !15718
  br label %return, !dbg !15718

if.end:                                           ; preds = %entry
  %11 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !15719
  %call6 = call zeroext i8 @handled_component_p(%union.tree_node* %11), !dbg !15721
  %tobool7 = icmp ne i8 %call6, 0, !dbg !15721
  br i1 %tobool7, label %if.then8, label %if.end12, !dbg !15722

if.then8:                                         ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !15723
  %call9 = call zeroext i8 @verify_types_in_gimple_reference(%union.tree_node* %12, i8 zeroext 1), !dbg !15724
  %conv = zext i8 %call9 to i32, !dbg !15724
  %13 = load i8, i8* %res, align 1, !dbg !15725
  %conv10 = zext i8 %13 to i32, !dbg !15725
  %or = or i32 %conv10, %conv, !dbg !15725
  %conv11 = trunc i32 %or to i8, !dbg !15725
  store i8 %conv11, i8* %res, align 1, !dbg !15725
  br label %if.end12, !dbg !15726

if.end12:                                         ; preds = %if.then8, %if.end
  %14 = load i32, i32* %rhs_code, align 4, !dbg !15727
  switch i32 %14, label %sw.default [
    i32 121, label %sw.bb
    i32 41, label %sw.bb38
    i32 42, label %sw.bb38
    i32 47, label %sw.bb38
    i32 48, label %sw.bb38
    i32 49, label %sw.bb38
    i32 45, label %sw.bb38
    i32 46, label %sw.bb38
    i32 118, label %sw.bb38
    i32 43, label %sw.bb38
    i32 44, label %sw.bb38
    i32 152, label %sw.bb38
    i32 141, label %sw.bb55
    i32 23, label %sw.bb55
    i32 24, label %sw.bb55
    i32 25, label %sw.bb55
    i32 26, label %sw.bb55
    i32 27, label %sw.bb55
    i32 28, label %sw.bb55
    i32 33, label %sw.bb56
    i32 32, label %sw.bb57
    i32 34, label %sw.bb57
    i32 56, label %sw.bb71
    i32 51, label %sw.bb71
    i32 50, label %sw.bb71
    i32 148, label %sw.bb71
    i32 150, label %sw.bb71
    i32 146, label %sw.bb71
    i32 167, label %sw.bb71
    i32 57, label %sw.bb71
    i32 151, label %sw.bb71
  ], !dbg !15728

sw.bb:                                            ; preds = %if.end12
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !15729, metadata !DIExpression()), !dbg !15732
  %15 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !15733
  %exp = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !15733
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !15733
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !15733
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !15733
  store %union.tree_node* %16, %union.tree_node** %op, align 8, !dbg !15732
  %17 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !15734
  %call13 = call zeroext i8 @is_gimple_addressable(%union.tree_node* %17), !dbg !15736
  %tobool14 = icmp ne i8 %call13, 0, !dbg !15736
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !15737

if.then15:                                        ; preds = %sw.bb
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.69, i64 0, i64 0)), !dbg !15738
  store i8 1, i8* %retval, align 1, !dbg !15740
  br label %return, !dbg !15740

if.end16:                                         ; preds = %sw.bb
  %18 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !15741
  %common17 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !15741
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !15741
  %19 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !15741
  %20 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !15743
  %common19 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !15743
  %type20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2, !dbg !15743
  %21 = load %union.tree_node*, %union.tree_node** %type20, align 8, !dbg !15743
  %common21 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !15743
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 2, !dbg !15743
  %22 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !15743
  %call23 = call zeroext i8 @types_compatible_p(%union.tree_node* %19, %union.tree_node* %22), !dbg !15744
  %tobool24 = icmp ne i8 %call23, 0, !dbg !15744
  br i1 %tobool24, label %if.end36, label %land.lhs.true, !dbg !15745

land.lhs.true:                                    ; preds = %if.end16
  %23 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !15746
  %common25 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !15746
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2, !dbg !15746
  %24 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !15746
  %25 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !15747
  %common27 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !15747
  %type28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 2, !dbg !15747
  %26 = load %union.tree_node*, %union.tree_node** %type28, align 8, !dbg !15747
  %call29 = call zeroext i8 @one_pointer_to_useless_type_conversion_p(%union.tree_node* %24, %union.tree_node* %26), !dbg !15748
  %tobool30 = icmp ne i8 %call29, 0, !dbg !15748
  br i1 %tobool30, label %if.end36, label %if.then31, !dbg !15749

if.then31:                                        ; preds = %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.70, i64 0, i64 0)), !dbg !15750
  %27 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !15752
  %common32 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !15752
  %type33 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common32, i32 0, i32 2, !dbg !15752
  %28 = load %union.tree_node*, %union.tree_node** %type33, align 8, !dbg !15752
  call void @debug_generic_stmt(%union.tree_node* %28), !dbg !15753
  %29 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !15754
  %common34 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !15754
  %type35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common34, i32 0, i32 2, !dbg !15754
  %30 = load %union.tree_node*, %union.tree_node** %type35, align 8, !dbg !15754
  call void @debug_generic_stmt(%union.tree_node* %30), !dbg !15755
  store i8 1, i8* %retval, align 1, !dbg !15756
  br label %return, !dbg !15756

if.end36:                                         ; preds = %land.lhs.true, %if.end16
  %31 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !15757
  %call37 = call zeroext i8 @verify_types_in_gimple_reference(%union.tree_node* %31, i8 zeroext 1), !dbg !15758
  store i8 %call37, i8* %retval, align 1, !dbg !15759
  br label %return, !dbg !15759

sw.bb38:                                          ; preds = %if.end12, %if.end12, %if.end12, %if.end12, %if.end12, %if.end12, %if.end12, %if.end12, %if.end12, %if.end12, %if.end12
  %32 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !15760
  %call39 = call zeroext i8 @is_gimple_reg(%union.tree_node* %32), !dbg !15762
  %tobool40 = icmp ne i8 %call39, 0, !dbg !15762
  br i1 %tobool40, label %if.end48, label %land.lhs.true41, !dbg !15763

land.lhs.true41:                                  ; preds = %sw.bb38
  %33 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !15764
  %common42 = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !15764
  %type43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 2, !dbg !15764
  %34 = load %union.tree_node*, %union.tree_node** %type43, align 8, !dbg !15764
  %call44 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %34), !dbg !15765
  %conv45 = zext i8 %call44 to i32, !dbg !15765
  %tobool46 = icmp ne i32 %conv45, 0, !dbg !15765
  br i1 %tobool46, label %if.then47, label %if.end48, !dbg !15766

if.then47:                                        ; preds = %land.lhs.true41
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.71, i64 0, i64 0)), !dbg !15767
  %35 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !15769
  call void @debug_generic_stmt(%union.tree_node* %35), !dbg !15770
  %36 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !15771
  call void @debug_generic_stmt(%union.tree_node* %36), !dbg !15772
  store i8 1, i8* %retval, align 1, !dbg !15773
  br label %return, !dbg !15773

if.end48:                                         ; preds = %land.lhs.true41, %sw.bb38
  %37 = load i8, i8* %res, align 1, !dbg !15774
  %conv49 = zext i8 %37 to i32, !dbg !15774
  %tobool50 = icmp ne i32 %conv49, 0, !dbg !15774
  br i1 %tobool50, label %lor.end, label %lor.rhs, !dbg !15775

lor.rhs:                                          ; preds = %if.end48
  %38 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !15776
  %call51 = call zeroext i8 @verify_types_in_gimple_reference(%union.tree_node* %38, i8 zeroext 0), !dbg !15777
  %conv52 = zext i8 %call51 to i32, !dbg !15777
  %tobool53 = icmp ne i32 %conv52, 0, !dbg !15775
  br label %lor.end, !dbg !15775

lor.end:                                          ; preds = %lor.rhs, %if.end48
  %39 = phi i1 [ true, %if.end48 ], [ %tobool53, %lor.rhs ]
  %lor.ext = zext i1 %39 to i32, !dbg !15775
  %conv54 = trunc i32 %lor.ext to i8, !dbg !15774
  store i8 %conv54, i8* %retval, align 1, !dbg !15778
  br label %return, !dbg !15778

sw.bb55:                                          ; preds = %if.end12, %if.end12, %if.end12, %if.end12, %if.end12, %if.end12, %if.end12
  %40 = load i8, i8* %res, align 1, !dbg !15779
  store i8 %40, i8* %retval, align 1, !dbg !15780
  br label %return, !dbg !15780

sw.bb56:                                          ; preds = %if.end12
  %41 = load i8, i8* %res, align 1, !dbg !15781
  store i8 %41, i8* %retval, align 1, !dbg !15782
  br label %return, !dbg !15782

sw.bb57:                                          ; preds = %if.end12, %if.end12
  %42 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !15783
  %call58 = call zeroext i8 @is_gimple_reg(%union.tree_node* %42), !dbg !15785
  %tobool59 = icmp ne i8 %call58, 0, !dbg !15785
  br i1 %tobool59, label %if.end70, label %land.lhs.true60, !dbg !15786

land.lhs.true60:                                  ; preds = %sw.bb57
  %43 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !15787
  %call61 = call zeroext i8 @is_gimple_reg(%union.tree_node* %43), !dbg !15788
  %tobool62 = icmp ne i8 %call61, 0, !dbg !15788
  br i1 %tobool62, label %if.end70, label %land.lhs.true63, !dbg !15789

land.lhs.true63:                                  ; preds = %land.lhs.true60
  %44 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !15790
  %common64 = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !15790
  %type65 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common64, i32 0, i32 2, !dbg !15790
  %45 = load %union.tree_node*, %union.tree_node** %type65, align 8, !dbg !15790
  %call66 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %45), !dbg !15791
  %conv67 = zext i8 %call66 to i32, !dbg !15791
  %tobool68 = icmp ne i32 %conv67, 0, !dbg !15791
  br i1 %tobool68, label %if.then69, label %if.end70, !dbg !15792

if.then69:                                        ; preds = %land.lhs.true63
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.71, i64 0, i64 0)), !dbg !15793
  %46 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !15795
  call void @debug_generic_stmt(%union.tree_node* %46), !dbg !15796
  %47 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !15797
  call void @debug_generic_stmt(%union.tree_node* %47), !dbg !15798
  store i8 1, i8* %retval, align 1, !dbg !15799
  br label %return, !dbg !15799

if.end70:                                         ; preds = %land.lhs.true63, %land.lhs.true60, %sw.bb57
  %48 = load i8, i8* %res, align 1, !dbg !15800
  store i8 %48, i8* %retval, align 1, !dbg !15801
  br label %return, !dbg !15801

sw.bb71:                                          ; preds = %if.end12, %if.end12, %if.end12, %if.end12, %if.end12, %if.end12, %if.end12, %if.end12, %if.end12
  %49 = load i8, i8* %res, align 1, !dbg !15802
  store i8 %49, i8* %retval, align 1, !dbg !15803
  br label %return, !dbg !15803

sw.default:                                       ; preds = %if.end12
  br label %sw.epilog, !dbg !15804

sw.epilog:                                        ; preds = %sw.default
  %50 = load i8, i8* %res, align 1, !dbg !15805
  store i8 %50, i8* %retval, align 1, !dbg !15806
  br label %return, !dbg !15806

return:                                           ; preds = %sw.epilog, %sw.bb71, %if.end70, %if.then69, %sw.bb56, %sw.bb55, %lor.end, %if.then47, %if.end36, %if.then31, %if.then15, %if.then
  %51 = load i8, i8* %retval, align 1, !dbg !15807
  ret i8 %51, !dbg !15807
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_gimple_assign_unary(%union.gimple_statement_d* %stmt) #0 !dbg !15808 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %rhs_code = alloca i32, align 4
  %lhs = alloca %union.tree_node*, align 8
  %lhs_type = alloca %union.tree_node*, align 8
  %rhs1 = alloca %union.tree_node*, align 8
  %rhs1_type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !15809, metadata !DIExpression()), !dbg !15810
  call void @llvm.dbg.declare(metadata i32* %rhs_code, metadata !15811, metadata !DIExpression()), !dbg !15812
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15813
  %call = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %0), !dbg !15814
  store i32 %call, i32* %rhs_code, align 4, !dbg !15812
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !15815, metadata !DIExpression()), !dbg !15816
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15817
  %call1 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %1), !dbg !15818
  store %union.tree_node* %call1, %union.tree_node** %lhs, align 8, !dbg !15816
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs_type, metadata !15819, metadata !DIExpression()), !dbg !15820
  %2 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !15821
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !15821
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !15821
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15821
  store %union.tree_node* %3, %union.tree_node** %lhs_type, align 8, !dbg !15820
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs1, metadata !15822, metadata !DIExpression()), !dbg !15823
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15824
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %4), !dbg !15825
  store %union.tree_node* %call2, %union.tree_node** %rhs1, align 8, !dbg !15823
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs1_type, metadata !15826, metadata !DIExpression()), !dbg !15827
  %5 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !15828
  %common3 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !15828
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !15828
  %6 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !15828
  store %union.tree_node* %6, %union.tree_node** %rhs1_type, align 8, !dbg !15827
  %7 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !15829
  %call5 = call zeroext i8 @is_gimple_reg(%union.tree_node* %7), !dbg !15831
  %tobool = icmp ne i8 %call5, 0, !dbg !15831
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !15832

land.lhs.true:                                    ; preds = %entry
  %8 = load i32, i32* @optimize, align 4, !dbg !15833
  %cmp = icmp eq i32 %8, 0, !dbg !15834
  br i1 %cmp, label %land.lhs.true6, label %if.then, !dbg !15835

land.lhs.true6:                                   ; preds = %land.lhs.true
  %9 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15836
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !15836
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !15836
  %bf.load = load i64, i64* %10, align 8, !dbg !15836
  %bf.clear = and i64 %bf.load, 65535, !dbg !15836
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !15836
  %cmp7 = icmp eq i32 %bf.cast, 13, !dbg !15837
  br i1 %cmp7, label %if.end, label %if.then, !dbg !15838

if.then:                                          ; preds = %land.lhs.true6, %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.81, i64 0, i64 0)), !dbg !15839
  store i8 1, i8* %retval, align 1, !dbg !15841
  br label %return, !dbg !15841

if.end:                                           ; preds = %land.lhs.true6, %entry
  %11 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !15842
  %call8 = call zeroext i8 @is_gimple_val(%union.tree_node* %11), !dbg !15844
  %tobool9 = icmp ne i8 %call8, 0, !dbg !15844
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !15845

if.then10:                                        ; preds = %if.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.82, i64 0, i64 0)), !dbg !15846
  store i8 1, i8* %retval, align 1, !dbg !15848
  br label %return, !dbg !15848

if.end11:                                         ; preds = %if.end
  %12 = load i32, i32* %rhs_code, align 4, !dbg !15849
  switch i32 %12, label %sw.default [
    i32 116, label %sw.bb
    i32 113, label %sw.bb
    i32 114, label %sw.bb158
    i32 115, label %sw.bb197
    i32 78, label %sw.bb205
    i32 77, label %sw.bb231
    i32 174, label %sw.bb257
    i32 175, label %sw.bb257
    i32 164, label %sw.bb257
    i32 165, label %sw.bb257
    i32 166, label %sw.bb257
    i32 176, label %sw.bb257
    i32 177, label %sw.bb257
    i32 96, label %sw.bb258
    i32 79, label %sw.bb258
    i32 82, label %sw.bb258
    i32 90, label %sw.bb258
    i32 112, label %sw.bb258
    i32 117, label %sw.bb258
    i32 124, label %sw.bb258
  ], !dbg !15850

sw.bb:                                            ; preds = %if.end11, %if.end11
  %13 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15851
  %base12 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !15851
  %14 = bitcast %struct.tree_base* %base12 to i64*, !dbg !15851
  %bf.load13 = load i64, i64* %14, align 8, !dbg !15851
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !15851
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !15851
  %cmp16 = icmp eq i32 %bf.cast15, 10, !dbg !15851
  br i1 %cmp16, label %land.lhs.true22, label %lor.lhs.false, !dbg !15851

lor.lhs.false:                                    ; preds = %sw.bb
  %15 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15851
  %base17 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !15851
  %16 = bitcast %struct.tree_base* %base17 to i64*, !dbg !15851
  %bf.load18 = load i64, i64* %16, align 8, !dbg !15851
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !15851
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !15851
  %cmp21 = icmp eq i32 %bf.cast20, 12, !dbg !15851
  br i1 %cmp21, label %land.lhs.true22, label %lor.lhs.false51, !dbg !15855

land.lhs.true22:                                  ; preds = %lor.lhs.false, %sw.bb
  %17 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15856
  %base23 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !15856
  %18 = bitcast %struct.tree_base* %base23 to i64*, !dbg !15856
  %bf.load24 = load i64, i64* %18, align 8, !dbg !15856
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !15856
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !15856
  %cmp27 = icmp eq i32 %bf.cast26, 6, !dbg !15856
  br i1 %cmp27, label %land.lhs.true40, label %lor.lhs.false28, !dbg !15856

lor.lhs.false28:                                  ; preds = %land.lhs.true22
  %19 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15856
  %base29 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !15856
  %20 = bitcast %struct.tree_base* %base29 to i64*, !dbg !15856
  %bf.load30 = load i64, i64* %20, align 8, !dbg !15856
  %bf.clear31 = and i64 %bf.load30, 65535, !dbg !15856
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !15856
  %cmp33 = icmp eq i32 %bf.cast32, 7, !dbg !15856
  br i1 %cmp33, label %land.lhs.true40, label %lor.lhs.false34, !dbg !15856

lor.lhs.false34:                                  ; preds = %lor.lhs.false28
  %21 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15856
  %base35 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !15856
  %22 = bitcast %struct.tree_base* %base35 to i64*, !dbg !15856
  %bf.load36 = load i64, i64* %22, align 8, !dbg !15856
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !15856
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !15856
  %cmp39 = icmp eq i32 %bf.cast38, 8, !dbg !15856
  br i1 %cmp39, label %land.lhs.true40, label %lor.lhs.false51, !dbg !15857

land.lhs.true40:                                  ; preds = %lor.lhs.false34, %lor.lhs.false28, %land.lhs.true22
  %23 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15858
  %type41 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !15858
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type41, i32 0, i32 6, !dbg !15858
  %bf.load42 = load i32, i32* %precision, align 4, !dbg !15858
  %bf.clear43 = and i32 %bf.load42, 1023, !dbg !15858
  %24 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15859
  %type44 = bitcast %union.tree_node* %24 to %struct.tree_type*, !dbg !15859
  %precision45 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type44, i32 0, i32 6, !dbg !15859
  %bf.load46 = load i32, i32* %precision45, align 4, !dbg !15859
  %bf.clear47 = and i32 %bf.load46, 1023, !dbg !15859
  %cmp48 = icmp sge i32 %bf.clear43, %bf.clear47, !dbg !15860
  br i1 %cmp48, label %if.then93, label %lor.lhs.false49, !dbg !15861

lor.lhs.false49:                                  ; preds = %land.lhs.true40
  %25 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15862
  %26 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !15863
  %cmp50 = icmp eq %union.tree_node* %25, %26, !dbg !15864
  br i1 %cmp50, label %if.then93, label %lor.lhs.false51, !dbg !15865

lor.lhs.false51:                                  ; preds = %lor.lhs.false49, %lor.lhs.false34, %lor.lhs.false
  %27 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15866
  %base52 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !15866
  %28 = bitcast %struct.tree_base* %base52 to i64*, !dbg !15866
  %bf.load53 = load i64, i64* %28, align 8, !dbg !15866
  %bf.clear54 = and i64 %bf.load53, 65535, !dbg !15866
  %bf.cast55 = trunc i64 %bf.clear54 to i32, !dbg !15866
  %cmp56 = icmp eq i32 %bf.cast55, 10, !dbg !15866
  br i1 %cmp56, label %land.lhs.true63, label %lor.lhs.false57, !dbg !15866

lor.lhs.false57:                                  ; preds = %lor.lhs.false51
  %29 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15866
  %base58 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !15866
  %30 = bitcast %struct.tree_base* %base58 to i64*, !dbg !15866
  %bf.load59 = load i64, i64* %30, align 8, !dbg !15866
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !15866
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !15866
  %cmp62 = icmp eq i32 %bf.cast61, 12, !dbg !15866
  br i1 %cmp62, label %land.lhs.true63, label %if.end94, !dbg !15867

land.lhs.true63:                                  ; preds = %lor.lhs.false57, %lor.lhs.false51
  %31 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15868
  %base64 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !15868
  %32 = bitcast %struct.tree_base* %base64 to i64*, !dbg !15868
  %bf.load65 = load i64, i64* %32, align 8, !dbg !15868
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !15868
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !15868
  %cmp68 = icmp eq i32 %bf.cast67, 6, !dbg !15868
  br i1 %cmp68, label %land.lhs.true81, label %lor.lhs.false69, !dbg !15868

lor.lhs.false69:                                  ; preds = %land.lhs.true63
  %33 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15868
  %base70 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !15868
  %34 = bitcast %struct.tree_base* %base70 to i64*, !dbg !15868
  %bf.load71 = load i64, i64* %34, align 8, !dbg !15868
  %bf.clear72 = and i64 %bf.load71, 65535, !dbg !15868
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !15868
  %cmp74 = icmp eq i32 %bf.cast73, 7, !dbg !15868
  br i1 %cmp74, label %land.lhs.true81, label %lor.lhs.false75, !dbg !15868

lor.lhs.false75:                                  ; preds = %lor.lhs.false69
  %35 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15868
  %base76 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !15868
  %36 = bitcast %struct.tree_base* %base76 to i64*, !dbg !15868
  %bf.load77 = load i64, i64* %36, align 8, !dbg !15868
  %bf.clear78 = and i64 %bf.load77, 65535, !dbg !15868
  %bf.cast79 = trunc i64 %bf.clear78 to i32, !dbg !15868
  %cmp80 = icmp eq i32 %bf.cast79, 8, !dbg !15868
  br i1 %cmp80, label %land.lhs.true81, label %if.end94, !dbg !15869

land.lhs.true81:                                  ; preds = %lor.lhs.false75, %lor.lhs.false69, %land.lhs.true63
  %37 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15870
  %type82 = bitcast %union.tree_node* %37 to %struct.tree_type*, !dbg !15870
  %precision83 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type82, i32 0, i32 6, !dbg !15870
  %bf.load84 = load i32, i32* %precision83, align 4, !dbg !15870
  %bf.clear85 = and i32 %bf.load84, 1023, !dbg !15870
  %38 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15871
  %type86 = bitcast %union.tree_node* %38 to %struct.tree_type*, !dbg !15871
  %precision87 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type86, i32 0, i32 6, !dbg !15871
  %bf.load88 = load i32, i32* %precision87, align 4, !dbg !15871
  %bf.clear89 = and i32 %bf.load88, 1023, !dbg !15871
  %cmp90 = icmp sge i32 %bf.clear85, %bf.clear89, !dbg !15872
  br i1 %cmp90, label %if.then93, label %lor.lhs.false91, !dbg !15873

lor.lhs.false91:                                  ; preds = %land.lhs.true81
  %39 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15874
  %40 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !15875
  %cmp92 = icmp eq %union.tree_node* %39, %40, !dbg !15876
  br i1 %cmp92, label %if.then93, label %if.end94, !dbg !15877

if.then93:                                        ; preds = %lor.lhs.false91, %land.lhs.true81, %lor.lhs.false49, %land.lhs.true40
  store i8 0, i8* %retval, align 1, !dbg !15878
  br label %return, !dbg !15878

if.end94:                                         ; preds = %lor.lhs.false91, %lor.lhs.false75, %lor.lhs.false57
  %41 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15879
  %base95 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !15879
  %42 = bitcast %struct.tree_base* %base95 to i64*, !dbg !15879
  %bf.load96 = load i64, i64* %42, align 8, !dbg !15879
  %bf.clear97 = and i64 %bf.load96, 65535, !dbg !15879
  %bf.cast98 = trunc i64 %bf.clear97 to i32, !dbg !15879
  %cmp99 = icmp eq i32 %bf.cast98, 5, !dbg !15881
  br i1 %cmp99, label %land.lhs.true100, label %lor.lhs.false106, !dbg !15882

land.lhs.true100:                                 ; preds = %if.end94
  %43 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15883
  %base101 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !15883
  %44 = bitcast %struct.tree_base* %base101 to i64*, !dbg !15883
  %bf.load102 = load i64, i64* %44, align 8, !dbg !15883
  %bf.clear103 = and i64 %bf.load102, 65535, !dbg !15883
  %bf.cast104 = trunc i64 %bf.clear103 to i32, !dbg !15883
  %cmp105 = icmp eq i32 %bf.cast104, 8, !dbg !15884
  br i1 %cmp105, label %if.then118, label %lor.lhs.false106, !dbg !15885

lor.lhs.false106:                                 ; preds = %land.lhs.true100, %if.end94
  %45 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15886
  %base107 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !15886
  %46 = bitcast %struct.tree_base* %base107 to i64*, !dbg !15886
  %bf.load108 = load i64, i64* %46, align 8, !dbg !15886
  %bf.clear109 = and i64 %bf.load108, 65535, !dbg !15886
  %bf.cast110 = trunc i64 %bf.clear109 to i32, !dbg !15886
  %cmp111 = icmp eq i32 %bf.cast110, 8, !dbg !15887
  br i1 %cmp111, label %land.lhs.true112, label %if.end119, !dbg !15888

land.lhs.true112:                                 ; preds = %lor.lhs.false106
  %47 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15889
  %base113 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !15889
  %48 = bitcast %struct.tree_base* %base113 to i64*, !dbg !15889
  %bf.load114 = load i64, i64* %48, align 8, !dbg !15889
  %bf.clear115 = and i64 %bf.load114, 65535, !dbg !15889
  %bf.cast116 = trunc i64 %bf.clear115 to i32, !dbg !15889
  %cmp117 = icmp eq i32 %bf.cast116, 5, !dbg !15890
  br i1 %cmp117, label %if.then118, label %if.end119, !dbg !15891

if.then118:                                       ; preds = %land.lhs.true112, %land.lhs.true100
  store i8 0, i8* %retval, align 1, !dbg !15892
  br label %return, !dbg !15892

if.end119:                                        ; preds = %land.lhs.true112, %lor.lhs.false106
  %49 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15893
  %base120 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !15893
  %50 = bitcast %struct.tree_base* %base120 to i64*, !dbg !15893
  %bf.load121 = load i64, i64* %50, align 8, !dbg !15893
  %bf.clear122 = and i64 %bf.load121, 65535, !dbg !15893
  %bf.cast123 = trunc i64 %bf.clear122 to i32, !dbg !15893
  %cmp124 = icmp eq i32 %bf.cast123, 6, !dbg !15893
  br i1 %cmp124, label %lor.end, label %lor.lhs.false125, !dbg !15893

lor.lhs.false125:                                 ; preds = %if.end119
  %51 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15893
  %base126 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !15893
  %52 = bitcast %struct.tree_base* %base126 to i64*, !dbg !15893
  %bf.load127 = load i64, i64* %52, align 8, !dbg !15893
  %bf.clear128 = and i64 %bf.load127, 65535, !dbg !15893
  %bf.cast129 = trunc i64 %bf.clear128 to i32, !dbg !15893
  %cmp130 = icmp eq i32 %bf.cast129, 7, !dbg !15893
  br i1 %cmp130, label %lor.end, label %lor.rhs, !dbg !15893

lor.rhs:                                          ; preds = %lor.lhs.false125
  %53 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15893
  %base131 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !15893
  %54 = bitcast %struct.tree_base* %base131 to i64*, !dbg !15893
  %bf.load132 = load i64, i64* %54, align 8, !dbg !15893
  %bf.clear133 = and i64 %bf.load132, 65535, !dbg !15893
  %bf.cast134 = trunc i64 %bf.clear133 to i32, !dbg !15893
  %cmp135 = icmp eq i32 %bf.cast134, 8, !dbg !15893
  br label %lor.end, !dbg !15893

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false125, %if.end119
  %55 = phi i1 [ true, %lor.lhs.false125 ], [ true, %if.end119 ], [ %cmp135, %lor.rhs ]
  %lor.ext = zext i1 %55 to i32, !dbg !15893
  %56 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15895
  %base136 = bitcast %union.tree_node* %56 to %struct.tree_base*, !dbg !15895
  %57 = bitcast %struct.tree_base* %base136 to i64*, !dbg !15895
  %bf.load137 = load i64, i64* %57, align 8, !dbg !15895
  %bf.clear138 = and i64 %bf.load137, 65535, !dbg !15895
  %bf.cast139 = trunc i64 %bf.clear138 to i32, !dbg !15895
  %cmp140 = icmp eq i32 %bf.cast139, 6, !dbg !15895
  br i1 %cmp140, label %lor.end153, label %lor.lhs.false141, !dbg !15895

lor.lhs.false141:                                 ; preds = %lor.end
  %58 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15895
  %base142 = bitcast %union.tree_node* %58 to %struct.tree_base*, !dbg !15895
  %59 = bitcast %struct.tree_base* %base142 to i64*, !dbg !15895
  %bf.load143 = load i64, i64* %59, align 8, !dbg !15895
  %bf.clear144 = and i64 %bf.load143, 65535, !dbg !15895
  %bf.cast145 = trunc i64 %bf.clear144 to i32, !dbg !15895
  %cmp146 = icmp eq i32 %bf.cast145, 7, !dbg !15895
  br i1 %cmp146, label %lor.end153, label %lor.rhs147, !dbg !15895

lor.rhs147:                                       ; preds = %lor.lhs.false141
  %60 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15895
  %base148 = bitcast %union.tree_node* %60 to %struct.tree_base*, !dbg !15895
  %61 = bitcast %struct.tree_base* %base148 to i64*, !dbg !15895
  %bf.load149 = load i64, i64* %61, align 8, !dbg !15895
  %bf.clear150 = and i64 %bf.load149, 65535, !dbg !15895
  %bf.cast151 = trunc i64 %bf.clear150 to i32, !dbg !15895
  %cmp152 = icmp eq i32 %bf.cast151, 8, !dbg !15895
  br label %lor.end153, !dbg !15895

lor.end153:                                       ; preds = %lor.rhs147, %lor.lhs.false141, %lor.end
  %62 = phi i1 [ true, %lor.lhs.false141 ], [ true, %lor.end ], [ %cmp152, %lor.rhs147 ]
  %lor.ext154 = zext i1 %62 to i32, !dbg !15895
  %cmp155 = icmp ne i32 %lor.ext, %lor.ext154, !dbg !15896
  br i1 %cmp155, label %if.then156, label %if.end157, !dbg !15897

if.then156:                                       ; preds = %lor.end153
  call void (i8*, ...) @error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.83, i64 0, i64 0)), !dbg !15898
  %63 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15900
  call void @debug_generic_expr(%union.tree_node* %63), !dbg !15901
  %64 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15902
  call void @debug_generic_expr(%union.tree_node* %64), !dbg !15903
  store i8 1, i8* %retval, align 1, !dbg !15904
  br label %return, !dbg !15904

if.end157:                                        ; preds = %lor.end153
  store i8 0, i8* %retval, align 1, !dbg !15905
  br label %return, !dbg !15905

sw.bb158:                                         ; preds = %if.end11
  %65 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15906
  %base159 = bitcast %union.tree_node* %65 to %struct.tree_base*, !dbg !15906
  %66 = bitcast %struct.tree_base* %base159 to i64*, !dbg !15906
  %bf.load160 = load i64, i64* %66, align 8, !dbg !15906
  %bf.clear161 = and i64 %bf.load160, 65535, !dbg !15906
  %bf.cast162 = trunc i64 %bf.clear161 to i32, !dbg !15906
  %cmp163 = icmp eq i32 %bf.cast162, 10, !dbg !15906
  br i1 %cmp163, label %lor.lhs.false170, label %lor.lhs.false164, !dbg !15906

lor.lhs.false164:                                 ; preds = %sw.bb158
  %67 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15906
  %base165 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !15906
  %68 = bitcast %struct.tree_base* %base165 to i64*, !dbg !15906
  %bf.load166 = load i64, i64* %68, align 8, !dbg !15906
  %bf.clear167 = and i64 %bf.load166, 65535, !dbg !15906
  %bf.cast168 = trunc i64 %bf.clear167 to i32, !dbg !15906
  %cmp169 = icmp eq i32 %bf.cast168, 12, !dbg !15906
  br i1 %cmp169, label %lor.lhs.false170, label %if.then195, !dbg !15909

lor.lhs.false170:                                 ; preds = %lor.lhs.false164, %sw.bb158
  %69 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15910
  %base171 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !15910
  %70 = bitcast %struct.tree_base* %base171 to i64*, !dbg !15910
  %bf.load172 = load i64, i64* %70, align 8, !dbg !15910
  %bf.clear173 = and i64 %bf.load172, 65535, !dbg !15910
  %bf.cast174 = trunc i64 %bf.clear173 to i32, !dbg !15910
  %cmp175 = icmp eq i32 %bf.cast174, 10, !dbg !15910
  br i1 %cmp175, label %lor.lhs.false182, label %lor.lhs.false176, !dbg !15910

lor.lhs.false176:                                 ; preds = %lor.lhs.false170
  %71 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15910
  %base177 = bitcast %union.tree_node* %71 to %struct.tree_base*, !dbg !15910
  %72 = bitcast %struct.tree_base* %base177 to i64*, !dbg !15910
  %bf.load178 = load i64, i64* %72, align 8, !dbg !15910
  %bf.clear179 = and i64 %bf.load178, 65535, !dbg !15910
  %bf.cast180 = trunc i64 %bf.clear179 to i32, !dbg !15910
  %cmp181 = icmp eq i32 %bf.cast180, 12, !dbg !15910
  br i1 %cmp181, label %lor.lhs.false182, label %if.then195, !dbg !15911

lor.lhs.false182:                                 ; preds = %lor.lhs.false176, %lor.lhs.false170
  %73 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15912
  %common183 = bitcast %union.tree_node* %73 to %struct.tree_common*, !dbg !15912
  %type184 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common183, i32 0, i32 2, !dbg !15912
  %74 = load %union.tree_node*, %union.tree_node** %type184, align 8, !dbg !15912
  %base185 = bitcast %union.tree_node* %74 to %struct.tree_base*, !dbg !15912
  %75 = bitcast %struct.tree_base* %base185 to i64*, !dbg !15912
  %bf.load186 = load i64, i64* %75, align 8, !dbg !15912
  %bf.lshr = lshr i64 %bf.load186, 56, !dbg !15912
  %bf.cast187 = trunc i64 %bf.lshr to i32, !dbg !15912
  %76 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15913
  %common188 = bitcast %union.tree_node* %76 to %struct.tree_common*, !dbg !15913
  %type189 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common188, i32 0, i32 2, !dbg !15913
  %77 = load %union.tree_node*, %union.tree_node** %type189, align 8, !dbg !15913
  %base190 = bitcast %union.tree_node* %77 to %struct.tree_base*, !dbg !15913
  %78 = bitcast %struct.tree_base* %base190 to i64*, !dbg !15913
  %bf.load191 = load i64, i64* %78, align 8, !dbg !15913
  %bf.lshr192 = lshr i64 %bf.load191, 56, !dbg !15913
  %bf.cast193 = trunc i64 %bf.lshr192 to i32, !dbg !15913
  %cmp194 = icmp eq i32 %bf.cast187, %bf.cast193, !dbg !15914
  br i1 %cmp194, label %if.then195, label %if.end196, !dbg !15915

if.then195:                                       ; preds = %lor.lhs.false182, %lor.lhs.false176, %lor.lhs.false164
  call void (i8*, ...) @error(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.84, i64 0, i64 0)), !dbg !15916
  %79 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15918
  call void @debug_generic_expr(%union.tree_node* %79), !dbg !15919
  %80 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15920
  call void @debug_generic_expr(%union.tree_node* %80), !dbg !15921
  store i8 1, i8* %retval, align 1, !dbg !15922
  br label %return, !dbg !15922

if.end196:                                        ; preds = %lor.lhs.false182
  store i8 0, i8* %retval, align 1, !dbg !15923
  br label %return, !dbg !15923

sw.bb197:                                         ; preds = %if.end11
  %81 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15924
  %82 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15927
  %call198 = call zeroext i8 @valid_fixed_convert_types_p(%union.tree_node* %81, %union.tree_node* %82), !dbg !15928
  %tobool199 = icmp ne i8 %call198, 0, !dbg !15928
  br i1 %tobool199, label %if.end204, label %land.lhs.true200, !dbg !15929

land.lhs.true200:                                 ; preds = %sw.bb197
  %83 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15930
  %84 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15931
  %call201 = call zeroext i8 @valid_fixed_convert_types_p(%union.tree_node* %83, %union.tree_node* %84), !dbg !15932
  %tobool202 = icmp ne i8 %call201, 0, !dbg !15932
  br i1 %tobool202, label %if.end204, label %if.then203, !dbg !15933

if.then203:                                       ; preds = %land.lhs.true200
  call void (i8*, ...) @error(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.85, i64 0, i64 0)), !dbg !15934
  %85 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15936
  call void @debug_generic_expr(%union.tree_node* %85), !dbg !15937
  %86 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15938
  call void @debug_generic_expr(%union.tree_node* %86), !dbg !15939
  store i8 1, i8* %retval, align 1, !dbg !15940
  br label %return, !dbg !15940

if.end204:                                        ; preds = %land.lhs.true200, %sw.bb197
  store i8 0, i8* %retval, align 1, !dbg !15941
  br label %return, !dbg !15941

sw.bb205:                                         ; preds = %if.end11
  %87 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15942
  %base206 = bitcast %union.tree_node* %87 to %struct.tree_base*, !dbg !15942
  %88 = bitcast %struct.tree_base* %base206 to i64*, !dbg !15942
  %bf.load207 = load i64, i64* %88, align 8, !dbg !15942
  %bf.clear208 = and i64 %bf.load207, 65535, !dbg !15942
  %bf.cast209 = trunc i64 %bf.clear208 to i32, !dbg !15942
  %cmp210 = icmp eq i32 %bf.cast209, 6, !dbg !15942
  br i1 %cmp210, label %lor.lhs.false223, label %lor.lhs.false211, !dbg !15942

lor.lhs.false211:                                 ; preds = %sw.bb205
  %89 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15942
  %base212 = bitcast %union.tree_node* %89 to %struct.tree_base*, !dbg !15942
  %90 = bitcast %struct.tree_base* %base212 to i64*, !dbg !15942
  %bf.load213 = load i64, i64* %90, align 8, !dbg !15942
  %bf.clear214 = and i64 %bf.load213, 65535, !dbg !15942
  %bf.cast215 = trunc i64 %bf.clear214 to i32, !dbg !15942
  %cmp216 = icmp eq i32 %bf.cast215, 7, !dbg !15942
  br i1 %cmp216, label %lor.lhs.false223, label %lor.lhs.false217, !dbg !15942

lor.lhs.false217:                                 ; preds = %lor.lhs.false211
  %91 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15942
  %base218 = bitcast %union.tree_node* %91 to %struct.tree_base*, !dbg !15942
  %92 = bitcast %struct.tree_base* %base218 to i64*, !dbg !15942
  %bf.load219 = load i64, i64* %92, align 8, !dbg !15942
  %bf.clear220 = and i64 %bf.load219, 65535, !dbg !15942
  %bf.cast221 = trunc i64 %bf.clear220 to i32, !dbg !15942
  %cmp222 = icmp eq i32 %bf.cast221, 8, !dbg !15942
  br i1 %cmp222, label %lor.lhs.false223, label %if.then229, !dbg !15945

lor.lhs.false223:                                 ; preds = %lor.lhs.false217, %lor.lhs.false211, %sw.bb205
  %93 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15946
  %base224 = bitcast %union.tree_node* %93 to %struct.tree_base*, !dbg !15946
  %94 = bitcast %struct.tree_base* %base224 to i64*, !dbg !15946
  %bf.load225 = load i64, i64* %94, align 8, !dbg !15946
  %bf.clear226 = and i64 %bf.load225, 65535, !dbg !15946
  %bf.cast227 = trunc i64 %bf.clear226 to i32, !dbg !15946
  %cmp228 = icmp eq i32 %bf.cast227, 9, !dbg !15946
  br i1 %cmp228, label %if.end230, label %if.then229, !dbg !15947

if.then229:                                       ; preds = %lor.lhs.false223, %lor.lhs.false217
  call void (i8*, ...) @error(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.86, i64 0, i64 0)), !dbg !15948
  %95 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15950
  call void @debug_generic_expr(%union.tree_node* %95), !dbg !15951
  %96 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15952
  call void @debug_generic_expr(%union.tree_node* %96), !dbg !15953
  store i8 1, i8* %retval, align 1, !dbg !15954
  br label %return, !dbg !15954

if.end230:                                        ; preds = %lor.lhs.false223
  store i8 0, i8* %retval, align 1, !dbg !15955
  br label %return, !dbg !15955

sw.bb231:                                         ; preds = %if.end11
  %97 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15956
  %base232 = bitcast %union.tree_node* %97 to %struct.tree_base*, !dbg !15956
  %98 = bitcast %struct.tree_base* %base232 to i64*, !dbg !15956
  %bf.load233 = load i64, i64* %98, align 8, !dbg !15956
  %bf.clear234 = and i64 %bf.load233, 65535, !dbg !15956
  %bf.cast235 = trunc i64 %bf.clear234 to i32, !dbg !15956
  %cmp236 = icmp eq i32 %bf.cast235, 6, !dbg !15956
  br i1 %cmp236, label %lor.lhs.false249, label %lor.lhs.false237, !dbg !15956

lor.lhs.false237:                                 ; preds = %sw.bb231
  %99 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15956
  %base238 = bitcast %union.tree_node* %99 to %struct.tree_base*, !dbg !15956
  %100 = bitcast %struct.tree_base* %base238 to i64*, !dbg !15956
  %bf.load239 = load i64, i64* %100, align 8, !dbg !15956
  %bf.clear240 = and i64 %bf.load239, 65535, !dbg !15956
  %bf.cast241 = trunc i64 %bf.clear240 to i32, !dbg !15956
  %cmp242 = icmp eq i32 %bf.cast241, 7, !dbg !15956
  br i1 %cmp242, label %lor.lhs.false249, label %lor.lhs.false243, !dbg !15956

lor.lhs.false243:                                 ; preds = %lor.lhs.false237
  %101 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15956
  %base244 = bitcast %union.tree_node* %101 to %struct.tree_base*, !dbg !15956
  %102 = bitcast %struct.tree_base* %base244 to i64*, !dbg !15956
  %bf.load245 = load i64, i64* %102, align 8, !dbg !15956
  %bf.clear246 = and i64 %bf.load245, 65535, !dbg !15956
  %bf.cast247 = trunc i64 %bf.clear246 to i32, !dbg !15956
  %cmp248 = icmp eq i32 %bf.cast247, 8, !dbg !15956
  br i1 %cmp248, label %lor.lhs.false249, label %if.then255, !dbg !15959

lor.lhs.false249:                                 ; preds = %lor.lhs.false243, %lor.lhs.false237, %sw.bb231
  %103 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15960
  %base250 = bitcast %union.tree_node* %103 to %struct.tree_base*, !dbg !15960
  %104 = bitcast %struct.tree_base* %base250 to i64*, !dbg !15960
  %bf.load251 = load i64, i64* %104, align 8, !dbg !15960
  %bf.clear252 = and i64 %bf.load251, 65535, !dbg !15960
  %bf.cast253 = trunc i64 %bf.clear252 to i32, !dbg !15960
  %cmp254 = icmp eq i32 %bf.cast253, 9, !dbg !15960
  br i1 %cmp254, label %if.end256, label %if.then255, !dbg !15961

if.then255:                                       ; preds = %lor.lhs.false249, %lor.lhs.false243
  call void (i8*, ...) @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.87, i64 0, i64 0)), !dbg !15962
  %105 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15964
  call void @debug_generic_expr(%union.tree_node* %105), !dbg !15965
  %106 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15966
  call void @debug_generic_expr(%union.tree_node* %106), !dbg !15967
  store i8 1, i8* %retval, align 1, !dbg !15968
  br label %return, !dbg !15968

if.end256:                                        ; preds = %lor.lhs.false249
  store i8 0, i8* %retval, align 1, !dbg !15969
  br label %return, !dbg !15969

sw.bb257:                                         ; preds = %if.end11, %if.end11, %if.end11, %if.end11, %if.end11, %if.end11, %if.end11
  store i8 0, i8* %retval, align 1, !dbg !15970
  br label %return, !dbg !15970

sw.bb258:                                         ; preds = %if.end11, %if.end11, %if.end11, %if.end11, %if.end11, %if.end11, %if.end11
  br label %sw.epilog, !dbg !15971

sw.default:                                       ; preds = %if.end11
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 3206, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !15972
  br label %sw.epilog, !dbg !15973

sw.epilog:                                        ; preds = %sw.default, %sw.bb258
  %107 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15974
  %108 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15976
  %call259 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %107, %union.tree_node* %108), !dbg !15977
  %tobool260 = icmp ne i8 %call259, 0, !dbg !15977
  br i1 %tobool260, label %if.end262, label %if.then261, !dbg !15978

if.then261:                                       ; preds = %sw.epilog
  call void (i8*, ...) @error(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.88, i64 0, i64 0)), !dbg !15979
  %109 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !15981
  call void @debug_generic_expr(%union.tree_node* %109), !dbg !15982
  %110 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !15983
  call void @debug_generic_expr(%union.tree_node* %110), !dbg !15984
  store i8 1, i8* %retval, align 1, !dbg !15985
  br label %return, !dbg !15985

if.end262:                                        ; preds = %sw.epilog
  store i8 0, i8* %retval, align 1, !dbg !15986
  br label %return, !dbg !15986

return:                                           ; preds = %if.end262, %if.then261, %sw.bb257, %if.end256, %if.then255, %if.end230, %if.then229, %if.end204, %if.then203, %if.end196, %if.then195, %if.end157, %if.then156, %if.then118, %if.then93, %if.then10, %if.then
  %111 = load i8, i8* %retval, align 1, !dbg !15987
  ret i8 %111, !dbg !15987
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_gimple_assign_binary(%union.gimple_statement_d* %stmt) #0 !dbg !15988 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %rhs_code = alloca i32, align 4
  %lhs = alloca %union.tree_node*, align 8
  %lhs_type = alloca %union.tree_node*, align 8
  %rhs1 = alloca %union.tree_node*, align 8
  %rhs1_type = alloca %union.tree_node*, align 8
  %rhs2 = alloca %union.tree_node*, align 8
  %rhs2_type = alloca %union.tree_node*, align 8
  %tem = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !15989, metadata !DIExpression()), !dbg !15990
  call void @llvm.dbg.declare(metadata i32* %rhs_code, metadata !15991, metadata !DIExpression()), !dbg !15992
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15993
  %call = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %0), !dbg !15994
  store i32 %call, i32* %rhs_code, align 4, !dbg !15992
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !15995, metadata !DIExpression()), !dbg !15996
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !15997
  %call1 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %1), !dbg !15998
  store %union.tree_node* %call1, %union.tree_node** %lhs, align 8, !dbg !15996
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs_type, metadata !15999, metadata !DIExpression()), !dbg !16000
  %2 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !16001
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !16001
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !16001
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !16001
  store %union.tree_node* %3, %union.tree_node** %lhs_type, align 8, !dbg !16000
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs1, metadata !16002, metadata !DIExpression()), !dbg !16003
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16004
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %4), !dbg !16005
  store %union.tree_node* %call2, %union.tree_node** %rhs1, align 8, !dbg !16003
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs1_type, metadata !16006, metadata !DIExpression()), !dbg !16007
  %5 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !16008
  %common3 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !16008
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !16008
  %6 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !16008
  store %union.tree_node* %6, %union.tree_node** %rhs1_type, align 8, !dbg !16007
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs2, metadata !16009, metadata !DIExpression()), !dbg !16010
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16011
  %call5 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %7), !dbg !16012
  store %union.tree_node* %call5, %union.tree_node** %rhs2, align 8, !dbg !16010
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs2_type, metadata !16013, metadata !DIExpression()), !dbg !16014
  %8 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !16015
  %common6 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !16015
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !16015
  %9 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !16015
  store %union.tree_node* %9, %union.tree_node** %rhs2_type, align 8, !dbg !16014
  %10 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !16016
  %call8 = call zeroext i8 @is_gimple_reg(%union.tree_node* %10), !dbg !16018
  %tobool = icmp ne i8 %call8, 0, !dbg !16018
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !16019

land.lhs.true:                                    ; preds = %entry
  %11 = load i32, i32* @optimize, align 4, !dbg !16020
  %cmp = icmp eq i32 %11, 0, !dbg !16021
  br i1 %cmp, label %land.lhs.true9, label %if.then, !dbg !16022

land.lhs.true9:                                   ; preds = %land.lhs.true
  %12 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16023
  %base = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !16023
  %13 = bitcast %struct.tree_base* %base to i64*, !dbg !16023
  %bf.load = load i64, i64* %13, align 8, !dbg !16023
  %bf.clear = and i64 %bf.load, 65535, !dbg !16023
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !16023
  %cmp10 = icmp eq i32 %bf.cast, 13, !dbg !16024
  br i1 %cmp10, label %if.end, label %if.then, !dbg !16025

if.then:                                          ; preds = %land.lhs.true9, %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.89, i64 0, i64 0)), !dbg !16026
  store i8 1, i8* %retval, align 1, !dbg !16028
  br label %return, !dbg !16028

if.end:                                           ; preds = %land.lhs.true9, %entry
  %14 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !16029
  %call11 = call zeroext i8 @is_gimple_val(%union.tree_node* %14), !dbg !16031
  %tobool12 = icmp ne i8 %call11, 0, !dbg !16031
  br i1 %tobool12, label %lor.lhs.false, label %if.then15, !dbg !16032

lor.lhs.false:                                    ; preds = %if.end
  %15 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !16033
  %call13 = call zeroext i8 @is_gimple_val(%union.tree_node* %15), !dbg !16034
  %tobool14 = icmp ne i8 %call13, 0, !dbg !16034
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !16035

if.then15:                                        ; preds = %lor.lhs.false, %if.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.90, i64 0, i64 0)), !dbg !16036
  store i8 1, i8* %retval, align 1, !dbg !16038
  br label %return, !dbg !16038

if.end16:                                         ; preds = %lor.lhs.false
  %16 = load i32, i32* %rhs_code, align 4, !dbg !16039
  switch i32 %16, label %sw.default [
    i32 123, label %sw.bb
    i32 83, label %sw.bb72
    i32 84, label %sw.bb72
    i32 85, label %sw.bb72
    i32 86, label %sw.bb72
    i32 170, label %sw.bb209
    i32 171, label %sw.bb209
    i32 63, label %sw.bb329
    i32 64, label %sw.bb385
    i32 66, label %sw.bb423
    i32 91, label %sw.bb443
    i32 92, label %sw.bb443
    i32 93, label %sw.bb444
    i32 94, label %sw.bb444
    i32 95, label %sw.bb444
    i32 97, label %sw.bb500
    i32 98, label %sw.bb500
    i32 99, label %sw.bb500
    i32 100, label %sw.bb500
    i32 101, label %sw.bb500
    i32 102, label %sw.bb500
    i32 103, label %sw.bb500
    i32 104, label %sw.bb500
    i32 105, label %sw.bb500
    i32 106, label %sw.bb500
    i32 107, label %sw.bb500
    i32 108, label %sw.bb500
    i32 109, label %sw.bb500
    i32 110, label %sw.bb500
    i32 168, label %sw.bb502
    i32 169, label %sw.bb502
    i32 172, label %sw.bb502
    i32 173, label %sw.bb502
    i32 178, label %sw.bb502
    i32 179, label %sw.bb502
    i32 180, label %sw.bb502
    i32 181, label %sw.bb502
    i32 182, label %sw.bb502
    i32 183, label %sw.bb502
    i32 184, label %sw.bb502
    i32 65, label %sw.bb503
    i32 67, label %sw.bb503
    i32 68, label %sw.bb503
    i32 69, label %sw.bb503
    i32 70, label %sw.bb503
    i32 71, label %sw.bb503
    i32 72, label %sw.bb503
    i32 73, label %sw.bb503
    i32 74, label %sw.bb503
    i32 75, label %sw.bb503
    i32 76, label %sw.bb503
    i32 80, label %sw.bb503
    i32 81, label %sw.bb503
    i32 87, label %sw.bb503
    i32 88, label %sw.bb503
    i32 89, label %sw.bb503
  ], !dbg !16040

sw.bb:                                            ; preds = %if.end16
  %17 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16041
  %base17 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !16041
  %18 = bitcast %struct.tree_base* %base17 to i64*, !dbg !16041
  %bf.load18 = load i64, i64* %18, align 8, !dbg !16041
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !16041
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !16041
  %cmp21 = icmp ne i32 %bf.cast20, 13, !dbg !16045
  br i1 %cmp21, label %if.then70, label %lor.lhs.false22, !dbg !16046

lor.lhs.false22:                                  ; preds = %sw.bb
  %19 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16047
  %base23 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !16047
  %20 = bitcast %struct.tree_base* %base23 to i64*, !dbg !16047
  %bf.load24 = load i64, i64* %20, align 8, !dbg !16047
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !16047
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !16047
  %cmp27 = icmp eq i32 %bf.cast26, 6, !dbg !16047
  br i1 %cmp27, label %lor.lhs.false46, label %lor.lhs.false28, !dbg !16047

lor.lhs.false28:                                  ; preds = %lor.lhs.false22
  %21 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16047
  %base29 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !16047
  %22 = bitcast %struct.tree_base* %base29 to i64*, !dbg !16047
  %bf.load30 = load i64, i64* %22, align 8, !dbg !16047
  %bf.clear31 = and i64 %bf.load30, 65535, !dbg !16047
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !16047
  %cmp33 = icmp eq i32 %bf.cast32, 7, !dbg !16047
  br i1 %cmp33, label %lor.lhs.false46, label %lor.lhs.false34, !dbg !16047

lor.lhs.false34:                                  ; preds = %lor.lhs.false28
  %23 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16047
  %base35 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !16047
  %24 = bitcast %struct.tree_base* %base35 to i64*, !dbg !16047
  %bf.load36 = load i64, i64* %24, align 8, !dbg !16047
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !16047
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !16047
  %cmp39 = icmp eq i32 %bf.cast38, 8, !dbg !16047
  br i1 %cmp39, label %lor.lhs.false46, label %lor.lhs.false40, !dbg !16048

lor.lhs.false40:                                  ; preds = %lor.lhs.false34
  %25 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16049
  %base41 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !16049
  %26 = bitcast %struct.tree_base* %base41 to i64*, !dbg !16049
  %bf.load42 = load i64, i64* %26, align 8, !dbg !16049
  %bf.clear43 = and i64 %bf.load42, 65535, !dbg !16049
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !16049
  %cmp45 = icmp eq i32 %bf.cast44, 9, !dbg !16049
  br i1 %cmp45, label %lor.lhs.false46, label %if.then70, !dbg !16050

lor.lhs.false46:                                  ; preds = %lor.lhs.false40, %lor.lhs.false34, %lor.lhs.false28, %lor.lhs.false22
  %27 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16051
  %base47 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !16051
  %28 = bitcast %struct.tree_base* %base47 to i64*, !dbg !16051
  %bf.load48 = load i64, i64* %28, align 8, !dbg !16051
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !16051
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !16051
  %cmp51 = icmp eq i32 %bf.cast50, 6, !dbg !16051
  br i1 %cmp51, label %if.end71, label %lor.lhs.false52, !dbg !16051

lor.lhs.false52:                                  ; preds = %lor.lhs.false46
  %29 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16051
  %base53 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !16051
  %30 = bitcast %struct.tree_base* %base53 to i64*, !dbg !16051
  %bf.load54 = load i64, i64* %30, align 8, !dbg !16051
  %bf.clear55 = and i64 %bf.load54, 65535, !dbg !16051
  %bf.cast56 = trunc i64 %bf.clear55 to i32, !dbg !16051
  %cmp57 = icmp eq i32 %bf.cast56, 7, !dbg !16051
  br i1 %cmp57, label %if.end71, label %lor.lhs.false58, !dbg !16051

lor.lhs.false58:                                  ; preds = %lor.lhs.false52
  %31 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16051
  %base59 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !16051
  %32 = bitcast %struct.tree_base* %base59 to i64*, !dbg !16051
  %bf.load60 = load i64, i64* %32, align 8, !dbg !16051
  %bf.clear61 = and i64 %bf.load60, 65535, !dbg !16051
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !16051
  %cmp63 = icmp eq i32 %bf.cast62, 8, !dbg !16051
  br i1 %cmp63, label %if.end71, label %lor.lhs.false64, !dbg !16052

lor.lhs.false64:                                  ; preds = %lor.lhs.false58
  %33 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16053
  %base65 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !16053
  %34 = bitcast %struct.tree_base* %base65 to i64*, !dbg !16053
  %bf.load66 = load i64, i64* %34, align 8, !dbg !16053
  %bf.clear67 = and i64 %bf.load66, 65535, !dbg !16053
  %bf.cast68 = trunc i64 %bf.clear67 to i32, !dbg !16053
  %cmp69 = icmp eq i32 %bf.cast68, 9, !dbg !16053
  br i1 %cmp69, label %if.end71, label %if.then70, !dbg !16054

if.then70:                                        ; preds = %lor.lhs.false64, %lor.lhs.false40, %sw.bb
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.91, i64 0, i64 0)), !dbg !16055
  %35 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16057
  call void @debug_generic_expr(%union.tree_node* %35), !dbg !16058
  %36 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16059
  call void @debug_generic_expr(%union.tree_node* %36), !dbg !16060
  %37 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16061
  call void @debug_generic_expr(%union.tree_node* %37), !dbg !16062
  store i8 1, i8* %retval, align 1, !dbg !16063
  br label %return, !dbg !16063

if.end71:                                         ; preds = %lor.lhs.false64, %lor.lhs.false58, %lor.lhs.false52, %lor.lhs.false46
  store i8 0, i8* %retval, align 1, !dbg !16064
  br label %return, !dbg !16064

sw.bb72:                                          ; preds = %if.end16, %if.end16, %if.end16, %if.end16
  %38 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16065
  %base73 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !16065
  %39 = bitcast %struct.tree_base* %base73 to i64*, !dbg !16065
  %bf.load74 = load i64, i64* %39, align 8, !dbg !16065
  %bf.clear75 = and i64 %bf.load74, 65535, !dbg !16065
  %bf.cast76 = trunc i64 %bf.clear75 to i32, !dbg !16065
  %cmp77 = icmp eq i32 %bf.cast76, 6, !dbg !16065
  br i1 %cmp77, label %lor.lhs.false126, label %lor.lhs.false78, !dbg !16065

lor.lhs.false78:                                  ; preds = %sw.bb72
  %40 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16065
  %base79 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !16065
  %41 = bitcast %struct.tree_base* %base79 to i64*, !dbg !16065
  %bf.load80 = load i64, i64* %41, align 8, !dbg !16065
  %bf.clear81 = and i64 %bf.load80, 65535, !dbg !16065
  %bf.cast82 = trunc i64 %bf.clear81 to i32, !dbg !16065
  %cmp83 = icmp eq i32 %bf.cast82, 7, !dbg !16065
  br i1 %cmp83, label %lor.lhs.false126, label %lor.lhs.false84, !dbg !16065

lor.lhs.false84:                                  ; preds = %lor.lhs.false78
  %42 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16065
  %base85 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !16065
  %43 = bitcast %struct.tree_base* %base85 to i64*, !dbg !16065
  %bf.load86 = load i64, i64* %43, align 8, !dbg !16065
  %bf.clear87 = and i64 %bf.load86, 65535, !dbg !16065
  %bf.cast88 = trunc i64 %bf.clear87 to i32, !dbg !16065
  %cmp89 = icmp eq i32 %bf.cast88, 8, !dbg !16065
  br i1 %cmp89, label %lor.lhs.false126, label %land.lhs.true90, !dbg !16068

land.lhs.true90:                                  ; preds = %lor.lhs.false84
  %44 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16069
  %base91 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !16069
  %45 = bitcast %struct.tree_base* %base91 to i64*, !dbg !16069
  %bf.load92 = load i64, i64* %45, align 8, !dbg !16069
  %bf.clear93 = and i64 %bf.load92, 65535, !dbg !16069
  %bf.cast94 = trunc i64 %bf.clear93 to i32, !dbg !16069
  %cmp95 = icmp eq i32 %bf.cast94, 11, !dbg !16069
  br i1 %cmp95, label %lor.lhs.false126, label %land.lhs.true96, !dbg !16070

land.lhs.true96:                                  ; preds = %land.lhs.true90
  %46 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16071
  %base97 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !16071
  %47 = bitcast %struct.tree_base* %base97 to i64*, !dbg !16071
  %bf.load98 = load i64, i64* %47, align 8, !dbg !16071
  %bf.clear99 = and i64 %bf.load98, 65535, !dbg !16071
  %bf.cast100 = trunc i64 %bf.clear99 to i32, !dbg !16071
  %cmp101 = icmp eq i32 %bf.cast100, 14, !dbg !16072
  br i1 %cmp101, label %land.lhs.true102, label %if.then207, !dbg !16073

land.lhs.true102:                                 ; preds = %land.lhs.true96
  %48 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16074
  %common103 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !16074
  %type104 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common103, i32 0, i32 2, !dbg !16074
  %49 = load %union.tree_node*, %union.tree_node** %type104, align 8, !dbg !16074
  %base105 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !16074
  %50 = bitcast %struct.tree_base* %base105 to i64*, !dbg !16074
  %bf.load106 = load i64, i64* %50, align 8, !dbg !16074
  %bf.clear107 = and i64 %bf.load106, 65535, !dbg !16074
  %bf.cast108 = trunc i64 %bf.clear107 to i32, !dbg !16074
  %cmp109 = icmp eq i32 %bf.cast108, 6, !dbg !16074
  br i1 %cmp109, label %lor.lhs.false126, label %lor.lhs.false110, !dbg !16074

lor.lhs.false110:                                 ; preds = %land.lhs.true102
  %51 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16074
  %common111 = bitcast %union.tree_node* %51 to %struct.tree_common*, !dbg !16074
  %type112 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common111, i32 0, i32 2, !dbg !16074
  %52 = load %union.tree_node*, %union.tree_node** %type112, align 8, !dbg !16074
  %base113 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !16074
  %53 = bitcast %struct.tree_base* %base113 to i64*, !dbg !16074
  %bf.load114 = load i64, i64* %53, align 8, !dbg !16074
  %bf.clear115 = and i64 %bf.load114, 65535, !dbg !16074
  %bf.cast116 = trunc i64 %bf.clear115 to i32, !dbg !16074
  %cmp117 = icmp eq i32 %bf.cast116, 7, !dbg !16074
  br i1 %cmp117, label %lor.lhs.false126, label %lor.lhs.false118, !dbg !16074

lor.lhs.false118:                                 ; preds = %lor.lhs.false110
  %54 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16074
  %common119 = bitcast %union.tree_node* %54 to %struct.tree_common*, !dbg !16074
  %type120 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common119, i32 0, i32 2, !dbg !16074
  %55 = load %union.tree_node*, %union.tree_node** %type120, align 8, !dbg !16074
  %base121 = bitcast %union.tree_node* %55 to %struct.tree_base*, !dbg !16074
  %56 = bitcast %struct.tree_base* %base121 to i64*, !dbg !16074
  %bf.load122 = load i64, i64* %56, align 8, !dbg !16074
  %bf.clear123 = and i64 %bf.load122, 65535, !dbg !16074
  %bf.cast124 = trunc i64 %bf.clear123 to i32, !dbg !16074
  %cmp125 = icmp eq i32 %bf.cast124, 8, !dbg !16074
  br i1 %cmp125, label %lor.lhs.false126, label %if.then207, !dbg !16075

lor.lhs.false126:                                 ; preds = %lor.lhs.false118, %lor.lhs.false110, %land.lhs.true102, %land.lhs.true90, %lor.lhs.false84, %lor.lhs.false78, %sw.bb72
  %57 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16076
  %base127 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !16076
  %58 = bitcast %struct.tree_base* %base127 to i64*, !dbg !16076
  %bf.load128 = load i64, i64* %58, align 8, !dbg !16076
  %bf.clear129 = and i64 %bf.load128, 65535, !dbg !16076
  %bf.cast130 = trunc i64 %bf.clear129 to i32, !dbg !16076
  %cmp131 = icmp eq i32 %bf.cast130, 6, !dbg !16076
  br i1 %cmp131, label %lor.lhs.false204, label %lor.lhs.false132, !dbg !16076

lor.lhs.false132:                                 ; preds = %lor.lhs.false126
  %59 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16076
  %base133 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !16076
  %60 = bitcast %struct.tree_base* %base133 to i64*, !dbg !16076
  %bf.load134 = load i64, i64* %60, align 8, !dbg !16076
  %bf.clear135 = and i64 %bf.load134, 65535, !dbg !16076
  %bf.cast136 = trunc i64 %bf.clear135 to i32, !dbg !16076
  %cmp137 = icmp eq i32 %bf.cast136, 7, !dbg !16076
  br i1 %cmp137, label %lor.lhs.false204, label %lor.lhs.false138, !dbg !16076

lor.lhs.false138:                                 ; preds = %lor.lhs.false132
  %61 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16076
  %base139 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !16076
  %62 = bitcast %struct.tree_base* %base139 to i64*, !dbg !16076
  %bf.load140 = load i64, i64* %62, align 8, !dbg !16076
  %bf.clear141 = and i64 %bf.load140, 65535, !dbg !16076
  %bf.cast142 = trunc i64 %bf.clear141 to i32, !dbg !16076
  %cmp143 = icmp eq i32 %bf.cast142, 8, !dbg !16076
  br i1 %cmp143, label %lor.lhs.false204, label %land.lhs.true144, !dbg !16077

land.lhs.true144:                                 ; preds = %lor.lhs.false138
  %63 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16078
  %base145 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !16078
  %64 = bitcast %struct.tree_base* %base145 to i64*, !dbg !16078
  %bf.load146 = load i64, i64* %64, align 8, !dbg !16078
  %bf.clear147 = and i64 %bf.load146, 65535, !dbg !16078
  %bf.cast148 = trunc i64 %bf.clear147 to i32, !dbg !16078
  %cmp149 = icmp eq i32 %bf.cast148, 14, !dbg !16079
  br i1 %cmp149, label %land.lhs.true150, label %if.then207, !dbg !16080

land.lhs.true150:                                 ; preds = %land.lhs.true144
  %65 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16081
  %common151 = bitcast %union.tree_node* %65 to %struct.tree_common*, !dbg !16081
  %type152 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common151, i32 0, i32 2, !dbg !16081
  %66 = load %union.tree_node*, %union.tree_node** %type152, align 8, !dbg !16081
  %base153 = bitcast %union.tree_node* %66 to %struct.tree_base*, !dbg !16081
  %67 = bitcast %struct.tree_base* %base153 to i64*, !dbg !16081
  %bf.load154 = load i64, i64* %67, align 8, !dbg !16081
  %bf.clear155 = and i64 %bf.load154, 65535, !dbg !16081
  %bf.cast156 = trunc i64 %bf.clear155 to i32, !dbg !16081
  %cmp157 = icmp eq i32 %bf.cast156, 6, !dbg !16081
  br i1 %cmp157, label %land.lhs.true174, label %lor.lhs.false158, !dbg !16081

lor.lhs.false158:                                 ; preds = %land.lhs.true150
  %68 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16081
  %common159 = bitcast %union.tree_node* %68 to %struct.tree_common*, !dbg !16081
  %type160 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common159, i32 0, i32 2, !dbg !16081
  %69 = load %union.tree_node*, %union.tree_node** %type160, align 8, !dbg !16081
  %base161 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !16081
  %70 = bitcast %struct.tree_base* %base161 to i64*, !dbg !16081
  %bf.load162 = load i64, i64* %70, align 8, !dbg !16081
  %bf.clear163 = and i64 %bf.load162, 65535, !dbg !16081
  %bf.cast164 = trunc i64 %bf.clear163 to i32, !dbg !16081
  %cmp165 = icmp eq i32 %bf.cast164, 7, !dbg !16081
  br i1 %cmp165, label %land.lhs.true174, label %lor.lhs.false166, !dbg !16081

lor.lhs.false166:                                 ; preds = %lor.lhs.false158
  %71 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16081
  %common167 = bitcast %union.tree_node* %71 to %struct.tree_common*, !dbg !16081
  %type168 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common167, i32 0, i32 2, !dbg !16081
  %72 = load %union.tree_node*, %union.tree_node** %type168, align 8, !dbg !16081
  %base169 = bitcast %union.tree_node* %72 to %struct.tree_base*, !dbg !16081
  %73 = bitcast %struct.tree_base* %base169 to i64*, !dbg !16081
  %bf.load170 = load i64, i64* %73, align 8, !dbg !16081
  %bf.clear171 = and i64 %bf.load170, 65535, !dbg !16081
  %bf.cast172 = trunc i64 %bf.clear171 to i32, !dbg !16081
  %cmp173 = icmp eq i32 %bf.cast172, 8, !dbg !16081
  br i1 %cmp173, label %land.lhs.true174, label %if.then207, !dbg !16082

land.lhs.true174:                                 ; preds = %lor.lhs.false166, %lor.lhs.false158, %land.lhs.true150
  %74 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16083
  %base175 = bitcast %union.tree_node* %74 to %struct.tree_base*, !dbg !16083
  %75 = bitcast %struct.tree_base* %base175 to i64*, !dbg !16083
  %bf.load176 = load i64, i64* %75, align 8, !dbg !16083
  %bf.clear177 = and i64 %bf.load176, 65535, !dbg !16083
  %bf.cast178 = trunc i64 %bf.clear177 to i32, !dbg !16083
  %cmp179 = icmp eq i32 %bf.cast178, 14, !dbg !16084
  br i1 %cmp179, label %land.lhs.true180, label %if.then207, !dbg !16085

land.lhs.true180:                                 ; preds = %land.lhs.true174
  %76 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16086
  %common181 = bitcast %union.tree_node* %76 to %struct.tree_common*, !dbg !16086
  %type182 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common181, i32 0, i32 2, !dbg !16086
  %77 = load %union.tree_node*, %union.tree_node** %type182, align 8, !dbg !16086
  %base183 = bitcast %union.tree_node* %77 to %struct.tree_base*, !dbg !16086
  %78 = bitcast %struct.tree_base* %base183 to i64*, !dbg !16086
  %bf.load184 = load i64, i64* %78, align 8, !dbg !16086
  %bf.clear185 = and i64 %bf.load184, 65535, !dbg !16086
  %bf.cast186 = trunc i64 %bf.clear185 to i32, !dbg !16086
  %cmp187 = icmp eq i32 %bf.cast186, 6, !dbg !16086
  br i1 %cmp187, label %lor.lhs.false204, label %lor.lhs.false188, !dbg !16086

lor.lhs.false188:                                 ; preds = %land.lhs.true180
  %79 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16086
  %common189 = bitcast %union.tree_node* %79 to %struct.tree_common*, !dbg !16086
  %type190 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common189, i32 0, i32 2, !dbg !16086
  %80 = load %union.tree_node*, %union.tree_node** %type190, align 8, !dbg !16086
  %base191 = bitcast %union.tree_node* %80 to %struct.tree_base*, !dbg !16086
  %81 = bitcast %struct.tree_base* %base191 to i64*, !dbg !16086
  %bf.load192 = load i64, i64* %81, align 8, !dbg !16086
  %bf.clear193 = and i64 %bf.load192, 65535, !dbg !16086
  %bf.cast194 = trunc i64 %bf.clear193 to i32, !dbg !16086
  %cmp195 = icmp eq i32 %bf.cast194, 7, !dbg !16086
  br i1 %cmp195, label %lor.lhs.false204, label %lor.lhs.false196, !dbg !16086

lor.lhs.false196:                                 ; preds = %lor.lhs.false188
  %82 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16086
  %common197 = bitcast %union.tree_node* %82 to %struct.tree_common*, !dbg !16086
  %type198 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common197, i32 0, i32 2, !dbg !16086
  %83 = load %union.tree_node*, %union.tree_node** %type198, align 8, !dbg !16086
  %base199 = bitcast %union.tree_node* %83 to %struct.tree_base*, !dbg !16086
  %84 = bitcast %struct.tree_base* %base199 to i64*, !dbg !16086
  %bf.load200 = load i64, i64* %84, align 8, !dbg !16086
  %bf.clear201 = and i64 %bf.load200, 65535, !dbg !16086
  %bf.cast202 = trunc i64 %bf.clear201 to i32, !dbg !16086
  %cmp203 = icmp eq i32 %bf.cast202, 8, !dbg !16086
  br i1 %cmp203, label %lor.lhs.false204, label %if.then207, !dbg !16087

lor.lhs.false204:                                 ; preds = %lor.lhs.false196, %lor.lhs.false188, %land.lhs.true180, %lor.lhs.false138, %lor.lhs.false132, %lor.lhs.false126
  %85 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16088
  %86 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16089
  %call205 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %85, %union.tree_node* %86), !dbg !16090
  %tobool206 = icmp ne i8 %call205, 0, !dbg !16090
  br i1 %tobool206, label %if.end208, label %if.then207, !dbg !16091

if.then207:                                       ; preds = %lor.lhs.false204, %lor.lhs.false196, %land.lhs.true174, %lor.lhs.false166, %land.lhs.true144, %lor.lhs.false118, %land.lhs.true96
  call void (i8*, ...) @error(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.92, i64 0, i64 0)), !dbg !16092
  %87 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16094
  call void @debug_generic_expr(%union.tree_node* %87), !dbg !16095
  %88 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16096
  call void @debug_generic_expr(%union.tree_node* %88), !dbg !16097
  %89 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16098
  call void @debug_generic_expr(%union.tree_node* %89), !dbg !16099
  store i8 1, i8* %retval, align 1, !dbg !16100
  br label %return, !dbg !16100

if.end208:                                        ; preds = %lor.lhs.false204
  store i8 0, i8* %retval, align 1, !dbg !16101
  br label %return, !dbg !16101

sw.bb209:                                         ; preds = %if.end16, %if.end16
  %90 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16102
  %base210 = bitcast %union.tree_node* %90 to %struct.tree_base*, !dbg !16102
  %91 = bitcast %struct.tree_base* %base210 to i64*, !dbg !16102
  %bf.load211 = load i64, i64* %91, align 8, !dbg !16102
  %bf.clear212 = and i64 %bf.load211, 65535, !dbg !16102
  %bf.cast213 = trunc i64 %bf.clear212 to i32, !dbg !16102
  %cmp214 = icmp ne i32 %bf.cast213, 14, !dbg !16105
  br i1 %cmp214, label %if.then306, label %lor.lhs.false215, !dbg !16106

lor.lhs.false215:                                 ; preds = %sw.bb209
  %92 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16107
  %common216 = bitcast %union.tree_node* %92 to %struct.tree_common*, !dbg !16107
  %type217 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common216, i32 0, i32 2, !dbg !16107
  %93 = load %union.tree_node*, %union.tree_node** %type217, align 8, !dbg !16107
  %base218 = bitcast %union.tree_node* %93 to %struct.tree_base*, !dbg !16107
  %94 = bitcast %struct.tree_base* %base218 to i64*, !dbg !16107
  %bf.load219 = load i64, i64* %94, align 8, !dbg !16107
  %bf.clear220 = and i64 %bf.load219, 65535, !dbg !16107
  %bf.cast221 = trunc i64 %bf.clear220 to i32, !dbg !16107
  %cmp222 = icmp eq i32 %bf.cast221, 6, !dbg !16107
  br i1 %cmp222, label %lor.lhs.false255, label %lor.lhs.false223, !dbg !16107

lor.lhs.false223:                                 ; preds = %lor.lhs.false215
  %95 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16107
  %common224 = bitcast %union.tree_node* %95 to %struct.tree_common*, !dbg !16107
  %type225 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common224, i32 0, i32 2, !dbg !16107
  %96 = load %union.tree_node*, %union.tree_node** %type225, align 8, !dbg !16107
  %base226 = bitcast %union.tree_node* %96 to %struct.tree_base*, !dbg !16107
  %97 = bitcast %struct.tree_base* %base226 to i64*, !dbg !16107
  %bf.load227 = load i64, i64* %97, align 8, !dbg !16107
  %bf.clear228 = and i64 %bf.load227, 65535, !dbg !16107
  %bf.cast229 = trunc i64 %bf.clear228 to i32, !dbg !16107
  %cmp230 = icmp eq i32 %bf.cast229, 7, !dbg !16107
  br i1 %cmp230, label %lor.lhs.false255, label %lor.lhs.false231, !dbg !16107

lor.lhs.false231:                                 ; preds = %lor.lhs.false223
  %98 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16107
  %common232 = bitcast %union.tree_node* %98 to %struct.tree_common*, !dbg !16107
  %type233 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common232, i32 0, i32 2, !dbg !16107
  %99 = load %union.tree_node*, %union.tree_node** %type233, align 8, !dbg !16107
  %base234 = bitcast %union.tree_node* %99 to %struct.tree_base*, !dbg !16107
  %100 = bitcast %struct.tree_base* %base234 to i64*, !dbg !16107
  %bf.load235 = load i64, i64* %100, align 8, !dbg !16107
  %bf.clear236 = and i64 %bf.load235, 65535, !dbg !16107
  %bf.cast237 = trunc i64 %bf.clear236 to i32, !dbg !16107
  %cmp238 = icmp eq i32 %bf.cast237, 8, !dbg !16107
  br i1 %cmp238, label %lor.lhs.false255, label %lor.lhs.false239, !dbg !16108

lor.lhs.false239:                                 ; preds = %lor.lhs.false231
  %101 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16109
  %common240 = bitcast %union.tree_node* %101 to %struct.tree_common*, !dbg !16109
  %type241 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common240, i32 0, i32 2, !dbg !16109
  %102 = load %union.tree_node*, %union.tree_node** %type241, align 8, !dbg !16109
  %base242 = bitcast %union.tree_node* %102 to %struct.tree_base*, !dbg !16109
  %103 = bitcast %struct.tree_base* %base242 to i64*, !dbg !16109
  %bf.load243 = load i64, i64* %103, align 8, !dbg !16109
  %bf.clear244 = and i64 %bf.load243, 65535, !dbg !16109
  %bf.cast245 = trunc i64 %bf.clear244 to i32, !dbg !16109
  %cmp246 = icmp eq i32 %bf.cast245, 11, !dbg !16109
  br i1 %cmp246, label %lor.lhs.false255, label %lor.lhs.false247, !dbg !16110

lor.lhs.false247:                                 ; preds = %lor.lhs.false239
  %104 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16111
  %common248 = bitcast %union.tree_node* %104 to %struct.tree_common*, !dbg !16111
  %type249 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common248, i32 0, i32 2, !dbg !16111
  %105 = load %union.tree_node*, %union.tree_node** %type249, align 8, !dbg !16111
  %base250 = bitcast %union.tree_node* %105 to %struct.tree_base*, !dbg !16111
  %106 = bitcast %struct.tree_base* %base250 to i64*, !dbg !16111
  %bf.load251 = load i64, i64* %106, align 8, !dbg !16111
  %bf.clear252 = and i64 %bf.load251, 65535, !dbg !16111
  %bf.cast253 = trunc i64 %bf.clear252 to i32, !dbg !16111
  %cmp254 = icmp eq i32 %bf.cast253, 9, !dbg !16111
  br i1 %cmp254, label %lor.lhs.false255, label %if.then306, !dbg !16112

lor.lhs.false255:                                 ; preds = %lor.lhs.false247, %lor.lhs.false239, %lor.lhs.false231, %lor.lhs.false223, %lor.lhs.false215
  %107 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16113
  %base256 = bitcast %union.tree_node* %107 to %struct.tree_base*, !dbg !16113
  %108 = bitcast %struct.tree_base* %base256 to i64*, !dbg !16113
  %bf.load257 = load i64, i64* %108, align 8, !dbg !16113
  %bf.clear258 = and i64 %bf.load257, 65535, !dbg !16113
  %bf.cast259 = trunc i64 %bf.clear258 to i32, !dbg !16113
  %cmp260 = icmp eq i32 %bf.cast259, 6, !dbg !16113
  br i1 %cmp260, label %lor.lhs.false303, label %lor.lhs.false261, !dbg !16113

lor.lhs.false261:                                 ; preds = %lor.lhs.false255
  %109 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16113
  %base262 = bitcast %union.tree_node* %109 to %struct.tree_base*, !dbg !16113
  %110 = bitcast %struct.tree_base* %base262 to i64*, !dbg !16113
  %bf.load263 = load i64, i64* %110, align 8, !dbg !16113
  %bf.clear264 = and i64 %bf.load263, 65535, !dbg !16113
  %bf.cast265 = trunc i64 %bf.clear264 to i32, !dbg !16113
  %cmp266 = icmp eq i32 %bf.cast265, 7, !dbg !16113
  br i1 %cmp266, label %lor.lhs.false303, label %lor.lhs.false267, !dbg !16113

lor.lhs.false267:                                 ; preds = %lor.lhs.false261
  %111 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16113
  %base268 = bitcast %union.tree_node* %111 to %struct.tree_base*, !dbg !16113
  %112 = bitcast %struct.tree_base* %base268 to i64*, !dbg !16113
  %bf.load269 = load i64, i64* %112, align 8, !dbg !16113
  %bf.clear270 = and i64 %bf.load269, 65535, !dbg !16113
  %bf.cast271 = trunc i64 %bf.clear270 to i32, !dbg !16113
  %cmp272 = icmp eq i32 %bf.cast271, 8, !dbg !16113
  br i1 %cmp272, label %lor.lhs.false303, label %land.lhs.true273, !dbg !16114

land.lhs.true273:                                 ; preds = %lor.lhs.false267
  %113 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16115
  %base274 = bitcast %union.tree_node* %113 to %struct.tree_base*, !dbg !16115
  %114 = bitcast %struct.tree_base* %base274 to i64*, !dbg !16115
  %bf.load275 = load i64, i64* %114, align 8, !dbg !16115
  %bf.clear276 = and i64 %bf.load275, 65535, !dbg !16115
  %bf.cast277 = trunc i64 %bf.clear276 to i32, !dbg !16115
  %cmp278 = icmp ne i32 %bf.cast277, 14, !dbg !16116
  br i1 %cmp278, label %if.then306, label %lor.lhs.false279, !dbg !16117

lor.lhs.false279:                                 ; preds = %land.lhs.true273
  %115 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16118
  %common280 = bitcast %union.tree_node* %115 to %struct.tree_common*, !dbg !16118
  %type281 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common280, i32 0, i32 2, !dbg !16118
  %116 = load %union.tree_node*, %union.tree_node** %type281, align 8, !dbg !16118
  %base282 = bitcast %union.tree_node* %116 to %struct.tree_base*, !dbg !16118
  %117 = bitcast %struct.tree_base* %base282 to i64*, !dbg !16118
  %bf.load283 = load i64, i64* %117, align 8, !dbg !16118
  %bf.clear284 = and i64 %bf.load283, 65535, !dbg !16118
  %bf.cast285 = trunc i64 %bf.clear284 to i32, !dbg !16118
  %cmp286 = icmp eq i32 %bf.cast285, 6, !dbg !16118
  br i1 %cmp286, label %lor.lhs.false303, label %lor.lhs.false287, !dbg !16118

lor.lhs.false287:                                 ; preds = %lor.lhs.false279
  %118 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16118
  %common288 = bitcast %union.tree_node* %118 to %struct.tree_common*, !dbg !16118
  %type289 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common288, i32 0, i32 2, !dbg !16118
  %119 = load %union.tree_node*, %union.tree_node** %type289, align 8, !dbg !16118
  %base290 = bitcast %union.tree_node* %119 to %struct.tree_base*, !dbg !16118
  %120 = bitcast %struct.tree_base* %base290 to i64*, !dbg !16118
  %bf.load291 = load i64, i64* %120, align 8, !dbg !16118
  %bf.clear292 = and i64 %bf.load291, 65535, !dbg !16118
  %bf.cast293 = trunc i64 %bf.clear292 to i32, !dbg !16118
  %cmp294 = icmp eq i32 %bf.cast293, 7, !dbg !16118
  br i1 %cmp294, label %lor.lhs.false303, label %lor.lhs.false295, !dbg !16118

lor.lhs.false295:                                 ; preds = %lor.lhs.false287
  %121 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16118
  %common296 = bitcast %union.tree_node* %121 to %struct.tree_common*, !dbg !16118
  %type297 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common296, i32 0, i32 2, !dbg !16118
  %122 = load %union.tree_node*, %union.tree_node** %type297, align 8, !dbg !16118
  %base298 = bitcast %union.tree_node* %122 to %struct.tree_base*, !dbg !16118
  %123 = bitcast %struct.tree_base* %base298 to i64*, !dbg !16118
  %bf.load299 = load i64, i64* %123, align 8, !dbg !16118
  %bf.clear300 = and i64 %bf.load299, 65535, !dbg !16118
  %bf.cast301 = trunc i64 %bf.clear300 to i32, !dbg !16118
  %cmp302 = icmp eq i32 %bf.cast301, 8, !dbg !16118
  br i1 %cmp302, label %lor.lhs.false303, label %if.then306, !dbg !16119

lor.lhs.false303:                                 ; preds = %lor.lhs.false295, %lor.lhs.false287, %lor.lhs.false279, %lor.lhs.false267, %lor.lhs.false261, %lor.lhs.false255
  %124 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16120
  %125 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16121
  %call304 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %124, %union.tree_node* %125), !dbg !16122
  %tobool305 = icmp ne i8 %call304, 0, !dbg !16122
  br i1 %tobool305, label %if.end307, label %if.then306, !dbg !16123

if.then306:                                       ; preds = %lor.lhs.false303, %lor.lhs.false295, %land.lhs.true273, %lor.lhs.false247, %sw.bb209
  call void (i8*, ...) @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.93, i64 0, i64 0)), !dbg !16124
  %126 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16126
  call void @debug_generic_expr(%union.tree_node* %126), !dbg !16127
  %127 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16128
  call void @debug_generic_expr(%union.tree_node* %127), !dbg !16129
  %128 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16130
  call void @debug_generic_expr(%union.tree_node* %128), !dbg !16131
  store i8 1, i8* %retval, align 1, !dbg !16132
  br label %return, !dbg !16132

if.end307:                                        ; preds = %lor.lhs.false303
  %129 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16133
  %common308 = bitcast %union.tree_node* %129 to %struct.tree_common*, !dbg !16133
  %type309 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common308, i32 0, i32 2, !dbg !16133
  %130 = load %union.tree_node*, %union.tree_node** %type309, align 8, !dbg !16133
  %base310 = bitcast %union.tree_node* %130 to %struct.tree_base*, !dbg !16133
  %131 = bitcast %struct.tree_base* %base310 to i64*, !dbg !16133
  %bf.load311 = load i64, i64* %131, align 8, !dbg !16133
  %bf.clear312 = and i64 %bf.load311, 65535, !dbg !16133
  %bf.cast313 = trunc i64 %bf.clear312 to i32, !dbg !16133
  %cmp314 = icmp eq i32 %bf.cast313, 9, !dbg !16133
  br i1 %cmp314, label %land.lhs.true315, label %if.end328, !dbg !16135

land.lhs.true315:                                 ; preds = %if.end307
  %132 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !16136
  %base316 = bitcast %union.tree_node* %132 to %struct.tree_base*, !dbg !16136
  %133 = bitcast %struct.tree_base* %base316 to i64*, !dbg !16136
  %bf.load317 = load i64, i64* %133, align 8, !dbg !16136
  %bf.clear318 = and i64 %bf.load317, 65535, !dbg !16136
  %bf.cast319 = trunc i64 %bf.clear318 to i32, !dbg !16136
  %cmp320 = icmp ne i32 %bf.cast319, 23, !dbg !16137
  br i1 %cmp320, label %if.then327, label %lor.lhs.false321, !dbg !16138

lor.lhs.false321:                                 ; preds = %land.lhs.true315
  %134 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !16139
  %135 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16140
  %common322 = bitcast %union.tree_node* %135 to %struct.tree_common*, !dbg !16140
  %type323 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common322, i32 0, i32 2, !dbg !16140
  %136 = load %union.tree_node*, %union.tree_node** %type323, align 8, !dbg !16140
  %type324 = bitcast %union.tree_node* %136 to %struct.tree_type*, !dbg !16140
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type324, i32 0, i32 2, !dbg !16140
  %137 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !16140
  %call325 = call %union.tree_node* @div_if_zero_remainder(i32 76, %union.tree_node* %134, %union.tree_node* %137), !dbg !16141
  %tobool326 = icmp ne %union.tree_node* %call325, null, !dbg !16141
  br i1 %tobool326, label %if.end328, label %if.then327, !dbg !16142

if.then327:                                       ; preds = %lor.lhs.false321, %land.lhs.true315
  call void (i8*, ...) @error(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.94, i64 0, i64 0)), !dbg !16143
  store i8 1, i8* %retval, align 1, !dbg !16145
  br label %return, !dbg !16145

if.end328:                                        ; preds = %lor.lhs.false321, %if.end307
  store i8 0, i8* %retval, align 1, !dbg !16146
  br label %return, !dbg !16146

sw.bb329:                                         ; preds = %if.end16
  %138 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16147
  %base330 = bitcast %union.tree_node* %138 to %struct.tree_base*, !dbg !16147
  %139 = bitcast %struct.tree_base* %base330 to i64*, !dbg !16147
  %bf.load331 = load i64, i64* %139, align 8, !dbg !16147
  %bf.clear332 = and i64 %bf.load331, 65535, !dbg !16147
  %bf.cast333 = trunc i64 %bf.clear332 to i32, !dbg !16147
  %cmp334 = icmp eq i32 %bf.cast333, 14, !dbg !16150
  br i1 %cmp334, label %land.lhs.true335, label %if.end384, !dbg !16151

land.lhs.true335:                                 ; preds = %sw.bb329
  %140 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16152
  %common336 = bitcast %union.tree_node* %140 to %struct.tree_common*, !dbg !16152
  %type337 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common336, i32 0, i32 2, !dbg !16152
  %141 = load %union.tree_node*, %union.tree_node** %type337, align 8, !dbg !16152
  %base338 = bitcast %union.tree_node* %141 to %struct.tree_base*, !dbg !16152
  %142 = bitcast %struct.tree_base* %base338 to i64*, !dbg !16152
  %bf.load339 = load i64, i64* %142, align 8, !dbg !16152
  %bf.clear340 = and i64 %bf.load339, 65535, !dbg !16152
  %bf.cast341 = trunc i64 %bf.clear340 to i32, !dbg !16152
  %cmp342 = icmp eq i32 %bf.cast341, 10, !dbg !16152
  br i1 %cmp342, label %if.then351, label %lor.lhs.false343, !dbg !16152

lor.lhs.false343:                                 ; preds = %land.lhs.true335
  %143 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16152
  %common344 = bitcast %union.tree_node* %143 to %struct.tree_common*, !dbg !16152
  %type345 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common344, i32 0, i32 2, !dbg !16152
  %144 = load %union.tree_node*, %union.tree_node** %type345, align 8, !dbg !16152
  %base346 = bitcast %union.tree_node* %144 to %struct.tree_base*, !dbg !16152
  %145 = bitcast %struct.tree_base* %base346 to i64*, !dbg !16152
  %bf.load347 = load i64, i64* %145, align 8, !dbg !16152
  %bf.clear348 = and i64 %bf.load347, 65535, !dbg !16152
  %bf.cast349 = trunc i64 %bf.clear348 to i32, !dbg !16152
  %cmp350 = icmp eq i32 %bf.cast349, 12, !dbg !16152
  br i1 %cmp350, label %if.then351, label %if.end384, !dbg !16153

if.then351:                                       ; preds = %lor.lhs.false343, %land.lhs.true335
  %146 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16154
  %base352 = bitcast %union.tree_node* %146 to %struct.tree_base*, !dbg !16154
  %147 = bitcast %struct.tree_base* %base352 to i64*, !dbg !16154
  %bf.load353 = load i64, i64* %147, align 8, !dbg !16154
  %bf.clear354 = and i64 %bf.load353, 65535, !dbg !16154
  %bf.cast355 = trunc i64 %bf.clear354 to i32, !dbg !16154
  %cmp356 = icmp ne i32 %bf.cast355, 14, !dbg !16157
  br i1 %cmp356, label %if.then363, label %lor.lhs.false357, !dbg !16158

lor.lhs.false357:                                 ; preds = %if.then351
  %148 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16159
  %base358 = bitcast %union.tree_node* %148 to %struct.tree_base*, !dbg !16159
  %149 = bitcast %struct.tree_base* %base358 to i64*, !dbg !16159
  %bf.load359 = load i64, i64* %149, align 8, !dbg !16159
  %bf.clear360 = and i64 %bf.load359, 65535, !dbg !16159
  %bf.cast361 = trunc i64 %bf.clear360 to i32, !dbg !16159
  %cmp362 = icmp ne i32 %bf.cast361, 14, !dbg !16160
  br i1 %cmp362, label %if.then363, label %if.end364, !dbg !16161

if.then363:                                       ; preds = %lor.lhs.false357, %if.then351
  call void (i8*, ...) @error(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.95, i64 0, i64 0)), !dbg !16162
  store i8 1, i8* %retval, align 1, !dbg !16164
  br label %return, !dbg !16164

if.end364:                                        ; preds = %lor.lhs.false357
  %150 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16165
  %common365 = bitcast %union.tree_node* %150 to %struct.tree_common*, !dbg !16165
  %type366 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common365, i32 0, i32 2, !dbg !16165
  %151 = load %union.tree_node*, %union.tree_node** %type366, align 8, !dbg !16165
  store %union.tree_node* %151, %union.tree_node** %lhs_type, align 8, !dbg !16166
  %152 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16167
  %common367 = bitcast %union.tree_node* %152 to %struct.tree_common*, !dbg !16167
  %type368 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common367, i32 0, i32 2, !dbg !16167
  %153 = load %union.tree_node*, %union.tree_node** %type368, align 8, !dbg !16167
  store %union.tree_node* %153, %union.tree_node** %rhs1_type, align 8, !dbg !16168
  %154 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16169
  %common369 = bitcast %union.tree_node* %154 to %struct.tree_common*, !dbg !16169
  %type370 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common369, i32 0, i32 2, !dbg !16169
  %155 = load %union.tree_node*, %union.tree_node** %type370, align 8, !dbg !16169
  store %union.tree_node* %155, %union.tree_node** %rhs2_type, align 8, !dbg !16170
  %156 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16171
  %base371 = bitcast %union.tree_node* %156 to %struct.tree_base*, !dbg !16171
  %157 = bitcast %struct.tree_base* %base371 to i64*, !dbg !16171
  %bf.load372 = load i64, i64* %157, align 8, !dbg !16171
  %bf.clear373 = and i64 %bf.load372, 65535, !dbg !16171
  %bf.cast374 = trunc i64 %bf.clear373 to i32, !dbg !16171
  %cmp375 = icmp eq i32 %bf.cast374, 10, !dbg !16171
  br i1 %cmp375, label %if.then382, label %lor.lhs.false376, !dbg !16171

lor.lhs.false376:                                 ; preds = %if.end364
  %158 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16171
  %base377 = bitcast %union.tree_node* %158 to %struct.tree_base*, !dbg !16171
  %159 = bitcast %struct.tree_base* %base377 to i64*, !dbg !16171
  %bf.load378 = load i64, i64* %159, align 8, !dbg !16171
  %bf.clear379 = and i64 %bf.load378, 65535, !dbg !16171
  %bf.cast380 = trunc i64 %bf.clear379 to i32, !dbg !16171
  %cmp381 = icmp eq i32 %bf.cast380, 12, !dbg !16171
  br i1 %cmp381, label %if.then382, label %if.end383, !dbg !16173

if.then382:                                       ; preds = %lor.lhs.false376, %if.end364
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !16174, metadata !DIExpression()), !dbg !16176
  %160 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16177
  store %union.tree_node* %160, %union.tree_node** %tem, align 8, !dbg !16176
  %161 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16178
  store %union.tree_node* %161, %union.tree_node** %rhs1_type, align 8, !dbg !16179
  %162 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !16180
  store %union.tree_node* %162, %union.tree_node** %rhs2_type, align 8, !dbg !16181
  br label %if.end383, !dbg !16182

if.end383:                                        ; preds = %if.then382, %lor.lhs.false376
  br label %do_pointer_plus_expr_check, !dbg !16183

if.end384:                                        ; preds = %lor.lhs.false343, %sw.bb329
  br label %sw.bb385, !dbg !16184

sw.bb385:                                         ; preds = %if.end16, %if.end384
  %163 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16185
  %base386 = bitcast %union.tree_node* %163 to %struct.tree_base*, !dbg !16185
  %164 = bitcast %struct.tree_base* %base386 to i64*, !dbg !16185
  %bf.load387 = load i64, i64* %164, align 8, !dbg !16185
  %bf.clear388 = and i64 %bf.load387, 65535, !dbg !16185
  %bf.cast389 = trunc i64 %bf.clear388 to i32, !dbg !16185
  %cmp390 = icmp eq i32 %bf.cast389, 10, !dbg !16185
  br i1 %cmp390, label %if.then421, label %lor.lhs.false391, !dbg !16185

lor.lhs.false391:                                 ; preds = %sw.bb385
  %165 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16185
  %base392 = bitcast %union.tree_node* %165 to %struct.tree_base*, !dbg !16185
  %166 = bitcast %struct.tree_base* %base392 to i64*, !dbg !16185
  %bf.load393 = load i64, i64* %166, align 8, !dbg !16185
  %bf.clear394 = and i64 %bf.load393, 65535, !dbg !16185
  %bf.cast395 = trunc i64 %bf.clear394 to i32, !dbg !16185
  %cmp396 = icmp eq i32 %bf.cast395, 12, !dbg !16185
  br i1 %cmp396, label %if.then421, label %lor.lhs.false397, !dbg !16188

lor.lhs.false397:                                 ; preds = %lor.lhs.false391
  %167 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16189
  %base398 = bitcast %union.tree_node* %167 to %struct.tree_base*, !dbg !16189
  %168 = bitcast %struct.tree_base* %base398 to i64*, !dbg !16189
  %bf.load399 = load i64, i64* %168, align 8, !dbg !16189
  %bf.clear400 = and i64 %bf.load399, 65535, !dbg !16189
  %bf.cast401 = trunc i64 %bf.clear400 to i32, !dbg !16189
  %cmp402 = icmp eq i32 %bf.cast401, 10, !dbg !16189
  br i1 %cmp402, label %if.then421, label %lor.lhs.false403, !dbg !16189

lor.lhs.false403:                                 ; preds = %lor.lhs.false397
  %169 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16189
  %base404 = bitcast %union.tree_node* %169 to %struct.tree_base*, !dbg !16189
  %170 = bitcast %struct.tree_base* %base404 to i64*, !dbg !16189
  %bf.load405 = load i64, i64* %170, align 8, !dbg !16189
  %bf.clear406 = and i64 %bf.load405, 65535, !dbg !16189
  %bf.cast407 = trunc i64 %bf.clear406 to i32, !dbg !16189
  %cmp408 = icmp eq i32 %bf.cast407, 12, !dbg !16189
  br i1 %cmp408, label %if.then421, label %lor.lhs.false409, !dbg !16190

lor.lhs.false409:                                 ; preds = %lor.lhs.false403
  %171 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16191
  %base410 = bitcast %union.tree_node* %171 to %struct.tree_base*, !dbg !16191
  %172 = bitcast %struct.tree_base* %base410 to i64*, !dbg !16191
  %bf.load411 = load i64, i64* %172, align 8, !dbg !16191
  %bf.clear412 = and i64 %bf.load411, 65535, !dbg !16191
  %bf.cast413 = trunc i64 %bf.clear412 to i32, !dbg !16191
  %cmp414 = icmp eq i32 %bf.cast413, 10, !dbg !16191
  br i1 %cmp414, label %if.then421, label %lor.lhs.false415, !dbg !16191

lor.lhs.false415:                                 ; preds = %lor.lhs.false409
  %173 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16191
  %base416 = bitcast %union.tree_node* %173 to %struct.tree_base*, !dbg !16191
  %174 = bitcast %struct.tree_base* %base416 to i64*, !dbg !16191
  %bf.load417 = load i64, i64* %174, align 8, !dbg !16191
  %bf.clear418 = and i64 %bf.load417, 65535, !dbg !16191
  %bf.cast419 = trunc i64 %bf.clear418 to i32, !dbg !16191
  %cmp420 = icmp eq i32 %bf.cast419, 12, !dbg !16191
  br i1 %cmp420, label %if.then421, label %if.end422, !dbg !16192

if.then421:                                       ; preds = %lor.lhs.false415, %lor.lhs.false409, %lor.lhs.false403, %lor.lhs.false397, %lor.lhs.false391, %sw.bb385
  call void (i8*, ...) @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.96, i64 0, i64 0)), !dbg !16193
  store i8 1, i8* %retval, align 1, !dbg !16195
  br label %return, !dbg !16195

if.end422:                                        ; preds = %lor.lhs.false415
  br label %sw.epilog, !dbg !16196

sw.bb423:                                         ; preds = %if.end16
  br label %do_pointer_plus_expr_check, !dbg !16197

do_pointer_plus_expr_check:                       ; preds = %sw.bb423, %if.end383
  call void @llvm.dbg.label(metadata !16198), !dbg !16200
  %175 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16201
  %base424 = bitcast %union.tree_node* %175 to %struct.tree_base*, !dbg !16201
  %176 = bitcast %struct.tree_base* %base424 to i64*, !dbg !16201
  %bf.load425 = load i64, i64* %176, align 8, !dbg !16201
  %bf.clear426 = and i64 %bf.load425, 65535, !dbg !16201
  %bf.cast427 = trunc i64 %bf.clear426 to i32, !dbg !16201
  %cmp428 = icmp eq i32 %bf.cast427, 10, !dbg !16201
  br i1 %cmp428, label %lor.lhs.false435, label %lor.lhs.false429, !dbg !16201

lor.lhs.false429:                                 ; preds = %do_pointer_plus_expr_check
  %177 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16201
  %base430 = bitcast %union.tree_node* %177 to %struct.tree_base*, !dbg !16201
  %178 = bitcast %struct.tree_base* %base430 to i64*, !dbg !16201
  %bf.load431 = load i64, i64* %178, align 8, !dbg !16201
  %bf.clear432 = and i64 %bf.load431, 65535, !dbg !16201
  %bf.cast433 = trunc i64 %bf.clear432 to i32, !dbg !16201
  %cmp434 = icmp eq i32 %bf.cast433, 12, !dbg !16201
  br i1 %cmp434, label %lor.lhs.false435, label %if.then441, !dbg !16203

lor.lhs.false435:                                 ; preds = %lor.lhs.false429, %do_pointer_plus_expr_check
  %179 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16204
  %180 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16205
  %call436 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %179, %union.tree_node* %180), !dbg !16206
  %tobool437 = icmp ne i8 %call436, 0, !dbg !16206
  br i1 %tobool437, label %lor.lhs.false438, label %if.then441, !dbg !16207

lor.lhs.false438:                                 ; preds = %lor.lhs.false435
  %181 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !16208
  %182 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16209
  %call439 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %181, %union.tree_node* %182), !dbg !16210
  %tobool440 = icmp ne i8 %call439, 0, !dbg !16210
  br i1 %tobool440, label %if.end442, label %if.then441, !dbg !16211

if.then441:                                       ; preds = %lor.lhs.false438, %lor.lhs.false435, %lor.lhs.false429
  call void (i8*, ...) @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.97, i64 0, i64 0)), !dbg !16212
  %183 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16214
  call void @debug_generic_stmt(%union.tree_node* %183), !dbg !16215
  %184 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16216
  call void @debug_generic_stmt(%union.tree_node* %184), !dbg !16217
  %185 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16218
  call void @debug_generic_stmt(%union.tree_node* %185), !dbg !16219
  store i8 1, i8* %retval, align 1, !dbg !16220
  br label %return, !dbg !16220

if.end442:                                        ; preds = %lor.lhs.false438
  store i8 0, i8* %retval, align 1, !dbg !16221
  br label %return, !dbg !16221

sw.bb443:                                         ; preds = %if.end16, %if.end16
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 3394, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !16222
  br label %sw.bb444, !dbg !16222

sw.bb444:                                         ; preds = %if.end16, %if.end16, %if.end16, %sw.bb443
  %186 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16223
  %base445 = bitcast %union.tree_node* %186 to %struct.tree_base*, !dbg !16223
  %187 = bitcast %struct.tree_base* %base445 to i64*, !dbg !16223
  %bf.load446 = load i64, i64* %187, align 8, !dbg !16223
  %bf.clear447 = and i64 %bf.load446, 65535, !dbg !16223
  %bf.cast448 = trunc i64 %bf.clear447 to i32, !dbg !16223
  %cmp449 = icmp eq i32 %bf.cast448, 6, !dbg !16223
  br i1 %cmp449, label %lor.lhs.false462, label %lor.lhs.false450, !dbg !16223

lor.lhs.false450:                                 ; preds = %sw.bb444
  %188 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16223
  %base451 = bitcast %union.tree_node* %188 to %struct.tree_base*, !dbg !16223
  %189 = bitcast %struct.tree_base* %base451 to i64*, !dbg !16223
  %bf.load452 = load i64, i64* %189, align 8, !dbg !16223
  %bf.clear453 = and i64 %bf.load452, 65535, !dbg !16223
  %bf.cast454 = trunc i64 %bf.clear453 to i32, !dbg !16223
  %cmp455 = icmp eq i32 %bf.cast454, 7, !dbg !16223
  br i1 %cmp455, label %lor.lhs.false462, label %lor.lhs.false456, !dbg !16223

lor.lhs.false456:                                 ; preds = %lor.lhs.false450
  %190 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16223
  %base457 = bitcast %union.tree_node* %190 to %struct.tree_base*, !dbg !16223
  %191 = bitcast %struct.tree_base* %base457 to i64*, !dbg !16223
  %bf.load458 = load i64, i64* %191, align 8, !dbg !16223
  %bf.clear459 = and i64 %bf.load458, 65535, !dbg !16223
  %bf.cast460 = trunc i64 %bf.clear459 to i32, !dbg !16223
  %cmp461 = icmp eq i32 %bf.cast460, 8, !dbg !16223
  br i1 %cmp461, label %lor.lhs.false462, label %if.then498, !dbg !16226

lor.lhs.false462:                                 ; preds = %lor.lhs.false456, %lor.lhs.false450, %sw.bb444
  %192 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16227
  %base463 = bitcast %union.tree_node* %192 to %struct.tree_base*, !dbg !16227
  %193 = bitcast %struct.tree_base* %base463 to i64*, !dbg !16227
  %bf.load464 = load i64, i64* %193, align 8, !dbg !16227
  %bf.clear465 = and i64 %bf.load464, 65535, !dbg !16227
  %bf.cast466 = trunc i64 %bf.clear465 to i32, !dbg !16227
  %cmp467 = icmp eq i32 %bf.cast466, 6, !dbg !16227
  br i1 %cmp467, label %lor.lhs.false480, label %lor.lhs.false468, !dbg !16227

lor.lhs.false468:                                 ; preds = %lor.lhs.false462
  %194 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16227
  %base469 = bitcast %union.tree_node* %194 to %struct.tree_base*, !dbg !16227
  %195 = bitcast %struct.tree_base* %base469 to i64*, !dbg !16227
  %bf.load470 = load i64, i64* %195, align 8, !dbg !16227
  %bf.clear471 = and i64 %bf.load470, 65535, !dbg !16227
  %bf.cast472 = trunc i64 %bf.clear471 to i32, !dbg !16227
  %cmp473 = icmp eq i32 %bf.cast472, 7, !dbg !16227
  br i1 %cmp473, label %lor.lhs.false480, label %lor.lhs.false474, !dbg !16227

lor.lhs.false474:                                 ; preds = %lor.lhs.false468
  %196 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16227
  %base475 = bitcast %union.tree_node* %196 to %struct.tree_base*, !dbg !16227
  %197 = bitcast %struct.tree_base* %base475 to i64*, !dbg !16227
  %bf.load476 = load i64, i64* %197, align 8, !dbg !16227
  %bf.clear477 = and i64 %bf.load476, 65535, !dbg !16227
  %bf.cast478 = trunc i64 %bf.clear477 to i32, !dbg !16227
  %cmp479 = icmp eq i32 %bf.cast478, 8, !dbg !16227
  br i1 %cmp479, label %lor.lhs.false480, label %if.then498, !dbg !16228

lor.lhs.false480:                                 ; preds = %lor.lhs.false474, %lor.lhs.false468, %lor.lhs.false462
  %198 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16229
  %base481 = bitcast %union.tree_node* %198 to %struct.tree_base*, !dbg !16229
  %199 = bitcast %struct.tree_base* %base481 to i64*, !dbg !16229
  %bf.load482 = load i64, i64* %199, align 8, !dbg !16229
  %bf.clear483 = and i64 %bf.load482, 65535, !dbg !16229
  %bf.cast484 = trunc i64 %bf.clear483 to i32, !dbg !16229
  %cmp485 = icmp eq i32 %bf.cast484, 6, !dbg !16229
  br i1 %cmp485, label %if.end499, label %lor.lhs.false486, !dbg !16229

lor.lhs.false486:                                 ; preds = %lor.lhs.false480
  %200 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16229
  %base487 = bitcast %union.tree_node* %200 to %struct.tree_base*, !dbg !16229
  %201 = bitcast %struct.tree_base* %base487 to i64*, !dbg !16229
  %bf.load488 = load i64, i64* %201, align 8, !dbg !16229
  %bf.clear489 = and i64 %bf.load488, 65535, !dbg !16229
  %bf.cast490 = trunc i64 %bf.clear489 to i32, !dbg !16229
  %cmp491 = icmp eq i32 %bf.cast490, 7, !dbg !16229
  br i1 %cmp491, label %if.end499, label %lor.lhs.false492, !dbg !16229

lor.lhs.false492:                                 ; preds = %lor.lhs.false486
  %202 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16229
  %base493 = bitcast %union.tree_node* %202 to %struct.tree_base*, !dbg !16229
  %203 = bitcast %struct.tree_base* %base493 to i64*, !dbg !16229
  %bf.load494 = load i64, i64* %203, align 8, !dbg !16229
  %bf.clear495 = and i64 %bf.load494, 65535, !dbg !16229
  %bf.cast496 = trunc i64 %bf.clear495 to i32, !dbg !16229
  %cmp497 = icmp eq i32 %bf.cast496, 8, !dbg !16229
  br i1 %cmp497, label %if.end499, label %if.then498, !dbg !16230

if.then498:                                       ; preds = %lor.lhs.false492, %lor.lhs.false474, %lor.lhs.false456
  call void (i8*, ...) @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.98, i64 0, i64 0)), !dbg !16231
  %204 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16233
  call void @debug_generic_expr(%union.tree_node* %204), !dbg !16234
  %205 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16235
  call void @debug_generic_expr(%union.tree_node* %205), !dbg !16236
  %206 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16237
  call void @debug_generic_expr(%union.tree_node* %206), !dbg !16238
  store i8 1, i8* %retval, align 1, !dbg !16239
  br label %return, !dbg !16239

if.end499:                                        ; preds = %lor.lhs.false492, %lor.lhs.false486, %lor.lhs.false480
  store i8 0, i8* %retval, align 1, !dbg !16240
  br label %return, !dbg !16240

sw.bb500:                                         ; preds = %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16
  %207 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16241
  %208 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !16242
  %209 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !16243
  %call501 = call zeroext i8 @verify_gimple_comparison(%union.tree_node* %207, %union.tree_node* %208, %union.tree_node* %209), !dbg !16244
  store i8 %call501, i8* %retval, align 1, !dbg !16245
  br label %return, !dbg !16245

sw.bb502:                                         ; preds = %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16
  store i8 0, i8* %retval, align 1, !dbg !16246
  br label %return, !dbg !16246

sw.bb503:                                         ; preds = %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16, %if.end16
  br label %sw.epilog, !dbg !16247

sw.default:                                       ; preds = %if.end16
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 3467, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !16248
  br label %sw.epilog, !dbg !16249

sw.epilog:                                        ; preds = %sw.default, %sw.bb503, %if.end422
  %210 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16250
  %211 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16252
  %call504 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %210, %union.tree_node* %211), !dbg !16253
  %tobool505 = icmp ne i8 %call504, 0, !dbg !16253
  br i1 %tobool505, label %lor.lhs.false506, label %if.then509, !dbg !16254

lor.lhs.false506:                                 ; preds = %sw.epilog
  %212 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16255
  %213 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16256
  %call507 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %212, %union.tree_node* %213), !dbg !16257
  %tobool508 = icmp ne i8 %call507, 0, !dbg !16257
  br i1 %tobool508, label %if.end510, label %if.then509, !dbg !16258

if.then509:                                       ; preds = %lor.lhs.false506, %sw.epilog
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.99, i64 0, i64 0)), !dbg !16259
  %214 = load %union.tree_node*, %union.tree_node** %lhs_type, align 8, !dbg !16261
  call void @debug_generic_stmt(%union.tree_node* %214), !dbg !16262
  %215 = load %union.tree_node*, %union.tree_node** %rhs1_type, align 8, !dbg !16263
  call void @debug_generic_stmt(%union.tree_node* %215), !dbg !16264
  %216 = load %union.tree_node*, %union.tree_node** %rhs2_type, align 8, !dbg !16265
  call void @debug_generic_stmt(%union.tree_node* %216), !dbg !16266
  store i8 1, i8* %retval, align 1, !dbg !16267
  br label %return, !dbg !16267

if.end510:                                        ; preds = %lor.lhs.false506
  store i8 0, i8* %retval, align 1, !dbg !16268
  br label %return, !dbg !16268

return:                                           ; preds = %if.end510, %if.then509, %sw.bb502, %sw.bb500, %if.end499, %if.then498, %if.end442, %if.then441, %if.then421, %if.then363, %if.end328, %if.then327, %if.then306, %if.end208, %if.then207, %if.end71, %if.then70, %if.then15, %if.then
  %217 = load i8, i8* %retval, align 1, !dbg !16269
  ret i8 %217, !dbg !16269
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !16270 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !16273, metadata !DIExpression()), !dbg !16274
  %0 = load i32, i32* %code.addr, align 4, !dbg !16275
  %idxprom = sext i32 %0 to i64, !dbg !16276
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !16276
  %1 = load i8, i8* %arrayidx, align 1, !dbg !16276
  %conv = zext i8 %1 to i32, !dbg !16277
  ret i32 %conv, !dbg !16278
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !16279 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !16280, metadata !DIExpression()), !dbg !16281
  call void @llvm.dbg.declare(metadata i32* %code, metadata !16282, metadata !DIExpression()), !dbg !16283
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16284
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !16285
  store i32 %call, i32* %code, align 4, !dbg !16286
  %1 = load i32, i32* %code, align 4, !dbg !16287
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !16289
  %cmp = icmp eq i32 %call1, 3, !dbg !16290
  br i1 %cmp, label %if.then, label %if.end, !dbg !16291

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16292
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !16292
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !16292
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !16292
  %bf.load = load i64, i64* %3, align 8, !dbg !16292
  %bf.clear = and i64 %bf.load, 65535, !dbg !16292
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !16292
  store i32 %bf.cast, i32* %code, align 4, !dbg !16293
  br label %if.end, !dbg !16294

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !16295
  ret i32 %4, !dbg !16296
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !16297 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !16298, metadata !DIExpression()), !dbg !16299
  call void @llvm.dbg.declare(metadata i32* %code, metadata !16300, metadata !DIExpression()), !dbg !16301
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16302
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !16303
  store i32 %call, i32* %code, align 4, !dbg !16301
  %1 = load i32, i32* %code, align 4, !dbg !16304
  %cmp = icmp eq i32 %1, 6, !dbg !16306
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !16307

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !16308
  %cmp1 = icmp eq i32 %2, 1, !dbg !16309
  br i1 %cmp1, label %if.then, label %if.else, !dbg !16310

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16311
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !16312
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !16313
  %bf.load = load i32, i32* %4, align 8, !dbg !16313
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !16313
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !16314
  br label %return, !dbg !16314

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !16315
  %cmp2 = icmp eq i32 %5, 8, !dbg !16317
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !16318

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !16319
  br label %return, !dbg !16319

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.64, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !16320
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !16321
  br label %return, !dbg !16321

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !16322
  ret i32 %6, !dbg !16322
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !16323 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !16324, metadata !DIExpression()), !dbg !16325
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16326
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !16327
  ret %union.tree_node* %call, !dbg !16328
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !16329 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !16330, metadata !DIExpression()), !dbg !16331
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16332
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !16333
  ret %union.tree_node* %call, !dbg !16334
}

declare dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !16335 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !16336, metadata !DIExpression()), !dbg !16337
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !16338
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !16338
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !16338
  %bf.load = load i64, i64* %1, align 8, !dbg !16338
  %bf.clear = and i64 %bf.load, 65535, !dbg !16338
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !16338
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !16339

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !16340
  br label %return, !dbg !16340

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !16342
  br label %return, !dbg !16342

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !16343
  ret i8 %2, !dbg !16343
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_types_in_gimple_reference(%union.tree_node* %expr, i8 zeroext %require_lvalue) #0 !dbg !16344 {
entry:
  %retval = alloca i8, align 1
  %expr.addr = alloca %union.tree_node*, align 8
  %require_lvalue.addr = alloca i8, align 1
  %op = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !16347, metadata !DIExpression()), !dbg !16348
  store i8 %require_lvalue, i8* %require_lvalue.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %require_lvalue.addr, metadata !16349, metadata !DIExpression()), !dbg !16350
  br label %while.cond, !dbg !16351

while.cond:                                       ; preds = %if.end156, %entry
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16352
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %0), !dbg !16353
  %tobool = icmp ne i8 %call, 0, !dbg !16351
  br i1 %tobool, label %while.body, label %while.end, !dbg !16351

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !16354, metadata !DIExpression()), !dbg !16356
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16357
  %exp = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !16357
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !16357
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !16357
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !16357
  store %union.tree_node* %2, %union.tree_node** %op, align 8, !dbg !16356
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16358
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !16358
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !16358
  %bf.load = load i64, i64* %4, align 8, !dbg !16358
  %bf.clear = and i64 %bf.load, 65535, !dbg !16358
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !16358
  %cmp = icmp eq i32 %bf.cast, 45, !dbg !16360
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !16361

lor.lhs.false:                                    ; preds = %while.body
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16362
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !16362
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !16362
  %bf.load2 = load i64, i64* %6, align 8, !dbg !16362
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !16362
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !16362
  %cmp5 = icmp eq i32 %bf.cast4, 46, !dbg !16363
  br i1 %cmp5, label %if.then, label %if.end33, !dbg !16364

if.then:                                          ; preds = %lor.lhs.false, %while.body
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16365
  %exp6 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !16365
  %operands7 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6, i32 0, i32 3, !dbg !16365
  %arrayidx8 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands7, i64 0, i64 1, !dbg !16365
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx8, align 8, !dbg !16365
  %call9 = call zeroext i8 @is_gimple_val(%union.tree_node* %8), !dbg !16368
  %tobool10 = icmp ne i8 %call9, 0, !dbg !16368
  br i1 %tobool10, label %lor.lhs.false11, label %if.then32, !dbg !16369

lor.lhs.false11:                                  ; preds = %if.then
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16370
  %exp12 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !16370
  %operands13 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 3, !dbg !16370
  %arrayidx14 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands13, i64 0, i64 2, !dbg !16370
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx14, align 8, !dbg !16370
  %tobool15 = icmp ne %union.tree_node* %10, null, !dbg !16370
  br i1 %tobool15, label %land.lhs.true, label %lor.lhs.false21, !dbg !16371

land.lhs.true:                                    ; preds = %lor.lhs.false11
  %11 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16372
  %exp16 = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !16372
  %operands17 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp16, i32 0, i32 3, !dbg !16372
  %arrayidx18 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands17, i64 0, i64 2, !dbg !16372
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx18, align 8, !dbg !16372
  %call19 = call zeroext i8 @is_gimple_val(%union.tree_node* %12), !dbg !16373
  %tobool20 = icmp ne i8 %call19, 0, !dbg !16373
  br i1 %tobool20, label %lor.lhs.false21, label %if.then32, !dbg !16374

lor.lhs.false21:                                  ; preds = %land.lhs.true, %lor.lhs.false11
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16375
  %exp22 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !16375
  %operands23 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp22, i32 0, i32 3, !dbg !16375
  %arrayidx24 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands23, i64 0, i64 3, !dbg !16375
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx24, align 8, !dbg !16375
  %tobool25 = icmp ne %union.tree_node* %14, null, !dbg !16375
  br i1 %tobool25, label %land.lhs.true26, label %if.end, !dbg !16376

land.lhs.true26:                                  ; preds = %lor.lhs.false21
  %15 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16377
  %exp27 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !16377
  %operands28 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp27, i32 0, i32 3, !dbg !16377
  %arrayidx29 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands28, i64 0, i64 3, !dbg !16377
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx29, align 8, !dbg !16377
  %call30 = call zeroext i8 @is_gimple_val(%union.tree_node* %16), !dbg !16378
  %tobool31 = icmp ne i8 %call30, 0, !dbg !16378
  br i1 %tobool31, label %if.end, label %if.then32, !dbg !16379

if.then32:                                        ; preds = %land.lhs.true26, %land.lhs.true, %if.then
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.72, i64 0, i64 0)), !dbg !16380
  %17 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16382
  call void @debug_generic_stmt(%union.tree_node* %17), !dbg !16383
  store i8 1, i8* %retval, align 1, !dbg !16384
  br label %return, !dbg !16384

if.end:                                           ; preds = %land.lhs.true26, %lor.lhs.false21
  br label %if.end33, !dbg !16385

if.end33:                                         ; preds = %if.end, %lor.lhs.false
  %18 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16386
  %base34 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !16386
  %19 = bitcast %struct.tree_base* %base34 to i64*, !dbg !16386
  %bf.load35 = load i64, i64* %19, align 8, !dbg !16386
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !16386
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !16386
  %cmp38 = icmp eq i32 %bf.cast37, 45, !dbg !16388
  br i1 %cmp38, label %land.lhs.true39, label %if.end53, !dbg !16389

land.lhs.true39:                                  ; preds = %if.end33
  %20 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16390
  %common = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !16390
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !16390
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !16390
  %22 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !16391
  %common40 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !16391
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !16391
  %23 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !16391
  %common42 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !16391
  %type43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 2, !dbg !16391
  %24 = load %union.tree_node*, %union.tree_node** %type43, align 8, !dbg !16391
  %call44 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %21, %union.tree_node* %24), !dbg !16392
  %tobool45 = icmp ne i8 %call44, 0, !dbg !16392
  br i1 %tobool45, label %if.end53, label %if.then46, !dbg !16393

if.then46:                                        ; preds = %land.lhs.true39
  call void (i8*, ...) @error(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.73, i64 0, i64 0)), !dbg !16394
  %25 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16396
  %common47 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !16396
  %type48 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common47, i32 0, i32 2, !dbg !16396
  %26 = load %union.tree_node*, %union.tree_node** %type48, align 8, !dbg !16396
  call void @debug_generic_stmt(%union.tree_node* %26), !dbg !16397
  %27 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !16398
  %common49 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !16398
  %type50 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common49, i32 0, i32 2, !dbg !16398
  %28 = load %union.tree_node*, %union.tree_node** %type50, align 8, !dbg !16398
  %common51 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !16398
  %type52 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common51, i32 0, i32 2, !dbg !16398
  %29 = load %union.tree_node*, %union.tree_node** %type52, align 8, !dbg !16398
  call void @debug_generic_stmt(%union.tree_node* %29), !dbg !16399
  store i8 1, i8* %retval, align 1, !dbg !16400
  br label %return, !dbg !16400

if.end53:                                         ; preds = %land.lhs.true39, %if.end33
  %30 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16401
  %base54 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !16401
  %31 = bitcast %struct.tree_base* %base54 to i64*, !dbg !16401
  %bf.load55 = load i64, i64* %31, align 8, !dbg !16401
  %bf.clear56 = and i64 %bf.load55, 65535, !dbg !16401
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !16401
  %cmp58 = icmp eq i32 %bf.cast57, 46, !dbg !16403
  br i1 %cmp58, label %land.lhs.true59, label %if.end79, !dbg !16404

land.lhs.true59:                                  ; preds = %if.end53
  %32 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16405
  %common60 = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !16405
  %type61 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common60, i32 0, i32 2, !dbg !16405
  %33 = load %union.tree_node*, %union.tree_node** %type61, align 8, !dbg !16405
  %common62 = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !16405
  %type63 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common62, i32 0, i32 2, !dbg !16405
  %34 = load %union.tree_node*, %union.tree_node** %type63, align 8, !dbg !16405
  %35 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !16406
  %common64 = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !16406
  %type65 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common64, i32 0, i32 2, !dbg !16406
  %36 = load %union.tree_node*, %union.tree_node** %type65, align 8, !dbg !16406
  %common66 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !16406
  %type67 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common66, i32 0, i32 2, !dbg !16406
  %37 = load %union.tree_node*, %union.tree_node** %type67, align 8, !dbg !16406
  %call68 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %34, %union.tree_node* %37), !dbg !16407
  %tobool69 = icmp ne i8 %call68, 0, !dbg !16407
  br i1 %tobool69, label %if.end79, label %if.then70, !dbg !16408

if.then70:                                        ; preds = %land.lhs.true59
  call void (i8*, ...) @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.74, i64 0, i64 0)), !dbg !16409
  %38 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16411
  %common71 = bitcast %union.tree_node* %38 to %struct.tree_common*, !dbg !16411
  %type72 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common71, i32 0, i32 2, !dbg !16411
  %39 = load %union.tree_node*, %union.tree_node** %type72, align 8, !dbg !16411
  %common73 = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !16411
  %type74 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common73, i32 0, i32 2, !dbg !16411
  %40 = load %union.tree_node*, %union.tree_node** %type74, align 8, !dbg !16411
  call void @debug_generic_stmt(%union.tree_node* %40), !dbg !16412
  %41 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !16413
  %common75 = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !16413
  %type76 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common75, i32 0, i32 2, !dbg !16413
  %42 = load %union.tree_node*, %union.tree_node** %type76, align 8, !dbg !16413
  %common77 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !16413
  %type78 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common77, i32 0, i32 2, !dbg !16413
  %43 = load %union.tree_node*, %union.tree_node** %type78, align 8, !dbg !16413
  call void @debug_generic_stmt(%union.tree_node* %43), !dbg !16414
  store i8 1, i8* %retval, align 1, !dbg !16415
  br label %return, !dbg !16415

if.end79:                                         ; preds = %land.lhs.true59, %if.end53
  %44 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16416
  %base80 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !16416
  %45 = bitcast %struct.tree_base* %base80 to i64*, !dbg !16416
  %bf.load81 = load i64, i64* %45, align 8, !dbg !16416
  %bf.clear82 = and i64 %bf.load81, 65535, !dbg !16416
  %bf.cast83 = trunc i64 %bf.clear82 to i32, !dbg !16416
  %cmp84 = icmp eq i32 %bf.cast83, 43, !dbg !16418
  br i1 %cmp84, label %land.lhs.true91, label %lor.lhs.false85, !dbg !16419

lor.lhs.false85:                                  ; preds = %if.end79
  %46 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16420
  %base86 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !16420
  %47 = bitcast %struct.tree_base* %base86 to i64*, !dbg !16420
  %bf.load87 = load i64, i64* %47, align 8, !dbg !16420
  %bf.clear88 = and i64 %bf.load87, 65535, !dbg !16420
  %bf.cast89 = trunc i64 %bf.clear88 to i32, !dbg !16420
  %cmp90 = icmp eq i32 %bf.cast89, 44, !dbg !16421
  br i1 %cmp90, label %land.lhs.true91, label %if.end107, !dbg !16422

land.lhs.true91:                                  ; preds = %lor.lhs.false85, %if.end79
  %48 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16423
  %common92 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !16423
  %type93 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common92, i32 0, i32 2, !dbg !16423
  %49 = load %union.tree_node*, %union.tree_node** %type93, align 8, !dbg !16423
  %50 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !16424
  %common94 = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !16424
  %type95 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common94, i32 0, i32 2, !dbg !16424
  %51 = load %union.tree_node*, %union.tree_node** %type95, align 8, !dbg !16424
  %common96 = bitcast %union.tree_node* %51 to %struct.tree_common*, !dbg !16424
  %type97 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common96, i32 0, i32 2, !dbg !16424
  %52 = load %union.tree_node*, %union.tree_node** %type97, align 8, !dbg !16424
  %call98 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %49, %union.tree_node* %52), !dbg !16425
  %tobool99 = icmp ne i8 %call98, 0, !dbg !16425
  br i1 %tobool99, label %if.end107, label %if.then100, !dbg !16426

if.then100:                                       ; preds = %land.lhs.true91
  call void (i8*, ...) @error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.75, i64 0, i64 0)), !dbg !16427
  %53 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16429
  %common101 = bitcast %union.tree_node* %53 to %struct.tree_common*, !dbg !16429
  %type102 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common101, i32 0, i32 2, !dbg !16429
  %54 = load %union.tree_node*, %union.tree_node** %type102, align 8, !dbg !16429
  call void @debug_generic_stmt(%union.tree_node* %54), !dbg !16430
  %55 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !16431
  %common103 = bitcast %union.tree_node* %55 to %struct.tree_common*, !dbg !16431
  %type104 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common103, i32 0, i32 2, !dbg !16431
  %56 = load %union.tree_node*, %union.tree_node** %type104, align 8, !dbg !16431
  %common105 = bitcast %union.tree_node* %56 to %struct.tree_common*, !dbg !16431
  %type106 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common105, i32 0, i32 2, !dbg !16431
  %57 = load %union.tree_node*, %union.tree_node** %type106, align 8, !dbg !16431
  call void @debug_generic_stmt(%union.tree_node* %57), !dbg !16432
  store i8 1, i8* %retval, align 1, !dbg !16433
  br label %return, !dbg !16433

if.end107:                                        ; preds = %land.lhs.true91, %lor.lhs.false85
  %58 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16434
  %base108 = bitcast %union.tree_node* %58 to %struct.tree_base*, !dbg !16434
  %59 = bitcast %struct.tree_base* %base108 to i64*, !dbg !16434
  %bf.load109 = load i64, i64* %59, align 8, !dbg !16434
  %bf.clear110 = and i64 %bf.load109, 65535, !dbg !16434
  %bf.cast111 = trunc i64 %bf.clear110 to i32, !dbg !16434
  %cmp112 = icmp eq i32 %bf.cast111, 41, !dbg !16436
  br i1 %cmp112, label %land.lhs.true113, label %if.end131, !dbg !16437

land.lhs.true113:                                 ; preds = %if.end107
  %60 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16438
  %common114 = bitcast %union.tree_node* %60 to %struct.tree_common*, !dbg !16438
  %type115 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common114, i32 0, i32 2, !dbg !16438
  %61 = load %union.tree_node*, %union.tree_node** %type115, align 8, !dbg !16438
  %62 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16439
  %exp116 = bitcast %union.tree_node* %62 to %struct.tree_exp*, !dbg !16439
  %operands117 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp116, i32 0, i32 3, !dbg !16439
  %arrayidx118 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands117, i64 0, i64 1, !dbg !16439
  %63 = load %union.tree_node*, %union.tree_node** %arrayidx118, align 8, !dbg !16439
  %common119 = bitcast %union.tree_node* %63 to %struct.tree_common*, !dbg !16439
  %type120 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common119, i32 0, i32 2, !dbg !16439
  %64 = load %union.tree_node*, %union.tree_node** %type120, align 8, !dbg !16439
  %call121 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %61, %union.tree_node* %64), !dbg !16440
  %tobool122 = icmp ne i8 %call121, 0, !dbg !16440
  br i1 %tobool122, label %if.end131, label %if.then123, !dbg !16441

if.then123:                                       ; preds = %land.lhs.true113
  call void (i8*, ...) @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.76, i64 0, i64 0)), !dbg !16442
  %65 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16444
  %common124 = bitcast %union.tree_node* %65 to %struct.tree_common*, !dbg !16444
  %type125 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common124, i32 0, i32 2, !dbg !16444
  %66 = load %union.tree_node*, %union.tree_node** %type125, align 8, !dbg !16444
  call void @debug_generic_stmt(%union.tree_node* %66), !dbg !16445
  %67 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16446
  %exp126 = bitcast %union.tree_node* %67 to %struct.tree_exp*, !dbg !16446
  %operands127 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp126, i32 0, i32 3, !dbg !16446
  %arrayidx128 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands127, i64 0, i64 1, !dbg !16446
  %68 = load %union.tree_node*, %union.tree_node** %arrayidx128, align 8, !dbg !16446
  %common129 = bitcast %union.tree_node* %68 to %struct.tree_common*, !dbg !16446
  %type130 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common129, i32 0, i32 2, !dbg !16446
  %69 = load %union.tree_node*, %union.tree_node** %type130, align 8, !dbg !16446
  call void @debug_generic_stmt(%union.tree_node* %69), !dbg !16447
  store i8 1, i8* %retval, align 1, !dbg !16448
  br label %return, !dbg !16448

if.end131:                                        ; preds = %land.lhs.true113, %if.end107
  %70 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16449
  %base132 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !16449
  %71 = bitcast %struct.tree_base* %base132 to i64*, !dbg !16449
  %bf.load133 = load i64, i64* %71, align 8, !dbg !16449
  %bf.clear134 = and i64 %bf.load133, 65535, !dbg !16449
  %bf.cast135 = trunc i64 %bf.clear134 to i32, !dbg !16449
  %cmp136 = icmp eq i32 %bf.cast135, 118, !dbg !16451
  br i1 %cmp136, label %if.then137, label %if.end156, !dbg !16452

if.then137:                                       ; preds = %if.end131
  %72 = load i8, i8* %require_lvalue.addr, align 1, !dbg !16453
  %conv = zext i8 %72 to i32, !dbg !16453
  %tobool138 = icmp ne i32 %conv, 0, !dbg !16453
  br i1 %tobool138, label %land.lhs.true139, label %if.else, !dbg !16456

land.lhs.true139:                                 ; preds = %if.then137
  %73 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !16457
  %base140 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !16457
  %74 = bitcast %struct.tree_base* %base140 to i64*, !dbg !16457
  %bf.load141 = load i64, i64* %74, align 8, !dbg !16457
  %bf.clear142 = and i64 %bf.load141, 65535, !dbg !16457
  %bf.cast143 = trunc i64 %bf.clear142 to i32, !dbg !16457
  %cmp144 = icmp eq i32 %bf.cast143, 141, !dbg !16458
  br i1 %cmp144, label %if.then150, label %lor.lhs.false146, !dbg !16459

lor.lhs.false146:                                 ; preds = %land.lhs.true139
  %75 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !16460
  %call147 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %75), !dbg !16461
  %conv148 = zext i8 %call147 to i32, !dbg !16461
  %tobool149 = icmp ne i32 %conv148, 0, !dbg !16461
  br i1 %tobool149, label %if.then150, label %if.else, !dbg !16462

if.then150:                                       ; preds = %lor.lhs.false146, %land.lhs.true139
  call void (i8*, ...) @error(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.77, i64 0, i64 0)), !dbg !16463
  %76 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16465
  call void @debug_generic_stmt(%union.tree_node* %76), !dbg !16466
  store i8 1, i8* %retval, align 1, !dbg !16467
  br label %return, !dbg !16467

if.else:                                          ; preds = %lor.lhs.false146, %if.then137
  %77 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !16468
  %call151 = call zeroext i8 @handled_component_p(%union.tree_node* %77), !dbg !16470
  %tobool152 = icmp ne i8 %call151, 0, !dbg !16470
  br i1 %tobool152, label %if.end154, label %if.then153, !dbg !16471

if.then153:                                       ; preds = %if.else
  store i8 0, i8* %retval, align 1, !dbg !16472
  br label %return, !dbg !16472

if.end154:                                        ; preds = %if.else
  br label %if.end155

if.end155:                                        ; preds = %if.end154
  br label %if.end156, !dbg !16473

if.end156:                                        ; preds = %if.end155, %if.end131
  %78 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !16474
  store %union.tree_node* %78, %union.tree_node** %expr.addr, align 8, !dbg !16475
  br label %while.cond, !dbg !16351, !llvm.loop !16476

while.end:                                        ; preds = %while.cond
  %79 = load i8, i8* %require_lvalue.addr, align 1, !dbg !16478
  %conv157 = zext i8 %79 to i32, !dbg !16478
  %tobool158 = icmp ne i32 %conv157, 0, !dbg !16478
  br i1 %tobool158, label %land.rhs, label %lor.lhs.false159, !dbg !16479

lor.lhs.false159:                                 ; preds = %while.end
  %80 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16480
  %call160 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %80), !dbg !16481
  %tobool161 = icmp ne i8 %call160, 0, !dbg !16481
  br i1 %tobool161, label %land.end, label %land.rhs, !dbg !16482

land.rhs:                                         ; preds = %lor.lhs.false159, %while.end
  %81 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16483
  %call162 = call zeroext i8 @verify_types_in_gimple_min_lval(%union.tree_node* %81), !dbg !16484
  %conv163 = zext i8 %call162 to i32, !dbg !16484
  %tobool164 = icmp ne i32 %conv163, 0, !dbg !16482
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false159
  %82 = phi i1 [ false, %lor.lhs.false159 ], [ %tobool164, %land.rhs ], !dbg !16485
  %land.ext = zext i1 %82 to i32, !dbg !16482
  %conv165 = trunc i32 %land.ext to i8, !dbg !16486
  store i8 %conv165, i8* %retval, align 1, !dbg !16487
  br label %return, !dbg !16487

return:                                           ; preds = %land.end, %if.then153, %if.then150, %if.then123, %if.then100, %if.then70, %if.then46, %if.then32
  %83 = load i8, i8* %retval, align 1, !dbg !16488
  ret i8 %83, !dbg !16488
}

declare dso_local zeroext i8 @is_gimple_addressable(%union.tree_node*) #2

declare dso_local zeroext i8 @types_compatible_p(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @one_pointer_to_useless_type_conversion_p(%union.tree_node* %dest, %union.tree_node* %src_obj) #0 !dbg !16489 {
entry:
  %retval = alloca i8, align 1
  %dest.addr = alloca %union.tree_node*, align 8
  %src_obj.addr = alloca %union.tree_node*, align 8
  %src = alloca %union.tree_node*, align 8
  store %union.tree_node* %dest, %union.tree_node** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest.addr, metadata !16492, metadata !DIExpression()), !dbg !16493
  store %union.tree_node* %src_obj, %union.tree_node** %src_obj.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %src_obj.addr, metadata !16494, metadata !DIExpression()), !dbg !16495
  call void @llvm.dbg.declare(metadata %union.tree_node** %src, metadata !16496, metadata !DIExpression()), !dbg !16497
  %0 = load %union.tree_node*, %union.tree_node** %src_obj.addr, align 8, !dbg !16498
  %type = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !16498
  %pointer_to = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 9, !dbg !16498
  %1 = load %union.tree_node*, %union.tree_node** %pointer_to, align 8, !dbg !16498
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !16498
  br i1 %tobool, label %if.end, label %if.then, !dbg !16500

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !16501
  br label %return, !dbg !16501

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %src_obj.addr, align 8, !dbg !16502
  %type1 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !16502
  %pointer_to2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 9, !dbg !16502
  %3 = load %union.tree_node*, %union.tree_node** %pointer_to2, align 8, !dbg !16502
  store %union.tree_node* %3, %union.tree_node** %src, align 8, !dbg !16504
  br label %for.cond, !dbg !16505

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load %union.tree_node*, %union.tree_node** %src, align 8, !dbg !16506
  %tobool3 = icmp ne %union.tree_node* %4, null, !dbg !16508
  br i1 %tobool3, label %for.body, label %for.end, !dbg !16508

for.body:                                         ; preds = %for.cond
  %5 = load %union.tree_node*, %union.tree_node** %dest.addr, align 8, !dbg !16509
  %6 = load %union.tree_node*, %union.tree_node** %src, align 8, !dbg !16511
  %call = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %5, %union.tree_node* %6), !dbg !16512
  %tobool4 = icmp ne i8 %call, 0, !dbg !16512
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !16513

if.then5:                                         ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !16514
  br label %return, !dbg !16514

if.end6:                                          ; preds = %for.body
  br label %for.inc, !dbg !16515

for.inc:                                          ; preds = %if.end6
  %7 = load %union.tree_node*, %union.tree_node** %src, align 8, !dbg !16516
  %type7 = bitcast %union.tree_node* %7 to %struct.tree_type*, !dbg !16516
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type7, i32 0, i32 13, !dbg !16516
  %8 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !16516
  store %union.tree_node* %8, %union.tree_node** %src, align 8, !dbg !16517
  br label %for.cond, !dbg !16518, !llvm.loop !16519

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !16521
  br label %return, !dbg !16521

return:                                           ; preds = %for.end, %if.then5, %if.then
  %9 = load i8, i8* %retval, align 1, !dbg !16522
  ret i8 %9, !dbg !16522
}

declare dso_local void @debug_generic_stmt(%union.tree_node*) #2

declare dso_local zeroext i8 @is_gimple_val(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @verify_types_in_gimple_min_lval(%union.tree_node* %expr) #0 !dbg !16523 {
entry:
  %retval = alloca i8, align 1
  %expr.addr = alloca %union.tree_node*, align 8
  %op = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !16524, metadata !DIExpression()), !dbg !16525
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !16526, metadata !DIExpression()), !dbg !16527
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16528
  %call = call zeroext i8 @is_gimple_id(%union.tree_node* %0), !dbg !16530
  %tobool = icmp ne i8 %call, 0, !dbg !16530
  br i1 %tobool, label %if.then, label %if.end, !dbg !16531

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !16532
  br label %return, !dbg !16532

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16533
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !16533
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !16533
  %bf.load = load i64, i64* %2, align 8, !dbg !16533
  %bf.clear = and i64 %bf.load, 65535, !dbg !16533
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !16533
  %cmp = icmp eq i32 %bf.cast, 47, !dbg !16533
  br i1 %cmp, label %if.end18, label %lor.lhs.false, !dbg !16533

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16533
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !16533
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !16533
  %bf.load2 = load i64, i64* %4, align 8, !dbg !16533
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !16533
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !16533
  %cmp5 = icmp eq i32 %bf.cast4, 48, !dbg !16533
  br i1 %cmp5, label %if.end18, label %lor.lhs.false6, !dbg !16533

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16533
  %base7 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !16533
  %6 = bitcast %struct.tree_base* %base7 to i64*, !dbg !16533
  %bf.load8 = load i64, i64* %6, align 8, !dbg !16533
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !16533
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !16533
  %cmp11 = icmp eq i32 %bf.cast10, 49, !dbg !16533
  br i1 %cmp11, label %if.end18, label %land.lhs.true, !dbg !16535

land.lhs.true:                                    ; preds = %lor.lhs.false6
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16536
  %base12 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !16536
  %8 = bitcast %struct.tree_base* %base12 to i64*, !dbg !16536
  %bf.load13 = load i64, i64* %8, align 8, !dbg !16536
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !16536
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !16536
  %cmp16 = icmp ne i32 %bf.cast15, 152, !dbg !16537
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !16538

if.then17:                                        ; preds = %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.78, i64 0, i64 0)), !dbg !16539
  store i8 1, i8* %retval, align 1, !dbg !16541
  br label %return, !dbg !16541

if.end18:                                         ; preds = %land.lhs.true, %lor.lhs.false6, %lor.lhs.false, %if.end
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16542
  %base19 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !16542
  %10 = bitcast %struct.tree_base* %base19 to i64*, !dbg !16542
  %bf.load20 = load i64, i64* %10, align 8, !dbg !16542
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !16542
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !16542
  %cmp23 = icmp eq i32 %bf.cast22, 152, !dbg !16544
  br i1 %cmp23, label %if.then24, label %if.end25, !dbg !16545

if.then24:                                        ; preds = %if.end18
  store i8 0, i8* %retval, align 1, !dbg !16546
  br label %return, !dbg !16546

if.end25:                                         ; preds = %if.end18
  %11 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16547
  %exp = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !16547
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !16547
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !16547
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !16547
  store %union.tree_node* %12, %union.tree_node** %op, align 8, !dbg !16548
  %13 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !16549
  %call26 = call zeroext i8 @is_gimple_val(%union.tree_node* %13), !dbg !16551
  %tobool27 = icmp ne i8 %call26, 0, !dbg !16551
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !16552

if.then28:                                        ; preds = %if.end25
  call void (i8*, ...) @error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.79, i64 0, i64 0)), !dbg !16553
  %14 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !16555
  call void @debug_generic_stmt(%union.tree_node* %14), !dbg !16556
  store i8 1, i8* %retval, align 1, !dbg !16557
  br label %return, !dbg !16557

if.end29:                                         ; preds = %if.end25
  %15 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16558
  %common = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !16558
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !16558
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !16558
  %17 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !16560
  %common30 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !16560
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !16560
  %18 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !16560
  %common32 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !16560
  %type33 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common32, i32 0, i32 2, !dbg !16560
  %19 = load %union.tree_node*, %union.tree_node** %type33, align 8, !dbg !16560
  %call34 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %16, %union.tree_node* %19), !dbg !16561
  %tobool35 = icmp ne i8 %call34, 0, !dbg !16561
  br i1 %tobool35, label %if.end43, label %if.then36, !dbg !16562

if.then36:                                        ; preds = %if.end29
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.80, i64 0, i64 0)), !dbg !16563
  %20 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !16565
  %common37 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !16565
  %type38 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common37, i32 0, i32 2, !dbg !16565
  %21 = load %union.tree_node*, %union.tree_node** %type38, align 8, !dbg !16565
  call void @debug_generic_stmt(%union.tree_node* %21), !dbg !16566
  %22 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !16567
  %common39 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !16567
  %type40 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 2, !dbg !16567
  %23 = load %union.tree_node*, %union.tree_node** %type40, align 8, !dbg !16567
  %common41 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !16567
  %type42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 2, !dbg !16567
  %24 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !16567
  call void @debug_generic_stmt(%union.tree_node* %24), !dbg !16568
  store i8 1, i8* %retval, align 1, !dbg !16569
  br label %return, !dbg !16569

if.end43:                                         ; preds = %if.end29
  store i8 0, i8* %retval, align 1, !dbg !16570
  br label %return, !dbg !16570

return:                                           ; preds = %if.end43, %if.then36, %if.then28, %if.then24, %if.then17, %if.then
  %25 = load i8, i8* %retval, align 1, !dbg !16571
  ret i8 %25, !dbg !16571
}

declare dso_local zeroext i8 @is_gimple_id(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @valid_fixed_convert_types_p(%union.tree_node* %type1, %union.tree_node* %type2) #0 !dbg !16572 {
entry:
  %type1.addr = alloca %union.tree_node*, align 8
  %type2.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type1, %union.tree_node** %type1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type1.addr, metadata !16573, metadata !DIExpression()), !dbg !16574
  store %union.tree_node* %type2, %union.tree_node** %type2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type2.addr, metadata !16575, metadata !DIExpression()), !dbg !16576
  %0 = load %union.tree_node*, %union.tree_node** %type1.addr, align 8, !dbg !16577
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !16577
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !16577
  %bf.load = load i64, i64* %1, align 8, !dbg !16577
  %bf.clear = and i64 %bf.load, 65535, !dbg !16577
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !16577
  %cmp = icmp eq i32 %bf.cast, 11, !dbg !16577
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !16578

land.rhs:                                         ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !16579
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !16579
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !16579
  %bf.load2 = load i64, i64* %3, align 8, !dbg !16579
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !16579
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !16579
  %cmp5 = icmp eq i32 %bf.cast4, 6, !dbg !16579
  br i1 %cmp5, label %lor.end, label %lor.lhs.false, !dbg !16579

lor.lhs.false:                                    ; preds = %land.rhs
  %4 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !16579
  %base6 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !16579
  %5 = bitcast %struct.tree_base* %base6 to i64*, !dbg !16579
  %bf.load7 = load i64, i64* %5, align 8, !dbg !16579
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !16579
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !16579
  %cmp10 = icmp eq i32 %bf.cast9, 7, !dbg !16579
  br i1 %cmp10, label %lor.end, label %lor.lhs.false11, !dbg !16579

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !16579
  %base12 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !16579
  %7 = bitcast %struct.tree_base* %base12 to i64*, !dbg !16579
  %bf.load13 = load i64, i64* %7, align 8, !dbg !16579
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !16579
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !16579
  %cmp16 = icmp eq i32 %bf.cast15, 8, !dbg !16579
  br i1 %cmp16, label %lor.end, label %lor.lhs.false17, !dbg !16580

lor.lhs.false17:                                  ; preds = %lor.lhs.false11
  %8 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !16581
  %base18 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !16581
  %9 = bitcast %struct.tree_base* %base18 to i64*, !dbg !16581
  %bf.load19 = load i64, i64* %9, align 8, !dbg !16581
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !16581
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !16581
  %cmp22 = icmp eq i32 %bf.cast21, 9, !dbg !16581
  br i1 %cmp22, label %lor.end, label %lor.rhs, !dbg !16582

lor.rhs:                                          ; preds = %lor.lhs.false17
  %10 = load %union.tree_node*, %union.tree_node** %type2.addr, align 8, !dbg !16583
  %base23 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !16583
  %11 = bitcast %struct.tree_base* %base23 to i64*, !dbg !16583
  %bf.load24 = load i64, i64* %11, align 8, !dbg !16583
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !16583
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !16583
  %cmp27 = icmp eq i32 %bf.cast26, 11, !dbg !16583
  br label %lor.end, !dbg !16582

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false17, %lor.lhs.false11, %lor.lhs.false, %land.rhs
  %12 = phi i1 [ true, %lor.lhs.false17 ], [ true, %lor.lhs.false11 ], [ true, %lor.lhs.false ], [ true, %land.rhs ], [ %cmp27, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %13 = phi i1 [ false, %entry ], [ %12, %lor.end ], !dbg !16584
  %land.ext = zext i1 %13 to i32, !dbg !16578
  %conv = trunc i32 %land.ext to i8, !dbg !16585
  ret i8 %conv, !dbg !16586
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !16587 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !16588, metadata !DIExpression()), !dbg !16589
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16590
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !16592
  %cmp = icmp uge i32 %call, 3, !dbg !16593
  br i1 %cmp, label %if.then, label %if.else, !dbg !16594

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16595
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !16596
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !16597
  br label %return, !dbg !16597

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !16598
  br label %return, !dbg !16598

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !16599
  ret %union.tree_node* %2, !dbg !16599
}

declare dso_local %union.tree_node* @div_if_zero_remainder(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !16600 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !16601, metadata !DIExpression()), !dbg !16602
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16603
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !16604
  ret %union.tree_node* %call, !dbg !16605
}

declare dso_local zeroext i8 @is_gimple_lvalue(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_noreturn_p(%union.gimple_statement_d* %s) #0 !dbg !16606 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !16607, metadata !DIExpression()), !dbg !16608
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !16609
  %call = call i32 @gimple_call_flags(%union.gimple_statement_d* %0), !dbg !16610
  %and = and i32 %call, 8, !dbg !16611
  %cmp = icmp ne i32 %and, 0, !dbg !16612
  %conv = zext i1 %cmp to i32, !dbg !16612
  %conv1 = trunc i32 %conv to i8, !dbg !16613
  ret i8 %conv1, !dbg !16614
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %gs) #0 !dbg !16615 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !16616, metadata !DIExpression()), !dbg !16617
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16618
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 2), !dbg !16619
  ret %union.tree_node* %call, !dbg !16620
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !16621 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !16622, metadata !DIExpression()), !dbg !16623
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !16624, metadata !DIExpression()), !dbg !16625
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16626
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !16627
  store i32 %call, i32* %num_ops, align 4, !dbg !16628
  %1 = load i32, i32* %num_ops, align 4, !dbg !16629
  %sub = sub i32 %1, 3, !dbg !16630
  ret i32 %sub, !dbg !16631
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !16632 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !16633, metadata !DIExpression()), !dbg !16634
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !16635, metadata !DIExpression()), !dbg !16636
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16637
  %1 = load i32, i32* %index.addr, align 4, !dbg !16638
  %add = add i32 %1, 3, !dbg !16639
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !16640
  ret %union.tree_node* %call, !dbg !16641
}

declare dso_local zeroext i8 @is_gimple_operand(%union.tree_node*) #2

declare dso_local i32 @vector_type_mode(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %gs) #0 !dbg !16642 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !16643, metadata !DIExpression()), !dbg !16644
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16645
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !16646
  ret %union.tree_node* %call, !dbg !16647
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %gs) #0 !dbg !16648 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !16649, metadata !DIExpression()), !dbg !16650
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16651
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !16652
  ret %union.tree_node* %call, !dbg !16653
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_one_before_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !16654 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !16655, metadata !DIExpression()), !dbg !16656
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !16657
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !16657
  %cmp = icmp ne %struct.gimple_seq_node_d* %0, null, !dbg !16658
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !16659

land.rhs:                                         ; preds = %entry
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !16660
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !16660
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !16661
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !16661
  %cmp2 = icmp eq %struct.gimple_seq_node_d* %2, null, !dbg !16662
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !16663
  %land.ext = zext i1 %3 to i32, !dbg !16659
  %conv = trunc i32 %land.ext to i8, !dbg !16664
  ret i8 %conv, !dbg !16665
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_omp(%union.gimple_statement_d* %stmt) #0 !dbg !16666 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !16667, metadata !DIExpression()), !dbg !16668
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !16669
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !16670
  switch i32 %call, label %sw.default [
    i32 26, label %sw.bb
    i32 27, label %sw.bb
    i32 23, label %sw.bb
    i32 30, label %sw.bb
    i32 31, label %sw.bb
    i32 32, label %sw.bb
    i32 29, label %sw.bb
    i32 24, label %sw.bb
    i32 25, label %sw.bb
    i32 22, label %sw.bb
    i32 28, label %sw.bb
    i32 19, label %sw.bb
    i32 20, label %sw.bb
    i32 21, label %sw.bb
  ], !dbg !16671

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !16672
  br label %return, !dbg !16672

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !16674
  br label %return, !dbg !16674

return:                                           ; preds = %sw.default, %sw.bb
  %1 = load i8, i8* %retval, align 1, !dbg !16675
  ret i8 %1, !dbg !16675
}

declare dso_local zeroext i8 @is_gimple_call_addr(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !16676 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !16677, metadata !DIExpression()), !dbg !16678
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !16679, metadata !DIExpression()), !dbg !16680
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !16681
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !16682
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !16680
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !16683
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !16683
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !16683
  %bf.load = load i64, i64* %2, align 8, !dbg !16683
  %bf.clear = and i64 %bf.load, 65535, !dbg !16683
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !16683
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !16685
  br i1 %cmp, label %if.then, label %if.end, !dbg !16686

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !16687
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !16687
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !16687
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !16687
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !16687
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !16688
  br label %return, !dbg !16688

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !16689
  br label %return, !dbg !16689

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !16690
  ret %union.tree_node* %5, !dbg !16690
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @verify_expr(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !16691 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %t = alloca %union.tree_node*, align 8
  %x = alloca %union.tree_node*, align 8
  %old_constant = alloca i8, align 1
  %old_side_effects = alloca i8, align 1
  %new_constant = alloca i8, align 1
  %new_side_effects = alloca i8, align 1
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !16692, metadata !DIExpression()), !dbg !16693
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !16694, metadata !DIExpression()), !dbg !16695
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !16696, metadata !DIExpression()), !dbg !16697
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !16698, metadata !DIExpression()), !dbg !16699
  %0 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !16700
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !16701
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !16699
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !16702, metadata !DIExpression()), !dbg !16703
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16704
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !16704
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !16704
  %bf.load = load i64, i64* %3, align 8, !dbg !16704
  %bf.clear = and i64 %bf.load, 65535, !dbg !16704
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !16704
  %idxprom = sext i32 %bf.cast to i64, !dbg !16704
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !16704
  %4 = load i32, i32* %arrayidx, align 4, !dbg !16704
  %cmp = icmp eq i32 %4, 2, !dbg !16704
  br i1 %cmp, label %if.then, label %if.end, !dbg !16706

if.then:                                          ; preds = %entry
  %5 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !16707
  store i32 0, i32* %5, align 4, !dbg !16708
  br label %if.end, !dbg !16709

if.end:                                           ; preds = %if.then, %entry
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16710
  %base1 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !16710
  %7 = bitcast %struct.tree_base* %base1 to i64*, !dbg !16710
  %bf.load2 = load i64, i64* %7, align 8, !dbg !16710
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !16710
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !16710
  switch i32 %bf.cast4, label %sw.default [
    i32 141, label %sw.bb
    i32 47, label %sw.bb11
    i32 148, label %sw.bb18
    i32 53, label %sw.bb26
    i32 121, label %sw.bb27
    i32 56, label %sw.bb109
    i32 117, label %sw.bb143
    i32 116, label %sw.bb144
    i32 113, label %sw.bb144
    i32 77, label %sw.bb144
    i32 78, label %sw.bb144
    i32 79, label %sw.bb144
    i32 82, label %sw.bb144
    i32 90, label %sw.bb144
    i32 96, label %sw.bb144
    i32 43, label %sw.bb155
    i32 44, label %sw.bb155
    i32 41, label %sw.bb155
    i32 45, label %sw.bb155
    i32 46, label %sw.bb155
    i32 42, label %sw.bb155
    i32 118, label %sw.bb155
    i32 63, label %sw.bb381
    i32 64, label %sw.bb381
    i32 66, label %sw.bb425
    i32 97, label %sw.bb460
    i32 98, label %sw.bb460
    i32 99, label %sw.bb460
    i32 100, label %sw.bb460
    i32 101, label %sw.bb460
    i32 102, label %sw.bb460
    i32 103, label %sw.bb460
    i32 104, label %sw.bb460
    i32 105, label %sw.bb460
    i32 106, label %sw.bb460
    i32 107, label %sw.bb460
    i32 108, label %sw.bb460
    i32 109, label %sw.bb460
    i32 110, label %sw.bb460
    i32 65, label %sw.bb460
    i32 67, label %sw.bb460
    i32 68, label %sw.bb460
    i32 69, label %sw.bb460
    i32 70, label %sw.bb460
    i32 71, label %sw.bb460
    i32 72, label %sw.bb460
    i32 73, label %sw.bb460
    i32 74, label %sw.bb460
    i32 75, label %sw.bb460
    i32 76, label %sw.bb460
    i32 80, label %sw.bb460
    i32 81, label %sw.bb460
    i32 83, label %sw.bb460
    i32 84, label %sw.bb460
    i32 85, label %sw.bb460
    i32 86, label %sw.bb460
    i32 87, label %sw.bb460
    i32 88, label %sw.bb460
    i32 89, label %sw.bb460
    i32 51, label %sw.bb485
  ], !dbg !16711

sw.bb:                                            ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16712
  %base5 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !16712
  %9 = bitcast %struct.tree_base* %base5 to i64*, !dbg !16712
  %bf.load6 = load i64, i64* %9, align 8, !dbg !16712
  %bf.lshr = lshr i64 %bf.load6, 25, !dbg !16712
  %bf.clear7 = and i64 %bf.lshr, 1, !dbg !16712
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !16712
  %tobool = icmp ne i32 %bf.cast8, 0, !dbg !16712
  br i1 %tobool, label %if.then9, label %if.end10, !dbg !16715

if.then9:                                         ; preds = %sw.bb
  call void (i8*, ...) @error(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.123, i64 0, i64 0)), !dbg !16716
  %10 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !16718
  %11 = load %union.tree_node*, %union.tree_node** %10, align 8, !dbg !16719
  store %union.tree_node* %11, %union.tree_node** %retval, align 8, !dbg !16720
  br label %return, !dbg !16720

if.end10:                                         ; preds = %sw.bb
  br label %sw.epilog, !dbg !16721

sw.bb11:                                          ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16722
  %exp = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !16722
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !16722
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !16722
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !16722
  store %union.tree_node* %13, %union.tree_node** %x, align 8, !dbg !16723
  %14 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !16724
  %call = call zeroext i8 @is_gimple_reg(%union.tree_node* %14), !dbg !16726
  %tobool13 = icmp ne i8 %call, 0, !dbg !16726
  br i1 %tobool13, label %if.end17, label %land.lhs.true, !dbg !16727

land.lhs.true:                                    ; preds = %sw.bb11
  %15 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !16728
  %call14 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %15), !dbg !16729
  %tobool15 = icmp ne i8 %call14, 0, !dbg !16729
  br i1 %tobool15, label %if.end17, label %if.then16, !dbg !16730

if.then16:                                        ; preds = %land.lhs.true
  call void (i8*, ...) @error(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.124, i64 0, i64 0)), !dbg !16731
  %16 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !16733
  store %union.tree_node* %16, %union.tree_node** %retval, align 8, !dbg !16734
  br label %return, !dbg !16734

if.end17:                                         ; preds = %land.lhs.true, %sw.bb11
  br label %sw.epilog, !dbg !16735

sw.bb18:                                          ; preds = %if.end
  %17 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16736
  %exp19 = bitcast %union.tree_node* %17 to %struct.tree_exp*, !dbg !16736
  %operands20 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp19, i32 0, i32 3, !dbg !16736
  %arrayidx21 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands20, i64 0, i64 1, !dbg !16736
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx21, align 8, !dbg !16736
  %call22 = call %union.tree_node* @fold(%union.tree_node* %18), !dbg !16737
  store %union.tree_node* %call22, %union.tree_node** %x, align 8, !dbg !16738
  %19 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !16739
  %20 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !16741
  %cmp23 = icmp eq %union.tree_node* %19, %20, !dbg !16742
  br i1 %cmp23, label %if.then24, label %if.end25, !dbg !16743

if.then24:                                        ; preds = %sw.bb18
  call void (i8*, ...) @error(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.125, i64 0, i64 0)), !dbg !16744
  %21 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !16746
  %22 = load %union.tree_node*, %union.tree_node** %21, align 8, !dbg !16747
  store %union.tree_node* %22, %union.tree_node** %retval, align 8, !dbg !16748
  br label %return, !dbg !16748

if.end25:                                         ; preds = %sw.bb18
  br label %sw.epilog, !dbg !16749

sw.bb26:                                          ; preds = %if.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.126, i64 0, i64 0)), !dbg !16750
  %23 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !16751
  %24 = load %union.tree_node*, %union.tree_node** %23, align 8, !dbg !16752
  store %union.tree_node* %24, %union.tree_node** %retval, align 8, !dbg !16753
  br label %return, !dbg !16753

sw.bb27:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i8* %old_constant, metadata !16754, metadata !DIExpression()), !dbg !16756
  call void @llvm.dbg.declare(metadata i8* %old_side_effects, metadata !16757, metadata !DIExpression()), !dbg !16758
  call void @llvm.dbg.declare(metadata i8* %new_constant, metadata !16759, metadata !DIExpression()), !dbg !16760
  call void @llvm.dbg.declare(metadata i8* %new_side_effects, metadata !16761, metadata !DIExpression()), !dbg !16762
  %25 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16763
  %call28 = call zeroext i8 @is_gimple_address(%union.tree_node* %25), !dbg !16763
  %tobool29 = icmp ne i8 %call28, 0, !dbg !16763
  br i1 %tobool29, label %cond.false, label %cond.true, !dbg !16763

cond.true:                                        ; preds = %sw.bb27
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 2544, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !16763
  br label %cond.end, !dbg !16763

cond.false:                                       ; preds = %sw.bb27
  br label %cond.end, !dbg !16763

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !16763
  %26 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16764
  %base30 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !16764
  %27 = bitcast %struct.tree_base* %base30 to i64*, !dbg !16764
  %bf.load31 = load i64, i64* %27, align 8, !dbg !16764
  %bf.lshr32 = lshr i64 %bf.load31, 17, !dbg !16764
  %bf.clear33 = and i64 %bf.lshr32, 1, !dbg !16764
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !16764
  %conv = trunc i32 %bf.cast34 to i8, !dbg !16764
  store i8 %conv, i8* %old_constant, align 1, !dbg !16765
  %28 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16766
  %base35 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !16766
  %29 = bitcast %struct.tree_base* %base35 to i64*, !dbg !16766
  %bf.load36 = load i64, i64* %29, align 8, !dbg !16766
  %bf.lshr37 = lshr i64 %bf.load36, 16, !dbg !16766
  %bf.clear38 = and i64 %bf.lshr37, 1, !dbg !16766
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !16766
  %conv40 = trunc i32 %bf.cast39 to i8, !dbg !16766
  store i8 %conv40, i8* %old_side_effects, align 1, !dbg !16767
  %30 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16768
  call void @recompute_tree_invariant_for_addr_expr(%union.tree_node* %30), !dbg !16769
  %31 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16770
  %base41 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !16770
  %32 = bitcast %struct.tree_base* %base41 to i64*, !dbg !16770
  %bf.load42 = load i64, i64* %32, align 8, !dbg !16770
  %bf.lshr43 = lshr i64 %bf.load42, 16, !dbg !16770
  %bf.clear44 = and i64 %bf.lshr43, 1, !dbg !16770
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !16770
  %conv46 = trunc i32 %bf.cast45 to i8, !dbg !16770
  store i8 %conv46, i8* %new_side_effects, align 1, !dbg !16771
  %33 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16772
  %base47 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !16772
  %34 = bitcast %struct.tree_base* %base47 to i64*, !dbg !16772
  %bf.load48 = load i64, i64* %34, align 8, !dbg !16772
  %bf.lshr49 = lshr i64 %bf.load48, 17, !dbg !16772
  %bf.clear50 = and i64 %bf.lshr49, 1, !dbg !16772
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !16772
  %conv52 = trunc i32 %bf.cast51 to i8, !dbg !16772
  store i8 %conv52, i8* %new_constant, align 1, !dbg !16773
  %35 = load i8, i8* %old_constant, align 1, !dbg !16774
  %conv53 = zext i8 %35 to i32, !dbg !16774
  %36 = load i8, i8* %new_constant, align 1, !dbg !16776
  %conv54 = zext i8 %36 to i32, !dbg !16776
  %cmp55 = icmp ne i32 %conv53, %conv54, !dbg !16777
  br i1 %cmp55, label %if.then57, label %if.end58, !dbg !16778

if.then57:                                        ; preds = %cond.end
  call void (i8*, ...) @error(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.127, i64 0, i64 0)), !dbg !16779
  %37 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16781
  store %union.tree_node* %37, %union.tree_node** %retval, align 8, !dbg !16782
  br label %return, !dbg !16782

if.end58:                                         ; preds = %cond.end
  %38 = load i8, i8* %old_side_effects, align 1, !dbg !16783
  %conv59 = zext i8 %38 to i32, !dbg !16783
  %39 = load i8, i8* %new_side_effects, align 1, !dbg !16785
  %conv60 = zext i8 %39 to i32, !dbg !16785
  %cmp61 = icmp ne i32 %conv59, %conv60, !dbg !16786
  br i1 %cmp61, label %if.then63, label %if.end64, !dbg !16787

if.then63:                                        ; preds = %if.end58
  call void (i8*, ...) @error(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.128, i64 0, i64 0)), !dbg !16788
  %40 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16790
  store %union.tree_node* %40, %union.tree_node** %retval, align 8, !dbg !16791
  br label %return, !dbg !16791

if.end64:                                         ; preds = %if.end58
  %41 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16792
  %exp65 = bitcast %union.tree_node* %41 to %struct.tree_exp*, !dbg !16792
  %operands66 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp65, i32 0, i32 3, !dbg !16792
  %arrayidx67 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands66, i64 0, i64 0, !dbg !16792
  %42 = load %union.tree_node*, %union.tree_node** %arrayidx67, align 8, !dbg !16792
  store %union.tree_node* %42, %union.tree_node** %x, align 8, !dbg !16794
  br label %for.cond, !dbg !16795

for.cond:                                         ; preds = %for.inc, %if.end64
  %43 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !16796
  %call68 = call zeroext i8 @handled_component_p(%union.tree_node* %43), !dbg !16798
  %tobool69 = icmp ne i8 %call68, 0, !dbg !16799
  br i1 %tobool69, label %for.body, label %for.end, !dbg !16799

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !16799

for.inc:                                          ; preds = %for.body
  %44 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !16800
  %exp70 = bitcast %union.tree_node* %44 to %struct.tree_exp*, !dbg !16800
  %operands71 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp70, i32 0, i32 3, !dbg !16800
  %arrayidx72 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands71, i64 0, i64 0, !dbg !16800
  %45 = load %union.tree_node*, %union.tree_node** %arrayidx72, align 8, !dbg !16800
  store %union.tree_node* %45, %union.tree_node** %x, align 8, !dbg !16801
  br label %for.cond, !dbg !16802, !llvm.loop !16803

for.end:                                          ; preds = %for.cond
  %46 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !16805
  %base73 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !16805
  %47 = bitcast %struct.tree_base* %base73 to i64*, !dbg !16805
  %bf.load74 = load i64, i64* %47, align 8, !dbg !16805
  %bf.clear75 = and i64 %bf.load74, 65535, !dbg !16805
  %bf.cast76 = trunc i64 %bf.clear75 to i32, !dbg !16805
  %cmp77 = icmp eq i32 %bf.cast76, 32, !dbg !16807
  br i1 %cmp77, label %if.end93, label %lor.lhs.false, !dbg !16808

lor.lhs.false:                                    ; preds = %for.end
  %48 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !16809
  %base79 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !16809
  %49 = bitcast %struct.tree_base* %base79 to i64*, !dbg !16809
  %bf.load80 = load i64, i64* %49, align 8, !dbg !16809
  %bf.clear81 = and i64 %bf.load80, 65535, !dbg !16809
  %bf.cast82 = trunc i64 %bf.clear81 to i32, !dbg !16809
  %cmp83 = icmp eq i32 %bf.cast82, 34, !dbg !16810
  br i1 %cmp83, label %if.end93, label %lor.lhs.false85, !dbg !16811

lor.lhs.false85:                                  ; preds = %lor.lhs.false
  %50 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !16812
  %base86 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !16812
  %51 = bitcast %struct.tree_base* %base86 to i64*, !dbg !16812
  %bf.load87 = load i64, i64* %51, align 8, !dbg !16812
  %bf.clear88 = and i64 %bf.load87, 65535, !dbg !16812
  %bf.cast89 = trunc i64 %bf.clear88 to i32, !dbg !16812
  %cmp90 = icmp eq i32 %bf.cast89, 36, !dbg !16813
  br i1 %cmp90, label %if.end93, label %if.then92, !dbg !16814

if.then92:                                        ; preds = %lor.lhs.false85
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !16815
  br label %return, !dbg !16815

if.end93:                                         ; preds = %lor.lhs.false85, %lor.lhs.false, %for.end
  %52 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !16816
  %base94 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !16816
  %53 = bitcast %struct.tree_base* %base94 to i64*, !dbg !16816
  %bf.load95 = load i64, i64* %53, align 8, !dbg !16816
  %bf.lshr96 = lshr i64 %bf.load95, 18, !dbg !16816
  %bf.clear97 = and i64 %bf.lshr96, 1, !dbg !16816
  %bf.cast98 = trunc i64 %bf.clear97 to i32, !dbg !16816
  %tobool99 = icmp ne i32 %bf.cast98, 0, !dbg !16816
  br i1 %tobool99, label %if.end101, label %if.then100, !dbg !16818

if.then100:                                       ; preds = %if.end93
  call void (i8*, ...) @error(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.129, i64 0, i64 0)), !dbg !16819
  %54 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !16821
  store %union.tree_node* %54, %union.tree_node** %retval, align 8, !dbg !16822
  br label %return, !dbg !16822

if.end101:                                        ; preds = %if.end93
  %55 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !16823
  %decl_common = bitcast %union.tree_node* %55 to %struct.tree_decl_common*, !dbg !16823
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !16823
  %56 = bitcast i40* %gimple_reg_flag to i64*, !dbg !16823
  %bf.load102 = load i64, i64* %56, align 8, !dbg !16823
  %bf.lshr103 = lshr i64 %bf.load102, 27, !dbg !16823
  %bf.clear104 = and i64 %bf.lshr103, 1, !dbg !16823
  %bf.cast105 = trunc i64 %bf.clear104 to i32, !dbg !16823
  %tobool106 = icmp ne i32 %bf.cast105, 0, !dbg !16823
  br i1 %tobool106, label %if.then107, label %if.end108, !dbg !16825

if.then107:                                       ; preds = %if.end101
  call void (i8*, ...) @error(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.130, i64 0, i64 0)), !dbg !16826
  %57 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !16828
  store %union.tree_node* %57, %union.tree_node** %retval, align 8, !dbg !16829
  br label %return, !dbg !16829

if.end108:                                        ; preds = %if.end101
  br label %sw.epilog, !dbg !16830

sw.bb109:                                         ; preds = %if.end
  %58 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16831
  %exp110 = bitcast %union.tree_node* %58 to %struct.tree_exp*, !dbg !16831
  %operands111 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp110, i32 0, i32 3, !dbg !16831
  %arrayidx112 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands111, i64 0, i64 0, !dbg !16831
  %59 = load %union.tree_node*, %union.tree_node** %arrayidx112, align 8, !dbg !16831
  store %union.tree_node* %59, %union.tree_node** %x, align 8, !dbg !16832
  %60 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !16833
  %common = bitcast %union.tree_node* %60 to %struct.tree_common*, !dbg !16833
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !16833
  %61 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !16833
  %base113 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !16833
  %62 = bitcast %struct.tree_base* %base113 to i64*, !dbg !16833
  %bf.load114 = load i64, i64* %62, align 8, !dbg !16833
  %bf.clear115 = and i64 %bf.load114, 65535, !dbg !16833
  %bf.cast116 = trunc i64 %bf.clear115 to i32, !dbg !16833
  %cmp117 = icmp eq i32 %bf.cast116, 6, !dbg !16833
  br i1 %cmp117, label %if.end138, label %lor.lhs.false119, !dbg !16833

lor.lhs.false119:                                 ; preds = %sw.bb109
  %63 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !16833
  %common120 = bitcast %union.tree_node* %63 to %struct.tree_common*, !dbg !16833
  %type121 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common120, i32 0, i32 2, !dbg !16833
  %64 = load %union.tree_node*, %union.tree_node** %type121, align 8, !dbg !16833
  %base122 = bitcast %union.tree_node* %64 to %struct.tree_base*, !dbg !16833
  %65 = bitcast %struct.tree_base* %base122 to i64*, !dbg !16833
  %bf.load123 = load i64, i64* %65, align 8, !dbg !16833
  %bf.clear124 = and i64 %bf.load123, 65535, !dbg !16833
  %bf.cast125 = trunc i64 %bf.clear124 to i32, !dbg !16833
  %cmp126 = icmp eq i32 %bf.cast125, 7, !dbg !16833
  br i1 %cmp126, label %if.end138, label %lor.lhs.false128, !dbg !16833

lor.lhs.false128:                                 ; preds = %lor.lhs.false119
  %66 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !16833
  %common129 = bitcast %union.tree_node* %66 to %struct.tree_common*, !dbg !16833
  %type130 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common129, i32 0, i32 2, !dbg !16833
  %67 = load %union.tree_node*, %union.tree_node** %type130, align 8, !dbg !16833
  %base131 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !16833
  %68 = bitcast %struct.tree_base* %base131 to i64*, !dbg !16833
  %bf.load132 = load i64, i64* %68, align 8, !dbg !16833
  %bf.clear133 = and i64 %bf.load132, 65535, !dbg !16833
  %bf.cast134 = trunc i64 %bf.clear133 to i32, !dbg !16833
  %cmp135 = icmp eq i32 %bf.cast134, 8, !dbg !16833
  br i1 %cmp135, label %if.end138, label %if.then137, !dbg !16835

if.then137:                                       ; preds = %lor.lhs.false128
  call void (i8*, ...) @error(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.131, i64 0, i64 0)), !dbg !16836
  %69 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !16838
  store %union.tree_node* %69, %union.tree_node** %retval, align 8, !dbg !16839
  br label %return, !dbg !16839

if.end138:                                        ; preds = %lor.lhs.false128, %lor.lhs.false119, %sw.bb109
  %70 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !16840
  %call139 = call zeroext i8 @is_gimple_condexpr(%union.tree_node* %70), !dbg !16842
  %tobool140 = icmp ne i8 %call139, 0, !dbg !16842
  br i1 %tobool140, label %if.end142, label %if.then141, !dbg !16843

if.then141:                                       ; preds = %if.end138
  call void (i8*, ...) @error(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.132, i64 0, i64 0)), !dbg !16844
  %71 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !16846
  store %union.tree_node* %71, %union.tree_node** %retval, align 8, !dbg !16847
  br label %return, !dbg !16847

if.end142:                                        ; preds = %if.end138
  br label %sw.epilog, !dbg !16848

sw.bb143:                                         ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 2605, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !16849
  br label %sw.bb144, !dbg !16849

sw.bb144:                                         ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %sw.bb143
  br label %do.body, !dbg !16850

do.body:                                          ; preds = %sw.bb144
  %72 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16851
  %exp145 = bitcast %union.tree_node* %72 to %struct.tree_exp*, !dbg !16851
  %operands146 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp145, i32 0, i32 3, !dbg !16851
  %arrayidx147 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands146, i64 0, i64 0, !dbg !16851
  %73 = load %union.tree_node*, %union.tree_node** %arrayidx147, align 8, !dbg !16851
  %call148 = call zeroext i8 @is_gimple_val(%union.tree_node* %73), !dbg !16851
  %tobool149 = icmp ne i8 %call148, 0, !dbg !16851
  br i1 %tobool149, label %if.end154, label %if.then150, !dbg !16854

if.then150:                                       ; preds = %do.body
  call void (i8*, ...) @error(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.133, i64 0, i64 0)), !dbg !16855
  %74 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16855
  %exp151 = bitcast %union.tree_node* %74 to %struct.tree_exp*, !dbg !16855
  %operands152 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp151, i32 0, i32 3, !dbg !16855
  %arrayidx153 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands152, i64 0, i64 0, !dbg !16855
  %75 = load %union.tree_node*, %union.tree_node** %arrayidx153, align 8, !dbg !16855
  store %union.tree_node* %75, %union.tree_node** %retval, align 8, !dbg !16855
  br label %return, !dbg !16855

if.end154:                                        ; preds = %do.body
  br label %do.end, !dbg !16854

do.end:                                           ; preds = %if.end154
  br label %sw.epilog, !dbg !16857

sw.bb155:                                         ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  br label %while.cond, !dbg !16858

while.cond:                                       ; preds = %if.end370, %sw.bb155
  %76 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16859
  %call156 = call zeroext i8 @handled_component_p(%union.tree_node* %76), !dbg !16860
  %tobool157 = icmp ne i8 %call156, 0, !dbg !16858
  br i1 %tobool157, label %while.body, label %while.end, !dbg !16858

while.body:                                       ; preds = %while.cond
  %77 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16861
  %base158 = bitcast %union.tree_node* %77 to %struct.tree_base*, !dbg !16861
  %78 = bitcast %struct.tree_base* %base158 to i64*, !dbg !16861
  %bf.load159 = load i64, i64* %78, align 8, !dbg !16861
  %bf.clear160 = and i64 %bf.load159, 65535, !dbg !16861
  %bf.cast161 = trunc i64 %bf.clear160 to i32, !dbg !16861
  %cmp162 = icmp eq i32 %bf.cast161, 41, !dbg !16864
  br i1 %cmp162, label %land.lhs.true164, label %if.else, !dbg !16865

land.lhs.true164:                                 ; preds = %while.body
  %79 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16866
  %exp165 = bitcast %union.tree_node* %79 to %struct.tree_exp*, !dbg !16866
  %operands166 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp165, i32 0, i32 3, !dbg !16866
  %arrayidx167 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands166, i64 0, i64 2, !dbg !16866
  %80 = load %union.tree_node*, %union.tree_node** %arrayidx167, align 8, !dbg !16866
  %tobool168 = icmp ne %union.tree_node* %80, null, !dbg !16866
  br i1 %tobool168, label %if.then169, label %if.else, !dbg !16867

if.then169:                                       ; preds = %land.lhs.true164
  br label %do.body170, !dbg !16868

do.body170:                                       ; preds = %if.then169
  %81 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16869
  %exp171 = bitcast %union.tree_node* %81 to %struct.tree_exp*, !dbg !16869
  %operands172 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp171, i32 0, i32 3, !dbg !16869
  %arrayidx173 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands172, i64 0, i64 2, !dbg !16869
  %82 = load %union.tree_node*, %union.tree_node** %arrayidx173, align 8, !dbg !16869
  %call174 = call zeroext i8 @is_gimple_val(%union.tree_node* %82), !dbg !16869
  %tobool175 = icmp ne i8 %call174, 0, !dbg !16869
  br i1 %tobool175, label %if.end180, label %if.then176, !dbg !16872

if.then176:                                       ; preds = %do.body170
  call void (i8*, ...) @error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.134, i64 0, i64 0)), !dbg !16873
  %83 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16873
  %exp177 = bitcast %union.tree_node* %83 to %struct.tree_exp*, !dbg !16873
  %operands178 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp177, i32 0, i32 3, !dbg !16873
  %arrayidx179 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands178, i64 0, i64 2, !dbg !16873
  %84 = load %union.tree_node*, %union.tree_node** %arrayidx179, align 8, !dbg !16873
  store %union.tree_node* %84, %union.tree_node** %retval, align 8, !dbg !16873
  br label %return, !dbg !16873

if.end180:                                        ; preds = %do.body170
  br label %do.end181, !dbg !16872

do.end181:                                        ; preds = %if.end180
  br label %if.end370, !dbg !16872

if.else:                                          ; preds = %land.lhs.true164, %while.body
  %85 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16875
  %base182 = bitcast %union.tree_node* %85 to %struct.tree_base*, !dbg !16875
  %86 = bitcast %struct.tree_base* %base182 to i64*, !dbg !16875
  %bf.load183 = load i64, i64* %86, align 8, !dbg !16875
  %bf.clear184 = and i64 %bf.load183, 65535, !dbg !16875
  %bf.cast185 = trunc i64 %bf.clear184 to i32, !dbg !16875
  %cmp186 = icmp eq i32 %bf.cast185, 45, !dbg !16877
  br i1 %cmp186, label %if.then195, label %lor.lhs.false188, !dbg !16878

lor.lhs.false188:                                 ; preds = %if.else
  %87 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16879
  %base189 = bitcast %union.tree_node* %87 to %struct.tree_base*, !dbg !16879
  %88 = bitcast %struct.tree_base* %base189 to i64*, !dbg !16879
  %bf.load190 = load i64, i64* %88, align 8, !dbg !16879
  %bf.clear191 = and i64 %bf.load190, 65535, !dbg !16879
  %bf.cast192 = trunc i64 %bf.clear191 to i32, !dbg !16879
  %cmp193 = icmp eq i32 %bf.cast192, 46, !dbg !16880
  br i1 %cmp193, label %if.then195, label %if.else244, !dbg !16881

if.then195:                                       ; preds = %lor.lhs.false188, %if.else
  br label %do.body196, !dbg !16882

do.body196:                                       ; preds = %if.then195
  %89 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16884
  %exp197 = bitcast %union.tree_node* %89 to %struct.tree_exp*, !dbg !16884
  %operands198 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp197, i32 0, i32 3, !dbg !16884
  %arrayidx199 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands198, i64 0, i64 1, !dbg !16884
  %90 = load %union.tree_node*, %union.tree_node** %arrayidx199, align 8, !dbg !16884
  %call200 = call zeroext i8 @is_gimple_val(%union.tree_node* %90), !dbg !16884
  %tobool201 = icmp ne i8 %call200, 0, !dbg !16884
  br i1 %tobool201, label %if.end206, label %if.then202, !dbg !16887

if.then202:                                       ; preds = %do.body196
  call void (i8*, ...) @error(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.135, i64 0, i64 0)), !dbg !16888
  %91 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16888
  %exp203 = bitcast %union.tree_node* %91 to %struct.tree_exp*, !dbg !16888
  %operands204 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp203, i32 0, i32 3, !dbg !16888
  %arrayidx205 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands204, i64 0, i64 1, !dbg !16888
  %92 = load %union.tree_node*, %union.tree_node** %arrayidx205, align 8, !dbg !16888
  store %union.tree_node* %92, %union.tree_node** %retval, align 8, !dbg !16888
  br label %return, !dbg !16888

if.end206:                                        ; preds = %do.body196
  br label %do.end207, !dbg !16887

do.end207:                                        ; preds = %if.end206
  %93 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16890
  %exp208 = bitcast %union.tree_node* %93 to %struct.tree_exp*, !dbg !16890
  %operands209 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp208, i32 0, i32 3, !dbg !16890
  %arrayidx210 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands209, i64 0, i64 2, !dbg !16890
  %94 = load %union.tree_node*, %union.tree_node** %arrayidx210, align 8, !dbg !16890
  %tobool211 = icmp ne %union.tree_node* %94, null, !dbg !16890
  br i1 %tobool211, label %if.then212, label %if.end225, !dbg !16892

if.then212:                                       ; preds = %do.end207
  br label %do.body213, !dbg !16893

do.body213:                                       ; preds = %if.then212
  %95 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16894
  %exp214 = bitcast %union.tree_node* %95 to %struct.tree_exp*, !dbg !16894
  %operands215 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp214, i32 0, i32 3, !dbg !16894
  %arrayidx216 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands215, i64 0, i64 2, !dbg !16894
  %96 = load %union.tree_node*, %union.tree_node** %arrayidx216, align 8, !dbg !16894
  %call217 = call zeroext i8 @is_gimple_val(%union.tree_node* %96), !dbg !16894
  %tobool218 = icmp ne i8 %call217, 0, !dbg !16894
  br i1 %tobool218, label %if.end223, label %if.then219, !dbg !16897

if.then219:                                       ; preds = %do.body213
  call void (i8*, ...) @error(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.136, i64 0, i64 0)), !dbg !16898
  %97 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16898
  %exp220 = bitcast %union.tree_node* %97 to %struct.tree_exp*, !dbg !16898
  %operands221 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp220, i32 0, i32 3, !dbg !16898
  %arrayidx222 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands221, i64 0, i64 2, !dbg !16898
  %98 = load %union.tree_node*, %union.tree_node** %arrayidx222, align 8, !dbg !16898
  store %union.tree_node* %98, %union.tree_node** %retval, align 8, !dbg !16898
  br label %return, !dbg !16898

if.end223:                                        ; preds = %do.body213
  br label %do.end224, !dbg !16897

do.end224:                                        ; preds = %if.end223
  br label %if.end225, !dbg !16897

if.end225:                                        ; preds = %do.end224, %do.end207
  %99 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16900
  %exp226 = bitcast %union.tree_node* %99 to %struct.tree_exp*, !dbg !16900
  %operands227 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp226, i32 0, i32 3, !dbg !16900
  %arrayidx228 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands227, i64 0, i64 3, !dbg !16900
  %100 = load %union.tree_node*, %union.tree_node** %arrayidx228, align 8, !dbg !16900
  %tobool229 = icmp ne %union.tree_node* %100, null, !dbg !16900
  br i1 %tobool229, label %if.then230, label %if.end243, !dbg !16902

if.then230:                                       ; preds = %if.end225
  br label %do.body231, !dbg !16903

do.body231:                                       ; preds = %if.then230
  %101 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16904
  %exp232 = bitcast %union.tree_node* %101 to %struct.tree_exp*, !dbg !16904
  %operands233 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp232, i32 0, i32 3, !dbg !16904
  %arrayidx234 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands233, i64 0, i64 3, !dbg !16904
  %102 = load %union.tree_node*, %union.tree_node** %arrayidx234, align 8, !dbg !16904
  %call235 = call zeroext i8 @is_gimple_val(%union.tree_node* %102), !dbg !16904
  %tobool236 = icmp ne i8 %call235, 0, !dbg !16904
  br i1 %tobool236, label %if.end241, label %if.then237, !dbg !16907

if.then237:                                       ; preds = %do.body231
  call void (i8*, ...) @error(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.137, i64 0, i64 0)), !dbg !16908
  %103 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16908
  %exp238 = bitcast %union.tree_node* %103 to %struct.tree_exp*, !dbg !16908
  %operands239 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp238, i32 0, i32 3, !dbg !16908
  %arrayidx240 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands239, i64 0, i64 3, !dbg !16908
  %104 = load %union.tree_node*, %union.tree_node** %arrayidx240, align 8, !dbg !16908
  store %union.tree_node* %104, %union.tree_node** %retval, align 8, !dbg !16908
  br label %return, !dbg !16908

if.end241:                                        ; preds = %do.body231
  br label %do.end242, !dbg !16907

do.end242:                                        ; preds = %if.end241
  br label %if.end243, !dbg !16907

if.end243:                                        ; preds = %do.end242, %if.end225
  br label %if.end369, !dbg !16910

if.else244:                                       ; preds = %lor.lhs.false188
  %105 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16911
  %base245 = bitcast %union.tree_node* %105 to %struct.tree_base*, !dbg !16911
  %106 = bitcast %struct.tree_base* %base245 to i64*, !dbg !16911
  %bf.load246 = load i64, i64* %106, align 8, !dbg !16911
  %bf.clear247 = and i64 %bf.load246, 65535, !dbg !16911
  %bf.cast248 = trunc i64 %bf.clear247 to i32, !dbg !16911
  %cmp249 = icmp eq i32 %bf.cast248, 42, !dbg !16913
  br i1 %cmp249, label %if.then251, label %if.end368, !dbg !16914

if.then251:                                       ; preds = %if.else244
  %107 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16915
  %exp252 = bitcast %union.tree_node* %107 to %struct.tree_exp*, !dbg !16915
  %operands253 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp252, i32 0, i32 3, !dbg !16915
  %arrayidx254 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands253, i64 0, i64 1, !dbg !16915
  %108 = load %union.tree_node*, %union.tree_node** %arrayidx254, align 8, !dbg !16915
  %call255 = call i32 @host_integerp(%union.tree_node* %108, i32 1), !dbg !16918
  %tobool256 = icmp ne i32 %call255, 0, !dbg !16918
  br i1 %tobool256, label %lor.lhs.false257, label %if.then263, !dbg !16919

lor.lhs.false257:                                 ; preds = %if.then251
  %109 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16920
  %exp258 = bitcast %union.tree_node* %109 to %struct.tree_exp*, !dbg !16920
  %operands259 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp258, i32 0, i32 3, !dbg !16920
  %arrayidx260 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands259, i64 0, i64 2, !dbg !16920
  %110 = load %union.tree_node*, %union.tree_node** %arrayidx260, align 8, !dbg !16920
  %call261 = call i32 @host_integerp(%union.tree_node* %110, i32 1), !dbg !16921
  %tobool262 = icmp ne i32 %call261, 0, !dbg !16921
  br i1 %tobool262, label %if.else264, label %if.then263, !dbg !16922

if.then263:                                       ; preds = %lor.lhs.false257, %if.then251
  call void (i8*, ...) @error(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.138, i64 0, i64 0)), !dbg !16923
  %111 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16925
  store %union.tree_node* %111, %union.tree_node** %retval, align 8, !dbg !16926
  br label %return, !dbg !16926

if.else264:                                       ; preds = %lor.lhs.false257
  %112 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16927
  %common265 = bitcast %union.tree_node* %112 to %struct.tree_common*, !dbg !16927
  %type266 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common265, i32 0, i32 2, !dbg !16927
  %113 = load %union.tree_node*, %union.tree_node** %type266, align 8, !dbg !16927
  %base267 = bitcast %union.tree_node* %113 to %struct.tree_base*, !dbg !16927
  %114 = bitcast %struct.tree_base* %base267 to i64*, !dbg !16927
  %bf.load268 = load i64, i64* %114, align 8, !dbg !16927
  %bf.clear269 = and i64 %bf.load268, 65535, !dbg !16927
  %bf.cast270 = trunc i64 %bf.clear269 to i32, !dbg !16927
  %cmp271 = icmp eq i32 %bf.cast270, 6, !dbg !16927
  br i1 %cmp271, label %land.lhs.true291, label %lor.lhs.false273, !dbg !16927

lor.lhs.false273:                                 ; preds = %if.else264
  %115 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16927
  %common274 = bitcast %union.tree_node* %115 to %struct.tree_common*, !dbg !16927
  %type275 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common274, i32 0, i32 2, !dbg !16927
  %116 = load %union.tree_node*, %union.tree_node** %type275, align 8, !dbg !16927
  %base276 = bitcast %union.tree_node* %116 to %struct.tree_base*, !dbg !16927
  %117 = bitcast %struct.tree_base* %base276 to i64*, !dbg !16927
  %bf.load277 = load i64, i64* %117, align 8, !dbg !16927
  %bf.clear278 = and i64 %bf.load277, 65535, !dbg !16927
  %bf.cast279 = trunc i64 %bf.clear278 to i32, !dbg !16927
  %cmp280 = icmp eq i32 %bf.cast279, 7, !dbg !16927
  br i1 %cmp280, label %land.lhs.true291, label %lor.lhs.false282, !dbg !16927

lor.lhs.false282:                                 ; preds = %lor.lhs.false273
  %118 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16927
  %common283 = bitcast %union.tree_node* %118 to %struct.tree_common*, !dbg !16927
  %type284 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common283, i32 0, i32 2, !dbg !16927
  %119 = load %union.tree_node*, %union.tree_node** %type284, align 8, !dbg !16927
  %base285 = bitcast %union.tree_node* %119 to %struct.tree_base*, !dbg !16927
  %120 = bitcast %struct.tree_base* %base285 to i64*, !dbg !16927
  %bf.load286 = load i64, i64* %120, align 8, !dbg !16927
  %bf.clear287 = and i64 %bf.load286, 65535, !dbg !16927
  %bf.cast288 = trunc i64 %bf.clear287 to i32, !dbg !16927
  %cmp289 = icmp eq i32 %bf.cast288, 8, !dbg !16927
  br i1 %cmp289, label %land.lhs.true291, label %if.end305, !dbg !16929

land.lhs.true291:                                 ; preds = %lor.lhs.false282, %lor.lhs.false273, %if.else264
  %121 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16930
  %common292 = bitcast %union.tree_node* %121 to %struct.tree_common*, !dbg !16930
  %type293 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common292, i32 0, i32 2, !dbg !16930
  %122 = load %union.tree_node*, %union.tree_node** %type293, align 8, !dbg !16930
  %type294 = bitcast %union.tree_node* %122 to %struct.tree_type*, !dbg !16930
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type294, i32 0, i32 6, !dbg !16930
  %bf.load295 = load i32, i32* %precision, align 4, !dbg !16930
  %bf.clear296 = and i32 %bf.load295, 1023, !dbg !16930
  %conv297 = zext i32 %bf.clear296 to i64, !dbg !16930
  %123 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16931
  %exp298 = bitcast %union.tree_node* %123 to %struct.tree_exp*, !dbg !16931
  %operands299 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp298, i32 0, i32 3, !dbg !16931
  %arrayidx300 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands299, i64 0, i64 1, !dbg !16931
  %124 = load %union.tree_node*, %union.tree_node** %arrayidx300, align 8, !dbg !16931
  %int_cst = bitcast %union.tree_node* %124 to %struct.tree_int_cst*, !dbg !16931
  %int_cst301 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !16931
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst301, i32 0, i32 0, !dbg !16931
  %125 = load i64, i64* %low, align 8, !dbg !16931
  %cmp302 = icmp ne i64 %conv297, %125, !dbg !16932
  br i1 %cmp302, label %if.then304, label %if.end305, !dbg !16933

if.then304:                                       ; preds = %land.lhs.true291
  call void (i8*, ...) @error(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.139, i64 0, i64 0)), !dbg !16934
  %126 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16936
  store %union.tree_node* %126, %union.tree_node** %retval, align 8, !dbg !16937
  br label %return, !dbg !16937

if.end305:                                        ; preds = %land.lhs.true291, %lor.lhs.false282
  br label %if.end306

if.end306:                                        ; preds = %if.end305
  %127 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16938
  %common307 = bitcast %union.tree_node* %127 to %struct.tree_common*, !dbg !16938
  %type308 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common307, i32 0, i32 2, !dbg !16938
  %128 = load %union.tree_node*, %union.tree_node** %type308, align 8, !dbg !16938
  %base309 = bitcast %union.tree_node* %128 to %struct.tree_base*, !dbg !16938
  %129 = bitcast %struct.tree_base* %base309 to i64*, !dbg !16938
  %bf.load310 = load i64, i64* %129, align 8, !dbg !16938
  %bf.clear311 = and i64 %bf.load310, 65535, !dbg !16938
  %bf.cast312 = trunc i64 %bf.clear311 to i32, !dbg !16938
  %cmp313 = icmp eq i32 %bf.cast312, 6, !dbg !16938
  br i1 %cmp313, label %if.end367, label %lor.lhs.false315, !dbg !16938

lor.lhs.false315:                                 ; preds = %if.end306
  %130 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16938
  %common316 = bitcast %union.tree_node* %130 to %struct.tree_common*, !dbg !16938
  %type317 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common316, i32 0, i32 2, !dbg !16938
  %131 = load %union.tree_node*, %union.tree_node** %type317, align 8, !dbg !16938
  %base318 = bitcast %union.tree_node* %131 to %struct.tree_base*, !dbg !16938
  %132 = bitcast %struct.tree_base* %base318 to i64*, !dbg !16938
  %bf.load319 = load i64, i64* %132, align 8, !dbg !16938
  %bf.clear320 = and i64 %bf.load319, 65535, !dbg !16938
  %bf.cast321 = trunc i64 %bf.clear320 to i32, !dbg !16938
  %cmp322 = icmp eq i32 %bf.cast321, 7, !dbg !16938
  br i1 %cmp322, label %if.end367, label %lor.lhs.false324, !dbg !16938

lor.lhs.false324:                                 ; preds = %lor.lhs.false315
  %133 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16938
  %common325 = bitcast %union.tree_node* %133 to %struct.tree_common*, !dbg !16938
  %type326 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common325, i32 0, i32 2, !dbg !16938
  %134 = load %union.tree_node*, %union.tree_node** %type326, align 8, !dbg !16938
  %base327 = bitcast %union.tree_node* %134 to %struct.tree_base*, !dbg !16938
  %135 = bitcast %struct.tree_base* %base327 to i64*, !dbg !16938
  %bf.load328 = load i64, i64* %135, align 8, !dbg !16938
  %bf.clear329 = and i64 %bf.load328, 65535, !dbg !16938
  %bf.cast330 = trunc i64 %bf.clear329 to i32, !dbg !16938
  %cmp331 = icmp eq i32 %bf.cast330, 8, !dbg !16938
  br i1 %cmp331, label %if.end367, label %land.lhs.true333, !dbg !16940

land.lhs.true333:                                 ; preds = %lor.lhs.false324
  %136 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16941
  %common334 = bitcast %union.tree_node* %136 to %struct.tree_common*, !dbg !16941
  %type335 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common334, i32 0, i32 2, !dbg !16941
  %137 = load %union.tree_node*, %union.tree_node** %type335, align 8, !dbg !16941
  %base336 = bitcast %union.tree_node* %137 to %struct.tree_base*, !dbg !16941
  %138 = bitcast %struct.tree_base* %base336 to i64*, !dbg !16941
  %bf.load337 = load i64, i64* %138, align 8, !dbg !16941
  %bf.clear338 = and i64 %bf.load337, 65535, !dbg !16941
  %bf.cast339 = trunc i64 %bf.clear338 to i32, !dbg !16941
  %cmp340 = icmp eq i32 %bf.cast339, 14, !dbg !16941
  br i1 %cmp340, label %cond.true342, label %cond.false346, !dbg !16941

cond.true342:                                     ; preds = %land.lhs.true333
  %139 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16941
  %common343 = bitcast %union.tree_node* %139 to %struct.tree_common*, !dbg !16941
  %type344 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common343, i32 0, i32 2, !dbg !16941
  %140 = load %union.tree_node*, %union.tree_node** %type344, align 8, !dbg !16941
  %call345 = call i32 @vector_type_mode(%union.tree_node* %140), !dbg !16941
  br label %cond.end353, !dbg !16941

cond.false346:                                    ; preds = %land.lhs.true333
  %141 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16941
  %common347 = bitcast %union.tree_node* %141 to %struct.tree_common*, !dbg !16941
  %type348 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common347, i32 0, i32 2, !dbg !16941
  %142 = load %union.tree_node*, %union.tree_node** %type348, align 8, !dbg !16941
  %type349 = bitcast %union.tree_node* %142 to %struct.tree_type*, !dbg !16941
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type349, i32 0, i32 6, !dbg !16941
  %bf.load350 = load i32, i32* %mode, align 4, !dbg !16941
  %bf.lshr351 = lshr i32 %bf.load350, 16, !dbg !16941
  %bf.clear352 = and i32 %bf.lshr351, 255, !dbg !16941
  br label %cond.end353, !dbg !16941

cond.end353:                                      ; preds = %cond.false346, %cond.true342
  %cond354 = phi i32 [ %call345, %cond.true342 ], [ %bf.clear352, %cond.false346 ], !dbg !16941
  %idxprom355 = zext i32 %cond354 to i64, !dbg !16941
  %arrayidx356 = getelementptr inbounds [87 x i16], [87 x i16]* @mode_precision, i64 0, i64 %idxprom355, !dbg !16941
  %143 = load i16, i16* %arrayidx356, align 2, !dbg !16941
  %conv357 = zext i16 %143 to i64, !dbg !16941
  %144 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16942
  %exp358 = bitcast %union.tree_node* %144 to %struct.tree_exp*, !dbg !16942
  %operands359 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp358, i32 0, i32 3, !dbg !16942
  %arrayidx360 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands359, i64 0, i64 1, !dbg !16942
  %145 = load %union.tree_node*, %union.tree_node** %arrayidx360, align 8, !dbg !16942
  %int_cst361 = bitcast %union.tree_node* %145 to %struct.tree_int_cst*, !dbg !16942
  %int_cst362 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst361, i32 0, i32 1, !dbg !16942
  %low363 = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst362, i32 0, i32 0, !dbg !16942
  %146 = load i64, i64* %low363, align 8, !dbg !16942
  %cmp364 = icmp ne i64 %conv357, %146, !dbg !16943
  br i1 %cmp364, label %if.then366, label %if.end367, !dbg !16944

if.then366:                                       ; preds = %cond.end353
  call void (i8*, ...) @error(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.140, i64 0, i64 0)), !dbg !16945
  %147 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16947
  store %union.tree_node* %147, %union.tree_node** %retval, align 8, !dbg !16948
  br label %return, !dbg !16948

if.end367:                                        ; preds = %cond.end353, %lor.lhs.false324, %lor.lhs.false315, %if.end306
  br label %if.end368, !dbg !16949

if.end368:                                        ; preds = %if.end367, %if.else244
  br label %if.end369

if.end369:                                        ; preds = %if.end368, %if.end243
  br label %if.end370

if.end370:                                        ; preds = %if.end369, %do.end181
  %148 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16950
  %exp371 = bitcast %union.tree_node* %148 to %struct.tree_exp*, !dbg !16950
  %operands372 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp371, i32 0, i32 3, !dbg !16950
  %arrayidx373 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands372, i64 0, i64 0, !dbg !16950
  %149 = load %union.tree_node*, %union.tree_node** %arrayidx373, align 8, !dbg !16950
  store %union.tree_node* %149, %union.tree_node** %t, align 8, !dbg !16951
  br label %while.cond, !dbg !16858, !llvm.loop !16952

while.end:                                        ; preds = %while.cond
  %150 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16954
  %call374 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %150), !dbg !16956
  %tobool375 = icmp ne i8 %call374, 0, !dbg !16956
  br i1 %tobool375, label %if.end380, label %land.lhs.true376, !dbg !16957

land.lhs.true376:                                 ; preds = %while.end
  %151 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16958
  %call377 = call zeroext i8 @is_gimple_lvalue(%union.tree_node* %151), !dbg !16959
  %tobool378 = icmp ne i8 %call377, 0, !dbg !16959
  br i1 %tobool378, label %if.end380, label %if.then379, !dbg !16960

if.then379:                                       ; preds = %land.lhs.true376
  call void (i8*, ...) @error(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.141, i64 0, i64 0)), !dbg !16961
  %152 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16963
  store %union.tree_node* %152, %union.tree_node** %retval, align 8, !dbg !16964
  br label %return, !dbg !16964

if.end380:                                        ; preds = %land.lhs.true376, %while.end
  %153 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !16965
  store i32 0, i32* %153, align 4, !dbg !16966
  br label %sw.epilog, !dbg !16967

sw.bb381:                                         ; preds = %if.end, %if.end
  %154 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16968
  %common382 = bitcast %union.tree_node* %154 to %struct.tree_common*, !dbg !16968
  %type383 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common382, i32 0, i32 2, !dbg !16968
  %155 = load %union.tree_node*, %union.tree_node** %type383, align 8, !dbg !16968
  %base384 = bitcast %union.tree_node* %155 to %struct.tree_base*, !dbg !16968
  %156 = bitcast %struct.tree_base* %base384 to i64*, !dbg !16968
  %bf.load385 = load i64, i64* %156, align 8, !dbg !16968
  %bf.clear386 = and i64 %bf.load385, 65535, !dbg !16968
  %bf.cast387 = trunc i64 %bf.clear386 to i32, !dbg !16968
  %cmp388 = icmp eq i32 %bf.cast387, 10, !dbg !16968
  br i1 %cmp388, label %if.then399, label %lor.lhs.false390, !dbg !16968

lor.lhs.false390:                                 ; preds = %sw.bb381
  %157 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16968
  %common391 = bitcast %union.tree_node* %157 to %struct.tree_common*, !dbg !16968
  %type392 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common391, i32 0, i32 2, !dbg !16968
  %158 = load %union.tree_node*, %union.tree_node** %type392, align 8, !dbg !16968
  %base393 = bitcast %union.tree_node* %158 to %struct.tree_base*, !dbg !16968
  %159 = bitcast %struct.tree_base* %base393 to i64*, !dbg !16968
  %bf.load394 = load i64, i64* %159, align 8, !dbg !16968
  %bf.clear395 = and i64 %bf.load394, 65535, !dbg !16968
  %bf.cast396 = trunc i64 %bf.clear395 to i32, !dbg !16968
  %cmp397 = icmp eq i32 %bf.cast396, 12, !dbg !16968
  br i1 %cmp397, label %if.then399, label %if.end400, !dbg !16970

if.then399:                                       ; preds = %lor.lhs.false390, %sw.bb381
  call void (i8*, ...) @error(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.142, i64 0, i64 0)), !dbg !16971
  %160 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16973
  store %union.tree_node* %160, %union.tree_node** %retval, align 8, !dbg !16974
  br label %return, !dbg !16974

if.end400:                                        ; preds = %lor.lhs.false390
  br label %do.body401, !dbg !16975

do.body401:                                       ; preds = %if.end400
  %161 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16976
  %exp402 = bitcast %union.tree_node* %161 to %struct.tree_exp*, !dbg !16976
  %operands403 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp402, i32 0, i32 3, !dbg !16976
  %arrayidx404 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands403, i64 0, i64 0, !dbg !16976
  %162 = load %union.tree_node*, %union.tree_node** %arrayidx404, align 8, !dbg !16976
  %call405 = call zeroext i8 @is_gimple_val(%union.tree_node* %162), !dbg !16976
  %tobool406 = icmp ne i8 %call405, 0, !dbg !16976
  br i1 %tobool406, label %if.end411, label %if.then407, !dbg !16979

if.then407:                                       ; preds = %do.body401
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.143, i64 0, i64 0)), !dbg !16980
  %163 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16980
  %exp408 = bitcast %union.tree_node* %163 to %struct.tree_exp*, !dbg !16980
  %operands409 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp408, i32 0, i32 3, !dbg !16980
  %arrayidx410 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands409, i64 0, i64 0, !dbg !16980
  %164 = load %union.tree_node*, %union.tree_node** %arrayidx410, align 8, !dbg !16980
  store %union.tree_node* %164, %union.tree_node** %retval, align 8, !dbg !16980
  br label %return, !dbg !16980

if.end411:                                        ; preds = %do.body401
  br label %do.end412, !dbg !16979

do.end412:                                        ; preds = %if.end411
  br label %do.body413, !dbg !16982

do.body413:                                       ; preds = %do.end412
  %165 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16983
  %exp414 = bitcast %union.tree_node* %165 to %struct.tree_exp*, !dbg !16983
  %operands415 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp414, i32 0, i32 3, !dbg !16983
  %arrayidx416 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands415, i64 0, i64 1, !dbg !16983
  %166 = load %union.tree_node*, %union.tree_node** %arrayidx416, align 8, !dbg !16983
  %call417 = call zeroext i8 @is_gimple_val(%union.tree_node* %166), !dbg !16983
  %tobool418 = icmp ne i8 %call417, 0, !dbg !16983
  br i1 %tobool418, label %if.end423, label %if.then419, !dbg !16986

if.then419:                                       ; preds = %do.body413
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.143, i64 0, i64 0)), !dbg !16987
  %167 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16987
  %exp420 = bitcast %union.tree_node* %167 to %struct.tree_exp*, !dbg !16987
  %operands421 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp420, i32 0, i32 3, !dbg !16987
  %arrayidx422 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands421, i64 0, i64 1, !dbg !16987
  %168 = load %union.tree_node*, %union.tree_node** %arrayidx422, align 8, !dbg !16987
  store %union.tree_node* %168, %union.tree_node** %retval, align 8, !dbg !16987
  br label %return, !dbg !16987

if.end423:                                        ; preds = %do.body413
  br label %do.end424, !dbg !16986

do.end424:                                        ; preds = %if.end423
  br label %sw.epilog, !dbg !16989

sw.bb425:                                         ; preds = %if.end
  %169 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16990
  %exp426 = bitcast %union.tree_node* %169 to %struct.tree_exp*, !dbg !16990
  %operands427 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp426, i32 0, i32 3, !dbg !16990
  %arrayidx428 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands427, i64 0, i64 0, !dbg !16990
  %170 = load %union.tree_node*, %union.tree_node** %arrayidx428, align 8, !dbg !16990
  %common429 = bitcast %union.tree_node* %170 to %struct.tree_common*, !dbg !16990
  %type430 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common429, i32 0, i32 2, !dbg !16990
  %171 = load %union.tree_node*, %union.tree_node** %type430, align 8, !dbg !16990
  %base431 = bitcast %union.tree_node* %171 to %struct.tree_base*, !dbg !16990
  %172 = bitcast %struct.tree_base* %base431 to i64*, !dbg !16990
  %bf.load432 = load i64, i64* %172, align 8, !dbg !16990
  %bf.clear433 = and i64 %bf.load432, 65535, !dbg !16990
  %bf.cast434 = trunc i64 %bf.clear433 to i32, !dbg !16990
  %cmp435 = icmp eq i32 %bf.cast434, 10, !dbg !16990
  br i1 %cmp435, label %if.end450, label %lor.lhs.false437, !dbg !16990

lor.lhs.false437:                                 ; preds = %sw.bb425
  %173 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16990
  %exp438 = bitcast %union.tree_node* %173 to %struct.tree_exp*, !dbg !16990
  %operands439 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp438, i32 0, i32 3, !dbg !16990
  %arrayidx440 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands439, i64 0, i64 0, !dbg !16990
  %174 = load %union.tree_node*, %union.tree_node** %arrayidx440, align 8, !dbg !16990
  %common441 = bitcast %union.tree_node* %174 to %struct.tree_common*, !dbg !16990
  %type442 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common441, i32 0, i32 2, !dbg !16990
  %175 = load %union.tree_node*, %union.tree_node** %type442, align 8, !dbg !16990
  %base443 = bitcast %union.tree_node* %175 to %struct.tree_base*, !dbg !16990
  %176 = bitcast %struct.tree_base* %base443 to i64*, !dbg !16990
  %bf.load444 = load i64, i64* %176, align 8, !dbg !16990
  %bf.clear445 = and i64 %bf.load444, 65535, !dbg !16990
  %bf.cast446 = trunc i64 %bf.clear445 to i32, !dbg !16990
  %cmp447 = icmp eq i32 %bf.cast446, 12, !dbg !16990
  br i1 %cmp447, label %if.end450, label %if.then449, !dbg !16992

if.then449:                                       ; preds = %lor.lhs.false437
  call void (i8*, ...) @error(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.144, i64 0, i64 0)), !dbg !16993
  %177 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16995
  store %union.tree_node* %177, %union.tree_node** %retval, align 8, !dbg !16996
  br label %return, !dbg !16996

if.end450:                                        ; preds = %lor.lhs.false437, %sw.bb425
  %178 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !16997
  %179 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16999
  %exp451 = bitcast %union.tree_node* %179 to %struct.tree_exp*, !dbg !16999
  %operands452 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp451, i32 0, i32 3, !dbg !16999
  %arrayidx453 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands452, i64 0, i64 1, !dbg !16999
  %180 = load %union.tree_node*, %union.tree_node** %arrayidx453, align 8, !dbg !16999
  %common454 = bitcast %union.tree_node* %180 to %struct.tree_common*, !dbg !16999
  %type455 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common454, i32 0, i32 2, !dbg !16999
  %181 = load %union.tree_node*, %union.tree_node** %type455, align 8, !dbg !16999
  %call456 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %178, %union.tree_node* %181), !dbg !17000
  %tobool457 = icmp ne i8 %call456, 0, !dbg !17000
  br i1 %tobool457, label %if.end459, label %if.then458, !dbg !17001

if.then458:                                       ; preds = %if.end450
  call void (i8*, ...) @error(i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.145, i64 0, i64 0)), !dbg !17002
  %182 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17004
  store %union.tree_node* %182, %union.tree_node** %retval, align 8, !dbg !17005
  br label %return, !dbg !17005

if.end459:                                        ; preds = %if.end450
  br label %sw.bb460, !dbg !17006

sw.bb460:                                         ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end459
  br label %do.body461, !dbg !17007

do.body461:                                       ; preds = %sw.bb460
  %183 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17008
  %exp462 = bitcast %union.tree_node* %183 to %struct.tree_exp*, !dbg !17008
  %operands463 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp462, i32 0, i32 3, !dbg !17008
  %arrayidx464 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands463, i64 0, i64 0, !dbg !17008
  %184 = load %union.tree_node*, %union.tree_node** %arrayidx464, align 8, !dbg !17008
  %call465 = call zeroext i8 @is_gimple_val(%union.tree_node* %184), !dbg !17008
  %tobool466 = icmp ne i8 %call465, 0, !dbg !17008
  br i1 %tobool466, label %if.end471, label %if.then467, !dbg !17011

if.then467:                                       ; preds = %do.body461
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.143, i64 0, i64 0)), !dbg !17012
  %185 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17012
  %exp468 = bitcast %union.tree_node* %185 to %struct.tree_exp*, !dbg !17012
  %operands469 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp468, i32 0, i32 3, !dbg !17012
  %arrayidx470 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands469, i64 0, i64 0, !dbg !17012
  %186 = load %union.tree_node*, %union.tree_node** %arrayidx470, align 8, !dbg !17012
  store %union.tree_node* %186, %union.tree_node** %retval, align 8, !dbg !17012
  br label %return, !dbg !17012

if.end471:                                        ; preds = %do.body461
  br label %do.end472, !dbg !17011

do.end472:                                        ; preds = %if.end471
  br label %do.body473, !dbg !17014

do.body473:                                       ; preds = %do.end472
  %187 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17015
  %exp474 = bitcast %union.tree_node* %187 to %struct.tree_exp*, !dbg !17015
  %operands475 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp474, i32 0, i32 3, !dbg !17015
  %arrayidx476 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands475, i64 0, i64 1, !dbg !17015
  %188 = load %union.tree_node*, %union.tree_node** %arrayidx476, align 8, !dbg !17015
  %call477 = call zeroext i8 @is_gimple_val(%union.tree_node* %188), !dbg !17015
  %tobool478 = icmp ne i8 %call477, 0, !dbg !17015
  br i1 %tobool478, label %if.end483, label %if.then479, !dbg !17018

if.then479:                                       ; preds = %do.body473
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.143, i64 0, i64 0)), !dbg !17019
  %189 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17019
  %exp480 = bitcast %union.tree_node* %189 to %struct.tree_exp*, !dbg !17019
  %operands481 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp480, i32 0, i32 3, !dbg !17019
  %arrayidx482 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands481, i64 0, i64 1, !dbg !17019
  %190 = load %union.tree_node*, %union.tree_node** %arrayidx482, align 8, !dbg !17019
  store %union.tree_node* %190, %union.tree_node** %retval, align 8, !dbg !17019
  br label %return, !dbg !17019

if.end483:                                        ; preds = %do.body473
  br label %do.end484, !dbg !17018

do.end484:                                        ; preds = %if.end483
  br label %sw.epilog, !dbg !17021

sw.bb485:                                         ; preds = %if.end
  %191 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17022
  %base486 = bitcast %union.tree_node* %191 to %struct.tree_base*, !dbg !17022
  %192 = bitcast %struct.tree_base* %base486 to i64*, !dbg !17022
  %bf.load487 = load i64, i64* %192, align 8, !dbg !17022
  %bf.lshr488 = lshr i64 %bf.load487, 17, !dbg !17022
  %bf.clear489 = and i64 %bf.lshr488, 1, !dbg !17022
  %bf.cast490 = trunc i64 %bf.clear489 to i32, !dbg !17022
  %tobool491 = icmp ne i32 %bf.cast490, 0, !dbg !17022
  br i1 %tobool491, label %land.lhs.true492, label %if.end502, !dbg !17024

land.lhs.true492:                                 ; preds = %sw.bb485
  %193 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17025
  %common493 = bitcast %union.tree_node* %193 to %struct.tree_common*, !dbg !17025
  %type494 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common493, i32 0, i32 2, !dbg !17025
  %194 = load %union.tree_node*, %union.tree_node** %type494, align 8, !dbg !17025
  %base495 = bitcast %union.tree_node* %194 to %struct.tree_base*, !dbg !17025
  %195 = bitcast %struct.tree_base* %base495 to i64*, !dbg !17025
  %bf.load496 = load i64, i64* %195, align 8, !dbg !17025
  %bf.clear497 = and i64 %bf.load496, 65535, !dbg !17025
  %bf.cast498 = trunc i64 %bf.clear497 to i32, !dbg !17025
  %cmp499 = icmp eq i32 %bf.cast498, 14, !dbg !17026
  br i1 %cmp499, label %if.then501, label %if.end502, !dbg !17027

if.then501:                                       ; preds = %land.lhs.true492
  %196 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !17028
  store i32 0, i32* %196, align 4, !dbg !17029
  br label %if.end502, !dbg !17030

if.end502:                                        ; preds = %if.then501, %land.lhs.true492, %sw.bb485
  br label %sw.epilog, !dbg !17031

sw.default:                                       ; preds = %if.end
  br label %sw.epilog, !dbg !17032

sw.epilog:                                        ; preds = %sw.default, %if.end502, %do.end484, %do.end424, %if.end380, %do.end, %if.end142, %if.end108, %if.end25, %if.end17, %if.end10
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !17033
  br label %return, !dbg !17033

return:                                           ; preds = %sw.epilog, %if.then479, %if.then467, %if.then458, %if.then449, %if.then419, %if.then407, %if.then399, %if.then379, %if.then366, %if.then304, %if.then263, %if.then237, %if.then219, %if.then202, %if.then176, %if.then150, %if.then141, %if.then137, %if.then107, %if.then100, %if.then92, %if.then63, %if.then57, %sw.bb26, %if.then24, %if.then16, %if.then9
  %197 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !17034
  ret %union.tree_node* %197, !dbg !17034
}

declare dso_local void @inform(i32, i8*, ...) #2

declare dso_local i32 @lookup_stmt_eh_lp(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d*) #2

declare dso_local %union.tree_node* @fold(%union.tree_node*) #2

declare dso_local zeroext i8 @is_gimple_address(%union.tree_node*) #2

declare dso_local zeroext i8 @is_gimple_condexpr(%union.tree_node*) #2

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #2

declare dso_local i32 @pointer_set_contains(%struct.pointer_set_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !17035 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !17038, metadata !DIExpression()), !dbg !17039
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !17040
  %3 = load i32, i32* %index, align 8, !dbg !17040
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !17041
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !17041
  %6 = load i32, i32* %5, align 8, !dbg !17041
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !17041
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !17041
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !17041
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !17041
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !17041

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !17041
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !17041
  %11 = load i32, i32* %10, align 8, !dbg !17041
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !17041
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !17041
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !17041
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !17041
  br label %cond.end, !dbg !17041

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !17041

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !17041
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !17041
  %cmp = icmp eq i32 %3, %call2, !dbg !17042
  %conv = zext i1 %cmp to i32, !dbg !17042
  %conv3 = trunc i32 %conv to i8, !dbg !17043
  ret i8 %conv3, !dbg !17044
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !17045 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !17046, metadata !DIExpression()), !dbg !17047
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !17048
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !17048
  %5 = load i32, i32* %4, align 8, !dbg !17048
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !17048
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !17048
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !17048
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !17048
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !17048

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !17048
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !17048
  %10 = load i32, i32* %9, align 8, !dbg !17048
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !17048
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !17048
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !17048
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !17048
  br label %cond.end, !dbg !17048

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !17048

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !17048
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !17048
  %13 = load i32, i32* %index, align 8, !dbg !17048
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !17048
  ret %struct.edge_def* %call2, !dbg !17049
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !17050 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !17053, metadata !DIExpression()), !dbg !17054
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !17055
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !17055
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !17055
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !17055

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.147, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !17055
  br label %cond.end, !dbg !17055

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !17055

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !17055
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !17056
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !17056
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !17057
  ret %struct.VEC_edge_gc* %5, !dbg !17058
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %s) #0 !dbg !17059 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !17062, metadata !DIExpression()), !dbg !17063
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !17064
  %cmp = icmp eq %struct.gimple_seq_d* %0, null, !dbg !17065
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !17066

lor.rhs:                                          ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !17067
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !17068
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !17068
  %cmp1 = icmp eq %struct.gimple_seq_node_d* %2, null, !dbg !17069
  br label %lor.end, !dbg !17066

lor.end:                                          ; preds = %lor.rhs, %entry
  %3 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %3 to i32, !dbg !17066
  %conv = trunc i32 %lor.ext to i8, !dbg !17064
  ret i8 %conv, !dbg !17070
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %bb) #0 !dbg !17071 {
entry:
  %retval = alloca %struct.gimple_seq_d*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !17072, metadata !DIExpression()), !dbg !17073
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !17074
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !17074
  %1 = load i32, i32* %flags, align 8, !dbg !17074
  %and = and i32 %1, 512, !dbg !17074
  %tobool = icmp ne i32 %and, 0, !dbg !17074
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !17074

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.65, i64 0, i64 0), i32 510, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !17074
  br label %cond.end, !dbg !17074

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !17074

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !17074
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !17075
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !17077
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !17078
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !17078
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !17075
  br i1 %tobool1, label %if.end, label %if.then, !dbg !17079

if.then:                                          ; preds = %cond.end
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %retval, align 8, !dbg !17080
  br label %return, !dbg !17080

if.end:                                           ; preds = %cond.end
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !17081
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !17082
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !17083
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !17083
  %phi_nodes = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 1, !dbg !17084
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %phi_nodes, align 8, !dbg !17084
  store %struct.gimple_seq_d* %6, %struct.gimple_seq_d** %retval, align 8, !dbg !17085
  br label %return, !dbg !17085

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %retval, align 8, !dbg !17086
  ret %struct.gimple_seq_d* %7, !dbg !17086
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !17087 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !17090, metadata !DIExpression()), !dbg !17091
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !17092, metadata !DIExpression()), !dbg !17091
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !17091
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !17091
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !17091

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !17091
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !17091
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !17091
  %3 = load i32, i32* %num, align 8, !dbg !17091
  %cmp = icmp ult i32 %1, %3, !dbg !17091
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !17093
  %land.ext = zext i1 %4 to i32, !dbg !17091
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !17091
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !17091
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !17091
  %idxprom = zext i32 %6 to i64, !dbg !17091
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !17091
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !17091
  ret %struct.loop* %7, !dbg !17091
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_heap_reserve(%struct.VEC_basic_block_heap** %vec_, i32 %alloc_) #0 !dbg !17094 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !17097, metadata !DIExpression()), !dbg !17098
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !17099, metadata !DIExpression()), !dbg !17098
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !17100, metadata !DIExpression()), !dbg !17098
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !17098
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %0, align 8, !dbg !17098
  %tobool = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !17098
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !17098

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !17098
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %2, align 8, !dbg !17098
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %3, i32 0, i32 0, !dbg !17098
  br label %cond.end, !dbg !17098

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !17098

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !17098
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !17098
  %call = call i32 @VEC_basic_block_base_space(%struct.VEC_basic_block_base* %cond, i32 %4), !dbg !17098
  %tobool1 = icmp ne i32 %call, 0, !dbg !17098
  %lnot = xor i1 %tobool1, true, !dbg !17098
  %lnot.ext = zext i1 %lnot to i32, !dbg !17098
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !17098
  %5 = load i32, i32* %extend, align 4, !dbg !17101
  %tobool2 = icmp ne i32 %5, 0, !dbg !17101
  br i1 %tobool2, label %if.then, label %if.end, !dbg !17098

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !17101
  %7 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %6, align 8, !dbg !17101
  %8 = bitcast %struct.VEC_basic_block_heap* %7 to i8*, !dbg !17101
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !17101
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !17101
  %10 = bitcast i8* %call3 to %struct.VEC_basic_block_heap*, !dbg !17101
  %11 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !17101
  store %struct.VEC_basic_block_heap* %10, %struct.VEC_basic_block_heap** %11, align 8, !dbg !17101
  br label %if.end, !dbg !17101

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !17098
  ret i32 %12, !dbg !17098
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def** @VEC_basic_block_base_quick_push(%struct.VEC_basic_block_base* %vec_, %struct.basic_block_def* %obj_) #0 !dbg !17103 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %obj_.addr = alloca %struct.basic_block_def*, align 8
  %slot_ = alloca %struct.basic_block_def**, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !17106, metadata !DIExpression()), !dbg !17107
  store %struct.basic_block_def* %obj_, %struct.basic_block_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_.addr, metadata !17108, metadata !DIExpression()), !dbg !17107
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %slot_, metadata !17109, metadata !DIExpression()), !dbg !17107
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !17107
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %0, i32 0, i32 0, !dbg !17107
  %1 = load i32, i32* %num, align 8, !dbg !17107
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !17107
  %alloc = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 1, !dbg !17107
  %3 = load i32, i32* %alloc, align 4, !dbg !17107
  %cmp = icmp ult i32 %1, %3, !dbg !17107
  %conv = zext i1 %cmp to i32, !dbg !17107
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !17107
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 2, !dbg !17107
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !17107
  %num1 = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 0, !dbg !17107
  %6 = load i32, i32* %num1, align 8, !dbg !17107
  %inc = add i32 %6, 1, !dbg !17107
  store i32 %inc, i32* %num1, align 8, !dbg !17107
  %idxprom = zext i32 %6 to i64, !dbg !17107
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !17107
  store %struct.basic_block_def** %arrayidx, %struct.basic_block_def*** %slot_, align 8, !dbg !17107
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_.addr, align 8, !dbg !17107
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %slot_, align 8, !dbg !17107
  store %struct.basic_block_def* %7, %struct.basic_block_def** %8, align 8, !dbg !17107
  %9 = load %struct.basic_block_def**, %struct.basic_block_def*** %slot_, align 8, !dbg !17107
  ret %struct.basic_block_def** %9, !dbg !17107
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !17110 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !17111, metadata !DIExpression()), !dbg !17112
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !17113
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !17113
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !17113
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !17113
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !17113

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !17113
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !17113
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !17113
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !17113
  br label %cond.end, !dbg !17113

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !17113

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !17113
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !17113
  %cmp = icmp eq i32 %call, 1, !dbg !17114
  %conv = zext i1 %cmp to i32, !dbg !17114
  %conv2 = trunc i32 %conv to i8, !dbg !17113
  ret i8 %conv2, !dbg !17115
}

declare dso_local i32 @lookup_stmt_eh_lp_fn(%struct.function*, %union.gimple_statement_d*) #2

declare dso_local %struct.eh_region_d* @get_eh_region_from_lp_number_fn(%struct.function*, i32) #2

declare dso_local %struct.eh_region_d* @eh_region_outermost(%struct.function*, %struct.eh_region_d*, %struct.eh_region_d*) #2

declare dso_local void @delete_from_dominance_info(i32, %struct.basic_block_def*) #2

declare dso_local void @remove_bb_from_loops(%struct.basic_block_def*) #2

declare dso_local zeroext i8 @move_block_after(%struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !17116 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !17119, metadata !DIExpression()), !dbg !17120
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !17121
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !17122
  ret %union.tree_node* %1, !dbg !17123
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) #0 !dbg !17124 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !17125, metadata !DIExpression()), !dbg !17126
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !17127
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !17128
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !17129
  ret %union.tree_node** %result, !dbg !17130
}

declare dso_local void @remove_phi_node(%struct.gimple_stmt_iterator*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @replace_ssa_name(%union.tree_node* %name, %struct.pointer_map_t* %vars_map, %union.tree_node* %to_context) #0 !dbg !17131 {
entry:
  %name.addr = alloca %union.tree_node*, align 8
  %vars_map.addr = alloca %struct.pointer_map_t*, align 8
  %to_context.addr = alloca %union.tree_node*, align 8
  %loc = alloca i8**, align 8
  %new_name = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !17134, metadata !DIExpression()), !dbg !17135
  store %struct.pointer_map_t* %vars_map, %struct.pointer_map_t** %vars_map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t** %vars_map.addr, metadata !17136, metadata !DIExpression()), !dbg !17137
  store %union.tree_node* %to_context, %union.tree_node** %to_context.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %to_context.addr, metadata !17138, metadata !DIExpression()), !dbg !17139
  call void @llvm.dbg.declare(metadata i8*** %loc, metadata !17140, metadata !DIExpression()), !dbg !17141
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_name, metadata !17142, metadata !DIExpression()), !dbg !17143
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !17144, metadata !DIExpression()), !dbg !17145
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !17146
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !17146
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !17146
  %1 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !17146
  store %union.tree_node* %1, %union.tree_node** %decl, align 8, !dbg !17145
  %2 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !17147
  %call = call zeroext i8 @is_gimple_reg(%union.tree_node* %2), !dbg !17147
  %tobool = icmp ne i8 %call, 0, !dbg !17147
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !17147

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5447, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !17147
  br label %cond.end, !dbg !17147

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !17147

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !17147
  %3 = load %struct.pointer_map_t*, %struct.pointer_map_t** %vars_map.addr, align 8, !dbg !17148
  %4 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !17149
  %5 = bitcast %union.tree_node* %4 to i8*, !dbg !17149
  %call1 = call i8** @pointer_map_contains(%struct.pointer_map_t* %3, i8* %5), !dbg !17150
  store i8** %call1, i8*** %loc, align 8, !dbg !17151
  %6 = load i8**, i8*** %loc, align 8, !dbg !17152
  %tobool2 = icmp ne i8** %6, null, !dbg !17152
  br i1 %tobool2, label %if.else, label %if.then, !dbg !17154

if.then:                                          ; preds = %cond.end
  %7 = load %struct.pointer_map_t*, %struct.pointer_map_t** %vars_map.addr, align 8, !dbg !17155
  %8 = load %union.tree_node*, %union.tree_node** %to_context.addr, align 8, !dbg !17157
  call void @replace_by_duplicate_decl(%union.tree_node** %decl, %struct.pointer_map_t* %7, %union.tree_node* %8), !dbg !17158
  %9 = load %union.tree_node*, %union.tree_node** %to_context.addr, align 8, !dbg !17159
  %function_decl = bitcast %union.tree_node* %9 to %struct.tree_function_decl*, !dbg !17159
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !17159
  %10 = load %struct.function*, %struct.function** %f, align 8, !dbg !17159
  call void @push_cfun(%struct.function* %10), !dbg !17160
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !17161
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !17161
  %call3 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr), !dbg !17163
  %tobool4 = icmp ne i8 %call3, 0, !dbg !17163
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !17164

if.then5:                                         ; preds = %if.then
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !17165
  %call6 = call zeroext i8 @add_referenced_var(%union.tree_node* %12), !dbg !17166
  br label %if.end, !dbg !17166

if.end:                                           ; preds = %if.then5, %if.then
  %13 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !17167
  %14 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !17168
  %ssa_name7 = bitcast %union.tree_node* %14 to %struct.tree_ssa_name*, !dbg !17168
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name7, i32 0, i32 2, !dbg !17168
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !17168
  %call8 = call %union.tree_node* @make_ssa_name(%union.tree_node* %13, %union.gimple_statement_d* %15), !dbg !17169
  store %union.tree_node* %call8, %union.tree_node** %new_name, align 8, !dbg !17170
  %16 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !17171
  %base = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !17171
  %17 = bitcast %struct.tree_base* %base to i64*, !dbg !17171
  %bf.load = load i64, i64* %17, align 8, !dbg !17171
  %bf.lshr = lshr i64 %bf.load, 32, !dbg !17171
  %bf.clear = and i64 %bf.lshr, 1, !dbg !17171
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !17171
  %tobool9 = icmp ne i32 %bf.cast, 0, !dbg !17171
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !17173

if.then10:                                        ; preds = %if.end
  %18 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !17174
  %19 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !17175
  call void @set_default_def(%union.tree_node* %18, %union.tree_node* %19), !dbg !17176
  br label %if.end11, !dbg !17176

if.end11:                                         ; preds = %if.then10, %if.end
  call void @pop_cfun(), !dbg !17177
  %20 = load %struct.pointer_map_t*, %struct.pointer_map_t** %vars_map.addr, align 8, !dbg !17178
  %21 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !17179
  %22 = bitcast %union.tree_node* %21 to i8*, !dbg !17179
  %call12 = call i8** @pointer_map_insert(%struct.pointer_map_t* %20, i8* %22), !dbg !17180
  store i8** %call12, i8*** %loc, align 8, !dbg !17181
  %23 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !17182
  %24 = bitcast %union.tree_node* %23 to i8*, !dbg !17182
  %25 = load i8**, i8*** %loc, align 8, !dbg !17183
  store i8* %24, i8** %25, align 8, !dbg !17184
  br label %if.end13, !dbg !17185

if.else:                                          ; preds = %cond.end
  %26 = load i8**, i8*** %loc, align 8, !dbg !17186
  %27 = load i8*, i8** %26, align 8, !dbg !17187
  %28 = bitcast i8* %27 to %union.tree_node*, !dbg !17188
  store %union.tree_node* %28, %union.tree_node** %new_name, align 8, !dbg !17189
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.end11
  %29 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !17190
  ret %union.tree_node* %29, !dbg !17191
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #0 !dbg !17192 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !17195, metadata !DIExpression()), !dbg !17196
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !17197, metadata !DIExpression()), !dbg !17198
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !17199
  call void @delink_imm_use(%struct.ssa_use_operand_d* %0), !dbg !17200
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !17201
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !17202
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 3, !dbg !17203
  %3 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !17203
  store %union.tree_node* %1, %union.tree_node** %3, align 8, !dbg !17204
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !17205
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !17206
  call void @link_imm_use(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !17207
  ret void, !dbg !17208
}

declare dso_local %union.tree_node* @walk_gimple_stmt(%struct.gimple_stmt_iterator*, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, %struct.walk_stmt_info*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @move_stmt_r(%struct.gimple_stmt_iterator* %gsi_p, i8* %handled_ops_p, %struct.walk_stmt_info* %wi) #0 !dbg !17209 {
entry:
  %gsi_p.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %handled_ops_p.addr = alloca i8*, align 8
  %wi.addr = alloca %struct.walk_stmt_info*, align 8
  %p = alloca %struct.move_stmt_d*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %block = alloca %union.tree_node*, align 8
  %r = alloca %union.tree_node*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %r21 = alloca i32, align 4
  %r25 = alloca i32, align 4
  %save_remap_decls_p = alloca i8, align 1
  store %struct.gimple_stmt_iterator* %gsi_p, %struct.gimple_stmt_iterator** %gsi_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi_p.addr, metadata !17212, metadata !DIExpression()), !dbg !17213
  store i8* %handled_ops_p, i8** %handled_ops_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %handled_ops_p.addr, metadata !17214, metadata !DIExpression()), !dbg !17215
  store %struct.walk_stmt_info* %wi, %struct.walk_stmt_info** %wi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi.addr, metadata !17216, metadata !DIExpression()), !dbg !17217
  call void @llvm.dbg.declare(metadata %struct.move_stmt_d** %p, metadata !17218, metadata !DIExpression()), !dbg !17219
  %0 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !17220
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %0, i32 0, i32 1, !dbg !17221
  %1 = load i8*, i8** %info, align 8, !dbg !17221
  %2 = bitcast i8* %1 to %struct.move_stmt_d*, !dbg !17222
  store %struct.move_stmt_d* %2, %struct.move_stmt_d** %p, align 8, !dbg !17219
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !17223, metadata !DIExpression()), !dbg !17224
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi_p.addr, align 8, !dbg !17225
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %3), !dbg !17226
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !17224
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !17227, metadata !DIExpression()), !dbg !17228
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !17229
  %call1 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %4), !dbg !17230
  store %union.tree_node* %call1, %union.tree_node** %block, align 8, !dbg !17228
  %5 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p, align 8, !dbg !17231
  %orig_block = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %5, i32 0, i32 0, !dbg !17233
  %6 = load %union.tree_node*, %union.tree_node** %orig_block, align 8, !dbg !17233
  %cmp = icmp eq %union.tree_node* %6, null, !dbg !17234
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !17235

lor.lhs.false:                                    ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !17236
  %8 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p, align 8, !dbg !17237
  %orig_block2 = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %8, i32 0, i32 0, !dbg !17238
  %9 = load %union.tree_node*, %union.tree_node** %orig_block2, align 8, !dbg !17238
  %cmp3 = icmp eq %union.tree_node* %7, %9, !dbg !17239
  br i1 %cmp3, label %if.then, label %lor.lhs.false4, !dbg !17240

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %10 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !17241
  %cmp5 = icmp eq %union.tree_node* %10, null, !dbg !17242
  br i1 %cmp5, label %if.then, label %if.end, !dbg !17243

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false, %entry
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !17244
  %12 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p, align 8, !dbg !17245
  %new_block = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %12, i32 0, i32 1, !dbg !17246
  %13 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !17246
  call void @gimple_set_block(%union.gimple_statement_d* %11, %union.tree_node* %13), !dbg !17247
  br label %if.end, !dbg !17247

if.end:                                           ; preds = %if.then, %lor.lhs.false4
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !17248
  %call6 = call i32 @gimple_code(%union.gimple_statement_d* %14), !dbg !17249
  switch i32 %call6, label %sw.default29 [
    i32 8, label %sw.bb
    i32 14, label %sw.bb20
    i32 15, label %sw.bb24
    i32 28, label %sw.bb28
    i32 21, label %sw.bb28
  ], !dbg !17250

sw.bb:                                            ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %r, metadata !17251, metadata !DIExpression()), !dbg !17254
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !17255, metadata !DIExpression()), !dbg !17256
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !17257
  %call7 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %15), !dbg !17258
  store %union.tree_node* %call7, %union.tree_node** %fndecl, align 8, !dbg !17256
  %16 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !17259
  %tobool = icmp ne %union.tree_node* %16, null, !dbg !17259
  br i1 %tobool, label %land.lhs.true, label %if.end19, !dbg !17261

land.lhs.true:                                    ; preds = %sw.bb
  %17 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !17262
  %function_decl = bitcast %union.tree_node* %17 to %struct.tree_function_decl*, !dbg !17262
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !17262
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !17262
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !17262
  %bf.clear = and i32 %bf.lshr, 3, !dbg !17262
  %cmp8 = icmp eq i32 %bf.clear, 3, !dbg !17263
  br i1 %cmp8, label %if.then9, label %if.end19, !dbg !17264

if.then9:                                         ; preds = %land.lhs.true
  %18 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !17265
  %function_decl10 = bitcast %union.tree_node* %18 to %struct.tree_function_decl*, !dbg !17265
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl10, i32 0, i32 5, !dbg !17265
  %bf.load11 = load i32, i32* %function_code, align 8, !dbg !17265
  %bf.clear12 = and i32 %bf.load11, 2047, !dbg !17265
  switch i32 %bf.clear12, label %sw.default [
    i32 554, label %sw.bb13
    i32 552, label %sw.bb16
    i32 553, label %sw.bb16
  ], !dbg !17266

sw.bb13:                                          ; preds = %if.then9
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !17267
  %call14 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %19, i32 1), !dbg !17269
  store %union.tree_node* %call14, %union.tree_node** %r, align 8, !dbg !17270
  %20 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !17271
  %21 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p, align 8, !dbg !17272
  %call15 = call %union.tree_node* @move_stmt_eh_region_tree_nr(%union.tree_node* %20, %struct.move_stmt_d* %21), !dbg !17273
  store %union.tree_node* %call15, %union.tree_node** %r, align 8, !dbg !17274
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !17275
  %23 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !17276
  call void @gimple_call_set_arg(%union.gimple_statement_d* %22, i32 1, %union.tree_node* %23), !dbg !17277
  br label %sw.bb16, !dbg !17277

sw.bb16:                                          ; preds = %if.then9, %if.then9, %sw.bb13
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !17278
  %call17 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %24, i32 0), !dbg !17279
  store %union.tree_node* %call17, %union.tree_node** %r, align 8, !dbg !17280
  %25 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !17281
  %26 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p, align 8, !dbg !17282
  %call18 = call %union.tree_node* @move_stmt_eh_region_tree_nr(%union.tree_node* %25, %struct.move_stmt_d* %26), !dbg !17283
  store %union.tree_node* %call18, %union.tree_node** %r, align 8, !dbg !17284
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !17285
  %28 = load %union.tree_node*, %union.tree_node** %r, align 8, !dbg !17286
  call void @gimple_call_set_arg(%union.gimple_statement_d* %27, i32 0, %union.tree_node* %28), !dbg !17287
  br label %sw.epilog, !dbg !17288

sw.default:                                       ; preds = %if.then9
  br label %sw.epilog, !dbg !17289

sw.epilog:                                        ; preds = %sw.default, %sw.bb16
  br label %if.end19, !dbg !17290

if.end19:                                         ; preds = %sw.epilog, %land.lhs.true, %sw.bb
  br label %sw.epilog38, !dbg !17291

sw.bb20:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %r21, metadata !17292, metadata !DIExpression()), !dbg !17294
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !17295
  %call22 = call i32 @gimple_resx_region(%union.gimple_statement_d* %29), !dbg !17296
  store i32 %call22, i32* %r21, align 4, !dbg !17294
  %30 = load i32, i32* %r21, align 4, !dbg !17297
  %31 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p, align 8, !dbg !17298
  %call23 = call i32 @move_stmt_eh_region_nr(i32 %30, %struct.move_stmt_d* %31), !dbg !17299
  store i32 %call23, i32* %r21, align 4, !dbg !17300
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !17301
  %33 = load i32, i32* %r21, align 4, !dbg !17302
  call void @gimple_resx_set_region(%union.gimple_statement_d* %32, i32 %33), !dbg !17303
  br label %sw.epilog38, !dbg !17304

sw.bb24:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %r25, metadata !17305, metadata !DIExpression()), !dbg !17307
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !17308
  %call26 = call i32 @gimple_eh_dispatch_region(%union.gimple_statement_d* %34), !dbg !17309
  store i32 %call26, i32* %r25, align 4, !dbg !17307
  %35 = load i32, i32* %r25, align 4, !dbg !17310
  %36 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p, align 8, !dbg !17311
  %call27 = call i32 @move_stmt_eh_region_nr(i32 %35, %struct.move_stmt_d* %36), !dbg !17312
  store i32 %call27, i32* %r25, align 4, !dbg !17313
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !17314
  %38 = load i32, i32* %r25, align 4, !dbg !17315
  call void @gimple_eh_dispatch_set_region(%union.gimple_statement_d* %37, i32 %38), !dbg !17316
  br label %sw.epilog38, !dbg !17317

sw.bb28:                                          ; preds = %if.end, %if.end
  br label %sw.epilog38, !dbg !17318

sw.default29:                                     ; preds = %if.end
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !17319
  %call30 = call zeroext i8 @is_gimple_omp(%union.gimple_statement_d* %39), !dbg !17321
  %tobool31 = icmp ne i8 %call30, 0, !dbg !17321
  br i1 %tobool31, label %if.then32, label %if.end37, !dbg !17322

if.then32:                                        ; preds = %sw.default29
  call void @llvm.dbg.declare(metadata i8* %save_remap_decls_p, metadata !17323, metadata !DIExpression()), !dbg !17325
  %40 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p, align 8, !dbg !17326
  %remap_decls_p = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %40, i32 0, i32 7, !dbg !17327
  %41 = load i8, i8* %remap_decls_p, align 8, !dbg !17327
  store i8 %41, i8* %save_remap_decls_p, align 1, !dbg !17325
  %42 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p, align 8, !dbg !17328
  %remap_decls_p33 = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %42, i32 0, i32 7, !dbg !17329
  store i8 0, i8* %remap_decls_p33, align 8, !dbg !17330
  %43 = load i8*, i8** %handled_ops_p.addr, align 8, !dbg !17331
  store i8 1, i8* %43, align 1, !dbg !17332
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !17333
  %call34 = call %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %44), !dbg !17334
  %45 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi.addr, align 8, !dbg !17335
  %call35 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %call34, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* @move_stmt_r, %union.tree_node* (%union.tree_node**, i32*, i8*)* @move_stmt_op, %struct.walk_stmt_info* %45), !dbg !17336
  %46 = load i8, i8* %save_remap_decls_p, align 1, !dbg !17337
  %47 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p, align 8, !dbg !17338
  %remap_decls_p36 = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %47, i32 0, i32 7, !dbg !17339
  store i8 %46, i8* %remap_decls_p36, align 8, !dbg !17340
  br label %if.end37, !dbg !17341

if.end37:                                         ; preds = %if.then32, %sw.default29
  br label %sw.epilog38, !dbg !17342

sw.epilog38:                                      ; preds = %if.end37, %sw.bb28, %sw.bb24, %sw.bb20, %if.end19
  ret %union.tree_node* null, !dbg !17343
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @move_stmt_op(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !17344 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %wi = alloca %struct.walk_stmt_info*, align 8
  %p = alloca %struct.move_stmt_d*, align 8
  %t = alloca %union.tree_node*, align 8
  %in = alloca %struct.tree_map, align 8
  %out = alloca %struct.tree_map*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !17345, metadata !DIExpression()), !dbg !17346
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !17347, metadata !DIExpression()), !dbg !17348
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !17349, metadata !DIExpression()), !dbg !17350
  call void @llvm.dbg.declare(metadata %struct.walk_stmt_info** %wi, metadata !17351, metadata !DIExpression()), !dbg !17352
  %0 = load i8*, i8** %data.addr, align 8, !dbg !17353
  %1 = bitcast i8* %0 to %struct.walk_stmt_info*, !dbg !17354
  store %struct.walk_stmt_info* %1, %struct.walk_stmt_info** %wi, align 8, !dbg !17352
  call void @llvm.dbg.declare(metadata %struct.move_stmt_d** %p, metadata !17355, metadata !DIExpression()), !dbg !17356
  %2 = load %struct.walk_stmt_info*, %struct.walk_stmt_info** %wi, align 8, !dbg !17357
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %2, i32 0, i32 1, !dbg !17358
  %3 = load i8*, i8** %info, align 8, !dbg !17358
  %4 = bitcast i8* %3 to %struct.move_stmt_d*, !dbg !17359
  store %struct.move_stmt_d* %4, %struct.move_stmt_d** %p, align 8, !dbg !17356
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !17360, metadata !DIExpression()), !dbg !17361
  %5 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !17362
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !17363
  store %union.tree_node* %6, %union.tree_node** %t, align 8, !dbg !17361
  %7 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17364
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !17364
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !17364
  %bf.load = load i64, i64* %8, align 8, !dbg !17364
  %bf.clear = and i64 %bf.load, 65535, !dbg !17364
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !17364
  %idxprom = sext i32 %bf.cast to i64, !dbg !17364
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !17364
  %9 = load i32, i32* %arrayidx, align 4, !dbg !17364
  %cmp = icmp uge i32 %9, 4, !dbg !17364
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !17364

land.lhs.true:                                    ; preds = %entry
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17364
  %base1 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !17364
  %11 = bitcast %struct.tree_base* %base1 to i64*, !dbg !17364
  %bf.load2 = load i64, i64* %11, align 8, !dbg !17364
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !17364
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !17364
  %idxprom5 = sext i32 %bf.cast4 to i64, !dbg !17364
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !17364
  %12 = load i32, i32* %arrayidx6, align 4, !dbg !17364
  %cmp7 = icmp ule i32 %12, 10, !dbg !17364
  br i1 %cmp7, label %if.then, label %if.else, !dbg !17366

if.then:                                          ; preds = %land.lhs.true
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17367
  %call = call %union.tree_node** @tree_block(%union.tree_node* %13), !dbg !17367
  %14 = load %union.tree_node*, %union.tree_node** %call, align 8, !dbg !17367
  %tobool = icmp ne %union.tree_node* %14, null, !dbg !17367
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !17367

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5498, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !17367
  br label %cond.end, !dbg !17367

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !17367

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !17367
  br label %if.end133, !dbg !17367

if.else:                                          ; preds = %land.lhs.true, %entry
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17368
  %base8 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !17368
  %16 = bitcast %struct.tree_base* %base8 to i64*, !dbg !17368
  %bf.load9 = load i64, i64* %16, align 8, !dbg !17368
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !17368
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !17368
  %idxprom12 = sext i32 %bf.cast11 to i64, !dbg !17368
  %arrayidx13 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom12, !dbg !17368
  %17 = load i32, i32* %arrayidx13, align 4, !dbg !17368
  %cmp14 = icmp eq i32 %17, 3, !dbg !17368
  br i1 %cmp14, label %if.then20, label %lor.lhs.false, !dbg !17370

lor.lhs.false:                                    ; preds = %if.else
  %18 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17371
  %base15 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !17371
  %19 = bitcast %struct.tree_base* %base15 to i64*, !dbg !17371
  %bf.load16 = load i64, i64* %19, align 8, !dbg !17371
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !17371
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !17371
  %cmp19 = icmp eq i32 %bf.cast18, 141, !dbg !17372
  br i1 %cmp19, label %if.then20, label %if.else121, !dbg !17373

if.then20:                                        ; preds = %lor.lhs.false, %if.else
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17374
  %base21 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !17374
  %21 = bitcast %struct.tree_base* %base21 to i64*, !dbg !17374
  %bf.load22 = load i64, i64* %21, align 8, !dbg !17374
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !17374
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !17374
  %cmp25 = icmp eq i32 %bf.cast24, 141, !dbg !17377
  br i1 %cmp25, label %if.then26, label %if.else28, !dbg !17378

if.then26:                                        ; preds = %if.then20
  %22 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17379
  %23 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p, align 8, !dbg !17380
  %vars_map = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %23, i32 0, i32 4, !dbg !17381
  %24 = load %struct.pointer_map_t*, %struct.pointer_map_t** %vars_map, align 8, !dbg !17381
  %25 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p, align 8, !dbg !17382
  %to_context = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %25, i32 0, i32 3, !dbg !17383
  %26 = load %union.tree_node*, %union.tree_node** %to_context, align 8, !dbg !17383
  %call27 = call %union.tree_node* @replace_ssa_name(%union.tree_node* %22, %struct.pointer_map_t* %24, %union.tree_node* %26), !dbg !17384
  %27 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !17385
  store %union.tree_node* %call27, %union.tree_node** %27, align 8, !dbg !17386
  br label %if.end120, !dbg !17387

if.else28:                                        ; preds = %if.then20
  %28 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17388
  %base29 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !17388
  %29 = bitcast %struct.tree_base* %base29 to i64*, !dbg !17388
  %bf.load30 = load i64, i64* %29, align 8, !dbg !17388
  %bf.clear31 = and i64 %bf.load30, 65535, !dbg !17388
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !17388
  %cmp33 = icmp eq i32 %bf.cast32, 30, !dbg !17390
  br i1 %cmp33, label %if.then34, label %if.else45, !dbg !17391

if.then34:                                        ; preds = %if.else28
  %30 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p, align 8, !dbg !17392
  %new_label_map = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %30, i32 0, i32 5, !dbg !17395
  %31 = load %struct.htab*, %struct.htab** %new_label_map, align 8, !dbg !17395
  %tobool35 = icmp ne %struct.htab* %31, null, !dbg !17392
  br i1 %tobool35, label %if.then36, label %if.end42, !dbg !17396

if.then36:                                        ; preds = %if.then34
  call void @llvm.dbg.declare(metadata %struct.tree_map* %in, metadata !17397, metadata !DIExpression()), !dbg !17399
  call void @llvm.dbg.declare(metadata %struct.tree_map** %out, metadata !17400, metadata !DIExpression()), !dbg !17401
  %32 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17402
  %base37 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %in, i32 0, i32 0, !dbg !17403
  %from = getelementptr inbounds %struct.tree_map_base, %struct.tree_map_base* %base37, i32 0, i32 0, !dbg !17404
  store %union.tree_node* %32, %union.tree_node** %from, align 8, !dbg !17405
  %33 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p, align 8, !dbg !17406
  %new_label_map38 = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %33, i32 0, i32 5, !dbg !17407
  %34 = load %struct.htab*, %struct.htab** %new_label_map38, align 8, !dbg !17407
  %35 = bitcast %struct.tree_map* %in to i8*, !dbg !17408
  %36 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17409
  %decl_minimal = bitcast %union.tree_node* %36 to %struct.tree_decl_minimal*, !dbg !17409
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !17409
  %37 = load i32, i32* %uid, align 4, !dbg !17409
  %call39 = call i8* @htab_find_with_hash(%struct.htab* %34, i8* %35, i32 %37), !dbg !17410
  %38 = bitcast i8* %call39 to %struct.tree_map*, !dbg !17411
  store %struct.tree_map* %38, %struct.tree_map** %out, align 8, !dbg !17412
  %39 = load %struct.tree_map*, %struct.tree_map** %out, align 8, !dbg !17413
  %tobool40 = icmp ne %struct.tree_map* %39, null, !dbg !17413
  br i1 %tobool40, label %if.then41, label %if.end, !dbg !17415

if.then41:                                        ; preds = %if.then36
  %40 = load %struct.tree_map*, %struct.tree_map** %out, align 8, !dbg !17416
  %to = getelementptr inbounds %struct.tree_map, %struct.tree_map* %40, i32 0, i32 2, !dbg !17417
  %41 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !17417
  store %union.tree_node* %41, %union.tree_node** %t, align 8, !dbg !17418
  %42 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !17419
  store %union.tree_node* %41, %union.tree_node** %42, align 8, !dbg !17420
  br label %if.end, !dbg !17421

if.end:                                           ; preds = %if.then41, %if.then36
  br label %if.end42, !dbg !17422

if.end42:                                         ; preds = %if.end, %if.then34
  %43 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p, align 8, !dbg !17423
  %to_context43 = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %43, i32 0, i32 3, !dbg !17424
  %44 = load %union.tree_node*, %union.tree_node** %to_context43, align 8, !dbg !17424
  %45 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17425
  %decl_minimal44 = bitcast %union.tree_node* %45 to %struct.tree_decl_minimal*, !dbg !17425
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal44, i32 0, i32 4, !dbg !17425
  store %union.tree_node* %44, %union.tree_node** %context, align 8, !dbg !17426
  br label %if.end119, !dbg !17427

if.else45:                                        ; preds = %if.else28
  %46 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p, align 8, !dbg !17428
  %remap_decls_p = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %46, i32 0, i32 7, !dbg !17430
  %47 = load i8, i8* %remap_decls_p, align 8, !dbg !17430
  %tobool46 = icmp ne i8 %47, 0, !dbg !17428
  br i1 %tobool46, label %if.then47, label %if.end118, !dbg !17431

if.then47:                                        ; preds = %if.else45
  %48 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17432
  %base48 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !17432
  %49 = bitcast %struct.tree_base* %base48 to i64*, !dbg !17432
  %bf.load49 = load i64, i64* %49, align 8, !dbg !17432
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !17432
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !17432
  %cmp52 = icmp eq i32 %bf.cast51, 32, !dbg !17435
  br i1 %cmp52, label %land.lhs.true53, label %lor.lhs.false56, !dbg !17436

land.lhs.true53:                                  ; preds = %if.then47
  %50 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17437
  %call54 = call zeroext i8 @is_global_var(%union.tree_node* %50), !dbg !17438
  %tobool55 = icmp ne i8 %call54, 0, !dbg !17438
  br i1 %tobool55, label %lor.lhs.false56, label %if.then62, !dbg !17439

lor.lhs.false56:                                  ; preds = %land.lhs.true53, %if.then47
  %51 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17440
  %base57 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !17440
  %52 = bitcast %struct.tree_base* %base57 to i64*, !dbg !17440
  %bf.load58 = load i64, i64* %52, align 8, !dbg !17440
  %bf.clear59 = and i64 %bf.load58, 65535, !dbg !17440
  %bf.cast60 = trunc i64 %bf.clear59 to i32, !dbg !17440
  %cmp61 = icmp eq i32 %bf.cast60, 33, !dbg !17441
  br i1 %cmp61, label %if.then62, label %if.end65, !dbg !17442

if.then62:                                        ; preds = %lor.lhs.false56, %land.lhs.true53
  %53 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !17443
  %54 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p, align 8, !dbg !17444
  %vars_map63 = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %54, i32 0, i32 4, !dbg !17445
  %55 = load %struct.pointer_map_t*, %struct.pointer_map_t** %vars_map63, align 8, !dbg !17445
  %56 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p, align 8, !dbg !17446
  %to_context64 = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %56, i32 0, i32 3, !dbg !17447
  %57 = load %union.tree_node*, %union.tree_node** %to_context64, align 8, !dbg !17447
  call void @replace_by_duplicate_decl(%union.tree_node** %53, %struct.pointer_map_t* %55, %union.tree_node* %57), !dbg !17448
  br label %if.end65, !dbg !17448

if.end65:                                         ; preds = %if.then62, %lor.lhs.false56
  %58 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17449
  %base66 = bitcast %union.tree_node* %58 to %struct.tree_base*, !dbg !17449
  %59 = bitcast %struct.tree_base* %base66 to i64*, !dbg !17449
  %bf.load67 = load i64, i64* %59, align 8, !dbg !17449
  %bf.clear68 = and i64 %bf.load67, 65535, !dbg !17449
  %bf.cast69 = trunc i64 %bf.clear68 to i32, !dbg !17449
  %cmp70 = icmp eq i32 %bf.cast69, 32, !dbg !17449
  br i1 %cmp70, label %land.lhs.true111, label %lor.lhs.false71, !dbg !17449

lor.lhs.false71:                                  ; preds = %if.end65
  %60 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17449
  %base72 = bitcast %union.tree_node* %60 to %struct.tree_base*, !dbg !17449
  %61 = bitcast %struct.tree_base* %base72 to i64*, !dbg !17449
  %bf.load73 = load i64, i64* %61, align 8, !dbg !17449
  %bf.clear74 = and i64 %bf.load73, 65535, !dbg !17449
  %bf.cast75 = trunc i64 %bf.clear74 to i32, !dbg !17449
  %cmp76 = icmp eq i32 %bf.cast75, 34, !dbg !17449
  br i1 %cmp76, label %land.lhs.true111, label %lor.lhs.false77, !dbg !17449

lor.lhs.false77:                                  ; preds = %lor.lhs.false71
  %62 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17449
  %base78 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !17449
  %63 = bitcast %struct.tree_base* %base78 to i64*, !dbg !17449
  %bf.load79 = load i64, i64* %63, align 8, !dbg !17449
  %bf.clear80 = and i64 %bf.load79, 65535, !dbg !17449
  %bf.cast81 = trunc i64 %bf.clear80 to i32, !dbg !17449
  %cmp82 = icmp eq i32 %bf.cast81, 36, !dbg !17449
  br i1 %cmp82, label %land.lhs.true111, label %lor.lhs.false83, !dbg !17449

lor.lhs.false83:                                  ; preds = %lor.lhs.false77
  %64 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17449
  %base84 = bitcast %union.tree_node* %64 to %struct.tree_base*, !dbg !17449
  %65 = bitcast %struct.tree_base* %base84 to i64*, !dbg !17449
  %bf.load85 = load i64, i64* %65, align 8, !dbg !17449
  %bf.clear86 = and i64 %bf.load85, 65535, !dbg !17449
  %bf.cast87 = trunc i64 %bf.clear86 to i32, !dbg !17449
  %cmp88 = icmp eq i32 %bf.cast87, 141, !dbg !17449
  br i1 %cmp88, label %land.lhs.true89, label %if.end117, !dbg !17449

land.lhs.true89:                                  ; preds = %lor.lhs.false83
  %66 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17449
  %ssa_name = bitcast %union.tree_node* %66 to %struct.tree_ssa_name*, !dbg !17449
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !17449
  %67 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !17449
  %base90 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !17449
  %68 = bitcast %struct.tree_base* %base90 to i64*, !dbg !17449
  %bf.load91 = load i64, i64* %68, align 8, !dbg !17449
  %bf.clear92 = and i64 %bf.load91, 65535, !dbg !17449
  %bf.cast93 = trunc i64 %bf.clear92 to i32, !dbg !17449
  %cmp94 = icmp eq i32 %bf.cast93, 32, !dbg !17449
  br i1 %cmp94, label %land.lhs.true111, label %lor.lhs.false95, !dbg !17449

lor.lhs.false95:                                  ; preds = %land.lhs.true89
  %69 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17449
  %ssa_name96 = bitcast %union.tree_node* %69 to %struct.tree_ssa_name*, !dbg !17449
  %var97 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name96, i32 0, i32 1, !dbg !17449
  %70 = load %union.tree_node*, %union.tree_node** %var97, align 8, !dbg !17449
  %base98 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !17449
  %71 = bitcast %struct.tree_base* %base98 to i64*, !dbg !17449
  %bf.load99 = load i64, i64* %71, align 8, !dbg !17449
  %bf.clear100 = and i64 %bf.load99, 65535, !dbg !17449
  %bf.cast101 = trunc i64 %bf.clear100 to i32, !dbg !17449
  %cmp102 = icmp eq i32 %bf.cast101, 34, !dbg !17449
  br i1 %cmp102, label %land.lhs.true111, label %lor.lhs.false103, !dbg !17449

lor.lhs.false103:                                 ; preds = %lor.lhs.false95
  %72 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17449
  %ssa_name104 = bitcast %union.tree_node* %72 to %struct.tree_ssa_name*, !dbg !17449
  %var105 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name104, i32 0, i32 1, !dbg !17449
  %73 = load %union.tree_node*, %union.tree_node** %var105, align 8, !dbg !17449
  %base106 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !17449
  %74 = bitcast %struct.tree_base* %base106 to i64*, !dbg !17449
  %bf.load107 = load i64, i64* %74, align 8, !dbg !17449
  %bf.clear108 = and i64 %bf.load107, 65535, !dbg !17449
  %bf.cast109 = trunc i64 %bf.clear108 to i32, !dbg !17449
  %cmp110 = icmp eq i32 %bf.cast109, 36, !dbg !17449
  br i1 %cmp110, label %land.lhs.true111, label %if.end117, !dbg !17451

land.lhs.true111:                                 ; preds = %lor.lhs.false103, %lor.lhs.false95, %land.lhs.true89, %lor.lhs.false77, %lor.lhs.false71, %if.end65
  %75 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !17452
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %75, i64 0, !dbg !17452
  %call112 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %add.ptr), !dbg !17453
  %conv = zext i8 %call112 to i32, !dbg !17453
  %tobool113 = icmp ne i32 %conv, 0, !dbg !17453
  br i1 %tobool113, label %if.then114, label %if.end117, !dbg !17454

if.then114:                                       ; preds = %land.lhs.true111
  %76 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p, align 8, !dbg !17455
  %to_context115 = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %76, i32 0, i32 3, !dbg !17455
  %77 = load %union.tree_node*, %union.tree_node** %to_context115, align 8, !dbg !17455
  %function_decl = bitcast %union.tree_node* %77 to %struct.tree_function_decl*, !dbg !17455
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !17455
  %78 = load %struct.function*, %struct.function** %f, align 8, !dbg !17455
  call void @push_cfun(%struct.function* %78), !dbg !17457
  %79 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !17458
  %80 = load %union.tree_node*, %union.tree_node** %79, align 8, !dbg !17459
  %call116 = call zeroext i8 @add_referenced_var(%union.tree_node* %80), !dbg !17460
  call void @pop_cfun(), !dbg !17461
  br label %if.end117, !dbg !17462

if.end117:                                        ; preds = %if.then114, %land.lhs.true111, %lor.lhs.false103, %lor.lhs.false83
  br label %if.end118, !dbg !17463

if.end118:                                        ; preds = %if.end117, %if.else45
  br label %if.end119

if.end119:                                        ; preds = %if.end118, %if.end42
  br label %if.end120

if.end120:                                        ; preds = %if.end119, %if.then26
  %81 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !17464
  store i32 0, i32* %81, align 4, !dbg !17465
  br label %if.end132, !dbg !17466

if.else121:                                       ; preds = %lor.lhs.false
  %82 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17467
  %base122 = bitcast %union.tree_node* %82 to %struct.tree_base*, !dbg !17467
  %83 = bitcast %struct.tree_base* %base122 to i64*, !dbg !17467
  %bf.load123 = load i64, i64* %83, align 8, !dbg !17467
  %bf.clear124 = and i64 %bf.load123, 65535, !dbg !17467
  %bf.cast125 = trunc i64 %bf.clear124 to i32, !dbg !17467
  %idxprom126 = sext i32 %bf.cast125 to i64, !dbg !17467
  %arrayidx127 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom126, !dbg !17467
  %84 = load i32, i32* %arrayidx127, align 4, !dbg !17467
  %cmp128 = icmp eq i32 %84, 2, !dbg !17467
  br i1 %cmp128, label %if.then130, label %if.end131, !dbg !17469

if.then130:                                       ; preds = %if.else121
  %85 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !17470
  store i32 0, i32* %85, align 4, !dbg !17471
  br label %if.end131, !dbg !17472

if.end131:                                        ; preds = %if.then130, %if.else121
  br label %if.end132

if.end132:                                        ; preds = %if.end131, %if.end120
  br label %if.end133

if.end133:                                        ; preds = %if.end132, %cond.end
  ret %union.tree_node* null, !dbg !17473
}

declare dso_local zeroext i8 @maybe_duplicate_eh_stmt_fn(%struct.function*, %union.gimple_statement_d*, %struct.function*, %union.gimple_statement_d*, %struct.pointer_map_t*, i32) #2

declare dso_local zeroext i8 @remove_stmt_from_eh_lp_fn(%struct.function*, %union.gimple_statement_d*) #2

declare dso_local void @gimple_duplicate_stmt_histograms(%struct.function*, %union.gimple_statement_d*, %struct.function*, %union.gimple_statement_d*) #2

declare dso_local void @gimple_remove_stmt_histograms(%struct.function*, %union.gimple_statement_d*) #2

declare dso_local void @free_stmt_operands(%union.gimple_statement_d*) #2

declare dso_local i8** @pointer_map_contains(%struct.pointer_map_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @replace_by_duplicate_decl(%union.tree_node** %tp, %struct.pointer_map_t* %vars_map, %union.tree_node* %to_context) #0 !dbg !17474 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %vars_map.addr = alloca %struct.pointer_map_t*, align 8
  %to_context.addr = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %new_t = alloca %union.tree_node*, align 8
  %f = alloca %struct.function*, align 8
  %loc = alloca i8**, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !17477, metadata !DIExpression()), !dbg !17478
  store %struct.pointer_map_t* %vars_map, %struct.pointer_map_t** %vars_map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t** %vars_map.addr, metadata !17479, metadata !DIExpression()), !dbg !17480
  store %union.tree_node* %to_context, %union.tree_node** %to_context.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %to_context.addr, metadata !17481, metadata !DIExpression()), !dbg !17482
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !17483, metadata !DIExpression()), !dbg !17484
  %0 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !17485
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !17486
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !17484
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_t, metadata !17487, metadata !DIExpression()), !dbg !17488
  call void @llvm.dbg.declare(metadata %struct.function** %f, metadata !17489, metadata !DIExpression()), !dbg !17490
  %2 = load %union.tree_node*, %union.tree_node** %to_context.addr, align 8, !dbg !17491
  %function_decl = bitcast %union.tree_node* %2 to %struct.tree_function_decl*, !dbg !17491
  %f1 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !17491
  %3 = load %struct.function*, %struct.function** %f1, align 8, !dbg !17491
  store %struct.function* %3, %struct.function** %f, align 8, !dbg !17490
  call void @llvm.dbg.declare(metadata i8*** %loc, metadata !17492, metadata !DIExpression()), !dbg !17493
  %4 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17494
  %decl_minimal = bitcast %union.tree_node* %4 to %struct.tree_decl_minimal*, !dbg !17494
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !17494
  %5 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !17494
  %6 = load %union.tree_node*, %union.tree_node** %to_context.addr, align 8, !dbg !17496
  %cmp = icmp eq %union.tree_node* %5, %6, !dbg !17497
  br i1 %cmp, label %if.then, label %if.end, !dbg !17498

if.then:                                          ; preds = %entry
  br label %return, !dbg !17499

if.end:                                           ; preds = %entry
  %7 = load %struct.pointer_map_t*, %struct.pointer_map_t** %vars_map.addr, align 8, !dbg !17500
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17501
  %9 = bitcast %union.tree_node* %8 to i8*, !dbg !17501
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %7, i8* %9), !dbg !17502
  store i8** %call, i8*** %loc, align 8, !dbg !17503
  %10 = load i8**, i8*** %loc, align 8, !dbg !17504
  %tobool = icmp ne i8** %10, null, !dbg !17504
  br i1 %tobool, label %if.else57, label %if.then2, !dbg !17506

if.then2:                                         ; preds = %if.end
  %11 = load %struct.pointer_map_t*, %struct.pointer_map_t** %vars_map.addr, align 8, !dbg !17507
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17509
  %13 = bitcast %union.tree_node* %12 to i8*, !dbg !17509
  %call3 = call i8** @pointer_map_insert(%struct.pointer_map_t* %11, i8* %13), !dbg !17510
  store i8** %call3, i8*** %loc, align 8, !dbg !17511
  %14 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17512
  %base = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !17512
  %15 = bitcast %struct.tree_base* %base to i64*, !dbg !17512
  %bf.load = load i64, i64* %15, align 8, !dbg !17512
  %bf.clear = and i64 %bf.load, 65535, !dbg !17512
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !17512
  %cmp4 = icmp eq i32 %bf.cast, 32, !dbg !17512
  br i1 %cmp4, label %if.then43, label %lor.lhs.false, !dbg !17512

lor.lhs.false:                                    ; preds = %if.then2
  %16 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17512
  %base5 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !17512
  %17 = bitcast %struct.tree_base* %base5 to i64*, !dbg !17512
  %bf.load6 = load i64, i64* %17, align 8, !dbg !17512
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !17512
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !17512
  %cmp9 = icmp eq i32 %bf.cast8, 34, !dbg !17512
  br i1 %cmp9, label %if.then43, label %lor.lhs.false10, !dbg !17512

lor.lhs.false10:                                  ; preds = %lor.lhs.false
  %18 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17512
  %base11 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !17512
  %19 = bitcast %struct.tree_base* %base11 to i64*, !dbg !17512
  %bf.load12 = load i64, i64* %19, align 8, !dbg !17512
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !17512
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !17512
  %cmp15 = icmp eq i32 %bf.cast14, 36, !dbg !17512
  br i1 %cmp15, label %if.then43, label %lor.lhs.false16, !dbg !17512

lor.lhs.false16:                                  ; preds = %lor.lhs.false10
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17512
  %base17 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !17512
  %21 = bitcast %struct.tree_base* %base17 to i64*, !dbg !17512
  %bf.load18 = load i64, i64* %21, align 8, !dbg !17512
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !17512
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !17512
  %cmp21 = icmp eq i32 %bf.cast20, 141, !dbg !17512
  br i1 %cmp21, label %land.lhs.true, label %if.else, !dbg !17512

land.lhs.true:                                    ; preds = %lor.lhs.false16
  %22 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17512
  %ssa_name = bitcast %union.tree_node* %22 to %struct.tree_ssa_name*, !dbg !17512
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !17512
  %23 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !17512
  %base22 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !17512
  %24 = bitcast %struct.tree_base* %base22 to i64*, !dbg !17512
  %bf.load23 = load i64, i64* %24, align 8, !dbg !17512
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !17512
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !17512
  %cmp26 = icmp eq i32 %bf.cast25, 32, !dbg !17512
  br i1 %cmp26, label %if.then43, label %lor.lhs.false27, !dbg !17512

lor.lhs.false27:                                  ; preds = %land.lhs.true
  %25 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17512
  %ssa_name28 = bitcast %union.tree_node* %25 to %struct.tree_ssa_name*, !dbg !17512
  %var29 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name28, i32 0, i32 1, !dbg !17512
  %26 = load %union.tree_node*, %union.tree_node** %var29, align 8, !dbg !17512
  %base30 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !17512
  %27 = bitcast %struct.tree_base* %base30 to i64*, !dbg !17512
  %bf.load31 = load i64, i64* %27, align 8, !dbg !17512
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !17512
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !17512
  %cmp34 = icmp eq i32 %bf.cast33, 34, !dbg !17512
  br i1 %cmp34, label %if.then43, label %lor.lhs.false35, !dbg !17512

lor.lhs.false35:                                  ; preds = %lor.lhs.false27
  %28 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17512
  %ssa_name36 = bitcast %union.tree_node* %28 to %struct.tree_ssa_name*, !dbg !17512
  %var37 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name36, i32 0, i32 1, !dbg !17512
  %29 = load %union.tree_node*, %union.tree_node** %var37, align 8, !dbg !17512
  %base38 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !17512
  %30 = bitcast %struct.tree_base* %base38 to i64*, !dbg !17512
  %bf.load39 = load i64, i64* %30, align 8, !dbg !17512
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !17512
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !17512
  %cmp42 = icmp eq i32 %bf.cast41, 36, !dbg !17512
  br i1 %cmp42, label %if.then43, label %if.else, !dbg !17514

if.then43:                                        ; preds = %lor.lhs.false35, %lor.lhs.false27, %land.lhs.true, %lor.lhs.false10, %lor.lhs.false, %if.then2
  %31 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17515
  %32 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17517
  %decl_minimal44 = bitcast %union.tree_node* %32 to %struct.tree_decl_minimal*, !dbg !17517
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal44, i32 0, i32 3, !dbg !17517
  %33 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !17517
  %34 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17518
  %common = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !17518
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !17518
  %35 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !17518
  %call45 = call %union.tree_node* @copy_var_decl(%union.tree_node* %31, %union.tree_node* %33, %union.tree_node* %35), !dbg !17519
  store %union.tree_node* %call45, %union.tree_node** %new_t, align 8, !dbg !17520
  %36 = load %union.tree_node*, %union.tree_node** %new_t, align 8, !dbg !17521
  %37 = load %struct.function*, %struct.function** %f, align 8, !dbg !17521
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %37, i32 0, i32 9, !dbg !17521
  %38 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !17521
  %call46 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %36, %union.tree_node* %38), !dbg !17521
  %39 = load %struct.function*, %struct.function** %f, align 8, !dbg !17522
  %local_decls47 = getelementptr inbounds %struct.function, %struct.function* %39, i32 0, i32 9, !dbg !17523
  store %union.tree_node* %call46, %union.tree_node** %local_decls47, align 8, !dbg !17524
  br label %if.end54, !dbg !17525

if.else:                                          ; preds = %lor.lhs.false35, %lor.lhs.false16
  %40 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17526
  %base48 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !17526
  %41 = bitcast %struct.tree_base* %base48 to i64*, !dbg !17526
  %bf.load49 = load i64, i64* %41, align 8, !dbg !17526
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !17526
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !17526
  %cmp52 = icmp eq i32 %bf.cast51, 33, !dbg !17526
  br i1 %cmp52, label %cond.false, label %cond.true, !dbg !17526

cond.true:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5423, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !17526
  br label %cond.end, !dbg !17526

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !17526

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !17526
  %42 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !17528
  %call53 = call %union.tree_node* @copy_node_stat(%union.tree_node* %42), !dbg !17528
  store %union.tree_node* %call53, %union.tree_node** %new_t, align 8, !dbg !17529
  br label %if.end54

if.end54:                                         ; preds = %cond.end, %if.then43
  %43 = load %union.tree_node*, %union.tree_node** %to_context.addr, align 8, !dbg !17530
  %44 = load %union.tree_node*, %union.tree_node** %new_t, align 8, !dbg !17531
  %decl_minimal55 = bitcast %union.tree_node* %44 to %struct.tree_decl_minimal*, !dbg !17531
  %context56 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal55, i32 0, i32 4, !dbg !17531
  store %union.tree_node* %43, %union.tree_node** %context56, align 8, !dbg !17532
  %45 = load %union.tree_node*, %union.tree_node** %new_t, align 8, !dbg !17533
  %46 = bitcast %union.tree_node* %45 to i8*, !dbg !17533
  %47 = load i8**, i8*** %loc, align 8, !dbg !17534
  store i8* %46, i8** %47, align 8, !dbg !17535
  br label %if.end58, !dbg !17536

if.else57:                                        ; preds = %if.end
  %48 = load i8**, i8*** %loc, align 8, !dbg !17537
  %49 = load i8*, i8** %48, align 8, !dbg !17538
  %50 = bitcast i8* %49 to %union.tree_node*, !dbg !17539
  store %union.tree_node* %50, %union.tree_node** %new_t, align 8, !dbg !17540
  br label %if.end58

if.end58:                                         ; preds = %if.else57, %if.end54
  %51 = load %union.tree_node*, %union.tree_node** %new_t, align 8, !dbg !17541
  %52 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !17542
  store %union.tree_node* %51, %union.tree_node** %52, align 8, !dbg !17543
  br label %return, !dbg !17544

return:                                           ; preds = %if.end58, %if.then
  ret void, !dbg !17544
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_in_ssa_p(%struct.function* %fun) #0 !dbg !17545 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !17550, metadata !DIExpression()), !dbg !17551
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !17552
  %tobool = icmp ne %struct.function* %0, null, !dbg !17552
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !17553

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !17554
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 3, !dbg !17555
  %2 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !17555
  %tobool1 = icmp ne %struct.gimple_df* %2, null, !dbg !17554
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !17556

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !17557
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 3, !dbg !17558
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !17558
  %in_ssa_p = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 10, !dbg !17559
  %bf.load = load i8, i8* %in_ssa_p, align 8, !dbg !17559
  %bf.clear = and i8 %bf.load, 1, !dbg !17559
  %bf.cast = zext i8 %bf.clear to i32, !dbg !17559
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !17556
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %5 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool3, %land.rhs ], !dbg !17560
  %land.ext = zext i1 %5 to i32, !dbg !17556
  %conv = trunc i32 %land.ext to i8, !dbg !17552
  ret i8 %conv, !dbg !17561
}

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !17562 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !17565, metadata !DIExpression()), !dbg !17566
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !17567, metadata !DIExpression()), !dbg !17568
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !17569
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !17569
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !17570
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !17571
  %call = call %union.tree_node* @make_ssa_name_fn(%struct.function* %add.ptr, %union.tree_node* %1, %union.gimple_statement_d* %2), !dbg !17572
  ret %union.tree_node* %call, !dbg !17573
}

declare dso_local void @set_default_def(%union.tree_node*, %union.tree_node*) #2

declare dso_local i8** @pointer_map_insert(%struct.pointer_map_t*, i8*) #2

declare dso_local %union.tree_node* @copy_var_decl(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @tree_cons_stat(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @copy_node_stat(%union.tree_node*) #2

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) #0 !dbg !17574 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %root = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !17577, metadata !DIExpression()), !dbg !17578
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !17579, metadata !DIExpression()), !dbg !17580
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %root, metadata !17581, metadata !DIExpression()), !dbg !17582
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !17583
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !17583
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !17585

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !17586
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !17586
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !17586
  %bf.load = load i64, i64* %2, align 8, !dbg !17586
  %bf.clear = and i64 %bf.load, 65535, !dbg !17586
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !17586
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !17587
  br i1 %cmp, label %if.then, label %if.else, !dbg !17588

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !17589
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 0, !dbg !17590
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !17591
  br label %if.end, !dbg !17589

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !17592
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !17592
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !17592
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %root, align 8, !dbg !17594
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !17595
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %root, align 8, !dbg !17596
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d* %6), !dbg !17597
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !17598
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @move_stmt_eh_region_tree_nr(%union.tree_node* %old_t_nr, %struct.move_stmt_d* %p) #0 !dbg !17599 {
entry:
  %old_t_nr.addr = alloca %union.tree_node*, align 8
  %p.addr = alloca %struct.move_stmt_d*, align 8
  %old_nr = alloca i32, align 4
  %new_nr = alloca i32, align 4
  store %union.tree_node* %old_t_nr, %union.tree_node** %old_t_nr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_t_nr.addr, metadata !17602, metadata !DIExpression()), !dbg !17603
  store %struct.move_stmt_d* %p, %struct.move_stmt_d** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.move_stmt_d** %p.addr, metadata !17604, metadata !DIExpression()), !dbg !17605
  call void @llvm.dbg.declare(metadata i32* %old_nr, metadata !17606, metadata !DIExpression()), !dbg !17607
  call void @llvm.dbg.declare(metadata i32* %new_nr, metadata !17608, metadata !DIExpression()), !dbg !17609
  %0 = load %union.tree_node*, %union.tree_node** %old_t_nr.addr, align 8, !dbg !17610
  %call = call i64 @tree_low_cst(%union.tree_node* %0, i32 0), !dbg !17611
  %conv = trunc i64 %call to i32, !dbg !17611
  store i32 %conv, i32* %old_nr, align 4, !dbg !17612
  %1 = load i32, i32* %old_nr, align 4, !dbg !17613
  %2 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p.addr, align 8, !dbg !17614
  %call1 = call i32 @move_stmt_eh_region_nr(i32 %1, %struct.move_stmt_d* %2), !dbg !17615
  store i32 %call1, i32* %new_nr, align 4, !dbg !17616
  %3 = load i32, i32* %new_nr, align 4, !dbg !17617
  %conv2 = sext i32 %3 to i64, !dbg !17617
  %call3 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv2), !dbg !17618
  ret %union.tree_node* %call3, !dbg !17619
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_arg(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %arg) #0 !dbg !17620 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !17621, metadata !DIExpression()), !dbg !17622
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !17623, metadata !DIExpression()), !dbg !17624
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !17625, metadata !DIExpression()), !dbg !17626
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !17627
  %1 = load i32, i32* %index.addr, align 4, !dbg !17628
  %add = add i32 %1, 3, !dbg !17629
  %2 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !17630
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 %add, %union.tree_node* %2), !dbg !17631
  ret void, !dbg !17632
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_resx_region(%union.gimple_statement_d* %gs) #0 !dbg !17633 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !17634, metadata !DIExpression()), !dbg !17635
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !17636
  %gimple_eh_ctrl = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_eh_ctrl*, !dbg !17637
  %region = getelementptr inbounds %struct.gimple_statement_eh_ctrl, %struct.gimple_statement_eh_ctrl* %gimple_eh_ctrl, i32 0, i32 1, !dbg !17638
  %1 = load i32, i32* %region, align 8, !dbg !17638
  ret i32 %1, !dbg !17639
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @move_stmt_eh_region_nr(i32 %old_nr, %struct.move_stmt_d* %p) #0 !dbg !17640 {
entry:
  %old_nr.addr = alloca i32, align 4
  %p.addr = alloca %struct.move_stmt_d*, align 8
  %old_r = alloca %struct.eh_region_d*, align 8
  %new_r = alloca %struct.eh_region_d*, align 8
  %slot = alloca i8**, align 8
  store i32 %old_nr, i32* %old_nr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %old_nr.addr, metadata !17643, metadata !DIExpression()), !dbg !17644
  store %struct.move_stmt_d* %p, %struct.move_stmt_d** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.move_stmt_d** %p.addr, metadata !17645, metadata !DIExpression()), !dbg !17646
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %old_r, metadata !17647, metadata !DIExpression()), !dbg !17648
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %new_r, metadata !17649, metadata !DIExpression()), !dbg !17650
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !17651, metadata !DIExpression()), !dbg !17652
  %0 = load i32, i32* %old_nr.addr, align 4, !dbg !17653
  %call = call %struct.eh_region_d* @get_eh_region_from_number(i32 %0), !dbg !17654
  store %struct.eh_region_d* %call, %struct.eh_region_d** %old_r, align 8, !dbg !17655
  %1 = load %struct.move_stmt_d*, %struct.move_stmt_d** %p.addr, align 8, !dbg !17656
  %eh_map = getelementptr inbounds %struct.move_stmt_d, %struct.move_stmt_d* %1, i32 0, i32 6, !dbg !17657
  %2 = load %struct.pointer_map_t*, %struct.pointer_map_t** %eh_map, align 8, !dbg !17657
  %3 = load %struct.eh_region_d*, %struct.eh_region_d** %old_r, align 8, !dbg !17658
  %4 = bitcast %struct.eh_region_d* %3 to i8*, !dbg !17658
  %call1 = call i8** @pointer_map_contains(%struct.pointer_map_t* %2, i8* %4), !dbg !17659
  store i8** %call1, i8*** %slot, align 8, !dbg !17660
  %5 = load i8**, i8*** %slot, align 8, !dbg !17661
  %6 = load i8*, i8** %5, align 8, !dbg !17662
  %7 = bitcast i8* %6 to %struct.eh_region_d*, !dbg !17663
  store %struct.eh_region_d* %7, %struct.eh_region_d** %new_r, align 8, !dbg !17664
  %8 = load %struct.eh_region_d*, %struct.eh_region_d** %new_r, align 8, !dbg !17665
  %index = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %8, i32 0, i32 3, !dbg !17666
  %9 = load i32, i32* %index, align 8, !dbg !17666
  ret i32 %9, !dbg !17667
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_resx_set_region(%union.gimple_statement_d* %gs, i32 %region) #0 !dbg !17668 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %region.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !17671, metadata !DIExpression()), !dbg !17672
  store i32 %region, i32* %region.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %region.addr, metadata !17673, metadata !DIExpression()), !dbg !17674
  %0 = load i32, i32* %region.addr, align 4, !dbg !17675
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !17676
  %gimple_eh_ctrl = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_eh_ctrl*, !dbg !17677
  %region1 = getelementptr inbounds %struct.gimple_statement_eh_ctrl, %struct.gimple_statement_eh_ctrl* %gimple_eh_ctrl, i32 0, i32 1, !dbg !17678
  store i32 %0, i32* %region1, align 8, !dbg !17679
  ret void, !dbg !17680
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_eh_dispatch_region(%union.gimple_statement_d* %gs) #0 !dbg !17681 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !17682, metadata !DIExpression()), !dbg !17683
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !17684
  %gimple_eh_ctrl = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_eh_ctrl*, !dbg !17685
  %region = getelementptr inbounds %struct.gimple_statement_eh_ctrl, %struct.gimple_statement_eh_ctrl* %gimple_eh_ctrl, i32 0, i32 1, !dbg !17686
  %1 = load i32, i32* %region, align 8, !dbg !17686
  ret i32 %1, !dbg !17687
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_eh_dispatch_set_region(%union.gimple_statement_d* %gs, i32 %region) #0 !dbg !17688 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %region.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !17689, metadata !DIExpression()), !dbg !17690
  store i32 %region, i32* %region.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %region.addr, metadata !17691, metadata !DIExpression()), !dbg !17692
  %0 = load i32, i32* %region.addr, align 4, !dbg !17693
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !17694
  %gimple_eh_ctrl = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_eh_ctrl*, !dbg !17695
  %region1 = getelementptr inbounds %struct.gimple_statement_eh_ctrl, %struct.gimple_statement_eh_ctrl* %gimple_eh_ctrl, i32 0, i32 1, !dbg !17696
  store i32 %0, i32* %region1, align 8, !dbg !17697
  ret void, !dbg !17698
}

declare dso_local %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d*, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, %struct.walk_stmt_info*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %gs) #0 !dbg !17699 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !17700, metadata !DIExpression()), !dbg !17701
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !17702
  %omp = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_omp*, !dbg !17703
  %body = getelementptr inbounds %struct.gimple_statement_omp, %struct.gimple_statement_omp* %omp, i32 0, i32 1, !dbg !17704
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %body, align 8, !dbg !17704
  ret %struct.gimple_seq_d* %1, !dbg !17705
}

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #2

declare dso_local %struct.eh_region_d* @get_eh_region_from_number(i32) #2

declare dso_local %union.tree_node** @tree_block(%union.tree_node*) #2

declare dso_local i8* @htab_find_with_hash(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_global_var(%union.tree_node* %t) #0 !dbg !17706 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !17707, metadata !DIExpression()), !dbg !17708
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !17709
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !17709
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !17709
  %bf.load = load i64, i64* %1, align 8, !dbg !17709
  %bf.lshr = lshr i64 %bf.load, 26, !dbg !17709
  %bf.clear = and i64 %bf.lshr, 1, !dbg !17709
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !17709
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !17709
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !17710

lor.rhs:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !17711
  %decl_common = bitcast %union.tree_node* %2 to %struct.tree_decl_common*, !dbg !17711
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !17711
  %3 = bitcast i40* %decl_flag_1 to i64*, !dbg !17711
  %bf.load1 = load i64, i64* %3, align 8, !dbg !17711
  %bf.lshr2 = lshr i64 %bf.load1, 25, !dbg !17711
  %bf.clear3 = and i64 %bf.lshr2, 1, !dbg !17711
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !17711
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !17710
  br label %lor.end, !dbg !17710

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %tobool5, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32, !dbg !17710
  %conv = trunc i32 %lor.ext to i8, !dbg !17712
  ret i8 %conv, !dbg !17713
}

declare dso_local void @decl_value_expr_insert(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @decl_value_expr_lookup(%union.tree_node*) #2

declare dso_local void @dump_double_int(%struct._IO_FILE*, i64, i64, i8 zeroext) #2

declare dso_local %union.tree_node* @decl_function_context(%union.tree_node*) #2

declare dso_local zeroext i8 @verify_eh_edges(%union.gimple_statement_d*) #2

declare dso_local i32 @tree_int_cst_lt(%union.tree_node*, %union.tree_node*) #2

declare dso_local zeroext i8 @verify_eh_dispatch_edge(%union.gimple_statement_d*) #2

declare dso_local i32 @dom_info_state(i32) #2

declare dso_local void @verify_dominators(i32) #2

declare dso_local %struct.basic_block_def* @alloc_block() #2

declare dso_local i8* @ggc_alloc_cleared_stat(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_bb_seq(%struct.basic_block_def* %bb, %struct.gimple_seq_d* %seq) #0 !dbg !17714 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !17717, metadata !DIExpression()), !dbg !17718
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !17719, metadata !DIExpression()), !dbg !17720
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !17721
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !17721
  %1 = load i32, i32* %flags, align 8, !dbg !17721
  %and = and i32 %1, 512, !dbg !17721
  %tobool = icmp ne i32 %and, 0, !dbg !17721
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !17721

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.64, i64 0, i64 0), i32 248, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !17721
  br label %cond.end, !dbg !17721

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !17721

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !17721
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !17722
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !17723
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 7, !dbg !17724
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !17725
  %4 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !17725
  %seq1 = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %4, i32 0, i32 0, !dbg !17726
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq1, align 8, !dbg !17727
  ret void, !dbg !17728
}

declare dso_local %struct.gimple_seq_d* @gimple_seq_alloc() #2

declare dso_local void @link_block(%struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local %struct.edge_def* @redirect_eh_edge(%struct.edge_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @gimple_try_redirect_by_replacing_jump(%struct.edge_def* %e, %struct.basic_block_def* %target) #0 !dbg !17729 {
entry:
  %retval = alloca %struct.edge_def*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %target.addr = alloca %struct.basic_block_def*, align 8
  %src = alloca %struct.basic_block_def*, align 8
  %i = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !17730, metadata !DIExpression()), !dbg !17731
  store %struct.basic_block_def* %target, %struct.basic_block_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %target.addr, metadata !17732, metadata !DIExpression()), !dbg !17733
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %src, metadata !17734, metadata !DIExpression()), !dbg !17735
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !17736
  %src1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !17737
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !17737
  store %struct.basic_block_def* %1, %struct.basic_block_def** %src, align 8, !dbg !17735
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !17738, metadata !DIExpression()), !dbg !17739
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !17740, metadata !DIExpression()), !dbg !17741
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !17742
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !17742
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !17742
  %tobool = icmp ne %struct.VEC_edge_gc* %3, null, !dbg !17742
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !17742

cond.true:                                        ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !17742
  %succs2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 1, !dbg !17742
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs2, align 8, !dbg !17742
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %5, i32 0, i32 0, !dbg !17742
  br label %cond.end, !dbg !17742

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !17742

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !17742
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !17742
  %cmp = icmp ne i32 %call, 2, !dbg !17744
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !17745

lor.lhs.false:                                    ; preds = %cond.end
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !17746
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 1, !dbg !17746
  %7 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !17746
  %tobool4 = icmp ne %struct.VEC_edge_gc* %7, null, !dbg !17746
  br i1 %tobool4, label %cond.true5, label %cond.false8, !dbg !17746

cond.true5:                                       ; preds = %lor.lhs.false
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !17746
  %succs6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 1, !dbg !17746
  %9 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs6, align 8, !dbg !17746
  %base7 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %9, i32 0, i32 0, !dbg !17746
  br label %cond.end9, !dbg !17746

cond.false8:                                      ; preds = %lor.lhs.false
  br label %cond.end9, !dbg !17746

cond.end9:                                        ; preds = %cond.false8, %cond.true5
  %cond10 = phi %struct.VEC_edge_base* [ %base7, %cond.true5 ], [ null, %cond.false8 ], !dbg !17746
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !17746
  %succs11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 1, !dbg !17746
  %11 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs11, align 8, !dbg !17746
  %tobool12 = icmp ne %struct.VEC_edge_gc* %11, null, !dbg !17746
  br i1 %tobool12, label %cond.true13, label %cond.false16, !dbg !17746

cond.true13:                                      ; preds = %cond.end9
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !17746
  %succs14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 1, !dbg !17746
  %13 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs14, align 8, !dbg !17746
  %base15 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %13, i32 0, i32 0, !dbg !17746
  br label %cond.end17, !dbg !17746

cond.false16:                                     ; preds = %cond.end9
  br label %cond.end17, !dbg !17746

cond.end17:                                       ; preds = %cond.false16, %cond.true13
  %cond18 = phi %struct.VEC_edge_base* [ %base15, %cond.true13 ], [ null, %cond.false16 ], !dbg !17746
  %call19 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond18, i32 0), !dbg !17746
  %14 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !17746
  %cmp20 = icmp eq %struct.edge_def* %call19, %14, !dbg !17746
  %conv = zext i1 %cmp20 to i32, !dbg !17746
  %call21 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond10, i32 %conv), !dbg !17746
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call21, i32 0, i32 1, !dbg !17747
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !17747
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !17748
  %cmp22 = icmp ne %struct.basic_block_def* %15, %16, !dbg !17749
  br i1 %cmp22, label %if.then, label %if.end, !dbg !17750

if.then:                                          ; preds = %cond.end17, %cond.end
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !17751
  br label %return, !dbg !17751

if.end:                                           ; preds = %cond.end17
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !17752
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %17), !dbg !17753
  %18 = bitcast %struct.gimple_stmt_iterator* %i to i8*, !dbg !17753
  %19 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !17753
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 24, i1 false), !dbg !17753
  %call24 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !17754
  %tobool25 = icmp ne i8 %call24, 0, !dbg !17754
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !17756

if.then26:                                        ; preds = %if.end
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !17757
  br label %return, !dbg !17757

if.end27:                                         ; preds = %if.end
  %call28 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !17758
  store %union.gimple_statement_d* %call28, %union.gimple_statement_d** %stmt, align 8, !dbg !17759
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !17760
  %call29 = call i32 @gimple_code(%union.gimple_statement_d* %20), !dbg !17762
  %cmp30 = icmp eq i32 %call29, 1, !dbg !17763
  br i1 %cmp30, label %if.then36, label %lor.lhs.false32, !dbg !17764

lor.lhs.false32:                                  ; preds = %if.end27
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !17765
  %call33 = call i32 @gimple_code(%union.gimple_statement_d* %21), !dbg !17766
  %cmp34 = icmp eq i32 %call33, 5, !dbg !17767
  br i1 %cmp34, label %if.then36, label %if.end38, !dbg !17768

if.then36:                                        ; preds = %lor.lhs.false32, %if.end27
  call void @gsi_remove(%struct.gimple_stmt_iterator* %i, i8 zeroext 1), !dbg !17769
  %22 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !17771
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %target.addr, align 8, !dbg !17772
  %call37 = call %struct.edge_def* @ssa_redirect_edge(%struct.edge_def* %22, %struct.basic_block_def* %23), !dbg !17773
  store %struct.edge_def* %call37, %struct.edge_def** %e.addr, align 8, !dbg !17774
  %24 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !17775
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %24, i32 0, i32 7, !dbg !17776
  store i32 1, i32* %flags, align 8, !dbg !17777
  %25 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !17778
  store %struct.edge_def* %25, %struct.edge_def** %retval, align 8, !dbg !17779
  br label %return, !dbg !17779

if.end38:                                         ; preds = %lor.lhs.false32
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !17780
  br label %return, !dbg !17780

return:                                           ; preds = %if.end38, %if.then36, %if.then26, %if.then
  %26 = load %struct.edge_def*, %struct.edge_def** %retval, align 8, !dbg !17781
  ret %struct.edge_def* %26, !dbg !17781
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_cases_for_edge(%struct.edge_def* %e, %union.gimple_statement_d* %t) #0 !dbg !17782 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %t.addr = alloca %union.gimple_statement_d*, align 8
  %slot = alloca i8**, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %elt = alloca %union.tree_node*, align 8
  %lab = alloca %union.tree_node*, align 8
  %label_bb = alloca %struct.basic_block_def*, align 8
  %this_edge = alloca %struct.edge_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !17785, metadata !DIExpression()), !dbg !17786
  store %union.gimple_statement_d* %t, %union.gimple_statement_d** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t.addr, metadata !17787, metadata !DIExpression()), !dbg !17788
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !17789, metadata !DIExpression()), !dbg !17790
  call void @llvm.dbg.declare(metadata i64* %i, metadata !17791, metadata !DIExpression()), !dbg !17792
  call void @llvm.dbg.declare(metadata i64* %n, metadata !17793, metadata !DIExpression()), !dbg !17794
  %call = call zeroext i8 @recording_case_labels_p(), !dbg !17795
  %tobool = icmp ne i8 %call, 0, !dbg !17795
  br i1 %tobool, label %if.end, label %if.then, !dbg !17797

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !17798
  br label %return, !dbg !17798

if.end:                                           ; preds = %entry
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @edge_to_cases, align 8, !dbg !17799
  %1 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !17800
  %2 = bitcast %struct.edge_def* %1 to i8*, !dbg !17800
  %call1 = call i8** @pointer_map_contains(%struct.pointer_map_t* %0, i8* %2), !dbg !17801
  store i8** %call1, i8*** %slot, align 8, !dbg !17802
  %3 = load i8**, i8*** %slot, align 8, !dbg !17803
  %tobool2 = icmp ne i8** %3, null, !dbg !17803
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !17805

if.then3:                                         ; preds = %if.end
  %4 = load i8**, i8*** %slot, align 8, !dbg !17806
  %5 = load i8*, i8** %4, align 8, !dbg !17807
  %6 = bitcast i8* %5 to %union.tree_node*, !dbg !17808
  store %union.tree_node* %6, %union.tree_node** %retval, align 8, !dbg !17809
  br label %return, !dbg !17809

if.end4:                                          ; preds = %if.end
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !17810
  %call5 = call i32 @gimple_switch_num_labels(%union.gimple_statement_d* %7), !dbg !17811
  %conv = zext i32 %call5 to i64, !dbg !17811
  store i64 %conv, i64* %n, align 8, !dbg !17812
  store i64 0, i64* %i, align 8, !dbg !17813
  br label %for.cond, !dbg !17815

for.cond:                                         ; preds = %for.inc, %if.end4
  %8 = load i64, i64* %i, align 8, !dbg !17816
  %9 = load i64, i64* %n, align 8, !dbg !17818
  %cmp = icmp ult i64 %8, %9, !dbg !17819
  br i1 %cmp, label %for.body, label %for.end, !dbg !17820

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %elt, metadata !17821, metadata !DIExpression()), !dbg !17823
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !17824
  %11 = load i64, i64* %i, align 8, !dbg !17825
  %conv7 = trunc i64 %11 to i32, !dbg !17825
  %call8 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %10, i32 %conv7), !dbg !17826
  store %union.tree_node* %call8, %union.tree_node** %elt, align 8, !dbg !17823
  call void @llvm.dbg.declare(metadata %union.tree_node** %lab, metadata !17827, metadata !DIExpression()), !dbg !17828
  %12 = load %union.tree_node*, %union.tree_node** %elt, align 8, !dbg !17829
  %exp = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !17829
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !17829
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !17829
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !17829
  store %union.tree_node* %13, %union.tree_node** %lab, align 8, !dbg !17828
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %label_bb, metadata !17830, metadata !DIExpression()), !dbg !17831
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !17832
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !17832
  %15 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !17832
  %call9 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr, %union.tree_node* %15), !dbg !17832
  store %struct.basic_block_def* %call9, %struct.basic_block_def** %label_bb, align 8, !dbg !17831
  call void @llvm.dbg.declare(metadata %struct.edge_def** %this_edge, metadata !17833, metadata !DIExpression()), !dbg !17834
  %16 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !17835
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 0, !dbg !17836
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !17836
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %label_bb, align 8, !dbg !17837
  %call10 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %17, %struct.basic_block_def* %18), !dbg !17838
  store %struct.edge_def* %call10, %struct.edge_def** %this_edge, align 8, !dbg !17834
  %19 = load %struct.pointer_map_t*, %struct.pointer_map_t** @edge_to_cases, align 8, !dbg !17839
  %20 = load %struct.edge_def*, %struct.edge_def** %this_edge, align 8, !dbg !17840
  %21 = bitcast %struct.edge_def* %20 to i8*, !dbg !17840
  %call11 = call i8** @pointer_map_insert(%struct.pointer_map_t* %19, i8* %21), !dbg !17841
  store i8** %call11, i8*** %slot, align 8, !dbg !17842
  %22 = load i8**, i8*** %slot, align 8, !dbg !17843
  %23 = load i8*, i8** %22, align 8, !dbg !17844
  %24 = bitcast i8* %23 to %union.tree_node*, !dbg !17845
  %25 = load %union.tree_node*, %union.tree_node** %elt, align 8, !dbg !17846
  %common = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !17846
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !17846
  store %union.tree_node* %24, %union.tree_node** %chain, align 8, !dbg !17847
  %26 = load %union.tree_node*, %union.tree_node** %elt, align 8, !dbg !17848
  %27 = bitcast %union.tree_node* %26 to i8*, !dbg !17848
  %28 = load i8**, i8*** %slot, align 8, !dbg !17849
  store i8* %27, i8** %28, align 8, !dbg !17850
  br label %for.inc, !dbg !17851

for.inc:                                          ; preds = %for.body
  %29 = load i64, i64* %i, align 8, !dbg !17852
  %inc = add i64 %29, 1, !dbg !17852
  store i64 %inc, i64* %i, align 8, !dbg !17852
  br label %for.cond, !dbg !17853, !llvm.loop !17854

for.end:                                          ; preds = %for.cond
  %30 = load %struct.pointer_map_t*, %struct.pointer_map_t** @edge_to_cases, align 8, !dbg !17856
  %31 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !17857
  %32 = bitcast %struct.edge_def* %31 to i8*, !dbg !17857
  %call12 = call i8** @pointer_map_contains(%struct.pointer_map_t* %30, i8* %32), !dbg !17858
  %33 = load i8*, i8** %call12, align 8, !dbg !17859
  %34 = bitcast i8* %33 to %union.tree_node*, !dbg !17860
  store %union.tree_node* %34, %union.tree_node** %retval, align 8, !dbg !17861
  br label %return, !dbg !17861

return:                                           ; preds = %for.end, %if.then3, %if.then
  %35 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !17862
  ret %union.tree_node* %35, !dbg !17862
}

declare dso_local void @redirect_eh_dispatch_edge(%union.gimple_statement_d*, %struct.edge_def*, %struct.basic_block_def*) #2

declare dso_local %struct.edge_def* @ssa_redirect_edge(%struct.edge_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @recording_case_labels_p() #0 !dbg !17863 {
entry:
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @edge_to_cases, align 8, !dbg !17864
  %cmp = icmp ne %struct.pointer_map_t* %0, null, !dbg !17865
  %conv = zext i1 %cmp to i32, !dbg !17865
  %conv1 = trunc i32 %conv to i8, !dbg !17866
  ret i8 %conv1, !dbg !17867
}

declare dso_local void @dump_bb(%struct.basic_block_def*, %struct._IO_FILE*, i32) #2

declare dso_local void @free_numbers_of_iterations_estimates_loop(%struct.loop*) #2

declare dso_local void @release_defs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @remove_phi_nodes_and_edges_for_unreachable_block(%struct.basic_block_def* %bb) #0 !dbg !17868 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !17869, metadata !DIExpression()), !dbg !17870
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !17871
  call void @remove_phi_nodes(%struct.basic_block_def* %0), !dbg !17872
  br label %while.cond, !dbg !17873

while.cond:                                       ; preds = %cond.end8, %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !17874
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !17874
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !17874
  %tobool = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !17874
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !17874

cond.true:                                        ; preds = %while.cond
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !17874
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !17874
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !17874
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !17874
  br label %cond.end, !dbg !17874

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !17874

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !17874
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !17874
  %cmp = icmp ugt i32 %call, 0, !dbg !17875
  br i1 %cmp, label %while.body, label %while.end, !dbg !17873

while.body:                                       ; preds = %cond.end
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !17876
  %succs2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 1, !dbg !17876
  %6 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs2, align 8, !dbg !17876
  %tobool3 = icmp ne %struct.VEC_edge_gc* %6, null, !dbg !17876
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !17876

cond.true4:                                       ; preds = %while.body
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !17876
  %succs5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 1, !dbg !17876
  %8 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs5, align 8, !dbg !17876
  %base6 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %8, i32 0, i32 0, !dbg !17876
  br label %cond.end8, !dbg !17876

cond.false7:                                      ; preds = %while.body
  br label %cond.end8, !dbg !17876

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_edge_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !17876
  %call10 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond9, i32 0), !dbg !17876
  call void @remove_edge(%struct.edge_def* %call10), !dbg !17877
  br label %while.cond, !dbg !17873, !llvm.loop !17878

while.end:                                        ; preds = %cond.end
  ret void, !dbg !17880
}

declare dso_local void @remove_phi_nodes(%struct.basic_block_def*) #2

declare dso_local void @unlink_block(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) #0 !dbg !17881 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !17882, metadata !DIExpression()), !dbg !17883
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !17884
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !17884
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !17884
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !17884
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !17884

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !17884
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !17884
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !17884
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !17884
  br label %cond.end, !dbg !17884

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !17884

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !17884
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !17884
  %cmp = icmp eq i32 %call, 1, !dbg !17885
  %conv = zext i1 %cmp to i32, !dbg !17885
  %conv2 = trunc i32 %conv to i8, !dbg !17884
  ret i8 %conv2, !dbg !17886
}

declare dso_local zeroext i8 @name_mappings_registered_p() #2

declare dso_local zeroext i8 @may_propagate_copy(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @loops_state_satisfies_p(i32 %flags) #0 !dbg !17887 {
entry:
  %flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !17890, metadata !DIExpression()), !dbg !17891
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !17892
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !17892
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !17892
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !17892
  %state = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 0, !dbg !17893
  %2 = load i32, i32* %state, align 8, !dbg !17893
  %3 = load i32, i32* %flags.addr, align 4, !dbg !17894
  %and = and i32 %2, %3, !dbg !17895
  %4 = load i32, i32* %flags.addr, align 4, !dbg !17896
  %cmp = icmp eq i32 %and, %4, !dbg !17897
  %conv = zext i1 %cmp to i32, !dbg !17897
  %conv1 = trunc i32 %conv to i8, !dbg !17898
  ret i8 %conv1, !dbg !17899
}

declare dso_local void @gsi_insert_seq_after(%struct.gimple_stmt_iterator*, %struct.gimple_seq_d*, i32) #2

declare dso_local %union.gimple_statement_d* @create_phi_node(%union.tree_node*, %struct.basic_block_def*) #2

declare dso_local %union.tree_node* @create_new_def_for(%union.tree_node*, %union.gimple_statement_d*, %union.tree_node**) #2

declare dso_local zeroext i8 @maybe_duplicate_eh_stmt(%union.gimple_statement_d*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @op_iter_init_def(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !17900 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !17903, metadata !DIExpression()), !dbg !17904
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !17905, metadata !DIExpression()), !dbg !17906
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !17907, metadata !DIExpression()), !dbg !17908
  %0 = load i32, i32* %flags.addr, align 4, !dbg !17909
  %and = and i32 %0, 5, !dbg !17909
  %cmp = icmp eq i32 %and, 0, !dbg !17909
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !17909

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !17909
  %and1 = and i32 %1, 2, !dbg !17909
  %tobool = icmp ne i32 %and1, 0, !dbg !17909
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !17909

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.65, i64 0, i64 0), i32 783, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !17909
  br label %cond.end, !dbg !17909

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !17909

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !17909
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !17910
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !17911
  %4 = load i32, i32* %flags.addr, align 4, !dbg !17912
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !17913
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !17914
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !17915
  store i32 3, i32* %iter_type, align 4, !dbg !17916
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !17917
  %call = call %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %6), !dbg !17918
  ret %union.tree_node** %call, !dbg !17919
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !17920 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %def_p = alloca %union.tree_node**, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !17923, metadata !DIExpression()), !dbg !17924
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def_p, metadata !17925, metadata !DIExpression()), !dbg !17926
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !17927
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !17929
  %1 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !17929
  %tobool = icmp ne %struct.def_optype_d* %1, null, !dbg !17927
  br i1 %tobool, label %if.then, label %if.end, !dbg !17930

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !17931
  %defs1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 2, !dbg !17931
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %defs1, align 8, !dbg !17931
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %3, i32 0, i32 1, !dbg !17931
  %4 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !17931
  store %union.tree_node** %4, %union.tree_node*** %def_p, align 8, !dbg !17933
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !17934
  %defs2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 2, !dbg !17935
  %6 = load %struct.def_optype_d*, %struct.def_optype_d** %defs2, align 8, !dbg !17935
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %6, i32 0, i32 0, !dbg !17936
  %7 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !17936
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !17937
  %defs3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !17938
  store %struct.def_optype_d* %7, %struct.def_optype_d** %defs3, align 8, !dbg !17939
  %9 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !17940
  store %union.tree_node** %9, %union.tree_node*** %retval, align 8, !dbg !17941
  br label %return, !dbg !17941

if.end:                                           ; preds = %entry
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !17942
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 0, !dbg !17943
  store i8 1, i8* %done, align 8, !dbg !17944
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !17945
  br label %return, !dbg !17945

return:                                           ; preds = %if.end, %if.then
  %11 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !17946
  ret %union.tree_node** %11, !dbg !17946
}

; Function Attrs: noinline nounwind uwtable
define internal void @reinstall_phi_args(%struct.edge_def* %new_edge, %struct.edge_def* %old_edge) #0 !dbg !17947 {
entry:
  %new_edge.addr = alloca %struct.edge_def*, align 8
  %old_edge.addr = alloca %struct.edge_def*, align 8
  %v = alloca %struct.VEC_edge_var_map_heap*, align 8
  %vm = alloca %struct._edge_var_map*, align 8
  %i = alloca i32, align 4
  %phis = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %result = alloca %union.tree_node*, align 8
  %arg = alloca %union.tree_node*, align 8
  store %struct.edge_def* %new_edge, %struct.edge_def** %new_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %new_edge.addr, metadata !17950, metadata !DIExpression()), !dbg !17951
  store %struct.edge_def* %old_edge, %struct.edge_def** %old_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %old_edge.addr, metadata !17952, metadata !DIExpression()), !dbg !17953
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_var_map_heap** %v, metadata !17954, metadata !DIExpression()), !dbg !17974
  call void @llvm.dbg.declare(metadata %struct._edge_var_map** %vm, metadata !17975, metadata !DIExpression()), !dbg !17977
  call void @llvm.dbg.declare(metadata i32* %i, metadata !17978, metadata !DIExpression()), !dbg !17979
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %phis, metadata !17980, metadata !DIExpression()), !dbg !17981
  %0 = load %struct.edge_def*, %struct.edge_def** %old_edge.addr, align 8, !dbg !17982
  %call = call %struct.VEC_edge_var_map_heap* @redirect_edge_var_map_vector(%struct.edge_def* %0), !dbg !17983
  store %struct.VEC_edge_var_map_heap* %call, %struct.VEC_edge_var_map_heap** %v, align 8, !dbg !17984
  %1 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %v, align 8, !dbg !17985
  %tobool = icmp ne %struct.VEC_edge_var_map_heap* %1, null, !dbg !17985
  br i1 %tobool, label %if.end, label %if.then, !dbg !17987

if.then:                                          ; preds = %entry
  br label %return, !dbg !17988

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !17989
  %2 = load %struct.edge_def*, %struct.edge_def** %new_edge.addr, align 8, !dbg !17991
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 1, !dbg !17992
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !17992
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %3), !dbg !17993
  %4 = bitcast %struct.gimple_stmt_iterator* %phis to i8*, !dbg !17993
  %5 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !17993
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !17993
  br label %for.cond, !dbg !17994

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %v, align 8, !dbg !17995
  %tobool1 = icmp ne %struct.VEC_edge_var_map_heap* %6, null, !dbg !17995
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !17995

cond.true:                                        ; preds = %for.cond
  %7 = load %struct.VEC_edge_var_map_heap*, %struct.VEC_edge_var_map_heap** %v, align 8, !dbg !17995
  %base = getelementptr inbounds %struct.VEC_edge_var_map_heap, %struct.VEC_edge_var_map_heap* %7, i32 0, i32 0, !dbg !17995
  br label %cond.end, !dbg !17995

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !17995

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_var_map_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !17995
  %8 = load i32, i32* %i, align 4, !dbg !17995
  %call2 = call i32 @VEC_edge_var_map_base_iterate(%struct.VEC_edge_var_map_base* %cond, i32 %8, %struct._edge_var_map** %vm), !dbg !17995
  %tobool3 = icmp ne i32 %call2, 0, !dbg !17995
  br i1 %tobool3, label %land.rhs, label %land.end, !dbg !17997

land.rhs:                                         ; preds = %cond.end
  %call4 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %phis), !dbg !17998
  %tobool5 = icmp ne i8 %call4, 0, !dbg !17999
  %lnot = xor i1 %tobool5, true, !dbg !17999
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end
  %9 = phi i1 [ false, %cond.end ], [ %lnot, %land.rhs ], !dbg !18000
  br i1 %9, label %for.body, label %for.end, !dbg !18001

for.body:                                         ; preds = %land.end
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !18002, metadata !DIExpression()), !dbg !18004
  %call6 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %phis), !dbg !18005
  store %union.gimple_statement_d* %call6, %union.gimple_statement_d** %phi, align 8, !dbg !18004
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !18006, metadata !DIExpression()), !dbg !18007
  %10 = load %struct._edge_var_map*, %struct._edge_var_map** %vm, align 8, !dbg !18008
  %call7 = call %union.tree_node* @redirect_edge_var_map_result(%struct._edge_var_map* %10), !dbg !18009
  store %union.tree_node* %call7, %union.tree_node** %result, align 8, !dbg !18007
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !18010, metadata !DIExpression()), !dbg !18011
  %11 = load %struct._edge_var_map*, %struct._edge_var_map** %vm, align 8, !dbg !18012
  %call8 = call %union.tree_node* @redirect_edge_var_map_def(%struct._edge_var_map* %11), !dbg !18013
  store %union.tree_node* %call8, %union.tree_node** %arg, align 8, !dbg !18011
  %12 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !18014
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !18014
  %call9 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %13), !dbg !18014
  %cmp = icmp eq %union.tree_node* %12, %call9, !dbg !18014
  br i1 %cmp, label %cond.false11, label %cond.true10, !dbg !18014

cond.true10:                                      ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 2430, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !18014
  br label %cond.end12, !dbg !18014

cond.false11:                                     ; preds = %for.body
  br label %cond.end12, !dbg !18014

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi i32 [ 0, %cond.true10 ], [ 0, %cond.false11 ], !dbg !18014
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !18015
  %15 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !18016
  %16 = load %struct.edge_def*, %struct.edge_def** %new_edge.addr, align 8, !dbg !18017
  %17 = load %struct._edge_var_map*, %struct._edge_var_map** %vm, align 8, !dbg !18018
  %call14 = call i32 @redirect_edge_var_map_location(%struct._edge_var_map* %17), !dbg !18019
  call void @add_phi_arg(%union.gimple_statement_d* %14, %union.tree_node* %15, %struct.edge_def* %16, i32 %call14), !dbg !18020
  br label %for.inc, !dbg !18021

for.inc:                                          ; preds = %cond.end12
  %18 = load i32, i32* %i, align 4, !dbg !18022
  %inc = add nsw i32 %18, 1, !dbg !18022
  store i32 %inc, i32* %i, align 4, !dbg !18022
  call void @gsi_next(%struct.gimple_stmt_iterator* %phis), !dbg !18023
  br label %for.cond, !dbg !18024, !llvm.loop !18025

for.end:                                          ; preds = %land.end
  %19 = load %struct.edge_def*, %struct.edge_def** %old_edge.addr, align 8, !dbg !18027
  call void @redirect_edge_var_map_clear(%struct.edge_def* %19), !dbg !18028
  br label %return, !dbg !18029

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !18029
}

declare dso_local %struct.VEC_edge_var_map_heap* @redirect_edge_var_map_vector(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_var_map_base_iterate(%struct.VEC_edge_var_map_base* %vec_, i32 %ix_, %struct._edge_var_map** %ptr) #0 !dbg !18030 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_edge_var_map_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct._edge_var_map**, align 8
  store %struct.VEC_edge_var_map_base* %vec_, %struct.VEC_edge_var_map_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_var_map_base** %vec_.addr, metadata !18035, metadata !DIExpression()), !dbg !18036
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !18037, metadata !DIExpression()), !dbg !18036
  store %struct._edge_var_map** %ptr, %struct._edge_var_map*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._edge_var_map*** %ptr.addr, metadata !18038, metadata !DIExpression()), !dbg !18036
  %0 = load %struct.VEC_edge_var_map_base*, %struct.VEC_edge_var_map_base** %vec_.addr, align 8, !dbg !18039
  %tobool = icmp ne %struct.VEC_edge_var_map_base* %0, null, !dbg !18039
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !18039

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !18039
  %2 = load %struct.VEC_edge_var_map_base*, %struct.VEC_edge_var_map_base** %vec_.addr, align 8, !dbg !18039
  %num = getelementptr inbounds %struct.VEC_edge_var_map_base, %struct.VEC_edge_var_map_base* %2, i32 0, i32 0, !dbg !18039
  %3 = load i32, i32* %num, align 8, !dbg !18039
  %cmp = icmp ult i32 %1, %3, !dbg !18039
  br i1 %cmp, label %if.then, label %if.else, !dbg !18036

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_edge_var_map_base*, %struct.VEC_edge_var_map_base** %vec_.addr, align 8, !dbg !18041
  %vec = getelementptr inbounds %struct.VEC_edge_var_map_base, %struct.VEC_edge_var_map_base* %4, i32 0, i32 2, !dbg !18041
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !18041
  %idxprom = zext i32 %5 to i64, !dbg !18041
  %arrayidx = getelementptr inbounds [1 x %struct._edge_var_map], [1 x %struct._edge_var_map]* %vec, i64 0, i64 %idxprom, !dbg !18041
  %6 = load %struct._edge_var_map**, %struct._edge_var_map*** %ptr.addr, align 8, !dbg !18041
  store %struct._edge_var_map* %arrayidx, %struct._edge_var_map** %6, align 8, !dbg !18041
  store i32 1, i32* %retval, align 4, !dbg !18041
  br label %return, !dbg !18041

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct._edge_var_map**, %struct._edge_var_map*** %ptr.addr, align 8, !dbg !18043
  store %struct._edge_var_map* null, %struct._edge_var_map** %7, align 8, !dbg !18043
  store i32 0, i32* %retval, align 4, !dbg !18043
  br label %return, !dbg !18043

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !18036
  ret i32 %8, !dbg !18036
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @redirect_edge_var_map_result(%struct._edge_var_map* %v) #0 !dbg !18045 {
entry:
  %v.addr = alloca %struct._edge_var_map*, align 8
  store %struct._edge_var_map* %v, %struct._edge_var_map** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._edge_var_map** %v.addr, metadata !18048, metadata !DIExpression()), !dbg !18049
  %0 = load %struct._edge_var_map*, %struct._edge_var_map** %v.addr, align 8, !dbg !18050
  %result = getelementptr inbounds %struct._edge_var_map, %struct._edge_var_map* %0, i32 0, i32 0, !dbg !18051
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !18051
  ret %union.tree_node* %1, !dbg !18052
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @redirect_edge_var_map_def(%struct._edge_var_map* %v) #0 !dbg !18053 {
entry:
  %v.addr = alloca %struct._edge_var_map*, align 8
  store %struct._edge_var_map* %v, %struct._edge_var_map** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._edge_var_map** %v.addr, metadata !18054, metadata !DIExpression()), !dbg !18055
  %0 = load %struct._edge_var_map*, %struct._edge_var_map** %v.addr, align 8, !dbg !18056
  %def = getelementptr inbounds %struct._edge_var_map, %struct._edge_var_map* %0, i32 0, i32 1, !dbg !18057
  %1 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !18057
  ret %union.tree_node* %1, !dbg !18058
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @redirect_edge_var_map_location(%struct._edge_var_map* %v) #0 !dbg !18059 {
entry:
  %v.addr = alloca %struct._edge_var_map*, align 8
  store %struct._edge_var_map* %v, %struct._edge_var_map** %v.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._edge_var_map** %v.addr, metadata !18062, metadata !DIExpression()), !dbg !18063
  %0 = load %struct._edge_var_map*, %struct._edge_var_map** %v.addr, align 8, !dbg !18064
  %locus = getelementptr inbounds %struct._edge_var_map, %struct._edge_var_map* %0, i32 0, i32 2, !dbg !18065
  %1 = load i32, i32* %locus, align 8, !dbg !18065
  ret i32 %1, !dbg !18066
}

declare dso_local void @redirect_edge_var_map_clear(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_phi_set_result(%union.gimple_statement_d* %gs, %union.tree_node* %result) #0 !dbg !18067 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %result.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !18068, metadata !DIExpression()), !dbg !18069
  store %union.tree_node* %result, %union.tree_node** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %result.addr, metadata !18070, metadata !DIExpression()), !dbg !18071
  %0 = load %union.tree_node*, %union.tree_node** %result.addr, align 8, !dbg !18072
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !18073
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !18074
  %result1 = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !18075
  store %union.tree_node* %0, %union.tree_node** %result1, align 8, !dbg !18076
  ret void, !dbg !18077
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @need_fake_edge_p(%union.gimple_statement_d* %t) #0 !dbg !18078 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.gimple_statement_d*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %call_flags = alloca i32, align 4
  store %union.gimple_statement_d* %t, %union.gimple_statement_d** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t.addr, metadata !18079, metadata !DIExpression()), !dbg !18080
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !18081, metadata !DIExpression()), !dbg !18082
  store %union.tree_node* null, %union.tree_node** %fndecl, align 8, !dbg !18082
  call void @llvm.dbg.declare(metadata i32* %call_flags, metadata !18083, metadata !DIExpression()), !dbg !18084
  store i32 0, i32* %call_flags, align 4, !dbg !18084
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !18085
  %call = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %0), !dbg !18087
  %tobool = icmp ne i8 %call, 0, !dbg !18087
  br i1 %tobool, label %if.then, label %if.end, !dbg !18088

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !18089
  %call1 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %1), !dbg !18091
  store %union.tree_node* %call1, %union.tree_node** %fndecl, align 8, !dbg !18092
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !18093
  %call2 = call i32 @gimple_call_flags(%union.gimple_statement_d* %2), !dbg !18094
  store i32 %call2, i32* %call_flags, align 4, !dbg !18095
  br label %if.end, !dbg !18096

if.end:                                           ; preds = %if.then, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !18097
  %call3 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %3), !dbg !18099
  %conv = zext i8 %call3 to i32, !dbg !18099
  %tobool4 = icmp ne i32 %conv, 0, !dbg !18099
  br i1 %tobool4, label %land.lhs.true, label %if.end28, !dbg !18100

land.lhs.true:                                    ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !18101
  %tobool5 = icmp ne %union.tree_node* %4, null, !dbg !18101
  br i1 %tobool5, label %land.lhs.true6, label %if.end28, !dbg !18102

land.lhs.true6:                                   ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !18103
  %function_decl = bitcast %union.tree_node* %5 to %struct.tree_function_decl*, !dbg !18103
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !18103
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !18103
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !18103
  %bf.clear = and i32 %bf.lshr, 3, !dbg !18103
  %cmp = icmp ne i32 %bf.clear, 0, !dbg !18103
  br i1 %cmp, label %land.lhs.true8, label %if.end28, !dbg !18104

land.lhs.true8:                                   ; preds = %land.lhs.true6
  %6 = load i32, i32* %call_flags, align 4, !dbg !18105
  %and = and i32 %6, 64, !dbg !18106
  %tobool9 = icmp ne i32 %and, 0, !dbg !18106
  br i1 %tobool9, label %land.lhs.true10, label %if.end28, !dbg !18107

land.lhs.true10:                                  ; preds = %land.lhs.true8
  %7 = load i32, i32* %call_flags, align 4, !dbg !18108
  %and11 = and i32 %7, 128, !dbg !18109
  %tobool12 = icmp ne i32 %and11, 0, !dbg !18109
  br i1 %tobool12, label %if.end28, label %land.lhs.true13, !dbg !18110

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %8 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !18111
  %function_decl14 = bitcast %union.tree_node* %8 to %struct.tree_function_decl*, !dbg !18111
  %built_in_class15 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl14, i32 0, i32 5, !dbg !18111
  %bf.load16 = load i32, i32* %built_in_class15, align 8, !dbg !18111
  %bf.lshr17 = lshr i32 %bf.load16, 11, !dbg !18111
  %bf.clear18 = and i32 %bf.lshr17, 3, !dbg !18111
  %cmp19 = icmp eq i32 %bf.clear18, 3, !dbg !18112
  br i1 %cmp19, label %land.lhs.true21, label %if.then27, !dbg !18113

land.lhs.true21:                                  ; preds = %land.lhs.true13
  %9 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !18114
  %function_decl22 = bitcast %union.tree_node* %9 to %struct.tree_function_decl*, !dbg !18114
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl22, i32 0, i32 5, !dbg !18114
  %bf.load23 = load i32, i32* %function_code, align 8, !dbg !18114
  %bf.clear24 = and i32 %bf.load23, 2047, !dbg !18114
  %cmp25 = icmp eq i32 %bf.clear24, 453, !dbg !18115
  br i1 %cmp25, label %if.end28, label %if.then27, !dbg !18116

if.then27:                                        ; preds = %land.lhs.true21, %land.lhs.true13
  store i8 0, i8* %retval, align 1, !dbg !18117
  br label %return, !dbg !18117

if.end28:                                         ; preds = %land.lhs.true21, %land.lhs.true10, %land.lhs.true8, %land.lhs.true6, %land.lhs.true, %if.end
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !18118
  %call29 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %10), !dbg !18120
  %conv30 = zext i8 %call29 to i32, !dbg !18120
  %tobool31 = icmp ne i32 %conv30, 0, !dbg !18120
  br i1 %tobool31, label %land.lhs.true32, label %if.end36, !dbg !18121

land.lhs.true32:                                  ; preds = %if.end28
  %11 = load i32, i32* %call_flags, align 4, !dbg !18122
  %and33 = and i32 %11, 8, !dbg !18123
  %tobool34 = icmp ne i32 %and33, 0, !dbg !18123
  br i1 %tobool34, label %if.end36, label %if.then35, !dbg !18124

if.then35:                                        ; preds = %land.lhs.true32
  store i8 1, i8* %retval, align 1, !dbg !18125
  br label %return, !dbg !18125

if.end36:                                         ; preds = %land.lhs.true32, %if.end28
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !18126
  %call37 = call i32 @gimple_code(%union.gimple_statement_d* %12), !dbg !18128
  %cmp38 = icmp eq i32 %call37, 7, !dbg !18129
  br i1 %cmp38, label %land.lhs.true40, label %if.end48, !dbg !18130

land.lhs.true40:                                  ; preds = %if.end36
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !18131
  %call41 = call zeroext i8 @gimple_asm_volatile_p(%union.gimple_statement_d* %13), !dbg !18132
  %conv42 = zext i8 %call41 to i32, !dbg !18132
  %tobool43 = icmp ne i32 %conv42, 0, !dbg !18132
  br i1 %tobool43, label %if.then47, label %lor.lhs.false, !dbg !18133

lor.lhs.false:                                    ; preds = %land.lhs.true40
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !18134
  %call44 = call zeroext i8 @gimple_asm_input_p(%union.gimple_statement_d* %14), !dbg !18135
  %conv45 = zext i8 %call44 to i32, !dbg !18135
  %tobool46 = icmp ne i32 %conv45, 0, !dbg !18135
  br i1 %tobool46, label %if.then47, label %if.end48, !dbg !18136

if.then47:                                        ; preds = %lor.lhs.false, %land.lhs.true40
  store i8 1, i8* %retval, align 1, !dbg !18137
  br label %return, !dbg !18137

if.end48:                                         ; preds = %lor.lhs.false, %if.end36
  store i8 0, i8* %retval, align 1, !dbg !18138
  br label %return, !dbg !18138

return:                                           ; preds = %if.end48, %if.then47, %if.then35, %if.then27
  %15 = load i8, i8* %retval, align 1, !dbg !18139
  ret i8 %15, !dbg !18139
}

declare dso_local void @gsi_insert_on_edge(%struct.edge_def*, %union.gimple_statement_d*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_nop() #2

declare dso_local void @gsi_commit_edge_inserts() #2

declare dso_local %struct.edge_def* @split_block(%struct.basic_block_def*, i8*) #2

declare dso_local void @verify_flow_info() #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_asm_volatile_p(%union.gimple_statement_d* %gs) #0 !dbg !18140 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !18141, metadata !DIExpression()), !dbg !18142
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !18143
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !18144
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !18145
  %bf.load = load i32, i32* %1, align 8, !dbg !18145
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !18145
  %and = and i32 %bf.lshr, 2, !dbg !18146
  %cmp = icmp ne i32 %and, 0, !dbg !18147
  %conv = zext i1 %cmp to i32, !dbg !18147
  %conv1 = trunc i32 %conv to i8, !dbg !18148
  ret i8 %conv1, !dbg !18149
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_asm_input_p(%union.gimple_statement_d* %gs) #0 !dbg !18150 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !18151, metadata !DIExpression()), !dbg !18152
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !18153
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !18154
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !18155
  %bf.load = load i32, i32* %1, align 8, !dbg !18155
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !18155
  %and = and i32 %bf.lshr, 1, !dbg !18156
  %cmp = icmp ne i32 %and, 0, !dbg !18157
  %conv = zext i1 %cmp to i32, !dbg !18157
  %conv1 = trunc i32 %conv to i8, !dbg !18158
  ret i8 %conv1, !dbg !18159
}

declare dso_local void @reserve_phi_args_for_new_edge(%struct.basic_block_def*) #2

declare dso_local void @remove_phi_args(%struct.edge_def*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_cond_from_tree(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local zeroext i8 @warning_at(i32, i32, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_no_warning_p(%union.gimple_statement_d* %stmt) #0 !dbg !18160 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !18161, metadata !DIExpression()), !dbg !18162
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !18163
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !18164
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !18165
  %bf.load = load i32, i32* %1, align 8, !dbg !18165
  %bf.lshr = lshr i32 %bf.load, 8, !dbg !18165
  %bf.clear = and i32 %bf.lshr, 1, !dbg !18165
  %conv = trunc i32 %bf.clear to i8, !dbg !18163
  ret i8 %conv, !dbg !18166
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_warn_unused_result(%struct.gimple_seq_d* %seq) #0 !dbg !18167 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  %fdecl = alloca %union.tree_node*, align 8
  %ftype = alloca %union.tree_node*, align 8
  %i = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %g = alloca %union.gimple_statement_d*, align 8
  %loc = alloca i32, align 4
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !18168, metadata !DIExpression()), !dbg !18169
  call void @llvm.dbg.declare(metadata %union.tree_node** %fdecl, metadata !18170, metadata !DIExpression()), !dbg !18171
  call void @llvm.dbg.declare(metadata %union.tree_node** %ftype, metadata !18172, metadata !DIExpression()), !dbg !18173
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !18174, metadata !DIExpression()), !dbg !18175
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !18176
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %0), !dbg !18178
  %1 = bitcast %struct.gimple_stmt_iterator* %i to i8*, !dbg !18178
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !18178
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !18178
  br label %for.cond, !dbg !18179

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !18180
  %tobool = icmp ne i8 %call, 0, !dbg !18182
  %lnot = xor i1 %tobool, true, !dbg !18182
  br i1 %lnot, label %for.body, label %for.end, !dbg !18183

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g, metadata !18184, metadata !DIExpression()), !dbg !18186
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i), !dbg !18187
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %g, align 8, !dbg !18186
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !18188
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %3), !dbg !18189
  switch i32 %call2, label %sw.default [
    i32 10, label %sw.bb
    i32 17, label %sw.bb4
    i32 11, label %sw.bb7
    i32 12, label %sw.bb9
    i32 8, label %sw.bb11
  ], !dbg !18190

sw.bb:                                            ; preds = %for.body
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !18191
  %call3 = call %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %4), !dbg !18193
  call void @do_warn_unused_result(%struct.gimple_seq_d* %call3), !dbg !18194
  br label %sw.epilog, !dbg !18195

sw.bb4:                                           ; preds = %for.body
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !18196
  %call5 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %5), !dbg !18197
  call void @do_warn_unused_result(%struct.gimple_seq_d* %call5), !dbg !18198
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !18199
  %call6 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %6), !dbg !18200
  call void @do_warn_unused_result(%struct.gimple_seq_d* %call6), !dbg !18201
  br label %sw.epilog, !dbg !18202

sw.bb7:                                           ; preds = %for.body
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !18203
  %call8 = call %struct.gimple_seq_d* @gimple_catch_handler(%union.gimple_statement_d* %7), !dbg !18204
  call void @do_warn_unused_result(%struct.gimple_seq_d* %call8), !dbg !18205
  br label %sw.epilog, !dbg !18206

sw.bb9:                                           ; preds = %for.body
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !18207
  %call10 = call %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %8), !dbg !18208
  call void @do_warn_unused_result(%struct.gimple_seq_d* %call10), !dbg !18209
  br label %sw.epilog, !dbg !18210

sw.bb11:                                          ; preds = %for.body
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !18211
  %call12 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %9), !dbg !18213
  %tobool13 = icmp ne %union.tree_node* %call12, null, !dbg !18213
  br i1 %tobool13, label %if.then, label %if.end, !dbg !18214

if.then:                                          ; preds = %sw.bb11
  br label %sw.epilog, !dbg !18215

if.end:                                           ; preds = %sw.bb11
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !18216
  %call14 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %10), !dbg !18217
  store %union.tree_node* %call14, %union.tree_node** %fdecl, align 8, !dbg !18218
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !18219
  %call15 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %11), !dbg !18219
  %common = bitcast %union.tree_node* %call15 to %struct.tree_common*, !dbg !18219
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !18219
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !18219
  %common16 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !18219
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2, !dbg !18219
  %13 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !18219
  store %union.tree_node* %13, %union.tree_node** %ftype, align 8, !dbg !18220
  %14 = load %union.tree_node*, %union.tree_node** %ftype, align 8, !dbg !18221
  %type18 = bitcast %union.tree_node* %14 to %struct.tree_type*, !dbg !18221
  %attributes = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type18, i32 0, i32 4, !dbg !18221
  %15 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !18221
  %call19 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.182, i64 0, i64 0), %union.tree_node* %15), !dbg !18223
  %tobool20 = icmp ne %union.tree_node* %call19, null, !dbg !18223
  br i1 %tobool20, label %if.then21, label %if.end28, !dbg !18224

if.then21:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !18225, metadata !DIExpression()), !dbg !18227
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !18228
  %call22 = call i32 @gimple_location(%union.gimple_statement_d* %16), !dbg !18229
  store i32 %call22, i32* %loc, align 4, !dbg !18227
  %17 = load %union.tree_node*, %union.tree_node** %fdecl, align 8, !dbg !18230
  %tobool23 = icmp ne %union.tree_node* %17, null, !dbg !18230
  br i1 %tobool23, label %if.then24, label %if.else, !dbg !18232

if.then24:                                        ; preds = %if.then21
  %18 = load i32, i32* %loc, align 4, !dbg !18233
  %19 = load %union.tree_node*, %union.tree_node** %fdecl, align 8, !dbg !18234
  %call25 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %18, i32 227, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.183, i64 0, i64 0), %union.tree_node* %19), !dbg !18235
  br label %if.end27, !dbg !18235

if.else:                                          ; preds = %if.then21
  %20 = load i32, i32* %loc, align 4, !dbg !18236
  %call26 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %20, i32 227, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.184, i64 0, i64 0)), !dbg !18237
  br label %if.end27

if.end27:                                         ; preds = %if.else, %if.then24
  br label %if.end28, !dbg !18238

if.end28:                                         ; preds = %if.end27, %if.end
  br label %sw.epilog, !dbg !18239

sw.default:                                       ; preds = %for.body
  br label %sw.epilog, !dbg !18240

sw.epilog:                                        ; preds = %sw.default, %if.end28, %if.then, %sw.bb9, %sw.bb7, %sw.bb4, %sw.bb
  br label %for.inc, !dbg !18241

for.inc:                                          ; preds = %sw.epilog
  call void @gsi_next(%struct.gimple_stmt_iterator* %i), !dbg !18242
  br label %for.cond, !dbg !18243, !llvm.loop !18244

for.end:                                          ; preds = %for.cond
  ret void, !dbg !18246
}

declare dso_local %union.tree_node* @lookup_attribute(i8*, %union.tree_node*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!4354, !4355, !4356}
!llvm.ident = !{!4357}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "pass_build_cfg", scope: !2, file: !3, line: 248, type: !4307, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !2546, globals: !4122, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-cfg.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !13, !141, !336, !345, !349, !367, !374, !381, !387, !392, !397, !404, !580, !619, !753, !761, !777, !782, !795, !809, !813, !845, !859, !864, !890, !897, !902, !908, !915, !923, !929, !939, !1659, !1672}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !6, line: 30, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12}
!9 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!13 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !14, line: 7, baseType: !7, size: 32, elements: !15)
!14 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!15 = !{!16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140}
!16 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!17 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!18 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!19 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!20 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!21 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!22 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!23 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!24 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!25 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!26 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!27 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!28 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!29 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!30 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!31 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!32 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!33 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!34 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!35 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!36 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!37 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!38 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!39 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!40 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!41 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!42 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!43 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!44 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!45 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!46 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!47 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!48 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!49 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!50 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!51 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!52 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!53 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!54 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!55 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!56 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!57 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!58 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!59 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!60 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!61 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!62 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!63 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!64 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!65 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!66 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!67 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!68 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!69 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!70 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!71 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!72 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!73 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!74 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!75 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!76 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!77 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!78 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!79 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!80 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!81 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!82 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!83 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!84 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!85 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!86 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!87 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!88 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!89 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!90 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!91 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!92 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!93 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!94 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!95 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!96 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!97 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!98 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!99 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!100 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!101 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!102 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!103 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!104 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!106 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!107 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!108 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!109 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!110 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!111 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!112 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!113 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!114 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!115 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!116 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!117 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!118 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!119 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!120 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!121 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!122 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!123 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!124 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!125 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!126 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!127 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!128 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!129 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!130 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!132 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!133 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!134 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!135 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!136 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!137 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!139 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!140 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!141 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !142, line: 39, baseType: !7, size: 32, elements: !143)
!142 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!143 = !{!144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335}
!144 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!145 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!146 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!147 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!148 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!149 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!150 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!151 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!152 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!153 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!154 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!155 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!156 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!157 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!158 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!159 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!160 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!161 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!162 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!163 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!164 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!165 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!166 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!167 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!168 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!169 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!170 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!171 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!172 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!173 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!174 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!175 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!176 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!177 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!178 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!179 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!180 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!181 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!182 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!183 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!184 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!185 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!186 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!187 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!188 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!189 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!190 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!191 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!192 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!193 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!194 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!195 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!196 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!197 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!198 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!199 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!200 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!201 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!202 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!203 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!204 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!205 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!206 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!207 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!208 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!209 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!210 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!211 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!212 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!213 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!214 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!215 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!216 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!217 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!218 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!219 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!220 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!221 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!222 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!223 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!224 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!225 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!226 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!227 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!228 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!229 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!230 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!231 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!232 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!233 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!234 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!235 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!236 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!237 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!238 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!239 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!240 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!241 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!242 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!243 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!244 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!245 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!246 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!247 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!248 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!249 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!250 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!251 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!252 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!253 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!254 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!255 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!256 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!257 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!259 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!260 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!261 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!262 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!263 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!264 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!265 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!266 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!267 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!268 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!269 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!270 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!271 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!272 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!273 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!274 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!275 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!276 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!277 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!278 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!279 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!280 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!281 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!282 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!283 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!284 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!285 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!286 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!287 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!288 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!289 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!290 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!291 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!292 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!293 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!294 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!295 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!296 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!301 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!302 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!303 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!304 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!305 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!306 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!307 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!308 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!309 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!310 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!311 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!312 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!313 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!322 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!323 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!324 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!325 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!326 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!327 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!328 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!329 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!330 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!331 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!332 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!333 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!334 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!335 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!336 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !337, line: 31, baseType: !7, size: 32, elements: !338)
!337 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!338 = !{!339, !340, !341, !342, !343, !344}
!339 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!340 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!341 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!342 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!343 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!344 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!345 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !337, line: 91, baseType: !7, size: 32, elements: !346)
!346 = !{!347, !348}
!347 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!348 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!349 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !142, line: 280, baseType: !7, size: 32, elements: !350)
!350 = !{!351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366}
!351 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!367 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !142, line: 1817, baseType: !7, size: 32, elements: !368)
!368 = !{!369, !370, !371, !372, !373}
!369 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!370 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!371 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!372 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!374 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !142, line: 1805, baseType: !7, size: 32, elements: !375)
!375 = !{!376, !377, !378, !379, !380}
!376 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!377 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!378 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!379 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!381 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !382, line: 363, baseType: !7, size: 32, elements: !383)
!382 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!383 = !{!384, !385, !386}
!384 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!385 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!386 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!387 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !382, line: 355, baseType: !7, size: 32, elements: !388)
!388 = !{!389, !390, !391}
!389 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!390 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!391 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!392 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !393, line: 474, baseType: !7, size: 32, elements: !394)
!393 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!394 = !{!395, !396}
!395 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!396 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!397 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !398, line: 104, baseType: !7, size: 32, elements: !399)
!398 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!399 = !{!400, !401, !402, !403}
!400 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!401 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!402 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!403 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!404 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !405, line: 74, baseType: !7, size: 32, elements: !406)
!405 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!406 = !{!407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579}
!407 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!408 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!409 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!410 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!411 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!412 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!413 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!414 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!415 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!416 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!417 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!574 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!575 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!576 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!577 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!578 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!579 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!580 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !581, line: 51, baseType: !7, size: 32, elements: !582)
!581 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!582 = !{!583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618}
!583 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!584 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!585 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!586 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!587 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!588 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!589 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!590 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!591 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!592 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!593 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!594 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!595 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!596 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!597 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!598 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!599 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!600 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!601 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!602 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!603 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!604 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!605 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!606 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!607 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!608 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!609 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!610 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!611 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!612 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!613 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!614 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!615 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!616 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!617 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!618 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!619 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !142, line: 3410, baseType: !7, size: 32, elements: !620)
!620 = !{!621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752}
!621 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!622 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!623 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!624 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!625 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!626 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!627 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!628 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!629 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!630 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!631 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!632 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!633 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!634 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!635 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!636 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!637 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!638 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!639 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!640 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!641 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!642 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!643 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!644 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!645 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!646 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!647 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!648 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!649 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!650 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!651 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!652 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!653 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!654 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!655 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!656 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!657 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!658 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!659 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!660 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!661 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!662 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!663 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!664 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!665 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!666 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!667 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!668 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!669 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!670 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!671 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!672 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!673 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!674 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!675 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!676 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!677 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!678 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!679 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!680 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!681 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!682 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!683 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!684 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!685 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!686 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!687 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!688 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!689 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!690 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!691 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!692 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!693 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!694 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!695 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!696 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!697 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!698 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!699 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!700 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!701 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!702 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!703 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!704 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!705 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!706 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!707 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!708 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!709 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!710 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!711 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!712 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!713 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!714 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!715 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!716 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!717 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!718 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!719 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!720 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!721 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!722 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!723 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!724 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!725 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!726 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!727 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!728 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!729 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!730 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!731 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!732 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!733 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!734 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!735 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!736 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!737 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!738 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!739 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!740 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!741 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!742 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!743 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!744 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!745 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!746 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!747 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!748 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!749 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!750 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!751 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!752 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!753 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "warn_strict_overflow_code", file: !754, line: 367, baseType: !7, size: 32, elements: !755)
!754 = !DIFile(filename: "./flags.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!755 = !{!756, !757, !758, !759, !760}
!756 = !DIEnumerator(name: "WARN_STRICT_OVERFLOW_ALL", value: 1, isUnsigned: true)
!757 = !DIEnumerator(name: "WARN_STRICT_OVERFLOW_CONDITIONAL", value: 2, isUnsigned: true)
!758 = !DIEnumerator(name: "WARN_STRICT_OVERFLOW_COMPARISON", value: 3, isUnsigned: true)
!759 = !DIEnumerator(name: "WARN_STRICT_OVERFLOW_MISC", value: 4, isUnsigned: true)
!760 = !DIEnumerator(name: "WARN_STRICT_OVERFLOW_MAGNITUDE", value: 5, isUnsigned: true)
!761 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !762, line: 29, baseType: !7, size: 32, elements: !763)
!762 = !DIFile(filename: "./diagnostic.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!763 = !{!764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776}
!764 = !DIEnumerator(name: "DK_UNSPECIFIED", value: 0, isUnsigned: true)
!765 = !DIEnumerator(name: "DK_IGNORED", value: 1, isUnsigned: true)
!766 = !DIEnumerator(name: "DK_FATAL", value: 2, isUnsigned: true)
!767 = !DIEnumerator(name: "DK_ICE", value: 3, isUnsigned: true)
!768 = !DIEnumerator(name: "DK_ERROR", value: 4, isUnsigned: true)
!769 = !DIEnumerator(name: "DK_SORRY", value: 5, isUnsigned: true)
!770 = !DIEnumerator(name: "DK_WARNING", value: 6, isUnsigned: true)
!771 = !DIEnumerator(name: "DK_ANACHRONISM", value: 7, isUnsigned: true)
!772 = !DIEnumerator(name: "DK_NOTE", value: 8, isUnsigned: true)
!773 = !DIEnumerator(name: "DK_DEBUG", value: 9, isUnsigned: true)
!774 = !DIEnumerator(name: "DK_PEDWARN", value: 10, isUnsigned: true)
!775 = !DIEnumerator(name: "DK_PERMERROR", value: 11, isUnsigned: true)
!776 = !DIEnumerator(name: "DK_LAST_DIAGNOSTIC_KIND", value: 12, isUnsigned: true)
!777 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !581, line: 4603, baseType: !7, size: 32, elements: !778)
!778 = !{!779, !780, !781}
!779 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!780 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!781 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!782 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !142, line: 58, baseType: !7, size: 32, elements: !783)
!783 = !{!784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794}
!784 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!785 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!786 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!787 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!788 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!789 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!790 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!791 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!792 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!793 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!794 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!795 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !382, line: 295, baseType: !7, size: 32, elements: !796)
!796 = !{!797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808}
!797 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!798 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!799 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!800 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!801 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!802 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!803 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!804 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!805 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!806 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!807 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!808 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!809 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !382, line: 912, baseType: !7, size: 32, elements: !810)
!810 = !{!811, !812}
!811 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!812 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!813 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "br_predictor", file: !814, line: 24, baseType: !7, size: 32, elements: !815)
!814 = !DIFile(filename: "./predict.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!815 = !{!816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844}
!816 = !DIEnumerator(name: "PRED_COMBINED", value: 0, isUnsigned: true)
!817 = !DIEnumerator(name: "PRED_DS_THEORY", value: 1, isUnsigned: true)
!818 = !DIEnumerator(name: "PRED_FIRST_MATCH", value: 2, isUnsigned: true)
!819 = !DIEnumerator(name: "PRED_NO_PREDICTION", value: 3, isUnsigned: true)
!820 = !DIEnumerator(name: "PRED_UNCONDITIONAL", value: 4, isUnsigned: true)
!821 = !DIEnumerator(name: "PRED_LOOP_ITERATIONS", value: 5, isUnsigned: true)
!822 = !DIEnumerator(name: "PRED_BUILTIN_EXPECT", value: 6, isUnsigned: true)
!823 = !DIEnumerator(name: "PRED_LOOP_ITERATIONS_GUESSED", value: 7, isUnsigned: true)
!824 = !DIEnumerator(name: "PRED_CONTINUE", value: 8, isUnsigned: true)
!825 = !DIEnumerator(name: "PRED_NORETURN", value: 9, isUnsigned: true)
!826 = !DIEnumerator(name: "PRED_COLD_FUNCTION", value: 10, isUnsigned: true)
!827 = !DIEnumerator(name: "PRED_LOOP_BRANCH", value: 11, isUnsigned: true)
!828 = !DIEnumerator(name: "PRED_LOOP_EXIT", value: 12, isUnsigned: true)
!829 = !DIEnumerator(name: "PRED_POINTER", value: 13, isUnsigned: true)
!830 = !DIEnumerator(name: "PRED_TREE_POINTER", value: 14, isUnsigned: true)
!831 = !DIEnumerator(name: "PRED_OPCODE_POSITIVE", value: 15, isUnsigned: true)
!832 = !DIEnumerator(name: "PRED_OPCODE_NONEQUAL", value: 16, isUnsigned: true)
!833 = !DIEnumerator(name: "PRED_FPOPCODE", value: 17, isUnsigned: true)
!834 = !DIEnumerator(name: "PRED_TREE_OPCODE_POSITIVE", value: 18, isUnsigned: true)
!835 = !DIEnumerator(name: "PRED_TREE_OPCODE_NONEQUAL", value: 19, isUnsigned: true)
!836 = !DIEnumerator(name: "PRED_TREE_FPOPCODE", value: 20, isUnsigned: true)
!837 = !DIEnumerator(name: "PRED_CALL", value: 21, isUnsigned: true)
!838 = !DIEnumerator(name: "PRED_TREE_EARLY_RETURN", value: 22, isUnsigned: true)
!839 = !DIEnumerator(name: "PRED_GOTO", value: 23, isUnsigned: true)
!840 = !DIEnumerator(name: "PRED_CONST_RETURN", value: 24, isUnsigned: true)
!841 = !DIEnumerator(name: "PRED_NEGATIVE_RETURN", value: 25, isUnsigned: true)
!842 = !DIEnumerator(name: "PRED_NULL_RETURN", value: 26, isUnsigned: true)
!843 = !DIEnumerator(name: "PRED_MUDFLAP", value: 27, isUnsigned: true)
!844 = !DIEnumerator(name: "END_PREDICTORS", value: 28, isUnsigned: true)
!845 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_dump_index", file: !398, line: 30, baseType: !7, size: 32, elements: !846)
!846 = !{!847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858}
!847 = !DIEnumerator(name: "TDI_none", value: 0, isUnsigned: true)
!848 = !DIEnumerator(name: "TDI_cgraph", value: 1, isUnsigned: true)
!849 = !DIEnumerator(name: "TDI_tu", value: 2, isUnsigned: true)
!850 = !DIEnumerator(name: "TDI_class", value: 3, isUnsigned: true)
!851 = !DIEnumerator(name: "TDI_original", value: 4, isUnsigned: true)
!852 = !DIEnumerator(name: "TDI_generic", value: 5, isUnsigned: true)
!853 = !DIEnumerator(name: "TDI_nested", value: 6, isUnsigned: true)
!854 = !DIEnumerator(name: "TDI_vcg", value: 7, isUnsigned: true)
!855 = !DIEnumerator(name: "TDI_tree_all", value: 8, isUnsigned: true)
!856 = !DIEnumerator(name: "TDI_rtl_all", value: 9, isUnsigned: true)
!857 = !DIEnumerator(name: "TDI_ipa_all", value: 10, isUnsigned: true)
!858 = !DIEnumerator(name: "TDI_end", value: 11, isUnsigned: true)
!859 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !860, line: 147, baseType: !7, size: 32, elements: !861)
!860 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!861 = !{!862, !863}
!862 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!863 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!864 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !581, line: 727, baseType: !7, size: 32, elements: !865)
!865 = !{!866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889}
!866 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!867 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!868 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!869 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!870 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!871 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!872 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!873 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!874 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!875 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!876 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!877 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!878 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!879 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!880 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!881 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!882 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!883 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!884 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!885 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!886 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!887 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!888 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!889 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!890 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !891, line: 119, baseType: !7, size: 32, elements: !892)
!891 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!892 = !{!893, !894, !895, !896}
!893 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!894 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!895 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!896 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!897 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "li_flags", file: !337, line: 498, baseType: !7, size: 32, elements: !898)
!898 = !{!899, !900, !901}
!899 = !DIEnumerator(name: "LI_INCLUDE_ROOT", value: 1, isUnsigned: true)
!900 = !DIEnumerator(name: "LI_FROM_INNERMOST", value: 2, isUnsigned: true)
!901 = !DIEnumerator(name: "LI_ONLY_INNERMOST", value: 4, isUnsigned: true)
!902 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !581, line: 80, baseType: !7, size: 32, elements: !903)
!903 = !{!904, !905, !906, !907}
!904 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!905 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!906 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!907 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!908 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !142, line: 4288, baseType: !7, size: 32, elements: !909)
!909 = !{!910, !911, !912, !913, !914}
!910 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!911 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!912 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!913 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!914 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!915 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cgraph_state", file: !916, line: 407, baseType: !7, size: 32, elements: !917)
!916 = !DIFile(filename: "./cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!917 = !{!918, !919, !920, !921, !922}
!918 = !DIEnumerator(name: "CGRAPH_STATE_CONSTRUCTION", value: 0, isUnsigned: true)
!919 = !DIEnumerator(name: "CGRAPH_STATE_IPA", value: 1, isUnsigned: true)
!920 = !DIEnumerator(name: "CGRAPH_STATE_IPA_SSA", value: 2, isUnsigned: true)
!921 = !DIEnumerator(name: "CGRAPH_STATE_EXPANSION", value: 3, isUnsigned: true)
!922 = !DIEnumerator(name: "CGRAPH_STATE_FINISHED", value: 4, isUnsigned: true)
!923 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !142, line: 205, baseType: !7, size: 32, elements: !924)
!924 = !{!925, !926, !927, !928}
!925 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!926 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!927 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!928 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!929 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !337, line: 170, baseType: !7, size: 32, elements: !930)
!930 = !{!931, !932, !933, !934, !935, !936, !937, !938}
!931 = !DIEnumerator(name: "LOOPS_HAVE_PREHEADERS", value: 1, isUnsigned: true)
!932 = !DIEnumerator(name: "LOOPS_HAVE_SIMPLE_LATCHES", value: 2, isUnsigned: true)
!933 = !DIEnumerator(name: "LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS", value: 4, isUnsigned: true)
!934 = !DIEnumerator(name: "LOOPS_HAVE_RECORDED_EXITS", value: 8, isUnsigned: true)
!935 = !DIEnumerator(name: "LOOPS_MAY_HAVE_MULTIPLE_LATCHES", value: 16, isUnsigned: true)
!936 = !DIEnumerator(name: "LOOP_CLOSED_SSA", value: 32, isUnsigned: true)
!937 = !DIEnumerator(name: "LOOPS_NEED_FIXUP", value: 64, isUnsigned: true)
!938 = !DIEnumerator(name: "LOOPS_HAVE_FALLTHRU_PREHEADERS", value: 128, isUnsigned: true)
!939 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !142, line: 220, baseType: !7, size: 32, elements: !940)
!940 = !{!941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658}
!941 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!942 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!943 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!944 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!945 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!946 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!947 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!948 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!949 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!950 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!951 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!952 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!953 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!954 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!955 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!956 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!957 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!958 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!959 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!960 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!961 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!962 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!963 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!964 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!965 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!966 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!967 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!968 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!969 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!970 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!971 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!972 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!973 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!974 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!975 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!976 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!977 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!978 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!979 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!980 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!981 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!982 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!983 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!984 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!985 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!986 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!987 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!988 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!989 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!990 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!991 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!992 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!993 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!994 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!995 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!996 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!997 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!998 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!999 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!1000 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!1001 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!1002 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!1003 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!1004 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!1005 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!1006 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!1007 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!1008 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!1009 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!1010 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!1011 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!1012 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!1013 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!1014 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!1015 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!1016 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!1017 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!1018 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!1019 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!1020 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!1021 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!1022 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!1023 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!1024 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!1025 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!1026 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!1027 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!1028 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!1029 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!1030 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!1031 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!1032 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!1033 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!1034 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!1035 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!1036 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!1037 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!1038 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!1039 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!1040 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!1041 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!1042 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!1043 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!1044 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!1045 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!1046 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!1047 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!1048 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!1049 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!1050 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!1051 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!1052 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!1053 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!1054 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!1055 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!1056 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!1057 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!1058 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!1059 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!1060 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!1061 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!1062 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!1063 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!1064 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!1065 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!1066 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!1067 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!1068 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!1069 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!1070 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!1071 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!1072 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!1073 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!1074 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!1075 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!1076 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!1077 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!1078 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!1079 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!1080 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!1081 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!1082 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!1083 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!1084 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!1085 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!1086 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!1087 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!1088 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!1089 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!1090 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!1091 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!1092 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!1093 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!1094 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!1095 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!1096 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!1097 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!1098 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!1099 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!1100 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!1101 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!1102 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!1103 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!1104 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!1105 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!1106 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!1107 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!1108 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!1109 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!1110 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!1111 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!1112 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!1113 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!1114 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!1115 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!1116 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!1117 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!1118 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!1119 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!1120 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!1121 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!1122 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!1123 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!1124 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!1125 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!1126 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!1127 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!1128 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!1129 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!1130 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!1131 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!1132 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!1133 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!1134 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!1135 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!1136 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!1137 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!1138 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!1139 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!1140 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!1141 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!1142 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!1143 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!1144 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!1145 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!1146 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!1147 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!1148 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!1149 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!1150 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!1151 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!1152 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!1153 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!1154 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!1155 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!1156 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!1157 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!1158 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!1159 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!1160 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!1161 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!1162 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!1163 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!1164 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!1165 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!1166 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!1167 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!1168 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!1169 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!1170 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!1171 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!1172 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!1173 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!1174 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!1175 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!1176 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!1177 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!1178 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!1179 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!1180 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!1181 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!1182 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!1183 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!1184 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!1185 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!1186 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!1187 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!1188 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!1189 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!1190 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!1191 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!1192 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!1193 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!1194 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!1195 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!1196 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!1197 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!1198 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!1199 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!1200 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!1201 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!1202 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!1203 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!1204 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!1205 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!1206 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!1207 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!1208 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!1209 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!1210 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!1211 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!1212 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!1213 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!1214 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!1215 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!1216 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!1217 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!1218 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!1219 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!1220 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!1221 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!1222 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!1223 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!1224 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!1225 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!1226 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!1227 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!1228 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!1229 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!1230 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!1231 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!1232 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!1233 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!1234 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!1235 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!1236 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!1237 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!1238 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!1239 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!1240 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!1241 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!1242 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!1243 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!1244 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!1245 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!1246 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!1247 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!1248 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!1249 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!1250 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!1251 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!1252 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!1253 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!1254 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!1255 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!1256 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!1257 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!1258 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!1259 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!1260 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!1261 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!1262 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!1263 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!1264 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!1265 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!1266 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!1267 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!1268 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!1269 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!1270 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!1271 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!1272 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!1273 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!1274 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!1275 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!1276 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!1277 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!1278 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!1279 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!1280 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!1281 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!1282 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!1283 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!1284 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!1285 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!1286 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!1287 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!1288 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!1289 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!1290 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!1291 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!1292 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!1293 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!1294 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!1295 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!1296 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!1297 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!1298 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!1299 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!1300 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!1301 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!1302 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!1303 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!1304 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!1305 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!1306 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!1307 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!1308 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!1309 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!1310 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!1311 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!1312 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!1313 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!1314 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!1315 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!1316 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!1317 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!1318 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!1319 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!1320 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!1321 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!1322 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!1323 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!1324 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!1325 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!1326 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!1327 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!1328 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!1329 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!1330 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!1331 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!1332 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!1333 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!1334 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!1335 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!1336 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!1337 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!1338 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!1339 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!1340 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!1341 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!1342 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!1343 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!1344 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!1345 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!1346 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!1347 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!1348 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!1349 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!1350 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!1351 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!1352 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!1353 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!1354 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!1355 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!1356 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!1357 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!1358 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!1359 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!1360 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!1361 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!1362 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!1363 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!1364 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!1365 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!1366 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!1367 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!1368 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!1369 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!1370 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!1371 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!1372 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!1373 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!1374 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!1375 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!1376 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!1377 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!1378 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!1379 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!1380 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!1381 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!1382 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!1383 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!1384 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!1385 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!1386 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!1387 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!1388 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!1389 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!1390 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!1391 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!1392 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!1393 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!1394 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!1395 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!1396 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!1397 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!1398 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!1399 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!1400 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!1401 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!1402 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!1403 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!1404 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!1405 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!1406 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!1407 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!1408 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!1409 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!1410 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!1411 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!1412 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!1413 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!1414 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!1415 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!1416 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!1417 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!1418 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!1419 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!1420 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!1421 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!1422 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!1423 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!1424 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!1425 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!1426 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!1427 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!1428 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!1429 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!1430 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!1431 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!1432 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!1433 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!1434 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!1435 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!1436 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!1437 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!1438 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!1439 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!1440 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!1441 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!1442 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!1443 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!1444 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!1445 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!1446 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!1447 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!1448 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!1449 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!1450 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!1451 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!1452 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!1453 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!1454 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!1455 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1456 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1457 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1458 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1459 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1460 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1461 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1462 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1463 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1464 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1465 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1466 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1467 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1468 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1469 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1470 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1471 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1472 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1473 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1474 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1475 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1476 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1477 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1478 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1479 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1480 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1481 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1482 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1483 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1484 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1485 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1486 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1487 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1488 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1489 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1490 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1491 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1492 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1493 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1494 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1495 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1496 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1497 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1498 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1499 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1500 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1501 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1502 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1503 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1504 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1505 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1506 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1507 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1508 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1509 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1510 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1511 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1512 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1513 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1514 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1515 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1516 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1517 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1518 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1519 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1520 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1521 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1522 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1523 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1524 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1525 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1526 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1527 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1528 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1529 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1530 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1531 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1532 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1533 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1534 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1535 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1536 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1537 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1538 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1539 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1540 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1541 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1542 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1543 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1544 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1545 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1546 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1547 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1548 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1549 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1550 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1551 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1552 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1553 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1554 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1555 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1556 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1557 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1558 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1559 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1560 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1561 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1562 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1563 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1564 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1565 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1566 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1567 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1568 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1569 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1570 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1571 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1572 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1573 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1574 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1575 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1576 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1577 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1578 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1579 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1580 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1581 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1582 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1583 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1584 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1585 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1586 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1587 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1588 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1589 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1590 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1591 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1592 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1593 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1594 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1595 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1596 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1597 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1598 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1599 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1600 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1601 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1602 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1603 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1604 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1605 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1606 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1607 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1608 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1609 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1610 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1611 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1612 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1613 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1614 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1615 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1616 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1617 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1618 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1619 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1620 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1621 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1622 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1623 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1624 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1625 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1626 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1627 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1628 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1629 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1630 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1631 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1632 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1633 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1634 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1635 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1636 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1637 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1638 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1639 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1640 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1641 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1642 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1643 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1644 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1645 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1646 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1647 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1648 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1649 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1650 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1651 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1652 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1653 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1654 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1655 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1656 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1657 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1658 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1659 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gf_mask", file: !581, line: 100, baseType: !7, size: 32, elements: !1660)
!1660 = !{!1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671}
!1661 = !DIEnumerator(name: "GF_ASM_INPUT", value: 1, isUnsigned: true)
!1662 = !DIEnumerator(name: "GF_ASM_VOLATILE", value: 2, isUnsigned: true)
!1663 = !DIEnumerator(name: "GF_CALL_CANNOT_INLINE", value: 1, isUnsigned: true)
!1664 = !DIEnumerator(name: "GF_CALL_FROM_THUNK", value: 2, isUnsigned: true)
!1665 = !DIEnumerator(name: "GF_CALL_RETURN_SLOT_OPT", value: 4, isUnsigned: true)
!1666 = !DIEnumerator(name: "GF_CALL_TAILCALL", value: 8, isUnsigned: true)
!1667 = !DIEnumerator(name: "GF_CALL_VA_ARG_PACK", value: 16, isUnsigned: true)
!1668 = !DIEnumerator(name: "GF_OMP_PARALLEL_COMBINED", value: 1, isUnsigned: true)
!1669 = !DIEnumerator(name: "GF_OMP_RETURN_NOWAIT", value: 1, isUnsigned: true)
!1670 = !DIEnumerator(name: "GF_OMP_SECTION_LAST", value: 1, isUnsigned: true)
!1671 = !DIEnumerator(name: "GF_PREDICT_TAKEN", value: 32768, isUnsigned: true)
!1672 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_code", file: !1673, line: 723, baseType: !7, size: 32, elements: !1674)
!1673 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1674 = !{!1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2131, !2132, !2133, !2134, !2135, !2136, !2137, !2138, !2139, !2140, !2141, !2142, !2143, !2144, !2145, !2146, !2147, !2148, !2149, !2150, !2151, !2152, !2153, !2154, !2155, !2156, !2157, !2158, !2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192, !2193, !2194, !2195, !2196, !2197, !2198, !2199, !2200, !2201, !2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209, !2210, !2211, !2212, !2213, !2214, !2215, !2216, !2217, !2218, !2219, !2220, !2221, !2222, !2223, !2224, !2225, !2226, !2227, !2228, !2229, !2230, !2231, !2232, !2233, !2234, !2235, !2236, !2237, !2238, !2239, !2240, !2241, !2242, !2243, !2244, !2245, !2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2254, !2255, !2256, !2257, !2258, !2259, !2260, !2261, !2262, !2263, !2264, !2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2274, !2275, !2276, !2277, !2278, !2279, !2280, !2281, !2282, !2283, !2284, !2285, !2286, !2287, !2288, !2289, !2290, !2291, !2292, !2293, !2294, !2295, !2296, !2297, !2298, !2299, !2300, !2301, !2302, !2303, !2304, !2305, !2306, !2307, !2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327, !2328, !2329, !2330, !2331, !2332, !2333, !2334, !2335, !2336, !2337, !2338, !2339, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359, !2360, !2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384, !2385, !2386, !2387, !2388, !2389, !2390, !2391, !2392, !2393, !2394, !2395, !2396, !2397, !2398, !2399, !2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2409, !2410, !2411, !2412, !2413, !2414, !2415, !2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432, !2433, !2434, !2435, !2436, !2437, !2438, !2439, !2440, !2441, !2442, !2443, !2444, !2445, !2446, !2447, !2448, !2449, !2450, !2451, !2452, !2453, !2454, !2455, !2456, !2457, !2458, !2459, !2460, !2461, !2462, !2463, !2464, !2465, !2466, !2467, !2468, !2469, !2470, !2471, !2472, !2473, !2474, !2475, !2476, !2477, !2478, !2479, !2480, !2481, !2482, !2483, !2484, !2485, !2486, !2487, !2488, !2489, !2490, !2491, !2492, !2493, !2494, !2495, !2496, !2497, !2498, !2499, !2500, !2501, !2502, !2503, !2504, !2505, !2506, !2507, !2508, !2509, !2510, !2511, !2512, !2513, !2514, !2515, !2516, !2517, !2518, !2519, !2520, !2521, !2522, !2523, !2524, !2525, !2526, !2527, !2528, !2529, !2530, !2531, !2532, !2533, !2534, !2535, !2536, !2537, !2538, !2539, !2540, !2541, !2542, !2543, !2544, !2545}
!1675 = !DIEnumerator(name: "OPT__help", value: 0, isUnsigned: true)
!1676 = !DIEnumerator(name: "OPT__help_", value: 1, isUnsigned: true)
!1677 = !DIEnumerator(name: "OPT__output_pch_", value: 2, isUnsigned: true)
!1678 = !DIEnumerator(name: "OPT__param", value: 3, isUnsigned: true)
!1679 = !DIEnumerator(name: "OPT__target_help", value: 4, isUnsigned: true)
!1680 = !DIEnumerator(name: "OPT__version", value: 5, isUnsigned: true)
!1681 = !DIEnumerator(name: "OPT_A", value: 6, isUnsigned: true)
!1682 = !DIEnumerator(name: "OPT_C", value: 7, isUnsigned: true)
!1683 = !DIEnumerator(name: "OPT_CC", value: 8, isUnsigned: true)
!1684 = !DIEnumerator(name: "OPT_D", value: 9, isUnsigned: true)
!1685 = !DIEnumerator(name: "OPT_E", value: 10, isUnsigned: true)
!1686 = !DIEnumerator(name: "OPT_F", value: 11, isUnsigned: true)
!1687 = !DIEnumerator(name: "OPT_G", value: 12, isUnsigned: true)
!1688 = !DIEnumerator(name: "OPT_H", value: 13, isUnsigned: true)
!1689 = !DIEnumerator(name: "OPT_I", value: 14, isUnsigned: true)
!1690 = !DIEnumerator(name: "OPT_J", value: 15, isUnsigned: true)
!1691 = !DIEnumerator(name: "OPT_M", value: 16, isUnsigned: true)
!1692 = !DIEnumerator(name: "OPT_MD", value: 17, isUnsigned: true)
!1693 = !DIEnumerator(name: "OPT_MD_", value: 18, isUnsigned: true)
!1694 = !DIEnumerator(name: "OPT_MF", value: 19, isUnsigned: true)
!1695 = !DIEnumerator(name: "OPT_MG", value: 20, isUnsigned: true)
!1696 = !DIEnumerator(name: "OPT_MM", value: 21, isUnsigned: true)
!1697 = !DIEnumerator(name: "OPT_MMD", value: 22, isUnsigned: true)
!1698 = !DIEnumerator(name: "OPT_MMD_", value: 23, isUnsigned: true)
!1699 = !DIEnumerator(name: "OPT_MP", value: 24, isUnsigned: true)
!1700 = !DIEnumerator(name: "OPT_MQ", value: 25, isUnsigned: true)
!1701 = !DIEnumerator(name: "OPT_MT", value: 26, isUnsigned: true)
!1702 = !DIEnumerator(name: "OPT_O", value: 27, isUnsigned: true)
!1703 = !DIEnumerator(name: "OPT_Os", value: 28, isUnsigned: true)
!1704 = !DIEnumerator(name: "OPT_P", value: 29, isUnsigned: true)
!1705 = !DIEnumerator(name: "OPT_U", value: 30, isUnsigned: true)
!1706 = !DIEnumerator(name: "OPT_W", value: 31, isUnsigned: true)
!1707 = !DIEnumerator(name: "OPT_Wabi", value: 32, isUnsigned: true)
!1708 = !DIEnumerator(name: "OPT_Waddress", value: 33, isUnsigned: true)
!1709 = !DIEnumerator(name: "OPT_Waggregate_return", value: 34, isUnsigned: true)
!1710 = !DIEnumerator(name: "OPT_Waliasing", value: 35, isUnsigned: true)
!1711 = !DIEnumerator(name: "OPT_Walign_commons", value: 36, isUnsigned: true)
!1712 = !DIEnumerator(name: "OPT_Wall", value: 37, isUnsigned: true)
!1713 = !DIEnumerator(name: "OPT_Wall_deprecation", value: 38, isUnsigned: true)
!1714 = !DIEnumerator(name: "OPT_Wall_javadoc", value: 39, isUnsigned: true)
!1715 = !DIEnumerator(name: "OPT_Wampersand", value: 40, isUnsigned: true)
!1716 = !DIEnumerator(name: "OPT_Warray_bounds", value: 41, isUnsigned: true)
!1717 = !DIEnumerator(name: "OPT_Warray_temporaries", value: 42, isUnsigned: true)
!1718 = !DIEnumerator(name: "OPT_Wassert_identifier", value: 43, isUnsigned: true)
!1719 = !DIEnumerator(name: "OPT_Wassign_intercept", value: 44, isUnsigned: true)
!1720 = !DIEnumerator(name: "OPT_Wattributes", value: 45, isUnsigned: true)
!1721 = !DIEnumerator(name: "OPT_Wbad_function_cast", value: 46, isUnsigned: true)
!1722 = !DIEnumerator(name: "OPT_Wboxing", value: 47, isUnsigned: true)
!1723 = !DIEnumerator(name: "OPT_Wbuiltin_macro_redefined", value: 48, isUnsigned: true)
!1724 = !DIEnumerator(name: "OPT_Wc___compat", value: 49, isUnsigned: true)
!1725 = !DIEnumerator(name: "OPT_Wc__0x_compat", value: 50, isUnsigned: true)
!1726 = !DIEnumerator(name: "OPT_Wcast_align", value: 51, isUnsigned: true)
!1727 = !DIEnumerator(name: "OPT_Wcast_qual", value: 52, isUnsigned: true)
!1728 = !DIEnumerator(name: "OPT_Wchar_concat", value: 53, isUnsigned: true)
!1729 = !DIEnumerator(name: "OPT_Wchar_subscripts", value: 54, isUnsigned: true)
!1730 = !DIEnumerator(name: "OPT_Wcharacter_truncation", value: 55, isUnsigned: true)
!1731 = !DIEnumerator(name: "OPT_Wclobbered", value: 56, isUnsigned: true)
!1732 = !DIEnumerator(name: "OPT_Wcomment", value: 57, isUnsigned: true)
!1733 = !DIEnumerator(name: "OPT_Wcomments", value: 58, isUnsigned: true)
!1734 = !DIEnumerator(name: "OPT_Wcondition_assign", value: 59, isUnsigned: true)
!1735 = !DIEnumerator(name: "OPT_Wconstructor_name", value: 60, isUnsigned: true)
!1736 = !DIEnumerator(name: "OPT_Wconversion", value: 61, isUnsigned: true)
!1737 = !DIEnumerator(name: "OPT_Wconversion_null", value: 62, isUnsigned: true)
!1738 = !DIEnumerator(name: "OPT_Wcoverage_mismatch", value: 63, isUnsigned: true)
!1739 = !DIEnumerator(name: "OPT_Wctor_dtor_privacy", value: 64, isUnsigned: true)
!1740 = !DIEnumerator(name: "OPT_Wdeclaration_after_statement", value: 65, isUnsigned: true)
!1741 = !DIEnumerator(name: "OPT_Wdep_ann", value: 66, isUnsigned: true)
!1742 = !DIEnumerator(name: "OPT_Wdeprecated", value: 67, isUnsigned: true)
!1743 = !DIEnumerator(name: "OPT_Wdeprecated_declarations", value: 68, isUnsigned: true)
!1744 = !DIEnumerator(name: "OPT_Wdisabled_optimization", value: 69, isUnsigned: true)
!1745 = !DIEnumerator(name: "OPT_Wdiscouraged", value: 70, isUnsigned: true)
!1746 = !DIEnumerator(name: "OPT_Wdiv_by_zero", value: 71, isUnsigned: true)
!1747 = !DIEnumerator(name: "OPT_Weffc__", value: 72, isUnsigned: true)
!1748 = !DIEnumerator(name: "OPT_Wempty_block", value: 73, isUnsigned: true)
!1749 = !DIEnumerator(name: "OPT_Wempty_body", value: 74, isUnsigned: true)
!1750 = !DIEnumerator(name: "OPT_Wendif_labels", value: 75, isUnsigned: true)
!1751 = !DIEnumerator(name: "OPT_Wenum_compare", value: 76, isUnsigned: true)
!1752 = !DIEnumerator(name: "OPT_Wenum_identifier", value: 77, isUnsigned: true)
!1753 = !DIEnumerator(name: "OPT_Wenum_switch", value: 78, isUnsigned: true)
!1754 = !DIEnumerator(name: "OPT_Werror", value: 79, isUnsigned: true)
!1755 = !DIEnumerator(name: "OPT_Werror_implicit_function_declaration", value: 80, isUnsigned: true)
!1756 = !DIEnumerator(name: "OPT_Werror_", value: 81, isUnsigned: true)
!1757 = !DIEnumerator(name: "OPT_Wextra", value: 82, isUnsigned: true)
!1758 = !DIEnumerator(name: "OPT_Wextraneous_semicolon", value: 83, isUnsigned: true)
!1759 = !DIEnumerator(name: "OPT_Wfallthrough", value: 84, isUnsigned: true)
!1760 = !DIEnumerator(name: "OPT_Wfatal_errors", value: 85, isUnsigned: true)
!1761 = !DIEnumerator(name: "OPT_Wfield_hiding", value: 86, isUnsigned: true)
!1762 = !DIEnumerator(name: "OPT_Wfinal_bound", value: 87, isUnsigned: true)
!1763 = !DIEnumerator(name: "OPT_Wfinally", value: 88, isUnsigned: true)
!1764 = !DIEnumerator(name: "OPT_Wfloat_equal", value: 89, isUnsigned: true)
!1765 = !DIEnumerator(name: "OPT_Wforbidden", value: 90, isUnsigned: true)
!1766 = !DIEnumerator(name: "OPT_Wformat", value: 91, isUnsigned: true)
!1767 = !DIEnumerator(name: "OPT_Wformat_contains_nul", value: 92, isUnsigned: true)
!1768 = !DIEnumerator(name: "OPT_Wformat_extra_args", value: 93, isUnsigned: true)
!1769 = !DIEnumerator(name: "OPT_Wformat_nonliteral", value: 94, isUnsigned: true)
!1770 = !DIEnumerator(name: "OPT_Wformat_security", value: 95, isUnsigned: true)
!1771 = !DIEnumerator(name: "OPT_Wformat_y2k", value: 96, isUnsigned: true)
!1772 = !DIEnumerator(name: "OPT_Wformat_zero_length", value: 97, isUnsigned: true)
!1773 = !DIEnumerator(name: "OPT_Wformat_", value: 98, isUnsigned: true)
!1774 = !DIEnumerator(name: "OPT_Wframe_larger_than_", value: 99, isUnsigned: true)
!1775 = !DIEnumerator(name: "OPT_Whiding", value: 100, isUnsigned: true)
!1776 = !DIEnumerator(name: "OPT_Wignored_qualifiers", value: 101, isUnsigned: true)
!1777 = !DIEnumerator(name: "OPT_Wimplicit", value: 102, isUnsigned: true)
!1778 = !DIEnumerator(name: "OPT_Wimplicit_function_declaration", value: 103, isUnsigned: true)
!1779 = !DIEnumerator(name: "OPT_Wimplicit_int", value: 104, isUnsigned: true)
!1780 = !DIEnumerator(name: "OPT_Wimplicit_interface", value: 105, isUnsigned: true)
!1781 = !DIEnumerator(name: "OPT_Wimplicit_procedure", value: 106, isUnsigned: true)
!1782 = !DIEnumerator(name: "OPT_Wimport", value: 107, isUnsigned: true)
!1783 = !DIEnumerator(name: "OPT_Windirect_static", value: 108, isUnsigned: true)
!1784 = !DIEnumerator(name: "OPT_Winit_self", value: 109, isUnsigned: true)
!1785 = !DIEnumerator(name: "OPT_Winline", value: 110, isUnsigned: true)
!1786 = !DIEnumerator(name: "OPT_Wint_to_pointer_cast", value: 111, isUnsigned: true)
!1787 = !DIEnumerator(name: "OPT_Wintf_annotation", value: 112, isUnsigned: true)
!1788 = !DIEnumerator(name: "OPT_Wintf_non_inherited", value: 113, isUnsigned: true)
!1789 = !DIEnumerator(name: "OPT_Wintrinsic_shadow", value: 114, isUnsigned: true)
!1790 = !DIEnumerator(name: "OPT_Wintrinsics_std", value: 115, isUnsigned: true)
!1791 = !DIEnumerator(name: "OPT_Winvalid_offsetof", value: 116, isUnsigned: true)
!1792 = !DIEnumerator(name: "OPT_Winvalid_pch", value: 117, isUnsigned: true)
!1793 = !DIEnumerator(name: "OPT_Wjavadoc", value: 118, isUnsigned: true)
!1794 = !DIEnumerator(name: "OPT_Wjump_misses_init", value: 119, isUnsigned: true)
!1795 = !DIEnumerator(name: "OPT_Wlarger_than_", value: 120, isUnsigned: true)
!1796 = !DIEnumerator(name: "OPT_Wlarger_than_eq", value: 121, isUnsigned: true)
!1797 = !DIEnumerator(name: "OPT_Wline_truncation", value: 122, isUnsigned: true)
!1798 = !DIEnumerator(name: "OPT_Wlocal_hiding", value: 123, isUnsigned: true)
!1799 = !DIEnumerator(name: "OPT_Wlogical_op", value: 124, isUnsigned: true)
!1800 = !DIEnumerator(name: "OPT_Wlong_long", value: 125, isUnsigned: true)
!1801 = !DIEnumerator(name: "OPT_Wmain", value: 126, isUnsigned: true)
!1802 = !DIEnumerator(name: "OPT_Wmasked_catch_block", value: 127, isUnsigned: true)
!1803 = !DIEnumerator(name: "OPT_Wmissing_braces", value: 128, isUnsigned: true)
!1804 = !DIEnumerator(name: "OPT_Wmissing_declarations", value: 129, isUnsigned: true)
!1805 = !DIEnumerator(name: "OPT_Wmissing_field_initializers", value: 130, isUnsigned: true)
!1806 = !DIEnumerator(name: "OPT_Wmissing_format_attribute", value: 131, isUnsigned: true)
!1807 = !DIEnumerator(name: "OPT_Wmissing_include_dirs", value: 132, isUnsigned: true)
!1808 = !DIEnumerator(name: "OPT_Wmissing_noreturn", value: 133, isUnsigned: true)
!1809 = !DIEnumerator(name: "OPT_Wmissing_parameter_type", value: 134, isUnsigned: true)
!1810 = !DIEnumerator(name: "OPT_Wmissing_prototypes", value: 135, isUnsigned: true)
!1811 = !DIEnumerator(name: "OPT_Wmudflap", value: 136, isUnsigned: true)
!1812 = !DIEnumerator(name: "OPT_Wmultichar", value: 137, isUnsigned: true)
!1813 = !DIEnumerator(name: "OPT_Wnested_externs", value: 138, isUnsigned: true)
!1814 = !DIEnumerator(name: "OPT_Wnls", value: 139, isUnsigned: true)
!1815 = !DIEnumerator(name: "OPT_Wno_effect_assign", value: 140, isUnsigned: true)
!1816 = !DIEnumerator(name: "OPT_Wnon_template_friend", value: 141, isUnsigned: true)
!1817 = !DIEnumerator(name: "OPT_Wnon_virtual_dtor", value: 142, isUnsigned: true)
!1818 = !DIEnumerator(name: "OPT_Wnonnull", value: 143, isUnsigned: true)
!1819 = !DIEnumerator(name: "OPT_Wnormalized_", value: 144, isUnsigned: true)
!1820 = !DIEnumerator(name: "OPT_Wnull", value: 145, isUnsigned: true)
!1821 = !DIEnumerator(name: "OPT_Wold_style_cast", value: 146, isUnsigned: true)
!1822 = !DIEnumerator(name: "OPT_Wold_style_declaration", value: 147, isUnsigned: true)
!1823 = !DIEnumerator(name: "OPT_Wold_style_definition", value: 148, isUnsigned: true)
!1824 = !DIEnumerator(name: "OPT_Wout_of_date", value: 149, isUnsigned: true)
!1825 = !DIEnumerator(name: "OPT_Wover_ann", value: 150, isUnsigned: true)
!1826 = !DIEnumerator(name: "OPT_Woverflow", value: 151, isUnsigned: true)
!1827 = !DIEnumerator(name: "OPT_Woverlength_strings", value: 152, isUnsigned: true)
!1828 = !DIEnumerator(name: "OPT_Woverloaded_virtual", value: 153, isUnsigned: true)
!1829 = !DIEnumerator(name: "OPT_Woverride_init", value: 154, isUnsigned: true)
!1830 = !DIEnumerator(name: "OPT_Wpacked", value: 155, isUnsigned: true)
!1831 = !DIEnumerator(name: "OPT_Wpacked_bitfield_compat", value: 156, isUnsigned: true)
!1832 = !DIEnumerator(name: "OPT_Wpadded", value: 157, isUnsigned: true)
!1833 = !DIEnumerator(name: "OPT_Wparam_assign", value: 158, isUnsigned: true)
!1834 = !DIEnumerator(name: "OPT_Wparentheses", value: 159, isUnsigned: true)
!1835 = !DIEnumerator(name: "OPT_Wpkg_default_method", value: 160, isUnsigned: true)
!1836 = !DIEnumerator(name: "OPT_Wpmf_conversions", value: 161, isUnsigned: true)
!1837 = !DIEnumerator(name: "OPT_Wpointer_arith", value: 162, isUnsigned: true)
!1838 = !DIEnumerator(name: "OPT_Wpointer_sign", value: 163, isUnsigned: true)
!1839 = !DIEnumerator(name: "OPT_Wpointer_to_int_cast", value: 164, isUnsigned: true)
!1840 = !DIEnumerator(name: "OPT_Wpragmas", value: 165, isUnsigned: true)
!1841 = !DIEnumerator(name: "OPT_Wprotocol", value: 166, isUnsigned: true)
!1842 = !DIEnumerator(name: "OPT_Wpsabi", value: 167, isUnsigned: true)
!1843 = !DIEnumerator(name: "OPT_Wraw", value: 168, isUnsigned: true)
!1844 = !DIEnumerator(name: "OPT_Wredundant_decls", value: 169, isUnsigned: true)
!1845 = !DIEnumerator(name: "OPT_Wredundant_modifiers", value: 170, isUnsigned: true)
!1846 = !DIEnumerator(name: "OPT_Wreorder", value: 171, isUnsigned: true)
!1847 = !DIEnumerator(name: "OPT_Wreturn_type", value: 172, isUnsigned: true)
!1848 = !DIEnumerator(name: "OPT_Wselector", value: 173, isUnsigned: true)
!1849 = !DIEnumerator(name: "OPT_Wsequence_point", value: 174, isUnsigned: true)
!1850 = !DIEnumerator(name: "OPT_Wserial", value: 175, isUnsigned: true)
!1851 = !DIEnumerator(name: "OPT_Wshadow", value: 176, isUnsigned: true)
!1852 = !DIEnumerator(name: "OPT_Wsign_compare", value: 177, isUnsigned: true)
!1853 = !DIEnumerator(name: "OPT_Wsign_conversion", value: 178, isUnsigned: true)
!1854 = !DIEnumerator(name: "OPT_Wsign_promo", value: 179, isUnsigned: true)
!1855 = !DIEnumerator(name: "OPT_Wspecial_param_hiding", value: 180, isUnsigned: true)
!1856 = !DIEnumerator(name: "OPT_Wstack_protector", value: 181, isUnsigned: true)
!1857 = !DIEnumerator(name: "OPT_Wstatic_access", value: 182, isUnsigned: true)
!1858 = !DIEnumerator(name: "OPT_Wstatic_receiver", value: 183, isUnsigned: true)
!1859 = !DIEnumerator(name: "OPT_Wstrict_aliasing", value: 184, isUnsigned: true)
!1860 = !DIEnumerator(name: "OPT_Wstrict_aliasing_", value: 185, isUnsigned: true)
!1861 = !DIEnumerator(name: "OPT_Wstrict_null_sentinel", value: 186, isUnsigned: true)
!1862 = !DIEnumerator(name: "OPT_Wstrict_overflow", value: 187, isUnsigned: true)
!1863 = !DIEnumerator(name: "OPT_Wstrict_overflow_", value: 188, isUnsigned: true)
!1864 = !DIEnumerator(name: "OPT_Wstrict_prototypes", value: 189, isUnsigned: true)
!1865 = !DIEnumerator(name: "OPT_Wstrict_selector_match", value: 190, isUnsigned: true)
!1866 = !DIEnumerator(name: "OPT_Wsuppress", value: 191, isUnsigned: true)
!1867 = !DIEnumerator(name: "OPT_Wsurprising", value: 192, isUnsigned: true)
!1868 = !DIEnumerator(name: "OPT_Wswitch", value: 193, isUnsigned: true)
!1869 = !DIEnumerator(name: "OPT_Wswitch_default", value: 194, isUnsigned: true)
!1870 = !DIEnumerator(name: "OPT_Wswitch_enum", value: 195, isUnsigned: true)
!1871 = !DIEnumerator(name: "OPT_Wsync_nand", value: 196, isUnsigned: true)
!1872 = !DIEnumerator(name: "OPT_Wsynth", value: 197, isUnsigned: true)
!1873 = !DIEnumerator(name: "OPT_Wsynthetic_access", value: 198, isUnsigned: true)
!1874 = !DIEnumerator(name: "OPT_Wsystem_headers", value: 199, isUnsigned: true)
!1875 = !DIEnumerator(name: "OPT_Wtabs", value: 200, isUnsigned: true)
!1876 = !DIEnumerator(name: "OPT_Wtasks", value: 201, isUnsigned: true)
!1877 = !DIEnumerator(name: "OPT_Wtraditional", value: 202, isUnsigned: true)
!1878 = !DIEnumerator(name: "OPT_Wtraditional_conversion", value: 203, isUnsigned: true)
!1879 = !DIEnumerator(name: "OPT_Wtrigraphs", value: 204, isUnsigned: true)
!1880 = !DIEnumerator(name: "OPT_Wtype_hiding", value: 205, isUnsigned: true)
!1881 = !DIEnumerator(name: "OPT_Wtype_limits", value: 206, isUnsigned: true)
!1882 = !DIEnumerator(name: "OPT_Wuncheck", value: 207, isUnsigned: true)
!1883 = !DIEnumerator(name: "OPT_Wundeclared_selector", value: 208, isUnsigned: true)
!1884 = !DIEnumerator(name: "OPT_Wundef", value: 209, isUnsigned: true)
!1885 = !DIEnumerator(name: "OPT_Wunderflow", value: 210, isUnsigned: true)
!1886 = !DIEnumerator(name: "OPT_Wuninitialized", value: 211, isUnsigned: true)
!1887 = !DIEnumerator(name: "OPT_Wunknown_pragmas", value: 212, isUnsigned: true)
!1888 = !DIEnumerator(name: "OPT_Wunnecessary_else", value: 213, isUnsigned: true)
!1889 = !DIEnumerator(name: "OPT_Wunqualified_field", value: 214, isUnsigned: true)
!1890 = !DIEnumerator(name: "OPT_Wunreachable_code", value: 215, isUnsigned: true)
!1891 = !DIEnumerator(name: "OPT_Wunsafe_loop_optimizations", value: 216, isUnsigned: true)
!1892 = !DIEnumerator(name: "OPT_Wunsuffixed_float_constants", value: 217, isUnsigned: true)
!1893 = !DIEnumerator(name: "OPT_Wunused", value: 218, isUnsigned: true)
!1894 = !DIEnumerator(name: "OPT_Wunused_argument", value: 219, isUnsigned: true)
!1895 = !DIEnumerator(name: "OPT_Wunused_function", value: 220, isUnsigned: true)
!1896 = !DIEnumerator(name: "OPT_Wunused_import", value: 221, isUnsigned: true)
!1897 = !DIEnumerator(name: "OPT_Wunused_label", value: 222, isUnsigned: true)
!1898 = !DIEnumerator(name: "OPT_Wunused_local", value: 223, isUnsigned: true)
!1899 = !DIEnumerator(name: "OPT_Wunused_macros", value: 224, isUnsigned: true)
!1900 = !DIEnumerator(name: "OPT_Wunused_parameter", value: 225, isUnsigned: true)
!1901 = !DIEnumerator(name: "OPT_Wunused_private", value: 226, isUnsigned: true)
!1902 = !DIEnumerator(name: "OPT_Wunused_result", value: 227, isUnsigned: true)
!1903 = !DIEnumerator(name: "OPT_Wunused_thrown", value: 228, isUnsigned: true)
!1904 = !DIEnumerator(name: "OPT_Wunused_value", value: 229, isUnsigned: true)
!1905 = !DIEnumerator(name: "OPT_Wunused_variable", value: 230, isUnsigned: true)
!1906 = !DIEnumerator(name: "OPT_Wuseless_type_check", value: 231, isUnsigned: true)
!1907 = !DIEnumerator(name: "OPT_Wvarargs_cast", value: 232, isUnsigned: true)
!1908 = !DIEnumerator(name: "OPT_Wvariadic_macros", value: 233, isUnsigned: true)
!1909 = !DIEnumerator(name: "OPT_Wvla", value: 234, isUnsigned: true)
!1910 = !DIEnumerator(name: "OPT_Wvolatile_register_var", value: 235, isUnsigned: true)
!1911 = !DIEnumerator(name: "OPT_Wwarning_token", value: 236, isUnsigned: true)
!1912 = !DIEnumerator(name: "OPT_Wwrite_strings", value: 237, isUnsigned: true)
!1913 = !DIEnumerator(name: "OPT_ansi", value: 238, isUnsigned: true)
!1914 = !DIEnumerator(name: "OPT_aux_info", value: 239, isUnsigned: true)
!1915 = !DIEnumerator(name: "OPT_aux_info_", value: 240, isUnsigned: true)
!1916 = !DIEnumerator(name: "OPT_auxbase", value: 241, isUnsigned: true)
!1917 = !DIEnumerator(name: "OPT_auxbase_strip", value: 242, isUnsigned: true)
!1918 = !DIEnumerator(name: "OPT_cpp", value: 243, isUnsigned: true)
!1919 = !DIEnumerator(name: "OPT_d", value: 244, isUnsigned: true)
!1920 = !DIEnumerator(name: "OPT_dumpbase", value: 245, isUnsigned: true)
!1921 = !DIEnumerator(name: "OPT_dumpdir", value: 246, isUnsigned: true)
!1922 = !DIEnumerator(name: "OPT_fCLASSPATH_", value: 247, isUnsigned: true)
!1923 = !DIEnumerator(name: "OPT_fPIC", value: 248, isUnsigned: true)
!1924 = !DIEnumerator(name: "OPT_fPIE", value: 249, isUnsigned: true)
!1925 = !DIEnumerator(name: "OPT_fRTS_", value: 250, isUnsigned: true)
!1926 = !DIEnumerator(name: "OPT_fabi_version_", value: 251, isUnsigned: true)
!1927 = !DIEnumerator(name: "OPT_faccess_control", value: 252, isUnsigned: true)
!1928 = !DIEnumerator(name: "OPT_falign_commons", value: 253, isUnsigned: true)
!1929 = !DIEnumerator(name: "OPT_falign_functions", value: 254, isUnsigned: true)
!1930 = !DIEnumerator(name: "OPT_falign_functions_", value: 255, isUnsigned: true)
!1931 = !DIEnumerator(name: "OPT_falign_jumps", value: 256, isUnsigned: true)
!1932 = !DIEnumerator(name: "OPT_falign_jumps_", value: 257, isUnsigned: true)
!1933 = !DIEnumerator(name: "OPT_falign_labels", value: 258, isUnsigned: true)
!1934 = !DIEnumerator(name: "OPT_falign_labels_", value: 259, isUnsigned: true)
!1935 = !DIEnumerator(name: "OPT_falign_loops", value: 260, isUnsigned: true)
!1936 = !DIEnumerator(name: "OPT_falign_loops_", value: 261, isUnsigned: true)
!1937 = !DIEnumerator(name: "OPT_fall_intrinsics", value: 262, isUnsigned: true)
!1938 = !DIEnumerator(name: "OPT_fall_virtual", value: 263, isUnsigned: true)
!1939 = !DIEnumerator(name: "OPT_fallow_leading_underscore", value: 264, isUnsigned: true)
!1940 = !DIEnumerator(name: "OPT_falt_external_templates", value: 265, isUnsigned: true)
!1941 = !DIEnumerator(name: "OPT_fargument_alias", value: 266, isUnsigned: true)
!1942 = !DIEnumerator(name: "OPT_fargument_noalias", value: 267, isUnsigned: true)
!1943 = !DIEnumerator(name: "OPT_fargument_noalias_anything", value: 268, isUnsigned: true)
!1944 = !DIEnumerator(name: "OPT_fargument_noalias_global", value: 269, isUnsigned: true)
!1945 = !DIEnumerator(name: "OPT_fasm", value: 270, isUnsigned: true)
!1946 = !DIEnumerator(name: "OPT_fassert", value: 271, isUnsigned: true)
!1947 = !DIEnumerator(name: "OPT_fassociative_math", value: 272, isUnsigned: true)
!1948 = !DIEnumerator(name: "OPT_fassume_compiled", value: 273, isUnsigned: true)
!1949 = !DIEnumerator(name: "OPT_fassume_compiled_", value: 274, isUnsigned: true)
!1950 = !DIEnumerator(name: "OPT_fasynchronous_unwind_tables", value: 275, isUnsigned: true)
!1951 = !DIEnumerator(name: "OPT_fauto_inc_dec", value: 276, isUnsigned: true)
!1952 = !DIEnumerator(name: "OPT_fautomatic", value: 277, isUnsigned: true)
!1953 = !DIEnumerator(name: "OPT_faux_classpath", value: 278, isUnsigned: true)
!1954 = !DIEnumerator(name: "OPT_fbackslash", value: 279, isUnsigned: true)
!1955 = !DIEnumerator(name: "OPT_fbacktrace", value: 280, isUnsigned: true)
!1956 = !DIEnumerator(name: "OPT_fblas_matmul_limit_", value: 281, isUnsigned: true)
!1957 = !DIEnumerator(name: "OPT_fbootclasspath_", value: 282, isUnsigned: true)
!1958 = !DIEnumerator(name: "OPT_fbootstrap_classes", value: 283, isUnsigned: true)
!1959 = !DIEnumerator(name: "OPT_fbounds_check", value: 284, isUnsigned: true)
!1960 = !DIEnumerator(name: "OPT_fbranch_count_reg", value: 285, isUnsigned: true)
!1961 = !DIEnumerator(name: "OPT_fbranch_probabilities", value: 286, isUnsigned: true)
!1962 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize", value: 287, isUnsigned: true)
!1963 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize2", value: 288, isUnsigned: true)
!1964 = !DIEnumerator(name: "OPT_fbtr_bb_exclusive", value: 289, isUnsigned: true)
!1965 = !DIEnumerator(name: "OPT_fbuiltin", value: 290, isUnsigned: true)
!1966 = !DIEnumerator(name: "OPT_fbuiltin_", value: 291, isUnsigned: true)
!1967 = !DIEnumerator(name: "OPT_fcall_saved_", value: 292, isUnsigned: true)
!1968 = !DIEnumerator(name: "OPT_fcall_used_", value: 293, isUnsigned: true)
!1969 = !DIEnumerator(name: "OPT_fcaller_saves", value: 294, isUnsigned: true)
!1970 = !DIEnumerator(name: "OPT_fcheck_array_temporaries", value: 295, isUnsigned: true)
!1971 = !DIEnumerator(name: "OPT_fcheck_data_deps", value: 296, isUnsigned: true)
!1972 = !DIEnumerator(name: "OPT_fcheck_new", value: 297, isUnsigned: true)
!1973 = !DIEnumerator(name: "OPT_fcheck_references", value: 298, isUnsigned: true)
!1974 = !DIEnumerator(name: "OPT_fcheck_", value: 299, isUnsigned: true)
!1975 = !DIEnumerator(name: "OPT_fclasspath_", value: 300, isUnsigned: true)
!1976 = !DIEnumerator(name: "OPT_fcommon", value: 301, isUnsigned: true)
!1977 = !DIEnumerator(name: "OPT_fcompare_debug_second", value: 302, isUnsigned: true)
!1978 = !DIEnumerator(name: "OPT_fcompare_debug_", value: 303, isUnsigned: true)
!1979 = !DIEnumerator(name: "OPT_fcompile_resource_", value: 304, isUnsigned: true)
!1980 = !DIEnumerator(name: "OPT_fcond_mismatch", value: 305, isUnsigned: true)
!1981 = !DIEnumerator(name: "OPT_fconserve_space", value: 306, isUnsigned: true)
!1982 = !DIEnumerator(name: "OPT_fconserve_stack", value: 307, isUnsigned: true)
!1983 = !DIEnumerator(name: "OPT_fconstant_string_class_", value: 308, isUnsigned: true)
!1984 = !DIEnumerator(name: "OPT_fconvert_big_endian", value: 309, isUnsigned: true)
!1985 = !DIEnumerator(name: "OPT_fconvert_little_endian", value: 310, isUnsigned: true)
!1986 = !DIEnumerator(name: "OPT_fconvert_native", value: 311, isUnsigned: true)
!1987 = !DIEnumerator(name: "OPT_fconvert_swap", value: 312, isUnsigned: true)
!1988 = !DIEnumerator(name: "OPT_fcprop_registers", value: 313, isUnsigned: true)
!1989 = !DIEnumerator(name: "OPT_fcray_pointer", value: 314, isUnsigned: true)
!1990 = !DIEnumerator(name: "OPT_fcrossjumping", value: 315, isUnsigned: true)
!1991 = !DIEnumerator(name: "OPT_fcse_follow_jumps", value: 316, isUnsigned: true)
!1992 = !DIEnumerator(name: "OPT_fcse_skip_blocks", value: 317, isUnsigned: true)
!1993 = !DIEnumerator(name: "OPT_fcx_fortran_rules", value: 318, isUnsigned: true)
!1994 = !DIEnumerator(name: "OPT_fcx_limited_range", value: 319, isUnsigned: true)
!1995 = !DIEnumerator(name: "OPT_fd_lines_as_code", value: 320, isUnsigned: true)
!1996 = !DIEnumerator(name: "OPT_fd_lines_as_comments", value: 321, isUnsigned: true)
!1997 = !DIEnumerator(name: "OPT_fdata_sections", value: 322, isUnsigned: true)
!1998 = !DIEnumerator(name: "OPT_fdbg_cnt_list", value: 323, isUnsigned: true)
!1999 = !DIEnumerator(name: "OPT_fdbg_cnt_", value: 324, isUnsigned: true)
!2000 = !DIEnumerator(name: "OPT_fdce", value: 325, isUnsigned: true)
!2001 = !DIEnumerator(name: "OPT_fdebug_prefix_map_", value: 326, isUnsigned: true)
!2002 = !DIEnumerator(name: "OPT_fdeduce_init_list", value: 327, isUnsigned: true)
!2003 = !DIEnumerator(name: "OPT_fdefault_double_8", value: 328, isUnsigned: true)
!2004 = !DIEnumerator(name: "OPT_fdefault_inline", value: 329, isUnsigned: true)
!2005 = !DIEnumerator(name: "OPT_fdefault_integer_8", value: 330, isUnsigned: true)
!2006 = !DIEnumerator(name: "OPT_fdefault_real_8", value: 331, isUnsigned: true)
!2007 = !DIEnumerator(name: "OPT_fdefer_pop", value: 332, isUnsigned: true)
!2008 = !DIEnumerator(name: "OPT_fdelayed_branch", value: 333, isUnsigned: true)
!2009 = !DIEnumerator(name: "OPT_fdelete_null_pointer_checks", value: 334, isUnsigned: true)
!2010 = !DIEnumerator(name: "OPT_fdiagnostics_show_location_", value: 335, isUnsigned: true)
!2011 = !DIEnumerator(name: "OPT_fdiagnostics_show_option", value: 336, isUnsigned: true)
!2012 = !DIEnumerator(name: "OPT_fdirectives_only", value: 337, isUnsigned: true)
!2013 = !DIEnumerator(name: "OPT_fdisable_assertions", value: 338, isUnsigned: true)
!2014 = !DIEnumerator(name: "OPT_fdisable_assertions_", value: 339, isUnsigned: true)
!2015 = !DIEnumerator(name: "OPT_fdollar_ok", value: 340, isUnsigned: true)
!2016 = !DIEnumerator(name: "OPT_fdollars_in_identifiers", value: 341, isUnsigned: true)
!2017 = !DIEnumerator(name: "OPT_fdse", value: 342, isUnsigned: true)
!2018 = !DIEnumerator(name: "OPT_fdump_", value: 343, isUnsigned: true)
!2019 = !DIEnumerator(name: "OPT_fdump_core", value: 344, isUnsigned: true)
!2020 = !DIEnumerator(name: "OPT_fdump_final_insns_", value: 345, isUnsigned: true)
!2021 = !DIEnumerator(name: "OPT_fdump_noaddr", value: 346, isUnsigned: true)
!2022 = !DIEnumerator(name: "OPT_fdump_parse_tree", value: 347, isUnsigned: true)
!2023 = !DIEnumerator(name: "OPT_fdump_unnumbered", value: 348, isUnsigned: true)
!2024 = !DIEnumerator(name: "OPT_fdump_unnumbered_links", value: 349, isUnsigned: true)
!2025 = !DIEnumerator(name: "OPT_fdwarf2_cfi_asm", value: 350, isUnsigned: true)
!2026 = !DIEnumerator(name: "OPT_fearly_inlining", value: 351, isUnsigned: true)
!2027 = !DIEnumerator(name: "OPT_felide_constructors", value: 352, isUnsigned: true)
!2028 = !DIEnumerator(name: "OPT_feliminate_dwarf2_dups", value: 353, isUnsigned: true)
!2029 = !DIEnumerator(name: "OPT_feliminate_unused_debug_symbols", value: 354, isUnsigned: true)
!2030 = !DIEnumerator(name: "OPT_feliminate_unused_debug_types", value: 355, isUnsigned: true)
!2031 = !DIEnumerator(name: "OPT_femit_class_debug_always", value: 356, isUnsigned: true)
!2032 = !DIEnumerator(name: "OPT_femit_class_file", value: 357, isUnsigned: true)
!2033 = !DIEnumerator(name: "OPT_femit_class_files", value: 358, isUnsigned: true)
!2034 = !DIEnumerator(name: "OPT_femit_struct_debug_baseonly", value: 359, isUnsigned: true)
!2035 = !DIEnumerator(name: "OPT_femit_struct_debug_detailed_", value: 360, isUnsigned: true)
!2036 = !DIEnumerator(name: "OPT_femit_struct_debug_reduced", value: 361, isUnsigned: true)
!2037 = !DIEnumerator(name: "OPT_fenable_assertions", value: 362, isUnsigned: true)
!2038 = !DIEnumerator(name: "OPT_fenable_assertions_", value: 363, isUnsigned: true)
!2039 = !DIEnumerator(name: "OPT_fenable_icf_debug", value: 364, isUnsigned: true)
!2040 = !DIEnumerator(name: "OPT_fencoding_", value: 365, isUnsigned: true)
!2041 = !DIEnumerator(name: "OPT_fenforce_eh_specs", value: 366, isUnsigned: true)
!2042 = !DIEnumerator(name: "OPT_fenum_int_equiv", value: 367, isUnsigned: true)
!2043 = !DIEnumerator(name: "OPT_fexceptions", value: 368, isUnsigned: true)
!2044 = !DIEnumerator(name: "OPT_fexcess_precision_", value: 369, isUnsigned: true)
!2045 = !DIEnumerator(name: "OPT_fexec_charset_", value: 370, isUnsigned: true)
!2046 = !DIEnumerator(name: "OPT_fexpensive_optimizations", value: 371, isUnsigned: true)
!2047 = !DIEnumerator(name: "OPT_fextdirs_", value: 372, isUnsigned: true)
!2048 = !DIEnumerator(name: "OPT_fextended_identifiers", value: 373, isUnsigned: true)
!2049 = !DIEnumerator(name: "OPT_fexternal_blas", value: 374, isUnsigned: true)
!2050 = !DIEnumerator(name: "OPT_fexternal_templates", value: 375, isUnsigned: true)
!2051 = !DIEnumerator(name: "OPT_ff2c", value: 376, isUnsigned: true)
!2052 = !DIEnumerator(name: "OPT_ffast_math", value: 377, isUnsigned: true)
!2053 = !DIEnumerator(name: "OPT_ffilelist_file", value: 378, isUnsigned: true)
!2054 = !DIEnumerator(name: "OPT_ffinite_math_only", value: 379, isUnsigned: true)
!2055 = !DIEnumerator(name: "OPT_ffixed_", value: 380, isUnsigned: true)
!2056 = !DIEnumerator(name: "OPT_ffixed_form", value: 381, isUnsigned: true)
!2057 = !DIEnumerator(name: "OPT_ffixed_line_length_", value: 382, isUnsigned: true)
!2058 = !DIEnumerator(name: "OPT_ffixed_line_length_none", value: 383, isUnsigned: true)
!2059 = !DIEnumerator(name: "OPT_ffloat_store", value: 384, isUnsigned: true)
!2060 = !DIEnumerator(name: "OPT_ffor_scope", value: 385, isUnsigned: true)
!2061 = !DIEnumerator(name: "OPT_fforce_addr", value: 386, isUnsigned: true)
!2062 = !DIEnumerator(name: "OPT_fforce_classes_archive_check", value: 387, isUnsigned: true)
!2063 = !DIEnumerator(name: "OPT_fforward_propagate", value: 388, isUnsigned: true)
!2064 = !DIEnumerator(name: "OPT_ffpe_trap_", value: 389, isUnsigned: true)
!2065 = !DIEnumerator(name: "OPT_ffree_form", value: 390, isUnsigned: true)
!2066 = !DIEnumerator(name: "OPT_ffree_line_length_", value: 391, isUnsigned: true)
!2067 = !DIEnumerator(name: "OPT_ffree_line_length_none", value: 392, isUnsigned: true)
!2068 = !DIEnumerator(name: "OPT_ffreestanding", value: 393, isUnsigned: true)
!2069 = !DIEnumerator(name: "OPT_ffriend_injection", value: 394, isUnsigned: true)
!2070 = !DIEnumerator(name: "OPT_ffunction_cse", value: 395, isUnsigned: true)
!2071 = !DIEnumerator(name: "OPT_ffunction_sections", value: 396, isUnsigned: true)
!2072 = !DIEnumerator(name: "OPT_fgcse", value: 397, isUnsigned: true)
!2073 = !DIEnumerator(name: "OPT_fgcse_after_reload", value: 398, isUnsigned: true)
!2074 = !DIEnumerator(name: "OPT_fgcse_las", value: 399, isUnsigned: true)
!2075 = !DIEnumerator(name: "OPT_fgcse_lm", value: 400, isUnsigned: true)
!2076 = !DIEnumerator(name: "OPT_fgcse_sm", value: 401, isUnsigned: true)
!2077 = !DIEnumerator(name: "OPT_fgnu_keywords", value: 402, isUnsigned: true)
!2078 = !DIEnumerator(name: "OPT_fgnu_runtime", value: 403, isUnsigned: true)
!2079 = !DIEnumerator(name: "OPT_fgnu89_inline", value: 404, isUnsigned: true)
!2080 = !DIEnumerator(name: "OPT_fgraphite", value: 405, isUnsigned: true)
!2081 = !DIEnumerator(name: "OPT_fgraphite_identity", value: 406, isUnsigned: true)
!2082 = !DIEnumerator(name: "OPT_fguess_branch_probability", value: 407, isUnsigned: true)
!2083 = !DIEnumerator(name: "OPT_fguiding_decls", value: 408, isUnsigned: true)
!2084 = !DIEnumerator(name: "OPT_fhandle_exceptions", value: 409, isUnsigned: true)
!2085 = !DIEnumerator(name: "OPT_fhash_synchronization", value: 410, isUnsigned: true)
!2086 = !DIEnumerator(name: "OPT_fhelp", value: 411, isUnsigned: true)
!2087 = !DIEnumerator(name: "OPT_fhelp_", value: 412, isUnsigned: true)
!2088 = !DIEnumerator(name: "OPT_fhonor_std", value: 413, isUnsigned: true)
!2089 = !DIEnumerator(name: "OPT_fhosted", value: 414, isUnsigned: true)
!2090 = !DIEnumerator(name: "OPT_fhuge_objects", value: 415, isUnsigned: true)
!2091 = !DIEnumerator(name: "OPT_fident", value: 416, isUnsigned: true)
!2092 = !DIEnumerator(name: "OPT_fif_conversion", value: 417, isUnsigned: true)
!2093 = !DIEnumerator(name: "OPT_fif_conversion2", value: 418, isUnsigned: true)
!2094 = !DIEnumerator(name: "OPT_fimplement_inlines", value: 419, isUnsigned: true)
!2095 = !DIEnumerator(name: "OPT_fimplicit_inline_templates", value: 420, isUnsigned: true)
!2096 = !DIEnumerator(name: "OPT_fimplicit_none", value: 421, isUnsigned: true)
!2097 = !DIEnumerator(name: "OPT_fimplicit_templates", value: 422, isUnsigned: true)
!2098 = !DIEnumerator(name: "OPT_findirect_classes", value: 423, isUnsigned: true)
!2099 = !DIEnumerator(name: "OPT_findirect_dispatch", value: 424, isUnsigned: true)
!2100 = !DIEnumerator(name: "OPT_findirect_inlining", value: 425, isUnsigned: true)
!2101 = !DIEnumerator(name: "OPT_finhibit_size_directive", value: 426, isUnsigned: true)
!2102 = !DIEnumerator(name: "OPT_finit_character_", value: 427, isUnsigned: true)
!2103 = !DIEnumerator(name: "OPT_finit_integer_", value: 428, isUnsigned: true)
!2104 = !DIEnumerator(name: "OPT_finit_local_zero", value: 429, isUnsigned: true)
!2105 = !DIEnumerator(name: "OPT_finit_logical_", value: 430, isUnsigned: true)
!2106 = !DIEnumerator(name: "OPT_finit_real_", value: 431, isUnsigned: true)
!2107 = !DIEnumerator(name: "OPT_finline", value: 432, isUnsigned: true)
!2108 = !DIEnumerator(name: "OPT_finline_functions", value: 433, isUnsigned: true)
!2109 = !DIEnumerator(name: "OPT_finline_functions_called_once", value: 434, isUnsigned: true)
!2110 = !DIEnumerator(name: "OPT_finline_limit_", value: 435, isUnsigned: true)
!2111 = !DIEnumerator(name: "OPT_finline_limit_eq", value: 436, isUnsigned: true)
!2112 = !DIEnumerator(name: "OPT_finline_small_functions", value: 437, isUnsigned: true)
!2113 = !DIEnumerator(name: "OPT_finput_charset_", value: 438, isUnsigned: true)
!2114 = !DIEnumerator(name: "OPT_finstrument_functions", value: 439, isUnsigned: true)
!2115 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_file_list_", value: 440, isUnsigned: true)
!2116 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_function_list_", value: 441, isUnsigned: true)
!2117 = !DIEnumerator(name: "OPT_fintrinsic_modules_path", value: 442, isUnsigned: true)
!2118 = !DIEnumerator(name: "OPT_fipa_cp", value: 443, isUnsigned: true)
!2119 = !DIEnumerator(name: "OPT_fipa_cp_clone", value: 444, isUnsigned: true)
!2120 = !DIEnumerator(name: "OPT_fipa_matrix_reorg", value: 445, isUnsigned: true)
!2121 = !DIEnumerator(name: "OPT_fipa_pta", value: 446, isUnsigned: true)
!2122 = !DIEnumerator(name: "OPT_fipa_pure_const", value: 447, isUnsigned: true)
!2123 = !DIEnumerator(name: "OPT_fipa_reference", value: 448, isUnsigned: true)
!2124 = !DIEnumerator(name: "OPT_fipa_sra", value: 449, isUnsigned: true)
!2125 = !DIEnumerator(name: "OPT_fipa_struct_reorg", value: 450, isUnsigned: true)
!2126 = !DIEnumerator(name: "OPT_fipa_type_escape", value: 451, isUnsigned: true)
!2127 = !DIEnumerator(name: "OPT_fira_algorithm_", value: 452, isUnsigned: true)
!2128 = !DIEnumerator(name: "OPT_fira_coalesce", value: 453, isUnsigned: true)
!2129 = !DIEnumerator(name: "OPT_fira_loop_pressure", value: 454, isUnsigned: true)
!2130 = !DIEnumerator(name: "OPT_fira_region_", value: 455, isUnsigned: true)
!2131 = !DIEnumerator(name: "OPT_fira_share_save_slots", value: 456, isUnsigned: true)
!2132 = !DIEnumerator(name: "OPT_fira_share_spill_slots", value: 457, isUnsigned: true)
!2133 = !DIEnumerator(name: "OPT_fira_verbose_", value: 458, isUnsigned: true)
!2134 = !DIEnumerator(name: "OPT_fivopts", value: 459, isUnsigned: true)
!2135 = !DIEnumerator(name: "OPT_fjni", value: 460, isUnsigned: true)
!2136 = !DIEnumerator(name: "OPT_fjump_tables", value: 461, isUnsigned: true)
!2137 = !DIEnumerator(name: "OPT_fkeep_inline_functions", value: 462, isUnsigned: true)
!2138 = !DIEnumerator(name: "OPT_fkeep_static_consts", value: 463, isUnsigned: true)
!2139 = !DIEnumerator(name: "OPT_flabels_ok", value: 464, isUnsigned: true)
!2140 = !DIEnumerator(name: "OPT_flax_vector_conversions", value: 465, isUnsigned: true)
!2141 = !DIEnumerator(name: "OPT_fleading_underscore", value: 466, isUnsigned: true)
!2142 = !DIEnumerator(name: "OPT_floop_block", value: 467, isUnsigned: true)
!2143 = !DIEnumerator(name: "OPT_floop_interchange", value: 468, isUnsigned: true)
!2144 = !DIEnumerator(name: "OPT_floop_optimize", value: 469, isUnsigned: true)
!2145 = !DIEnumerator(name: "OPT_floop_parallelize_all", value: 470, isUnsigned: true)
!2146 = !DIEnumerator(name: "OPT_floop_strip_mine", value: 471, isUnsigned: true)
!2147 = !DIEnumerator(name: "OPT_flto", value: 472, isUnsigned: true)
!2148 = !DIEnumerator(name: "OPT_flto_compression_level_", value: 473, isUnsigned: true)
!2149 = !DIEnumerator(name: "OPT_flto_report", value: 474, isUnsigned: true)
!2150 = !DIEnumerator(name: "OPT_fltrans", value: 475, isUnsigned: true)
!2151 = !DIEnumerator(name: "OPT_fltrans_output_list_", value: 476, isUnsigned: true)
!2152 = !DIEnumerator(name: "OPT_fmath_errno", value: 477, isUnsigned: true)
!2153 = !DIEnumerator(name: "OPT_fmax_array_constructor_", value: 478, isUnsigned: true)
!2154 = !DIEnumerator(name: "OPT_fmax_errors_", value: 479, isUnsigned: true)
!2155 = !DIEnumerator(name: "OPT_fmax_identifier_length_", value: 480, isUnsigned: true)
!2156 = !DIEnumerator(name: "OPT_fmax_stack_var_size_", value: 481, isUnsigned: true)
!2157 = !DIEnumerator(name: "OPT_fmax_subrecord_length_", value: 482, isUnsigned: true)
!2158 = !DIEnumerator(name: "OPT_fmem_report", value: 483, isUnsigned: true)
!2159 = !DIEnumerator(name: "OPT_fmerge_all_constants", value: 484, isUnsigned: true)
!2160 = !DIEnumerator(name: "OPT_fmerge_constants", value: 485, isUnsigned: true)
!2161 = !DIEnumerator(name: "OPT_fmerge_debug_strings", value: 486, isUnsigned: true)
!2162 = !DIEnumerator(name: "OPT_fmessage_length_", value: 487, isUnsigned: true)
!2163 = !DIEnumerator(name: "OPT_fmodule_private", value: 488, isUnsigned: true)
!2164 = !DIEnumerator(name: "OPT_fmodulo_sched", value: 489, isUnsigned: true)
!2165 = !DIEnumerator(name: "OPT_fmodulo_sched_allow_regmoves", value: 490, isUnsigned: true)
!2166 = !DIEnumerator(name: "OPT_fmove_loop_invariants", value: 491, isUnsigned: true)
!2167 = !DIEnumerator(name: "OPT_fms_extensions", value: 492, isUnsigned: true)
!2168 = !DIEnumerator(name: "OPT_fmudflap", value: 493, isUnsigned: true)
!2169 = !DIEnumerator(name: "OPT_fmudflapir", value: 494, isUnsigned: true)
!2170 = !DIEnumerator(name: "OPT_fmudflapth", value: 495, isUnsigned: true)
!2171 = !DIEnumerator(name: "OPT_fname_mangling_version_", value: 496, isUnsigned: true)
!2172 = !DIEnumerator(name: "OPT_fnew_abi", value: 497, isUnsigned: true)
!2173 = !DIEnumerator(name: "OPT_fnext_runtime", value: 498, isUnsigned: true)
!2174 = !DIEnumerator(name: "OPT_fnil_receivers", value: 499, isUnsigned: true)
!2175 = !DIEnumerator(name: "OPT_fnon_call_exceptions", value: 500, isUnsigned: true)
!2176 = !DIEnumerator(name: "OPT_fnonansi_builtins", value: 501, isUnsigned: true)
!2177 = !DIEnumerator(name: "OPT_fnonnull_objects", value: 502, isUnsigned: true)
!2178 = !DIEnumerator(name: "OPT_fobjc_call_cxx_cdtors", value: 503, isUnsigned: true)
!2179 = !DIEnumerator(name: "OPT_fobjc_direct_dispatch", value: 504, isUnsigned: true)
!2180 = !DIEnumerator(name: "OPT_fobjc_exceptions", value: 505, isUnsigned: true)
!2181 = !DIEnumerator(name: "OPT_fobjc_gc", value: 506, isUnsigned: true)
!2182 = !DIEnumerator(name: "OPT_fobjc_sjlj_exceptions", value: 507, isUnsigned: true)
!2183 = !DIEnumerator(name: "OPT_fomit_frame_pointer", value: 508, isUnsigned: true)
!2184 = !DIEnumerator(name: "OPT_fopenmp", value: 509, isUnsigned: true)
!2185 = !DIEnumerator(name: "OPT_foperator_names", value: 510, isUnsigned: true)
!2186 = !DIEnumerator(name: "OPT_foptimize_register_move", value: 511, isUnsigned: true)
!2187 = !DIEnumerator(name: "OPT_foptimize_sibling_calls", value: 512, isUnsigned: true)
!2188 = !DIEnumerator(name: "OPT_foptimize_static_class_initialization", value: 513, isUnsigned: true)
!2189 = !DIEnumerator(name: "OPT_foptional_diags", value: 514, isUnsigned: true)
!2190 = !DIEnumerator(name: "OPT_foutput_class_dir_", value: 515, isUnsigned: true)
!2191 = !DIEnumerator(name: "OPT_fpack_derived", value: 516, isUnsigned: true)
!2192 = !DIEnumerator(name: "OPT_fpack_struct", value: 517, isUnsigned: true)
!2193 = !DIEnumerator(name: "OPT_fpack_struct_", value: 518, isUnsigned: true)
!2194 = !DIEnumerator(name: "OPT_fpcc_struct_return", value: 519, isUnsigned: true)
!2195 = !DIEnumerator(name: "OPT_fpch_deps", value: 520, isUnsigned: true)
!2196 = !DIEnumerator(name: "OPT_fpch_preprocess", value: 521, isUnsigned: true)
!2197 = !DIEnumerator(name: "OPT_fpeel_loops", value: 522, isUnsigned: true)
!2198 = !DIEnumerator(name: "OPT_fpeephole", value: 523, isUnsigned: true)
!2199 = !DIEnumerator(name: "OPT_fpeephole2", value: 524, isUnsigned: true)
!2200 = !DIEnumerator(name: "OPT_fpermissive", value: 525, isUnsigned: true)
!2201 = !DIEnumerator(name: "OPT_fpic", value: 526, isUnsigned: true)
!2202 = !DIEnumerator(name: "OPT_fpie", value: 527, isUnsigned: true)
!2203 = !DIEnumerator(name: "OPT_fplugin_arg_", value: 528, isUnsigned: true)
!2204 = !DIEnumerator(name: "OPT_fplugin_", value: 529, isUnsigned: true)
!2205 = !DIEnumerator(name: "OPT_fpost_ipa_mem_report", value: 530, isUnsigned: true)
!2206 = !DIEnumerator(name: "OPT_fpre_ipa_mem_report", value: 531, isUnsigned: true)
!2207 = !DIEnumerator(name: "OPT_fpredictive_commoning", value: 532, isUnsigned: true)
!2208 = !DIEnumerator(name: "OPT_fprefetch_loop_arrays", value: 533, isUnsigned: true)
!2209 = !DIEnumerator(name: "OPT_fpreprocessed", value: 534, isUnsigned: true)
!2210 = !DIEnumerator(name: "OPT_fpretty_templates", value: 535, isUnsigned: true)
!2211 = !DIEnumerator(name: "OPT_fprofile", value: 536, isUnsigned: true)
!2212 = !DIEnumerator(name: "OPT_fprofile_arcs", value: 537, isUnsigned: true)
!2213 = !DIEnumerator(name: "OPT_fprofile_correction", value: 538, isUnsigned: true)
!2214 = !DIEnumerator(name: "OPT_fprofile_dir_", value: 539, isUnsigned: true)
!2215 = !DIEnumerator(name: "OPT_fprofile_generate", value: 540, isUnsigned: true)
!2216 = !DIEnumerator(name: "OPT_fprofile_generate_", value: 541, isUnsigned: true)
!2217 = !DIEnumerator(name: "OPT_fprofile_use", value: 542, isUnsigned: true)
!2218 = !DIEnumerator(name: "OPT_fprofile_use_", value: 543, isUnsigned: true)
!2219 = !DIEnumerator(name: "OPT_fprofile_values", value: 544, isUnsigned: true)
!2220 = !DIEnumerator(name: "OPT_fprotect_parens", value: 545, isUnsigned: true)
!2221 = !DIEnumerator(name: "OPT_frandom_seed", value: 546, isUnsigned: true)
!2222 = !DIEnumerator(name: "OPT_frandom_seed_", value: 547, isUnsigned: true)
!2223 = !DIEnumerator(name: "OPT_frange_check", value: 548, isUnsigned: true)
!2224 = !DIEnumerator(name: "OPT_freciprocal_math", value: 549, isUnsigned: true)
!2225 = !DIEnumerator(name: "OPT_frecord_gcc_switches", value: 550, isUnsigned: true)
!2226 = !DIEnumerator(name: "OPT_frecord_marker_4", value: 551, isUnsigned: true)
!2227 = !DIEnumerator(name: "OPT_frecord_marker_8", value: 552, isUnsigned: true)
!2228 = !DIEnumerator(name: "OPT_frecursive", value: 553, isUnsigned: true)
!2229 = !DIEnumerator(name: "OPT_freduced_reflection", value: 554, isUnsigned: true)
!2230 = !DIEnumerator(name: "OPT_freg_struct_return", value: 555, isUnsigned: true)
!2231 = !DIEnumerator(name: "OPT_fregmove", value: 556, isUnsigned: true)
!2232 = !DIEnumerator(name: "OPT_frename_registers", value: 557, isUnsigned: true)
!2233 = !DIEnumerator(name: "OPT_freorder_blocks", value: 558, isUnsigned: true)
!2234 = !DIEnumerator(name: "OPT_freorder_blocks_and_partition", value: 559, isUnsigned: true)
!2235 = !DIEnumerator(name: "OPT_freorder_functions", value: 560, isUnsigned: true)
!2236 = !DIEnumerator(name: "OPT_frepack_arrays", value: 561, isUnsigned: true)
!2237 = !DIEnumerator(name: "OPT_freplace_objc_classes", value: 562, isUnsigned: true)
!2238 = !DIEnumerator(name: "OPT_frepo", value: 563, isUnsigned: true)
!2239 = !DIEnumerator(name: "OPT_frerun_cse_after_loop", value: 564, isUnsigned: true)
!2240 = !DIEnumerator(name: "OPT_frerun_loop_opt", value: 565, isUnsigned: true)
!2241 = !DIEnumerator(name: "OPT_freschedule_modulo_scheduled_loops", value: 566, isUnsigned: true)
!2242 = !DIEnumerator(name: "OPT_fresolution", value: 567, isUnsigned: true)
!2243 = !DIEnumerator(name: "OPT_frounding_math", value: 568, isUnsigned: true)
!2244 = !DIEnumerator(name: "OPT_frtti", value: 569, isUnsigned: true)
!2245 = !DIEnumerator(name: "OPT_fsaw_java_file", value: 570, isUnsigned: true)
!2246 = !DIEnumerator(name: "OPT_fsched_critical_path_heuristic", value: 571, isUnsigned: true)
!2247 = !DIEnumerator(name: "OPT_fsched_dep_count_heuristic", value: 572, isUnsigned: true)
!2248 = !DIEnumerator(name: "OPT_fsched_group_heuristic", value: 573, isUnsigned: true)
!2249 = !DIEnumerator(name: "OPT_fsched_interblock", value: 574, isUnsigned: true)
!2250 = !DIEnumerator(name: "OPT_fsched_last_insn_heuristic", value: 575, isUnsigned: true)
!2251 = !DIEnumerator(name: "OPT_fsched_pressure", value: 576, isUnsigned: true)
!2252 = !DIEnumerator(name: "OPT_fsched_rank_heuristic", value: 577, isUnsigned: true)
!2253 = !DIEnumerator(name: "OPT_fsched_spec", value: 578, isUnsigned: true)
!2254 = !DIEnumerator(name: "OPT_fsched_spec_insn_heuristic", value: 579, isUnsigned: true)
!2255 = !DIEnumerator(name: "OPT_fsched_spec_load", value: 580, isUnsigned: true)
!2256 = !DIEnumerator(name: "OPT_fsched_spec_load_dangerous", value: 581, isUnsigned: true)
!2257 = !DIEnumerator(name: "OPT_fsched_stalled_insns", value: 582, isUnsigned: true)
!2258 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep", value: 583, isUnsigned: true)
!2259 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep_", value: 584, isUnsigned: true)
!2260 = !DIEnumerator(name: "OPT_fsched_stalled_insns_", value: 585, isUnsigned: true)
!2261 = !DIEnumerator(name: "OPT_fsched_verbose_", value: 586, isUnsigned: true)
!2262 = !DIEnumerator(name: "OPT_fsched2_use_superblocks", value: 587, isUnsigned: true)
!2263 = !DIEnumerator(name: "OPT_fsched2_use_traces", value: 588, isUnsigned: true)
!2264 = !DIEnumerator(name: "OPT_fschedule_insns", value: 589, isUnsigned: true)
!2265 = !DIEnumerator(name: "OPT_fschedule_insns2", value: 590, isUnsigned: true)
!2266 = !DIEnumerator(name: "OPT_fsecond_underscore", value: 591, isUnsigned: true)
!2267 = !DIEnumerator(name: "OPT_fsection_anchors", value: 592, isUnsigned: true)
!2268 = !DIEnumerator(name: "OPT_fsee", value: 593, isUnsigned: true)
!2269 = !DIEnumerator(name: "OPT_fsel_sched_pipelining", value: 594, isUnsigned: true)
!2270 = !DIEnumerator(name: "OPT_fsel_sched_pipelining_outer_loops", value: 595, isUnsigned: true)
!2271 = !DIEnumerator(name: "OPT_fsel_sched_reschedule_pipelined", value: 596, isUnsigned: true)
!2272 = !DIEnumerator(name: "OPT_fselective_scheduling", value: 597, isUnsigned: true)
!2273 = !DIEnumerator(name: "OPT_fselective_scheduling2", value: 598, isUnsigned: true)
!2274 = !DIEnumerator(name: "OPT_fshort_double", value: 599, isUnsigned: true)
!2275 = !DIEnumerator(name: "OPT_fshort_enums", value: 600, isUnsigned: true)
!2276 = !DIEnumerator(name: "OPT_fshort_wchar", value: 601, isUnsigned: true)
!2277 = !DIEnumerator(name: "OPT_fshow_column", value: 602, isUnsigned: true)
!2278 = !DIEnumerator(name: "OPT_fsign_zero", value: 603, isUnsigned: true)
!2279 = !DIEnumerator(name: "OPT_fsignaling_nans", value: 604, isUnsigned: true)
!2280 = !DIEnumerator(name: "OPT_fsigned_bitfields", value: 605, isUnsigned: true)
!2281 = !DIEnumerator(name: "OPT_fsigned_char", value: 606, isUnsigned: true)
!2282 = !DIEnumerator(name: "OPT_fsigned_zeros", value: 607, isUnsigned: true)
!2283 = !DIEnumerator(name: "OPT_fsingle_precision_constant", value: 608, isUnsigned: true)
!2284 = !DIEnumerator(name: "OPT_fsource_filename_", value: 609, isUnsigned: true)
!2285 = !DIEnumerator(name: "OPT_fsource_", value: 610, isUnsigned: true)
!2286 = !DIEnumerator(name: "OPT_fsplit_ivs_in_unroller", value: 611, isUnsigned: true)
!2287 = !DIEnumerator(name: "OPT_fsplit_wide_types", value: 612, isUnsigned: true)
!2288 = !DIEnumerator(name: "OPT_fsquangle", value: 613, isUnsigned: true)
!2289 = !DIEnumerator(name: "OPT_fstack_check", value: 614, isUnsigned: true)
!2290 = !DIEnumerator(name: "OPT_fstack_check_", value: 615, isUnsigned: true)
!2291 = !DIEnumerator(name: "OPT_fstack_limit", value: 616, isUnsigned: true)
!2292 = !DIEnumerator(name: "OPT_fstack_limit_register_", value: 617, isUnsigned: true)
!2293 = !DIEnumerator(name: "OPT_fstack_limit_symbol_", value: 618, isUnsigned: true)
!2294 = !DIEnumerator(name: "OPT_fstack_protector", value: 619, isUnsigned: true)
!2295 = !DIEnumerator(name: "OPT_fstack_protector_all", value: 620, isUnsigned: true)
!2296 = !DIEnumerator(name: "OPT_fstats", value: 621, isUnsigned: true)
!2297 = !DIEnumerator(name: "OPT_fstore_check", value: 622, isUnsigned: true)
!2298 = !DIEnumerator(name: "OPT_fstrength_reduce", value: 623, isUnsigned: true)
!2299 = !DIEnumerator(name: "OPT_fstrict_aliasing", value: 624, isUnsigned: true)
!2300 = !DIEnumerator(name: "OPT_fstrict_overflow", value: 625, isUnsigned: true)
!2301 = !DIEnumerator(name: "OPT_fstrict_prototype", value: 626, isUnsigned: true)
!2302 = !DIEnumerator(name: "OPT_fsyntax_only", value: 627, isUnsigned: true)
!2303 = !DIEnumerator(name: "OPT_ftabstop_", value: 628, isUnsigned: true)
!2304 = !DIEnumerator(name: "OPT_ftarget_help", value: 629, isUnsigned: true)
!2305 = !DIEnumerator(name: "OPT_ftarget_", value: 630, isUnsigned: true)
!2306 = !DIEnumerator(name: "OPT_ftemplate_depth_", value: 631, isUnsigned: true)
!2307 = !DIEnumerator(name: "OPT_ftemplate_depth_eq", value: 632, isUnsigned: true)
!2308 = !DIEnumerator(name: "OPT_ftest_coverage", value: 633, isUnsigned: true)
!2309 = !DIEnumerator(name: "OPT_fthis_is_variable", value: 634, isUnsigned: true)
!2310 = !DIEnumerator(name: "OPT_fthread_jumps", value: 635, isUnsigned: true)
!2311 = !DIEnumerator(name: "OPT_fthreadsafe_statics", value: 636, isUnsigned: true)
!2312 = !DIEnumerator(name: "OPT_ftime_report", value: 637, isUnsigned: true)
!2313 = !DIEnumerator(name: "OPT_ftls_model_", value: 638, isUnsigned: true)
!2314 = !DIEnumerator(name: "OPT_ftoplevel_reorder", value: 639, isUnsigned: true)
!2315 = !DIEnumerator(name: "OPT_ftracer", value: 640, isUnsigned: true)
!2316 = !DIEnumerator(name: "OPT_ftrapping_math", value: 641, isUnsigned: true)
!2317 = !DIEnumerator(name: "OPT_ftrapv", value: 642, isUnsigned: true)
!2318 = !DIEnumerator(name: "OPT_ftree_builtin_call_dce", value: 643, isUnsigned: true)
!2319 = !DIEnumerator(name: "OPT_ftree_ccp", value: 644, isUnsigned: true)
!2320 = !DIEnumerator(name: "OPT_ftree_ch", value: 645, isUnsigned: true)
!2321 = !DIEnumerator(name: "OPT_ftree_copy_prop", value: 646, isUnsigned: true)
!2322 = !DIEnumerator(name: "OPT_ftree_copyrename", value: 647, isUnsigned: true)
!2323 = !DIEnumerator(name: "OPT_ftree_cselim", value: 648, isUnsigned: true)
!2324 = !DIEnumerator(name: "OPT_ftree_dce", value: 649, isUnsigned: true)
!2325 = !DIEnumerator(name: "OPT_ftree_dominator_opts", value: 650, isUnsigned: true)
!2326 = !DIEnumerator(name: "OPT_ftree_dse", value: 651, isUnsigned: true)
!2327 = !DIEnumerator(name: "OPT_ftree_forwprop", value: 652, isUnsigned: true)
!2328 = !DIEnumerator(name: "OPT_ftree_fre", value: 653, isUnsigned: true)
!2329 = !DIEnumerator(name: "OPT_ftree_loop_distribution", value: 654, isUnsigned: true)
!2330 = !DIEnumerator(name: "OPT_ftree_loop_im", value: 655, isUnsigned: true)
!2331 = !DIEnumerator(name: "OPT_ftree_loop_ivcanon", value: 656, isUnsigned: true)
!2332 = !DIEnumerator(name: "OPT_ftree_loop_linear", value: 657, isUnsigned: true)
!2333 = !DIEnumerator(name: "OPT_ftree_loop_optimize", value: 658, isUnsigned: true)
!2334 = !DIEnumerator(name: "OPT_ftree_lrs", value: 659, isUnsigned: true)
!2335 = !DIEnumerator(name: "OPT_ftree_parallelize_loops_", value: 660, isUnsigned: true)
!2336 = !DIEnumerator(name: "OPT_ftree_phiprop", value: 661, isUnsigned: true)
!2337 = !DIEnumerator(name: "OPT_ftree_pre", value: 662, isUnsigned: true)
!2338 = !DIEnumerator(name: "OPT_ftree_pta", value: 663, isUnsigned: true)
!2339 = !DIEnumerator(name: "OPT_ftree_reassoc", value: 664, isUnsigned: true)
!2340 = !DIEnumerator(name: "OPT_ftree_salias", value: 665, isUnsigned: true)
!2341 = !DIEnumerator(name: "OPT_ftree_scev_cprop", value: 666, isUnsigned: true)
!2342 = !DIEnumerator(name: "OPT_ftree_sink", value: 667, isUnsigned: true)
!2343 = !DIEnumerator(name: "OPT_ftree_slp_vectorize", value: 668, isUnsigned: true)
!2344 = !DIEnumerator(name: "OPT_ftree_sra", value: 669, isUnsigned: true)
!2345 = !DIEnumerator(name: "OPT_ftree_store_ccp", value: 670, isUnsigned: true)
!2346 = !DIEnumerator(name: "OPT_ftree_store_copy_prop", value: 671, isUnsigned: true)
!2347 = !DIEnumerator(name: "OPT_ftree_switch_conversion", value: 672, isUnsigned: true)
!2348 = !DIEnumerator(name: "OPT_ftree_ter", value: 673, isUnsigned: true)
!2349 = !DIEnumerator(name: "OPT_ftree_vect_loop_version", value: 674, isUnsigned: true)
!2350 = !DIEnumerator(name: "OPT_ftree_vectorize", value: 675, isUnsigned: true)
!2351 = !DIEnumerator(name: "OPT_ftree_vectorizer_verbose_", value: 676, isUnsigned: true)
!2352 = !DIEnumerator(name: "OPT_ftree_vrp", value: 677, isUnsigned: true)
!2353 = !DIEnumerator(name: "OPT_funderscoring", value: 678, isUnsigned: true)
!2354 = !DIEnumerator(name: "OPT_funit_at_a_time", value: 679, isUnsigned: true)
!2355 = !DIEnumerator(name: "OPT_funroll_all_loops", value: 680, isUnsigned: true)
!2356 = !DIEnumerator(name: "OPT_funroll_loops", value: 681, isUnsigned: true)
!2357 = !DIEnumerator(name: "OPT_funsafe_loop_optimizations", value: 682, isUnsigned: true)
!2358 = !DIEnumerator(name: "OPT_funsafe_math_optimizations", value: 683, isUnsigned: true)
!2359 = !DIEnumerator(name: "OPT_funsigned_bitfields", value: 684, isUnsigned: true)
!2360 = !DIEnumerator(name: "OPT_funsigned_char", value: 685, isUnsigned: true)
!2361 = !DIEnumerator(name: "OPT_funswitch_loops", value: 686, isUnsigned: true)
!2362 = !DIEnumerator(name: "OPT_funwind_tables", value: 687, isUnsigned: true)
!2363 = !DIEnumerator(name: "OPT_fuse_atomic_builtins", value: 688, isUnsigned: true)
!2364 = !DIEnumerator(name: "OPT_fuse_boehm_gc", value: 689, isUnsigned: true)
!2365 = !DIEnumerator(name: "OPT_fuse_cxa_atexit", value: 690, isUnsigned: true)
!2366 = !DIEnumerator(name: "OPT_fuse_cxa_get_exception_ptr", value: 691, isUnsigned: true)
!2367 = !DIEnumerator(name: "OPT_fuse_divide_subroutine", value: 692, isUnsigned: true)
!2368 = !DIEnumerator(name: "OPT_fuse_linker_plugin", value: 693, isUnsigned: true)
!2369 = !DIEnumerator(name: "OPT_fvar_tracking", value: 694, isUnsigned: true)
!2370 = !DIEnumerator(name: "OPT_fvar_tracking_assignments", value: 695, isUnsigned: true)
!2371 = !DIEnumerator(name: "OPT_fvar_tracking_assignments_toggle", value: 696, isUnsigned: true)
!2372 = !DIEnumerator(name: "OPT_fvar_tracking_uninit", value: 697, isUnsigned: true)
!2373 = !DIEnumerator(name: "OPT_fvariable_expansion_in_unroller", value: 698, isUnsigned: true)
!2374 = !DIEnumerator(name: "OPT_fvect_cost_model", value: 699, isUnsigned: true)
!2375 = !DIEnumerator(name: "OPT_fverbose_asm", value: 700, isUnsigned: true)
!2376 = !DIEnumerator(name: "OPT_fversion", value: 701, isUnsigned: true)
!2377 = !DIEnumerator(name: "OPT_fvisibility_inlines_hidden", value: 702, isUnsigned: true)
!2378 = !DIEnumerator(name: "OPT_fvisibility_ms_compat", value: 703, isUnsigned: true)
!2379 = !DIEnumerator(name: "OPT_fvisibility_", value: 704, isUnsigned: true)
!2380 = !DIEnumerator(name: "OPT_fvpt", value: 705, isUnsigned: true)
!2381 = !DIEnumerator(name: "OPT_fvtable_gc", value: 706, isUnsigned: true)
!2382 = !DIEnumerator(name: "OPT_fvtable_thunks", value: 707, isUnsigned: true)
!2383 = !DIEnumerator(name: "OPT_fweak", value: 708, isUnsigned: true)
!2384 = !DIEnumerator(name: "OPT_fweb", value: 709, isUnsigned: true)
!2385 = !DIEnumerator(name: "OPT_fwhole_file", value: 710, isUnsigned: true)
!2386 = !DIEnumerator(name: "OPT_fwhole_program", value: 711, isUnsigned: true)
!2387 = !DIEnumerator(name: "OPT_fwhopr", value: 712, isUnsigned: true)
!2388 = !DIEnumerator(name: "OPT_fwide_exec_charset_", value: 713, isUnsigned: true)
!2389 = !DIEnumerator(name: "OPT_fworking_directory", value: 714, isUnsigned: true)
!2390 = !DIEnumerator(name: "OPT_fwpa", value: 715, isUnsigned: true)
!2391 = !DIEnumerator(name: "OPT_fwrapv", value: 716, isUnsigned: true)
!2392 = !DIEnumerator(name: "OPT_fxref", value: 717, isUnsigned: true)
!2393 = !DIEnumerator(name: "OPT_fzero_initialized_in_bss", value: 718, isUnsigned: true)
!2394 = !DIEnumerator(name: "OPT_fzero_link", value: 719, isUnsigned: true)
!2395 = !DIEnumerator(name: "OPT_g", value: 720, isUnsigned: true)
!2396 = !DIEnumerator(name: "OPT_gant", value: 721, isUnsigned: true)
!2397 = !DIEnumerator(name: "OPT_gcoff", value: 722, isUnsigned: true)
!2398 = !DIEnumerator(name: "OPT_gdwarfplus", value: 723, isUnsigned: true)
!2399 = !DIEnumerator(name: "OPT_gdwarf_", value: 724, isUnsigned: true)
!2400 = !DIEnumerator(name: "OPT_gen_decls", value: 725, isUnsigned: true)
!2401 = !DIEnumerator(name: "OPT_ggdb", value: 726, isUnsigned: true)
!2402 = !DIEnumerator(name: "OPT_gnat", value: 727, isUnsigned: true)
!2403 = !DIEnumerator(name: "OPT_gnatO", value: 728, isUnsigned: true)
!2404 = !DIEnumerator(name: "OPT_gno_strict_dwarf", value: 729, isUnsigned: true)
!2405 = !DIEnumerator(name: "OPT_gstabs", value: 730, isUnsigned: true)
!2406 = !DIEnumerator(name: "OPT_gstabs_", value: 731, isUnsigned: true)
!2407 = !DIEnumerator(name: "OPT_gstrict_dwarf", value: 732, isUnsigned: true)
!2408 = !DIEnumerator(name: "OPT_gtoggle", value: 733, isUnsigned: true)
!2409 = !DIEnumerator(name: "OPT_gvms", value: 734, isUnsigned: true)
!2410 = !DIEnumerator(name: "OPT_gxcoff", value: 735, isUnsigned: true)
!2411 = !DIEnumerator(name: "OPT_gxcoff_", value: 736, isUnsigned: true)
!2412 = !DIEnumerator(name: "OPT_idirafter", value: 737, isUnsigned: true)
!2413 = !DIEnumerator(name: "OPT_imacros", value: 738, isUnsigned: true)
!2414 = !DIEnumerator(name: "OPT_imultilib", value: 739, isUnsigned: true)
!2415 = !DIEnumerator(name: "OPT_include", value: 740, isUnsigned: true)
!2416 = !DIEnumerator(name: "OPT_iprefix", value: 741, isUnsigned: true)
!2417 = !DIEnumerator(name: "OPT_iquote", value: 742, isUnsigned: true)
!2418 = !DIEnumerator(name: "OPT_isysroot", value: 743, isUnsigned: true)
!2419 = !DIEnumerator(name: "OPT_isystem", value: 744, isUnsigned: true)
!2420 = !DIEnumerator(name: "OPT_iwithprefix", value: 745, isUnsigned: true)
!2421 = !DIEnumerator(name: "OPT_iwithprefixbefore", value: 746, isUnsigned: true)
!2422 = !DIEnumerator(name: "OPT_lang_asm", value: 747, isUnsigned: true)
!2423 = !DIEnumerator(name: "OPT_lang_objc", value: 748, isUnsigned: true)
!2424 = !DIEnumerator(name: "OPT_m128bit_long_double", value: 749, isUnsigned: true)
!2425 = !DIEnumerator(name: "OPT_m32", value: 750, isUnsigned: true)
!2426 = !DIEnumerator(name: "OPT_m3dnow", value: 751, isUnsigned: true)
!2427 = !DIEnumerator(name: "OPT_m3dnowa", value: 752, isUnsigned: true)
!2428 = !DIEnumerator(name: "OPT_m64", value: 753, isUnsigned: true)
!2429 = !DIEnumerator(name: "OPT_m80387", value: 754, isUnsigned: true)
!2430 = !DIEnumerator(name: "OPT_m96bit_long_double", value: 755, isUnsigned: true)
!2431 = !DIEnumerator(name: "OPT_mabi_", value: 756, isUnsigned: true)
!2432 = !DIEnumerator(name: "OPT_mabm", value: 757, isUnsigned: true)
!2433 = !DIEnumerator(name: "OPT_maccumulate_outgoing_args", value: 758, isUnsigned: true)
!2434 = !DIEnumerator(name: "OPT_maes", value: 759, isUnsigned: true)
!2435 = !DIEnumerator(name: "OPT_malign_double", value: 760, isUnsigned: true)
!2436 = !DIEnumerator(name: "OPT_malign_functions_", value: 761, isUnsigned: true)
!2437 = !DIEnumerator(name: "OPT_malign_jumps_", value: 762, isUnsigned: true)
!2438 = !DIEnumerator(name: "OPT_malign_loops_", value: 763, isUnsigned: true)
!2439 = !DIEnumerator(name: "OPT_malign_stringops", value: 764, isUnsigned: true)
!2440 = !DIEnumerator(name: "OPT_march_", value: 765, isUnsigned: true)
!2441 = !DIEnumerator(name: "OPT_masm_", value: 766, isUnsigned: true)
!2442 = !DIEnumerator(name: "OPT_mavx", value: 767, isUnsigned: true)
!2443 = !DIEnumerator(name: "OPT_mbranch_cost_", value: 768, isUnsigned: true)
!2444 = !DIEnumerator(name: "OPT_mcld", value: 769, isUnsigned: true)
!2445 = !DIEnumerator(name: "OPT_mcmodel_", value: 770, isUnsigned: true)
!2446 = !DIEnumerator(name: "OPT_mcrc32", value: 771, isUnsigned: true)
!2447 = !DIEnumerator(name: "OPT_mcx16", value: 772, isUnsigned: true)
!2448 = !DIEnumerator(name: "OPT_mfancy_math_387", value: 773, isUnsigned: true)
!2449 = !DIEnumerator(name: "OPT_mfma", value: 774, isUnsigned: true)
!2450 = !DIEnumerator(name: "OPT_mfma4", value: 775, isUnsigned: true)
!2451 = !DIEnumerator(name: "OPT_mforce_drap", value: 776, isUnsigned: true)
!2452 = !DIEnumerator(name: "OPT_mfp_ret_in_387", value: 777, isUnsigned: true)
!2453 = !DIEnumerator(name: "OPT_mfpmath_", value: 778, isUnsigned: true)
!2454 = !DIEnumerator(name: "OPT_mfused_madd", value: 779, isUnsigned: true)
!2455 = !DIEnumerator(name: "OPT_mglibc", value: 780, isUnsigned: true)
!2456 = !DIEnumerator(name: "OPT_mhard_float", value: 781, isUnsigned: true)
!2457 = !DIEnumerator(name: "OPT_mieee_fp", value: 782, isUnsigned: true)
!2458 = !DIEnumerator(name: "OPT_mincoming_stack_boundary_", value: 783, isUnsigned: true)
!2459 = !DIEnumerator(name: "OPT_minline_all_stringops", value: 784, isUnsigned: true)
!2460 = !DIEnumerator(name: "OPT_minline_stringops_dynamically", value: 785, isUnsigned: true)
!2461 = !DIEnumerator(name: "OPT_mintel_syntax", value: 786, isUnsigned: true)
!2462 = !DIEnumerator(name: "OPT_mlarge_data_threshold_", value: 787, isUnsigned: true)
!2463 = !DIEnumerator(name: "OPT_mlwp", value: 788, isUnsigned: true)
!2464 = !DIEnumerator(name: "OPT_mmmx", value: 789, isUnsigned: true)
!2465 = !DIEnumerator(name: "OPT_mmovbe", value: 790, isUnsigned: true)
!2466 = !DIEnumerator(name: "OPT_mms_bitfields", value: 791, isUnsigned: true)
!2467 = !DIEnumerator(name: "OPT_mno_align_stringops", value: 792, isUnsigned: true)
!2468 = !DIEnumerator(name: "OPT_mno_fancy_math_387", value: 793, isUnsigned: true)
!2469 = !DIEnumerator(name: "OPT_mno_push_args", value: 794, isUnsigned: true)
!2470 = !DIEnumerator(name: "OPT_mno_red_zone", value: 795, isUnsigned: true)
!2471 = !DIEnumerator(name: "OPT_mno_sse4", value: 796, isUnsigned: true)
!2472 = !DIEnumerator(name: "OPT_momit_leaf_frame_pointer", value: 797, isUnsigned: true)
!2473 = !DIEnumerator(name: "OPT_mpc", value: 798, isUnsigned: true)
!2474 = !DIEnumerator(name: "OPT_mpclmul", value: 799, isUnsigned: true)
!2475 = !DIEnumerator(name: "OPT_mpopcnt", value: 800, isUnsigned: true)
!2476 = !DIEnumerator(name: "OPT_mpreferred_stack_boundary_", value: 801, isUnsigned: true)
!2477 = !DIEnumerator(name: "OPT_mpush_args", value: 802, isUnsigned: true)
!2478 = !DIEnumerator(name: "OPT_mrecip", value: 803, isUnsigned: true)
!2479 = !DIEnumerator(name: "OPT_mred_zone", value: 804, isUnsigned: true)
!2480 = !DIEnumerator(name: "OPT_mregparm_", value: 805, isUnsigned: true)
!2481 = !DIEnumerator(name: "OPT_mrtd", value: 806, isUnsigned: true)
!2482 = !DIEnumerator(name: "OPT_msahf", value: 807, isUnsigned: true)
!2483 = !DIEnumerator(name: "OPT_msoft_float", value: 808, isUnsigned: true)
!2484 = !DIEnumerator(name: "OPT_msse", value: 809, isUnsigned: true)
!2485 = !DIEnumerator(name: "OPT_msse2", value: 810, isUnsigned: true)
!2486 = !DIEnumerator(name: "OPT_msse2avx", value: 811, isUnsigned: true)
!2487 = !DIEnumerator(name: "OPT_msse3", value: 812, isUnsigned: true)
!2488 = !DIEnumerator(name: "OPT_msse4", value: 813, isUnsigned: true)
!2489 = !DIEnumerator(name: "OPT_msse4_1", value: 814, isUnsigned: true)
!2490 = !DIEnumerator(name: "OPT_msse4_2", value: 815, isUnsigned: true)
!2491 = !DIEnumerator(name: "OPT_msse4a", value: 816, isUnsigned: true)
!2492 = !DIEnumerator(name: "OPT_msseregparm", value: 817, isUnsigned: true)
!2493 = !DIEnumerator(name: "OPT_mssse3", value: 818, isUnsigned: true)
!2494 = !DIEnumerator(name: "OPT_mstack_arg_probe", value: 819, isUnsigned: true)
!2495 = !DIEnumerator(name: "OPT_mstackrealign", value: 820, isUnsigned: true)
!2496 = !DIEnumerator(name: "OPT_mstringop_strategy_", value: 821, isUnsigned: true)
!2497 = !DIEnumerator(name: "OPT_mtls_dialect_", value: 822, isUnsigned: true)
!2498 = !DIEnumerator(name: "OPT_mtls_direct_seg_refs", value: 823, isUnsigned: true)
!2499 = !DIEnumerator(name: "OPT_mtune_", value: 824, isUnsigned: true)
!2500 = !DIEnumerator(name: "OPT_muclibc", value: 825, isUnsigned: true)
!2501 = !DIEnumerator(name: "OPT_mveclibabi_", value: 826, isUnsigned: true)
!2502 = !DIEnumerator(name: "OPT_mxop", value: 827, isUnsigned: true)
!2503 = !DIEnumerator(name: "OPT_nocpp", value: 828, isUnsigned: true)
!2504 = !DIEnumerator(name: "OPT_nostdinc", value: 829, isUnsigned: true)
!2505 = !DIEnumerator(name: "OPT_nostdinc__", value: 830, isUnsigned: true)
!2506 = !DIEnumerator(name: "OPT_nostdlib", value: 831, isUnsigned: true)
!2507 = !DIEnumerator(name: "OPT_o", value: 832, isUnsigned: true)
!2508 = !DIEnumerator(name: "OPT_p", value: 833, isUnsigned: true)
!2509 = !DIEnumerator(name: "OPT_pedantic", value: 834, isUnsigned: true)
!2510 = !DIEnumerator(name: "OPT_pedantic_errors", value: 835, isUnsigned: true)
!2511 = !DIEnumerator(name: "OPT_pie", value: 836, isUnsigned: true)
!2512 = !DIEnumerator(name: "OPT_print_objc_runtime_info", value: 837, isUnsigned: true)
!2513 = !DIEnumerator(name: "OPT_print_pch_checksum", value: 838, isUnsigned: true)
!2514 = !DIEnumerator(name: "OPT_quiet", value: 839, isUnsigned: true)
!2515 = !DIEnumerator(name: "OPT_remap", value: 840, isUnsigned: true)
!2516 = !DIEnumerator(name: "OPT_shared", value: 841, isUnsigned: true)
!2517 = !DIEnumerator(name: "OPT_static_libgfortran", value: 842, isUnsigned: true)
!2518 = !DIEnumerator(name: "OPT_std_c__0x", value: 843, isUnsigned: true)
!2519 = !DIEnumerator(name: "OPT_std_c__98", value: 844, isUnsigned: true)
!2520 = !DIEnumerator(name: "OPT_std_c89", value: 845, isUnsigned: true)
!2521 = !DIEnumerator(name: "OPT_std_c90", value: 846, isUnsigned: true)
!2522 = !DIEnumerator(name: "OPT_std_c99", value: 847, isUnsigned: true)
!2523 = !DIEnumerator(name: "OPT_std_c9x", value: 848, isUnsigned: true)
!2524 = !DIEnumerator(name: "OPT_std_f2003", value: 849, isUnsigned: true)
!2525 = !DIEnumerator(name: "OPT_std_f2008", value: 850, isUnsigned: true)
!2526 = !DIEnumerator(name: "OPT_std_f95", value: 851, isUnsigned: true)
!2527 = !DIEnumerator(name: "OPT_std_gnu", value: 852, isUnsigned: true)
!2528 = !DIEnumerator(name: "OPT_std_gnu__0x", value: 853, isUnsigned: true)
!2529 = !DIEnumerator(name: "OPT_std_gnu__98", value: 854, isUnsigned: true)
!2530 = !DIEnumerator(name: "OPT_std_gnu89", value: 855, isUnsigned: true)
!2531 = !DIEnumerator(name: "OPT_std_gnu90", value: 856, isUnsigned: true)
!2532 = !DIEnumerator(name: "OPT_std_gnu99", value: 857, isUnsigned: true)
!2533 = !DIEnumerator(name: "OPT_std_gnu9x", value: 858, isUnsigned: true)
!2534 = !DIEnumerator(name: "OPT_std_iso9899_1990", value: 859, isUnsigned: true)
!2535 = !DIEnumerator(name: "OPT_std_iso9899_199409", value: 860, isUnsigned: true)
!2536 = !DIEnumerator(name: "OPT_std_iso9899_1999", value: 861, isUnsigned: true)
!2537 = !DIEnumerator(name: "OPT_std_iso9899_199x", value: 862, isUnsigned: true)
!2538 = !DIEnumerator(name: "OPT_std_legacy", value: 863, isUnsigned: true)
!2539 = !DIEnumerator(name: "OPT_traditional_cpp", value: 864, isUnsigned: true)
!2540 = !DIEnumerator(name: "OPT_trigraphs", value: 865, isUnsigned: true)
!2541 = !DIEnumerator(name: "OPT_undef", value: 866, isUnsigned: true)
!2542 = !DIEnumerator(name: "OPT_v", value: 867, isUnsigned: true)
!2543 = !DIEnumerator(name: "OPT_version", value: 868, isUnsigned: true)
!2544 = !DIEnumerator(name: "OPT_w", value: 869, isUnsigned: true)
!2545 = !DIEnumerator(name: "N_OPTS", value: 870, isUnsigned: true)
!2546 = !{!2547, !2548, !7, !2549, !2553, !141, !2607, !2682, !4039, !4040, !4041, !2821, !3027, !3581, !2555, !4042, !3526, !4044, !4050, !3450, !4051, !2916, !3439, !4052, !4055, !2883, !4056, !4058, !3124, !902, !4070, !4082, !4089, !4094, !3523, !3441, !4099, !4108, !3365, !3162, !2872, !2882, !4119, !2846, !4120}
!2547 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!2548 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!2549 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2550, size: 64)
!2550 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "label_record", file: !3, line: 1049, size: 128, elements: !2551)
!2551 = !{!2552, !4038}
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !2550, file: !3, line: 1052, baseType: !2553, size: 64)
!2553 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !2554, line: 56, baseType: !2555)
!2554 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2555 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2556, size: 64)
!2556 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !142, line: 3371, size: 1792, elements: !2557)
!2557 = !{!2558, !2591, !2597, !2610, !2629, !2640, !2645, !2655, !2661, !2675, !2687, !2725, !3272, !3300, !3317, !3318, !3323, !3332, !3338, !3343, !3347, !3351, !3690, !3737, !3743, !3749, !3756, !3769, !3783, !3800, !3812, !3834, !3849, !4020}
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2556, file: !142, line: 3372, baseType: !2559, size: 64)
!2559 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !142, line: 360, size: 64, elements: !2560)
!2560 = !{!2561, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575, !2576, !2577, !2578, !2579, !2580, !2581, !2582, !2583, !2584, !2585, !2586, !2587, !2588, !2589, !2590}
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2559, file: !142, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !2559, file: !142, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !2559, file: !142, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !2559, file: !142, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !2559, file: !142, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !2559, file: !142, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !2559, file: !142, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !2559, file: !142, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !2559, file: !142, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !2559, file: !142, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !2559, file: !142, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !2559, file: !142, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !2559, file: !142, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2574 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !2559, file: !142, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !2559, file: !142, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !2559, file: !142, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !2559, file: !142, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !2559, file: !142, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2559, file: !142, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2559, file: !142, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2559, file: !142, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2559, file: !142, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2559, file: !142, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2559, file: !142, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2559, file: !142, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2559, file: !142, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !2559, file: !142, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !2559, file: !142, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !2559, file: !142, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !2559, file: !142, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2556, file: !142, line: 3373, baseType: !2592, size: 192)
!2592 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !142, line: 402, size: 192, elements: !2593)
!2593 = !{!2594, !2595, !2596}
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2592, file: !142, line: 403, baseType: !2559, size: 64)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !2592, file: !142, line: 404, baseType: !2553, size: 64, offset: 64)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2592, file: !142, line: 405, baseType: !2553, size: 64, offset: 128)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !2556, file: !142, line: 3374, baseType: !2598, size: 320)
!2598 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !142, line: 1384, size: 320, elements: !2599)
!2599 = !{!2600, !2601}
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2598, file: !142, line: 1385, baseType: !2592, size: 192)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !2598, file: !142, line: 1386, baseType: !2602, size: 128, offset: 192)
!2602 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !2603, line: 58, baseType: !2604)
!2603 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2604 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2603, line: 54, size: 128, elements: !2605)
!2605 = !{!2606, !2608}
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !2604, file: !2603, line: 56, baseType: !2607, size: 64)
!2607 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !2604, file: !2603, line: 57, baseType: !2609, size: 64, offset: 64)
!2609 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !2556, file: !142, line: 3375, baseType: !2611, size: 256)
!2611 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !142, line: 1397, size: 256, elements: !2612)
!2612 = !{!2613, !2614}
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2611, file: !142, line: 1398, baseType: !2592, size: 192)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !2611, file: !142, line: 1399, baseType: !2615, size: 64, offset: 192)
!2615 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2616, size: 64)
!2616 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !2617, line: 52, size: 256, elements: !2618)
!2617 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2618 = !{!2619, !2620, !2621, !2622, !2623, !2624, !2625}
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !2616, file: !2617, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !2616, file: !2617, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !2616, file: !2617, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !2616, file: !2617, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2616, file: !2617, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !2616, file: !2617, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !2616, file: !2617, line: 62, baseType: !2626, size: 192, offset: 64)
!2626 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2607, size: 192, elements: !2627)
!2627 = !{!2628}
!2628 = !DISubrange(count: 3)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !2556, file: !142, line: 3376, baseType: !2630, size: 256)
!2630 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !142, line: 1408, size: 256, elements: !2631)
!2631 = !{!2632, !2633}
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2630, file: !142, line: 1409, baseType: !2592, size: 192)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !2630, file: !142, line: 1410, baseType: !2634, size: 64, offset: 192)
!2634 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2635, size: 64)
!2635 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !2636, line: 27, size: 192, elements: !2637)
!2636 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2637 = !{!2638, !2639}
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2635, file: !2636, line: 29, baseType: !2602, size: 128)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2635, file: !2636, line: 30, baseType: !13, size: 32, offset: 128)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !2556, file: !142, line: 3377, baseType: !2641, size: 256)
!2641 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !142, line: 1437, size: 256, elements: !2642)
!2642 = !{!2643, !2644}
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2641, file: !142, line: 1438, baseType: !2592, size: 192)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2641, file: !142, line: 1439, baseType: !2553, size: 64, offset: 192)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2556, file: !142, line: 3378, baseType: !2646, size: 256)
!2646 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !142, line: 1418, size: 256, elements: !2647)
!2647 = !{!2648, !2649, !2650}
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2646, file: !142, line: 1419, baseType: !2592, size: 192)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2646, file: !142, line: 1420, baseType: !2548, size: 32, offset: 192)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2646, file: !142, line: 1421, baseType: !2651, size: 8, offset: 224)
!2651 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2652, size: 8, elements: !2653)
!2652 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2653 = !{!2654}
!2654 = !DISubrange(count: 1)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !2556, file: !142, line: 3379, baseType: !2656, size: 320)
!2656 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !142, line: 1428, size: 320, elements: !2657)
!2657 = !{!2658, !2659, !2660}
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2656, file: !142, line: 1429, baseType: !2592, size: 192)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !2656, file: !142, line: 1430, baseType: !2553, size: 64, offset: 192)
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !2656, file: !142, line: 1431, baseType: !2553, size: 64, offset: 256)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !2556, file: !142, line: 3380, baseType: !2662, size: 320)
!2662 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !142, line: 1460, size: 320, elements: !2663)
!2663 = !{!2664, !2665}
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2662, file: !142, line: 1461, baseType: !2592, size: 192)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !2662, file: !142, line: 1462, baseType: !2666, size: 128, offset: 192)
!2666 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !2667, line: 31, size: 128, elements: !2668)
!2667 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2668 = !{!2669, !2673, !2674}
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2666, file: !2667, line: 32, baseType: !2670, size: 64)
!2670 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2671, size: 64)
!2671 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2672)
!2672 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2666, file: !2667, line: 33, baseType: !7, size: 32, offset: 64)
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !2666, file: !2667, line: 34, baseType: !7, size: 32, offset: 96)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !2556, file: !142, line: 3381, baseType: !2676, size: 384)
!2676 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !142, line: 2507, size: 384, elements: !2677)
!2677 = !{!2678, !2679, !2684, !2685, !2686}
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2676, file: !142, line: 2508, baseType: !2592, size: 192)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2676, file: !142, line: 2509, baseType: !2680, size: 32, offset: 192)
!2680 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !2681, line: 58, baseType: !2682)
!2681 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2682 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !2683, line: 44, baseType: !7)
!2683 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2676, file: !142, line: 2510, baseType: !7, size: 32, offset: 224)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2676, file: !142, line: 2511, baseType: !2553, size: 64, offset: 256)
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2676, file: !142, line: 2512, baseType: !2553, size: 64, offset: 320)
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !2556, file: !142, line: 3382, baseType: !2688, size: 896)
!2688 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !142, line: 2652, size: 896, elements: !2689)
!2689 = !{!2690, !2691, !2692, !2693, !2694, !2695, !2696, !2697, !2698, !2699, !2700, !2701, !2702, !2703, !2704, !2705, !2706, !2707, !2708, !2709, !2710, !2711, !2712, !2713, !2714, !2715, !2716, !2717, !2718, !2719, !2720, !2721, !2722}
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2688, file: !142, line: 2653, baseType: !2676, size: 384)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2688, file: !142, line: 2654, baseType: !2553, size: 64, offset: 384)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2688, file: !142, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !2688, file: !142, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !2688, file: !142, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !2688, file: !142, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2688, file: !142, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !2688, file: !142, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !2688, file: !142, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !2688, file: !142, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2688, file: !142, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2688, file: !142, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2688, file: !142, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2688, file: !142, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2688, file: !142, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2688, file: !142, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2688, file: !142, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!2707 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !2688, file: !142, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !2688, file: !142, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !2688, file: !142, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !2688, file: !142, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !2688, file: !142, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !2688, file: !142, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !2688, file: !142, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !2688, file: !142, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !2688, file: !142, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !2688, file: !142, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2688, file: !142, line: 2703, baseType: !7, size: 32, offset: 512)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2688, file: !142, line: 2705, baseType: !2553, size: 64, offset: 576)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2688, file: !142, line: 2706, baseType: !2553, size: 64, offset: 640)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2688, file: !142, line: 2707, baseType: !2553, size: 64, offset: 704)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2688, file: !142, line: 2708, baseType: !2553, size: 64, offset: 768)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2688, file: !142, line: 2711, baseType: !2723, size: 64, offset: 832)
!2723 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2724, size: 64)
!2724 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !142, line: 2711, flags: DIFlagFwdDecl)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !2556, file: !142, line: 3383, baseType: !2726, size: 960)
!2726 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !142, line: 2756, size: 960, elements: !2727)
!2727 = !{!2728, !2729}
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2726, file: !142, line: 2757, baseType: !2688, size: 896)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2726, file: !142, line: 2758, baseType: !2730, size: 64, offset: 896)
!2730 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !2554, line: 50, baseType: !2731)
!2731 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2732, size: 64)
!2732 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !2733, line: 240, size: 384, elements: !2734)
!2733 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2734 = !{!2735, !2736, !2737, !2738, !2739, !2740, !2741, !2742, !2743, !2744, !2745}
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2732, file: !2733, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2732, file: !2733, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !2732, file: !2733, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !2732, file: !2733, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !2732, file: !2733, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !2732, file: !2733, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !2732, file: !2733, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2732, file: !2733, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !2732, file: !2733, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !2732, file: !2733, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2732, file: !2733, line: 321, baseType: !2746, size: 320, offset: 64)
!2746 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !2733, line: 315, size: 320, elements: !2747)
!2747 = !{!2748, !3205, !3207, !3270, !3271}
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2746, file: !2733, line: 316, baseType: !2749, size: 64)
!2749 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2750, size: 64, elements: !2653)
!2750 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !2733, line: 183, baseType: !2751)
!2751 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !2733, line: 166, size: 64, elements: !2752)
!2752 = !{!2753, !2754, !2755, !2758, !2759, !2767, !2768, !2780, !2783, !2844, !2845, !3182, !3195, !3202}
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !2751, file: !2733, line: 168, baseType: !2548, size: 32)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !2751, file: !2733, line: 169, baseType: !7, size: 32)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !2751, file: !2733, line: 170, baseType: !2756, size: 64)
!2756 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2757, size: 64)
!2757 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2652)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !2751, file: !2733, line: 171, baseType: !2730, size: 64)
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !2751, file: !2733, line: 172, baseType: !2760, size: 64)
!2760 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !2554, line: 53, baseType: !2761)
!2761 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2762, size: 64)
!2762 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !2733, line: 359, size: 128, elements: !2763)
!2763 = !{!2764, !2765}
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !2762, file: !2733, line: 360, baseType: !2548, size: 32)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !2762, file: !2733, line: 361, baseType: !2766, size: 64, offset: 64)
!2766 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2730, size: 64, elements: !2653)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !2751, file: !2733, line: 173, baseType: !13, size: 32)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !2751, file: !2733, line: 174, baseType: !2769, size: 32)
!2769 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !2733, line: 133, baseType: !2770)
!2770 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2733, line: 115, size: 32, elements: !2771)
!2771 = !{!2772, !2773, !2774, !2775, !2776, !2777, !2778, !2779}
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !2770, file: !2733, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !2770, file: !2733, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !2770, file: !2733, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !2770, file: !2733, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !2770, file: !2733, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !2770, file: !2733, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !2770, file: !2733, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !2770, file: !2733, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !2751, file: !2733, line: 175, baseType: !2781, size: 64)
!2781 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2782, size: 64)
!2782 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !2733, line: 175, flags: DIFlagFwdDecl)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !2751, file: !2733, line: 176, baseType: !2784, size: 64)
!2784 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2785, size: 64)
!2785 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !2786, line: 75, size: 256, elements: !2787)
!2786 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2787 = !{!2788, !2802, !2803, !2804}
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2785, file: !2786, line: 76, baseType: !2789, size: 64)
!2789 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2790, size: 64)
!2790 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !2786, line: 68, baseType: !2791)
!2791 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !2786, line: 63, size: 320, elements: !2792)
!2792 = !{!2793, !2795, !2796, !2797}
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2791, file: !2786, line: 64, baseType: !2794, size: 64)
!2794 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2791, size: 64)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2791, file: !2786, line: 65, baseType: !2794, size: 64, offset: 64)
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2791, file: !2786, line: 66, baseType: !7, size: 32, offset: 128)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !2791, file: !2786, line: 67, baseType: !2798, size: 128, offset: 192)
!2798 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2799, size: 128, elements: !2800)
!2799 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !2786, line: 29, baseType: !2607)
!2800 = !{!2801}
!2801 = !DISubrange(count: 2)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !2785, file: !2786, line: 77, baseType: !2789, size: 64, offset: 64)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2785, file: !2786, line: 78, baseType: !7, size: 32, offset: 128)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2785, file: !2786, line: 79, baseType: !2805, size: 64, offset: 192)
!2805 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2806, size: 64)
!2806 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !2786, line: 49, baseType: !2807)
!2807 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !2786, line: 45, size: 832, elements: !2808)
!2808 = !{!2809, !2810, !2811}
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2807, file: !2786, line: 46, baseType: !2794, size: 64)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !2807, file: !2786, line: 47, baseType: !2784, size: 64, offset: 64)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2807, file: !2786, line: 48, baseType: !2812, size: 704, offset: 128)
!2812 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !2813, line: 164, size: 704, elements: !2814)
!2813 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2814 = !{!2815, !2816, !2827, !2828, !2829, !2830, !2831, !2832, !2836, !2840, !2841, !2842, !2843}
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !2812, file: !2813, line: 166, baseType: !2609, size: 64)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !2812, file: !2813, line: 167, baseType: !2817, size: 64, offset: 64)
!2817 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2818, size: 64)
!2818 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !2813, line: 157, size: 192, elements: !2819)
!2819 = !{!2820, !2822, !2823}
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !2818, file: !2813, line: 159, baseType: !2821, size: 64)
!2821 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2652, size: 64)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2818, file: !2813, line: 160, baseType: !2817, size: 64, offset: 64)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !2818, file: !2813, line: 161, baseType: !2824, size: 32, offset: 128)
!2824 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2652, size: 32, elements: !2825)
!2825 = !{!2826}
!2826 = !DISubrange(count: 4)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !2812, file: !2813, line: 168, baseType: !2821, size: 64, offset: 128)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2812, file: !2813, line: 169, baseType: !2821, size: 64, offset: 192)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !2812, file: !2813, line: 170, baseType: !2821, size: 64, offset: 256)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !2812, file: !2813, line: 171, baseType: !2609, size: 64, offset: 320)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !2812, file: !2813, line: 172, baseType: !2548, size: 32, offset: 384)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !2812, file: !2813, line: 176, baseType: !2833, size: 64, offset: 448)
!2833 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2834, size: 64)
!2834 = !DISubroutineType(types: !2835)
!2835 = !{!2817, !2547, !2609}
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !2812, file: !2813, line: 177, baseType: !2837, size: 64, offset: 512)
!2837 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2838, size: 64)
!2838 = !DISubroutineType(types: !2839)
!2839 = !{null, !2547, !2817}
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !2812, file: !2813, line: 178, baseType: !2547, size: 64, offset: 576)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !2812, file: !2813, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !2812, file: !2813, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !2812, file: !2813, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !2751, file: !2733, line: 177, baseType: !2553, size: 64)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !2751, file: !2733, line: 178, baseType: !2846, size: 64)
!2846 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2847, size: 64)
!2847 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !382, line: 217, size: 832, elements: !2848)
!2848 = !{!2849, !3094, !3095, !3096, !3152, !3156, !3157, !3158, !3176, !3177, !3178, !3179, !3180, !3181}
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !2847, file: !382, line: 219, baseType: !2850, size: 64)
!2850 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2851, size: 64)
!2851 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !382, line: 151, baseType: !2852)
!2852 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !382, line: 151, size: 128, elements: !2853)
!2853 = !{!2854}
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2852, file: !382, line: 151, baseType: !2855, size: 128)
!2855 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !382, line: 150, baseType: !2856)
!2856 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !382, line: 150, size: 128, elements: !2857)
!2857 = !{!2858, !2859, !2860}
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2856, file: !382, line: 150, baseType: !7, size: 32)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2856, file: !382, line: 150, baseType: !7, size: 32, offset: 32)
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2856, file: !382, line: 150, baseType: !2861, size: 64, offset: 64)
!2861 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2862, size: 64, elements: !2653)
!2862 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !2554, line: 108, baseType: !2863)
!2863 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2864, size: 64)
!2864 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !382, line: 122, size: 512, elements: !2865)
!2865 = !{!2866, !2867, !2868, !3086, !3087, !3088, !3089, !3090, !3091, !3092}
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !2864, file: !382, line: 124, baseType: !2846, size: 64)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !2864, file: !382, line: 125, baseType: !2846, size: 64, offset: 64)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !2864, file: !382, line: 131, baseType: !2869, size: 64, offset: 128)
!2869 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !382, line: 128, size: 64, elements: !2870)
!2870 = !{!2871, !3085}
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !2869, file: !382, line: 129, baseType: !2872, size: 64)
!2872 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !2554, line: 66, baseType: !2873)
!2873 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2874, size: 64)
!2874 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !581, line: 143, size: 192, elements: !2875)
!2875 = !{!2876, !3083, !3084}
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2874, file: !581, line: 145, baseType: !2877, size: 64)
!2877 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !2554, line: 69, baseType: !2878)
!2878 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2879, size: 64)
!2879 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !581, line: 136, size: 192, elements: !2880)
!2880 = !{!2881, !3081, !3082}
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2879, file: !581, line: 137, baseType: !2882, size: 64)
!2882 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !2554, line: 58, baseType: !2883)
!2883 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2884, size: 64)
!2884 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !581, line: 737, size: 768, elements: !2885)
!2885 = !{!2886, !2903, !2936, !2942, !2947, !2952, !2959, !2965, !2971, !2976, !2990, !2995, !3001, !3006, !3016, !3021, !3039, !3046, !3053, !3059, !3064, !3070, !3076}
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2884, file: !581, line: 738, baseType: !2887, size: 256)
!2887 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !581, line: 271, size: 256, elements: !2888)
!2888 = !{!2889, !2890, !2891, !2892, !2893, !2894, !2895, !2896, !2897, !2898, !2899, !2900, !2901, !2902}
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2887, file: !581, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !2887, file: !581, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2887, file: !581, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !2887, file: !581, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !2887, file: !581, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !2887, file: !581, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !2887, file: !581, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !2887, file: !581, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2887, file: !581, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2887, file: !581, line: 312, baseType: !7, size: 32, offset: 32)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !2887, file: !581, line: 316, baseType: !2680, size: 32, offset: 64)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !2887, file: !581, line: 319, baseType: !7, size: 32, offset: 96)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2887, file: !581, line: 323, baseType: !2846, size: 64, offset: 128)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2887, file: !581, line: 327, baseType: !2553, size: 64, offset: 192)
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !2884, file: !581, line: 739, baseType: !2904, size: 448)
!2904 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !581, line: 350, size: 448, elements: !2905)
!2905 = !{!2906, !2934}
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2904, file: !581, line: 353, baseType: !2907, size: 384)
!2907 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !581, line: 333, size: 384, elements: !2908)
!2908 = !{!2909, !2910, !2917}
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2907, file: !581, line: 336, baseType: !2887, size: 256)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !2907, file: !581, line: 343, baseType: !2911, size: 64, offset: 256)
!2911 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2912, size: 64)
!2912 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !891, line: 37, size: 128, elements: !2913)
!2913 = !{!2914, !2915}
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2912, file: !891, line: 39, baseType: !2911, size: 64)
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !2912, file: !891, line: 40, baseType: !2916, size: 64, offset: 64)
!2916 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2553, size: 64)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !2907, file: !581, line: 344, baseType: !2918, size: 64, offset: 320)
!2918 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2919, size: 64)
!2919 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !891, line: 45, size: 320, elements: !2920)
!2920 = !{!2921, !2922}
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2919, file: !891, line: 47, baseType: !2918, size: 64)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !2919, file: !891, line: 48, baseType: !2923, size: 256, offset: 64)
!2923 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !142, line: 1883, size: 256, elements: !2924)
!2924 = !{!2925, !2927, !2928, !2933}
!2925 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2923, file: !142, line: 1884, baseType: !2926, size: 64)
!2926 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2923, size: 64)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2923, file: !142, line: 1885, baseType: !2926, size: 64, offset: 64)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !2923, file: !142, line: 1891, baseType: !2929, size: 64, offset: 128)
!2929 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2923, file: !142, line: 1891, size: 64, elements: !2930)
!2930 = !{!2931, !2932}
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2929, file: !142, line: 1891, baseType: !2882, size: 64)
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2929, file: !142, line: 1891, baseType: !2553, size: 64)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2923, file: !142, line: 1892, baseType: !2916, size: 64, offset: 192)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2904, file: !581, line: 359, baseType: !2935, size: 64, offset: 384)
!2935 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2553, size: 64, elements: !2653)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !2884, file: !581, line: 740, baseType: !2937, size: 512)
!2937 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !581, line: 365, size: 512, elements: !2938)
!2938 = !{!2939, !2940, !2941}
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2937, file: !581, line: 368, baseType: !2907, size: 384)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !2937, file: !581, line: 373, baseType: !2553, size: 64, offset: 384)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !2937, file: !581, line: 374, baseType: !2553, size: 64, offset: 448)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !2884, file: !581, line: 741, baseType: !2943, size: 576)
!2943 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !581, line: 380, size: 576, elements: !2944)
!2944 = !{!2945, !2946}
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2943, file: !581, line: 383, baseType: !2937, size: 512)
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2943, file: !581, line: 389, baseType: !2935, size: 64, offset: 512)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2884, file: !581, line: 742, baseType: !2948, size: 320)
!2948 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !581, line: 395, size: 320, elements: !2949)
!2949 = !{!2950, !2951}
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2948, file: !581, line: 397, baseType: !2887, size: 256)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2948, file: !581, line: 400, baseType: !2872, size: 64, offset: 256)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !2884, file: !581, line: 743, baseType: !2953, size: 448)
!2953 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !581, line: 406, size: 448, elements: !2954)
!2954 = !{!2955, !2956, !2957, !2958}
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2953, file: !581, line: 408, baseType: !2887, size: 256)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2953, file: !581, line: 412, baseType: !2553, size: 64, offset: 256)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2953, file: !581, line: 420, baseType: !2553, size: 64, offset: 320)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2953, file: !581, line: 423, baseType: !2872, size: 64, offset: 384)
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !2884, file: !581, line: 744, baseType: !2960, size: 384)
!2960 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !581, line: 429, size: 384, elements: !2961)
!2961 = !{!2962, !2963, !2964}
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2960, file: !581, line: 431, baseType: !2887, size: 256)
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2960, file: !581, line: 434, baseType: !2553, size: 64, offset: 256)
!2964 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !2960, file: !581, line: 437, baseType: !2872, size: 64, offset: 320)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !2884, file: !581, line: 745, baseType: !2966, size: 384)
!2966 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !581, line: 443, size: 384, elements: !2967)
!2967 = !{!2968, !2969, !2970}
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2966, file: !581, line: 445, baseType: !2887, size: 256)
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2966, file: !581, line: 449, baseType: !2553, size: 64, offset: 256)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !2966, file: !581, line: 453, baseType: !2872, size: 64, offset: 320)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !2884, file: !581, line: 746, baseType: !2972, size: 320)
!2972 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !581, line: 459, size: 320, elements: !2973)
!2973 = !{!2974, !2975}
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2972, file: !581, line: 461, baseType: !2887, size: 256)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !2972, file: !581, line: 464, baseType: !2553, size: 64, offset: 256)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !2884, file: !581, line: 747, baseType: !2977, size: 768)
!2977 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !581, line: 469, size: 768, elements: !2978)
!2978 = !{!2979, !2980, !2981, !2982, !2983}
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2977, file: !581, line: 471, baseType: !2887, size: 256)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2977, file: !581, line: 474, baseType: !7, size: 32, offset: 256)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !2977, file: !581, line: 475, baseType: !7, size: 32, offset: 288)
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2977, file: !581, line: 478, baseType: !2553, size: 64, offset: 320)
!2983 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !2977, file: !581, line: 481, baseType: !2984, size: 384, offset: 384)
!2984 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2985, size: 384, elements: !2653)
!2985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !142, line: 1917, size: 384, elements: !2986)
!2986 = !{!2987, !2988, !2989}
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2985, file: !142, line: 1920, baseType: !2923, size: 256)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2985, file: !142, line: 1921, baseType: !2553, size: 64, offset: 256)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2985, file: !142, line: 1922, baseType: !2680, size: 32, offset: 320)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !2884, file: !581, line: 748, baseType: !2991, size: 320)
!2991 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !581, line: 487, size: 320, elements: !2992)
!2992 = !{!2993, !2994}
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2991, file: !581, line: 490, baseType: !2887, size: 256)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2991, file: !581, line: 494, baseType: !2548, size: 32, offset: 256)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !2884, file: !581, line: 749, baseType: !2996, size: 384)
!2996 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !581, line: 500, size: 384, elements: !2997)
!2997 = !{!2998, !2999, !3000}
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2996, file: !581, line: 502, baseType: !2887, size: 256)
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2996, file: !581, line: 506, baseType: !2872, size: 64, offset: 256)
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2996, file: !581, line: 510, baseType: !2872, size: 64, offset: 320)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !2884, file: !581, line: 750, baseType: !3002, size: 320)
!3002 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !581, line: 529, size: 320, elements: !3003)
!3003 = !{!3004, !3005}
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3002, file: !581, line: 531, baseType: !2887, size: 256)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !3002, file: !581, line: 540, baseType: !2872, size: 64, offset: 256)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !2884, file: !581, line: 751, baseType: !3007, size: 704)
!3007 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !581, line: 546, size: 704, elements: !3008)
!3008 = !{!3009, !3010, !3011, !3012, !3013, !3014, !3015}
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !3007, file: !581, line: 549, baseType: !2937, size: 512)
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !3007, file: !581, line: 553, baseType: !2756, size: 64, offset: 512)
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !3007, file: !581, line: 557, baseType: !2672, size: 8, offset: 576)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !3007, file: !581, line: 558, baseType: !2672, size: 8, offset: 584)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !3007, file: !581, line: 559, baseType: !2672, size: 8, offset: 592)
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !3007, file: !581, line: 560, baseType: !2672, size: 8, offset: 600)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !3007, file: !581, line: 566, baseType: !2935, size: 64, offset: 640)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !2884, file: !581, line: 752, baseType: !3017, size: 384)
!3017 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !581, line: 571, size: 384, elements: !3018)
!3018 = !{!3019, !3020}
!3019 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3017, file: !581, line: 573, baseType: !2948, size: 320)
!3020 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3017, file: !581, line: 577, baseType: !2553, size: 64, offset: 320)
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !2884, file: !581, line: 753, baseType: !3022, size: 576)
!3022 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !581, line: 600, size: 576, elements: !3023)
!3023 = !{!3024, !3025, !3026, !3029, !3038}
!3024 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3022, file: !581, line: 602, baseType: !2948, size: 320)
!3025 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !3022, file: !581, line: 605, baseType: !2553, size: 64, offset: 320)
!3026 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !3022, file: !581, line: 609, baseType: !3027, size: 64, offset: 384)
!3027 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !3028, line: 46, baseType: !2607)
!3028 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !3022, file: !581, line: 612, baseType: !3030, size: 64, offset: 448)
!3030 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3031, size: 64)
!3031 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !581, line: 581, size: 320, elements: !3032)
!3032 = !{!3033, !3034, !3035, !3036, !3037}
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !3031, file: !581, line: 583, baseType: !141, size: 32)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3031, file: !581, line: 586, baseType: !2553, size: 64, offset: 64)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !3031, file: !581, line: 589, baseType: !2553, size: 64, offset: 128)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !3031, file: !581, line: 592, baseType: !2553, size: 64, offset: 192)
!3037 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !3031, file: !581, line: 595, baseType: !2553, size: 64, offset: 256)
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !3022, file: !581, line: 616, baseType: !2872, size: 64, offset: 512)
!3039 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !2884, file: !581, line: 754, baseType: !3040, size: 512)
!3040 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !581, line: 622, size: 512, elements: !3041)
!3041 = !{!3042, !3043, !3044, !3045}
!3042 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3040, file: !581, line: 624, baseType: !2948, size: 320)
!3043 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !3040, file: !581, line: 628, baseType: !2553, size: 64, offset: 320)
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !3040, file: !581, line: 632, baseType: !2553, size: 64, offset: 384)
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !3040, file: !581, line: 636, baseType: !2553, size: 64, offset: 448)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !2884, file: !581, line: 755, baseType: !3047, size: 704)
!3047 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !581, line: 642, size: 704, elements: !3048)
!3048 = !{!3049, !3050, !3051, !3052}
!3049 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !3047, file: !581, line: 644, baseType: !3040, size: 512)
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !3047, file: !581, line: 648, baseType: !2553, size: 64, offset: 512)
!3051 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !3047, file: !581, line: 652, baseType: !2553, size: 64, offset: 576)
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !3047, file: !581, line: 653, baseType: !2553, size: 64, offset: 640)
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !2884, file: !581, line: 756, baseType: !3054, size: 448)
!3054 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !581, line: 663, size: 448, elements: !3055)
!3055 = !{!3056, !3057, !3058}
!3056 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3054, file: !581, line: 665, baseType: !2948, size: 320)
!3057 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !3054, file: !581, line: 668, baseType: !2553, size: 64, offset: 320)
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !3054, file: !581, line: 673, baseType: !2553, size: 64, offset: 384)
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !2884, file: !581, line: 757, baseType: !3060, size: 384)
!3060 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !581, line: 694, size: 384, elements: !3061)
!3061 = !{!3062, !3063}
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3060, file: !581, line: 696, baseType: !2948, size: 320)
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !3060, file: !581, line: 699, baseType: !2553, size: 64, offset: 320)
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !2884, file: !581, line: 758, baseType: !3065, size: 384)
!3065 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !581, line: 681, size: 384, elements: !3066)
!3066 = !{!3067, !3068, !3069}
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3065, file: !581, line: 683, baseType: !2887, size: 256)
!3068 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !3065, file: !581, line: 686, baseType: !2553, size: 64, offset: 256)
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !3065, file: !581, line: 689, baseType: !2553, size: 64, offset: 320)
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !2884, file: !581, line: 759, baseType: !3071, size: 384)
!3071 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !581, line: 707, size: 384, elements: !3072)
!3072 = !{!3073, !3074, !3075}
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3071, file: !581, line: 709, baseType: !2887, size: 256)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !3071, file: !581, line: 712, baseType: !2553, size: 64, offset: 256)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !3071, file: !581, line: 712, baseType: !2553, size: 64, offset: 320)
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !2884, file: !581, line: 760, baseType: !3077, size: 320)
!3077 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !581, line: 718, size: 320, elements: !3078)
!3078 = !{!3079, !3080}
!3079 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3077, file: !581, line: 720, baseType: !2887, size: 256)
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3077, file: !581, line: 723, baseType: !2553, size: 64, offset: 256)
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2879, file: !581, line: 138, baseType: !2878, size: 64, offset: 64)
!3082 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2879, file: !581, line: 139, baseType: !2878, size: 64, offset: 128)
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !2874, file: !581, line: 146, baseType: !2877, size: 64, offset: 64)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2874, file: !581, line: 152, baseType: !2872, size: 64, offset: 128)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !2869, file: !382, line: 130, baseType: !2730, size: 64)
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2864, file: !382, line: 134, baseType: !2547, size: 64, offset: 192)
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !2864, file: !382, line: 137, baseType: !2553, size: 64, offset: 256)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !2864, file: !382, line: 138, baseType: !2680, size: 32, offset: 320)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !2864, file: !382, line: 142, baseType: !7, size: 32, offset: 352)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2864, file: !382, line: 144, baseType: !2548, size: 32, offset: 384)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !2864, file: !382, line: 145, baseType: !2548, size: 32, offset: 416)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2864, file: !382, line: 146, baseType: !3093, size: 64, offset: 448)
!3093 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !382, line: 119, baseType: !2609)
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !2847, file: !382, line: 220, baseType: !2850, size: 64, offset: 64)
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2847, file: !382, line: 223, baseType: !2547, size: 64, offset: 128)
!3096 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !2847, file: !382, line: 226, baseType: !3097, size: 64, offset: 192)
!3097 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3098, size: 64)
!3098 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !337, line: 100, size: 1216, elements: !3099)
!3099 = !{!3100, !3101, !3102, !3103, !3104, !3109, !3110, !3111, !3125, !3126, !3127, !3128, !3129, !3130, !3131, !3132, !3133, !3134, !3142, !3150, !3151}
!3100 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3098, file: !337, line: 102, baseType: !2548, size: 32)
!3101 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !3098, file: !337, line: 105, baseType: !7, size: 32, offset: 32)
!3102 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !3098, file: !337, line: 108, baseType: !2846, size: 64, offset: 64)
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !3098, file: !337, line: 111, baseType: !2846, size: 64, offset: 128)
!3104 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !3098, file: !337, line: 114, baseType: !3105, size: 64, offset: 192)
!3105 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !337, line: 41, size: 64, elements: !3106)
!3106 = !{!3107, !3108}
!3107 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !3105, file: !337, line: 42, baseType: !336, size: 32)
!3108 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !3105, file: !337, line: 43, baseType: !7, size: 32, offset: 32)
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !3098, file: !337, line: 117, baseType: !7, size: 32, offset: 256)
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !3098, file: !337, line: 120, baseType: !7, size: 32, offset: 288)
!3111 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !3098, file: !337, line: 123, baseType: !3112, size: 64, offset: 320)
!3112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3113, size: 64)
!3113 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !337, line: 87, baseType: !3114)
!3114 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !337, line: 87, size: 128, elements: !3115)
!3115 = !{!3116}
!3116 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3114, file: !337, line: 87, baseType: !3117, size: 128)
!3117 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !337, line: 85, baseType: !3118)
!3118 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !337, line: 85, size: 128, elements: !3119)
!3119 = !{!3120, !3121, !3122}
!3120 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3118, file: !337, line: 85, baseType: !7, size: 32)
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3118, file: !337, line: 85, baseType: !7, size: 32, offset: 32)
!3122 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3118, file: !337, line: 85, baseType: !3123, size: 64, offset: 64)
!3123 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3124, size: 64, elements: !2653)
!3124 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !337, line: 84, baseType: !3097)
!3125 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !3098, file: !337, line: 126, baseType: !3097, size: 64, offset: 384)
!3126 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3098, file: !337, line: 129, baseType: !3097, size: 64, offset: 448)
!3127 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3098, file: !337, line: 132, baseType: !2547, size: 64, offset: 512)
!3128 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !3098, file: !337, line: 139, baseType: !2553, size: 64, offset: 576)
!3129 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !3098, file: !337, line: 143, baseType: !2602, size: 128, offset: 640)
!3130 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !3098, file: !337, line: 146, baseType: !2602, size: 128, offset: 768)
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !3098, file: !337, line: 148, baseType: !2672, size: 8, offset: 896)
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !3098, file: !337, line: 149, baseType: !2672, size: 8, offset: 904)
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !3098, file: !337, line: 153, baseType: !345, size: 32, offset: 928)
!3134 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !3098, file: !337, line: 156, baseType: !3135, size: 64, offset: 960)
!3135 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3136, size: 64)
!3136 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !337, line: 48, size: 320, elements: !3137)
!3137 = !{!3138, !3139, !3140, !3141}
!3138 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3136, file: !337, line: 50, baseType: !2882, size: 64)
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !3136, file: !337, line: 59, baseType: !2602, size: 128, offset: 64)
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !3136, file: !337, line: 64, baseType: !2672, size: 8, offset: 192)
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3136, file: !337, line: 67, baseType: !3135, size: 64, offset: 256)
!3142 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !3098, file: !337, line: 159, baseType: !3143, size: 64, offset: 1024)
!3143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3144, size: 64)
!3144 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !337, line: 72, size: 256, elements: !3145)
!3145 = !{!3146, !3147, !3148, !3149}
!3146 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !3144, file: !337, line: 74, baseType: !2863, size: 64)
!3147 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3144, file: !337, line: 77, baseType: !3143, size: 64, offset: 64)
!3148 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3144, file: !337, line: 78, baseType: !3143, size: 64, offset: 128)
!3149 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !3144, file: !337, line: 81, baseType: !3143, size: 64, offset: 192)
!3150 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !3098, file: !337, line: 162, baseType: !2672, size: 8, offset: 1088)
!3151 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !3098, file: !337, line: 166, baseType: !2553, size: 64, offset: 1152)
!3152 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !2847, file: !382, line: 229, baseType: !3153, size: 128, offset: 256)
!3153 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3154, size: 128, elements: !2800)
!3154 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3155, size: 64)
!3155 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !382, line: 229, flags: DIFlagFwdDecl)
!3156 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !2847, file: !382, line: 232, baseType: !2846, size: 64, offset: 384)
!3157 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !2847, file: !382, line: 233, baseType: !2846, size: 64, offset: 448)
!3158 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !2847, file: !382, line: 238, baseType: !3159, size: 64, offset: 512)
!3159 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !382, line: 235, size: 64, elements: !3160)
!3160 = !{!3161, !3167}
!3161 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !3159, file: !382, line: 236, baseType: !3162, size: 64)
!3162 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3163, size: 64)
!3163 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !382, line: 273, size: 128, elements: !3164)
!3164 = !{!3165, !3166}
!3165 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3163, file: !382, line: 275, baseType: !2872, size: 64)
!3166 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !3163, file: !382, line: 278, baseType: !2872, size: 64, offset: 64)
!3167 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3159, file: !382, line: 237, baseType: !3168, size: 64)
!3168 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3169, size: 64)
!3169 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !382, line: 259, size: 320, elements: !3170)
!3170 = !{!3171, !3172, !3173, !3174, !3175}
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !3169, file: !382, line: 261, baseType: !2730, size: 64)
!3172 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !3169, file: !382, line: 262, baseType: !2730, size: 64, offset: 64)
!3173 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !3169, file: !382, line: 266, baseType: !2730, size: 64, offset: 128)
!3174 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !3169, file: !382, line: 267, baseType: !2730, size: 64, offset: 192)
!3175 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !3169, file: !382, line: 270, baseType: !2548, size: 32, offset: 256)
!3176 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2847, file: !382, line: 241, baseType: !3093, size: 64, offset: 576)
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2847, file: !382, line: 244, baseType: !2548, size: 32, offset: 640)
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !2847, file: !382, line: 247, baseType: !2548, size: 32, offset: 672)
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !2847, file: !382, line: 250, baseType: !2548, size: 32, offset: 704)
!3180 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !2847, file: !382, line: 253, baseType: !2548, size: 32, offset: 736)
!3181 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2847, file: !382, line: 256, baseType: !2548, size: 32, offset: 768)
!3182 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !2751, file: !2733, line: 179, baseType: !3183, size: 64)
!3183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3184, size: 64)
!3184 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !2733, line: 150, baseType: !3185)
!3185 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !2733, line: 142, size: 320, elements: !3186)
!3186 = !{!3187, !3188, !3189, !3190, !3193, !3194}
!3187 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !3185, file: !2733, line: 144, baseType: !2553, size: 64)
!3188 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3185, file: !2733, line: 145, baseType: !2730, size: 64, offset: 64)
!3189 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3185, file: !2733, line: 146, baseType: !2730, size: 64, offset: 128)
!3190 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3185, file: !2733, line: 147, baseType: !3191, size: 32, offset: 192)
!3191 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !3192, line: 31, baseType: !2548)
!3192 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3193 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3185, file: !2733, line: 148, baseType: !7, size: 32, offset: 224)
!3194 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !3185, file: !2733, line: 149, baseType: !2672, size: 8, offset: 256)
!3195 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !2751, file: !2733, line: 180, baseType: !3196, size: 64)
!3196 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3197, size: 64)
!3197 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !2733, line: 162, baseType: !3198)
!3198 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !2733, line: 159, size: 128, elements: !3199)
!3199 = !{!3200, !3201}
!3200 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3198, file: !2733, line: 160, baseType: !2553, size: 64)
!3201 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3198, file: !2733, line: 161, baseType: !2609, size: 64, offset: 64)
!3202 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !2751, file: !2733, line: 181, baseType: !3203, size: 64)
!3203 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3204, size: 64)
!3204 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !2733, line: 181, flags: DIFlagFwdDecl)
!3205 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !2746, file: !2733, line: 317, baseType: !3206, size: 64)
!3206 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2609, size: 64, elements: !2653)
!3207 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !2746, file: !2733, line: 318, baseType: !3208, size: 320)
!3208 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !2733, line: 188, size: 320, elements: !3209)
!3209 = !{!3210, !3212, !3269}
!3210 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !3208, file: !2733, line: 190, baseType: !3211, size: 192)
!3211 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2750, size: 192, elements: !2627)
!3212 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3208, file: !2733, line: 193, baseType: !3213, size: 64, offset: 192)
!3213 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3214, size: 64)
!3214 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !2733, line: 206, size: 320, elements: !3215)
!3215 = !{!3216, !3254, !3255, !3256, !3268}
!3216 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !3214, file: !2733, line: 208, baseType: !3217, size: 64)
!3217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3218, size: 64)
!3218 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !2554, line: 62, baseType: !3219)
!3219 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !3220, line: 538, size: 256, elements: !3221)
!3220 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3221 = !{!3222, !3226, !3232, !3245}
!3222 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3219, file: !3220, line: 539, baseType: !3223, size: 32)
!3223 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !3220, line: 482, size: 32, elements: !3224)
!3224 = !{!3225}
!3225 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3223, file: !3220, line: 484, baseType: !7, size: 32)
!3226 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !3219, file: !3220, line: 540, baseType: !3227, size: 192)
!3227 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !3220, line: 488, size: 192, elements: !3228)
!3228 = !{!3229, !3230, !3231}
!3229 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3227, file: !3220, line: 489, baseType: !3223, size: 32)
!3230 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3227, file: !3220, line: 492, baseType: !2756, size: 64, offset: 64)
!3231 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3227, file: !3220, line: 496, baseType: !2553, size: 64, offset: 128)
!3232 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !3219, file: !3220, line: 541, baseType: !3233, size: 256)
!3233 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !3220, line: 504, size: 256, elements: !3234)
!3234 = !{!3235, !3236, !3243, !3244}
!3235 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3233, file: !3220, line: 505, baseType: !3223, size: 32)
!3236 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !3233, file: !3220, line: 509, baseType: !3237, size: 64, offset: 64)
!3237 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !3220, line: 501, baseType: !3238)
!3238 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3239, size: 64)
!3239 = !DISubroutineType(types: !3240)
!3240 = !{null, !3241}
!3241 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3242, size: 64)
!3242 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!3243 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !3233, file: !3220, line: 510, baseType: !3241, size: 64, offset: 128)
!3244 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3233, file: !3220, line: 513, baseType: !3217, size: 64, offset: 192)
!3245 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !3219, file: !3220, line: 542, baseType: !3246, size: 128)
!3246 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !3220, line: 530, size: 128, elements: !3247)
!3247 = !{!3248, !3249}
!3248 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3246, file: !3220, line: 531, baseType: !3223, size: 32)
!3249 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !3246, file: !3220, line: 534, baseType: !3250, size: 64, offset: 64)
!3250 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !3220, line: 525, baseType: !3251)
!3251 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3252, size: 64)
!3252 = !DISubroutineType(types: !3253)
!3253 = !{!2672, !2553, !2756, !2607, !2607}
!3254 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !3214, file: !2733, line: 211, baseType: !7, size: 32, offset: 64)
!3255 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3214, file: !2733, line: 214, baseType: !2609, size: 64, offset: 128)
!3256 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !3214, file: !2733, line: 224, baseType: !3257, size: 64, offset: 192)
!3257 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3258, size: 64)
!3258 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !2733, line: 202, baseType: !3259)
!3259 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !2733, line: 202, size: 128, elements: !3260)
!3260 = !{!3261}
!3261 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3259, file: !2733, line: 202, baseType: !3262, size: 128)
!3262 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !2733, line: 200, baseType: !3263)
!3263 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !2733, line: 200, size: 128, elements: !3264)
!3264 = !{!3265, !3266, !3267}
!3265 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3263, file: !2733, line: 200, baseType: !7, size: 32)
!3266 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3263, file: !2733, line: 200, baseType: !7, size: 32, offset: 32)
!3267 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3263, file: !2733, line: 200, baseType: !2766, size: 64, offset: 64)
!3268 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !3214, file: !2733, line: 234, baseType: !3257, size: 64, offset: 256)
!3269 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3208, file: !2733, line: 197, baseType: !2609, size: 64, offset: 256)
!3270 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !2746, file: !2733, line: 319, baseType: !2616, size: 256)
!3271 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !2746, file: !2733, line: 320, baseType: !2635, size: 192)
!3272 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !2556, file: !142, line: 3384, baseType: !3273, size: 1472)
!3273 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !142, line: 3114, size: 1472, elements: !3274)
!3274 = !{!3275, !3296, !3297, !3298, !3299}
!3275 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3273, file: !142, line: 3115, baseType: !3276, size: 1216)
!3276 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !142, line: 2984, size: 1216, elements: !3277)
!3277 = !{!3278, !3279, !3280, !3281, !3282, !3283, !3284, !3285, !3286, !3287, !3288, !3289, !3290, !3291, !3292, !3293, !3294, !3295}
!3278 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3276, file: !142, line: 2985, baseType: !2726, size: 960)
!3279 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !3276, file: !142, line: 2986, baseType: !2553, size: 64, offset: 960)
!3280 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !3276, file: !142, line: 2987, baseType: !2553, size: 64, offset: 1024)
!3281 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !3276, file: !142, line: 2988, baseType: !2553, size: 64, offset: 1088)
!3282 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !3276, file: !142, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!3283 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !3276, file: !142, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!3284 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !3276, file: !142, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!3285 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !3276, file: !142, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!3286 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !3276, file: !142, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!3287 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !3276, file: !142, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!3288 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !3276, file: !142, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!3289 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !3276, file: !142, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!3290 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !3276, file: !142, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!3291 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !3276, file: !142, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!3292 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !3276, file: !142, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!3293 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !3276, file: !142, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!3294 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !3276, file: !142, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!3295 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !3276, file: !142, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!3296 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !3273, file: !142, line: 3117, baseType: !2553, size: 64, offset: 1216)
!3297 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !3273, file: !142, line: 3119, baseType: !2553, size: 64, offset: 1280)
!3298 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !3273, file: !142, line: 3121, baseType: !2553, size: 64, offset: 1344)
!3299 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !3273, file: !142, line: 3123, baseType: !2553, size: 64, offset: 1408)
!3300 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !2556, file: !142, line: 3385, baseType: !3301, size: 1088)
!3301 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !142, line: 2874, size: 1088, elements: !3302)
!3302 = !{!3303, !3304, !3305}
!3303 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3301, file: !142, line: 2875, baseType: !2726, size: 960)
!3304 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !3301, file: !142, line: 2876, baseType: !2730, size: 64, offset: 960)
!3305 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !3301, file: !142, line: 2877, baseType: !3306, size: 64, offset: 1024)
!3306 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3307, size: 64)
!3307 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !3308, line: 172, size: 128, elements: !3309)
!3308 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3309 = !{!3310, !3311, !3312, !3313, !3314, !3315, !3316}
!3310 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !3307, file: !3308, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !3307, file: !3308, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!3312 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !3307, file: !3308, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!3313 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !3307, file: !3308, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!3314 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !3307, file: !3308, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!3315 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !3307, file: !3308, line: 195, baseType: !7, size: 32, offset: 32)
!3316 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !3307, file: !3308, line: 199, baseType: !2553, size: 64, offset: 64)
!3317 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !2556, file: !142, line: 3386, baseType: !3276, size: 1216)
!3318 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !2556, file: !142, line: 3387, baseType: !3319, size: 1280)
!3319 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !142, line: 3093, size: 1280, elements: !3320)
!3320 = !{!3321, !3322}
!3321 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3319, file: !142, line: 3094, baseType: !3276, size: 1216)
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !3319, file: !142, line: 3095, baseType: !3306, size: 64, offset: 1216)
!3323 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !2556, file: !142, line: 3388, baseType: !3324, size: 1216)
!3324 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !142, line: 2824, size: 1216, elements: !3325)
!3325 = !{!3326, !3327, !3328, !3329, !3330, !3331}
!3326 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3324, file: !142, line: 2825, baseType: !2688, size: 896)
!3327 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3324, file: !142, line: 2827, baseType: !2553, size: 64, offset: 896)
!3328 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !3324, file: !142, line: 2828, baseType: !2553, size: 64, offset: 960)
!3329 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !3324, file: !142, line: 2829, baseType: !2553, size: 64, offset: 1024)
!3330 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !3324, file: !142, line: 2830, baseType: !2553, size: 64, offset: 1088)
!3331 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !3324, file: !142, line: 2831, baseType: !2553, size: 64, offset: 1152)
!3332 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !2556, file: !142, line: 3389, baseType: !3333, size: 1024)
!3333 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !142, line: 2850, size: 1024, elements: !3334)
!3334 = !{!3335, !3336, !3337}
!3335 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3333, file: !142, line: 2851, baseType: !2726, size: 960)
!3336 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !3333, file: !142, line: 2852, baseType: !2548, size: 32, offset: 960)
!3337 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !3333, file: !142, line: 2853, baseType: !2548, size: 32, offset: 992)
!3338 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !2556, file: !142, line: 3390, baseType: !3339, size: 1024)
!3339 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !142, line: 2857, size: 1024, elements: !3340)
!3340 = !{!3341, !3342}
!3341 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3339, file: !142, line: 2858, baseType: !2726, size: 960)
!3342 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !3339, file: !142, line: 2859, baseType: !3306, size: 64, offset: 960)
!3343 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !2556, file: !142, line: 3391, baseType: !3344, size: 960)
!3344 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !142, line: 2862, size: 960, elements: !3345)
!3345 = !{!3346}
!3346 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3344, file: !142, line: 2863, baseType: !2726, size: 960)
!3347 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !2556, file: !142, line: 3392, baseType: !3348, size: 1472)
!3348 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !142, line: 3304, size: 1472, elements: !3349)
!3349 = !{!3350}
!3350 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3348, file: !142, line: 3305, baseType: !3273, size: 1472)
!3351 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !2556, file: !142, line: 3393, baseType: !3352, size: 1792)
!3352 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !142, line: 3248, size: 1792, elements: !3353)
!3353 = !{!3354, !3355, !3669, !3670, !3671, !3672, !3673, !3674, !3675, !3676, !3677, !3678, !3679, !3680, !3681, !3682, !3683, !3684, !3685, !3686, !3687, !3688, !3689}
!3354 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3352, file: !142, line: 3249, baseType: !3273, size: 1472)
!3355 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !3352, file: !142, line: 3251, baseType: !3356, size: 64, offset: 1472)
!3356 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3357, size: 64)
!3357 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !3358, line: 463, size: 1152, elements: !3359)
!3358 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3359 = !{!3360, !3518, !3549, !3550, !3605, !3613, !3614, !3615, !3616, !3617, !3618, !3642, !3645, !3646, !3647, !3648, !3649, !3650, !3651, !3652, !3653, !3654, !3655, !3656, !3657, !3658, !3659, !3660, !3661, !3662, !3663, !3664, !3665, !3666, !3667, !3668}
!3360 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !3357, file: !3358, line: 464, baseType: !3361, size: 64)
!3361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3362, size: 64)
!3362 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !6, line: 194, size: 384, elements: !3363)
!3363 = !{!3364, !3413, !3426, !3440, !3487, !3499}
!3364 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !3362, file: !6, line: 197, baseType: !3365, size: 64)
!3365 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !6, line: 182, baseType: !3366)
!3366 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3367, size: 64)
!3367 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !6, line: 116, size: 704, elements: !3368)
!3368 = !{!3369, !3370, !3371, !3372, !3373, !3374, !3401, !3410, !3411, !3412}
!3369 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !3367, file: !6, line: 119, baseType: !3366, size: 64)
!3370 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !3367, file: !6, line: 122, baseType: !3366, size: 64, offset: 64)
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !3367, file: !6, line: 123, baseType: !3366, size: 64, offset: 128)
!3372 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3367, file: !6, line: 126, baseType: !2548, size: 32, offset: 192)
!3373 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3367, file: !6, line: 129, baseType: !5, size: 32, offset: 224)
!3374 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !3367, file: !6, line: 165, baseType: !3375, size: 192, offset: 256)
!3375 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !6, line: 132, size: 192, elements: !3376)
!3376 = !{!3377, !3390, !3396}
!3377 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !3375, file: !6, line: 137, baseType: !3378, size: 128)
!3378 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !6, line: 133, size: 128, elements: !3379)
!3379 = !{!3380, !3389}
!3380 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !3378, file: !6, line: 135, baseType: !3381, size: 64)
!3381 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3382, size: 64)
!3382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !6, line: 93, size: 320, elements: !3383)
!3383 = !{!3384, !3385, !3386, !3387, !3388}
!3384 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !3382, file: !6, line: 96, baseType: !3381, size: 64)
!3385 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !3382, file: !6, line: 97, baseType: !3381, size: 64, offset: 64)
!3386 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !3382, file: !6, line: 101, baseType: !2553, size: 64, offset: 128)
!3387 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !3382, file: !6, line: 106, baseType: !2553, size: 64, offset: 192)
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !3382, file: !6, line: 111, baseType: !2553, size: 64, offset: 256)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !3378, file: !6, line: 136, baseType: !3381, size: 64, offset: 64)
!3390 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !3375, file: !6, line: 151, baseType: !3391, size: 192)
!3391 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !6, line: 139, size: 192, elements: !3392)
!3392 = !{!3393, !3394, !3395}
!3393 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !3391, file: !6, line: 141, baseType: !2553, size: 64)
!3394 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !3391, file: !6, line: 145, baseType: !2553, size: 64, offset: 64)
!3395 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !3391, file: !6, line: 150, baseType: !2548, size: 32, offset: 128)
!3396 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !3375, file: !6, line: 164, baseType: !3397, size: 128)
!3397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !6, line: 153, size: 128, elements: !3398)
!3398 = !{!3399, !3400}
!3399 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !3397, file: !6, line: 161, baseType: !2553, size: 64)
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !3397, file: !6, line: 163, baseType: !2680, size: 32, offset: 64)
!3401 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !3367, file: !6, line: 168, baseType: !3402, size: 64, offset: 448)
!3402 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3403, size: 64)
!3403 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !6, line: 67, size: 320, elements: !3404)
!3404 = !{!3405, !3406, !3407, !3408, !3409}
!3405 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !3403, file: !6, line: 70, baseType: !3402, size: 64)
!3406 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !3403, file: !6, line: 73, baseType: !3366, size: 64, offset: 64)
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !3403, file: !6, line: 78, baseType: !2553, size: 64, offset: 128)
!3408 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !3403, file: !6, line: 85, baseType: !2730, size: 64, offset: 192)
!3409 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3403, file: !6, line: 88, baseType: !2548, size: 32, offset: 256)
!3410 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !3367, file: !6, line: 173, baseType: !2730, size: 64, offset: 512)
!3411 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !3367, file: !6, line: 173, baseType: !2730, size: 64, offset: 576)
!3412 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !3367, file: !6, line: 177, baseType: !2672, size: 8, offset: 640)
!3413 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !3362, file: !6, line: 200, baseType: !3414, size: 64, offset: 64)
!3414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3415, size: 64)
!3415 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !6, line: 185, baseType: !3416)
!3416 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !6, line: 185, size: 128, elements: !3417)
!3417 = !{!3418}
!3418 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3416, file: !6, line: 185, baseType: !3419, size: 128)
!3419 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !6, line: 184, baseType: !3420)
!3420 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !6, line: 184, size: 128, elements: !3421)
!3421 = !{!3422, !3423, !3424}
!3422 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3420, file: !6, line: 184, baseType: !7, size: 32)
!3423 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3420, file: !6, line: 184, baseType: !7, size: 32, offset: 32)
!3424 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3420, file: !6, line: 184, baseType: !3425, size: 64, offset: 64)
!3425 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3365, size: 64, elements: !2653)
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !3362, file: !6, line: 203, baseType: !3427, size: 64, offset: 128)
!3427 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3428, size: 64)
!3428 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !6, line: 189, baseType: !3429)
!3429 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !6, line: 189, size: 128, elements: !3430)
!3430 = !{!3431}
!3431 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3429, file: !6, line: 189, baseType: !3432, size: 128)
!3432 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !6, line: 188, baseType: !3433)
!3433 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !6, line: 188, size: 128, elements: !3434)
!3434 = !{!3435, !3436, !3437}
!3435 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3433, file: !6, line: 188, baseType: !7, size: 32)
!3436 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3433, file: !6, line: 188, baseType: !7, size: 32, offset: 32)
!3437 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3433, file: !6, line: 188, baseType: !3438, size: 64, offset: 64)
!3438 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3439, size: 64, elements: !2653)
!3439 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !6, line: 180, baseType: !3402)
!3440 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !3362, file: !6, line: 207, baseType: !3441, size: 64, offset: 192)
!3441 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !860, line: 144, baseType: !3442)
!3442 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3443, size: 64)
!3443 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !860, line: 100, size: 896, elements: !3444)
!3444 = !{!3445, !3451, !3456, !3461, !3463, !3464, !3465, !3466, !3467, !3468, !3473, !3475, !3476, !3481, !3486}
!3445 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !3443, file: !860, line: 102, baseType: !3446, size: 64)
!3446 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !860, line: 52, baseType: !3447)
!3447 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3448, size: 64)
!3448 = !DISubroutineType(types: !3449)
!3449 = !{!3450, !3241}
!3450 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !860, line: 47, baseType: !7)
!3451 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !3443, file: !860, line: 105, baseType: !3452, size: 64, offset: 64)
!3452 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !860, line: 59, baseType: !3453)
!3453 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3454, size: 64)
!3454 = !DISubroutineType(types: !3455)
!3455 = !{!2548, !3241, !3241}
!3456 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !3443, file: !860, line: 108, baseType: !3457, size: 64, offset: 128)
!3457 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !860, line: 63, baseType: !3458)
!3458 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3459, size: 64)
!3459 = !DISubroutineType(types: !3460)
!3460 = !{null, !2547}
!3461 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !3443, file: !860, line: 111, baseType: !3462, size: 64, offset: 192)
!3462 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2547, size: 64)
!3463 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3443, file: !860, line: 114, baseType: !3027, size: 64, offset: 256)
!3464 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !3443, file: !860, line: 117, baseType: !3027, size: 64, offset: 320)
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !3443, file: !860, line: 120, baseType: !3027, size: 64, offset: 384)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !3443, file: !860, line: 124, baseType: !7, size: 32, offset: 448)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !3443, file: !860, line: 128, baseType: !7, size: 32, offset: 480)
!3468 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !3443, file: !860, line: 131, baseType: !3469, size: 64, offset: 512)
!3469 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !860, line: 75, baseType: !3470)
!3470 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3471, size: 64)
!3471 = !DISubroutineType(types: !3472)
!3472 = !{!2547, !3027, !3027}
!3473 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !3443, file: !860, line: 132, baseType: !3474, size: 64, offset: 576)
!3474 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !860, line: 78, baseType: !3458)
!3475 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !3443, file: !860, line: 135, baseType: !2547, size: 64, offset: 640)
!3476 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !3443, file: !860, line: 136, baseType: !3477, size: 64, offset: 704)
!3477 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !860, line: 82, baseType: !3478)
!3478 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3479, size: 64)
!3479 = !DISubroutineType(types: !3480)
!3480 = !{!2547, !2547, !3027, !3027}
!3481 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !3443, file: !860, line: 137, baseType: !3482, size: 64, offset: 768)
!3482 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !860, line: 83, baseType: !3483)
!3483 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3484, size: 64)
!3484 = !DISubroutineType(types: !3485)
!3485 = !{null, !2547, !2547}
!3486 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !3443, file: !860, line: 141, baseType: !7, size: 32, offset: 832)
!3487 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !3362, file: !6, line: 211, baseType: !3488, size: 64, offset: 256)
!3488 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3489, size: 64)
!3489 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !142, line: 183, baseType: !3490)
!3490 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !142, line: 183, size: 128, elements: !3491)
!3491 = !{!3492}
!3492 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3490, file: !142, line: 183, baseType: !3493, size: 128)
!3493 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !142, line: 182, baseType: !3494)
!3494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !142, line: 182, size: 128, elements: !3495)
!3495 = !{!3496, !3497, !3498}
!3496 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3494, file: !142, line: 182, baseType: !7, size: 32)
!3497 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3494, file: !142, line: 182, baseType: !7, size: 32, offset: 32)
!3498 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3494, file: !142, line: 182, baseType: !2935, size: 64, offset: 64)
!3499 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !3362, file: !6, line: 220, baseType: !3500, size: 64, offset: 320)
!3500 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !6, line: 217, size: 64, elements: !3501)
!3501 = !{!3502, !3503}
!3502 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !3500, file: !6, line: 218, baseType: !3488, size: 64)
!3503 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !3500, file: !6, line: 219, baseType: !3504, size: 64)
!3504 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3505, size: 64)
!3505 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !3506, line: 29, baseType: !3507)
!3506 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3507 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !3506, line: 29, size: 96, elements: !3508)
!3508 = !{!3509}
!3509 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3507, file: !3506, line: 29, baseType: !3510, size: 96)
!3510 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !3506, line: 27, baseType: !3511)
!3511 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !3506, line: 27, size: 96, elements: !3512)
!3512 = !{!3513, !3514, !3515}
!3513 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3511, file: !3506, line: 27, baseType: !7, size: 32)
!3514 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3511, file: !3506, line: 27, baseType: !7, size: 32, offset: 32)
!3515 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3511, file: !3506, line: 27, baseType: !3516, size: 8, offset: 64)
!3516 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3517, size: 8, elements: !2653)
!3517 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !3506, line: 26, baseType: !2672)
!3518 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !3357, file: !3358, line: 467, baseType: !3519, size: 64, offset: 64)
!3519 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3520, size: 64)
!3520 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !382, line: 374, size: 640, elements: !3521)
!3521 = !{!3522, !3524, !3525, !3538, !3539, !3540, !3541, !3542, !3543, !3545, !3547, !3548}
!3522 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !3520, file: !382, line: 377, baseType: !3523, size: 64)
!3523 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !2554, line: 111, baseType: !2846)
!3524 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !3520, file: !382, line: 378, baseType: !3523, size: 64, offset: 64)
!3525 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !3520, file: !382, line: 381, baseType: !3526, size: 64, offset: 128)
!3526 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3527, size: 64)
!3527 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !382, line: 282, baseType: !3528)
!3528 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !382, line: 282, size: 128, elements: !3529)
!3529 = !{!3530}
!3530 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3528, file: !382, line: 282, baseType: !3531, size: 128)
!3531 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !382, line: 281, baseType: !3532)
!3532 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !382, line: 281, size: 128, elements: !3533)
!3533 = !{!3534, !3535, !3536}
!3534 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3532, file: !382, line: 281, baseType: !7, size: 32)
!3535 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3532, file: !382, line: 281, baseType: !7, size: 32, offset: 32)
!3536 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3532, file: !382, line: 281, baseType: !3537, size: 64, offset: 64)
!3537 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3523, size: 64, elements: !2653)
!3538 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !3520, file: !382, line: 384, baseType: !2548, size: 32, offset: 192)
!3539 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !3520, file: !382, line: 387, baseType: !2548, size: 32, offset: 224)
!3540 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !3520, file: !382, line: 390, baseType: !2548, size: 32, offset: 256)
!3541 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !3520, file: !382, line: 394, baseType: !3526, size: 64, offset: 320)
!3542 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !3520, file: !382, line: 396, baseType: !381, size: 32, offset: 384)
!3543 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !3520, file: !382, line: 399, baseType: !3544, size: 64, offset: 416)
!3544 = !DICompositeType(tag: DW_TAG_array_type, baseType: !387, size: 64, elements: !2800)
!3545 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !3520, file: !382, line: 402, baseType: !3546, size: 64, offset: 480)
!3546 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !2800)
!3547 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !3520, file: !382, line: 406, baseType: !2548, size: 32, offset: 544)
!3548 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !3520, file: !382, line: 409, baseType: !2548, size: 32, offset: 576)
!3549 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !3357, file: !3358, line: 470, baseType: !2873, size: 64, offset: 128)
!3550 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !3357, file: !3358, line: 473, baseType: !3551, size: 64, offset: 192)
!3551 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3552, size: 64)
!3552 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !3308, line: 39, size: 1152, elements: !3553)
!3553 = !{!3554, !3555, !3568, !3569, !3570, !3582, !3583, !3587, !3588, !3589, !3590, !3591}
!3554 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !3552, file: !3308, line: 41, baseType: !3441, size: 64)
!3555 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !3552, file: !3308, line: 48, baseType: !3556, size: 64, offset: 64)
!3556 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3557, size: 64)
!3557 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !581, line: 35, baseType: !3558)
!3558 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !581, line: 35, size: 128, elements: !3559)
!3559 = !{!3560}
!3560 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3558, file: !581, line: 35, baseType: !3561, size: 128)
!3561 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !581, line: 33, baseType: !3562)
!3562 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !581, line: 33, size: 128, elements: !3563)
!3563 = !{!3564, !3565, !3566}
!3564 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3562, file: !581, line: 33, baseType: !7, size: 32)
!3565 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3562, file: !581, line: 33, baseType: !7, size: 32, offset: 32)
!3566 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3562, file: !581, line: 33, baseType: !3567, size: 64, offset: 64)
!3567 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2882, size: 64, elements: !2653)
!3568 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !3552, file: !3308, line: 51, baseType: !3488, size: 64, offset: 128)
!3569 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !3552, file: !3308, line: 54, baseType: !2553, size: 64, offset: 192)
!3570 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !3552, file: !3308, line: 57, baseType: !3571, size: 128, offset: 256)
!3571 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !3572, line: 31, size: 128, elements: !3573)
!3572 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3573 = !{!3574, !3575, !3576, !3577, !3578, !3579, !3580}
!3574 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !3571, file: !3572, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!3575 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !3571, file: !3572, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!3576 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !3571, file: !3572, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!3577 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !3571, file: !3572, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!3578 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !3571, file: !3572, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!3579 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !3571, file: !3572, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!3580 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !3571, file: !3572, line: 56, baseType: !3581, size: 64, offset: 64)
!3581 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !2554, line: 47, baseType: !2784)
!3582 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !3552, file: !3308, line: 60, baseType: !3571, size: 128, offset: 384)
!3583 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !3552, file: !3308, line: 64, baseType: !3584, size: 64, offset: 512)
!3584 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3585, size: 64)
!3585 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !3586, line: 33, flags: DIFlagFwdDecl)
!3586 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3587 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !3552, file: !3308, line: 67, baseType: !2553, size: 64, offset: 576)
!3588 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !3552, file: !3308, line: 73, baseType: !3441, size: 64, offset: 640)
!3589 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !3552, file: !3308, line: 77, baseType: !3581, size: 64, offset: 704)
!3590 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !3552, file: !3308, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!3591 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !3552, file: !3308, line: 82, baseType: !3592, size: 320, offset: 832)
!3592 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !891, line: 62, size: 320, elements: !3593)
!3593 = !{!3594, !3600, !3601, !3602, !3603, !3604}
!3594 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !3592, file: !891, line: 63, baseType: !3595, size: 64)
!3595 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3596, size: 64)
!3596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !891, line: 56, size: 128, elements: !3597)
!3597 = !{!3598, !3599}
!3598 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3596, file: !891, line: 57, baseType: !3595, size: 64)
!3599 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !3596, file: !891, line: 58, baseType: !2651, size: 8, offset: 64)
!3600 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !3592, file: !891, line: 64, baseType: !7, size: 32, offset: 64)
!3601 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !3592, file: !891, line: 66, baseType: !7, size: 32, offset: 96)
!3602 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !3592, file: !891, line: 68, baseType: !2672, size: 8, offset: 128)
!3603 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !3592, file: !891, line: 70, baseType: !2911, size: 64, offset: 192)
!3604 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !3592, file: !891, line: 71, baseType: !2918, size: 64, offset: 256)
!3605 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !3357, file: !3358, line: 476, baseType: !3606, size: 64, offset: 256)
!3606 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3607, size: 64)
!3607 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !337, line: 187, size: 256, elements: !3608)
!3608 = !{!3609, !3610, !3611, !3612}
!3609 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !3607, file: !337, line: 189, baseType: !2548, size: 32)
!3610 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !3607, file: !337, line: 192, baseType: !3112, size: 64, offset: 64)
!3611 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !3607, file: !337, line: 197, baseType: !3441, size: 64, offset: 128)
!3612 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !3607, file: !337, line: 200, baseType: !3097, size: 64, offset: 192)
!3613 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !3357, file: !3358, line: 479, baseType: !3441, size: 64, offset: 320)
!3614 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3357, file: !3358, line: 484, baseType: !2553, size: 64, offset: 384)
!3615 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !3357, file: !3358, line: 488, baseType: !2553, size: 64, offset: 448)
!3616 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !3357, file: !3358, line: 493, baseType: !2553, size: 64, offset: 512)
!3617 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !3357, file: !3358, line: 496, baseType: !2553, size: 64, offset: 576)
!3618 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !3357, file: !3358, line: 501, baseType: !3619, size: 64, offset: 640)
!3619 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3620, size: 64)
!3620 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !393, line: 2355, size: 576, elements: !3621)
!3621 = !{!3622, !3625, !3626, !3627, !3628, !3630, !3631, !3636, !3637, !3638, !3639, !3640, !3641}
!3622 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !3620, file: !393, line: 2356, baseType: !3623, size: 64)
!3623 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3624, size: 64)
!3624 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !393, line: 2356, flags: DIFlagFwdDecl)
!3625 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !3620, file: !393, line: 2357, baseType: !2756, size: 64, offset: 64)
!3626 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !3620, file: !393, line: 2358, baseType: !2548, size: 32, offset: 128)
!3627 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !3620, file: !393, line: 2359, baseType: !2548, size: 32, offset: 160)
!3628 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !3620, file: !393, line: 2360, baseType: !3629, size: 128, offset: 192)
!3629 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2548, size: 128, elements: !2825)
!3630 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !3620, file: !393, line: 2364, baseType: !2548, size: 32, offset: 320)
!3631 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !3620, file: !393, line: 2367, baseType: !3632, size: 128, offset: 384)
!3632 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !393, line: 2349, size: 128, elements: !3633)
!3633 = !{!3634, !3635}
!3634 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !3632, file: !393, line: 2351, baseType: !2730, size: 64)
!3635 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3632, file: !393, line: 2352, baseType: !2609, size: 64, offset: 64)
!3636 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !3620, file: !393, line: 2371, baseType: !392, size: 32, offset: 512)
!3637 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !3620, file: !393, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!3638 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !3620, file: !393, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!3639 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !3620, file: !393, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!3640 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !3620, file: !393, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!3641 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !3620, file: !393, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!3642 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !3357, file: !3358, line: 504, baseType: !3643, size: 64, offset: 704)
!3643 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3644, size: 64)
!3644 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !3358, line: 504, flags: DIFlagFwdDecl)
!3645 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !3357, file: !3358, line: 507, baseType: !3441, size: 64, offset: 768)
!3646 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !3357, file: !3358, line: 510, baseType: !2548, size: 32, offset: 832)
!3647 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !3357, file: !3358, line: 513, baseType: !2548, size: 32, offset: 864)
!3648 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !3357, file: !3358, line: 516, baseType: !2680, size: 32, offset: 896)
!3649 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !3357, file: !3358, line: 519, baseType: !2680, size: 32, offset: 928)
!3650 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !3357, file: !3358, line: 522, baseType: !7, size: 32, offset: 960)
!3651 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !3357, file: !3358, line: 523, baseType: !7, size: 32, offset: 992)
!3652 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !3357, file: !3358, line: 528, baseType: !2756, size: 64, offset: 1024)
!3653 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !3357, file: !3358, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!3654 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !3357, file: !3358, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!3655 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !3357, file: !3358, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!3656 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !3357, file: !3358, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!3657 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !3357, file: !3358, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!3658 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !3357, file: !3358, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!3659 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !3357, file: !3358, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!3660 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !3357, file: !3358, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!3661 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !3357, file: !3358, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!3662 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !3357, file: !3358, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!3663 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !3357, file: !3358, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!3664 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !3357, file: !3358, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!3665 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !3357, file: !3358, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!3666 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !3357, file: !3358, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!3667 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !3357, file: !3358, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!3668 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !3357, file: !3358, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!3669 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !3352, file: !142, line: 3254, baseType: !2553, size: 64, offset: 1536)
!3670 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !3352, file: !142, line: 3257, baseType: !2553, size: 64, offset: 1600)
!3671 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !3352, file: !142, line: 3258, baseType: !2553, size: 64, offset: 1664)
!3672 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !3352, file: !142, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!3673 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !3352, file: !142, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!3674 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !3352, file: !142, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!3675 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !3352, file: !142, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!3676 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !3352, file: !142, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!3677 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !3352, file: !142, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!3678 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !3352, file: !142, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!3679 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !3352, file: !142, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!3680 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !3352, file: !142, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!3681 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !3352, file: !142, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!3682 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !3352, file: !142, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!3683 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !3352, file: !142, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!3684 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !3352, file: !142, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!3685 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !3352, file: !142, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!3686 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !3352, file: !142, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!3687 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !3352, file: !142, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!3688 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !3352, file: !142, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!3689 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !3352, file: !142, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!3690 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2556, file: !142, line: 3394, baseType: !3691, size: 1344)
!3691 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !142, line: 2279, size: 1344, elements: !3692)
!3692 = !{!3693, !3694, !3695, !3696, !3697, !3698, !3699, !3700, !3701, !3702, !3703, !3704, !3705, !3706, !3707, !3708, !3709, !3710, !3711, !3712, !3713, !3714, !3715, !3716, !3717, !3718, !3726, !3727, !3728, !3729, !3730, !3731, !3732, !3733, !3734}
!3693 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3691, file: !142, line: 2280, baseType: !2592, size: 192)
!3694 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !3691, file: !142, line: 2281, baseType: !2553, size: 64, offset: 192)
!3695 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3691, file: !142, line: 2282, baseType: !2553, size: 64, offset: 256)
!3696 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !3691, file: !142, line: 2283, baseType: !2553, size: 64, offset: 320)
!3697 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !3691, file: !142, line: 2284, baseType: !2553, size: 64, offset: 384)
!3698 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3691, file: !142, line: 2285, baseType: !7, size: 32, offset: 448)
!3699 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !3691, file: !142, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!3700 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !3691, file: !142, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!3701 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !3691, file: !142, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!3702 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !3691, file: !142, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!3703 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !3691, file: !142, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!3704 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !3691, file: !142, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!3705 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3691, file: !142, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!3706 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !3691, file: !142, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!3707 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !3691, file: !142, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!3708 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !3691, file: !142, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!3709 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !3691, file: !142, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!3710 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !3691, file: !142, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!3711 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !3691, file: !142, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!3712 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !3691, file: !142, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!3713 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !3691, file: !142, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!3714 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3691, file: !142, line: 2305, baseType: !7, size: 32, offset: 512)
!3715 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !3691, file: !142, line: 2306, baseType: !3191, size: 32, offset: 544)
!3716 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !3691, file: !142, line: 2307, baseType: !2553, size: 64, offset: 576)
!3717 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !3691, file: !142, line: 2308, baseType: !2553, size: 64, offset: 640)
!3718 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !3691, file: !142, line: 2314, baseType: !3719, size: 64, offset: 704)
!3719 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !142, line: 2309, size: 64, elements: !3720)
!3720 = !{!3721, !3722, !3723}
!3721 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !3719, file: !142, line: 2310, baseType: !2548, size: 32)
!3722 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !3719, file: !142, line: 2311, baseType: !2756, size: 64)
!3723 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !3719, file: !142, line: 2312, baseType: !3724, size: 64)
!3724 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3725, size: 64)
!3725 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !142, line: 2277, flags: DIFlagFwdDecl)
!3726 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3691, file: !142, line: 2315, baseType: !2553, size: 64, offset: 768)
!3727 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !3691, file: !142, line: 2316, baseType: !2553, size: 64, offset: 832)
!3728 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !3691, file: !142, line: 2317, baseType: !2553, size: 64, offset: 896)
!3729 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !3691, file: !142, line: 2318, baseType: !2553, size: 64, offset: 960)
!3730 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !3691, file: !142, line: 2319, baseType: !2553, size: 64, offset: 1024)
!3731 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !3691, file: !142, line: 2320, baseType: !2553, size: 64, offset: 1088)
!3732 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !3691, file: !142, line: 2321, baseType: !2553, size: 64, offset: 1152)
!3733 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !3691, file: !142, line: 2322, baseType: !2553, size: 64, offset: 1216)
!3734 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !3691, file: !142, line: 2324, baseType: !3735, size: 64, offset: 1280)
!3735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3736, size: 64)
!3736 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !142, line: 2324, flags: DIFlagFwdDecl)
!3737 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !2556, file: !142, line: 3395, baseType: !3738, size: 320)
!3738 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !142, line: 1469, size: 320, elements: !3739)
!3739 = !{!3740, !3741, !3742}
!3740 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3738, file: !142, line: 1470, baseType: !2592, size: 192)
!3741 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !3738, file: !142, line: 1471, baseType: !2553, size: 64, offset: 192)
!3742 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3738, file: !142, line: 1472, baseType: !2553, size: 64, offset: 256)
!3743 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2556, file: !142, line: 3396, baseType: !3744, size: 320)
!3744 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !142, line: 1482, size: 320, elements: !3745)
!3745 = !{!3746, !3747, !3748}
!3746 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3744, file: !142, line: 1483, baseType: !2592, size: 192)
!3747 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !3744, file: !142, line: 1484, baseType: !2548, size: 32, offset: 192)
!3748 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !3744, file: !142, line: 1485, baseType: !2935, size: 64, offset: 256)
!3749 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !2556, file: !142, line: 3397, baseType: !3750, size: 384)
!3750 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !142, line: 1829, size: 384, elements: !3751)
!3751 = !{!3752, !3753, !3754, !3755}
!3752 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3750, file: !142, line: 1830, baseType: !2592, size: 192)
!3753 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3750, file: !142, line: 1831, baseType: !2680, size: 32, offset: 192)
!3754 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3750, file: !142, line: 1832, baseType: !2553, size: 64, offset: 256)
!3755 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !3750, file: !142, line: 1835, baseType: !2935, size: 64, offset: 320)
!3756 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2556, file: !142, line: 3398, baseType: !3757, size: 704)
!3757 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !142, line: 1898, size: 704, elements: !3758)
!3758 = !{!3759, !3760, !3761, !3762, !3763, !3768}
!3759 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3757, file: !142, line: 1899, baseType: !2592, size: 192)
!3760 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !3757, file: !142, line: 1902, baseType: !2553, size: 64, offset: 192)
!3761 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !3757, file: !142, line: 1905, baseType: !2882, size: 64, offset: 256)
!3762 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !3757, file: !142, line: 1908, baseType: !7, size: 32, offset: 320)
!3763 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !3757, file: !142, line: 1911, baseType: !3764, size: 64, offset: 384)
!3764 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3765, size: 64)
!3765 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !3308, line: 117, size: 128, elements: !3766)
!3766 = !{!3767}
!3767 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !3765, file: !3308, line: 120, baseType: !3571, size: 128)
!3768 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !3757, file: !142, line: 1914, baseType: !2923, size: 256, offset: 448)
!3769 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2556, file: !142, line: 3399, baseType: !3770, size: 704)
!3770 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !142, line: 2008, size: 704, elements: !3771)
!3771 = !{!3772, !3773, !3774, !3775, !3776, !3777, !3778, !3779, !3780, !3781, !3782}
!3772 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3770, file: !142, line: 2009, baseType: !2592, size: 192)
!3773 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !3770, file: !142, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!3774 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !3770, file: !142, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!3775 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3770, file: !142, line: 2014, baseType: !2680, size: 32, offset: 224)
!3776 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !3770, file: !142, line: 2016, baseType: !2553, size: 64, offset: 256)
!3777 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !3770, file: !142, line: 2017, baseType: !3488, size: 64, offset: 320)
!3778 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !3770, file: !142, line: 2019, baseType: !2553, size: 64, offset: 384)
!3779 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !3770, file: !142, line: 2020, baseType: !2553, size: 64, offset: 448)
!3780 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !3770, file: !142, line: 2021, baseType: !2553, size: 64, offset: 512)
!3781 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !3770, file: !142, line: 2022, baseType: !2553, size: 64, offset: 576)
!3782 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !3770, file: !142, line: 2023, baseType: !2553, size: 64, offset: 640)
!3783 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2556, file: !142, line: 3400, baseType: !3784, size: 832)
!3784 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !142, line: 2430, size: 832, elements: !3785)
!3785 = !{!3786, !3787, !3788, !3789, !3790, !3791, !3792, !3793, !3794, !3795}
!3786 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3784, file: !142, line: 2431, baseType: !2592, size: 192)
!3787 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3784, file: !142, line: 2433, baseType: !2553, size: 64, offset: 192)
!3788 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !3784, file: !142, line: 2434, baseType: !2553, size: 64, offset: 256)
!3789 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !3784, file: !142, line: 2435, baseType: !2553, size: 64, offset: 320)
!3790 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !3784, file: !142, line: 2436, baseType: !2553, size: 64, offset: 384)
!3791 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !3784, file: !142, line: 2437, baseType: !3488, size: 64, offset: 448)
!3792 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !3784, file: !142, line: 2438, baseType: !2553, size: 64, offset: 512)
!3793 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !3784, file: !142, line: 2440, baseType: !2553, size: 64, offset: 576)
!3794 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !3784, file: !142, line: 2441, baseType: !2553, size: 64, offset: 640)
!3795 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !3784, file: !142, line: 2443, baseType: !3796, size: 128, offset: 704)
!3796 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !142, line: 182, baseType: !3797)
!3797 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !142, line: 182, size: 128, elements: !3798)
!3798 = !{!3799}
!3799 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3797, file: !142, line: 182, baseType: !3493, size: 128)
!3800 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !2556, file: !142, line: 3401, baseType: !3801, size: 320)
!3801 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !142, line: 3327, size: 320, elements: !3802)
!3802 = !{!3803, !3804, !3811}
!3803 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3801, file: !142, line: 3329, baseType: !2592, size: 192)
!3804 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !3801, file: !142, line: 3330, baseType: !3805, size: 64, offset: 192)
!3805 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3806, size: 64)
!3806 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !142, line: 3320, size: 192, elements: !3807)
!3807 = !{!3808, !3809, !3810}
!3808 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3806, file: !142, line: 3322, baseType: !3805, size: 64)
!3809 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3806, file: !142, line: 3323, baseType: !3805, size: 64, offset: 64)
!3810 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3806, file: !142, line: 3324, baseType: !2553, size: 64, offset: 128)
!3811 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !3801, file: !142, line: 3331, baseType: !3805, size: 64, offset: 256)
!3812 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !2556, file: !142, line: 3402, baseType: !3813, size: 256)
!3813 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !142, line: 1540, size: 256, elements: !3814)
!3814 = !{!3815, !3816}
!3815 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3813, file: !142, line: 1541, baseType: !2592, size: 192)
!3816 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !3813, file: !142, line: 1542, baseType: !3817, size: 64, offset: 192)
!3817 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3818, size: 64)
!3818 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !142, line: 1538, baseType: !3819)
!3819 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !142, line: 1538, size: 192, elements: !3820)
!3820 = !{!3821}
!3821 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3819, file: !142, line: 1538, baseType: !3822, size: 192)
!3822 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !142, line: 1537, baseType: !3823)
!3823 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !142, line: 1537, size: 192, elements: !3824)
!3824 = !{!3825, !3826, !3827}
!3825 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3823, file: !142, line: 1537, baseType: !7, size: 32)
!3826 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3823, file: !142, line: 1537, baseType: !7, size: 32, offset: 32)
!3827 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3823, file: !142, line: 1537, baseType: !3828, size: 128, offset: 64)
!3828 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3829, size: 128, elements: !2653)
!3829 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !142, line: 1535, baseType: !3830)
!3830 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !142, line: 1532, size: 128, elements: !3831)
!3831 = !{!3832, !3833}
!3832 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3830, file: !142, line: 1533, baseType: !2553, size: 64)
!3833 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3830, file: !142, line: 1534, baseType: !2553, size: 64, offset: 64)
!3834 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !2556, file: !142, line: 3403, baseType: !3835, size: 512)
!3835 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !142, line: 1938, size: 512, elements: !3836)
!3836 = !{!3837, !3838, !3839, !3840, !3846, !3847, !3848}
!3837 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3835, file: !142, line: 1939, baseType: !2592, size: 192)
!3838 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3835, file: !142, line: 1940, baseType: !2680, size: 32, offset: 192)
!3839 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !3835, file: !142, line: 1941, baseType: !349, size: 32, offset: 224)
!3840 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !3835, file: !142, line: 1946, baseType: !3841, size: 32, offset: 256)
!3841 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !142, line: 1942, size: 32, elements: !3842)
!3842 = !{!3843, !3844, !3845}
!3843 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !3841, file: !142, line: 1943, baseType: !367, size: 32)
!3844 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !3841, file: !142, line: 1944, baseType: !374, size: 32)
!3845 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !3841, file: !142, line: 1945, baseType: !141, size: 32)
!3846 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !3835, file: !142, line: 1950, baseType: !2872, size: 64, offset: 320)
!3847 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !3835, file: !142, line: 1951, baseType: !2872, size: 64, offset: 384)
!3848 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !3835, file: !142, line: 1953, baseType: !2935, size: 64, offset: 448)
!3849 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !2556, file: !142, line: 3404, baseType: !3850, size: 1664)
!3850 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !142, line: 3337, size: 1664, elements: !3851)
!3851 = !{!3852, !3853}
!3852 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3850, file: !142, line: 3338, baseType: !2592, size: 192)
!3853 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3850, file: !142, line: 3341, baseType: !3854, size: 1472, offset: 192)
!3854 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1673, line: 410, size: 1472, elements: !3855)
!3855 = !{!3856, !3857, !3858, !3859, !3860, !3861, !3862, !3863, !3864, !3866, !3867, !3868, !3869, !3870, !3871, !3872, !3873, !3874, !3875, !3876, !3877, !3878, !3879, !3880, !3881, !3882, !3883, !3884, !3885, !3886, !3887, !3888, !3889, !3890, !3891, !3892, !3893, !3894, !3895, !3896, !3897, !3898, !3899, !3900, !3901, !3902, !3903, !3904, !3905, !3906, !3907, !3908, !3909, !3910, !3911, !3912, !3913, !3914, !3915, !3916, !3917, !3918, !3919, !3920, !3921, !3922, !3923, !3924, !3925, !3926, !3927, !3928, !3929, !3930, !3931, !3932, !3933, !3934, !3935, !3936, !3937, !3938, !3939, !3940, !3941, !3942, !3943, !3944, !3945, !3946, !3947, !3948, !3949, !3950, !3951, !3952, !3953, !3954, !3955, !3956, !3957, !3958, !3959, !3960, !3961, !3962, !3963, !3964, !3965, !3966, !3967, !3968, !3969, !3970, !3971, !3972, !3973, !3974, !3975, !3976, !3977, !3978, !3979, !3980, !3981, !3982, !3983, !3984, !3985, !3986, !3987, !3988, !3989, !3990, !3991, !3992, !3993, !3994, !3995, !3996, !3997, !3998, !3999, !4000, !4001, !4002, !4003, !4004, !4005, !4006, !4007, !4008, !4009, !4010, !4011, !4012, !4013, !4014, !4015, !4016, !4017, !4018, !4019}
!3856 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !3854, file: !1673, line: 412, baseType: !2548, size: 32)
!3857 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !3854, file: !1673, line: 413, baseType: !2548, size: 32, offset: 32)
!3858 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !3854, file: !1673, line: 414, baseType: !2548, size: 32, offset: 64)
!3859 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !3854, file: !1673, line: 415, baseType: !2548, size: 32, offset: 96)
!3860 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !3854, file: !1673, line: 416, baseType: !2548, size: 32, offset: 128)
!3861 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !3854, file: !1673, line: 417, baseType: !2548, size: 32, offset: 160)
!3862 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !3854, file: !1673, line: 418, baseType: !2672, size: 8, offset: 192)
!3863 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !3854, file: !1673, line: 419, baseType: !2672, size: 8, offset: 200)
!3864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !3854, file: !1673, line: 420, baseType: !3865, size: 8, offset: 208)
!3865 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!3866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !3854, file: !1673, line: 421, baseType: !3865, size: 8, offset: 216)
!3867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !3854, file: !1673, line: 422, baseType: !3865, size: 8, offset: 224)
!3868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !3854, file: !1673, line: 423, baseType: !3865, size: 8, offset: 232)
!3869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !3854, file: !1673, line: 424, baseType: !3865, size: 8, offset: 240)
!3870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !3854, file: !1673, line: 425, baseType: !3865, size: 8, offset: 248)
!3871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !3854, file: !1673, line: 426, baseType: !3865, size: 8, offset: 256)
!3872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !3854, file: !1673, line: 427, baseType: !3865, size: 8, offset: 264)
!3873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !3854, file: !1673, line: 428, baseType: !3865, size: 8, offset: 272)
!3874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !3854, file: !1673, line: 429, baseType: !3865, size: 8, offset: 280)
!3875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !3854, file: !1673, line: 430, baseType: !3865, size: 8, offset: 288)
!3876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !3854, file: !1673, line: 431, baseType: !3865, size: 8, offset: 296)
!3877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !3854, file: !1673, line: 432, baseType: !3865, size: 8, offset: 304)
!3878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !3854, file: !1673, line: 433, baseType: !3865, size: 8, offset: 312)
!3879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !3854, file: !1673, line: 434, baseType: !3865, size: 8, offset: 320)
!3880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !3854, file: !1673, line: 435, baseType: !3865, size: 8, offset: 328)
!3881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !3854, file: !1673, line: 436, baseType: !3865, size: 8, offset: 336)
!3882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !3854, file: !1673, line: 437, baseType: !3865, size: 8, offset: 344)
!3883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !3854, file: !1673, line: 438, baseType: !3865, size: 8, offset: 352)
!3884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !3854, file: !1673, line: 439, baseType: !3865, size: 8, offset: 360)
!3885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !3854, file: !1673, line: 440, baseType: !3865, size: 8, offset: 368)
!3886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !3854, file: !1673, line: 441, baseType: !3865, size: 8, offset: 376)
!3887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !3854, file: !1673, line: 442, baseType: !3865, size: 8, offset: 384)
!3888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !3854, file: !1673, line: 443, baseType: !3865, size: 8, offset: 392)
!3889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !3854, file: !1673, line: 444, baseType: !3865, size: 8, offset: 400)
!3890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !3854, file: !1673, line: 445, baseType: !3865, size: 8, offset: 408)
!3891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !3854, file: !1673, line: 446, baseType: !3865, size: 8, offset: 416)
!3892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !3854, file: !1673, line: 447, baseType: !3865, size: 8, offset: 424)
!3893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !3854, file: !1673, line: 448, baseType: !3865, size: 8, offset: 432)
!3894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !3854, file: !1673, line: 449, baseType: !3865, size: 8, offset: 440)
!3895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !3854, file: !1673, line: 450, baseType: !3865, size: 8, offset: 448)
!3896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !3854, file: !1673, line: 451, baseType: !3865, size: 8, offset: 456)
!3897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !3854, file: !1673, line: 452, baseType: !3865, size: 8, offset: 464)
!3898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !3854, file: !1673, line: 453, baseType: !3865, size: 8, offset: 472)
!3899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !3854, file: !1673, line: 454, baseType: !3865, size: 8, offset: 480)
!3900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !3854, file: !1673, line: 455, baseType: !3865, size: 8, offset: 488)
!3901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !3854, file: !1673, line: 456, baseType: !3865, size: 8, offset: 496)
!3902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !3854, file: !1673, line: 457, baseType: !3865, size: 8, offset: 504)
!3903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !3854, file: !1673, line: 458, baseType: !3865, size: 8, offset: 512)
!3904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !3854, file: !1673, line: 459, baseType: !3865, size: 8, offset: 520)
!3905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !3854, file: !1673, line: 460, baseType: !3865, size: 8, offset: 528)
!3906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !3854, file: !1673, line: 461, baseType: !3865, size: 8, offset: 536)
!3907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !3854, file: !1673, line: 462, baseType: !3865, size: 8, offset: 544)
!3908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !3854, file: !1673, line: 463, baseType: !3865, size: 8, offset: 552)
!3909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !3854, file: !1673, line: 464, baseType: !3865, size: 8, offset: 560)
!3910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !3854, file: !1673, line: 465, baseType: !3865, size: 8, offset: 568)
!3911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !3854, file: !1673, line: 466, baseType: !3865, size: 8, offset: 576)
!3912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !3854, file: !1673, line: 467, baseType: !3865, size: 8, offset: 584)
!3913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !3854, file: !1673, line: 468, baseType: !3865, size: 8, offset: 592)
!3914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !3854, file: !1673, line: 469, baseType: !3865, size: 8, offset: 600)
!3915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !3854, file: !1673, line: 470, baseType: !3865, size: 8, offset: 608)
!3916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !3854, file: !1673, line: 471, baseType: !3865, size: 8, offset: 616)
!3917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !3854, file: !1673, line: 472, baseType: !3865, size: 8, offset: 624)
!3918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !3854, file: !1673, line: 473, baseType: !3865, size: 8, offset: 632)
!3919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !3854, file: !1673, line: 474, baseType: !3865, size: 8, offset: 640)
!3920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !3854, file: !1673, line: 475, baseType: !3865, size: 8, offset: 648)
!3921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !3854, file: !1673, line: 476, baseType: !3865, size: 8, offset: 656)
!3922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !3854, file: !1673, line: 477, baseType: !3865, size: 8, offset: 664)
!3923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !3854, file: !1673, line: 478, baseType: !3865, size: 8, offset: 672)
!3924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !3854, file: !1673, line: 479, baseType: !3865, size: 8, offset: 680)
!3925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !3854, file: !1673, line: 480, baseType: !3865, size: 8, offset: 688)
!3926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !3854, file: !1673, line: 481, baseType: !3865, size: 8, offset: 696)
!3927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !3854, file: !1673, line: 482, baseType: !3865, size: 8, offset: 704)
!3928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !3854, file: !1673, line: 483, baseType: !3865, size: 8, offset: 712)
!3929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !3854, file: !1673, line: 484, baseType: !3865, size: 8, offset: 720)
!3930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !3854, file: !1673, line: 485, baseType: !3865, size: 8, offset: 728)
!3931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !3854, file: !1673, line: 486, baseType: !3865, size: 8, offset: 736)
!3932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !3854, file: !1673, line: 487, baseType: !3865, size: 8, offset: 744)
!3933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !3854, file: !1673, line: 488, baseType: !3865, size: 8, offset: 752)
!3934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !3854, file: !1673, line: 489, baseType: !3865, size: 8, offset: 760)
!3935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !3854, file: !1673, line: 490, baseType: !3865, size: 8, offset: 768)
!3936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !3854, file: !1673, line: 491, baseType: !3865, size: 8, offset: 776)
!3937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !3854, file: !1673, line: 492, baseType: !3865, size: 8, offset: 784)
!3938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !3854, file: !1673, line: 493, baseType: !3865, size: 8, offset: 792)
!3939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !3854, file: !1673, line: 494, baseType: !3865, size: 8, offset: 800)
!3940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !3854, file: !1673, line: 495, baseType: !3865, size: 8, offset: 808)
!3941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !3854, file: !1673, line: 496, baseType: !3865, size: 8, offset: 816)
!3942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !3854, file: !1673, line: 497, baseType: !3865, size: 8, offset: 824)
!3943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !3854, file: !1673, line: 498, baseType: !3865, size: 8, offset: 832)
!3944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !3854, file: !1673, line: 499, baseType: !3865, size: 8, offset: 840)
!3945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !3854, file: !1673, line: 500, baseType: !3865, size: 8, offset: 848)
!3946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !3854, file: !1673, line: 501, baseType: !3865, size: 8, offset: 856)
!3947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !3854, file: !1673, line: 502, baseType: !3865, size: 8, offset: 864)
!3948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !3854, file: !1673, line: 503, baseType: !3865, size: 8, offset: 872)
!3949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !3854, file: !1673, line: 504, baseType: !3865, size: 8, offset: 880)
!3950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !3854, file: !1673, line: 505, baseType: !3865, size: 8, offset: 888)
!3951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !3854, file: !1673, line: 506, baseType: !3865, size: 8, offset: 896)
!3952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !3854, file: !1673, line: 507, baseType: !3865, size: 8, offset: 904)
!3953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !3854, file: !1673, line: 508, baseType: !3865, size: 8, offset: 912)
!3954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !3854, file: !1673, line: 509, baseType: !3865, size: 8, offset: 920)
!3955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !3854, file: !1673, line: 510, baseType: !3865, size: 8, offset: 928)
!3956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !3854, file: !1673, line: 511, baseType: !3865, size: 8, offset: 936)
!3957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !3854, file: !1673, line: 512, baseType: !3865, size: 8, offset: 944)
!3958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !3854, file: !1673, line: 513, baseType: !3865, size: 8, offset: 952)
!3959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !3854, file: !1673, line: 514, baseType: !3865, size: 8, offset: 960)
!3960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !3854, file: !1673, line: 515, baseType: !3865, size: 8, offset: 968)
!3961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !3854, file: !1673, line: 516, baseType: !3865, size: 8, offset: 976)
!3962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !3854, file: !1673, line: 517, baseType: !3865, size: 8, offset: 984)
!3963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !3854, file: !1673, line: 518, baseType: !3865, size: 8, offset: 992)
!3964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !3854, file: !1673, line: 519, baseType: !3865, size: 8, offset: 1000)
!3965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !3854, file: !1673, line: 520, baseType: !3865, size: 8, offset: 1008)
!3966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !3854, file: !1673, line: 521, baseType: !3865, size: 8, offset: 1016)
!3967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !3854, file: !1673, line: 522, baseType: !3865, size: 8, offset: 1024)
!3968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !3854, file: !1673, line: 523, baseType: !3865, size: 8, offset: 1032)
!3969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !3854, file: !1673, line: 524, baseType: !3865, size: 8, offset: 1040)
!3970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !3854, file: !1673, line: 525, baseType: !3865, size: 8, offset: 1048)
!3971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !3854, file: !1673, line: 526, baseType: !3865, size: 8, offset: 1056)
!3972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !3854, file: !1673, line: 527, baseType: !3865, size: 8, offset: 1064)
!3973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !3854, file: !1673, line: 528, baseType: !3865, size: 8, offset: 1072)
!3974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !3854, file: !1673, line: 529, baseType: !3865, size: 8, offset: 1080)
!3975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !3854, file: !1673, line: 530, baseType: !3865, size: 8, offset: 1088)
!3976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !3854, file: !1673, line: 531, baseType: !3865, size: 8, offset: 1096)
!3977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !3854, file: !1673, line: 532, baseType: !3865, size: 8, offset: 1104)
!3978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !3854, file: !1673, line: 533, baseType: !3865, size: 8, offset: 1112)
!3979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !3854, file: !1673, line: 534, baseType: !3865, size: 8, offset: 1120)
!3980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !3854, file: !1673, line: 535, baseType: !3865, size: 8, offset: 1128)
!3981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !3854, file: !1673, line: 536, baseType: !3865, size: 8, offset: 1136)
!3982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !3854, file: !1673, line: 537, baseType: !3865, size: 8, offset: 1144)
!3983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !3854, file: !1673, line: 538, baseType: !3865, size: 8, offset: 1152)
!3984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !3854, file: !1673, line: 539, baseType: !3865, size: 8, offset: 1160)
!3985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !3854, file: !1673, line: 540, baseType: !3865, size: 8, offset: 1168)
!3986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !3854, file: !1673, line: 541, baseType: !3865, size: 8, offset: 1176)
!3987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !3854, file: !1673, line: 542, baseType: !3865, size: 8, offset: 1184)
!3988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !3854, file: !1673, line: 543, baseType: !3865, size: 8, offset: 1192)
!3989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !3854, file: !1673, line: 544, baseType: !3865, size: 8, offset: 1200)
!3990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !3854, file: !1673, line: 545, baseType: !3865, size: 8, offset: 1208)
!3991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !3854, file: !1673, line: 546, baseType: !3865, size: 8, offset: 1216)
!3992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !3854, file: !1673, line: 547, baseType: !3865, size: 8, offset: 1224)
!3993 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !3854, file: !1673, line: 548, baseType: !3865, size: 8, offset: 1232)
!3994 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !3854, file: !1673, line: 549, baseType: !3865, size: 8, offset: 1240)
!3995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !3854, file: !1673, line: 550, baseType: !3865, size: 8, offset: 1248)
!3996 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !3854, file: !1673, line: 551, baseType: !3865, size: 8, offset: 1256)
!3997 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !3854, file: !1673, line: 552, baseType: !3865, size: 8, offset: 1264)
!3998 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !3854, file: !1673, line: 553, baseType: !3865, size: 8, offset: 1272)
!3999 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !3854, file: !1673, line: 554, baseType: !3865, size: 8, offset: 1280)
!4000 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !3854, file: !1673, line: 555, baseType: !3865, size: 8, offset: 1288)
!4001 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !3854, file: !1673, line: 556, baseType: !3865, size: 8, offset: 1296)
!4002 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !3854, file: !1673, line: 557, baseType: !3865, size: 8, offset: 1304)
!4003 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !3854, file: !1673, line: 558, baseType: !3865, size: 8, offset: 1312)
!4004 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !3854, file: !1673, line: 559, baseType: !3865, size: 8, offset: 1320)
!4005 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !3854, file: !1673, line: 560, baseType: !3865, size: 8, offset: 1328)
!4006 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !3854, file: !1673, line: 561, baseType: !3865, size: 8, offset: 1336)
!4007 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !3854, file: !1673, line: 562, baseType: !3865, size: 8, offset: 1344)
!4008 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !3854, file: !1673, line: 563, baseType: !3865, size: 8, offset: 1352)
!4009 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !3854, file: !1673, line: 564, baseType: !3865, size: 8, offset: 1360)
!4010 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !3854, file: !1673, line: 565, baseType: !3865, size: 8, offset: 1368)
!4011 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !3854, file: !1673, line: 566, baseType: !3865, size: 8, offset: 1376)
!4012 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !3854, file: !1673, line: 567, baseType: !3865, size: 8, offset: 1384)
!4013 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !3854, file: !1673, line: 568, baseType: !3865, size: 8, offset: 1392)
!4014 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !3854, file: !1673, line: 569, baseType: !3865, size: 8, offset: 1400)
!4015 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !3854, file: !1673, line: 570, baseType: !3865, size: 8, offset: 1408)
!4016 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !3854, file: !1673, line: 571, baseType: !3865, size: 8, offset: 1416)
!4017 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !3854, file: !1673, line: 572, baseType: !3865, size: 8, offset: 1424)
!4018 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !3854, file: !1673, line: 573, baseType: !3865, size: 8, offset: 1432)
!4019 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !3854, file: !1673, line: 574, baseType: !3865, size: 8, offset: 1440)
!4020 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !2556, file: !142, line: 3405, baseType: !4021, size: 384)
!4021 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !142, line: 3352, size: 384, elements: !4022)
!4022 = !{!4023, !4024}
!4023 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4021, file: !142, line: 3353, baseType: !2592, size: 192)
!4024 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !4021, file: !142, line: 3356, baseType: !4025, size: 192, offset: 192)
!4025 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1673, line: 578, size: 192, elements: !4026)
!4026 = !{!4027, !4028, !4029, !4030, !4031, !4032, !4033, !4034, !4035, !4036, !4037}
!4027 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !4025, file: !1673, line: 580, baseType: !2548, size: 32)
!4028 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !4025, file: !1673, line: 581, baseType: !2548, size: 32, offset: 32)
!4029 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !4025, file: !1673, line: 582, baseType: !2548, size: 32, offset: 64)
!4030 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !4025, file: !1673, line: 583, baseType: !2548, size: 32, offset: 96)
!4031 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !4025, file: !1673, line: 584, baseType: !2672, size: 8, offset: 128)
!4032 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !4025, file: !1673, line: 585, baseType: !2672, size: 8, offset: 136)
!4033 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !4025, file: !1673, line: 586, baseType: !2672, size: 8, offset: 144)
!4034 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !4025, file: !1673, line: 587, baseType: !2672, size: 8, offset: 152)
!4035 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !4025, file: !1673, line: 588, baseType: !2672, size: 8, offset: 160)
!4036 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !4025, file: !1673, line: 589, baseType: !2672, size: 8, offset: 168)
!4037 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !4025, file: !1673, line: 590, baseType: !2672, size: 8, offset: 176)
!4038 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2550, file: !3, line: 1055, baseType: !2672, size: 8, offset: 64)
!4039 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3523, size: 64)
!4040 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2548, size: 64)
!4041 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!4042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4043, size: 64)
!4043 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2556)
!4044 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4045, size: 64)
!4045 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4046)
!4046 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "locus_discrim_map", file: !3, line: 86, size: 64, elements: !4047)
!4047 = !{!4048, !4049}
!4048 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !4046, file: !3, line: 88, baseType: !2680, size: 32)
!4049 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !4046, file: !3, line: 89, baseType: !2548, size: 32, offset: 32)
!4050 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4051, size: 64)
!4051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4046, size: 64)
!4052 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !891, line: 30, baseType: !4053)
!4053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4054, size: 64)
!4054 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !142, line: 1893, baseType: !2923)
!4055 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2985, size: 64)
!4056 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4057, size: 64)
!4057 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2884)
!4058 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4059, size: 64)
!4059 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !3506, line: 32, baseType: !4060)
!4060 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !3506, line: 32, size: 96, elements: !4061)
!4061 = !{!4062}
!4062 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4060, file: !3506, line: 32, baseType: !4063, size: 96)
!4063 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !3506, line: 31, baseType: !4064)
!4064 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !3506, line: 31, size: 96, elements: !4065)
!4065 = !{!4066, !4067, !4068}
!4066 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4064, file: !3506, line: 31, baseType: !7, size: 32)
!4067 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4064, file: !3506, line: 31, baseType: !7, size: 32, offset: 32)
!4068 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4064, file: !3506, line: 31, baseType: !4069, size: 32, offset: 64)
!4069 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2548, size: 32, elements: !2653)
!4070 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4071, size: 64)
!4071 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "walk_stmt_info", file: !581, line: 4652, size: 448, elements: !4072)
!4072 = !{!4073, !4080, !4081, !4084, !4085, !4086, !4087, !4088}
!4073 = !DIDerivedType(tag: DW_TAG_member, name: "gsi", scope: !4071, file: !581, line: 4655, baseType: !4074, size: 192)
!4074 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !581, line: 265, baseType: !4075)
!4075 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !581, line: 254, size: 192, elements: !4076)
!4076 = !{!4077, !4078, !4079}
!4077 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4075, file: !581, line: 257, baseType: !2877, size: 64)
!4078 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !4075, file: !581, line: 263, baseType: !2872, size: 64, offset: 64)
!4079 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !4075, file: !581, line: 264, baseType: !3523, size: 64, offset: 128)
!4080 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !4071, file: !581, line: 4659, baseType: !2547, size: 64, offset: 192)
!4081 = !DIDerivedType(tag: DW_TAG_member, name: "pset", scope: !4071, file: !581, line: 4664, baseType: !4082, size: 64, offset: 256)
!4082 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4083, size: 64)
!4083 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_set_t", file: !142, line: 5199, flags: DIFlagFwdDecl)
!4084 = !DIDerivedType(tag: DW_TAG_member, name: "val_only", scope: !4071, file: !581, line: 4678, baseType: !2672, size: 8, offset: 320)
!4085 = !DIDerivedType(tag: DW_TAG_member, name: "is_lhs", scope: !4071, file: !581, line: 4681, baseType: !2672, size: 8, offset: 328)
!4086 = !DIDerivedType(tag: DW_TAG_member, name: "changed", scope: !4071, file: !581, line: 4685, baseType: !2672, size: 8, offset: 336)
!4087 = !DIDerivedType(tag: DW_TAG_member, name: "want_locations", scope: !4071, file: !581, line: 4688, baseType: !2672, size: 8, offset: 344)
!4088 = !DIDerivedType(tag: DW_TAG_member, name: "callback_result", scope: !4071, file: !581, line: 4694, baseType: !2553, size: 64, offset: 384)
!4089 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4090, size: 64)
!4090 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "throw_stmt_node", file: !6, line: 344, size: 128, elements: !4091)
!4091 = !{!4092, !4093}
!4092 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !4090, file: !6, line: 345, baseType: !2882, size: 64)
!4093 = !DIDerivedType(tag: DW_TAG_member, name: "lp_nr", scope: !4090, file: !6, line: 346, baseType: !2548, size: 32, offset: 64)
!4094 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4095, size: 64)
!4095 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_heap", file: !382, line: 283, baseType: !4096)
!4096 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_heap", file: !382, line: 283, size: 128, elements: !4097)
!4097 = !{!4098}
!4098 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4096, file: !382, line: 283, baseType: !3531, size: 128)
!4099 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4100, size: 64)
!4100 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_map", file: !142, line: 5278, size: 192, elements: !4101)
!4101 = !{!4102, !4106, !4107}
!4102 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4100, file: !142, line: 5279, baseType: !4103, size: 64)
!4103 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_map_base", file: !142, line: 5267, size: 64, elements: !4104)
!4104 = !{!4105}
!4105 = !DIDerivedType(tag: DW_TAG_member, name: "from", scope: !4103, file: !142, line: 5268, baseType: !2553, size: 64)
!4106 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !4100, file: !142, line: 5280, baseType: !7, size: 32, offset: 64)
!4107 = !DIDerivedType(tag: DW_TAG_member, name: "to", scope: !4100, file: !142, line: 5281, baseType: !2553, size: 64, offset: 128)
!4108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4109, size: 64)
!4109 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "move_stmt_d", file: !3, line: 5473, size: 512, elements: !4110)
!4110 = !{!4111, !4112, !4113, !4114, !4115, !4116, !4117, !4118}
!4111 = !DIDerivedType(tag: DW_TAG_member, name: "orig_block", scope: !4109, file: !3, line: 5475, baseType: !2553, size: 64)
!4112 = !DIDerivedType(tag: DW_TAG_member, name: "new_block", scope: !4109, file: !3, line: 5476, baseType: !2553, size: 64, offset: 64)
!4113 = !DIDerivedType(tag: DW_TAG_member, name: "from_context", scope: !4109, file: !3, line: 5477, baseType: !2553, size: 64, offset: 128)
!4114 = !DIDerivedType(tag: DW_TAG_member, name: "to_context", scope: !4109, file: !3, line: 5478, baseType: !2553, size: 64, offset: 192)
!4115 = !DIDerivedType(tag: DW_TAG_member, name: "vars_map", scope: !4109, file: !3, line: 5479, baseType: !3584, size: 64, offset: 256)
!4116 = !DIDerivedType(tag: DW_TAG_member, name: "new_label_map", scope: !4109, file: !3, line: 5480, baseType: !3441, size: 64, offset: 320)
!4117 = !DIDerivedType(tag: DW_TAG_member, name: "eh_map", scope: !4109, file: !3, line: 5481, baseType: !3584, size: 64, offset: 384)
!4118 = !DIDerivedType(tag: DW_TAG_member, name: "remap_decls_p", scope: !4109, file: !3, line: 5482, baseType: !2672, size: 8, offset: 448)
!4119 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !891, line: 27, baseType: !2916)
!4120 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4121, size: 64)
!4121 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2847)
!4122 = !{!4123, !0, !4126, !4183, !4305, !4333, !4335, !4337, !4339, !4341, !4346, !4348, !4350, !4352}
!4123 = !DIGlobalVariableExpression(var: !4124, expr: !DIExpression(DW_OP_constu, 20, DW_OP_stack_value))
!4124 = distinct !DIGlobalVariable(name: "initial_cfg_capacity", scope: !2, file: !3, line: 57, type: !4125, isLocal: true, isDefinition: true)
!4125 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2548)
!4126 = !DIGlobalVariableExpression(var: !4127, expr: !DIExpression())
!4127 = distinct !DIGlobalVariable(name: "max_num_merged_labels", scope: !4128, file: !3, line: 2038, type: !2609, isLocal: true, isDefinition: true)
!4128 = distinct !DISubprogram(name: "dump_cfg_stats", scope: !3, file: !3, line: 2036, type: !4129, scopeLine: 2037, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4129 = !DISubroutineType(types: !4130)
!4130 = !{null, !4131}
!4131 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4132, size: 64)
!4132 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4133, line: 7, baseType: !4134)
!4133 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!4134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4135, line: 49, size: 1728, elements: !4136)
!4135 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!4136 = !{!4137, !4138, !4139, !4140, !4141, !4142, !4143, !4144, !4145, !4146, !4147, !4148, !4149, !4152, !4154, !4155, !4156, !4159, !4161, !4162, !4163, !4166, !4168, !4171, !4174, !4175, !4176, !4177, !4178}
!4137 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4134, file: !4135, line: 51, baseType: !2548, size: 32)
!4138 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4134, file: !4135, line: 54, baseType: !2821, size: 64, offset: 64)
!4139 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4134, file: !4135, line: 55, baseType: !2821, size: 64, offset: 128)
!4140 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4134, file: !4135, line: 56, baseType: !2821, size: 64, offset: 192)
!4141 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4134, file: !4135, line: 57, baseType: !2821, size: 64, offset: 256)
!4142 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4134, file: !4135, line: 58, baseType: !2821, size: 64, offset: 320)
!4143 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4134, file: !4135, line: 59, baseType: !2821, size: 64, offset: 384)
!4144 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4134, file: !4135, line: 60, baseType: !2821, size: 64, offset: 448)
!4145 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4134, file: !4135, line: 61, baseType: !2821, size: 64, offset: 512)
!4146 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4134, file: !4135, line: 64, baseType: !2821, size: 64, offset: 576)
!4147 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4134, file: !4135, line: 65, baseType: !2821, size: 64, offset: 640)
!4148 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4134, file: !4135, line: 66, baseType: !2821, size: 64, offset: 704)
!4149 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4134, file: !4135, line: 68, baseType: !4150, size: 64, offset: 768)
!4150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4151, size: 64)
!4151 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !4135, line: 36, flags: DIFlagFwdDecl)
!4152 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4134, file: !4135, line: 70, baseType: !4153, size: 64, offset: 832)
!4153 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4134, size: 64)
!4154 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4134, file: !4135, line: 72, baseType: !2548, size: 32, offset: 896)
!4155 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4134, file: !4135, line: 73, baseType: !2548, size: 32, offset: 928)
!4156 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4134, file: !4135, line: 74, baseType: !4157, size: 64, offset: 960)
!4157 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !4158, line: 152, baseType: !2609)
!4158 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!4159 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4134, file: !4135, line: 77, baseType: !4160, size: 16, offset: 1024)
!4160 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!4161 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4134, file: !4135, line: 78, baseType: !3865, size: 8, offset: 1040)
!4162 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4134, file: !4135, line: 79, baseType: !2651, size: 8, offset: 1048)
!4163 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4134, file: !4135, line: 81, baseType: !4164, size: 64, offset: 1088)
!4164 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4165, size: 64)
!4165 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !4135, line: 43, baseType: null)
!4166 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4134, file: !4135, line: 89, baseType: !4167, size: 64, offset: 1152)
!4167 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !4158, line: 153, baseType: !2609)
!4168 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4134, file: !4135, line: 91, baseType: !4169, size: 64, offset: 1216)
!4169 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4170, size: 64)
!4170 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !4135, line: 37, flags: DIFlagFwdDecl)
!4171 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4134, file: !4135, line: 92, baseType: !4172, size: 64, offset: 1280)
!4172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4173, size: 64)
!4173 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !4135, line: 38, flags: DIFlagFwdDecl)
!4174 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4134, file: !4135, line: 93, baseType: !4153, size: 64, offset: 1344)
!4175 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4134, file: !4135, line: 94, baseType: !2547, size: 64, offset: 1408)
!4176 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4134, file: !4135, line: 95, baseType: !3027, size: 64, offset: 1472)
!4177 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4134, file: !4135, line: 96, baseType: !2548, size: 32, offset: 1536)
!4178 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4134, file: !4135, line: 98, baseType: !4179, size: 160, offset: 1568)
!4179 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2652, size: 160, elements: !4180)
!4180 = !{!4181}
!4181 = !DISubrange(count: 20)
!4182 = !{}
!4183 = !DIGlobalVariableExpression(var: !4184, expr: !DIExpression())
!4184 = distinct !DIGlobalVariable(name: "gimple_cfg_hooks", scope: !2, file: !3, line: 6944, type: !4185, isLocal: false, isDefinition: true)
!4185 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cfg_hooks", file: !4186, line: 25, size: 1856, elements: !4187)
!4186 = !DIFile(filename: "./cfghooks.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4187 = !{!4188, !4189, !4193, !4197, !4201, !4205, !4209, !4216, !4220, !4224, !4228, !4229, !4233, !4237, !4242, !4246, !4250, !4254, !4258, !4259, !4263, !4264, !4279, !4280, !4281, !4291, !4295, !4299, !4304}
!4188 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !4185, file: !4186, line: 28, baseType: !2756, size: 64)
!4189 = !DIDerivedType(tag: DW_TAG_member, name: "verify_flow_info", scope: !4185, file: !4186, line: 31, baseType: !4190, size: 64, offset: 64)
!4190 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4191, size: 64)
!4191 = !DISubroutineType(types: !4192)
!4192 = !{!2548}
!4193 = !DIDerivedType(tag: DW_TAG_member, name: "dump_bb", scope: !4185, file: !4186, line: 32, baseType: !4194, size: 64, offset: 128)
!4194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4195, size: 64)
!4195 = !DISubroutineType(types: !4196)
!4196 = !{null, !3523, !4131, !2548, !2548}
!4197 = !DIDerivedType(tag: DW_TAG_member, name: "create_basic_block", scope: !4185, file: !4186, line: 37, baseType: !4198, size: 64, offset: 192)
!4198 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4199, size: 64)
!4199 = !DISubroutineType(types: !4200)
!4200 = !{!3523, !2547, !2547, !3523}
!4201 = !DIDerivedType(tag: DW_TAG_member, name: "redirect_edge_and_branch", scope: !4185, file: !4186, line: 43, baseType: !4202, size: 64, offset: 256)
!4202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4203, size: 64)
!4203 = !DISubroutineType(types: !4204)
!4204 = !{!2862, !2862, !3523}
!4205 = !DIDerivedType(tag: DW_TAG_member, name: "redirect_edge_and_branch_force", scope: !4185, file: !4186, line: 48, baseType: !4206, size: 64, offset: 320)
!4206 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4207, size: 64)
!4207 = !DISubroutineType(types: !4208)
!4208 = !{!3523, !2862, !3523}
!4209 = !DIDerivedType(tag: DW_TAG_member, name: "can_remove_branch_p", scope: !4185, file: !4186, line: 52, baseType: !4210, size: 64, offset: 384)
!4210 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4211, size: 64)
!4211 = !DISubroutineType(types: !4212)
!4212 = !{!2672, !4213}
!4213 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_edge", file: !2554, line: 109, baseType: !4214)
!4214 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4215, size: 64)
!4215 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2864)
!4216 = !DIDerivedType(tag: DW_TAG_member, name: "delete_basic_block", scope: !4185, file: !4186, line: 55, baseType: !4217, size: 64, offset: 448)
!4217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4218, size: 64)
!4218 = !DISubroutineType(types: !4219)
!4219 = !{null, !3523}
!4220 = !DIDerivedType(tag: DW_TAG_member, name: "split_block", scope: !4185, file: !4186, line: 59, baseType: !4221, size: 64, offset: 512)
!4221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4222, size: 64)
!4222 = !DISubroutineType(types: !4223)
!4223 = !{!3523, !3523, !2547}
!4224 = !DIDerivedType(tag: DW_TAG_member, name: "move_block_after", scope: !4185, file: !4186, line: 62, baseType: !4225, size: 64, offset: 576)
!4225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4226, size: 64)
!4226 = !DISubroutineType(types: !4227)
!4227 = !{!2672, !3523, !3523}
!4228 = !DIDerivedType(tag: DW_TAG_member, name: "can_merge_blocks_p", scope: !4185, file: !4186, line: 65, baseType: !4225, size: 64, offset: 640)
!4229 = !DIDerivedType(tag: DW_TAG_member, name: "merge_blocks", scope: !4185, file: !4186, line: 68, baseType: !4230, size: 64, offset: 704)
!4230 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4231, size: 64)
!4231 = !DISubroutineType(types: !4232)
!4232 = !{null, !3523, !3523}
!4233 = !DIDerivedType(tag: DW_TAG_member, name: "predict_edge", scope: !4185, file: !4186, line: 71, baseType: !4234, size: 64, offset: 768)
!4234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4235, size: 64)
!4235 = !DISubroutineType(types: !4236)
!4236 = !{null, !2862, !813, !2548}
!4237 = !DIDerivedType(tag: DW_TAG_member, name: "predicted_by_p", scope: !4185, file: !4186, line: 75, baseType: !4238, size: 64, offset: 832)
!4238 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4239, size: 64)
!4239 = !DISubroutineType(types: !4240)
!4240 = !{!2672, !4241, !813}
!4241 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !2554, line: 112, baseType: !4120)
!4242 = !DIDerivedType(tag: DW_TAG_member, name: "can_duplicate_block_p", scope: !4185, file: !4186, line: 78, baseType: !4243, size: 64, offset: 896)
!4243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4244, size: 64)
!4244 = !DISubroutineType(types: !4245)
!4245 = !{!2672, !4241}
!4246 = !DIDerivedType(tag: DW_TAG_member, name: "duplicate_block", scope: !4185, file: !4186, line: 81, baseType: !4247, size: 64, offset: 960)
!4247 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4248, size: 64)
!4248 = !DISubroutineType(types: !4249)
!4249 = !{!3523, !3523}
!4250 = !DIDerivedType(tag: DW_TAG_member, name: "split_edge", scope: !4185, file: !4186, line: 85, baseType: !4251, size: 64, offset: 1024)
!4251 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4252, size: 64)
!4252 = !DISubroutineType(types: !4253)
!4253 = !{!3523, !2862}
!4254 = !DIDerivedType(tag: DW_TAG_member, name: "make_forwarder_block", scope: !4185, file: !4186, line: 86, baseType: !4255, size: 64, offset: 1088)
!4255 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4256, size: 64)
!4256 = !DISubroutineType(types: !4257)
!4257 = !{null, !2862}
!4258 = !DIDerivedType(tag: DW_TAG_member, name: "tidy_fallthru_edge", scope: !4185, file: !4186, line: 89, baseType: !4255, size: 64, offset: 1152)
!4259 = !DIDerivedType(tag: DW_TAG_member, name: "block_ends_with_call_p", scope: !4185, file: !4186, line: 93, baseType: !4260, size: 64, offset: 1216)
!4260 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4261, size: 64)
!4261 = !DISubroutineType(types: !4262)
!4262 = !{!2672, !3523}
!4263 = !DIDerivedType(tag: DW_TAG_member, name: "block_ends_with_condjump_p", scope: !4185, file: !4186, line: 97, baseType: !4243, size: 64, offset: 1280)
!4264 = !DIDerivedType(tag: DW_TAG_member, name: "flow_call_edges_add", scope: !4185, file: !4186, line: 106, baseType: !4265, size: 64, offset: 1344)
!4265 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4266, size: 64)
!4266 = !DISubroutineType(types: !4267)
!4267 = !{!2548, !4268}
!4268 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !4269, line: 45, baseType: !4270)
!4269 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4270 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4271, size: 64)
!4271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !4269, line: 39, size: 192, elements: !4272)
!4272 = !{!4273, !4275, !4276, !4277}
!4273 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !4271, file: !4269, line: 41, baseType: !4274, size: 64)
!4274 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2672, size: 64)
!4275 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !4271, file: !4269, line: 42, baseType: !7, size: 32, offset: 64)
!4276 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4271, file: !4269, line: 43, baseType: !7, size: 32, offset: 96)
!4277 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !4271, file: !4269, line: 44, baseType: !4278, size: 64, offset: 128)
!4278 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2607, size: 64, elements: !2653)
!4279 = !DIDerivedType(tag: DW_TAG_member, name: "execute_on_growing_pred", scope: !4185, file: !4186, line: 110, baseType: !4255, size: 64, offset: 1408)
!4280 = !DIDerivedType(tag: DW_TAG_member, name: "execute_on_shrinking_pred", scope: !4185, file: !4186, line: 114, baseType: !4255, size: 64, offset: 1472)
!4281 = !DIDerivedType(tag: DW_TAG_member, name: "cfg_hook_duplicate_loop_to_header_edge", scope: !4185, file: !4186, line: 118, baseType: !4282, size: 64, offset: 1536)
!4282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4283, size: 64)
!4283 = !DISubroutineType(types: !4284)
!4284 = !{!2672, !3097, !2862, !7, !4268, !2862, !4285, !2548}
!4285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4286, size: 64)
!4286 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4287, size: 64)
!4287 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_heap", file: !382, line: 152, baseType: !4288)
!4288 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_heap", file: !382, line: 152, size: 128, elements: !4289)
!4289 = !{!4290}
!4290 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4288, file: !382, line: 152, baseType: !2855, size: 128)
!4291 = !DIDerivedType(tag: DW_TAG_member, name: "lv_add_condition_to_bb", scope: !4185, file: !4186, line: 125, baseType: !4292, size: 64, offset: 1600)
!4292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4293, size: 64)
!4293 = !DISubroutineType(types: !4294)
!4294 = !{null, !3523, !3523, !3523, !2547}
!4295 = !DIDerivedType(tag: DW_TAG_member, name: "lv_adjust_loop_header_phi", scope: !4185, file: !4186, line: 128, baseType: !4296, size: 64, offset: 1664)
!4296 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4297, size: 64)
!4297 = !DISubroutineType(types: !4298)
!4298 = !{null, !3523, !3523, !3523, !2862}
!4299 = !DIDerivedType(tag: DW_TAG_member, name: "extract_cond_bb_edges", scope: !4185, file: !4186, line: 133, baseType: !4300, size: 64, offset: 1728)
!4300 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4301, size: 64)
!4301 = !DISubroutineType(types: !4302)
!4302 = !{null, !3523, !4303, !4303}
!4303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2862, size: 64)
!4304 = !DIDerivedType(tag: DW_TAG_member, name: "flush_pending_stmts", scope: !4185, file: !4186, line: 138, baseType: !4255, size: 64, offset: 1792)
!4305 = !DIGlobalVariableExpression(var: !4306, expr: !DIExpression())
!4306 = distinct !DIGlobalVariable(name: "pass_split_crit_edges", scope: !2, file: !3, line: 7023, type: !4307, isLocal: false, isDefinition: true)
!4307 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_opt_pass", file: !398, line: 156, size: 640, elements: !4308)
!4308 = !{!4309}
!4309 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !4307, file: !398, line: 158, baseType: !4310, size: 640)
!4310 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !398, line: 114, size: 640, elements: !4311)
!4311 = !{!4312, !4313, !4314, !4318, !4322, !4324, !4325, !4326, !4328, !4329, !4330, !4331, !4332}
!4312 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4310, file: !398, line: 117, baseType: !397, size: 32)
!4313 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !4310, file: !398, line: 121, baseType: !2756, size: 64, offset: 64)
!4314 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !4310, file: !398, line: 125, baseType: !4315, size: 64, offset: 128)
!4315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4316, size: 64)
!4316 = !DISubroutineType(types: !4317)
!4317 = !{!2672}
!4318 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !4310, file: !398, line: 130, baseType: !4319, size: 64, offset: 192)
!4319 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4320, size: 64)
!4320 = !DISubroutineType(types: !4321)
!4321 = !{!7}
!4322 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !4310, file: !398, line: 133, baseType: !4323, size: 64, offset: 256)
!4323 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4310, size: 64)
!4324 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4310, file: !398, line: 136, baseType: !4323, size: 64, offset: 320)
!4325 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !4310, file: !398, line: 139, baseType: !2548, size: 32, offset: 384)
!4326 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !4310, file: !398, line: 143, baseType: !4327, size: 32, offset: 416)
!4327 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !405, line: 80, baseType: !404)
!4328 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !4310, file: !398, line: 146, baseType: !7, size: 32, offset: 448)
!4329 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !4310, file: !398, line: 147, baseType: !7, size: 32, offset: 480)
!4330 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !4310, file: !398, line: 148, baseType: !7, size: 32, offset: 512)
!4331 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !4310, file: !398, line: 151, baseType: !7, size: 32, offset: 544)
!4332 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !4310, file: !398, line: 152, baseType: !7, size: 32, offset: 576)
!4333 = !DIGlobalVariableExpression(var: !4334, expr: !DIExpression())
!4334 = distinct !DIGlobalVariable(name: "pass_warn_function_return", scope: !2, file: !3, line: 7172, type: !4307, isLocal: false, isDefinition: true)
!4335 = !DIGlobalVariableExpression(var: !4336, expr: !DIExpression())
!4336 = distinct !DIGlobalVariable(name: "pass_warn_function_noreturn", scope: !2, file: !3, line: 7206, type: !4307, isLocal: false, isDefinition: true)
!4337 = !DIGlobalVariableExpression(var: !4338, expr: !DIExpression())
!4338 = distinct !DIGlobalVariable(name: "pass_warn_unused_result", scope: !2, file: !3, line: 7302, type: !4307, isLocal: false, isDefinition: true)
!4339 = !DIGlobalVariableExpression(var: !4340, expr: !DIExpression())
!4340 = distinct !DIGlobalVariable(name: "edge_to_cases", scope: !2, file: !3, line: 72, type: !3584, isLocal: true, isDefinition: true)
!4341 = !DIGlobalVariableExpression(var: !4342, expr: !DIExpression())
!4342 = distinct !DIGlobalVariable(name: "cfg_stats", scope: !2, file: !3, line: 80, type: !4343, isLocal: true, isDefinition: true)
!4343 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cfg_stats_d", file: !3, line: 75, size: 64, elements: !4344)
!4344 = !{!4345}
!4345 = !DIDerivedType(tag: DW_TAG_member, name: "num_merged_labels", scope: !4343, file: !3, line: 77, baseType: !2609, size: 64)
!4346 = !DIGlobalVariableExpression(var: !4347, expr: !DIExpression())
!4347 = distinct !DIGlobalVariable(name: "label_for_bb", scope: !2, file: !3, line: 1056, type: !2549, isLocal: true, isDefinition: true)
!4348 = !DIGlobalVariableExpression(var: !4349, expr: !DIExpression())
!4349 = distinct !DIGlobalVariable(name: "eh_error_found", scope: !2, file: !3, line: 4034, type: !2672, isLocal: true, isDefinition: true)
!4350 = !DIGlobalVariableExpression(var: !4351, expr: !DIExpression())
!4351 = distinct !DIGlobalVariable(name: "found_computed_goto", scope: !2, file: !3, line: 83, type: !2672, isLocal: true, isDefinition: true)
!4352 = !DIGlobalVariableExpression(var: !4353, expr: !DIExpression())
!4353 = distinct !DIGlobalVariable(name: "discriminator_per_locus", scope: !2, file: !3, line: 91, type: !3441, isLocal: true, isDefinition: true)
!4354 = !{i32 7, !"Dwarf Version", i32 4}
!4355 = !{i32 2, !"Debug Info Version", i32 3}
!4356 = !{i32 1, !"wchar_size", i32 4}
!4357 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!4358 = distinct !DISubprogram(name: "init_empty_tree_cfg_for_function", scope: !3, file: !3, line: 127, type: !4359, scopeLine: 128, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4359 = !DISubroutineType(types: !4360)
!4360 = !{null, !3356}
!4361 = !DILocalVariable(name: "fn", arg: 1, scope: !4358, file: !3, line: 127, type: !3356)
!4362 = !DILocation(line: 127, column: 52, scope: !4358)
!4363 = !DILocation(line: 130, column: 14, scope: !4358)
!4364 = !DILocation(line: 130, column: 3, scope: !4358)
!4365 = !DILocation(line: 131, column: 3, scope: !4358)
!4366 = !DILocation(line: 131, column: 36, scope: !4358)
!4367 = !DILocation(line: 132, column: 3, scope: !4358)
!4368 = !DILocation(line: 132, column: 36, scope: !4358)
!4369 = !DILocation(line: 133, column: 3, scope: !4358)
!4370 = !DILocation(line: 133, column: 38, scope: !4358)
!4371 = !DILocation(line: 135, column: 7, scope: !4358)
!4372 = !DILocation(line: 134, column: 3, scope: !4358)
!4373 = !DILocation(line: 135, column: 5, scope: !4358)
!4374 = !DILocation(line: 136, column: 3, scope: !4358)
!4375 = !DILocation(line: 142, column: 7, scope: !4358)
!4376 = !DILocation(line: 141, column: 3, scope: !4358)
!4377 = !DILocation(line: 142, column: 5, scope: !4358)
!4378 = !DILocation(line: 143, column: 3, scope: !4358)
!4379 = !DILocation(line: 147, column: 3, scope: !4358)
!4380 = !DILocation(line: 149, column: 3, scope: !4358)
!4381 = !DILocation(line: 153, column: 7, scope: !4358)
!4382 = !DILocation(line: 152, column: 3, scope: !4358)
!4383 = !DILocation(line: 152, column: 38, scope: !4358)
!4384 = !DILocation(line: 153, column: 5, scope: !4358)
!4385 = !DILocation(line: 155, column: 7, scope: !4358)
!4386 = !DILocation(line: 154, column: 3, scope: !4358)
!4387 = !DILocation(line: 154, column: 37, scope: !4358)
!4388 = !DILocation(line: 155, column: 5, scope: !4358)
!4389 = !DILocation(line: 156, column: 1, scope: !4358)
!4390 = distinct !DISubprogram(name: "VEC_basic_block_gc_alloc", scope: !382, file: !382, line: 282, type: !4391, scopeLine: 282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4391 = !DISubroutineType(types: !4392)
!4392 = !{!3526, !2548}
!4393 = !DILocalVariable(name: "alloc_", arg: 1, scope: !4390, file: !382, line: 282, type: !2548)
!4394 = !DILocation(line: 282, column: 1, scope: !4390)
!4395 = distinct !DISubprogram(name: "VEC_basic_block_gc_safe_grow_cleared", scope: !382, file: !382, line: 282, type: !4396, scopeLine: 282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4396 = !DISubroutineType(types: !4397)
!4397 = !{null, !4398, !2548}
!4398 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3526, size: 64)
!4399 = !DILocalVariable(name: "vec_", arg: 1, scope: !4395, file: !382, line: 282, type: !4398)
!4400 = !DILocation(line: 282, column: 1, scope: !4395)
!4401 = !DILocalVariable(name: "size_", arg: 2, scope: !4395, file: !382, line: 282, type: !2548)
!4402 = !DILocalVariable(name: "oldsize", scope: !4395, file: !382, line: 282, type: !2548)
!4403 = distinct !DISubprogram(name: "VEC_basic_block_base_replace", scope: !382, file: !382, line: 281, type: !4404, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4404 = !DISubroutineType(types: !4405)
!4405 = !{!3523, !4406, !7, !3523}
!4406 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3531, size: 64)
!4407 = !DILocalVariable(name: "vec_", arg: 1, scope: !4403, file: !382, line: 281, type: !4406)
!4408 = !DILocation(line: 281, column: 1, scope: !4403)
!4409 = !DILocalVariable(name: "ix_", arg: 2, scope: !4403, file: !382, line: 281, type: !7)
!4410 = !DILocalVariable(name: "obj_", arg: 3, scope: !4403, file: !382, line: 281, type: !3523)
!4411 = !DILocalVariable(name: "old_obj_", scope: !4403, file: !382, line: 281, type: !3523)
!4412 = distinct !DISubprogram(name: "init_empty_tree_cfg", scope: !3, file: !3, line: 159, type: !4413, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4413 = !DISubroutineType(types: !4414)
!4414 = !{null}
!4415 = !DILocation(line: 161, column: 37, scope: !4412)
!4416 = !DILocation(line: 161, column: 3, scope: !4412)
!4417 = !DILocation(line: 162, column: 1, scope: !4412)
!4418 = distinct !DISubprogram(name: "execute_build_cfg", scope: !3, file: !3, line: 234, type: !4320, scopeLine: 235, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4419 = !DILocalVariable(name: "body", scope: !4418, file: !3, line: 236, type: !2872)
!4420 = !DILocation(line: 236, column: 14, scope: !4418)
!4421 = !DILocation(line: 236, column: 34, scope: !4418)
!4422 = !DILocation(line: 236, column: 21, scope: !4418)
!4423 = !DILocation(line: 238, column: 21, scope: !4418)
!4424 = !DILocation(line: 238, column: 3, scope: !4418)
!4425 = !DILocation(line: 239, column: 20, scope: !4418)
!4426 = !DILocation(line: 239, column: 3, scope: !4418)
!4427 = !DILocation(line: 240, column: 7, scope: !4428)
!4428 = distinct !DILexicalBlock(scope: !4418, file: !3, line: 240, column: 7)
!4429 = !DILocation(line: 240, column: 17, scope: !4428)
!4430 = !DILocation(line: 240, column: 21, scope: !4428)
!4431 = !DILocation(line: 240, column: 32, scope: !4428)
!4432 = !DILocation(line: 240, column: 7, scope: !4418)
!4433 = !DILocation(line: 242, column: 16, scope: !4434)
!4434 = distinct !DILexicalBlock(scope: !4428, file: !3, line: 241, column: 5)
!4435 = !DILocation(line: 242, column: 7, scope: !4434)
!4436 = !DILocation(line: 243, column: 26, scope: !4434)
!4437 = !DILocation(line: 243, column: 37, scope: !4434)
!4438 = !DILocation(line: 243, column: 7, scope: !4434)
!4439 = !DILocation(line: 244, column: 5, scope: !4434)
!4440 = !DILocation(line: 245, column: 3, scope: !4418)
!4441 = distinct !DISubprogram(name: "fold_cond_expr_cond", scope: !3, file: !3, line: 470, type: !4413, scopeLine: 471, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4442 = !DILocalVariable(name: "bb", scope: !4441, file: !3, line: 472, type: !3523)
!4443 = !DILocation(line: 472, column: 15, scope: !4441)
!4444 = !DILocation(line: 474, column: 3, scope: !4445)
!4445 = distinct !DILexicalBlock(scope: !4441, file: !3, line: 474, column: 3)
!4446 = !DILocation(line: 474, column: 3, scope: !4447)
!4447 = distinct !DILexicalBlock(scope: !4445, file: !3, line: 474, column: 3)
!4448 = !DILocalVariable(name: "stmt", scope: !4449, file: !3, line: 476, type: !2882)
!4449 = distinct !DILexicalBlock(scope: !4447, file: !3, line: 475, column: 5)
!4450 = !DILocation(line: 476, column: 14, scope: !4449)
!4451 = !DILocation(line: 476, column: 32, scope: !4449)
!4452 = !DILocation(line: 476, column: 21, scope: !4449)
!4453 = !DILocation(line: 478, column: 11, scope: !4454)
!4454 = distinct !DILexicalBlock(scope: !4449, file: !3, line: 478, column: 11)
!4455 = !DILocation(line: 478, column: 16, scope: !4454)
!4456 = !DILocation(line: 478, column: 32, scope: !4454)
!4457 = !DILocation(line: 478, column: 19, scope: !4454)
!4458 = !DILocation(line: 478, column: 38, scope: !4454)
!4459 = !DILocation(line: 478, column: 11, scope: !4449)
!4460 = !DILocalVariable(name: "loc", scope: !4461, file: !3, line: 480, type: !2680)
!4461 = distinct !DILexicalBlock(scope: !4454, file: !3, line: 479, column: 2)
!4462 = !DILocation(line: 480, column: 15, scope: !4461)
!4463 = !DILocation(line: 480, column: 38, scope: !4461)
!4464 = !DILocation(line: 480, column: 21, scope: !4461)
!4465 = !DILocalVariable(name: "cond", scope: !4461, file: !3, line: 481, type: !2553)
!4466 = !DILocation(line: 481, column: 9, scope: !4461)
!4467 = !DILocalVariable(name: "zerop", scope: !4461, file: !3, line: 482, type: !2672)
!4468 = !DILocation(line: 482, column: 9, scope: !4461)
!4469 = !DILocalVariable(name: "onep", scope: !4461, file: !3, line: 482, type: !2672)
!4470 = !DILocation(line: 482, column: 16, scope: !4461)
!4471 = !DILocation(line: 484, column: 4, scope: !4461)
!4472 = !DILocation(line: 485, column: 28, scope: !4461)
!4473 = !DILocation(line: 485, column: 51, scope: !4461)
!4474 = !DILocation(line: 485, column: 33, scope: !4461)
!4475 = !DILocation(line: 485, column: 58, scope: !4461)
!4476 = !DILocation(line: 486, column: 27, scope: !4461)
!4477 = !DILocation(line: 486, column: 10, scope: !4461)
!4478 = !DILocation(line: 486, column: 51, scope: !4461)
!4479 = !DILocation(line: 486, column: 34, scope: !4461)
!4480 = !DILocation(line: 485, column: 11, scope: !4461)
!4481 = !DILocation(line: 485, column: 9, scope: !4461)
!4482 = !DILocation(line: 487, column: 8, scope: !4483)
!4483 = distinct !DILexicalBlock(scope: !4461, file: !3, line: 487, column: 8)
!4484 = !DILocation(line: 487, column: 8, scope: !4461)
!4485 = !DILocation(line: 489, column: 31, scope: !4486)
!4486 = distinct !DILexicalBlock(scope: !4483, file: !3, line: 488, column: 6)
!4487 = !DILocation(line: 489, column: 16, scope: !4486)
!4488 = !DILocation(line: 489, column: 14, scope: !4486)
!4489 = !DILocation(line: 490, column: 29, scope: !4486)
!4490 = !DILocation(line: 490, column: 15, scope: !4486)
!4491 = !DILocation(line: 490, column: 13, scope: !4486)
!4492 = !DILocation(line: 491, column: 6, scope: !4486)
!4493 = !DILocation(line: 493, column: 19, scope: !4483)
!4494 = !DILocation(line: 493, column: 12, scope: !4483)
!4495 = !DILocation(line: 495, column: 36, scope: !4461)
!4496 = !DILocation(line: 495, column: 42, scope: !4461)
!4497 = !DILocation(line: 495, column: 45, scope: !4461)
!4498 = !DILocation(line: 496, column: 8, scope: !4461)
!4499 = !DILocation(line: 495, column: 4, scope: !4461)
!4500 = !DILocation(line: 498, column: 8, scope: !4501)
!4501 = distinct !DILexicalBlock(scope: !4461, file: !3, line: 498, column: 8)
!4502 = !DILocation(line: 498, column: 8, scope: !4461)
!4503 = !DILocation(line: 499, column: 30, scope: !4501)
!4504 = !DILocation(line: 499, column: 6, scope: !4501)
!4505 = !DILocation(line: 500, column: 13, scope: !4506)
!4506 = distinct !DILexicalBlock(scope: !4501, file: !3, line: 500, column: 13)
!4507 = !DILocation(line: 500, column: 13, scope: !4501)
!4508 = !DILocation(line: 501, column: 29, scope: !4506)
!4509 = !DILocation(line: 501, column: 6, scope: !4506)
!4510 = !DILocation(line: 502, column: 2, scope: !4461)
!4511 = !DILocation(line: 503, column: 5, scope: !4449)
!4512 = distinct !{!4512, !4444, !4513}
!4513 = !DILocation(line: 503, column: 5, scope: !4445)
!4514 = !DILocation(line: 504, column: 1, scope: !4441)
!4515 = distinct !DISubprogram(name: "last_stmt", scope: !3, file: !3, line: 2363, type: !4516, scopeLine: 2364, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4516 = !DISubroutineType(types: !4517)
!4517 = !{!2882, !3523}
!4518 = !DILocalVariable(name: "bb", arg: 1, scope: !4515, file: !3, line: 2363, type: !3523)
!4519 = !DILocation(line: 2363, column: 24, scope: !4515)
!4520 = !DILocalVariable(name: "i", scope: !4515, file: !3, line: 2365, type: !4074)
!4521 = !DILocation(line: 2365, column: 24, scope: !4515)
!4522 = !DILocation(line: 2365, column: 41, scope: !4515)
!4523 = !DILocation(line: 2365, column: 28, scope: !4515)
!4524 = !DILocalVariable(name: "stmt", scope: !4515, file: !3, line: 2366, type: !2882)
!4525 = !DILocation(line: 2366, column: 10, scope: !4515)
!4526 = !DILocation(line: 2368, column: 3, scope: !4515)
!4527 = !DILocation(line: 2368, column: 11, scope: !4515)
!4528 = !DILocation(line: 2368, column: 25, scope: !4515)
!4529 = !DILocation(line: 2368, column: 53, scope: !4515)
!4530 = !DILocation(line: 2368, column: 51, scope: !4515)
!4531 = !DILocation(line: 2368, column: 28, scope: !4515)
!4532 = !DILocation(line: 0, scope: !4515)
!4533 = !DILocation(line: 2370, column: 7, scope: !4534)
!4534 = distinct !DILexicalBlock(scope: !4515, file: !3, line: 2369, column: 5)
!4535 = !DILocation(line: 2371, column: 12, scope: !4534)
!4536 = distinct !{!4536, !4526, !4537}
!4537 = !DILocation(line: 2372, column: 5, scope: !4515)
!4538 = !DILocation(line: 2373, column: 10, scope: !4515)
!4539 = !DILocation(line: 2373, column: 3, scope: !4515)
!4540 = distinct !DISubprogram(name: "gimple_code", scope: !581, file: !581, line: 1052, type: !4541, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4541 = !DISubroutineType(types: !4542)
!4542 = !{!580, !4543}
!4543 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !2554, line: 60, baseType: !4056)
!4544 = !DILocalVariable(name: "g", arg: 1, scope: !4540, file: !581, line: 1052, type: !4543)
!4545 = !DILocation(line: 1052, column: 27, scope: !4540)
!4546 = !DILocation(line: 1054, column: 10, scope: !4540)
!4547 = !DILocation(line: 1054, column: 13, scope: !4540)
!4548 = !DILocation(line: 1054, column: 20, scope: !4540)
!4549 = !DILocation(line: 1054, column: 3, scope: !4540)
!4550 = distinct !DISubprogram(name: "gimple_location", scope: !581, file: !581, line: 1139, type: !4551, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4551 = !DISubroutineType(types: !4552)
!4552 = !{!2680, !4543}
!4553 = !DILocalVariable(name: "g", arg: 1, scope: !4550, file: !581, line: 1139, type: !4543)
!4554 = !DILocation(line: 1139, column: 31, scope: !4550)
!4555 = !DILocation(line: 1141, column: 10, scope: !4550)
!4556 = !DILocation(line: 1141, column: 13, scope: !4550)
!4557 = !DILocation(line: 1141, column: 20, scope: !4550)
!4558 = !DILocation(line: 1141, column: 3, scope: !4550)
!4559 = distinct !DISubprogram(name: "gimple_cond_code", scope: !581, file: !581, line: 2221, type: !4560, scopeLine: 2222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4560 = !DISubroutineType(types: !4561)
!4561 = !{!141, !4543}
!4562 = !DILocalVariable(name: "gs", arg: 1, scope: !4559, file: !581, line: 2221, type: !4543)
!4563 = !DILocation(line: 2221, column: 32, scope: !4559)
!4564 = !DILocation(line: 2224, column: 27, scope: !4559)
!4565 = !DILocation(line: 2224, column: 31, scope: !4559)
!4566 = !DILocation(line: 2224, column: 38, scope: !4559)
!4567 = !DILocation(line: 2224, column: 3, scope: !4559)
!4568 = distinct !DISubprogram(name: "gimple_cond_lhs", scope: !581, file: !581, line: 2241, type: !4569, scopeLine: 2242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4569 = !DISubroutineType(types: !4570)
!4570 = !{!2553, !4543}
!4571 = !DILocalVariable(name: "gs", arg: 1, scope: !4568, file: !581, line: 2241, type: !4543)
!4572 = !DILocation(line: 2241, column: 31, scope: !4568)
!4573 = !DILocation(line: 2244, column: 21, scope: !4568)
!4574 = !DILocation(line: 2244, column: 10, scope: !4568)
!4575 = !DILocation(line: 2244, column: 3, scope: !4568)
!4576 = distinct !DISubprogram(name: "gimple_cond_rhs", scope: !581, file: !581, line: 2271, type: !4569, scopeLine: 2272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4577 = !DILocalVariable(name: "gs", arg: 1, scope: !4576, file: !581, line: 2271, type: !4543)
!4578 = !DILocation(line: 2271, column: 31, scope: !4576)
!4579 = !DILocation(line: 2274, column: 21, scope: !4576)
!4580 = !DILocation(line: 2274, column: 10, scope: !4576)
!4581 = !DILocation(line: 2274, column: 3, scope: !4576)
!4582 = distinct !DISubprogram(name: "gimple_cond_make_false", scope: !581, file: !581, line: 2346, type: !4583, scopeLine: 2347, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4583 = !DISubroutineType(types: !4584)
!4584 = !{null, !2882}
!4585 = !DILocalVariable(name: "gs", arg: 1, scope: !4582, file: !581, line: 2346, type: !2882)
!4586 = !DILocation(line: 2346, column: 32, scope: !4582)
!4587 = !DILocation(line: 2348, column: 24, scope: !4582)
!4588 = !DILocation(line: 2348, column: 28, scope: !4582)
!4589 = !DILocation(line: 2348, column: 3, scope: !4582)
!4590 = !DILocation(line: 2349, column: 24, scope: !4582)
!4591 = !DILocation(line: 2349, column: 28, scope: !4582)
!4592 = !DILocation(line: 2349, column: 3, scope: !4582)
!4593 = !DILocation(line: 2350, column: 3, scope: !4582)
!4594 = !DILocation(line: 2350, column: 7, scope: !4582)
!4595 = !DILocation(line: 2350, column: 14, scope: !4582)
!4596 = !DILocation(line: 2350, column: 22, scope: !4582)
!4597 = !DILocation(line: 2351, column: 1, scope: !4582)
!4598 = distinct !DISubprogram(name: "gimple_cond_make_true", scope: !581, file: !581, line: 2357, type: !4583, scopeLine: 2358, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4599 = !DILocalVariable(name: "gs", arg: 1, scope: !4598, file: !581, line: 2357, type: !2882)
!4600 = !DILocation(line: 2357, column: 31, scope: !4598)
!4601 = !DILocation(line: 2359, column: 24, scope: !4598)
!4602 = !DILocation(line: 2359, column: 28, scope: !4598)
!4603 = !DILocation(line: 2359, column: 3, scope: !4598)
!4604 = !DILocation(line: 2360, column: 24, scope: !4598)
!4605 = !DILocation(line: 2360, column: 28, scope: !4598)
!4606 = !DILocation(line: 2360, column: 3, scope: !4598)
!4607 = !DILocation(line: 2361, column: 3, scope: !4598)
!4608 = !DILocation(line: 2361, column: 7, scope: !4598)
!4609 = !DILocation(line: 2361, column: 14, scope: !4598)
!4610 = !DILocation(line: 2361, column: 22, scope: !4598)
!4611 = !DILocation(line: 2362, column: 1, scope: !4598)
!4612 = distinct !DISubprogram(name: "start_recording_case_labels", scope: !3, file: !3, line: 847, type: !4413, scopeLine: 848, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4613 = !DILocation(line: 849, column: 3, scope: !4612)
!4614 = !DILocation(line: 850, column: 19, scope: !4612)
!4615 = !DILocation(line: 850, column: 17, scope: !4612)
!4616 = !DILocation(line: 851, column: 1, scope: !4612)
!4617 = distinct !DISubprogram(name: "end_recording_case_labels", scope: !3, file: !3, line: 864, type: !4413, scopeLine: 865, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4618 = !DILocation(line: 866, column: 25, scope: !4617)
!4619 = !DILocation(line: 866, column: 3, scope: !4617)
!4620 = !DILocation(line: 867, column: 24, scope: !4617)
!4621 = !DILocation(line: 867, column: 3, scope: !4617)
!4622 = !DILocation(line: 868, column: 17, scope: !4617)
!4623 = !DILocation(line: 869, column: 1, scope: !4617)
!4624 = distinct !DISubprogram(name: "edge_to_cases_cleanup", scope: !3, file: !3, line: 829, type: !4625, scopeLine: 831, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4625 = !DISubroutineType(types: !4626)
!4626 = !{!2672, !3241, !3462, !2547}
!4627 = !DILocalVariable(name: "key", arg: 1, scope: !4624, file: !3, line: 829, type: !3241)
!4628 = !DILocation(line: 829, column: 36, scope: !4624)
!4629 = !DILocalVariable(name: "value", arg: 2, scope: !4624, file: !3, line: 829, type: !3462)
!4630 = !DILocation(line: 829, column: 65, scope: !4624)
!4631 = !DILocalVariable(name: "data", arg: 3, scope: !4624, file: !3, line: 830, type: !2547)
!4632 = !DILocation(line: 830, column: 16, scope: !4624)
!4633 = !DILocalVariable(name: "t", scope: !4624, file: !3, line: 832, type: !2553)
!4634 = !DILocation(line: 832, column: 8, scope: !4624)
!4635 = !DILocalVariable(name: "next", scope: !4624, file: !3, line: 832, type: !2553)
!4636 = !DILocation(line: 832, column: 11, scope: !4624)
!4637 = !DILocation(line: 834, column: 20, scope: !4638)
!4638 = distinct !DILexicalBlock(scope: !4624, file: !3, line: 834, column: 3)
!4639 = !DILocation(line: 834, column: 19, scope: !4638)
!4640 = !DILocation(line: 834, column: 12, scope: !4638)
!4641 = !DILocation(line: 834, column: 10, scope: !4638)
!4642 = !DILocation(line: 834, column: 8, scope: !4638)
!4643 = !DILocation(line: 834, column: 27, scope: !4644)
!4644 = distinct !DILexicalBlock(scope: !4638, file: !3, line: 834, column: 3)
!4645 = !DILocation(line: 834, column: 3, scope: !4638)
!4646 = !DILocation(line: 836, column: 14, scope: !4647)
!4647 = distinct !DILexicalBlock(scope: !4644, file: !3, line: 835, column: 5)
!4648 = !DILocation(line: 836, column: 12, scope: !4647)
!4649 = !DILocation(line: 837, column: 7, scope: !4647)
!4650 = !DILocation(line: 837, column: 22, scope: !4647)
!4651 = !DILocation(line: 838, column: 5, scope: !4647)
!4652 = !DILocation(line: 834, column: 34, scope: !4644)
!4653 = !DILocation(line: 834, column: 32, scope: !4644)
!4654 = !DILocation(line: 834, column: 3, scope: !4644)
!4655 = distinct !{!4655, !4645, !4656}
!4656 = !DILocation(line: 838, column: 5, scope: !4638)
!4657 = !DILocation(line: 840, column: 4, scope: !4624)
!4658 = !DILocation(line: 840, column: 10, scope: !4624)
!4659 = !DILocation(line: 841, column: 3, scope: !4624)
!4660 = distinct !DISubprogram(name: "label_to_block_fn", scope: !3, file: !3, line: 939, type: !4661, scopeLine: 940, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4661 = !DISubroutineType(types: !4662)
!4662 = !{!3523, !3356, !2553}
!4663 = !DILocalVariable(name: "ifun", arg: 1, scope: !4660, file: !3, line: 939, type: !3356)
!4664 = !DILocation(line: 939, column: 37, scope: !4660)
!4665 = !DILocalVariable(name: "dest", arg: 2, scope: !4660, file: !3, line: 939, type: !2553)
!4666 = !DILocation(line: 939, column: 48, scope: !4660)
!4667 = !DILocalVariable(name: "uid", scope: !4660, file: !3, line: 941, type: !2548)
!4668 = !DILocation(line: 941, column: 7, scope: !4660)
!4669 = !DILocation(line: 941, column: 13, scope: !4660)
!4670 = !DILocation(line: 946, column: 8, scope: !4671)
!4671 = distinct !DILexicalBlock(scope: !4660, file: !3, line: 946, column: 7)
!4672 = !DILocation(line: 946, column: 19, scope: !4671)
!4673 = !DILocation(line: 946, column: 22, scope: !4671)
!4674 = !DILocation(line: 946, column: 34, scope: !4671)
!4675 = !DILocation(line: 946, column: 37, scope: !4671)
!4676 = !DILocation(line: 946, column: 41, scope: !4671)
!4677 = !DILocation(line: 946, column: 7, scope: !4660)
!4678 = !DILocalVariable(name: "gsi", scope: !4679, file: !3, line: 948, type: !4074)
!4679 = distinct !DILexicalBlock(scope: !4671, file: !3, line: 947, column: 5)
!4680 = !DILocation(line: 948, column: 28, scope: !4679)
!4681 = !DILocation(line: 948, column: 48, scope: !4679)
!4682 = !DILocation(line: 948, column: 34, scope: !4679)
!4683 = !DILocalVariable(name: "stmt", scope: !4679, file: !3, line: 949, type: !2882)
!4684 = !DILocation(line: 949, column: 14, scope: !4679)
!4685 = !DILocation(line: 951, column: 34, scope: !4679)
!4686 = !DILocation(line: 951, column: 14, scope: !4679)
!4687 = !DILocation(line: 951, column: 12, scope: !4679)
!4688 = !DILocation(line: 952, column: 32, scope: !4679)
!4689 = !DILocation(line: 952, column: 7, scope: !4679)
!4690 = !DILocation(line: 953, column: 13, scope: !4679)
!4691 = !DILocation(line: 953, column: 11, scope: !4679)
!4692 = !DILocation(line: 954, column: 5, scope: !4679)
!4693 = !DILocation(line: 955, column: 7, scope: !4694)
!4694 = distinct !DILexicalBlock(scope: !4660, file: !3, line: 955, column: 7)
!4695 = !DILocation(line: 956, column: 25, scope: !4694)
!4696 = !DILocation(line: 956, column: 7, scope: !4694)
!4697 = !DILocation(line: 955, column: 7, scope: !4660)
!4698 = !DILocation(line: 957, column: 5, scope: !4694)
!4699 = !DILocation(line: 958, column: 10, scope: !4660)
!4700 = !DILocation(line: 958, column: 3, scope: !4660)
!4701 = !DILocation(line: 959, column: 1, scope: !4660)
!4702 = distinct !DISubprogram(name: "gsi_start_bb", scope: !581, file: !581, line: 4418, type: !4703, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4703 = !DISubroutineType(types: !4704)
!4704 = !{!4074, !3523}
!4705 = !DILocalVariable(name: "bb", arg: 1, scope: !4702, file: !581, line: 4418, type: !3523)
!4706 = !DILocation(line: 4418, column: 27, scope: !4702)
!4707 = !DILocalVariable(name: "i", scope: !4702, file: !581, line: 4420, type: !4074)
!4708 = !DILocation(line: 4420, column: 24, scope: !4702)
!4709 = !DILocalVariable(name: "seq", scope: !4702, file: !581, line: 4421, type: !2872)
!4710 = !DILocation(line: 4421, column: 14, scope: !4702)
!4711 = !DILocation(line: 4423, column: 17, scope: !4702)
!4712 = !DILocation(line: 4423, column: 9, scope: !4702)
!4713 = !DILocation(line: 4423, column: 7, scope: !4702)
!4714 = !DILocation(line: 4424, column: 29, scope: !4702)
!4715 = !DILocation(line: 4424, column: 11, scope: !4702)
!4716 = !DILocation(line: 4424, column: 5, scope: !4702)
!4717 = !DILocation(line: 4424, column: 9, scope: !4702)
!4718 = !DILocation(line: 4425, column: 11, scope: !4702)
!4719 = !DILocation(line: 4425, column: 5, scope: !4702)
!4720 = !DILocation(line: 4425, column: 9, scope: !4702)
!4721 = !DILocation(line: 4426, column: 10, scope: !4702)
!4722 = !DILocation(line: 4426, column: 5, scope: !4702)
!4723 = !DILocation(line: 4426, column: 8, scope: !4702)
!4724 = !DILocation(line: 4428, column: 3, scope: !4702)
!4725 = distinct !DISubprogram(name: "VEC_basic_block_base_index", scope: !382, file: !382, line: 281, type: !4726, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4726 = !DISubroutineType(types: !4727)
!4727 = !{!3523, !4728, !7}
!4728 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4729, size: 64)
!4729 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3531)
!4730 = !DILocalVariable(name: "vec_", arg: 1, scope: !4725, file: !382, line: 281, type: !4728)
!4731 = !DILocation(line: 281, column: 1, scope: !4725)
!4732 = !DILocalVariable(name: "ix_", arg: 2, scope: !4725, file: !382, line: 281, type: !7)
!4733 = !DILocation(line: 0, scope: !4725)
!4734 = distinct !DISubprogram(name: "VEC_basic_block_base_length", scope: !382, file: !382, line: 281, type: !4735, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4735 = !DISubroutineType(types: !4736)
!4736 = !{!7, !4728}
!4737 = !DILocalVariable(name: "vec_", arg: 1, scope: !4734, file: !382, line: 281, type: !4728)
!4738 = !DILocation(line: 281, column: 1, scope: !4734)
!4739 = distinct !DISubprogram(name: "make_abnormal_goto_edges", scope: !3, file: !3, line: 965, type: !4740, scopeLine: 966, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4740 = !DISubroutineType(types: !4741)
!4741 = !{null, !3523, !2672}
!4742 = !DILocalVariable(name: "bb", arg: 1, scope: !4739, file: !3, line: 965, type: !3523)
!4743 = !DILocation(line: 965, column: 39, scope: !4739)
!4744 = !DILocalVariable(name: "for_call", arg: 2, scope: !4739, file: !3, line: 965, type: !2672)
!4745 = !DILocation(line: 965, column: 48, scope: !4739)
!4746 = !DILocalVariable(name: "target_bb", scope: !4739, file: !3, line: 967, type: !3523)
!4747 = !DILocation(line: 967, column: 15, scope: !4739)
!4748 = !DILocalVariable(name: "gsi", scope: !4739, file: !3, line: 968, type: !4074)
!4749 = !DILocation(line: 968, column: 24, scope: !4739)
!4750 = !DILocation(line: 970, column: 3, scope: !4751)
!4751 = distinct !DILexicalBlock(scope: !4739, file: !3, line: 970, column: 3)
!4752 = !DILocation(line: 970, column: 3, scope: !4753)
!4753 = distinct !DILexicalBlock(scope: !4751, file: !3, line: 970, column: 3)
!4754 = !DILocation(line: 971, column: 30, scope: !4755)
!4755 = distinct !DILexicalBlock(scope: !4753, file: !3, line: 971, column: 5)
!4756 = !DILocation(line: 971, column: 16, scope: !4755)
!4757 = !DILocation(line: 971, column: 10, scope: !4755)
!4758 = !DILocation(line: 971, column: 43, scope: !4759)
!4759 = distinct !DILexicalBlock(scope: !4755, file: !3, line: 971, column: 5)
!4760 = !DILocation(line: 971, column: 42, scope: !4759)
!4761 = !DILocation(line: 971, column: 5, scope: !4755)
!4762 = !DILocalVariable(name: "label_stmt", scope: !4763, file: !3, line: 973, type: !2882)
!4763 = distinct !DILexicalBlock(scope: !4759, file: !3, line: 972, column: 7)
!4764 = !DILocation(line: 973, column: 9, scope: !4763)
!4765 = !DILocation(line: 973, column: 22, scope: !4763)
!4766 = !DILocalVariable(name: "target", scope: !4763, file: !3, line: 974, type: !2553)
!4767 = !DILocation(line: 974, column: 7, scope: !4763)
!4768 = !DILocation(line: 976, column: 19, scope: !4769)
!4769 = distinct !DILexicalBlock(scope: !4763, file: !3, line: 976, column: 6)
!4770 = !DILocation(line: 976, column: 6, scope: !4769)
!4771 = !DILocation(line: 976, column: 31, scope: !4769)
!4772 = !DILocation(line: 976, column: 6, scope: !4763)
!4773 = !DILocation(line: 977, column: 4, scope: !4769)
!4774 = !DILocation(line: 979, column: 31, scope: !4763)
!4775 = !DILocation(line: 979, column: 11, scope: !4763)
!4776 = !DILocation(line: 979, column: 9, scope: !4763)
!4777 = !DILocation(line: 983, column: 7, scope: !4778)
!4778 = distinct !DILexicalBlock(scope: !4763, file: !3, line: 983, column: 6)
!4779 = !DILocation(line: 983, column: 29, scope: !4778)
!4780 = !DILocation(line: 983, column: 33, scope: !4778)
!4781 = !DILocation(line: 984, column: 6, scope: !4778)
!4782 = !DILocation(line: 984, column: 10, scope: !4778)
!4783 = !DILocation(line: 984, column: 33, scope: !4778)
!4784 = !DILocation(line: 984, column: 36, scope: !4778)
!4785 = !DILocation(line: 983, column: 6, scope: !4763)
!4786 = !DILocation(line: 986, column: 17, scope: !4787)
!4787 = distinct !DILexicalBlock(scope: !4778, file: !3, line: 985, column: 4)
!4788 = !DILocation(line: 986, column: 21, scope: !4787)
!4789 = !DILocation(line: 986, column: 6, scope: !4787)
!4790 = !DILocation(line: 987, column: 6, scope: !4787)
!4791 = !DILocation(line: 989, column: 7, scope: !4763)
!4792 = !DILocation(line: 971, column: 60, scope: !4759)
!4793 = !DILocation(line: 971, column: 5, scope: !4759)
!4794 = distinct !{!4794, !4761, !4795}
!4795 = !DILocation(line: 989, column: 7, scope: !4755)
!4796 = distinct !{!4796, !4750, !4797}
!4797 = !DILocation(line: 989, column: 7, scope: !4751)
!4798 = !DILocation(line: 990, column: 1, scope: !4739)
!4799 = distinct !DISubprogram(name: "gsi_end_p", scope: !581, file: !581, line: 4467, type: !4800, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4800 = !DISubroutineType(types: !4801)
!4801 = !{!2672, !4074}
!4802 = !DILocalVariable(name: "i", arg: 1, scope: !4799, file: !581, line: 4467, type: !4074)
!4803 = !DILocation(line: 4467, column: 33, scope: !4799)
!4804 = !DILocation(line: 4469, column: 12, scope: !4799)
!4805 = !DILocation(line: 4469, column: 16, scope: !4799)
!4806 = !DILocation(line: 4469, column: 10, scope: !4799)
!4807 = !DILocation(line: 4469, column: 3, scope: !4799)
!4808 = distinct !DISubprogram(name: "gsi_stmt", scope: !581, file: !581, line: 4501, type: !4809, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4809 = !DISubroutineType(types: !4810)
!4810 = !{!2882, !4074}
!4811 = !DILocalVariable(name: "i", arg: 1, scope: !4808, file: !581, line: 4501, type: !4074)
!4812 = !DILocation(line: 4501, column: 32, scope: !4808)
!4813 = !DILocation(line: 4503, column: 12, scope: !4808)
!4814 = !DILocation(line: 4503, column: 17, scope: !4808)
!4815 = !DILocation(line: 4503, column: 3, scope: !4808)
!4816 = distinct !DISubprogram(name: "gimple_label_label", scope: !581, file: !581, line: 2444, type: !4569, scopeLine: 2445, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4817 = !DILocalVariable(name: "gs", arg: 1, scope: !4816, file: !581, line: 2444, type: !4543)
!4818 = !DILocation(line: 2444, column: 34, scope: !4816)
!4819 = !DILocation(line: 2447, column: 21, scope: !4816)
!4820 = !DILocation(line: 2447, column: 10, scope: !4816)
!4821 = !DILocation(line: 2447, column: 3, scope: !4816)
!4822 = distinct !DISubprogram(name: "gsi_next", scope: !581, file: !581, line: 4485, type: !4823, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4823 = !DISubroutineType(types: !4824)
!4824 = !{null, !4825}
!4825 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4074, size: 64)
!4826 = !DILocalVariable(name: "i", arg: 1, scope: !4822, file: !581, line: 4485, type: !4825)
!4827 = !DILocation(line: 4485, column: 33, scope: !4822)
!4828 = !DILocation(line: 4487, column: 12, scope: !4822)
!4829 = !DILocation(line: 4487, column: 15, scope: !4822)
!4830 = !DILocation(line: 4487, column: 20, scope: !4822)
!4831 = !DILocation(line: 4487, column: 3, scope: !4822)
!4832 = !DILocation(line: 4487, column: 6, scope: !4822)
!4833 = !DILocation(line: 4487, column: 10, scope: !4822)
!4834 = !DILocation(line: 4488, column: 1, scope: !4822)
!4835 = distinct !DISubprogram(name: "cleanup_dead_labels", scope: !3, file: !3, line: 1135, type: !4413, scopeLine: 1136, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!4836 = !DILocalVariable(name: "bb", scope: !4835, file: !3, line: 1137, type: !3523)
!4837 = !DILocation(line: 1137, column: 15, scope: !4835)
!4838 = !DILocation(line: 1138, column: 18, scope: !4835)
!4839 = !DILocation(line: 1138, column: 16, scope: !4835)
!4840 = !DILocation(line: 1142, column: 3, scope: !4841)
!4841 = distinct !DILexicalBlock(scope: !4835, file: !3, line: 1142, column: 3)
!4842 = !DILocation(line: 1142, column: 3, scope: !4843)
!4843 = distinct !DILexicalBlock(scope: !4841, file: !3, line: 1142, column: 3)
!4844 = !DILocalVariable(name: "i", scope: !4845, file: !3, line: 1144, type: !4074)
!4845 = distinct !DILexicalBlock(scope: !4843, file: !3, line: 1143, column: 5)
!4846 = !DILocation(line: 1144, column: 28, scope: !4845)
!4847 = !DILocation(line: 1146, column: 30, scope: !4848)
!4848 = distinct !DILexicalBlock(scope: !4845, file: !3, line: 1146, column: 7)
!4849 = !DILocation(line: 1146, column: 16, scope: !4848)
!4850 = !DILocation(line: 1146, column: 12, scope: !4848)
!4851 = !DILocation(line: 1146, column: 36, scope: !4852)
!4852 = distinct !DILexicalBlock(scope: !4848, file: !3, line: 1146, column: 7)
!4853 = !DILocation(line: 1146, column: 35, scope: !4852)
!4854 = !DILocation(line: 1146, column: 7, scope: !4848)
!4855 = !DILocalVariable(name: "label", scope: !4856, file: !3, line: 1148, type: !2553)
!4856 = distinct !DILexicalBlock(scope: !4852, file: !3, line: 1147, column: 2)
!4857 = !DILocation(line: 1148, column: 9, scope: !4856)
!4858 = !DILocalVariable(name: "stmt", scope: !4856, file: !3, line: 1149, type: !2882)
!4859 = !DILocation(line: 1149, column: 11, scope: !4856)
!4860 = !DILocation(line: 1149, column: 18, scope: !4856)
!4861 = !DILocation(line: 1151, column: 21, scope: !4862)
!4862 = distinct !DILexicalBlock(scope: !4856, file: !3, line: 1151, column: 8)
!4863 = !DILocation(line: 1151, column: 8, scope: !4862)
!4864 = !DILocation(line: 1151, column: 27, scope: !4862)
!4865 = !DILocation(line: 1151, column: 8, scope: !4856)
!4866 = !DILocation(line: 1152, column: 6, scope: !4862)
!4867 = !DILocation(line: 1154, column: 32, scope: !4856)
!4868 = !DILocation(line: 1154, column: 12, scope: !4856)
!4869 = !DILocation(line: 1154, column: 10, scope: !4856)
!4870 = !DILocation(line: 1158, column: 9, scope: !4871)
!4871 = distinct !DILexicalBlock(scope: !4856, file: !3, line: 1158, column: 8)
!4872 = !DILocation(line: 1158, column: 22, scope: !4871)
!4873 = !DILocation(line: 1158, column: 26, scope: !4871)
!4874 = !DILocation(line: 1158, column: 33, scope: !4871)
!4875 = !DILocation(line: 1158, column: 8, scope: !4856)
!4876 = !DILocation(line: 1160, column: 40, scope: !4877)
!4877 = distinct !DILexicalBlock(scope: !4871, file: !3, line: 1159, column: 6)
!4878 = !DILocation(line: 1160, column: 8, scope: !4877)
!4879 = !DILocation(line: 1160, column: 21, scope: !4877)
!4880 = !DILocation(line: 1160, column: 25, scope: !4877)
!4881 = !DILocation(line: 1160, column: 32, scope: !4877)
!4882 = !DILocation(line: 1160, column: 38, scope: !4877)
!4883 = !DILocation(line: 1161, column: 8, scope: !4877)
!4884 = !DILocation(line: 1167, column: 9, scope: !4885)
!4885 = distinct !DILexicalBlock(scope: !4856, file: !3, line: 1167, column: 8)
!4886 = !DILocation(line: 1168, column: 8, scope: !4885)
!4887 = !DILocation(line: 1168, column: 11, scope: !4885)
!4888 = !DILocation(line: 1167, column: 8, scope: !4856)
!4889 = !DILocation(line: 1170, column: 40, scope: !4890)
!4890 = distinct !DILexicalBlock(scope: !4885, file: !3, line: 1169, column: 6)
!4891 = !DILocation(line: 1170, column: 8, scope: !4890)
!4892 = !DILocation(line: 1170, column: 21, scope: !4890)
!4893 = !DILocation(line: 1170, column: 25, scope: !4890)
!4894 = !DILocation(line: 1170, column: 32, scope: !4890)
!4895 = !DILocation(line: 1170, column: 38, scope: !4890)
!4896 = !DILocation(line: 1171, column: 8, scope: !4890)
!4897 = !DILocation(line: 1173, column: 2, scope: !4856)
!4898 = !DILocation(line: 1146, column: 51, scope: !4852)
!4899 = !DILocation(line: 1146, column: 7, scope: !4852)
!4900 = distinct !{!4900, !4854, !4901}
!4901 = !DILocation(line: 1173, column: 2, scope: !4848)
!4902 = !DILocation(line: 1174, column: 5, scope: !4845)
!4903 = distinct !{!4903, !4840, !4904}
!4904 = !DILocation(line: 1174, column: 5, scope: !4841)
!4905 = !DILocation(line: 1178, column: 3, scope: !4906)
!4906 = distinct !DILexicalBlock(scope: !4835, file: !3, line: 1178, column: 3)
!4907 = !DILocation(line: 1178, column: 3, scope: !4908)
!4908 = distinct !DILexicalBlock(scope: !4906, file: !3, line: 1178, column: 3)
!4909 = !DILocalVariable(name: "stmt", scope: !4910, file: !3, line: 1180, type: !2882)
!4910 = distinct !DILexicalBlock(scope: !4908, file: !3, line: 1179, column: 5)
!4911 = !DILocation(line: 1180, column: 14, scope: !4910)
!4912 = !DILocation(line: 1180, column: 32, scope: !4910)
!4913 = !DILocation(line: 1180, column: 21, scope: !4910)
!4914 = !DILocation(line: 1181, column: 12, scope: !4915)
!4915 = distinct !DILexicalBlock(scope: !4910, file: !3, line: 1181, column: 11)
!4916 = !DILocation(line: 1181, column: 11, scope: !4910)
!4917 = !DILocation(line: 1182, column: 2, scope: !4915)
!4918 = !DILocation(line: 1184, column: 28, scope: !4910)
!4919 = !DILocation(line: 1184, column: 15, scope: !4910)
!4920 = !DILocation(line: 1184, column: 7, scope: !4910)
!4921 = !DILocalVariable(name: "true_label", scope: !4922, file: !3, line: 1188, type: !2553)
!4922 = distinct !DILexicalBlock(scope: !4923, file: !3, line: 1187, column: 4)
!4923 = distinct !DILexicalBlock(scope: !4910, file: !3, line: 1185, column: 2)
!4924 = !DILocation(line: 1188, column: 11, scope: !4922)
!4925 = !DILocation(line: 1188, column: 48, scope: !4922)
!4926 = !DILocation(line: 1188, column: 24, scope: !4922)
!4927 = !DILocalVariable(name: "false_label", scope: !4922, file: !3, line: 1189, type: !2553)
!4928 = !DILocation(line: 1189, column: 11, scope: !4922)
!4929 = !DILocation(line: 1189, column: 50, scope: !4922)
!4930 = !DILocation(line: 1189, column: 25, scope: !4922)
!4931 = !DILocation(line: 1191, column: 10, scope: !4932)
!4932 = distinct !DILexicalBlock(scope: !4922, file: !3, line: 1191, column: 10)
!4933 = !DILocation(line: 1191, column: 10, scope: !4922)
!4934 = !DILocation(line: 1192, column: 36, scope: !4932)
!4935 = !DILocation(line: 1192, column: 60, scope: !4932)
!4936 = !DILocation(line: 1192, column: 42, scope: !4932)
!4937 = !DILocation(line: 1192, column: 8, scope: !4932)
!4938 = !DILocation(line: 1193, column: 10, scope: !4939)
!4939 = distinct !DILexicalBlock(scope: !4922, file: !3, line: 1193, column: 10)
!4940 = !DILocation(line: 1193, column: 10, scope: !4922)
!4941 = !DILocation(line: 1194, column: 37, scope: !4939)
!4942 = !DILocation(line: 1194, column: 61, scope: !4939)
!4943 = !DILocation(line: 1194, column: 43, scope: !4939)
!4944 = !DILocation(line: 1194, column: 8, scope: !4939)
!4945 = !DILocation(line: 1195, column: 6, scope: !4922)
!4946 = !DILocalVariable(name: "i", scope: !4947, file: !3, line: 1200, type: !3027)
!4947 = distinct !DILexicalBlock(scope: !4923, file: !3, line: 1199, column: 4)
!4948 = !DILocation(line: 1200, column: 13, scope: !4947)
!4949 = !DILocalVariable(name: "n", scope: !4947, file: !3, line: 1200, type: !3027)
!4950 = !DILocation(line: 1200, column: 16, scope: !4947)
!4951 = !DILocation(line: 1200, column: 46, scope: !4947)
!4952 = !DILocation(line: 1200, column: 20, scope: !4947)
!4953 = !DILocation(line: 1203, column: 13, scope: !4954)
!4954 = distinct !DILexicalBlock(scope: !4947, file: !3, line: 1203, column: 6)
!4955 = !DILocation(line: 1203, column: 11, scope: !4954)
!4956 = !DILocation(line: 1203, column: 18, scope: !4957)
!4957 = distinct !DILexicalBlock(scope: !4954, file: !3, line: 1203, column: 6)
!4958 = !DILocation(line: 1203, column: 22, scope: !4957)
!4959 = !DILocation(line: 1203, column: 20, scope: !4957)
!4960 = !DILocation(line: 1203, column: 6, scope: !4954)
!4961 = !DILocalVariable(name: "case_label", scope: !4962, file: !3, line: 1205, type: !2553)
!4962 = distinct !DILexicalBlock(scope: !4957, file: !3, line: 1204, column: 8)
!4963 = !DILocation(line: 1205, column: 8, scope: !4962)
!4964 = !DILocation(line: 1205, column: 42, scope: !4962)
!4965 = !DILocation(line: 1205, column: 48, scope: !4962)
!4966 = !DILocation(line: 1205, column: 21, scope: !4962)
!4967 = !DILocalVariable(name: "label", scope: !4962, file: !3, line: 1206, type: !2553)
!4968 = !DILocation(line: 1206, column: 8, scope: !4962)
!4969 = !DILocation(line: 1206, column: 34, scope: !4962)
!4970 = !DILocation(line: 1206, column: 16, scope: !4962)
!4971 = !DILocation(line: 1207, column: 29, scope: !4962)
!4972 = !DILocation(line: 1207, column: 3, scope: !4962)
!4973 = !DILocation(line: 1207, column: 27, scope: !4962)
!4974 = !DILocation(line: 1208, column: 8, scope: !4962)
!4975 = !DILocation(line: 1203, column: 25, scope: !4957)
!4976 = !DILocation(line: 1203, column: 6, scope: !4957)
!4977 = distinct !{!4977, !4960, !4978}
!4978 = !DILocation(line: 1208, column: 8, scope: !4954)
!4979 = !DILocation(line: 1209, column: 6, scope: !4947)
!4980 = !DILocalVariable(name: "i", scope: !4981, file: !3, line: 1214, type: !2548)
!4981 = distinct !DILexicalBlock(scope: !4923, file: !3, line: 1213, column: 4)
!4982 = !DILocation(line: 1214, column: 10, scope: !4981)
!4983 = !DILocalVariable(name: "n", scope: !4981, file: !3, line: 1214, type: !2548)
!4984 = !DILocation(line: 1214, column: 13, scope: !4981)
!4985 = !DILocation(line: 1214, column: 37, scope: !4981)
!4986 = !DILocation(line: 1214, column: 17, scope: !4981)
!4987 = !DILocation(line: 1216, column: 13, scope: !4988)
!4988 = distinct !DILexicalBlock(scope: !4981, file: !3, line: 1216, column: 6)
!4989 = !DILocation(line: 1216, column: 11, scope: !4988)
!4990 = !DILocation(line: 1216, column: 18, scope: !4991)
!4991 = distinct !DILexicalBlock(scope: !4988, file: !3, line: 1216, column: 6)
!4992 = !DILocation(line: 1216, column: 22, scope: !4991)
!4993 = !DILocation(line: 1216, column: 20, scope: !4991)
!4994 = !DILocation(line: 1216, column: 6, scope: !4988)
!4995 = !DILocalVariable(name: "cons", scope: !4996, file: !3, line: 1218, type: !2553)
!4996 = distinct !DILexicalBlock(scope: !4991, file: !3, line: 1217, column: 8)
!4997 = !DILocation(line: 1218, column: 8, scope: !4996)
!4998 = !DILocation(line: 1218, column: 36, scope: !4996)
!4999 = !DILocation(line: 1218, column: 42, scope: !4996)
!5000 = !DILocation(line: 1218, column: 15, scope: !4996)
!5001 = !DILocalVariable(name: "label", scope: !4996, file: !3, line: 1219, type: !2553)
!5002 = !DILocation(line: 1219, column: 8, scope: !4996)
!5003 = !DILocation(line: 1219, column: 34, scope: !4996)
!5004 = !DILocation(line: 1219, column: 16, scope: !4996)
!5005 = !DILocation(line: 1220, column: 23, scope: !4996)
!5006 = !DILocation(line: 1220, column: 3, scope: !4996)
!5007 = !DILocation(line: 1220, column: 21, scope: !4996)
!5008 = !DILocation(line: 1221, column: 8, scope: !4996)
!5009 = !DILocation(line: 1216, column: 25, scope: !4991)
!5010 = !DILocation(line: 1216, column: 6, scope: !4991)
!5011 = distinct !{!5011, !4994, !5012}
!5012 = !DILocation(line: 1221, column: 8, scope: !4988)
!5013 = !DILocation(line: 1222, column: 6, scope: !4981)
!5014 = !DILocation(line: 1228, column: 33, scope: !5015)
!5015 = distinct !DILexicalBlock(scope: !4923, file: !3, line: 1228, column: 15)
!5016 = !DILocation(line: 1228, column: 16, scope: !5015)
!5017 = !DILocation(line: 1228, column: 15, scope: !4923)
!5018 = !DILocalVariable(name: "new_dest", scope: !5019, file: !3, line: 1230, type: !2553)
!5019 = distinct !DILexicalBlock(scope: !5015, file: !3, line: 1229, column: 6)
!5020 = !DILocation(line: 1230, column: 13, scope: !5019)
!5021 = !DILocation(line: 1230, column: 60, scope: !5019)
!5022 = !DILocation(line: 1230, column: 42, scope: !5019)
!5023 = !DILocation(line: 1230, column: 24, scope: !5019)
!5024 = !DILocation(line: 1231, column: 30, scope: !5019)
!5025 = !DILocation(line: 1231, column: 36, scope: !5019)
!5026 = !DILocation(line: 1231, column: 8, scope: !5019)
!5027 = !DILocation(line: 1232, column: 6, scope: !5019)
!5028 = !DILocation(line: 1233, column: 4, scope: !4923)
!5029 = !DILocation(line: 1236, column: 4, scope: !4923)
!5030 = !DILocation(line: 1238, column: 5, scope: !4910)
!5031 = distinct !{!5031, !4905, !5032}
!5032 = !DILocation(line: 1238, column: 5, scope: !4906)
!5033 = !DILocation(line: 1241, column: 3, scope: !4835)
!5034 = !DILocation(line: 1246, column: 3, scope: !5035)
!5035 = distinct !DILexicalBlock(scope: !4835, file: !3, line: 1246, column: 3)
!5036 = !DILocation(line: 1246, column: 3, scope: !5037)
!5037 = distinct !DILexicalBlock(scope: !5035, file: !3, line: 1246, column: 3)
!5038 = !DILocalVariable(name: "i", scope: !5039, file: !3, line: 1248, type: !4074)
!5039 = distinct !DILexicalBlock(scope: !5037, file: !3, line: 1247, column: 5)
!5040 = !DILocation(line: 1248, column: 28, scope: !5039)
!5041 = !DILocalVariable(name: "label_for_this_bb", scope: !5039, file: !3, line: 1249, type: !2553)
!5042 = !DILocation(line: 1249, column: 12, scope: !5039)
!5043 = !DILocation(line: 1249, column: 32, scope: !5039)
!5044 = !DILocation(line: 1249, column: 45, scope: !5039)
!5045 = !DILocation(line: 1249, column: 49, scope: !5039)
!5046 = !DILocation(line: 1249, column: 56, scope: !5039)
!5047 = !DILocation(line: 1251, column: 12, scope: !5048)
!5048 = distinct !DILexicalBlock(scope: !5039, file: !3, line: 1251, column: 11)
!5049 = !DILocation(line: 1251, column: 11, scope: !5039)
!5050 = !DILocation(line: 1252, column: 2, scope: !5048)
!5051 = !DILocation(line: 1255, column: 12, scope: !5052)
!5052 = distinct !DILexicalBlock(scope: !5039, file: !3, line: 1255, column: 11)
!5053 = !DILocation(line: 1255, column: 25, scope: !5052)
!5054 = !DILocation(line: 1255, column: 29, scope: !5052)
!5055 = !DILocation(line: 1255, column: 36, scope: !5052)
!5056 = !DILocation(line: 1255, column: 11, scope: !5039)
!5057 = !DILocation(line: 1256, column: 20, scope: !5052)
!5058 = !DILocation(line: 1256, column: 2, scope: !5052)
!5059 = !DILocation(line: 1258, column: 30, scope: !5060)
!5060 = distinct !DILexicalBlock(scope: !5039, file: !3, line: 1258, column: 7)
!5061 = !DILocation(line: 1258, column: 16, scope: !5060)
!5062 = !DILocation(line: 1258, column: 12, scope: !5060)
!5063 = !DILocation(line: 1258, column: 36, scope: !5064)
!5064 = distinct !DILexicalBlock(scope: !5060, file: !3, line: 1258, column: 7)
!5065 = !DILocation(line: 1258, column: 35, scope: !5064)
!5066 = !DILocation(line: 1258, column: 7, scope: !5060)
!5067 = !DILocalVariable(name: "label", scope: !5068, file: !3, line: 1260, type: !2553)
!5068 = distinct !DILexicalBlock(scope: !5064, file: !3, line: 1259, column: 2)
!5069 = !DILocation(line: 1260, column: 9, scope: !5068)
!5070 = !DILocalVariable(name: "stmt", scope: !5068, file: !3, line: 1261, type: !2882)
!5071 = !DILocation(line: 1261, column: 11, scope: !5068)
!5072 = !DILocation(line: 1261, column: 18, scope: !5068)
!5073 = !DILocation(line: 1263, column: 21, scope: !5074)
!5074 = distinct !DILexicalBlock(scope: !5068, file: !3, line: 1263, column: 8)
!5075 = !DILocation(line: 1263, column: 8, scope: !5074)
!5076 = !DILocation(line: 1263, column: 27, scope: !5074)
!5077 = !DILocation(line: 1263, column: 8, scope: !5068)
!5078 = !DILocation(line: 1264, column: 6, scope: !5074)
!5079 = !DILocation(line: 1266, column: 32, scope: !5068)
!5080 = !DILocation(line: 1266, column: 12, scope: !5068)
!5081 = !DILocation(line: 1266, column: 10, scope: !5068)
!5082 = !DILocation(line: 1268, column: 8, scope: !5083)
!5083 = distinct !DILexicalBlock(scope: !5068, file: !3, line: 1268, column: 8)
!5084 = !DILocation(line: 1268, column: 17, scope: !5083)
!5085 = !DILocation(line: 1268, column: 14, scope: !5083)
!5086 = !DILocation(line: 1269, column: 8, scope: !5083)
!5087 = !DILocation(line: 1269, column: 12, scope: !5083)
!5088 = !DILocation(line: 1270, column: 8, scope: !5083)
!5089 = !DILocation(line: 1270, column: 11, scope: !5083)
!5090 = !DILocation(line: 1271, column: 8, scope: !5083)
!5091 = !DILocation(line: 1271, column: 11, scope: !5083)
!5092 = !DILocation(line: 1268, column: 8, scope: !5068)
!5093 = !DILocation(line: 1272, column: 6, scope: !5083)
!5094 = !DILocation(line: 1274, column: 6, scope: !5083)
!5095 = !DILocation(line: 1258, column: 7, scope: !5064)
!5096 = distinct !{!5096, !5066, !5097}
!5097 = !DILocation(line: 1275, column: 2, scope: !5060)
!5098 = !DILocation(line: 1276, column: 5, scope: !5039)
!5099 = distinct !{!5099, !5034, !5100}
!5100 = !DILocation(line: 1276, column: 5, scope: !5035)
!5101 = !DILocation(line: 1278, column: 9, scope: !4835)
!5102 = !DILocation(line: 1278, column: 3, scope: !4835)
!5103 = !DILocation(line: 1279, column: 1, scope: !4835)
!5104 = distinct !DISubprogram(name: "gimple_cond_true_label", scope: !581, file: !581, line: 2303, type: !4569, scopeLine: 2304, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5105 = !DILocalVariable(name: "gs", arg: 1, scope: !5104, file: !581, line: 2303, type: !4543)
!5106 = !DILocation(line: 2303, column: 38, scope: !5104)
!5107 = !DILocation(line: 2306, column: 21, scope: !5104)
!5108 = !DILocation(line: 2306, column: 10, scope: !5104)
!5109 = !DILocation(line: 2306, column: 3, scope: !5104)
!5110 = distinct !DISubprogram(name: "gimple_cond_false_label", scope: !581, file: !581, line: 2336, type: !4569, scopeLine: 2337, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5111 = !DILocalVariable(name: "gs", arg: 1, scope: !5110, file: !581, line: 2336, type: !4543)
!5112 = !DILocation(line: 2336, column: 39, scope: !5110)
!5113 = !DILocation(line: 2339, column: 21, scope: !5110)
!5114 = !DILocation(line: 2339, column: 10, scope: !5110)
!5115 = !DILocation(line: 2339, column: 3, scope: !5110)
!5116 = distinct !DISubprogram(name: "gimple_cond_set_true_label", scope: !581, file: !581, line: 2314, type: !5117, scopeLine: 2315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5117 = !DISubroutineType(types: !5118)
!5118 = !{null, !2882, !2553}
!5119 = !DILocalVariable(name: "gs", arg: 1, scope: !5116, file: !581, line: 2314, type: !2882)
!5120 = !DILocation(line: 2314, column: 36, scope: !5116)
!5121 = !DILocalVariable(name: "label", arg: 2, scope: !5116, file: !581, line: 2314, type: !2553)
!5122 = !DILocation(line: 2314, column: 45, scope: !5116)
!5123 = !DILocation(line: 2317, column: 18, scope: !5116)
!5124 = !DILocation(line: 2317, column: 25, scope: !5116)
!5125 = !DILocation(line: 2317, column: 3, scope: !5116)
!5126 = !DILocation(line: 2318, column: 1, scope: !5116)
!5127 = distinct !DISubprogram(name: "main_block_label", scope: !3, file: !3, line: 1061, type: !5128, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5128 = !DISubroutineType(types: !5129)
!5129 = !{!2553, !2553}
!5130 = !DILocalVariable(name: "label", arg: 1, scope: !5127, file: !3, line: 1061, type: !2553)
!5131 = !DILocation(line: 1061, column: 24, scope: !5127)
!5132 = !DILocalVariable(name: "bb", scope: !5127, file: !3, line: 1063, type: !3523)
!5133 = !DILocation(line: 1063, column: 15, scope: !5127)
!5134 = !DILocation(line: 1063, column: 20, scope: !5127)
!5135 = !DILocalVariable(name: "main_label", scope: !5127, file: !3, line: 1064, type: !2553)
!5136 = !DILocation(line: 1064, column: 8, scope: !5127)
!5137 = !DILocation(line: 1064, column: 21, scope: !5127)
!5138 = !DILocation(line: 1064, column: 34, scope: !5127)
!5139 = !DILocation(line: 1064, column: 38, scope: !5127)
!5140 = !DILocation(line: 1064, column: 45, scope: !5127)
!5141 = !DILocation(line: 1067, column: 8, scope: !5142)
!5142 = distinct !DILexicalBlock(scope: !5127, file: !3, line: 1067, column: 7)
!5143 = !DILocation(line: 1067, column: 7, scope: !5127)
!5144 = !DILocation(line: 1069, column: 39, scope: !5145)
!5145 = distinct !DILexicalBlock(scope: !5142, file: !3, line: 1068, column: 5)
!5146 = !DILocation(line: 1069, column: 7, scope: !5145)
!5147 = !DILocation(line: 1069, column: 20, scope: !5145)
!5148 = !DILocation(line: 1069, column: 24, scope: !5145)
!5149 = !DILocation(line: 1069, column: 31, scope: !5145)
!5150 = !DILocation(line: 1069, column: 37, scope: !5145)
!5151 = !DILocation(line: 1070, column: 20, scope: !5145)
!5152 = !DILocation(line: 1070, column: 18, scope: !5145)
!5153 = !DILocation(line: 1071, column: 5, scope: !5145)
!5154 = !DILocation(line: 1073, column: 3, scope: !5127)
!5155 = !DILocation(line: 1073, column: 16, scope: !5127)
!5156 = !DILocation(line: 1073, column: 20, scope: !5127)
!5157 = !DILocation(line: 1073, column: 27, scope: !5127)
!5158 = !DILocation(line: 1073, column: 32, scope: !5127)
!5159 = !DILocation(line: 1074, column: 10, scope: !5127)
!5160 = !DILocation(line: 1074, column: 3, scope: !5127)
!5161 = distinct !DISubprogram(name: "gimple_cond_set_false_label", scope: !581, file: !581, line: 2325, type: !5117, scopeLine: 2326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5162 = !DILocalVariable(name: "gs", arg: 1, scope: !5161, file: !581, line: 2325, type: !2882)
!5163 = !DILocation(line: 2325, column: 37, scope: !5161)
!5164 = !DILocalVariable(name: "label", arg: 2, scope: !5161, file: !581, line: 2325, type: !2553)
!5165 = !DILocation(line: 2325, column: 46, scope: !5161)
!5166 = !DILocation(line: 2328, column: 18, scope: !5161)
!5167 = !DILocation(line: 2328, column: 25, scope: !5161)
!5168 = !DILocation(line: 2328, column: 3, scope: !5161)
!5169 = !DILocation(line: 2329, column: 1, scope: !5161)
!5170 = distinct !DISubprogram(name: "gimple_switch_num_labels", scope: !581, file: !581, line: 3157, type: !5171, scopeLine: 3158, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5171 = !DISubroutineType(types: !5172)
!5172 = !{!7, !4543}
!5173 = !DILocalVariable(name: "gs", arg: 1, scope: !5170, file: !581, line: 3157, type: !4543)
!5174 = !DILocation(line: 3157, column: 40, scope: !5170)
!5175 = !DILocalVariable(name: "num_ops", scope: !5170, file: !581, line: 3159, type: !7)
!5176 = !DILocation(line: 3159, column: 12, scope: !5170)
!5177 = !DILocation(line: 3161, column: 29, scope: !5170)
!5178 = !DILocation(line: 3161, column: 13, scope: !5170)
!5179 = !DILocation(line: 3161, column: 11, scope: !5170)
!5180 = !DILocation(line: 3162, column: 3, scope: !5170)
!5181 = !DILocation(line: 3163, column: 10, scope: !5170)
!5182 = !DILocation(line: 3163, column: 18, scope: !5170)
!5183 = !DILocation(line: 3163, column: 3, scope: !5170)
!5184 = distinct !DISubprogram(name: "gimple_switch_label", scope: !581, file: !581, line: 3212, type: !5185, scopeLine: 3213, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5185 = !DISubroutineType(types: !5186)
!5186 = !{!2553, !4543, !7}
!5187 = !DILocalVariable(name: "gs", arg: 1, scope: !5184, file: !581, line: 3212, type: !4543)
!5188 = !DILocation(line: 3212, column: 35, scope: !5184)
!5189 = !DILocalVariable(name: "index", arg: 2, scope: !5184, file: !581, line: 3212, type: !7)
!5190 = !DILocation(line: 3212, column: 48, scope: !5184)
!5191 = !DILocation(line: 3215, column: 3, scope: !5184)
!5192 = !DILocation(line: 3216, column: 21, scope: !5184)
!5193 = !DILocation(line: 3216, column: 25, scope: !5184)
!5194 = !DILocation(line: 3216, column: 31, scope: !5184)
!5195 = !DILocation(line: 3216, column: 10, scope: !5184)
!5196 = !DILocation(line: 3216, column: 3, scope: !5184)
!5197 = distinct !DISubprogram(name: "gimple_asm_nlabels", scope: !581, file: !581, line: 2610, type: !5171, scopeLine: 2611, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5198 = !DILocalVariable(name: "gs", arg: 1, scope: !5197, file: !581, line: 2610, type: !4543)
!5199 = !DILocation(line: 2610, column: 34, scope: !5197)
!5200 = !DILocation(line: 2613, column: 10, scope: !5197)
!5201 = !DILocation(line: 2613, column: 14, scope: !5197)
!5202 = !DILocation(line: 2613, column: 25, scope: !5197)
!5203 = !DILocation(line: 2613, column: 3, scope: !5197)
!5204 = distinct !DISubprogram(name: "gimple_asm_label_op", scope: !581, file: !581, line: 2707, type: !5185, scopeLine: 2708, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5205 = !DILocalVariable(name: "gs", arg: 1, scope: !5204, file: !581, line: 2707, type: !4543)
!5206 = !DILocation(line: 2707, column: 35, scope: !5204)
!5207 = !DILocalVariable(name: "index", arg: 2, scope: !5204, file: !581, line: 2707, type: !7)
!5208 = !DILocation(line: 2707, column: 48, scope: !5204)
!5209 = !DILocation(line: 2710, column: 3, scope: !5204)
!5210 = !DILocation(line: 2711, column: 21, scope: !5204)
!5211 = !DILocation(line: 2711, column: 25, scope: !5204)
!5212 = !DILocation(line: 2711, column: 33, scope: !5204)
!5213 = !DILocation(line: 2711, column: 37, scope: !5204)
!5214 = !DILocation(line: 2711, column: 48, scope: !5204)
!5215 = !DILocation(line: 2711, column: 31, scope: !5204)
!5216 = !DILocation(line: 2711, column: 53, scope: !5204)
!5217 = !DILocation(line: 2711, column: 57, scope: !5204)
!5218 = !DILocation(line: 2711, column: 68, scope: !5204)
!5219 = !DILocation(line: 2711, column: 51, scope: !5204)
!5220 = !DILocation(line: 2711, column: 10, scope: !5204)
!5221 = !DILocation(line: 2711, column: 3, scope: !5204)
!5222 = distinct !DISubprogram(name: "computed_goto_p", scope: !3, file: !3, line: 272, type: !5223, scopeLine: 273, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5223 = !DISubroutineType(types: !5224)
!5224 = !{!2672, !2882}
!5225 = !DILocalVariable(name: "t", arg: 1, scope: !5222, file: !3, line: 272, type: !2882)
!5226 = !DILocation(line: 272, column: 25, scope: !5222)
!5227 = !DILocation(line: 274, column: 24, scope: !5222)
!5228 = !DILocation(line: 274, column: 11, scope: !5222)
!5229 = !DILocation(line: 274, column: 27, scope: !5222)
!5230 = !DILocation(line: 275, column: 4, scope: !5222)
!5231 = !DILocation(line: 275, column: 7, scope: !5222)
!5232 = !DILocation(line: 275, column: 40, scope: !5222)
!5233 = !DILocation(line: 0, scope: !5222)
!5234 = !DILocation(line: 274, column: 10, scope: !5222)
!5235 = !DILocation(line: 274, column: 3, scope: !5222)
!5236 = distinct !DISubprogram(name: "gimple_goto_dest", scope: !581, file: !581, line: 2465, type: !4569, scopeLine: 2466, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5237 = !DILocalVariable(name: "gs", arg: 1, scope: !5236, file: !581, line: 2465, type: !4543)
!5238 = !DILocation(line: 2465, column: 32, scope: !5236)
!5239 = !DILocation(line: 2468, column: 21, scope: !5236)
!5240 = !DILocation(line: 2468, column: 10, scope: !5236)
!5241 = !DILocation(line: 2468, column: 3, scope: !5236)
!5242 = distinct !DISubprogram(name: "gimple_goto_set_dest", scope: !581, file: !581, line: 2475, type: !5117, scopeLine: 2476, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5243 = !DILocalVariable(name: "gs", arg: 1, scope: !5242, file: !581, line: 2475, type: !2882)
!5244 = !DILocation(line: 2475, column: 30, scope: !5242)
!5245 = !DILocalVariable(name: "dest", arg: 2, scope: !5242, file: !581, line: 2475, type: !2553)
!5246 = !DILocation(line: 2475, column: 39, scope: !5242)
!5247 = !DILocation(line: 2478, column: 18, scope: !5242)
!5248 = !DILocation(line: 2478, column: 25, scope: !5242)
!5249 = !DILocation(line: 2478, column: 3, scope: !5242)
!5250 = !DILocation(line: 2479, column: 1, scope: !5242)
!5251 = distinct !DISubprogram(name: "cleanup_dead_labels_eh", scope: !3, file: !3, line: 1080, type: !4413, scopeLine: 1081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5252 = !DILocalVariable(name: "lp", scope: !5251, file: !3, line: 1082, type: !3439)
!5253 = !DILocation(line: 1082, column: 18, scope: !5251)
!5254 = !DILocalVariable(name: "r", scope: !5251, file: !3, line: 1083, type: !3365)
!5255 = !DILocation(line: 1083, column: 13, scope: !5251)
!5256 = !DILocalVariable(name: "lab", scope: !5251, file: !3, line: 1084, type: !2553)
!5257 = !DILocation(line: 1084, column: 8, scope: !5251)
!5258 = !DILocalVariable(name: "i", scope: !5251, file: !3, line: 1085, type: !2548)
!5259 = !DILocation(line: 1085, column: 7, scope: !5251)
!5260 = !DILocation(line: 1087, column: 7, scope: !5261)
!5261 = distinct !DILexicalBlock(scope: !5251, file: !3, line: 1087, column: 7)
!5262 = !DILocation(line: 1087, column: 13, scope: !5261)
!5263 = !DILocation(line: 1087, column: 16, scope: !5261)
!5264 = !DILocation(line: 1087, column: 7, scope: !5251)
!5265 = !DILocation(line: 1088, column: 5, scope: !5261)
!5266 = !DILocation(line: 1090, column: 10, scope: !5267)
!5267 = distinct !DILexicalBlock(scope: !5251, file: !3, line: 1090, column: 3)
!5268 = !DILocation(line: 1090, column: 8, scope: !5267)
!5269 = !DILocation(line: 1090, column: 15, scope: !5270)
!5270 = distinct !DILexicalBlock(scope: !5267, file: !3, line: 1090, column: 3)
!5271 = !DILocation(line: 1090, column: 3, scope: !5267)
!5272 = !DILocation(line: 1091, column: 9, scope: !5273)
!5273 = distinct !DILexicalBlock(scope: !5270, file: !3, line: 1091, column: 9)
!5274 = !DILocation(line: 1091, column: 12, scope: !5273)
!5275 = !DILocation(line: 1091, column: 15, scope: !5273)
!5276 = !DILocation(line: 1091, column: 19, scope: !5273)
!5277 = !DILocation(line: 1091, column: 9, scope: !5270)
!5278 = !DILocation(line: 1093, column: 26, scope: !5279)
!5279 = distinct !DILexicalBlock(scope: !5273, file: !3, line: 1092, column: 7)
!5280 = !DILocation(line: 1093, column: 30, scope: !5279)
!5281 = !DILocation(line: 1093, column: 8, scope: !5279)
!5282 = !DILocation(line: 1093, column: 6, scope: !5279)
!5283 = !DILocation(line: 1094, column: 6, scope: !5284)
!5284 = distinct !DILexicalBlock(scope: !5279, file: !3, line: 1094, column: 6)
!5285 = !DILocation(line: 1094, column: 13, scope: !5284)
!5286 = !DILocation(line: 1094, column: 17, scope: !5284)
!5287 = !DILocation(line: 1094, column: 10, scope: !5284)
!5288 = !DILocation(line: 1094, column: 6, scope: !5279)
!5289 = !DILocation(line: 1096, column: 6, scope: !5290)
!5290 = distinct !DILexicalBlock(scope: !5284, file: !3, line: 1095, column: 4)
!5291 = !DILocation(line: 1096, column: 47, scope: !5290)
!5292 = !DILocation(line: 1097, column: 32, scope: !5290)
!5293 = !DILocation(line: 1097, column: 36, scope: !5290)
!5294 = !DILocation(line: 1097, column: 6, scope: !5290)
!5295 = !DILocation(line: 1097, column: 30, scope: !5290)
!5296 = !DILocation(line: 1098, column: 4, scope: !5290)
!5297 = !DILocation(line: 1099, column: 7, scope: !5279)
!5298 = !DILocation(line: 1090, column: 72, scope: !5270)
!5299 = !DILocation(line: 1090, column: 3, scope: !5270)
!5300 = distinct !{!5300, !5271, !5301}
!5301 = !DILocation(line: 1099, column: 7, scope: !5267)
!5302 = !DILocation(line: 1101, column: 3, scope: !5303)
!5303 = distinct !DILexicalBlock(scope: !5251, file: !3, line: 1101, column: 3)
!5304 = !DILocation(line: 1101, column: 3, scope: !5305)
!5305 = distinct !DILexicalBlock(scope: !5303, file: !3, line: 1101, column: 3)
!5306 = !DILocation(line: 1102, column: 13, scope: !5305)
!5307 = !DILocation(line: 1102, column: 16, scope: !5305)
!5308 = !DILocation(line: 1102, column: 5, scope: !5305)
!5309 = !DILocation(line: 1106, column: 2, scope: !5310)
!5310 = distinct !DILexicalBlock(scope: !5305, file: !3, line: 1103, column: 7)
!5311 = !DILocalVariable(name: "c", scope: !5312, file: !3, line: 1110, type: !5313)
!5312 = distinct !DILexicalBlock(scope: !5310, file: !3, line: 1109, column: 2)
!5313 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_catch", file: !6, line: 181, baseType: !3381)
!5314 = !DILocation(line: 1110, column: 13, scope: !5312)
!5315 = !DILocation(line: 1111, column: 13, scope: !5316)
!5316 = distinct !DILexicalBlock(scope: !5312, file: !3, line: 1111, column: 4)
!5317 = !DILocation(line: 1111, column: 16, scope: !5316)
!5318 = !DILocation(line: 1111, column: 18, scope: !5316)
!5319 = !DILocation(line: 1111, column: 25, scope: !5316)
!5320 = !DILocation(line: 1111, column: 11, scope: !5316)
!5321 = !DILocation(line: 1111, column: 9, scope: !5316)
!5322 = !DILocation(line: 1111, column: 38, scope: !5323)
!5323 = distinct !DILexicalBlock(scope: !5316, file: !3, line: 1111, column: 4)
!5324 = !DILocation(line: 1111, column: 4, scope: !5316)
!5325 = !DILocation(line: 1113, column: 14, scope: !5326)
!5326 = distinct !DILexicalBlock(scope: !5323, file: !3, line: 1112, column: 6)
!5327 = !DILocation(line: 1113, column: 17, scope: !5326)
!5328 = !DILocation(line: 1113, column: 12, scope: !5326)
!5329 = !DILocation(line: 1114, column: 12, scope: !5330)
!5330 = distinct !DILexicalBlock(scope: !5326, file: !3, line: 1114, column: 12)
!5331 = !DILocation(line: 1114, column: 12, scope: !5326)
!5332 = !DILocation(line: 1115, column: 32, scope: !5330)
!5333 = !DILocation(line: 1115, column: 14, scope: !5330)
!5334 = !DILocation(line: 1115, column: 3, scope: !5330)
!5335 = !DILocation(line: 1115, column: 6, scope: !5330)
!5336 = !DILocation(line: 1115, column: 12, scope: !5330)
!5337 = !DILocation(line: 1116, column: 6, scope: !5326)
!5338 = !DILocation(line: 1111, column: 46, scope: !5323)
!5339 = !DILocation(line: 1111, column: 49, scope: !5323)
!5340 = !DILocation(line: 1111, column: 44, scope: !5323)
!5341 = !DILocation(line: 1111, column: 4, scope: !5323)
!5342 = distinct !{!5342, !5324, !5343}
!5343 = !DILocation(line: 1116, column: 6, scope: !5316)
!5344 = !DILocation(line: 1118, column: 2, scope: !5310)
!5345 = !DILocation(line: 1121, column: 8, scope: !5310)
!5346 = !DILocation(line: 1121, column: 11, scope: !5310)
!5347 = !DILocation(line: 1121, column: 13, scope: !5310)
!5348 = !DILocation(line: 1121, column: 21, scope: !5310)
!5349 = !DILocation(line: 1121, column: 6, scope: !5310)
!5350 = !DILocation(line: 1122, column: 6, scope: !5351)
!5351 = distinct !DILexicalBlock(scope: !5310, file: !3, line: 1122, column: 6)
!5352 = !DILocation(line: 1122, column: 6, scope: !5310)
!5353 = !DILocation(line: 1123, column: 43, scope: !5351)
!5354 = !DILocation(line: 1123, column: 25, scope: !5351)
!5355 = !DILocation(line: 1123, column: 4, scope: !5351)
!5356 = !DILocation(line: 1123, column: 7, scope: !5351)
!5357 = !DILocation(line: 1123, column: 9, scope: !5351)
!5358 = !DILocation(line: 1123, column: 17, scope: !5351)
!5359 = !DILocation(line: 1123, column: 23, scope: !5351)
!5360 = !DILocation(line: 1124, column: 2, scope: !5310)
!5361 = !DILocation(line: 1125, column: 7, scope: !5310)
!5362 = distinct !{!5362, !5302, !5363}
!5363 = !DILocation(line: 1125, column: 7, scope: !5303)
!5364 = !DILocation(line: 1126, column: 1, scope: !5251)
!5365 = distinct !DISubprogram(name: "group_case_labels", scope: !3, file: !3, line: 1287, type: !4413, scopeLine: 1288, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5366 = !DILocalVariable(name: "bb", scope: !5365, file: !3, line: 1289, type: !3523)
!5367 = !DILocation(line: 1289, column: 15, scope: !5365)
!5368 = !DILocation(line: 1291, column: 3, scope: !5369)
!5369 = distinct !DILexicalBlock(scope: !5365, file: !3, line: 1291, column: 3)
!5370 = !DILocation(line: 1291, column: 3, scope: !5371)
!5371 = distinct !DILexicalBlock(scope: !5369, file: !3, line: 1291, column: 3)
!5372 = !DILocalVariable(name: "stmt", scope: !5373, file: !3, line: 1293, type: !2882)
!5373 = distinct !DILexicalBlock(scope: !5371, file: !3, line: 1292, column: 5)
!5374 = !DILocation(line: 1293, column: 14, scope: !5373)
!5375 = !DILocation(line: 1293, column: 32, scope: !5373)
!5376 = !DILocation(line: 1293, column: 21, scope: !5373)
!5377 = !DILocation(line: 1294, column: 11, scope: !5378)
!5378 = distinct !DILexicalBlock(scope: !5373, file: !3, line: 1294, column: 11)
!5379 = !DILocation(line: 1294, column: 16, scope: !5378)
!5380 = !DILocation(line: 1294, column: 32, scope: !5378)
!5381 = !DILocation(line: 1294, column: 19, scope: !5378)
!5382 = !DILocation(line: 1294, column: 38, scope: !5378)
!5383 = !DILocation(line: 1294, column: 11, scope: !5373)
!5384 = !DILocalVariable(name: "old_size", scope: !5385, file: !3, line: 1296, type: !2548)
!5385 = distinct !DILexicalBlock(scope: !5378, file: !3, line: 1295, column: 2)
!5386 = !DILocation(line: 1296, column: 8, scope: !5385)
!5387 = !DILocation(line: 1296, column: 45, scope: !5385)
!5388 = !DILocation(line: 1296, column: 19, scope: !5385)
!5389 = !DILocalVariable(name: "i", scope: !5385, file: !3, line: 1297, type: !2548)
!5390 = !DILocation(line: 1297, column: 8, scope: !5385)
!5391 = !DILocalVariable(name: "j", scope: !5385, file: !3, line: 1297, type: !2548)
!5392 = !DILocation(line: 1297, column: 11, scope: !5385)
!5393 = !DILocalVariable(name: "new_size", scope: !5385, file: !3, line: 1297, type: !2548)
!5394 = !DILocation(line: 1297, column: 14, scope: !5385)
!5395 = !DILocation(line: 1297, column: 25, scope: !5385)
!5396 = !DILocalVariable(name: "default_case", scope: !5385, file: !3, line: 1298, type: !2553)
!5397 = !DILocation(line: 1298, column: 9, scope: !5385)
!5398 = !DILocalVariable(name: "default_label", scope: !5385, file: !3, line: 1299, type: !2553)
!5399 = !DILocation(line: 1299, column: 9, scope: !5385)
!5400 = !DILocalVariable(name: "has_default", scope: !5385, file: !3, line: 1300, type: !2672)
!5401 = !DILocation(line: 1300, column: 9, scope: !5385)
!5402 = !DILocation(line: 1305, column: 9, scope: !5403)
!5403 = distinct !DILexicalBlock(scope: !5385, file: !3, line: 1305, column: 8)
!5404 = !DILocation(line: 1306, column: 8, scope: !5403)
!5405 = !DILocation(line: 1306, column: 12, scope: !5403)
!5406 = !DILocation(line: 1305, column: 8, scope: !5385)
!5407 = !DILocation(line: 1308, column: 52, scope: !5408)
!5408 = distinct !DILexicalBlock(scope: !5403, file: !3, line: 1307, column: 6)
!5409 = !DILocation(line: 1308, column: 23, scope: !5408)
!5410 = !DILocation(line: 1308, column: 21, scope: !5408)
!5411 = !DILocation(line: 1309, column: 24, scope: !5408)
!5412 = !DILocation(line: 1309, column: 22, scope: !5408)
!5413 = !DILocation(line: 1310, column: 20, scope: !5408)
!5414 = !DILocation(line: 1311, column: 6, scope: !5408)
!5415 = !DILocation(line: 1313, column: 18, scope: !5403)
!5416 = !DILocation(line: 1316, column: 8, scope: !5417)
!5417 = distinct !DILexicalBlock(scope: !5385, file: !3, line: 1316, column: 8)
!5418 = !DILocation(line: 1316, column: 8, scope: !5385)
!5419 = !DILocation(line: 1317, column: 8, scope: !5417)
!5420 = !DILocation(line: 1317, column: 6, scope: !5417)
!5421 = !DILocation(line: 1319, column: 8, scope: !5417)
!5422 = !DILocation(line: 1320, column: 4, scope: !5385)
!5423 = !DILocation(line: 1320, column: 11, scope: !5385)
!5424 = !DILocation(line: 1320, column: 15, scope: !5385)
!5425 = !DILocation(line: 1320, column: 13, scope: !5385)
!5426 = !DILocalVariable(name: "base_case", scope: !5427, file: !3, line: 1322, type: !2553)
!5427 = distinct !DILexicalBlock(scope: !5385, file: !3, line: 1321, column: 6)
!5428 = !DILocation(line: 1322, column: 13, scope: !5427)
!5429 = !DILocalVariable(name: "base_label", scope: !5427, file: !3, line: 1322, type: !2553)
!5430 = !DILocation(line: 1322, column: 24, scope: !5427)
!5431 = !DILocalVariable(name: "base_high", scope: !5427, file: !3, line: 1322, type: !2553)
!5432 = !DILocation(line: 1322, column: 36, scope: !5427)
!5433 = !DILocation(line: 1323, column: 41, scope: !5427)
!5434 = !DILocation(line: 1323, column: 47, scope: !5427)
!5435 = !DILocation(line: 1323, column: 20, scope: !5427)
!5436 = !DILocation(line: 1323, column: 18, scope: !5427)
!5437 = !DILocation(line: 1325, column: 8, scope: !5427)
!5438 = !DILocation(line: 1326, column: 21, scope: !5427)
!5439 = !DILocation(line: 1326, column: 19, scope: !5427)
!5440 = !DILocation(line: 1330, column: 12, scope: !5441)
!5441 = distinct !DILexicalBlock(scope: !5427, file: !3, line: 1330, column: 12)
!5442 = !DILocation(line: 1330, column: 26, scope: !5441)
!5443 = !DILocation(line: 1330, column: 23, scope: !5441)
!5444 = !DILocation(line: 1330, column: 12, scope: !5427)
!5445 = !DILocation(line: 1332, column: 30, scope: !5446)
!5446 = distinct !DILexicalBlock(scope: !5441, file: !3, line: 1331, column: 3)
!5447 = !DILocation(line: 1332, column: 36, scope: !5446)
!5448 = !DILocation(line: 1332, column: 5, scope: !5446)
!5449 = !DILocation(line: 1333, column: 6, scope: !5446)
!5450 = !DILocation(line: 1334, column: 13, scope: !5446)
!5451 = !DILocation(line: 1335, column: 5, scope: !5446)
!5452 = distinct !{!5452, !5422, !5453}
!5453 = !DILocation(line: 1368, column: 6, scope: !5385)
!5454 = !DILocation(line: 1338, column: 20, scope: !5427)
!5455 = !DILocation(line: 1339, column: 8, scope: !5427)
!5456 = !DILocation(line: 1340, column: 8, scope: !5427)
!5457 = !DILocation(line: 1338, column: 18, scope: !5427)
!5458 = !DILocation(line: 1341, column: 9, scope: !5427)
!5459 = !DILocation(line: 1346, column: 8, scope: !5427)
!5460 = !DILocation(line: 1346, column: 15, scope: !5427)
!5461 = !DILocation(line: 1346, column: 19, scope: !5427)
!5462 = !DILocation(line: 1346, column: 17, scope: !5427)
!5463 = !DILocalVariable(name: "merge_case", scope: !5464, file: !3, line: 1348, type: !2553)
!5464 = distinct !DILexicalBlock(scope: !5427, file: !3, line: 1347, column: 3)
!5465 = !DILocation(line: 1348, column: 10, scope: !5464)
!5466 = !DILocation(line: 1348, column: 44, scope: !5464)
!5467 = !DILocation(line: 1348, column: 50, scope: !5464)
!5468 = !DILocation(line: 1348, column: 23, scope: !5464)
!5469 = !DILocalVariable(name: "merge_label", scope: !5464, file: !3, line: 1349, type: !2553)
!5470 = !DILocation(line: 1349, column: 17, scope: !5464)
!5471 = !DILocation(line: 1349, column: 31, scope: !5464)
!5472 = !DILocalVariable(name: "t", scope: !5464, file: !3, line: 1350, type: !2553)
!5473 = !DILocation(line: 1350, column: 10, scope: !5464)
!5474 = !DILocation(line: 1350, column: 42, scope: !5464)
!5475 = !DILocation(line: 1351, column: 10, scope: !5464)
!5476 = !DILocation(line: 1350, column: 14, scope: !5464)
!5477 = !DILocation(line: 1355, column: 9, scope: !5478)
!5478 = distinct !DILexicalBlock(scope: !5464, file: !3, line: 1355, column: 9)
!5479 = !DILocation(line: 1355, column: 24, scope: !5478)
!5480 = !DILocation(line: 1355, column: 21, scope: !5478)
!5481 = !DILocation(line: 1356, column: 9, scope: !5478)
!5482 = !DILocation(line: 1356, column: 32, scope: !5478)
!5483 = !DILocation(line: 1356, column: 55, scope: !5478)
!5484 = !DILocation(line: 1356, column: 12, scope: !5478)
!5485 = !DILocation(line: 1355, column: 9, scope: !5464)
!5486 = !DILocation(line: 1358, column: 21, scope: !5487)
!5487 = distinct !DILexicalBlock(scope: !5478, file: !3, line: 1357, column: 7)
!5488 = !DILocation(line: 1359, column: 4, scope: !5487)
!5489 = !DILocation(line: 1359, column: 29, scope: !5487)
!5490 = !DILocation(line: 1358, column: 19, scope: !5487)
!5491 = !DILocation(line: 1360, column: 33, scope: !5487)
!5492 = !DILocation(line: 1360, column: 9, scope: !5487)
!5493 = !DILocation(line: 1360, column: 31, scope: !5487)
!5494 = !DILocation(line: 1361, column: 34, scope: !5487)
!5495 = !DILocation(line: 1361, column: 40, scope: !5487)
!5496 = !DILocation(line: 1361, column: 9, scope: !5487)
!5497 = !DILocation(line: 1362, column: 17, scope: !5487)
!5498 = !DILocation(line: 1363, column: 10, scope: !5487)
!5499 = !DILocation(line: 1364, column: 7, scope: !5487)
!5500 = !DILocation(line: 1366, column: 7, scope: !5478)
!5501 = distinct !{!5501, !5459, !5502}
!5502 = !DILocation(line: 1367, column: 3, scope: !5427)
!5503 = !DILocation(line: 1372, column: 11, scope: !5504)
!5504 = distinct !DILexicalBlock(scope: !5385, file: !3, line: 1372, column: 4)
!5505 = !DILocation(line: 1372, column: 18, scope: !5504)
!5506 = !DILocation(line: 1372, column: 9, scope: !5504)
!5507 = !DILocation(line: 1372, column: 23, scope: !5508)
!5508 = distinct !DILexicalBlock(scope: !5504, file: !3, line: 1372, column: 4)
!5509 = !DILocation(line: 1372, column: 27, scope: !5508)
!5510 = !DILocation(line: 1372, column: 25, scope: !5508)
!5511 = !DILocation(line: 1372, column: 4, scope: !5504)
!5512 = !DILocation(line: 1374, column: 8, scope: !5513)
!5513 = distinct !DILexicalBlock(scope: !5508, file: !3, line: 1373, column: 6)
!5514 = !DILocation(line: 1374, column: 38, scope: !5513)
!5515 = !DILocation(line: 1374, column: 44, scope: !5513)
!5516 = !DILocation(line: 1374, column: 17, scope: !5513)
!5517 = !DILocation(line: 1374, column: 15, scope: !5513)
!5518 = !DILocation(line: 1375, column: 4, scope: !5513)
!5519 = distinct !{!5519, !5512, !5518}
!5520 = !DILocation(line: 1376, column: 33, scope: !5513)
!5521 = !DILocation(line: 1376, column: 39, scope: !5513)
!5522 = !DILocation(line: 1377, column: 33, scope: !5513)
!5523 = !DILocation(line: 1377, column: 40, scope: !5513)
!5524 = !DILocation(line: 1377, column: 12, scope: !5513)
!5525 = !DILocation(line: 1376, column: 8, scope: !5513)
!5526 = !DILocation(line: 1378, column: 6, scope: !5513)
!5527 = !DILocation(line: 1372, column: 38, scope: !5508)
!5528 = !DILocation(line: 1372, column: 4, scope: !5508)
!5529 = distinct !{!5529, !5511, !5530}
!5530 = !DILocation(line: 1378, column: 6, scope: !5504)
!5531 = !DILocation(line: 1380, column: 4, scope: !5385)
!5532 = !DILocation(line: 1381, column: 34, scope: !5385)
!5533 = !DILocation(line: 1381, column: 40, scope: !5385)
!5534 = !DILocation(line: 1381, column: 4, scope: !5385)
!5535 = !DILocation(line: 1382, column: 2, scope: !5385)
!5536 = !DILocation(line: 1383, column: 5, scope: !5373)
!5537 = distinct !{!5537, !5368, !5538}
!5538 = !DILocation(line: 1383, column: 5, scope: !5369)
!5539 = !DILocation(line: 1384, column: 1, scope: !5365)
!5540 = distinct !DISubprogram(name: "gimple_switch_default_label", scope: !581, file: !581, line: 3233, type: !4569, scopeLine: 3234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5541 = !DILocalVariable(name: "gs", arg: 1, scope: !5540, file: !581, line: 3233, type: !4543)
!5542 = !DILocation(line: 3233, column: 43, scope: !5540)
!5543 = !DILocation(line: 3235, column: 31, scope: !5540)
!5544 = !DILocation(line: 3235, column: 10, scope: !5540)
!5545 = !DILocation(line: 3235, column: 3, scope: !5540)
!5546 = distinct !DISubprogram(name: "gimple_switch_set_label", scope: !581, file: !581, line: 3222, type: !5547, scopeLine: 3223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5547 = !DISubroutineType(types: !5548)
!5548 = !{null, !2882, !7, !2553}
!5549 = !DILocalVariable(name: "gs", arg: 1, scope: !5546, file: !581, line: 3222, type: !2882)
!5550 = !DILocation(line: 3222, column: 33, scope: !5546)
!5551 = !DILocalVariable(name: "index", arg: 2, scope: !5546, file: !581, line: 3222, type: !7)
!5552 = !DILocation(line: 3222, column: 46, scope: !5546)
!5553 = !DILocalVariable(name: "label", arg: 3, scope: !5546, file: !581, line: 3222, type: !2553)
!5554 = !DILocation(line: 3222, column: 58, scope: !5546)
!5555 = !DILocation(line: 3225, column: 3, scope: !5546)
!5556 = !DILocation(line: 3226, column: 3, scope: !5546)
!5557 = !DILocation(line: 3227, column: 18, scope: !5546)
!5558 = !DILocation(line: 3227, column: 22, scope: !5546)
!5559 = !DILocation(line: 3227, column: 28, scope: !5546)
!5560 = !DILocation(line: 3227, column: 33, scope: !5546)
!5561 = !DILocation(line: 3227, column: 3, scope: !5546)
!5562 = !DILocation(line: 3228, column: 1, scope: !5546)
!5563 = distinct !DISubprogram(name: "gimple_switch_set_num_labels", scope: !581, file: !581, line: 3170, type: !5564, scopeLine: 3171, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5564 = !DISubroutineType(types: !5565)
!5565 = !{null, !2882, !7}
!5566 = !DILocalVariable(name: "g", arg: 1, scope: !5563, file: !581, line: 3170, type: !2882)
!5567 = !DILocation(line: 3170, column: 38, scope: !5563)
!5568 = !DILocalVariable(name: "nlabels", arg: 2, scope: !5563, file: !581, line: 3170, type: !7)
!5569 = !DILocation(line: 3170, column: 50, scope: !5563)
!5570 = !DILocation(line: 3173, column: 23, scope: !5563)
!5571 = !DILocation(line: 3173, column: 26, scope: !5563)
!5572 = !DILocation(line: 3173, column: 34, scope: !5563)
!5573 = !DILocation(line: 3173, column: 3, scope: !5563)
!5574 = !DILocation(line: 3174, column: 1, scope: !5563)
!5575 = distinct !DISubprogram(name: "has_zero_uses_1", scope: !3, file: !3, line: 1454, type: !5576, scopeLine: 1455, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5576 = !DISubroutineType(types: !5577)
!5577 = !{!2672, !5578}
!5578 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5579, size: 64)
!5579 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4054)
!5580 = !DILocalVariable(name: "head", arg: 1, scope: !5575, file: !3, line: 1454, type: !5578)
!5581 = !DILocation(line: 1454, column: 43, scope: !5575)
!5582 = !DILocalVariable(name: "ptr", scope: !5575, file: !3, line: 1456, type: !5578)
!5583 = !DILocation(line: 1456, column: 28, scope: !5575)
!5584 = !DILocation(line: 1458, column: 14, scope: !5585)
!5585 = distinct !DILexicalBlock(scope: !5575, file: !3, line: 1458, column: 3)
!5586 = !DILocation(line: 1458, column: 20, scope: !5585)
!5587 = !DILocation(line: 1458, column: 12, scope: !5585)
!5588 = !DILocation(line: 1458, column: 8, scope: !5585)
!5589 = !DILocation(line: 1458, column: 26, scope: !5590)
!5590 = distinct !DILexicalBlock(scope: !5585, file: !3, line: 1458, column: 3)
!5591 = !DILocation(line: 1458, column: 33, scope: !5590)
!5592 = !DILocation(line: 1458, column: 30, scope: !5590)
!5593 = !DILocation(line: 1458, column: 3, scope: !5585)
!5594 = !DILocation(line: 1459, column: 27, scope: !5595)
!5595 = distinct !DILexicalBlock(scope: !5590, file: !3, line: 1459, column: 9)
!5596 = !DILocation(line: 1459, column: 10, scope: !5595)
!5597 = !DILocation(line: 1459, column: 9, scope: !5590)
!5598 = !DILocation(line: 1460, column: 7, scope: !5595)
!5599 = !DILocation(line: 1459, column: 41, scope: !5595)
!5600 = !DILocation(line: 1458, column: 45, scope: !5590)
!5601 = !DILocation(line: 1458, column: 50, scope: !5590)
!5602 = !DILocation(line: 1458, column: 43, scope: !5590)
!5603 = !DILocation(line: 1458, column: 3, scope: !5590)
!5604 = distinct !{!5604, !5593, !5605}
!5605 = !DILocation(line: 1460, column: 14, scope: !5585)
!5606 = !DILocation(line: 1462, column: 3, scope: !5575)
!5607 = !DILocation(line: 1463, column: 1, scope: !5575)
!5608 = distinct !DISubprogram(name: "is_gimple_debug", scope: !581, file: !581, line: 3249, type: !5609, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5609 = !DISubroutineType(types: !5610)
!5610 = !{!2672, !4543}
!5611 = !DILocalVariable(name: "gs", arg: 1, scope: !5608, file: !581, line: 3249, type: !4543)
!5612 = !DILocation(line: 3249, column: 31, scope: !5608)
!5613 = !DILocation(line: 3251, column: 23, scope: !5608)
!5614 = !DILocation(line: 3251, column: 10, scope: !5608)
!5615 = !DILocation(line: 3251, column: 27, scope: !5608)
!5616 = !DILocation(line: 3251, column: 3, scope: !5608)
!5617 = distinct !DISubprogram(name: "single_imm_use_1", scope: !3, file: !3, line: 1469, type: !5618, scopeLine: 1471, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5618 = !DISubroutineType(types: !5619)
!5619 = !{!2672, !5578, !5620, !5621}
!5620 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4052, size: 64)
!5621 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2882, size: 64)
!5622 = !DILocalVariable(name: "head", arg: 1, scope: !5617, file: !3, line: 1469, type: !5578)
!5623 = !DILocation(line: 1469, column: 44, scope: !5617)
!5624 = !DILocalVariable(name: "use_p", arg: 2, scope: !5617, file: !3, line: 1470, type: !5620)
!5625 = !DILocation(line: 1470, column: 20, scope: !5617)
!5626 = !DILocalVariable(name: "stmt", arg: 3, scope: !5617, file: !3, line: 1470, type: !5621)
!5627 = !DILocation(line: 1470, column: 35, scope: !5617)
!5628 = !DILocalVariable(name: "ptr", scope: !5617, file: !3, line: 1472, type: !4053)
!5629 = !DILocation(line: 1472, column: 22, scope: !5617)
!5630 = !DILocalVariable(name: "single_use", scope: !5617, file: !3, line: 1472, type: !4053)
!5631 = !DILocation(line: 1472, column: 28, scope: !5617)
!5632 = !DILocation(line: 1474, column: 14, scope: !5633)
!5633 = distinct !DILexicalBlock(scope: !5617, file: !3, line: 1474, column: 3)
!5634 = !DILocation(line: 1474, column: 20, scope: !5633)
!5635 = !DILocation(line: 1474, column: 12, scope: !5633)
!5636 = !DILocation(line: 1474, column: 8, scope: !5633)
!5637 = !DILocation(line: 1474, column: 26, scope: !5638)
!5638 = distinct !DILexicalBlock(scope: !5633, file: !3, line: 1474, column: 3)
!5639 = !DILocation(line: 1474, column: 33, scope: !5638)
!5640 = !DILocation(line: 1474, column: 30, scope: !5638)
!5641 = !DILocation(line: 1474, column: 3, scope: !5633)
!5642 = !DILocation(line: 1475, column: 27, scope: !5643)
!5643 = distinct !DILexicalBlock(scope: !5638, file: !3, line: 1475, column: 9)
!5644 = !DILocation(line: 1475, column: 10, scope: !5643)
!5645 = !DILocation(line: 1475, column: 9, scope: !5638)
!5646 = !DILocation(line: 1477, column: 6, scope: !5647)
!5647 = distinct !DILexicalBlock(scope: !5648, file: !3, line: 1477, column: 6)
!5648 = distinct !DILexicalBlock(scope: !5643, file: !3, line: 1476, column: 7)
!5649 = !DILocation(line: 1477, column: 6, scope: !5648)
!5650 = !DILocation(line: 1479, column: 17, scope: !5651)
!5651 = distinct !DILexicalBlock(scope: !5647, file: !3, line: 1478, column: 4)
!5652 = !DILocation(line: 1480, column: 6, scope: !5651)
!5653 = !DILocation(line: 1482, column: 15, scope: !5648)
!5654 = !DILocation(line: 1482, column: 13, scope: !5648)
!5655 = !DILocation(line: 1483, column: 7, scope: !5648)
!5656 = !DILocation(line: 1475, column: 41, scope: !5643)
!5657 = !DILocation(line: 1474, column: 45, scope: !5638)
!5658 = !DILocation(line: 1474, column: 50, scope: !5638)
!5659 = !DILocation(line: 1474, column: 43, scope: !5638)
!5660 = !DILocation(line: 1474, column: 3, scope: !5638)
!5661 = distinct !{!5661, !5641, !5662}
!5662 = !DILocation(line: 1483, column: 7, scope: !5633)
!5663 = !DILocation(line: 1485, column: 7, scope: !5664)
!5664 = distinct !DILexicalBlock(scope: !5617, file: !3, line: 1485, column: 7)
!5665 = !DILocation(line: 1485, column: 7, scope: !5617)
!5666 = !DILocation(line: 1486, column: 14, scope: !5664)
!5667 = !DILocation(line: 1486, column: 6, scope: !5664)
!5668 = !DILocation(line: 1486, column: 12, scope: !5664)
!5669 = !DILocation(line: 1486, column: 5, scope: !5664)
!5670 = !DILocation(line: 1488, column: 7, scope: !5671)
!5671 = distinct !DILexicalBlock(scope: !5617, file: !3, line: 1488, column: 7)
!5672 = !DILocation(line: 1488, column: 7, scope: !5617)
!5673 = !DILocation(line: 1489, column: 13, scope: !5671)
!5674 = !DILocation(line: 1489, column: 26, scope: !5671)
!5675 = !DILocation(line: 1489, column: 38, scope: !5671)
!5676 = !DILocation(line: 1489, column: 42, scope: !5671)
!5677 = !DILocation(line: 1489, column: 6, scope: !5671)
!5678 = !DILocation(line: 1489, column: 11, scope: !5671)
!5679 = !DILocation(line: 1489, column: 5, scope: !5671)
!5680 = !DILocation(line: 1491, column: 12, scope: !5617)
!5681 = !DILocation(line: 1491, column: 11, scope: !5617)
!5682 = !DILocation(line: 1491, column: 10, scope: !5617)
!5683 = !DILocation(line: 1491, column: 3, scope: !5617)
!5684 = distinct !DISubprogram(name: "replace_uses_by", scope: !3, file: !3, line: 1497, type: !5685, scopeLine: 1498, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5685 = !DISubroutineType(types: !5686)
!5686 = !{null, !2553, !2553}
!5687 = !DILocalVariable(name: "name", arg: 1, scope: !5684, file: !3, line: 1497, type: !2553)
!5688 = !DILocation(line: 1497, column: 23, scope: !5684)
!5689 = !DILocalVariable(name: "val", arg: 2, scope: !5684, file: !3, line: 1497, type: !2553)
!5690 = !DILocation(line: 1497, column: 34, scope: !5684)
!5691 = !DILocalVariable(name: "imm_iter", scope: !5684, file: !3, line: 1499, type: !5692)
!5692 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !3308, line: 249, baseType: !5693)
!5693 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !3308, line: 238, size: 448, elements: !5694)
!5694 = !{!5695, !5696, !5697, !5698}
!5695 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !5693, file: !3308, line: 241, baseType: !4053, size: 64)
!5696 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !5693, file: !3308, line: 243, baseType: !4053, size: 64, offset: 64)
!5697 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !5693, file: !3308, line: 245, baseType: !4054, size: 256, offset: 128)
!5698 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !5693, file: !3308, line: 248, baseType: !4053, size: 64, offset: 384)
!5699 = !DILocation(line: 1499, column: 20, scope: !5684)
!5700 = !DILocalVariable(name: "use", scope: !5684, file: !3, line: 1500, type: !4052)
!5701 = !DILocation(line: 1500, column: 17, scope: !5684)
!5702 = !DILocalVariable(name: "stmt", scope: !5684, file: !3, line: 1501, type: !2882)
!5703 = !DILocation(line: 1501, column: 10, scope: !5684)
!5704 = !DILocalVariable(name: "e", scope: !5684, file: !3, line: 1502, type: !2862)
!5705 = !DILocation(line: 1502, column: 8, scope: !5684)
!5706 = !DILocation(line: 1504, column: 3, scope: !5707)
!5707 = distinct !DILexicalBlock(scope: !5684, file: !3, line: 1504, column: 3)
!5708 = !DILocation(line: 1504, column: 3, scope: !5709)
!5709 = distinct !DILexicalBlock(scope: !5707, file: !3, line: 1504, column: 3)
!5710 = !DILocation(line: 1506, column: 7, scope: !5711)
!5711 = distinct !DILexicalBlock(scope: !5712, file: !3, line: 1506, column: 7)
!5712 = distinct !DILexicalBlock(scope: !5709, file: !3, line: 1505, column: 5)
!5713 = !DILocation(line: 1506, column: 7, scope: !5714)
!5714 = distinct !DILexicalBlock(scope: !5711, file: !3, line: 1506, column: 7)
!5715 = !DILocation(line: 1508, column: 17, scope: !5716)
!5716 = distinct !DILexicalBlock(scope: !5714, file: !3, line: 1507, column: 9)
!5717 = !DILocation(line: 1508, column: 22, scope: !5716)
!5718 = !DILocation(line: 1508, column: 4, scope: !5716)
!5719 = !DILocation(line: 1510, column: 21, scope: !5720)
!5720 = distinct !DILexicalBlock(scope: !5716, file: !3, line: 1510, column: 8)
!5721 = !DILocation(line: 1510, column: 8, scope: !5720)
!5722 = !DILocation(line: 1510, column: 27, scope: !5720)
!5723 = !DILocation(line: 1510, column: 8, scope: !5716)
!5724 = !DILocation(line: 1512, column: 33, scope: !5725)
!5725 = distinct !DILexicalBlock(scope: !5720, file: !3, line: 1511, column: 6)
!5726 = !DILocation(line: 1512, column: 39, scope: !5725)
!5727 = !DILocation(line: 1512, column: 12, scope: !5725)
!5728 = !DILocation(line: 1512, column: 10, scope: !5725)
!5729 = !DILocation(line: 1513, column: 12, scope: !5730)
!5730 = distinct !DILexicalBlock(scope: !5725, file: !3, line: 1513, column: 12)
!5731 = !DILocation(line: 1513, column: 15, scope: !5730)
!5732 = !DILocation(line: 1513, column: 21, scope: !5730)
!5733 = !DILocation(line: 1513, column: 12, scope: !5725)
!5734 = !DILocation(line: 1518, column: 5, scope: !5735)
!5735 = distinct !DILexicalBlock(scope: !5730, file: !3, line: 1514, column: 3)
!5736 = !DILocation(line: 1519, column: 5, scope: !5735)
!5737 = !DILocation(line: 1519, column: 43, scope: !5735)
!5738 = !DILocation(line: 1520, column: 3, scope: !5735)
!5739 = !DILocation(line: 1521, column: 6, scope: !5725)
!5740 = !DILocation(line: 1522, column: 2, scope: !5716)
!5741 = distinct !{!5741, !5710, !5742}
!5742 = !DILocation(line: 1522, column: 2, scope: !5711)
!5743 = !DILocation(line: 1524, column: 24, scope: !5744)
!5744 = distinct !DILexicalBlock(scope: !5712, file: !3, line: 1524, column: 11)
!5745 = !DILocation(line: 1524, column: 11, scope: !5744)
!5746 = !DILocation(line: 1524, column: 30, scope: !5744)
!5747 = !DILocation(line: 1524, column: 11, scope: !5712)
!5748 = !DILocalVariable(name: "i", scope: !5749, file: !3, line: 1526, type: !3027)
!5749 = distinct !DILexicalBlock(scope: !5744, file: !3, line: 1525, column: 2)
!5750 = !DILocation(line: 1526, column: 11, scope: !5749)
!5751 = !DILocation(line: 1528, column: 23, scope: !5749)
!5752 = !DILocation(line: 1528, column: 4, scope: !5749)
!5753 = !DILocation(line: 1529, column: 8, scope: !5754)
!5754 = distinct !DILexicalBlock(scope: !5749, file: !3, line: 1529, column: 8)
!5755 = !DILocation(line: 1529, column: 8, scope: !5749)
!5756 = !DILocation(line: 1530, column: 22, scope: !5754)
!5757 = !DILocation(line: 1530, column: 57, scope: !5754)
!5758 = !DILocation(line: 1530, column: 46, scope: !5754)
!5759 = !DILocation(line: 1530, column: 64, scope: !5754)
!5760 = !DILocation(line: 1530, column: 6, scope: !5754)
!5761 = !DILocation(line: 1533, column: 11, scope: !5762)
!5762 = distinct !DILexicalBlock(scope: !5749, file: !3, line: 1533, column: 4)
!5763 = !DILocation(line: 1533, column: 9, scope: !5762)
!5764 = !DILocation(line: 1533, column: 16, scope: !5765)
!5765 = distinct !DILexicalBlock(scope: !5762, file: !3, line: 1533, column: 4)
!5766 = !DILocation(line: 1533, column: 36, scope: !5765)
!5767 = !DILocation(line: 1533, column: 20, scope: !5765)
!5768 = !DILocation(line: 1533, column: 18, scope: !5765)
!5769 = !DILocation(line: 1533, column: 4, scope: !5762)
!5770 = !DILocalVariable(name: "op", scope: !5771, file: !3, line: 1535, type: !2553)
!5771 = distinct !DILexicalBlock(scope: !5765, file: !3, line: 1534, column: 6)
!5772 = !DILocation(line: 1535, column: 13, scope: !5771)
!5773 = !DILocation(line: 1535, column: 29, scope: !5771)
!5774 = !DILocation(line: 1535, column: 35, scope: !5771)
!5775 = !DILocation(line: 1535, column: 18, scope: !5771)
!5776 = !DILocation(line: 1539, column: 12, scope: !5777)
!5777 = distinct !DILexicalBlock(scope: !5771, file: !3, line: 1539, column: 12)
!5778 = !DILocation(line: 1539, column: 15, scope: !5777)
!5779 = !DILocation(line: 1539, column: 18, scope: !5777)
!5780 = !DILocation(line: 1539, column: 33, scope: !5777)
!5781 = !DILocation(line: 1539, column: 12, scope: !5771)
!5782 = !DILocation(line: 1540, column: 43, scope: !5777)
!5783 = !DILocation(line: 1540, column: 3, scope: !5777)
!5784 = !DILocation(line: 1541, column: 6, scope: !5771)
!5785 = !DILocation(line: 1533, column: 44, scope: !5765)
!5786 = !DILocation(line: 1533, column: 4, scope: !5765)
!5787 = distinct !{!5787, !5769, !5788}
!5788 = !DILocation(line: 1541, column: 6, scope: !5762)
!5789 = !DILocation(line: 1543, column: 36, scope: !5749)
!5790 = !DILocation(line: 1543, column: 42, scope: !5749)
!5791 = !DILocation(line: 1543, column: 4, scope: !5749)
!5792 = !DILocation(line: 1544, column: 17, scope: !5749)
!5793 = !DILocation(line: 1544, column: 4, scope: !5749)
!5794 = !DILocation(line: 1545, column: 2, scope: !5749)
!5795 = !DILocation(line: 1546, column: 5, scope: !5712)
!5796 = distinct !{!5796, !5706, !5797}
!5797 = !DILocation(line: 1546, column: 5, scope: !5707)
!5798 = !DILocation(line: 1548, column: 3, scope: !5684)
!5799 = !DILocation(line: 1551, column: 7, scope: !5800)
!5800 = distinct !DILexicalBlock(scope: !5684, file: !3, line: 1551, column: 7)
!5801 = !DILocation(line: 1551, column: 7, scope: !5684)
!5802 = !DILocalVariable(name: "loop", scope: !5803, file: !3, line: 1553, type: !3097)
!5803 = distinct !DILexicalBlock(scope: !5800, file: !3, line: 1552, column: 5)
!5804 = !DILocation(line: 1553, column: 20, scope: !5803)
!5805 = !DILocalVariable(name: "li", scope: !5803, file: !3, line: 1554, type: !5806)
!5806 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_iterator", file: !337, line: 515, baseType: !5807)
!5807 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !337, line: 508, size: 128, elements: !5808)
!5808 = !{!5809, !5810}
!5809 = !DIDerivedType(tag: DW_TAG_member, name: "to_visit", scope: !5807, file: !337, line: 511, baseType: !4058, size: 64)
!5810 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !5807, file: !337, line: 514, baseType: !7, size: 32, offset: 64)
!5811 = !DILocation(line: 1554, column: 21, scope: !5803)
!5812 = !DILocation(line: 1556, column: 7, scope: !5813)
!5813 = distinct !DILexicalBlock(scope: !5803, file: !3, line: 1556, column: 7)
!5814 = !DILocation(line: 1556, column: 7, scope: !5815)
!5815 = distinct !DILexicalBlock(scope: !5813, file: !3, line: 1556, column: 7)
!5816 = !DILocation(line: 1558, column: 29, scope: !5817)
!5817 = distinct !DILexicalBlock(scope: !5815, file: !3, line: 1557, column: 2)
!5818 = !DILocation(line: 1558, column: 35, scope: !5817)
!5819 = !DILocation(line: 1558, column: 41, scope: !5817)
!5820 = !DILocation(line: 1558, column: 4, scope: !5817)
!5821 = !DILocation(line: 1559, column: 2, scope: !5817)
!5822 = distinct !{!5822, !5812, !5823}
!5823 = !DILocation(line: 1559, column: 2, scope: !5813)
!5824 = !DILocation(line: 1560, column: 5, scope: !5803)
!5825 = !DILocation(line: 1561, column: 1, scope: !5684)
!5826 = distinct !DISubprogram(name: "first_imm_use_stmt", scope: !5827, file: !5827, line: 1058, type: !5828, scopeLine: 1059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5827 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!5828 = !DISubroutineType(types: !5829)
!5829 = !{!2882, !5830, !2553}
!5830 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5692, size: 64)
!5831 = !DILocalVariable(name: "imm", arg: 1, scope: !5826, file: !5827, line: 1058, type: !5830)
!5832 = !DILocation(line: 1058, column: 39, scope: !5826)
!5833 = !DILocalVariable(name: "var", arg: 2, scope: !5826, file: !5827, line: 1058, type: !2553)
!5834 = !DILocation(line: 1058, column: 49, scope: !5826)
!5835 = !DILocation(line: 1060, column: 18, scope: !5826)
!5836 = !DILocation(line: 1060, column: 3, scope: !5826)
!5837 = !DILocation(line: 1060, column: 8, scope: !5826)
!5838 = !DILocation(line: 1060, column: 14, scope: !5826)
!5839 = !DILocation(line: 1061, column: 18, scope: !5826)
!5840 = !DILocation(line: 1061, column: 23, scope: !5826)
!5841 = !DILocation(line: 1061, column: 30, scope: !5826)
!5842 = !DILocation(line: 1061, column: 3, scope: !5826)
!5843 = !DILocation(line: 1061, column: 8, scope: !5826)
!5844 = !DILocation(line: 1061, column: 16, scope: !5826)
!5845 = !DILocation(line: 1062, column: 3, scope: !5826)
!5846 = !DILocation(line: 1062, column: 8, scope: !5826)
!5847 = !DILocation(line: 1062, column: 22, scope: !5826)
!5848 = !DILocation(line: 1067, column: 3, scope: !5826)
!5849 = !DILocation(line: 1067, column: 8, scope: !5826)
!5850 = !DILocation(line: 1067, column: 18, scope: !5826)
!5851 = !DILocation(line: 1067, column: 23, scope: !5826)
!5852 = !DILocation(line: 1068, column: 3, scope: !5826)
!5853 = !DILocation(line: 1068, column: 8, scope: !5826)
!5854 = !DILocation(line: 1068, column: 18, scope: !5826)
!5855 = !DILocation(line: 1068, column: 23, scope: !5826)
!5856 = !DILocation(line: 1069, column: 3, scope: !5826)
!5857 = !DILocation(line: 1069, column: 8, scope: !5826)
!5858 = !DILocation(line: 1069, column: 18, scope: !5826)
!5859 = !DILocation(line: 1069, column: 22, scope: !5826)
!5860 = !DILocation(line: 1069, column: 27, scope: !5826)
!5861 = !DILocation(line: 1070, column: 3, scope: !5826)
!5862 = !DILocation(line: 1070, column: 8, scope: !5826)
!5863 = !DILocation(line: 1070, column: 18, scope: !5826)
!5864 = !DILocation(line: 1070, column: 22, scope: !5826)
!5865 = !DILocation(line: 1072, column: 27, scope: !5866)
!5866 = distinct !DILexicalBlock(scope: !5826, file: !5827, line: 1072, column: 7)
!5867 = !DILocation(line: 1072, column: 7, scope: !5866)
!5868 = !DILocation(line: 1072, column: 7, scope: !5826)
!5869 = !DILocation(line: 1073, column: 5, scope: !5866)
!5870 = !DILocation(line: 1075, column: 25, scope: !5826)
!5871 = !DILocation(line: 1075, column: 30, scope: !5826)
!5872 = !DILocation(line: 1075, column: 39, scope: !5826)
!5873 = !DILocation(line: 1075, column: 3, scope: !5826)
!5874 = !DILocation(line: 1077, column: 10, scope: !5826)
!5875 = !DILocation(line: 1077, column: 3, scope: !5826)
!5876 = !DILocation(line: 1078, column: 1, scope: !5826)
!5877 = distinct !DISubprogram(name: "end_imm_use_stmt_p", scope: !5827, file: !5827, line: 969, type: !5878, scopeLine: 970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5878 = !DISubroutineType(types: !5879)
!5879 = !{!2672, !5880}
!5880 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5881, size: 64)
!5881 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5692)
!5882 = !DILocalVariable(name: "imm", arg: 1, scope: !5877, file: !5827, line: 969, type: !5880)
!5883 = !DILocation(line: 969, column: 45, scope: !5877)
!5884 = !DILocation(line: 971, column: 11, scope: !5877)
!5885 = !DILocation(line: 971, column: 16, scope: !5877)
!5886 = !DILocation(line: 971, column: 27, scope: !5877)
!5887 = !DILocation(line: 971, column: 32, scope: !5877)
!5888 = !DILocation(line: 971, column: 24, scope: !5877)
!5889 = !DILocation(line: 971, column: 10, scope: !5877)
!5890 = !DILocation(line: 971, column: 3, scope: !5877)
!5891 = distinct !DISubprogram(name: "first_imm_use_on_stmt", scope: !5827, file: !5827, line: 1101, type: !5892, scopeLine: 1102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5892 = !DISubroutineType(types: !5893)
!5893 = !{!4052, !5830}
!5894 = !DILocalVariable(name: "imm", arg: 1, scope: !5891, file: !5827, line: 1101, type: !5830)
!5895 = !DILocation(line: 1101, column: 42, scope: !5891)
!5896 = !DILocation(line: 1103, column: 24, scope: !5891)
!5897 = !DILocation(line: 1103, column: 29, scope: !5891)
!5898 = !DILocation(line: 1103, column: 38, scope: !5891)
!5899 = !DILocation(line: 1103, column: 3, scope: !5891)
!5900 = !DILocation(line: 1103, column: 8, scope: !5891)
!5901 = !DILocation(line: 1103, column: 22, scope: !5891)
!5902 = !DILocation(line: 1104, column: 10, scope: !5891)
!5903 = !DILocation(line: 1104, column: 15, scope: !5891)
!5904 = !DILocation(line: 1104, column: 3, scope: !5891)
!5905 = distinct !DISubprogram(name: "end_imm_use_on_stmt_p", scope: !5827, file: !5827, line: 1110, type: !5878, scopeLine: 1111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5906 = !DILocalVariable(name: "imm", arg: 1, scope: !5905, file: !5827, line: 1110, type: !5880)
!5907 = !DILocation(line: 1110, column: 48, scope: !5905)
!5908 = !DILocation(line: 1112, column: 11, scope: !5905)
!5909 = !DILocation(line: 1112, column: 16, scope: !5905)
!5910 = !DILocation(line: 1112, column: 29, scope: !5905)
!5911 = !DILocation(line: 1112, column: 34, scope: !5905)
!5912 = !DILocation(line: 1112, column: 24, scope: !5905)
!5913 = !DILocation(line: 1112, column: 10, scope: !5905)
!5914 = !DILocation(line: 1112, column: 3, scope: !5905)
!5915 = distinct !DISubprogram(name: "gimple_phi_arg_edge", scope: !5827, file: !5827, line: 467, type: !5916, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5916 = !DISubroutineType(types: !5917)
!5917 = !{!2862, !2882, !3027}
!5918 = !DILocalVariable(name: "gs", arg: 1, scope: !5915, file: !5827, line: 467, type: !2882)
!5919 = !DILocation(line: 467, column: 29, scope: !5915)
!5920 = !DILocalVariable(name: "i", arg: 2, scope: !5915, file: !5827, line: 467, type: !3027)
!5921 = !DILocation(line: 467, column: 40, scope: !5915)
!5922 = !DILocation(line: 469, column: 10, scope: !5915)
!5923 = !DILocation(line: 469, column: 3, scope: !5915)
!5924 = distinct !DISubprogram(name: "phi_arg_index_from_use", scope: !5827, file: !5827, line: 533, type: !5925, scopeLine: 534, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5925 = !DISubroutineType(types: !5926)
!5926 = !{!2548, !4052}
!5927 = !DILocalVariable(name: "use", arg: 1, scope: !5924, file: !5827, line: 533, type: !4052)
!5928 = !DILocation(line: 533, column: 39, scope: !5924)
!5929 = !DILocalVariable(name: "element", scope: !5924, file: !5827, line: 535, type: !4055)
!5930 = !DILocation(line: 535, column: 21, scope: !5924)
!5931 = !DILocalVariable(name: "root", scope: !5924, file: !5827, line: 535, type: !4055)
!5932 = !DILocation(line: 535, column: 31, scope: !5924)
!5933 = !DILocalVariable(name: "index", scope: !5924, file: !5827, line: 536, type: !3027)
!5934 = !DILocation(line: 536, column: 10, scope: !5924)
!5935 = !DILocalVariable(name: "phi", scope: !5924, file: !5827, line: 537, type: !2882)
!5936 = !DILocation(line: 537, column: 10, scope: !5924)
!5937 = !DILocation(line: 543, column: 9, scope: !5924)
!5938 = !DILocation(line: 543, column: 7, scope: !5924)
!5939 = !DILocation(line: 544, column: 3, scope: !5924)
!5940 = !DILocation(line: 546, column: 33, scope: !5924)
!5941 = !DILocation(line: 546, column: 13, scope: !5924)
!5942 = !DILocation(line: 546, column: 11, scope: !5924)
!5943 = !DILocation(line: 547, column: 26, scope: !5924)
!5944 = !DILocation(line: 547, column: 10, scope: !5924)
!5945 = !DILocation(line: 547, column: 8, scope: !5924)
!5946 = !DILocation(line: 548, column: 11, scope: !5924)
!5947 = !DILocation(line: 548, column: 21, scope: !5924)
!5948 = !DILocation(line: 548, column: 19, scope: !5924)
!5949 = !DILocation(line: 548, column: 9, scope: !5924)
!5950 = !DILocation(line: 558, column: 9, scope: !5924)
!5951 = !DILocation(line: 558, column: 2, scope: !5924)
!5952 = distinct !DISubprogram(name: "next_imm_use_on_stmt", scope: !5827, file: !5827, line: 1118, type: !5892, scopeLine: 1119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5953 = !DILocalVariable(name: "imm", arg: 1, scope: !5952, file: !5827, line: 1118, type: !5830)
!5954 = !DILocation(line: 1118, column: 41, scope: !5952)
!5955 = !DILocation(line: 1120, column: 18, scope: !5952)
!5956 = !DILocation(line: 1120, column: 23, scope: !5952)
!5957 = !DILocation(line: 1120, column: 3, scope: !5952)
!5958 = !DILocation(line: 1120, column: 8, scope: !5952)
!5959 = !DILocation(line: 1120, column: 16, scope: !5952)
!5960 = !DILocation(line: 1121, column: 30, scope: !5961)
!5961 = distinct !DILexicalBlock(scope: !5952, file: !5827, line: 1121, column: 7)
!5962 = !DILocation(line: 1121, column: 7, scope: !5961)
!5963 = !DILocation(line: 1121, column: 7, scope: !5952)
!5964 = !DILocation(line: 1122, column: 5, scope: !5961)
!5965 = !DILocation(line: 1125, column: 28, scope: !5966)
!5966 = distinct !DILexicalBlock(scope: !5961, file: !5827, line: 1124, column: 5)
!5967 = !DILocation(line: 1125, column: 33, scope: !5966)
!5968 = !DILocation(line: 1125, column: 42, scope: !5966)
!5969 = !DILocation(line: 1125, column: 7, scope: !5966)
!5970 = !DILocation(line: 1125, column: 12, scope: !5966)
!5971 = !DILocation(line: 1125, column: 26, scope: !5966)
!5972 = !DILocation(line: 1126, column: 14, scope: !5966)
!5973 = !DILocation(line: 1126, column: 19, scope: !5966)
!5974 = !DILocation(line: 1126, column: 7, scope: !5966)
!5975 = !DILocation(line: 1128, column: 1, scope: !5952)
!5976 = distinct !DISubprogram(name: "gimple_bb", scope: !581, file: !581, line: 1112, type: !5977, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5977 = !DISubroutineType(types: !5978)
!5978 = !{!2846, !4543}
!5979 = !DILocalVariable(name: "g", arg: 1, scope: !5976, file: !581, line: 1112, type: !4543)
!5980 = !DILocation(line: 1112, column: 25, scope: !5976)
!5981 = !DILocation(line: 1114, column: 10, scope: !5976)
!5982 = !DILocation(line: 1114, column: 13, scope: !5976)
!5983 = !DILocation(line: 1114, column: 20, scope: !5976)
!5984 = !DILocation(line: 1114, column: 3, scope: !5976)
!5985 = distinct !DISubprogram(name: "gimple_num_ops", scope: !581, file: !581, line: 1596, type: !5171, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5986 = !DILocalVariable(name: "gs", arg: 1, scope: !5985, file: !581, line: 1596, type: !4543)
!5987 = !DILocation(line: 1596, column: 30, scope: !5985)
!5988 = !DILocation(line: 1598, column: 10, scope: !5985)
!5989 = !DILocation(line: 1598, column: 14, scope: !5985)
!5990 = !DILocation(line: 1598, column: 21, scope: !5985)
!5991 = !DILocation(line: 1598, column: 3, scope: !5985)
!5992 = distinct !DISubprogram(name: "gimple_op", scope: !581, file: !581, line: 1631, type: !5185, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!5993 = !DILocalVariable(name: "gs", arg: 1, scope: !5992, file: !581, line: 1631, type: !4543)
!5994 = !DILocation(line: 1631, column: 25, scope: !5992)
!5995 = !DILocalVariable(name: "i", arg: 2, scope: !5992, file: !581, line: 1631, type: !7)
!5996 = !DILocation(line: 1631, column: 38, scope: !5992)
!5997 = !DILocation(line: 1633, column: 23, scope: !5998)
!5998 = distinct !DILexicalBlock(scope: !5992, file: !581, line: 1633, column: 7)
!5999 = !DILocation(line: 1633, column: 7, scope: !5998)
!6000 = !DILocation(line: 1633, column: 7, scope: !5992)
!6001 = !DILocation(line: 1638, column: 26, scope: !6002)
!6002 = distinct !DILexicalBlock(scope: !5998, file: !581, line: 1634, column: 5)
!6003 = !DILocation(line: 1638, column: 14, scope: !6002)
!6004 = !DILocation(line: 1638, column: 50, scope: !6002)
!6005 = !DILocation(line: 1638, column: 7, scope: !6002)
!6006 = !DILocation(line: 1641, column: 5, scope: !5998)
!6007 = !DILocation(line: 1642, column: 1, scope: !5992)
!6008 = distinct !DISubprogram(name: "update_stmt", scope: !581, file: !581, line: 1456, type: !4583, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6009 = !DILocalVariable(name: "s", arg: 1, scope: !6008, file: !581, line: 1456, type: !2882)
!6010 = !DILocation(line: 1456, column: 21, scope: !6008)
!6011 = !DILocation(line: 1458, column: 23, scope: !6012)
!6012 = distinct !DILexicalBlock(scope: !6008, file: !581, line: 1458, column: 7)
!6013 = !DILocation(line: 1458, column: 7, scope: !6012)
!6014 = !DILocation(line: 1458, column: 7, scope: !6008)
!6015 = !DILocation(line: 1460, column: 28, scope: !6016)
!6016 = distinct !DILexicalBlock(scope: !6012, file: !581, line: 1459, column: 5)
!6017 = !DILocation(line: 1460, column: 7, scope: !6016)
!6018 = !DILocation(line: 1461, column: 29, scope: !6016)
!6019 = !DILocation(line: 1461, column: 7, scope: !6016)
!6020 = !DILocation(line: 1462, column: 5, scope: !6016)
!6021 = !DILocation(line: 1463, column: 1, scope: !6008)
!6022 = distinct !DISubprogram(name: "next_imm_use_stmt", scope: !5827, file: !5827, line: 1083, type: !6023, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6023 = !DISubroutineType(types: !6024)
!6024 = !{!2882, !5830}
!6025 = !DILocalVariable(name: "imm", arg: 1, scope: !6022, file: !5827, line: 1083, type: !5830)
!6026 = !DILocation(line: 1083, column: 38, scope: !6022)
!6027 = !DILocation(line: 1085, column: 18, scope: !6022)
!6028 = !DILocation(line: 1085, column: 23, scope: !6022)
!6029 = !DILocation(line: 1085, column: 33, scope: !6022)
!6030 = !DILocation(line: 1085, column: 3, scope: !6022)
!6031 = !DILocation(line: 1085, column: 8, scope: !6022)
!6032 = !DILocation(line: 1085, column: 16, scope: !6022)
!6033 = !DILocation(line: 1086, column: 27, scope: !6034)
!6034 = distinct !DILexicalBlock(scope: !6022, file: !5827, line: 1086, column: 7)
!6035 = !DILocation(line: 1086, column: 7, scope: !6034)
!6036 = !DILocation(line: 1086, column: 7, scope: !6022)
!6037 = !DILocation(line: 1088, column: 11, scope: !6038)
!6038 = distinct !DILexicalBlock(scope: !6039, file: !5827, line: 1088, column: 11)
!6039 = distinct !DILexicalBlock(scope: !6034, file: !5827, line: 1087, column: 5)
!6040 = !DILocation(line: 1088, column: 16, scope: !6038)
!6041 = !DILocation(line: 1088, column: 26, scope: !6038)
!6042 = !DILocation(line: 1088, column: 31, scope: !6038)
!6043 = !DILocation(line: 1088, column: 11, scope: !6039)
!6044 = !DILocation(line: 1089, column: 19, scope: !6038)
!6045 = !DILocation(line: 1089, column: 24, scope: !6038)
!6046 = !DILocation(line: 1089, column: 2, scope: !6038)
!6047 = !DILocation(line: 1090, column: 7, scope: !6039)
!6048 = !DILocation(line: 1093, column: 25, scope: !6022)
!6049 = !DILocation(line: 1093, column: 30, scope: !6022)
!6050 = !DILocation(line: 1093, column: 39, scope: !6022)
!6051 = !DILocation(line: 1093, column: 3, scope: !6022)
!6052 = !DILocation(line: 1094, column: 10, scope: !6022)
!6053 = !DILocation(line: 1094, column: 3, scope: !6022)
!6054 = !DILocation(line: 1095, column: 1, scope: !6022)
!6055 = distinct !DISubprogram(name: "has_zero_uses", scope: !5827, file: !5827, line: 332, type: !6056, scopeLine: 333, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6056 = !DISubroutineType(types: !6057)
!6057 = !{!2672, !6058}
!6058 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !2554, line: 59, baseType: !4042)
!6059 = !DILocalVariable(name: "var", arg: 1, scope: !6055, file: !5827, line: 332, type: !6058)
!6060 = !DILocation(line: 332, column: 27, scope: !6055)
!6061 = !DILocalVariable(name: "ptr", scope: !6055, file: !5827, line: 334, type: !6062)
!6062 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5578)
!6063 = !DILocation(line: 334, column: 34, scope: !6055)
!6064 = !DILocation(line: 334, column: 42, scope: !6055)
!6065 = !DILocation(line: 337, column: 7, scope: !6066)
!6066 = distinct !DILexicalBlock(scope: !6055, file: !5827, line: 337, column: 7)
!6067 = !DILocation(line: 337, column: 14, scope: !6066)
!6068 = !DILocation(line: 337, column: 19, scope: !6066)
!6069 = !DILocation(line: 337, column: 11, scope: !6066)
!6070 = !DILocation(line: 337, column: 7, scope: !6055)
!6071 = !DILocation(line: 338, column: 5, scope: !6066)
!6072 = !DILocation(line: 342, column: 8, scope: !6073)
!6073 = distinct !DILexicalBlock(scope: !6055, file: !5827, line: 342, column: 7)
!6074 = !DILocation(line: 342, column: 7, scope: !6055)
!6075 = !DILocation(line: 343, column: 5, scope: !6073)
!6076 = !DILocation(line: 345, column: 27, scope: !6055)
!6077 = !DILocation(line: 345, column: 10, scope: !6055)
!6078 = !DILocation(line: 345, column: 3, scope: !6055)
!6079 = !DILocation(line: 346, column: 1, scope: !6055)
!6080 = distinct !DISubprogram(name: "fel_init", scope: !337, file: !337, line: 535, type: !6081, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6081 = !DISubroutineType(types: !6082)
!6082 = !{null, !6083, !6084, !7}
!6083 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5806, size: 64)
!6084 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3124, size: 64)
!6085 = !DILocalVariable(name: "li", arg: 1, scope: !6080, file: !337, line: 535, type: !6083)
!6086 = !DILocation(line: 535, column: 26, scope: !6080)
!6087 = !DILocalVariable(name: "loop", arg: 2, scope: !6080, file: !337, line: 535, type: !6084)
!6088 = !DILocation(line: 535, column: 38, scope: !6080)
!6089 = !DILocalVariable(name: "flags", arg: 3, scope: !6080, file: !337, line: 535, type: !7)
!6090 = !DILocation(line: 535, column: 53, scope: !6080)
!6091 = !DILocalVariable(name: "aloop", scope: !6080, file: !337, line: 537, type: !3097)
!6092 = !DILocation(line: 537, column: 16, scope: !6080)
!6093 = !DILocalVariable(name: "i", scope: !6080, file: !337, line: 538, type: !7)
!6094 = !DILocation(line: 538, column: 12, scope: !6080)
!6095 = !DILocalVariable(name: "mn", scope: !6080, file: !337, line: 539, type: !2548)
!6096 = !DILocation(line: 539, column: 7, scope: !6080)
!6097 = !DILocation(line: 541, column: 3, scope: !6080)
!6098 = !DILocation(line: 541, column: 7, scope: !6080)
!6099 = !DILocation(line: 541, column: 11, scope: !6080)
!6100 = !DILocation(line: 542, column: 8, scope: !6101)
!6101 = distinct !DILexicalBlock(scope: !6080, file: !337, line: 542, column: 7)
!6102 = !DILocation(line: 542, column: 7, scope: !6080)
!6103 = !DILocation(line: 544, column: 7, scope: !6104)
!6104 = distinct !DILexicalBlock(scope: !6101, file: !337, line: 543, column: 5)
!6105 = !DILocation(line: 544, column: 11, scope: !6104)
!6106 = !DILocation(line: 544, column: 20, scope: !6104)
!6107 = !DILocation(line: 545, column: 8, scope: !6104)
!6108 = !DILocation(line: 545, column: 13, scope: !6104)
!6109 = !DILocation(line: 546, column: 7, scope: !6104)
!6110 = !DILocation(line: 549, column: 18, scope: !6080)
!6111 = !DILocation(line: 549, column: 3, scope: !6080)
!6112 = !DILocation(line: 549, column: 7, scope: !6080)
!6113 = !DILocation(line: 549, column: 16, scope: !6080)
!6114 = !DILocation(line: 550, column: 9, scope: !6080)
!6115 = !DILocation(line: 550, column: 15, scope: !6080)
!6116 = !DILocation(line: 550, column: 8, scope: !6080)
!6117 = !DILocation(line: 550, column: 6, scope: !6080)
!6118 = !DILocation(line: 552, column: 7, scope: !6119)
!6119 = distinct !DILexicalBlock(scope: !6080, file: !337, line: 552, column: 7)
!6120 = !DILocation(line: 552, column: 13, scope: !6119)
!6121 = !DILocation(line: 552, column: 7, scope: !6080)
!6122 = !DILocation(line: 554, column: 14, scope: !6123)
!6123 = distinct !DILexicalBlock(scope: !6124, file: !337, line: 554, column: 7)
!6124 = distinct !DILexicalBlock(scope: !6119, file: !337, line: 553, column: 5)
!6125 = !DILocation(line: 554, column: 12, scope: !6123)
!6126 = !DILocation(line: 554, column: 19, scope: !6127)
!6127 = distinct !DILexicalBlock(scope: !6123, file: !337, line: 554, column: 7)
!6128 = !DILocation(line: 554, column: 7, scope: !6123)
!6129 = !DILocation(line: 555, column: 6, scope: !6130)
!6130 = distinct !DILexicalBlock(scope: !6127, file: !337, line: 555, column: 6)
!6131 = !DILocation(line: 555, column: 12, scope: !6130)
!6132 = !DILocation(line: 556, column: 6, scope: !6130)
!6133 = !DILocation(line: 556, column: 9, scope: !6130)
!6134 = !DILocation(line: 556, column: 16, scope: !6130)
!6135 = !DILocation(line: 556, column: 22, scope: !6130)
!6136 = !DILocation(line: 557, column: 6, scope: !6130)
!6137 = !DILocation(line: 557, column: 9, scope: !6130)
!6138 = !DILocation(line: 557, column: 16, scope: !6130)
!6139 = !DILocation(line: 557, column: 23, scope: !6130)
!6140 = !DILocation(line: 557, column: 20, scope: !6130)
!6141 = !DILocation(line: 555, column: 6, scope: !6127)
!6142 = !DILocation(line: 558, column: 4, scope: !6130)
!6143 = !DILocation(line: 554, column: 75, scope: !6127)
!6144 = !DILocation(line: 554, column: 7, scope: !6127)
!6145 = distinct !{!6145, !6128, !6146}
!6146 = !DILocation(line: 558, column: 4, scope: !6123)
!6147 = !DILocation(line: 559, column: 5, scope: !6124)
!6148 = !DILocation(line: 560, column: 12, scope: !6149)
!6149 = distinct !DILexicalBlock(scope: !6119, file: !337, line: 560, column: 12)
!6150 = !DILocation(line: 560, column: 18, scope: !6149)
!6151 = !DILocation(line: 560, column: 12, scope: !6119)
!6152 = !DILocation(line: 563, column: 20, scope: !6153)
!6153 = distinct !DILexicalBlock(scope: !6154, file: !337, line: 563, column: 7)
!6154 = distinct !DILexicalBlock(scope: !6149, file: !337, line: 561, column: 5)
!6155 = !DILocation(line: 563, column: 35, scope: !6153)
!6156 = !DILocation(line: 563, column: 18, scope: !6153)
!6157 = !DILocation(line: 563, column: 12, scope: !6153)
!6158 = !DILocation(line: 564, column: 5, scope: !6159)
!6159 = distinct !DILexicalBlock(scope: !6153, file: !337, line: 563, column: 7)
!6160 = !DILocation(line: 564, column: 12, scope: !6159)
!6161 = !DILocation(line: 564, column: 18, scope: !6159)
!6162 = !DILocation(line: 563, column: 7, scope: !6153)
!6163 = !DILocation(line: 566, column: 2, scope: !6159)
!6164 = !DILocation(line: 565, column: 13, scope: !6159)
!6165 = !DILocation(line: 565, column: 20, scope: !6159)
!6166 = !DILocation(line: 565, column: 11, scope: !6159)
!6167 = !DILocation(line: 563, column: 7, scope: !6159)
!6168 = distinct !{!6168, !6162, !6169}
!6169 = !DILocation(line: 566, column: 2, scope: !6153)
!6170 = !DILocation(line: 568, column: 7, scope: !6154)
!6171 = !DILocation(line: 570, column: 8, scope: !6172)
!6172 = distinct !DILexicalBlock(scope: !6173, file: !337, line: 570, column: 8)
!6173 = distinct !DILexicalBlock(scope: !6154, file: !337, line: 569, column: 2)
!6174 = !DILocation(line: 570, column: 15, scope: !6172)
!6175 = !DILocation(line: 570, column: 22, scope: !6172)
!6176 = !DILocation(line: 570, column: 19, scope: !6172)
!6177 = !DILocation(line: 570, column: 8, scope: !6173)
!6178 = !DILocation(line: 571, column: 6, scope: !6172)
!6179 = !DILocation(line: 573, column: 8, scope: !6180)
!6180 = distinct !DILexicalBlock(scope: !6173, file: !337, line: 573, column: 8)
!6181 = !DILocation(line: 573, column: 15, scope: !6180)
!6182 = !DILocation(line: 573, column: 8, scope: !6173)
!6183 = !DILocation(line: 575, column: 21, scope: !6184)
!6184 = distinct !DILexicalBlock(scope: !6185, file: !337, line: 575, column: 8)
!6185 = distinct !DILexicalBlock(scope: !6180, file: !337, line: 574, column: 6)
!6186 = !DILocation(line: 575, column: 28, scope: !6184)
!6187 = !DILocation(line: 575, column: 19, scope: !6184)
!6188 = !DILocation(line: 575, column: 13, scope: !6184)
!6189 = !DILocation(line: 576, column: 6, scope: !6190)
!6190 = distinct !DILexicalBlock(scope: !6184, file: !337, line: 575, column: 8)
!6191 = !DILocation(line: 576, column: 13, scope: !6190)
!6192 = !DILocation(line: 576, column: 19, scope: !6190)
!6193 = !DILocation(line: 575, column: 8, scope: !6184)
!6194 = !DILocation(line: 578, column: 3, scope: !6190)
!6195 = !DILocation(line: 577, column: 14, scope: !6190)
!6196 = !DILocation(line: 577, column: 21, scope: !6190)
!6197 = !DILocation(line: 577, column: 12, scope: !6190)
!6198 = !DILocation(line: 575, column: 8, scope: !6190)
!6199 = distinct !{!6199, !6193, !6200}
!6200 = !DILocation(line: 578, column: 3, scope: !6184)
!6201 = !DILocation(line: 579, column: 6, scope: !6185)
!6202 = !DILocation(line: 580, column: 26, scope: !6203)
!6203 = distinct !DILexicalBlock(scope: !6180, file: !337, line: 580, column: 13)
!6204 = !DILocation(line: 580, column: 14, scope: !6203)
!6205 = !DILocation(line: 580, column: 13, scope: !6180)
!6206 = !DILocation(line: 581, column: 6, scope: !6203)
!6207 = !DILocation(line: 583, column: 26, scope: !6203)
!6208 = !DILocation(line: 583, column: 14, scope: !6203)
!6209 = !DILocation(line: 583, column: 12, scope: !6203)
!6210 = distinct !{!6210, !6170, !6211}
!6211 = !DILocation(line: 584, column: 2, scope: !6154)
!6212 = !DILocation(line: 585, column: 5, scope: !6154)
!6213 = !DILocation(line: 589, column: 15, scope: !6214)
!6214 = distinct !DILexicalBlock(scope: !6149, file: !337, line: 587, column: 5)
!6215 = !DILocation(line: 589, column: 30, scope: !6214)
!6216 = !DILocation(line: 589, column: 13, scope: !6214)
!6217 = !DILocation(line: 590, column: 7, scope: !6214)
!6218 = !DILocation(line: 592, column: 8, scope: !6219)
!6219 = distinct !DILexicalBlock(scope: !6220, file: !337, line: 592, column: 8)
!6220 = distinct !DILexicalBlock(scope: !6214, file: !337, line: 591, column: 2)
!6221 = !DILocation(line: 592, column: 15, scope: !6219)
!6222 = !DILocation(line: 592, column: 22, scope: !6219)
!6223 = !DILocation(line: 592, column: 19, scope: !6219)
!6224 = !DILocation(line: 592, column: 8, scope: !6220)
!6225 = !DILocation(line: 593, column: 6, scope: !6219)
!6226 = !DILocation(line: 595, column: 8, scope: !6227)
!6227 = distinct !DILexicalBlock(scope: !6220, file: !337, line: 595, column: 8)
!6228 = !DILocation(line: 595, column: 15, scope: !6227)
!6229 = !DILocation(line: 595, column: 21, scope: !6227)
!6230 = !DILocation(line: 595, column: 8, scope: !6220)
!6231 = !DILocation(line: 596, column: 14, scope: !6227)
!6232 = !DILocation(line: 596, column: 21, scope: !6227)
!6233 = !DILocation(line: 596, column: 12, scope: !6227)
!6234 = !DILocation(line: 596, column: 6, scope: !6227)
!6235 = !DILocation(line: 599, column: 8, scope: !6236)
!6236 = distinct !DILexicalBlock(scope: !6227, file: !337, line: 598, column: 6)
!6237 = !DILocation(line: 599, column: 15, scope: !6236)
!6238 = !DILocation(line: 599, column: 21, scope: !6236)
!6239 = !DILocation(line: 599, column: 29, scope: !6236)
!6240 = !DILocation(line: 599, column: 32, scope: !6236)
!6241 = !DILocation(line: 599, column: 39, scope: !6236)
!6242 = !DILocation(line: 599, column: 44, scope: !6236)
!6243 = !DILocation(line: 0, scope: !6236)
!6244 = !DILocation(line: 600, column: 23, scope: !6236)
!6245 = !DILocation(line: 600, column: 11, scope: !6236)
!6246 = !DILocation(line: 600, column: 9, scope: !6236)
!6247 = distinct !{!6247, !6235, !6248}
!6248 = !DILocation(line: 600, column: 28, scope: !6236)
!6249 = !DILocation(line: 601, column: 12, scope: !6250)
!6250 = distinct !DILexicalBlock(scope: !6236, file: !337, line: 601, column: 12)
!6251 = !DILocation(line: 601, column: 18, scope: !6250)
!6252 = !DILocation(line: 601, column: 12, scope: !6236)
!6253 = !DILocation(line: 602, column: 3, scope: !6250)
!6254 = !DILocation(line: 603, column: 16, scope: !6236)
!6255 = !DILocation(line: 603, column: 23, scope: !6236)
!6256 = !DILocation(line: 603, column: 14, scope: !6236)
!6257 = distinct !{!6257, !6217, !6258}
!6258 = !DILocation(line: 605, column: 2, scope: !6214)
!6259 = !DILocation(line: 608, column: 13, scope: !6080)
!6260 = !DILocation(line: 608, column: 17, scope: !6080)
!6261 = !DILocation(line: 608, column: 3, scope: !6080)
!6262 = !DILocation(line: 609, column: 1, scope: !6080)
!6263 = distinct !DISubprogram(name: "fel_next", scope: !337, file: !337, line: 518, type: !6264, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6264 = !DISubroutineType(types: !6265)
!6265 = !{null, !6083, !6084}
!6266 = !DILocalVariable(name: "li", arg: 1, scope: !6263, file: !337, line: 518, type: !6083)
!6267 = !DILocation(line: 518, column: 26, scope: !6263)
!6268 = !DILocalVariable(name: "loop", arg: 2, scope: !6263, file: !337, line: 518, type: !6084)
!6269 = !DILocation(line: 518, column: 38, scope: !6263)
!6270 = !DILocalVariable(name: "anum", scope: !6263, file: !337, line: 520, type: !2548)
!6271 = !DILocation(line: 520, column: 7, scope: !6263)
!6272 = !DILocation(line: 522, column: 3, scope: !6263)
!6273 = !DILocation(line: 522, column: 10, scope: !6263)
!6274 = !DILocation(line: 524, column: 7, scope: !6275)
!6275 = distinct !DILexicalBlock(scope: !6263, file: !337, line: 523, column: 5)
!6276 = !DILocation(line: 524, column: 11, scope: !6275)
!6277 = !DILocation(line: 524, column: 14, scope: !6275)
!6278 = !DILocation(line: 525, column: 25, scope: !6275)
!6279 = !DILocation(line: 525, column: 15, scope: !6275)
!6280 = !DILocation(line: 525, column: 8, scope: !6275)
!6281 = !DILocation(line: 525, column: 13, scope: !6275)
!6282 = !DILocation(line: 526, column: 12, scope: !6283)
!6283 = distinct !DILexicalBlock(scope: !6275, file: !337, line: 526, column: 11)
!6284 = !DILocation(line: 526, column: 11, scope: !6283)
!6285 = !DILocation(line: 526, column: 11, scope: !6275)
!6286 = !DILocation(line: 527, column: 2, scope: !6283)
!6287 = distinct !{!6287, !6272, !6288}
!6288 = !DILocation(line: 528, column: 5, scope: !6263)
!6289 = !DILocation(line: 530, column: 3, scope: !6263)
!6290 = !DILocation(line: 531, column: 4, scope: !6263)
!6291 = !DILocation(line: 531, column: 9, scope: !6263)
!6292 = !DILocation(line: 532, column: 1, scope: !6263)
!6293 = distinct !DISubprogram(name: "single_noncomplex_succ", scope: !3, file: !3, line: 1690, type: !4248, scopeLine: 1691, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6294 = !DILocalVariable(name: "bb", arg: 1, scope: !6293, file: !3, line: 1690, type: !3523)
!6295 = !DILocation(line: 1690, column: 37, scope: !6293)
!6296 = !DILocalVariable(name: "e0", scope: !6293, file: !3, line: 1692, type: !2862)
!6297 = !DILocation(line: 1692, column: 8, scope: !6293)
!6298 = !DILocalVariable(name: "e1", scope: !6293, file: !3, line: 1692, type: !2862)
!6299 = !DILocation(line: 1692, column: 12, scope: !6293)
!6300 = !DILocation(line: 1693, column: 7, scope: !6301)
!6301 = distinct !DILexicalBlock(scope: !6293, file: !3, line: 1693, column: 7)
!6302 = !DILocation(line: 1693, column: 30, scope: !6301)
!6303 = !DILocation(line: 1693, column: 7, scope: !6293)
!6304 = !DILocation(line: 1694, column: 12, scope: !6301)
!6305 = !DILocation(line: 1694, column: 5, scope: !6301)
!6306 = !DILocation(line: 1696, column: 8, scope: !6293)
!6307 = !DILocation(line: 1696, column: 6, scope: !6293)
!6308 = !DILocation(line: 1697, column: 8, scope: !6293)
!6309 = !DILocation(line: 1697, column: 6, scope: !6293)
!6310 = !DILocation(line: 1698, column: 7, scope: !6311)
!6311 = distinct !DILexicalBlock(scope: !6293, file: !3, line: 1698, column: 7)
!6312 = !DILocation(line: 1698, column: 11, scope: !6311)
!6313 = !DILocation(line: 1698, column: 17, scope: !6311)
!6314 = !DILocation(line: 1698, column: 7, scope: !6293)
!6315 = !DILocation(line: 1699, column: 12, scope: !6311)
!6316 = !DILocation(line: 1699, column: 16, scope: !6311)
!6317 = !DILocation(line: 1699, column: 5, scope: !6311)
!6318 = !DILocation(line: 1700, column: 7, scope: !6319)
!6319 = distinct !DILexicalBlock(scope: !6293, file: !3, line: 1700, column: 7)
!6320 = !DILocation(line: 1700, column: 11, scope: !6319)
!6321 = !DILocation(line: 1700, column: 17, scope: !6319)
!6322 = !DILocation(line: 1700, column: 7, scope: !6293)
!6323 = !DILocation(line: 1701, column: 12, scope: !6319)
!6324 = !DILocation(line: 1701, column: 16, scope: !6319)
!6325 = !DILocation(line: 1701, column: 5, scope: !6319)
!6326 = !DILocation(line: 1703, column: 10, scope: !6293)
!6327 = !DILocation(line: 1703, column: 3, scope: !6293)
!6328 = !DILocation(line: 1704, column: 1, scope: !6293)
!6329 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !382, file: !382, line: 150, type: !6330, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6330 = !DISubroutineType(types: !6331)
!6331 = !{!7, !6332}
!6332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6333, size: 64)
!6333 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2855)
!6334 = !DILocalVariable(name: "vec_", arg: 1, scope: !6329, file: !382, line: 150, type: !6332)
!6335 = !DILocation(line: 150, column: 1, scope: !6329)
!6336 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !382, file: !382, line: 150, type: !6337, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6337 = !DISubroutineType(types: !6338)
!6338 = !{!2862, !6332, !7}
!6339 = !DILocalVariable(name: "vec_", arg: 1, scope: !6336, file: !382, line: 150, type: !6332)
!6340 = !DILocation(line: 150, column: 1, scope: !6336)
!6341 = !DILocalVariable(name: "ix_", arg: 2, scope: !6336, file: !382, line: 150, type: !7)
!6342 = !DILocation(line: 0, scope: !6336)
!6343 = distinct !DISubprogram(name: "notice_special_calls", scope: !3, file: !3, line: 1709, type: !4583, scopeLine: 1710, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6344 = !DILocalVariable(name: "call", arg: 1, scope: !6343, file: !3, line: 1709, type: !2882)
!6345 = !DILocation(line: 1709, column: 30, scope: !6343)
!6346 = !DILocalVariable(name: "flags", scope: !6343, file: !3, line: 1711, type: !2548)
!6347 = !DILocation(line: 1711, column: 7, scope: !6343)
!6348 = !DILocation(line: 1711, column: 34, scope: !6343)
!6349 = !DILocation(line: 1711, column: 15, scope: !6343)
!6350 = !DILocation(line: 1713, column: 7, scope: !6351)
!6351 = distinct !DILexicalBlock(scope: !6343, file: !3, line: 1713, column: 7)
!6352 = !DILocation(line: 1713, column: 13, scope: !6351)
!6353 = !DILocation(line: 1713, column: 7, scope: !6343)
!6354 = !DILocation(line: 1714, column: 5, scope: !6351)
!6355 = !DILocation(line: 1714, column: 11, scope: !6351)
!6356 = !DILocation(line: 1714, column: 24, scope: !6351)
!6357 = !DILocation(line: 1715, column: 7, scope: !6358)
!6358 = distinct !DILexicalBlock(scope: !6343, file: !3, line: 1715, column: 7)
!6359 = !DILocation(line: 1715, column: 13, scope: !6358)
!6360 = !DILocation(line: 1715, column: 7, scope: !6343)
!6361 = !DILocation(line: 1716, column: 5, scope: !6358)
!6362 = !DILocation(line: 1716, column: 11, scope: !6358)
!6363 = !DILocation(line: 1716, column: 24, scope: !6358)
!6364 = !DILocation(line: 1717, column: 1, scope: !6343)
!6365 = distinct !DISubprogram(name: "clear_special_calls", scope: !3, file: !3, line: 1724, type: !4413, scopeLine: 1725, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6366 = !DILocation(line: 1726, column: 3, scope: !6365)
!6367 = !DILocation(line: 1726, column: 9, scope: !6365)
!6368 = !DILocation(line: 1726, column: 22, scope: !6365)
!6369 = !DILocation(line: 1727, column: 3, scope: !6365)
!6370 = !DILocation(line: 1727, column: 9, scope: !6365)
!6371 = !DILocation(line: 1727, column: 22, scope: !6365)
!6372 = !DILocation(line: 1728, column: 1, scope: !6365)
!6373 = distinct !DISubprogram(name: "find_taken_edge", scope: !3, file: !3, line: 1833, type: !6374, scopeLine: 1834, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6374 = !DISubroutineType(types: !6375)
!6375 = !{!2862, !3523, !2553}
!6376 = !DILocalVariable(name: "bb", arg: 1, scope: !6373, file: !3, line: 1833, type: !3523)
!6377 = !DILocation(line: 1833, column: 30, scope: !6373)
!6378 = !DILocalVariable(name: "val", arg: 2, scope: !6373, file: !3, line: 1833, type: !2553)
!6379 = !DILocation(line: 1833, column: 39, scope: !6373)
!6380 = !DILocalVariable(name: "stmt", scope: !6373, file: !3, line: 1835, type: !2882)
!6381 = !DILocation(line: 1835, column: 10, scope: !6373)
!6382 = !DILocation(line: 1837, column: 21, scope: !6373)
!6383 = !DILocation(line: 1837, column: 10, scope: !6373)
!6384 = !DILocation(line: 1837, column: 8, scope: !6373)
!6385 = !DILocation(line: 1839, column: 3, scope: !6373)
!6386 = !DILocation(line: 1840, column: 3, scope: !6373)
!6387 = !DILocation(line: 1842, column: 7, scope: !6388)
!6388 = distinct !DILexicalBlock(scope: !6373, file: !3, line: 1842, column: 7)
!6389 = !DILocation(line: 1842, column: 11, scope: !6388)
!6390 = !DILocation(line: 1842, column: 7, scope: !6373)
!6391 = !DILocation(line: 1843, column: 5, scope: !6388)
!6392 = !DILocation(line: 1845, column: 33, scope: !6393)
!6393 = distinct !DILexicalBlock(scope: !6373, file: !3, line: 1845, column: 7)
!6394 = !DILocation(line: 1845, column: 8, scope: !6393)
!6395 = !DILocation(line: 1845, column: 7, scope: !6373)
!6396 = !DILocation(line: 1846, column: 5, scope: !6393)
!6397 = !DILocation(line: 1848, column: 20, scope: !6398)
!6398 = distinct !DILexicalBlock(scope: !6373, file: !3, line: 1848, column: 7)
!6399 = !DILocation(line: 1848, column: 7, scope: !6398)
!6400 = !DILocation(line: 1848, column: 26, scope: !6398)
!6401 = !DILocation(line: 1848, column: 7, scope: !6373)
!6402 = !DILocation(line: 1849, column: 39, scope: !6398)
!6403 = !DILocation(line: 1849, column: 43, scope: !6398)
!6404 = !DILocation(line: 1849, column: 12, scope: !6398)
!6405 = !DILocation(line: 1849, column: 5, scope: !6398)
!6406 = !DILocation(line: 1851, column: 20, scope: !6407)
!6407 = distinct !DILexicalBlock(scope: !6373, file: !3, line: 1851, column: 7)
!6408 = !DILocation(line: 1851, column: 7, scope: !6407)
!6409 = !DILocation(line: 1851, column: 26, scope: !6407)
!6410 = !DILocation(line: 1851, column: 7, scope: !6373)
!6411 = !DILocation(line: 1852, column: 41, scope: !6407)
!6412 = !DILocation(line: 1852, column: 45, scope: !6407)
!6413 = !DILocation(line: 1852, column: 12, scope: !6407)
!6414 = !DILocation(line: 1852, column: 5, scope: !6407)
!6415 = !DILocation(line: 1854, column: 24, scope: !6416)
!6416 = distinct !DILexicalBlock(scope: !6373, file: !3, line: 1854, column: 7)
!6417 = !DILocation(line: 1854, column: 7, scope: !6416)
!6418 = !DILocation(line: 1854, column: 7, scope: !6373)
!6419 = !DILocation(line: 1862, column: 12, scope: !6420)
!6420 = distinct !DILexicalBlock(scope: !6421, file: !3, line: 1862, column: 11)
!6421 = distinct !DILexicalBlock(scope: !6416, file: !3, line: 1855, column: 5)
!6422 = !DILocation(line: 1862, column: 28, scope: !6420)
!6423 = !DILocation(line: 1862, column: 41, scope: !6420)
!6424 = !DILocation(line: 1862, column: 44, scope: !6420)
!6425 = !DILocation(line: 1862, column: 60, scope: !6420)
!6426 = !DILocation(line: 1863, column: 4, scope: !6420)
!6427 = !DILocation(line: 1863, column: 7, scope: !6420)
!6428 = !DILocation(line: 1863, column: 41, scope: !6420)
!6429 = !DILocation(line: 1862, column: 11, scope: !6421)
!6430 = !DILocation(line: 1864, column: 40, scope: !6420)
!6431 = !DILocation(line: 1864, column: 44, scope: !6420)
!6432 = !DILocation(line: 1864, column: 9, scope: !6420)
!6433 = !DILocation(line: 1864, column: 2, scope: !6420)
!6434 = !DILocation(line: 1865, column: 7, scope: !6421)
!6435 = !DILocation(line: 1868, column: 3, scope: !6373)
!6436 = !DILocation(line: 1870, column: 5, scope: !6373)
!6437 = !DILocation(line: 1872, column: 1, scope: !6373)
!6438 = distinct !DISubprogram(name: "is_ctrl_stmt", scope: !3, file: !3, line: 2188, type: !5223, scopeLine: 2189, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6439 = !DILocalVariable(name: "t", arg: 1, scope: !6438, file: !3, line: 2188, type: !2882)
!6440 = !DILocation(line: 2188, column: 22, scope: !6438)
!6441 = !DILocation(line: 2190, column: 24, scope: !6438)
!6442 = !DILocation(line: 2190, column: 11, scope: !6438)
!6443 = !DILocation(line: 2190, column: 3, scope: !6438)
!6444 = !DILocation(line: 2197, column: 7, scope: !6445)
!6445 = distinct !DILexicalBlock(scope: !6438, file: !3, line: 2191, column: 5)
!6446 = !DILocation(line: 2199, column: 7, scope: !6445)
!6447 = !DILocation(line: 2201, column: 1, scope: !6438)
!6448 = distinct !DISubprogram(name: "find_taken_edge_cond_expr", scope: !3, file: !3, line: 1899, type: !6374, scopeLine: 1900, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6449 = !DILocalVariable(name: "bb", arg: 1, scope: !6448, file: !3, line: 1899, type: !3523)
!6450 = !DILocation(line: 1899, column: 40, scope: !6448)
!6451 = !DILocalVariable(name: "val", arg: 2, scope: !6448, file: !3, line: 1899, type: !2553)
!6452 = !DILocation(line: 1899, column: 49, scope: !6448)
!6453 = !DILocalVariable(name: "true_edge", scope: !6448, file: !3, line: 1901, type: !2862)
!6454 = !DILocation(line: 1901, column: 8, scope: !6448)
!6455 = !DILocalVariable(name: "false_edge", scope: !6448, file: !3, line: 1901, type: !2862)
!6456 = !DILocation(line: 1901, column: 19, scope: !6448)
!6457 = !DILocation(line: 1903, column: 40, scope: !6448)
!6458 = !DILocation(line: 1903, column: 3, scope: !6448)
!6459 = !DILocation(line: 1905, column: 3, scope: !6448)
!6460 = !DILocation(line: 1906, column: 26, scope: !6448)
!6461 = !DILocation(line: 1906, column: 11, scope: !6448)
!6462 = !DILocation(line: 1906, column: 33, scope: !6448)
!6463 = !DILocation(line: 1906, column: 46, scope: !6448)
!6464 = !DILocation(line: 1906, column: 3, scope: !6448)
!6465 = distinct !DISubprogram(name: "find_taken_edge_switch_expr", scope: !3, file: !3, line: 1914, type: !6374, scopeLine: 1915, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6466 = !DILocalVariable(name: "bb", arg: 1, scope: !6465, file: !3, line: 1914, type: !3523)
!6467 = !DILocation(line: 1914, column: 42, scope: !6465)
!6468 = !DILocalVariable(name: "val", arg: 2, scope: !6465, file: !3, line: 1914, type: !2553)
!6469 = !DILocation(line: 1914, column: 51, scope: !6465)
!6470 = !DILocalVariable(name: "dest_bb", scope: !6465, file: !3, line: 1916, type: !3523)
!6471 = !DILocation(line: 1916, column: 15, scope: !6465)
!6472 = !DILocalVariable(name: "e", scope: !6465, file: !3, line: 1917, type: !2862)
!6473 = !DILocation(line: 1917, column: 8, scope: !6465)
!6474 = !DILocalVariable(name: "switch_stmt", scope: !6465, file: !3, line: 1918, type: !2882)
!6475 = !DILocation(line: 1918, column: 10, scope: !6465)
!6476 = !DILocalVariable(name: "taken_case", scope: !6465, file: !3, line: 1919, type: !2553)
!6477 = !DILocation(line: 1919, column: 8, scope: !6465)
!6478 = !DILocation(line: 1921, column: 28, scope: !6465)
!6479 = !DILocation(line: 1921, column: 17, scope: !6465)
!6480 = !DILocation(line: 1921, column: 15, scope: !6465)
!6481 = !DILocation(line: 1922, column: 43, scope: !6465)
!6482 = !DILocation(line: 1922, column: 56, scope: !6465)
!6483 = !DILocation(line: 1922, column: 16, scope: !6465)
!6484 = !DILocation(line: 1922, column: 14, scope: !6465)
!6485 = !DILocation(line: 1923, column: 13, scope: !6465)
!6486 = !DILocation(line: 1923, column: 11, scope: !6465)
!6487 = !DILocation(line: 1925, column: 18, scope: !6465)
!6488 = !DILocation(line: 1925, column: 22, scope: !6465)
!6489 = !DILocation(line: 1925, column: 7, scope: !6465)
!6490 = !DILocation(line: 1925, column: 5, scope: !6465)
!6491 = !DILocation(line: 1926, column: 3, scope: !6465)
!6492 = !DILocation(line: 1927, column: 10, scope: !6465)
!6493 = !DILocation(line: 1927, column: 3, scope: !6465)
!6494 = distinct !DISubprogram(name: "find_taken_edge_computed_goto", scope: !3, file: !3, line: 1879, type: !6374, scopeLine: 1880, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6495 = !DILocalVariable(name: "bb", arg: 1, scope: !6494, file: !3, line: 1879, type: !3523)
!6496 = !DILocation(line: 1879, column: 44, scope: !6494)
!6497 = !DILocalVariable(name: "val", arg: 2, scope: !6494, file: !3, line: 1879, type: !2553)
!6498 = !DILocation(line: 1879, column: 53, scope: !6494)
!6499 = !DILocalVariable(name: "dest", scope: !6494, file: !3, line: 1881, type: !3523)
!6500 = !DILocation(line: 1881, column: 15, scope: !6494)
!6501 = !DILocalVariable(name: "e", scope: !6494, file: !3, line: 1882, type: !2862)
!6502 = !DILocation(line: 1882, column: 8, scope: !6494)
!6503 = !DILocation(line: 1884, column: 10, scope: !6494)
!6504 = !DILocation(line: 1884, column: 8, scope: !6494)
!6505 = !DILocation(line: 1885, column: 7, scope: !6506)
!6506 = distinct !DILexicalBlock(scope: !6494, file: !3, line: 1885, column: 7)
!6507 = !DILocation(line: 1885, column: 7, scope: !6494)
!6508 = !DILocation(line: 1887, column: 22, scope: !6509)
!6509 = distinct !DILexicalBlock(scope: !6506, file: !3, line: 1886, column: 5)
!6510 = !DILocation(line: 1887, column: 26, scope: !6509)
!6511 = !DILocation(line: 1887, column: 11, scope: !6509)
!6512 = !DILocation(line: 1887, column: 9, scope: !6509)
!6513 = !DILocation(line: 1888, column: 7, scope: !6509)
!6514 = !DILocation(line: 1889, column: 5, scope: !6509)
!6515 = !DILocation(line: 1891, column: 10, scope: !6494)
!6516 = !DILocation(line: 1891, column: 3, scope: !6494)
!6517 = distinct !DISubprogram(name: "gimple_debug_bb", scope: !3, file: !3, line: 1976, type: !4218, scopeLine: 1977, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6518 = !DILocalVariable(name: "bb", arg: 1, scope: !6517, file: !3, line: 1976, type: !3523)
!6519 = !DILocation(line: 1976, column: 30, scope: !6517)
!6520 = !DILocation(line: 1978, column: 19, scope: !6517)
!6521 = !DILocation(line: 1978, column: 23, scope: !6517)
!6522 = !DILocation(line: 1978, column: 3, scope: !6517)
!6523 = !DILocation(line: 1979, column: 1, scope: !6517)
!6524 = distinct !DISubprogram(name: "gimple_debug_bb_n", scope: !3, file: !3, line: 1985, type: !6525, scopeLine: 1986, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6525 = !DISubroutineType(types: !6526)
!6526 = !{!3523, !2548}
!6527 = !DILocalVariable(name: "n", arg: 1, scope: !6524, file: !3, line: 1985, type: !2548)
!6528 = !DILocation(line: 1985, column: 24, scope: !6524)
!6529 = !DILocation(line: 1987, column: 20, scope: !6524)
!6530 = !DILocation(line: 1987, column: 3, scope: !6524)
!6531 = !DILocation(line: 1988, column: 10, scope: !6524)
!6532 = !DILocation(line: 1988, column: 3, scope: !6524)
!6533 = distinct !DISubprogram(name: "gimple_debug_cfg", scope: !3, file: !3, line: 1998, type: !6534, scopeLine: 1999, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6534 = !DISubroutineType(types: !6535)
!6535 = !{null, !2548}
!6536 = !DILocalVariable(name: "flags", arg: 1, scope: !6533, file: !3, line: 1998, type: !2548)
!6537 = !DILocation(line: 1998, column: 23, scope: !6533)
!6538 = !DILocation(line: 2000, column: 20, scope: !6533)
!6539 = !DILocation(line: 2000, column: 28, scope: !6533)
!6540 = !DILocation(line: 2000, column: 3, scope: !6533)
!6541 = !DILocation(line: 2001, column: 1, scope: !6533)
!6542 = distinct !DISubprogram(name: "gimple_dump_cfg", scope: !3, file: !3, line: 2010, type: !6543, scopeLine: 2011, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6543 = !DISubroutineType(types: !6544)
!6544 = !{null, !4131, !2548}
!6545 = !DILocalVariable(name: "file", arg: 1, scope: !6542, file: !3, line: 2010, type: !4131)
!6546 = !DILocation(line: 2010, column: 24, scope: !6542)
!6547 = !DILocalVariable(name: "flags", arg: 2, scope: !6542, file: !3, line: 2010, type: !2548)
!6548 = !DILocation(line: 2010, column: 34, scope: !6542)
!6549 = !DILocation(line: 2012, column: 7, scope: !6550)
!6550 = distinct !DILexicalBlock(scope: !6542, file: !3, line: 2012, column: 7)
!6551 = !DILocation(line: 2012, column: 13, scope: !6550)
!6552 = !DILocation(line: 2012, column: 7, scope: !6542)
!6553 = !DILocalVariable(name: "funcname", scope: !6554, file: !3, line: 2014, type: !2756)
!6554 = distinct !DILexicalBlock(scope: !6550, file: !3, line: 2013, column: 5)
!6555 = !DILocation(line: 2014, column: 19, scope: !6554)
!6556 = !DILocation(line: 2015, column: 15, scope: !6554)
!6557 = !DILocation(line: 2015, column: 36, scope: !6554)
!6558 = !DILocation(line: 2015, column: 4, scope: !6554)
!6559 = !DILocation(line: 2017, column: 20, scope: !6554)
!6560 = !DILocation(line: 2017, column: 7, scope: !6554)
!6561 = !DILocation(line: 2018, column: 16, scope: !6554)
!6562 = !DILocation(line: 2018, column: 44, scope: !6554)
!6563 = !DILocation(line: 2018, column: 7, scope: !6554)
!6564 = !DILocation(line: 2019, column: 16, scope: !6554)
!6565 = !DILocation(line: 2020, column: 9, scope: !6554)
!6566 = !DILocation(line: 2020, column: 25, scope: !6554)
!6567 = !DILocation(line: 2020, column: 34, scope: !6554)
!6568 = !DILocation(line: 2019, column: 7, scope: !6554)
!6569 = !DILocation(line: 2022, column: 23, scope: !6554)
!6570 = !DILocation(line: 2022, column: 7, scope: !6554)
!6571 = !DILocation(line: 2023, column: 16, scope: !6554)
!6572 = !DILocation(line: 2023, column: 7, scope: !6554)
!6573 = !DILocation(line: 2024, column: 5, scope: !6554)
!6574 = !DILocation(line: 2026, column: 7, scope: !6575)
!6575 = distinct !DILexicalBlock(scope: !6542, file: !3, line: 2026, column: 7)
!6576 = !DILocation(line: 2026, column: 13, scope: !6575)
!6577 = !DILocation(line: 2026, column: 7, scope: !6542)
!6578 = !DILocation(line: 2027, column: 21, scope: !6575)
!6579 = !DILocation(line: 2027, column: 5, scope: !6575)
!6580 = !DILocation(line: 2029, column: 26, scope: !6542)
!6581 = !DILocation(line: 2029, column: 49, scope: !6542)
!6582 = !DILocation(line: 2029, column: 55, scope: !6542)
!6583 = !DILocation(line: 2029, column: 61, scope: !6542)
!6584 = !DILocation(line: 2029, column: 3, scope: !6542)
!6585 = !DILocation(line: 2030, column: 1, scope: !6542)
!6586 = !DILocalVariable(name: "file", arg: 1, scope: !4128, file: !3, line: 2036, type: !4131)
!6587 = !DILocation(line: 2036, column: 23, scope: !4128)
!6588 = !DILocalVariable(name: "size", scope: !4128, file: !3, line: 2039, type: !2607)
!6589 = !DILocation(line: 2039, column: 17, scope: !4128)
!6590 = !DILocalVariable(name: "total", scope: !4128, file: !3, line: 2039, type: !2607)
!6591 = !DILocation(line: 2039, column: 23, scope: !4128)
!6592 = !DILocalVariable(name: "num_edges", scope: !4128, file: !3, line: 2040, type: !2609)
!6593 = !DILocation(line: 2040, column: 8, scope: !4128)
!6594 = !DILocalVariable(name: "bb", scope: !4128, file: !3, line: 2041, type: !3523)
!6595 = !DILocation(line: 2041, column: 15, scope: !4128)
!6596 = !DILocalVariable(name: "fmt_str", scope: !4128, file: !3, line: 2042, type: !6597)
!6597 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2756)
!6598 = !DILocation(line: 2042, column: 22, scope: !4128)
!6599 = !DILocalVariable(name: "fmt_str_1", scope: !4128, file: !3, line: 2043, type: !6597)
!6600 = !DILocation(line: 2043, column: 22, scope: !4128)
!6601 = !DILocalVariable(name: "fmt_str_2", scope: !4128, file: !3, line: 2044, type: !6597)
!6602 = !DILocation(line: 2044, column: 22, scope: !4128)
!6603 = !DILocalVariable(name: "fmt_str_3", scope: !4128, file: !3, line: 2045, type: !6597)
!6604 = !DILocation(line: 2045, column: 22, scope: !4128)
!6605 = !DILocalVariable(name: "funcname", scope: !4128, file: !3, line: 2046, type: !2756)
!6606 = !DILocation(line: 2046, column: 15, scope: !4128)
!6607 = !DILocation(line: 2047, column: 18, scope: !4128)
!6608 = !DILocation(line: 2047, column: 39, scope: !4128)
!6609 = !DILocation(line: 2047, column: 7, scope: !4128)
!6610 = !DILocation(line: 2050, column: 12, scope: !4128)
!6611 = !DILocation(line: 2050, column: 49, scope: !4128)
!6612 = !DILocation(line: 2050, column: 3, scope: !4128)
!6613 = !DILocation(line: 2052, column: 12, scope: !4128)
!6614 = !DILocation(line: 2052, column: 3, scope: !4128)
!6615 = !DILocation(line: 2053, column: 12, scope: !4128)
!6616 = !DILocation(line: 2053, column: 3, scope: !4128)
!6617 = !DILocation(line: 2054, column: 12, scope: !4128)
!6618 = !DILocation(line: 2054, column: 3, scope: !4128)
!6619 = !DILocation(line: 2055, column: 12, scope: !4128)
!6620 = !DILocation(line: 2055, column: 3, scope: !4128)
!6621 = !DILocation(line: 2057, column: 10, scope: !4128)
!6622 = !DILocation(line: 2057, column: 25, scope: !4128)
!6623 = !DILocation(line: 2057, column: 8, scope: !4128)
!6624 = !DILocation(line: 2058, column: 12, scope: !4128)
!6625 = !DILocation(line: 2058, column: 9, scope: !4128)
!6626 = !DILocation(line: 2059, column: 12, scope: !4128)
!6627 = !DILocation(line: 2059, column: 45, scope: !4128)
!6628 = !DILocation(line: 2060, column: 5, scope: !4128)
!6629 = !DILocation(line: 2060, column: 19, scope: !4128)
!6630 = !DILocation(line: 2059, column: 3, scope: !4128)
!6631 = !DILocation(line: 2062, column: 13, scope: !4128)
!6632 = !DILocation(line: 2063, column: 3, scope: !6633)
!6633 = distinct !DILexicalBlock(scope: !4128, file: !3, line: 2063, column: 3)
!6634 = !DILocation(line: 2063, column: 3, scope: !6635)
!6635 = distinct !DILexicalBlock(scope: !6633, file: !3, line: 2063, column: 3)
!6636 = !DILocation(line: 2064, column: 18, scope: !6635)
!6637 = !DILocation(line: 2064, column: 15, scope: !6635)
!6638 = !DILocation(line: 2064, column: 5, scope: !6635)
!6639 = distinct !{!6639, !6632, !6640}
!6640 = !DILocation(line: 2064, column: 18, scope: !6633)
!6641 = !DILocation(line: 2065, column: 10, scope: !4128)
!6642 = !DILocation(line: 2065, column: 20, scope: !4128)
!6643 = !DILocation(line: 2065, column: 8, scope: !4128)
!6644 = !DILocation(line: 2066, column: 12, scope: !4128)
!6645 = !DILocation(line: 2066, column: 9, scope: !4128)
!6646 = !DILocation(line: 2067, column: 12, scope: !4128)
!6647 = !DILocation(line: 2067, column: 38, scope: !4128)
!6648 = !DILocation(line: 2067, column: 49, scope: !4128)
!6649 = !DILocation(line: 2067, column: 63, scope: !4128)
!6650 = !DILocation(line: 2067, column: 3, scope: !4128)
!6651 = !DILocation(line: 2069, column: 12, scope: !4128)
!6652 = !DILocation(line: 2069, column: 3, scope: !4128)
!6653 = !DILocation(line: 2070, column: 12, scope: !4128)
!6654 = !DILocation(line: 2070, column: 62, scope: !4128)
!6655 = !DILocation(line: 2071, column: 5, scope: !4128)
!6656 = !DILocation(line: 2070, column: 3, scope: !4128)
!6657 = !DILocation(line: 2072, column: 12, scope: !4128)
!6658 = !DILocation(line: 2072, column: 3, scope: !4128)
!6659 = !DILocation(line: 2073, column: 12, scope: !4128)
!6660 = !DILocation(line: 2073, column: 3, scope: !4128)
!6661 = !DILocation(line: 2075, column: 17, scope: !6662)
!6662 = distinct !DILexicalBlock(scope: !4128, file: !3, line: 2075, column: 7)
!6663 = !DILocation(line: 2075, column: 37, scope: !6662)
!6664 = !DILocation(line: 2075, column: 35, scope: !6662)
!6665 = !DILocation(line: 2075, column: 7, scope: !4128)
!6666 = !DILocation(line: 2076, column: 39, scope: !6662)
!6667 = !DILocation(line: 2076, column: 27, scope: !6662)
!6668 = !DILocation(line: 2076, column: 5, scope: !6662)
!6669 = !DILocation(line: 2078, column: 12, scope: !4128)
!6670 = !DILocation(line: 2079, column: 15, scope: !4128)
!6671 = !DILocation(line: 2079, column: 34, scope: !4128)
!6672 = !DILocation(line: 2078, column: 3, scope: !4128)
!6673 = !DILocation(line: 2081, column: 12, scope: !4128)
!6674 = !DILocation(line: 2081, column: 3, scope: !4128)
!6675 = !DILocation(line: 2082, column: 1, scope: !4128)
!6676 = distinct !DISubprogram(name: "dump_function_to_file", scope: !3, file: !3, line: 6152, type: !6677, scopeLine: 6153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6677 = !DISubroutineType(types: !6678)
!6678 = !{null, !2553, !4131, !2548}
!6679 = !DILocalVariable(name: "fn", arg: 1, scope: !6676, file: !3, line: 6152, type: !2553)
!6680 = !DILocation(line: 6152, column: 29, scope: !6676)
!6681 = !DILocalVariable(name: "file", arg: 2, scope: !6676, file: !3, line: 6152, type: !4131)
!6682 = !DILocation(line: 6152, column: 39, scope: !6676)
!6683 = !DILocalVariable(name: "flags", arg: 3, scope: !6676, file: !3, line: 6152, type: !2548)
!6684 = !DILocation(line: 6152, column: 49, scope: !6676)
!6685 = !DILocalVariable(name: "arg", scope: !6676, file: !3, line: 6154, type: !2553)
!6686 = !DILocation(line: 6154, column: 8, scope: !6676)
!6687 = !DILocalVariable(name: "vars", scope: !6676, file: !3, line: 6154, type: !2553)
!6688 = !DILocation(line: 6154, column: 13, scope: !6676)
!6689 = !DILocalVariable(name: "var", scope: !6676, file: !3, line: 6154, type: !2553)
!6690 = !DILocation(line: 6154, column: 19, scope: !6676)
!6691 = !DILocalVariable(name: "dsf", scope: !6676, file: !3, line: 6155, type: !3356)
!6692 = !DILocation(line: 6155, column: 20, scope: !6676)
!6693 = !DILocalVariable(name: "ignore_topmost_bind", scope: !6676, file: !3, line: 6156, type: !2672)
!6694 = !DILocation(line: 6156, column: 8, scope: !6676)
!6695 = !DILocalVariable(name: "any_var", scope: !6676, file: !3, line: 6156, type: !2672)
!6696 = !DILocation(line: 6156, column: 37, scope: !6676)
!6697 = !DILocalVariable(name: "bb", scope: !6676, file: !3, line: 6157, type: !3523)
!6698 = !DILocation(line: 6157, column: 15, scope: !6676)
!6699 = !DILocalVariable(name: "chain", scope: !6676, file: !3, line: 6158, type: !2553)
!6700 = !DILocation(line: 6158, column: 8, scope: !6676)
!6701 = !DILocation(line: 6160, column: 12, scope: !6676)
!6702 = !DILocation(line: 6160, column: 37, scope: !6676)
!6703 = !DILocation(line: 6160, column: 58, scope: !6676)
!6704 = !DILocation(line: 6160, column: 26, scope: !6676)
!6705 = !DILocation(line: 6160, column: 3, scope: !6676)
!6706 = !DILocation(line: 6162, column: 9, scope: !6676)
!6707 = !DILocation(line: 6162, column: 7, scope: !6676)
!6708 = !DILocation(line: 6163, column: 3, scope: !6676)
!6709 = !DILocation(line: 6163, column: 10, scope: !6676)
!6710 = !DILocation(line: 6165, column: 27, scope: !6711)
!6711 = distinct !DILexicalBlock(scope: !6676, file: !3, line: 6164, column: 5)
!6712 = !DILocation(line: 6165, column: 33, scope: !6711)
!6713 = !DILocation(line: 6165, column: 50, scope: !6711)
!6714 = !DILocation(line: 6165, column: 7, scope: !6711)
!6715 = !DILocation(line: 6166, column: 16, scope: !6711)
!6716 = !DILocation(line: 6166, column: 7, scope: !6711)
!6717 = !DILocation(line: 6167, column: 27, scope: !6711)
!6718 = !DILocation(line: 6167, column: 33, scope: !6711)
!6719 = !DILocation(line: 6167, column: 38, scope: !6711)
!6720 = !DILocation(line: 6167, column: 7, scope: !6711)
!6721 = !DILocation(line: 6168, column: 11, scope: !6722)
!6722 = distinct !DILexicalBlock(scope: !6711, file: !3, line: 6168, column: 11)
!6723 = !DILocation(line: 6168, column: 17, scope: !6722)
!6724 = !DILocation(line: 6168, column: 11, scope: !6711)
!6725 = !DILocation(line: 6169, column: 14, scope: !6722)
!6726 = !DILocation(line: 6169, column: 24, scope: !6722)
!6727 = !DILocation(line: 6169, column: 2, scope: !6722)
!6728 = !DILocation(line: 6170, column: 11, scope: !6729)
!6729 = distinct !DILexicalBlock(scope: !6711, file: !3, line: 6170, column: 11)
!6730 = !DILocation(line: 6170, column: 11, scope: !6711)
!6731 = !DILocation(line: 6171, column: 11, scope: !6729)
!6732 = !DILocation(line: 6171, column: 2, scope: !6729)
!6733 = !DILocation(line: 6172, column: 13, scope: !6711)
!6734 = !DILocation(line: 6172, column: 11, scope: !6711)
!6735 = distinct !{!6735, !6708, !6736}
!6736 = !DILocation(line: 6173, column: 5, scope: !6676)
!6737 = !DILocation(line: 6174, column: 12, scope: !6676)
!6738 = !DILocation(line: 6174, column: 3, scope: !6676)
!6739 = !DILocation(line: 6176, column: 7, scope: !6740)
!6740 = distinct !DILexicalBlock(scope: !6676, file: !3, line: 6176, column: 7)
!6741 = !DILocation(line: 6176, column: 13, scope: !6740)
!6742 = !DILocation(line: 6176, column: 7, scope: !6676)
!6743 = !DILocation(line: 6177, column: 17, scope: !6740)
!6744 = !DILocation(line: 6177, column: 27, scope: !6740)
!6745 = !DILocation(line: 6177, column: 5, scope: !6740)
!6746 = !DILocation(line: 6179, column: 9, scope: !6676)
!6747 = !DILocation(line: 6179, column: 7, scope: !6676)
!6748 = !DILocation(line: 6180, column: 7, scope: !6749)
!6749 = distinct !DILexicalBlock(scope: !6676, file: !3, line: 6180, column: 7)
!6750 = !DILocation(line: 6180, column: 11, scope: !6749)
!6751 = !DILocation(line: 6180, column: 15, scope: !6749)
!6752 = !DILocation(line: 6180, column: 21, scope: !6749)
!6753 = !DILocation(line: 6180, column: 7, scope: !6676)
!6754 = !DILocation(line: 6181, column: 19, scope: !6749)
!6755 = !DILocation(line: 6181, column: 25, scope: !6749)
!6756 = !DILocation(line: 6181, column: 5, scope: !6749)
!6757 = !DILocation(line: 6183, column: 7, scope: !6758)
!6758 = distinct !DILexicalBlock(scope: !6676, file: !3, line: 6183, column: 7)
!6759 = !DILocation(line: 6183, column: 13, scope: !6758)
!6760 = !DILocation(line: 6183, column: 23, scope: !6758)
!6761 = !DILocation(line: 6183, column: 46, scope: !6758)
!6762 = !DILocation(line: 6183, column: 27, scope: !6758)
!6763 = !DILocation(line: 6183, column: 7, scope: !6676)
!6764 = !DILocation(line: 6185, column: 18, scope: !6765)
!6765 = distinct !DILexicalBlock(scope: !6758, file: !3, line: 6184, column: 5)
!6766 = !DILocation(line: 6185, column: 33, scope: !6765)
!6767 = !DILocation(line: 6185, column: 31, scope: !6765)
!6768 = !DILocation(line: 6185, column: 40, scope: !6765)
!6769 = !DILocation(line: 6185, column: 7, scope: !6765)
!6770 = !DILocation(line: 6186, column: 7, scope: !6765)
!6771 = !DILocation(line: 6190, column: 14, scope: !6676)
!6772 = !DILocation(line: 6190, column: 3, scope: !6676)
!6773 = !DILocation(line: 6194, column: 7, scope: !6774)
!6774 = distinct !DILexicalBlock(scope: !6676, file: !3, line: 6194, column: 7)
!6775 = !DILocation(line: 6194, column: 12, scope: !6774)
!6776 = !DILocation(line: 6194, column: 15, scope: !6774)
!6777 = !DILocation(line: 6194, column: 21, scope: !6774)
!6778 = !DILocation(line: 6194, column: 29, scope: !6774)
!6779 = !DILocation(line: 6194, column: 26, scope: !6774)
!6780 = !DILocation(line: 6194, column: 32, scope: !6774)
!6781 = !DILocation(line: 6194, column: 35, scope: !6774)
!6782 = !DILocation(line: 6194, column: 41, scope: !6774)
!6783 = !DILocation(line: 6194, column: 7, scope: !6676)
!6784 = !DILocation(line: 6196, column: 27, scope: !6785)
!6785 = distinct !DILexicalBlock(scope: !6774, file: !3, line: 6195, column: 5)
!6786 = !DILocation(line: 6198, column: 16, scope: !6785)
!6787 = !DILocation(line: 6198, column: 7, scope: !6785)
!6788 = !DILocation(line: 6199, column: 19, scope: !6789)
!6789 = distinct !DILexicalBlock(scope: !6785, file: !3, line: 6199, column: 7)
!6790 = !DILocation(line: 6199, column: 25, scope: !6789)
!6791 = !DILocation(line: 6199, column: 17, scope: !6789)
!6792 = !DILocation(line: 6199, column: 12, scope: !6789)
!6793 = !DILocation(line: 6199, column: 38, scope: !6794)
!6794 = distinct !DILexicalBlock(scope: !6789, file: !3, line: 6199, column: 7)
!6795 = !DILocation(line: 6199, column: 7, scope: !6789)
!6796 = !DILocation(line: 6201, column: 10, scope: !6797)
!6797 = distinct !DILexicalBlock(scope: !6794, file: !3, line: 6200, column: 2)
!6798 = !DILocation(line: 6201, column: 8, scope: !6797)
!6799 = !DILocation(line: 6203, column: 24, scope: !6797)
!6800 = !DILocation(line: 6203, column: 30, scope: !6797)
!6801 = !DILocation(line: 6203, column: 35, scope: !6797)
!6802 = !DILocation(line: 6203, column: 4, scope: !6797)
!6803 = !DILocation(line: 6204, column: 8, scope: !6804)
!6804 = distinct !DILexicalBlock(scope: !6797, file: !3, line: 6204, column: 8)
!6805 = !DILocation(line: 6204, column: 14, scope: !6804)
!6806 = !DILocation(line: 6204, column: 8, scope: !6797)
!6807 = !DILocation(line: 6205, column: 18, scope: !6804)
!6808 = !DILocation(line: 6205, column: 28, scope: !6804)
!6809 = !DILocation(line: 6205, column: 6, scope: !6804)
!6810 = !DILocation(line: 6206, column: 13, scope: !6797)
!6811 = !DILocation(line: 6206, column: 4, scope: !6797)
!6812 = !DILocation(line: 6208, column: 12, scope: !6797)
!6813 = !DILocation(line: 6209, column: 2, scope: !6797)
!6814 = !DILocation(line: 6199, column: 51, scope: !6794)
!6815 = !DILocation(line: 6199, column: 49, scope: !6794)
!6816 = !DILocation(line: 6199, column: 7, scope: !6794)
!6817 = distinct !{!6817, !6795, !6818}
!6818 = !DILocation(line: 6209, column: 2, scope: !6789)
!6819 = !DILocation(line: 6210, column: 5, scope: !6785)
!6820 = !DILocation(line: 6212, column: 7, scope: !6821)
!6821 = distinct !DILexicalBlock(scope: !6676, file: !3, line: 6212, column: 7)
!6822 = !DILocation(line: 6212, column: 12, scope: !6821)
!6823 = !DILocation(line: 6212, column: 15, scope: !6821)
!6824 = !DILocation(line: 6212, column: 21, scope: !6821)
!6825 = !DILocation(line: 6212, column: 29, scope: !6821)
!6826 = !DILocation(line: 6212, column: 26, scope: !6821)
!6827 = !DILocation(line: 6212, column: 32, scope: !6821)
!6828 = !DILocation(line: 6212, column: 35, scope: !6821)
!6829 = !DILocation(line: 6212, column: 41, scope: !6821)
!6830 = !DILocation(line: 6212, column: 45, scope: !6821)
!6831 = !DILocation(line: 6212, column: 48, scope: !6821)
!6832 = !DILocation(line: 6212, column: 7, scope: !6676)
!6833 = !DILocation(line: 6215, column: 25, scope: !6834)
!6834 = distinct !DILexicalBlock(scope: !6821, file: !3, line: 6213, column: 5)
!6835 = !DILocation(line: 6215, column: 42, scope: !6834)
!6836 = !DILocation(line: 6215, column: 7, scope: !6834)
!6837 = !DILocation(line: 6216, column: 12, scope: !6838)
!6838 = distinct !DILexicalBlock(scope: !6834, file: !3, line: 6216, column: 11)
!6839 = !DILocation(line: 6216, column: 11, scope: !6834)
!6840 = !DILocation(line: 6217, column: 11, scope: !6838)
!6841 = !DILocation(line: 6217, column: 2, scope: !6838)
!6842 = !DILocation(line: 6219, column: 11, scope: !6843)
!6843 = distinct !DILexicalBlock(scope: !6834, file: !3, line: 6219, column: 11)
!6844 = !DILocation(line: 6219, column: 19, scope: !6843)
!6845 = !DILocation(line: 6219, column: 22, scope: !6843)
!6846 = !DILocation(line: 6219, column: 11, scope: !6834)
!6847 = !DILocation(line: 6220, column: 11, scope: !6843)
!6848 = !DILocation(line: 6220, column: 2, scope: !6843)
!6849 = !DILocation(line: 6222, column: 7, scope: !6850)
!6850 = distinct !DILexicalBlock(scope: !6834, file: !3, line: 6222, column: 7)
!6851 = !DILocation(line: 6222, column: 7, scope: !6852)
!6852 = distinct !DILexicalBlock(scope: !6850, file: !3, line: 6222, column: 7)
!6853 = !DILocation(line: 6223, column: 18, scope: !6852)
!6854 = !DILocation(line: 6223, column: 22, scope: !6852)
!6855 = !DILocation(line: 6223, column: 31, scope: !6852)
!6856 = !DILocation(line: 6223, column: 2, scope: !6852)
!6857 = distinct !{!6857, !6849, !6858}
!6858 = !DILocation(line: 6223, column: 36, scope: !6850)
!6859 = !DILocation(line: 6225, column: 16, scope: !6834)
!6860 = !DILocation(line: 6225, column: 7, scope: !6834)
!6861 = !DILocation(line: 6226, column: 25, scope: !6834)
!6862 = !DILocation(line: 6226, column: 41, scope: !6834)
!6863 = !DILocation(line: 6226, column: 7, scope: !6834)
!6864 = !DILocation(line: 6227, column: 5, scope: !6834)
!6865 = !DILocation(line: 6228, column: 12, scope: !6866)
!6866 = distinct !DILexicalBlock(scope: !6821, file: !3, line: 6228, column: 12)
!6867 = !DILocation(line: 6228, column: 33, scope: !6866)
!6868 = !DILocation(line: 6228, column: 12, scope: !6821)
!6869 = !DILocalVariable(name: "body", scope: !6870, file: !3, line: 6233, type: !2872)
!6870 = distinct !DILexicalBlock(scope: !6866, file: !3, line: 6229, column: 5)
!6871 = !DILocation(line: 6233, column: 18, scope: !6870)
!6872 = !DILocation(line: 6233, column: 38, scope: !6870)
!6873 = !DILocation(line: 6233, column: 25, scope: !6870)
!6874 = !DILocation(line: 6235, column: 34, scope: !6875)
!6875 = distinct !DILexicalBlock(scope: !6870, file: !3, line: 6235, column: 11)
!6876 = !DILocation(line: 6235, column: 11, scope: !6875)
!6877 = !DILocation(line: 6236, column: 4, scope: !6875)
!6878 = !DILocation(line: 6236, column: 30, scope: !6875)
!6879 = !DILocation(line: 6236, column: 7, scope: !6875)
!6880 = !DILocation(line: 6236, column: 61, scope: !6875)
!6881 = !DILocation(line: 6236, column: 39, scope: !6875)
!6882 = !DILocation(line: 6236, column: 36, scope: !6875)
!6883 = !DILocation(line: 6237, column: 4, scope: !6875)
!6884 = !DILocation(line: 6237, column: 43, scope: !6875)
!6885 = !DILocation(line: 6237, column: 20, scope: !6875)
!6886 = !DILocation(line: 6237, column: 7, scope: !6875)
!6887 = !DILocation(line: 6237, column: 50, scope: !6875)
!6888 = !DILocation(line: 6235, column: 11, scope: !6870)
!6889 = !DILocation(line: 6238, column: 20, scope: !6875)
!6890 = !DILocation(line: 6238, column: 26, scope: !6875)
!6891 = !DILocation(line: 6238, column: 35, scope: !6875)
!6892 = !DILocation(line: 6238, column: 2, scope: !6875)
!6893 = !DILocation(line: 6241, column: 9, scope: !6894)
!6894 = distinct !DILexicalBlock(scope: !6895, file: !3, line: 6241, column: 8)
!6895 = distinct !DILexicalBlock(scope: !6875, file: !3, line: 6240, column: 2)
!6896 = !DILocation(line: 6241, column: 8, scope: !6895)
!6897 = !DILocation(line: 6242, column: 15, scope: !6894)
!6898 = !DILocation(line: 6242, column: 6, scope: !6894)
!6899 = !DILocation(line: 6244, column: 8, scope: !6900)
!6900 = distinct !DILexicalBlock(scope: !6895, file: !3, line: 6244, column: 8)
!6901 = !DILocation(line: 6244, column: 8, scope: !6895)
!6902 = !DILocation(line: 6245, column: 15, scope: !6900)
!6903 = !DILocation(line: 6245, column: 6, scope: !6900)
!6904 = !DILocation(line: 6247, column: 22, scope: !6895)
!6905 = !DILocation(line: 6247, column: 28, scope: !6895)
!6906 = !DILocation(line: 6247, column: 37, scope: !6895)
!6907 = !DILocation(line: 6247, column: 4, scope: !6895)
!6908 = !DILocation(line: 6248, column: 13, scope: !6895)
!6909 = !DILocation(line: 6248, column: 4, scope: !6895)
!6910 = !DILocation(line: 6250, column: 5, scope: !6870)
!6911 = !DILocalVariable(name: "indent", scope: !6912, file: !3, line: 6253, type: !2548)
!6912 = distinct !DILexicalBlock(scope: !6866, file: !3, line: 6252, column: 5)
!6913 = !DILocation(line: 6253, column: 11, scope: !6912)
!6914 = !DILocation(line: 6256, column: 15, scope: !6912)
!6915 = !DILocation(line: 6256, column: 13, scope: !6912)
!6916 = !DILocation(line: 6258, column: 11, scope: !6917)
!6917 = distinct !DILexicalBlock(scope: !6912, file: !3, line: 6258, column: 11)
!6918 = !DILocation(line: 6258, column: 17, scope: !6917)
!6919 = !DILocation(line: 6258, column: 20, scope: !6917)
!6920 = !DILocation(line: 6258, column: 38, scope: !6917)
!6921 = !DILocation(line: 6258, column: 11, scope: !6912)
!6922 = !DILocation(line: 6260, column: 8, scope: !6923)
!6923 = distinct !DILexicalBlock(scope: !6924, file: !3, line: 6260, column: 8)
!6924 = distinct !DILexicalBlock(scope: !6917, file: !3, line: 6259, column: 2)
!6925 = !DILocation(line: 6260, column: 8, scope: !6924)
!6926 = !DILocation(line: 6262, column: 16, scope: !6927)
!6927 = distinct !DILexicalBlock(scope: !6923, file: !3, line: 6261, column: 6)
!6928 = !DILocation(line: 6262, column: 14, scope: !6927)
!6929 = !DILocation(line: 6263, column: 15, scope: !6927)
!6930 = !DILocation(line: 6264, column: 6, scope: !6927)
!6931 = !DILocation(line: 6266, column: 13, scope: !6923)
!6932 = !DILocation(line: 6267, column: 2, scope: !6924)
!6933 = !DILocation(line: 6270, column: 9, scope: !6934)
!6934 = distinct !DILexicalBlock(scope: !6935, file: !3, line: 6270, column: 8)
!6935 = distinct !DILexicalBlock(scope: !6917, file: !3, line: 6269, column: 2)
!6936 = !DILocation(line: 6270, column: 8, scope: !6935)
!6937 = !DILocation(line: 6271, column: 15, scope: !6934)
!6938 = !DILocation(line: 6271, column: 6, scope: !6934)
!6939 = !DILocation(line: 6272, column: 11, scope: !6935)
!6940 = !DILocation(line: 6275, column: 11, scope: !6941)
!6941 = distinct !DILexicalBlock(scope: !6912, file: !3, line: 6275, column: 11)
!6942 = !DILocation(line: 6275, column: 11, scope: !6912)
!6943 = !DILocation(line: 6276, column: 11, scope: !6941)
!6944 = !DILocation(line: 6276, column: 2, scope: !6941)
!6945 = !DILocation(line: 6278, column: 36, scope: !6912)
!6946 = !DILocation(line: 6278, column: 42, scope: !6912)
!6947 = !DILocation(line: 6278, column: 49, scope: !6912)
!6948 = !DILocation(line: 6278, column: 56, scope: !6912)
!6949 = !DILocation(line: 6278, column: 7, scope: !6912)
!6950 = !DILocation(line: 6279, column: 11, scope: !6951)
!6951 = distinct !DILexicalBlock(scope: !6912, file: !3, line: 6279, column: 11)
!6952 = !DILocation(line: 6279, column: 11, scope: !6912)
!6953 = !DILocation(line: 6280, column: 11, scope: !6951)
!6954 = !DILocation(line: 6280, column: 2, scope: !6951)
!6955 = !DILocation(line: 6283, column: 12, scope: !6676)
!6956 = !DILocation(line: 6283, column: 3, scope: !6676)
!6957 = !DILocation(line: 6286, column: 3, scope: !6676)
!6958 = !DILocation(line: 6287, column: 1, scope: !6676)
!6959 = distinct !DISubprogram(name: "debug_cfg_stats", scope: !3, file: !3, line: 2089, type: !4413, scopeLine: 2090, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6960 = !DILocation(line: 2091, column: 19, scope: !6959)
!6961 = !DILocation(line: 2091, column: 3, scope: !6959)
!6962 = !DILocation(line: 2092, column: 1, scope: !6959)
!6963 = distinct !DISubprogram(name: "is_ctrl_altering_stmt", scope: !3, file: !3, line: 2208, type: !5223, scopeLine: 2209, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!6964 = !DILocalVariable(name: "t", arg: 1, scope: !6963, file: !3, line: 2208, type: !2882)
!6965 = !DILocation(line: 2208, column: 31, scope: !6963)
!6966 = !DILocation(line: 2210, column: 3, scope: !6963)
!6967 = !DILocation(line: 2212, column: 24, scope: !6963)
!6968 = !DILocation(line: 2212, column: 11, scope: !6963)
!6969 = !DILocation(line: 2212, column: 3, scope: !6963)
!6970 = !DILocalVariable(name: "flags", scope: !6971, file: !3, line: 2216, type: !2548)
!6971 = distinct !DILexicalBlock(scope: !6972, file: !3, line: 2215, column: 7)
!6972 = distinct !DILexicalBlock(scope: !6963, file: !3, line: 2213, column: 5)
!6973 = !DILocation(line: 2216, column: 6, scope: !6971)
!6974 = !DILocation(line: 2216, column: 33, scope: !6971)
!6975 = !DILocation(line: 2216, column: 14, scope: !6971)
!6976 = !DILocation(line: 2220, column: 8, scope: !6977)
!6977 = distinct !DILexicalBlock(scope: !6971, file: !3, line: 2220, column: 6)
!6978 = !DILocation(line: 2220, column: 14, scope: !6977)
!6979 = !DILocation(line: 2220, column: 40, scope: !6977)
!6980 = !DILocation(line: 2220, column: 43, scope: !6977)
!6981 = !DILocation(line: 2220, column: 49, scope: !6977)
!6982 = !DILocation(line: 2220, column: 6, scope: !6971)
!6983 = !DILocation(line: 2221, column: 4, scope: !6977)
!6984 = !DILocation(line: 2224, column: 6, scope: !6985)
!6985 = distinct !DILexicalBlock(scope: !6971, file: !3, line: 2224, column: 6)
!6986 = !DILocation(line: 2224, column: 12, scope: !6985)
!6987 = !DILocation(line: 2224, column: 6, scope: !6971)
!6988 = !DILocation(line: 2225, column: 4, scope: !6985)
!6989 = !DILocation(line: 2227, column: 7, scope: !6972)
!6990 = !DILocation(line: 2233, column: 7, scope: !6972)
!6991 = !DILocation(line: 2236, column: 31, scope: !6992)
!6992 = distinct !DILexicalBlock(scope: !6972, file: !3, line: 2236, column: 11)
!6993 = !DILocation(line: 2236, column: 11, scope: !6992)
!6994 = !DILocation(line: 2236, column: 34, scope: !6992)
!6995 = !DILocation(line: 2236, column: 11, scope: !6972)
!6996 = !DILocation(line: 2237, column: 2, scope: !6992)
!6997 = !DILocation(line: 2238, column: 7, scope: !6972)
!6998 = !DILocation(line: 2242, column: 7, scope: !6972)
!6999 = !DILocation(line: 2245, column: 7, scope: !6972)
!7000 = !DILocation(line: 2249, column: 35, scope: !6963)
!7001 = !DILocation(line: 2249, column: 10, scope: !6963)
!7002 = !DILocation(line: 2249, column: 3, scope: !6963)
!7003 = !DILocation(line: 2250, column: 1, scope: !6963)
!7004 = distinct !DISubprogram(name: "simple_goto_p", scope: !3, file: !3, line: 2256, type: !5223, scopeLine: 2257, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7005 = !DILocalVariable(name: "t", arg: 1, scope: !7004, file: !3, line: 2256, type: !2882)
!7006 = !DILocation(line: 2256, column: 23, scope: !7004)
!7007 = !DILocation(line: 2258, column: 24, scope: !7004)
!7008 = !DILocation(line: 2258, column: 11, scope: !7004)
!7009 = !DILocation(line: 2258, column: 27, scope: !7004)
!7010 = !DILocation(line: 2259, column: 4, scope: !7004)
!7011 = !DILocation(line: 2259, column: 7, scope: !7004)
!7012 = !DILocation(line: 2259, column: 40, scope: !7004)
!7013 = !DILocation(line: 0, scope: !7004)
!7014 = !DILocation(line: 2258, column: 10, scope: !7004)
!7015 = !DILocation(line: 2258, column: 3, scope: !7004)
!7016 = distinct !DISubprogram(name: "stmt_can_make_abnormal_goto", scope: !3, file: !3, line: 2267, type: !5223, scopeLine: 2268, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7017 = !DILocalVariable(name: "t", arg: 1, scope: !7016, file: !3, line: 2267, type: !2882)
!7018 = !DILocation(line: 2267, column: 37, scope: !7016)
!7019 = !DILocation(line: 2269, column: 24, scope: !7020)
!7020 = distinct !DILexicalBlock(scope: !7016, file: !3, line: 2269, column: 7)
!7021 = !DILocation(line: 2269, column: 7, scope: !7020)
!7022 = !DILocation(line: 2269, column: 7, scope: !7016)
!7023 = !DILocation(line: 2270, column: 5, scope: !7020)
!7024 = !DILocation(line: 2271, column: 23, scope: !7025)
!7025 = distinct !DILexicalBlock(scope: !7016, file: !3, line: 2271, column: 7)
!7026 = !DILocation(line: 2271, column: 7, scope: !7025)
!7027 = !DILocation(line: 2271, column: 7, scope: !7016)
!7028 = !DILocation(line: 2272, column: 37, scope: !7025)
!7029 = !DILocation(line: 2272, column: 12, scope: !7025)
!7030 = !DILocation(line: 2272, column: 40, scope: !7025)
!7031 = !DILocation(line: 2272, column: 43, scope: !7025)
!7032 = !DILocation(line: 2272, column: 49, scope: !7025)
!7033 = !DILocation(line: 0, scope: !7025)
!7034 = !DILocation(line: 2272, column: 5, scope: !7025)
!7035 = !DILocation(line: 2273, column: 3, scope: !7016)
!7036 = !DILocation(line: 2274, column: 1, scope: !7016)
!7037 = distinct !DISubprogram(name: "is_gimple_call", scope: !581, file: !581, line: 1870, type: !5609, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7038 = !DILocalVariable(name: "gs", arg: 1, scope: !7037, file: !581, line: 1870, type: !4543)
!7039 = !DILocation(line: 1870, column: 30, scope: !7037)
!7040 = !DILocation(line: 1872, column: 23, scope: !7037)
!7041 = !DILocation(line: 1872, column: 10, scope: !7037)
!7042 = !DILocation(line: 1872, column: 27, scope: !7037)
!7043 = !DILocation(line: 1872, column: 3, scope: !7037)
!7044 = distinct !DISubprogram(name: "stmt_ends_bb_p", scope: !3, file: !3, line: 2319, type: !5223, scopeLine: 2320, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7045 = !DILocalVariable(name: "t", arg: 1, scope: !7044, file: !3, line: 2319, type: !2882)
!7046 = !DILocation(line: 2319, column: 24, scope: !7044)
!7047 = !DILocation(line: 2321, column: 24, scope: !7044)
!7048 = !DILocation(line: 2321, column: 10, scope: !7044)
!7049 = !DILocation(line: 2321, column: 27, scope: !7044)
!7050 = !DILocation(line: 2321, column: 53, scope: !7044)
!7051 = !DILocation(line: 2321, column: 30, scope: !7044)
!7052 = !DILocation(line: 2321, column: 3, scope: !7044)
!7053 = distinct !DISubprogram(name: "delete_tree_cfg_annotations", scope: !3, file: !3, line: 2327, type: !4413, scopeLine: 2328, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7054 = !DILocation(line: 2329, column: 3, scope: !7053)
!7055 = !DILocation(line: 2329, column: 22, scope: !7053)
!7056 = !DILocation(line: 2330, column: 1, scope: !7053)
!7057 = distinct !DISubprogram(name: "first_stmt", scope: !3, file: !3, line: 2336, type: !4516, scopeLine: 2337, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7058 = !DILocalVariable(name: "bb", arg: 1, scope: !7057, file: !3, line: 2336, type: !3523)
!7059 = !DILocation(line: 2336, column: 25, scope: !7057)
!7060 = !DILocalVariable(name: "i", scope: !7057, file: !3, line: 2338, type: !4074)
!7061 = !DILocation(line: 2338, column: 24, scope: !7057)
!7062 = !DILocation(line: 2338, column: 42, scope: !7057)
!7063 = !DILocation(line: 2338, column: 28, scope: !7057)
!7064 = !DILocalVariable(name: "stmt", scope: !7057, file: !3, line: 2339, type: !2882)
!7065 = !DILocation(line: 2339, column: 10, scope: !7057)
!7066 = !DILocation(line: 2341, column: 3, scope: !7057)
!7067 = !DILocation(line: 2341, column: 11, scope: !7057)
!7068 = !DILocation(line: 2341, column: 25, scope: !7057)
!7069 = !DILocation(line: 2341, column: 53, scope: !7057)
!7070 = !DILocation(line: 2341, column: 51, scope: !7057)
!7071 = !DILocation(line: 2341, column: 28, scope: !7057)
!7072 = !DILocation(line: 0, scope: !7057)
!7073 = !DILocation(line: 2343, column: 7, scope: !7074)
!7074 = distinct !DILexicalBlock(scope: !7057, file: !3, line: 2342, column: 5)
!7075 = !DILocation(line: 2344, column: 12, scope: !7074)
!7076 = distinct !{!7076, !7066, !7077}
!7077 = !DILocation(line: 2345, column: 5, scope: !7057)
!7078 = !DILocation(line: 2346, column: 10, scope: !7057)
!7079 = !DILocation(line: 2346, column: 3, scope: !7057)
!7080 = distinct !DISubprogram(name: "gsi_last_bb", scope: !581, file: !581, line: 4450, type: !4703, scopeLine: 4451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7081 = !DILocalVariable(name: "bb", arg: 1, scope: !7080, file: !581, line: 4450, type: !3523)
!7082 = !DILocation(line: 4450, column: 26, scope: !7080)
!7083 = !DILocalVariable(name: "i", scope: !7080, file: !581, line: 4452, type: !4074)
!7084 = !DILocation(line: 4452, column: 24, scope: !7080)
!7085 = !DILocalVariable(name: "seq", scope: !7080, file: !581, line: 4453, type: !2872)
!7086 = !DILocation(line: 4453, column: 14, scope: !7080)
!7087 = !DILocation(line: 4455, column: 17, scope: !7080)
!7088 = !DILocation(line: 4455, column: 9, scope: !7080)
!7089 = !DILocation(line: 4455, column: 7, scope: !7080)
!7090 = !DILocation(line: 4456, column: 28, scope: !7080)
!7091 = !DILocation(line: 4456, column: 11, scope: !7080)
!7092 = !DILocation(line: 4456, column: 5, scope: !7080)
!7093 = !DILocation(line: 4456, column: 9, scope: !7080)
!7094 = !DILocation(line: 4457, column: 11, scope: !7080)
!7095 = !DILocation(line: 4457, column: 5, scope: !7080)
!7096 = !DILocation(line: 4457, column: 9, scope: !7080)
!7097 = !DILocation(line: 4458, column: 10, scope: !7080)
!7098 = !DILocation(line: 4458, column: 5, scope: !7080)
!7099 = !DILocation(line: 4458, column: 8, scope: !7080)
!7100 = !DILocation(line: 4460, column: 3, scope: !7080)
!7101 = distinct !DISubprogram(name: "gsi_prev", scope: !581, file: !581, line: 4493, type: !4823, scopeLine: 4494, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7102 = !DILocalVariable(name: "i", arg: 1, scope: !7101, file: !581, line: 4493, type: !4825)
!7103 = !DILocation(line: 4493, column: 33, scope: !7101)
!7104 = !DILocation(line: 4495, column: 12, scope: !7101)
!7105 = !DILocation(line: 4495, column: 15, scope: !7101)
!7106 = !DILocation(line: 4495, column: 20, scope: !7101)
!7107 = !DILocation(line: 4495, column: 3, scope: !7101)
!7108 = !DILocation(line: 4495, column: 6, scope: !7101)
!7109 = !DILocation(line: 4495, column: 10, scope: !7101)
!7110 = !DILocation(line: 4496, column: 1, scope: !7101)
!7111 = distinct !DISubprogram(name: "last_and_only_stmt", scope: !3, file: !3, line: 2381, type: !4516, scopeLine: 2382, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7112 = !DILocalVariable(name: "bb", arg: 1, scope: !7111, file: !3, line: 2381, type: !3523)
!7113 = !DILocation(line: 2381, column: 33, scope: !7111)
!7114 = !DILocalVariable(name: "i", scope: !7111, file: !3, line: 2383, type: !4074)
!7115 = !DILocation(line: 2383, column: 24, scope: !7111)
!7116 = !DILocation(line: 2383, column: 50, scope: !7111)
!7117 = !DILocation(line: 2383, column: 28, scope: !7111)
!7118 = !DILocalVariable(name: "last", scope: !7111, file: !3, line: 2384, type: !2882)
!7119 = !DILocation(line: 2384, column: 10, scope: !7111)
!7120 = !DILocalVariable(name: "prev", scope: !7111, file: !3, line: 2384, type: !2882)
!7121 = !DILocation(line: 2384, column: 16, scope: !7111)
!7122 = !DILocation(line: 2386, column: 7, scope: !7123)
!7123 = distinct !DILexicalBlock(scope: !7111, file: !3, line: 2386, column: 7)
!7124 = !DILocation(line: 2386, column: 7, scope: !7111)
!7125 = !DILocation(line: 2387, column: 5, scope: !7123)
!7126 = !DILocation(line: 2389, column: 10, scope: !7111)
!7127 = !DILocation(line: 2389, column: 8, scope: !7111)
!7128 = !DILocation(line: 2390, column: 3, scope: !7111)
!7129 = !DILocation(line: 2391, column: 7, scope: !7130)
!7130 = distinct !DILexicalBlock(scope: !7111, file: !3, line: 2391, column: 7)
!7131 = !DILocation(line: 2391, column: 7, scope: !7111)
!7132 = !DILocation(line: 2392, column: 12, scope: !7130)
!7133 = !DILocation(line: 2392, column: 5, scope: !7130)
!7134 = !DILocation(line: 2401, column: 10, scope: !7111)
!7135 = !DILocation(line: 2401, column: 8, scope: !7111)
!7136 = !DILocation(line: 2402, column: 20, scope: !7137)
!7137 = distinct !DILexicalBlock(scope: !7111, file: !3, line: 2402, column: 7)
!7138 = !DILocation(line: 2402, column: 7, scope: !7137)
!7139 = !DILocation(line: 2402, column: 26, scope: !7137)
!7140 = !DILocation(line: 2402, column: 7, scope: !7111)
!7141 = !DILocation(line: 2403, column: 12, scope: !7137)
!7142 = !DILocation(line: 2403, column: 5, scope: !7137)
!7143 = !DILocation(line: 2405, column: 5, scope: !7137)
!7144 = !DILocation(line: 2406, column: 1, scope: !7111)
!7145 = distinct !DISubprogram(name: "gsi_last_nondebug_bb", scope: !581, file: !581, line: 4562, type: !4703, scopeLine: 4563, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7146 = !DILocalVariable(name: "bb", arg: 1, scope: !7145, file: !581, line: 4562, type: !3523)
!7147 = !DILocation(line: 4562, column: 35, scope: !7145)
!7148 = !DILocalVariable(name: "i", scope: !7145, file: !581, line: 4564, type: !4074)
!7149 = !DILocation(line: 4564, column: 24, scope: !7145)
!7150 = !DILocation(line: 4564, column: 41, scope: !7145)
!7151 = !DILocation(line: 4564, column: 28, scope: !7145)
!7152 = !DILocation(line: 4566, column: 8, scope: !7153)
!7153 = distinct !DILexicalBlock(scope: !7145, file: !581, line: 4566, column: 7)
!7154 = !DILocation(line: 4566, column: 22, scope: !7153)
!7155 = !DILocation(line: 4566, column: 42, scope: !7153)
!7156 = !DILocation(line: 4566, column: 25, scope: !7153)
!7157 = !DILocation(line: 4566, column: 7, scope: !7145)
!7158 = !DILocation(line: 4567, column: 5, scope: !7153)
!7159 = !DILocation(line: 4569, column: 3, scope: !7145)
!7160 = distinct !DISubprogram(name: "gsi_prev_nondebug", scope: !581, file: !581, line: 4535, type: !4823, scopeLine: 4536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7161 = !DILocalVariable(name: "i", arg: 1, scope: !7160, file: !581, line: 4535, type: !4825)
!7162 = !DILocation(line: 4535, column: 42, scope: !7160)
!7163 = !DILocation(line: 4537, column: 3, scope: !7160)
!7164 = !DILocation(line: 4539, column: 17, scope: !7165)
!7165 = distinct !DILexicalBlock(scope: !7160, file: !581, line: 4538, column: 5)
!7166 = !DILocation(line: 4539, column: 7, scope: !7165)
!7167 = !DILocation(line: 4540, column: 5, scope: !7165)
!7168 = !DILocation(line: 4541, column: 23, scope: !7160)
!7169 = !DILocation(line: 4541, column: 11, scope: !7160)
!7170 = !DILocation(line: 4541, column: 26, scope: !7160)
!7171 = !DILocation(line: 4541, column: 57, scope: !7160)
!7172 = !DILocation(line: 4541, column: 46, scope: !7160)
!7173 = !DILocation(line: 4541, column: 29, scope: !7160)
!7174 = !DILocation(line: 0, scope: !7160)
!7175 = distinct !{!7175, !7163, !7176}
!7176 = !DILocation(line: 4541, column: 60, scope: !7160)
!7177 = !DILocation(line: 4542, column: 1, scope: !7160)
!7178 = distinct !DISubprogram(name: "verify_types_in_gimple_seq", scope: !3, file: !3, line: 3883, type: !7179, scopeLine: 3884, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7179 = !DISubroutineType(types: !7180)
!7180 = !{null, !2872}
!7181 = !DILocalVariable(name: "stmts", arg: 1, scope: !7178, file: !3, line: 3883, type: !2872)
!7182 = !DILocation(line: 3883, column: 40, scope: !7178)
!7183 = !DILocation(line: 3885, column: 37, scope: !7184)
!7184 = distinct !DILexicalBlock(scope: !7178, file: !3, line: 3885, column: 7)
!7185 = !DILocation(line: 3885, column: 7, scope: !7184)
!7186 = !DILocation(line: 3885, column: 7, scope: !7178)
!7187 = !DILocation(line: 3886, column: 5, scope: !7184)
!7188 = !DILocation(line: 3887, column: 1, scope: !7178)
!7189 = distinct !DISubprogram(name: "verify_types_in_gimple_seq_2", scope: !3, file: !3, line: 3838, type: !7190, scopeLine: 3839, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7190 = !DISubroutineType(types: !7191)
!7191 = !{!2672, !2872}
!7192 = !DILocalVariable(name: "stmts", arg: 1, scope: !7189, file: !3, line: 3838, type: !2872)
!7193 = !DILocation(line: 3838, column: 42, scope: !7189)
!7194 = !DILocalVariable(name: "ittr", scope: !7189, file: !3, line: 3840, type: !4074)
!7195 = !DILocation(line: 3840, column: 24, scope: !7189)
!7196 = !DILocalVariable(name: "err", scope: !7189, file: !3, line: 3841, type: !2672)
!7197 = !DILocation(line: 3841, column: 8, scope: !7189)
!7198 = !DILocation(line: 3843, column: 26, scope: !7199)
!7199 = distinct !DILexicalBlock(scope: !7189, file: !3, line: 3843, column: 3)
!7200 = !DILocation(line: 3843, column: 15, scope: !7199)
!7201 = !DILocation(line: 3843, column: 8, scope: !7199)
!7202 = !DILocation(line: 3843, column: 35, scope: !7203)
!7203 = distinct !DILexicalBlock(scope: !7199, file: !3, line: 3843, column: 3)
!7204 = !DILocation(line: 3843, column: 34, scope: !7203)
!7205 = !DILocation(line: 3843, column: 3, scope: !7199)
!7206 = !DILocalVariable(name: "stmt", scope: !7207, file: !3, line: 3845, type: !2882)
!7207 = distinct !DILexicalBlock(scope: !7203, file: !3, line: 3844, column: 5)
!7208 = !DILocation(line: 3845, column: 14, scope: !7207)
!7209 = !DILocation(line: 3845, column: 21, scope: !7207)
!7210 = !DILocation(line: 3847, column: 28, scope: !7207)
!7211 = !DILocation(line: 3847, column: 15, scope: !7207)
!7212 = !DILocation(line: 3847, column: 7, scope: !7207)
!7213 = !DILocation(line: 3850, column: 59, scope: !7214)
!7214 = distinct !DILexicalBlock(scope: !7207, file: !3, line: 3848, column: 9)
!7215 = !DILocation(line: 3850, column: 41, scope: !7214)
!7216 = !DILocation(line: 3850, column: 11, scope: !7214)
!7217 = !DILocation(line: 3850, column: 8, scope: !7214)
!7218 = !DILocation(line: 3851, column: 4, scope: !7214)
!7219 = !DILocation(line: 3854, column: 58, scope: !7214)
!7220 = !DILocation(line: 3854, column: 41, scope: !7214)
!7221 = !DILocation(line: 3854, column: 11, scope: !7214)
!7222 = !DILocation(line: 3854, column: 8, scope: !7214)
!7223 = !DILocation(line: 3855, column: 61, scope: !7214)
!7224 = !DILocation(line: 3855, column: 41, scope: !7214)
!7225 = !DILocation(line: 3855, column: 11, scope: !7214)
!7226 = !DILocation(line: 3855, column: 8, scope: !7214)
!7227 = !DILocation(line: 3856, column: 4, scope: !7214)
!7228 = !DILocation(line: 3859, column: 67, scope: !7214)
!7229 = !DILocation(line: 3859, column: 41, scope: !7214)
!7230 = !DILocation(line: 3859, column: 11, scope: !7214)
!7231 = !DILocation(line: 3859, column: 8, scope: !7214)
!7232 = !DILocation(line: 3860, column: 4, scope: !7214)
!7233 = !DILocation(line: 3863, column: 63, scope: !7214)
!7234 = !DILocation(line: 3863, column: 41, scope: !7214)
!7235 = !DILocation(line: 3863, column: 11, scope: !7214)
!7236 = !DILocation(line: 3863, column: 8, scope: !7214)
!7237 = !DILocation(line: 3864, column: 4, scope: !7214)
!7238 = !DILocalVariable(name: "err2", scope: !7239, file: !3, line: 3868, type: !2672)
!7239 = distinct !DILexicalBlock(scope: !7214, file: !3, line: 3867, column: 4)
!7240 = !DILocation(line: 3868, column: 11, scope: !7239)
!7241 = !DILocation(line: 3868, column: 47, scope: !7239)
!7242 = !DILocation(line: 3868, column: 18, scope: !7239)
!7243 = !DILocation(line: 3869, column: 10, scope: !7244)
!7244 = distinct !DILexicalBlock(scope: !7239, file: !3, line: 3869, column: 10)
!7245 = !DILocation(line: 3869, column: 10, scope: !7239)
!7246 = !DILocation(line: 3870, column: 27, scope: !7244)
!7247 = !DILocation(line: 3870, column: 8, scope: !7244)
!7248 = !DILocation(line: 3871, column: 13, scope: !7239)
!7249 = !DILocation(line: 3871, column: 10, scope: !7239)
!7250 = !DILocation(line: 3873, column: 2, scope: !7214)
!7251 = !DILocation(line: 3874, column: 5, scope: !7207)
!7252 = !DILocation(line: 3843, column: 53, scope: !7203)
!7253 = !DILocation(line: 3843, column: 3, scope: !7203)
!7254 = distinct !{!7254, !7205, !7255}
!7255 = !DILocation(line: 3874, column: 5, scope: !7199)
!7256 = !DILocation(line: 3876, column: 10, scope: !7189)
!7257 = !DILocation(line: 3876, column: 3, scope: !7189)
!7258 = distinct !DISubprogram(name: "tree_node_can_be_shared", scope: !3, file: !3, line: 3987, type: !7259, scopeLine: 3988, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7259 = !DISubroutineType(types: !7260)
!7260 = !{!2672, !2553}
!7261 = !DILocalVariable(name: "t", arg: 1, scope: !7258, file: !3, line: 3987, type: !2553)
!7262 = !DILocation(line: 3987, column: 31, scope: !7258)
!7263 = !DILocation(line: 3989, column: 7, scope: !7264)
!7264 = distinct !DILexicalBlock(scope: !7258, file: !3, line: 3989, column: 7)
!7265 = !DILocation(line: 3990, column: 7, scope: !7264)
!7266 = !DILocation(line: 3990, column: 35, scope: !7264)
!7267 = !DILocation(line: 3990, column: 10, scope: !7264)
!7268 = !DILocation(line: 3991, column: 7, scope: !7264)
!7269 = !DILocation(line: 3991, column: 10, scope: !7264)
!7270 = !DILocation(line: 3991, column: 24, scope: !7264)
!7271 = !DILocation(line: 3992, column: 7, scope: !7264)
!7272 = !DILocation(line: 3992, column: 10, scope: !7264)
!7273 = !DILocation(line: 3992, column: 15, scope: !7264)
!7274 = !DILocation(line: 3992, column: 12, scope: !7264)
!7275 = !DILocation(line: 3993, column: 7, scope: !7264)
!7276 = !DILocation(line: 3993, column: 10, scope: !7264)
!7277 = !DILocation(line: 3993, column: 24, scope: !7264)
!7278 = !DILocation(line: 3989, column: 7, scope: !7258)
!7279 = !DILocation(line: 3994, column: 5, scope: !7264)
!7280 = !DILocation(line: 3996, column: 7, scope: !7281)
!7281 = distinct !DILexicalBlock(scope: !7258, file: !3, line: 3996, column: 7)
!7282 = !DILocation(line: 3996, column: 21, scope: !7281)
!7283 = !DILocation(line: 3996, column: 7, scope: !7258)
!7284 = !DILocation(line: 3997, column: 5, scope: !7281)
!7285 = !DILocation(line: 3999, column: 3, scope: !7258)
!7286 = !DILocation(line: 3999, column: 12, scope: !7258)
!7287 = !DILocation(line: 3999, column: 26, scope: !7258)
!7288 = !DILocation(line: 3999, column: 39, scope: !7258)
!7289 = !DILocation(line: 3999, column: 42, scope: !7258)
!7290 = !DILocation(line: 3999, column: 56, scope: !7258)
!7291 = !DILocation(line: 4000, column: 5, scope: !7258)
!7292 = !DILocation(line: 4000, column: 33, scope: !7258)
!7293 = !DILocation(line: 4000, column: 8, scope: !7258)
!7294 = !DILocation(line: 4001, column: 3, scope: !7258)
!7295 = !DILocation(line: 4001, column: 6, scope: !7258)
!7296 = !DILocation(line: 4001, column: 20, scope: !7258)
!7297 = !DILocation(line: 4002, column: 3, scope: !7258)
!7298 = !DILocation(line: 4002, column: 6, scope: !7258)
!7299 = !DILocation(line: 4002, column: 20, scope: !7258)
!7300 = !DILocation(line: 4003, column: 3, scope: !7258)
!7301 = !DILocation(line: 4003, column: 6, scope: !7258)
!7302 = !DILocation(line: 4003, column: 20, scope: !7258)
!7303 = !DILocation(line: 4004, column: 9, scope: !7258)
!7304 = !DILocation(line: 4004, column: 7, scope: !7258)
!7305 = distinct !{!7305, !7285, !7303}
!7306 = !DILocation(line: 4006, column: 7, scope: !7307)
!7307 = distinct !DILexicalBlock(scope: !7258, file: !3, line: 4006, column: 7)
!7308 = !DILocation(line: 4006, column: 7, scope: !7258)
!7309 = !DILocation(line: 4007, column: 5, scope: !7307)
!7310 = !DILocation(line: 4009, column: 3, scope: !7258)
!7311 = !DILocation(line: 4010, column: 1, scope: !7258)
!7312 = distinct !DISubprogram(name: "verify_stmts", scope: !3, file: !3, line: 4054, type: !4413, scopeLine: 4055, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7313 = !DILocalVariable(name: "bb", scope: !7312, file: !3, line: 4056, type: !3523)
!7314 = !DILocation(line: 4056, column: 15, scope: !7312)
!7315 = !DILocalVariable(name: "gsi", scope: !7312, file: !3, line: 4057, type: !4074)
!7316 = !DILocation(line: 4057, column: 24, scope: !7312)
!7317 = !DILocalVariable(name: "err", scope: !7312, file: !3, line: 4058, type: !2672)
!7318 = !DILocation(line: 4058, column: 8, scope: !7312)
!7319 = !DILocalVariable(name: "visited", scope: !7312, file: !3, line: 4059, type: !4082)
!7320 = !DILocation(line: 4059, column: 25, scope: !7312)
!7321 = !DILocalVariable(name: "visited_stmts", scope: !7312, file: !3, line: 4059, type: !4082)
!7322 = !DILocation(line: 4059, column: 35, scope: !7312)
!7323 = !DILocalVariable(name: "addr", scope: !7312, file: !3, line: 4060, type: !2553)
!7324 = !DILocation(line: 4060, column: 8, scope: !7312)
!7325 = !DILocalVariable(name: "wi", scope: !7312, file: !3, line: 4061, type: !4071)
!7326 = !DILocation(line: 4061, column: 25, scope: !7312)
!7327 = !DILocation(line: 4063, column: 3, scope: !7312)
!7328 = !DILocation(line: 4063, column: 3, scope: !7329)
!7329 = distinct !DILexicalBlock(scope: !7330, file: !3, line: 4063, column: 3)
!7330 = distinct !DILexicalBlock(scope: !7312, file: !3, line: 4063, column: 3)
!7331 = !DILocation(line: 4063, column: 3, scope: !7330)
!7332 = !DILocation(line: 4064, column: 13, scope: !7312)
!7333 = !DILocation(line: 4064, column: 11, scope: !7312)
!7334 = !DILocation(line: 4065, column: 19, scope: !7312)
!7335 = !DILocation(line: 4065, column: 17, scope: !7312)
!7336 = !DILocation(line: 4067, column: 3, scope: !7312)
!7337 = !DILocation(line: 4068, column: 22, scope: !7312)
!7338 = !DILocation(line: 4068, column: 13, scope: !7312)
!7339 = !DILocation(line: 4068, column: 6, scope: !7312)
!7340 = !DILocation(line: 4068, column: 11, scope: !7312)
!7341 = !DILocation(line: 4070, column: 3, scope: !7342)
!7342 = distinct !DILexicalBlock(scope: !7312, file: !3, line: 4070, column: 3)
!7343 = !DILocation(line: 4070, column: 3, scope: !7344)
!7344 = distinct !DILexicalBlock(scope: !7342, file: !3, line: 4070, column: 3)
!7345 = !DILocalVariable(name: "phi", scope: !7346, file: !3, line: 4072, type: !2882)
!7346 = distinct !DILexicalBlock(scope: !7344, file: !3, line: 4071, column: 5)
!7347 = !DILocation(line: 4072, column: 14, scope: !7346)
!7348 = !DILocalVariable(name: "i", scope: !7346, file: !3, line: 4073, type: !3027)
!7349 = !DILocation(line: 4073, column: 14, scope: !7346)
!7350 = !DILocation(line: 4075, column: 34, scope: !7351)
!7351 = distinct !DILexicalBlock(scope: !7346, file: !3, line: 4075, column: 7)
!7352 = !DILocation(line: 4075, column: 18, scope: !7351)
!7353 = !DILocation(line: 4075, column: 12, scope: !7351)
!7354 = !DILocation(line: 4075, column: 40, scope: !7355)
!7355 = distinct !DILexicalBlock(scope: !7351, file: !3, line: 4075, column: 7)
!7356 = !DILocation(line: 4075, column: 39, scope: !7355)
!7357 = !DILocation(line: 4075, column: 7, scope: !7351)
!7358 = !DILocation(line: 4077, column: 10, scope: !7359)
!7359 = distinct !DILexicalBlock(scope: !7355, file: !3, line: 4076, column: 2)
!7360 = !DILocation(line: 4077, column: 8, scope: !7359)
!7361 = !DILocation(line: 4078, column: 24, scope: !7359)
!7362 = !DILocation(line: 4078, column: 39, scope: !7359)
!7363 = !DILocation(line: 4078, column: 4, scope: !7359)
!7364 = !DILocation(line: 4079, column: 19, scope: !7365)
!7365 = distinct !DILexicalBlock(scope: !7359, file: !3, line: 4079, column: 8)
!7366 = !DILocation(line: 4079, column: 8, scope: !7365)
!7367 = !DILocation(line: 4079, column: 27, scope: !7365)
!7368 = !DILocation(line: 4079, column: 24, scope: !7365)
!7369 = !DILocation(line: 4079, column: 8, scope: !7359)
!7370 = !DILocation(line: 4081, column: 8, scope: !7371)
!7371 = distinct !DILexicalBlock(scope: !7365, file: !3, line: 4080, column: 6)
!7372 = !DILocation(line: 4082, column: 12, scope: !7371)
!7373 = !DILocation(line: 4083, column: 6, scope: !7371)
!7374 = !DILocation(line: 4085, column: 11, scope: !7375)
!7375 = distinct !DILexicalBlock(scope: !7359, file: !3, line: 4085, column: 4)
!7376 = !DILocation(line: 4085, column: 9, scope: !7375)
!7377 = !DILocation(line: 4085, column: 16, scope: !7378)
!7378 = distinct !DILexicalBlock(scope: !7375, file: !3, line: 4085, column: 4)
!7379 = !DILocation(line: 4085, column: 41, scope: !7378)
!7380 = !DILocation(line: 4085, column: 20, scope: !7378)
!7381 = !DILocation(line: 4085, column: 18, scope: !7378)
!7382 = !DILocation(line: 4085, column: 4, scope: !7375)
!7383 = !DILocalVariable(name: "t", scope: !7384, file: !3, line: 4087, type: !2553)
!7384 = distinct !DILexicalBlock(scope: !7378, file: !3, line: 4086, column: 6)
!7385 = !DILocation(line: 4087, column: 13, scope: !7384)
!7386 = !DILocation(line: 4087, column: 37, scope: !7384)
!7387 = !DILocation(line: 4087, column: 42, scope: !7384)
!7388 = !DILocation(line: 4087, column: 17, scope: !7384)
!7389 = !DILocalVariable(name: "addr", scope: !7384, file: !3, line: 4088, type: !2553)
!7390 = !DILocation(line: 4088, column: 13, scope: !7384)
!7391 = !DILocation(line: 4090, column: 13, scope: !7392)
!7392 = distinct !DILexicalBlock(scope: !7384, file: !3, line: 4090, column: 12)
!7393 = !DILocation(line: 4090, column: 12, scope: !7384)
!7394 = !DILocation(line: 4092, column: 5, scope: !7395)
!7395 = distinct !DILexicalBlock(scope: !7392, file: !3, line: 4091, column: 3)
!7396 = !DILocation(line: 4093, column: 24, scope: !7395)
!7397 = !DILocation(line: 4093, column: 5, scope: !7395)
!7398 = !DILocation(line: 4094, column: 9, scope: !7395)
!7399 = !DILocation(line: 4095, column: 5, scope: !7395)
!7400 = !DILocation(line: 4099, column: 17, scope: !7401)
!7401 = distinct !DILexicalBlock(scope: !7392, file: !3, line: 4099, column: 17)
!7402 = !DILocation(line: 4099, column: 31, scope: !7401)
!7403 = !DILocation(line: 4100, column: 10, scope: !7401)
!7404 = !DILocation(line: 4100, column: 13, scope: !7401)
!7405 = !DILocation(line: 4100, column: 27, scope: !7401)
!7406 = !DILocation(line: 4101, column: 10, scope: !7401)
!7407 = !DILocation(line: 4101, column: 39, scope: !7401)
!7408 = !DILocation(line: 4101, column: 14, scope: !7401)
!7409 = !DILocation(line: 4099, column: 17, scope: !7392)
!7410 = !DILocation(line: 4103, column: 5, scope: !7411)
!7411 = distinct !DILexicalBlock(scope: !7401, file: !3, line: 4102, column: 3)
!7412 = !DILocation(line: 4104, column: 24, scope: !7411)
!7413 = !DILocation(line: 4104, column: 5, scope: !7411)
!7414 = !DILocation(line: 4105, column: 25, scope: !7411)
!7415 = !DILocation(line: 4105, column: 5, scope: !7411)
!7416 = !DILocation(line: 4106, column: 9, scope: !7411)
!7417 = !DILocation(line: 4107, column: 3, scope: !7411)
!7418 = !DILocation(line: 4109, column: 15, scope: !7384)
!7419 = !DILocation(line: 4109, column: 13, scope: !7384)
!7420 = !DILocation(line: 4110, column: 12, scope: !7421)
!7421 = distinct !DILexicalBlock(scope: !7384, file: !3, line: 4110, column: 12)
!7422 = !DILocation(line: 4110, column: 12, scope: !7384)
!7423 = !DILocation(line: 4112, column: 5, scope: !7424)
!7424 = distinct !DILexicalBlock(scope: !7421, file: !3, line: 4111, column: 3)
!7425 = !DILocation(line: 4113, column: 24, scope: !7424)
!7426 = !DILocation(line: 4113, column: 5, scope: !7424)
!7427 = !DILocation(line: 4114, column: 25, scope: !7424)
!7428 = !DILocation(line: 4114, column: 5, scope: !7424)
!7429 = !DILocation(line: 4115, column: 9, scope: !7424)
!7430 = !DILocation(line: 4116, column: 3, scope: !7424)
!7431 = !DILocation(line: 4117, column: 6, scope: !7384)
!7432 = !DILocation(line: 4085, column: 48, scope: !7378)
!7433 = !DILocation(line: 4085, column: 4, scope: !7378)
!7434 = distinct !{!7434, !7382, !7435}
!7435 = !DILocation(line: 4117, column: 6, scope: !7375)
!7436 = !DILocation(line: 4126, column: 2, scope: !7359)
!7437 = !DILocation(line: 4075, column: 57, scope: !7355)
!7438 = !DILocation(line: 4075, column: 7, scope: !7355)
!7439 = distinct !{!7439, !7357, !7440}
!7440 = !DILocation(line: 4126, column: 2, scope: !7351)
!7441 = !DILocation(line: 4128, column: 32, scope: !7442)
!7442 = distinct !DILexicalBlock(scope: !7346, file: !3, line: 4128, column: 7)
!7443 = !DILocation(line: 4128, column: 18, scope: !7442)
!7444 = !DILocation(line: 4128, column: 12, scope: !7442)
!7445 = !DILocation(line: 4128, column: 38, scope: !7446)
!7446 = distinct !DILexicalBlock(scope: !7442, file: !3, line: 4128, column: 7)
!7447 = !DILocation(line: 4128, column: 37, scope: !7446)
!7448 = !DILocation(line: 4128, column: 7, scope: !7442)
!7449 = !DILocalVariable(name: "stmt", scope: !7450, file: !3, line: 4130, type: !2882)
!7450 = distinct !DILexicalBlock(scope: !7446, file: !3, line: 4129, column: 2)
!7451 = !DILocation(line: 4130, column: 11, scope: !7450)
!7452 = !DILocation(line: 4130, column: 18, scope: !7450)
!7453 = !DILocation(line: 4132, column: 21, scope: !7454)
!7454 = distinct !DILexicalBlock(scope: !7450, file: !3, line: 4132, column: 8)
!7455 = !DILocation(line: 4132, column: 8, scope: !7454)
!7456 = !DILocation(line: 4132, column: 27, scope: !7454)
!7457 = !DILocation(line: 4133, column: 8, scope: !7454)
!7458 = !DILocation(line: 4133, column: 24, scope: !7454)
!7459 = !DILocation(line: 4133, column: 11, scope: !7454)
!7460 = !DILocation(line: 4133, column: 30, scope: !7454)
!7461 = !DILocation(line: 4132, column: 8, scope: !7450)
!7462 = !DILocation(line: 4135, column: 8, scope: !7463)
!7463 = distinct !DILexicalBlock(scope: !7454, file: !3, line: 4134, column: 6)
!7464 = !DILocation(line: 4136, column: 27, scope: !7463)
!7465 = !DILocation(line: 4136, column: 8, scope: !7463)
!7466 = !DILocation(line: 4137, column: 12, scope: !7463)
!7467 = !DILocation(line: 4138, column: 6, scope: !7463)
!7468 = !DILocation(line: 4140, column: 24, scope: !7450)
!7469 = !DILocation(line: 4140, column: 39, scope: !7450)
!7470 = !DILocation(line: 4140, column: 4, scope: !7450)
!7471 = !DILocation(line: 4142, column: 19, scope: !7472)
!7472 = distinct !DILexicalBlock(scope: !7450, file: !3, line: 4142, column: 8)
!7473 = !DILocation(line: 4142, column: 8, scope: !7472)
!7474 = !DILocation(line: 4142, column: 28, scope: !7472)
!7475 = !DILocation(line: 4142, column: 25, scope: !7472)
!7476 = !DILocation(line: 4142, column: 8, scope: !7450)
!7477 = !DILocation(line: 4144, column: 8, scope: !7478)
!7478 = distinct !DILexicalBlock(scope: !7472, file: !3, line: 4143, column: 6)
!7479 = !DILocation(line: 4145, column: 27, scope: !7478)
!7480 = !DILocation(line: 4145, column: 8, scope: !7478)
!7481 = !DILocation(line: 4146, column: 12, scope: !7478)
!7482 = !DILocation(line: 4147, column: 6, scope: !7478)
!7483 = !DILocation(line: 4149, column: 21, scope: !7484)
!7484 = distinct !DILexicalBlock(scope: !7450, file: !3, line: 4149, column: 8)
!7485 = !DILocation(line: 4149, column: 8, scope: !7484)
!7486 = !DILocation(line: 4149, column: 27, scope: !7484)
!7487 = !DILocation(line: 4149, column: 8, scope: !7450)
!7488 = !DILocalVariable(name: "decl", scope: !7489, file: !3, line: 4151, type: !2553)
!7489 = distinct !DILexicalBlock(scope: !7484, file: !3, line: 4150, column: 6)
!7490 = !DILocation(line: 4151, column: 13, scope: !7489)
!7491 = !DILocation(line: 4151, column: 40, scope: !7489)
!7492 = !DILocation(line: 4151, column: 20, scope: !7489)
!7493 = !DILocalVariable(name: "uid", scope: !7489, file: !3, line: 4152, type: !2548)
!7494 = !DILocation(line: 4152, column: 12, scope: !7489)
!7495 = !DILocation(line: 4152, column: 18, scope: !7489)
!7496 = !DILocation(line: 4154, column: 12, scope: !7497)
!7497 = distinct !DILexicalBlock(scope: !7489, file: !3, line: 4154, column: 12)
!7498 = !DILocation(line: 4154, column: 16, scope: !7497)
!7499 = !DILocation(line: 4155, column: 5, scope: !7497)
!7500 = !DILocation(line: 4155, column: 8, scope: !7497)
!7501 = !DILocation(line: 4155, column: 60, scope: !7497)
!7502 = !DILocation(line: 4155, column: 57, scope: !7497)
!7503 = !DILocation(line: 4154, column: 12, scope: !7489)
!7504 = !DILocation(line: 4157, column: 5, scope: !7505)
!7505 = distinct !DILexicalBlock(scope: !7497, file: !3, line: 4156, column: 3)
!7506 = !DILocation(line: 4158, column: 9, scope: !7505)
!7507 = !DILocation(line: 4159, column: 3, scope: !7505)
!7508 = !DILocation(line: 4161, column: 14, scope: !7489)
!7509 = !DILocation(line: 4161, column: 12, scope: !7489)
!7510 = !DILocation(line: 4162, column: 12, scope: !7511)
!7511 = distinct !DILexicalBlock(scope: !7489, file: !3, line: 4162, column: 12)
!7512 = !DILocation(line: 4162, column: 12, scope: !7489)
!7513 = !DILocalVariable(name: "lp", scope: !7514, file: !3, line: 4164, type: !3439)
!7514 = distinct !DILexicalBlock(scope: !7511, file: !3, line: 4163, column: 3)
!7515 = !DILocation(line: 4164, column: 20, scope: !7514)
!7516 = !DILocation(line: 4164, column: 57, scope: !7514)
!7517 = !DILocation(line: 4164, column: 25, scope: !7514)
!7518 = !DILocation(line: 4165, column: 9, scope: !7519)
!7519 = distinct !DILexicalBlock(scope: !7514, file: !3, line: 4165, column: 9)
!7520 = !DILocation(line: 4165, column: 17, scope: !7519)
!7521 = !DILocation(line: 4165, column: 21, scope: !7519)
!7522 = !DILocation(line: 4165, column: 14, scope: !7519)
!7523 = !DILocation(line: 4165, column: 9, scope: !7514)
!7524 = !DILocation(line: 4167, column: 9, scope: !7525)
!7525 = distinct !DILexicalBlock(scope: !7519, file: !3, line: 4166, column: 7)
!7526 = !DILocation(line: 4168, column: 13, scope: !7525)
!7527 = !DILocation(line: 4169, column: 7, scope: !7525)
!7528 = !DILocation(line: 4170, column: 3, scope: !7514)
!7529 = !DILocation(line: 4171, column: 6, scope: !7489)
!7530 = !DILocation(line: 4173, column: 11, scope: !7450)
!7531 = !DILocation(line: 4173, column: 8, scope: !7450)
!7532 = !DILocation(line: 4182, column: 27, scope: !7450)
!7533 = !DILocation(line: 4182, column: 11, scope: !7450)
!7534 = !DILocation(line: 4182, column: 9, scope: !7450)
!7535 = !DILocation(line: 4183, column: 8, scope: !7536)
!7536 = distinct !DILexicalBlock(scope: !7450, file: !3, line: 4183, column: 8)
!7537 = !DILocation(line: 4183, column: 8, scope: !7450)
!7538 = !DILocation(line: 4185, column: 8, scope: !7539)
!7539 = distinct !DILexicalBlock(scope: !7536, file: !3, line: 4184, column: 6)
!7540 = !DILocation(line: 4186, column: 27, scope: !7539)
!7541 = !DILocation(line: 4186, column: 8, scope: !7539)
!7542 = !DILocation(line: 4187, column: 28, scope: !7539)
!7543 = !DILocation(line: 4187, column: 8, scope: !7539)
!7544 = !DILocation(line: 4188, column: 12, scope: !7539)
!7545 = !DILocation(line: 4189, column: 6, scope: !7539)
!7546 = !DILocation(line: 4190, column: 4, scope: !7450)
!7547 = !DILocation(line: 4128, column: 7, scope: !7446)
!7548 = distinct !{!7548, !7448, !7549}
!7549 = !DILocation(line: 4191, column: 2, scope: !7442)
!7550 = !DILocation(line: 4192, column: 5, scope: !7346)
!7551 = distinct !{!7551, !7341, !7552}
!7552 = !DILocation(line: 4192, column: 5, scope: !7342)
!7553 = !DILocation(line: 4194, column: 18, scope: !7312)
!7554 = !DILocation(line: 4195, column: 32, scope: !7555)
!7555 = distinct !DILexicalBlock(scope: !7312, file: !3, line: 4195, column: 7)
!7556 = !DILocation(line: 4195, column: 7, scope: !7555)
!7557 = !DILocation(line: 4195, column: 7, scope: !7312)
!7558 = !DILocation(line: 4196, column: 45, scope: !7555)
!7559 = !DILocation(line: 4196, column: 20, scope: !7555)
!7560 = !DILocation(line: 4198, column: 6, scope: !7555)
!7561 = !DILocation(line: 4196, column: 5, scope: !7555)
!7562 = !DILocation(line: 4200, column: 7, scope: !7563)
!7563 = distinct !DILexicalBlock(scope: !7312, file: !3, line: 4200, column: 7)
!7564 = !DILocation(line: 4200, column: 13, scope: !7563)
!7565 = !DILocation(line: 4200, column: 11, scope: !7563)
!7566 = !DILocation(line: 4200, column: 7, scope: !7312)
!7567 = !DILocation(line: 4201, column: 5, scope: !7563)
!7568 = !DILocation(line: 4203, column: 24, scope: !7312)
!7569 = !DILocation(line: 4203, column: 3, scope: !7312)
!7570 = !DILocation(line: 4204, column: 24, scope: !7312)
!7571 = !DILocation(line: 4204, column: 3, scope: !7312)
!7572 = !DILocation(line: 4205, column: 3, scope: !7312)
!7573 = !DILocation(line: 4206, column: 3, scope: !7312)
!7574 = !DILocation(line: 4206, column: 3, scope: !7575)
!7575 = distinct !DILexicalBlock(scope: !7576, file: !3, line: 4206, column: 3)
!7576 = distinct !DILexicalBlock(scope: !7312, file: !3, line: 4206, column: 3)
!7577 = !DILocation(line: 4206, column: 3, scope: !7576)
!7578 = !DILocation(line: 4207, column: 1, scope: !7312)
!7579 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !581, file: !581, line: 3061, type: !5171, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7580 = !DILocalVariable(name: "gs", arg: 1, scope: !7579, file: !581, line: 3061, type: !4543)
!7581 = !DILocation(line: 3061, column: 35, scope: !7579)
!7582 = !DILocation(line: 3064, column: 10, scope: !7579)
!7583 = !DILocation(line: 3064, column: 14, scope: !7579)
!7584 = !DILocation(line: 3064, column: 25, scope: !7579)
!7585 = !DILocation(line: 3064, column: 3, scope: !7579)
!7586 = distinct !DISubprogram(name: "gimple_phi_arg_def", scope: !5827, file: !5827, line: 450, type: !7587, scopeLine: 451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7587 = !DISubroutineType(types: !7588)
!7588 = !{!2553, !2882, !3027}
!7589 = !DILocalVariable(name: "gs", arg: 1, scope: !7586, file: !5827, line: 450, type: !2882)
!7590 = !DILocation(line: 450, column: 28, scope: !7586)
!7591 = !DILocalVariable(name: "index", arg: 2, scope: !7586, file: !5827, line: 450, type: !3027)
!7592 = !DILocation(line: 450, column: 39, scope: !7586)
!7593 = !DILocalVariable(name: "pd", scope: !7586, file: !5827, line: 452, type: !4055)
!7594 = !DILocation(line: 452, column: 21, scope: !7586)
!7595 = !DILocation(line: 452, column: 42, scope: !7586)
!7596 = !DILocation(line: 452, column: 46, scope: !7586)
!7597 = !DILocation(line: 452, column: 26, scope: !7586)
!7598 = !DILocation(line: 453, column: 29, scope: !7586)
!7599 = !DILocation(line: 453, column: 33, scope: !7586)
!7600 = !DILocation(line: 453, column: 10, scope: !7586)
!7601 = !DILocation(line: 453, column: 3, scope: !7586)
!7602 = distinct !DISubprogram(name: "verify_node_sharing", scope: !3, file: !3, line: 4016, type: !7603, scopeLine: 4017, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7603 = !DISubroutineType(types: !7604)
!7604 = !{!2553, !2916, !4040, !2547}
!7605 = !DILocalVariable(name: "tp", arg: 1, scope: !7602, file: !3, line: 4016, type: !2916)
!7606 = !DILocation(line: 4016, column: 28, scope: !7602)
!7607 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !7602, file: !3, line: 4016, type: !4040)
!7608 = !DILocation(line: 4016, column: 37, scope: !7602)
!7609 = !DILocalVariable(name: "data", arg: 3, scope: !7602, file: !3, line: 4016, type: !2547)
!7610 = !DILocation(line: 4016, column: 58, scope: !7602)
!7611 = !DILocalVariable(name: "wi", scope: !7602, file: !3, line: 4018, type: !4070)
!7612 = !DILocation(line: 4018, column: 26, scope: !7602)
!7613 = !DILocation(line: 4018, column: 57, scope: !7602)
!7614 = !DILocation(line: 4018, column: 31, scope: !7602)
!7615 = !DILocalVariable(name: "visited", scope: !7602, file: !3, line: 4019, type: !4082)
!7616 = !DILocation(line: 4019, column: 25, scope: !7602)
!7617 = !DILocation(line: 4019, column: 60, scope: !7602)
!7618 = !DILocation(line: 4019, column: 64, scope: !7602)
!7619 = !DILocation(line: 4019, column: 35, scope: !7602)
!7620 = !DILocation(line: 4021, column: 33, scope: !7621)
!7621 = distinct !DILexicalBlock(scope: !7602, file: !3, line: 4021, column: 7)
!7622 = !DILocation(line: 4021, column: 32, scope: !7621)
!7623 = !DILocation(line: 4021, column: 7, scope: !7621)
!7624 = !DILocation(line: 4021, column: 7, scope: !7602)
!7625 = !DILocation(line: 4023, column: 8, scope: !7626)
!7626 = distinct !DILexicalBlock(scope: !7621, file: !3, line: 4022, column: 5)
!7627 = !DILocation(line: 4023, column: 22, scope: !7626)
!7628 = !DILocation(line: 4024, column: 7, scope: !7626)
!7629 = !DILocation(line: 4027, column: 27, scope: !7630)
!7630 = distinct !DILexicalBlock(scope: !7602, file: !3, line: 4027, column: 7)
!7631 = !DILocation(line: 4027, column: 37, scope: !7630)
!7632 = !DILocation(line: 4027, column: 36, scope: !7630)
!7633 = !DILocation(line: 4027, column: 7, scope: !7630)
!7634 = !DILocation(line: 4027, column: 7, scope: !7602)
!7635 = !DILocation(line: 4028, column: 13, scope: !7630)
!7636 = !DILocation(line: 4028, column: 12, scope: !7630)
!7637 = !DILocation(line: 4028, column: 5, scope: !7630)
!7638 = !DILocation(line: 4030, column: 3, scope: !7602)
!7639 = !DILocation(line: 4031, column: 1, scope: !7602)
!7640 = distinct !DISubprogram(name: "verify_stmt", scope: !3, file: !3, line: 3894, type: !7641, scopeLine: 3895, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7641 = !DISubroutineType(types: !7642)
!7642 = !{!2672, !4825}
!7643 = !DILocalVariable(name: "gsi", arg: 1, scope: !7640, file: !3, line: 3894, type: !4825)
!7644 = !DILocation(line: 3894, column: 36, scope: !7640)
!7645 = !DILocalVariable(name: "addr", scope: !7640, file: !3, line: 3896, type: !2553)
!7646 = !DILocation(line: 3896, column: 8, scope: !7640)
!7647 = !DILocalVariable(name: "wi", scope: !7640, file: !3, line: 3897, type: !4071)
!7648 = !DILocation(line: 3897, column: 25, scope: !7640)
!7649 = !DILocalVariable(name: "last_in_block", scope: !7640, file: !3, line: 3898, type: !2672)
!7650 = !DILocation(line: 3898, column: 8, scope: !7640)
!7651 = !DILocation(line: 3898, column: 47, scope: !7640)
!7652 = !DILocation(line: 3898, column: 24, scope: !7640)
!7653 = !DILocalVariable(name: "stmt", scope: !7640, file: !3, line: 3899, type: !2882)
!7654 = !DILocation(line: 3899, column: 10, scope: !7640)
!7655 = !DILocation(line: 3899, column: 28, scope: !7640)
!7656 = !DILocation(line: 3899, column: 17, scope: !7640)
!7657 = !DILocalVariable(name: "lp_nr", scope: !7640, file: !3, line: 3900, type: !2548)
!7658 = !DILocation(line: 3900, column: 7, scope: !7640)
!7659 = !DILocation(line: 3902, column: 22, scope: !7660)
!7660 = distinct !DILexicalBlock(scope: !7640, file: !3, line: 3902, column: 7)
!7661 = !DILocation(line: 3902, column: 7, scope: !7660)
!7662 = !DILocation(line: 3902, column: 7, scope: !7640)
!7663 = !DILocation(line: 3910, column: 7, scope: !7664)
!7664 = distinct !DILexicalBlock(scope: !7660, file: !3, line: 3903, column: 5)
!7665 = !DILocation(line: 3915, column: 23, scope: !7666)
!7666 = distinct !DILexicalBlock(scope: !7640, file: !3, line: 3915, column: 7)
!7667 = !DILocation(line: 3915, column: 7, scope: !7666)
!7668 = !DILocation(line: 3915, column: 7, scope: !7640)
!7669 = !DILocalVariable(name: "decl", scope: !7670, file: !3, line: 3917, type: !2553)
!7670 = distinct !DILexicalBlock(scope: !7666, file: !3, line: 3916, column: 5)
!7671 = !DILocation(line: 3917, column: 12, scope: !7670)
!7672 = !DILocation(line: 3919, column: 49, scope: !7673)
!7673 = distinct !DILexicalBlock(scope: !7670, file: !3, line: 3919, column: 11)
!7674 = !DILocation(line: 3919, column: 33, scope: !7673)
!7675 = !DILocation(line: 3919, column: 12, scope: !7673)
!7676 = !DILocation(line: 3919, column: 11, scope: !7670)
!7677 = !DILocation(line: 3921, column: 4, scope: !7678)
!7678 = distinct !DILexicalBlock(scope: !7673, file: !3, line: 3920, column: 2)
!7679 = !DILocation(line: 3922, column: 4, scope: !7678)
!7680 = !DILocation(line: 3925, column: 34, scope: !7670)
!7681 = !DILocation(line: 3925, column: 14, scope: !7670)
!7682 = !DILocation(line: 3925, column: 12, scope: !7670)
!7683 = !DILocation(line: 3926, column: 11, scope: !7684)
!7684 = distinct !DILexicalBlock(scope: !7670, file: !3, line: 3926, column: 11)
!7685 = !DILocation(line: 3927, column: 4, scope: !7684)
!7686 = !DILocation(line: 3927, column: 7, scope: !7684)
!7687 = !DILocation(line: 3927, column: 24, scope: !7684)
!7688 = !DILocation(line: 3928, column: 4, scope: !7684)
!7689 = !DILocation(line: 3928, column: 7, scope: !7684)
!7690 = !DILocation(line: 3929, column: 4, scope: !7684)
!7691 = !DILocation(line: 3929, column: 9, scope: !7684)
!7692 = !DILocation(line: 3930, column: 4, scope: !7684)
!7693 = !DILocation(line: 3930, column: 9, scope: !7684)
!7694 = !DILocation(line: 3926, column: 11, scope: !7670)
!7695 = !DILocation(line: 3932, column: 4, scope: !7696)
!7696 = distinct !DILexicalBlock(scope: !7684, file: !3, line: 3931, column: 2)
!7697 = !DILocation(line: 3933, column: 4, scope: !7696)
!7698 = !DILocation(line: 3935, column: 5, scope: !7670)
!7699 = !DILocation(line: 3937, column: 24, scope: !7700)
!7700 = distinct !DILexicalBlock(scope: !7640, file: !3, line: 3937, column: 7)
!7701 = !DILocation(line: 3937, column: 7, scope: !7700)
!7702 = !DILocation(line: 3937, column: 7, scope: !7640)
!7703 = !DILocation(line: 3938, column: 5, scope: !7700)
!7704 = !DILocation(line: 3940, column: 3, scope: !7640)
!7705 = !DILocation(line: 3941, column: 37, scope: !7640)
!7706 = !DILocation(line: 3941, column: 26, scope: !7640)
!7707 = !DILocation(line: 3941, column: 10, scope: !7640)
!7708 = !DILocation(line: 3941, column: 8, scope: !7640)
!7709 = !DILocation(line: 3942, column: 7, scope: !7710)
!7710 = distinct !DILexicalBlock(scope: !7640, file: !3, line: 3942, column: 7)
!7711 = !DILocation(line: 3942, column: 7, scope: !7640)
!7712 = !DILocation(line: 3944, column: 27, scope: !7713)
!7713 = distinct !DILexicalBlock(scope: !7710, file: !3, line: 3943, column: 5)
!7714 = !DILocation(line: 3944, column: 7, scope: !7713)
!7715 = !DILocation(line: 3945, column: 43, scope: !7713)
!7716 = !DILocation(line: 3945, column: 32, scope: !7713)
!7717 = !DILocation(line: 3945, column: 15, scope: !7713)
!7718 = !DILocation(line: 3945, column: 7, scope: !7713)
!7719 = !DILocation(line: 3946, column: 26, scope: !7713)
!7720 = !DILocation(line: 3946, column: 7, scope: !7713)
!7721 = !DILocation(line: 3947, column: 7, scope: !7713)
!7722 = !DILocation(line: 3955, column: 30, scope: !7640)
!7723 = !DILocation(line: 3955, column: 11, scope: !7640)
!7724 = !DILocation(line: 3955, column: 9, scope: !7640)
!7725 = !DILocation(line: 3956, column: 7, scope: !7726)
!7726 = distinct !DILexicalBlock(scope: !7640, file: !3, line: 3956, column: 7)
!7727 = !DILocation(line: 3956, column: 13, scope: !7726)
!7728 = !DILocation(line: 3956, column: 7, scope: !7640)
!7729 = !DILocation(line: 3958, column: 32, scope: !7730)
!7730 = distinct !DILexicalBlock(scope: !7731, file: !3, line: 3958, column: 11)
!7731 = distinct !DILexicalBlock(scope: !7726, file: !3, line: 3957, column: 5)
!7732 = !DILocation(line: 3958, column: 12, scope: !7730)
!7733 = !DILocation(line: 3958, column: 11, scope: !7731)
!7734 = !DILocation(line: 3963, column: 8, scope: !7735)
!7735 = distinct !DILexicalBlock(scope: !7736, file: !3, line: 3963, column: 8)
!7736 = distinct !DILexicalBlock(scope: !7730, file: !3, line: 3959, column: 2)
!7737 = !DILocation(line: 3963, column: 21, scope: !7735)
!7738 = !DILocation(line: 3963, column: 8, scope: !7736)
!7739 = !DILocation(line: 3965, column: 8, scope: !7740)
!7740 = distinct !DILexicalBlock(scope: !7735, file: !3, line: 3964, column: 6)
!7741 = !DILocation(line: 3966, column: 8, scope: !7740)
!7742 = !DILocation(line: 3968, column: 2, scope: !7736)
!7743 = !DILocation(line: 3969, column: 16, scope: !7744)
!7744 = distinct !DILexicalBlock(scope: !7730, file: !3, line: 3969, column: 16)
!7745 = !DILocation(line: 3969, column: 22, scope: !7744)
!7746 = !DILocation(line: 3969, column: 26, scope: !7744)
!7747 = !DILocation(line: 3969, column: 30, scope: !7744)
!7748 = !DILocation(line: 3969, column: 44, scope: !7744)
!7749 = !DILocation(line: 3969, column: 72, scope: !7744)
!7750 = !DILocation(line: 3969, column: 47, scope: !7744)
!7751 = !DILocation(line: 3969, column: 16, scope: !7730)
!7752 = !DILocation(line: 3971, column: 4, scope: !7753)
!7753 = distinct !DILexicalBlock(scope: !7744, file: !3, line: 3970, column: 2)
!7754 = !DILocation(line: 3972, column: 4, scope: !7753)
!7755 = !DILocation(line: 3974, column: 5, scope: !7731)
!7756 = !DILocation(line: 3976, column: 3, scope: !7640)
!7757 = !DILabel(scope: !7640, name: "fail", file: !3, line: 3978)
!7758 = !DILocation(line: 3978, column: 2, scope: !7640)
!7759 = !DILocation(line: 3979, column: 22, scope: !7640)
!7760 = !DILocation(line: 3979, column: 3, scope: !7640)
!7761 = !DILocation(line: 3980, column: 3, scope: !7640)
!7762 = !DILocation(line: 3981, column: 1, scope: !7640)
!7763 = distinct !DISubprogram(name: "verify_eh_throw_stmt_node", scope: !3, file: !3, line: 4036, type: !7764, scopeLine: 4037, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7764 = !DISubroutineType(types: !7765)
!7765 = !{!2548, !3462, !2547}
!7766 = !DILocalVariable(name: "slot", arg: 1, scope: !7763, file: !3, line: 4036, type: !3462)
!7767 = !DILocation(line: 4036, column: 35, scope: !7763)
!7768 = !DILocalVariable(name: "data", arg: 2, scope: !7763, file: !3, line: 4036, type: !2547)
!7769 = !DILocation(line: 4036, column: 47, scope: !7763)
!7770 = !DILocalVariable(name: "node", scope: !7763, file: !3, line: 4038, type: !4089)
!7771 = !DILocation(line: 4038, column: 27, scope: !7763)
!7772 = !DILocation(line: 4038, column: 61, scope: !7763)
!7773 = !DILocation(line: 4038, column: 60, scope: !7763)
!7774 = !DILocation(line: 4038, column: 34, scope: !7763)
!7775 = !DILocalVariable(name: "visited", scope: !7763, file: !3, line: 4039, type: !4082)
!7776 = !DILocation(line: 4039, column: 25, scope: !7763)
!7777 = !DILocation(line: 4039, column: 60, scope: !7763)
!7778 = !DILocation(line: 4039, column: 35, scope: !7763)
!7779 = !DILocation(line: 4041, column: 30, scope: !7780)
!7780 = distinct !DILexicalBlock(scope: !7763, file: !3, line: 4041, column: 7)
!7781 = !DILocation(line: 4041, column: 39, scope: !7780)
!7782 = !DILocation(line: 4041, column: 45, scope: !7780)
!7783 = !DILocation(line: 4041, column: 8, scope: !7780)
!7784 = !DILocation(line: 4041, column: 7, scope: !7763)
!7785 = !DILocation(line: 4043, column: 7, scope: !7786)
!7786 = distinct !DILexicalBlock(scope: !7780, file: !3, line: 4042, column: 5)
!7787 = !DILocation(line: 4044, column: 26, scope: !7786)
!7788 = !DILocation(line: 4044, column: 32, scope: !7786)
!7789 = !DILocation(line: 4044, column: 7, scope: !7786)
!7790 = !DILocation(line: 4045, column: 22, scope: !7786)
!7791 = !DILocation(line: 4046, column: 5, scope: !7786)
!7792 = !DILocation(line: 4047, column: 3, scope: !7763)
!7793 = distinct !DISubprogram(name: "gimple_block_label", scope: !3, file: !3, line: 4564, type: !7794, scopeLine: 4565, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7794 = !DISubroutineType(types: !7795)
!7795 = !{!2553, !3523}
!7796 = !DILocalVariable(name: "bb", arg: 1, scope: !7793, file: !3, line: 4564, type: !3523)
!7797 = !DILocation(line: 4564, column: 33, scope: !7793)
!7798 = !DILocalVariable(name: "i", scope: !7793, file: !3, line: 4566, type: !4074)
!7799 = !DILocation(line: 4566, column: 24, scope: !7793)
!7800 = !DILocalVariable(name: "s", scope: !7793, file: !3, line: 4566, type: !4074)
!7801 = !DILocation(line: 4566, column: 27, scope: !7793)
!7802 = !DILocation(line: 4566, column: 45, scope: !7793)
!7803 = !DILocation(line: 4566, column: 31, scope: !7793)
!7804 = !DILocalVariable(name: "first", scope: !7793, file: !3, line: 4567, type: !2672)
!7805 = !DILocation(line: 4567, column: 8, scope: !7793)
!7806 = !DILocalVariable(name: "label", scope: !7793, file: !3, line: 4568, type: !2553)
!7807 = !DILocation(line: 4568, column: 8, scope: !7793)
!7808 = !DILocalVariable(name: "stmt", scope: !7793, file: !3, line: 4569, type: !2882)
!7809 = !DILocation(line: 4569, column: 10, scope: !7793)
!7810 = !DILocation(line: 4571, column: 12, scope: !7811)
!7811 = distinct !DILexicalBlock(scope: !7793, file: !3, line: 4571, column: 3)
!7812 = !DILocation(line: 4571, column: 8, scope: !7811)
!7813 = !DILocation(line: 4571, column: 16, scope: !7814)
!7814 = distinct !DILexicalBlock(scope: !7811, file: !3, line: 4571, column: 3)
!7815 = !DILocation(line: 4571, column: 15, scope: !7814)
!7816 = !DILocation(line: 4571, column: 3, scope: !7811)
!7817 = !DILocation(line: 4573, column: 14, scope: !7818)
!7818 = distinct !DILexicalBlock(scope: !7814, file: !3, line: 4572, column: 5)
!7819 = !DILocation(line: 4573, column: 12, scope: !7818)
!7820 = !DILocation(line: 4574, column: 24, scope: !7821)
!7821 = distinct !DILexicalBlock(scope: !7818, file: !3, line: 4574, column: 11)
!7822 = !DILocation(line: 4574, column: 11, scope: !7821)
!7823 = !DILocation(line: 4574, column: 30, scope: !7821)
!7824 = !DILocation(line: 4574, column: 11, scope: !7818)
!7825 = !DILocation(line: 4575, column: 2, scope: !7821)
!7826 = !DILocation(line: 4576, column: 35, scope: !7818)
!7827 = !DILocation(line: 4576, column: 15, scope: !7818)
!7828 = !DILocation(line: 4576, column: 13, scope: !7818)
!7829 = !DILocation(line: 4577, column: 12, scope: !7830)
!7830 = distinct !DILexicalBlock(scope: !7818, file: !3, line: 4577, column: 11)
!7831 = !DILocation(line: 4577, column: 11, scope: !7818)
!7832 = !DILocation(line: 4579, column: 9, scope: !7833)
!7833 = distinct !DILexicalBlock(scope: !7834, file: !3, line: 4579, column: 8)
!7834 = distinct !DILexicalBlock(scope: !7830, file: !3, line: 4578, column: 2)
!7835 = !DILocation(line: 4579, column: 8, scope: !7834)
!7836 = !DILocation(line: 4580, column: 6, scope: !7833)
!7837 = !DILocation(line: 4581, column: 11, scope: !7834)
!7838 = !DILocation(line: 4581, column: 4, scope: !7834)
!7839 = !DILocation(line: 4583, column: 5, scope: !7818)
!7840 = !DILocation(line: 4571, column: 37, scope: !7814)
!7841 = !DILocation(line: 4571, column: 46, scope: !7814)
!7842 = !DILocation(line: 4571, column: 3, scope: !7814)
!7843 = distinct !{!7843, !7816, !7844}
!7844 = !DILocation(line: 4583, column: 5, scope: !7811)
!7845 = !DILocation(line: 4585, column: 11, scope: !7793)
!7846 = !DILocation(line: 4585, column: 9, scope: !7793)
!7847 = !DILocation(line: 4586, column: 30, scope: !7793)
!7848 = !DILocation(line: 4586, column: 10, scope: !7793)
!7849 = !DILocation(line: 4586, column: 8, scope: !7793)
!7850 = !DILocation(line: 4587, column: 26, scope: !7793)
!7851 = !DILocation(line: 4587, column: 3, scope: !7793)
!7852 = !DILocation(line: 4588, column: 10, scope: !7793)
!7853 = !DILocation(line: 4588, column: 3, scope: !7793)
!7854 = !DILocation(line: 4589, column: 1, scope: !7793)
!7855 = distinct !DISubprogram(name: "add_phi_args_after_copy_bb", scope: !3, file: !3, line: 4984, type: !4218, scopeLine: 4985, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7856 = !DILocalVariable(name: "bb_copy", arg: 1, scope: !7855, file: !3, line: 4984, type: !3523)
!7857 = !DILocation(line: 4984, column: 41, scope: !7855)
!7858 = !DILocalVariable(name: "e_copy", scope: !7855, file: !3, line: 4986, type: !2862)
!7859 = !DILocation(line: 4986, column: 8, scope: !7855)
!7860 = !DILocalVariable(name: "ei", scope: !7855, file: !3, line: 4987, type: !7861)
!7861 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !382, line: 682, baseType: !7862)
!7862 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !382, line: 679, size: 128, elements: !7863)
!7863 = !{!7864, !7865}
!7864 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !7862, file: !382, line: 680, baseType: !7, size: 32)
!7865 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !7862, file: !382, line: 681, baseType: !7866, size: 64, offset: 64)
!7866 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2850, size: 64)
!7867 = !DILocation(line: 4987, column: 17, scope: !7855)
!7868 = !DILocation(line: 4989, column: 3, scope: !7869)
!7869 = distinct !DILexicalBlock(scope: !7855, file: !3, line: 4989, column: 3)
!7870 = !DILocation(line: 4989, column: 3, scope: !7871)
!7871 = distinct !DILexicalBlock(scope: !7869, file: !3, line: 4989, column: 3)
!7872 = !DILocation(line: 4991, column: 37, scope: !7873)
!7873 = distinct !DILexicalBlock(scope: !7871, file: !3, line: 4990, column: 5)
!7874 = !DILocation(line: 4991, column: 7, scope: !7873)
!7875 = !DILocation(line: 4992, column: 5, scope: !7873)
!7876 = distinct !{!7876, !7868, !7877}
!7877 = !DILocation(line: 4992, column: 5, scope: !7869)
!7878 = !DILocation(line: 4993, column: 1, scope: !7855)
!7879 = distinct !DISubprogram(name: "ei_start_1", scope: !382, file: !382, line: 696, type: !7880, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7880 = !DISubroutineType(types: !7881)
!7881 = !{!7861, !7866}
!7882 = !DILocalVariable(name: "ev", arg: 1, scope: !7879, file: !382, line: 696, type: !7866)
!7883 = !DILocation(line: 696, column: 28, scope: !7879)
!7884 = !DILocalVariable(name: "i", scope: !7879, file: !382, line: 698, type: !7861)
!7885 = !DILocation(line: 698, column: 17, scope: !7879)
!7886 = !DILocation(line: 700, column: 5, scope: !7879)
!7887 = !DILocation(line: 700, column: 11, scope: !7879)
!7888 = !DILocation(line: 701, column: 17, scope: !7879)
!7889 = !DILocation(line: 701, column: 5, scope: !7879)
!7890 = !DILocation(line: 701, column: 15, scope: !7879)
!7891 = !DILocation(line: 703, column: 3, scope: !7879)
!7892 = distinct !DISubprogram(name: "ei_cond", scope: !382, file: !382, line: 771, type: !7893, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7893 = !DISubroutineType(types: !7894)
!7894 = !{!2672, !7861, !4303}
!7895 = !DILocalVariable(name: "ei", arg: 1, scope: !7892, file: !382, line: 771, type: !7861)
!7896 = !DILocation(line: 771, column: 24, scope: !7892)
!7897 = !DILocalVariable(name: "p", arg: 2, scope: !7892, file: !382, line: 771, type: !4303)
!7898 = !DILocation(line: 771, column: 34, scope: !7892)
!7899 = !DILocation(line: 773, column: 8, scope: !7900)
!7900 = distinct !DILexicalBlock(scope: !7892, file: !382, line: 773, column: 7)
!7901 = !DILocation(line: 773, column: 7, scope: !7892)
!7902 = !DILocation(line: 775, column: 12, scope: !7903)
!7903 = distinct !DILexicalBlock(scope: !7900, file: !382, line: 774, column: 5)
!7904 = !DILocation(line: 775, column: 8, scope: !7903)
!7905 = !DILocation(line: 775, column: 10, scope: !7903)
!7906 = !DILocation(line: 776, column: 7, scope: !7903)
!7907 = !DILocation(line: 780, column: 8, scope: !7908)
!7908 = distinct !DILexicalBlock(scope: !7900, file: !382, line: 779, column: 5)
!7909 = !DILocation(line: 780, column: 10, scope: !7908)
!7910 = !DILocation(line: 781, column: 7, scope: !7908)
!7911 = !DILocation(line: 783, column: 1, scope: !7892)
!7912 = distinct !DISubprogram(name: "add_phi_args_after_copy_edge", scope: !3, file: !3, line: 4930, type: !4256, scopeLine: 4931, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!7913 = !DILocalVariable(name: "e_copy", arg: 1, scope: !7912, file: !3, line: 4930, type: !2862)
!7914 = !DILocation(line: 4930, column: 36, scope: !7912)
!7915 = !DILocalVariable(name: "bb", scope: !7912, file: !3, line: 4932, type: !3523)
!7916 = !DILocation(line: 4932, column: 15, scope: !7912)
!7917 = !DILocalVariable(name: "bb_copy", scope: !7912, file: !3, line: 4932, type: !3523)
!7918 = !DILocation(line: 4932, column: 19, scope: !7912)
!7919 = !DILocation(line: 4932, column: 29, scope: !7912)
!7920 = !DILocation(line: 4932, column: 37, scope: !7912)
!7921 = !DILocalVariable(name: "dest", scope: !7912, file: !3, line: 4932, type: !3523)
!7922 = !DILocation(line: 4932, column: 42, scope: !7912)
!7923 = !DILocalVariable(name: "e", scope: !7912, file: !3, line: 4933, type: !2862)
!7924 = !DILocation(line: 4933, column: 8, scope: !7912)
!7925 = !DILocalVariable(name: "ei", scope: !7912, file: !3, line: 4934, type: !7861)
!7926 = !DILocation(line: 4934, column: 17, scope: !7912)
!7927 = !DILocalVariable(name: "phi", scope: !7912, file: !3, line: 4935, type: !2882)
!7928 = !DILocation(line: 4935, column: 10, scope: !7912)
!7929 = !DILocalVariable(name: "phi_copy", scope: !7912, file: !3, line: 4935, type: !2882)
!7930 = !DILocation(line: 4935, column: 15, scope: !7912)
!7931 = !DILocalVariable(name: "def", scope: !7912, file: !3, line: 4936, type: !2553)
!7932 = !DILocation(line: 4936, column: 8, scope: !7912)
!7933 = !DILocalVariable(name: "psi", scope: !7912, file: !3, line: 4937, type: !4074)
!7934 = !DILocation(line: 4937, column: 24, scope: !7912)
!7935 = !DILocalVariable(name: "psi_copy", scope: !7912, file: !3, line: 4937, type: !4074)
!7936 = !DILocation(line: 4937, column: 29, scope: !7912)
!7937 = !DILocation(line: 4939, column: 38, scope: !7938)
!7938 = distinct !DILexicalBlock(scope: !7912, file: !3, line: 4939, column: 7)
!7939 = !DILocation(line: 4939, column: 46, scope: !7938)
!7940 = !DILocation(line: 4939, column: 27, scope: !7938)
!7941 = !DILocation(line: 4939, column: 7, scope: !7938)
!7942 = !DILocation(line: 4939, column: 7, scope: !7912)
!7943 = !DILocation(line: 4940, column: 5, scope: !7938)
!7944 = !DILocation(line: 4942, column: 8, scope: !7912)
!7945 = !DILocation(line: 4942, column: 17, scope: !7912)
!7946 = !DILocation(line: 4942, column: 23, scope: !7912)
!7947 = !DILocation(line: 4942, column: 58, scope: !7912)
!7948 = !DILocation(line: 4942, column: 41, scope: !7912)
!7949 = !DILocation(line: 4942, column: 69, scope: !7912)
!7950 = !DILocation(line: 4942, column: 6, scope: !7912)
!7951 = !DILocation(line: 4944, column: 7, scope: !7952)
!7952 = distinct !DILexicalBlock(scope: !7912, file: !3, line: 4944, column: 7)
!7953 = !DILocation(line: 4944, column: 15, scope: !7952)
!7954 = !DILocation(line: 4944, column: 21, scope: !7952)
!7955 = !DILocation(line: 4944, column: 27, scope: !7952)
!7956 = !DILocation(line: 4944, column: 7, scope: !7912)
!7957 = !DILocation(line: 4945, column: 29, scope: !7952)
!7958 = !DILocation(line: 4945, column: 37, scope: !7952)
!7959 = !DILocation(line: 4945, column: 12, scope: !7952)
!7960 = !DILocation(line: 4945, column: 10, scope: !7952)
!7961 = !DILocation(line: 4945, column: 5, scope: !7952)
!7962 = !DILocation(line: 4947, column: 12, scope: !7952)
!7963 = !DILocation(line: 4947, column: 20, scope: !7952)
!7964 = !DILocation(line: 4947, column: 10, scope: !7952)
!7965 = !DILocation(line: 4949, column: 18, scope: !7912)
!7966 = !DILocation(line: 4949, column: 22, scope: !7912)
!7967 = !DILocation(line: 4949, column: 7, scope: !7912)
!7968 = !DILocation(line: 4949, column: 5, scope: !7912)
!7969 = !DILocation(line: 4950, column: 8, scope: !7970)
!7970 = distinct !DILexicalBlock(scope: !7912, file: !3, line: 4950, column: 7)
!7971 = !DILocation(line: 4950, column: 7, scope: !7912)
!7972 = !DILocation(line: 4955, column: 7, scope: !7973)
!7973 = distinct !DILexicalBlock(scope: !7974, file: !3, line: 4955, column: 7)
!7974 = distinct !DILexicalBlock(scope: !7970, file: !3, line: 4951, column: 5)
!7975 = !DILocation(line: 4955, column: 7, scope: !7976)
!7976 = distinct !DILexicalBlock(scope: !7973, file: !3, line: 4955, column: 7)
!7977 = !DILocation(line: 4957, column: 9, scope: !7978)
!7978 = distinct !DILexicalBlock(scope: !7979, file: !3, line: 4957, column: 8)
!7979 = distinct !DILexicalBlock(scope: !7976, file: !3, line: 4956, column: 2)
!7980 = !DILocation(line: 4957, column: 12, scope: !7978)
!7981 = !DILocation(line: 4957, column: 18, scope: !7978)
!7982 = !DILocation(line: 4957, column: 24, scope: !7978)
!7983 = !DILocation(line: 4958, column: 8, scope: !7978)
!7984 = !DILocation(line: 4958, column: 28, scope: !7978)
!7985 = !DILocation(line: 4958, column: 31, scope: !7978)
!7986 = !DILocation(line: 4958, column: 11, scope: !7978)
!7987 = !DILocation(line: 4958, column: 40, scope: !7978)
!7988 = !DILocation(line: 4958, column: 37, scope: !7978)
!7989 = !DILocation(line: 4957, column: 8, scope: !7979)
!7990 = !DILocation(line: 4959, column: 6, scope: !7978)
!7991 = !DILocation(line: 4960, column: 2, scope: !7979)
!7992 = distinct !{!7992, !7972, !7993}
!7993 = !DILocation(line: 4960, column: 2, scope: !7973)
!7994 = !DILocation(line: 4962, column: 7, scope: !7974)
!7995 = !DILocation(line: 4963, column: 5, scope: !7974)
!7996 = !DILocation(line: 4965, column: 30, scope: !7997)
!7997 = distinct !DILexicalBlock(scope: !7912, file: !3, line: 4965, column: 3)
!7998 = !DILocation(line: 4965, column: 33, scope: !7997)
!7999 = !DILocation(line: 4965, column: 14, scope: !7997)
!8000 = !DILocation(line: 4966, column: 35, scope: !7997)
!8001 = !DILocation(line: 4966, column: 43, scope: !7997)
!8002 = !DILocation(line: 4966, column: 19, scope: !7997)
!8003 = !DILocation(line: 4965, column: 8, scope: !7997)
!8004 = !DILocation(line: 4967, column: 9, scope: !8005)
!8005 = distinct !DILexicalBlock(scope: !7997, file: !3, line: 4965, column: 3)
!8006 = !DILocation(line: 4967, column: 8, scope: !8005)
!8007 = !DILocation(line: 4965, column: 3, scope: !7997)
!8008 = !DILocation(line: 4970, column: 13, scope: !8009)
!8009 = distinct !DILexicalBlock(scope: !8005, file: !3, line: 4969, column: 5)
!8010 = !DILocation(line: 4970, column: 11, scope: !8009)
!8011 = !DILocation(line: 4971, column: 18, scope: !8009)
!8012 = !DILocation(line: 4971, column: 16, scope: !8009)
!8013 = !DILocation(line: 4972, column: 13, scope: !8009)
!8014 = !DILocation(line: 4972, column: 11, scope: !8009)
!8015 = !DILocation(line: 4973, column: 20, scope: !8009)
!8016 = !DILocation(line: 4973, column: 30, scope: !8009)
!8017 = !DILocation(line: 4973, column: 35, scope: !8009)
!8018 = !DILocation(line: 4974, column: 41, scope: !8009)
!8019 = !DILocation(line: 4974, column: 46, scope: !8009)
!8020 = !DILocation(line: 4974, column: 6, scope: !8009)
!8021 = !DILocation(line: 4973, column: 7, scope: !8009)
!8022 = !DILocation(line: 4975, column: 5, scope: !8009)
!8023 = !DILocation(line: 4968, column: 8, scope: !8005)
!8024 = !DILocation(line: 4968, column: 25, scope: !8005)
!8025 = !DILocation(line: 4965, column: 3, scope: !8005)
!8026 = distinct !{!8026, !8007, !8027}
!8027 = !DILocation(line: 4975, column: 5, scope: !7997)
!8028 = !DILocation(line: 4976, column: 1, scope: !7912)
!8029 = distinct !DISubprogram(name: "ei_next", scope: !382, file: !382, line: 736, type: !8030, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!8030 = !DISubroutineType(types: !8031)
!8031 = !{null, !8032}
!8032 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7861, size: 64)
!8033 = !DILocalVariable(name: "i", arg: 1, scope: !8029, file: !382, line: 736, type: !8032)
!8034 = !DILocation(line: 736, column: 25, scope: !8029)
!8035 = !DILocation(line: 738, column: 3, scope: !8029)
!8036 = !DILocation(line: 739, column: 3, scope: !8029)
!8037 = !DILocation(line: 739, column: 6, scope: !8029)
!8038 = !DILocation(line: 739, column: 11, scope: !8029)
!8039 = !DILocation(line: 740, column: 1, scope: !8029)
!8040 = distinct !DISubprogram(name: "add_phi_args_after_copy", scope: !3, file: !3, line: 5001, type: !8041, scopeLine: 5003, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!8041 = !DISubroutineType(types: !8042)
!8042 = !{null, !4039, !7, !2862}
!8043 = !DILocalVariable(name: "region_copy", arg: 1, scope: !8040, file: !3, line: 5001, type: !4039)
!8044 = !DILocation(line: 5001, column: 39, scope: !8040)
!8045 = !DILocalVariable(name: "n_region", arg: 2, scope: !8040, file: !3, line: 5001, type: !7)
!8046 = !DILocation(line: 5001, column: 61, scope: !8040)
!8047 = !DILocalVariable(name: "e_copy", arg: 3, scope: !8040, file: !3, line: 5002, type: !2862)
!8048 = !DILocation(line: 5002, column: 10, scope: !8040)
!8049 = !DILocalVariable(name: "i", scope: !8040, file: !3, line: 5004, type: !7)
!8050 = !DILocation(line: 5004, column: 12, scope: !8040)
!8051 = !DILocation(line: 5006, column: 10, scope: !8052)
!8052 = distinct !DILexicalBlock(scope: !8040, file: !3, line: 5006, column: 3)
!8053 = !DILocation(line: 5006, column: 8, scope: !8052)
!8054 = !DILocation(line: 5006, column: 15, scope: !8055)
!8055 = distinct !DILexicalBlock(scope: !8052, file: !3, line: 5006, column: 3)
!8056 = !DILocation(line: 5006, column: 19, scope: !8055)
!8057 = !DILocation(line: 5006, column: 17, scope: !8055)
!8058 = !DILocation(line: 5006, column: 3, scope: !8052)
!8059 = !DILocation(line: 5007, column: 5, scope: !8055)
!8060 = !DILocation(line: 5007, column: 17, scope: !8055)
!8061 = !DILocation(line: 5007, column: 21, scope: !8055)
!8062 = !DILocation(line: 5007, column: 27, scope: !8055)
!8063 = !DILocation(line: 5006, column: 30, scope: !8055)
!8064 = !DILocation(line: 5006, column: 3, scope: !8055)
!8065 = distinct !{!8065, !8058, !8066}
!8066 = !DILocation(line: 5007, column: 30, scope: !8052)
!8067 = !DILocation(line: 5009, column: 10, scope: !8068)
!8068 = distinct !DILexicalBlock(scope: !8040, file: !3, line: 5009, column: 3)
!8069 = !DILocation(line: 5009, column: 8, scope: !8068)
!8070 = !DILocation(line: 5009, column: 15, scope: !8071)
!8071 = distinct !DILexicalBlock(scope: !8068, file: !3, line: 5009, column: 3)
!8072 = !DILocation(line: 5009, column: 19, scope: !8071)
!8073 = !DILocation(line: 5009, column: 17, scope: !8071)
!8074 = !DILocation(line: 5009, column: 3, scope: !8068)
!8075 = !DILocation(line: 5010, column: 33, scope: !8071)
!8076 = !DILocation(line: 5010, column: 45, scope: !8071)
!8077 = !DILocation(line: 5010, column: 5, scope: !8071)
!8078 = !DILocation(line: 5009, column: 30, scope: !8071)
!8079 = !DILocation(line: 5009, column: 3, scope: !8071)
!8080 = distinct !{!8080, !8074, !8081}
!8081 = !DILocation(line: 5010, column: 47, scope: !8068)
!8082 = !DILocation(line: 5011, column: 7, scope: !8083)
!8083 = distinct !DILexicalBlock(scope: !8040, file: !3, line: 5011, column: 7)
!8084 = !DILocation(line: 5011, column: 7, scope: !8040)
!8085 = !DILocation(line: 5012, column: 35, scope: !8083)
!8086 = !DILocation(line: 5012, column: 5, scope: !8083)
!8087 = !DILocation(line: 5014, column: 10, scope: !8088)
!8088 = distinct !DILexicalBlock(scope: !8040, file: !3, line: 5014, column: 3)
!8089 = !DILocation(line: 5014, column: 8, scope: !8088)
!8090 = !DILocation(line: 5014, column: 15, scope: !8091)
!8091 = distinct !DILexicalBlock(scope: !8088, file: !3, line: 5014, column: 3)
!8092 = !DILocation(line: 5014, column: 19, scope: !8091)
!8093 = !DILocation(line: 5014, column: 17, scope: !8091)
!8094 = !DILocation(line: 5014, column: 3, scope: !8088)
!8095 = !DILocation(line: 5015, column: 5, scope: !8091)
!8096 = !DILocation(line: 5015, column: 17, scope: !8091)
!8097 = !DILocation(line: 5015, column: 21, scope: !8091)
!8098 = !DILocation(line: 5015, column: 27, scope: !8091)
!8099 = !DILocation(line: 5014, column: 30, scope: !8091)
!8100 = !DILocation(line: 5014, column: 3, scope: !8091)
!8101 = distinct !{!8101, !8094, !8102}
!8102 = !DILocation(line: 5015, column: 31, scope: !8088)
!8103 = !DILocation(line: 5016, column: 1, scope: !8040)
!8104 = distinct !DISubprogram(name: "gimple_duplicate_sese_region", scope: !3, file: !3, line: 5029, type: !8105, scopeLine: 5032, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!8105 = !DISubroutineType(types: !8106)
!8106 = !{!2672, !2862, !2862, !4039, !7, !4039}
!8107 = !DILocalVariable(name: "entry", arg: 1, scope: !8104, file: !3, line: 5029, type: !2862)
!8108 = !DILocation(line: 5029, column: 36, scope: !8104)
!8109 = !DILocalVariable(name: "exit", arg: 2, scope: !8104, file: !3, line: 5029, type: !2862)
!8110 = !DILocation(line: 5029, column: 48, scope: !8104)
!8111 = !DILocalVariable(name: "region", arg: 3, scope: !8104, file: !3, line: 5030, type: !4039)
!8112 = !DILocation(line: 5030, column: 21, scope: !8104)
!8113 = !DILocalVariable(name: "n_region", arg: 4, scope: !8104, file: !3, line: 5030, type: !7)
!8114 = !DILocation(line: 5030, column: 38, scope: !8104)
!8115 = !DILocalVariable(name: "region_copy", arg: 5, scope: !8104, file: !3, line: 5031, type: !4039)
!8116 = !DILocation(line: 5031, column: 21, scope: !8104)
!8117 = !DILocalVariable(name: "i", scope: !8104, file: !3, line: 5033, type: !7)
!8118 = !DILocation(line: 5033, column: 12, scope: !8104)
!8119 = !DILocalVariable(name: "free_region_copy", scope: !8104, file: !3, line: 5034, type: !2672)
!8120 = !DILocation(line: 5034, column: 8, scope: !8104)
!8121 = !DILocalVariable(name: "copying_header", scope: !8104, file: !3, line: 5034, type: !2672)
!8122 = !DILocation(line: 5034, column: 34, scope: !8104)
!8123 = !DILocalVariable(name: "loop", scope: !8104, file: !3, line: 5035, type: !3097)
!8124 = !DILocation(line: 5035, column: 16, scope: !8104)
!8125 = !DILocation(line: 5035, column: 23, scope: !8104)
!8126 = !DILocation(line: 5035, column: 30, scope: !8104)
!8127 = !DILocation(line: 5035, column: 36, scope: !8104)
!8128 = !DILocalVariable(name: "exit_copy", scope: !8104, file: !3, line: 5036, type: !2862)
!8129 = !DILocation(line: 5036, column: 8, scope: !8104)
!8130 = !DILocalVariable(name: "doms", scope: !8104, file: !3, line: 5037, type: !4094)
!8131 = !DILocation(line: 5037, column: 28, scope: !8104)
!8132 = !DILocalVariable(name: "redirected", scope: !8104, file: !3, line: 5038, type: !2862)
!8133 = !DILocation(line: 5038, column: 8, scope: !8104)
!8134 = !DILocalVariable(name: "total_freq", scope: !8104, file: !3, line: 5039, type: !2548)
!8135 = !DILocation(line: 5039, column: 7, scope: !8104)
!8136 = !DILocalVariable(name: "entry_freq", scope: !8104, file: !3, line: 5039, type: !2548)
!8137 = !DILocation(line: 5039, column: 23, scope: !8104)
!8138 = !DILocalVariable(name: "total_count", scope: !8104, file: !3, line: 5040, type: !3093)
!8139 = !DILocation(line: 5040, column: 13, scope: !8104)
!8140 = !DILocalVariable(name: "entry_count", scope: !8104, file: !3, line: 5040, type: !3093)
!8141 = !DILocation(line: 5040, column: 30, scope: !8104)
!8142 = !DILocation(line: 5042, column: 24, scope: !8143)
!8143 = distinct !DILexicalBlock(scope: !8104, file: !3, line: 5042, column: 7)
!8144 = !DILocation(line: 5042, column: 32, scope: !8143)
!8145 = !DILocation(line: 5042, column: 8, scope: !8143)
!8146 = !DILocation(line: 5042, column: 7, scope: !8104)
!8147 = !DILocation(line: 5043, column: 5, scope: !8143)
!8148 = !DILocation(line: 5049, column: 10, scope: !8149)
!8149 = distinct !DILexicalBlock(scope: !8104, file: !3, line: 5049, column: 3)
!8150 = !DILocation(line: 5049, column: 8, scope: !8149)
!8151 = !DILocation(line: 5049, column: 15, scope: !8152)
!8152 = distinct !DILexicalBlock(scope: !8149, file: !3, line: 5049, column: 3)
!8153 = !DILocation(line: 5049, column: 19, scope: !8152)
!8154 = !DILocation(line: 5049, column: 17, scope: !8152)
!8155 = !DILocation(line: 5049, column: 3, scope: !8149)
!8156 = !DILocation(line: 5053, column: 11, scope: !8157)
!8157 = distinct !DILexicalBlock(scope: !8158, file: !3, line: 5053, column: 11)
!8158 = distinct !DILexicalBlock(scope: !8152, file: !3, line: 5050, column: 5)
!8159 = !DILocation(line: 5053, column: 18, scope: !8157)
!8160 = !DILocation(line: 5053, column: 22, scope: !8157)
!8161 = !DILocation(line: 5053, column: 37, scope: !8157)
!8162 = !DILocation(line: 5053, column: 34, scope: !8157)
!8163 = !DILocation(line: 5053, column: 11, scope: !8158)
!8164 = !DILocation(line: 5054, column: 2, scope: !8157)
!8165 = !DILocation(line: 5056, column: 11, scope: !8166)
!8166 = distinct !DILexicalBlock(scope: !8158, file: !3, line: 5056, column: 11)
!8167 = !DILocation(line: 5056, column: 18, scope: !8166)
!8168 = !DILocation(line: 5056, column: 24, scope: !8166)
!8169 = !DILocation(line: 5056, column: 31, scope: !8166)
!8170 = !DILocation(line: 5056, column: 21, scope: !8166)
!8171 = !DILocation(line: 5057, column: 4, scope: !8166)
!8172 = !DILocation(line: 5057, column: 7, scope: !8166)
!8173 = !DILocation(line: 5057, column: 14, scope: !8166)
!8174 = !DILocation(line: 5057, column: 20, scope: !8166)
!8175 = !DILocation(line: 5057, column: 26, scope: !8166)
!8176 = !DILocation(line: 5057, column: 17, scope: !8166)
!8177 = !DILocation(line: 5056, column: 11, scope: !8158)
!8178 = !DILocation(line: 5058, column: 2, scope: !8166)
!8179 = !DILocation(line: 5059, column: 5, scope: !8158)
!8180 = !DILocation(line: 5049, column: 30, scope: !8152)
!8181 = !DILocation(line: 5049, column: 3, scope: !8152)
!8182 = distinct !{!8182, !8155, !8183}
!8183 = !DILocation(line: 5059, column: 5, scope: !8149)
!8184 = !DILocation(line: 5061, column: 18, scope: !8104)
!8185 = !DILocation(line: 5061, column: 24, scope: !8104)
!8186 = !DILocation(line: 5061, column: 3, scope: !8104)
!8187 = !DILocation(line: 5065, column: 7, scope: !8188)
!8188 = distinct !DILexicalBlock(scope: !8104, file: !3, line: 5065, column: 7)
!8189 = !DILocation(line: 5065, column: 13, scope: !8188)
!8190 = !DILocation(line: 5065, column: 23, scope: !8188)
!8191 = !DILocation(line: 5065, column: 30, scope: !8188)
!8192 = !DILocation(line: 5065, column: 20, scope: !8188)
!8193 = !DILocation(line: 5065, column: 7, scope: !8104)
!8194 = !DILocation(line: 5067, column: 22, scope: !8195)
!8195 = distinct !DILexicalBlock(scope: !8188, file: !3, line: 5066, column: 5)
!8196 = !DILocation(line: 5068, column: 22, scope: !8195)
!8197 = !DILocation(line: 5068, column: 40, scope: !8195)
!8198 = !DILocation(line: 5068, column: 28, scope: !8195)
!8199 = !DILocation(line: 5068, column: 7, scope: !8195)
!8200 = !DILocation(line: 5070, column: 44, scope: !8201)
!8201 = distinct !DILexicalBlock(scope: !8195, file: !3, line: 5070, column: 11)
!8202 = !DILocation(line: 5070, column: 50, scope: !8201)
!8203 = !DILocation(line: 5070, column: 57, scope: !8201)
!8204 = !DILocation(line: 5070, column: 63, scope: !8201)
!8205 = !DILocation(line: 5070, column: 12, scope: !8201)
!8206 = !DILocation(line: 5070, column: 11, scope: !8195)
!8207 = !DILocation(line: 5071, column: 2, scope: !8201)
!8208 = !DILocation(line: 5073, column: 14, scope: !8209)
!8209 = distinct !DILexicalBlock(scope: !8195, file: !3, line: 5073, column: 7)
!8210 = !DILocation(line: 5073, column: 12, scope: !8209)
!8211 = !DILocation(line: 5073, column: 19, scope: !8212)
!8212 = distinct !DILexicalBlock(scope: !8209, file: !3, line: 5073, column: 7)
!8213 = !DILocation(line: 5073, column: 23, scope: !8212)
!8214 = !DILocation(line: 5073, column: 21, scope: !8212)
!8215 = !DILocation(line: 5073, column: 7, scope: !8209)
!8216 = !DILocation(line: 5074, column: 6, scope: !8217)
!8217 = distinct !DILexicalBlock(scope: !8212, file: !3, line: 5074, column: 6)
!8218 = !DILocation(line: 5074, column: 13, scope: !8217)
!8219 = !DILocation(line: 5074, column: 19, scope: !8217)
!8220 = !DILocation(line: 5074, column: 25, scope: !8217)
!8221 = !DILocation(line: 5074, column: 16, scope: !8217)
!8222 = !DILocation(line: 5075, column: 6, scope: !8217)
!8223 = !DILocation(line: 5075, column: 41, scope: !8217)
!8224 = !DILocation(line: 5075, column: 48, scope: !8217)
!8225 = !DILocation(line: 5075, column: 52, scope: !8217)
!8226 = !DILocation(line: 5075, column: 58, scope: !8217)
!8227 = !DILocation(line: 5075, column: 9, scope: !8217)
!8228 = !DILocation(line: 5074, column: 6, scope: !8212)
!8229 = !DILocation(line: 5076, column: 4, scope: !8217)
!8230 = !DILocation(line: 5075, column: 61, scope: !8217)
!8231 = !DILocation(line: 5073, column: 34, scope: !8212)
!8232 = !DILocation(line: 5073, column: 7, scope: !8212)
!8233 = distinct !{!8233, !8215, !8234}
!8234 = !DILocation(line: 5076, column: 11, scope: !8209)
!8235 = !DILocation(line: 5077, column: 5, scope: !8195)
!8236 = !DILocation(line: 5079, column: 8, scope: !8237)
!8237 = distinct !DILexicalBlock(scope: !8104, file: !3, line: 5079, column: 7)
!8238 = !DILocation(line: 5079, column: 7, scope: !8104)
!8239 = !DILocation(line: 5081, column: 21, scope: !8240)
!8240 = distinct !DILexicalBlock(scope: !8237, file: !3, line: 5080, column: 5)
!8241 = !DILocation(line: 5081, column: 19, scope: !8240)
!8242 = !DILocation(line: 5082, column: 24, scope: !8240)
!8243 = !DILocation(line: 5083, column: 5, scope: !8240)
!8244 = !DILocation(line: 5085, column: 3, scope: !8104)
!8245 = !DILocation(line: 5089, column: 8, scope: !8104)
!8246 = !DILocation(line: 5090, column: 3, scope: !8104)
!8247 = !DILocation(line: 5092, column: 51, scope: !8104)
!8248 = !DILocation(line: 5092, column: 59, scope: !8104)
!8249 = !DILocation(line: 5092, column: 10, scope: !8104)
!8250 = !DILocation(line: 5092, column: 8, scope: !8104)
!8251 = !DILocation(line: 5094, column: 7, scope: !8252)
!8252 = distinct !DILexicalBlock(scope: !8104, file: !3, line: 5094, column: 7)
!8253 = !DILocation(line: 5094, column: 14, scope: !8252)
!8254 = !DILocation(line: 5094, column: 20, scope: !8252)
!8255 = !DILocation(line: 5094, column: 7, scope: !8104)
!8256 = !DILocation(line: 5096, column: 21, scope: !8257)
!8257 = distinct !DILexicalBlock(scope: !8252, file: !3, line: 5095, column: 5)
!8258 = !DILocation(line: 5096, column: 28, scope: !8257)
!8259 = !DILocation(line: 5096, column: 34, scope: !8257)
!8260 = !DILocation(line: 5096, column: 19, scope: !8257)
!8261 = !DILocation(line: 5097, column: 21, scope: !8257)
!8262 = !DILocation(line: 5097, column: 28, scope: !8257)
!8263 = !DILocation(line: 5097, column: 19, scope: !8257)
!8264 = !DILocation(line: 5100, column: 11, scope: !8265)
!8265 = distinct !DILexicalBlock(scope: !8257, file: !3, line: 5100, column: 11)
!8266 = !DILocation(line: 5100, column: 25, scope: !8265)
!8267 = !DILocation(line: 5100, column: 23, scope: !8265)
!8268 = !DILocation(line: 5100, column: 11, scope: !8257)
!8269 = !DILocation(line: 5101, column: 16, scope: !8265)
!8270 = !DILocation(line: 5101, column: 14, scope: !8265)
!8271 = !DILocation(line: 5101, column: 2, scope: !8265)
!8272 = !DILocation(line: 5102, column: 5, scope: !8257)
!8273 = !DILocation(line: 5105, column: 20, scope: !8274)
!8274 = distinct !DILexicalBlock(scope: !8252, file: !3, line: 5104, column: 5)
!8275 = !DILocation(line: 5105, column: 27, scope: !8274)
!8276 = !DILocation(line: 5105, column: 33, scope: !8274)
!8277 = !DILocation(line: 5105, column: 18, scope: !8274)
!8278 = !DILocation(line: 5106, column: 20, scope: !8274)
!8279 = !DILocation(line: 5106, column: 18, scope: !8274)
!8280 = !DILocation(line: 5109, column: 11, scope: !8281)
!8281 = distinct !DILexicalBlock(scope: !8274, file: !3, line: 5109, column: 11)
!8282 = !DILocation(line: 5109, column: 22, scope: !8281)
!8283 = !DILocation(line: 5109, column: 11, scope: !8274)
!8284 = !DILocation(line: 5110, column: 13, scope: !8281)
!8285 = !DILocation(line: 5110, column: 2, scope: !8281)
!8286 = !DILocation(line: 5111, column: 16, scope: !8287)
!8287 = distinct !DILexicalBlock(scope: !8281, file: !3, line: 5111, column: 16)
!8288 = !DILocation(line: 5111, column: 29, scope: !8287)
!8289 = !DILocation(line: 5111, column: 27, scope: !8287)
!8290 = !DILocation(line: 5111, column: 16, scope: !8281)
!8291 = !DILocation(line: 5112, column: 15, scope: !8287)
!8292 = !DILocation(line: 5112, column: 13, scope: !8287)
!8293 = !DILocation(line: 5112, column: 2, scope: !8287)
!8294 = !DILocation(line: 5115, column: 13, scope: !8104)
!8295 = !DILocation(line: 5115, column: 21, scope: !8104)
!8296 = !DILocation(line: 5115, column: 31, scope: !8104)
!8297 = !DILocation(line: 5115, column: 66, scope: !8104)
!8298 = !DILocation(line: 5116, column: 25, scope: !8104)
!8299 = !DILocation(line: 5116, column: 6, scope: !8104)
!8300 = !DILocation(line: 5115, column: 3, scope: !8104)
!8301 = !DILocation(line: 5117, column: 7, scope: !8302)
!8302 = distinct !DILexicalBlock(scope: !8104, file: !3, line: 5117, column: 7)
!8303 = !DILocation(line: 5117, column: 7, scope: !8104)
!8304 = !DILocation(line: 5119, column: 40, scope: !8305)
!8305 = distinct !DILexicalBlock(scope: !8302, file: !3, line: 5118, column: 5)
!8306 = !DILocation(line: 5119, column: 48, scope: !8305)
!8307 = !DILocation(line: 5120, column: 12, scope: !8305)
!8308 = !DILocation(line: 5120, column: 26, scope: !8305)
!8309 = !DILocation(line: 5120, column: 24, scope: !8305)
!8310 = !DILocation(line: 5121, column: 12, scope: !8305)
!8311 = !DILocation(line: 5119, column: 7, scope: !8305)
!8312 = !DILocation(line: 5122, column: 40, scope: !8305)
!8313 = !DILocation(line: 5122, column: 53, scope: !8305)
!8314 = !DILocation(line: 5122, column: 63, scope: !8305)
!8315 = !DILocation(line: 5123, column: 12, scope: !8305)
!8316 = !DILocation(line: 5122, column: 7, scope: !8305)
!8317 = !DILocation(line: 5124, column: 5, scope: !8305)
!8318 = !DILocation(line: 5127, column: 34, scope: !8319)
!8319 = distinct !DILexicalBlock(scope: !8302, file: !3, line: 5126, column: 5)
!8320 = !DILocation(line: 5127, column: 42, scope: !8319)
!8321 = !DILocation(line: 5127, column: 52, scope: !8319)
!8322 = !DILocation(line: 5127, column: 65, scope: !8319)
!8323 = !DILocation(line: 5127, column: 63, scope: !8319)
!8324 = !DILocation(line: 5128, column: 6, scope: !8319)
!8325 = !DILocation(line: 5127, column: 7, scope: !8319)
!8326 = !DILocation(line: 5129, column: 34, scope: !8319)
!8327 = !DILocation(line: 5129, column: 47, scope: !8319)
!8328 = !DILocation(line: 5129, column: 57, scope: !8319)
!8329 = !DILocation(line: 5129, column: 69, scope: !8319)
!8330 = !DILocation(line: 5129, column: 7, scope: !8319)
!8331 = !DILocation(line: 5132, column: 7, scope: !8332)
!8332 = distinct !DILexicalBlock(scope: !8104, file: !3, line: 5132, column: 7)
!8333 = !DILocation(line: 5132, column: 7, scope: !8104)
!8334 = !DILocation(line: 5134, column: 22, scope: !8335)
!8335 = distinct !DILexicalBlock(scope: !8332, file: !3, line: 5133, column: 5)
!8336 = !DILocation(line: 5134, column: 28, scope: !8335)
!8337 = !DILocation(line: 5134, column: 7, scope: !8335)
!8338 = !DILocation(line: 5134, column: 13, scope: !8335)
!8339 = !DILocation(line: 5134, column: 20, scope: !8335)
!8340 = !DILocation(line: 5135, column: 21, scope: !8335)
!8341 = !DILocation(line: 5135, column: 27, scope: !8335)
!8342 = !DILocation(line: 5135, column: 7, scope: !8335)
!8343 = !DILocation(line: 5135, column: 13, scope: !8335)
!8344 = !DILocation(line: 5135, column: 19, scope: !8335)
!8345 = !DILocation(line: 5136, column: 5, scope: !8335)
!8346 = !DILocation(line: 5139, column: 42, scope: !8104)
!8347 = !DILocation(line: 5139, column: 62, scope: !8104)
!8348 = !DILocation(line: 5139, column: 69, scope: !8104)
!8349 = !DILocation(line: 5139, column: 49, scope: !8104)
!8350 = !DILocation(line: 5139, column: 16, scope: !8104)
!8351 = !DILocation(line: 5139, column: 14, scope: !8104)
!8352 = !DILocation(line: 5140, column: 3, scope: !8104)
!8353 = !DILocation(line: 5141, column: 24, scope: !8104)
!8354 = !DILocation(line: 5141, column: 3, scope: !8104)
!8355 = !DILocation(line: 5147, column: 44, scope: !8104)
!8356 = !DILocation(line: 5147, column: 51, scope: !8104)
!8357 = !DILocation(line: 5147, column: 57, scope: !8104)
!8358 = !DILocation(line: 5147, column: 64, scope: !8104)
!8359 = !DILocation(line: 5147, column: 3, scope: !8104)
!8360 = !DILocation(line: 5148, column: 3, scope: !8104)
!8361 = !DILocation(line: 5149, column: 43, scope: !8104)
!8362 = !DILocation(line: 5149, column: 3, scope: !8104)
!8363 = !DILocation(line: 5150, column: 3, scope: !8104)
!8364 = !DILocation(line: 5153, column: 28, scope: !8104)
!8365 = !DILocation(line: 5153, column: 41, scope: !8104)
!8366 = !DILocation(line: 5153, column: 3, scope: !8104)
!8367 = !DILocation(line: 5156, column: 3, scope: !8104)
!8368 = !DILocation(line: 5158, column: 7, scope: !8369)
!8369 = distinct !DILexicalBlock(scope: !8104, file: !3, line: 5158, column: 7)
!8370 = !DILocation(line: 5158, column: 7, scope: !8104)
!8371 = !DILocation(line: 5159, column: 11, scope: !8369)
!8372 = !DILocation(line: 5159, column: 5, scope: !8369)
!8373 = !DILocation(line: 5161, column: 3, scope: !8104)
!8374 = !DILocation(line: 5162, column: 3, scope: !8104)
!8375 = !DILocation(line: 5163, column: 1, scope: !8104)
!8376 = distinct !DISubprogram(name: "loop_outer", scope: !337, file: !337, line: 434, type: !8377, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!8377 = !DISubroutineType(types: !8378)
!8378 = !{!3097, !8379}
!8379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8380, size: 64)
!8380 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3098)
!8381 = !DILocalVariable(name: "loop", arg: 1, scope: !8376, file: !337, line: 434, type: !8379)
!8382 = !DILocation(line: 434, column: 32, scope: !8376)
!8383 = !DILocalVariable(name: "n", scope: !8376, file: !337, line: 436, type: !7)
!8384 = !DILocation(line: 436, column: 12, scope: !8376)
!8385 = !DILocation(line: 436, column: 16, scope: !8376)
!8386 = !DILocation(line: 438, column: 7, scope: !8387)
!8387 = distinct !DILexicalBlock(scope: !8376, file: !337, line: 438, column: 7)
!8388 = !DILocation(line: 438, column: 9, scope: !8387)
!8389 = !DILocation(line: 438, column: 7, scope: !8376)
!8390 = !DILocation(line: 439, column: 5, scope: !8387)
!8391 = !DILocation(line: 441, column: 10, scope: !8376)
!8392 = !DILocation(line: 441, column: 3, scope: !8376)
!8393 = !DILocation(line: 442, column: 1, scope: !8376)
!8394 = distinct !DISubprogram(name: "split_edge_bb_loc", scope: !3, file: !3, line: 2444, type: !4252, scopeLine: 2445, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!8395 = !DILocalVariable(name: "edge_in", arg: 1, scope: !8394, file: !3, line: 2444, type: !2862)
!8396 = !DILocation(line: 2444, column: 25, scope: !8394)
!8397 = !DILocalVariable(name: "dest", scope: !8394, file: !3, line: 2446, type: !3523)
!8398 = !DILocation(line: 2446, column: 15, scope: !8394)
!8399 = !DILocation(line: 2446, column: 22, scope: !8394)
!8400 = !DILocation(line: 2446, column: 31, scope: !8394)
!8401 = !DILocalVariable(name: "dest_prev", scope: !8394, file: !3, line: 2447, type: !3523)
!8402 = !DILocation(line: 2447, column: 15, scope: !8394)
!8403 = !DILocation(line: 2447, column: 27, scope: !8394)
!8404 = !DILocation(line: 2447, column: 33, scope: !8394)
!8405 = !DILocation(line: 2449, column: 7, scope: !8406)
!8406 = distinct !DILexicalBlock(scope: !8394, file: !3, line: 2449, column: 7)
!8407 = !DILocation(line: 2449, column: 7, scope: !8394)
!8408 = !DILocalVariable(name: "e", scope: !8409, file: !3, line: 2451, type: !2862)
!8409 = distinct !DILexicalBlock(scope: !8406, file: !3, line: 2450, column: 5)
!8410 = !DILocation(line: 2451, column: 12, scope: !8409)
!8411 = !DILocation(line: 2451, column: 27, scope: !8409)
!8412 = !DILocation(line: 2451, column: 38, scope: !8409)
!8413 = !DILocation(line: 2451, column: 16, scope: !8409)
!8414 = !DILocation(line: 2452, column: 11, scope: !8415)
!8415 = distinct !DILexicalBlock(scope: !8409, file: !3, line: 2452, column: 11)
!8416 = !DILocation(line: 2452, column: 13, scope: !8415)
!8417 = !DILocation(line: 2452, column: 18, scope: !8415)
!8418 = !DILocation(line: 2452, column: 21, scope: !8415)
!8419 = !DILocation(line: 2452, column: 27, scope: !8415)
!8420 = !DILocation(line: 2452, column: 11, scope: !8409)
!8421 = !DILocation(line: 2453, column: 9, scope: !8415)
!8422 = !DILocation(line: 2453, column: 18, scope: !8415)
!8423 = !DILocation(line: 2453, column: 2, scope: !8415)
!8424 = !DILocation(line: 2454, column: 5, scope: !8409)
!8425 = !DILocation(line: 2455, column: 10, scope: !8394)
!8426 = !DILocation(line: 2455, column: 3, scope: !8394)
!8427 = !DILocation(line: 2456, column: 1, scope: !8394)
!8428 = distinct !DISubprogram(name: "VEC_basic_block_heap_safe_push", scope: !382, file: !382, line: 283, type: !8429, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!8429 = !DISubroutineType(types: !8430)
!8430 = !{!4039, !8431, !3523}
!8431 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4094, size: 64)
!8432 = !DILocalVariable(name: "vec_", arg: 1, scope: !8428, file: !382, line: 283, type: !8431)
!8433 = !DILocation(line: 283, column: 1, scope: !8428)
!8434 = !DILocalVariable(name: "obj_", arg: 2, scope: !8428, file: !382, line: 283, type: !3523)
!8435 = distinct !DISubprogram(name: "VEC_basic_block_heap_free", scope: !382, file: !382, line: 283, type: !8436, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!8436 = !DISubroutineType(types: !8437)
!8437 = !{null, !8431}
!8438 = !DILocalVariable(name: "vec_", arg: 1, scope: !8435, file: !382, line: 283, type: !8431)
!8439 = !DILocation(line: 283, column: 1, scope: !8435)
!8440 = !DILocation(line: 283, column: 1, scope: !8441)
!8441 = distinct !DILexicalBlock(scope: !8435, file: !382, line: 283, column: 1)
!8442 = distinct !DISubprogram(name: "gimple_duplicate_sese_tail", scope: !3, file: !3, line: 5195, type: !8105, scopeLine: 5198, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!8443 = !DILocalVariable(name: "entry", arg: 1, scope: !8442, file: !3, line: 5195, type: !2862)
!8444 = !DILocation(line: 5195, column: 34, scope: !8442)
!8445 = !DILocalVariable(name: "exit", arg: 2, scope: !8442, file: !3, line: 5195, type: !2862)
!8446 = !DILocation(line: 5195, column: 63, scope: !8442)
!8447 = !DILocalVariable(name: "region", arg: 3, scope: !8442, file: !3, line: 5196, type: !4039)
!8448 = !DILocation(line: 5196, column: 19, scope: !8442)
!8449 = !DILocalVariable(name: "n_region", arg: 4, scope: !8442, file: !3, line: 5196, type: !7)
!8450 = !DILocation(line: 5196, column: 53, scope: !8442)
!8451 = !DILocalVariable(name: "region_copy", arg: 5, scope: !8442, file: !3, line: 5197, type: !4039)
!8452 = !DILocation(line: 5197, column: 19, scope: !8442)
!8453 = !DILocalVariable(name: "i", scope: !8442, file: !3, line: 5199, type: !7)
!8454 = !DILocation(line: 5199, column: 12, scope: !8442)
!8455 = !DILocalVariable(name: "free_region_copy", scope: !8442, file: !3, line: 5200, type: !2672)
!8456 = !DILocation(line: 5200, column: 8, scope: !8442)
!8457 = !DILocalVariable(name: "loop", scope: !8442, file: !3, line: 5201, type: !3097)
!8458 = !DILocation(line: 5201, column: 16, scope: !8442)
!8459 = !DILocation(line: 5201, column: 23, scope: !8442)
!8460 = !DILocation(line: 5201, column: 29, scope: !8442)
!8461 = !DILocation(line: 5201, column: 35, scope: !8442)
!8462 = !DILocalVariable(name: "orig_loop", scope: !8442, file: !3, line: 5202, type: !3097)
!8463 = !DILocation(line: 5202, column: 16, scope: !8442)
!8464 = !DILocation(line: 5202, column: 28, scope: !8442)
!8465 = !DILocation(line: 5202, column: 35, scope: !8442)
!8466 = !DILocation(line: 5202, column: 41, scope: !8442)
!8467 = !DILocalVariable(name: "switch_bb", scope: !8442, file: !3, line: 5203, type: !3523)
!8468 = !DILocation(line: 5203, column: 15, scope: !8442)
!8469 = !DILocalVariable(name: "entry_bb", scope: !8442, file: !3, line: 5203, type: !3523)
!8470 = !DILocation(line: 5203, column: 26, scope: !8442)
!8471 = !DILocalVariable(name: "nentry_bb", scope: !8442, file: !3, line: 5203, type: !3523)
!8472 = !DILocation(line: 5203, column: 36, scope: !8442)
!8473 = !DILocalVariable(name: "doms", scope: !8442, file: !3, line: 5204, type: !4094)
!8474 = !DILocation(line: 5204, column: 28, scope: !8442)
!8475 = !DILocalVariable(name: "total_freq", scope: !8442, file: !3, line: 5205, type: !2548)
!8476 = !DILocation(line: 5205, column: 7, scope: !8442)
!8477 = !DILocalVariable(name: "exit_freq", scope: !8442, file: !3, line: 5205, type: !2548)
!8478 = !DILocation(line: 5205, column: 23, scope: !8442)
!8479 = !DILocalVariable(name: "total_count", scope: !8442, file: !3, line: 5206, type: !3093)
!8480 = !DILocation(line: 5206, column: 13, scope: !8442)
!8481 = !DILocalVariable(name: "exit_count", scope: !8442, file: !3, line: 5206, type: !3093)
!8482 = !DILocation(line: 5206, column: 30, scope: !8442)
!8483 = !DILocalVariable(name: "exits", scope: !8442, file: !3, line: 5207, type: !8484)
!8484 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2862, size: 128, elements: !2800)
!8485 = !DILocation(line: 5207, column: 8, scope: !8442)
!8486 = !DILocalVariable(name: "nexits", scope: !8442, file: !3, line: 5207, type: !8484)
!8487 = !DILocation(line: 5207, column: 18, scope: !8442)
!8488 = !DILocalVariable(name: "e", scope: !8442, file: !3, line: 5207, type: !2862)
!8489 = !DILocation(line: 5207, column: 29, scope: !8442)
!8490 = !DILocalVariable(name: "gsi", scope: !8442, file: !3, line: 5208, type: !4074)
!8491 = !DILocation(line: 5208, column: 24, scope: !8442)
!8492 = !DILocalVariable(name: "gsi1", scope: !8442, file: !3, line: 5208, type: !4074)
!8493 = !DILocation(line: 5208, column: 28, scope: !8442)
!8494 = !DILocalVariable(name: "cond_stmt", scope: !8442, file: !3, line: 5209, type: !2882)
!8495 = !DILocation(line: 5209, column: 10, scope: !8442)
!8496 = !DILocalVariable(name: "sorig", scope: !8442, file: !3, line: 5210, type: !2862)
!8497 = !DILocation(line: 5210, column: 8, scope: !8442)
!8498 = !DILocalVariable(name: "snew", scope: !8442, file: !3, line: 5210, type: !2862)
!8499 = !DILocation(line: 5210, column: 15, scope: !8442)
!8500 = !DILocalVariable(name: "exit_bb", scope: !8442, file: !3, line: 5211, type: !3523)
!8501 = !DILocation(line: 5211, column: 15, scope: !8442)
!8502 = !DILocalVariable(name: "iters_bb", scope: !8442, file: !3, line: 5212, type: !3523)
!8503 = !DILocation(line: 5212, column: 15, scope: !8442)
!8504 = !DILocalVariable(name: "new_rhs", scope: !8442, file: !3, line: 5213, type: !2553)
!8505 = !DILocation(line: 5213, column: 8, scope: !8442)
!8506 = !DILocalVariable(name: "psi", scope: !8442, file: !3, line: 5214, type: !4074)
!8507 = !DILocation(line: 5214, column: 24, scope: !8442)
!8508 = !DILocalVariable(name: "phi", scope: !8442, file: !3, line: 5215, type: !2882)
!8509 = !DILocation(line: 5215, column: 10, scope: !8442)
!8510 = !DILocalVariable(name: "def", scope: !8442, file: !3, line: 5216, type: !2553)
!8511 = !DILocation(line: 5216, column: 8, scope: !8442)
!8512 = !DILocation(line: 5218, column: 3, scope: !8442)
!8513 = !DILocation(line: 5219, column: 14, scope: !8442)
!8514 = !DILocation(line: 5219, column: 3, scope: !8442)
!8515 = !DILocation(line: 5219, column: 12, scope: !8442)
!8516 = !DILocation(line: 5220, column: 14, scope: !8442)
!8517 = !DILocation(line: 5220, column: 3, scope: !8442)
!8518 = !DILocation(line: 5220, column: 12, scope: !8442)
!8519 = !DILocation(line: 5222, column: 24, scope: !8520)
!8520 = distinct !DILexicalBlock(scope: !8442, file: !3, line: 5222, column: 7)
!8521 = !DILocation(line: 5222, column: 32, scope: !8520)
!8522 = !DILocation(line: 5222, column: 8, scope: !8520)
!8523 = !DILocation(line: 5222, column: 7, scope: !8442)
!8524 = !DILocation(line: 5223, column: 5, scope: !8520)
!8525 = !DILocation(line: 5225, column: 3, scope: !8442)
!8526 = !DILocation(line: 5226, column: 18, scope: !8442)
!8527 = !DILocation(line: 5226, column: 29, scope: !8442)
!8528 = !DILocation(line: 5226, column: 3, scope: !8442)
!8529 = !DILocation(line: 5227, column: 23, scope: !8442)
!8530 = !DILocation(line: 5227, column: 34, scope: !8442)
!8531 = !DILocation(line: 5227, column: 3, scope: !8442)
!8532 = !DILocation(line: 5229, column: 8, scope: !8533)
!8533 = distinct !DILexicalBlock(scope: !8442, file: !3, line: 5229, column: 7)
!8534 = !DILocation(line: 5229, column: 7, scope: !8442)
!8535 = !DILocation(line: 5231, column: 21, scope: !8536)
!8536 = distinct !DILexicalBlock(scope: !8533, file: !3, line: 5230, column: 5)
!8537 = !DILocation(line: 5231, column: 19, scope: !8536)
!8538 = !DILocation(line: 5232, column: 24, scope: !8536)
!8539 = !DILocation(line: 5233, column: 5, scope: !8536)
!8540 = !DILocation(line: 5235, column: 3, scope: !8442)
!8541 = !DILocation(line: 5239, column: 51, scope: !8442)
!8542 = !DILocation(line: 5239, column: 59, scope: !8442)
!8543 = !DILocation(line: 5239, column: 10, scope: !8442)
!8544 = !DILocation(line: 5239, column: 8, scope: !8442)
!8545 = !DILocation(line: 5241, column: 7, scope: !8546)
!8546 = distinct !DILexicalBlock(scope: !8442, file: !3, line: 5241, column: 7)
!8547 = !DILocation(line: 5241, column: 13, scope: !8546)
!8548 = !DILocation(line: 5241, column: 18, scope: !8546)
!8549 = !DILocation(line: 5241, column: 7, scope: !8442)
!8550 = !DILocation(line: 5243, column: 21, scope: !8551)
!8551 = distinct !DILexicalBlock(scope: !8546, file: !3, line: 5242, column: 5)
!8552 = !DILocation(line: 5243, column: 27, scope: !8551)
!8553 = !DILocation(line: 5243, column: 32, scope: !8551)
!8554 = !DILocation(line: 5243, column: 19, scope: !8551)
!8555 = !DILocation(line: 5244, column: 20, scope: !8551)
!8556 = !DILocation(line: 5244, column: 26, scope: !8551)
!8557 = !DILocation(line: 5244, column: 18, scope: !8551)
!8558 = !DILocation(line: 5247, column: 11, scope: !8559)
!8559 = distinct !DILexicalBlock(scope: !8551, file: !3, line: 5247, column: 11)
!8560 = !DILocation(line: 5247, column: 24, scope: !8559)
!8561 = !DILocation(line: 5247, column: 22, scope: !8559)
!8562 = !DILocation(line: 5247, column: 11, scope: !8551)
!8563 = !DILocation(line: 5248, column: 15, scope: !8559)
!8564 = !DILocation(line: 5248, column: 13, scope: !8559)
!8565 = !DILocation(line: 5248, column: 2, scope: !8559)
!8566 = !DILocation(line: 5249, column: 5, scope: !8551)
!8567 = !DILocation(line: 5252, column: 20, scope: !8568)
!8568 = distinct !DILexicalBlock(scope: !8546, file: !3, line: 5251, column: 5)
!8569 = !DILocation(line: 5252, column: 26, scope: !8568)
!8570 = !DILocation(line: 5252, column: 31, scope: !8568)
!8571 = !DILocation(line: 5252, column: 18, scope: !8568)
!8572 = !DILocation(line: 5253, column: 19, scope: !8568)
!8573 = !DILocation(line: 5253, column: 17, scope: !8568)
!8574 = !DILocation(line: 5256, column: 11, scope: !8575)
!8575 = distinct !DILexicalBlock(scope: !8568, file: !3, line: 5256, column: 11)
!8576 = !DILocation(line: 5256, column: 22, scope: !8575)
!8577 = !DILocation(line: 5256, column: 11, scope: !8568)
!8578 = !DILocation(line: 5257, column: 13, scope: !8575)
!8579 = !DILocation(line: 5257, column: 2, scope: !8575)
!8580 = !DILocation(line: 5258, column: 11, scope: !8581)
!8581 = distinct !DILexicalBlock(scope: !8568, file: !3, line: 5258, column: 11)
!8582 = !DILocation(line: 5258, column: 23, scope: !8581)
!8583 = !DILocation(line: 5258, column: 21, scope: !8581)
!8584 = !DILocation(line: 5258, column: 11, scope: !8568)
!8585 = !DILocation(line: 5259, column: 14, scope: !8581)
!8586 = !DILocation(line: 5259, column: 12, scope: !8581)
!8587 = !DILocation(line: 5259, column: 2, scope: !8581)
!8588 = !DILocation(line: 5262, column: 13, scope: !8442)
!8589 = !DILocation(line: 5262, column: 21, scope: !8442)
!8590 = !DILocation(line: 5262, column: 31, scope: !8442)
!8591 = !DILocation(line: 5262, column: 44, scope: !8442)
!8592 = !DILocation(line: 5262, column: 54, scope: !8442)
!8593 = !DILocation(line: 5262, column: 62, scope: !8442)
!8594 = !DILocation(line: 5263, column: 25, scope: !8442)
!8595 = !DILocation(line: 5263, column: 6, scope: !8442)
!8596 = !DILocation(line: 5262, column: 3, scope: !8442)
!8597 = !DILocation(line: 5264, column: 7, scope: !8598)
!8598 = distinct !DILexicalBlock(scope: !8442, file: !3, line: 5264, column: 7)
!8599 = !DILocation(line: 5264, column: 7, scope: !8442)
!8600 = !DILocation(line: 5266, column: 40, scope: !8601)
!8601 = distinct !DILexicalBlock(scope: !8598, file: !3, line: 5265, column: 5)
!8602 = !DILocation(line: 5266, column: 48, scope: !8601)
!8603 = !DILocation(line: 5267, column: 12, scope: !8601)
!8604 = !DILocation(line: 5267, column: 26, scope: !8601)
!8605 = !DILocation(line: 5267, column: 24, scope: !8601)
!8606 = !DILocation(line: 5268, column: 12, scope: !8601)
!8607 = !DILocation(line: 5266, column: 7, scope: !8601)
!8608 = !DILocation(line: 5269, column: 40, scope: !8601)
!8609 = !DILocation(line: 5269, column: 53, scope: !8601)
!8610 = !DILocation(line: 5269, column: 63, scope: !8601)
!8611 = !DILocation(line: 5270, column: 12, scope: !8601)
!8612 = !DILocation(line: 5269, column: 7, scope: !8601)
!8613 = !DILocation(line: 5271, column: 5, scope: !8601)
!8614 = !DILocation(line: 5274, column: 34, scope: !8615)
!8615 = distinct !DILexicalBlock(scope: !8598, file: !3, line: 5273, column: 5)
!8616 = !DILocation(line: 5274, column: 42, scope: !8615)
!8617 = !DILocation(line: 5274, column: 52, scope: !8615)
!8618 = !DILocation(line: 5274, column: 65, scope: !8615)
!8619 = !DILocation(line: 5274, column: 63, scope: !8615)
!8620 = !DILocation(line: 5275, column: 6, scope: !8615)
!8621 = !DILocation(line: 5274, column: 7, scope: !8615)
!8622 = !DILocation(line: 5276, column: 34, scope: !8615)
!8623 = !DILocation(line: 5276, column: 47, scope: !8615)
!8624 = !DILocation(line: 5276, column: 57, scope: !8615)
!8625 = !DILocation(line: 5276, column: 68, scope: !8615)
!8626 = !DILocation(line: 5276, column: 7, scope: !8615)
!8627 = !DILocation(line: 5280, column: 14, scope: !8442)
!8628 = !DILocation(line: 5280, column: 21, scope: !8442)
!8629 = !DILocation(line: 5280, column: 12, scope: !8442)
!8630 = !DILocation(line: 5281, column: 28, scope: !8442)
!8631 = !DILocation(line: 5281, column: 15, scope: !8442)
!8632 = !DILocation(line: 5281, column: 13, scope: !8442)
!8633 = !DILocation(line: 5282, column: 19, scope: !8634)
!8634 = distinct !DILexicalBlock(scope: !8442, file: !3, line: 5282, column: 7)
!8635 = !DILocation(line: 5282, column: 26, scope: !8634)
!8636 = !DILocation(line: 5282, column: 8, scope: !8634)
!8637 = !DILocation(line: 5283, column: 7, scope: !8634)
!8638 = !DILocation(line: 5283, column: 38, scope: !8634)
!8639 = !DILocation(line: 5283, column: 45, scope: !8634)
!8640 = !DILocation(line: 5283, column: 27, scope: !8634)
!8641 = !DILocation(line: 5283, column: 11, scope: !8634)
!8642 = !DILocation(line: 5282, column: 7, scope: !8442)
!8643 = !DILocation(line: 5284, column: 17, scope: !8634)
!8644 = !DILocation(line: 5284, column: 24, scope: !8634)
!8645 = !DILocation(line: 5284, column: 15, scope: !8634)
!8646 = !DILocation(line: 5284, column: 5, scope: !8634)
!8647 = !DILocation(line: 5286, column: 29, scope: !8634)
!8648 = !DILocation(line: 5286, column: 17, scope: !8634)
!8649 = !DILocation(line: 5286, column: 15, scope: !8634)
!8650 = !DILocation(line: 5287, column: 44, scope: !8442)
!8651 = !DILocation(line: 5287, column: 55, scope: !8442)
!8652 = !DILocation(line: 5287, column: 3, scope: !8442)
!8653 = !DILocation(line: 5289, column: 22, scope: !8442)
!8654 = !DILocation(line: 5289, column: 9, scope: !8442)
!8655 = !DILocation(line: 5290, column: 26, scope: !8442)
!8656 = !DILocation(line: 5290, column: 32, scope: !8442)
!8657 = !DILocation(line: 5290, column: 15, scope: !8442)
!8658 = !DILocation(line: 5290, column: 13, scope: !8442)
!8659 = !DILocation(line: 5291, column: 3, scope: !8442)
!8660 = !DILocation(line: 5292, column: 28, scope: !8442)
!8661 = !DILocation(line: 5292, column: 15, scope: !8442)
!8662 = !DILocation(line: 5292, column: 13, scope: !8442)
!8663 = !DILocation(line: 5302, column: 7, scope: !8664)
!8664 = distinct !DILexicalBlock(scope: !8442, file: !3, line: 5302, column: 7)
!8665 = !DILocation(line: 5302, column: 17, scope: !8664)
!8666 = !DILocation(line: 5302, column: 25, scope: !8664)
!8667 = !DILocation(line: 5302, column: 36, scope: !8664)
!8668 = !DILocation(line: 5302, column: 22, scope: !8664)
!8669 = !DILocation(line: 5302, column: 7, scope: !8442)
!8670 = !DILocation(line: 5303, column: 32, scope: !8664)
!8671 = !DILocation(line: 5303, column: 15, scope: !8664)
!8672 = !DILocation(line: 5303, column: 13, scope: !8664)
!8673 = !DILocation(line: 5303, column: 5, scope: !8664)
!8674 = !DILocation(line: 5306, column: 15, scope: !8675)
!8675 = distinct !DILexicalBlock(scope: !8664, file: !3, line: 5305, column: 3)
!8676 = !DILocation(line: 5306, column: 13, scope: !8675)
!8677 = !DILocation(line: 5310, column: 9, scope: !8678)
!8678 = distinct !DILexicalBlock(scope: !8675, file: !3, line: 5310, column: 9)
!8679 = !DILocation(line: 5310, column: 49, scope: !8678)
!8680 = !DILocation(line: 5310, column: 9, scope: !8675)
!8681 = !DILocation(line: 5312, column: 24, scope: !8682)
!8682 = distinct !DILexicalBlock(scope: !8678, file: !3, line: 5311, column: 7)
!8683 = !DILocation(line: 5312, column: 13, scope: !8682)
!8684 = !DILocation(line: 5312, column: 11, scope: !8682)
!8685 = !DILocation(line: 5313, column: 28, scope: !8686)
!8686 = distinct !DILexicalBlock(scope: !8682, file: !3, line: 5313, column: 2)
!8687 = !DILocation(line: 5313, column: 14, scope: !8686)
!8688 = !DILocation(line: 5313, column: 7, scope: !8686)
!8689 = !DILocation(line: 5313, column: 40, scope: !8690)
!8690 = distinct !DILexicalBlock(scope: !8686, file: !3, line: 5313, column: 2)
!8691 = !DILocation(line: 5313, column: 39, scope: !8690)
!8692 = !DILocation(line: 5313, column: 2, scope: !8686)
!8693 = !DILocation(line: 5314, column: 8, scope: !8694)
!8694 = distinct !DILexicalBlock(scope: !8690, file: !3, line: 5314, column: 8)
!8695 = !DILocation(line: 5314, column: 27, scope: !8694)
!8696 = !DILocation(line: 5314, column: 24, scope: !8694)
!8697 = !DILocation(line: 5314, column: 8, scope: !8690)
!8698 = !DILocation(line: 5315, column: 6, scope: !8694)
!8699 = !DILocation(line: 5313, column: 58, scope: !8690)
!8700 = !DILocation(line: 5313, column: 2, scope: !8690)
!8701 = distinct !{!8701, !8692, !8702}
!8702 = !DILocation(line: 5315, column: 6, scope: !8686)
!8703 = !DILocation(line: 5317, column: 45, scope: !8682)
!8704 = !DILocation(line: 5317, column: 12, scope: !8682)
!8705 = !DILocation(line: 5317, column: 10, scope: !8682)
!8706 = !DILocation(line: 5319, column: 7, scope: !8682)
!8707 = !DILocation(line: 5321, column: 24, scope: !8442)
!8708 = !DILocation(line: 5321, column: 49, scope: !8442)
!8709 = !DILocation(line: 5321, column: 35, scope: !8442)
!8710 = !DILocation(line: 5321, column: 3, scope: !8442)
!8711 = !DILocation(line: 5322, column: 24, scope: !8442)
!8712 = !DILocation(line: 5322, column: 66, scope: !8442)
!8713 = !DILocation(line: 5322, column: 49, scope: !8442)
!8714 = !DILocation(line: 5322, column: 35, scope: !8442)
!8715 = !DILocation(line: 5322, column: 3, scope: !8442)
!8716 = !DILocation(line: 5323, column: 27, scope: !8442)
!8717 = !DILocation(line: 5323, column: 3, scope: !8442)
!8718 = !DILocation(line: 5325, column: 29, scope: !8442)
!8719 = !DILocation(line: 5325, column: 11, scope: !8442)
!8720 = !DILocation(line: 5325, column: 9, scope: !8442)
!8721 = !DILocation(line: 5326, column: 18, scope: !8442)
!8722 = !DILocation(line: 5326, column: 28, scope: !8442)
!8723 = !DILocation(line: 5326, column: 3, scope: !8442)
!8724 = !DILocation(line: 5326, column: 10, scope: !8442)
!8725 = !DILocation(line: 5326, column: 16, scope: !8442)
!8726 = !DILocation(line: 5327, column: 21, scope: !8442)
!8727 = !DILocation(line: 5327, column: 32, scope: !8442)
!8728 = !DILocation(line: 5327, column: 43, scope: !8442)
!8729 = !DILocation(line: 5327, column: 53, scope: !8442)
!8730 = !DILocation(line: 5327, column: 10, scope: !8442)
!8731 = !DILocation(line: 5327, column: 8, scope: !8442)
!8732 = !DILocation(line: 5330, column: 21, scope: !8442)
!8733 = !DILocation(line: 5330, column: 3, scope: !8442)
!8734 = !DILocation(line: 5333, column: 28, scope: !8442)
!8735 = !DILocation(line: 5333, column: 41, scope: !8442)
!8736 = !DILocation(line: 5333, column: 51, scope: !8442)
!8737 = !DILocation(line: 5333, column: 3, scope: !8442)
!8738 = !DILocation(line: 5337, column: 13, scope: !8442)
!8739 = !DILocation(line: 5337, column: 19, scope: !8442)
!8740 = !DILocation(line: 5337, column: 11, scope: !8442)
!8741 = !DILocation(line: 5339, column: 33, scope: !8442)
!8742 = !DILocation(line: 5339, column: 43, scope: !8442)
!8743 = !DILocation(line: 5339, column: 53, scope: !8442)
!8744 = !DILocation(line: 5339, column: 7, scope: !8442)
!8745 = !DILocation(line: 5339, column: 5, scope: !8442)
!8746 = !DILocation(line: 5340, column: 3, scope: !8442)
!8747 = !DILocation(line: 5340, column: 20, scope: !8442)
!8748 = !DILocation(line: 5344, column: 10, scope: !8749)
!8749 = distinct !DILexicalBlock(scope: !8442, file: !3, line: 5344, column: 3)
!8750 = !DILocation(line: 5344, column: 8, scope: !8749)
!8751 = !DILocation(line: 5344, column: 15, scope: !8752)
!8752 = distinct !DILexicalBlock(scope: !8749, file: !3, line: 5344, column: 3)
!8753 = !DILocation(line: 5344, column: 19, scope: !8752)
!8754 = !DILocation(line: 5344, column: 17, scope: !8752)
!8755 = !DILocation(line: 5344, column: 3, scope: !8749)
!8756 = !DILocation(line: 5345, column: 26, scope: !8757)
!8757 = distinct !DILexicalBlock(scope: !8752, file: !3, line: 5345, column: 9)
!8758 = !DILocation(line: 5345, column: 38, scope: !8757)
!8759 = !DILocation(line: 5345, column: 9, scope: !8757)
!8760 = !DILocation(line: 5345, column: 45, scope: !8757)
!8761 = !DILocation(line: 5345, column: 56, scope: !8757)
!8762 = !DILocation(line: 5345, column: 42, scope: !8757)
!8763 = !DILocation(line: 5345, column: 9, scope: !8752)
!8764 = !DILocation(line: 5347, column: 2, scope: !8765)
!8765 = distinct !DILexicalBlock(scope: !8757, file: !3, line: 5346, column: 7)
!8766 = !DILocation(line: 5348, column: 50, scope: !8765)
!8767 = !DILocation(line: 5348, column: 62, scope: !8765)
!8768 = !DILocation(line: 5348, column: 32, scope: !8765)
!8769 = !DILocation(line: 5348, column: 67, scope: !8765)
!8770 = !DILocation(line: 5348, column: 6, scope: !8765)
!8771 = !DILocation(line: 5348, column: 4, scope: !8765)
!8772 = !DILocation(line: 5349, column: 2, scope: !8765)
!8773 = !DILocation(line: 5349, column: 19, scope: !8765)
!8774 = !DILocation(line: 5350, column: 29, scope: !8775)
!8775 = distinct !DILexicalBlock(scope: !8765, file: !3, line: 5350, column: 2)
!8776 = !DILocation(line: 5350, column: 13, scope: !8775)
!8777 = !DILocation(line: 5350, column: 7, scope: !8775)
!8778 = !DILocation(line: 5351, column: 8, scope: !8779)
!8779 = distinct !DILexicalBlock(scope: !8775, file: !3, line: 5350, column: 2)
!8780 = !DILocation(line: 5351, column: 7, scope: !8779)
!8781 = !DILocation(line: 5350, column: 2, scope: !8775)
!8782 = !DILocation(line: 5354, column: 12, scope: !8783)
!8783 = distinct !DILexicalBlock(scope: !8779, file: !3, line: 5353, column: 4)
!8784 = !DILocation(line: 5354, column: 10, scope: !8783)
!8785 = !DILocation(line: 5355, column: 12, scope: !8783)
!8786 = !DILocation(line: 5355, column: 10, scope: !8783)
!8787 = !DILocation(line: 5356, column: 19, scope: !8783)
!8788 = !DILocation(line: 5356, column: 24, scope: !8783)
!8789 = !DILocation(line: 5356, column: 29, scope: !8783)
!8790 = !DILocation(line: 5356, column: 67, scope: !8783)
!8791 = !DILocation(line: 5356, column: 72, scope: !8783)
!8792 = !DILocation(line: 5356, column: 32, scope: !8783)
!8793 = !DILocation(line: 5356, column: 6, scope: !8783)
!8794 = !DILocation(line: 5357, column: 4, scope: !8783)
!8795 = !DILocation(line: 5352, column: 7, scope: !8779)
!8796 = !DILocation(line: 5350, column: 2, scope: !8779)
!8797 = distinct !{!8797, !8781, !8798}
!8798 = !DILocation(line: 5357, column: 4, scope: !8775)
!8799 = !DILocation(line: 5358, column: 7, scope: !8765)
!8800 = !DILocation(line: 5344, column: 30, scope: !8752)
!8801 = !DILocation(line: 5344, column: 3, scope: !8752)
!8802 = distinct !{!8802, !8755, !8803}
!8803 = !DILocation(line: 5358, column: 7, scope: !8749)
!8804 = !DILocation(line: 5359, column: 33, scope: !8442)
!8805 = !DILocation(line: 5359, column: 44, scope: !8442)
!8806 = !DILocation(line: 5359, column: 55, scope: !8442)
!8807 = !DILocation(line: 5359, column: 7, scope: !8442)
!8808 = !DILocation(line: 5359, column: 5, scope: !8442)
!8809 = !DILocation(line: 5360, column: 3, scope: !8442)
!8810 = !DILocation(line: 5360, column: 20, scope: !8442)
!8811 = !DILocation(line: 5364, column: 43, scope: !8442)
!8812 = !DILocation(line: 5364, column: 3, scope: !8442)
!8813 = !DILocation(line: 5365, column: 3, scope: !8442)
!8814 = !DILocation(line: 5367, column: 3, scope: !8442)
!8815 = !DILocation(line: 5369, column: 7, scope: !8816)
!8816 = distinct !DILexicalBlock(scope: !8442, file: !3, line: 5369, column: 7)
!8817 = !DILocation(line: 5369, column: 7, scope: !8442)
!8818 = !DILocation(line: 5370, column: 11, scope: !8816)
!8819 = !DILocation(line: 5370, column: 5, scope: !8816)
!8820 = !DILocation(line: 5372, column: 3, scope: !8442)
!8821 = !DILocation(line: 5373, column: 3, scope: !8442)
!8822 = !DILocation(line: 5374, column: 1, scope: !8442)
!8823 = distinct !DISubprogram(name: "gimple_cond_set_rhs", scope: !581, file: !581, line: 2292, type: !5117, scopeLine: 2293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!8824 = !DILocalVariable(name: "gs", arg: 1, scope: !8823, file: !581, line: 2292, type: !2882)
!8825 = !DILocation(line: 2292, column: 29, scope: !8823)
!8826 = !DILocalVariable(name: "rhs", arg: 2, scope: !8823, file: !581, line: 2292, type: !2553)
!8827 = !DILocation(line: 2292, column: 38, scope: !8823)
!8828 = !DILocation(line: 2295, column: 18, scope: !8823)
!8829 = !DILocation(line: 2295, column: 25, scope: !8823)
!8830 = !DILocation(line: 2295, column: 3, scope: !8823)
!8831 = !DILocation(line: 2296, column: 1, scope: !8823)
!8832 = distinct !DISubprogram(name: "gimple_cond_set_lhs", scope: !581, file: !581, line: 2261, type: !5117, scopeLine: 2262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!8833 = !DILocalVariable(name: "gs", arg: 1, scope: !8832, file: !581, line: 2261, type: !2882)
!8834 = !DILocation(line: 2261, column: 29, scope: !8832)
!8835 = !DILocalVariable(name: "lhs", arg: 2, scope: !8832, file: !581, line: 2261, type: !2553)
!8836 = !DILocation(line: 2261, column: 38, scope: !8832)
!8837 = !DILocation(line: 2264, column: 18, scope: !8832)
!8838 = !DILocation(line: 2264, column: 25, scope: !8832)
!8839 = !DILocation(line: 2264, column: 3, scope: !8832)
!8840 = !DILocation(line: 2265, column: 1, scope: !8832)
!8841 = distinct !DISubprogram(name: "single_succ_edge", scope: !382, file: !382, line: 643, type: !8842, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!8842 = !DISubroutineType(types: !8843)
!8843 = !{!2862, !4241}
!8844 = !DILocalVariable(name: "bb", arg: 1, scope: !8841, file: !382, line: 643, type: !4241)
!8845 = !DILocation(line: 643, column: 37, scope: !8841)
!8846 = !DILocation(line: 645, column: 3, scope: !8841)
!8847 = !DILocation(line: 646, column: 10, scope: !8841)
!8848 = !DILocation(line: 646, column: 3, scope: !8841)
!8849 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !5827, file: !5827, line: 427, type: !8850, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!8850 = !DISubroutineType(types: !8851)
!8851 = !{!2553, !4052}
!8852 = !DILocalVariable(name: "use", arg: 1, scope: !8849, file: !5827, line: 427, type: !4052)
!8853 = !DILocation(line: 427, column: 33, scope: !8849)
!8854 = !DILocation(line: 429, column: 12, scope: !8849)
!8855 = !DILocation(line: 429, column: 17, scope: !8849)
!8856 = !DILocation(line: 429, column: 10, scope: !8849)
!8857 = !DILocation(line: 429, column: 3, scope: !8849)
!8858 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !5827, file: !5827, line: 442, type: !8859, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!8859 = !DISubroutineType(types: !8860)
!8860 = !{!4052, !2882, !2548}
!8861 = !DILocalVariable(name: "gs", arg: 1, scope: !8858, file: !5827, line: 442, type: !2882)
!8862 = !DILocation(line: 442, column: 36, scope: !8858)
!8863 = !DILocalVariable(name: "i", arg: 2, scope: !8858, file: !5827, line: 442, type: !2548)
!8864 = !DILocation(line: 442, column: 44, scope: !8858)
!8865 = !DILocation(line: 444, column: 27, scope: !8858)
!8866 = !DILocation(line: 444, column: 31, scope: !8858)
!8867 = !DILocation(line: 444, column: 11, scope: !8858)
!8868 = !DILocation(line: 444, column: 35, scope: !8858)
!8869 = !DILocation(line: 444, column: 3, scope: !8858)
!8870 = distinct !DISubprogram(name: "gimple_phi_arg_location_from_edge", scope: !5827, file: !5827, line: 483, type: !8871, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!8871 = !DISubroutineType(types: !8872)
!8872 = !{!2682, !2882, !2862}
!8873 = !DILocalVariable(name: "gs", arg: 1, scope: !8870, file: !5827, line: 483, type: !2882)
!8874 = !DILocation(line: 483, column: 43, scope: !8870)
!8875 = !DILocalVariable(name: "e", arg: 2, scope: !8870, file: !5827, line: 483, type: !2862)
!8876 = !DILocation(line: 483, column: 52, scope: !8870)
!8877 = !DILocation(line: 485, column: 26, scope: !8870)
!8878 = !DILocation(line: 485, column: 30, scope: !8870)
!8879 = !DILocation(line: 485, column: 33, scope: !8870)
!8880 = !DILocation(line: 485, column: 10, scope: !8870)
!8881 = !DILocation(line: 485, column: 44, scope: !8870)
!8882 = !DILocation(line: 485, column: 3, scope: !8870)
!8883 = distinct !DISubprogram(name: "gather_blocks_in_sese_region", scope: !3, file: !3, line: 5381, type: !8884, scopeLine: 5383, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!8884 = !DISubroutineType(types: !8885)
!8885 = !{null, !3523, !3523, !8431}
!8886 = !DILocalVariable(name: "entry", arg: 1, scope: !8883, file: !3, line: 5381, type: !3523)
!8887 = !DILocation(line: 5381, column: 43, scope: !8883)
!8888 = !DILocalVariable(name: "exit", arg: 2, scope: !8883, file: !3, line: 5381, type: !3523)
!8889 = !DILocation(line: 5381, column: 62, scope: !8883)
!8890 = !DILocalVariable(name: "bbs_p", arg: 3, scope: !8883, file: !3, line: 5382, type: !8431)
!8891 = !DILocation(line: 5382, column: 34, scope: !8883)
!8892 = !DILocalVariable(name: "son", scope: !8883, file: !3, line: 5384, type: !3523)
!8893 = !DILocation(line: 5384, column: 15, scope: !8883)
!8894 = !DILocation(line: 5386, column: 45, scope: !8895)
!8895 = distinct !DILexicalBlock(scope: !8883, file: !3, line: 5386, column: 3)
!8896 = !DILocation(line: 5386, column: 14, scope: !8895)
!8897 = !DILocation(line: 5386, column: 12, scope: !8895)
!8898 = !DILocation(line: 5386, column: 8, scope: !8895)
!8899 = !DILocation(line: 5387, column: 8, scope: !8900)
!8900 = distinct !DILexicalBlock(scope: !8895, file: !3, line: 5386, column: 3)
!8901 = !DILocation(line: 5386, column: 3, scope: !8895)
!8902 = !DILocation(line: 5390, column: 7, scope: !8903)
!8903 = distinct !DILexicalBlock(scope: !8900, file: !3, line: 5389, column: 5)
!8904 = !DILocation(line: 5391, column: 11, scope: !8905)
!8905 = distinct !DILexicalBlock(scope: !8903, file: !3, line: 5391, column: 11)
!8906 = !DILocation(line: 5391, column: 18, scope: !8905)
!8907 = !DILocation(line: 5391, column: 15, scope: !8905)
!8908 = !DILocation(line: 5391, column: 11, scope: !8903)
!8909 = !DILocation(line: 5392, column: 32, scope: !8905)
!8910 = !DILocation(line: 5392, column: 37, scope: !8905)
!8911 = !DILocation(line: 5392, column: 43, scope: !8905)
!8912 = !DILocation(line: 5392, column: 2, scope: !8905)
!8913 = !DILocation(line: 5393, column: 5, scope: !8903)
!8914 = !DILocation(line: 5388, column: 44, scope: !8900)
!8915 = !DILocation(line: 5388, column: 14, scope: !8900)
!8916 = !DILocation(line: 5388, column: 12, scope: !8900)
!8917 = !DILocation(line: 5386, column: 3, scope: !8900)
!8918 = distinct !{!8918, !8901, !8919}
!8919 = !DILocation(line: 5393, column: 5, scope: !8895)
!8920 = !DILocation(line: 5394, column: 1, scope: !8883)
!8921 = distinct !DISubprogram(name: "mark_virtual_ops_in_bb", scope: !3, file: !3, line: 5677, type: !4218, scopeLine: 5678, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!8922 = !DILocalVariable(name: "bb", arg: 1, scope: !8921, file: !3, line: 5677, type: !3523)
!8923 = !DILocation(line: 5677, column: 37, scope: !8921)
!8924 = !DILocalVariable(name: "gsi", scope: !8921, file: !3, line: 5679, type: !4074)
!8925 = !DILocation(line: 5679, column: 24, scope: !8921)
!8926 = !DILocation(line: 5681, column: 30, scope: !8927)
!8927 = distinct !DILexicalBlock(scope: !8921, file: !3, line: 5681, column: 3)
!8928 = !DILocation(line: 5681, column: 14, scope: !8927)
!8929 = !DILocation(line: 5681, column: 8, scope: !8927)
!8930 = !DILocation(line: 5681, column: 36, scope: !8931)
!8931 = distinct !DILexicalBlock(scope: !8927, file: !3, line: 5681, column: 3)
!8932 = !DILocation(line: 5681, column: 35, scope: !8931)
!8933 = !DILocation(line: 5681, column: 3, scope: !8927)
!8934 = !DILocation(line: 5682, column: 36, scope: !8931)
!8935 = !DILocation(line: 5682, column: 5, scope: !8931)
!8936 = !DILocation(line: 5681, column: 53, scope: !8931)
!8937 = !DILocation(line: 5681, column: 3, scope: !8931)
!8938 = distinct !{!8938, !8933, !8939}
!8939 = !DILocation(line: 5682, column: 50, scope: !8927)
!8940 = !DILocation(line: 5684, column: 28, scope: !8941)
!8941 = distinct !DILexicalBlock(scope: !8921, file: !3, line: 5684, column: 3)
!8942 = !DILocation(line: 5684, column: 14, scope: !8941)
!8943 = !DILocation(line: 5684, column: 8, scope: !8941)
!8944 = !DILocation(line: 5684, column: 34, scope: !8945)
!8945 = distinct !DILexicalBlock(scope: !8941, file: !3, line: 5684, column: 3)
!8946 = !DILocation(line: 5684, column: 33, scope: !8945)
!8947 = !DILocation(line: 5684, column: 3, scope: !8941)
!8948 = !DILocation(line: 5685, column: 36, scope: !8945)
!8949 = !DILocation(line: 5685, column: 5, scope: !8945)
!8950 = !DILocation(line: 5684, column: 51, scope: !8945)
!8951 = !DILocation(line: 5684, column: 3, scope: !8945)
!8952 = distinct !{!8952, !8947, !8953}
!8953 = !DILocation(line: 5685, column: 50, scope: !8941)
!8954 = !DILocation(line: 5686, column: 1, scope: !8921)
!8955 = distinct !DISubprogram(name: "move_sese_region_to_fn", scope: !3, file: !3, line: 5946, type: !8956, scopeLine: 5948, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!8956 = !DISubroutineType(types: !8957)
!8957 = !{!3523, !3356, !3523, !3523, !2553}
!8958 = !DILocalVariable(name: "dest_cfun", arg: 1, scope: !8955, file: !3, line: 5946, type: !3356)
!8959 = !DILocation(line: 5946, column: 42, scope: !8955)
!8960 = !DILocalVariable(name: "entry_bb", arg: 2, scope: !8955, file: !3, line: 5946, type: !3523)
!8961 = !DILocation(line: 5946, column: 65, scope: !8955)
!8962 = !DILocalVariable(name: "exit_bb", arg: 3, scope: !8955, file: !3, line: 5947, type: !3523)
!8963 = !DILocation(line: 5947, column: 23, scope: !8955)
!8964 = !DILocalVariable(name: "orig_block", arg: 4, scope: !8955, file: !3, line: 5947, type: !2553)
!8965 = !DILocation(line: 5947, column: 37, scope: !8955)
!8966 = !DILocalVariable(name: "bbs", scope: !8955, file: !3, line: 5949, type: !4094)
!8967 = !DILocation(line: 5949, column: 26, scope: !8955)
!8968 = !DILocalVariable(name: "dom_bbs", scope: !8955, file: !3, line: 5949, type: !4094)
!8969 = !DILocation(line: 5949, column: 32, scope: !8955)
!8970 = !DILocalVariable(name: "dom_entry", scope: !8955, file: !3, line: 5950, type: !3523)
!8971 = !DILocation(line: 5950, column: 15, scope: !8955)
!8972 = !DILocation(line: 5950, column: 68, scope: !8955)
!8973 = !DILocation(line: 5950, column: 27, scope: !8955)
!8974 = !DILocalVariable(name: "after", scope: !8955, file: !3, line: 5951, type: !3523)
!8975 = !DILocation(line: 5951, column: 15, scope: !8955)
!8976 = !DILocalVariable(name: "bb", scope: !8955, file: !3, line: 5951, type: !3523)
!8977 = !DILocation(line: 5951, column: 22, scope: !8955)
!8978 = !DILocalVariable(name: "entry_pred", scope: !8955, file: !3, line: 5951, type: !4039)
!8979 = !DILocation(line: 5951, column: 27, scope: !8955)
!8980 = !DILocalVariable(name: "exit_succ", scope: !8955, file: !3, line: 5951, type: !4039)
!8981 = !DILocation(line: 5951, column: 40, scope: !8955)
!8982 = !DILocalVariable(name: "abb", scope: !8955, file: !3, line: 5951, type: !3523)
!8983 = !DILocation(line: 5951, column: 51, scope: !8955)
!8984 = !DILocalVariable(name: "saved_cfun", scope: !8955, file: !3, line: 5952, type: !3356)
!8985 = !DILocation(line: 5952, column: 20, scope: !8955)
!8986 = !DILocation(line: 5952, column: 33, scope: !8955)
!8987 = !DILocalVariable(name: "entry_flag", scope: !8955, file: !3, line: 5953, type: !4040)
!8988 = !DILocation(line: 5953, column: 8, scope: !8955)
!8989 = !DILocalVariable(name: "exit_flag", scope: !8955, file: !3, line: 5953, type: !4040)
!8990 = !DILocation(line: 5953, column: 21, scope: !8955)
!8991 = !DILocalVariable(name: "entry_prob", scope: !8955, file: !3, line: 5954, type: !4041)
!8992 = !DILocation(line: 5954, column: 13, scope: !8955)
!8993 = !DILocalVariable(name: "exit_prob", scope: !8955, file: !3, line: 5954, type: !4041)
!8994 = !DILocation(line: 5954, column: 26, scope: !8955)
!8995 = !DILocalVariable(name: "i", scope: !8955, file: !3, line: 5955, type: !7)
!8996 = !DILocation(line: 5955, column: 12, scope: !8955)
!8997 = !DILocalVariable(name: "num_entry_edges", scope: !8955, file: !3, line: 5955, type: !7)
!8998 = !DILocation(line: 5955, column: 15, scope: !8955)
!8999 = !DILocalVariable(name: "num_exit_edges", scope: !8955, file: !3, line: 5955, type: !7)
!9000 = !DILocation(line: 5955, column: 32, scope: !8955)
!9001 = !DILocalVariable(name: "e", scope: !8955, file: !3, line: 5956, type: !2862)
!9002 = !DILocation(line: 5956, column: 8, scope: !8955)
!9003 = !DILocalVariable(name: "ei", scope: !8955, file: !3, line: 5957, type: !7861)
!9004 = !DILocation(line: 5957, column: 17, scope: !8955)
!9005 = !DILocalVariable(name: "new_label_map", scope: !8955, file: !3, line: 5958, type: !3441)
!9006 = !DILocation(line: 5958, column: 10, scope: !8955)
!9007 = !DILocalVariable(name: "vars_map", scope: !8955, file: !3, line: 5959, type: !3584)
!9008 = !DILocation(line: 5959, column: 25, scope: !8955)
!9009 = !DILocalVariable(name: "eh_map", scope: !8955, file: !3, line: 5959, type: !3584)
!9010 = !DILocation(line: 5959, column: 36, scope: !8955)
!9011 = !DILocalVariable(name: "loop", scope: !8955, file: !3, line: 5960, type: !3097)
!9012 = !DILocation(line: 5960, column: 16, scope: !8955)
!9013 = !DILocation(line: 5960, column: 23, scope: !8955)
!9014 = !DILocation(line: 5960, column: 33, scope: !8955)
!9015 = !DILocalVariable(name: "d", scope: !8955, file: !3, line: 5961, type: !4109)
!9016 = !DILocation(line: 5961, column: 22, scope: !8955)
!9017 = !DILocation(line: 5965, column: 3, scope: !8955)
!9018 = !DILocation(line: 5971, column: 7, scope: !8955)
!9019 = !DILocation(line: 5972, column: 3, scope: !8955)
!9020 = !DILocation(line: 5973, column: 33, scope: !8955)
!9021 = !DILocation(line: 5973, column: 43, scope: !8955)
!9022 = !DILocation(line: 5973, column: 3, scope: !8955)
!9023 = !DILocation(line: 5978, column: 10, scope: !8955)
!9024 = !DILocation(line: 5979, column: 10, scope: !8955)
!9025 = !DILocation(line: 5977, column: 13, scope: !8955)
!9026 = !DILocation(line: 5977, column: 11, scope: !8955)
!9027 = !DILocation(line: 5985, column: 21, scope: !8955)
!9028 = !DILocation(line: 5985, column: 19, scope: !8955)
!9029 = !DILocation(line: 5986, column: 41, scope: !8955)
!9030 = !DILocation(line: 5986, column: 32, scope: !8955)
!9031 = !DILocation(line: 5986, column: 16, scope: !8955)
!9032 = !DILocation(line: 5986, column: 14, scope: !8955)
!9033 = !DILocation(line: 5987, column: 33, scope: !8955)
!9034 = !DILocation(line: 5987, column: 24, scope: !8955)
!9035 = !DILocation(line: 5987, column: 16, scope: !8955)
!9036 = !DILocation(line: 5987, column: 14, scope: !8955)
!9037 = !DILocation(line: 5988, column: 16, scope: !8955)
!9038 = !DILocation(line: 5988, column: 14, scope: !8955)
!9039 = !DILocation(line: 5989, column: 5, scope: !8955)
!9040 = !DILocation(line: 5990, column: 13, scope: !9041)
!9041 = distinct !DILexicalBlock(scope: !8955, file: !3, line: 5990, column: 3)
!9042 = !DILocation(line: 5990, column: 8, scope: !9041)
!9043 = !DILocation(line: 5990, column: 46, scope: !9044)
!9044 = distinct !DILexicalBlock(scope: !9041, file: !3, line: 5990, column: 3)
!9045 = !DILocation(line: 5990, column: 44, scope: !9044)
!9046 = !DILocation(line: 5990, column: 65, scope: !9044)
!9047 = !DILocation(line: 5990, column: 3, scope: !9041)
!9048 = !DILocation(line: 5992, column: 23, scope: !9049)
!9049 = distinct !DILexicalBlock(scope: !9044, file: !3, line: 5991, column: 5)
!9050 = !DILocation(line: 5992, column: 26, scope: !9049)
!9051 = !DILocation(line: 5992, column: 7, scope: !9049)
!9052 = !DILocation(line: 5992, column: 18, scope: !9049)
!9053 = !DILocation(line: 5992, column: 21, scope: !9049)
!9054 = !DILocation(line: 5993, column: 23, scope: !9049)
!9055 = !DILocation(line: 5993, column: 26, scope: !9049)
!9056 = !DILocation(line: 5993, column: 7, scope: !9049)
!9057 = !DILocation(line: 5993, column: 18, scope: !9049)
!9058 = !DILocation(line: 5993, column: 21, scope: !9049)
!9059 = !DILocation(line: 5994, column: 25, scope: !9049)
!9060 = !DILocation(line: 5994, column: 28, scope: !9049)
!9061 = !DILocation(line: 5994, column: 7, scope: !9049)
!9062 = !DILocation(line: 5994, column: 19, scope: !9049)
!9063 = !DILocation(line: 5994, column: 23, scope: !9049)
!9064 = !DILocation(line: 5995, column: 20, scope: !9049)
!9065 = !DILocation(line: 5995, column: 7, scope: !9049)
!9066 = !DILocation(line: 5990, column: 3, scope: !9044)
!9067 = distinct !{!9067, !9047, !9068}
!9068 = !DILocation(line: 5996, column: 5, scope: !9041)
!9069 = !DILocation(line: 5998, column: 7, scope: !9070)
!9070 = distinct !DILexicalBlock(scope: !8955, file: !3, line: 5998, column: 7)
!9071 = !DILocation(line: 5998, column: 7, scope: !8955)
!9072 = !DILocation(line: 6000, column: 24, scope: !9073)
!9073 = distinct !DILexicalBlock(scope: !9070, file: !3, line: 5999, column: 5)
!9074 = !DILocation(line: 6000, column: 22, scope: !9073)
!9075 = !DILocation(line: 6001, column: 44, scope: !9073)
!9076 = !DILocation(line: 6001, column: 35, scope: !9073)
!9077 = !DILocation(line: 6001, column: 19, scope: !9073)
!9078 = !DILocation(line: 6001, column: 17, scope: !9073)
!9079 = !DILocation(line: 6003, column: 36, scope: !9073)
!9080 = !DILocation(line: 6003, column: 27, scope: !9073)
!9081 = !DILocation(line: 6003, column: 19, scope: !9073)
!9082 = !DILocation(line: 6003, column: 17, scope: !9073)
!9083 = !DILocation(line: 6004, column: 19, scope: !9073)
!9084 = !DILocation(line: 6004, column: 17, scope: !9073)
!9085 = !DILocation(line: 6005, column: 9, scope: !9073)
!9086 = !DILocation(line: 6006, column: 17, scope: !9087)
!9087 = distinct !DILexicalBlock(scope: !9073, file: !3, line: 6006, column: 7)
!9088 = !DILocation(line: 6006, column: 12, scope: !9087)
!9089 = !DILocation(line: 6006, column: 49, scope: !9090)
!9090 = distinct !DILexicalBlock(scope: !9087, file: !3, line: 6006, column: 7)
!9091 = !DILocation(line: 6006, column: 47, scope: !9090)
!9092 = !DILocation(line: 6006, column: 68, scope: !9090)
!9093 = !DILocation(line: 6006, column: 7, scope: !9087)
!9094 = !DILocation(line: 6008, column: 19, scope: !9095)
!9095 = distinct !DILexicalBlock(scope: !9090, file: !3, line: 6007, column: 2)
!9096 = !DILocation(line: 6008, column: 22, scope: !9095)
!9097 = !DILocation(line: 6008, column: 4, scope: !9095)
!9098 = !DILocation(line: 6008, column: 14, scope: !9095)
!9099 = !DILocation(line: 6008, column: 17, scope: !9095)
!9100 = !DILocation(line: 6009, column: 19, scope: !9095)
!9101 = !DILocation(line: 6009, column: 22, scope: !9095)
!9102 = !DILocation(line: 6009, column: 4, scope: !9095)
!9103 = !DILocation(line: 6009, column: 14, scope: !9095)
!9104 = !DILocation(line: 6009, column: 17, scope: !9095)
!9105 = !DILocation(line: 6010, column: 21, scope: !9095)
!9106 = !DILocation(line: 6010, column: 24, scope: !9095)
!9107 = !DILocation(line: 6010, column: 4, scope: !9095)
!9108 = !DILocation(line: 6010, column: 15, scope: !9095)
!9109 = !DILocation(line: 6010, column: 19, scope: !9095)
!9110 = !DILocation(line: 6011, column: 17, scope: !9095)
!9111 = !DILocation(line: 6011, column: 4, scope: !9095)
!9112 = !DILocation(line: 6006, column: 7, scope: !9090)
!9113 = distinct !{!9113, !9093, !9114}
!9114 = !DILocation(line: 6012, column: 2, scope: !9087)
!9115 = !DILocation(line: 6013, column: 5, scope: !9073)
!9116 = !DILocation(line: 6016, column: 22, scope: !9117)
!9117 = distinct !DILexicalBlock(scope: !9070, file: !3, line: 6015, column: 5)
!9118 = !DILocation(line: 6017, column: 17, scope: !9117)
!9119 = !DILocation(line: 6018, column: 17, scope: !9117)
!9120 = !DILocation(line: 6019, column: 17, scope: !9117)
!9121 = !DILocation(line: 6023, column: 3, scope: !8955)
!9122 = !DILocation(line: 6024, column: 14, scope: !8955)
!9123 = !DILocation(line: 6024, column: 3, scope: !8955)
!9124 = !DILocation(line: 6026, column: 3, scope: !8955)
!9125 = !DILocation(line: 6029, column: 10, scope: !8955)
!9126 = !DILocation(line: 6030, column: 17, scope: !8955)
!9127 = !DILocation(line: 6031, column: 7, scope: !9128)
!9128 = distinct !DILexicalBlock(scope: !8955, file: !3, line: 6031, column: 7)
!9129 = !DILocation(line: 6031, column: 19, scope: !9128)
!9130 = !DILocation(line: 6031, column: 7, scope: !8955)
!9131 = !DILocalVariable(name: "region", scope: !9132, file: !3, line: 6033, type: !3365)
!9132 = distinct !DILexicalBlock(scope: !9128, file: !3, line: 6032, column: 5)
!9133 = !DILocation(line: 6033, column: 17, scope: !9132)
!9134 = !DILocation(line: 6035, column: 14, scope: !9135)
!9135 = distinct !DILexicalBlock(scope: !9132, file: !3, line: 6035, column: 7)
!9136 = !DILocation(line: 6035, column: 12, scope: !9135)
!9137 = !DILocation(line: 6035, column: 19, scope: !9138)
!9138 = distinct !DILexicalBlock(scope: !9135, file: !3, line: 6035, column: 7)
!9139 = !DILocation(line: 6035, column: 7, scope: !9135)
!9140 = !DILocation(line: 6036, column: 43, scope: !9138)
!9141 = !DILocation(line: 6036, column: 55, scope: !9138)
!9142 = !DILocation(line: 6036, column: 59, scope: !9138)
!9143 = !DILocation(line: 6036, column: 11, scope: !9138)
!9144 = !DILocation(line: 6036, column: 9, scope: !9138)
!9145 = !DILocation(line: 6036, column: 2, scope: !9138)
!9146 = !DILocation(line: 6035, column: 59, scope: !9138)
!9147 = !DILocation(line: 6035, column: 7, scope: !9138)
!9148 = distinct !{!9148, !9139, !9149}
!9149 = !DILocation(line: 6036, column: 65, scope: !9135)
!9150 = !DILocation(line: 6038, column: 7, scope: !9132)
!9151 = !DILocation(line: 6039, column: 11, scope: !9152)
!9152 = distinct !DILexicalBlock(scope: !9132, file: !3, line: 6039, column: 11)
!9153 = !DILocation(line: 6039, column: 18, scope: !9152)
!9154 = !DILocation(line: 6039, column: 11, scope: !9132)
!9155 = !DILocation(line: 6041, column: 20, scope: !9156)
!9156 = distinct !DILexicalBlock(scope: !9152, file: !3, line: 6040, column: 2)
!9157 = !DILocation(line: 6041, column: 18, scope: !9156)
!9158 = !DILocation(line: 6042, column: 35, scope: !9156)
!9159 = !DILocation(line: 6042, column: 47, scope: !9156)
!9160 = !DILocation(line: 6043, column: 25, scope: !9156)
!9161 = !DILocation(line: 6042, column: 13, scope: !9156)
!9162 = !DILocation(line: 6042, column: 11, scope: !9156)
!9163 = !DILocation(line: 6044, column: 2, scope: !9156)
!9164 = !DILocation(line: 6045, column: 5, scope: !9132)
!9165 = !DILocation(line: 6047, column: 3, scope: !8955)
!9166 = !DILocation(line: 6050, column: 3, scope: !8955)
!9167 = !DILocation(line: 6051, column: 11, scope: !8955)
!9168 = !DILocation(line: 6051, column: 22, scope: !8955)
!9169 = !DILocation(line: 6051, column: 27, scope: !8955)
!9170 = !DILocation(line: 6051, column: 9, scope: !8955)
!9171 = !DILocation(line: 6052, column: 14, scope: !8955)
!9172 = !DILocation(line: 6052, column: 12, scope: !8955)
!9173 = !DILocation(line: 6054, column: 3, scope: !8955)
!9174 = !DILocation(line: 6055, column: 18, scope: !8955)
!9175 = !DILocation(line: 6055, column: 5, scope: !8955)
!9176 = !DILocation(line: 6055, column: 16, scope: !8955)
!9177 = !DILocation(line: 6056, column: 17, scope: !8955)
!9178 = !DILocation(line: 6056, column: 5, scope: !8955)
!9179 = !DILocation(line: 6056, column: 15, scope: !8955)
!9180 = !DILocation(line: 6057, column: 20, scope: !8955)
!9181 = !DILocation(line: 6057, column: 26, scope: !8955)
!9182 = !DILocation(line: 6057, column: 5, scope: !8955)
!9183 = !DILocation(line: 6057, column: 18, scope: !8955)
!9184 = !DILocation(line: 6058, column: 18, scope: !8955)
!9185 = !DILocation(line: 6058, column: 29, scope: !8955)
!9186 = !DILocation(line: 6058, column: 5, scope: !8955)
!9187 = !DILocation(line: 6058, column: 16, scope: !8955)
!9188 = !DILocation(line: 6059, column: 16, scope: !8955)
!9189 = !DILocation(line: 6059, column: 5, scope: !8955)
!9190 = !DILocation(line: 6059, column: 14, scope: !8955)
!9191 = !DILocation(line: 6060, column: 21, scope: !8955)
!9192 = !DILocation(line: 6060, column: 5, scope: !8955)
!9193 = !DILocation(line: 6060, column: 19, scope: !8955)
!9194 = !DILocation(line: 6061, column: 14, scope: !8955)
!9195 = !DILocation(line: 6061, column: 5, scope: !8955)
!9196 = !DILocation(line: 6061, column: 12, scope: !8955)
!9197 = !DILocation(line: 6062, column: 5, scope: !8955)
!9198 = !DILocation(line: 6062, column: 19, scope: !8955)
!9199 = !DILocation(line: 6064, column: 10, scope: !9200)
!9200 = distinct !DILexicalBlock(scope: !8955, file: !3, line: 6064, column: 3)
!9201 = !DILocation(line: 6064, column: 8, scope: !9200)
!9202 = !DILocation(line: 6064, column: 15, scope: !9203)
!9203 = distinct !DILexicalBlock(scope: !9200, file: !3, line: 6064, column: 3)
!9204 = !DILocation(line: 6064, column: 3, scope: !9200)
!9205 = !DILocation(line: 6069, column: 25, scope: !9206)
!9206 = distinct !DILexicalBlock(scope: !9203, file: !3, line: 6065, column: 5)
!9207 = !DILocation(line: 6069, column: 36, scope: !9206)
!9208 = !DILocation(line: 6069, column: 40, scope: !9206)
!9209 = !DILocation(line: 6069, column: 47, scope: !9206)
!9210 = !DILocation(line: 6069, column: 53, scope: !9206)
!9211 = !DILocation(line: 6069, column: 50, scope: !9206)
!9212 = !DILocation(line: 6069, column: 7, scope: !9206)
!9213 = !DILocation(line: 6070, column: 15, scope: !9206)
!9214 = !DILocation(line: 6070, column: 13, scope: !9206)
!9215 = !DILocation(line: 6071, column: 5, scope: !9206)
!9216 = !DILocation(line: 6064, column: 55, scope: !9203)
!9217 = !DILocation(line: 6064, column: 3, scope: !9203)
!9218 = distinct !{!9218, !9204, !9219}
!9219 = !DILocation(line: 6071, column: 5, scope: !9200)
!9220 = !DILocation(line: 6074, column: 7, scope: !9221)
!9221 = distinct !DILexicalBlock(scope: !8955, file: !3, line: 6074, column: 7)
!9222 = !DILocation(line: 6074, column: 7, scope: !8955)
!9223 = !DILocalVariable(name: "block", scope: !9224, file: !3, line: 6076, type: !2553)
!9224 = distinct !DILexicalBlock(scope: !9221, file: !3, line: 6075, column: 5)
!9225 = !DILocation(line: 6076, column: 12, scope: !9224)
!9226 = !DILocation(line: 6077, column: 7, scope: !9224)
!9227 = !DILocation(line: 6080, column: 4, scope: !9224)
!9228 = !DILocation(line: 6079, column: 7, scope: !9224)
!9229 = !DILocation(line: 6080, column: 2, scope: !9224)
!9230 = !DILocation(line: 6081, column: 20, scope: !9231)
!9231 = distinct !DILexicalBlock(scope: !9224, file: !3, line: 6081, column: 7)
!9232 = !DILocation(line: 6081, column: 18, scope: !9231)
!9233 = !DILocation(line: 6081, column: 12, scope: !9231)
!9234 = !DILocation(line: 6082, column: 5, scope: !9235)
!9235 = distinct !DILexicalBlock(scope: !9231, file: !3, line: 6081, column: 7)
!9236 = !DILocation(line: 6081, column: 7, scope: !9231)
!9237 = !DILocation(line: 6083, column: 31, scope: !9235)
!9238 = !DILocation(line: 6083, column: 2, scope: !9235)
!9239 = !DILocation(line: 6083, column: 29, scope: !9235)
!9240 = !DILocation(line: 6082, column: 20, scope: !9235)
!9241 = !DILocation(line: 6082, column: 18, scope: !9235)
!9242 = !DILocation(line: 6081, column: 7, scope: !9235)
!9243 = distinct !{!9243, !9236, !9244}
!9244 = !DILocation(line: 6083, column: 31, scope: !9231)
!9245 = !DILocation(line: 6084, column: 7, scope: !9224)
!9246 = !DILocation(line: 6084, column: 36, scope: !9224)
!9247 = !DILocation(line: 6085, column: 5, scope: !9224)
!9248 = !DILocation(line: 6087, column: 37, scope: !8955)
!9249 = !DILocation(line: 6088, column: 9, scope: !8955)
!9250 = !DILocation(line: 6088, column: 19, scope: !8955)
!9251 = !DILocation(line: 6088, column: 30, scope: !8955)
!9252 = !DILocation(line: 6087, column: 3, scope: !8955)
!9253 = !DILocation(line: 6090, column: 7, scope: !9254)
!9254 = distinct !DILexicalBlock(scope: !8955, file: !3, line: 6090, column: 7)
!9255 = !DILocation(line: 6090, column: 7, scope: !8955)
!9256 = !DILocation(line: 6091, column: 18, scope: !9254)
!9257 = !DILocation(line: 6091, column: 5, scope: !9254)
!9258 = !DILocation(line: 6092, column: 7, scope: !9259)
!9259 = distinct !DILexicalBlock(scope: !8955, file: !3, line: 6092, column: 7)
!9260 = !DILocation(line: 6092, column: 7, scope: !8955)
!9261 = !DILocation(line: 6093, column: 26, scope: !9259)
!9262 = !DILocation(line: 6093, column: 5, scope: !9259)
!9263 = !DILocation(line: 6094, column: 24, scope: !8955)
!9264 = !DILocation(line: 6094, column: 3, scope: !8955)
!9265 = !DILocation(line: 6105, column: 14, scope: !8955)
!9266 = !DILocation(line: 6105, column: 3, scope: !8955)
!9267 = !DILocation(line: 6106, column: 14, scope: !8955)
!9268 = !DILocation(line: 6106, column: 31, scope: !8955)
!9269 = !DILocation(line: 6106, column: 3, scope: !8955)
!9270 = !DILocation(line: 6107, column: 7, scope: !9271)
!9271 = distinct !DILexicalBlock(scope: !8955, file: !3, line: 6107, column: 7)
!9272 = !DILocation(line: 6107, column: 7, scope: !8955)
!9273 = !DILocation(line: 6108, column: 16, scope: !9271)
!9274 = !DILocation(line: 6108, column: 26, scope: !9271)
!9275 = !DILocation(line: 6108, column: 5, scope: !9271)
!9276 = !DILocation(line: 6109, column: 3, scope: !8955)
!9277 = !DILocation(line: 6113, column: 25, scope: !8955)
!9278 = !DILocation(line: 6113, column: 8, scope: !8955)
!9279 = !DILocation(line: 6113, column: 6, scope: !8955)
!9280 = !DILocation(line: 6114, column: 7, scope: !9281)
!9281 = distinct !DILexicalBlock(scope: !8955, file: !3, line: 6114, column: 7)
!9282 = !DILocation(line: 6114, column: 7, scope: !8955)
!9283 = !DILocation(line: 6115, column: 21, scope: !9281)
!9284 = !DILocation(line: 6115, column: 25, scope: !9281)
!9285 = !DILocation(line: 6115, column: 5, scope: !9281)
!9286 = !DILocation(line: 6116, column: 10, scope: !9287)
!9287 = distinct !DILexicalBlock(scope: !8955, file: !3, line: 6116, column: 3)
!9288 = !DILocation(line: 6116, column: 8, scope: !9287)
!9289 = !DILocation(line: 6116, column: 15, scope: !9290)
!9290 = distinct !DILexicalBlock(scope: !9287, file: !3, line: 6116, column: 3)
!9291 = !DILocation(line: 6116, column: 19, scope: !9290)
!9292 = !DILocation(line: 6116, column: 17, scope: !9290)
!9293 = !DILocation(line: 6116, column: 3, scope: !9287)
!9294 = !DILocation(line: 6118, column: 22, scope: !9295)
!9295 = distinct !DILexicalBlock(scope: !9290, file: !3, line: 6117, column: 5)
!9296 = !DILocation(line: 6118, column: 33, scope: !9295)
!9297 = !DILocation(line: 6118, column: 37, scope: !9295)
!9298 = !DILocation(line: 6118, column: 41, scope: !9295)
!9299 = !DILocation(line: 6118, column: 52, scope: !9295)
!9300 = !DILocation(line: 6118, column: 11, scope: !9295)
!9301 = !DILocation(line: 6118, column: 9, scope: !9295)
!9302 = !DILocation(line: 6119, column: 24, scope: !9295)
!9303 = !DILocation(line: 6119, column: 35, scope: !9295)
!9304 = !DILocation(line: 6119, column: 7, scope: !9295)
!9305 = !DILocation(line: 6119, column: 10, scope: !9295)
!9306 = !DILocation(line: 6119, column: 22, scope: !9295)
!9307 = !DILocation(line: 6120, column: 5, scope: !9295)
!9308 = !DILocation(line: 6116, column: 37, scope: !9290)
!9309 = !DILocation(line: 6116, column: 3, scope: !9290)
!9310 = distinct !{!9310, !9293, !9311}
!9311 = !DILocation(line: 6120, column: 5, scope: !9287)
!9312 = !DILocation(line: 6122, column: 10, scope: !9313)
!9313 = distinct !DILexicalBlock(scope: !8955, file: !3, line: 6122, column: 3)
!9314 = !DILocation(line: 6122, column: 8, scope: !9313)
!9315 = !DILocation(line: 6122, column: 15, scope: !9316)
!9316 = distinct !DILexicalBlock(scope: !9313, file: !3, line: 6122, column: 3)
!9317 = !DILocation(line: 6122, column: 19, scope: !9316)
!9318 = !DILocation(line: 6122, column: 17, scope: !9316)
!9319 = !DILocation(line: 6122, column: 3, scope: !9313)
!9320 = !DILocation(line: 6124, column: 22, scope: !9321)
!9321 = distinct !DILexicalBlock(scope: !9316, file: !3, line: 6123, column: 5)
!9322 = !DILocation(line: 6124, column: 26, scope: !9321)
!9323 = !DILocation(line: 6124, column: 36, scope: !9321)
!9324 = !DILocation(line: 6124, column: 40, scope: !9321)
!9325 = !DILocation(line: 6124, column: 50, scope: !9321)
!9326 = !DILocation(line: 6124, column: 11, scope: !9321)
!9327 = !DILocation(line: 6124, column: 9, scope: !9321)
!9328 = !DILocation(line: 6125, column: 24, scope: !9321)
!9329 = !DILocation(line: 6125, column: 34, scope: !9321)
!9330 = !DILocation(line: 6125, column: 7, scope: !9321)
!9331 = !DILocation(line: 6125, column: 10, scope: !9321)
!9332 = !DILocation(line: 6125, column: 22, scope: !9321)
!9333 = !DILocation(line: 6126, column: 5, scope: !9321)
!9334 = !DILocation(line: 6122, column: 36, scope: !9316)
!9335 = !DILocation(line: 6122, column: 3, scope: !9316)
!9336 = distinct !{!9336, !9319, !9337}
!9337 = !DILocation(line: 6126, column: 5, scope: !9313)
!9338 = !DILocation(line: 6128, column: 44, scope: !8955)
!9339 = !DILocation(line: 6128, column: 48, scope: !8955)
!9340 = !DILocation(line: 6128, column: 3, scope: !8955)
!9341 = !DILocation(line: 6129, column: 10, scope: !9342)
!9342 = distinct !DILexicalBlock(scope: !8955, file: !3, line: 6129, column: 3)
!9343 = !DILocation(line: 6129, column: 8, scope: !9342)
!9344 = !DILocation(line: 6129, column: 15, scope: !9345)
!9345 = distinct !DILexicalBlock(scope: !9342, file: !3, line: 6129, column: 3)
!9346 = !DILocation(line: 6129, column: 3, scope: !9342)
!9347 = !DILocation(line: 6130, column: 46, scope: !9345)
!9348 = !DILocation(line: 6130, column: 51, scope: !9345)
!9349 = !DILocation(line: 6130, column: 5, scope: !9345)
!9350 = !DILocation(line: 6129, column: 60, scope: !9345)
!9351 = !DILocation(line: 6129, column: 3, scope: !9345)
!9352 = distinct !{!9352, !9346, !9353}
!9353 = !DILocation(line: 6130, column: 53, scope: !9342)
!9354 = !DILocation(line: 6131, column: 3, scope: !8955)
!9355 = !DILocation(line: 6133, column: 7, scope: !9356)
!9356 = distinct !DILexicalBlock(scope: !8955, file: !3, line: 6133, column: 7)
!9357 = !DILocation(line: 6133, column: 7, scope: !8955)
!9358 = !DILocation(line: 6135, column: 13, scope: !9359)
!9359 = distinct !DILexicalBlock(scope: !9356, file: !3, line: 6134, column: 5)
!9360 = !DILocation(line: 6135, column: 7, scope: !9359)
!9361 = !DILocation(line: 6136, column: 13, scope: !9359)
!9362 = !DILocation(line: 6136, column: 7, scope: !9359)
!9363 = !DILocation(line: 6137, column: 13, scope: !9359)
!9364 = !DILocation(line: 6137, column: 7, scope: !9359)
!9365 = !DILocation(line: 6138, column: 5, scope: !9359)
!9366 = !DILocation(line: 6139, column: 9, scope: !8955)
!9367 = !DILocation(line: 6139, column: 3, scope: !8955)
!9368 = !DILocation(line: 6140, column: 9, scope: !8955)
!9369 = !DILocation(line: 6140, column: 3, scope: !8955)
!9370 = !DILocation(line: 6141, column: 9, scope: !8955)
!9371 = !DILocation(line: 6141, column: 3, scope: !8955)
!9372 = !DILocation(line: 6142, column: 3, scope: !8955)
!9373 = !DILocation(line: 6144, column: 10, scope: !8955)
!9374 = !DILocation(line: 6144, column: 3, scope: !8955)
!9375 = distinct !DISubprogram(name: "VEC_basic_block_base_address", scope: !382, file: !382, line: 281, type: !9376, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!9376 = !DISubroutineType(types: !9377)
!9377 = !{!4039, !4406}
!9378 = !DILocalVariable(name: "vec_", arg: 1, scope: !9375, file: !382, line: 281, type: !4406)
!9379 = !DILocation(line: 281, column: 1, scope: !9375)
!9380 = distinct !DISubprogram(name: "ei_safe_edge", scope: !382, file: !382, line: 761, type: !9381, scopeLine: 762, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!9381 = !DISubroutineType(types: !9382)
!9382 = !{!2862, !7861}
!9383 = !DILocalVariable(name: "i", arg: 1, scope: !9380, file: !382, line: 761, type: !7861)
!9384 = !DILocation(line: 761, column: 29, scope: !9380)
!9385 = !DILocation(line: 763, column: 11, scope: !9380)
!9386 = !DILocation(line: 763, column: 10, scope: !9380)
!9387 = !DILocation(line: 763, column: 26, scope: !9380)
!9388 = !DILocation(line: 763, column: 3, scope: !9380)
!9389 = distinct !DISubprogram(name: "VEC_basic_block_base_iterate", scope: !382, file: !382, line: 281, type: !9390, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!9390 = !DISubroutineType(types: !9391)
!9391 = !{!2548, !4728, !7, !4039}
!9392 = !DILocalVariable(name: "vec_", arg: 1, scope: !9389, file: !382, line: 281, type: !4728)
!9393 = !DILocation(line: 281, column: 1, scope: !9389)
!9394 = !DILocalVariable(name: "ix_", arg: 2, scope: !9389, file: !382, line: 281, type: !7)
!9395 = !DILocalVariable(name: "ptr", arg: 3, scope: !9389, file: !382, line: 281, type: !4039)
!9396 = !DILocation(line: 281, column: 1, scope: !9397)
!9397 = distinct !DILexicalBlock(scope: !9389, file: !382, line: 281, column: 1)
!9398 = !DILocation(line: 281, column: 1, scope: !9399)
!9399 = distinct !DILexicalBlock(scope: !9397, file: !382, line: 281, column: 1)
!9400 = !DILocation(line: 281, column: 1, scope: !9401)
!9401 = distinct !DILexicalBlock(scope: !9397, file: !382, line: 281, column: 1)
!9402 = distinct !DISubprogram(name: "find_outermost_region_in_block", scope: !3, file: !3, line: 5843, type: !9403, scopeLine: 5845, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!9403 = !DISubroutineType(types: !9404)
!9404 = !{!3365, !3356, !3523, !3365}
!9405 = !DILocalVariable(name: "src_cfun", arg: 1, scope: !9402, file: !3, line: 5843, type: !3356)
!9406 = !DILocation(line: 5843, column: 50, scope: !9402)
!9407 = !DILocalVariable(name: "bb", arg: 2, scope: !9402, file: !3, line: 5844, type: !3523)
!9408 = !DILocation(line: 5844, column: 17, scope: !9402)
!9409 = !DILocalVariable(name: "region", arg: 3, scope: !9402, file: !3, line: 5844, type: !3365)
!9410 = !DILocation(line: 5844, column: 31, scope: !9402)
!9411 = !DILocalVariable(name: "si", scope: !9402, file: !3, line: 5846, type: !4074)
!9412 = !DILocation(line: 5846, column: 24, scope: !9402)
!9413 = !DILocation(line: 5848, column: 27, scope: !9414)
!9414 = distinct !DILexicalBlock(scope: !9402, file: !3, line: 5848, column: 3)
!9415 = !DILocation(line: 5848, column: 13, scope: !9414)
!9416 = !DILocation(line: 5848, column: 8, scope: !9414)
!9417 = !DILocation(line: 5848, column: 33, scope: !9418)
!9418 = distinct !DILexicalBlock(scope: !9414, file: !3, line: 5848, column: 3)
!9419 = !DILocation(line: 5848, column: 32, scope: !9418)
!9420 = !DILocation(line: 5848, column: 3, scope: !9414)
!9421 = !DILocalVariable(name: "stmt", scope: !9422, file: !3, line: 5850, type: !2882)
!9422 = distinct !DILexicalBlock(scope: !9418, file: !3, line: 5849, column: 5)
!9423 = !DILocation(line: 5850, column: 14, scope: !9422)
!9424 = !DILocation(line: 5850, column: 21, scope: !9422)
!9425 = !DILocalVariable(name: "stmt_region", scope: !9422, file: !3, line: 5851, type: !3365)
!9426 = !DILocation(line: 5851, column: 17, scope: !9422)
!9427 = !DILocalVariable(name: "lp_nr", scope: !9422, file: !3, line: 5852, type: !2548)
!9428 = !DILocation(line: 5852, column: 11, scope: !9422)
!9429 = !DILocation(line: 5854, column: 37, scope: !9422)
!9430 = !DILocation(line: 5854, column: 47, scope: !9422)
!9431 = !DILocation(line: 5854, column: 15, scope: !9422)
!9432 = !DILocation(line: 5854, column: 13, scope: !9422)
!9433 = !DILocation(line: 5855, column: 54, scope: !9422)
!9434 = !DILocation(line: 5855, column: 64, scope: !9422)
!9435 = !DILocation(line: 5855, column: 21, scope: !9422)
!9436 = !DILocation(line: 5855, column: 19, scope: !9422)
!9437 = !DILocation(line: 5856, column: 11, scope: !9438)
!9438 = distinct !DILexicalBlock(scope: !9422, file: !3, line: 5856, column: 11)
!9439 = !DILocation(line: 5856, column: 11, scope: !9422)
!9440 = !DILocation(line: 5858, column: 8, scope: !9441)
!9441 = distinct !DILexicalBlock(scope: !9442, file: !3, line: 5858, column: 8)
!9442 = distinct !DILexicalBlock(scope: !9438, file: !3, line: 5857, column: 2)
!9443 = !DILocation(line: 5858, column: 15, scope: !9441)
!9444 = !DILocation(line: 5858, column: 8, scope: !9442)
!9445 = !DILocation(line: 5859, column: 15, scope: !9441)
!9446 = !DILocation(line: 5859, column: 13, scope: !9441)
!9447 = !DILocation(line: 5859, column: 6, scope: !9441)
!9448 = !DILocation(line: 5860, column: 13, scope: !9449)
!9449 = distinct !DILexicalBlock(scope: !9441, file: !3, line: 5860, column: 13)
!9450 = !DILocation(line: 5860, column: 28, scope: !9449)
!9451 = !DILocation(line: 5860, column: 25, scope: !9449)
!9452 = !DILocation(line: 5860, column: 13, scope: !9441)
!9453 = !DILocation(line: 5862, column: 38, scope: !9454)
!9454 = distinct !DILexicalBlock(scope: !9449, file: !3, line: 5861, column: 6)
!9455 = !DILocation(line: 5862, column: 48, scope: !9454)
!9456 = !DILocation(line: 5862, column: 61, scope: !9454)
!9457 = !DILocation(line: 5862, column: 17, scope: !9454)
!9458 = !DILocation(line: 5862, column: 15, scope: !9454)
!9459 = !DILocation(line: 5863, column: 8, scope: !9454)
!9460 = !DILocation(line: 5864, column: 6, scope: !9454)
!9461 = !DILocation(line: 5865, column: 2, scope: !9442)
!9462 = !DILocation(line: 5866, column: 5, scope: !9422)
!9463 = !DILocation(line: 5848, column: 49, scope: !9418)
!9464 = !DILocation(line: 5848, column: 3, scope: !9418)
!9465 = distinct !{!9465, !9420, !9466}
!9466 = !DILocation(line: 5866, column: 5, scope: !9414)
!9467 = !DILocation(line: 5868, column: 10, scope: !9402)
!9468 = !DILocation(line: 5868, column: 3, scope: !9402)
!9469 = distinct !DISubprogram(name: "new_label_mapper", scope: !3, file: !3, line: 5872, type: !9470, scopeLine: 5873, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!9470 = !DISubroutineType(types: !9471)
!9471 = !{!2553, !2553, !2547}
!9472 = !DILocalVariable(name: "decl", arg: 1, scope: !9469, file: !3, line: 5872, type: !2553)
!9473 = !DILocation(line: 5872, column: 24, scope: !9469)
!9474 = !DILocalVariable(name: "data", arg: 2, scope: !9469, file: !3, line: 5872, type: !2547)
!9475 = !DILocation(line: 5872, column: 36, scope: !9469)
!9476 = !DILocalVariable(name: "hash", scope: !9469, file: !3, line: 5874, type: !3441)
!9477 = !DILocation(line: 5874, column: 10, scope: !9469)
!9478 = !DILocation(line: 5874, column: 26, scope: !9469)
!9479 = !DILocation(line: 5874, column: 17, scope: !9469)
!9480 = !DILocalVariable(name: "m", scope: !9469, file: !3, line: 5875, type: !4099)
!9481 = !DILocation(line: 5875, column: 20, scope: !9469)
!9482 = !DILocalVariable(name: "slot", scope: !9469, file: !3, line: 5876, type: !3462)
!9483 = !DILocation(line: 5876, column: 10, scope: !9469)
!9484 = !DILocation(line: 5878, column: 3, scope: !9469)
!9485 = !DILocation(line: 5880, column: 7, scope: !9469)
!9486 = !DILocation(line: 5880, column: 5, scope: !9469)
!9487 = !DILocation(line: 5881, column: 13, scope: !9469)
!9488 = !DILocation(line: 5881, column: 3, scope: !9469)
!9489 = !DILocation(line: 5881, column: 6, scope: !9469)
!9490 = !DILocation(line: 5881, column: 11, scope: !9469)
!9491 = !DILocation(line: 5882, column: 18, scope: !9469)
!9492 = !DILocation(line: 5882, column: 3, scope: !9469)
!9493 = !DILocation(line: 5882, column: 6, scope: !9469)
!9494 = !DILocation(line: 5882, column: 11, scope: !9469)
!9495 = !DILocation(line: 5882, column: 16, scope: !9469)
!9496 = !DILocation(line: 5883, column: 11, scope: !9469)
!9497 = !DILocation(line: 5883, column: 3, scope: !9469)
!9498 = !DILocation(line: 5883, column: 6, scope: !9469)
!9499 = !DILocation(line: 5883, column: 9, scope: !9469)
!9500 = !DILocation(line: 5884, column: 28, scope: !9469)
!9501 = !DILocation(line: 5884, column: 3, scope: !9469)
!9502 = !DILocation(line: 5884, column: 26, scope: !9469)
!9503 = !DILocation(line: 5885, column: 7, scope: !9504)
!9504 = distinct !DILexicalBlock(scope: !9469, file: !3, line: 5885, column: 7)
!9505 = !DILocation(line: 5885, column: 33, scope: !9504)
!9506 = !DILocation(line: 5885, column: 39, scope: !9504)
!9507 = !DILocation(line: 5885, column: 44, scope: !9504)
!9508 = !DILocation(line: 5885, column: 30, scope: !9504)
!9509 = !DILocation(line: 5885, column: 7, scope: !9469)
!9510 = !DILocation(line: 5886, column: 33, scope: !9504)
!9511 = !DILocation(line: 5886, column: 56, scope: !9504)
!9512 = !DILocation(line: 5886, column: 5, scope: !9504)
!9513 = !DILocation(line: 5886, column: 11, scope: !9504)
!9514 = !DILocation(line: 5886, column: 16, scope: !9504)
!9515 = !DILocation(line: 5886, column: 31, scope: !9504)
!9516 = !DILocation(line: 5888, column: 36, scope: !9469)
!9517 = !DILocation(line: 5888, column: 42, scope: !9469)
!9518 = !DILocation(line: 5888, column: 45, scope: !9469)
!9519 = !DILocation(line: 5888, column: 48, scope: !9469)
!9520 = !DILocation(line: 5888, column: 10, scope: !9469)
!9521 = !DILocation(line: 5888, column: 8, scope: !9469)
!9522 = !DILocation(line: 5889, column: 3, scope: !9469)
!9523 = !DILocation(line: 5891, column: 11, scope: !9469)
!9524 = !DILocation(line: 5891, column: 4, scope: !9469)
!9525 = !DILocation(line: 5891, column: 9, scope: !9469)
!9526 = !DILocation(line: 5893, column: 10, scope: !9469)
!9527 = !DILocation(line: 5893, column: 13, scope: !9469)
!9528 = !DILocation(line: 5893, column: 3, scope: !9469)
!9529 = distinct !DISubprogram(name: "move_block_to_fn", scope: !3, file: !3, line: 5699, type: !9530, scopeLine: 5702, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!9530 = !DISubroutineType(types: !9531)
!9531 = !{null, !3356, !3523, !3523, !2672, !4108}
!9532 = !DILocalVariable(name: "dest_cfun", arg: 1, scope: !9529, file: !3, line: 5699, type: !3356)
!9533 = !DILocation(line: 5699, column: 36, scope: !9529)
!9534 = !DILocalVariable(name: "bb", arg: 2, scope: !9529, file: !3, line: 5699, type: !3523)
!9535 = !DILocation(line: 5699, column: 59, scope: !9529)
!9536 = !DILocalVariable(name: "after", arg: 3, scope: !9529, file: !3, line: 5700, type: !3523)
!9537 = !DILocation(line: 5700, column: 17, scope: !9529)
!9538 = !DILocalVariable(name: "update_edge_count_p", arg: 4, scope: !9529, file: !3, line: 5700, type: !2672)
!9539 = !DILocation(line: 5700, column: 29, scope: !9529)
!9540 = !DILocalVariable(name: "d", arg: 5, scope: !9529, file: !3, line: 5701, type: !4108)
!9541 = !DILocation(line: 5701, column: 25, scope: !9529)
!9542 = !DILocalVariable(name: "cfg", scope: !9529, file: !3, line: 5703, type: !3519)
!9543 = !DILocation(line: 5703, column: 30, scope: !9529)
!9544 = !DILocalVariable(name: "ei", scope: !9529, file: !3, line: 5704, type: !7861)
!9545 = !DILocation(line: 5704, column: 17, scope: !9529)
!9546 = !DILocalVariable(name: "e", scope: !9529, file: !3, line: 5705, type: !2862)
!9547 = !DILocation(line: 5705, column: 8, scope: !9529)
!9548 = !DILocalVariable(name: "si", scope: !9529, file: !3, line: 5706, type: !4074)
!9549 = !DILocation(line: 5706, column: 24, scope: !9529)
!9550 = !DILocalVariable(name: "old_len", scope: !9529, file: !3, line: 5707, type: !7)
!9551 = !DILocation(line: 5707, column: 12, scope: !9529)
!9552 = !DILocalVariable(name: "new_len", scope: !9529, file: !3, line: 5707, type: !7)
!9553 = !DILocation(line: 5707, column: 21, scope: !9529)
!9554 = !DILocation(line: 5710, column: 47, scope: !9529)
!9555 = !DILocation(line: 5710, column: 3, scope: !9529)
!9556 = !DILocation(line: 5711, column: 7, scope: !9557)
!9557 = distinct !DILexicalBlock(scope: !9529, file: !3, line: 5711, column: 7)
!9558 = !DILocation(line: 5711, column: 7, scope: !9529)
!9559 = !DILocation(line: 5712, column: 27, scope: !9557)
!9560 = !DILocation(line: 5712, column: 5, scope: !9557)
!9561 = !DILocation(line: 5715, column: 21, scope: !9529)
!9562 = !DILocation(line: 5715, column: 25, scope: !9529)
!9563 = !DILocation(line: 5715, column: 3, scope: !9529)
!9564 = !DILocation(line: 5718, column: 7, scope: !9565)
!9565 = distinct !DILexicalBlock(scope: !9529, file: !3, line: 5718, column: 7)
!9566 = !DILocation(line: 5718, column: 7, scope: !9529)
!9567 = !DILocation(line: 5719, column: 5, scope: !9568)
!9568 = distinct !DILexicalBlock(scope: !9565, file: !3, line: 5719, column: 5)
!9569 = !DILocation(line: 5719, column: 5, scope: !9570)
!9570 = distinct !DILexicalBlock(scope: !9568, file: !3, line: 5719, column: 5)
!9571 = !DILocation(line: 5721, column: 2, scope: !9572)
!9572 = distinct !DILexicalBlock(scope: !9570, file: !3, line: 5720, column: 7)
!9573 = !DILocation(line: 5721, column: 8, scope: !9572)
!9574 = !DILocation(line: 5721, column: 13, scope: !9572)
!9575 = !DILocation(line: 5721, column: 22, scope: !9572)
!9576 = !DILocation(line: 5722, column: 2, scope: !9572)
!9577 = !DILocation(line: 5722, column: 13, scope: !9572)
!9578 = !DILocation(line: 5722, column: 18, scope: !9572)
!9579 = !DILocation(line: 5722, column: 27, scope: !9572)
!9580 = !DILocation(line: 5723, column: 7, scope: !9572)
!9581 = distinct !{!9581, !9567, !9582}
!9582 = !DILocation(line: 5723, column: 7, scope: !9568)
!9583 = !DILocation(line: 5726, column: 3, scope: !9529)
!9584 = !DILocation(line: 5727, column: 3, scope: !9529)
!9585 = !DILocation(line: 5727, column: 9, scope: !9529)
!9586 = !DILocation(line: 5727, column: 14, scope: !9529)
!9587 = !DILocation(line: 5727, column: 30, scope: !9529)
!9588 = !DILocation(line: 5730, column: 9, scope: !9529)
!9589 = !DILocation(line: 5730, column: 20, scope: !9529)
!9590 = !DILocation(line: 5730, column: 7, scope: !9529)
!9591 = !DILocation(line: 5731, column: 3, scope: !9529)
!9592 = !DILocation(line: 5731, column: 8, scope: !9529)
!9593 = !DILocation(line: 5731, column: 24, scope: !9529)
!9594 = !DILocation(line: 5732, column: 7, scope: !9595)
!9595 = distinct !DILexicalBlock(scope: !9529, file: !3, line: 5732, column: 7)
!9596 = !DILocation(line: 5732, column: 11, scope: !9595)
!9597 = !DILocation(line: 5732, column: 20, scope: !9595)
!9598 = !DILocation(line: 5732, column: 25, scope: !9595)
!9599 = !DILocation(line: 5732, column: 17, scope: !9595)
!9600 = !DILocation(line: 5732, column: 7, scope: !9529)
!9601 = !DILocation(line: 5733, column: 31, scope: !9595)
!9602 = !DILocation(line: 5733, column: 35, scope: !9595)
!9603 = !DILocation(line: 5733, column: 41, scope: !9595)
!9604 = !DILocation(line: 5733, column: 5, scope: !9595)
!9605 = !DILocation(line: 5733, column: 10, scope: !9595)
!9606 = !DILocation(line: 5733, column: 29, scope: !9595)
!9607 = !DILocation(line: 5735, column: 13, scope: !9529)
!9608 = !DILocation(line: 5735, column: 11, scope: !9529)
!9609 = !DILocation(line: 5736, column: 18, scope: !9610)
!9610 = distinct !DILexicalBlock(scope: !9529, file: !3, line: 5736, column: 7)
!9611 = !DILocation(line: 5736, column: 23, scope: !9610)
!9612 = !DILocation(line: 5736, column: 45, scope: !9610)
!9613 = !DILocation(line: 5736, column: 42, scope: !9610)
!9614 = !DILocation(line: 5736, column: 7, scope: !9529)
!9615 = !DILocation(line: 5738, column: 17, scope: !9616)
!9616 = distinct !DILexicalBlock(scope: !9610, file: !3, line: 5737, column: 5)
!9617 = !DILocation(line: 5738, column: 22, scope: !9616)
!9618 = !DILocation(line: 5738, column: 44, scope: !9616)
!9619 = !DILocation(line: 5738, column: 49, scope: !9616)
!9620 = !DILocation(line: 5738, column: 68, scope: !9616)
!9621 = !DILocation(line: 5738, column: 73, scope: !9616)
!9622 = !DILocation(line: 5738, column: 41, scope: !9616)
!9623 = !DILocation(line: 5738, column: 15, scope: !9616)
!9624 = !DILocation(line: 5739, column: 7, scope: !9616)
!9625 = !DILocation(line: 5741, column: 5, scope: !9616)
!9626 = !DILocation(line: 5743, column: 3, scope: !9529)
!9627 = !DILocation(line: 5747, column: 29, scope: !9628)
!9628 = distinct !DILexicalBlock(scope: !9529, file: !3, line: 5747, column: 3)
!9629 = !DILocation(line: 5747, column: 13, scope: !9628)
!9630 = !DILocation(line: 5747, column: 8, scope: !9628)
!9631 = !DILocation(line: 5747, column: 35, scope: !9632)
!9632 = distinct !DILexicalBlock(scope: !9628, file: !3, line: 5747, column: 3)
!9633 = !DILocation(line: 5747, column: 34, scope: !9632)
!9634 = !DILocation(line: 5747, column: 3, scope: !9628)
!9635 = !DILocalVariable(name: "phi", scope: !9636, file: !3, line: 5749, type: !2882)
!9636 = distinct !DILexicalBlock(scope: !9632, file: !3, line: 5748, column: 5)
!9637 = !DILocation(line: 5749, column: 14, scope: !9636)
!9638 = !DILocation(line: 5749, column: 20, scope: !9636)
!9639 = !DILocalVariable(name: "use", scope: !9636, file: !3, line: 5750, type: !4052)
!9640 = !DILocation(line: 5750, column: 21, scope: !9636)
!9641 = !DILocalVariable(name: "op", scope: !9636, file: !3, line: 5751, type: !2553)
!9642 = !DILocation(line: 5751, column: 12, scope: !9636)
!9643 = !DILocation(line: 5751, column: 17, scope: !9636)
!9644 = !DILocalVariable(name: "oi", scope: !9636, file: !3, line: 5752, type: !9645)
!9645 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !891, line: 140, baseType: !9646)
!9646 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !891, line: 131, size: 320, elements: !9647)
!9647 = !{!9648, !9649, !9650, !9652, !9654, !9655, !9656}
!9648 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !9646, file: !891, line: 133, baseType: !2672, size: 8)
!9649 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !9646, file: !891, line: 134, baseType: !890, size: 32, offset: 32)
!9650 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !9646, file: !891, line: 135, baseType: !9651, size: 64, offset: 64)
!9651 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !891, line: 42, baseType: !2911)
!9652 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !9646, file: !891, line: 136, baseType: !9653, size: 64, offset: 128)
!9653 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !891, line: 50, baseType: !2918)
!9654 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !9646, file: !891, line: 137, baseType: !2548, size: 32, offset: 192)
!9655 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !9646, file: !891, line: 138, baseType: !2548, size: 32, offset: 224)
!9656 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !9646, file: !891, line: 139, baseType: !2882, size: 64, offset: 256)
!9657 = !DILocation(line: 5752, column: 19, scope: !9636)
!9658 = !DILocation(line: 5754, column: 27, scope: !9659)
!9659 = distinct !DILexicalBlock(scope: !9636, file: !3, line: 5754, column: 11)
!9660 = !DILocation(line: 5754, column: 12, scope: !9659)
!9661 = !DILocation(line: 5754, column: 11, scope: !9636)
!9662 = !DILocation(line: 5758, column: 11, scope: !9663)
!9663 = distinct !DILexicalBlock(scope: !9659, file: !3, line: 5755, column: 2)
!9664 = !DILocation(line: 5759, column: 4, scope: !9663)
!9665 = distinct !{!9665, !9634, !9666}
!9666 = !DILocation(line: 5772, column: 5, scope: !9628)
!9667 = !DILocation(line: 5762, column: 7, scope: !9636)
!9668 = !DILocation(line: 5764, column: 7, scope: !9669)
!9669 = distinct !DILexicalBlock(scope: !9636, file: !3, line: 5764, column: 7)
!9670 = !DILocation(line: 5764, column: 7, scope: !9671)
!9671 = distinct !DILexicalBlock(scope: !9669, file: !3, line: 5764, column: 7)
!9672 = !DILocation(line: 5766, column: 9, scope: !9673)
!9673 = distinct !DILexicalBlock(scope: !9671, file: !3, line: 5765, column: 2)
!9674 = !DILocation(line: 5766, column: 7, scope: !9673)
!9675 = !DILocation(line: 5767, column: 8, scope: !9676)
!9676 = distinct !DILexicalBlock(scope: !9673, file: !3, line: 5767, column: 8)
!9677 = !DILocation(line: 5767, column: 23, scope: !9676)
!9678 = !DILocation(line: 5767, column: 8, scope: !9673)
!9679 = !DILocation(line: 5768, column: 6, scope: !9676)
!9680 = !DILocation(line: 5769, column: 2, scope: !9673)
!9681 = distinct !{!9681, !9668, !9682}
!9682 = !DILocation(line: 5769, column: 2, scope: !9669)
!9683 = !DILocation(line: 5771, column: 7, scope: !9636)
!9684 = !DILocation(line: 5747, column: 3, scope: !9632)
!9685 = !DILocation(line: 5774, column: 27, scope: !9686)
!9686 = distinct !DILexicalBlock(scope: !9529, file: !3, line: 5774, column: 3)
!9687 = !DILocation(line: 5774, column: 13, scope: !9686)
!9688 = !DILocation(line: 5774, column: 8, scope: !9686)
!9689 = !DILocation(line: 5774, column: 33, scope: !9690)
!9690 = distinct !DILexicalBlock(scope: !9686, file: !3, line: 5774, column: 3)
!9691 = !DILocation(line: 5774, column: 32, scope: !9690)
!9692 = !DILocation(line: 5774, column: 3, scope: !9686)
!9693 = !DILocalVariable(name: "stmt", scope: !9694, file: !3, line: 5776, type: !2882)
!9694 = distinct !DILexicalBlock(scope: !9690, file: !3, line: 5775, column: 5)
!9695 = !DILocation(line: 5776, column: 14, scope: !9694)
!9696 = !DILocation(line: 5776, column: 21, scope: !9694)
!9697 = !DILocalVariable(name: "wi", scope: !9694, file: !3, line: 5777, type: !4071)
!9698 = !DILocation(line: 5777, column: 29, scope: !9694)
!9699 = !DILocation(line: 5779, column: 7, scope: !9694)
!9700 = !DILocation(line: 5780, column: 17, scope: !9694)
!9701 = !DILocation(line: 5780, column: 10, scope: !9694)
!9702 = !DILocation(line: 5780, column: 15, scope: !9694)
!9703 = !DILocation(line: 5781, column: 7, scope: !9694)
!9704 = !DILocation(line: 5783, column: 24, scope: !9705)
!9705 = distinct !DILexicalBlock(scope: !9694, file: !3, line: 5783, column: 11)
!9706 = !DILocation(line: 5783, column: 11, scope: !9705)
!9707 = !DILocation(line: 5783, column: 30, scope: !9705)
!9708 = !DILocation(line: 5783, column: 11, scope: !9694)
!9709 = !DILocalVariable(name: "label", scope: !9710, file: !3, line: 5785, type: !2553)
!9710 = distinct !DILexicalBlock(scope: !9705, file: !3, line: 5784, column: 2)
!9711 = !DILocation(line: 5785, column: 9, scope: !9710)
!9712 = !DILocation(line: 5785, column: 37, scope: !9710)
!9713 = !DILocation(line: 5785, column: 17, scope: !9710)
!9714 = !DILocalVariable(name: "uid", scope: !9710, file: !3, line: 5786, type: !2548)
!9715 = !DILocation(line: 5786, column: 8, scope: !9710)
!9716 = !DILocation(line: 5786, column: 14, scope: !9710)
!9717 = !DILocation(line: 5788, column: 4, scope: !9710)
!9718 = !DILocation(line: 5790, column: 14, scope: !9710)
!9719 = !DILocation(line: 5790, column: 12, scope: !9710)
!9720 = !DILocation(line: 5791, column: 8, scope: !9721)
!9721 = distinct !DILexicalBlock(scope: !9710, file: !3, line: 5791, column: 8)
!9722 = !DILocation(line: 5791, column: 30, scope: !9721)
!9723 = !DILocation(line: 5791, column: 16, scope: !9721)
!9724 = !DILocation(line: 5791, column: 8, scope: !9710)
!9725 = !DILocation(line: 5793, column: 22, scope: !9726)
!9726 = distinct !DILexicalBlock(scope: !9721, file: !3, line: 5792, column: 6)
!9727 = !DILocation(line: 5793, column: 20, scope: !9726)
!9728 = !DILocation(line: 5793, column: 26, scope: !9726)
!9729 = !DILocation(line: 5793, column: 30, scope: !9726)
!9730 = !DILocation(line: 5793, column: 16, scope: !9726)
!9731 = !DILocation(line: 5794, column: 8, scope: !9726)
!9732 = !DILocation(line: 5796, column: 6, scope: !9726)
!9733 = !DILocation(line: 5798, column: 4, scope: !9710)
!9734 = !DILocation(line: 5799, column: 4, scope: !9710)
!9735 = !DILocation(line: 5801, column: 4, scope: !9710)
!9736 = !DILocation(line: 5803, column: 8, scope: !9737)
!9737 = distinct !DILexicalBlock(scope: !9710, file: !3, line: 5803, column: 8)
!9738 = !DILocation(line: 5803, column: 15, scope: !9737)
!9739 = !DILocation(line: 5803, column: 26, scope: !9737)
!9740 = !DILocation(line: 5803, column: 31, scope: !9737)
!9741 = !DILocation(line: 5803, column: 12, scope: !9737)
!9742 = !DILocation(line: 5803, column: 8, scope: !9710)
!9743 = !DILocation(line: 5804, column: 39, scope: !9737)
!9744 = !DILocation(line: 5804, column: 43, scope: !9737)
!9745 = !DILocation(line: 5804, column: 6, scope: !9737)
!9746 = !DILocation(line: 5804, column: 17, scope: !9737)
!9747 = !DILocation(line: 5804, column: 22, scope: !9737)
!9748 = !DILocation(line: 5804, column: 37, scope: !9737)
!9749 = !DILocation(line: 5805, column: 2, scope: !9710)
!9750 = !DILocation(line: 5807, column: 35, scope: !9694)
!9751 = !DILocation(line: 5807, column: 46, scope: !9694)
!9752 = !DILocation(line: 5807, column: 52, scope: !9694)
!9753 = !DILocation(line: 5807, column: 58, scope: !9694)
!9754 = !DILocation(line: 5807, column: 64, scope: !9694)
!9755 = !DILocation(line: 5807, column: 67, scope: !9694)
!9756 = !DILocation(line: 5807, column: 7, scope: !9694)
!9757 = !DILocation(line: 5808, column: 34, scope: !9694)
!9758 = !DILocation(line: 5808, column: 40, scope: !9694)
!9759 = !DILocation(line: 5808, column: 7, scope: !9694)
!9760 = !DILocation(line: 5810, column: 41, scope: !9694)
!9761 = !DILocation(line: 5810, column: 52, scope: !9694)
!9762 = !DILocation(line: 5810, column: 58, scope: !9694)
!9763 = !DILocation(line: 5810, column: 64, scope: !9694)
!9764 = !DILocation(line: 5810, column: 7, scope: !9694)
!9765 = !DILocation(line: 5811, column: 38, scope: !9694)
!9766 = !DILocation(line: 5811, column: 44, scope: !9694)
!9767 = !DILocation(line: 5811, column: 7, scope: !9694)
!9768 = !DILocation(line: 5815, column: 27, scope: !9694)
!9769 = !DILocation(line: 5815, column: 7, scope: !9694)
!9770 = !DILocation(line: 5816, column: 18, scope: !9694)
!9771 = !DILocation(line: 5816, column: 7, scope: !9694)
!9772 = !DILocation(line: 5817, column: 20, scope: !9694)
!9773 = !DILocation(line: 5817, column: 7, scope: !9694)
!9774 = !DILocation(line: 5818, column: 7, scope: !9694)
!9775 = !DILocation(line: 5819, column: 5, scope: !9694)
!9776 = !DILocation(line: 5774, column: 49, scope: !9690)
!9777 = !DILocation(line: 5774, column: 3, scope: !9690)
!9778 = distinct !{!9778, !9692, !9779}
!9779 = !DILocation(line: 5819, column: 5, scope: !9686)
!9780 = !DILocation(line: 5821, column: 3, scope: !9781)
!9781 = distinct !DILexicalBlock(scope: !9529, file: !3, line: 5821, column: 3)
!9782 = !DILocation(line: 5821, column: 3, scope: !9783)
!9783 = distinct !DILexicalBlock(scope: !9781, file: !3, line: 5821, column: 3)
!9784 = !DILocation(line: 5822, column: 9, scope: !9785)
!9785 = distinct !DILexicalBlock(scope: !9783, file: !3, line: 5822, column: 9)
!9786 = !DILocation(line: 5822, column: 12, scope: !9785)
!9787 = !DILocation(line: 5822, column: 9, scope: !9783)
!9788 = !DILocalVariable(name: "block", scope: !9789, file: !3, line: 5824, type: !2553)
!9789 = distinct !DILexicalBlock(scope: !9785, file: !3, line: 5823, column: 7)
!9790 = !DILocation(line: 5824, column: 7, scope: !9789)
!9791 = !DILocation(line: 5824, column: 15, scope: !9789)
!9792 = !DILocation(line: 5824, column: 18, scope: !9789)
!9793 = !DILocation(line: 5825, column: 6, scope: !9794)
!9794 = distinct !DILexicalBlock(scope: !9789, file: !3, line: 5825, column: 6)
!9795 = !DILocation(line: 5825, column: 9, scope: !9794)
!9796 = !DILocation(line: 5825, column: 20, scope: !9794)
!9797 = !DILocation(line: 5826, column: 6, scope: !9794)
!9798 = !DILocation(line: 5826, column: 9, scope: !9794)
!9799 = !DILocation(line: 5826, column: 18, scope: !9794)
!9800 = !DILocation(line: 5826, column: 21, scope: !9794)
!9801 = !DILocation(line: 5826, column: 15, scope: !9794)
!9802 = !DILocation(line: 5825, column: 6, scope: !9789)
!9803 = !DILocation(line: 5827, column: 20, scope: !9794)
!9804 = !DILocation(line: 5827, column: 23, scope: !9794)
!9805 = !DILocation(line: 5827, column: 4, scope: !9794)
!9806 = !DILocation(line: 5827, column: 7, scope: !9794)
!9807 = !DILocation(line: 5827, column: 18, scope: !9794)
!9808 = !DILocation(line: 5836, column: 7, scope: !9789)
!9809 = distinct !{!9809, !9780, !9810}
!9810 = !DILocation(line: 5836, column: 7, scope: !9781)
!9811 = !DILocation(line: 5837, column: 1, scope: !9529)
!9812 = distinct !DISubprogram(name: "replace_block_vars_by_duplicates", scope: !3, file: !3, line: 5900, type: !9813, scopeLine: 5902, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!9813 = !DISubroutineType(types: !9814)
!9814 = !{null, !2553, !3584, !2553}
!9815 = !DILocalVariable(name: "block", arg: 1, scope: !9812, file: !3, line: 5900, type: !2553)
!9816 = !DILocation(line: 5900, column: 40, scope: !9812)
!9817 = !DILocalVariable(name: "vars_map", arg: 2, scope: !9812, file: !3, line: 5900, type: !3584)
!9818 = !DILocation(line: 5900, column: 69, scope: !9812)
!9819 = !DILocalVariable(name: "to_context", arg: 3, scope: !9812, file: !3, line: 5901, type: !2553)
!9820 = !DILocation(line: 5901, column: 12, scope: !9812)
!9821 = !DILocalVariable(name: "tp", scope: !9812, file: !3, line: 5903, type: !2916)
!9822 = !DILocation(line: 5903, column: 9, scope: !9812)
!9823 = !DILocalVariable(name: "t", scope: !9812, file: !3, line: 5903, type: !2553)
!9824 = !DILocation(line: 5903, column: 13, scope: !9812)
!9825 = !DILocation(line: 5905, column: 14, scope: !9826)
!9826 = distinct !DILexicalBlock(scope: !9812, file: !3, line: 5905, column: 3)
!9827 = !DILocation(line: 5905, column: 11, scope: !9826)
!9828 = !DILocation(line: 5905, column: 8, scope: !9826)
!9829 = !DILocation(line: 5905, column: 35, scope: !9830)
!9830 = distinct !DILexicalBlock(scope: !9826, file: !3, line: 5905, column: 3)
!9831 = !DILocation(line: 5905, column: 34, scope: !9830)
!9832 = !DILocation(line: 5905, column: 3, scope: !9826)
!9833 = !DILocation(line: 5907, column: 12, scope: !9834)
!9834 = distinct !DILexicalBlock(scope: !9830, file: !3, line: 5906, column: 5)
!9835 = !DILocation(line: 5907, column: 11, scope: !9834)
!9836 = !DILocation(line: 5907, column: 9, scope: !9834)
!9837 = !DILocation(line: 5908, column: 11, scope: !9838)
!9838 = distinct !DILexicalBlock(scope: !9834, file: !3, line: 5908, column: 11)
!9839 = !DILocation(line: 5908, column: 25, scope: !9838)
!9840 = !DILocation(line: 5908, column: 37, scope: !9838)
!9841 = !DILocation(line: 5908, column: 40, scope: !9838)
!9842 = !DILocation(line: 5908, column: 54, scope: !9838)
!9843 = !DILocation(line: 5908, column: 11, scope: !9834)
!9844 = !DILocation(line: 5909, column: 2, scope: !9838)
!9845 = !DILocation(line: 5910, column: 38, scope: !9834)
!9846 = !DILocation(line: 5910, column: 48, scope: !9834)
!9847 = !DILocation(line: 5910, column: 7, scope: !9834)
!9848 = !DILocation(line: 5911, column: 11, scope: !9849)
!9849 = distinct !DILexicalBlock(scope: !9834, file: !3, line: 5911, column: 11)
!9850 = !DILocation(line: 5911, column: 17, scope: !9849)
!9851 = !DILocation(line: 5911, column: 16, scope: !9849)
!9852 = !DILocation(line: 5911, column: 13, scope: !9849)
!9853 = !DILocation(line: 5911, column: 11, scope: !9834)
!9854 = !DILocation(line: 5913, column: 8, scope: !9855)
!9855 = distinct !DILexicalBlock(scope: !9856, file: !3, line: 5913, column: 8)
!9856 = distinct !DILexicalBlock(scope: !9849, file: !3, line: 5912, column: 2)
!9857 = !DILocation(line: 5913, column: 24, scope: !9855)
!9858 = !DILocation(line: 5913, column: 36, scope: !9855)
!9859 = !DILocation(line: 5913, column: 39, scope: !9855)
!9860 = !DILocation(line: 5913, column: 8, scope: !9856)
!9861 = !DILocation(line: 5915, column: 8, scope: !9862)
!9862 = distinct !DILexicalBlock(scope: !9855, file: !3, line: 5914, column: 6)
!9863 = !DILocation(line: 5916, column: 8, scope: !9862)
!9864 = !DILocation(line: 5916, column: 34, scope: !9862)
!9865 = !DILocation(line: 5917, column: 6, scope: !9862)
!9866 = !DILocation(line: 5918, column: 21, scope: !9856)
!9867 = !DILocation(line: 5918, column: 4, scope: !9856)
!9868 = !DILocation(line: 5918, column: 19, scope: !9856)
!9869 = !DILocation(line: 5919, column: 10, scope: !9856)
!9870 = !DILocation(line: 5919, column: 5, scope: !9856)
!9871 = !DILocation(line: 5919, column: 8, scope: !9856)
!9872 = !DILocation(line: 5920, column: 2, scope: !9856)
!9873 = !DILocation(line: 5921, column: 5, scope: !9834)
!9874 = !DILocation(line: 5905, column: 45, scope: !9830)
!9875 = !DILocation(line: 5905, column: 42, scope: !9830)
!9876 = !DILocation(line: 5905, column: 3, scope: !9830)
!9877 = distinct !{!9877, !9832, !9878}
!9878 = !DILocation(line: 5921, column: 5, scope: !9826)
!9879 = !DILocation(line: 5923, column: 16, scope: !9880)
!9880 = distinct !DILexicalBlock(scope: !9812, file: !3, line: 5923, column: 3)
!9881 = !DILocation(line: 5923, column: 14, scope: !9880)
!9882 = !DILocation(line: 5923, column: 8, scope: !9880)
!9883 = !DILocation(line: 5923, column: 41, scope: !9884)
!9884 = distinct !DILexicalBlock(scope: !9880, file: !3, line: 5923, column: 3)
!9885 = !DILocation(line: 5923, column: 3, scope: !9880)
!9886 = !DILocation(line: 5924, column: 39, scope: !9884)
!9887 = !DILocation(line: 5924, column: 46, scope: !9884)
!9888 = !DILocation(line: 5924, column: 56, scope: !9884)
!9889 = !DILocation(line: 5924, column: 5, scope: !9884)
!9890 = !DILocation(line: 5923, column: 56, scope: !9884)
!9891 = !DILocation(line: 5923, column: 54, scope: !9884)
!9892 = !DILocation(line: 5923, column: 3, scope: !9884)
!9893 = distinct !{!9893, !9885, !9894}
!9894 = !DILocation(line: 5924, column: 66, scope: !9880)
!9895 = !DILocation(line: 5925, column: 1, scope: !9812)
!9896 = distinct !DISubprogram(name: "gimple_seq_first_stmt", scope: !581, file: !581, line: 168, type: !9897, scopeLine: 169, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!9897 = !DISubroutineType(types: !9898)
!9898 = !{!2882, !9899}
!9899 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !2554, line: 67, baseType: !9900)
!9900 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9901, size: 64)
!9901 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2874)
!9902 = !DILocalVariable(name: "s", arg: 1, scope: !9896, file: !581, line: 168, type: !9899)
!9903 = !DILocation(line: 168, column: 41, scope: !9896)
!9904 = !DILocalVariable(name: "n", scope: !9896, file: !581, line: 170, type: !2877)
!9905 = !DILocation(line: 170, column: 19, scope: !9896)
!9906 = !DILocation(line: 170, column: 41, scope: !9896)
!9907 = !DILocation(line: 170, column: 23, scope: !9896)
!9908 = !DILocation(line: 171, column: 11, scope: !9896)
!9909 = !DILocation(line: 171, column: 10, scope: !9896)
!9910 = !DILocation(line: 171, column: 16, scope: !9896)
!9911 = !DILocation(line: 171, column: 19, scope: !9896)
!9912 = !DILocation(line: 171, column: 3, scope: !9896)
!9913 = distinct !DISubprogram(name: "gimple_seq_last_stmt", scope: !581, file: !581, line: 187, type: !9897, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!9914 = !DILocalVariable(name: "s", arg: 1, scope: !9913, file: !581, line: 187, type: !9899)
!9915 = !DILocation(line: 187, column: 40, scope: !9913)
!9916 = !DILocalVariable(name: "n", scope: !9913, file: !581, line: 189, type: !2877)
!9917 = !DILocation(line: 189, column: 19, scope: !9913)
!9918 = !DILocation(line: 189, column: 40, scope: !9913)
!9919 = !DILocation(line: 189, column: 23, scope: !9913)
!9920 = !DILocation(line: 190, column: 11, scope: !9913)
!9921 = !DILocation(line: 190, column: 10, scope: !9913)
!9922 = !DILocation(line: 190, column: 16, scope: !9913)
!9923 = !DILocation(line: 190, column: 19, scope: !9913)
!9924 = !DILocation(line: 190, column: 3, scope: !9913)
!9925 = distinct !DISubprogram(name: "debug_function", scope: !3, file: !3, line: 6293, type: !9926, scopeLine: 6294, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!9926 = !DISubroutineType(types: !9927)
!9927 = !{null, !2553, !2548}
!9928 = !DILocalVariable(name: "fn", arg: 1, scope: !9925, file: !3, line: 6293, type: !2553)
!9929 = !DILocation(line: 6293, column: 22, scope: !9925)
!9930 = !DILocalVariable(name: "flags", arg: 2, scope: !9925, file: !3, line: 6293, type: !2548)
!9931 = !DILocation(line: 6293, column: 30, scope: !9925)
!9932 = !DILocation(line: 6295, column: 26, scope: !9925)
!9933 = !DILocation(line: 6295, column: 30, scope: !9925)
!9934 = !DILocation(line: 6295, column: 38, scope: !9925)
!9935 = !DILocation(line: 6295, column: 3, scope: !9925)
!9936 = !DILocation(line: 6296, column: 1, scope: !9925)
!9937 = distinct !DISubprogram(name: "print_loops_bb", scope: !3, file: !3, line: 6327, type: !9938, scopeLine: 6328, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!9938 = !DISubroutineType(types: !9939)
!9939 = !{null, !4131, !3523, !2548, !2548}
!9940 = !DILocalVariable(name: "file", arg: 1, scope: !9937, file: !3, line: 6327, type: !4131)
!9941 = !DILocation(line: 6327, column: 23, scope: !9937)
!9942 = !DILocalVariable(name: "bb", arg: 2, scope: !9937, file: !3, line: 6327, type: !3523)
!9943 = !DILocation(line: 6327, column: 41, scope: !9937)
!9944 = !DILocalVariable(name: "indent", arg: 3, scope: !9937, file: !3, line: 6327, type: !2548)
!9945 = !DILocation(line: 6327, column: 49, scope: !9937)
!9946 = !DILocalVariable(name: "verbosity", arg: 4, scope: !9937, file: !3, line: 6327, type: !2548)
!9947 = !DILocation(line: 6327, column: 61, scope: !9937)
!9948 = !DILocalVariable(name: "s_indent", scope: !9937, file: !3, line: 6329, type: !2821)
!9949 = !DILocation(line: 6329, column: 9, scope: !9937)
!9950 = !DILocation(line: 6329, column: 29, scope: !9937)
!9951 = !DILocation(line: 6330, column: 20, scope: !9937)
!9952 = !DILocation(line: 6330, column: 44, scope: !9937)
!9953 = !DILocation(line: 6330, column: 35, scope: !9937)
!9954 = !DILocation(line: 6330, column: 3, scope: !9937)
!9955 = !DILocation(line: 6331, column: 3, scope: !9937)
!9956 = !DILocation(line: 6331, column: 12, scope: !9937)
!9957 = !DILocation(line: 6331, column: 20, scope: !9937)
!9958 = !DILocation(line: 6334, column: 7, scope: !9959)
!9959 = distinct !DILexicalBlock(scope: !9937, file: !3, line: 6334, column: 7)
!9960 = !DILocation(line: 6334, column: 17, scope: !9959)
!9961 = !DILocation(line: 6334, column: 7, scope: !9937)
!9962 = !DILocation(line: 6336, column: 16, scope: !9963)
!9963 = distinct !DILexicalBlock(scope: !9959, file: !3, line: 6335, column: 5)
!9964 = !DILocation(line: 6336, column: 46, scope: !9963)
!9965 = !DILocation(line: 6336, column: 56, scope: !9963)
!9966 = !DILocation(line: 6336, column: 60, scope: !9963)
!9967 = !DILocation(line: 6336, column: 7, scope: !9963)
!9968 = !DILocation(line: 6337, column: 23, scope: !9963)
!9969 = !DILocation(line: 6337, column: 29, scope: !9963)
!9970 = !DILocation(line: 6337, column: 7, scope: !9963)
!9971 = !DILocation(line: 6338, column: 16, scope: !9963)
!9972 = !DILocation(line: 6338, column: 7, scope: !9963)
!9973 = !DILocation(line: 6339, column: 23, scope: !9963)
!9974 = !DILocation(line: 6339, column: 29, scope: !9963)
!9975 = !DILocation(line: 6339, column: 7, scope: !9963)
!9976 = !DILocation(line: 6340, column: 16, scope: !9963)
!9977 = !DILocation(line: 6340, column: 7, scope: !9963)
!9978 = !DILocation(line: 6341, column: 5, scope: !9963)
!9979 = !DILocation(line: 6344, column: 7, scope: !9980)
!9980 = distinct !DILexicalBlock(scope: !9937, file: !3, line: 6344, column: 7)
!9981 = !DILocation(line: 6344, column: 17, scope: !9980)
!9982 = !DILocation(line: 6344, column: 7, scope: !9937)
!9983 = !DILocation(line: 6346, column: 16, scope: !9984)
!9984 = distinct !DILexicalBlock(scope: !9980, file: !3, line: 6345, column: 5)
!9985 = !DILocation(line: 6346, column: 33, scope: !9984)
!9986 = !DILocation(line: 6346, column: 7, scope: !9984)
!9987 = !DILocation(line: 6347, column: 23, scope: !9984)
!9988 = !DILocation(line: 6347, column: 27, scope: !9984)
!9989 = !DILocation(line: 6347, column: 33, scope: !9984)
!9990 = !DILocation(line: 6347, column: 40, scope: !9984)
!9991 = !DILocation(line: 6347, column: 7, scope: !9984)
!9992 = !DILocation(line: 6348, column: 16, scope: !9984)
!9993 = !DILocation(line: 6348, column: 33, scope: !9984)
!9994 = !DILocation(line: 6348, column: 7, scope: !9984)
!9995 = !DILocation(line: 6349, column: 5, scope: !9984)
!9996 = !DILocation(line: 6350, column: 1, scope: !9937)
!9997 = distinct !DISubprogram(name: "print_pred_bbs", scope: !3, file: !3, line: 6302, type: !9998, scopeLine: 6303, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!9998 = !DISubroutineType(types: !9999)
!9999 = !{null, !4131, !3523}
!10000 = !DILocalVariable(name: "file", arg: 1, scope: !9997, file: !3, line: 6302, type: !4131)
!10001 = !DILocation(line: 6302, column: 23, scope: !9997)
!10002 = !DILocalVariable(name: "bb", arg: 2, scope: !9997, file: !3, line: 6302, type: !3523)
!10003 = !DILocation(line: 6302, column: 41, scope: !9997)
!10004 = !DILocalVariable(name: "e", scope: !9997, file: !3, line: 6304, type: !2862)
!10005 = !DILocation(line: 6304, column: 8, scope: !9997)
!10006 = !DILocalVariable(name: "ei", scope: !9997, file: !3, line: 6305, type: !7861)
!10007 = !DILocation(line: 6305, column: 17, scope: !9997)
!10008 = !DILocation(line: 6307, column: 3, scope: !10009)
!10009 = distinct !DILexicalBlock(scope: !9997, file: !3, line: 6307, column: 3)
!10010 = !DILocation(line: 6307, column: 3, scope: !10011)
!10011 = distinct !DILexicalBlock(scope: !10009, file: !3, line: 6307, column: 3)
!10012 = !DILocation(line: 6308, column: 14, scope: !10011)
!10013 = !DILocation(line: 6308, column: 30, scope: !10011)
!10014 = !DILocation(line: 6308, column: 33, scope: !10011)
!10015 = !DILocation(line: 6308, column: 38, scope: !10011)
!10016 = !DILocation(line: 6308, column: 5, scope: !10011)
!10017 = distinct !{!10017, !10008, !10018}
!10018 = !DILocation(line: 6308, column: 43, scope: !10009)
!10019 = !DILocation(line: 6309, column: 1, scope: !9997)
!10020 = distinct !DISubprogram(name: "print_succ_bbs", scope: !3, file: !3, line: 6315, type: !9998, scopeLine: 6316, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!10021 = !DILocalVariable(name: "file", arg: 1, scope: !10020, file: !3, line: 6315, type: !4131)
!10022 = !DILocation(line: 6315, column: 23, scope: !10020)
!10023 = !DILocalVariable(name: "bb", arg: 2, scope: !10020, file: !3, line: 6315, type: !3523)
!10024 = !DILocation(line: 6315, column: 41, scope: !10020)
!10025 = !DILocalVariable(name: "e", scope: !10020, file: !3, line: 6317, type: !2862)
!10026 = !DILocation(line: 6317, column: 8, scope: !10020)
!10027 = !DILocalVariable(name: "ei", scope: !10020, file: !3, line: 6318, type: !7861)
!10028 = !DILocation(line: 6318, column: 17, scope: !10020)
!10029 = !DILocation(line: 6320, column: 3, scope: !10030)
!10030 = distinct !DILexicalBlock(scope: !10020, file: !3, line: 6320, column: 3)
!10031 = !DILocation(line: 6320, column: 3, scope: !10032)
!10032 = distinct !DILexicalBlock(scope: !10030, file: !3, line: 6320, column: 3)
!10033 = !DILocation(line: 6321, column: 14, scope: !10032)
!10034 = !DILocation(line: 6321, column: 30, scope: !10032)
!10035 = !DILocation(line: 6321, column: 33, scope: !10032)
!10036 = !DILocation(line: 6321, column: 39, scope: !10032)
!10037 = !DILocation(line: 6321, column: 5, scope: !10032)
!10038 = distinct !{!10038, !10029, !10039}
!10039 = !DILocation(line: 6321, column: 44, scope: !10030)
!10040 = !DILocation(line: 6322, column: 1, scope: !10020)
!10041 = distinct !DISubprogram(name: "print_loops", scope: !3, file: !3, line: 6421, type: !6543, scopeLine: 6422, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!10042 = !DILocalVariable(name: "file", arg: 1, scope: !10041, file: !3, line: 6421, type: !4131)
!10043 = !DILocation(line: 6421, column: 20, scope: !10041)
!10044 = !DILocalVariable(name: "verbosity", arg: 2, scope: !10041, file: !3, line: 6421, type: !2548)
!10045 = !DILocation(line: 6421, column: 30, scope: !10041)
!10046 = !DILocalVariable(name: "bb", scope: !10041, file: !3, line: 6423, type: !3523)
!10047 = !DILocation(line: 6423, column: 15, scope: !10041)
!10048 = !DILocation(line: 6425, column: 8, scope: !10041)
!10049 = !DILocation(line: 6425, column: 6, scope: !10041)
!10050 = !DILocation(line: 6426, column: 7, scope: !10051)
!10051 = distinct !DILexicalBlock(scope: !10041, file: !3, line: 6426, column: 7)
!10052 = !DILocation(line: 6426, column: 10, scope: !10051)
!10053 = !DILocation(line: 6426, column: 13, scope: !10051)
!10054 = !DILocation(line: 6426, column: 17, scope: !10051)
!10055 = !DILocation(line: 6426, column: 7, scope: !10041)
!10056 = !DILocation(line: 6427, column: 30, scope: !10051)
!10057 = !DILocation(line: 6427, column: 36, scope: !10051)
!10058 = !DILocation(line: 6427, column: 40, scope: !10051)
!10059 = !DILocation(line: 6427, column: 56, scope: !10051)
!10060 = !DILocation(line: 6427, column: 5, scope: !10051)
!10061 = !DILocation(line: 6428, column: 1, scope: !10041)
!10062 = distinct !DISubprogram(name: "print_loop_and_siblings", scope: !3, file: !3, line: 6408, type: !10063, scopeLine: 6409, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!10063 = !DISubroutineType(types: !10064)
!10064 = !{null, !4131, !3097, !2548, !2548}
!10065 = !DILocalVariable(name: "file", arg: 1, scope: !10062, file: !3, line: 6408, type: !4131)
!10066 = !DILocation(line: 6408, column: 32, scope: !10062)
!10067 = !DILocalVariable(name: "loop", arg: 2, scope: !10062, file: !3, line: 6408, type: !3097)
!10068 = !DILocation(line: 6408, column: 51, scope: !10062)
!10069 = !DILocalVariable(name: "indent", arg: 3, scope: !10062, file: !3, line: 6408, type: !2548)
!10070 = !DILocation(line: 6408, column: 61, scope: !10062)
!10071 = !DILocalVariable(name: "verbosity", arg: 4, scope: !10062, file: !3, line: 6408, type: !2548)
!10072 = !DILocation(line: 6408, column: 73, scope: !10062)
!10073 = !DILocation(line: 6410, column: 7, scope: !10074)
!10074 = distinct !DILexicalBlock(scope: !10062, file: !3, line: 6410, column: 7)
!10075 = !DILocation(line: 6410, column: 12, scope: !10074)
!10076 = !DILocation(line: 6410, column: 7, scope: !10062)
!10077 = !DILocation(line: 6411, column: 5, scope: !10074)
!10078 = !DILocation(line: 6413, column: 15, scope: !10062)
!10079 = !DILocation(line: 6413, column: 21, scope: !10062)
!10080 = !DILocation(line: 6413, column: 27, scope: !10062)
!10081 = !DILocation(line: 6413, column: 35, scope: !10062)
!10082 = !DILocation(line: 6413, column: 3, scope: !10062)
!10083 = !DILocation(line: 6414, column: 28, scope: !10062)
!10084 = !DILocation(line: 6414, column: 34, scope: !10062)
!10085 = !DILocation(line: 6414, column: 40, scope: !10062)
!10086 = !DILocation(line: 6414, column: 46, scope: !10062)
!10087 = !DILocation(line: 6414, column: 54, scope: !10062)
!10088 = !DILocation(line: 6414, column: 3, scope: !10062)
!10089 = !DILocation(line: 6415, column: 1, scope: !10062)
!10090 = distinct !DISubprogram(name: "debug_loops", scope: !3, file: !3, line: 6434, type: !6534, scopeLine: 6435, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!10091 = !DILocalVariable(name: "verbosity", arg: 1, scope: !10090, file: !3, line: 6434, type: !2548)
!10092 = !DILocation(line: 6434, column: 18, scope: !10090)
!10093 = !DILocation(line: 6436, column: 16, scope: !10090)
!10094 = !DILocation(line: 6436, column: 24, scope: !10090)
!10095 = !DILocation(line: 6436, column: 3, scope: !10090)
!10096 = !DILocation(line: 6437, column: 1, scope: !10090)
!10097 = distinct !DISubprogram(name: "debug_loop", scope: !3, file: !3, line: 6442, type: !10098, scopeLine: 6443, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!10098 = !DISubroutineType(types: !10099)
!10099 = !{null, !3097, !2548}
!10100 = !DILocalVariable(name: "loop", arg: 1, scope: !10097, file: !3, line: 6442, type: !3097)
!10101 = !DILocation(line: 6442, column: 26, scope: !10097)
!10102 = !DILocalVariable(name: "verbosity", arg: 2, scope: !10097, file: !3, line: 6442, type: !2548)
!10103 = !DILocation(line: 6442, column: 36, scope: !10097)
!10104 = !DILocation(line: 6444, column: 15, scope: !10097)
!10105 = !DILocation(line: 6444, column: 23, scope: !10097)
!10106 = !DILocation(line: 6444, column: 32, scope: !10097)
!10107 = !DILocation(line: 6444, column: 3, scope: !10097)
!10108 = !DILocation(line: 6445, column: 1, scope: !10097)
!10109 = distinct !DISubprogram(name: "print_loop", scope: !3, file: !3, line: 6359, type: !10063, scopeLine: 6360, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!10110 = !DILocalVariable(name: "file", arg: 1, scope: !10109, file: !3, line: 6359, type: !4131)
!10111 = !DILocation(line: 6359, column: 19, scope: !10109)
!10112 = !DILocalVariable(name: "loop", arg: 2, scope: !10109, file: !3, line: 6359, type: !3097)
!10113 = !DILocation(line: 6359, column: 38, scope: !10109)
!10114 = !DILocalVariable(name: "indent", arg: 3, scope: !10109, file: !3, line: 6359, type: !2548)
!10115 = !DILocation(line: 6359, column: 48, scope: !10109)
!10116 = !DILocalVariable(name: "verbosity", arg: 4, scope: !10109, file: !3, line: 6359, type: !2548)
!10117 = !DILocation(line: 6359, column: 60, scope: !10109)
!10118 = !DILocalVariable(name: "s_indent", scope: !10109, file: !3, line: 6361, type: !2821)
!10119 = !DILocation(line: 6361, column: 9, scope: !10109)
!10120 = !DILocalVariable(name: "bb", scope: !10109, file: !3, line: 6362, type: !3523)
!10121 = !DILocation(line: 6362, column: 15, scope: !10109)
!10122 = !DILocation(line: 6364, column: 7, scope: !10123)
!10123 = distinct !DILexicalBlock(scope: !10109, file: !3, line: 6364, column: 7)
!10124 = !DILocation(line: 6364, column: 12, scope: !10123)
!10125 = !DILocation(line: 6364, column: 7, scope: !10109)
!10126 = !DILocation(line: 6365, column: 5, scope: !10123)
!10127 = !DILocation(line: 6367, column: 23, scope: !10109)
!10128 = !DILocation(line: 6367, column: 12, scope: !10109)
!10129 = !DILocation(line: 6368, column: 20, scope: !10109)
!10130 = !DILocation(line: 6368, column: 44, scope: !10109)
!10131 = !DILocation(line: 6368, column: 35, scope: !10109)
!10132 = !DILocation(line: 6368, column: 3, scope: !10109)
!10133 = !DILocation(line: 6369, column: 3, scope: !10109)
!10134 = !DILocation(line: 6369, column: 12, scope: !10109)
!10135 = !DILocation(line: 6369, column: 20, scope: !10109)
!10136 = !DILocation(line: 6372, column: 12, scope: !10109)
!10137 = !DILocation(line: 6372, column: 56, scope: !10109)
!10138 = !DILocation(line: 6373, column: 5, scope: !10109)
!10139 = !DILocation(line: 6373, column: 11, scope: !10109)
!10140 = !DILocation(line: 6373, column: 16, scope: !10109)
!10141 = !DILocation(line: 6373, column: 22, scope: !10109)
!10142 = !DILocation(line: 6373, column: 30, scope: !10109)
!10143 = !DILocation(line: 6373, column: 37, scope: !10109)
!10144 = !DILocation(line: 6373, column: 43, scope: !10109)
!10145 = !DILocation(line: 6373, column: 50, scope: !10109)
!10146 = !DILocation(line: 6372, column: 3, scope: !10109)
!10147 = !DILocation(line: 6374, column: 12, scope: !10109)
!10148 = !DILocation(line: 6374, column: 3, scope: !10109)
!10149 = !DILocation(line: 6375, column: 23, scope: !10109)
!10150 = !DILocation(line: 6375, column: 29, scope: !10109)
!10151 = !DILocation(line: 6375, column: 35, scope: !10109)
!10152 = !DILocation(line: 6375, column: 3, scope: !10109)
!10153 = !DILocation(line: 6377, column: 7, scope: !10154)
!10154 = distinct !DILexicalBlock(scope: !10109, file: !3, line: 6377, column: 7)
!10155 = !DILocation(line: 6377, column: 13, scope: !10154)
!10156 = !DILocation(line: 6377, column: 7, scope: !10109)
!10157 = !DILocation(line: 6379, column: 16, scope: !10158)
!10158 = distinct !DILexicalBlock(scope: !10154, file: !3, line: 6378, column: 5)
!10159 = !DILocation(line: 6379, column: 7, scope: !10158)
!10160 = !DILocation(line: 6380, column: 24, scope: !10158)
!10161 = !DILocation(line: 6380, column: 30, scope: !10158)
!10162 = !DILocation(line: 6380, column: 36, scope: !10158)
!10163 = !DILocation(line: 6380, column: 7, scope: !10158)
!10164 = !DILocation(line: 6381, column: 5, scope: !10158)
!10165 = !DILocation(line: 6383, column: 7, scope: !10166)
!10166 = distinct !DILexicalBlock(scope: !10109, file: !3, line: 6383, column: 7)
!10167 = !DILocation(line: 6383, column: 13, scope: !10166)
!10168 = !DILocation(line: 6383, column: 7, scope: !10109)
!10169 = !DILocation(line: 6385, column: 16, scope: !10170)
!10170 = distinct !DILexicalBlock(scope: !10166, file: !3, line: 6384, column: 5)
!10171 = !DILocation(line: 6385, column: 7, scope: !10170)
!10172 = !DILocation(line: 6386, column: 24, scope: !10170)
!10173 = !DILocation(line: 6386, column: 30, scope: !10170)
!10174 = !DILocation(line: 6386, column: 36, scope: !10170)
!10175 = !DILocation(line: 6386, column: 7, scope: !10170)
!10176 = !DILocation(line: 6387, column: 5, scope: !10170)
!10177 = !DILocation(line: 6388, column: 12, scope: !10109)
!10178 = !DILocation(line: 6388, column: 3, scope: !10109)
!10179 = !DILocation(line: 6391, column: 7, scope: !10180)
!10180 = distinct !DILexicalBlock(scope: !10109, file: !3, line: 6391, column: 7)
!10181 = !DILocation(line: 6391, column: 17, scope: !10180)
!10182 = !DILocation(line: 6391, column: 7, scope: !10109)
!10183 = !DILocation(line: 6393, column: 16, scope: !10184)
!10184 = distinct !DILexicalBlock(scope: !10180, file: !3, line: 6392, column: 5)
!10185 = !DILocation(line: 6393, column: 31, scope: !10184)
!10186 = !DILocation(line: 6393, column: 7, scope: !10184)
!10187 = !DILocation(line: 6394, column: 7, scope: !10188)
!10188 = distinct !DILexicalBlock(scope: !10184, file: !3, line: 6394, column: 7)
!10189 = !DILocation(line: 6394, column: 7, scope: !10190)
!10190 = distinct !DILexicalBlock(scope: !10188, file: !3, line: 6394, column: 7)
!10191 = !DILocation(line: 6395, column: 6, scope: !10192)
!10192 = distinct !DILexicalBlock(scope: !10190, file: !3, line: 6395, column: 6)
!10193 = !DILocation(line: 6395, column: 10, scope: !10192)
!10194 = !DILocation(line: 6395, column: 25, scope: !10192)
!10195 = !DILocation(line: 6395, column: 22, scope: !10192)
!10196 = !DILocation(line: 6395, column: 6, scope: !10190)
!10197 = !DILocation(line: 6396, column: 20, scope: !10192)
!10198 = !DILocation(line: 6396, column: 26, scope: !10192)
!10199 = !DILocation(line: 6396, column: 30, scope: !10192)
!10200 = !DILocation(line: 6396, column: 38, scope: !10192)
!10201 = !DILocation(line: 6396, column: 4, scope: !10192)
!10202 = distinct !{!10202, !10187, !10203}
!10203 = !DILocation(line: 6396, column: 47, scope: !10188)
!10204 = !DILocation(line: 6398, column: 32, scope: !10184)
!10205 = !DILocation(line: 6398, column: 38, scope: !10184)
!10206 = !DILocation(line: 6398, column: 44, scope: !10184)
!10207 = !DILocation(line: 6398, column: 51, scope: !10184)
!10208 = !DILocation(line: 6398, column: 58, scope: !10184)
!10209 = !DILocation(line: 6398, column: 63, scope: !10184)
!10210 = !DILocation(line: 6398, column: 7, scope: !10184)
!10211 = !DILocation(line: 6399, column: 16, scope: !10184)
!10212 = !DILocation(line: 6399, column: 31, scope: !10184)
!10213 = !DILocation(line: 6399, column: 7, scope: !10184)
!10214 = !DILocation(line: 6400, column: 5, scope: !10184)
!10215 = !DILocation(line: 6401, column: 1, scope: !10109)
!10216 = distinct !DISubprogram(name: "debug_loop_num", scope: !3, file: !3, line: 6451, type: !10217, scopeLine: 6452, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!10217 = !DISubroutineType(types: !10218)
!10218 = !{null, !7, !2548}
!10219 = !DILocalVariable(name: "num", arg: 1, scope: !10216, file: !3, line: 6451, type: !7)
!10220 = !DILocation(line: 6451, column: 26, scope: !10216)
!10221 = !DILocalVariable(name: "verbosity", arg: 2, scope: !10216, file: !3, line: 6451, type: !2548)
!10222 = !DILocation(line: 6451, column: 35, scope: !10216)
!10223 = !DILocation(line: 6453, column: 25, scope: !10216)
!10224 = !DILocation(line: 6453, column: 15, scope: !10216)
!10225 = !DILocation(line: 6453, column: 31, scope: !10216)
!10226 = !DILocation(line: 6453, column: 3, scope: !10216)
!10227 = !DILocation(line: 6454, column: 1, scope: !10216)
!10228 = distinct !DISubprogram(name: "get_loop", scope: !337, file: !337, line: 417, type: !10229, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!10229 = !DISubroutineType(types: !10230)
!10230 = !{!3097, !7}
!10231 = !DILocalVariable(name: "num", arg: 1, scope: !10228, file: !337, line: 417, type: !7)
!10232 = !DILocation(line: 417, column: 20, scope: !10228)
!10233 = !DILocation(line: 419, column: 10, scope: !10228)
!10234 = !DILocation(line: 419, column: 3, scope: !10228)
!10235 = distinct !DISubprogram(name: "gimple_purge_dead_abnormal_call_edges", scope: !3, file: !3, line: 6648, type: !4261, scopeLine: 6649, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!10236 = !DILocalVariable(name: "bb", arg: 1, scope: !10235, file: !3, line: 6648, type: !3523)
!10237 = !DILocation(line: 6648, column: 52, scope: !10235)
!10238 = !DILocalVariable(name: "changed", scope: !10235, file: !3, line: 6650, type: !2672)
!10239 = !DILocation(line: 6650, column: 8, scope: !10235)
!10240 = !DILocation(line: 6650, column: 46, scope: !10235)
!10241 = !DILocation(line: 6650, column: 18, scope: !10235)
!10242 = !DILocation(line: 6652, column: 7, scope: !10243)
!10243 = distinct !DILexicalBlock(scope: !10235, file: !3, line: 6652, column: 7)
!10244 = !DILocation(line: 6652, column: 13, scope: !10243)
!10245 = !DILocation(line: 6652, column: 7, scope: !10235)
!10246 = !DILocalVariable(name: "stmt", scope: !10247, file: !3, line: 6654, type: !2882)
!10247 = distinct !DILexicalBlock(scope: !10243, file: !3, line: 6653, column: 5)
!10248 = !DILocation(line: 6654, column: 14, scope: !10247)
!10249 = !DILocation(line: 6654, column: 32, scope: !10247)
!10250 = !DILocation(line: 6654, column: 21, scope: !10247)
!10251 = !DILocalVariable(name: "ei", scope: !10247, file: !3, line: 6655, type: !7861)
!10252 = !DILocation(line: 6655, column: 21, scope: !10247)
!10253 = !DILocalVariable(name: "e", scope: !10247, file: !3, line: 6656, type: !2862)
!10254 = !DILocation(line: 6656, column: 12, scope: !10247)
!10255 = !DILocation(line: 6658, column: 13, scope: !10256)
!10256 = distinct !DILexicalBlock(scope: !10247, file: !3, line: 6658, column: 11)
!10257 = !DILocation(line: 6658, column: 18, scope: !10256)
!10258 = !DILocation(line: 6658, column: 50, scope: !10256)
!10259 = !DILocation(line: 6658, column: 21, scope: !10256)
!10260 = !DILocation(line: 6658, column: 11, scope: !10247)
!10261 = !DILocation(line: 6659, column: 12, scope: !10262)
!10262 = distinct !DILexicalBlock(scope: !10256, file: !3, line: 6659, column: 2)
!10263 = !DILocation(line: 6659, column: 7, scope: !10262)
!10264 = !DILocation(line: 6659, column: 39, scope: !10265)
!10265 = distinct !DILexicalBlock(scope: !10262, file: !3, line: 6659, column: 2)
!10266 = !DILocation(line: 6659, column: 37, scope: !10265)
!10267 = !DILocation(line: 6659, column: 2, scope: !10262)
!10268 = !DILocation(line: 6661, column: 10, scope: !10269)
!10269 = distinct !DILexicalBlock(scope: !10270, file: !3, line: 6661, column: 10)
!10270 = distinct !DILexicalBlock(scope: !10265, file: !3, line: 6660, column: 4)
!10271 = !DILocation(line: 6661, column: 13, scope: !10269)
!10272 = !DILocation(line: 6661, column: 19, scope: !10269)
!10273 = !DILocation(line: 6661, column: 10, scope: !10270)
!10274 = !DILocation(line: 6663, column: 16, scope: !10275)
!10275 = distinct !DILexicalBlock(scope: !10269, file: !3, line: 6662, column: 8)
!10276 = !DILocation(line: 6663, column: 3, scope: !10275)
!10277 = !DILocation(line: 6664, column: 11, scope: !10275)
!10278 = !DILocation(line: 6665, column: 8, scope: !10275)
!10279 = !DILocation(line: 6667, column: 8, scope: !10269)
!10280 = !DILocation(line: 6659, column: 2, scope: !10265)
!10281 = distinct !{!10281, !10267, !10282}
!10282 = !DILocation(line: 6668, column: 4, scope: !10262)
!10283 = !DILocation(line: 6671, column: 11, scope: !10284)
!10284 = distinct !DILexicalBlock(scope: !10247, file: !3, line: 6671, column: 11)
!10285 = !DILocation(line: 6671, column: 11, scope: !10247)
!10286 = !DILocation(line: 6672, column: 2, scope: !10284)
!10287 = !DILocation(line: 6673, column: 5, scope: !10247)
!10288 = !DILocation(line: 6675, column: 10, scope: !10235)
!10289 = !DILocation(line: 6675, column: 3, scope: !10235)
!10290 = distinct !DISubprogram(name: "gimple_purge_dead_eh_edges", scope: !3, file: !3, line: 6807, type: !4261, scopeLine: 6808, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!10291 = !DILocalVariable(name: "bb", arg: 1, scope: !10290, file: !3, line: 6807, type: !3523)
!10292 = !DILocation(line: 6807, column: 41, scope: !10290)
!10293 = !DILocalVariable(name: "changed", scope: !10290, file: !3, line: 6809, type: !2672)
!10294 = !DILocation(line: 6809, column: 8, scope: !10290)
!10295 = !DILocalVariable(name: "e", scope: !10290, file: !3, line: 6810, type: !2862)
!10296 = !DILocation(line: 6810, column: 8, scope: !10290)
!10297 = !DILocalVariable(name: "ei", scope: !10290, file: !3, line: 6811, type: !7861)
!10298 = !DILocation(line: 6811, column: 17, scope: !10290)
!10299 = !DILocalVariable(name: "stmt", scope: !10290, file: !3, line: 6812, type: !2882)
!10300 = !DILocation(line: 6812, column: 10, scope: !10290)
!10301 = !DILocation(line: 6812, column: 28, scope: !10290)
!10302 = !DILocation(line: 6812, column: 17, scope: !10290)
!10303 = !DILocation(line: 6814, column: 7, scope: !10304)
!10304 = distinct !DILexicalBlock(scope: !10290, file: !3, line: 6814, column: 7)
!10305 = !DILocation(line: 6814, column: 12, scope: !10304)
!10306 = !DILocation(line: 6814, column: 40, scope: !10304)
!10307 = !DILocation(line: 6814, column: 15, scope: !10304)
!10308 = !DILocation(line: 6814, column: 7, scope: !10290)
!10309 = !DILocation(line: 6815, column: 5, scope: !10304)
!10310 = !DILocation(line: 6817, column: 13, scope: !10311)
!10311 = distinct !DILexicalBlock(scope: !10290, file: !3, line: 6817, column: 3)
!10312 = !DILocation(line: 6817, column: 8, scope: !10311)
!10313 = !DILocation(line: 6817, column: 40, scope: !10314)
!10314 = distinct !DILexicalBlock(scope: !10311, file: !3, line: 6817, column: 3)
!10315 = !DILocation(line: 6817, column: 38, scope: !10314)
!10316 = !DILocation(line: 6817, column: 3, scope: !10311)
!10317 = !DILocation(line: 6819, column: 11, scope: !10318)
!10318 = distinct !DILexicalBlock(scope: !10319, file: !3, line: 6819, column: 11)
!10319 = distinct !DILexicalBlock(scope: !10314, file: !3, line: 6818, column: 5)
!10320 = !DILocation(line: 6819, column: 14, scope: !10318)
!10321 = !DILocation(line: 6819, column: 20, scope: !10318)
!10322 = !DILocation(line: 6819, column: 11, scope: !10319)
!10323 = !DILocation(line: 6821, column: 38, scope: !10324)
!10324 = distinct !DILexicalBlock(scope: !10318, file: !3, line: 6820, column: 2)
!10325 = !DILocation(line: 6821, column: 4, scope: !10324)
!10326 = !DILocation(line: 6822, column: 12, scope: !10324)
!10327 = !DILocation(line: 6823, column: 2, scope: !10324)
!10328 = !DILocation(line: 6825, column: 2, scope: !10318)
!10329 = !DILocation(line: 6817, column: 3, scope: !10314)
!10330 = distinct !{!10330, !10316, !10331}
!10331 = !DILocation(line: 6826, column: 5, scope: !10311)
!10332 = !DILocation(line: 6828, column: 10, scope: !10290)
!10333 = !DILocation(line: 6828, column: 3, scope: !10290)
!10334 = !DILocation(line: 6829, column: 1, scope: !10290)
!10335 = distinct !DISubprogram(name: "remove_edge_and_dominated_blocks", scope: !3, file: !3, line: 6683, type: !4256, scopeLine: 6684, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!10336 = !DILocalVariable(name: "e", arg: 1, scope: !10335, file: !3, line: 6683, type: !2862)
!10337 = !DILocation(line: 6683, column: 40, scope: !10335)
!10338 = !DILocalVariable(name: "bbs_to_remove", scope: !10335, file: !3, line: 6685, type: !4094)
!10339 = !DILocation(line: 6685, column: 28, scope: !10335)
!10340 = !DILocalVariable(name: "bbs_to_fix_dom", scope: !10335, file: !3, line: 6686, type: !4094)
!10341 = !DILocation(line: 6686, column: 28, scope: !10335)
!10342 = !DILocalVariable(name: "df", scope: !10335, file: !3, line: 6687, type: !3581)
!10343 = !DILocation(line: 6687, column: 10, scope: !10335)
!10344 = !DILocalVariable(name: "df_idom", scope: !10335, file: !3, line: 6687, type: !3581)
!10345 = !DILocation(line: 6687, column: 14, scope: !10335)
!10346 = !DILocalVariable(name: "f", scope: !10335, file: !3, line: 6688, type: !2862)
!10347 = !DILocation(line: 6688, column: 8, scope: !10335)
!10348 = !DILocalVariable(name: "ei", scope: !10335, file: !3, line: 6689, type: !7861)
!10349 = !DILocation(line: 6689, column: 17, scope: !10335)
!10350 = !DILocalVariable(name: "none_removed", scope: !10335, file: !3, line: 6690, type: !2672)
!10351 = !DILocation(line: 6690, column: 8, scope: !10335)
!10352 = !DILocalVariable(name: "i", scope: !10335, file: !3, line: 6691, type: !7)
!10353 = !DILocation(line: 6691, column: 12, scope: !10335)
!10354 = !DILocalVariable(name: "bb", scope: !10335, file: !3, line: 6692, type: !3523)
!10355 = !DILocation(line: 6692, column: 15, scope: !10335)
!10356 = !DILocalVariable(name: "dbb", scope: !10335, file: !3, line: 6692, type: !3523)
!10357 = !DILocation(line: 6692, column: 19, scope: !10335)
!10358 = !DILocalVariable(name: "bi", scope: !10335, file: !3, line: 6693, type: !10359)
!10359 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !2786, line: 218, baseType: !10360)
!10360 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2786, line: 203, size: 256, elements: !10361)
!10361 = !{!10362, !10363, !10364, !10365}
!10362 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !10360, file: !2786, line: 206, baseType: !2789, size: 64)
!10363 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !10360, file: !2786, line: 209, baseType: !2789, size: 64, offset: 64)
!10364 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !10360, file: !2786, line: 212, baseType: !7, size: 32, offset: 128)
!10365 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !10360, file: !2786, line: 217, baseType: !2799, size: 64, offset: 192)
!10366 = !DILocation(line: 6693, column: 19, scope: !10335)
!10367 = !DILocation(line: 6695, column: 8, scope: !10368)
!10368 = distinct !DILexicalBlock(scope: !10335, file: !3, line: 6695, column: 7)
!10369 = !DILocation(line: 6695, column: 7, scope: !10335)
!10370 = !DILocation(line: 6697, column: 20, scope: !10371)
!10371 = distinct !DILexicalBlock(scope: !10368, file: !3, line: 6696, column: 5)
!10372 = !DILocation(line: 6697, column: 7, scope: !10371)
!10373 = !DILocation(line: 6698, column: 7, scope: !10371)
!10374 = !DILocation(line: 6702, column: 7, scope: !10375)
!10375 = distinct !DILexicalBlock(scope: !10335, file: !3, line: 6702, column: 7)
!10376 = !DILocation(line: 6702, column: 10, scope: !10375)
!10377 = !DILocation(line: 6702, column: 18, scope: !10375)
!10378 = !DILocation(line: 6702, column: 15, scope: !10375)
!10379 = !DILocation(line: 6702, column: 7, scope: !10335)
!10380 = !DILocation(line: 6704, column: 11, scope: !10381)
!10381 = distinct !DILexicalBlock(scope: !10382, file: !3, line: 6704, column: 11)
!10382 = distinct !DILexicalBlock(scope: !10375, file: !3, line: 6703, column: 5)
!10383 = !DILocation(line: 6704, column: 11, scope: !10382)
!10384 = !DILocation(line: 6705, column: 18, scope: !10381)
!10385 = !DILocation(line: 6705, column: 42, scope: !10381)
!10386 = !DILocation(line: 6705, column: 45, scope: !10381)
!10387 = !DILocation(line: 6705, column: 50, scope: !10381)
!10388 = !DILocation(line: 6705, column: 2, scope: !10381)
!10389 = !DILocation(line: 6706, column: 20, scope: !10382)
!10390 = !DILocation(line: 6706, column: 7, scope: !10382)
!10391 = !DILocation(line: 6707, column: 7, scope: !10382)
!10392 = !DILocation(line: 6717, column: 3, scope: !10393)
!10393 = distinct !DILexicalBlock(scope: !10335, file: !3, line: 6717, column: 3)
!10394 = !DILocation(line: 6717, column: 3, scope: !10395)
!10395 = distinct !DILexicalBlock(scope: !10393, file: !3, line: 6717, column: 3)
!10396 = !DILocation(line: 6719, column: 11, scope: !10397)
!10397 = distinct !DILexicalBlock(scope: !10398, file: !3, line: 6719, column: 11)
!10398 = distinct !DILexicalBlock(scope: !10395, file: !3, line: 6718, column: 5)
!10399 = !DILocation(line: 6719, column: 16, scope: !10397)
!10400 = !DILocation(line: 6719, column: 13, scope: !10397)
!10401 = !DILocation(line: 6719, column: 11, scope: !10398)
!10402 = !DILocation(line: 6720, column: 2, scope: !10397)
!10403 = !DILocation(line: 6722, column: 44, scope: !10404)
!10404 = distinct !DILexicalBlock(scope: !10398, file: !3, line: 6722, column: 11)
!10405 = !DILocation(line: 6722, column: 47, scope: !10404)
!10406 = !DILocation(line: 6722, column: 52, scope: !10404)
!10407 = !DILocation(line: 6722, column: 55, scope: !10404)
!10408 = !DILocation(line: 6722, column: 12, scope: !10404)
!10409 = !DILocation(line: 6722, column: 11, scope: !10398)
!10410 = !DILocation(line: 6724, column: 17, scope: !10411)
!10411 = distinct !DILexicalBlock(scope: !10404, file: !3, line: 6723, column: 2)
!10412 = !DILocation(line: 6725, column: 4, scope: !10411)
!10413 = !DILocation(line: 6727, column: 5, scope: !10398)
!10414 = distinct !{!10414, !10392, !10415}
!10415 = !DILocation(line: 6727, column: 5, scope: !10393)
!10416 = !DILocation(line: 6729, column: 8, scope: !10335)
!10417 = !DILocation(line: 6729, column: 6, scope: !10335)
!10418 = !DILocation(line: 6730, column: 13, scope: !10335)
!10419 = !DILocation(line: 6730, column: 11, scope: !10335)
!10420 = !DILocation(line: 6732, column: 7, scope: !10421)
!10421 = distinct !DILexicalBlock(scope: !10335, file: !3, line: 6732, column: 7)
!10422 = !DILocation(line: 6732, column: 7, scope: !10335)
!10423 = !DILocation(line: 6733, column: 21, scope: !10421)
!10424 = !DILocation(line: 6734, column: 48, scope: !10421)
!10425 = !DILocation(line: 6734, column: 51, scope: !10421)
!10426 = !DILocation(line: 6734, column: 7, scope: !10421)
!10427 = !DILocation(line: 6734, column: 58, scope: !10421)
!10428 = !DILocation(line: 6733, column: 5, scope: !10421)
!10429 = !DILocation(line: 6737, column: 65, scope: !10430)
!10430 = distinct !DILexicalBlock(scope: !10421, file: !3, line: 6736, column: 5)
!10431 = !DILocation(line: 6737, column: 68, scope: !10430)
!10432 = !DILocation(line: 6737, column: 23, scope: !10430)
!10433 = !DILocation(line: 6737, column: 21, scope: !10430)
!10434 = !DILocation(line: 6738, column: 14, scope: !10435)
!10435 = distinct !DILexicalBlock(scope: !10430, file: !3, line: 6738, column: 7)
!10436 = !DILocation(line: 6738, column: 12, scope: !10435)
!10437 = !DILocation(line: 6738, column: 19, scope: !10438)
!10438 = distinct !DILexicalBlock(scope: !10435, file: !3, line: 6738, column: 7)
!10439 = !DILocation(line: 6738, column: 7, scope: !10435)
!10440 = !DILocation(line: 6740, column: 4, scope: !10441)
!10441 = distinct !DILexicalBlock(scope: !10442, file: !3, line: 6740, column: 4)
!10442 = distinct !DILexicalBlock(scope: !10438, file: !3, line: 6739, column: 2)
!10443 = !DILocation(line: 6740, column: 4, scope: !10444)
!10444 = distinct !DILexicalBlock(scope: !10441, file: !3, line: 6740, column: 4)
!10445 = !DILocation(line: 6742, column: 12, scope: !10446)
!10446 = distinct !DILexicalBlock(scope: !10447, file: !3, line: 6742, column: 12)
!10447 = distinct !DILexicalBlock(scope: !10444, file: !3, line: 6741, column: 6)
!10448 = !DILocation(line: 6742, column: 15, scope: !10446)
!10449 = !DILocation(line: 6742, column: 23, scope: !10446)
!10450 = !DILocation(line: 6742, column: 20, scope: !10446)
!10451 = !DILocation(line: 6742, column: 12, scope: !10447)
!10452 = !DILocation(line: 6743, column: 19, scope: !10446)
!10453 = !DILocation(line: 6743, column: 23, scope: !10446)
!10454 = !DILocation(line: 6743, column: 26, scope: !10446)
!10455 = !DILocation(line: 6743, column: 32, scope: !10446)
!10456 = !DILocation(line: 6743, column: 3, scope: !10446)
!10457 = !DILocation(line: 6744, column: 6, scope: !10447)
!10458 = distinct !{!10458, !10440, !10459}
!10459 = !DILocation(line: 6744, column: 6, scope: !10441)
!10460 = !DILocation(line: 6745, column: 2, scope: !10442)
!10461 = !DILocation(line: 6738, column: 69, scope: !10438)
!10462 = !DILocation(line: 6738, column: 7, scope: !10438)
!10463 = distinct !{!10463, !10439, !10464}
!10464 = !DILocation(line: 6745, column: 2, scope: !10435)
!10465 = !DILocation(line: 6746, column: 14, scope: !10466)
!10466 = distinct !DILexicalBlock(scope: !10430, file: !3, line: 6746, column: 7)
!10467 = !DILocation(line: 6746, column: 12, scope: !10466)
!10468 = !DILocation(line: 6746, column: 19, scope: !10469)
!10469 = distinct !DILexicalBlock(scope: !10466, file: !3, line: 6746, column: 7)
!10470 = !DILocation(line: 6746, column: 7, scope: !10466)
!10471 = !DILocation(line: 6747, column: 20, scope: !10469)
!10472 = !DILocation(line: 6747, column: 24, scope: !10469)
!10473 = !DILocation(line: 6747, column: 28, scope: !10469)
!10474 = !DILocation(line: 6747, column: 2, scope: !10469)
!10475 = !DILocation(line: 6746, column: 69, scope: !10469)
!10476 = !DILocation(line: 6746, column: 7, scope: !10469)
!10477 = distinct !{!10477, !10470, !10478}
!10478 = !DILocation(line: 6747, column: 33, scope: !10466)
!10479 = !DILocation(line: 6749, column: 7, scope: !10480)
!10480 = distinct !DILexicalBlock(scope: !10430, file: !3, line: 6749, column: 7)
!10481 = !DILocation(line: 6749, column: 7, scope: !10482)
!10482 = distinct !DILexicalBlock(scope: !10480, file: !3, line: 6749, column: 7)
!10483 = !DILocation(line: 6751, column: 9, scope: !10484)
!10484 = distinct !DILexicalBlock(scope: !10482, file: !3, line: 6750, column: 2)
!10485 = !DILocation(line: 6751, column: 7, scope: !10484)
!10486 = !DILocation(line: 6752, column: 20, scope: !10484)
!10487 = !DILocation(line: 6753, column: 47, scope: !10484)
!10488 = !DILocation(line: 6753, column: 6, scope: !10484)
!10489 = !DILocation(line: 6753, column: 52, scope: !10484)
!10490 = !DILocation(line: 6752, column: 4, scope: !10484)
!10491 = !DILocation(line: 6754, column: 2, scope: !10484)
!10492 = distinct !{!10492, !10479, !10493}
!10493 = !DILocation(line: 6754, column: 2, scope: !10480)
!10494 = !DILocation(line: 6757, column: 7, scope: !10495)
!10495 = distinct !DILexicalBlock(scope: !10335, file: !3, line: 6757, column: 7)
!10496 = !DILocation(line: 6757, column: 7, scope: !10335)
!10497 = !DILocation(line: 6760, column: 23, scope: !10498)
!10498 = distinct !DILexicalBlock(scope: !10495, file: !3, line: 6758, column: 5)
!10499 = !DILocation(line: 6760, column: 47, scope: !10498)
!10500 = !DILocation(line: 6760, column: 50, scope: !10498)
!10501 = !DILocation(line: 6760, column: 55, scope: !10498)
!10502 = !DILocation(line: 6760, column: 7, scope: !10498)
!10503 = !DILocation(line: 6761, column: 24, scope: !10498)
!10504 = !DILocation(line: 6761, column: 48, scope: !10498)
!10505 = !DILocation(line: 6761, column: 7, scope: !10498)
!10506 = !DILocation(line: 6762, column: 5, scope: !10498)
!10507 = !DILocation(line: 6765, column: 7, scope: !10508)
!10508 = distinct !DILexicalBlock(scope: !10335, file: !3, line: 6765, column: 7)
!10509 = !DILocation(line: 6765, column: 7, scope: !10335)
!10510 = !DILocation(line: 6766, column: 18, scope: !10508)
!10511 = !DILocation(line: 6766, column: 5, scope: !10508)
!10512 = !DILocation(line: 6773, column: 16, scope: !10513)
!10513 = distinct !DILexicalBlock(scope: !10514, file: !3, line: 6773, column: 7)
!10514 = distinct !DILexicalBlock(scope: !10508, file: !3, line: 6768, column: 5)
!10515 = !DILocation(line: 6773, column: 14, scope: !10513)
!10516 = !DILocation(line: 6773, column: 12, scope: !10513)
!10517 = !DILocation(line: 6773, column: 58, scope: !10518)
!10518 = distinct !DILexicalBlock(scope: !10513, file: !3, line: 6773, column: 7)
!10519 = !DILocation(line: 6773, column: 61, scope: !10518)
!10520 = !DILocation(line: 6773, column: 7, scope: !10513)
!10521 = !DILocation(line: 6774, column: 22, scope: !10518)
!10522 = !DILocation(line: 6774, column: 2, scope: !10518)
!10523 = !DILocation(line: 6773, column: 7, scope: !10518)
!10524 = distinct !{!10524, !10520, !10525}
!10525 = !DILocation(line: 6774, column: 63, scope: !10513)
!10526 = !DILocation(line: 6787, column: 3, scope: !10527)
!10527 = distinct !DILexicalBlock(scope: !10335, file: !3, line: 6787, column: 3)
!10528 = !DILocation(line: 6787, column: 3, scope: !10529)
!10529 = distinct !DILexicalBlock(scope: !10527, file: !3, line: 6787, column: 3)
!10530 = !DILocation(line: 6789, column: 12, scope: !10531)
!10531 = distinct !DILexicalBlock(scope: !10529, file: !3, line: 6788, column: 5)
!10532 = !DILocation(line: 6789, column: 10, scope: !10531)
!10533 = !DILocation(line: 6790, column: 49, scope: !10534)
!10534 = distinct !DILexicalBlock(scope: !10531, file: !3, line: 6790, column: 7)
!10535 = !DILocation(line: 6790, column: 18, scope: !10534)
!10536 = !DILocation(line: 6790, column: 16, scope: !10534)
!10537 = !DILocation(line: 6790, column: 12, scope: !10534)
!10538 = !DILocation(line: 6791, column: 5, scope: !10539)
!10539 = distinct !DILexicalBlock(scope: !10534, file: !3, line: 6790, column: 7)
!10540 = !DILocation(line: 6790, column: 7, scope: !10534)
!10541 = !DILocation(line: 6793, column: 2, scope: !10539)
!10542 = !DILocation(line: 6792, column: 41, scope: !10539)
!10543 = !DILocation(line: 6792, column: 11, scope: !10539)
!10544 = !DILocation(line: 6792, column: 9, scope: !10539)
!10545 = !DILocation(line: 6790, column: 7, scope: !10539)
!10546 = distinct !{!10546, !10540, !10547}
!10547 = !DILocation(line: 6793, column: 2, scope: !10534)
!10548 = !DILocation(line: 6794, column: 5, scope: !10531)
!10549 = distinct !{!10549, !10526, !10550}
!10550 = !DILocation(line: 6794, column: 5, scope: !10527)
!10551 = !DILocation(line: 6796, column: 43, scope: !10335)
!10552 = !DILocation(line: 6796, column: 3, scope: !10335)
!10553 = !DILocation(line: 6798, column: 3, scope: !10335)
!10554 = !DILocation(line: 6799, column: 3, scope: !10335)
!10555 = !DILocation(line: 6800, column: 3, scope: !10335)
!10556 = !DILocation(line: 6801, column: 3, scope: !10335)
!10557 = !DILocation(line: 6802, column: 1, scope: !10335)
!10558 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !2786, file: !2786, line: 224, type: !10559, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!10559 = !DISubroutineType(types: !10560)
!10560 = !{null, !10561, !10562, !7, !4041}
!10561 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10359, size: 64)
!10562 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !2554, line: 48, baseType: !10563)
!10563 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10564, size: 64)
!10564 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2785)
!10565 = !DILocalVariable(name: "bi", arg: 1, scope: !10558, file: !2786, line: 224, type: !10561)
!10566 = !DILocation(line: 224, column: 37, scope: !10558)
!10567 = !DILocalVariable(name: "map", arg: 2, scope: !10558, file: !2786, line: 224, type: !10562)
!10568 = !DILocation(line: 224, column: 54, scope: !10558)
!10569 = !DILocalVariable(name: "start_bit", arg: 3, scope: !10558, file: !2786, line: 225, type: !7)
!10570 = !DILocation(line: 225, column: 15, scope: !10558)
!10571 = !DILocalVariable(name: "bit_no", arg: 4, scope: !10558, file: !2786, line: 225, type: !4041)
!10572 = !DILocation(line: 225, column: 36, scope: !10558)
!10573 = !DILocation(line: 227, column: 14, scope: !10558)
!10574 = !DILocation(line: 227, column: 19, scope: !10558)
!10575 = !DILocation(line: 227, column: 3, scope: !10558)
!10576 = !DILocation(line: 227, column: 7, scope: !10558)
!10577 = !DILocation(line: 227, column: 12, scope: !10558)
!10578 = !DILocation(line: 228, column: 3, scope: !10558)
!10579 = !DILocation(line: 228, column: 7, scope: !10558)
!10580 = !DILocation(line: 228, column: 12, scope: !10558)
!10581 = !DILocation(line: 231, column: 3, scope: !10558)
!10582 = !DILocation(line: 233, column: 12, scope: !10583)
!10583 = distinct !DILexicalBlock(scope: !10584, file: !2786, line: 233, column: 11)
!10584 = distinct !DILexicalBlock(scope: !10558, file: !2786, line: 232, column: 5)
!10585 = !DILocation(line: 233, column: 16, scope: !10583)
!10586 = !DILocation(line: 233, column: 11, scope: !10584)
!10587 = !DILocation(line: 235, column: 4, scope: !10588)
!10588 = distinct !DILexicalBlock(scope: !10583, file: !2786, line: 234, column: 2)
!10589 = !DILocation(line: 235, column: 8, scope: !10588)
!10590 = !DILocation(line: 235, column: 13, scope: !10588)
!10591 = !DILocation(line: 236, column: 4, scope: !10588)
!10592 = !DILocation(line: 239, column: 11, scope: !10593)
!10593 = distinct !DILexicalBlock(scope: !10584, file: !2786, line: 239, column: 11)
!10594 = !DILocation(line: 239, column: 15, scope: !10593)
!10595 = !DILocation(line: 239, column: 21, scope: !10593)
!10596 = !DILocation(line: 239, column: 29, scope: !10593)
!10597 = !DILocation(line: 239, column: 39, scope: !10593)
!10598 = !DILocation(line: 239, column: 26, scope: !10593)
!10599 = !DILocation(line: 239, column: 11, scope: !10584)
!10600 = !DILocation(line: 240, column: 2, scope: !10593)
!10601 = !DILocation(line: 241, column: 18, scope: !10584)
!10602 = !DILocation(line: 241, column: 22, scope: !10584)
!10603 = !DILocation(line: 241, column: 28, scope: !10584)
!10604 = !DILocation(line: 241, column: 7, scope: !10584)
!10605 = !DILocation(line: 241, column: 11, scope: !10584)
!10606 = !DILocation(line: 241, column: 16, scope: !10584)
!10607 = distinct !{!10607, !10581, !10608}
!10608 = !DILocation(line: 242, column: 5, scope: !10558)
!10609 = !DILocation(line: 245, column: 7, scope: !10610)
!10610 = distinct !DILexicalBlock(scope: !10558, file: !2786, line: 245, column: 7)
!10611 = !DILocation(line: 245, column: 11, scope: !10610)
!10612 = !DILocation(line: 245, column: 17, scope: !10610)
!10613 = !DILocation(line: 245, column: 25, scope: !10610)
!10614 = !DILocation(line: 245, column: 35, scope: !10610)
!10615 = !DILocation(line: 245, column: 22, scope: !10610)
!10616 = !DILocation(line: 245, column: 7, scope: !10558)
!10617 = !DILocation(line: 246, column: 17, scope: !10610)
!10618 = !DILocation(line: 246, column: 21, scope: !10610)
!10619 = !DILocation(line: 246, column: 27, scope: !10610)
!10620 = !DILocation(line: 246, column: 32, scope: !10610)
!10621 = !DILocation(line: 246, column: 15, scope: !10610)
!10622 = !DILocation(line: 246, column: 5, scope: !10610)
!10623 = !DILocation(line: 249, column: 17, scope: !10558)
!10624 = !DILocation(line: 249, column: 27, scope: !10558)
!10625 = !DILocation(line: 249, column: 46, scope: !10558)
!10626 = !DILocation(line: 249, column: 3, scope: !10558)
!10627 = !DILocation(line: 249, column: 7, scope: !10558)
!10628 = !DILocation(line: 249, column: 15, scope: !10558)
!10629 = !DILocation(line: 250, column: 14, scope: !10558)
!10630 = !DILocation(line: 250, column: 18, scope: !10558)
!10631 = !DILocation(line: 250, column: 24, scope: !10558)
!10632 = !DILocation(line: 250, column: 29, scope: !10558)
!10633 = !DILocation(line: 250, column: 33, scope: !10558)
!10634 = !DILocation(line: 250, column: 3, scope: !10558)
!10635 = !DILocation(line: 250, column: 7, scope: !10558)
!10636 = !DILocation(line: 250, column: 12, scope: !10558)
!10637 = !DILocation(line: 251, column: 16, scope: !10558)
!10638 = !DILocation(line: 251, column: 26, scope: !10558)
!10639 = !DILocation(line: 251, column: 3, scope: !10558)
!10640 = !DILocation(line: 251, column: 7, scope: !10558)
!10641 = !DILocation(line: 251, column: 12, scope: !10558)
!10642 = !DILocation(line: 257, column: 17, scope: !10558)
!10643 = !DILocation(line: 257, column: 21, scope: !10558)
!10644 = !DILocation(line: 257, column: 16, scope: !10558)
!10645 = !DILocation(line: 257, column: 13, scope: !10558)
!10646 = !DILocation(line: 259, column: 13, scope: !10558)
!10647 = !DILocation(line: 259, column: 4, scope: !10558)
!10648 = !DILocation(line: 259, column: 11, scope: !10558)
!10649 = !DILocation(line: 260, column: 1, scope: !10558)
!10650 = distinct !DISubprogram(name: "bmp_iter_set", scope: !2786, file: !2786, line: 393, type: !10651, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!10651 = !DISubroutineType(types: !10652)
!10652 = !{!2672, !10561, !4041}
!10653 = !DILocalVariable(name: "bi", arg: 1, scope: !10650, file: !2786, line: 393, type: !10561)
!10654 = !DILocation(line: 393, column: 32, scope: !10650)
!10655 = !DILocalVariable(name: "bit_no", arg: 2, scope: !10650, file: !2786, line: 393, type: !4041)
!10656 = !DILocation(line: 393, column: 46, scope: !10650)
!10657 = !DILocation(line: 396, column: 7, scope: !10658)
!10658 = distinct !DILexicalBlock(scope: !10650, file: !2786, line: 396, column: 7)
!10659 = !DILocation(line: 396, column: 11, scope: !10658)
!10660 = !DILocation(line: 396, column: 7, scope: !10650)
!10661 = !DILocation(line: 397, column: 5, scope: !10658)
!10662 = !DILabel(scope: !10663, name: "next_bit", file: !2786, line: 398)
!10663 = distinct !DILexicalBlock(scope: !10658, file: !2786, line: 397, column: 5)
!10664 = !DILocation(line: 398, column: 5, scope: !10663)
!10665 = !DILocation(line: 399, column: 7, scope: !10663)
!10666 = !DILocation(line: 399, column: 16, scope: !10663)
!10667 = !DILocation(line: 399, column: 20, scope: !10663)
!10668 = !DILocation(line: 399, column: 25, scope: !10663)
!10669 = !DILocation(line: 399, column: 14, scope: !10663)
!10670 = !DILocation(line: 401, column: 4, scope: !10671)
!10671 = distinct !DILexicalBlock(scope: !10663, file: !2786, line: 400, column: 2)
!10672 = !DILocation(line: 401, column: 8, scope: !10671)
!10673 = !DILocation(line: 401, column: 13, scope: !10671)
!10674 = !DILocation(line: 402, column: 5, scope: !10671)
!10675 = !DILocation(line: 402, column: 12, scope: !10671)
!10676 = distinct !{!10676, !10665, !10677}
!10677 = !DILocation(line: 403, column: 2, scope: !10663)
!10678 = !DILocation(line: 404, column: 7, scope: !10663)
!10679 = !DILocation(line: 410, column: 16, scope: !10650)
!10680 = !DILocation(line: 410, column: 15, scope: !10650)
!10681 = !DILocation(line: 410, column: 23, scope: !10650)
!10682 = !DILocation(line: 410, column: 42, scope: !10650)
!10683 = !DILocation(line: 411, column: 7, scope: !10650)
!10684 = !DILocation(line: 411, column: 26, scope: !10650)
!10685 = !DILocation(line: 410, column: 4, scope: !10650)
!10686 = !DILocation(line: 410, column: 11, scope: !10650)
!10687 = !DILocation(line: 412, column: 3, scope: !10650)
!10688 = !DILocation(line: 412, column: 7, scope: !10650)
!10689 = !DILocation(line: 412, column: 14, scope: !10650)
!10690 = !DILocation(line: 414, column: 3, scope: !10650)
!10691 = !DILocation(line: 417, column: 7, scope: !10692)
!10692 = distinct !DILexicalBlock(scope: !10650, file: !2786, line: 415, column: 5)
!10693 = !DILocation(line: 417, column: 14, scope: !10692)
!10694 = !DILocation(line: 417, column: 18, scope: !10692)
!10695 = !DILocation(line: 417, column: 26, scope: !10692)
!10696 = !DILocation(line: 419, column: 15, scope: !10697)
!10697 = distinct !DILexicalBlock(scope: !10692, file: !2786, line: 418, column: 2)
!10698 = !DILocation(line: 419, column: 19, scope: !10697)
!10699 = !DILocation(line: 419, column: 25, scope: !10697)
!10700 = !DILocation(line: 419, column: 30, scope: !10697)
!10701 = !DILocation(line: 419, column: 34, scope: !10697)
!10702 = !DILocation(line: 419, column: 4, scope: !10697)
!10703 = !DILocation(line: 419, column: 8, scope: !10697)
!10704 = !DILocation(line: 419, column: 13, scope: !10697)
!10705 = !DILocation(line: 420, column: 8, scope: !10706)
!10706 = distinct !DILexicalBlock(scope: !10697, file: !2786, line: 420, column: 8)
!10707 = !DILocation(line: 420, column: 12, scope: !10706)
!10708 = !DILocation(line: 420, column: 8, scope: !10697)
!10709 = !DILocation(line: 421, column: 6, scope: !10706)
!10710 = !DILocation(line: 422, column: 5, scope: !10697)
!10711 = !DILocation(line: 422, column: 12, scope: !10697)
!10712 = !DILocation(line: 423, column: 4, scope: !10697)
!10713 = !DILocation(line: 423, column: 8, scope: !10697)
!10714 = !DILocation(line: 423, column: 15, scope: !10697)
!10715 = distinct !{!10715, !10691, !10716}
!10716 = !DILocation(line: 424, column: 2, scope: !10692)
!10717 = !DILocation(line: 427, column: 18, scope: !10692)
!10718 = !DILocation(line: 427, column: 22, scope: !10692)
!10719 = !DILocation(line: 427, column: 28, scope: !10692)
!10720 = !DILocation(line: 427, column: 7, scope: !10692)
!10721 = !DILocation(line: 427, column: 11, scope: !10692)
!10722 = !DILocation(line: 427, column: 16, scope: !10692)
!10723 = !DILocation(line: 428, column: 12, scope: !10724)
!10724 = distinct !DILexicalBlock(scope: !10692, file: !2786, line: 428, column: 11)
!10725 = !DILocation(line: 428, column: 16, scope: !10724)
!10726 = !DILocation(line: 428, column: 11, scope: !10692)
!10727 = !DILocation(line: 429, column: 2, scope: !10724)
!10728 = !DILocation(line: 430, column: 17, scope: !10692)
!10729 = !DILocation(line: 430, column: 21, scope: !10692)
!10730 = !DILocation(line: 430, column: 27, scope: !10692)
!10731 = !DILocation(line: 430, column: 32, scope: !10692)
!10732 = !DILocation(line: 430, column: 8, scope: !10692)
!10733 = !DILocation(line: 430, column: 15, scope: !10692)
!10734 = !DILocation(line: 431, column: 7, scope: !10692)
!10735 = !DILocation(line: 431, column: 11, scope: !10692)
!10736 = !DILocation(line: 431, column: 19, scope: !10692)
!10737 = distinct !{!10737, !10690, !10738}
!10738 = !DILocation(line: 432, column: 5, scope: !10650)
!10739 = !DILocation(line: 433, column: 1, scope: !10650)
!10740 = distinct !DISubprogram(name: "bmp_iter_next", scope: !2786, file: !2786, line: 382, type: !10741, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!10741 = !DISubroutineType(types: !10742)
!10742 = !{null, !10561, !4041}
!10743 = !DILocalVariable(name: "bi", arg: 1, scope: !10740, file: !2786, line: 382, type: !10561)
!10744 = !DILocation(line: 382, column: 33, scope: !10740)
!10745 = !DILocalVariable(name: "bit_no", arg: 2, scope: !10740, file: !2786, line: 382, type: !4041)
!10746 = !DILocation(line: 382, column: 47, scope: !10740)
!10747 = !DILocation(line: 384, column: 3, scope: !10740)
!10748 = !DILocation(line: 384, column: 7, scope: !10740)
!10749 = !DILocation(line: 384, column: 12, scope: !10740)
!10750 = !DILocation(line: 385, column: 4, scope: !10740)
!10751 = !DILocation(line: 385, column: 11, scope: !10740)
!10752 = !DILocation(line: 386, column: 1, scope: !10740)
!10753 = distinct !DISubprogram(name: "gimple_purge_all_dead_eh_edges", scope: !3, file: !3, line: 6832, type: !10754, scopeLine: 6833, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!10754 = !DISubroutineType(types: !10755)
!10755 = !{!2672, !10562}
!10756 = !DILocalVariable(name: "blocks", arg: 1, scope: !10753, file: !3, line: 6832, type: !10562)
!10757 = !DILocation(line: 6832, column: 46, scope: !10753)
!10758 = !DILocalVariable(name: "changed", scope: !10753, file: !3, line: 6834, type: !2672)
!10759 = !DILocation(line: 6834, column: 8, scope: !10753)
!10760 = !DILocalVariable(name: "i", scope: !10753, file: !3, line: 6835, type: !7)
!10761 = !DILocation(line: 6835, column: 12, scope: !10753)
!10762 = !DILocalVariable(name: "bi", scope: !10753, file: !3, line: 6836, type: !10359)
!10763 = !DILocation(line: 6836, column: 19, scope: !10753)
!10764 = !DILocation(line: 6838, column: 3, scope: !10765)
!10765 = distinct !DILexicalBlock(scope: !10753, file: !3, line: 6838, column: 3)
!10766 = !DILocation(line: 6838, column: 3, scope: !10767)
!10767 = distinct !DILexicalBlock(scope: !10765, file: !3, line: 6838, column: 3)
!10768 = !DILocalVariable(name: "bb", scope: !10769, file: !3, line: 6840, type: !3523)
!10769 = distinct !DILexicalBlock(scope: !10767, file: !3, line: 6839, column: 5)
!10770 = !DILocation(line: 6840, column: 19, scope: !10769)
!10771 = !DILocation(line: 6840, column: 24, scope: !10769)
!10772 = !DILocation(line: 6844, column: 7, scope: !10769)
!10773 = !DILocation(line: 6845, column: 11, scope: !10774)
!10774 = distinct !DILexicalBlock(scope: !10769, file: !3, line: 6845, column: 11)
!10775 = !DILocation(line: 6845, column: 14, scope: !10774)
!10776 = !DILocation(line: 6845, column: 11, scope: !10769)
!10777 = !DILocation(line: 6846, column: 41, scope: !10774)
!10778 = !DILocation(line: 6846, column: 13, scope: !10774)
!10779 = !DILocation(line: 6846, column: 10, scope: !10774)
!10780 = !DILocation(line: 6846, column: 2, scope: !10774)
!10781 = !DILocation(line: 6847, column: 5, scope: !10769)
!10782 = distinct !{!10782, !10764, !10783}
!10783 = !DILocation(line: 6847, column: 5, scope: !10765)
!10784 = !DILocation(line: 6849, column: 10, scope: !10753)
!10785 = !DILocation(line: 6849, column: 3, scope: !10753)
!10786 = distinct !DISubprogram(name: "gimple_verify_flow_info", scope: !3, file: !3, line: 4213, type: !4191, scopeLine: 4214, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!10787 = !DILocalVariable(name: "err", scope: !10786, file: !3, line: 4215, type: !2548)
!10788 = !DILocation(line: 4215, column: 7, scope: !10786)
!10789 = !DILocalVariable(name: "bb", scope: !10786, file: !3, line: 4216, type: !3523)
!10790 = !DILocation(line: 4216, column: 15, scope: !10786)
!10791 = !DILocalVariable(name: "gsi", scope: !10786, file: !3, line: 4217, type: !4074)
!10792 = !DILocation(line: 4217, column: 24, scope: !10786)
!10793 = !DILocalVariable(name: "stmt", scope: !10786, file: !3, line: 4218, type: !2882)
!10794 = !DILocation(line: 4218, column: 10, scope: !10786)
!10795 = !DILocalVariable(name: "e", scope: !10786, file: !3, line: 4219, type: !2862)
!10796 = !DILocation(line: 4219, column: 8, scope: !10786)
!10797 = !DILocalVariable(name: "ei", scope: !10786, file: !3, line: 4220, type: !7861)
!10798 = !DILocation(line: 4220, column: 17, scope: !10786)
!10799 = !DILocation(line: 4222, column: 7, scope: !10800)
!10800 = distinct !DILexicalBlock(scope: !10786, file: !3, line: 4222, column: 7)
!10801 = !DILocation(line: 4222, column: 24, scope: !10800)
!10802 = !DILocation(line: 4222, column: 27, scope: !10800)
!10803 = !DILocation(line: 4222, column: 7, scope: !10786)
!10804 = !DILocation(line: 4224, column: 7, scope: !10805)
!10805 = distinct !DILexicalBlock(scope: !10800, file: !3, line: 4223, column: 5)
!10806 = !DILocation(line: 4225, column: 11, scope: !10805)
!10807 = !DILocation(line: 4226, column: 5, scope: !10805)
!10808 = !DILocation(line: 4228, column: 7, scope: !10809)
!10809 = distinct !DILexicalBlock(scope: !10786, file: !3, line: 4228, column: 7)
!10810 = !DILocation(line: 4228, column: 23, scope: !10809)
!10811 = !DILocation(line: 4228, column: 26, scope: !10809)
!10812 = !DILocation(line: 4228, column: 7, scope: !10786)
!10813 = !DILocation(line: 4230, column: 7, scope: !10814)
!10814 = distinct !DILexicalBlock(scope: !10809, file: !3, line: 4229, column: 5)
!10815 = !DILocation(line: 4231, column: 11, scope: !10814)
!10816 = !DILocation(line: 4232, column: 5, scope: !10814)
!10817 = !DILocation(line: 4234, column: 3, scope: !10818)
!10818 = distinct !DILexicalBlock(scope: !10786, file: !3, line: 4234, column: 3)
!10819 = !DILocation(line: 4234, column: 3, scope: !10820)
!10820 = distinct !DILexicalBlock(scope: !10818, file: !3, line: 4234, column: 3)
!10821 = !DILocation(line: 4235, column: 9, scope: !10822)
!10822 = distinct !DILexicalBlock(scope: !10820, file: !3, line: 4235, column: 9)
!10823 = !DILocation(line: 4235, column: 12, scope: !10822)
!10824 = !DILocation(line: 4235, column: 18, scope: !10822)
!10825 = !DILocation(line: 4235, column: 9, scope: !10820)
!10826 = !DILocation(line: 4237, column: 40, scope: !10827)
!10827 = distinct !DILexicalBlock(scope: !10822, file: !3, line: 4236, column: 7)
!10828 = !DILocation(line: 4237, column: 43, scope: !10827)
!10829 = !DILocation(line: 4237, column: 48, scope: !10827)
!10830 = !DILocation(line: 4237, column: 2, scope: !10827)
!10831 = !DILocation(line: 4238, column: 6, scope: !10827)
!10832 = !DILocation(line: 4239, column: 7, scope: !10827)
!10833 = !DILocation(line: 4235, column: 20, scope: !10822)
!10834 = distinct !{!10834, !10817, !10835}
!10835 = !DILocation(line: 4239, column: 7, scope: !10818)
!10836 = !DILocation(line: 4241, column: 3, scope: !10837)
!10837 = distinct !DILexicalBlock(scope: !10786, file: !3, line: 4241, column: 3)
!10838 = !DILocation(line: 4241, column: 3, scope: !10839)
!10839 = distinct !DILexicalBlock(scope: !10837, file: !3, line: 4241, column: 3)
!10840 = !DILocalVariable(name: "found_ctrl_stmt", scope: !10841, file: !3, line: 4243, type: !2672)
!10841 = distinct !DILexicalBlock(scope: !10839, file: !3, line: 4242, column: 5)
!10842 = !DILocation(line: 4243, column: 12, scope: !10841)
!10843 = !DILocation(line: 4245, column: 12, scope: !10841)
!10844 = !DILocation(line: 4248, column: 32, scope: !10845)
!10845 = distinct !DILexicalBlock(scope: !10841, file: !3, line: 4248, column: 7)
!10846 = !DILocation(line: 4248, column: 18, scope: !10845)
!10847 = !DILocation(line: 4248, column: 12, scope: !10845)
!10848 = !DILocation(line: 4248, column: 38, scope: !10849)
!10849 = distinct !DILexicalBlock(scope: !10845, file: !3, line: 4248, column: 7)
!10850 = !DILocation(line: 4248, column: 37, scope: !10849)
!10851 = !DILocation(line: 4248, column: 7, scope: !10845)
!10852 = !DILocalVariable(name: "label", scope: !10853, file: !3, line: 4250, type: !2553)
!10853 = distinct !DILexicalBlock(scope: !10849, file: !3, line: 4249, column: 2)
!10854 = !DILocation(line: 4250, column: 9, scope: !10853)
!10855 = !DILocalVariable(name: "prev_stmt", scope: !10853, file: !3, line: 4251, type: !2882)
!10856 = !DILocation(line: 4251, column: 11, scope: !10853)
!10857 = !DILocation(line: 4251, column: 23, scope: !10853)
!10858 = !DILocation(line: 4253, column: 11, scope: !10853)
!10859 = !DILocation(line: 4253, column: 9, scope: !10853)
!10860 = !DILocation(line: 4255, column: 21, scope: !10861)
!10861 = distinct !DILexicalBlock(scope: !10853, file: !3, line: 4255, column: 8)
!10862 = !DILocation(line: 4255, column: 8, scope: !10861)
!10863 = !DILocation(line: 4255, column: 27, scope: !10861)
!10864 = !DILocation(line: 4255, column: 8, scope: !10853)
!10865 = !DILocation(line: 4256, column: 6, scope: !10861)
!10866 = !DILocation(line: 4258, column: 32, scope: !10853)
!10867 = !DILocation(line: 4258, column: 12, scope: !10853)
!10868 = !DILocation(line: 4258, column: 10, scope: !10853)
!10869 = !DILocation(line: 4259, column: 8, scope: !10870)
!10870 = distinct !DILexicalBlock(scope: !10853, file: !3, line: 4259, column: 8)
!10871 = !DILocation(line: 4259, column: 18, scope: !10870)
!10872 = !DILocation(line: 4259, column: 21, scope: !10870)
!10873 = !DILocation(line: 4259, column: 8, scope: !10853)
!10874 = !DILocation(line: 4261, column: 8, scope: !10875)
!10875 = distinct !DILexicalBlock(scope: !10870, file: !3, line: 4260, column: 6)
!10876 = !DILocation(line: 4262, column: 28, scope: !10875)
!10877 = !DILocation(line: 4262, column: 36, scope: !10875)
!10878 = !DILocation(line: 4262, column: 8, scope: !10875)
!10879 = !DILocation(line: 4263, column: 17, scope: !10875)
!10880 = !DILocation(line: 4264, column: 10, scope: !10875)
!10881 = !DILocation(line: 4264, column: 14, scope: !10875)
!10882 = !DILocation(line: 4263, column: 8, scope: !10875)
!10883 = !DILocation(line: 4265, column: 12, scope: !10875)
!10884 = !DILocation(line: 4266, column: 6, scope: !10875)
!10885 = !DILocation(line: 4268, column: 8, scope: !10886)
!10886 = distinct !DILexicalBlock(scope: !10853, file: !3, line: 4268, column: 8)
!10887 = !DILocation(line: 4268, column: 18, scope: !10886)
!10888 = !DILocation(line: 4268, column: 21, scope: !10886)
!10889 = !DILocation(line: 4268, column: 47, scope: !10886)
!10890 = !DILocation(line: 4268, column: 8, scope: !10853)
!10891 = !DILocation(line: 4270, column: 8, scope: !10892)
!10892 = distinct !DILexicalBlock(scope: !10886, file: !3, line: 4269, column: 6)
!10893 = !DILocation(line: 4271, column: 28, scope: !10892)
!10894 = !DILocation(line: 4271, column: 36, scope: !10892)
!10895 = !DILocation(line: 4271, column: 8, scope: !10892)
!10896 = !DILocation(line: 4272, column: 17, scope: !10892)
!10897 = !DILocation(line: 4273, column: 10, scope: !10892)
!10898 = !DILocation(line: 4273, column: 14, scope: !10892)
!10899 = !DILocation(line: 4272, column: 8, scope: !10892)
!10900 = !DILocation(line: 4274, column: 12, scope: !10892)
!10901 = !DILocation(line: 4275, column: 6, scope: !10892)
!10902 = !DILocation(line: 4277, column: 8, scope: !10903)
!10903 = distinct !DILexicalBlock(scope: !10853, file: !3, line: 4277, column: 8)
!10904 = !DILocation(line: 4277, column: 34, scope: !10903)
!10905 = !DILocation(line: 4277, column: 31, scope: !10903)
!10906 = !DILocation(line: 4277, column: 8, scope: !10853)
!10907 = !DILocation(line: 4279, column: 8, scope: !10908)
!10908 = distinct !DILexicalBlock(scope: !10903, file: !3, line: 4278, column: 6)
!10909 = !DILocation(line: 4280, column: 28, scope: !10908)
!10910 = !DILocation(line: 4280, column: 36, scope: !10908)
!10911 = !DILocation(line: 4280, column: 8, scope: !10908)
!10912 = !DILocation(line: 4281, column: 17, scope: !10908)
!10913 = !DILocation(line: 4282, column: 10, scope: !10908)
!10914 = !DILocation(line: 4282, column: 14, scope: !10908)
!10915 = !DILocation(line: 4281, column: 8, scope: !10908)
!10916 = !DILocation(line: 4283, column: 12, scope: !10908)
!10917 = !DILocation(line: 4284, column: 6, scope: !10908)
!10918 = !DILocation(line: 4286, column: 31, scope: !10919)
!10919 = distinct !DILexicalBlock(scope: !10853, file: !3, line: 4286, column: 8)
!10920 = !DILocation(line: 4286, column: 8, scope: !10919)
!10921 = !DILocation(line: 4286, column: 41, scope: !10919)
!10922 = !DILocation(line: 4286, column: 38, scope: !10919)
!10923 = !DILocation(line: 4286, column: 8, scope: !10853)
!10924 = !DILocation(line: 4288, column: 8, scope: !10925)
!10925 = distinct !DILexicalBlock(scope: !10919, file: !3, line: 4287, column: 6)
!10926 = !DILocation(line: 4289, column: 28, scope: !10925)
!10927 = !DILocation(line: 4289, column: 36, scope: !10925)
!10928 = !DILocation(line: 4289, column: 8, scope: !10925)
!10929 = !DILocation(line: 4290, column: 17, scope: !10925)
!10930 = !DILocation(line: 4291, column: 10, scope: !10925)
!10931 = !DILocation(line: 4291, column: 14, scope: !10925)
!10932 = !DILocation(line: 4290, column: 8, scope: !10925)
!10933 = !DILocation(line: 4292, column: 12, scope: !10925)
!10934 = !DILocation(line: 4293, column: 6, scope: !10925)
!10935 = !DILocation(line: 4294, column: 2, scope: !10853)
!10936 = !DILocation(line: 4248, column: 55, scope: !10849)
!10937 = !DILocation(line: 4248, column: 7, scope: !10849)
!10938 = distinct !{!10938, !10851, !10939}
!10939 = !DILocation(line: 4294, column: 2, scope: !10845)
!10940 = !DILocation(line: 4297, column: 7, scope: !10841)
!10941 = !DILocation(line: 4297, column: 15, scope: !10942)
!10942 = distinct !DILexicalBlock(scope: !10943, file: !3, line: 4297, column: 7)
!10943 = distinct !DILexicalBlock(scope: !10841, file: !3, line: 4297, column: 7)
!10944 = !DILocation(line: 4297, column: 14, scope: !10942)
!10945 = !DILocation(line: 4297, column: 7, scope: !10943)
!10946 = !DILocalVariable(name: "stmt", scope: !10947, file: !3, line: 4299, type: !2882)
!10947 = distinct !DILexicalBlock(scope: !10942, file: !3, line: 4298, column: 2)
!10948 = !DILocation(line: 4299, column: 11, scope: !10947)
!10949 = !DILocation(line: 4299, column: 18, scope: !10947)
!10950 = !DILocation(line: 4301, column: 8, scope: !10951)
!10951 = distinct !DILexicalBlock(scope: !10947, file: !3, line: 4301, column: 8)
!10952 = !DILocation(line: 4301, column: 8, scope: !10947)
!10953 = !DILocation(line: 4304, column: 8, scope: !10954)
!10954 = distinct !DILexicalBlock(scope: !10951, file: !3, line: 4302, column: 6)
!10955 = !DILocation(line: 4304, column: 12, scope: !10954)
!10956 = !DILocation(line: 4303, column: 8, scope: !10954)
!10957 = !DILocation(line: 4305, column: 12, scope: !10954)
!10958 = !DILocation(line: 4306, column: 6, scope: !10954)
!10959 = !DILocation(line: 4308, column: 24, scope: !10960)
!10960 = distinct !DILexicalBlock(scope: !10947, file: !3, line: 4308, column: 8)
!10961 = !DILocation(line: 4308, column: 8, scope: !10960)
!10962 = !DILocation(line: 4308, column: 8, scope: !10947)
!10963 = !DILocation(line: 4309, column: 22, scope: !10960)
!10964 = !DILocation(line: 4309, column: 6, scope: !10960)
!10965 = !DILocation(line: 4311, column: 21, scope: !10966)
!10966 = distinct !DILexicalBlock(scope: !10947, file: !3, line: 4311, column: 8)
!10967 = !DILocation(line: 4311, column: 8, scope: !10966)
!10968 = !DILocation(line: 4311, column: 27, scope: !10966)
!10969 = !DILocation(line: 4311, column: 8, scope: !10947)
!10970 = !DILocation(line: 4313, column: 8, scope: !10971)
!10971 = distinct !DILexicalBlock(scope: !10966, file: !3, line: 4312, column: 6)
!10972 = !DILocation(line: 4314, column: 28, scope: !10971)
!10973 = !DILocation(line: 4314, column: 56, scope: !10971)
!10974 = !DILocation(line: 4314, column: 36, scope: !10971)
!10975 = !DILocation(line: 4314, column: 8, scope: !10971)
!10976 = !DILocation(line: 4315, column: 17, scope: !10971)
!10977 = !DILocation(line: 4315, column: 61, scope: !10971)
!10978 = !DILocation(line: 4315, column: 65, scope: !10971)
!10979 = !DILocation(line: 4315, column: 8, scope: !10971)
!10980 = !DILocation(line: 4316, column: 12, scope: !10971)
!10981 = !DILocation(line: 4317, column: 6, scope: !10971)
!10982 = !DILocation(line: 4318, column: 2, scope: !10947)
!10983 = !DILocation(line: 4297, column: 32, scope: !10942)
!10984 = !DILocation(line: 4297, column: 7, scope: !10942)
!10985 = distinct !{!10985, !10945, !10986}
!10986 = !DILocation(line: 4318, column: 2, scope: !10943)
!10987 = !DILocation(line: 4320, column: 26, scope: !10841)
!10988 = !DILocation(line: 4320, column: 13, scope: !10841)
!10989 = !DILocation(line: 4321, column: 11, scope: !10990)
!10990 = distinct !DILexicalBlock(scope: !10841, file: !3, line: 4321, column: 11)
!10991 = !DILocation(line: 4321, column: 11, scope: !10841)
!10992 = !DILocation(line: 4322, column: 2, scope: !10990)
!10993 = !DILocation(line: 4324, column: 14, scope: !10841)
!10994 = !DILocation(line: 4324, column: 12, scope: !10841)
!10995 = !DILocation(line: 4326, column: 24, scope: !10996)
!10996 = distinct !DILexicalBlock(scope: !10841, file: !3, line: 4326, column: 11)
!10997 = !DILocation(line: 4326, column: 11, scope: !10996)
!10998 = !DILocation(line: 4326, column: 30, scope: !10996)
!10999 = !DILocation(line: 4326, column: 11, scope: !10841)
!11000 = !DILocation(line: 4327, column: 2, scope: !10996)
!11001 = !DILocation(line: 4329, column: 31, scope: !10841)
!11002 = !DILocation(line: 4329, column: 14, scope: !10841)
!11003 = !DILocation(line: 4329, column: 11, scope: !10841)
!11004 = !DILocation(line: 4331, column: 25, scope: !11005)
!11005 = distinct !DILexicalBlock(scope: !10841, file: !3, line: 4331, column: 11)
!11006 = !DILocation(line: 4331, column: 11, scope: !11005)
!11007 = !DILocation(line: 4331, column: 11, scope: !10841)
!11008 = !DILocation(line: 4333, column: 4, scope: !11009)
!11009 = distinct !DILexicalBlock(scope: !11010, file: !3, line: 4333, column: 4)
!11010 = distinct !DILexicalBlock(scope: !11005, file: !3, line: 4332, column: 2)
!11011 = !DILocation(line: 4333, column: 4, scope: !11012)
!11012 = distinct !DILexicalBlock(scope: !11009, file: !3, line: 4333, column: 4)
!11013 = !DILocation(line: 4334, column: 10, scope: !11014)
!11014 = distinct !DILexicalBlock(scope: !11012, file: !3, line: 4334, column: 10)
!11015 = !DILocation(line: 4334, column: 13, scope: !11014)
!11016 = !DILocation(line: 4334, column: 19, scope: !11014)
!11017 = !DILocation(line: 4334, column: 10, scope: !11012)
!11018 = !DILocation(line: 4337, column: 10, scope: !11019)
!11019 = distinct !DILexicalBlock(scope: !11014, file: !3, line: 4335, column: 8)
!11020 = !DILocation(line: 4337, column: 14, scope: !11019)
!11021 = !DILocation(line: 4336, column: 3, scope: !11019)
!11022 = !DILocation(line: 4338, column: 7, scope: !11019)
!11023 = !DILocation(line: 4339, column: 8, scope: !11019)
!11024 = !DILocation(line: 4334, column: 21, scope: !11014)
!11025 = distinct !{!11025, !11008, !11026}
!11026 = !DILocation(line: 4339, column: 8, scope: !11009)
!11027 = !DILocation(line: 4340, column: 2, scope: !11010)
!11028 = !DILocation(line: 4342, column: 24, scope: !11029)
!11029 = distinct !DILexicalBlock(scope: !10841, file: !3, line: 4342, column: 11)
!11030 = !DILocation(line: 4342, column: 11, scope: !11029)
!11031 = !DILocation(line: 4342, column: 30, scope: !11029)
!11032 = !DILocation(line: 4342, column: 11, scope: !10841)
!11033 = !DILocation(line: 4346, column: 4, scope: !11034)
!11034 = distinct !DILexicalBlock(scope: !11035, file: !3, line: 4346, column: 4)
!11035 = distinct !DILexicalBlock(scope: !11029, file: !3, line: 4343, column: 2)
!11036 = !DILocation(line: 4346, column: 4, scope: !11037)
!11037 = distinct !DILexicalBlock(scope: !11034, file: !3, line: 4346, column: 4)
!11038 = !DILocation(line: 4347, column: 10, scope: !11039)
!11039 = distinct !DILexicalBlock(scope: !11037, file: !3, line: 4347, column: 10)
!11040 = !DILocation(line: 4347, column: 13, scope: !11039)
!11041 = !DILocation(line: 4347, column: 19, scope: !11039)
!11042 = !DILocation(line: 4347, column: 10, scope: !11037)
!11043 = !DILocation(line: 4350, column: 10, scope: !11044)
!11044 = distinct !DILexicalBlock(scope: !11039, file: !3, line: 4348, column: 8)
!11045 = !DILocation(line: 4350, column: 14, scope: !11044)
!11046 = !DILocation(line: 4349, column: 3, scope: !11044)
!11047 = !DILocation(line: 4351, column: 7, scope: !11044)
!11048 = !DILocation(line: 4352, column: 8, scope: !11044)
!11049 = !DILocation(line: 4347, column: 56, scope: !11039)
!11050 = distinct !{!11050, !11033, !11051}
!11051 = !DILocation(line: 4352, column: 8, scope: !11034)
!11052 = !DILocation(line: 4353, column: 2, scope: !11035)
!11053 = !DILocation(line: 4355, column: 28, scope: !10841)
!11054 = !DILocation(line: 4355, column: 15, scope: !10841)
!11055 = !DILocation(line: 4355, column: 7, scope: !10841)
!11056 = !DILocalVariable(name: "true_edge", scope: !11057, file: !3, line: 4359, type: !2862)
!11057 = distinct !DILexicalBlock(scope: !11058, file: !3, line: 4358, column: 4)
!11058 = distinct !DILexicalBlock(scope: !10841, file: !3, line: 4356, column: 2)
!11059 = !DILocation(line: 4359, column: 11, scope: !11057)
!11060 = !DILocalVariable(name: "false_edge", scope: !11057, file: !3, line: 4360, type: !2862)
!11061 = !DILocation(line: 4360, column: 11, scope: !11057)
!11062 = !DILocation(line: 4362, column: 43, scope: !11057)
!11063 = !DILocation(line: 4362, column: 6, scope: !11057)
!11064 = !DILocation(line: 4364, column: 11, scope: !11065)
!11065 = distinct !DILexicalBlock(scope: !11057, file: !3, line: 4364, column: 10)
!11066 = !DILocation(line: 4365, column: 3, scope: !11065)
!11067 = !DILocation(line: 4365, column: 7, scope: !11065)
!11068 = !DILocation(line: 4366, column: 3, scope: !11065)
!11069 = !DILocation(line: 4366, column: 8, scope: !11065)
!11070 = !DILocation(line: 4366, column: 19, scope: !11065)
!11071 = !DILocation(line: 4366, column: 25, scope: !11065)
!11072 = !DILocation(line: 4367, column: 3, scope: !11065)
!11073 = !DILocation(line: 4367, column: 8, scope: !11065)
!11074 = !DILocation(line: 4367, column: 20, scope: !11065)
!11075 = !DILocation(line: 4367, column: 26, scope: !11065)
!11076 = !DILocation(line: 4368, column: 3, scope: !11065)
!11077 = !DILocation(line: 4368, column: 7, scope: !11065)
!11078 = !DILocation(line: 4368, column: 18, scope: !11065)
!11079 = !DILocation(line: 4368, column: 24, scope: !11065)
!11080 = !DILocation(line: 4369, column: 3, scope: !11065)
!11081 = !DILocation(line: 4369, column: 7, scope: !11065)
!11082 = !DILocation(line: 4369, column: 19, scope: !11065)
!11083 = !DILocation(line: 4369, column: 25, scope: !11065)
!11084 = !DILocation(line: 4370, column: 3, scope: !11065)
!11085 = !DILocation(line: 4370, column: 6, scope: !11065)
!11086 = !DILocation(line: 4370, column: 29, scope: !11065)
!11087 = !DILocation(line: 4364, column: 10, scope: !11057)
!11088 = !DILocation(line: 4373, column: 10, scope: !11089)
!11089 = distinct !DILexicalBlock(scope: !11065, file: !3, line: 4371, column: 8)
!11090 = !DILocation(line: 4373, column: 14, scope: !11089)
!11091 = !DILocation(line: 4372, column: 3, scope: !11089)
!11092 = !DILocation(line: 4374, column: 7, scope: !11089)
!11093 = !DILocation(line: 4375, column: 8, scope: !11089)
!11094 = !DILocation(line: 4377, column: 4, scope: !11058)
!11095 = !DILocation(line: 4380, column: 23, scope: !11096)
!11096 = distinct !DILexicalBlock(scope: !11058, file: !3, line: 4380, column: 8)
!11097 = !DILocation(line: 4380, column: 8, scope: !11096)
!11098 = !DILocation(line: 4380, column: 8, scope: !11058)
!11099 = !DILocation(line: 4382, column: 48, scope: !11100)
!11100 = distinct !DILexicalBlock(scope: !11096, file: !3, line: 4381, column: 6)
!11101 = !DILocation(line: 4382, column: 52, scope: !11100)
!11102 = !DILocation(line: 4382, column: 8, scope: !11100)
!11103 = !DILocation(line: 4383, column: 12, scope: !11100)
!11104 = !DILocation(line: 4384, column: 6, scope: !11100)
!11105 = !DILocation(line: 4389, column: 8, scope: !11106)
!11106 = distinct !DILexicalBlock(scope: !11107, file: !3, line: 4389, column: 8)
!11107 = distinct !DILexicalBlock(scope: !11096, file: !3, line: 4386, column: 6)
!11108 = !DILocation(line: 4389, column: 8, scope: !11109)
!11109 = distinct !DILexicalBlock(scope: !11106, file: !3, line: 4389, column: 8)
!11110 = !DILocation(line: 4390, column: 8, scope: !11111)
!11111 = distinct !DILexicalBlock(scope: !11109, file: !3, line: 4390, column: 7)
!11112 = !DILocation(line: 4390, column: 11, scope: !11111)
!11113 = !DILocation(line: 4390, column: 17, scope: !11111)
!11114 = !DILocation(line: 4392, column: 7, scope: !11111)
!11115 = !DILocation(line: 4392, column: 12, scope: !11111)
!11116 = !DILocation(line: 4392, column: 15, scope: !11111)
!11117 = !DILocation(line: 4392, column: 21, scope: !11111)
!11118 = !DILocation(line: 4390, column: 7, scope: !11109)
!11119 = !DILocation(line: 4395, column: 7, scope: !11120)
!11120 = distinct !DILexicalBlock(scope: !11111, file: !3, line: 4393, column: 5)
!11121 = !DILocation(line: 4395, column: 11, scope: !11120)
!11122 = !DILocation(line: 4394, column: 7, scope: !11120)
!11123 = !DILocation(line: 4396, column: 11, scope: !11120)
!11124 = !DILocation(line: 4397, column: 5, scope: !11120)
!11125 = !DILocation(line: 4392, column: 36, scope: !11111)
!11126 = distinct !{!11126, !11105, !11127}
!11127 = !DILocation(line: 4397, column: 5, scope: !11106)
!11128 = !DILocation(line: 4399, column: 4, scope: !11058)
!11129 = !DILocation(line: 4402, column: 24, scope: !11130)
!11130 = distinct !DILexicalBlock(scope: !11058, file: !3, line: 4402, column: 8)
!11131 = !DILocation(line: 4402, column: 9, scope: !11130)
!11132 = !DILocation(line: 4403, column: 8, scope: !11130)
!11133 = !DILocation(line: 4403, column: 30, scope: !11130)
!11134 = !DILocation(line: 4403, column: 12, scope: !11130)
!11135 = !DILocation(line: 4403, column: 35, scope: !11130)
!11136 = !DILocation(line: 4404, column: 5, scope: !11130)
!11137 = !DILocation(line: 4402, column: 8, scope: !11058)
!11138 = !DILocation(line: 4407, column: 60, scope: !11139)
!11139 = distinct !DILexicalBlock(scope: !11130, file: !3, line: 4406, column: 6)
!11140 = !DILocation(line: 4407, column: 64, scope: !11139)
!11141 = !DILocation(line: 4407, column: 8, scope: !11139)
!11142 = !DILocation(line: 4408, column: 12, scope: !11139)
!11143 = !DILocation(line: 4409, column: 6, scope: !11139)
!11144 = !DILocation(line: 4410, column: 21, scope: !11145)
!11145 = distinct !DILexicalBlock(scope: !11058, file: !3, line: 4410, column: 8)
!11146 = !DILocation(line: 4410, column: 8, scope: !11145)
!11147 = !DILocation(line: 4410, column: 28, scope: !11145)
!11148 = !DILocation(line: 4410, column: 25, scope: !11145)
!11149 = !DILocation(line: 4410, column: 8, scope: !11058)
!11150 = !DILocation(line: 4413, column: 8, scope: !11151)
!11151 = distinct !DILexicalBlock(scope: !11145, file: !3, line: 4411, column: 6)
!11152 = !DILocation(line: 4413, column: 12, scope: !11151)
!11153 = !DILocation(line: 4412, column: 8, scope: !11151)
!11154 = !DILocation(line: 4414, column: 12, scope: !11151)
!11155 = !DILocation(line: 4415, column: 6, scope: !11151)
!11156 = !DILocation(line: 4416, column: 4, scope: !11058)
!11157 = !DILocalVariable(name: "prev", scope: !11158, file: !3, line: 4420, type: !2553)
!11158 = distinct !DILexicalBlock(scope: !11058, file: !3, line: 4419, column: 4)
!11159 = !DILocation(line: 4420, column: 11, scope: !11158)
!11160 = !DILocalVariable(name: "e", scope: !11158, file: !3, line: 4421, type: !2862)
!11161 = !DILocation(line: 4421, column: 11, scope: !11158)
!11162 = !DILocalVariable(name: "i", scope: !11158, file: !3, line: 4422, type: !3027)
!11163 = !DILocation(line: 4422, column: 13, scope: !11158)
!11164 = !DILocalVariable(name: "n", scope: !11158, file: !3, line: 4422, type: !3027)
!11165 = !DILocation(line: 4422, column: 16, scope: !11158)
!11166 = !DILocation(line: 4424, column: 36, scope: !11158)
!11167 = !DILocation(line: 4424, column: 10, scope: !11158)
!11168 = !DILocation(line: 4424, column: 8, scope: !11158)
!11169 = !DILocation(line: 4427, column: 13, scope: !11170)
!11170 = distinct !DILexicalBlock(scope: !11158, file: !3, line: 4427, column: 6)
!11171 = !DILocation(line: 4427, column: 11, scope: !11170)
!11172 = !DILocation(line: 4427, column: 18, scope: !11173)
!11173 = distinct !DILexicalBlock(scope: !11170, file: !3, line: 4427, column: 6)
!11174 = !DILocation(line: 4427, column: 22, scope: !11173)
!11175 = !DILocation(line: 4427, column: 20, scope: !11173)
!11176 = !DILocation(line: 4427, column: 6, scope: !11170)
!11177 = !DILocalVariable(name: "lab", scope: !11178, file: !3, line: 4429, type: !2553)
!11178 = distinct !DILexicalBlock(scope: !11173, file: !3, line: 4428, column: 8)
!11179 = !DILocation(line: 4429, column: 8, scope: !11178)
!11180 = !DILocation(line: 4429, column: 14, scope: !11178)
!11181 = !DILocalVariable(name: "label_bb", scope: !11178, file: !3, line: 4430, type: !3523)
!11182 = !DILocation(line: 4430, column: 15, scope: !11178)
!11183 = !DILocation(line: 4430, column: 26, scope: !11178)
!11184 = !DILocation(line: 4431, column: 3, scope: !11178)
!11185 = !DILocation(line: 4432, column: 3, scope: !11178)
!11186 = !DILocation(line: 4432, column: 13, scope: !11178)
!11187 = !DILocation(line: 4432, column: 17, scope: !11178)
!11188 = !DILocation(line: 4433, column: 8, scope: !11178)
!11189 = !DILocation(line: 4427, column: 25, scope: !11173)
!11190 = !DILocation(line: 4427, column: 6, scope: !11173)
!11191 = distinct !{!11191, !11176, !11192}
!11192 = !DILocation(line: 4433, column: 8, scope: !11170)
!11193 = !DILocation(line: 4436, column: 34, scope: !11158)
!11194 = !DILocation(line: 4436, column: 13, scope: !11158)
!11195 = !DILocation(line: 4436, column: 11, scope: !11158)
!11196 = !DILocation(line: 4437, column: 13, scope: !11197)
!11197 = distinct !DILexicalBlock(scope: !11158, file: !3, line: 4437, column: 6)
!11198 = !DILocation(line: 4437, column: 11, scope: !11197)
!11199 = !DILocation(line: 4437, column: 18, scope: !11200)
!11200 = distinct !DILexicalBlock(scope: !11197, file: !3, line: 4437, column: 6)
!11201 = !DILocation(line: 4437, column: 22, scope: !11200)
!11202 = !DILocation(line: 4437, column: 20, scope: !11200)
!11203 = !DILocation(line: 4437, column: 6, scope: !11197)
!11204 = !DILocalVariable(name: "c", scope: !11205, file: !3, line: 4439, type: !2553)
!11205 = distinct !DILexicalBlock(scope: !11200, file: !3, line: 4438, column: 8)
!11206 = !DILocation(line: 4439, column: 8, scope: !11205)
!11207 = !DILocation(line: 4439, column: 33, scope: !11205)
!11208 = !DILocation(line: 4439, column: 39, scope: !11205)
!11209 = !DILocation(line: 4439, column: 12, scope: !11205)
!11210 = !DILocation(line: 4440, column: 8, scope: !11211)
!11211 = distinct !DILexicalBlock(scope: !11205, file: !3, line: 4440, column: 7)
!11212 = !DILocation(line: 4440, column: 7, scope: !11205)
!11213 = !DILocation(line: 4442, column: 7, scope: !11214)
!11214 = distinct !DILexicalBlock(scope: !11211, file: !3, line: 4441, column: 5)
!11215 = !DILocation(line: 4444, column: 11, scope: !11214)
!11216 = !DILocation(line: 4445, column: 7, scope: !11214)
!11217 = !DILocation(line: 4447, column: 7, scope: !11218)
!11218 = distinct !DILexicalBlock(scope: !11205, file: !3, line: 4447, column: 7)
!11219 = !DILocation(line: 4448, column: 7, scope: !11218)
!11220 = !DILocation(line: 4448, column: 28, scope: !11218)
!11221 = !DILocation(line: 4448, column: 45, scope: !11218)
!11222 = !DILocation(line: 4448, column: 11, scope: !11218)
!11223 = !DILocation(line: 4447, column: 7, scope: !11205)
!11224 = !DILocation(line: 4450, column: 7, scope: !11225)
!11225 = distinct !DILexicalBlock(scope: !11218, file: !3, line: 4449, column: 5)
!11226 = !DILocation(line: 4451, column: 27, scope: !11225)
!11227 = !DILocation(line: 4451, column: 35, scope: !11225)
!11228 = !DILocation(line: 4451, column: 7, scope: !11225)
!11229 = !DILocation(line: 4452, column: 16, scope: !11225)
!11230 = !DILocation(line: 4452, column: 7, scope: !11225)
!11231 = !DILocation(line: 4453, column: 27, scope: !11225)
!11232 = !DILocation(line: 4453, column: 35, scope: !11225)
!11233 = !DILocation(line: 4453, column: 7, scope: !11225)
!11234 = !DILocation(line: 4454, column: 16, scope: !11225)
!11235 = !DILocation(line: 4454, column: 7, scope: !11225)
!11236 = !DILocation(line: 4455, column: 11, scope: !11225)
!11237 = !DILocation(line: 4456, column: 5, scope: !11225)
!11238 = !DILocation(line: 4457, column: 10, scope: !11205)
!11239 = !DILocation(line: 4457, column: 8, scope: !11205)
!11240 = !DILocation(line: 4458, column: 8, scope: !11205)
!11241 = !DILocation(line: 4437, column: 25, scope: !11200)
!11242 = !DILocation(line: 4437, column: 6, scope: !11200)
!11243 = distinct !{!11243, !11203, !11244}
!11244 = !DILocation(line: 4458, column: 8, scope: !11197)
!11245 = !DILocation(line: 4463, column: 6, scope: !11246)
!11246 = distinct !DILexicalBlock(scope: !11158, file: !3, line: 4463, column: 6)
!11247 = !DILocation(line: 4463, column: 6, scope: !11248)
!11248 = distinct !DILexicalBlock(scope: !11246, file: !3, line: 4463, column: 6)
!11249 = !DILocation(line: 4465, column: 8, scope: !11250)
!11250 = distinct !DILexicalBlock(scope: !11251, file: !3, line: 4465, column: 7)
!11251 = distinct !DILexicalBlock(scope: !11248, file: !3, line: 4464, column: 8)
!11252 = !DILocation(line: 4465, column: 11, scope: !11250)
!11253 = !DILocation(line: 4465, column: 17, scope: !11250)
!11254 = !DILocation(line: 4465, column: 7, scope: !11251)
!11255 = !DILocation(line: 4468, column: 7, scope: !11256)
!11256 = distinct !DILexicalBlock(scope: !11250, file: !3, line: 4466, column: 5)
!11257 = !DILocation(line: 4468, column: 11, scope: !11256)
!11258 = !DILocation(line: 4468, column: 18, scope: !11256)
!11259 = !DILocation(line: 4468, column: 21, scope: !11256)
!11260 = !DILocation(line: 4468, column: 27, scope: !11256)
!11261 = !DILocation(line: 4467, column: 7, scope: !11256)
!11262 = !DILocation(line: 4469, column: 11, scope: !11256)
!11263 = !DILocation(line: 4470, column: 5, scope: !11256)
!11264 = !DILocation(line: 4472, column: 3, scope: !11251)
!11265 = !DILocation(line: 4472, column: 6, scope: !11251)
!11266 = !DILocation(line: 4472, column: 12, scope: !11251)
!11267 = !DILocation(line: 4472, column: 16, scope: !11251)
!11268 = !DILocation(line: 4473, column: 8, scope: !11269)
!11269 = distinct !DILexicalBlock(scope: !11251, file: !3, line: 4473, column: 7)
!11270 = !DILocation(line: 4473, column: 11, scope: !11269)
!11271 = !DILocation(line: 4473, column: 17, scope: !11269)
!11272 = !DILocation(line: 4473, column: 7, scope: !11251)
!11273 = !DILocation(line: 4477, column: 7, scope: !11274)
!11274 = distinct !DILexicalBlock(scope: !11269, file: !3, line: 4475, column: 5)
!11275 = !DILocation(line: 4477, column: 11, scope: !11274)
!11276 = !DILocation(line: 4476, column: 7, scope: !11274)
!11277 = !DILocation(line: 4478, column: 11, scope: !11274)
!11278 = !DILocation(line: 4479, column: 5, scope: !11274)
!11279 = !DILocation(line: 4480, column: 8, scope: !11251)
!11280 = distinct !{!11280, !11245, !11281}
!11281 = !DILocation(line: 4480, column: 8, scope: !11246)
!11282 = !DILocation(line: 4483, column: 13, scope: !11283)
!11283 = distinct !DILexicalBlock(scope: !11158, file: !3, line: 4483, column: 6)
!11284 = !DILocation(line: 4483, column: 11, scope: !11283)
!11285 = !DILocation(line: 4483, column: 18, scope: !11286)
!11286 = distinct !DILexicalBlock(scope: !11283, file: !3, line: 4483, column: 6)
!11287 = !DILocation(line: 4483, column: 22, scope: !11286)
!11288 = !DILocation(line: 4483, column: 20, scope: !11286)
!11289 = !DILocation(line: 4483, column: 6, scope: !11283)
!11290 = !DILocalVariable(name: "lab", scope: !11291, file: !3, line: 4485, type: !2553)
!11291 = distinct !DILexicalBlock(scope: !11286, file: !3, line: 4484, column: 8)
!11292 = !DILocation(line: 4485, column: 8, scope: !11291)
!11293 = !DILocation(line: 4485, column: 14, scope: !11291)
!11294 = !DILocalVariable(name: "label_bb", scope: !11291, file: !3, line: 4486, type: !3523)
!11295 = !DILocation(line: 4486, column: 15, scope: !11291)
!11296 = !DILocation(line: 4486, column: 26, scope: !11291)
!11297 = !DILocation(line: 4488, column: 7, scope: !11298)
!11298 = distinct !DILexicalBlock(scope: !11291, file: !3, line: 4488, column: 7)
!11299 = !DILocation(line: 4488, column: 17, scope: !11298)
!11300 = !DILocation(line: 4488, column: 21, scope: !11298)
!11301 = !DILocation(line: 4488, column: 7, scope: !11291)
!11302 = !DILocation(line: 4490, column: 37, scope: !11303)
!11303 = distinct !DILexicalBlock(scope: !11298, file: !3, line: 4489, column: 5)
!11304 = !DILocation(line: 4490, column: 41, scope: !11303)
!11305 = !DILocation(line: 4490, column: 48, scope: !11303)
!11306 = !DILocation(line: 4490, column: 58, scope: !11303)
!11307 = !DILocation(line: 4490, column: 7, scope: !11303)
!11308 = !DILocation(line: 4491, column: 11, scope: !11303)
!11309 = !DILocation(line: 4492, column: 5, scope: !11303)
!11310 = !DILocation(line: 4493, column: 8, scope: !11291)
!11311 = !DILocation(line: 4483, column: 25, scope: !11286)
!11312 = !DILocation(line: 4483, column: 6, scope: !11286)
!11313 = distinct !{!11313, !11289, !11314}
!11314 = !DILocation(line: 4493, column: 8, scope: !11283)
!11315 = !DILocation(line: 4495, column: 6, scope: !11316)
!11316 = distinct !DILexicalBlock(scope: !11158, file: !3, line: 4495, column: 6)
!11317 = !DILocation(line: 4495, column: 6, scope: !11318)
!11318 = distinct !DILexicalBlock(scope: !11316, file: !3, line: 4495, column: 6)
!11319 = !DILocation(line: 4496, column: 8, scope: !11318)
!11320 = !DILocation(line: 4496, column: 11, scope: !11318)
!11321 = !DILocation(line: 4496, column: 17, scope: !11318)
!11322 = !DILocation(line: 4496, column: 21, scope: !11318)
!11323 = distinct !{!11323, !11315, !11324}
!11324 = !DILocation(line: 4496, column: 31, scope: !11316)
!11325 = !DILocation(line: 4498, column: 4, scope: !11058)
!11326 = !DILocation(line: 4501, column: 36, scope: !11058)
!11327 = !DILocation(line: 4501, column: 11, scope: !11058)
!11328 = !DILocation(line: 4501, column: 8, scope: !11058)
!11329 = !DILocation(line: 4502, column: 4, scope: !11058)
!11330 = !DILocation(line: 4505, column: 4, scope: !11058)
!11331 = !DILocation(line: 4507, column: 5, scope: !10841)
!11332 = distinct !{!11332, !10836, !11333}
!11333 = !DILocation(line: 4507, column: 5, scope: !10837)
!11334 = !DILocation(line: 4509, column: 7, scope: !11335)
!11335 = distinct !DILexicalBlock(scope: !10786, file: !3, line: 4509, column: 7)
!11336 = !DILocation(line: 4509, column: 39, scope: !11335)
!11337 = !DILocation(line: 4509, column: 7, scope: !10786)
!11338 = !DILocation(line: 4510, column: 5, scope: !11335)
!11339 = !DILocation(line: 4512, column: 10, scope: !10786)
!11340 = !DILocation(line: 4512, column: 3, scope: !10786)
!11341 = distinct !DISubprogram(name: "create_bb", scope: !3, file: !3, line: 427, type: !4199, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!11342 = !DILocalVariable(name: "h", arg: 1, scope: !11341, file: !3, line: 427, type: !2547)
!11343 = !DILocation(line: 427, column: 18, scope: !11341)
!11344 = !DILocalVariable(name: "e", arg: 2, scope: !11341, file: !3, line: 427, type: !2547)
!11345 = !DILocation(line: 427, column: 27, scope: !11341)
!11346 = !DILocalVariable(name: "after", arg: 3, scope: !11341, file: !3, line: 427, type: !3523)
!11347 = !DILocation(line: 427, column: 42, scope: !11341)
!11348 = !DILocalVariable(name: "bb", scope: !11341, file: !3, line: 429, type: !3523)
!11349 = !DILocation(line: 429, column: 15, scope: !11341)
!11350 = !DILocation(line: 431, column: 3, scope: !11341)
!11351 = !DILocation(line: 436, column: 8, scope: !11341)
!11352 = !DILocation(line: 436, column: 6, scope: !11341)
!11353 = !DILocation(line: 438, column: 15, scope: !11341)
!11354 = !DILocation(line: 438, column: 3, scope: !11341)
!11355 = !DILocation(line: 438, column: 7, scope: !11341)
!11356 = !DILocation(line: 438, column: 13, scope: !11341)
!11357 = !DILocation(line: 439, column: 3, scope: !11341)
!11358 = !DILocation(line: 439, column: 7, scope: !11341)
!11359 = !DILocation(line: 439, column: 13, scope: !11341)
!11360 = !DILocation(line: 440, column: 19, scope: !11341)
!11361 = !DILocation(line: 440, column: 3, scope: !11341)
!11362 = !DILocation(line: 440, column: 7, scope: !11341)
!11363 = !DILocation(line: 440, column: 10, scope: !11341)
!11364 = !DILocation(line: 440, column: 17, scope: !11341)
!11365 = !DILocation(line: 441, column: 15, scope: !11341)
!11366 = !DILocation(line: 441, column: 19, scope: !11341)
!11367 = !DILocation(line: 441, column: 36, scope: !11341)
!11368 = !DILocation(line: 441, column: 23, scope: !11341)
!11369 = !DILocation(line: 441, column: 40, scope: !11341)
!11370 = !DILocation(line: 441, column: 3, scope: !11341)
!11371 = !DILocation(line: 444, column: 15, scope: !11341)
!11372 = !DILocation(line: 444, column: 19, scope: !11341)
!11373 = !DILocation(line: 444, column: 3, scope: !11341)
!11374 = !DILocation(line: 447, column: 16, scope: !11375)
!11375 = distinct !DILexicalBlock(scope: !11341, file: !3, line: 447, column: 7)
!11376 = !DILocation(line: 447, column: 7, scope: !11375)
!11377 = !DILocation(line: 447, column: 36, scope: !11375)
!11378 = !DILocation(line: 447, column: 33, scope: !11375)
!11379 = !DILocation(line: 447, column: 7, scope: !11341)
!11380 = !DILocalVariable(name: "new_size", scope: !11381, file: !3, line: 449, type: !3027)
!11381 = distinct !DILexicalBlock(scope: !11375, file: !3, line: 448, column: 5)
!11382 = !DILocation(line: 449, column: 14, scope: !11381)
!11383 = !DILocation(line: 449, column: 25, scope: !11381)
!11384 = !DILocation(line: 449, column: 45, scope: !11381)
!11385 = !DILocation(line: 449, column: 62, scope: !11381)
!11386 = !DILocation(line: 449, column: 67, scope: !11381)
!11387 = !DILocation(line: 449, column: 42, scope: !11381)
!11388 = !DILocation(line: 450, column: 7, scope: !11381)
!11389 = !DILocation(line: 451, column: 5, scope: !11381)
!11390 = !DILocation(line: 454, column: 3, scope: !11341)
!11391 = !DILocation(line: 456, column: 3, scope: !11341)
!11392 = !DILocation(line: 456, column: 17, scope: !11341)
!11393 = !DILocation(line: 457, column: 3, scope: !11341)
!11394 = !DILocation(line: 457, column: 19, scope: !11341)
!11395 = !DILocation(line: 459, column: 10, scope: !11341)
!11396 = !DILocation(line: 459, column: 3, scope: !11341)
!11397 = distinct !DISubprogram(name: "gimple_redirect_edge_and_branch", scope: !3, file: !3, line: 4635, type: !4203, scopeLine: 4636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!11398 = !DILocalVariable(name: "e", arg: 1, scope: !11397, file: !3, line: 4635, type: !2862)
!11399 = !DILocation(line: 4635, column: 39, scope: !11397)
!11400 = !DILocalVariable(name: "dest", arg: 2, scope: !11397, file: !3, line: 4635, type: !3523)
!11401 = !DILocation(line: 4635, column: 54, scope: !11397)
!11402 = !DILocalVariable(name: "bb", scope: !11397, file: !3, line: 4637, type: !3523)
!11403 = !DILocation(line: 4637, column: 15, scope: !11397)
!11404 = !DILocation(line: 4637, column: 20, scope: !11397)
!11405 = !DILocation(line: 4637, column: 23, scope: !11397)
!11406 = !DILocalVariable(name: "gsi", scope: !11397, file: !3, line: 4638, type: !4074)
!11407 = !DILocation(line: 4638, column: 24, scope: !11397)
!11408 = !DILocalVariable(name: "ret", scope: !11397, file: !3, line: 4639, type: !2862)
!11409 = !DILocation(line: 4639, column: 8, scope: !11397)
!11410 = !DILocalVariable(name: "stmt", scope: !11397, file: !3, line: 4640, type: !2882)
!11411 = !DILocation(line: 4640, column: 10, scope: !11397)
!11412 = !DILocation(line: 4642, column: 7, scope: !11413)
!11413 = distinct !DILexicalBlock(scope: !11397, file: !3, line: 4642, column: 7)
!11414 = !DILocation(line: 4642, column: 10, scope: !11413)
!11415 = !DILocation(line: 4642, column: 16, scope: !11413)
!11416 = !DILocation(line: 4642, column: 7, scope: !11397)
!11417 = !DILocation(line: 4643, column: 5, scope: !11413)
!11418 = !DILocation(line: 4645, column: 7, scope: !11419)
!11419 = distinct !DILexicalBlock(scope: !11397, file: !3, line: 4645, column: 7)
!11420 = !DILocation(line: 4645, column: 10, scope: !11419)
!11421 = !DILocation(line: 4645, column: 18, scope: !11419)
!11422 = !DILocation(line: 4645, column: 15, scope: !11419)
!11423 = !DILocation(line: 4645, column: 7, scope: !11397)
!11424 = !DILocation(line: 4646, column: 5, scope: !11419)
!11425 = !DILocation(line: 4648, column: 7, scope: !11426)
!11426 = distinct !DILexicalBlock(scope: !11397, file: !3, line: 4648, column: 7)
!11427 = !DILocation(line: 4648, column: 10, scope: !11426)
!11428 = !DILocation(line: 4648, column: 16, scope: !11426)
!11429 = !DILocation(line: 4648, column: 7, scope: !11397)
!11430 = !DILocation(line: 4649, column: 30, scope: !11426)
!11431 = !DILocation(line: 4649, column: 33, scope: !11426)
!11432 = !DILocation(line: 4649, column: 12, scope: !11426)
!11433 = !DILocation(line: 4649, column: 5, scope: !11426)
!11434 = !DILocation(line: 4651, column: 7, scope: !11435)
!11435 = distinct !DILexicalBlock(scope: !11397, file: !3, line: 4651, column: 7)
!11436 = !DILocation(line: 4651, column: 10, scope: !11435)
!11437 = !DILocation(line: 4651, column: 17, scope: !11435)
!11438 = !DILocation(line: 4651, column: 14, scope: !11435)
!11439 = !DILocation(line: 4651, column: 7, scope: !11397)
!11440 = !DILocation(line: 4653, column: 52, scope: !11441)
!11441 = distinct !DILexicalBlock(scope: !11435, file: !3, line: 4652, column: 5)
!11442 = !DILocation(line: 4653, column: 55, scope: !11441)
!11443 = !DILocation(line: 4653, column: 13, scope: !11441)
!11444 = !DILocation(line: 4653, column: 11, scope: !11441)
!11445 = !DILocation(line: 4654, column: 11, scope: !11446)
!11446 = distinct !DILexicalBlock(scope: !11441, file: !3, line: 4654, column: 11)
!11447 = !DILocation(line: 4654, column: 11, scope: !11441)
!11448 = !DILocation(line: 4655, column: 9, scope: !11446)
!11449 = !DILocation(line: 4655, column: 2, scope: !11446)
!11450 = !DILocation(line: 4656, column: 5, scope: !11441)
!11451 = !DILocation(line: 4658, column: 22, scope: !11397)
!11452 = !DILocation(line: 4658, column: 9, scope: !11397)
!11453 = !DILocation(line: 4659, column: 10, scope: !11397)
!11454 = !DILocation(line: 4659, column: 35, scope: !11397)
!11455 = !DILocation(line: 4659, column: 8, scope: !11397)
!11456 = !DILocation(line: 4661, column: 11, scope: !11397)
!11457 = !DILocation(line: 4661, column: 31, scope: !11397)
!11458 = !DILocation(line: 4661, column: 18, scope: !11397)
!11459 = !DILocation(line: 4661, column: 3, scope: !11397)
!11460 = !DILocation(line: 4665, column: 7, scope: !11461)
!11461 = distinct !DILexicalBlock(scope: !11397, file: !3, line: 4662, column: 5)
!11462 = !DILocation(line: 4670, column: 7, scope: !11461)
!11463 = !DILocalVariable(name: "label", scope: !11464, file: !3, line: 4674, type: !2553)
!11464 = distinct !DILexicalBlock(scope: !11461, file: !3, line: 4673, column: 7)
!11465 = !DILocation(line: 4674, column: 7, scope: !11464)
!11466 = !DILocation(line: 4674, column: 35, scope: !11464)
!11467 = !DILocation(line: 4674, column: 15, scope: !11464)
!11468 = !DILocalVariable(name: "cases", scope: !11464, file: !3, line: 4675, type: !2553)
!11469 = !DILocation(line: 4675, column: 14, scope: !11464)
!11470 = !DILocation(line: 4675, column: 42, scope: !11464)
!11471 = !DILocation(line: 4675, column: 45, scope: !11464)
!11472 = !DILocation(line: 4675, column: 22, scope: !11464)
!11473 = !DILocation(line: 4679, column: 6, scope: !11474)
!11474 = distinct !DILexicalBlock(scope: !11464, file: !3, line: 4679, column: 6)
!11475 = !DILocation(line: 4679, column: 6, scope: !11464)
!11476 = !DILocalVariable(name: "e2", scope: !11477, file: !3, line: 4681, type: !2862)
!11477 = distinct !DILexicalBlock(scope: !11474, file: !3, line: 4680, column: 4)
!11478 = !DILocation(line: 4681, column: 11, scope: !11477)
!11479 = !DILocation(line: 4681, column: 27, scope: !11477)
!11480 = !DILocation(line: 4681, column: 30, scope: !11477)
!11481 = !DILocation(line: 4681, column: 35, scope: !11477)
!11482 = !DILocation(line: 4681, column: 16, scope: !11477)
!11483 = !DILocalVariable(name: "last", scope: !11477, file: !3, line: 4682, type: !2553)
!11484 = !DILocation(line: 4682, column: 11, scope: !11477)
!11485 = !DILocalVariable(name: "first", scope: !11477, file: !3, line: 4682, type: !2553)
!11486 = !DILocation(line: 4682, column: 17, scope: !11477)
!11487 = !DILocation(line: 4684, column: 14, scope: !11477)
!11488 = !DILocation(line: 4684, column: 12, scope: !11477)
!11489 = !DILocation(line: 4685, column: 6, scope: !11477)
!11490 = !DILocation(line: 4685, column: 13, scope: !11477)
!11491 = !DILocation(line: 4687, column: 10, scope: !11492)
!11492 = distinct !DILexicalBlock(scope: !11477, file: !3, line: 4686, column: 8)
!11493 = !DILocation(line: 4687, column: 8, scope: !11492)
!11494 = !DILocation(line: 4688, column: 24, scope: !11492)
!11495 = !DILocation(line: 4688, column: 3, scope: !11492)
!11496 = !DILocation(line: 4688, column: 22, scope: !11492)
!11497 = !DILocation(line: 4689, column: 11, scope: !11492)
!11498 = !DILocation(line: 4689, column: 9, scope: !11492)
!11499 = distinct !{!11499, !11489, !11500}
!11500 = !DILocation(line: 4690, column: 8, scope: !11477)
!11501 = !DILocation(line: 4694, column: 10, scope: !11502)
!11502 = distinct !DILexicalBlock(scope: !11477, file: !3, line: 4694, column: 10)
!11503 = !DILocation(line: 4694, column: 10, scope: !11477)
!11504 = !DILocalVariable(name: "cases2", scope: !11505, file: !3, line: 4696, type: !2553)
!11505 = distinct !DILexicalBlock(scope: !11502, file: !3, line: 4695, column: 8)
!11506 = !DILocation(line: 4696, column: 8, scope: !11505)
!11507 = !DILocation(line: 4696, column: 37, scope: !11505)
!11508 = !DILocation(line: 4696, column: 41, scope: !11505)
!11509 = !DILocation(line: 4696, column: 17, scope: !11505)
!11510 = !DILocation(line: 4698, column: 23, scope: !11505)
!11511 = !DILocation(line: 4698, column: 3, scope: !11505)
!11512 = !DILocation(line: 4698, column: 21, scope: !11505)
!11513 = !DILocation(line: 4699, column: 25, scope: !11505)
!11514 = !DILocation(line: 4699, column: 3, scope: !11505)
!11515 = !DILocation(line: 4699, column: 23, scope: !11505)
!11516 = !DILocation(line: 4700, column: 8, scope: !11505)
!11517 = !DILocation(line: 4701, column: 4, scope: !11477)
!11518 = !DILocalVariable(name: "i", scope: !11519, file: !3, line: 4704, type: !3027)
!11519 = distinct !DILexicalBlock(scope: !11474, file: !3, line: 4703, column: 4)
!11520 = !DILocation(line: 4704, column: 13, scope: !11519)
!11521 = !DILocalVariable(name: "n", scope: !11519, file: !3, line: 4704, type: !3027)
!11522 = !DILocation(line: 4704, column: 16, scope: !11519)
!11523 = !DILocation(line: 4704, column: 46, scope: !11519)
!11524 = !DILocation(line: 4704, column: 20, scope: !11519)
!11525 = !DILocation(line: 4706, column: 13, scope: !11526)
!11526 = distinct !DILexicalBlock(scope: !11519, file: !3, line: 4706, column: 6)
!11527 = !DILocation(line: 4706, column: 11, scope: !11526)
!11528 = !DILocation(line: 4706, column: 18, scope: !11529)
!11529 = distinct !DILexicalBlock(scope: !11526, file: !3, line: 4706, column: 6)
!11530 = !DILocation(line: 4706, column: 22, scope: !11529)
!11531 = !DILocation(line: 4706, column: 20, scope: !11529)
!11532 = !DILocation(line: 4706, column: 6, scope: !11526)
!11533 = !DILocalVariable(name: "elt", scope: !11534, file: !3, line: 4708, type: !2553)
!11534 = distinct !DILexicalBlock(scope: !11529, file: !3, line: 4707, column: 8)
!11535 = !DILocation(line: 4708, column: 8, scope: !11534)
!11536 = !DILocation(line: 4708, column: 35, scope: !11534)
!11537 = !DILocation(line: 4708, column: 41, scope: !11534)
!11538 = !DILocation(line: 4708, column: 14, scope: !11534)
!11539 = !DILocation(line: 4709, column: 7, scope: !11540)
!11540 = distinct !DILexicalBlock(scope: !11534, file: !3, line: 4709, column: 7)
!11541 = !DILocation(line: 4709, column: 44, scope: !11540)
!11542 = !DILocation(line: 4709, column: 47, scope: !11540)
!11543 = !DILocation(line: 4709, column: 41, scope: !11540)
!11544 = !DILocation(line: 4709, column: 7, scope: !11534)
!11545 = !DILocation(line: 4710, column: 24, scope: !11540)
!11546 = !DILocation(line: 4710, column: 5, scope: !11540)
!11547 = !DILocation(line: 4710, column: 22, scope: !11540)
!11548 = !DILocation(line: 4711, column: 8, scope: !11534)
!11549 = !DILocation(line: 4706, column: 26, scope: !11529)
!11550 = !DILocation(line: 4706, column: 6, scope: !11529)
!11551 = distinct !{!11551, !11532, !11552}
!11552 = !DILocation(line: 4711, column: 8, scope: !11526)
!11553 = !DILocation(line: 4714, column: 7, scope: !11461)
!11554 = !DILocalVariable(name: "i", scope: !11555, file: !3, line: 4718, type: !2548)
!11555 = distinct !DILexicalBlock(scope: !11461, file: !3, line: 4717, column: 7)
!11556 = !DILocation(line: 4718, column: 6, scope: !11555)
!11557 = !DILocalVariable(name: "n", scope: !11555, file: !3, line: 4718, type: !2548)
!11558 = !DILocation(line: 4718, column: 9, scope: !11555)
!11559 = !DILocation(line: 4718, column: 33, scope: !11555)
!11560 = !DILocation(line: 4718, column: 13, scope: !11555)
!11561 = !DILocalVariable(name: "label", scope: !11555, file: !3, line: 4719, type: !2553)
!11562 = !DILocation(line: 4719, column: 7, scope: !11555)
!11563 = !DILocation(line: 4721, column: 9, scope: !11564)
!11564 = distinct !DILexicalBlock(scope: !11555, file: !3, line: 4721, column: 2)
!11565 = !DILocation(line: 4721, column: 7, scope: !11564)
!11566 = !DILocation(line: 4721, column: 14, scope: !11567)
!11567 = distinct !DILexicalBlock(scope: !11564, file: !3, line: 4721, column: 2)
!11568 = !DILocation(line: 4721, column: 18, scope: !11567)
!11569 = !DILocation(line: 4721, column: 16, scope: !11567)
!11570 = !DILocation(line: 4721, column: 2, scope: !11564)
!11571 = !DILocalVariable(name: "cons", scope: !11572, file: !3, line: 4723, type: !2553)
!11572 = distinct !DILexicalBlock(scope: !11567, file: !3, line: 4722, column: 4)
!11573 = !DILocation(line: 4723, column: 11, scope: !11572)
!11574 = !DILocation(line: 4723, column: 39, scope: !11572)
!11575 = !DILocation(line: 4723, column: 45, scope: !11572)
!11576 = !DILocation(line: 4723, column: 18, scope: !11572)
!11577 = !DILocation(line: 4724, column: 10, scope: !11578)
!11578 = distinct !DILexicalBlock(scope: !11572, file: !3, line: 4724, column: 10)
!11579 = !DILocation(line: 4724, column: 48, scope: !11578)
!11580 = !DILocation(line: 4724, column: 51, scope: !11578)
!11581 = !DILocation(line: 4724, column: 45, scope: !11578)
!11582 = !DILocation(line: 4724, column: 10, scope: !11572)
!11583 = !DILocation(line: 4726, column: 8, scope: !11584)
!11584 = distinct !DILexicalBlock(scope: !11585, file: !3, line: 4726, column: 7)
!11585 = distinct !DILexicalBlock(scope: !11578, file: !3, line: 4725, column: 8)
!11586 = !DILocation(line: 4726, column: 7, scope: !11585)
!11587 = !DILocation(line: 4727, column: 33, scope: !11584)
!11588 = !DILocation(line: 4727, column: 13, scope: !11584)
!11589 = !DILocation(line: 4727, column: 11, scope: !11584)
!11590 = !DILocation(line: 4727, column: 5, scope: !11584)
!11591 = !DILocation(line: 4728, column: 23, scope: !11585)
!11592 = !DILocation(line: 4728, column: 3, scope: !11585)
!11593 = !DILocation(line: 4728, column: 21, scope: !11585)
!11594 = !DILocation(line: 4729, column: 8, scope: !11585)
!11595 = !DILocation(line: 4730, column: 4, scope: !11572)
!11596 = !DILocation(line: 4721, column: 21, scope: !11567)
!11597 = !DILocation(line: 4721, column: 2, scope: !11567)
!11598 = distinct !{!11598, !11570, !11599}
!11599 = !DILocation(line: 4730, column: 4, scope: !11564)
!11600 = !DILocation(line: 4735, column: 2, scope: !11555)
!11601 = !DILocation(line: 4737, column: 7, scope: !11461)
!11602 = !DILocation(line: 4740, column: 7, scope: !11461)
!11603 = !DILocation(line: 4741, column: 7, scope: !11461)
!11604 = !DILocation(line: 4741, column: 10, scope: !11461)
!11605 = !DILocation(line: 4741, column: 16, scope: !11461)
!11606 = !DILocation(line: 4742, column: 7, scope: !11461)
!11607 = !DILocation(line: 4749, column: 7, scope: !11461)
!11608 = !DILocation(line: 4752, column: 13, scope: !11609)
!11609 = distinct !DILexicalBlock(scope: !11461, file: !3, line: 4752, column: 11)
!11610 = !DILocation(line: 4752, column: 16, scope: !11609)
!11611 = !DILocation(line: 4752, column: 22, scope: !11609)
!11612 = !DILocation(line: 4752, column: 11, scope: !11461)
!11613 = !DILocation(line: 4753, column: 29, scope: !11609)
!11614 = !DILocation(line: 4753, column: 35, scope: !11609)
!11615 = !DILocation(line: 4753, column: 38, scope: !11609)
!11616 = !DILocation(line: 4753, column: 2, scope: !11609)
!11617 = !DILocation(line: 4754, column: 7, scope: !11461)
!11618 = !DILocation(line: 4759, column: 7, scope: !11461)
!11619 = !DILocation(line: 4760, column: 7, scope: !11461)
!11620 = !DILocation(line: 4766, column: 26, scope: !11397)
!11621 = !DILocation(line: 4766, column: 29, scope: !11397)
!11622 = !DILocation(line: 4766, column: 7, scope: !11397)
!11623 = !DILocation(line: 4766, column: 5, scope: !11397)
!11624 = !DILocation(line: 4768, column: 10, scope: !11397)
!11625 = !DILocation(line: 4768, column: 3, scope: !11397)
!11626 = !DILocation(line: 4769, column: 1, scope: !11397)
!11627 = distinct !DISubprogram(name: "gimple_redirect_edge_and_branch_force", scope: !3, file: !3, line: 4786, type: !4207, scopeLine: 4787, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!11628 = !DILocalVariable(name: "e", arg: 1, scope: !11627, file: !3, line: 4786, type: !2862)
!11629 = !DILocation(line: 4786, column: 45, scope: !11627)
!11630 = !DILocalVariable(name: "dest", arg: 2, scope: !11627, file: !3, line: 4786, type: !3523)
!11631 = !DILocation(line: 4786, column: 60, scope: !11627)
!11632 = !DILocation(line: 4788, column: 40, scope: !11627)
!11633 = !DILocation(line: 4788, column: 43, scope: !11627)
!11634 = !DILocation(line: 4788, column: 7, scope: !11627)
!11635 = !DILocation(line: 4788, column: 5, scope: !11627)
!11636 = !DILocation(line: 4789, column: 3, scope: !11627)
!11637 = !DILocation(line: 4791, column: 3, scope: !11627)
!11638 = distinct !DISubprogram(name: "gimple_can_remove_branch_p", scope: !3, file: !3, line: 4775, type: !4211, scopeLine: 4776, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!11639 = !DILocalVariable(name: "e", arg: 1, scope: !11638, file: !3, line: 4775, type: !4213)
!11640 = !DILocation(line: 4775, column: 40, scope: !11638)
!11641 = !DILocation(line: 4777, column: 7, scope: !11642)
!11642 = distinct !DILexicalBlock(scope: !11638, file: !3, line: 4777, column: 7)
!11643 = !DILocation(line: 4777, column: 10, scope: !11642)
!11644 = !DILocation(line: 4777, column: 16, scope: !11642)
!11645 = !DILocation(line: 4777, column: 7, scope: !11638)
!11646 = !DILocation(line: 4778, column: 5, scope: !11642)
!11647 = !DILocation(line: 4780, column: 3, scope: !11638)
!11648 = !DILocation(line: 4781, column: 1, scope: !11638)
!11649 = distinct !DISubprogram(name: "remove_bb", scope: !3, file: !3, line: 1748, type: !4218, scopeLine: 1749, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!11650 = !DILocalVariable(name: "bb", arg: 1, scope: !11649, file: !3, line: 1748, type: !3523)
!11651 = !DILocation(line: 1748, column: 24, scope: !11649)
!11652 = !DILocalVariable(name: "i", scope: !11649, file: !3, line: 1750, type: !4074)
!11653 = !DILocation(line: 1750, column: 24, scope: !11649)
!11654 = !DILocation(line: 1752, column: 7, scope: !11655)
!11655 = distinct !DILexicalBlock(scope: !11649, file: !3, line: 1752, column: 7)
!11656 = !DILocation(line: 1752, column: 7, scope: !11649)
!11657 = !DILocation(line: 1754, column: 16, scope: !11658)
!11658 = distinct !DILexicalBlock(scope: !11655, file: !3, line: 1753, column: 5)
!11659 = !DILocation(line: 1754, column: 56, scope: !11658)
!11660 = !DILocation(line: 1754, column: 60, scope: !11658)
!11661 = !DILocation(line: 1754, column: 7, scope: !11658)
!11662 = !DILocation(line: 1755, column: 11, scope: !11663)
!11663 = distinct !DILexicalBlock(scope: !11658, file: !3, line: 1755, column: 11)
!11664 = !DILocation(line: 1755, column: 22, scope: !11663)
!11665 = !DILocation(line: 1755, column: 11, scope: !11658)
!11666 = !DILocation(line: 1757, column: 13, scope: !11667)
!11667 = distinct !DILexicalBlock(scope: !11663, file: !3, line: 1756, column: 2)
!11668 = !DILocation(line: 1757, column: 17, scope: !11667)
!11669 = !DILocation(line: 1757, column: 4, scope: !11667)
!11670 = !DILocation(line: 1758, column: 13, scope: !11667)
!11671 = !DILocation(line: 1758, column: 4, scope: !11667)
!11672 = !DILocation(line: 1759, column: 2, scope: !11667)
!11673 = !DILocation(line: 1760, column: 5, scope: !11658)
!11674 = !DILocation(line: 1762, column: 7, scope: !11675)
!11675 = distinct !DILexicalBlock(scope: !11649, file: !3, line: 1762, column: 7)
!11676 = !DILocation(line: 1762, column: 7, scope: !11649)
!11677 = !DILocalVariable(name: "loop", scope: !11678, file: !3, line: 1764, type: !3097)
!11678 = distinct !DILexicalBlock(scope: !11675, file: !3, line: 1763, column: 5)
!11679 = !DILocation(line: 1764, column: 20, scope: !11678)
!11680 = !DILocation(line: 1764, column: 27, scope: !11678)
!11681 = !DILocation(line: 1764, column: 31, scope: !11678)
!11682 = !DILocation(line: 1768, column: 11, scope: !11683)
!11683 = distinct !DILexicalBlock(scope: !11678, file: !3, line: 1768, column: 11)
!11684 = !DILocation(line: 1768, column: 17, scope: !11683)
!11685 = !DILocation(line: 1768, column: 26, scope: !11683)
!11686 = !DILocation(line: 1768, column: 23, scope: !11683)
!11687 = !DILocation(line: 1769, column: 4, scope: !11683)
!11688 = !DILocation(line: 1769, column: 7, scope: !11683)
!11689 = !DILocation(line: 1769, column: 13, scope: !11683)
!11690 = !DILocation(line: 1769, column: 23, scope: !11683)
!11691 = !DILocation(line: 1769, column: 20, scope: !11683)
!11692 = !DILocation(line: 1768, column: 11, scope: !11678)
!11693 = !DILocation(line: 1770, column: 45, scope: !11683)
!11694 = !DILocation(line: 1770, column: 2, scope: !11683)
!11695 = !DILocation(line: 1771, column: 5, scope: !11678)
!11696 = !DILocation(line: 1774, column: 15, scope: !11697)
!11697 = distinct !DILexicalBlock(scope: !11649, file: !3, line: 1774, column: 7)
!11698 = !DILocation(line: 1774, column: 7, scope: !11697)
!11699 = !DILocation(line: 1774, column: 19, scope: !11697)
!11700 = !DILocation(line: 1774, column: 7, scope: !11649)
!11701 = !DILocation(line: 1780, column: 29, scope: !11702)
!11702 = distinct !DILexicalBlock(scope: !11703, file: !3, line: 1780, column: 7)
!11703 = distinct !DILexicalBlock(scope: !11697, file: !3, line: 1775, column: 5)
!11704 = !DILocation(line: 1780, column: 16, scope: !11702)
!11705 = !DILocation(line: 1780, column: 12, scope: !11702)
!11706 = !DILocation(line: 1780, column: 35, scope: !11707)
!11707 = distinct !DILexicalBlock(scope: !11702, file: !3, line: 1780, column: 7)
!11708 = !DILocation(line: 1780, column: 34, scope: !11707)
!11709 = !DILocation(line: 1780, column: 7, scope: !11702)
!11710 = !DILocalVariable(name: "stmt", scope: !11711, file: !3, line: 1782, type: !2882)
!11711 = distinct !DILexicalBlock(scope: !11707, file: !3, line: 1781, column: 2)
!11712 = !DILocation(line: 1782, column: 11, scope: !11711)
!11713 = !DILocation(line: 1782, column: 18, scope: !11711)
!11714 = !DILocation(line: 1783, column: 21, scope: !11715)
!11715 = distinct !DILexicalBlock(scope: !11711, file: !3, line: 1783, column: 8)
!11716 = !DILocation(line: 1783, column: 8, scope: !11715)
!11717 = !DILocation(line: 1783, column: 27, scope: !11715)
!11718 = !DILocation(line: 1784, column: 8, scope: !11715)
!11719 = !DILocation(line: 1784, column: 12, scope: !11715)
!11720 = !DILocation(line: 1785, column: 5, scope: !11715)
!11721 = !DILocation(line: 1785, column: 8, scope: !11715)
!11722 = !DILocation(line: 1783, column: 8, scope: !11711)
!11723 = !DILocalVariable(name: "new_bb", scope: !11724, file: !3, line: 1787, type: !3523)
!11724 = distinct !DILexicalBlock(scope: !11715, file: !3, line: 1786, column: 6)
!11725 = !DILocation(line: 1787, column: 20, scope: !11724)
!11726 = !DILocalVariable(name: "new_gsi", scope: !11724, file: !3, line: 1788, type: !4074)
!11727 = !DILocation(line: 1788, column: 29, scope: !11724)
!11728 = !DILocation(line: 1793, column: 12, scope: !11729)
!11729 = distinct !DILexicalBlock(scope: !11724, file: !3, line: 1793, column: 12)
!11730 = !DILocation(line: 1793, column: 12, scope: !11724)
!11731 = !DILocation(line: 1795, column: 5, scope: !11732)
!11732 = distinct !DILexicalBlock(scope: !11729, file: !3, line: 1794, column: 3)
!11733 = !DILocation(line: 1795, column: 47, scope: !11732)
!11734 = !DILocation(line: 1796, column: 5, scope: !11732)
!11735 = !DILocation(line: 1796, column: 46, scope: !11732)
!11736 = !DILocation(line: 1797, column: 3, scope: !11732)
!11737 = !DILocation(line: 1799, column: 17, scope: !11724)
!11738 = !DILocation(line: 1799, column: 21, scope: !11724)
!11739 = !DILocation(line: 1799, column: 15, scope: !11724)
!11740 = !DILocation(line: 1800, column: 32, scope: !11724)
!11741 = !DILocation(line: 1800, column: 18, scope: !11724)
!11742 = !DILocation(line: 1801, column: 8, scope: !11724)
!11743 = !DILocation(line: 1802, column: 37, scope: !11724)
!11744 = !DILocation(line: 1802, column: 8, scope: !11724)
!11745 = !DILocation(line: 1803, column: 6, scope: !11724)
!11746 = !DILocation(line: 1810, column: 29, scope: !11747)
!11747 = distinct !DILexicalBlock(scope: !11748, file: !3, line: 1810, column: 12)
!11748 = distinct !DILexicalBlock(scope: !11715, file: !3, line: 1805, column: 6)
!11749 = !DILocation(line: 1810, column: 12, scope: !11747)
!11750 = !DILocation(line: 1810, column: 12, scope: !11748)
!11751 = !DILocation(line: 1811, column: 17, scope: !11747)
!11752 = !DILocation(line: 1811, column: 3, scope: !11747)
!11753 = !DILocation(line: 1813, column: 8, scope: !11748)
!11754 = !DILocation(line: 1816, column: 8, scope: !11755)
!11755 = distinct !DILexicalBlock(scope: !11711, file: !3, line: 1816, column: 8)
!11756 = !DILocation(line: 1816, column: 8, scope: !11711)
!11757 = !DILocation(line: 1817, column: 23, scope: !11755)
!11758 = !DILocation(line: 1817, column: 10, scope: !11755)
!11759 = !DILocation(line: 1817, column: 6, scope: !11755)
!11760 = !DILocation(line: 1819, column: 6, scope: !11755)
!11761 = !DILocation(line: 1780, column: 7, scope: !11707)
!11762 = distinct !{!11762, !11709, !11763}
!11763 = !DILocation(line: 1820, column: 2, scope: !11702)
!11764 = !DILocation(line: 1821, column: 5, scope: !11703)
!11765 = !DILocation(line: 1823, column: 53, scope: !11649)
!11766 = !DILocation(line: 1823, column: 3, scope: !11649)
!11767 = !DILocation(line: 1824, column: 3, scope: !11649)
!11768 = !DILocation(line: 1824, column: 7, scope: !11649)
!11769 = !DILocation(line: 1824, column: 10, scope: !11649)
!11770 = !DILocation(line: 1824, column: 17, scope: !11649)
!11771 = !DILocation(line: 1825, column: 1, scope: !11649)
!11772 = distinct !DISubprogram(name: "gimple_split_block", scope: !3, file: !3, line: 4799, type: !4222, scopeLine: 4800, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!11773 = !DILocalVariable(name: "bb", arg: 1, scope: !11772, file: !3, line: 4799, type: !3523)
!11774 = !DILocation(line: 4799, column: 33, scope: !11772)
!11775 = !DILocalVariable(name: "stmt", arg: 2, scope: !11772, file: !3, line: 4799, type: !2547)
!11776 = !DILocation(line: 4799, column: 43, scope: !11772)
!11777 = !DILocalVariable(name: "gsi", scope: !11772, file: !3, line: 4801, type: !4074)
!11778 = !DILocation(line: 4801, column: 24, scope: !11772)
!11779 = !DILocalVariable(name: "gsi_tgt", scope: !11772, file: !3, line: 4802, type: !4074)
!11780 = !DILocation(line: 4802, column: 24, scope: !11772)
!11781 = !DILocalVariable(name: "act", scope: !11772, file: !3, line: 4803, type: !2882)
!11782 = !DILocation(line: 4803, column: 10, scope: !11772)
!11783 = !DILocalVariable(name: "list", scope: !11772, file: !3, line: 4804, type: !2872)
!11784 = !DILocation(line: 4804, column: 14, scope: !11772)
!11785 = !DILocalVariable(name: "new_bb", scope: !11772, file: !3, line: 4805, type: !3523)
!11786 = !DILocation(line: 4805, column: 15, scope: !11772)
!11787 = !DILocalVariable(name: "e", scope: !11772, file: !3, line: 4806, type: !2862)
!11788 = !DILocation(line: 4806, column: 8, scope: !11772)
!11789 = !DILocalVariable(name: "ei", scope: !11772, file: !3, line: 4807, type: !7861)
!11790 = !DILocation(line: 4807, column: 17, scope: !11772)
!11791 = !DILocation(line: 4809, column: 29, scope: !11772)
!11792 = !DILocation(line: 4809, column: 12, scope: !11772)
!11793 = !DILocation(line: 4809, column: 10, scope: !11772)
!11794 = !DILocation(line: 4812, column: 19, scope: !11772)
!11795 = !DILocation(line: 4812, column: 23, scope: !11772)
!11796 = !DILocation(line: 4812, column: 3, scope: !11772)
!11797 = !DILocation(line: 4812, column: 11, scope: !11772)
!11798 = !DILocation(line: 4812, column: 17, scope: !11772)
!11799 = !DILocation(line: 4813, column: 3, scope: !11772)
!11800 = !DILocation(line: 4813, column: 7, scope: !11772)
!11801 = !DILocation(line: 4813, column: 13, scope: !11772)
!11802 = !DILocation(line: 4814, column: 3, scope: !11803)
!11803 = distinct !DILexicalBlock(scope: !11772, file: !3, line: 4814, column: 3)
!11804 = !DILocation(line: 4814, column: 3, scope: !11805)
!11805 = distinct !DILexicalBlock(scope: !11803, file: !3, line: 4814, column: 3)
!11806 = !DILocation(line: 4815, column: 14, scope: !11805)
!11807 = !DILocation(line: 4815, column: 5, scope: !11805)
!11808 = !DILocation(line: 4815, column: 8, scope: !11805)
!11809 = !DILocation(line: 4815, column: 12, scope: !11805)
!11810 = distinct !{!11810, !11802, !11811}
!11811 = !DILocation(line: 4815, column: 14, scope: !11803)
!11812 = !DILocation(line: 4817, column: 7, scope: !11813)
!11813 = distinct !DILexicalBlock(scope: !11772, file: !3, line: 4817, column: 7)
!11814 = !DILocation(line: 4817, column: 12, scope: !11813)
!11815 = !DILocation(line: 4817, column: 37, scope: !11813)
!11816 = !DILocation(line: 4817, column: 28, scope: !11813)
!11817 = !DILocation(line: 4817, column: 15, scope: !11813)
!11818 = !DILocation(line: 4817, column: 43, scope: !11813)
!11819 = !DILocation(line: 4817, column: 7, scope: !11772)
!11820 = !DILocation(line: 4818, column: 10, scope: !11813)
!11821 = !DILocation(line: 4818, column: 5, scope: !11813)
!11822 = !DILocation(line: 4821, column: 28, scope: !11823)
!11823 = distinct !DILexicalBlock(scope: !11772, file: !3, line: 4821, column: 3)
!11824 = !DILocation(line: 4821, column: 14, scope: !11823)
!11825 = !DILocation(line: 4821, column: 8, scope: !11823)
!11826 = !DILocation(line: 4821, column: 34, scope: !11827)
!11827 = distinct !DILexicalBlock(scope: !11823, file: !3, line: 4821, column: 3)
!11828 = !DILocation(line: 4821, column: 33, scope: !11827)
!11829 = !DILocation(line: 4821, column: 3, scope: !11823)
!11830 = !DILocation(line: 4823, column: 13, scope: !11831)
!11831 = distinct !DILexicalBlock(scope: !11827, file: !3, line: 4822, column: 5)
!11832 = !DILocation(line: 4823, column: 11, scope: !11831)
!11833 = !DILocation(line: 4824, column: 24, scope: !11834)
!11834 = distinct !DILexicalBlock(scope: !11831, file: !3, line: 4824, column: 11)
!11835 = !DILocation(line: 4824, column: 11, scope: !11834)
!11836 = !DILocation(line: 4824, column: 29, scope: !11834)
!11837 = !DILocation(line: 4824, column: 11, scope: !11831)
!11838 = !DILocation(line: 4825, column: 2, scope: !11834)
!11839 = !DILocation(line: 4827, column: 12, scope: !11840)
!11840 = distinct !DILexicalBlock(scope: !11831, file: !3, line: 4827, column: 11)
!11841 = !DILocation(line: 4827, column: 11, scope: !11831)
!11842 = !DILocation(line: 4828, column: 2, scope: !11840)
!11843 = !DILocation(line: 4830, column: 11, scope: !11844)
!11844 = distinct !DILexicalBlock(scope: !11831, file: !3, line: 4830, column: 11)
!11845 = !DILocation(line: 4830, column: 19, scope: !11844)
!11846 = !DILocation(line: 4830, column: 16, scope: !11844)
!11847 = !DILocation(line: 4830, column: 11, scope: !11831)
!11848 = !DILocation(line: 4832, column: 4, scope: !11849)
!11849 = distinct !DILexicalBlock(scope: !11844, file: !3, line: 4831, column: 2)
!11850 = !DILocation(line: 4833, column: 4, scope: !11849)
!11851 = !DILocation(line: 4835, column: 5, scope: !11831)
!11852 = !DILocation(line: 4821, column: 51, scope: !11827)
!11853 = !DILocation(line: 4821, column: 3, scope: !11827)
!11854 = distinct !{!11854, !11829, !11855}
!11855 = !DILocation(line: 4835, column: 5, scope: !11823)
!11856 = !DILocation(line: 4837, column: 7, scope: !11857)
!11857 = distinct !DILexicalBlock(scope: !11772, file: !3, line: 4837, column: 7)
!11858 = !DILocation(line: 4837, column: 7, scope: !11772)
!11859 = !DILocation(line: 4838, column: 12, scope: !11857)
!11860 = !DILocation(line: 4838, column: 5, scope: !11857)
!11861 = !DILocation(line: 4844, column: 10, scope: !11772)
!11862 = !DILocation(line: 4844, column: 8, scope: !11772)
!11863 = !DILocation(line: 4845, column: 15, scope: !11772)
!11864 = !DILocation(line: 4845, column: 23, scope: !11772)
!11865 = !DILocation(line: 4845, column: 3, scope: !11772)
!11866 = !DILocation(line: 4846, column: 29, scope: !11867)
!11867 = distinct !DILexicalBlock(scope: !11772, file: !3, line: 4846, column: 3)
!11868 = !DILocation(line: 4846, column: 18, scope: !11867)
!11869 = !DILocation(line: 4846, column: 8, scope: !11867)
!11870 = !DILocation(line: 4847, column: 9, scope: !11871)
!11871 = distinct !DILexicalBlock(scope: !11867, file: !3, line: 4846, column: 3)
!11872 = !DILocation(line: 4847, column: 8, scope: !11871)
!11873 = !DILocation(line: 4846, column: 3, scope: !11867)
!11874 = !DILocation(line: 4848, column: 20, scope: !11871)
!11875 = !DILocation(line: 4848, column: 40, scope: !11871)
!11876 = !DILocation(line: 4848, column: 5, scope: !11871)
!11877 = !DILocation(line: 4847, column: 30, scope: !11871)
!11878 = !DILocation(line: 4846, column: 3, scope: !11871)
!11879 = distinct !{!11879, !11873, !11880}
!11880 = !DILocation(line: 4848, column: 46, scope: !11867)
!11881 = !DILocation(line: 4850, column: 10, scope: !11772)
!11882 = !DILocation(line: 4850, column: 3, scope: !11772)
!11883 = !DILocation(line: 4851, column: 1, scope: !11772)
!11884 = distinct !DISubprogram(name: "gimple_move_block_after", scope: !3, file: !3, line: 4857, type: !4226, scopeLine: 4858, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!11885 = !DILocalVariable(name: "bb", arg: 1, scope: !11884, file: !3, line: 4857, type: !3523)
!11886 = !DILocation(line: 4857, column: 38, scope: !11884)
!11887 = !DILocalVariable(name: "after", arg: 2, scope: !11884, file: !3, line: 4857, type: !3523)
!11888 = !DILocation(line: 4857, column: 54, scope: !11884)
!11889 = !DILocation(line: 4859, column: 7, scope: !11890)
!11890 = distinct !DILexicalBlock(scope: !11884, file: !3, line: 4859, column: 7)
!11891 = !DILocation(line: 4859, column: 11, scope: !11890)
!11892 = !DILocation(line: 4859, column: 22, scope: !11890)
!11893 = !DILocation(line: 4859, column: 19, scope: !11890)
!11894 = !DILocation(line: 4859, column: 7, scope: !11884)
!11895 = !DILocation(line: 4860, column: 5, scope: !11890)
!11896 = !DILocation(line: 4862, column: 17, scope: !11884)
!11897 = !DILocation(line: 4862, column: 3, scope: !11884)
!11898 = !DILocation(line: 4863, column: 15, scope: !11884)
!11899 = !DILocation(line: 4863, column: 19, scope: !11884)
!11900 = !DILocation(line: 4863, column: 3, scope: !11884)
!11901 = !DILocation(line: 4865, column: 3, scope: !11884)
!11902 = !DILocation(line: 4866, column: 1, scope: !11884)
!11903 = distinct !DISubprogram(name: "gimple_can_merge_blocks_p", scope: !3, file: !3, line: 1389, type: !4226, scopeLine: 1390, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!11904 = !DILocalVariable(name: "a", arg: 1, scope: !11903, file: !3, line: 1389, type: !3523)
!11905 = !DILocation(line: 1389, column: 40, scope: !11903)
!11906 = !DILocalVariable(name: "b", arg: 2, scope: !11903, file: !3, line: 1389, type: !3523)
!11907 = !DILocation(line: 1389, column: 55, scope: !11903)
!11908 = !DILocalVariable(name: "stmt", scope: !11903, file: !3, line: 1391, type: !2882)
!11909 = !DILocation(line: 1391, column: 10, scope: !11903)
!11910 = !DILocalVariable(name: "gsi", scope: !11903, file: !3, line: 1392, type: !4074)
!11911 = !DILocation(line: 1392, column: 24, scope: !11903)
!11912 = !DILocalVariable(name: "phis", scope: !11903, file: !3, line: 1393, type: !2872)
!11913 = !DILocation(line: 1393, column: 14, scope: !11903)
!11914 = !DILocation(line: 1395, column: 23, scope: !11915)
!11915 = distinct !DILexicalBlock(scope: !11903, file: !3, line: 1395, column: 7)
!11916 = !DILocation(line: 1395, column: 8, scope: !11915)
!11917 = !DILocation(line: 1395, column: 7, scope: !11903)
!11918 = !DILocation(line: 1396, column: 5, scope: !11915)
!11919 = !DILocation(line: 1398, column: 25, scope: !11920)
!11920 = distinct !DILexicalBlock(scope: !11903, file: !3, line: 1398, column: 7)
!11921 = !DILocation(line: 1398, column: 7, scope: !11920)
!11922 = !DILocation(line: 1398, column: 29, scope: !11920)
!11923 = !DILocation(line: 1398, column: 35, scope: !11920)
!11924 = !DILocation(line: 1398, column: 7, scope: !11903)
!11925 = !DILocation(line: 1399, column: 5, scope: !11920)
!11926 = !DILocation(line: 1401, column: 20, scope: !11927)
!11927 = distinct !DILexicalBlock(scope: !11903, file: !3, line: 1401, column: 7)
!11928 = !DILocation(line: 1401, column: 7, scope: !11927)
!11929 = !DILocation(line: 1401, column: 26, scope: !11927)
!11930 = !DILocation(line: 1401, column: 23, scope: !11927)
!11931 = !DILocation(line: 1401, column: 7, scope: !11903)
!11932 = !DILocation(line: 1402, column: 5, scope: !11927)
!11933 = !DILocation(line: 1404, column: 23, scope: !11934)
!11934 = distinct !DILexicalBlock(scope: !11903, file: !3, line: 1404, column: 7)
!11935 = !DILocation(line: 1404, column: 8, scope: !11934)
!11936 = !DILocation(line: 1404, column: 7, scope: !11903)
!11937 = !DILocation(line: 1405, column: 5, scope: !11934)
!11938 = !DILocation(line: 1407, column: 7, scope: !11939)
!11939 = distinct !DILexicalBlock(scope: !11903, file: !3, line: 1407, column: 7)
!11940 = !DILocation(line: 1407, column: 12, scope: !11939)
!11941 = !DILocation(line: 1407, column: 9, scope: !11939)
!11942 = !DILocation(line: 1407, column: 7, scope: !11903)
!11943 = !DILocation(line: 1408, column: 5, scope: !11939)
!11944 = !DILocation(line: 1412, column: 21, scope: !11903)
!11945 = !DILocation(line: 1412, column: 10, scope: !11903)
!11946 = !DILocation(line: 1412, column: 8, scope: !11903)
!11947 = !DILocation(line: 1413, column: 7, scope: !11948)
!11948 = distinct !DILexicalBlock(scope: !11903, file: !3, line: 1413, column: 7)
!11949 = !DILocation(line: 1413, column: 12, scope: !11948)
!11950 = !DILocation(line: 1413, column: 31, scope: !11948)
!11951 = !DILocation(line: 1413, column: 15, scope: !11948)
!11952 = !DILocation(line: 1413, column: 7, scope: !11903)
!11953 = !DILocation(line: 1414, column: 5, scope: !11948)
!11954 = !DILocation(line: 1417, column: 7, scope: !11955)
!11955 = distinct !DILexicalBlock(scope: !11903, file: !3, line: 1417, column: 7)
!11956 = !DILocation(line: 1418, column: 7, scope: !11955)
!11957 = !DILocation(line: 1418, column: 23, scope: !11955)
!11958 = !DILocation(line: 1418, column: 10, scope: !11955)
!11959 = !DILocation(line: 1418, column: 29, scope: !11955)
!11960 = !DILocation(line: 1419, column: 7, scope: !11955)
!11961 = !DILocation(line: 1419, column: 10, scope: !11955)
!11962 = !DILocation(line: 1417, column: 7, scope: !11903)
!11963 = !DILocation(line: 1420, column: 5, scope: !11955)
!11964 = !DILocation(line: 1423, column: 28, scope: !11965)
!11965 = distinct !DILexicalBlock(scope: !11903, file: !3, line: 1423, column: 3)
!11966 = !DILocation(line: 1423, column: 14, scope: !11965)
!11967 = !DILocation(line: 1423, column: 8, scope: !11965)
!11968 = !DILocation(line: 1423, column: 33, scope: !11969)
!11969 = distinct !DILexicalBlock(scope: !11965, file: !3, line: 1423, column: 3)
!11970 = !DILocation(line: 1423, column: 32, scope: !11969)
!11971 = !DILocation(line: 1423, column: 3, scope: !11965)
!11972 = !DILocalVariable(name: "lab", scope: !11973, file: !3, line: 1425, type: !2553)
!11973 = distinct !DILexicalBlock(scope: !11969, file: !3, line: 1424, column: 5)
!11974 = !DILocation(line: 1425, column: 12, scope: !11973)
!11975 = !DILocation(line: 1426, column: 14, scope: !11973)
!11976 = !DILocation(line: 1426, column: 12, scope: !11973)
!11977 = !DILocation(line: 1427, column: 24, scope: !11978)
!11978 = distinct !DILexicalBlock(scope: !11973, file: !3, line: 1427, column: 11)
!11979 = !DILocation(line: 1427, column: 11, scope: !11978)
!11980 = !DILocation(line: 1427, column: 30, scope: !11978)
!11981 = !DILocation(line: 1427, column: 11, scope: !11973)
!11982 = !DILocation(line: 1428, column: 2, scope: !11978)
!11983 = !DILocation(line: 1429, column: 33, scope: !11973)
!11984 = !DILocation(line: 1429, column: 13, scope: !11973)
!11985 = !DILocation(line: 1429, column: 11, scope: !11973)
!11986 = !DILocation(line: 1432, column: 12, scope: !11987)
!11987 = distinct !DILexicalBlock(scope: !11973, file: !3, line: 1432, column: 11)
!11988 = !DILocation(line: 1432, column: 11, scope: !11973)
!11989 = !DILocation(line: 1433, column: 2, scope: !11987)
!11990 = !DILocation(line: 1434, column: 5, scope: !11973)
!11991 = !DILocation(line: 1423, column: 50, scope: !11969)
!11992 = !DILocation(line: 1423, column: 3, scope: !11969)
!11993 = distinct !{!11993, !11971, !11994}
!11994 = !DILocation(line: 1434, column: 5, scope: !11965)
!11995 = !DILocation(line: 1437, column: 7, scope: !11996)
!11996 = distinct !DILexicalBlock(scope: !11903, file: !3, line: 1437, column: 7)
!11997 = !DILocation(line: 1437, column: 21, scope: !11996)
!11998 = !DILocation(line: 1437, column: 24, scope: !11996)
!11999 = !DILocation(line: 1437, column: 27, scope: !11996)
!12000 = !DILocation(line: 1437, column: 40, scope: !11996)
!12001 = !DILocation(line: 1437, column: 49, scope: !11996)
!12002 = !DILocation(line: 1437, column: 46, scope: !11996)
!12003 = !DILocation(line: 1437, column: 7, scope: !11903)
!12004 = !DILocation(line: 1438, column: 5, scope: !11996)
!12005 = !DILocation(line: 1443, column: 21, scope: !11903)
!12006 = !DILocation(line: 1443, column: 10, scope: !11903)
!12007 = !DILocation(line: 1443, column: 8, scope: !11903)
!12008 = !DILocation(line: 1444, column: 28, scope: !12009)
!12009 = distinct !DILexicalBlock(scope: !11903, file: !3, line: 1444, column: 7)
!12010 = !DILocation(line: 1444, column: 8, scope: !12009)
!12011 = !DILocation(line: 1445, column: 7, scope: !12009)
!12012 = !DILocation(line: 1445, column: 10, scope: !12009)
!12013 = !DILocation(line: 1444, column: 7, scope: !11903)
!12014 = !DILocation(line: 1446, column: 5, scope: !12009)
!12015 = !DILocation(line: 1448, column: 3, scope: !11903)
!12016 = !DILocation(line: 1449, column: 1, scope: !11903)
!12017 = distinct !DISubprogram(name: "gimple_merge_blocks", scope: !3, file: !3, line: 1566, type: !4231, scopeLine: 1567, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!12018 = !DILocalVariable(name: "a", arg: 1, scope: !12017, file: !3, line: 1566, type: !3523)
!12019 = !DILocation(line: 1566, column: 34, scope: !12017)
!12020 = !DILocalVariable(name: "b", arg: 2, scope: !12017, file: !3, line: 1566, type: !3523)
!12021 = !DILocation(line: 1566, column: 49, scope: !12017)
!12022 = !DILocalVariable(name: "last", scope: !12017, file: !3, line: 1568, type: !4074)
!12023 = !DILocation(line: 1568, column: 24, scope: !12017)
!12024 = !DILocalVariable(name: "gsi", scope: !12017, file: !3, line: 1568, type: !4074)
!12025 = !DILocation(line: 1568, column: 30, scope: !12017)
!12026 = !DILocalVariable(name: "psi", scope: !12017, file: !3, line: 1568, type: !4074)
!12027 = !DILocation(line: 1568, column: 35, scope: !12017)
!12028 = !DILocalVariable(name: "phis", scope: !12017, file: !3, line: 1569, type: !2872)
!12029 = !DILocation(line: 1569, column: 14, scope: !12017)
!12030 = !DILocation(line: 1569, column: 32, scope: !12017)
!12031 = !DILocation(line: 1569, column: 21, scope: !12017)
!12032 = !DILocation(line: 1571, column: 7, scope: !12033)
!12033 = distinct !DILexicalBlock(scope: !12017, file: !3, line: 1571, column: 7)
!12034 = !DILocation(line: 1571, column: 7, scope: !12017)
!12035 = !DILocation(line: 1572, column: 14, scope: !12033)
!12036 = !DILocation(line: 1572, column: 55, scope: !12033)
!12037 = !DILocation(line: 1572, column: 58, scope: !12033)
!12038 = !DILocation(line: 1572, column: 65, scope: !12033)
!12039 = !DILocation(line: 1572, column: 68, scope: !12033)
!12040 = !DILocation(line: 1572, column: 5, scope: !12033)
!12041 = !DILocation(line: 1576, column: 22, scope: !12017)
!12042 = !DILocation(line: 1576, column: 9, scope: !12017)
!12043 = !DILocation(line: 1577, column: 25, scope: !12044)
!12044 = distinct !DILexicalBlock(scope: !12017, file: !3, line: 1577, column: 3)
!12045 = !DILocation(line: 1577, column: 14, scope: !12044)
!12046 = !DILocation(line: 1577, column: 8, scope: !12044)
!12047 = !DILocation(line: 1577, column: 33, scope: !12048)
!12048 = distinct !DILexicalBlock(scope: !12044, file: !3, line: 1577, column: 3)
!12049 = !DILocation(line: 1577, column: 32, scope: !12048)
!12050 = !DILocation(line: 1577, column: 3, scope: !12044)
!12051 = !DILocalVariable(name: "phi", scope: !12052, file: !3, line: 1579, type: !2882)
!12052 = distinct !DILexicalBlock(scope: !12048, file: !3, line: 1578, column: 5)
!12053 = !DILocation(line: 1579, column: 14, scope: !12052)
!12054 = !DILocation(line: 1579, column: 20, scope: !12052)
!12055 = !DILocalVariable(name: "def", scope: !12052, file: !3, line: 1580, type: !2553)
!12056 = !DILocation(line: 1580, column: 12, scope: !12052)
!12057 = !DILocation(line: 1580, column: 37, scope: !12052)
!12058 = !DILocation(line: 1580, column: 18, scope: !12052)
!12059 = !DILocalVariable(name: "use", scope: !12052, file: !3, line: 1580, type: !2553)
!12060 = !DILocation(line: 1580, column: 43, scope: !12052)
!12061 = !DILocation(line: 1580, column: 69, scope: !12052)
!12062 = !DILocation(line: 1580, column: 49, scope: !12052)
!12063 = !DILocalVariable(name: "copy", scope: !12052, file: !3, line: 1581, type: !2882)
!12064 = !DILocation(line: 1581, column: 14, scope: !12052)
!12065 = !DILocalVariable(name: "may_replace_uses", scope: !12052, file: !3, line: 1582, type: !2672)
!12066 = !DILocation(line: 1582, column: 12, scope: !12052)
!12067 = !DILocation(line: 1582, column: 47, scope: !12052)
!12068 = !DILocation(line: 1582, column: 32, scope: !12052)
!12069 = !DILocation(line: 1583, column: 10, scope: !12052)
!12070 = !DILocation(line: 1583, column: 33, scope: !12052)
!12071 = !DILocation(line: 1583, column: 38, scope: !12052)
!12072 = !DILocation(line: 1583, column: 13, scope: !12052)
!12073 = !DILocation(line: 1582, column: 31, scope: !12052)
!12074 = !DILocation(line: 1587, column: 11, scope: !12075)
!12075 = distinct !DILexicalBlock(scope: !12052, file: !3, line: 1587, column: 11)
!12076 = !DILocation(line: 1588, column: 4, scope: !12075)
!12077 = !DILocation(line: 1588, column: 7, scope: !12075)
!12078 = !DILocation(line: 1589, column: 4, scope: !12075)
!12079 = !DILocation(line: 1589, column: 22, scope: !12075)
!12080 = !DILocation(line: 1589, column: 7, scope: !12075)
!12081 = !DILocation(line: 1590, column: 4, scope: !12075)
!12082 = !DILocation(line: 1590, column: 7, scope: !12075)
!12083 = !DILocation(line: 1590, column: 23, scope: !12075)
!12084 = !DILocation(line: 1591, column: 4, scope: !12075)
!12085 = !DILocation(line: 1591, column: 7, scope: !12075)
!12086 = !DILocation(line: 1591, column: 10, scope: !12075)
!12087 = !DILocation(line: 1591, column: 25, scope: !12075)
!12088 = !DILocation(line: 1591, column: 28, scope: !12075)
!12089 = !DILocation(line: 1591, column: 22, scope: !12075)
!12090 = !DILocation(line: 1587, column: 11, scope: !12052)
!12091 = !DILocation(line: 1592, column: 19, scope: !12075)
!12092 = !DILocation(line: 1592, column: 2, scope: !12075)
!12093 = !DILocation(line: 1594, column: 12, scope: !12094)
!12094 = distinct !DILexicalBlock(scope: !12052, file: !3, line: 1594, column: 11)
!12095 = !DILocation(line: 1594, column: 11, scope: !12052)
!12096 = !DILocation(line: 1596, column: 4, scope: !12097)
!12097 = distinct !DILexicalBlock(scope: !12094, file: !3, line: 1595, column: 2)
!12098 = !DILocation(line: 1602, column: 11, scope: !12097)
!12099 = !DILocation(line: 1602, column: 9, scope: !12097)
!12100 = !DILocation(line: 1603, column: 28, scope: !12097)
!12101 = !DILocation(line: 1603, column: 4, scope: !12097)
!12102 = !DILocation(line: 1604, column: 11, scope: !12097)
!12103 = !DILocation(line: 1605, column: 2, scope: !12097)
!12104 = !DILocation(line: 1611, column: 24, scope: !12105)
!12105 = distinct !DILexicalBlock(scope: !12106, file: !3, line: 1611, column: 8)
!12106 = distinct !DILexicalBlock(scope: !12094, file: !3, line: 1607, column: 9)
!12107 = !DILocation(line: 1611, column: 9, scope: !12105)
!12108 = !DILocation(line: 1611, column: 8, scope: !12106)
!12109 = !DILocalVariable(name: "iter", scope: !12110, file: !3, line: 1613, type: !5692)
!12110 = distinct !DILexicalBlock(scope: !12105, file: !3, line: 1612, column: 6)
!12111 = !DILocation(line: 1613, column: 25, scope: !12110)
!12112 = !DILocalVariable(name: "use_p", scope: !12110, file: !3, line: 1614, type: !4052)
!12113 = !DILocation(line: 1614, column: 22, scope: !12110)
!12114 = !DILocalVariable(name: "stmt", scope: !12110, file: !3, line: 1615, type: !2882)
!12115 = !DILocation(line: 1615, column: 15, scope: !12110)
!12116 = !DILocation(line: 1617, column: 8, scope: !12117)
!12117 = distinct !DILexicalBlock(scope: !12110, file: !3, line: 1617, column: 8)
!12118 = !DILocation(line: 1617, column: 8, scope: !12119)
!12119 = distinct !DILexicalBlock(scope: !12117, file: !3, line: 1617, column: 8)
!12120 = !DILocation(line: 1618, column: 3, scope: !12121)
!12121 = distinct !DILexicalBlock(scope: !12119, file: !3, line: 1618, column: 3)
!12122 = !DILocation(line: 1618, column: 3, scope: !12123)
!12123 = distinct !DILexicalBlock(scope: !12121, file: !3, line: 1618, column: 3)
!12124 = !DILocation(line: 1619, column: 5, scope: !12123)
!12125 = distinct !{!12125, !12120, !12126}
!12126 = !DILocation(line: 1619, column: 5, scope: !12121)
!12127 = distinct !{!12127, !12116, !12128}
!12128 = !DILocation(line: 1619, column: 5, scope: !12117)
!12129 = !DILocation(line: 1621, column: 12, scope: !12130)
!12130 = distinct !DILexicalBlock(scope: !12110, file: !3, line: 1621, column: 12)
!12131 = !DILocation(line: 1621, column: 12, scope: !12110)
!12132 = !DILocation(line: 1622, column: 3, scope: !12130)
!12133 = !DILocation(line: 1622, column: 41, scope: !12130)
!12134 = !DILocation(line: 1623, column: 6, scope: !12110)
!12135 = !DILocation(line: 1625, column: 30, scope: !12105)
!12136 = !DILocation(line: 1625, column: 35, scope: !12105)
!12137 = !DILocation(line: 1625, column: 13, scope: !12105)
!12138 = !DILocation(line: 1627, column: 11, scope: !12106)
!12139 = !DILocation(line: 1577, column: 3, scope: !12048)
!12140 = distinct !{!12140, !12050, !12141}
!12141 = !DILocation(line: 1629, column: 5, scope: !12044)
!12142 = !DILocation(line: 1632, column: 21, scope: !12017)
!12143 = !DILocation(line: 1632, column: 24, scope: !12017)
!12144 = !DILocation(line: 1632, column: 3, scope: !12017)
!12145 = !DILocation(line: 1634, column: 3, scope: !12017)
!12146 = !DILocation(line: 1635, column: 3, scope: !12017)
!12147 = !DILocation(line: 1638, column: 28, scope: !12148)
!12148 = distinct !DILexicalBlock(scope: !12017, file: !3, line: 1638, column: 3)
!12149 = !DILocation(line: 1638, column: 14, scope: !12148)
!12150 = !DILocation(line: 1638, column: 8, scope: !12148)
!12151 = !DILocation(line: 1638, column: 33, scope: !12152)
!12152 = distinct !DILexicalBlock(scope: !12148, file: !3, line: 1638, column: 3)
!12153 = !DILocation(line: 1638, column: 32, scope: !12152)
!12154 = !DILocation(line: 1638, column: 3, scope: !12148)
!12155 = !DILocalVariable(name: "stmt", scope: !12156, file: !3, line: 1640, type: !2882)
!12156 = distinct !DILexicalBlock(scope: !12152, file: !3, line: 1639, column: 5)
!12157 = !DILocation(line: 1640, column: 14, scope: !12156)
!12158 = !DILocation(line: 1640, column: 21, scope: !12156)
!12159 = !DILocation(line: 1641, column: 24, scope: !12160)
!12160 = distinct !DILexicalBlock(scope: !12156, file: !3, line: 1641, column: 11)
!12161 = !DILocation(line: 1641, column: 11, scope: !12160)
!12162 = !DILocation(line: 1641, column: 30, scope: !12160)
!12163 = !DILocation(line: 1641, column: 11, scope: !12156)
!12164 = !DILocalVariable(name: "label", scope: !12165, file: !3, line: 1643, type: !2553)
!12165 = distinct !DILexicalBlock(scope: !12160, file: !3, line: 1642, column: 2)
!12166 = !DILocation(line: 1643, column: 9, scope: !12165)
!12167 = !DILocation(line: 1643, column: 37, scope: !12165)
!12168 = !DILocation(line: 1643, column: 17, scope: !12165)
!12169 = !DILocalVariable(name: "lp_nr", scope: !12165, file: !3, line: 1644, type: !2548)
!12170 = !DILocation(line: 1644, column: 8, scope: !12165)
!12171 = !DILocation(line: 1646, column: 4, scope: !12165)
!12172 = !DILocation(line: 1654, column: 8, scope: !12173)
!12173 = distinct !DILexicalBlock(scope: !12165, file: !3, line: 1654, column: 8)
!12174 = !DILocation(line: 1654, column: 8, scope: !12165)
!12175 = !DILocalVariable(name: "dest_gsi", scope: !12176, file: !3, line: 1656, type: !4074)
!12176 = distinct !DILexicalBlock(scope: !12173, file: !3, line: 1655, column: 6)
!12177 = !DILocation(line: 1656, column: 29, scope: !12176)
!12178 = !DILocation(line: 1656, column: 54, scope: !12176)
!12179 = !DILocation(line: 1656, column: 40, scope: !12176)
!12180 = !DILocation(line: 1657, column: 38, scope: !12176)
!12181 = !DILocation(line: 1657, column: 8, scope: !12176)
!12182 = !DILocation(line: 1658, column: 6, scope: !12176)
!12183 = !DILocation(line: 1660, column: 12, scope: !12165)
!12184 = !DILocation(line: 1660, column: 10, scope: !12165)
!12185 = !DILocation(line: 1661, column: 8, scope: !12186)
!12186 = distinct !DILexicalBlock(scope: !12165, file: !3, line: 1661, column: 8)
!12187 = !DILocation(line: 1661, column: 8, scope: !12165)
!12188 = !DILocalVariable(name: "lp", scope: !12189, file: !3, line: 1663, type: !3439)
!12189 = distinct !DILexicalBlock(scope: !12186, file: !3, line: 1662, column: 6)
!12190 = !DILocation(line: 1663, column: 23, scope: !12189)
!12191 = !DILocation(line: 1663, column: 60, scope: !12189)
!12192 = !DILocation(line: 1663, column: 28, scope: !12189)
!12193 = !DILocation(line: 1664, column: 8, scope: !12189)
!12194 = !DILocation(line: 1664, column: 12, scope: !12189)
!12195 = !DILocation(line: 1664, column: 29, scope: !12189)
!12196 = !DILocation(line: 1665, column: 6, scope: !12189)
!12197 = !DILocation(line: 1666, column: 2, scope: !12165)
!12198 = !DILocation(line: 1669, column: 19, scope: !12199)
!12199 = distinct !DILexicalBlock(scope: !12160, file: !3, line: 1668, column: 2)
!12200 = !DILocation(line: 1669, column: 25, scope: !12199)
!12201 = !DILocation(line: 1669, column: 4, scope: !12199)
!12202 = !DILocation(line: 1670, column: 4, scope: !12199)
!12203 = !DILocation(line: 1638, column: 3, scope: !12152)
!12204 = distinct !{!12204, !12154, !12205}
!12205 = !DILocation(line: 1672, column: 5, scope: !12148)
!12206 = !DILocation(line: 1675, column: 23, scope: !12017)
!12207 = !DILocation(line: 1675, column: 10, scope: !12017)
!12208 = !DILocation(line: 1676, column: 40, scope: !12017)
!12209 = !DILocation(line: 1676, column: 32, scope: !12017)
!12210 = !DILocation(line: 1676, column: 3, scope: !12017)
!12211 = !DILocation(line: 1677, column: 15, scope: !12017)
!12212 = !DILocation(line: 1677, column: 3, scope: !12017)
!12213 = !DILocation(line: 1679, column: 7, scope: !12214)
!12214 = distinct !DILexicalBlock(scope: !12017, file: !3, line: 1679, column: 7)
!12215 = !DILocation(line: 1679, column: 7, scope: !12017)
!12216 = !DILocation(line: 1680, column: 21, scope: !12214)
!12217 = !DILocation(line: 1680, column: 45, scope: !12214)
!12218 = !DILocation(line: 1680, column: 48, scope: !12214)
!12219 = !DILocation(line: 1680, column: 5, scope: !12214)
!12220 = !DILocation(line: 1681, column: 1, scope: !12017)
!12221 = distinct !DISubprogram(name: "gimple_can_duplicate_bb_p", scope: !3, file: !3, line: 4872, type: !4244, scopeLine: 4873, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!12222 = !DILocalVariable(name: "bb", arg: 1, scope: !12221, file: !3, line: 4872, type: !4241)
!12223 = !DILocation(line: 4872, column: 46, scope: !12221)
!12224 = !DILocation(line: 4874, column: 3, scope: !12221)
!12225 = distinct !DISubprogram(name: "gimple_duplicate_bb", scope: !3, file: !3, line: 4881, type: !4248, scopeLine: 4882, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!12226 = !DILocalVariable(name: "bb", arg: 1, scope: !12225, file: !3, line: 4881, type: !3523)
!12227 = !DILocation(line: 4881, column: 34, scope: !12225)
!12228 = !DILocalVariable(name: "new_bb", scope: !12225, file: !3, line: 4883, type: !3523)
!12229 = !DILocation(line: 4883, column: 15, scope: !12225)
!12230 = !DILocalVariable(name: "gsi", scope: !12225, file: !3, line: 4884, type: !4074)
!12231 = !DILocation(line: 4884, column: 24, scope: !12225)
!12232 = !DILocalVariable(name: "gsi_tgt", scope: !12225, file: !3, line: 4884, type: !4074)
!12233 = !DILocation(line: 4884, column: 29, scope: !12225)
!12234 = !DILocalVariable(name: "phis", scope: !12225, file: !3, line: 4885, type: !2872)
!12235 = !DILocation(line: 4885, column: 14, scope: !12225)
!12236 = !DILocation(line: 4885, column: 32, scope: !12225)
!12237 = !DILocation(line: 4885, column: 21, scope: !12225)
!12238 = !DILocalVariable(name: "phi", scope: !12225, file: !3, line: 4886, type: !2882)
!12239 = !DILocation(line: 4886, column: 10, scope: !12225)
!12240 = !DILocalVariable(name: "stmt", scope: !12225, file: !3, line: 4886, type: !2882)
!12241 = !DILocation(line: 4886, column: 15, scope: !12225)
!12242 = !DILocalVariable(name: "copy", scope: !12225, file: !3, line: 4886, type: !2882)
!12243 = !DILocation(line: 4886, column: 21, scope: !12225)
!12244 = !DILocation(line: 4888, column: 29, scope: !12225)
!12245 = !DILocation(line: 4888, column: 45, scope: !12225)
!12246 = !DILocation(line: 4888, column: 12, scope: !12225)
!12247 = !DILocation(line: 4888, column: 10, scope: !12225)
!12248 = !DILocation(line: 4892, column: 25, scope: !12249)
!12249 = distinct !DILexicalBlock(scope: !12225, file: !3, line: 4892, column: 3)
!12250 = !DILocation(line: 4892, column: 14, scope: !12249)
!12251 = !DILocation(line: 4892, column: 8, scope: !12249)
!12252 = !DILocation(line: 4892, column: 33, scope: !12253)
!12253 = distinct !DILexicalBlock(scope: !12249, file: !3, line: 4892, column: 3)
!12254 = !DILocation(line: 4892, column: 32, scope: !12253)
!12255 = !DILocation(line: 4892, column: 3, scope: !12249)
!12256 = !DILocation(line: 4894, column: 13, scope: !12257)
!12257 = distinct !DILexicalBlock(scope: !12253, file: !3, line: 4893, column: 5)
!12258 = !DILocation(line: 4894, column: 11, scope: !12257)
!12259 = !DILocation(line: 4895, column: 50, scope: !12257)
!12260 = !DILocation(line: 4895, column: 31, scope: !12257)
!12261 = !DILocation(line: 4895, column: 56, scope: !12257)
!12262 = !DILocation(line: 4895, column: 14, scope: !12257)
!12263 = !DILocation(line: 4895, column: 12, scope: !12257)
!12264 = !DILocation(line: 4896, column: 46, scope: !12257)
!12265 = !DILocation(line: 4896, column: 27, scope: !12257)
!12266 = !DILocation(line: 4896, column: 53, scope: !12257)
!12267 = !DILocation(line: 4897, column: 29, scope: !12257)
!12268 = !DILocation(line: 4897, column: 6, scope: !12257)
!12269 = !DILocation(line: 4896, column: 7, scope: !12257)
!12270 = !DILocation(line: 4898, column: 5, scope: !12257)
!12271 = !DILocation(line: 4892, column: 50, scope: !12253)
!12272 = !DILocation(line: 4892, column: 3, scope: !12253)
!12273 = distinct !{!12273, !12255, !12274}
!12274 = !DILocation(line: 4898, column: 5, scope: !12249)
!12275 = !DILocation(line: 4900, column: 27, scope: !12225)
!12276 = !DILocation(line: 4900, column: 13, scope: !12225)
!12277 = !DILocation(line: 4901, column: 28, scope: !12278)
!12278 = distinct !DILexicalBlock(scope: !12225, file: !3, line: 4901, column: 3)
!12279 = !DILocation(line: 4901, column: 14, scope: !12278)
!12280 = !DILocation(line: 4901, column: 8, scope: !12278)
!12281 = !DILocation(line: 4901, column: 34, scope: !12282)
!12282 = distinct !DILexicalBlock(scope: !12278, file: !3, line: 4901, column: 3)
!12283 = !DILocation(line: 4901, column: 33, scope: !12282)
!12284 = !DILocation(line: 4901, column: 3, scope: !12278)
!12285 = !DILocalVariable(name: "def_p", scope: !12286, file: !3, line: 4903, type: !4119)
!12286 = distinct !DILexicalBlock(scope: !12282, file: !3, line: 4902, column: 5)
!12287 = !DILocation(line: 4903, column: 21, scope: !12286)
!12288 = !DILocalVariable(name: "op_iter", scope: !12286, file: !3, line: 4904, type: !9645)
!12289 = !DILocation(line: 4904, column: 19, scope: !12286)
!12290 = !DILocation(line: 4906, column: 14, scope: !12286)
!12291 = !DILocation(line: 4906, column: 12, scope: !12286)
!12292 = !DILocation(line: 4907, column: 24, scope: !12293)
!12293 = distinct !DILexicalBlock(scope: !12286, file: !3, line: 4907, column: 11)
!12294 = !DILocation(line: 4907, column: 11, scope: !12293)
!12295 = !DILocation(line: 4907, column: 30, scope: !12293)
!12296 = !DILocation(line: 4907, column: 11, scope: !12286)
!12297 = !DILocation(line: 4908, column: 2, scope: !12293)
!12298 = !DILocation(line: 4912, column: 27, scope: !12286)
!12299 = !DILocation(line: 4912, column: 14, scope: !12286)
!12300 = !DILocation(line: 4912, column: 12, scope: !12286)
!12301 = !DILocation(line: 4913, column: 35, scope: !12286)
!12302 = !DILocation(line: 4913, column: 7, scope: !12286)
!12303 = !DILocation(line: 4915, column: 32, scope: !12286)
!12304 = !DILocation(line: 4915, column: 38, scope: !12286)
!12305 = !DILocation(line: 4915, column: 7, scope: !12286)
!12306 = !DILocation(line: 4916, column: 41, scope: !12286)
!12307 = !DILocation(line: 4916, column: 47, scope: !12286)
!12308 = !DILocation(line: 4916, column: 53, scope: !12286)
!12309 = !DILocation(line: 4916, column: 59, scope: !12286)
!12310 = !DILocation(line: 4916, column: 7, scope: !12286)
!12311 = !DILocation(line: 4920, column: 7, scope: !12312)
!12312 = distinct !DILexicalBlock(scope: !12286, file: !3, line: 4920, column: 7)
!12313 = !DILocation(line: 4920, column: 7, scope: !12314)
!12314 = distinct !DILexicalBlock(scope: !12312, file: !3, line: 4920, column: 7)
!12315 = !DILocation(line: 4921, column: 22, scope: !12314)
!12316 = !DILocation(line: 4921, column: 44, scope: !12314)
!12317 = !DILocation(line: 4921, column: 50, scope: !12314)
!12318 = !DILocation(line: 4921, column: 2, scope: !12314)
!12319 = distinct !{!12319, !12311, !12320}
!12320 = !DILocation(line: 4921, column: 55, scope: !12312)
!12321 = !DILocation(line: 4922, column: 5, scope: !12286)
!12322 = !DILocation(line: 4901, column: 51, scope: !12282)
!12323 = !DILocation(line: 4901, column: 3, scope: !12282)
!12324 = distinct !{!12324, !12284, !12325}
!12325 = !DILocation(line: 4922, column: 5, scope: !12278)
!12326 = !DILocation(line: 4924, column: 10, scope: !12225)
!12327 = !DILocation(line: 4924, column: 3, scope: !12225)
!12328 = distinct !DISubprogram(name: "gimple_split_edge", scope: !3, file: !3, line: 2462, type: !4252, scopeLine: 2463, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!12329 = !DILocalVariable(name: "edge_in", arg: 1, scope: !12328, file: !3, line: 2462, type: !2862)
!12330 = !DILocation(line: 2462, column: 25, scope: !12328)
!12331 = !DILocalVariable(name: "new_bb", scope: !12328, file: !3, line: 2464, type: !3523)
!12332 = !DILocation(line: 2464, column: 15, scope: !12328)
!12333 = !DILocalVariable(name: "after_bb", scope: !12328, file: !3, line: 2464, type: !3523)
!12334 = !DILocation(line: 2464, column: 23, scope: !12328)
!12335 = !DILocalVariable(name: "dest", scope: !12328, file: !3, line: 2464, type: !3523)
!12336 = !DILocation(line: 2464, column: 33, scope: !12328)
!12337 = !DILocalVariable(name: "new_edge", scope: !12328, file: !3, line: 2465, type: !2862)
!12338 = !DILocation(line: 2465, column: 8, scope: !12328)
!12339 = !DILocalVariable(name: "e", scope: !12328, file: !3, line: 2465, type: !2862)
!12340 = !DILocation(line: 2465, column: 18, scope: !12328)
!12341 = !DILocation(line: 2468, column: 3, scope: !12328)
!12342 = !DILocation(line: 2470, column: 10, scope: !12328)
!12343 = !DILocation(line: 2470, column: 19, scope: !12328)
!12344 = !DILocation(line: 2470, column: 8, scope: !12328)
!12345 = !DILocation(line: 2472, column: 33, scope: !12328)
!12346 = !DILocation(line: 2472, column: 14, scope: !12328)
!12347 = !DILocation(line: 2472, column: 12, scope: !12328)
!12348 = !DILocation(line: 2474, column: 29, scope: !12328)
!12349 = !DILocation(line: 2474, column: 12, scope: !12328)
!12350 = !DILocation(line: 2474, column: 10, scope: !12328)
!12351 = !DILocation(line: 2475, column: 23, scope: !12328)
!12352 = !DILocation(line: 2475, column: 3, scope: !12328)
!12353 = !DILocation(line: 2475, column: 11, scope: !12328)
!12354 = !DILocation(line: 2475, column: 21, scope: !12328)
!12355 = !DILocation(line: 2476, column: 19, scope: !12328)
!12356 = !DILocation(line: 2476, column: 28, scope: !12328)
!12357 = !DILocation(line: 2476, column: 3, scope: !12328)
!12358 = !DILocation(line: 2476, column: 11, scope: !12328)
!12359 = !DILocation(line: 2476, column: 17, scope: !12328)
!12360 = !DILocation(line: 2477, column: 25, scope: !12328)
!12361 = !DILocation(line: 2477, column: 33, scope: !12328)
!12362 = !DILocation(line: 2477, column: 14, scope: !12328)
!12363 = !DILocation(line: 2477, column: 12, scope: !12328)
!12364 = !DILocation(line: 2478, column: 3, scope: !12328)
!12365 = !DILocation(line: 2478, column: 13, scope: !12328)
!12366 = !DILocation(line: 2478, column: 25, scope: !12328)
!12367 = !DILocation(line: 2479, column: 21, scope: !12328)
!12368 = !DILocation(line: 2479, column: 30, scope: !12328)
!12369 = !DILocation(line: 2479, column: 3, scope: !12328)
!12370 = !DILocation(line: 2479, column: 13, scope: !12328)
!12371 = !DILocation(line: 2479, column: 19, scope: !12328)
!12372 = !DILocation(line: 2481, column: 33, scope: !12328)
!12373 = !DILocation(line: 2481, column: 42, scope: !12328)
!12374 = !DILocation(line: 2481, column: 7, scope: !12328)
!12375 = !DILocation(line: 2481, column: 5, scope: !12328)
!12376 = !DILocation(line: 2482, column: 3, scope: !12328)
!12377 = !DILocation(line: 2483, column: 23, scope: !12328)
!12378 = !DILocation(line: 2483, column: 33, scope: !12328)
!12379 = !DILocation(line: 2483, column: 3, scope: !12328)
!12380 = !DILocation(line: 2485, column: 10, scope: !12328)
!12381 = !DILocation(line: 2485, column: 3, scope: !12328)
!12382 = distinct !DISubprogram(name: "gimple_make_forwarder_block", scope: !3, file: !3, line: 4520, type: !4256, scopeLine: 4521, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!12383 = !DILocalVariable(name: "fallthru", arg: 1, scope: !12382, file: !3, line: 4520, type: !2862)
!12384 = !DILocation(line: 4520, column: 35, scope: !12382)
!12385 = !DILocalVariable(name: "e", scope: !12382, file: !3, line: 4522, type: !2862)
!12386 = !DILocation(line: 4522, column: 8, scope: !12382)
!12387 = !DILocalVariable(name: "ei", scope: !12382, file: !3, line: 4523, type: !7861)
!12388 = !DILocation(line: 4523, column: 17, scope: !12382)
!12389 = !DILocalVariable(name: "dummy", scope: !12382, file: !3, line: 4524, type: !3523)
!12390 = !DILocation(line: 4524, column: 15, scope: !12382)
!12391 = !DILocalVariable(name: "bb", scope: !12382, file: !3, line: 4524, type: !3523)
!12392 = !DILocation(line: 4524, column: 22, scope: !12382)
!12393 = !DILocalVariable(name: "var", scope: !12382, file: !3, line: 4525, type: !2553)
!12394 = !DILocation(line: 4525, column: 8, scope: !12382)
!12395 = !DILocalVariable(name: "gsi", scope: !12382, file: !3, line: 4526, type: !4074)
!12396 = !DILocation(line: 4526, column: 24, scope: !12382)
!12397 = !DILocation(line: 4528, column: 11, scope: !12382)
!12398 = !DILocation(line: 4528, column: 21, scope: !12382)
!12399 = !DILocation(line: 4528, column: 9, scope: !12382)
!12400 = !DILocation(line: 4529, column: 8, scope: !12382)
!12401 = !DILocation(line: 4529, column: 18, scope: !12382)
!12402 = !DILocation(line: 4529, column: 6, scope: !12382)
!12403 = !DILocation(line: 4531, column: 22, scope: !12404)
!12404 = distinct !DILexicalBlock(scope: !12382, file: !3, line: 4531, column: 7)
!12405 = !DILocation(line: 4531, column: 7, scope: !12404)
!12406 = !DILocation(line: 4531, column: 7, scope: !12382)
!12407 = !DILocation(line: 4532, column: 5, scope: !12404)
!12408 = !DILocation(line: 4536, column: 30, scope: !12409)
!12409 = distinct !DILexicalBlock(scope: !12382, file: !3, line: 4536, column: 3)
!12410 = !DILocation(line: 4536, column: 14, scope: !12409)
!12411 = !DILocation(line: 4536, column: 8, scope: !12409)
!12412 = !DILocation(line: 4536, column: 39, scope: !12413)
!12413 = distinct !DILexicalBlock(scope: !12409, file: !3, line: 4536, column: 3)
!12414 = !DILocation(line: 4536, column: 38, scope: !12413)
!12415 = !DILocation(line: 4536, column: 3, scope: !12409)
!12416 = !DILocalVariable(name: "phi", scope: !12417, file: !3, line: 4538, type: !2882)
!12417 = distinct !DILexicalBlock(scope: !12413, file: !3, line: 4537, column: 5)
!12418 = !DILocation(line: 4538, column: 14, scope: !12417)
!12419 = !DILocalVariable(name: "new_phi", scope: !12417, file: !3, line: 4538, type: !2882)
!12420 = !DILocation(line: 4538, column: 19, scope: !12417)
!12421 = !DILocation(line: 4540, column: 13, scope: !12417)
!12422 = !DILocation(line: 4540, column: 11, scope: !12417)
!12423 = !DILocation(line: 4541, column: 32, scope: !12417)
!12424 = !DILocation(line: 4541, column: 13, scope: !12417)
!12425 = !DILocation(line: 4541, column: 11, scope: !12417)
!12426 = !DILocation(line: 4542, column: 34, scope: !12417)
!12427 = !DILocation(line: 4542, column: 39, scope: !12417)
!12428 = !DILocation(line: 4542, column: 17, scope: !12417)
!12429 = !DILocation(line: 4542, column: 15, scope: !12417)
!12430 = !DILocation(line: 4543, column: 33, scope: !12417)
!12431 = !DILocation(line: 4543, column: 7, scope: !12417)
!12432 = !DILocation(line: 4543, column: 31, scope: !12417)
!12433 = !DILocation(line: 4544, column: 30, scope: !12417)
!12434 = !DILocation(line: 4544, column: 50, scope: !12417)
!12435 = !DILocation(line: 4544, column: 70, scope: !12417)
!12436 = !DILocation(line: 4544, column: 35, scope: !12417)
!12437 = !DILocation(line: 4544, column: 7, scope: !12417)
!12438 = !DILocation(line: 4545, column: 20, scope: !12417)
!12439 = !DILocation(line: 4545, column: 48, scope: !12417)
!12440 = !DILocation(line: 4545, column: 29, scope: !12417)
!12441 = !DILocation(line: 4545, column: 54, scope: !12417)
!12442 = !DILocation(line: 4545, column: 7, scope: !12417)
!12443 = !DILocation(line: 4547, column: 5, scope: !12417)
!12444 = !DILocation(line: 4536, column: 56, scope: !12413)
!12445 = !DILocation(line: 4536, column: 3, scope: !12413)
!12446 = distinct !{!12446, !12415, !12447}
!12447 = !DILocation(line: 4547, column: 5, scope: !12409)
!12448 = !DILocation(line: 4550, column: 3, scope: !12449)
!12449 = distinct !DILexicalBlock(scope: !12382, file: !3, line: 4550, column: 3)
!12450 = !DILocation(line: 4550, column: 3, scope: !12451)
!12451 = distinct !DILexicalBlock(scope: !12449, file: !3, line: 4550, column: 3)
!12452 = !DILocation(line: 4552, column: 11, scope: !12453)
!12453 = distinct !DILexicalBlock(scope: !12454, file: !3, line: 4552, column: 11)
!12454 = distinct !DILexicalBlock(scope: !12451, file: !3, line: 4551, column: 5)
!12455 = !DILocation(line: 4552, column: 16, scope: !12453)
!12456 = !DILocation(line: 4552, column: 13, scope: !12453)
!12457 = !DILocation(line: 4552, column: 11, scope: !12454)
!12458 = !DILocation(line: 4553, column: 2, scope: !12453)
!12459 = !DILocation(line: 4555, column: 28, scope: !12454)
!12460 = !DILocation(line: 4555, column: 7, scope: !12454)
!12461 = !DILocation(line: 4556, column: 5, scope: !12454)
!12462 = distinct !{!12462, !12448, !12463}
!12463 = !DILocation(line: 4556, column: 5, scope: !12449)
!12464 = !DILocation(line: 4557, column: 1, scope: !12382)
!12465 = distinct !DISubprogram(name: "gimple_block_ends_with_call_p", scope: !3, file: !3, line: 6461, type: !4261, scopeLine: 6462, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!12466 = !DILocalVariable(name: "bb", arg: 1, scope: !12465, file: !3, line: 6461, type: !3523)
!12467 = !DILocation(line: 6461, column: 44, scope: !12465)
!12468 = !DILocalVariable(name: "gsi", scope: !12465, file: !3, line: 6463, type: !4074)
!12469 = !DILocation(line: 6463, column: 24, scope: !12465)
!12470 = !DILocation(line: 6463, column: 52, scope: !12465)
!12471 = !DILocation(line: 6463, column: 30, scope: !12465)
!12472 = !DILocation(line: 6464, column: 26, scope: !12465)
!12473 = !DILocation(line: 6464, column: 10, scope: !12465)
!12474 = !DILocation(line: 6464, column: 3, scope: !12465)
!12475 = distinct !DISubprogram(name: "gimple_block_ends_with_condjump_p", scope: !3, file: !3, line: 6472, type: !4244, scopeLine: 6473, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!12476 = !DILocalVariable(name: "bb", arg: 1, scope: !12475, file: !3, line: 6472, type: !4241)
!12477 = !DILocation(line: 6472, column: 54, scope: !12475)
!12478 = !DILocalVariable(name: "stmt", scope: !12475, file: !3, line: 6474, type: !2882)
!12479 = !DILocation(line: 6474, column: 10, scope: !12475)
!12480 = !DILocation(line: 6474, column: 28, scope: !12475)
!12481 = !DILocation(line: 6474, column: 17, scope: !12475)
!12482 = !DILocation(line: 6475, column: 11, scope: !12475)
!12483 = !DILocation(line: 6475, column: 16, scope: !12475)
!12484 = !DILocation(line: 6475, column: 32, scope: !12475)
!12485 = !DILocation(line: 6475, column: 19, scope: !12475)
!12486 = !DILocation(line: 6475, column: 38, scope: !12475)
!12487 = !DILocation(line: 0, scope: !12475)
!12488 = !DILocation(line: 6475, column: 10, scope: !12475)
!12489 = !DILocation(line: 6475, column: 3, scope: !12475)
!12490 = distinct !DISubprogram(name: "gimple_flow_call_edges_add", scope: !3, file: !3, line: 6535, type: !4266, scopeLine: 6536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!12491 = !DILocalVariable(name: "blocks", arg: 1, scope: !12490, file: !3, line: 6535, type: !4268)
!12492 = !DILocation(line: 6535, column: 37, scope: !12490)
!12493 = !DILocalVariable(name: "i", scope: !12490, file: !3, line: 6537, type: !2548)
!12494 = !DILocation(line: 6537, column: 7, scope: !12490)
!12495 = !DILocalVariable(name: "blocks_split", scope: !12490, file: !3, line: 6538, type: !2548)
!12496 = !DILocation(line: 6538, column: 7, scope: !12490)
!12497 = !DILocalVariable(name: "last_bb", scope: !12490, file: !3, line: 6539, type: !2548)
!12498 = !DILocation(line: 6539, column: 7, scope: !12490)
!12499 = !DILocation(line: 6539, column: 17, scope: !12490)
!12500 = !DILocalVariable(name: "check_last_block", scope: !12490, file: !3, line: 6540, type: !2672)
!12501 = !DILocation(line: 6540, column: 8, scope: !12490)
!12502 = !DILocation(line: 6542, column: 7, scope: !12503)
!12503 = distinct !DILexicalBlock(scope: !12490, file: !3, line: 6542, column: 7)
!12504 = !DILocation(line: 6542, column: 22, scope: !12503)
!12505 = !DILocation(line: 6542, column: 7, scope: !12490)
!12506 = !DILocation(line: 6543, column: 5, scope: !12503)
!12507 = !DILocation(line: 6545, column: 9, scope: !12508)
!12508 = distinct !DILexicalBlock(scope: !12490, file: !3, line: 6545, column: 7)
!12509 = !DILocation(line: 6545, column: 7, scope: !12490)
!12510 = !DILocation(line: 6546, column: 22, scope: !12508)
!12511 = !DILocation(line: 6546, column: 5, scope: !12508)
!12512 = !DILocation(line: 6548, column: 24, scope: !12508)
!12513 = !DILocation(line: 6548, column: 22, scope: !12508)
!12514 = !DILocation(line: 6562, column: 7, scope: !12515)
!12515 = distinct !DILexicalBlock(scope: !12490, file: !3, line: 6562, column: 7)
!12516 = !DILocation(line: 6562, column: 7, scope: !12490)
!12517 = !DILocalVariable(name: "bb", scope: !12518, file: !3, line: 6564, type: !3523)
!12518 = distinct !DILexicalBlock(scope: !12515, file: !3, line: 6563, column: 5)
!12519 = !DILocation(line: 6564, column: 19, scope: !12518)
!12520 = !DILocation(line: 6564, column: 24, scope: !12518)
!12521 = !DILocation(line: 6564, column: 40, scope: !12518)
!12522 = !DILocalVariable(name: "gsi", scope: !12518, file: !3, line: 6565, type: !4074)
!12523 = !DILocation(line: 6565, column: 28, scope: !12518)
!12524 = !DILocation(line: 6565, column: 47, scope: !12518)
!12525 = !DILocation(line: 6565, column: 34, scope: !12518)
!12526 = !DILocalVariable(name: "t", scope: !12518, file: !3, line: 6566, type: !2882)
!12527 = !DILocation(line: 6566, column: 14, scope: !12518)
!12528 = !DILocation(line: 6568, column: 12, scope: !12529)
!12529 = distinct !DILexicalBlock(scope: !12518, file: !3, line: 6568, column: 11)
!12530 = !DILocation(line: 6568, column: 11, scope: !12518)
!12531 = !DILocation(line: 6569, column: 6, scope: !12529)
!12532 = !DILocation(line: 6569, column: 4, scope: !12529)
!12533 = !DILocation(line: 6569, column: 2, scope: !12529)
!12534 = !DILocation(line: 6571, column: 11, scope: !12535)
!12535 = distinct !DILexicalBlock(scope: !12518, file: !3, line: 6571, column: 11)
!12536 = !DILocation(line: 6571, column: 13, scope: !12535)
!12537 = !DILocation(line: 6571, column: 34, scope: !12535)
!12538 = !DILocation(line: 6571, column: 16, scope: !12535)
!12539 = !DILocation(line: 6571, column: 11, scope: !12518)
!12540 = !DILocalVariable(name: "e", scope: !12541, file: !3, line: 6573, type: !2862)
!12541 = distinct !DILexicalBlock(scope: !12535, file: !3, line: 6572, column: 2)
!12542 = !DILocation(line: 6573, column: 9, scope: !12541)
!12543 = !DILocation(line: 6575, column: 19, scope: !12541)
!12544 = !DILocation(line: 6575, column: 23, scope: !12541)
!12545 = !DILocation(line: 6575, column: 8, scope: !12541)
!12546 = !DILocation(line: 6575, column: 6, scope: !12541)
!12547 = !DILocation(line: 6576, column: 8, scope: !12548)
!12548 = distinct !DILexicalBlock(scope: !12541, file: !3, line: 6576, column: 8)
!12549 = !DILocation(line: 6576, column: 8, scope: !12541)
!12550 = !DILocation(line: 6578, column: 28, scope: !12551)
!12551 = distinct !DILexicalBlock(scope: !12548, file: !3, line: 6577, column: 6)
!12552 = !DILocation(line: 6578, column: 31, scope: !12551)
!12553 = !DILocation(line: 6578, column: 8, scope: !12551)
!12554 = !DILocation(line: 6579, column: 8, scope: !12551)
!12555 = !DILocation(line: 6580, column: 6, scope: !12551)
!12556 = !DILocation(line: 6581, column: 2, scope: !12541)
!12557 = !DILocation(line: 6582, column: 5, scope: !12518)
!12558 = !DILocation(line: 6587, column: 10, scope: !12559)
!12559 = distinct !DILexicalBlock(scope: !12490, file: !3, line: 6587, column: 3)
!12560 = !DILocation(line: 6587, column: 8, scope: !12559)
!12561 = !DILocation(line: 6587, column: 15, scope: !12562)
!12562 = distinct !DILexicalBlock(scope: !12559, file: !3, line: 6587, column: 3)
!12563 = !DILocation(line: 6587, column: 19, scope: !12562)
!12564 = !DILocation(line: 6587, column: 17, scope: !12562)
!12565 = !DILocation(line: 6587, column: 3, scope: !12559)
!12566 = !DILocalVariable(name: "bb", scope: !12567, file: !3, line: 6589, type: !3523)
!12567 = distinct !DILexicalBlock(scope: !12562, file: !3, line: 6588, column: 5)
!12568 = !DILocation(line: 6589, column: 19, scope: !12567)
!12569 = !DILocation(line: 6589, column: 24, scope: !12567)
!12570 = !DILocalVariable(name: "gsi", scope: !12567, file: !3, line: 6590, type: !4074)
!12571 = !DILocation(line: 6590, column: 28, scope: !12567)
!12572 = !DILocalVariable(name: "stmt", scope: !12567, file: !3, line: 6591, type: !2882)
!12573 = !DILocation(line: 6591, column: 14, scope: !12567)
!12574 = !DILocalVariable(name: "last_stmt", scope: !12567, file: !3, line: 6591, type: !2882)
!12575 = !DILocation(line: 6591, column: 20, scope: !12567)
!12576 = !DILocation(line: 6593, column: 12, scope: !12577)
!12577 = distinct !DILexicalBlock(scope: !12567, file: !3, line: 6593, column: 11)
!12578 = !DILocation(line: 6593, column: 11, scope: !12567)
!12579 = !DILocation(line: 6594, column: 2, scope: !12577)
!12580 = !DILocation(line: 6596, column: 11, scope: !12581)
!12581 = distinct !DILexicalBlock(scope: !12567, file: !3, line: 6596, column: 11)
!12582 = !DILocation(line: 6596, column: 18, scope: !12581)
!12583 = !DILocation(line: 6596, column: 22, scope: !12581)
!12584 = !DILocation(line: 6596, column: 11, scope: !12567)
!12585 = !DILocation(line: 6597, column: 2, scope: !12581)
!12586 = !DILocation(line: 6599, column: 26, scope: !12567)
!12587 = !DILocation(line: 6599, column: 13, scope: !12567)
!12588 = !DILocation(line: 6600, column: 12, scope: !12589)
!12589 = distinct !DILexicalBlock(scope: !12567, file: !3, line: 6600, column: 11)
!12590 = !DILocation(line: 6600, column: 11, scope: !12567)
!12591 = !DILocation(line: 6602, column: 16, scope: !12592)
!12592 = distinct !DILexicalBlock(scope: !12589, file: !3, line: 6601, column: 2)
!12593 = !DILocation(line: 6602, column: 14, scope: !12592)
!12594 = !DILocation(line: 6603, column: 4, scope: !12592)
!12595 = !DILocation(line: 6605, column: 15, scope: !12596)
!12596 = distinct !DILexicalBlock(scope: !12592, file: !3, line: 6604, column: 6)
!12597 = !DILocation(line: 6605, column: 13, scope: !12596)
!12598 = !DILocation(line: 6606, column: 30, scope: !12599)
!12599 = distinct !DILexicalBlock(scope: !12596, file: !3, line: 6606, column: 12)
!12600 = !DILocation(line: 6606, column: 12, scope: !12599)
!12601 = !DILocation(line: 6606, column: 12, scope: !12596)
!12602 = !DILocalVariable(name: "e", scope: !12603, file: !3, line: 6608, type: !2862)
!12603 = distinct !DILexicalBlock(scope: !12599, file: !3, line: 6607, column: 3)
!12604 = !DILocation(line: 6608, column: 10, scope: !12603)
!12605 = !DILocation(line: 6625, column: 9, scope: !12606)
!12606 = distinct !DILexicalBlock(scope: !12603, file: !3, line: 6625, column: 9)
!12607 = !DILocation(line: 6625, column: 17, scope: !12606)
!12608 = !DILocation(line: 6625, column: 14, scope: !12606)
!12609 = !DILocation(line: 6625, column: 9, scope: !12603)
!12610 = !DILocation(line: 6627, column: 26, scope: !12611)
!12611 = distinct !DILexicalBlock(scope: !12606, file: !3, line: 6626, column: 7)
!12612 = !DILocation(line: 6627, column: 30, scope: !12611)
!12613 = !DILocation(line: 6627, column: 13, scope: !12611)
!12614 = !DILocation(line: 6627, column: 11, scope: !12611)
!12615 = !DILocation(line: 6628, column: 13, scope: !12616)
!12616 = distinct !DILexicalBlock(scope: !12611, file: !3, line: 6628, column: 13)
!12617 = !DILocation(line: 6628, column: 13, scope: !12611)
!12618 = !DILocation(line: 6629, column: 16, scope: !12616)
!12619 = !DILocation(line: 6629, column: 4, scope: !12616)
!12620 = !DILocation(line: 6630, column: 7, scope: !12611)
!12621 = !DILocation(line: 6631, column: 16, scope: !12603)
!12622 = !DILocation(line: 6631, column: 20, scope: !12603)
!12623 = !DILocation(line: 6631, column: 5, scope: !12603)
!12624 = !DILocation(line: 6632, column: 3, scope: !12603)
!12625 = !DILocation(line: 6633, column: 8, scope: !12596)
!12626 = !DILocation(line: 6634, column: 6, scope: !12596)
!12627 = !DILocation(line: 6635, column: 12, scope: !12592)
!12628 = !DILocation(line: 6635, column: 11, scope: !12592)
!12629 = distinct !{!12629, !12594, !12630}
!12630 = !DILocation(line: 6635, column: 27, scope: !12592)
!12631 = !DILocation(line: 6636, column: 2, scope: !12592)
!12632 = !DILocation(line: 6637, column: 5, scope: !12567)
!12633 = !DILocation(line: 6587, column: 29, scope: !12562)
!12634 = !DILocation(line: 6587, column: 3, scope: !12562)
!12635 = distinct !{!12635, !12565, !12636}
!12636 = !DILocation(line: 6637, column: 5, scope: !12559)
!12637 = !DILocation(line: 6639, column: 7, scope: !12638)
!12638 = distinct !DILexicalBlock(scope: !12490, file: !3, line: 6639, column: 7)
!12639 = !DILocation(line: 6639, column: 7, scope: !12490)
!12640 = !DILocation(line: 6640, column: 5, scope: !12638)
!12641 = !DILocation(line: 6642, column: 10, scope: !12490)
!12642 = !DILocation(line: 6642, column: 3, scope: !12490)
!12643 = !DILocation(line: 6643, column: 1, scope: !12490)
!12644 = distinct !DISubprogram(name: "gimple_execute_on_growing_pred", scope: !3, file: !3, line: 6856, type: !4256, scopeLine: 6857, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!12645 = !DILocalVariable(name: "e", arg: 1, scope: !12644, file: !3, line: 6856, type: !2862)
!12646 = !DILocation(line: 6856, column: 38, scope: !12644)
!12647 = !DILocalVariable(name: "bb", scope: !12644, file: !3, line: 6858, type: !3523)
!12648 = !DILocation(line: 6858, column: 15, scope: !12644)
!12649 = !DILocation(line: 6858, column: 20, scope: !12644)
!12650 = !DILocation(line: 6858, column: 23, scope: !12644)
!12651 = !DILocation(line: 6860, column: 39, scope: !12652)
!12652 = distinct !DILexicalBlock(scope: !12644, file: !3, line: 6860, column: 7)
!12653 = !DILocation(line: 6860, column: 28, scope: !12652)
!12654 = !DILocation(line: 6860, column: 8, scope: !12652)
!12655 = !DILocation(line: 6860, column: 7, scope: !12644)
!12656 = !DILocation(line: 6861, column: 36, scope: !12652)
!12657 = !DILocation(line: 6861, column: 5, scope: !12652)
!12658 = !DILocation(line: 6862, column: 1, scope: !12644)
!12659 = distinct !DISubprogram(name: "gimple_execute_on_shrinking_pred", scope: !3, file: !3, line: 6868, type: !4256, scopeLine: 6869, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!12660 = !DILocalVariable(name: "e", arg: 1, scope: !12659, file: !3, line: 6868, type: !2862)
!12661 = !DILocation(line: 6868, column: 40, scope: !12659)
!12662 = !DILocation(line: 6870, column: 39, scope: !12663)
!12663 = distinct !DILexicalBlock(scope: !12659, file: !3, line: 6870, column: 7)
!12664 = !DILocation(line: 6870, column: 42, scope: !12663)
!12665 = !DILocation(line: 6870, column: 28, scope: !12663)
!12666 = !DILocation(line: 6870, column: 8, scope: !12663)
!12667 = !DILocation(line: 6870, column: 7, scope: !12659)
!12668 = !DILocation(line: 6871, column: 22, scope: !12663)
!12669 = !DILocation(line: 6871, column: 5, scope: !12663)
!12670 = !DILocation(line: 6872, column: 1, scope: !12659)
!12671 = distinct !DISubprogram(name: "gimple_lv_add_condition_to_bb", scope: !3, file: !3, line: 6920, type: !4293, scopeLine: 6923, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!12672 = !DILocalVariable(name: "first_head", arg: 1, scope: !12671, file: !3, line: 6920, type: !3523)
!12673 = !DILocation(line: 6920, column: 44, scope: !12671)
!12674 = !DILocalVariable(name: "second_head", arg: 2, scope: !12671, file: !3, line: 6921, type: !3523)
!12675 = !DILocation(line: 6921, column: 23, scope: !12671)
!12676 = !DILocalVariable(name: "cond_bb", arg: 3, scope: !12671, file: !3, line: 6922, type: !3523)
!12677 = !DILocation(line: 6922, column: 23, scope: !12671)
!12678 = !DILocalVariable(name: "cond_e", arg: 4, scope: !12671, file: !3, line: 6922, type: !2547)
!12679 = !DILocation(line: 6922, column: 38, scope: !12671)
!12680 = !DILocalVariable(name: "gsi", scope: !12671, file: !3, line: 6924, type: !4074)
!12681 = !DILocation(line: 6924, column: 24, scope: !12671)
!12682 = !DILocalVariable(name: "new_cond_expr", scope: !12671, file: !3, line: 6925, type: !2882)
!12683 = !DILocation(line: 6925, column: 10, scope: !12671)
!12684 = !DILocalVariable(name: "cond_expr", scope: !12671, file: !3, line: 6926, type: !2553)
!12685 = !DILocation(line: 6926, column: 8, scope: !12671)
!12686 = !DILocation(line: 6926, column: 27, scope: !12671)
!12687 = !DILocation(line: 6926, column: 20, scope: !12671)
!12688 = !DILocalVariable(name: "e0", scope: !12671, file: !3, line: 6927, type: !2862)
!12689 = !DILocation(line: 6927, column: 8, scope: !12671)
!12690 = !DILocation(line: 6930, column: 48, scope: !12671)
!12691 = !DILocation(line: 6930, column: 19, scope: !12671)
!12692 = !DILocation(line: 6930, column: 17, scope: !12671)
!12693 = !DILocation(line: 6934, column: 22, scope: !12671)
!12694 = !DILocation(line: 6934, column: 9, scope: !12671)
!12695 = !DILocation(line: 6935, column: 27, scope: !12671)
!12696 = !DILocation(line: 6935, column: 3, scope: !12671)
!12697 = !DILocation(line: 6939, column: 26, scope: !12671)
!12698 = !DILocation(line: 6939, column: 8, scope: !12671)
!12699 = !DILocation(line: 6939, column: 6, scope: !12671)
!12700 = !DILocation(line: 6940, column: 3, scope: !12671)
!12701 = !DILocation(line: 6940, column: 7, scope: !12671)
!12702 = !DILocation(line: 6940, column: 13, scope: !12671)
!12703 = !DILocation(line: 6941, column: 3, scope: !12671)
!12704 = !DILocation(line: 6941, column: 7, scope: !12671)
!12705 = !DILocation(line: 6941, column: 13, scope: !12671)
!12706 = !DILocation(line: 6942, column: 1, scope: !12671)
!12707 = distinct !DISubprogram(name: "gimple_lv_adjust_loop_header_phi", scope: !3, file: !3, line: 6887, type: !4297, scopeLine: 6889, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!12708 = !DILocalVariable(name: "first", arg: 1, scope: !12707, file: !3, line: 6887, type: !3523)
!12709 = !DILocation(line: 6887, column: 47, scope: !12707)
!12710 = !DILocalVariable(name: "second", arg: 2, scope: !12707, file: !3, line: 6887, type: !3523)
!12711 = !DILocation(line: 6887, column: 66, scope: !12707)
!12712 = !DILocalVariable(name: "new_head", arg: 3, scope: !12707, file: !3, line: 6888, type: !3523)
!12713 = !DILocation(line: 6888, column: 19, scope: !12707)
!12714 = !DILocalVariable(name: "e", arg: 4, scope: !12707, file: !3, line: 6888, type: !2862)
!12715 = !DILocation(line: 6888, column: 34, scope: !12707)
!12716 = !DILocalVariable(name: "phi1", scope: !12707, file: !3, line: 6890, type: !2882)
!12717 = !DILocation(line: 6890, column: 10, scope: !12707)
!12718 = !DILocalVariable(name: "phi2", scope: !12707, file: !3, line: 6890, type: !2882)
!12719 = !DILocation(line: 6890, column: 16, scope: !12707)
!12720 = !DILocalVariable(name: "psi1", scope: !12707, file: !3, line: 6891, type: !4074)
!12721 = !DILocation(line: 6891, column: 24, scope: !12707)
!12722 = !DILocalVariable(name: "psi2", scope: !12707, file: !3, line: 6891, type: !4074)
!12723 = !DILocation(line: 6891, column: 30, scope: !12707)
!12724 = !DILocalVariable(name: "def", scope: !12707, file: !3, line: 6892, type: !2553)
!12725 = !DILocation(line: 6892, column: 8, scope: !12707)
!12726 = !DILocalVariable(name: "e2", scope: !12707, file: !3, line: 6893, type: !2862)
!12727 = !DILocation(line: 6893, column: 8, scope: !12707)
!12728 = !DILocation(line: 6893, column: 24, scope: !12707)
!12729 = !DILocation(line: 6893, column: 34, scope: !12707)
!12730 = !DILocation(line: 6893, column: 13, scope: !12707)
!12731 = !DILocation(line: 6897, column: 3, scope: !12707)
!12732 = !DILocation(line: 6902, column: 31, scope: !12733)
!12733 = distinct !DILexicalBlock(scope: !12707, file: !3, line: 6902, column: 3)
!12734 = !DILocation(line: 6902, column: 15, scope: !12733)
!12735 = !DILocation(line: 6903, column: 31, scope: !12733)
!12736 = !DILocation(line: 6903, column: 15, scope: !12733)
!12737 = !DILocation(line: 6902, column: 8, scope: !12733)
!12738 = !DILocation(line: 6904, column: 9, scope: !12739)
!12739 = distinct !DILexicalBlock(scope: !12733, file: !3, line: 6902, column: 3)
!12740 = !DILocation(line: 6904, column: 26, scope: !12739)
!12741 = !DILocation(line: 6904, column: 30, scope: !12739)
!12742 = !DILocation(line: 6904, column: 29, scope: !12739)
!12743 = !DILocation(line: 0, scope: !12739)
!12744 = !DILocation(line: 6902, column: 3, scope: !12733)
!12745 = !DILocation(line: 6907, column: 14, scope: !12746)
!12746 = distinct !DILexicalBlock(scope: !12739, file: !3, line: 6906, column: 5)
!12747 = !DILocation(line: 6907, column: 12, scope: !12746)
!12748 = !DILocation(line: 6908, column: 14, scope: !12746)
!12749 = !DILocation(line: 6908, column: 12, scope: !12746)
!12750 = !DILocation(line: 6909, column: 13, scope: !12746)
!12751 = !DILocation(line: 6909, column: 11, scope: !12746)
!12752 = !DILocation(line: 6910, column: 20, scope: !12746)
!12753 = !DILocation(line: 6910, column: 26, scope: !12746)
!12754 = !DILocation(line: 6910, column: 31, scope: !12746)
!12755 = !DILocation(line: 6910, column: 69, scope: !12746)
!12756 = !DILocation(line: 6910, column: 75, scope: !12746)
!12757 = !DILocation(line: 6910, column: 34, scope: !12746)
!12758 = !DILocation(line: 6910, column: 7, scope: !12746)
!12759 = !DILocation(line: 6911, column: 5, scope: !12746)
!12760 = !DILocation(line: 6905, column: 8, scope: !12739)
!12761 = !DILocation(line: 6905, column: 27, scope: !12739)
!12762 = !DILocation(line: 6902, column: 3, scope: !12739)
!12763 = distinct !{!12763, !12744, !12764}
!12764 = !DILocation(line: 6911, column: 5, scope: !12733)
!12765 = !DILocation(line: 6912, column: 1, scope: !12707)
!12766 = distinct !DISubprogram(name: "extract_true_false_edges_from_block", scope: !3, file: !3, line: 7154, type: !4301, scopeLine: 7157, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!12767 = !DILocalVariable(name: "b", arg: 1, scope: !12766, file: !3, line: 7154, type: !3523)
!12768 = !DILocation(line: 7154, column: 50, scope: !12766)
!12769 = !DILocalVariable(name: "true_edge", arg: 2, scope: !12766, file: !3, line: 7155, type: !4303)
!12770 = !DILocation(line: 7155, column: 16, scope: !12766)
!12771 = !DILocalVariable(name: "false_edge", arg: 3, scope: !12766, file: !3, line: 7156, type: !4303)
!12772 = !DILocation(line: 7156, column: 16, scope: !12766)
!12773 = !DILocalVariable(name: "e", scope: !12766, file: !3, line: 7158, type: !2862)
!12774 = !DILocation(line: 7158, column: 8, scope: !12766)
!12775 = !DILocation(line: 7158, column: 12, scope: !12766)
!12776 = !DILocation(line: 7160, column: 7, scope: !12777)
!12777 = distinct !DILexicalBlock(scope: !12766, file: !3, line: 7160, column: 7)
!12778 = !DILocation(line: 7160, column: 10, scope: !12777)
!12779 = !DILocation(line: 7160, column: 16, scope: !12777)
!12780 = !DILocation(line: 7160, column: 7, scope: !12766)
!12781 = !DILocation(line: 7162, column: 20, scope: !12782)
!12782 = distinct !DILexicalBlock(scope: !12777, file: !3, line: 7161, column: 5)
!12783 = !DILocation(line: 7162, column: 8, scope: !12782)
!12784 = !DILocation(line: 7162, column: 18, scope: !12782)
!12785 = !DILocation(line: 7163, column: 21, scope: !12782)
!12786 = !DILocation(line: 7163, column: 8, scope: !12782)
!12787 = !DILocation(line: 7163, column: 19, scope: !12782)
!12788 = !DILocation(line: 7164, column: 5, scope: !12782)
!12789 = !DILocation(line: 7167, column: 21, scope: !12790)
!12790 = distinct !DILexicalBlock(scope: !12777, file: !3, line: 7166, column: 5)
!12791 = !DILocation(line: 7167, column: 8, scope: !12790)
!12792 = !DILocation(line: 7167, column: 19, scope: !12790)
!12793 = !DILocation(line: 7168, column: 20, scope: !12790)
!12794 = !DILocation(line: 7168, column: 8, scope: !12790)
!12795 = !DILocation(line: 7168, column: 18, scope: !12790)
!12796 = !DILocation(line: 7170, column: 1, scope: !12766)
!12797 = distinct !DISubprogram(name: "split_critical_edges", scope: !3, file: !3, line: 6980, type: !4320, scopeLine: 6981, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!12798 = !DILocalVariable(name: "bb", scope: !12797, file: !3, line: 6982, type: !3523)
!12799 = !DILocation(line: 6982, column: 15, scope: !12797)
!12800 = !DILocalVariable(name: "e", scope: !12797, file: !3, line: 6983, type: !2862)
!12801 = !DILocation(line: 6983, column: 8, scope: !12797)
!12802 = !DILocalVariable(name: "ei", scope: !12797, file: !3, line: 6984, type: !7861)
!12803 = !DILocation(line: 6984, column: 17, scope: !12797)
!12804 = !DILocation(line: 6989, column: 3, scope: !12797)
!12805 = !DILocation(line: 6990, column: 3, scope: !12806)
!12806 = distinct !DILexicalBlock(scope: !12797, file: !3, line: 6990, column: 3)
!12807 = !DILocation(line: 6990, column: 3, scope: !12808)
!12808 = distinct !DILexicalBlock(scope: !12806, file: !3, line: 6990, column: 3)
!12809 = !DILocation(line: 6992, column: 7, scope: !12810)
!12810 = distinct !DILexicalBlock(scope: !12811, file: !3, line: 6992, column: 7)
!12811 = distinct !DILexicalBlock(scope: !12808, file: !3, line: 6991, column: 5)
!12812 = !DILocation(line: 6992, column: 7, scope: !12813)
!12813 = distinct !DILexicalBlock(scope: !12810, file: !3, line: 6992, column: 7)
!12814 = !DILocation(line: 6994, column: 8, scope: !12815)
!12815 = distinct !DILexicalBlock(scope: !12816, file: !3, line: 6994, column: 8)
!12816 = distinct !DILexicalBlock(scope: !12813, file: !3, line: 6993, column: 9)
!12817 = !DILocation(line: 6994, column: 28, scope: !12815)
!12818 = !DILocation(line: 6994, column: 33, scope: !12815)
!12819 = !DILocation(line: 6994, column: 36, scope: !12815)
!12820 = !DILocation(line: 6994, column: 42, scope: !12815)
!12821 = !DILocation(line: 6994, column: 8, scope: !12816)
!12822 = !DILocation(line: 6995, column: 18, scope: !12815)
!12823 = !DILocation(line: 6995, column: 6, scope: !12815)
!12824 = !DILocation(line: 7003, column: 30, scope: !12825)
!12825 = distinct !DILexicalBlock(scope: !12815, file: !3, line: 7003, column: 13)
!12826 = !DILocation(line: 7003, column: 33, scope: !12825)
!12827 = !DILocation(line: 7003, column: 15, scope: !12825)
!12828 = !DILocation(line: 7004, column: 14, scope: !12825)
!12829 = !DILocation(line: 7004, column: 49, scope: !12825)
!12830 = !DILocation(line: 7004, column: 52, scope: !12825)
!12831 = !DILocation(line: 7004, column: 38, scope: !12825)
!12832 = !DILocation(line: 7004, column: 18, scope: !12825)
!12833 = !DILocation(line: 7005, column: 14, scope: !12825)
!12834 = !DILocation(line: 7005, column: 17, scope: !12825)
!12835 = !DILocation(line: 7005, column: 20, scope: !12825)
!12836 = !DILocation(line: 7005, column: 28, scope: !12825)
!12837 = !DILocation(line: 7005, column: 25, scope: !12825)
!12838 = !DILocation(line: 7006, column: 6, scope: !12825)
!12839 = !DILocation(line: 7006, column: 9, scope: !12825)
!12840 = !DILocation(line: 7006, column: 12, scope: !12825)
!12841 = !DILocation(line: 7006, column: 19, scope: !12825)
!12842 = !DILocation(line: 7006, column: 16, scope: !12825)
!12843 = !DILocation(line: 7007, column: 13, scope: !12825)
!12844 = !DILocation(line: 7007, column: 18, scope: !12825)
!12845 = !DILocation(line: 7007, column: 21, scope: !12825)
!12846 = !DILocation(line: 7007, column: 27, scope: !12825)
!12847 = !DILocation(line: 7003, column: 13, scope: !12815)
!12848 = !DILocalVariable(name: "gsi", scope: !12849, file: !3, line: 7009, type: !4074)
!12849 = distinct !DILexicalBlock(scope: !12825, file: !3, line: 7008, column: 6)
!12850 = !DILocation(line: 7009, column: 29, scope: !12849)
!12851 = !DILocation(line: 7011, column: 27, scope: !12849)
!12852 = !DILocation(line: 7011, column: 30, scope: !12849)
!12853 = !DILocation(line: 7011, column: 14, scope: !12849)
!12854 = !DILocation(line: 7012, column: 13, scope: !12855)
!12855 = distinct !DILexicalBlock(scope: !12849, file: !3, line: 7012, column: 12)
!12856 = !DILocation(line: 7013, column: 5, scope: !12855)
!12857 = !DILocation(line: 7013, column: 24, scope: !12855)
!12858 = !DILocation(line: 7013, column: 8, scope: !12855)
!12859 = !DILocation(line: 7014, column: 5, scope: !12855)
!12860 = !DILocation(line: 7014, column: 21, scope: !12855)
!12861 = !DILocation(line: 7014, column: 8, scope: !12855)
!12862 = !DILocation(line: 7014, column: 37, scope: !12855)
!12863 = !DILocation(line: 7012, column: 12, scope: !12849)
!12864 = !DILocation(line: 7015, column: 15, scope: !12855)
!12865 = !DILocation(line: 7015, column: 3, scope: !12855)
!12866 = !DILocation(line: 7016, column: 6, scope: !12849)
!12867 = !DILocation(line: 7017, column: 2, scope: !12816)
!12868 = distinct !{!12868, !12809, !12869}
!12869 = !DILocation(line: 7017, column: 2, scope: !12810)
!12870 = !DILocation(line: 7018, column: 5, scope: !12811)
!12871 = distinct !{!12871, !12805, !12872}
!12872 = !DILocation(line: 7018, column: 5, scope: !12806)
!12873 = !DILocation(line: 7019, column: 3, scope: !12797)
!12874 = !DILocation(line: 7020, column: 3, scope: !12797)
!12875 = distinct !DISubprogram(name: "gimplify_build3", scope: !3, file: !3, line: 7047, type: !12876, scopeLine: 7049, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!12876 = !DISubroutineType(types: !12877)
!12877 = !{!2553, !4825, !141, !2553, !2553, !2553, !2553}
!12878 = !DILocalVariable(name: "gsi", arg: 1, scope: !12875, file: !3, line: 7047, type: !4825)
!12879 = !DILocation(line: 7047, column: 40, scope: !12875)
!12880 = !DILocalVariable(name: "code", arg: 2, scope: !12875, file: !3, line: 7047, type: !141)
!12881 = !DILocation(line: 7047, column: 60, scope: !12875)
!12882 = !DILocalVariable(name: "type", arg: 3, scope: !12875, file: !3, line: 7048, type: !2553)
!12883 = !DILocation(line: 7048, column: 9, scope: !12875)
!12884 = !DILocalVariable(name: "a", arg: 4, scope: !12875, file: !3, line: 7048, type: !2553)
!12885 = !DILocation(line: 7048, column: 20, scope: !12875)
!12886 = !DILocalVariable(name: "b", arg: 5, scope: !12875, file: !3, line: 7048, type: !2553)
!12887 = !DILocation(line: 7048, column: 28, scope: !12875)
!12888 = !DILocalVariable(name: "c", arg: 6, scope: !12875, file: !3, line: 7048, type: !2553)
!12889 = !DILocation(line: 7048, column: 36, scope: !12875)
!12890 = !DILocalVariable(name: "ret", scope: !12875, file: !3, line: 7050, type: !2553)
!12891 = !DILocation(line: 7050, column: 8, scope: !12875)
!12892 = !DILocalVariable(name: "loc", scope: !12875, file: !3, line: 7051, type: !2680)
!12893 = !DILocation(line: 7051, column: 14, scope: !12875)
!12894 = !DILocation(line: 7051, column: 48, scope: !12875)
!12895 = !DILocation(line: 7051, column: 37, scope: !12875)
!12896 = !DILocation(line: 7051, column: 20, scope: !12875)
!12897 = !DILocation(line: 7053, column: 9, scope: !12875)
!12898 = !DILocation(line: 7053, column: 7, scope: !12875)
!12899 = !DILocation(line: 7054, column: 3, scope: !12875)
!12900 = !DILocation(line: 7056, column: 36, scope: !12875)
!12901 = !DILocation(line: 7056, column: 41, scope: !12875)
!12902 = !DILocation(line: 7056, column: 10, scope: !12875)
!12903 = !DILocation(line: 7056, column: 3, scope: !12875)
!12904 = distinct !DISubprogram(name: "gimplify_build2", scope: !3, file: !3, line: 7064, type: !12905, scopeLine: 7066, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!12905 = !DISubroutineType(types: !12906)
!12906 = !{!2553, !4825, !141, !2553, !2553, !2553}
!12907 = !DILocalVariable(name: "gsi", arg: 1, scope: !12904, file: !3, line: 7064, type: !4825)
!12908 = !DILocation(line: 7064, column: 40, scope: !12904)
!12909 = !DILocalVariable(name: "code", arg: 2, scope: !12904, file: !3, line: 7064, type: !141)
!12910 = !DILocation(line: 7064, column: 60, scope: !12904)
!12911 = !DILocalVariable(name: "type", arg: 3, scope: !12904, file: !3, line: 7065, type: !2553)
!12912 = !DILocation(line: 7065, column: 9, scope: !12904)
!12913 = !DILocalVariable(name: "a", arg: 4, scope: !12904, file: !3, line: 7065, type: !2553)
!12914 = !DILocation(line: 7065, column: 20, scope: !12904)
!12915 = !DILocalVariable(name: "b", arg: 5, scope: !12904, file: !3, line: 7065, type: !2553)
!12916 = !DILocation(line: 7065, column: 28, scope: !12904)
!12917 = !DILocalVariable(name: "ret", scope: !12904, file: !3, line: 7067, type: !2553)
!12918 = !DILocation(line: 7067, column: 8, scope: !12904)
!12919 = !DILocation(line: 7069, column: 9, scope: !12904)
!12920 = !DILocation(line: 7069, column: 7, scope: !12904)
!12921 = !DILocation(line: 7070, column: 3, scope: !12904)
!12922 = !DILocation(line: 7072, column: 36, scope: !12904)
!12923 = !DILocation(line: 7072, column: 41, scope: !12904)
!12924 = !DILocation(line: 7072, column: 10, scope: !12904)
!12925 = !DILocation(line: 7072, column: 3, scope: !12904)
!12926 = distinct !DISubprogram(name: "gimplify_build1", scope: !3, file: !3, line: 7080, type: !12927, scopeLine: 7082, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!12927 = !DISubroutineType(types: !12928)
!12928 = !{!2553, !4825, !141, !2553, !2553}
!12929 = !DILocalVariable(name: "gsi", arg: 1, scope: !12926, file: !3, line: 7080, type: !4825)
!12930 = !DILocation(line: 7080, column: 40, scope: !12926)
!12931 = !DILocalVariable(name: "code", arg: 2, scope: !12926, file: !3, line: 7080, type: !141)
!12932 = !DILocation(line: 7080, column: 60, scope: !12926)
!12933 = !DILocalVariable(name: "type", arg: 3, scope: !12926, file: !3, line: 7080, type: !2553)
!12934 = !DILocation(line: 7080, column: 71, scope: !12926)
!12935 = !DILocalVariable(name: "a", arg: 4, scope: !12926, file: !3, line: 7081, type: !2553)
!12936 = !DILocation(line: 7081, column: 9, scope: !12926)
!12937 = !DILocalVariable(name: "ret", scope: !12926, file: !3, line: 7083, type: !2553)
!12938 = !DILocation(line: 7083, column: 8, scope: !12926)
!12939 = !DILocation(line: 7085, column: 9, scope: !12926)
!12940 = !DILocation(line: 7085, column: 7, scope: !12926)
!12941 = !DILocation(line: 7086, column: 3, scope: !12926)
!12942 = !DILocation(line: 7088, column: 36, scope: !12926)
!12943 = !DILocation(line: 7088, column: 41, scope: !12926)
!12944 = !DILocation(line: 7088, column: 10, scope: !12926)
!12945 = !DILocation(line: 7088, column: 3, scope: !12926)
!12946 = distinct !DISubprogram(name: "execute_warn_function_return", scope: !3, file: !3, line: 7097, type: !4320, scopeLine: 7098, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!12947 = !DILocalVariable(name: "location", scope: !12946, file: !3, line: 7099, type: !2682)
!12948 = !DILocation(line: 7099, column: 19, scope: !12946)
!12949 = !DILocalVariable(name: "last", scope: !12946, file: !3, line: 7100, type: !2882)
!12950 = !DILocation(line: 7100, column: 10, scope: !12946)
!12951 = !DILocalVariable(name: "e", scope: !12946, file: !3, line: 7101, type: !2862)
!12952 = !DILocation(line: 7101, column: 8, scope: !12946)
!12953 = !DILocalVariable(name: "ei", scope: !12946, file: !3, line: 7102, type: !7861)
!12954 = !DILocation(line: 7102, column: 17, scope: !12946)
!12955 = !DILocation(line: 7105, column: 7, scope: !12956)
!12956 = distinct !DILexicalBlock(scope: !12946, file: !3, line: 7105, column: 7)
!12957 = !DILocation(line: 7106, column: 7, scope: !12956)
!12958 = !DILocation(line: 7106, column: 10, scope: !12956)
!12959 = !DILocation(line: 7106, column: 45, scope: !12956)
!12960 = !DILocation(line: 7105, column: 7, scope: !12946)
!12961 = !DILocation(line: 7108, column: 16, scope: !12962)
!12962 = distinct !DILexicalBlock(scope: !12956, file: !3, line: 7107, column: 5)
!12963 = !DILocation(line: 7109, column: 7, scope: !12964)
!12964 = distinct !DILexicalBlock(scope: !12962, file: !3, line: 7109, column: 7)
!12965 = !DILocation(line: 7109, column: 7, scope: !12966)
!12966 = distinct !DILexicalBlock(scope: !12964, file: !3, line: 7109, column: 7)
!12967 = !DILocation(line: 7111, column: 22, scope: !12968)
!12968 = distinct !DILexicalBlock(scope: !12966, file: !3, line: 7110, column: 2)
!12969 = !DILocation(line: 7111, column: 25, scope: !12968)
!12970 = !DILocation(line: 7111, column: 11, scope: !12968)
!12971 = !DILocation(line: 7111, column: 9, scope: !12968)
!12972 = !DILocation(line: 7112, column: 21, scope: !12973)
!12973 = distinct !DILexicalBlock(scope: !12968, file: !3, line: 7112, column: 8)
!12974 = !DILocation(line: 7112, column: 8, scope: !12973)
!12975 = !DILocation(line: 7112, column: 27, scope: !12973)
!12976 = !DILocation(line: 7113, column: 8, scope: !12973)
!12977 = !DILocation(line: 7113, column: 40, scope: !12973)
!12978 = !DILocation(line: 7113, column: 23, scope: !12973)
!12979 = !DILocation(line: 7113, column: 21, scope: !12973)
!12980 = !DILocation(line: 7113, column: 47, scope: !12973)
!12981 = !DILocation(line: 7112, column: 8, scope: !12968)
!12982 = !DILocation(line: 7114, column: 6, scope: !12973)
!12983 = !DILocation(line: 7115, column: 2, scope: !12968)
!12984 = distinct !{!12984, !12963, !12985}
!12985 = !DILocation(line: 7115, column: 2, scope: !12964)
!12986 = !DILocation(line: 7116, column: 11, scope: !12987)
!12987 = distinct !DILexicalBlock(scope: !12962, file: !3, line: 7116, column: 11)
!12988 = !DILocation(line: 7116, column: 20, scope: !12987)
!12989 = !DILocation(line: 7116, column: 11, scope: !12962)
!12990 = !DILocation(line: 7117, column: 13, scope: !12987)
!12991 = !DILocation(line: 7117, column: 19, scope: !12987)
!12992 = !DILocation(line: 7117, column: 11, scope: !12987)
!12993 = !DILocation(line: 7117, column: 2, scope: !12987)
!12994 = !DILocation(line: 7118, column: 19, scope: !12962)
!12995 = !DILocation(line: 7118, column: 7, scope: !12962)
!12996 = !DILocation(line: 7119, column: 5, scope: !12962)
!12997 = !DILocation(line: 7123, column: 12, scope: !12998)
!12998 = distinct !DILexicalBlock(scope: !12956, file: !3, line: 7123, column: 12)
!12999 = !DILocation(line: 7124, column: 5, scope: !12998)
!13000 = !DILocation(line: 7124, column: 9, scope: !12998)
!13001 = !DILocation(line: 7125, column: 5, scope: !12998)
!13002 = !DILocation(line: 7125, column: 8, scope: !12998)
!13003 = !DILocation(line: 7125, column: 43, scope: !12998)
!13004 = !DILocation(line: 7126, column: 5, scope: !12998)
!13005 = !DILocation(line: 7126, column: 9, scope: !12998)
!13006 = !DILocation(line: 7123, column: 12, scope: !12956)
!13007 = !DILocation(line: 7128, column: 7, scope: !13008)
!13008 = distinct !DILexicalBlock(scope: !13009, file: !3, line: 7128, column: 7)
!13009 = distinct !DILexicalBlock(scope: !12998, file: !3, line: 7127, column: 5)
!13010 = !DILocation(line: 7128, column: 7, scope: !13011)
!13011 = distinct !DILexicalBlock(scope: !13008, file: !3, line: 7128, column: 7)
!13012 = !DILocalVariable(name: "last", scope: !13013, file: !3, line: 7130, type: !2882)
!13013 = distinct !DILexicalBlock(scope: !13011, file: !3, line: 7129, column: 2)
!13014 = !DILocation(line: 7130, column: 11, scope: !13013)
!13015 = !DILocation(line: 7130, column: 29, scope: !13013)
!13016 = !DILocation(line: 7130, column: 32, scope: !13013)
!13017 = !DILocation(line: 7130, column: 18, scope: !13013)
!13018 = !DILocation(line: 7131, column: 21, scope: !13019)
!13019 = distinct !DILexicalBlock(scope: !13013, file: !3, line: 7131, column: 8)
!13020 = !DILocation(line: 7131, column: 8, scope: !13019)
!13021 = !DILocation(line: 7131, column: 27, scope: !13019)
!13022 = !DILocation(line: 7132, column: 8, scope: !13019)
!13023 = !DILocation(line: 7132, column: 33, scope: !13019)
!13024 = !DILocation(line: 7132, column: 11, scope: !13019)
!13025 = !DILocation(line: 7132, column: 39, scope: !13019)
!13026 = !DILocation(line: 7133, column: 8, scope: !13019)
!13027 = !DILocation(line: 7133, column: 33, scope: !13019)
!13028 = !DILocation(line: 7133, column: 12, scope: !13019)
!13029 = !DILocation(line: 7131, column: 8, scope: !13013)
!13030 = !DILocation(line: 7135, column: 36, scope: !13031)
!13031 = distinct !DILexicalBlock(scope: !13019, file: !3, line: 7134, column: 6)
!13032 = !DILocation(line: 7135, column: 19, scope: !13031)
!13033 = !DILocation(line: 7135, column: 17, scope: !13031)
!13034 = !DILocation(line: 7136, column: 12, scope: !13035)
!13035 = distinct !DILexicalBlock(scope: !13031, file: !3, line: 7136, column: 12)
!13036 = !DILocation(line: 7136, column: 21, scope: !13035)
!13037 = !DILocation(line: 7136, column: 12, scope: !13031)
!13038 = !DILocation(line: 7137, column: 16, scope: !13035)
!13039 = !DILocation(line: 7137, column: 22, scope: !13035)
!13040 = !DILocation(line: 7137, column: 14, scope: !13035)
!13041 = !DILocation(line: 7137, column: 5, scope: !13035)
!13042 = !DILocation(line: 7138, column: 20, scope: !13031)
!13043 = !DILocation(line: 7138, column: 8, scope: !13031)
!13044 = !DILocation(line: 7139, column: 8, scope: !13031)
!13045 = !DILocation(line: 7139, column: 37, scope: !13031)
!13046 = !DILocation(line: 7140, column: 8, scope: !13031)
!13047 = !DILocation(line: 7142, column: 2, scope: !13013)
!13048 = distinct !{!13048, !13007, !13049}
!13049 = !DILocation(line: 7142, column: 2, scope: !13008)
!13050 = !DILocation(line: 7143, column: 5, scope: !13009)
!13051 = !DILocation(line: 7144, column: 3, scope: !12946)
!13052 = distinct !DISubprogram(name: "execute_warn_function_noreturn", scope: !3, file: !3, line: 7194, type: !4320, scopeLine: 7195, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13053 = !DILocation(line: 7196, column: 7, scope: !13054)
!13054 = distinct !DILexicalBlock(scope: !13052, file: !3, line: 7196, column: 7)
!13055 = !DILocation(line: 7197, column: 7, scope: !13054)
!13056 = !DILocation(line: 7197, column: 11, scope: !13054)
!13057 = !DILocation(line: 7198, column: 7, scope: !13054)
!13058 = !DILocation(line: 7198, column: 10, scope: !13054)
!13059 = !DILocation(line: 7198, column: 45, scope: !13054)
!13060 = !DILocation(line: 7199, column: 7, scope: !13054)
!13061 = !DILocation(line: 7199, column: 22, scope: !13054)
!13062 = !DILocation(line: 7199, column: 45, scope: !13054)
!13063 = !DILocation(line: 7199, column: 51, scope: !13054)
!13064 = !DILocation(line: 7199, column: 11, scope: !13054)
!13065 = !DILocation(line: 7196, column: 7, scope: !13052)
!13066 = !DILocation(line: 7200, column: 17, scope: !13054)
!13067 = !DILocation(line: 7200, column: 5, scope: !13054)
!13068 = !DILocation(line: 7203, column: 3, scope: !13052)
!13069 = distinct !DISubprogram(name: "gate_warn_unused_result", scope: !3, file: !3, line: 7297, type: !4316, scopeLine: 7298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13070 = !DILocation(line: 7299, column: 10, scope: !13069)
!13071 = !DILocation(line: 7299, column: 3, scope: !13069)
!13072 = distinct !DISubprogram(name: "run_warn_unused_result", scope: !3, file: !3, line: 7290, type: !4320, scopeLine: 7291, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13073 = !DILocation(line: 7292, column: 39, scope: !13072)
!13074 = !DILocation(line: 7292, column: 26, scope: !13072)
!13075 = !DILocation(line: 7292, column: 3, scope: !13072)
!13076 = !DILocation(line: 7293, column: 3, scope: !13072)
!13077 = distinct !DISubprogram(name: "VEC_basic_block_gc_safe_grow", scope: !382, file: !382, line: 282, type: !4396, scopeLine: 282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13078 = !DILocalVariable(name: "vec_", arg: 1, scope: !13077, file: !382, line: 282, type: !4398)
!13079 = !DILocation(line: 282, column: 1, scope: !13077)
!13080 = !DILocalVariable(name: "size_", arg: 2, scope: !13077, file: !382, line: 282, type: !2548)
!13081 = !DILocation(line: 0, scope: !13077)
!13082 = distinct !DISubprogram(name: "VEC_basic_block_gc_reserve_exact", scope: !382, file: !382, line: 282, type: !13083, scopeLine: 282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13083 = !DISubroutineType(types: !13084)
!13084 = !{!2548, !4398, !2548}
!13085 = !DILocalVariable(name: "vec_", arg: 1, scope: !13082, file: !382, line: 282, type: !4398)
!13086 = !DILocation(line: 282, column: 1, scope: !13082)
!13087 = !DILocalVariable(name: "alloc_", arg: 2, scope: !13082, file: !382, line: 282, type: !2548)
!13088 = !DILocalVariable(name: "extend", scope: !13082, file: !382, line: 282, type: !2548)
!13089 = !DILocation(line: 282, column: 1, scope: !13090)
!13090 = distinct !DILexicalBlock(scope: !13082, file: !382, line: 282, column: 1)
!13091 = distinct !DISubprogram(name: "VEC_basic_block_base_space", scope: !382, file: !382, line: 281, type: !13092, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13092 = !DISubroutineType(types: !13093)
!13093 = !{!2548, !4406, !2548}
!13094 = !DILocalVariable(name: "vec_", arg: 1, scope: !13091, file: !382, line: 281, type: !4406)
!13095 = !DILocation(line: 281, column: 1, scope: !13091)
!13096 = !DILocalVariable(name: "alloc_", arg: 2, scope: !13091, file: !382, line: 281, type: !2548)
!13097 = distinct !DISubprogram(name: "build_gimple_cfg", scope: !3, file: !3, line: 172, type: !7179, scopeLine: 173, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13098 = !DILocalVariable(name: "seq", arg: 1, scope: !13097, file: !3, line: 172, type: !2872)
!13099 = !DILocation(line: 172, column: 30, scope: !13097)
!13100 = !DILocation(line: 175, column: 3, scope: !13097)
!13101 = !DILocation(line: 177, column: 3, scope: !13097)
!13102 = !DILocation(line: 179, column: 3, scope: !13097)
!13103 = !DILocation(line: 181, column: 23, scope: !13097)
!13104 = !DILocation(line: 182, column: 16, scope: !13097)
!13105 = !DILocation(line: 182, column: 3, scope: !13097)
!13106 = !DILocation(line: 189, column: 7, scope: !13107)
!13107 = distinct !DILexicalBlock(scope: !13097, file: !3, line: 189, column: 7)
!13108 = !DILocation(line: 189, column: 7, scope: !13097)
!13109 = !DILocation(line: 190, column: 5, scope: !13107)
!13110 = !DILocation(line: 193, column: 7, scope: !13111)
!13111 = distinct !DILexicalBlock(scope: !13097, file: !3, line: 193, column: 7)
!13112 = !DILocation(line: 193, column: 22, scope: !13111)
!13113 = !DILocation(line: 193, column: 7, scope: !13097)
!13114 = !DILocation(line: 194, column: 22, scope: !13111)
!13115 = !DILocation(line: 194, column: 5, scope: !13111)
!13116 = !DILocation(line: 197, column: 7, scope: !13117)
!13117 = distinct !DILexicalBlock(scope: !13097, file: !3, line: 197, column: 7)
!13118 = !DILocation(line: 197, column: 61, scope: !13117)
!13119 = !DILocation(line: 197, column: 52, scope: !13117)
!13120 = !DILocation(line: 197, column: 50, scope: !13117)
!13121 = !DILocation(line: 197, column: 7, scope: !13097)
!13122 = !DILocation(line: 198, column: 5, scope: !13117)
!13123 = !DILocation(line: 201, column: 3, scope: !13097)
!13124 = !DILocation(line: 206, column: 3, scope: !13097)
!13125 = !DILocation(line: 209, column: 29, scope: !13097)
!13126 = !DILocation(line: 209, column: 27, scope: !13097)
!13127 = !DILocation(line: 211, column: 3, scope: !13097)
!13128 = !DILocation(line: 212, column: 3, scope: !13097)
!13129 = !DILocation(line: 213, column: 16, scope: !13097)
!13130 = !DILocation(line: 213, column: 3, scope: !13097)
!13131 = !DILocalVariable(name: "local_dump_flags", scope: !13132, file: !3, line: 219, type: !2548)
!13132 = distinct !DILexicalBlock(scope: !13097, file: !3, line: 218, column: 3)
!13133 = !DILocation(line: 219, column: 9, scope: !13132)
!13134 = !DILocalVariable(name: "vcg_file", scope: !13132, file: !3, line: 220, type: !4131)
!13135 = !DILocation(line: 220, column: 11, scope: !13132)
!13136 = !DILocation(line: 220, column: 22, scope: !13132)
!13137 = !DILocation(line: 221, column: 9, scope: !13138)
!13138 = distinct !DILexicalBlock(scope: !13132, file: !3, line: 221, column: 9)
!13139 = !DILocation(line: 221, column: 9, scope: !13132)
!13140 = !DILocation(line: 223, column: 18, scope: !13141)
!13141 = distinct !DILexicalBlock(scope: !13138, file: !3, line: 222, column: 7)
!13142 = !DILocation(line: 223, column: 2, scope: !13141)
!13143 = !DILocation(line: 224, column: 21, scope: !13141)
!13144 = !DILocation(line: 224, column: 2, scope: !13141)
!13145 = !DILocation(line: 225, column: 7, scope: !13141)
!13146 = !DILocation(line: 231, column: 1, scope: !13097)
!13147 = distinct !DISubprogram(name: "make_blocks", scope: !3, file: !3, line: 358, type: !7179, scopeLine: 359, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13148 = !DILocalVariable(name: "seq", arg: 1, scope: !13147, file: !3, line: 358, type: !2872)
!13149 = !DILocation(line: 358, column: 25, scope: !13147)
!13150 = !DILocalVariable(name: "i", scope: !13147, file: !3, line: 360, type: !4074)
!13151 = !DILocation(line: 360, column: 24, scope: !13147)
!13152 = !DILocation(line: 360, column: 39, scope: !13147)
!13153 = !DILocation(line: 360, column: 28, scope: !13147)
!13154 = !DILocalVariable(name: "stmt", scope: !13147, file: !3, line: 361, type: !2882)
!13155 = !DILocation(line: 361, column: 10, scope: !13147)
!13156 = !DILocalVariable(name: "start_new_block", scope: !13147, file: !3, line: 362, type: !2672)
!13157 = !DILocation(line: 362, column: 8, scope: !13147)
!13158 = !DILocalVariable(name: "first_stmt_of_seq", scope: !13147, file: !3, line: 363, type: !2672)
!13159 = !DILocation(line: 363, column: 8, scope: !13147)
!13160 = !DILocalVariable(name: "bb", scope: !13147, file: !3, line: 364, type: !3523)
!13161 = !DILocation(line: 364, column: 15, scope: !13147)
!13162 = !DILocation(line: 364, column: 20, scope: !13147)
!13163 = !DILocation(line: 366, column: 3, scope: !13147)
!13164 = !DILocation(line: 366, column: 11, scope: !13147)
!13165 = !DILocation(line: 366, column: 10, scope: !13147)
!13166 = !DILocalVariable(name: "prev_stmt", scope: !13167, file: !3, line: 368, type: !2882)
!13167 = distinct !DILexicalBlock(scope: !13147, file: !3, line: 367, column: 5)
!13168 = !DILocation(line: 368, column: 14, scope: !13167)
!13169 = !DILocation(line: 370, column: 19, scope: !13167)
!13170 = !DILocation(line: 370, column: 17, scope: !13167)
!13171 = !DILocation(line: 371, column: 14, scope: !13167)
!13172 = !DILocation(line: 371, column: 12, scope: !13167)
!13173 = !DILocation(line: 376, column: 11, scope: !13174)
!13174 = distinct !DILexicalBlock(scope: !13167, file: !3, line: 376, column: 11)
!13175 = !DILocation(line: 376, column: 27, scope: !13174)
!13176 = !DILocation(line: 376, column: 48, scope: !13174)
!13177 = !DILocation(line: 376, column: 54, scope: !13174)
!13178 = !DILocation(line: 376, column: 30, scope: !13174)
!13179 = !DILocation(line: 376, column: 11, scope: !13167)
!13180 = !DILocation(line: 378, column: 9, scope: !13181)
!13181 = distinct !DILexicalBlock(scope: !13182, file: !3, line: 378, column: 8)
!13182 = distinct !DILexicalBlock(scope: !13174, file: !3, line: 377, column: 2)
!13183 = !DILocation(line: 378, column: 8, scope: !13182)
!13184 = !DILocation(line: 379, column: 12, scope: !13181)
!13185 = !DILocation(line: 379, column: 10, scope: !13181)
!13186 = !DILocation(line: 379, column: 6, scope: !13181)
!13187 = !DILocation(line: 380, column: 29, scope: !13182)
!13188 = !DILocation(line: 380, column: 40, scope: !13182)
!13189 = !DILocation(line: 380, column: 9, scope: !13182)
!13190 = !DILocation(line: 380, column: 7, scope: !13182)
!13191 = !DILocation(line: 381, column: 20, scope: !13182)
!13192 = !DILocation(line: 382, column: 2, scope: !13182)
!13193 = !DILocation(line: 386, column: 22, scope: !13167)
!13194 = !DILocation(line: 386, column: 28, scope: !13167)
!13195 = !DILocation(line: 386, column: 7, scope: !13167)
!13196 = !DILocation(line: 388, column: 28, scope: !13197)
!13197 = distinct !DILexicalBlock(scope: !13167, file: !3, line: 388, column: 11)
!13198 = !DILocation(line: 388, column: 11, scope: !13197)
!13199 = !DILocation(line: 388, column: 11, scope: !13167)
!13200 = !DILocation(line: 389, column: 22, scope: !13197)
!13201 = !DILocation(line: 389, column: 2, scope: !13197)
!13202 = !DILocation(line: 393, column: 27, scope: !13203)
!13203 = distinct !DILexicalBlock(scope: !13167, file: !3, line: 393, column: 11)
!13204 = !DILocation(line: 393, column: 11, scope: !13203)
!13205 = !DILocation(line: 393, column: 11, scope: !13167)
!13206 = !DILocation(line: 400, column: 24, scope: !13207)
!13207 = distinct !DILexicalBlock(scope: !13208, file: !3, line: 400, column: 8)
!13208 = distinct !DILexicalBlock(scope: !13203, file: !3, line: 394, column: 2)
!13209 = !DILocation(line: 400, column: 8, scope: !13207)
!13210 = !DILocation(line: 401, column: 8, scope: !13207)
!13211 = !DILocation(line: 401, column: 40, scope: !13207)
!13212 = !DILocation(line: 401, column: 11, scope: !13207)
!13213 = !DILocation(line: 402, column: 8, scope: !13207)
!13214 = !DILocation(line: 402, column: 31, scope: !13207)
!13215 = !DILocation(line: 402, column: 11, scope: !13207)
!13216 = !DILocation(line: 400, column: 8, scope: !13208)
!13217 = !DILocalVariable(name: "lhs", scope: !13218, file: !3, line: 404, type: !2553)
!13218 = distinct !DILexicalBlock(scope: !13207, file: !3, line: 403, column: 6)
!13219 = !DILocation(line: 404, column: 13, scope: !13218)
!13220 = !DILocation(line: 404, column: 35, scope: !13218)
!13221 = !DILocation(line: 404, column: 19, scope: !13218)
!13222 = !DILocalVariable(name: "tmp", scope: !13218, file: !3, line: 405, type: !2553)
!13223 = !DILocation(line: 405, column: 13, scope: !13218)
!13224 = !DILocation(line: 405, column: 35, scope: !13218)
!13225 = !DILocation(line: 405, column: 19, scope: !13218)
!13226 = !DILocalVariable(name: "s", scope: !13218, file: !3, line: 406, type: !2882)
!13227 = !DILocation(line: 406, column: 15, scope: !13218)
!13228 = !DILocation(line: 406, column: 19, scope: !13218)
!13229 = !DILocation(line: 407, column: 29, scope: !13218)
!13230 = !DILocation(line: 407, column: 49, scope: !13218)
!13231 = !DILocation(line: 407, column: 32, scope: !13218)
!13232 = !DILocation(line: 407, column: 8, scope: !13218)
!13233 = !DILocation(line: 408, column: 26, scope: !13218)
!13234 = !DILocation(line: 408, column: 43, scope: !13218)
!13235 = !DILocation(line: 408, column: 29, scope: !13218)
!13236 = !DILocation(line: 408, column: 8, scope: !13218)
!13237 = !DILocation(line: 409, column: 24, scope: !13218)
!13238 = !DILocation(line: 409, column: 30, scope: !13218)
!13239 = !DILocation(line: 409, column: 8, scope: !13218)
!13240 = !DILocation(line: 410, column: 12, scope: !13241)
!13241 = distinct !DILexicalBlock(scope: !13218, file: !3, line: 410, column: 12)
!13242 = !DILocation(line: 410, column: 40, scope: !13241)
!13243 = !DILocation(line: 411, column: 5, scope: !13241)
!13244 = !DILocation(line: 411, column: 8, scope: !13241)
!13245 = !DILocation(line: 411, column: 36, scope: !13241)
!13246 = !DILocation(line: 410, column: 12, scope: !13218)
!13247 = !DILocation(line: 412, column: 3, scope: !13241)
!13248 = !DILocation(line: 412, column: 27, scope: !13241)
!13249 = !DILocation(line: 413, column: 30, scope: !13218)
!13250 = !DILocation(line: 413, column: 8, scope: !13218)
!13251 = !DILocation(line: 414, column: 6, scope: !13218)
!13252 = !DILocation(line: 415, column: 20, scope: !13208)
!13253 = !DILocation(line: 416, column: 2, scope: !13208)
!13254 = !DILocation(line: 418, column: 7, scope: !13167)
!13255 = !DILocation(line: 419, column: 25, scope: !13167)
!13256 = distinct !{!13256, !13163, !13257}
!13257 = !DILocation(line: 420, column: 5, scope: !13147)
!13258 = !DILocation(line: 421, column: 1, scope: !13147)
!13259 = distinct !DISubprogram(name: "factor_computed_gotos", scope: !3, file: !3, line: 285, type: !4413, scopeLine: 286, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13260 = !DILocalVariable(name: "bb", scope: !13259, file: !3, line: 287, type: !3523)
!13261 = !DILocation(line: 287, column: 15, scope: !13259)
!13262 = !DILocalVariable(name: "factored_label_decl", scope: !13259, file: !3, line: 288, type: !2553)
!13263 = !DILocation(line: 288, column: 8, scope: !13259)
!13264 = !DILocalVariable(name: "var", scope: !13259, file: !3, line: 289, type: !2553)
!13265 = !DILocation(line: 289, column: 8, scope: !13259)
!13266 = !DILocalVariable(name: "factored_computed_goto_label", scope: !13259, file: !3, line: 290, type: !2882)
!13267 = !DILocation(line: 290, column: 10, scope: !13259)
!13268 = !DILocalVariable(name: "factored_computed_goto", scope: !13259, file: !3, line: 291, type: !2882)
!13269 = !DILocation(line: 291, column: 10, scope: !13259)
!13270 = !DILocation(line: 297, column: 3, scope: !13271)
!13271 = distinct !DILexicalBlock(scope: !13259, file: !3, line: 297, column: 3)
!13272 = !DILocation(line: 297, column: 3, scope: !13273)
!13273 = distinct !DILexicalBlock(scope: !13271, file: !3, line: 297, column: 3)
!13274 = !DILocalVariable(name: "gsi", scope: !13275, file: !3, line: 299, type: !4074)
!13275 = distinct !DILexicalBlock(scope: !13273, file: !3, line: 298, column: 5)
!13276 = !DILocation(line: 299, column: 28, scope: !13275)
!13277 = !DILocation(line: 299, column: 47, scope: !13275)
!13278 = !DILocation(line: 299, column: 34, scope: !13275)
!13279 = !DILocalVariable(name: "last", scope: !13275, file: !3, line: 300, type: !2882)
!13280 = !DILocation(line: 300, column: 14, scope: !13275)
!13281 = !DILocation(line: 302, column: 11, scope: !13282)
!13282 = distinct !DILexicalBlock(scope: !13275, file: !3, line: 302, column: 11)
!13283 = !DILocation(line: 302, column: 11, scope: !13275)
!13284 = !DILocation(line: 303, column: 2, scope: !13282)
!13285 = !DILocation(line: 305, column: 14, scope: !13275)
!13286 = !DILocation(line: 305, column: 12, scope: !13275)
!13287 = !DILocation(line: 309, column: 11, scope: !13288)
!13288 = distinct !DILexicalBlock(scope: !13275, file: !3, line: 309, column: 11)
!13289 = !DILocation(line: 309, column: 19, scope: !13288)
!13290 = !DILocation(line: 309, column: 16, scope: !13288)
!13291 = !DILocation(line: 309, column: 11, scope: !13275)
!13292 = !DILocation(line: 310, column: 2, scope: !13288)
!13293 = !DILocation(line: 313, column: 28, scope: !13294)
!13294 = distinct !DILexicalBlock(scope: !13275, file: !3, line: 313, column: 11)
!13295 = !DILocation(line: 313, column: 11, scope: !13294)
!13296 = !DILocation(line: 313, column: 11, scope: !13275)
!13297 = !DILocalVariable(name: "assignment", scope: !13298, file: !3, line: 315, type: !2882)
!13298 = distinct !DILexicalBlock(scope: !13294, file: !3, line: 314, column: 2)
!13299 = !DILocation(line: 315, column: 11, scope: !13298)
!13300 = !DILocation(line: 320, column: 9, scope: !13301)
!13301 = distinct !DILexicalBlock(scope: !13298, file: !3, line: 320, column: 8)
!13302 = !DILocation(line: 320, column: 8, scope: !13298)
!13303 = !DILocalVariable(name: "new_bb", scope: !13304, file: !3, line: 322, type: !3523)
!13304 = distinct !DILexicalBlock(scope: !13301, file: !3, line: 321, column: 6)
!13305 = !DILocation(line: 322, column: 20, scope: !13304)
!13306 = !DILocation(line: 322, column: 46, scope: !13304)
!13307 = !DILocation(line: 322, column: 29, scope: !13304)
!13308 = !DILocalVariable(name: "new_gsi", scope: !13304, file: !3, line: 323, type: !4074)
!13309 = !DILocation(line: 323, column: 29, scope: !13304)
!13310 = !DILocation(line: 323, column: 53, scope: !13304)
!13311 = !DILocation(line: 323, column: 39, scope: !13304)
!13312 = !DILocation(line: 329, column: 30, scope: !13304)
!13313 = !DILocation(line: 329, column: 14, scope: !13304)
!13314 = !DILocation(line: 329, column: 12, scope: !13304)
!13315 = !DILocation(line: 333, column: 30, scope: !13304)
!13316 = !DILocation(line: 333, column: 28, scope: !13304)
!13317 = !DILocation(line: 335, column: 25, scope: !13304)
!13318 = !DILocation(line: 335, column: 5, scope: !13304)
!13319 = !DILocation(line: 335, column: 3, scope: !13304)
!13320 = !DILocation(line: 336, column: 36, scope: !13304)
!13321 = !DILocation(line: 336, column: 8, scope: !13304)
!13322 = !DILocation(line: 340, column: 52, scope: !13304)
!13323 = !DILocation(line: 340, column: 33, scope: !13304)
!13324 = !DILocation(line: 340, column: 31, scope: !13304)
!13325 = !DILocation(line: 341, column: 36, scope: !13304)
!13326 = !DILocation(line: 341, column: 8, scope: !13304)
!13327 = !DILocation(line: 342, column: 6, scope: !13304)
!13328 = !DILocation(line: 345, column: 17, scope: !13298)
!13329 = !DILocation(line: 345, column: 15, scope: !13298)
!13330 = !DILocation(line: 346, column: 29, scope: !13298)
!13331 = !DILocation(line: 346, column: 4, scope: !13298)
!13332 = !DILocation(line: 349, column: 26, scope: !13298)
!13333 = !DILocation(line: 349, column: 32, scope: !13298)
!13334 = !DILocation(line: 349, column: 4, scope: !13298)
!13335 = !DILocation(line: 350, column: 2, scope: !13298)
!13336 = !DILocation(line: 351, column: 5, scope: !13275)
!13337 = distinct !{!13337, !13270, !13338}
!13338 = !DILocation(line: 351, column: 5, scope: !13271)
!13339 = !DILocation(line: 352, column: 1, scope: !13259)
!13340 = distinct !DISubprogram(name: "locus_map_hash", scope: !3, file: !3, line: 692, type: !13341, scopeLine: 693, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13341 = !DISubroutineType(types: !13342)
!13342 = !{!7, !3241}
!13343 = !DILocalVariable(name: "item", arg: 1, scope: !13340, file: !3, line: 692, type: !3241)
!13344 = !DILocation(line: 692, column: 29, scope: !13340)
!13345 = !DILocation(line: 694, column: 46, scope: !13340)
!13346 = !DILocation(line: 694, column: 11, scope: !13340)
!13347 = !DILocation(line: 694, column: 53, scope: !13340)
!13348 = !DILocation(line: 694, column: 3, scope: !13340)
!13349 = distinct !DISubprogram(name: "locus_map_eq", scope: !3, file: !3, line: 701, type: !3454, scopeLine: 702, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13350 = !DILocalVariable(name: "va", arg: 1, scope: !13349, file: !3, line: 701, type: !3241)
!13351 = !DILocation(line: 701, column: 27, scope: !13349)
!13352 = !DILocalVariable(name: "vb", arg: 2, scope: !13349, file: !3, line: 701, type: !3241)
!13353 = !DILocation(line: 701, column: 43, scope: !13349)
!13354 = !DILocalVariable(name: "a", scope: !13349, file: !3, line: 703, type: !4044)
!13355 = !DILocation(line: 703, column: 35, scope: !13349)
!13356 = !DILocation(line: 703, column: 74, scope: !13349)
!13357 = !DILocation(line: 703, column: 39, scope: !13349)
!13358 = !DILocalVariable(name: "b", scope: !13349, file: !3, line: 704, type: !4044)
!13359 = !DILocation(line: 704, column: 35, scope: !13349)
!13360 = !DILocation(line: 704, column: 74, scope: !13349)
!13361 = !DILocation(line: 704, column: 39, scope: !13349)
!13362 = !DILocation(line: 705, column: 10, scope: !13349)
!13363 = !DILocation(line: 705, column: 13, scope: !13349)
!13364 = !DILocation(line: 705, column: 22, scope: !13349)
!13365 = !DILocation(line: 705, column: 25, scope: !13349)
!13366 = !DILocation(line: 705, column: 19, scope: !13349)
!13367 = !DILocation(line: 705, column: 3, scope: !13349)
!13368 = distinct !DISubprogram(name: "make_edges", scope: !3, file: !3, line: 509, type: !4413, scopeLine: 510, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13369 = !DILocalVariable(name: "bb", scope: !13368, file: !3, line: 511, type: !3523)
!13370 = !DILocation(line: 511, column: 15, scope: !13368)
!13371 = !DILocalVariable(name: "cur_region", scope: !13368, file: !3, line: 512, type: !13372)
!13372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13373, size: 64)
!13373 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "omp_region", file: !3308, line: 375, size: 576, elements: !13374)
!13374 = !{!13375, !13376, !13377, !13378, !13379, !13380, !13381, !13382, !13383, !13384}
!13375 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !13373, file: !3308, line: 378, baseType: !13372, size: 64)
!13376 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !13373, file: !3308, line: 381, baseType: !13372, size: 64, offset: 64)
!13377 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !13373, file: !3308, line: 384, baseType: !13372, size: 64, offset: 128)
!13378 = !DIDerivedType(tag: DW_TAG_member, name: "entry", scope: !13373, file: !3308, line: 387, baseType: !3523, size: 64, offset: 192)
!13379 = !DIDerivedType(tag: DW_TAG_member, name: "exit", scope: !13373, file: !3308, line: 390, baseType: !3523, size: 64, offset: 256)
!13380 = !DIDerivedType(tag: DW_TAG_member, name: "cont", scope: !13373, file: !3308, line: 393, baseType: !3523, size: 64, offset: 320)
!13381 = !DIDerivedType(tag: DW_TAG_member, name: "ws_args", scope: !13373, file: !3308, line: 398, baseType: !2553, size: 64, offset: 384)
!13382 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !13373, file: !3308, line: 401, baseType: !580, size: 32, offset: 448)
!13383 = !DIDerivedType(tag: DW_TAG_member, name: "sched_kind", scope: !13373, file: !3308, line: 404, baseType: !374, size: 32, offset: 480)
!13384 = !DIDerivedType(tag: DW_TAG_member, name: "is_combined_parallel", scope: !13373, file: !3308, line: 407, baseType: !2672, size: 8, offset: 512)
!13385 = !DILocation(line: 512, column: 22, scope: !13368)
!13386 = !DILocation(line: 516, column: 14, scope: !13368)
!13387 = !DILocation(line: 516, column: 31, scope: !13368)
!13388 = !DILocation(line: 516, column: 3, scope: !13368)
!13389 = !DILocation(line: 519, column: 3, scope: !13390)
!13390 = distinct !DILexicalBlock(scope: !13368, file: !3, line: 519, column: 3)
!13391 = !DILocation(line: 519, column: 3, scope: !13392)
!13392 = distinct !DILexicalBlock(scope: !13390, file: !3, line: 519, column: 3)
!13393 = !DILocalVariable(name: "last", scope: !13394, file: !3, line: 521, type: !2882)
!13394 = distinct !DILexicalBlock(scope: !13392, file: !3, line: 520, column: 5)
!13395 = !DILocation(line: 521, column: 14, scope: !13394)
!13396 = !DILocation(line: 521, column: 32, scope: !13394)
!13397 = !DILocation(line: 521, column: 21, scope: !13394)
!13398 = !DILocalVariable(name: "fallthru", scope: !13394, file: !3, line: 522, type: !2672)
!13399 = !DILocation(line: 522, column: 12, scope: !13394)
!13400 = !DILocation(line: 524, column: 11, scope: !13401)
!13401 = distinct !DILexicalBlock(scope: !13394, file: !3, line: 524, column: 11)
!13402 = !DILocation(line: 524, column: 11, scope: !13394)
!13403 = !DILocalVariable(name: "code", scope: !13404, file: !3, line: 526, type: !580)
!13404 = distinct !DILexicalBlock(scope: !13401, file: !3, line: 525, column: 2)
!13405 = !DILocation(line: 526, column: 21, scope: !13404)
!13406 = !DILocation(line: 526, column: 41, scope: !13404)
!13407 = !DILocation(line: 526, column: 28, scope: !13404)
!13408 = !DILocation(line: 527, column: 12, scope: !13404)
!13409 = !DILocation(line: 527, column: 4, scope: !13404)
!13410 = !DILocation(line: 530, column: 30, scope: !13411)
!13411 = distinct !DILexicalBlock(scope: !13404, file: !3, line: 528, column: 6)
!13412 = !DILocation(line: 530, column: 8, scope: !13411)
!13413 = !DILocation(line: 531, column: 17, scope: !13411)
!13414 = !DILocation(line: 532, column: 8, scope: !13411)
!13415 = !DILocation(line: 534, column: 19, scope: !13411)
!13416 = !DILocation(line: 534, column: 23, scope: !13411)
!13417 = !DILocation(line: 534, column: 8, scope: !13411)
!13418 = !DILocation(line: 535, column: 17, scope: !13411)
!13419 = !DILocation(line: 536, column: 8, scope: !13411)
!13420 = !DILocation(line: 538, column: 30, scope: !13411)
!13421 = !DILocation(line: 538, column: 8, scope: !13411)
!13422 = !DILocation(line: 539, column: 17, scope: !13411)
!13423 = !DILocation(line: 540, column: 8, scope: !13411)
!13424 = !DILocation(line: 542, column: 34, scope: !13411)
!13425 = !DILocation(line: 542, column: 8, scope: !13411)
!13426 = !DILocation(line: 543, column: 17, scope: !13411)
!13427 = !DILocation(line: 544, column: 8, scope: !13411)
!13428 = !DILocation(line: 546, column: 23, scope: !13411)
!13429 = !DILocation(line: 546, column: 8, scope: !13411)
!13430 = !DILocation(line: 547, column: 17, scope: !13411)
!13431 = !DILocation(line: 548, column: 8, scope: !13411)
!13432 = !DILocation(line: 550, column: 43, scope: !13411)
!13433 = !DILocation(line: 550, column: 19, scope: !13411)
!13434 = !DILocation(line: 550, column: 17, scope: !13411)
!13435 = !DILocation(line: 551, column: 8, scope: !13411)
!13436 = !DILocation(line: 557, column: 41, scope: !13437)
!13437 = distinct !DILexicalBlock(scope: !13411, file: !3, line: 557, column: 12)
!13438 = !DILocation(line: 557, column: 12, scope: !13437)
!13439 = !DILocation(line: 557, column: 12, scope: !13411)
!13440 = !DILocation(line: 558, column: 29, scope: !13437)
!13441 = !DILocation(line: 558, column: 3, scope: !13437)
!13442 = !DILocation(line: 562, column: 23, scope: !13411)
!13443 = !DILocation(line: 562, column: 8, scope: !13411)
!13444 = !DILocation(line: 565, column: 40, scope: !13411)
!13445 = !DILocation(line: 565, column: 21, scope: !13411)
!13446 = !DILocation(line: 565, column: 46, scope: !13411)
!13447 = !DILocation(line: 565, column: 19, scope: !13411)
!13448 = !DILocation(line: 565, column: 17, scope: !13411)
!13449 = !DILocation(line: 566, column: 8, scope: !13411)
!13450 = !DILocation(line: 571, column: 35, scope: !13451)
!13451 = distinct !DILexicalBlock(scope: !13411, file: !3, line: 571, column: 12)
!13452 = !DILocation(line: 571, column: 12, scope: !13451)
!13453 = !DILocation(line: 571, column: 12, scope: !13411)
!13454 = !DILocation(line: 572, column: 18, scope: !13451)
!13455 = !DILocation(line: 572, column: 3, scope: !13451)
!13456 = !DILocation(line: 573, column: 17, scope: !13411)
!13457 = !DILocation(line: 574, column: 8, scope: !13411)
!13458 = !DILocation(line: 577, column: 31, scope: !13411)
!13459 = !DILocation(line: 577, column: 8, scope: !13411)
!13460 = !DILocation(line: 578, column: 17, scope: !13411)
!13461 = !DILocation(line: 579, column: 8, scope: !13411)
!13462 = !DILocation(line: 589, column: 37, scope: !13411)
!13463 = !DILocation(line: 589, column: 41, scope: !13411)
!13464 = !DILocation(line: 589, column: 47, scope: !13411)
!13465 = !DILocation(line: 589, column: 21, scope: !13411)
!13466 = !DILocation(line: 589, column: 19, scope: !13411)
!13467 = !DILocation(line: 590, column: 17, scope: !13411)
!13468 = !DILocation(line: 591, column: 8, scope: !13411)
!13469 = !DILocation(line: 594, column: 37, scope: !13411)
!13470 = !DILocation(line: 594, column: 41, scope: !13411)
!13471 = !DILocation(line: 594, column: 47, scope: !13411)
!13472 = !DILocation(line: 594, column: 21, scope: !13411)
!13473 = !DILocation(line: 594, column: 19, scope: !13411)
!13474 = !DILocation(line: 595, column: 17, scope: !13411)
!13475 = !DILocation(line: 596, column: 8, scope: !13411)
!13476 = !DILocation(line: 599, column: 17, scope: !13411)
!13477 = !DILocation(line: 600, column: 8, scope: !13411)
!13478 = !DILocation(line: 604, column: 25, scope: !13411)
!13479 = !DILocation(line: 605, column: 16, scope: !13411)
!13480 = !DILocation(line: 611, column: 27, scope: !13411)
!13481 = !DILocation(line: 611, column: 8, scope: !13411)
!13482 = !DILocation(line: 611, column: 20, scope: !13411)
!13483 = !DILocation(line: 611, column: 25, scope: !13411)
!13484 = !DILocation(line: 612, column: 19, scope: !13411)
!13485 = !DILocation(line: 612, column: 31, scope: !13411)
!13486 = !DILocation(line: 612, column: 36, scope: !13411)
!13487 = !DILocation(line: 612, column: 17, scope: !13411)
!13488 = !DILocation(line: 613, column: 21, scope: !13411)
!13489 = !DILocation(line: 613, column: 33, scope: !13411)
!13490 = !DILocation(line: 613, column: 19, scope: !13411)
!13491 = !DILocation(line: 614, column: 8, scope: !13411)
!13492 = !DILocation(line: 617, column: 27, scope: !13411)
!13493 = !DILocation(line: 617, column: 8, scope: !13411)
!13494 = !DILocation(line: 617, column: 20, scope: !13411)
!13495 = !DILocation(line: 617, column: 25, scope: !13411)
!13496 = !DILocation(line: 618, column: 16, scope: !13411)
!13497 = !DILocation(line: 618, column: 28, scope: !13411)
!13498 = !DILocation(line: 618, column: 8, scope: !13411)
!13499 = !DILocation(line: 624, column: 23, scope: !13500)
!13500 = distinct !DILexicalBlock(scope: !13411, file: !3, line: 619, column: 3)
!13501 = !DILocation(line: 624, column: 35, scope: !13500)
!13502 = !DILocation(line: 624, column: 5, scope: !13500)
!13503 = !DILocation(line: 624, column: 43, scope: !13500)
!13504 = !DILocation(line: 624, column: 49, scope: !13500)
!13505 = !DILocation(line: 626, column: 16, scope: !13500)
!13506 = !DILocation(line: 626, column: 33, scope: !13500)
!13507 = !DILocation(line: 626, column: 45, scope: !13500)
!13508 = !DILocation(line: 626, column: 20, scope: !13500)
!13509 = !DILocation(line: 626, column: 5, scope: !13500)
!13510 = !DILocation(line: 632, column: 16, scope: !13500)
!13511 = !DILocation(line: 632, column: 28, scope: !13500)
!13512 = !DILocation(line: 632, column: 35, scope: !13500)
!13513 = !DILocation(line: 632, column: 39, scope: !13500)
!13514 = !DILocation(line: 632, column: 5, scope: !13500)
!13515 = !DILocation(line: 633, column: 16, scope: !13500)
!13516 = !DILocation(line: 633, column: 20, scope: !13500)
!13517 = !DILocation(line: 633, column: 24, scope: !13500)
!13518 = !DILocation(line: 633, column: 5, scope: !13500)
!13519 = !DILocation(line: 634, column: 14, scope: !13500)
!13520 = !DILocation(line: 635, column: 5, scope: !13500)
!13521 = !DILocalVariable(name: "switch_bb", scope: !13522, file: !3, line: 640, type: !3523)
!13522 = distinct !DILexicalBlock(scope: !13500, file: !3, line: 639, column: 5)
!13523 = !DILocation(line: 640, column: 19, scope: !13522)
!13524 = !DILocation(line: 640, column: 44, scope: !13522)
!13525 = !DILocation(line: 640, column: 56, scope: !13522)
!13526 = !DILocation(line: 640, column: 31, scope: !13522)
!13527 = !DILocalVariable(name: "i", scope: !13522, file: !3, line: 642, type: !13372)
!13528 = !DILocation(line: 642, column: 26, scope: !13522)
!13529 = !DILocation(line: 643, column: 16, scope: !13530)
!13530 = distinct !DILexicalBlock(scope: !13522, file: !3, line: 643, column: 7)
!13531 = !DILocation(line: 643, column: 28, scope: !13530)
!13532 = !DILocation(line: 643, column: 14, scope: !13530)
!13533 = !DILocation(line: 643, column: 12, scope: !13530)
!13534 = !DILocation(line: 643, column: 35, scope: !13535)
!13535 = distinct !DILexicalBlock(scope: !13530, file: !3, line: 643, column: 7)
!13536 = !DILocation(line: 643, column: 7, scope: !13530)
!13537 = !DILocation(line: 645, column: 4, scope: !13538)
!13538 = distinct !DILexicalBlock(scope: !13535, file: !3, line: 644, column: 9)
!13539 = !DILocation(line: 646, column: 15, scope: !13538)
!13540 = !DILocation(line: 646, column: 26, scope: !13538)
!13541 = !DILocation(line: 646, column: 29, scope: !13538)
!13542 = !DILocation(line: 646, column: 4, scope: !13538)
!13543 = !DILocation(line: 647, column: 15, scope: !13538)
!13544 = !DILocation(line: 647, column: 18, scope: !13538)
!13545 = !DILocation(line: 647, column: 24, scope: !13538)
!13546 = !DILocation(line: 647, column: 4, scope: !13538)
!13547 = !DILocation(line: 648, column: 9, scope: !13538)
!13548 = !DILocation(line: 643, column: 43, scope: !13535)
!13549 = !DILocation(line: 643, column: 46, scope: !13535)
!13550 = !DILocation(line: 643, column: 41, scope: !13535)
!13551 = !DILocation(line: 643, column: 7, scope: !13535)
!13552 = distinct !{!13552, !13536, !13553}
!13553 = !DILocation(line: 648, column: 9, scope: !13530)
!13554 = !DILocation(line: 652, column: 18, scope: !13522)
!13555 = !DILocation(line: 652, column: 22, scope: !13522)
!13556 = !DILocation(line: 652, column: 7, scope: !13522)
!13557 = !DILocation(line: 655, column: 18, scope: !13522)
!13558 = !DILocation(line: 655, column: 29, scope: !13522)
!13559 = !DILocation(line: 655, column: 33, scope: !13522)
!13560 = !DILocation(line: 655, column: 7, scope: !13522)
!13561 = !DILocation(line: 656, column: 16, scope: !13522)
!13562 = !DILocation(line: 658, column: 5, scope: !13500)
!13563 = !DILocation(line: 661, column: 5, scope: !13500)
!13564 = !DILocation(line: 662, column: 3, scope: !13500)
!13565 = !DILocation(line: 663, column: 8, scope: !13411)
!13566 = !DILocation(line: 666, column: 8, scope: !13411)
!13567 = !DILocation(line: 667, column: 17, scope: !13411)
!13568 = !DILocation(line: 668, column: 6, scope: !13411)
!13569 = !DILocation(line: 669, column: 2, scope: !13404)
!13570 = !DILocation(line: 671, column: 11, scope: !13401)
!13571 = !DILocation(line: 673, column: 11, scope: !13572)
!13572 = distinct !DILexicalBlock(scope: !13394, file: !3, line: 673, column: 11)
!13573 = !DILocation(line: 673, column: 11, scope: !13394)
!13574 = !DILocation(line: 675, column: 15, scope: !13575)
!13575 = distinct !DILexicalBlock(scope: !13572, file: !3, line: 674, column: 9)
!13576 = !DILocation(line: 675, column: 19, scope: !13575)
!13577 = !DILocation(line: 675, column: 23, scope: !13575)
!13578 = !DILocation(line: 675, column: 4, scope: !13575)
!13579 = !DILocation(line: 676, column: 8, scope: !13580)
!13580 = distinct !DILexicalBlock(scope: !13575, file: !3, line: 676, column: 8)
!13581 = !DILocation(line: 676, column: 8, scope: !13575)
!13582 = !DILocation(line: 677, column: 52, scope: !13580)
!13583 = !DILocation(line: 677, column: 35, scope: !13580)
!13584 = !DILocation(line: 677, column: 59, scope: !13580)
!13585 = !DILocation(line: 677, column: 63, scope: !13580)
!13586 = !DILocation(line: 677, column: 13, scope: !13580)
!13587 = !DILocation(line: 678, column: 2, scope: !13575)
!13588 = !DILocation(line: 679, column: 5, scope: !13394)
!13589 = distinct !{!13589, !13389, !13590}
!13590 = !DILocation(line: 679, column: 5, scope: !13390)
!13591 = !DILocation(line: 681, column: 7, scope: !13592)
!13592 = distinct !DILexicalBlock(scope: !13368, file: !3, line: 681, column: 7)
!13593 = !DILocation(line: 681, column: 7, scope: !13368)
!13594 = !DILocation(line: 682, column: 5, scope: !13592)
!13595 = !DILocation(line: 685, column: 3, scope: !13368)
!13596 = !DILocation(line: 686, column: 1, scope: !13368)
!13597 = distinct !DISubprogram(name: "gimple_cfg2vcg", scope: !3, file: !3, line: 2098, type: !4129, scopeLine: 2099, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13598 = !DILocalVariable(name: "file", arg: 1, scope: !13597, file: !3, line: 2098, type: !4131)
!13599 = !DILocation(line: 2098, column: 23, scope: !13597)
!13600 = !DILocalVariable(name: "e", scope: !13597, file: !3, line: 2100, type: !2862)
!13601 = !DILocation(line: 2100, column: 8, scope: !13597)
!13602 = !DILocalVariable(name: "ei", scope: !13597, file: !3, line: 2101, type: !7861)
!13603 = !DILocation(line: 2101, column: 17, scope: !13597)
!13604 = !DILocalVariable(name: "bb", scope: !13597, file: !3, line: 2102, type: !3523)
!13605 = !DILocation(line: 2102, column: 15, scope: !13597)
!13606 = !DILocalVariable(name: "funcname", scope: !13597, file: !3, line: 2103, type: !2756)
!13607 = !DILocation(line: 2103, column: 15, scope: !13597)
!13608 = !DILocation(line: 2104, column: 18, scope: !13597)
!13609 = !DILocation(line: 2104, column: 39, scope: !13597)
!13610 = !DILocation(line: 2104, column: 7, scope: !13597)
!13611 = !DILocation(line: 2107, column: 12, scope: !13597)
!13612 = !DILocation(line: 2107, column: 46, scope: !13597)
!13613 = !DILocation(line: 2107, column: 3, scope: !13597)
!13614 = !DILocation(line: 2108, column: 12, scope: !13597)
!13615 = !DILocation(line: 2108, column: 3, scope: !13597)
!13616 = !DILocation(line: 2109, column: 12, scope: !13597)
!13617 = !DILocation(line: 2109, column: 3, scope: !13597)
!13618 = !DILocation(line: 2112, column: 3, scope: !13619)
!13619 = distinct !DILexicalBlock(scope: !13597, file: !3, line: 2112, column: 3)
!13620 = !DILocation(line: 2112, column: 3, scope: !13621)
!13621 = distinct !DILexicalBlock(scope: !13619, file: !3, line: 2112, column: 3)
!13622 = !DILocation(line: 2114, column: 16, scope: !13623)
!13623 = distinct !DILexicalBlock(scope: !13621, file: !3, line: 2113, column: 5)
!13624 = !DILocation(line: 2115, column: 9, scope: !13623)
!13625 = !DILocation(line: 2115, column: 12, scope: !13623)
!13626 = !DILocation(line: 2115, column: 18, scope: !13623)
!13627 = !DILocation(line: 2114, column: 7, scope: !13623)
!13628 = !DILocation(line: 2117, column: 11, scope: !13629)
!13629 = distinct !DILexicalBlock(scope: !13623, file: !3, line: 2117, column: 11)
!13630 = !DILocation(line: 2117, column: 14, scope: !13629)
!13631 = !DILocation(line: 2117, column: 20, scope: !13629)
!13632 = !DILocation(line: 2117, column: 11, scope: !13623)
!13633 = !DILocation(line: 2118, column: 11, scope: !13629)
!13634 = !DILocation(line: 2118, column: 2, scope: !13629)
!13635 = !DILocation(line: 2120, column: 11, scope: !13629)
!13636 = !DILocation(line: 2120, column: 2, scope: !13629)
!13637 = !DILocation(line: 2122, column: 16, scope: !13623)
!13638 = !DILocation(line: 2122, column: 7, scope: !13623)
!13639 = !DILocation(line: 2123, column: 5, scope: !13623)
!13640 = distinct !{!13640, !13618, !13641}
!13641 = !DILocation(line: 2123, column: 5, scope: !13619)
!13642 = !DILocation(line: 2124, column: 16, scope: !13597)
!13643 = !DILocation(line: 2124, column: 3, scope: !13597)
!13644 = !DILocation(line: 2126, column: 3, scope: !13645)
!13645 = distinct !DILexicalBlock(scope: !13597, file: !3, line: 2126, column: 3)
!13646 = !DILocation(line: 2126, column: 3, scope: !13647)
!13647 = distinct !DILexicalBlock(scope: !13645, file: !3, line: 2126, column: 3)
!13648 = !DILocalVariable(name: "head_code", scope: !13649, file: !3, line: 2128, type: !580)
!13649 = distinct !DILexicalBlock(scope: !13647, file: !3, line: 2127, column: 5)
!13650 = !DILocation(line: 2128, column: 24, scope: !13649)
!13651 = !DILocalVariable(name: "end_code", scope: !13649, file: !3, line: 2128, type: !580)
!13652 = !DILocation(line: 2128, column: 35, scope: !13649)
!13653 = !DILocalVariable(name: "head_name", scope: !13649, file: !3, line: 2129, type: !2756)
!13654 = !DILocation(line: 2129, column: 19, scope: !13649)
!13655 = !DILocalVariable(name: "end_name", scope: !13649, file: !3, line: 2129, type: !2756)
!13656 = !DILocation(line: 2129, column: 31, scope: !13649)
!13657 = !DILocalVariable(name: "head_line", scope: !13649, file: !3, line: 2130, type: !2548)
!13658 = !DILocation(line: 2130, column: 11, scope: !13649)
!13659 = !DILocalVariable(name: "end_line", scope: !13649, file: !3, line: 2131, type: !2548)
!13660 = !DILocation(line: 2131, column: 11, scope: !13649)
!13661 = !DILocalVariable(name: "first", scope: !13649, file: !3, line: 2132, type: !2882)
!13662 = !DILocation(line: 2132, column: 14, scope: !13649)
!13663 = !DILocation(line: 2132, column: 34, scope: !13649)
!13664 = !DILocation(line: 2132, column: 22, scope: !13649)
!13665 = !DILocalVariable(name: "last", scope: !13649, file: !3, line: 2133, type: !2882)
!13666 = !DILocation(line: 2133, column: 14, scope: !13649)
!13667 = !DILocation(line: 2133, column: 32, scope: !13649)
!13668 = !DILocation(line: 2133, column: 21, scope: !13649)
!13669 = !DILocation(line: 2135, column: 11, scope: !13670)
!13670 = distinct !DILexicalBlock(scope: !13649, file: !3, line: 2135, column: 11)
!13671 = !DILocation(line: 2135, column: 11, scope: !13649)
!13672 = !DILocation(line: 2137, column: 29, scope: !13673)
!13673 = distinct !DILexicalBlock(scope: !13670, file: !3, line: 2136, column: 2)
!13674 = !DILocation(line: 2137, column: 16, scope: !13673)
!13675 = !DILocation(line: 2137, column: 14, scope: !13673)
!13676 = !DILocation(line: 2138, column: 33, scope: !13673)
!13677 = !DILocation(line: 2138, column: 16, scope: !13673)
!13678 = !DILocation(line: 2138, column: 14, scope: !13673)
!13679 = !DILocation(line: 2139, column: 28, scope: !13673)
!13680 = !DILocation(line: 2139, column: 16, scope: !13673)
!13681 = !DILocation(line: 2139, column: 14, scope: !13673)
!13682 = !DILocation(line: 2140, column: 2, scope: !13673)
!13683 = !DILocation(line: 2142, column: 12, scope: !13670)
!13684 = !DILocation(line: 2144, column: 11, scope: !13685)
!13685 = distinct !DILexicalBlock(scope: !13649, file: !3, line: 2144, column: 11)
!13686 = !DILocation(line: 2144, column: 11, scope: !13649)
!13687 = !DILocation(line: 2146, column: 28, scope: !13688)
!13688 = distinct !DILexicalBlock(scope: !13685, file: !3, line: 2145, column: 2)
!13689 = !DILocation(line: 2146, column: 15, scope: !13688)
!13690 = !DILocation(line: 2146, column: 13, scope: !13688)
!13691 = !DILocation(line: 2147, column: 32, scope: !13688)
!13692 = !DILocation(line: 2147, column: 15, scope: !13688)
!13693 = !DILocation(line: 2147, column: 13, scope: !13688)
!13694 = !DILocation(line: 2148, column: 27, scope: !13688)
!13695 = !DILocation(line: 2148, column: 15, scope: !13688)
!13696 = !DILocation(line: 2148, column: 13, scope: !13688)
!13697 = !DILocation(line: 2149, column: 2, scope: !13688)
!13698 = !DILocation(line: 2151, column: 11, scope: !13685)
!13699 = !DILocation(line: 2153, column: 16, scope: !13649)
!13700 = !DILocation(line: 2154, column: 9, scope: !13649)
!13701 = !DILocation(line: 2154, column: 13, scope: !13649)
!13702 = !DILocation(line: 2154, column: 20, scope: !13649)
!13703 = !DILocation(line: 2154, column: 24, scope: !13649)
!13704 = !DILocation(line: 2154, column: 31, scope: !13649)
!13705 = !DILocation(line: 2154, column: 42, scope: !13649)
!13706 = !DILocation(line: 2154, column: 53, scope: !13649)
!13707 = !DILocation(line: 2155, column: 9, scope: !13649)
!13708 = !DILocation(line: 2153, column: 7, scope: !13649)
!13709 = !DILocation(line: 2157, column: 7, scope: !13710)
!13710 = distinct !DILexicalBlock(scope: !13649, file: !3, line: 2157, column: 7)
!13711 = !DILocation(line: 2157, column: 7, scope: !13712)
!13712 = distinct !DILexicalBlock(scope: !13710, file: !3, line: 2157, column: 7)
!13713 = !DILocation(line: 2159, column: 8, scope: !13714)
!13714 = distinct !DILexicalBlock(scope: !13715, file: !3, line: 2159, column: 8)
!13715 = distinct !DILexicalBlock(scope: !13712, file: !3, line: 2158, column: 2)
!13716 = !DILocation(line: 2159, column: 11, scope: !13714)
!13717 = !DILocation(line: 2159, column: 19, scope: !13714)
!13718 = !DILocation(line: 2159, column: 16, scope: !13714)
!13719 = !DILocation(line: 2159, column: 8, scope: !13715)
!13720 = !DILocation(line: 2160, column: 15, scope: !13714)
!13721 = !DILocation(line: 2160, column: 72, scope: !13714)
!13722 = !DILocation(line: 2160, column: 76, scope: !13714)
!13723 = !DILocation(line: 2160, column: 6, scope: !13714)
!13724 = !DILocation(line: 2162, column: 15, scope: !13714)
!13725 = !DILocation(line: 2162, column: 70, scope: !13714)
!13726 = !DILocation(line: 2162, column: 74, scope: !13714)
!13727 = !DILocation(line: 2162, column: 81, scope: !13714)
!13728 = !DILocation(line: 2162, column: 84, scope: !13714)
!13729 = !DILocation(line: 2162, column: 90, scope: !13714)
!13730 = !DILocation(line: 2162, column: 6, scope: !13714)
!13731 = !DILocation(line: 2164, column: 8, scope: !13732)
!13732 = distinct !DILexicalBlock(scope: !13715, file: !3, line: 2164, column: 8)
!13733 = !DILocation(line: 2164, column: 11, scope: !13732)
!13734 = !DILocation(line: 2164, column: 17, scope: !13732)
!13735 = !DILocation(line: 2164, column: 8, scope: !13715)
!13736 = !DILocation(line: 2165, column: 15, scope: !13732)
!13737 = !DILocation(line: 2165, column: 6, scope: !13732)
!13738 = !DILocation(line: 2167, column: 15, scope: !13732)
!13739 = !DILocation(line: 2167, column: 6, scope: !13732)
!13740 = !DILocation(line: 2169, column: 13, scope: !13715)
!13741 = !DILocation(line: 2169, column: 4, scope: !13715)
!13742 = !DILocation(line: 2170, column: 2, scope: !13715)
!13743 = distinct !{!13743, !13709, !13744}
!13744 = !DILocation(line: 2170, column: 2, scope: !13710)
!13745 = !DILocation(line: 2172, column: 11, scope: !13746)
!13746 = distinct !DILexicalBlock(scope: !13649, file: !3, line: 2172, column: 11)
!13747 = !DILocation(line: 2172, column: 15, scope: !13746)
!13748 = !DILocation(line: 2172, column: 26, scope: !13746)
!13749 = !DILocation(line: 2172, column: 23, scope: !13746)
!13750 = !DILocation(line: 2172, column: 11, scope: !13649)
!13751 = !DILocation(line: 2173, column: 15, scope: !13746)
!13752 = !DILocation(line: 2173, column: 2, scope: !13746)
!13753 = !DILocation(line: 2174, column: 5, scope: !13649)
!13754 = distinct !{!13754, !13644, !13755}
!13755 = !DILocation(line: 2174, column: 5, scope: !13645)
!13756 = !DILocation(line: 2176, column: 19, scope: !13597)
!13757 = !DILocation(line: 2176, column: 3, scope: !13597)
!13758 = !DILocation(line: 2177, column: 1, scope: !13597)
!13759 = distinct !DISubprogram(name: "gsi_start", scope: !581, file: !581, line: 4403, type: !13760, scopeLine: 4404, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13760 = !DISubroutineType(types: !13761)
!13761 = !{!4074, !2872}
!13762 = !DILocalVariable(name: "seq", arg: 1, scope: !13759, file: !581, line: 4403, type: !2872)
!13763 = !DILocation(line: 4403, column: 23, scope: !13759)
!13764 = !DILocalVariable(name: "i", scope: !13759, file: !581, line: 4405, type: !4074)
!13765 = !DILocation(line: 4405, column: 24, scope: !13759)
!13766 = !DILocation(line: 4407, column: 29, scope: !13759)
!13767 = !DILocation(line: 4407, column: 11, scope: !13759)
!13768 = !DILocation(line: 4407, column: 5, scope: !13759)
!13769 = !DILocation(line: 4407, column: 9, scope: !13759)
!13770 = !DILocation(line: 4408, column: 11, scope: !13759)
!13771 = !DILocation(line: 4408, column: 5, scope: !13759)
!13772 = !DILocation(line: 4408, column: 9, scope: !13759)
!13773 = !DILocation(line: 4409, column: 13, scope: !13759)
!13774 = !DILocation(line: 4409, column: 11, scope: !13759)
!13775 = !DILocation(line: 4409, column: 17, scope: !13759)
!13776 = !DILocation(line: 4409, column: 22, scope: !13759)
!13777 = !DILocation(line: 4409, column: 27, scope: !13759)
!13778 = !DILocation(line: 4409, column: 20, scope: !13759)
!13779 = !DILocation(line: 4409, column: 10, scope: !13759)
!13780 = !DILocation(line: 4409, column: 48, scope: !13759)
!13781 = !DILocation(line: 4409, column: 53, scope: !13759)
!13782 = !DILocation(line: 4409, column: 35, scope: !13759)
!13783 = !DILocation(line: 4409, column: 5, scope: !13759)
!13784 = !DILocation(line: 4409, column: 8, scope: !13759)
!13785 = !DILocation(line: 4411, column: 3, scope: !13759)
!13786 = distinct !DISubprogram(name: "stmt_starts_bb_p", scope: !3, file: !3, line: 2285, type: !13787, scopeLine: 2286, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13787 = !DISubroutineType(types: !13788)
!13788 = !{!2672, !2882, !2882}
!13789 = !DILocalVariable(name: "stmt", arg: 1, scope: !13786, file: !3, line: 2285, type: !2882)
!13790 = !DILocation(line: 2285, column: 26, scope: !13786)
!13791 = !DILocalVariable(name: "prev_stmt", arg: 2, scope: !13786, file: !3, line: 2285, type: !2882)
!13792 = !DILocation(line: 2285, column: 39, scope: !13786)
!13793 = !DILocation(line: 2287, column: 7, scope: !13794)
!13794 = distinct !DILexicalBlock(scope: !13786, file: !3, line: 2287, column: 7)
!13795 = !DILocation(line: 2287, column: 12, scope: !13794)
!13796 = !DILocation(line: 2287, column: 7, scope: !13786)
!13797 = !DILocation(line: 2288, column: 5, scope: !13794)
!13798 = !DILocation(line: 2293, column: 20, scope: !13799)
!13799 = distinct !DILexicalBlock(scope: !13786, file: !3, line: 2293, column: 7)
!13800 = !DILocation(line: 2293, column: 7, scope: !13799)
!13801 = !DILocation(line: 2293, column: 26, scope: !13799)
!13802 = !DILocation(line: 2293, column: 7, scope: !13786)
!13803 = !DILocation(line: 2296, column: 11, scope: !13804)
!13804 = distinct !DILexicalBlock(scope: !13805, file: !3, line: 2296, column: 11)
!13805 = distinct !DILexicalBlock(scope: !13799, file: !3, line: 2294, column: 5)
!13806 = !DILocation(line: 2297, column: 4, scope: !13804)
!13807 = !DILocation(line: 2297, column: 7, scope: !13804)
!13808 = !DILocation(line: 2296, column: 11, scope: !13805)
!13809 = !DILocation(line: 2298, column: 2, scope: !13804)
!13810 = !DILocation(line: 2300, column: 11, scope: !13811)
!13811 = distinct !DILexicalBlock(scope: !13805, file: !3, line: 2300, column: 11)
!13812 = !DILocation(line: 2300, column: 21, scope: !13811)
!13813 = !DILocation(line: 2300, column: 37, scope: !13811)
!13814 = !DILocation(line: 2300, column: 24, scope: !13811)
!13815 = !DILocation(line: 2300, column: 48, scope: !13811)
!13816 = !DILocation(line: 2300, column: 11, scope: !13805)
!13817 = !DILocation(line: 2302, column: 8, scope: !13818)
!13818 = distinct !DILexicalBlock(scope: !13819, file: !3, line: 2302, column: 8)
!13819 = distinct !DILexicalBlock(scope: !13811, file: !3, line: 2301, column: 2)
!13820 = !DILocation(line: 2302, column: 8, scope: !13819)
!13821 = !DILocation(line: 2303, column: 6, scope: !13818)
!13822 = !DILocation(line: 2305, column: 31, scope: !13819)
!13823 = !DILocation(line: 2306, column: 4, scope: !13819)
!13824 = !DILocation(line: 2309, column: 2, scope: !13811)
!13825 = !DILocation(line: 2312, column: 3, scope: !13786)
!13826 = !DILocation(line: 2313, column: 1, scope: !13786)
!13827 = distinct !DISubprogram(name: "gimple_has_lhs", scope: !581, file: !581, line: 2210, type: !5223, scopeLine: 2211, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13828 = !DILocalVariable(name: "stmt", arg: 1, scope: !13827, file: !581, line: 2210, type: !2882)
!13829 = !DILocation(line: 2210, column: 24, scope: !13827)
!13830 = !DILocation(line: 2212, column: 29, scope: !13827)
!13831 = !DILocation(line: 2212, column: 11, scope: !13827)
!13832 = !DILocation(line: 2213, column: 4, scope: !13827)
!13833 = !DILocation(line: 2213, column: 24, scope: !13827)
!13834 = !DILocation(line: 2213, column: 8, scope: !13827)
!13835 = !DILocation(line: 2214, column: 8, scope: !13827)
!13836 = !DILocation(line: 2214, column: 28, scope: !13827)
!13837 = !DILocation(line: 2214, column: 11, scope: !13827)
!13838 = !DILocation(line: 2214, column: 34, scope: !13827)
!13839 = !DILocation(line: 0, scope: !13827)
!13840 = !DILocation(line: 2212, column: 10, scope: !13827)
!13841 = !DILocation(line: 2212, column: 3, scope: !13827)
!13842 = distinct !DISubprogram(name: "gimple_set_location", scope: !581, file: !581, line: 1156, type: !13843, scopeLine: 1157, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13843 = !DISubroutineType(types: !13844)
!13844 = !{null, !2882, !2680}
!13845 = !DILocalVariable(name: "g", arg: 1, scope: !13842, file: !581, line: 1156, type: !2882)
!13846 = !DILocation(line: 1156, column: 29, scope: !13842)
!13847 = !DILocalVariable(name: "location", arg: 2, scope: !13842, file: !581, line: 1156, type: !2680)
!13848 = !DILocation(line: 1156, column: 43, scope: !13842)
!13849 = !DILocation(line: 1158, column: 24, scope: !13842)
!13850 = !DILocation(line: 1158, column: 3, scope: !13842)
!13851 = !DILocation(line: 1158, column: 6, scope: !13842)
!13852 = !DILocation(line: 1158, column: 13, scope: !13842)
!13853 = !DILocation(line: 1158, column: 22, scope: !13842)
!13854 = !DILocation(line: 1159, column: 1, scope: !13842)
!13855 = distinct !DISubprogram(name: "gimple_set_block", scope: !581, file: !581, line: 1130, type: !5117, scopeLine: 1131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13856 = !DILocalVariable(name: "g", arg: 1, scope: !13855, file: !581, line: 1130, type: !2882)
!13857 = !DILocation(line: 1130, column: 26, scope: !13855)
!13858 = !DILocalVariable(name: "block", arg: 2, scope: !13855, file: !581, line: 1130, type: !2553)
!13859 = !DILocation(line: 1130, column: 34, scope: !13855)
!13860 = !DILocation(line: 1132, column: 21, scope: !13855)
!13861 = !DILocation(line: 1132, column: 3, scope: !13855)
!13862 = !DILocation(line: 1132, column: 6, scope: !13855)
!13863 = !DILocation(line: 1132, column: 13, scope: !13855)
!13864 = !DILocation(line: 1132, column: 19, scope: !13855)
!13865 = !DILocation(line: 1133, column: 1, scope: !13855)
!13866 = distinct !DISubprogram(name: "gimple_block", scope: !581, file: !581, line: 1121, type: !4569, scopeLine: 1122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13867 = !DILocalVariable(name: "g", arg: 1, scope: !13866, file: !581, line: 1121, type: !4543)
!13868 = !DILocation(line: 1121, column: 28, scope: !13866)
!13869 = !DILocation(line: 1123, column: 10, scope: !13866)
!13870 = !DILocation(line: 1123, column: 13, scope: !13866)
!13871 = !DILocation(line: 1123, column: 20, scope: !13866)
!13872 = !DILocation(line: 1123, column: 3, scope: !13866)
!13873 = distinct !DISubprogram(name: "gimple_seq_first", scope: !581, file: !581, line: 159, type: !13874, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13874 = !DISubroutineType(types: !13875)
!13875 = !{!2877, !9899}
!13876 = !DILocalVariable(name: "s", arg: 1, scope: !13873, file: !581, line: 159, type: !9899)
!13877 = !DILocation(line: 159, column: 36, scope: !13873)
!13878 = !DILocation(line: 161, column: 10, scope: !13873)
!13879 = !DILocation(line: 161, column: 14, scope: !13873)
!13880 = !DILocation(line: 161, column: 17, scope: !13873)
!13881 = !DILocation(line: 161, column: 3, scope: !13873)
!13882 = distinct !DISubprogram(name: "is_gimple_assign", scope: !581, file: !581, line: 1677, type: !5609, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13883 = !DILocalVariable(name: "gs", arg: 1, scope: !13882, file: !581, line: 1677, type: !4543)
!13884 = !DILocation(line: 1677, column: 32, scope: !13882)
!13885 = !DILocation(line: 1679, column: 23, scope: !13882)
!13886 = !DILocation(line: 1679, column: 10, scope: !13882)
!13887 = !DILocation(line: 1679, column: 27, scope: !13882)
!13888 = !DILocation(line: 1679, column: 3, scope: !13882)
!13889 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !581, file: !581, line: 1878, type: !4569, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13890 = !DILocalVariable(name: "gs", arg: 1, scope: !13889, file: !581, line: 1878, type: !4543)
!13891 = !DILocation(line: 1878, column: 31, scope: !13889)
!13892 = !DILocation(line: 1881, column: 21, scope: !13889)
!13893 = !DILocation(line: 1881, column: 10, scope: !13889)
!13894 = !DILocation(line: 1881, column: 3, scope: !13889)
!13895 = distinct !DISubprogram(name: "make_goto_expr_edges", scope: !3, file: !3, line: 995, type: !4218, scopeLine: 996, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13896 = !DILocalVariable(name: "bb", arg: 1, scope: !13895, file: !3, line: 995, type: !3523)
!13897 = !DILocation(line: 995, column: 35, scope: !13895)
!13898 = !DILocalVariable(name: "last", scope: !13895, file: !3, line: 997, type: !4074)
!13899 = !DILocation(line: 997, column: 24, scope: !13895)
!13900 = !DILocation(line: 997, column: 44, scope: !13895)
!13901 = !DILocation(line: 997, column: 31, scope: !13895)
!13902 = !DILocalVariable(name: "goto_t", scope: !13895, file: !3, line: 998, type: !2882)
!13903 = !DILocation(line: 998, column: 10, scope: !13895)
!13904 = !DILocation(line: 998, column: 19, scope: !13895)
!13905 = !DILocation(line: 1001, column: 22, scope: !13906)
!13906 = distinct !DILexicalBlock(scope: !13895, file: !3, line: 1001, column: 7)
!13907 = !DILocation(line: 1001, column: 7, scope: !13906)
!13908 = !DILocation(line: 1001, column: 7, scope: !13895)
!13909 = !DILocalVariable(name: "dest", scope: !13910, file: !3, line: 1003, type: !2553)
!13910 = distinct !DILexicalBlock(scope: !13906, file: !3, line: 1002, column: 5)
!13911 = !DILocation(line: 1003, column: 12, scope: !13910)
!13912 = !DILocation(line: 1003, column: 37, scope: !13910)
!13913 = !DILocation(line: 1003, column: 19, scope: !13910)
!13914 = !DILocalVariable(name: "label_bb", scope: !13910, file: !3, line: 1004, type: !3523)
!13915 = !DILocation(line: 1004, column: 19, scope: !13910)
!13916 = !DILocation(line: 1004, column: 30, scope: !13910)
!13917 = !DILocalVariable(name: "e", scope: !13910, file: !3, line: 1005, type: !2862)
!13918 = !DILocation(line: 1005, column: 12, scope: !13910)
!13919 = !DILocation(line: 1005, column: 27, scope: !13910)
!13920 = !DILocation(line: 1005, column: 31, scope: !13910)
!13921 = !DILocation(line: 1005, column: 16, scope: !13910)
!13922 = !DILocation(line: 1006, column: 40, scope: !13910)
!13923 = !DILocation(line: 1006, column: 23, scope: !13910)
!13924 = !DILocation(line: 1006, column: 7, scope: !13910)
!13925 = !DILocation(line: 1006, column: 10, scope: !13910)
!13926 = !DILocation(line: 1006, column: 21, scope: !13910)
!13927 = !DILocation(line: 1007, column: 29, scope: !13910)
!13928 = !DILocation(line: 1007, column: 32, scope: !13910)
!13929 = !DILocation(line: 1007, column: 44, scope: !13910)
!13930 = !DILocation(line: 1007, column: 7, scope: !13910)
!13931 = !DILocation(line: 1008, column: 11, scope: !13932)
!13932 = distinct !DILexicalBlock(scope: !13910, file: !3, line: 1008, column: 11)
!13933 = !DILocation(line: 1008, column: 14, scope: !13932)
!13934 = !DILocation(line: 1008, column: 11, scope: !13910)
!13935 = !DILocation(line: 1009, column: 32, scope: !13932)
!13936 = !DILocation(line: 1009, column: 18, scope: !13932)
!13937 = !DILocation(line: 1009, column: 2, scope: !13932)
!13938 = !DILocation(line: 1009, column: 5, scope: !13932)
!13939 = !DILocation(line: 1009, column: 16, scope: !13932)
!13940 = !DILocation(line: 1010, column: 7, scope: !13910)
!13941 = !DILocation(line: 1011, column: 7, scope: !13910)
!13942 = !DILocation(line: 1015, column: 29, scope: !13895)
!13943 = !DILocation(line: 1015, column: 3, scope: !13895)
!13944 = !DILocation(line: 1016, column: 1, scope: !13895)
!13945 = distinct !DISubprogram(name: "make_cond_expr_edges", scope: !3, file: !3, line: 779, type: !4218, scopeLine: 780, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!13946 = !DILocalVariable(name: "bb", arg: 1, scope: !13945, file: !3, line: 779, type: !3523)
!13947 = !DILocation(line: 779, column: 35, scope: !13945)
!13948 = !DILocalVariable(name: "entry", scope: !13945, file: !3, line: 781, type: !2882)
!13949 = !DILocation(line: 781, column: 10, scope: !13945)
!13950 = !DILocation(line: 781, column: 29, scope: !13945)
!13951 = !DILocation(line: 781, column: 18, scope: !13945)
!13952 = !DILocalVariable(name: "then_stmt", scope: !13945, file: !3, line: 782, type: !2882)
!13953 = !DILocation(line: 782, column: 10, scope: !13945)
!13954 = !DILocalVariable(name: "else_stmt", scope: !13945, file: !3, line: 782, type: !2882)
!13955 = !DILocation(line: 782, column: 21, scope: !13945)
!13956 = !DILocalVariable(name: "then_bb", scope: !13945, file: !3, line: 783, type: !3523)
!13957 = !DILocation(line: 783, column: 15, scope: !13945)
!13958 = !DILocalVariable(name: "else_bb", scope: !13945, file: !3, line: 783, type: !3523)
!13959 = !DILocation(line: 783, column: 24, scope: !13945)
!13960 = !DILocalVariable(name: "then_label", scope: !13945, file: !3, line: 784, type: !2553)
!13961 = !DILocation(line: 784, column: 8, scope: !13945)
!13962 = !DILocalVariable(name: "else_label", scope: !13945, file: !3, line: 784, type: !2553)
!13963 = !DILocation(line: 784, column: 20, scope: !13945)
!13964 = !DILocalVariable(name: "e", scope: !13945, file: !3, line: 785, type: !2862)
!13965 = !DILocation(line: 785, column: 8, scope: !13945)
!13966 = !DILocalVariable(name: "entry_locus", scope: !13945, file: !3, line: 786, type: !2680)
!13967 = !DILocation(line: 786, column: 14, scope: !13945)
!13968 = !DILocation(line: 788, column: 3, scope: !13945)
!13969 = !DILocation(line: 789, column: 3, scope: !13945)
!13970 = !DILocation(line: 791, column: 34, scope: !13945)
!13971 = !DILocation(line: 791, column: 17, scope: !13945)
!13972 = !DILocation(line: 791, column: 15, scope: !13945)
!13973 = !DILocation(line: 794, column: 40, scope: !13945)
!13974 = !DILocation(line: 794, column: 16, scope: !13945)
!13975 = !DILocation(line: 794, column: 14, scope: !13945)
!13976 = !DILocation(line: 795, column: 41, scope: !13945)
!13977 = !DILocation(line: 795, column: 16, scope: !13945)
!13978 = !DILocation(line: 795, column: 14, scope: !13945)
!13979 = !DILocation(line: 796, column: 13, scope: !13945)
!13980 = !DILocation(line: 796, column: 11, scope: !13945)
!13981 = !DILocation(line: 797, column: 13, scope: !13945)
!13982 = !DILocation(line: 797, column: 11, scope: !13945)
!13983 = !DILocation(line: 798, column: 27, scope: !13945)
!13984 = !DILocation(line: 798, column: 15, scope: !13945)
!13985 = !DILocation(line: 798, column: 13, scope: !13945)
!13986 = !DILocation(line: 799, column: 27, scope: !13945)
!13987 = !DILocation(line: 799, column: 15, scope: !13945)
!13988 = !DILocation(line: 799, column: 13, scope: !13945)
!13989 = !DILocation(line: 801, column: 18, scope: !13945)
!13990 = !DILocation(line: 801, column: 22, scope: !13945)
!13991 = !DILocation(line: 801, column: 7, scope: !13945)
!13992 = !DILocation(line: 801, column: 5, scope: !13945)
!13993 = !DILocation(line: 802, column: 25, scope: !13945)
!13994 = !DILocation(line: 802, column: 38, scope: !13945)
!13995 = !DILocation(line: 802, column: 3, scope: !13945)
!13996 = !DILocation(line: 803, column: 36, scope: !13945)
!13997 = !DILocation(line: 803, column: 19, scope: !13945)
!13998 = !DILocation(line: 803, column: 3, scope: !13945)
!13999 = !DILocation(line: 803, column: 6, scope: !13945)
!14000 = !DILocation(line: 803, column: 17, scope: !13945)
!14001 = !DILocation(line: 804, column: 7, scope: !14002)
!14002 = distinct !DILexicalBlock(scope: !13945, file: !3, line: 804, column: 7)
!14003 = !DILocation(line: 804, column: 10, scope: !14002)
!14004 = !DILocation(line: 804, column: 7, scope: !13945)
!14005 = !DILocation(line: 805, column: 35, scope: !14002)
!14006 = !DILocation(line: 805, column: 21, scope: !14002)
!14007 = !DILocation(line: 805, column: 5, scope: !14002)
!14008 = !DILocation(line: 805, column: 8, scope: !14002)
!14009 = !DILocation(line: 805, column: 19, scope: !14002)
!14010 = !DILocation(line: 806, column: 18, scope: !13945)
!14011 = !DILocation(line: 806, column: 22, scope: !13945)
!14012 = !DILocation(line: 806, column: 7, scope: !13945)
!14013 = !DILocation(line: 806, column: 5, scope: !13945)
!14014 = !DILocation(line: 807, column: 7, scope: !14015)
!14015 = distinct !DILexicalBlock(scope: !13945, file: !3, line: 807, column: 7)
!14016 = !DILocation(line: 807, column: 7, scope: !13945)
!14017 = !DILocation(line: 809, column: 29, scope: !14018)
!14018 = distinct !DILexicalBlock(scope: !14015, file: !3, line: 808, column: 5)
!14019 = !DILocation(line: 809, column: 42, scope: !14018)
!14020 = !DILocation(line: 809, column: 7, scope: !14018)
!14021 = !DILocation(line: 810, column: 40, scope: !14018)
!14022 = !DILocation(line: 810, column: 23, scope: !14018)
!14023 = !DILocation(line: 810, column: 7, scope: !14018)
!14024 = !DILocation(line: 810, column: 10, scope: !14018)
!14025 = !DILocation(line: 810, column: 21, scope: !14018)
!14026 = !DILocation(line: 811, column: 11, scope: !14027)
!14027 = distinct !DILexicalBlock(scope: !14018, file: !3, line: 811, column: 11)
!14028 = !DILocation(line: 811, column: 14, scope: !14027)
!14029 = !DILocation(line: 811, column: 11, scope: !14018)
!14030 = !DILocation(line: 812, column: 32, scope: !14027)
!14031 = !DILocation(line: 812, column: 18, scope: !14027)
!14032 = !DILocation(line: 812, column: 2, scope: !14027)
!14033 = !DILocation(line: 812, column: 5, scope: !14027)
!14034 = !DILocation(line: 812, column: 16, scope: !14027)
!14035 = !DILocation(line: 813, column: 5, scope: !14018)
!14036 = !DILocation(line: 816, column: 31, scope: !13945)
!14037 = !DILocation(line: 816, column: 3, scope: !13945)
!14038 = !DILocation(line: 817, column: 32, scope: !13945)
!14039 = !DILocation(line: 817, column: 3, scope: !13945)
!14040 = !DILocation(line: 818, column: 1, scope: !13945)
!14041 = distinct !DISubprogram(name: "make_gimple_switch_edges", scope: !3, file: !3, line: 916, type: !4218, scopeLine: 917, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14042 = !DILocalVariable(name: "bb", arg: 1, scope: !14041, file: !3, line: 916, type: !3523)
!14043 = !DILocation(line: 916, column: 39, scope: !14041)
!14044 = !DILocalVariable(name: "entry", scope: !14041, file: !3, line: 918, type: !2882)
!14045 = !DILocation(line: 918, column: 10, scope: !14041)
!14046 = !DILocation(line: 918, column: 29, scope: !14041)
!14047 = !DILocation(line: 918, column: 18, scope: !14041)
!14048 = !DILocalVariable(name: "entry_locus", scope: !14041, file: !3, line: 919, type: !2680)
!14049 = !DILocation(line: 919, column: 14, scope: !14041)
!14050 = !DILocalVariable(name: "i", scope: !14041, file: !3, line: 920, type: !3027)
!14051 = !DILocation(line: 920, column: 10, scope: !14041)
!14052 = !DILocalVariable(name: "n", scope: !14041, file: !3, line: 920, type: !3027)
!14053 = !DILocation(line: 920, column: 13, scope: !14041)
!14054 = !DILocation(line: 922, column: 34, scope: !14041)
!14055 = !DILocation(line: 922, column: 17, scope: !14041)
!14056 = !DILocation(line: 922, column: 15, scope: !14041)
!14057 = !DILocation(line: 924, column: 33, scope: !14041)
!14058 = !DILocation(line: 924, column: 7, scope: !14041)
!14059 = !DILocation(line: 924, column: 5, scope: !14041)
!14060 = !DILocation(line: 926, column: 10, scope: !14061)
!14061 = distinct !DILexicalBlock(scope: !14041, file: !3, line: 926, column: 3)
!14062 = !DILocation(line: 926, column: 8, scope: !14061)
!14063 = !DILocation(line: 926, column: 15, scope: !14064)
!14064 = distinct !DILexicalBlock(scope: !14061, file: !3, line: 926, column: 3)
!14065 = !DILocation(line: 926, column: 19, scope: !14064)
!14066 = !DILocation(line: 926, column: 17, scope: !14064)
!14067 = !DILocation(line: 926, column: 3, scope: !14061)
!14068 = !DILocalVariable(name: "lab", scope: !14069, file: !3, line: 928, type: !2553)
!14069 = distinct !DILexicalBlock(scope: !14064, file: !3, line: 927, column: 5)
!14070 = !DILocation(line: 928, column: 12, scope: !14069)
!14071 = !DILocation(line: 928, column: 18, scope: !14069)
!14072 = !DILocalVariable(name: "label_bb", scope: !14069, file: !3, line: 929, type: !3523)
!14073 = !DILocation(line: 929, column: 19, scope: !14069)
!14074 = !DILocation(line: 929, column: 30, scope: !14069)
!14075 = !DILocation(line: 930, column: 18, scope: !14069)
!14076 = !DILocation(line: 930, column: 22, scope: !14069)
!14077 = !DILocation(line: 930, column: 7, scope: !14069)
!14078 = !DILocation(line: 931, column: 29, scope: !14069)
!14079 = !DILocation(line: 931, column: 42, scope: !14069)
!14080 = !DILocation(line: 931, column: 7, scope: !14069)
!14081 = !DILocation(line: 932, column: 5, scope: !14069)
!14082 = !DILocation(line: 926, column: 22, scope: !14064)
!14083 = !DILocation(line: 926, column: 3, scope: !14064)
!14084 = distinct !{!14084, !14067, !14085}
!14085 = !DILocation(line: 932, column: 5, scope: !14061)
!14086 = !DILocation(line: 933, column: 1, scope: !14041)
!14087 = distinct !DISubprogram(name: "make_gimple_asm_edges", scope: !3, file: !3, line: 1021, type: !4218, scopeLine: 1022, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14088 = !DILocalVariable(name: "bb", arg: 1, scope: !14087, file: !3, line: 1021, type: !3523)
!14089 = !DILocation(line: 1021, column: 36, scope: !14087)
!14090 = !DILocalVariable(name: "stmt", scope: !14087, file: !3, line: 1023, type: !2882)
!14091 = !DILocation(line: 1023, column: 10, scope: !14087)
!14092 = !DILocation(line: 1023, column: 28, scope: !14087)
!14093 = !DILocation(line: 1023, column: 17, scope: !14087)
!14094 = !DILocalVariable(name: "stmt_loc", scope: !14087, file: !3, line: 1024, type: !2680)
!14095 = !DILocation(line: 1024, column: 14, scope: !14087)
!14096 = !DILocation(line: 1024, column: 42, scope: !14087)
!14097 = !DILocation(line: 1024, column: 25, scope: !14087)
!14098 = !DILocalVariable(name: "i", scope: !14087, file: !3, line: 1025, type: !2548)
!14099 = !DILocation(line: 1025, column: 7, scope: !14087)
!14100 = !DILocalVariable(name: "n", scope: !14087, file: !3, line: 1025, type: !2548)
!14101 = !DILocation(line: 1025, column: 10, scope: !14087)
!14102 = !DILocation(line: 1025, column: 34, scope: !14087)
!14103 = !DILocation(line: 1025, column: 14, scope: !14087)
!14104 = !DILocation(line: 1027, column: 10, scope: !14105)
!14105 = distinct !DILexicalBlock(scope: !14087, file: !3, line: 1027, column: 3)
!14106 = !DILocation(line: 1027, column: 8, scope: !14105)
!14107 = !DILocation(line: 1027, column: 15, scope: !14108)
!14108 = distinct !DILexicalBlock(scope: !14105, file: !3, line: 1027, column: 3)
!14109 = !DILocation(line: 1027, column: 19, scope: !14108)
!14110 = !DILocation(line: 1027, column: 17, scope: !14108)
!14111 = !DILocation(line: 1027, column: 3, scope: !14105)
!14112 = !DILocalVariable(name: "label", scope: !14113, file: !3, line: 1029, type: !2553)
!14113 = distinct !DILexicalBlock(scope: !14108, file: !3, line: 1028, column: 5)
!14114 = !DILocation(line: 1029, column: 12, scope: !14113)
!14115 = !DILocation(line: 1029, column: 20, scope: !14113)
!14116 = !DILocalVariable(name: "label_bb", scope: !14113, file: !3, line: 1030, type: !3523)
!14117 = !DILocation(line: 1030, column: 19, scope: !14113)
!14118 = !DILocation(line: 1030, column: 30, scope: !14113)
!14119 = !DILocation(line: 1031, column: 18, scope: !14113)
!14120 = !DILocation(line: 1031, column: 22, scope: !14113)
!14121 = !DILocation(line: 1031, column: 7, scope: !14113)
!14122 = !DILocation(line: 1032, column: 29, scope: !14113)
!14123 = !DILocation(line: 1032, column: 39, scope: !14113)
!14124 = !DILocation(line: 1032, column: 7, scope: !14113)
!14125 = !DILocation(line: 1033, column: 5, scope: !14113)
!14126 = !DILocation(line: 1027, column: 22, scope: !14108)
!14127 = !DILocation(line: 1027, column: 3, scope: !14108)
!14128 = distinct !{!14128, !14111, !14129}
!14129 = !DILocation(line: 1033, column: 5, scope: !14105)
!14130 = !DILocation(line: 1034, column: 1, scope: !14087)
!14131 = distinct !DISubprogram(name: "single_succ", scope: !382, file: !382, line: 663, type: !14132, scopeLine: 664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14132 = !DISubroutineType(types: !14133)
!14133 = !{!3523, !4241}
!14134 = !DILocalVariable(name: "bb", arg: 1, scope: !14131, file: !382, line: 663, type: !4241)
!14135 = !DILocation(line: 663, column: 32, scope: !14131)
!14136 = !DILocation(line: 665, column: 28, scope: !14131)
!14137 = !DILocation(line: 665, column: 10, scope: !14131)
!14138 = !DILocation(line: 665, column: 33, scope: !14131)
!14139 = !DILocation(line: 665, column: 3, scope: !14131)
!14140 = distinct !DISubprogram(name: "assign_discriminator", scope: !3, file: !3, line: 762, type: !14141, scopeLine: 763, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14141 = !DISubroutineType(types: !14142)
!14142 = !{null, !2680, !3523}
!14143 = !DILocalVariable(name: "locus", arg: 1, scope: !14140, file: !3, line: 762, type: !2680)
!14144 = !DILocation(line: 762, column: 34, scope: !14140)
!14145 = !DILocalVariable(name: "bb", arg: 2, scope: !14140, file: !3, line: 762, type: !3523)
!14146 = !DILocation(line: 762, column: 53, scope: !14140)
!14147 = !DILocalVariable(name: "first_in_to_bb", scope: !14140, file: !3, line: 764, type: !2882)
!14148 = !DILocation(line: 764, column: 10, scope: !14140)
!14149 = !DILocalVariable(name: "last_in_to_bb", scope: !14140, file: !3, line: 764, type: !2882)
!14150 = !DILocation(line: 764, column: 26, scope: !14140)
!14151 = !DILocation(line: 766, column: 7, scope: !14152)
!14152 = distinct !DILexicalBlock(scope: !14140, file: !3, line: 766, column: 7)
!14153 = !DILocation(line: 766, column: 13, scope: !14152)
!14154 = !DILocation(line: 766, column: 18, scope: !14152)
!14155 = !DILocation(line: 766, column: 21, scope: !14152)
!14156 = !DILocation(line: 766, column: 25, scope: !14152)
!14157 = !DILocation(line: 766, column: 39, scope: !14152)
!14158 = !DILocation(line: 766, column: 7, scope: !14140)
!14159 = !DILocation(line: 767, column: 5, scope: !14152)
!14160 = !DILocation(line: 769, column: 42, scope: !14140)
!14161 = !DILocation(line: 769, column: 20, scope: !14140)
!14162 = !DILocation(line: 769, column: 18, scope: !14140)
!14163 = !DILocation(line: 770, column: 30, scope: !14140)
!14164 = !DILocation(line: 770, column: 19, scope: !14140)
!14165 = !DILocation(line: 770, column: 17, scope: !14140)
!14166 = !DILocation(line: 771, column: 8, scope: !14167)
!14167 = distinct !DILexicalBlock(scope: !14140, file: !3, line: 771, column: 7)
!14168 = !DILocation(line: 771, column: 23, scope: !14167)
!14169 = !DILocation(line: 771, column: 39, scope: !14167)
!14170 = !DILocation(line: 771, column: 63, scope: !14167)
!14171 = !DILocation(line: 771, column: 46, scope: !14167)
!14172 = !DILocation(line: 771, column: 26, scope: !14167)
!14173 = !DILocation(line: 772, column: 7, scope: !14167)
!14174 = !DILocation(line: 772, column: 11, scope: !14167)
!14175 = !DILocation(line: 772, column: 25, scope: !14167)
!14176 = !DILocation(line: 772, column: 41, scope: !14167)
!14177 = !DILocation(line: 772, column: 65, scope: !14167)
!14178 = !DILocation(line: 772, column: 48, scope: !14167)
!14179 = !DILocation(line: 772, column: 28, scope: !14167)
!14180 = !DILocation(line: 771, column: 7, scope: !14140)
!14181 = !DILocation(line: 773, column: 55, scope: !14167)
!14182 = !DILocation(line: 773, column: 25, scope: !14167)
!14183 = !DILocation(line: 773, column: 5, scope: !14167)
!14184 = !DILocation(line: 773, column: 9, scope: !14167)
!14185 = !DILocation(line: 773, column: 23, scope: !14167)
!14186 = !DILocation(line: 774, column: 1, scope: !14140)
!14187 = distinct !DISubprogram(name: "first_non_label_stmt", scope: !3, file: !3, line: 2352, type: !4516, scopeLine: 2353, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14188 = !DILocalVariable(name: "bb", arg: 1, scope: !14187, file: !3, line: 2352, type: !3523)
!14189 = !DILocation(line: 2352, column: 35, scope: !14187)
!14190 = !DILocalVariable(name: "i", scope: !14187, file: !3, line: 2354, type: !4074)
!14191 = !DILocation(line: 2354, column: 24, scope: !14187)
!14192 = !DILocation(line: 2354, column: 42, scope: !14187)
!14193 = !DILocation(line: 2354, column: 28, scope: !14187)
!14194 = !DILocation(line: 2355, column: 3, scope: !14187)
!14195 = !DILocation(line: 2355, column: 11, scope: !14187)
!14196 = !DILocation(line: 2355, column: 25, scope: !14187)
!14197 = !DILocation(line: 2355, column: 41, scope: !14187)
!14198 = !DILocation(line: 2355, column: 28, scope: !14187)
!14199 = !DILocation(line: 2355, column: 55, scope: !14187)
!14200 = !DILocation(line: 0, scope: !14187)
!14201 = !DILocation(line: 2356, column: 5, scope: !14187)
!14202 = distinct !{!14202, !14194, !14203}
!14203 = !DILocation(line: 2356, column: 17, scope: !14187)
!14204 = !DILocation(line: 2357, column: 11, scope: !14187)
!14205 = !DILocation(line: 2357, column: 10, scope: !14187)
!14206 = !DILocation(line: 2357, column: 27, scope: !14187)
!14207 = !DILocation(line: 2357, column: 3, scope: !14187)
!14208 = distinct !DISubprogram(name: "same_line_p", scope: !3, file: !3, line: 739, type: !14209, scopeLine: 740, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14209 = !DISubroutineType(types: !14210)
!14210 = !{!2672, !2680, !2680}
!14211 = !DILocalVariable(name: "locus1", arg: 1, scope: !14208, file: !3, line: 739, type: !2680)
!14212 = !DILocation(line: 739, column: 25, scope: !14208)
!14213 = !DILocalVariable(name: "locus2", arg: 2, scope: !14208, file: !3, line: 739, type: !2680)
!14214 = !DILocation(line: 739, column: 44, scope: !14208)
!14215 = !DILocalVariable(name: "from", scope: !14208, file: !3, line: 741, type: !14216)
!14216 = !DIDerivedType(tag: DW_TAG_typedef, name: "expanded_location", file: !2681, line: 52, baseType: !14217)
!14217 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2681, line: 40, size: 192, elements: !14218)
!14218 = !{!14219, !14220, !14221, !14222}
!14219 = !DIDerivedType(tag: DW_TAG_member, name: "file", scope: !14217, file: !2681, line: 43, baseType: !2756, size: 64)
!14220 = !DIDerivedType(tag: DW_TAG_member, name: "line", scope: !14217, file: !2681, line: 46, baseType: !2548, size: 32, offset: 64)
!14221 = !DIDerivedType(tag: DW_TAG_member, name: "column", scope: !14217, file: !2681, line: 48, baseType: !2548, size: 32, offset: 96)
!14222 = !DIDerivedType(tag: DW_TAG_member, name: "sysp", scope: !14217, file: !2681, line: 51, baseType: !2672, size: 8, offset: 128)
!14223 = !DILocation(line: 741, column: 21, scope: !14208)
!14224 = !DILocalVariable(name: "to", scope: !14208, file: !3, line: 741, type: !14216)
!14225 = !DILocation(line: 741, column: 27, scope: !14208)
!14226 = !DILocation(line: 743, column: 7, scope: !14227)
!14227 = distinct !DILexicalBlock(scope: !14208, file: !3, line: 743, column: 7)
!14228 = !DILocation(line: 743, column: 17, scope: !14227)
!14229 = !DILocation(line: 743, column: 14, scope: !14227)
!14230 = !DILocation(line: 743, column: 7, scope: !14208)
!14231 = !DILocation(line: 744, column: 5, scope: !14227)
!14232 = !DILocation(line: 746, column: 27, scope: !14208)
!14233 = !DILocation(line: 746, column: 10, scope: !14208)
!14234 = !DILocation(line: 747, column: 25, scope: !14208)
!14235 = !DILocation(line: 747, column: 8, scope: !14208)
!14236 = !DILocation(line: 749, column: 12, scope: !14237)
!14237 = distinct !DILexicalBlock(scope: !14208, file: !3, line: 749, column: 7)
!14238 = !DILocation(line: 749, column: 23, scope: !14237)
!14239 = !DILocation(line: 749, column: 17, scope: !14237)
!14240 = !DILocation(line: 749, column: 7, scope: !14208)
!14241 = !DILocation(line: 750, column: 5, scope: !14237)
!14242 = !DILocation(line: 751, column: 12, scope: !14243)
!14243 = distinct !DILexicalBlock(scope: !14208, file: !3, line: 751, column: 7)
!14244 = !DILocation(line: 751, column: 23, scope: !14243)
!14245 = !DILocation(line: 751, column: 17, scope: !14243)
!14246 = !DILocation(line: 751, column: 7, scope: !14208)
!14247 = !DILocation(line: 752, column: 5, scope: !14243)
!14248 = !DILocation(line: 753, column: 16, scope: !14208)
!14249 = !DILocation(line: 753, column: 21, scope: !14208)
!14250 = !DILocation(line: 754, column: 11, scope: !14208)
!14251 = !DILocation(line: 754, column: 17, scope: !14208)
!14252 = !DILocation(line: 754, column: 22, scope: !14208)
!14253 = !DILocation(line: 755, column: 11, scope: !14208)
!14254 = !DILocation(line: 755, column: 27, scope: !14208)
!14255 = !DILocation(line: 755, column: 36, scope: !14208)
!14256 = !DILocation(line: 755, column: 14, scope: !14208)
!14257 = !DILocation(line: 755, column: 42, scope: !14208)
!14258 = !DILocation(line: 0, scope: !14208)
!14259 = !DILocation(line: 753, column: 10, scope: !14208)
!14260 = !DILocation(line: 753, column: 3, scope: !14208)
!14261 = !DILocation(line: 756, column: 1, scope: !14208)
!14262 = distinct !DISubprogram(name: "next_discriminator_for_locus", scope: !3, file: !3, line: 714, type: !14263, scopeLine: 715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14263 = !DISubroutineType(types: !14264)
!14264 = !{!2548, !2680}
!14265 = !DILocalVariable(name: "locus", arg: 1, scope: !14262, file: !3, line: 714, type: !2680)
!14266 = !DILocation(line: 714, column: 42, scope: !14262)
!14267 = !DILocalVariable(name: "item", scope: !14262, file: !3, line: 716, type: !4046)
!14268 = !DILocation(line: 716, column: 28, scope: !14262)
!14269 = !DILocalVariable(name: "slot", scope: !14262, file: !3, line: 717, type: !4050)
!14270 = !DILocation(line: 717, column: 30, scope: !14262)
!14271 = !DILocation(line: 719, column: 16, scope: !14262)
!14272 = !DILocation(line: 719, column: 8, scope: !14262)
!14273 = !DILocation(line: 719, column: 14, scope: !14262)
!14274 = !DILocation(line: 720, column: 8, scope: !14262)
!14275 = !DILocation(line: 720, column: 22, scope: !14262)
!14276 = !DILocation(line: 722, column: 33, scope: !14262)
!14277 = !DILocation(line: 722, column: 58, scope: !14262)
!14278 = !DILocation(line: 723, column: 45, scope: !14262)
!14279 = !DILocation(line: 722, column: 7, scope: !14262)
!14280 = !DILocation(line: 721, column: 10, scope: !14262)
!14281 = !DILocation(line: 721, column: 8, scope: !14262)
!14282 = !DILocation(line: 724, column: 3, scope: !14262)
!14283 = !DILocation(line: 725, column: 8, scope: !14284)
!14284 = distinct !DILexicalBlock(scope: !14262, file: !3, line: 725, column: 7)
!14285 = !DILocation(line: 725, column: 7, scope: !14284)
!14286 = !DILocation(line: 725, column: 13, scope: !14284)
!14287 = !DILocation(line: 725, column: 7, scope: !14262)
!14288 = !DILocation(line: 727, column: 15, scope: !14289)
!14289 = distinct !DILexicalBlock(scope: !14284, file: !3, line: 726, column: 5)
!14290 = !DILocation(line: 727, column: 8, scope: !14289)
!14291 = !DILocation(line: 727, column: 13, scope: !14289)
!14292 = !DILocation(line: 728, column: 7, scope: !14289)
!14293 = !DILocation(line: 729, column: 24, scope: !14289)
!14294 = !DILocation(line: 729, column: 9, scope: !14289)
!14295 = !DILocation(line: 729, column: 8, scope: !14289)
!14296 = !DILocation(line: 729, column: 16, scope: !14289)
!14297 = !DILocation(line: 729, column: 22, scope: !14289)
!14298 = !DILocation(line: 730, column: 9, scope: !14289)
!14299 = !DILocation(line: 730, column: 8, scope: !14289)
!14300 = !DILocation(line: 730, column: 16, scope: !14289)
!14301 = !DILocation(line: 730, column: 30, scope: !14289)
!14302 = !DILocation(line: 731, column: 5, scope: !14289)
!14303 = !DILocation(line: 732, column: 5, scope: !14262)
!14304 = !DILocation(line: 732, column: 4, scope: !14262)
!14305 = !DILocation(line: 732, column: 12, scope: !14262)
!14306 = !DILocation(line: 732, column: 25, scope: !14262)
!14307 = !DILocation(line: 733, column: 12, scope: !14262)
!14308 = !DILocation(line: 733, column: 11, scope: !14262)
!14309 = !DILocation(line: 733, column: 19, scope: !14262)
!14310 = !DILocation(line: 733, column: 3, scope: !14262)
!14311 = distinct !DISubprogram(name: "get_lineno", scope: !5827, file: !5827, line: 172, type: !14312, scopeLine: 173, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14312 = !DISubroutineType(types: !14313)
!14313 = !{!2548, !4543}
!14314 = !DILocalVariable(name: "stmt", arg: 1, scope: !14311, file: !5827, line: 172, type: !4543)
!14315 = !DILocation(line: 172, column: 26, scope: !14311)
!14316 = !DILocalVariable(name: "loc", scope: !14311, file: !5827, line: 174, type: !2680)
!14317 = !DILocation(line: 174, column: 14, scope: !14311)
!14318 = !DILocation(line: 176, column: 8, scope: !14319)
!14319 = distinct !DILexicalBlock(scope: !14311, file: !5827, line: 176, column: 7)
!14320 = !DILocation(line: 176, column: 7, scope: !14311)
!14321 = !DILocation(line: 177, column: 5, scope: !14319)
!14322 = !DILocation(line: 179, column: 26, scope: !14311)
!14323 = !DILocation(line: 179, column: 9, scope: !14311)
!14324 = !DILocation(line: 179, column: 7, scope: !14311)
!14325 = !DILocation(line: 180, column: 7, scope: !14326)
!14326 = distinct !DILexicalBlock(scope: !14311, file: !5827, line: 180, column: 7)
!14327 = !DILocation(line: 180, column: 11, scope: !14326)
!14328 = !DILocation(line: 180, column: 7, scope: !14311)
!14329 = !DILocation(line: 181, column: 5, scope: !14326)
!14330 = !DILocation(line: 183, column: 10, scope: !14311)
!14331 = !DILocation(line: 183, column: 3, scope: !14311)
!14332 = !DILocation(line: 184, column: 1, scope: !14311)
!14333 = distinct !DISubprogram(name: "bb_seq", scope: !581, file: !581, line: 237, type: !14334, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14334 = !DISubroutineType(types: !14335)
!14335 = !{!2872, !4241}
!14336 = !DILocalVariable(name: "bb", arg: 1, scope: !14333, file: !581, line: 237, type: !4241)
!14337 = !DILocation(line: 237, column: 27, scope: !14333)
!14338 = !DILocation(line: 239, column: 13, scope: !14333)
!14339 = !DILocation(line: 239, column: 17, scope: !14333)
!14340 = !DILocation(line: 239, column: 23, scope: !14333)
!14341 = !DILocation(line: 239, column: 33, scope: !14333)
!14342 = !DILocation(line: 239, column: 36, scope: !14333)
!14343 = !DILocation(line: 239, column: 40, scope: !14333)
!14344 = !DILocation(line: 239, column: 43, scope: !14333)
!14345 = !DILocation(line: 239, column: 10, scope: !14333)
!14346 = !DILocation(line: 239, column: 53, scope: !14333)
!14347 = !DILocation(line: 239, column: 57, scope: !14333)
!14348 = !DILocation(line: 239, column: 60, scope: !14333)
!14349 = !DILocation(line: 239, column: 68, scope: !14333)
!14350 = !DILocation(line: 239, column: 3, scope: !14333)
!14351 = distinct !DISubprogram(name: "gimple_set_op", scope: !581, file: !581, line: 1663, type: !5547, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14352 = !DILocalVariable(name: "gs", arg: 1, scope: !14351, file: !581, line: 1663, type: !2882)
!14353 = !DILocation(line: 1663, column: 23, scope: !14351)
!14354 = !DILocalVariable(name: "i", arg: 2, scope: !14351, file: !581, line: 1663, type: !7)
!14355 = !DILocation(line: 1663, column: 36, scope: !14351)
!14356 = !DILocalVariable(name: "op", arg: 3, scope: !14351, file: !581, line: 1663, type: !2553)
!14357 = !DILocation(line: 1663, column: 44, scope: !14351)
!14358 = !DILocation(line: 1665, column: 3, scope: !14351)
!14359 = !DILocation(line: 1671, column: 24, scope: !14351)
!14360 = !DILocation(line: 1671, column: 15, scope: !14351)
!14361 = !DILocation(line: 1671, column: 3, scope: !14351)
!14362 = !DILocation(line: 1671, column: 19, scope: !14351)
!14363 = !DILocation(line: 1671, column: 22, scope: !14351)
!14364 = !DILocation(line: 1672, column: 1, scope: !14351)
!14365 = distinct !DISubprogram(name: "gimple_has_ops", scope: !581, file: !581, line: 1274, type: !5609, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14366 = !DILocalVariable(name: "g", arg: 1, scope: !14365, file: !581, line: 1274, type: !4543)
!14367 = !DILocation(line: 1274, column: 30, scope: !14365)
!14368 = !DILocation(line: 1276, column: 23, scope: !14365)
!14369 = !DILocation(line: 1276, column: 10, scope: !14365)
!14370 = !DILocation(line: 1276, column: 26, scope: !14365)
!14371 = !DILocation(line: 1276, column: 41, scope: !14365)
!14372 = !DILocation(line: 1276, column: 57, scope: !14365)
!14373 = !DILocation(line: 1276, column: 44, scope: !14365)
!14374 = !DILocation(line: 1276, column: 60, scope: !14365)
!14375 = !DILocation(line: 0, scope: !14365)
!14376 = !DILocation(line: 1276, column: 3, scope: !14365)
!14377 = distinct !DISubprogram(name: "gimple_ops", scope: !581, file: !581, line: 1614, type: !14378, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14378 = !DISubroutineType(types: !14379)
!14379 = !{!2916, !2882}
!14380 = !DILocalVariable(name: "gs", arg: 1, scope: !14377, file: !581, line: 1614, type: !2882)
!14381 = !DILocation(line: 1614, column: 20, scope: !14377)
!14382 = !DILocalVariable(name: "off", scope: !14377, file: !581, line: 1616, type: !3027)
!14383 = !DILocation(line: 1616, column: 10, scope: !14377)
!14384 = !DILocation(line: 1621, column: 56, scope: !14377)
!14385 = !DILocation(line: 1621, column: 28, scope: !14377)
!14386 = !DILocation(line: 1621, column: 9, scope: !14377)
!14387 = !DILocation(line: 1621, column: 7, scope: !14377)
!14388 = !DILocation(line: 1622, column: 3, scope: !14377)
!14389 = !DILocation(line: 1624, column: 29, scope: !14377)
!14390 = !DILocation(line: 1624, column: 20, scope: !14377)
!14391 = !DILocation(line: 1624, column: 34, scope: !14377)
!14392 = !DILocation(line: 1624, column: 32, scope: !14377)
!14393 = !DILocation(line: 1624, column: 10, scope: !14377)
!14394 = !DILocation(line: 1624, column: 3, scope: !14377)
!14395 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !581, file: !581, line: 1073, type: !14396, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14396 = !DISubroutineType(types: !14397)
!14397 = !{!864, !2882}
!14398 = !DILocalVariable(name: "gs", arg: 1, scope: !14395, file: !581, line: 1073, type: !2882)
!14399 = !DILocation(line: 1073, column: 36, scope: !14395)
!14400 = !DILocation(line: 1075, column: 37, scope: !14395)
!14401 = !DILocation(line: 1075, column: 24, scope: !14395)
!14402 = !DILocation(line: 1075, column: 10, scope: !14395)
!14403 = !DILocation(line: 1075, column: 3, scope: !14395)
!14404 = distinct !DISubprogram(name: "gss_for_code", scope: !581, file: !581, line: 1061, type: !14405, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14405 = !DISubroutineType(types: !14406)
!14406 = !{!864, !580}
!14407 = !DILocalVariable(name: "code", arg: 1, scope: !14404, file: !581, line: 1061, type: !580)
!14408 = !DILocation(line: 1061, column: 32, scope: !14404)
!14409 = !DILocation(line: 1066, column: 24, scope: !14404)
!14410 = !DILocation(line: 1066, column: 10, scope: !14404)
!14411 = !DILocation(line: 1066, column: 3, scope: !14404)
!14412 = distinct !DISubprogram(name: "VEC_eh_landing_pad_base_iterate", scope: !6, file: !6, line: 188, type: !14413, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14413 = !DISubroutineType(types: !14414)
!14414 = !{!2548, !14415, !7, !14417}
!14415 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14416, size: 64)
!14416 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3432)
!14417 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3439, size: 64)
!14418 = !DILocalVariable(name: "vec_", arg: 1, scope: !14412, file: !6, line: 188, type: !14415)
!14419 = !DILocation(line: 188, column: 1, scope: !14412)
!14420 = !DILocalVariable(name: "ix_", arg: 2, scope: !14412, file: !6, line: 188, type: !7)
!14421 = !DILocalVariable(name: "ptr", arg: 3, scope: !14412, file: !6, line: 188, type: !14417)
!14422 = !DILocation(line: 188, column: 1, scope: !14423)
!14423 = distinct !DILexicalBlock(scope: !14412, file: !6, line: 188, column: 1)
!14424 = !DILocation(line: 188, column: 1, scope: !14425)
!14425 = distinct !DILexicalBlock(scope: !14423, file: !6, line: 188, column: 1)
!14426 = !DILocation(line: 188, column: 1, scope: !14427)
!14427 = distinct !DILexicalBlock(scope: !14423, file: !6, line: 188, column: 1)
!14428 = distinct !DISubprogram(name: "ehr_next", scope: !6, file: !6, line: 364, type: !14429, scopeLine: 365, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14429 = !DISubroutineType(types: !14430)
!14430 = !{!3365, !3365, !3365}
!14431 = !DILocalVariable(name: "r", arg: 1, scope: !14428, file: !6, line: 364, type: !3365)
!14432 = !DILocation(line: 364, column: 21, scope: !14428)
!14433 = !DILocalVariable(name: "start", arg: 2, scope: !14428, file: !6, line: 364, type: !3365)
!14434 = !DILocation(line: 364, column: 34, scope: !14428)
!14435 = !DILocation(line: 366, column: 7, scope: !14436)
!14436 = distinct !DILexicalBlock(scope: !14428, file: !6, line: 366, column: 7)
!14437 = !DILocation(line: 366, column: 10, scope: !14436)
!14438 = !DILocation(line: 366, column: 7, scope: !14428)
!14439 = !DILocation(line: 367, column: 9, scope: !14436)
!14440 = !DILocation(line: 367, column: 12, scope: !14436)
!14441 = !DILocation(line: 367, column: 7, scope: !14436)
!14442 = !DILocation(line: 367, column: 5, scope: !14436)
!14443 = !DILocation(line: 368, column: 12, scope: !14444)
!14444 = distinct !DILexicalBlock(scope: !14436, file: !6, line: 368, column: 12)
!14445 = !DILocation(line: 368, column: 15, scope: !14444)
!14446 = !DILocation(line: 368, column: 25, scope: !14444)
!14447 = !DILocation(line: 368, column: 28, scope: !14444)
!14448 = !DILocation(line: 368, column: 33, scope: !14444)
!14449 = !DILocation(line: 368, column: 30, scope: !14444)
!14450 = !DILocation(line: 368, column: 12, scope: !14436)
!14451 = !DILocation(line: 369, column: 9, scope: !14444)
!14452 = !DILocation(line: 369, column: 12, scope: !14444)
!14453 = !DILocation(line: 369, column: 7, scope: !14444)
!14454 = !DILocation(line: 369, column: 5, scope: !14444)
!14455 = !DILocation(line: 372, column: 7, scope: !14456)
!14456 = distinct !DILexicalBlock(scope: !14444, file: !6, line: 371, column: 5)
!14457 = !DILocation(line: 374, column: 8, scope: !14458)
!14458 = distinct !DILexicalBlock(scope: !14456, file: !6, line: 373, column: 2)
!14459 = !DILocation(line: 374, column: 11, scope: !14458)
!14460 = !DILocation(line: 374, column: 6, scope: !14458)
!14461 = !DILocation(line: 375, column: 8, scope: !14462)
!14462 = distinct !DILexicalBlock(scope: !14458, file: !6, line: 375, column: 8)
!14463 = !DILocation(line: 375, column: 13, scope: !14462)
!14464 = !DILocation(line: 375, column: 10, scope: !14462)
!14465 = !DILocation(line: 375, column: 8, scope: !14458)
!14466 = !DILocation(line: 376, column: 6, scope: !14462)
!14467 = !DILocation(line: 377, column: 2, scope: !14458)
!14468 = !DILocation(line: 378, column: 14, scope: !14456)
!14469 = !DILocation(line: 378, column: 17, scope: !14456)
!14470 = !DILocation(line: 378, column: 27, scope: !14456)
!14471 = distinct !{!14471, !14455, !14472}
!14472 = !DILocation(line: 378, column: 34, scope: !14456)
!14473 = !DILocation(line: 379, column: 11, scope: !14456)
!14474 = !DILocation(line: 379, column: 14, scope: !14456)
!14475 = !DILocation(line: 379, column: 9, scope: !14456)
!14476 = !DILocation(line: 381, column: 10, scope: !14428)
!14477 = !DILocation(line: 381, column: 3, scope: !14428)
!14478 = !DILocation(line: 382, column: 1, scope: !14428)
!14479 = distinct !DISubprogram(name: "gimple_set_num_ops", scope: !581, file: !581, line: 1605, type: !5564, scopeLine: 1606, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14480 = !DILocalVariable(name: "gs", arg: 1, scope: !14479, file: !581, line: 1605, type: !2882)
!14481 = !DILocation(line: 1605, column: 28, scope: !14479)
!14482 = !DILocalVariable(name: "num_ops", arg: 2, scope: !14479, file: !581, line: 1605, type: !7)
!14483 = !DILocation(line: 1605, column: 41, scope: !14479)
!14484 = !DILocation(line: 1607, column: 24, scope: !14479)
!14485 = !DILocation(line: 1607, column: 3, scope: !14479)
!14486 = !DILocation(line: 1607, column: 7, scope: !14479)
!14487 = !DILocation(line: 1607, column: 14, scope: !14479)
!14488 = !DILocation(line: 1607, column: 22, scope: !14479)
!14489 = !DILocation(line: 1608, column: 1, scope: !14479)
!14490 = distinct !DISubprogram(name: "link_use_stmts_after", scope: !5827, file: !5827, line: 1018, type: !14491, scopeLine: 1019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14491 = !DISubroutineType(types: !14492)
!14492 = !{null, !4052, !5830}
!14493 = !DILocalVariable(name: "head", arg: 1, scope: !14490, file: !5827, line: 1018, type: !4052)
!14494 = !DILocation(line: 1018, column: 37, scope: !14490)
!14495 = !DILocalVariable(name: "imm", arg: 2, scope: !14490, file: !5827, line: 1018, type: !5830)
!14496 = !DILocation(line: 1018, column: 61, scope: !14490)
!14497 = !DILocalVariable(name: "use_p", scope: !14490, file: !5827, line: 1020, type: !4052)
!14498 = !DILocation(line: 1020, column: 17, scope: !14490)
!14499 = !DILocalVariable(name: "last_p", scope: !14490, file: !5827, line: 1021, type: !4052)
!14500 = !DILocation(line: 1021, column: 17, scope: !14490)
!14501 = !DILocation(line: 1021, column: 26, scope: !14490)
!14502 = !DILocalVariable(name: "head_stmt", scope: !14490, file: !5827, line: 1022, type: !2882)
!14503 = !DILocation(line: 1022, column: 10, scope: !14490)
!14504 = !DILocation(line: 1022, column: 22, scope: !14490)
!14505 = !DILocalVariable(name: "use", scope: !14490, file: !5827, line: 1023, type: !2553)
!14506 = !DILocation(line: 1023, column: 8, scope: !14490)
!14507 = !DILocation(line: 1023, column: 14, scope: !14490)
!14508 = !DILocalVariable(name: "op_iter", scope: !14490, file: !5827, line: 1024, type: !9645)
!14509 = !DILocation(line: 1024, column: 15, scope: !14490)
!14510 = !DILocalVariable(name: "flag", scope: !14490, file: !5827, line: 1025, type: !2548)
!14511 = !DILocation(line: 1025, column: 7, scope: !14490)
!14512 = !DILocation(line: 1028, column: 26, scope: !14490)
!14513 = !DILocation(line: 1028, column: 11, scope: !14490)
!14514 = !DILocation(line: 1028, column: 8, scope: !14490)
!14515 = !DILocation(line: 1030, column: 20, scope: !14516)
!14516 = distinct !DILexicalBlock(scope: !14490, file: !5827, line: 1030, column: 7)
!14517 = !DILocation(line: 1030, column: 7, scope: !14516)
!14518 = !DILocation(line: 1030, column: 31, scope: !14516)
!14519 = !DILocation(line: 1030, column: 7, scope: !14490)
!14520 = !DILocation(line: 1032, column: 7, scope: !14521)
!14521 = distinct !DILexicalBlock(scope: !14522, file: !5827, line: 1032, column: 7)
!14522 = distinct !DILexicalBlock(scope: !14516, file: !5827, line: 1031, column: 5)
!14523 = !DILocation(line: 1032, column: 7, scope: !14524)
!14524 = distinct !DILexicalBlock(scope: !14521, file: !5827, line: 1032, column: 7)
!14525 = !DILocation(line: 1033, column: 6, scope: !14526)
!14526 = distinct !DILexicalBlock(scope: !14524, file: !5827, line: 1033, column: 6)
!14527 = !DILocation(line: 1033, column: 30, scope: !14526)
!14528 = !DILocation(line: 1033, column: 27, scope: !14526)
!14529 = !DILocation(line: 1033, column: 6, scope: !14524)
!14530 = !DILocation(line: 1034, column: 34, scope: !14526)
!14531 = !DILocation(line: 1034, column: 41, scope: !14526)
!14532 = !DILocation(line: 1034, column: 47, scope: !14526)
!14533 = !DILocation(line: 1034, column: 13, scope: !14526)
!14534 = !DILocation(line: 1034, column: 11, scope: !14526)
!14535 = !DILocation(line: 1034, column: 4, scope: !14526)
!14536 = distinct !{!14536, !14520, !14537}
!14537 = !DILocation(line: 1034, column: 53, scope: !14521)
!14538 = !DILocation(line: 1035, column: 5, scope: !14522)
!14539 = !DILocation(line: 1038, column: 11, scope: !14540)
!14540 = distinct !DILexicalBlock(scope: !14541, file: !5827, line: 1038, column: 11)
!14541 = distinct !DILexicalBlock(scope: !14516, file: !5827, line: 1037, column: 5)
!14542 = !DILocation(line: 1038, column: 16, scope: !14540)
!14543 = !DILocation(line: 1038, column: 11, scope: !14541)
!14544 = !DILocation(line: 1040, column: 4, scope: !14545)
!14545 = distinct !DILexicalBlock(scope: !14546, file: !5827, line: 1040, column: 4)
!14546 = distinct !DILexicalBlock(scope: !14540, file: !5827, line: 1039, column: 2)
!14547 = !DILocation(line: 1040, column: 4, scope: !14548)
!14548 = distinct !DILexicalBlock(scope: !14545, file: !5827, line: 1040, column: 4)
!14549 = !DILocation(line: 1041, column: 10, scope: !14550)
!14550 = distinct !DILexicalBlock(scope: !14548, file: !5827, line: 1041, column: 10)
!14551 = !DILocation(line: 1041, column: 34, scope: !14550)
!14552 = !DILocation(line: 1041, column: 31, scope: !14550)
!14553 = !DILocation(line: 1041, column: 10, scope: !14548)
!14554 = !DILocation(line: 1042, column: 38, scope: !14550)
!14555 = !DILocation(line: 1042, column: 45, scope: !14550)
!14556 = !DILocation(line: 1042, column: 51, scope: !14550)
!14557 = !DILocation(line: 1042, column: 17, scope: !14550)
!14558 = !DILocation(line: 1042, column: 15, scope: !14550)
!14559 = !DILocation(line: 1042, column: 8, scope: !14550)
!14560 = distinct !{!14560, !14544, !14561}
!14561 = !DILocation(line: 1042, column: 57, scope: !14545)
!14562 = !DILocation(line: 1043, column: 2, scope: !14546)
!14563 = !DILocation(line: 1044, column: 41, scope: !14564)
!14564 = distinct !DILexicalBlock(scope: !14540, file: !5827, line: 1044, column: 16)
!14565 = !DILocation(line: 1044, column: 25, scope: !14564)
!14566 = !DILocation(line: 1044, column: 23, scope: !14564)
!14567 = !DILocation(line: 1044, column: 53, scope: !14564)
!14568 = !DILocation(line: 1044, column: 16, scope: !14540)
!14569 = !DILocation(line: 1046, column: 8, scope: !14570)
!14570 = distinct !DILexicalBlock(scope: !14571, file: !5827, line: 1046, column: 8)
!14571 = distinct !DILexicalBlock(scope: !14564, file: !5827, line: 1045, column: 2)
!14572 = !DILocation(line: 1046, column: 32, scope: !14570)
!14573 = !DILocation(line: 1046, column: 29, scope: !14570)
!14574 = !DILocation(line: 1046, column: 8, scope: !14571)
!14575 = !DILocation(line: 1047, column: 36, scope: !14570)
!14576 = !DILocation(line: 1047, column: 43, scope: !14570)
!14577 = !DILocation(line: 1047, column: 49, scope: !14570)
!14578 = !DILocation(line: 1047, column: 15, scope: !14570)
!14579 = !DILocation(line: 1047, column: 13, scope: !14570)
!14580 = !DILocation(line: 1047, column: 6, scope: !14570)
!14581 = !DILocation(line: 1048, column: 2, scope: !14571)
!14582 = !DILocation(line: 1051, column: 7, scope: !14583)
!14583 = distinct !DILexicalBlock(scope: !14490, file: !5827, line: 1051, column: 7)
!14584 = !DILocation(line: 1051, column: 12, scope: !14583)
!14585 = !DILocation(line: 1051, column: 22, scope: !14583)
!14586 = !DILocation(line: 1051, column: 27, scope: !14583)
!14587 = !DILocation(line: 1051, column: 7, scope: !14490)
!14588 = !DILocation(line: 1052, column: 22, scope: !14583)
!14589 = !DILocation(line: 1052, column: 27, scope: !14583)
!14590 = !DILocation(line: 1052, column: 5, scope: !14583)
!14591 = !DILocation(line: 1053, column: 27, scope: !14490)
!14592 = !DILocation(line: 1053, column: 32, scope: !14490)
!14593 = !DILocation(line: 1053, column: 44, scope: !14490)
!14594 = !DILocation(line: 1053, column: 3, scope: !14490)
!14595 = !DILocation(line: 1054, column: 1, scope: !14490)
!14596 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !5827, file: !5827, line: 910, type: !14597, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14597 = !DISubroutineType(types: !14598)
!14598 = !{!4052, !14599, !2882, !2548}
!14599 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9645, size: 64)
!14600 = !DILocalVariable(name: "ptr", arg: 1, scope: !14596, file: !5827, line: 910, type: !14599)
!14601 = !DILocation(line: 910, column: 35, scope: !14596)
!14602 = !DILocalVariable(name: "phi", arg: 2, scope: !14596, file: !5827, line: 910, type: !2882)
!14603 = !DILocation(line: 910, column: 47, scope: !14596)
!14604 = !DILocalVariable(name: "flags", arg: 3, scope: !14596, file: !5827, line: 910, type: !2548)
!14605 = !DILocation(line: 910, column: 56, scope: !14596)
!14606 = !DILocalVariable(name: "phi_def", scope: !14596, file: !5827, line: 912, type: !2553)
!14607 = !DILocation(line: 912, column: 8, scope: !14596)
!14608 = !DILocation(line: 912, column: 37, scope: !14596)
!14609 = !DILocation(line: 912, column: 18, scope: !14596)
!14610 = !DILocalVariable(name: "comp", scope: !14596, file: !5827, line: 913, type: !2548)
!14611 = !DILocation(line: 913, column: 7, scope: !14596)
!14612 = !DILocation(line: 915, column: 28, scope: !14596)
!14613 = !DILocation(line: 915, column: 3, scope: !14596)
!14614 = !DILocation(line: 916, column: 3, scope: !14596)
!14615 = !DILocation(line: 916, column: 8, scope: !14596)
!14616 = !DILocation(line: 916, column: 13, scope: !14596)
!14617 = !DILocation(line: 918, column: 3, scope: !14596)
!14618 = !DILocation(line: 920, column: 26, scope: !14596)
!14619 = !DILocation(line: 920, column: 11, scope: !14596)
!14620 = !DILocation(line: 920, column: 8, scope: !14596)
!14621 = !DILocation(line: 923, column: 8, scope: !14622)
!14622 = distinct !DILexicalBlock(scope: !14596, file: !5827, line: 923, column: 7)
!14623 = !DILocation(line: 923, column: 16, scope: !14622)
!14624 = !DILocation(line: 923, column: 14, scope: !14622)
!14625 = !DILocation(line: 923, column: 22, scope: !14622)
!14626 = !DILocation(line: 923, column: 7, scope: !14596)
!14627 = !DILocation(line: 925, column: 7, scope: !14628)
!14628 = distinct !DILexicalBlock(scope: !14622, file: !5827, line: 924, column: 5)
!14629 = !DILocation(line: 925, column: 12, scope: !14628)
!14630 = !DILocation(line: 925, column: 17, scope: !14628)
!14631 = !DILocation(line: 926, column: 7, scope: !14628)
!14632 = !DILocation(line: 929, column: 19, scope: !14596)
!14633 = !DILocation(line: 929, column: 3, scope: !14596)
!14634 = !DILocation(line: 929, column: 8, scope: !14596)
!14635 = !DILocation(line: 929, column: 17, scope: !14596)
!14636 = !DILocation(line: 930, column: 39, scope: !14596)
!14637 = !DILocation(line: 930, column: 18, scope: !14596)
!14638 = !DILocation(line: 930, column: 3, scope: !14596)
!14639 = !DILocation(line: 930, column: 8, scope: !14596)
!14640 = !DILocation(line: 930, column: 16, scope: !14596)
!14641 = !DILocation(line: 931, column: 3, scope: !14596)
!14642 = !DILocation(line: 931, column: 8, scope: !14596)
!14643 = !DILocation(line: 931, column: 18, scope: !14596)
!14644 = !DILocation(line: 932, column: 28, scope: !14596)
!14645 = !DILocation(line: 932, column: 10, scope: !14596)
!14646 = !DILocation(line: 932, column: 3, scope: !14596)
!14647 = !DILocation(line: 933, column: 1, scope: !14596)
!14648 = distinct !DISubprogram(name: "op_iter_done", scope: !5827, file: !5827, line: 652, type: !14649, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14649 = !DISubroutineType(types: !14650)
!14650 = !{!2672, !14651}
!14651 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14652, size: 64)
!14652 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9645)
!14653 = !DILocalVariable(name: "ptr", arg: 1, scope: !14648, file: !5827, line: 652, type: !14651)
!14654 = !DILocation(line: 652, column: 34, scope: !14648)
!14655 = !DILocation(line: 654, column: 10, scope: !14648)
!14656 = !DILocation(line: 654, column: 15, scope: !14648)
!14657 = !DILocation(line: 654, column: 3, scope: !14648)
!14658 = distinct !DISubprogram(name: "move_use_after_head", scope: !5827, file: !5827, line: 990, type: !14659, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14659 = !DISubroutineType(types: !14660)
!14660 = !{!4052, !4052, !4052, !4052}
!14661 = !DILocalVariable(name: "use_p", arg: 1, scope: !14658, file: !5827, line: 990, type: !4052)
!14662 = !DILocation(line: 990, column: 36, scope: !14658)
!14663 = !DILocalVariable(name: "head", arg: 2, scope: !14658, file: !5827, line: 990, type: !4052)
!14664 = !DILocation(line: 990, column: 57, scope: !14658)
!14665 = !DILocalVariable(name: "last_p", arg: 3, scope: !14658, file: !5827, line: 991, type: !4052)
!14666 = !DILocation(line: 991, column: 23, scope: !14658)
!14667 = !DILocation(line: 997, column: 7, scope: !14668)
!14668 = distinct !DILexicalBlock(scope: !14658, file: !5827, line: 997, column: 7)
!14669 = !DILocation(line: 997, column: 16, scope: !14668)
!14670 = !DILocation(line: 997, column: 13, scope: !14668)
!14671 = !DILocation(line: 997, column: 7, scope: !14658)
!14672 = !DILocation(line: 1000, column: 11, scope: !14673)
!14673 = distinct !DILexicalBlock(scope: !14674, file: !5827, line: 1000, column: 11)
!14674 = distinct !DILexicalBlock(scope: !14668, file: !5827, line: 998, column: 5)
!14675 = !DILocation(line: 1000, column: 19, scope: !14673)
!14676 = !DILocation(line: 1000, column: 27, scope: !14673)
!14677 = !DILocation(line: 1000, column: 24, scope: !14673)
!14678 = !DILocation(line: 1000, column: 11, scope: !14674)
!14679 = !DILocation(line: 1001, column: 11, scope: !14673)
!14680 = !DILocation(line: 1001, column: 9, scope: !14673)
!14681 = !DILocation(line: 1001, column: 2, scope: !14673)
!14682 = !DILocation(line: 1005, column: 20, scope: !14683)
!14683 = distinct !DILexicalBlock(scope: !14673, file: !5827, line: 1003, column: 2)
!14684 = !DILocation(line: 1005, column: 4, scope: !14683)
!14685 = !DILocation(line: 1006, column: 26, scope: !14683)
!14686 = !DILocation(line: 1006, column: 33, scope: !14683)
!14687 = !DILocation(line: 1006, column: 4, scope: !14683)
!14688 = !DILocation(line: 1007, column: 13, scope: !14683)
!14689 = !DILocation(line: 1007, column: 11, scope: !14683)
!14690 = !DILocation(line: 1009, column: 5, scope: !14674)
!14691 = !DILocation(line: 1010, column: 10, scope: !14658)
!14692 = !DILocation(line: 1010, column: 3, scope: !14658)
!14693 = distinct !DISubprogram(name: "op_iter_next_use", scope: !5827, file: !5827, line: 659, type: !14694, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14694 = !DISubroutineType(types: !14695)
!14695 = !{!4052, !14599}
!14696 = !DILocalVariable(name: "ptr", arg: 1, scope: !14693, file: !5827, line: 659, type: !14599)
!14697 = !DILocation(line: 659, column: 32, scope: !14693)
!14698 = !DILocalVariable(name: "use_p", scope: !14693, file: !5827, line: 661, type: !4052)
!14699 = !DILocation(line: 661, column: 17, scope: !14693)
!14700 = !DILocation(line: 665, column: 7, scope: !14701)
!14701 = distinct !DILexicalBlock(scope: !14693, file: !5827, line: 665, column: 7)
!14702 = !DILocation(line: 665, column: 12, scope: !14701)
!14703 = !DILocation(line: 665, column: 7, scope: !14693)
!14704 = !DILocation(line: 667, column: 15, scope: !14705)
!14705 = distinct !DILexicalBlock(scope: !14701, file: !5827, line: 666, column: 5)
!14706 = !DILocation(line: 667, column: 13, scope: !14705)
!14707 = !DILocation(line: 668, column: 19, scope: !14705)
!14708 = !DILocation(line: 668, column: 24, scope: !14705)
!14709 = !DILocation(line: 668, column: 30, scope: !14705)
!14710 = !DILocation(line: 668, column: 7, scope: !14705)
!14711 = !DILocation(line: 668, column: 12, scope: !14705)
!14712 = !DILocation(line: 668, column: 17, scope: !14705)
!14713 = !DILocation(line: 669, column: 14, scope: !14705)
!14714 = !DILocation(line: 669, column: 7, scope: !14705)
!14715 = !DILocation(line: 671, column: 7, scope: !14716)
!14716 = distinct !DILexicalBlock(scope: !14693, file: !5827, line: 671, column: 7)
!14717 = !DILocation(line: 671, column: 12, scope: !14716)
!14718 = !DILocation(line: 671, column: 20, scope: !14716)
!14719 = !DILocation(line: 671, column: 25, scope: !14716)
!14720 = !DILocation(line: 671, column: 18, scope: !14716)
!14721 = !DILocation(line: 671, column: 7, scope: !14693)
!14722 = !DILocation(line: 673, column: 14, scope: !14723)
!14723 = distinct !DILexicalBlock(scope: !14716, file: !5827, line: 672, column: 5)
!14724 = !DILocation(line: 673, column: 7, scope: !14723)
!14725 = !DILocation(line: 675, column: 3, scope: !14693)
!14726 = !DILocation(line: 675, column: 8, scope: !14693)
!14727 = !DILocation(line: 675, column: 13, scope: !14693)
!14728 = !DILocation(line: 676, column: 3, scope: !14693)
!14729 = !DILocation(line: 677, column: 1, scope: !14693)
!14730 = distinct !DISubprogram(name: "op_iter_init_use", scope: !5827, file: !5827, line: 768, type: !14597, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14731 = !DILocalVariable(name: "ptr", arg: 1, scope: !14730, file: !5827, line: 768, type: !14599)
!14732 = !DILocation(line: 768, column: 32, scope: !14730)
!14733 = !DILocalVariable(name: "stmt", arg: 2, scope: !14730, file: !5827, line: 768, type: !2882)
!14734 = !DILocation(line: 768, column: 44, scope: !14730)
!14735 = !DILocalVariable(name: "flags", arg: 3, scope: !14730, file: !5827, line: 768, type: !2548)
!14736 = !DILocation(line: 768, column: 54, scope: !14730)
!14737 = !DILocation(line: 770, column: 3, scope: !14730)
!14738 = !DILocation(line: 772, column: 17, scope: !14730)
!14739 = !DILocation(line: 772, column: 22, scope: !14730)
!14740 = !DILocation(line: 772, column: 28, scope: !14730)
!14741 = !DILocation(line: 772, column: 3, scope: !14730)
!14742 = !DILocation(line: 773, column: 3, scope: !14730)
!14743 = !DILocation(line: 773, column: 8, scope: !14730)
!14744 = !DILocation(line: 773, column: 18, scope: !14730)
!14745 = !DILocation(line: 774, column: 28, scope: !14730)
!14746 = !DILocation(line: 774, column: 10, scope: !14730)
!14747 = !DILocation(line: 774, column: 3, scope: !14730)
!14748 = distinct !DISubprogram(name: "gimple_vuse_op", scope: !581, file: !581, line: 1334, type: !14749, scopeLine: 1335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14749 = !DISubroutineType(types: !14750)
!14750 = !{!4052, !4543}
!14751 = !DILocalVariable(name: "g", arg: 1, scope: !14748, file: !581, line: 1334, type: !4543)
!14752 = !DILocation(line: 1334, column: 30, scope: !14748)
!14753 = !DILocalVariable(name: "ops", scope: !14748, file: !581, line: 1336, type: !2918)
!14754 = !DILocation(line: 1336, column: 24, scope: !14748)
!14755 = !DILocation(line: 1337, column: 28, scope: !14756)
!14756 = distinct !DILexicalBlock(scope: !14748, file: !581, line: 1337, column: 7)
!14757 = !DILocation(line: 1337, column: 8, scope: !14756)
!14758 = !DILocation(line: 1337, column: 7, scope: !14748)
!14759 = !DILocation(line: 1338, column: 5, scope: !14756)
!14760 = !DILocation(line: 1339, column: 9, scope: !14748)
!14761 = !DILocation(line: 1339, column: 12, scope: !14748)
!14762 = !DILocation(line: 1339, column: 18, scope: !14748)
!14763 = !DILocation(line: 1339, column: 25, scope: !14748)
!14764 = !DILocation(line: 1339, column: 7, scope: !14748)
!14765 = !DILocation(line: 1340, column: 7, scope: !14766)
!14766 = distinct !DILexicalBlock(scope: !14748, file: !581, line: 1340, column: 7)
!14767 = !DILocation(line: 1341, column: 7, scope: !14766)
!14768 = !DILocation(line: 1341, column: 10, scope: !14766)
!14769 = !DILocation(line: 1341, column: 28, scope: !14766)
!14770 = !DILocation(line: 1341, column: 36, scope: !14766)
!14771 = !DILocation(line: 1341, column: 39, scope: !14766)
!14772 = !DILocation(line: 1341, column: 49, scope: !14766)
!14773 = !DILocation(line: 1341, column: 32, scope: !14766)
!14774 = !DILocation(line: 1340, column: 7, scope: !14748)
!14775 = !DILocation(line: 1342, column: 12, scope: !14766)
!14776 = !DILocation(line: 1342, column: 5, scope: !14766)
!14777 = !DILocation(line: 1343, column: 3, scope: !14748)
!14778 = !DILocation(line: 1344, column: 1, scope: !14748)
!14779 = distinct !DISubprogram(name: "delink_imm_use", scope: !5827, file: !5827, line: 188, type: !14780, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14780 = !DISubroutineType(types: !14781)
!14781 = !{null, !4053}
!14782 = !DILocalVariable(name: "linknode", arg: 1, scope: !14779, file: !5827, line: 188, type: !4053)
!14783 = !DILocation(line: 188, column: 36, scope: !14779)
!14784 = !DILocation(line: 191, column: 7, scope: !14785)
!14785 = distinct !DILexicalBlock(scope: !14779, file: !5827, line: 191, column: 7)
!14786 = !DILocation(line: 191, column: 17, scope: !14785)
!14787 = !DILocation(line: 191, column: 22, scope: !14785)
!14788 = !DILocation(line: 191, column: 7, scope: !14779)
!14789 = !DILocation(line: 192, column: 5, scope: !14785)
!14790 = !DILocation(line: 194, column: 26, scope: !14779)
!14791 = !DILocation(line: 194, column: 36, scope: !14779)
!14792 = !DILocation(line: 194, column: 3, scope: !14779)
!14793 = !DILocation(line: 194, column: 13, scope: !14779)
!14794 = !DILocation(line: 194, column: 19, scope: !14779)
!14795 = !DILocation(line: 194, column: 24, scope: !14779)
!14796 = !DILocation(line: 195, column: 26, scope: !14779)
!14797 = !DILocation(line: 195, column: 36, scope: !14779)
!14798 = !DILocation(line: 195, column: 3, scope: !14779)
!14799 = !DILocation(line: 195, column: 13, scope: !14779)
!14800 = !DILocation(line: 195, column: 19, scope: !14779)
!14801 = !DILocation(line: 195, column: 24, scope: !14779)
!14802 = !DILocation(line: 196, column: 3, scope: !14779)
!14803 = !DILocation(line: 196, column: 13, scope: !14779)
!14804 = !DILocation(line: 196, column: 18, scope: !14779)
!14805 = !DILocation(line: 197, column: 3, scope: !14779)
!14806 = !DILocation(line: 197, column: 13, scope: !14779)
!14807 = !DILocation(line: 197, column: 18, scope: !14779)
!14808 = !DILocation(line: 198, column: 1, scope: !14779)
!14809 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !5827, file: !5827, line: 202, type: !14810, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14810 = !DISubroutineType(types: !14811)
!14811 = !{null, !4053, !4053}
!14812 = !DILocalVariable(name: "linknode", arg: 1, scope: !14809, file: !5827, line: 202, type: !4053)
!14813 = !DILocation(line: 202, column: 42, scope: !14809)
!14814 = !DILocalVariable(name: "list", arg: 2, scope: !14809, file: !5827, line: 202, type: !4053)
!14815 = !DILocation(line: 202, column: 71, scope: !14809)
!14816 = !DILocation(line: 206, column: 20, scope: !14809)
!14817 = !DILocation(line: 206, column: 3, scope: !14809)
!14818 = !DILocation(line: 206, column: 13, scope: !14809)
!14819 = !DILocation(line: 206, column: 18, scope: !14809)
!14820 = !DILocation(line: 207, column: 20, scope: !14809)
!14821 = !DILocation(line: 207, column: 26, scope: !14809)
!14822 = !DILocation(line: 207, column: 3, scope: !14809)
!14823 = !DILocation(line: 207, column: 13, scope: !14809)
!14824 = !DILocation(line: 207, column: 18, scope: !14809)
!14825 = !DILocation(line: 208, column: 22, scope: !14809)
!14826 = !DILocation(line: 208, column: 3, scope: !14809)
!14827 = !DILocation(line: 208, column: 9, scope: !14809)
!14828 = !DILocation(line: 208, column: 15, scope: !14809)
!14829 = !DILocation(line: 208, column: 20, scope: !14809)
!14830 = !DILocation(line: 209, column: 16, scope: !14809)
!14831 = !DILocation(line: 209, column: 3, scope: !14809)
!14832 = !DILocation(line: 209, column: 9, scope: !14809)
!14833 = !DILocation(line: 209, column: 14, scope: !14809)
!14834 = !DILocation(line: 210, column: 1, scope: !14809)
!14835 = distinct !DISubprogram(name: "gimple_phi_result", scope: !581, file: !581, line: 3071, type: !4569, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14836 = !DILocalVariable(name: "gs", arg: 1, scope: !14835, file: !581, line: 3071, type: !4543)
!14837 = !DILocation(line: 3071, column: 33, scope: !14835)
!14838 = !DILocation(line: 3074, column: 10, scope: !14835)
!14839 = !DILocation(line: 3074, column: 14, scope: !14835)
!14840 = !DILocation(line: 3074, column: 25, scope: !14835)
!14841 = !DILocation(line: 3074, column: 3, scope: !14835)
!14842 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !5827, file: !5827, line: 729, type: !14843, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14843 = !DISubroutineType(types: !14844)
!14844 = !{null, !14599}
!14845 = !DILocalVariable(name: "ptr", arg: 1, scope: !14842, file: !5827, line: 729, type: !14599)
!14846 = !DILocation(line: 729, column: 39, scope: !14842)
!14847 = !DILocation(line: 731, column: 3, scope: !14842)
!14848 = !DILocation(line: 731, column: 8, scope: !14842)
!14849 = !DILocation(line: 731, column: 13, scope: !14842)
!14850 = !DILocation(line: 732, column: 3, scope: !14842)
!14851 = !DILocation(line: 732, column: 8, scope: !14842)
!14852 = !DILocation(line: 732, column: 13, scope: !14842)
!14853 = !DILocation(line: 733, column: 3, scope: !14842)
!14854 = !DILocation(line: 733, column: 8, scope: !14842)
!14855 = !DILocation(line: 733, column: 18, scope: !14842)
!14856 = !DILocation(line: 734, column: 3, scope: !14842)
!14857 = !DILocation(line: 734, column: 8, scope: !14842)
!14858 = !DILocation(line: 734, column: 14, scope: !14842)
!14859 = !DILocation(line: 735, column: 3, scope: !14842)
!14860 = !DILocation(line: 735, column: 8, scope: !14842)
!14861 = !DILocation(line: 735, column: 16, scope: !14842)
!14862 = !DILocation(line: 736, column: 3, scope: !14842)
!14863 = !DILocation(line: 736, column: 8, scope: !14842)
!14864 = !DILocation(line: 736, column: 17, scope: !14842)
!14865 = !DILocation(line: 737, column: 3, scope: !14842)
!14866 = !DILocation(line: 737, column: 8, scope: !14842)
!14867 = !DILocation(line: 737, column: 13, scope: !14842)
!14868 = !DILocation(line: 738, column: 1, scope: !14842)
!14869 = distinct !DISubprogram(name: "op_iter_init", scope: !5827, file: !5827, line: 742, type: !14870, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14870 = !DISubroutineType(types: !14871)
!14871 = !{null, !14599, !2882, !2548}
!14872 = !DILocalVariable(name: "ptr", arg: 1, scope: !14869, file: !5827, line: 742, type: !14599)
!14873 = !DILocation(line: 742, column: 28, scope: !14869)
!14874 = !DILocalVariable(name: "stmt", arg: 2, scope: !14869, file: !5827, line: 742, type: !2882)
!14875 = !DILocation(line: 742, column: 40, scope: !14869)
!14876 = !DILocalVariable(name: "flags", arg: 3, scope: !14869, file: !5827, line: 742, type: !2548)
!14877 = !DILocation(line: 742, column: 50, scope: !14869)
!14878 = !DILocation(line: 746, column: 3, scope: !14869)
!14879 = !DILocation(line: 748, column: 16, scope: !14869)
!14880 = !DILocation(line: 748, column: 22, scope: !14869)
!14881 = !DILocation(line: 748, column: 15, scope: !14869)
!14882 = !DILocation(line: 748, column: 68, scope: !14869)
!14883 = !DILocation(line: 748, column: 52, scope: !14869)
!14884 = !DILocation(line: 748, column: 3, scope: !14869)
!14885 = !DILocation(line: 748, column: 8, scope: !14869)
!14886 = !DILocation(line: 748, column: 13, scope: !14869)
!14887 = !DILocation(line: 749, column: 9, scope: !14888)
!14888 = distinct !DILexicalBlock(scope: !14869, file: !5827, line: 749, column: 7)
!14889 = !DILocation(line: 749, column: 15, scope: !14888)
!14890 = !DILocation(line: 750, column: 7, scope: !14888)
!14891 = !DILocation(line: 750, column: 10, scope: !14888)
!14892 = !DILocation(line: 750, column: 15, scope: !14888)
!14893 = !DILocation(line: 751, column: 7, scope: !14888)
!14894 = !DILocation(line: 751, column: 23, scope: !14888)
!14895 = !DILocation(line: 751, column: 10, scope: !14888)
!14896 = !DILocation(line: 751, column: 29, scope: !14888)
!14897 = !DILocation(line: 749, column: 7, scope: !14869)
!14898 = !DILocation(line: 752, column: 17, scope: !14888)
!14899 = !DILocation(line: 752, column: 22, scope: !14888)
!14900 = !DILocation(line: 752, column: 28, scope: !14888)
!14901 = !DILocation(line: 752, column: 5, scope: !14888)
!14902 = !DILocation(line: 752, column: 10, scope: !14888)
!14903 = !DILocation(line: 752, column: 15, scope: !14888)
!14904 = !DILocation(line: 753, column: 16, scope: !14869)
!14905 = !DILocation(line: 753, column: 22, scope: !14869)
!14906 = !DILocation(line: 753, column: 15, scope: !14869)
!14907 = !DILocation(line: 753, column: 68, scope: !14869)
!14908 = !DILocation(line: 753, column: 52, scope: !14869)
!14909 = !DILocation(line: 753, column: 3, scope: !14869)
!14910 = !DILocation(line: 753, column: 8, scope: !14869)
!14911 = !DILocation(line: 753, column: 13, scope: !14869)
!14912 = !DILocation(line: 754, column: 9, scope: !14913)
!14913 = distinct !DILexicalBlock(scope: !14869, file: !5827, line: 754, column: 7)
!14914 = !DILocation(line: 754, column: 15, scope: !14913)
!14915 = !DILocation(line: 755, column: 7, scope: !14913)
!14916 = !DILocation(line: 755, column: 10, scope: !14913)
!14917 = !DILocation(line: 755, column: 15, scope: !14913)
!14918 = !DILocation(line: 756, column: 7, scope: !14913)
!14919 = !DILocation(line: 756, column: 23, scope: !14913)
!14920 = !DILocation(line: 756, column: 10, scope: !14913)
!14921 = !DILocation(line: 756, column: 29, scope: !14913)
!14922 = !DILocation(line: 754, column: 7, scope: !14869)
!14923 = !DILocation(line: 757, column: 17, scope: !14913)
!14924 = !DILocation(line: 757, column: 22, scope: !14913)
!14925 = !DILocation(line: 757, column: 28, scope: !14913)
!14926 = !DILocation(line: 757, column: 5, scope: !14913)
!14927 = !DILocation(line: 757, column: 10, scope: !14913)
!14928 = !DILocation(line: 757, column: 15, scope: !14913)
!14929 = !DILocation(line: 758, column: 3, scope: !14869)
!14930 = !DILocation(line: 758, column: 8, scope: !14869)
!14931 = !DILocation(line: 758, column: 13, scope: !14869)
!14932 = !DILocation(line: 760, column: 3, scope: !14869)
!14933 = !DILocation(line: 760, column: 8, scope: !14869)
!14934 = !DILocation(line: 760, column: 14, scope: !14869)
!14935 = !DILocation(line: 761, column: 3, scope: !14869)
!14936 = !DILocation(line: 761, column: 8, scope: !14869)
!14937 = !DILocation(line: 761, column: 16, scope: !14869)
!14938 = !DILocation(line: 762, column: 3, scope: !14869)
!14939 = !DILocation(line: 762, column: 8, scope: !14869)
!14940 = !DILocation(line: 762, column: 17, scope: !14869)
!14941 = !DILocation(line: 763, column: 1, scope: !14869)
!14942 = distinct !DISubprogram(name: "gimple_def_ops", scope: !581, file: !581, line: 1292, type: !14943, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14943 = !DISubroutineType(types: !14944)
!14944 = !{!2911, !4543}
!14945 = !DILocalVariable(name: "g", arg: 1, scope: !14942, file: !581, line: 1292, type: !4543)
!14946 = !DILocation(line: 1292, column: 30, scope: !14942)
!14947 = !DILocation(line: 1294, column: 24, scope: !14948)
!14948 = distinct !DILexicalBlock(scope: !14942, file: !581, line: 1294, column: 7)
!14949 = !DILocation(line: 1294, column: 8, scope: !14948)
!14950 = !DILocation(line: 1294, column: 7, scope: !14942)
!14951 = !DILocation(line: 1295, column: 5, scope: !14948)
!14952 = !DILocation(line: 1296, column: 10, scope: !14942)
!14953 = !DILocation(line: 1296, column: 13, scope: !14942)
!14954 = !DILocation(line: 1296, column: 19, scope: !14942)
!14955 = !DILocation(line: 1296, column: 26, scope: !14942)
!14956 = !DILocation(line: 1296, column: 3, scope: !14942)
!14957 = !DILocation(line: 1297, column: 1, scope: !14942)
!14958 = distinct !DISubprogram(name: "gimple_vdef", scope: !581, file: !581, line: 1375, type: !4569, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14959 = !DILocalVariable(name: "g", arg: 1, scope: !14958, file: !581, line: 1375, type: !4543)
!14960 = !DILocation(line: 1375, column: 27, scope: !14958)
!14961 = !DILocation(line: 1377, column: 28, scope: !14962)
!14962 = distinct !DILexicalBlock(scope: !14958, file: !581, line: 1377, column: 7)
!14963 = !DILocation(line: 1377, column: 8, scope: !14962)
!14964 = !DILocation(line: 1377, column: 7, scope: !14958)
!14965 = !DILocation(line: 1378, column: 5, scope: !14962)
!14966 = !DILocation(line: 1379, column: 10, scope: !14958)
!14967 = !DILocation(line: 1379, column: 13, scope: !14958)
!14968 = !DILocation(line: 1379, column: 23, scope: !14958)
!14969 = !DILocation(line: 1379, column: 3, scope: !14958)
!14970 = !DILocation(line: 1380, column: 1, scope: !14958)
!14971 = distinct !DISubprogram(name: "gimple_use_ops", scope: !581, file: !581, line: 1313, type: !14972, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14972 = !DISubroutineType(types: !14973)
!14973 = !{!2918, !4543}
!14974 = !DILocalVariable(name: "g", arg: 1, scope: !14971, file: !581, line: 1313, type: !4543)
!14975 = !DILocation(line: 1313, column: 30, scope: !14971)
!14976 = !DILocation(line: 1315, column: 24, scope: !14977)
!14977 = distinct !DILexicalBlock(scope: !14971, file: !581, line: 1315, column: 7)
!14978 = !DILocation(line: 1315, column: 8, scope: !14977)
!14979 = !DILocation(line: 1315, column: 7, scope: !14971)
!14980 = !DILocation(line: 1316, column: 5, scope: !14977)
!14981 = !DILocation(line: 1317, column: 10, scope: !14971)
!14982 = !DILocation(line: 1317, column: 13, scope: !14971)
!14983 = !DILocation(line: 1317, column: 19, scope: !14971)
!14984 = !DILocation(line: 1317, column: 26, scope: !14971)
!14985 = !DILocation(line: 1317, column: 3, scope: !14971)
!14986 = !DILocation(line: 1318, column: 1, scope: !14971)
!14987 = distinct !DISubprogram(name: "gimple_vuse", scope: !581, file: !581, line: 1365, type: !4569, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!14988 = !DILocalVariable(name: "g", arg: 1, scope: !14987, file: !581, line: 1365, type: !4543)
!14989 = !DILocation(line: 1365, column: 27, scope: !14987)
!14990 = !DILocation(line: 1367, column: 28, scope: !14991)
!14991 = distinct !DILexicalBlock(scope: !14987, file: !581, line: 1367, column: 7)
!14992 = !DILocation(line: 1367, column: 8, scope: !14991)
!14993 = !DILocation(line: 1367, column: 7, scope: !14987)
!14994 = !DILocation(line: 1368, column: 5, scope: !14991)
!14995 = !DILocation(line: 1369, column: 10, scope: !14987)
!14996 = !DILocation(line: 1369, column: 13, scope: !14987)
!14997 = !DILocation(line: 1369, column: 23, scope: !14987)
!14998 = !DILocation(line: 1369, column: 3, scope: !14987)
!14999 = !DILocation(line: 1370, column: 1, scope: !14987)
!15000 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !581, file: !581, line: 1283, type: !5609, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15001 = !DILocalVariable(name: "g", arg: 1, scope: !15000, file: !581, line: 1283, type: !4543)
!15002 = !DILocation(line: 1283, column: 34, scope: !15000)
!15003 = !DILocation(line: 1285, column: 23, scope: !15000)
!15004 = !DILocation(line: 1285, column: 10, scope: !15000)
!15005 = !DILocation(line: 1285, column: 26, scope: !15000)
!15006 = !DILocation(line: 1285, column: 43, scope: !15000)
!15007 = !DILocation(line: 1285, column: 59, scope: !15000)
!15008 = !DILocation(line: 1285, column: 46, scope: !15000)
!15009 = !DILocation(line: 1285, column: 62, scope: !15000)
!15010 = !DILocation(line: 0, scope: !15000)
!15011 = !DILocation(line: 1285, column: 3, scope: !15000)
!15012 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !581, file: !581, line: 3100, type: !15013, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15013 = !DISubroutineType(types: !15014)
!15014 = !{!4055, !2882, !7}
!15015 = !DILocalVariable(name: "gs", arg: 1, scope: !15012, file: !581, line: 3100, type: !2882)
!15016 = !DILocation(line: 3100, column: 24, scope: !15012)
!15017 = !DILocalVariable(name: "index", arg: 2, scope: !15012, file: !581, line: 3100, type: !7)
!15018 = !DILocation(line: 3100, column: 37, scope: !15012)
!15019 = !DILocation(line: 3103, column: 3, scope: !15012)
!15020 = !DILocation(line: 3104, column: 12, scope: !15012)
!15021 = !DILocation(line: 3104, column: 16, scope: !15012)
!15022 = !DILocation(line: 3104, column: 27, scope: !15012)
!15023 = !DILocation(line: 3104, column: 32, scope: !15012)
!15024 = !DILocation(line: 3104, column: 3, scope: !15012)
!15025 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !3506, file: !3506, line: 32, type: !15026, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15026 = !DISubroutineType(types: !15027)
!15027 = !{!4058, !2548}
!15028 = !DILocalVariable(name: "alloc_", arg: 1, scope: !15025, file: !3506, line: 32, type: !2548)
!15029 = !DILocation(line: 32, column: 1, scope: !15025)
!15030 = distinct !DISubprogram(name: "number_of_loops", scope: !337, file: !337, line: 459, type: !4320, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15031 = !DILocation(line: 461, column: 8, scope: !15032)
!15032 = distinct !DILexicalBlock(scope: !15030, file: !337, line: 461, column: 7)
!15033 = !DILocation(line: 461, column: 7, scope: !15030)
!15034 = !DILocation(line: 462, column: 5, scope: !15032)
!15035 = !DILocation(line: 464, column: 10, scope: !15030)
!15036 = !DILocation(line: 464, column: 3, scope: !15030)
!15037 = !DILocation(line: 465, column: 1, scope: !15030)
!15038 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !337, file: !337, line: 85, type: !15039, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15039 = !DISubroutineType(types: !15040)
!15040 = !{!2548, !15041, !7, !6084}
!15041 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15042, size: 64)
!15042 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3117)
!15043 = !DILocalVariable(name: "vec_", arg: 1, scope: !15038, file: !337, line: 85, type: !15041)
!15044 = !DILocation(line: 85, column: 1, scope: !15038)
!15045 = !DILocalVariable(name: "ix_", arg: 2, scope: !15038, file: !337, line: 85, type: !7)
!15046 = !DILocalVariable(name: "ptr", arg: 3, scope: !15038, file: !337, line: 85, type: !6084)
!15047 = !DILocation(line: 85, column: 1, scope: !15048)
!15048 = distinct !DILexicalBlock(scope: !15038, file: !337, line: 85, column: 1)
!15049 = !DILocation(line: 85, column: 1, scope: !15050)
!15050 = distinct !DILexicalBlock(scope: !15048, file: !337, line: 85, column: 1)
!15051 = !DILocation(line: 85, column: 1, scope: !15052)
!15052 = distinct !DILexicalBlock(scope: !15048, file: !337, line: 85, column: 1)
!15053 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !3506, file: !3506, line: 31, type: !15054, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15054 = !DISubroutineType(types: !15055)
!15055 = !{!4040, !15056, !2548}
!15056 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4063, size: 64)
!15057 = !DILocalVariable(name: "vec_", arg: 1, scope: !15053, file: !3506, line: 31, type: !15056)
!15058 = !DILocation(line: 31, column: 1, scope: !15053)
!15059 = !DILocalVariable(name: "obj_", arg: 2, scope: !15053, file: !3506, line: 31, type: !2548)
!15060 = !DILocalVariable(name: "slot_", scope: !15053, file: !3506, line: 31, type: !4040)
!15061 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !337, file: !337, line: 85, type: !15062, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15062 = !DISubroutineType(types: !15063)
!15063 = !{!7, !15041}
!15064 = !DILocalVariable(name: "vec_", arg: 1, scope: !15061, file: !337, line: 85, type: !15041)
!15065 = !DILocation(line: 85, column: 1, scope: !15061)
!15066 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !3506, file: !3506, line: 31, type: !15067, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15067 = !DISubroutineType(types: !15068)
!15068 = !{!2548, !15069, !7, !4040}
!15069 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15070, size: 64)
!15070 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4063)
!15071 = !DILocalVariable(name: "vec_", arg: 1, scope: !15066, file: !3506, line: 31, type: !15069)
!15072 = !DILocation(line: 31, column: 1, scope: !15066)
!15073 = !DILocalVariable(name: "ix_", arg: 2, scope: !15066, file: !3506, line: 31, type: !7)
!15074 = !DILocalVariable(name: "ptr", arg: 3, scope: !15066, file: !3506, line: 31, type: !4040)
!15075 = !DILocation(line: 31, column: 1, scope: !15076)
!15076 = distinct !DILexicalBlock(scope: !15066, file: !3506, line: 31, column: 1)
!15077 = !DILocation(line: 31, column: 1, scope: !15078)
!15078 = distinct !DILexicalBlock(scope: !15076, file: !3506, line: 31, column: 1)
!15079 = !DILocation(line: 31, column: 1, scope: !15080)
!15080 = distinct !DILexicalBlock(scope: !15076, file: !3506, line: 31, column: 1)
!15081 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !3506, file: !3506, line: 32, type: !15082, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15082 = !DISubroutineType(types: !15083)
!15083 = !{null, !15084}
!15084 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4058, size: 64)
!15085 = !DILocalVariable(name: "vec_", arg: 1, scope: !15081, file: !3506, line: 32, type: !15084)
!15086 = !DILocation(line: 32, column: 1, scope: !15081)
!15087 = !DILocation(line: 32, column: 1, scope: !15088)
!15088 = distinct !DILexicalBlock(scope: !15081, file: !3506, line: 32, column: 1)
!15089 = distinct !DISubprogram(name: "find_case_label_for_value", scope: !3, file: !3, line: 1936, type: !15090, scopeLine: 1937, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15090 = !DISubroutineType(types: !15091)
!15091 = !{!2553, !2882, !2553}
!15092 = !DILocalVariable(name: "switch_stmt", arg: 1, scope: !15089, file: !3, line: 1936, type: !2882)
!15093 = !DILocation(line: 1936, column: 35, scope: !15089)
!15094 = !DILocalVariable(name: "val", arg: 2, scope: !15089, file: !3, line: 1936, type: !2553)
!15095 = !DILocation(line: 1936, column: 53, scope: !15089)
!15096 = !DILocalVariable(name: "low", scope: !15089, file: !3, line: 1938, type: !3027)
!15097 = !DILocation(line: 1938, column: 10, scope: !15089)
!15098 = !DILocalVariable(name: "high", scope: !15089, file: !3, line: 1938, type: !3027)
!15099 = !DILocation(line: 1938, column: 15, scope: !15089)
!15100 = !DILocalVariable(name: "n", scope: !15089, file: !3, line: 1938, type: !3027)
!15101 = !DILocation(line: 1938, column: 21, scope: !15089)
!15102 = !DILocation(line: 1938, column: 51, scope: !15089)
!15103 = !DILocation(line: 1938, column: 25, scope: !15089)
!15104 = !DILocalVariable(name: "default_case", scope: !15089, file: !3, line: 1939, type: !2553)
!15105 = !DILocation(line: 1939, column: 8, scope: !15089)
!15106 = !DILocation(line: 1939, column: 52, scope: !15089)
!15107 = !DILocation(line: 1939, column: 23, scope: !15089)
!15108 = !DILocation(line: 1941, column: 12, scope: !15109)
!15109 = distinct !DILexicalBlock(scope: !15089, file: !3, line: 1941, column: 3)
!15110 = !DILocation(line: 1941, column: 24, scope: !15109)
!15111 = !DILocation(line: 1941, column: 22, scope: !15109)
!15112 = !DILocation(line: 1941, column: 8, scope: !15109)
!15113 = !DILocation(line: 1941, column: 27, scope: !15114)
!15114 = distinct !DILexicalBlock(scope: !15109, file: !3, line: 1941, column: 3)
!15115 = !DILocation(line: 1941, column: 34, scope: !15114)
!15116 = !DILocation(line: 1941, column: 32, scope: !15114)
!15117 = !DILocation(line: 1941, column: 38, scope: !15114)
!15118 = !DILocation(line: 1941, column: 3, scope: !15109)
!15119 = !DILocalVariable(name: "i", scope: !15120, file: !3, line: 1943, type: !3027)
!15120 = distinct !DILexicalBlock(scope: !15114, file: !3, line: 1942, column: 5)
!15121 = !DILocation(line: 1943, column: 14, scope: !15120)
!15122 = !DILocation(line: 1943, column: 19, scope: !15120)
!15123 = !DILocation(line: 1943, column: 26, scope: !15120)
!15124 = !DILocation(line: 1943, column: 24, scope: !15120)
!15125 = !DILocation(line: 1943, column: 31, scope: !15120)
!15126 = !DILocalVariable(name: "t", scope: !15120, file: !3, line: 1944, type: !2553)
!15127 = !DILocation(line: 1944, column: 12, scope: !15120)
!15128 = !DILocation(line: 1944, column: 37, scope: !15120)
!15129 = !DILocation(line: 1944, column: 50, scope: !15120)
!15130 = !DILocation(line: 1944, column: 16, scope: !15120)
!15131 = !DILocalVariable(name: "cmp", scope: !15120, file: !3, line: 1945, type: !2548)
!15132 = !DILocation(line: 1945, column: 11, scope: !15120)
!15133 = !DILocation(line: 1948, column: 35, scope: !15120)
!15134 = !DILocation(line: 1948, column: 49, scope: !15120)
!15135 = !DILocation(line: 1948, column: 13, scope: !15120)
!15136 = !DILocation(line: 1948, column: 11, scope: !15120)
!15137 = !DILocation(line: 1950, column: 11, scope: !15138)
!15138 = distinct !DILexicalBlock(scope: !15120, file: !3, line: 1950, column: 11)
!15139 = !DILocation(line: 1950, column: 15, scope: !15138)
!15140 = !DILocation(line: 1950, column: 11, scope: !15120)
!15141 = !DILocation(line: 1951, column: 9, scope: !15138)
!15142 = !DILocation(line: 1951, column: 7, scope: !15138)
!15143 = !DILocation(line: 1951, column: 2, scope: !15138)
!15144 = !DILocation(line: 1953, column: 8, scope: !15138)
!15145 = !DILocation(line: 1953, column: 6, scope: !15138)
!15146 = !DILocation(line: 1955, column: 11, scope: !15147)
!15147 = distinct !DILexicalBlock(scope: !15120, file: !3, line: 1955, column: 11)
!15148 = !DILocation(line: 1955, column: 25, scope: !15147)
!15149 = !DILocation(line: 1955, column: 11, scope: !15120)
!15150 = !DILocation(line: 1958, column: 8, scope: !15151)
!15151 = distinct !DILexicalBlock(scope: !15152, file: !3, line: 1958, column: 8)
!15152 = distinct !DILexicalBlock(scope: !15147, file: !3, line: 1956, column: 2)
!15153 = !DILocation(line: 1958, column: 12, scope: !15151)
!15154 = !DILocation(line: 1958, column: 8, scope: !15152)
!15155 = !DILocation(line: 1959, column: 13, scope: !15151)
!15156 = !DILocation(line: 1959, column: 6, scope: !15151)
!15157 = !DILocation(line: 1960, column: 2, scope: !15152)
!15158 = !DILocation(line: 1964, column: 8, scope: !15159)
!15159 = distinct !DILexicalBlock(scope: !15160, file: !3, line: 1964, column: 8)
!15160 = distinct !DILexicalBlock(scope: !15147, file: !3, line: 1962, column: 2)
!15161 = !DILocation(line: 1964, column: 12, scope: !15159)
!15162 = !DILocation(line: 1964, column: 17, scope: !15159)
!15163 = !DILocation(line: 1964, column: 42, scope: !15159)
!15164 = !DILocation(line: 1964, column: 57, scope: !15159)
!15165 = !DILocation(line: 1964, column: 20, scope: !15159)
!15166 = !DILocation(line: 1964, column: 62, scope: !15159)
!15167 = !DILocation(line: 1964, column: 8, scope: !15160)
!15168 = !DILocation(line: 1965, column: 13, scope: !15159)
!15169 = !DILocation(line: 1965, column: 6, scope: !15159)
!15170 = !DILocation(line: 1941, column: 3, scope: !15114)
!15171 = distinct !{!15171, !15118, !15172}
!15172 = !DILocation(line: 1967, column: 5, scope: !15109)
!15173 = !DILocation(line: 1969, column: 10, scope: !15089)
!15174 = !DILocation(line: 1969, column: 3, scope: !15089)
!15175 = !DILocation(line: 1970, column: 1, scope: !15089)
!15176 = distinct !DISubprogram(name: "gimple_seq_last", scope: !581, file: !581, line: 178, type: !13874, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15177 = !DILocalVariable(name: "s", arg: 1, scope: !15176, file: !581, line: 178, type: !9899)
!15178 = !DILocation(line: 178, column: 35, scope: !15176)
!15179 = !DILocation(line: 180, column: 10, scope: !15176)
!15180 = !DILocation(line: 180, column: 14, scope: !15176)
!15181 = !DILocation(line: 180, column: 17, scope: !15176)
!15182 = !DILocation(line: 180, column: 3, scope: !15176)
!15183 = distinct !DISubprogram(name: "gimple_bind_body", scope: !581, file: !581, line: 2517, type: !15184, scopeLine: 2518, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15184 = !DISubroutineType(types: !15185)
!15185 = !{!2872, !2882}
!15186 = !DILocalVariable(name: "gs", arg: 1, scope: !15183, file: !581, line: 2517, type: !2882)
!15187 = !DILocation(line: 2517, column: 26, scope: !15183)
!15188 = !DILocation(line: 2520, column: 10, scope: !15183)
!15189 = !DILocation(line: 2520, column: 14, scope: !15183)
!15190 = !DILocation(line: 2520, column: 26, scope: !15183)
!15191 = !DILocation(line: 2520, column: 3, scope: !15183)
!15192 = distinct !DISubprogram(name: "gimple_try_eval", scope: !581, file: !581, line: 2953, type: !15184, scopeLine: 2954, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15193 = !DILocalVariable(name: "gs", arg: 1, scope: !15192, file: !581, line: 2953, type: !2882)
!15194 = !DILocation(line: 2953, column: 25, scope: !15192)
!15195 = !DILocation(line: 2956, column: 10, scope: !15192)
!15196 = !DILocation(line: 2956, column: 14, scope: !15192)
!15197 = !DILocation(line: 2956, column: 25, scope: !15192)
!15198 = !DILocation(line: 2956, column: 3, scope: !15192)
!15199 = distinct !DISubprogram(name: "gimple_try_cleanup", scope: !581, file: !581, line: 2964, type: !15184, scopeLine: 2965, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15200 = !DILocalVariable(name: "gs", arg: 1, scope: !15199, file: !581, line: 2964, type: !2882)
!15201 = !DILocation(line: 2964, column: 28, scope: !15199)
!15202 = !DILocation(line: 2967, column: 10, scope: !15199)
!15203 = !DILocation(line: 2967, column: 14, scope: !15199)
!15204 = !DILocation(line: 2967, column: 25, scope: !15199)
!15205 = !DILocation(line: 2967, column: 3, scope: !15199)
!15206 = distinct !DISubprogram(name: "gimple_eh_filter_failure", scope: !581, file: !581, line: 2869, type: !15184, scopeLine: 2870, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15207 = !DILocalVariable(name: "gs", arg: 1, scope: !15206, file: !581, line: 2869, type: !2882)
!15208 = !DILocation(line: 2869, column: 34, scope: !15206)
!15209 = !DILocation(line: 2872, column: 10, scope: !15206)
!15210 = !DILocation(line: 2872, column: 14, scope: !15206)
!15211 = !DILocation(line: 2872, column: 31, scope: !15206)
!15212 = !DILocation(line: 2872, column: 3, scope: !15206)
!15213 = distinct !DISubprogram(name: "gimple_catch_handler", scope: !581, file: !581, line: 2806, type: !15184, scopeLine: 2807, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15214 = !DILocalVariable(name: "gs", arg: 1, scope: !15213, file: !581, line: 2806, type: !2882)
!15215 = !DILocation(line: 2806, column: 30, scope: !15213)
!15216 = !DILocation(line: 2809, column: 10, scope: !15213)
!15217 = !DILocation(line: 2809, column: 14, scope: !15213)
!15218 = !DILocation(line: 2809, column: 27, scope: !15213)
!15219 = !DILocation(line: 2809, column: 3, scope: !15213)
!15220 = distinct !DISubprogram(name: "verify_types_in_gimple_stmt", scope: !3, file: !3, line: 3760, type: !5223, scopeLine: 3761, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15221 = !DILocalVariable(name: "stmt", arg: 1, scope: !15220, file: !3, line: 3760, type: !2882)
!15222 = !DILocation(line: 3760, column: 37, scope: !15220)
!15223 = !DILocation(line: 3762, column: 24, scope: !15220)
!15224 = !DILocation(line: 3762, column: 11, scope: !15220)
!15225 = !DILocation(line: 3762, column: 3, scope: !15220)
!15226 = !DILocation(line: 3765, column: 36, scope: !15227)
!15227 = distinct !DILexicalBlock(scope: !15220, file: !3, line: 3763, column: 5)
!15228 = !DILocation(line: 3765, column: 14, scope: !15227)
!15229 = !DILocation(line: 3765, column: 7, scope: !15227)
!15230 = !DILocation(line: 3768, column: 14, scope: !15227)
!15231 = !DILocation(line: 3768, column: 52, scope: !15227)
!15232 = !DILocation(line: 3768, column: 7, scope: !15227)
!15233 = !DILocation(line: 3771, column: 34, scope: !15227)
!15234 = !DILocation(line: 3771, column: 14, scope: !15227)
!15235 = !DILocation(line: 3771, column: 7, scope: !15227)
!15236 = !DILocation(line: 3774, column: 11, scope: !15237)
!15237 = distinct !DILexicalBlock(scope: !15227, file: !3, line: 3774, column: 11)
!15238 = !DILocation(line: 3774, column: 53, scope: !15237)
!15239 = !DILocation(line: 3774, column: 11, scope: !15227)
!15240 = !DILocation(line: 3776, column: 4, scope: !15241)
!15241 = distinct !DILexicalBlock(scope: !15237, file: !3, line: 3775, column: 2)
!15242 = !DILocation(line: 3777, column: 4, scope: !15241)
!15243 = !DILocation(line: 3779, column: 38, scope: !15244)
!15244 = distinct !DILexicalBlock(scope: !15227, file: !3, line: 3779, column: 11)
!15245 = !DILocation(line: 3779, column: 14, scope: !15244)
!15246 = !DILocation(line: 3780, column: 6, scope: !15244)
!15247 = !DILocation(line: 3780, column: 9, scope: !15244)
!15248 = !DILocation(line: 3780, column: 51, scope: !15244)
!15249 = !DILocation(line: 3781, column: 4, scope: !15244)
!15250 = !DILocation(line: 3781, column: 35, scope: !15244)
!15251 = !DILocation(line: 3781, column: 10, scope: !15244)
!15252 = !DILocation(line: 3782, column: 9, scope: !15244)
!15253 = !DILocation(line: 3782, column: 12, scope: !15244)
!15254 = !DILocation(line: 3782, column: 55, scope: !15244)
!15255 = !DILocation(line: 3779, column: 11, scope: !15227)
!15256 = !DILocation(line: 3784, column: 4, scope: !15257)
!15257 = distinct !DILexicalBlock(scope: !15244, file: !3, line: 3783, column: 2)
!15258 = !DILocation(line: 3785, column: 4, scope: !15257)
!15259 = !DILocation(line: 3788, column: 40, scope: !15227)
!15260 = !DILocation(line: 3789, column: 29, scope: !15227)
!15261 = !DILocation(line: 3789, column: 12, scope: !15227)
!15262 = !DILocation(line: 3790, column: 29, scope: !15227)
!15263 = !DILocation(line: 3790, column: 12, scope: !15227)
!15264 = !DILocation(line: 3788, column: 14, scope: !15227)
!15265 = !DILocation(line: 3788, column: 7, scope: !15227)
!15266 = !DILocation(line: 3793, column: 34, scope: !15227)
!15267 = !DILocation(line: 3793, column: 14, scope: !15227)
!15268 = !DILocation(line: 3793, column: 7, scope: !15227)
!15269 = !DILocation(line: 3796, column: 36, scope: !15227)
!15270 = !DILocation(line: 3796, column: 14, scope: !15227)
!15271 = !DILocation(line: 3796, column: 7, scope: !15227)
!15272 = !DILocation(line: 3799, column: 36, scope: !15227)
!15273 = !DILocation(line: 3799, column: 14, scope: !15227)
!15274 = !DILocation(line: 3799, column: 7, scope: !15227)
!15275 = !DILocation(line: 3802, column: 7, scope: !15227)
!15276 = !DILocation(line: 3805, column: 33, scope: !15227)
!15277 = !DILocation(line: 3805, column: 14, scope: !15227)
!15278 = !DILocation(line: 3805, column: 7, scope: !15227)
!15279 = !DILocation(line: 3813, column: 7, scope: !15227)
!15280 = !DILocation(line: 3822, column: 7, scope: !15227)
!15281 = !DILocation(line: 3825, column: 35, scope: !15227)
!15282 = !DILocation(line: 3825, column: 14, scope: !15227)
!15283 = !DILocation(line: 3825, column: 7, scope: !15227)
!15284 = !DILocation(line: 3828, column: 7, scope: !15227)
!15285 = !DILocation(line: 3829, column: 5, scope: !15227)
!15286 = !DILocation(line: 3831, column: 5, scope: !15220)
!15287 = !DILocation(line: 3833, column: 1, scope: !15220)
!15288 = distinct !DISubprogram(name: "verify_gimple_assign", scope: !3, file: !3, line: 3602, type: !5223, scopeLine: 3603, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15289 = !DILocalVariable(name: "stmt", arg: 1, scope: !15288, file: !3, line: 3602, type: !2882)
!15290 = !DILocation(line: 3602, column: 30, scope: !15288)
!15291 = !DILocation(line: 3604, column: 36, scope: !15288)
!15292 = !DILocation(line: 3604, column: 11, scope: !15288)
!15293 = !DILocation(line: 3604, column: 3, scope: !15288)
!15294 = !DILocation(line: 3607, column: 43, scope: !15295)
!15295 = distinct !DILexicalBlock(scope: !15288, file: !3, line: 3605, column: 5)
!15296 = !DILocation(line: 3607, column: 14, scope: !15295)
!15297 = !DILocation(line: 3607, column: 7, scope: !15295)
!15298 = !DILocation(line: 3610, column: 42, scope: !15295)
!15299 = !DILocation(line: 3610, column: 14, scope: !15295)
!15300 = !DILocation(line: 3610, column: 7, scope: !15295)
!15301 = !DILocation(line: 3613, column: 43, scope: !15295)
!15302 = !DILocation(line: 3613, column: 14, scope: !15295)
!15303 = !DILocation(line: 3613, column: 7, scope: !15295)
!15304 = !DILocation(line: 3616, column: 7, scope: !15295)
!15305 = !DILocation(line: 3617, column: 5, scope: !15295)
!15306 = !DILocation(line: 3619, column: 5, scope: !15288)
!15307 = !DILocation(line: 3621, column: 1, scope: !15288)
!15308 = distinct !DISubprogram(name: "verify_gimple_call", scope: !3, file: !3, line: 2927, type: !5223, scopeLine: 2928, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15309 = !DILocalVariable(name: "stmt", arg: 1, scope: !15308, file: !3, line: 2927, type: !2882)
!15310 = !DILocation(line: 2927, column: 28, scope: !15308)
!15311 = !DILocalVariable(name: "fn", scope: !15308, file: !3, line: 2929, type: !2553)
!15312 = !DILocation(line: 2929, column: 8, scope: !15308)
!15313 = !DILocation(line: 2929, column: 29, scope: !15308)
!15314 = !DILocation(line: 2929, column: 13, scope: !15308)
!15315 = !DILocalVariable(name: "fntype", scope: !15308, file: !3, line: 2930, type: !2553)
!15316 = !DILocation(line: 2930, column: 8, scope: !15308)
!15317 = !DILocalVariable(name: "i", scope: !15308, file: !3, line: 2931, type: !7)
!15318 = !DILocation(line: 2931, column: 12, scope: !15308)
!15319 = !DILocation(line: 2933, column: 7, scope: !15320)
!15320 = distinct !DILexicalBlock(scope: !15308, file: !3, line: 2933, column: 7)
!15321 = !DILocation(line: 2933, column: 22, scope: !15320)
!15322 = !DILocation(line: 2934, column: 7, scope: !15320)
!15323 = !DILocation(line: 2934, column: 26, scope: !15320)
!15324 = !DILocation(line: 2934, column: 11, scope: !15320)
!15325 = !DILocation(line: 2933, column: 7, scope: !15308)
!15326 = !DILocation(line: 2936, column: 7, scope: !15327)
!15327 = distinct !DILexicalBlock(scope: !15320, file: !3, line: 2935, column: 5)
!15328 = !DILocation(line: 2937, column: 27, scope: !15327)
!15329 = !DILocation(line: 2937, column: 7, scope: !15327)
!15330 = !DILocation(line: 2938, column: 7, scope: !15327)
!15331 = !DILocation(line: 2941, column: 8, scope: !15332)
!15332 = distinct !DILexicalBlock(scope: !15308, file: !3, line: 2941, column: 7)
!15333 = !DILocation(line: 2942, column: 7, scope: !15332)
!15334 = !DILocation(line: 2942, column: 11, scope: !15332)
!15335 = !DILocation(line: 2942, column: 50, scope: !15332)
!15336 = !DILocation(line: 2943, column: 4, scope: !15332)
!15337 = !DILocation(line: 2943, column: 7, scope: !15332)
!15338 = !DILocation(line: 2943, column: 46, scope: !15332)
!15339 = !DILocation(line: 2941, column: 7, scope: !15308)
!15340 = !DILocation(line: 2945, column: 7, scope: !15341)
!15341 = distinct !DILexicalBlock(scope: !15332, file: !3, line: 2944, column: 5)
!15342 = !DILocation(line: 2946, column: 7, scope: !15341)
!15343 = !DILocation(line: 2949, column: 24, scope: !15344)
!15344 = distinct !DILexicalBlock(scope: !15308, file: !3, line: 2949, column: 7)
!15345 = !DILocation(line: 2949, column: 7, scope: !15344)
!15346 = !DILocation(line: 2950, column: 7, scope: !15344)
!15347 = !DILocation(line: 2950, column: 47, scope: !15344)
!15348 = !DILocation(line: 2950, column: 30, scope: !15344)
!15349 = !DILocation(line: 2950, column: 12, scope: !15344)
!15350 = !DILocation(line: 2951, column: 4, scope: !15344)
!15351 = !DILocation(line: 2951, column: 58, scope: !15344)
!15352 = !DILocation(line: 2951, column: 41, scope: !15344)
!15353 = !DILocation(line: 2951, column: 7, scope: !15344)
!15354 = !DILocation(line: 2949, column: 7, scope: !15308)
!15355 = !DILocation(line: 2953, column: 7, scope: !15356)
!15356 = distinct !DILexicalBlock(scope: !15344, file: !3, line: 2952, column: 5)
!15357 = !DILocation(line: 2954, column: 7, scope: !15356)
!15358 = !DILocation(line: 2957, column: 24, scope: !15359)
!15359 = distinct !DILexicalBlock(scope: !15308, file: !3, line: 2957, column: 7)
!15360 = !DILocation(line: 2957, column: 7, scope: !15359)
!15361 = !DILocation(line: 2957, column: 30, scope: !15359)
!15362 = !DILocation(line: 2957, column: 57, scope: !15359)
!15363 = !DILocation(line: 2957, column: 33, scope: !15359)
!15364 = !DILocation(line: 2957, column: 7, scope: !15308)
!15365 = !DILocation(line: 2959, column: 7, scope: !15366)
!15366 = distinct !DILexicalBlock(scope: !15359, file: !3, line: 2958, column: 5)
!15367 = !DILocation(line: 2960, column: 7, scope: !15366)
!15368 = !DILocation(line: 2963, column: 12, scope: !15308)
!15369 = !DILocation(line: 2963, column: 10, scope: !15308)
!15370 = !DILocation(line: 2964, column: 24, scope: !15371)
!15371 = distinct !DILexicalBlock(scope: !15308, file: !3, line: 2964, column: 7)
!15372 = !DILocation(line: 2964, column: 7, scope: !15371)
!15373 = !DILocation(line: 2965, column: 7, scope: !15371)
!15374 = !DILocation(line: 2965, column: 38, scope: !15371)
!15375 = !DILocation(line: 2966, column: 10, scope: !15371)
!15376 = !DILocation(line: 2965, column: 11, scope: !15371)
!15377 = !DILocation(line: 2972, column: 7, scope: !15371)
!15378 = !DILocation(line: 2972, column: 12, scope: !15371)
!15379 = !DILocation(line: 2973, column: 5, scope: !15371)
!15380 = !DILocation(line: 2973, column: 8, scope: !15371)
!15381 = !DILocation(line: 2964, column: 7, scope: !15308)
!15382 = !DILocation(line: 2975, column: 7, scope: !15383)
!15383 = distinct !DILexicalBlock(scope: !15371, file: !3, line: 2974, column: 5)
!15384 = !DILocation(line: 2976, column: 27, scope: !15383)
!15385 = !DILocation(line: 2976, column: 7, scope: !15383)
!15386 = !DILocation(line: 2977, column: 27, scope: !15383)
!15387 = !DILocation(line: 2977, column: 7, scope: !15383)
!15388 = !DILocation(line: 2978, column: 7, scope: !15383)
!15389 = !DILocation(line: 2981, column: 26, scope: !15390)
!15390 = distinct !DILexicalBlock(scope: !15308, file: !3, line: 2981, column: 7)
!15391 = !DILocation(line: 2981, column: 7, scope: !15390)
!15392 = !DILocation(line: 2982, column: 7, scope: !15390)
!15393 = !DILocation(line: 2982, column: 45, scope: !15390)
!15394 = !DILocation(line: 2982, column: 26, scope: !15390)
!15395 = !DILocation(line: 2982, column: 11, scope: !15390)
!15396 = !DILocation(line: 2981, column: 7, scope: !15308)
!15397 = !DILocation(line: 2984, column: 7, scope: !15398)
!15398 = distinct !DILexicalBlock(scope: !15390, file: !3, line: 2983, column: 5)
!15399 = !DILocation(line: 2985, column: 46, scope: !15398)
!15400 = !DILocation(line: 2985, column: 27, scope: !15398)
!15401 = !DILocation(line: 2985, column: 7, scope: !15398)
!15402 = !DILocation(line: 2986, column: 7, scope: !15398)
!15403 = !DILocation(line: 2991, column: 26, scope: !15404)
!15404 = distinct !DILexicalBlock(scope: !15308, file: !3, line: 2991, column: 7)
!15405 = !DILocation(line: 2991, column: 7, scope: !15404)
!15406 = !DILocation(line: 2991, column: 7, scope: !15308)
!15407 = !DILocation(line: 2993, column: 11, scope: !15408)
!15408 = distinct !DILexicalBlock(scope: !15409, file: !3, line: 2993, column: 11)
!15409 = distinct !DILexicalBlock(scope: !15404, file: !3, line: 2992, column: 5)
!15410 = !DILocation(line: 2993, column: 26, scope: !15408)
!15411 = !DILocation(line: 2994, column: 4, scope: !15408)
!15412 = !DILocation(line: 2994, column: 7, scope: !15408)
!15413 = !DILocation(line: 2994, column: 40, scope: !15408)
!15414 = !DILocation(line: 2993, column: 11, scope: !15409)
!15415 = !DILocation(line: 2996, column: 4, scope: !15416)
!15416 = distinct !DILexicalBlock(scope: !15408, file: !3, line: 2995, column: 2)
!15417 = !DILocation(line: 2997, column: 4, scope: !15416)
!15418 = !DILocation(line: 2999, column: 12, scope: !15409)
!15419 = !DILocation(line: 2999, column: 10, scope: !15409)
!15420 = !DILocation(line: 3001, column: 12, scope: !15421)
!15421 = distinct !DILexicalBlock(scope: !15409, file: !3, line: 3001, column: 11)
!15422 = !DILocation(line: 3001, column: 11, scope: !15409)
!15423 = !DILocation(line: 3003, column: 4, scope: !15424)
!15424 = distinct !DILexicalBlock(scope: !15421, file: !3, line: 3002, column: 2)
!15425 = !DILocation(line: 3004, column: 4, scope: !15424)
!15426 = !DILocation(line: 3006, column: 5, scope: !15409)
!15427 = !DILocation(line: 3013, column: 10, scope: !15428)
!15428 = distinct !DILexicalBlock(scope: !15308, file: !3, line: 3013, column: 3)
!15429 = !DILocation(line: 3013, column: 8, scope: !15428)
!15430 = !DILocation(line: 3013, column: 15, scope: !15431)
!15431 = distinct !DILexicalBlock(scope: !15428, file: !3, line: 3013, column: 3)
!15432 = !DILocation(line: 3013, column: 41, scope: !15431)
!15433 = !DILocation(line: 3013, column: 19, scope: !15431)
!15434 = !DILocation(line: 3013, column: 17, scope: !15431)
!15435 = !DILocation(line: 3013, column: 3, scope: !15428)
!15436 = !DILocalVariable(name: "arg", scope: !15437, file: !3, line: 3015, type: !2553)
!15437 = distinct !DILexicalBlock(scope: !15431, file: !3, line: 3014, column: 5)
!15438 = !DILocation(line: 3015, column: 12, scope: !15437)
!15439 = !DILocation(line: 3015, column: 35, scope: !15437)
!15440 = !DILocation(line: 3015, column: 41, scope: !15437)
!15441 = !DILocation(line: 3015, column: 18, scope: !15437)
!15442 = !DILocation(line: 3016, column: 31, scope: !15443)
!15443 = distinct !DILexicalBlock(scope: !15437, file: !3, line: 3016, column: 11)
!15444 = !DILocation(line: 3016, column: 12, scope: !15443)
!15445 = !DILocation(line: 3016, column: 11, scope: !15437)
!15446 = !DILocation(line: 3018, column: 4, scope: !15447)
!15447 = distinct !DILexicalBlock(scope: !15443, file: !3, line: 3017, column: 2)
!15448 = !DILocation(line: 3019, column: 24, scope: !15447)
!15449 = !DILocation(line: 3019, column: 4, scope: !15447)
!15450 = !DILocation(line: 3020, column: 2, scope: !15447)
!15451 = !DILocation(line: 3021, column: 5, scope: !15437)
!15452 = !DILocation(line: 3013, column: 48, scope: !15431)
!15453 = !DILocation(line: 3013, column: 3, scope: !15431)
!15454 = distinct !{!15454, !15435, !15455}
!15455 = !DILocation(line: 3021, column: 5, scope: !15428)
!15456 = !DILocation(line: 3023, column: 3, scope: !15308)
!15457 = !DILocation(line: 3024, column: 1, scope: !15308)
!15458 = distinct !DISubprogram(name: "verify_gimple_comparison", scope: !3, file: !3, line: 3030, type: !15459, scopeLine: 3031, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15459 = !DISubroutineType(types: !15460)
!15460 = !{!2672, !2553, !2553, !2553}
!15461 = !DILocalVariable(name: "type", arg: 1, scope: !15458, file: !3, line: 3030, type: !2553)
!15462 = !DILocation(line: 3030, column: 32, scope: !15458)
!15463 = !DILocalVariable(name: "op0", arg: 2, scope: !15458, file: !3, line: 3030, type: !2553)
!15464 = !DILocation(line: 3030, column: 43, scope: !15458)
!15465 = !DILocalVariable(name: "op1", arg: 3, scope: !15458, file: !3, line: 3030, type: !2553)
!15466 = !DILocation(line: 3030, column: 53, scope: !15458)
!15467 = !DILocalVariable(name: "op0_type", scope: !15458, file: !3, line: 3032, type: !2553)
!15468 = !DILocation(line: 3032, column: 8, scope: !15458)
!15469 = !DILocation(line: 3032, column: 19, scope: !15458)
!15470 = !DILocalVariable(name: "op1_type", scope: !15458, file: !3, line: 3033, type: !2553)
!15471 = !DILocation(line: 3033, column: 8, scope: !15458)
!15472 = !DILocation(line: 3033, column: 19, scope: !15458)
!15473 = !DILocation(line: 3035, column: 23, scope: !15474)
!15474 = distinct !DILexicalBlock(scope: !15458, file: !3, line: 3035, column: 7)
!15475 = !DILocation(line: 3035, column: 8, scope: !15474)
!15476 = !DILocation(line: 3035, column: 28, scope: !15474)
!15477 = !DILocation(line: 3035, column: 47, scope: !15474)
!15478 = !DILocation(line: 3035, column: 32, scope: !15474)
!15479 = !DILocation(line: 3035, column: 7, scope: !15458)
!15480 = !DILocation(line: 3037, column: 7, scope: !15481)
!15481 = distinct !DILexicalBlock(scope: !15474, file: !3, line: 3036, column: 5)
!15482 = !DILocation(line: 3038, column: 7, scope: !15481)
!15483 = !DILocation(line: 3048, column: 36, scope: !15484)
!15484 = distinct !DILexicalBlock(scope: !15458, file: !3, line: 3048, column: 7)
!15485 = !DILocation(line: 3048, column: 46, scope: !15484)
!15486 = !DILocation(line: 3048, column: 9, scope: !15484)
!15487 = !DILocation(line: 3049, column: 8, scope: !15484)
!15488 = !DILocation(line: 3049, column: 39, scope: !15484)
!15489 = !DILocation(line: 3049, column: 49, scope: !15484)
!15490 = !DILocation(line: 3049, column: 12, scope: !15484)
!15491 = !DILocation(line: 3050, column: 8, scope: !15484)
!15492 = !DILocation(line: 3050, column: 13, scope: !15484)
!15493 = !DILocation(line: 3051, column: 5, scope: !15484)
!15494 = !DILocation(line: 3051, column: 9, scope: !15484)
!15495 = !DILocation(line: 3052, column: 5, scope: !15484)
!15496 = !DILocation(line: 3052, column: 8, scope: !15484)
!15497 = !DILocation(line: 3052, column: 32, scope: !15484)
!15498 = !DILocation(line: 3052, column: 29, scope: !15484)
!15499 = !DILocation(line: 3053, column: 7, scope: !15484)
!15500 = !DILocation(line: 3053, column: 11, scope: !15484)
!15501 = !DILocation(line: 3048, column: 7, scope: !15458)
!15502 = !DILocation(line: 3055, column: 7, scope: !15503)
!15503 = distinct !DILexicalBlock(scope: !15484, file: !3, line: 3054, column: 5)
!15504 = !DILocation(line: 3056, column: 27, scope: !15503)
!15505 = !DILocation(line: 3056, column: 7, scope: !15503)
!15506 = !DILocation(line: 3057, column: 27, scope: !15503)
!15507 = !DILocation(line: 3057, column: 7, scope: !15503)
!15508 = !DILocation(line: 3058, column: 27, scope: !15503)
!15509 = !DILocation(line: 3058, column: 7, scope: !15503)
!15510 = !DILocation(line: 3059, column: 7, scope: !15503)
!15511 = !DILocation(line: 3062, column: 3, scope: !15458)
!15512 = !DILocation(line: 3063, column: 1, scope: !15458)
!15513 = distinct !DISubprogram(name: "verify_gimple_goto", scope: !3, file: !3, line: 3666, type: !5223, scopeLine: 3667, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15514 = !DILocalVariable(name: "stmt", arg: 1, scope: !15513, file: !3, line: 3666, type: !2882)
!15515 = !DILocation(line: 3666, column: 28, scope: !15513)
!15516 = !DILocalVariable(name: "dest", scope: !15513, file: !3, line: 3668, type: !2553)
!15517 = !DILocation(line: 3668, column: 8, scope: !15513)
!15518 = !DILocation(line: 3668, column: 33, scope: !15513)
!15519 = !DILocation(line: 3668, column: 15, scope: !15513)
!15520 = !DILocation(line: 3672, column: 7, scope: !15521)
!15521 = distinct !DILexicalBlock(scope: !15513, file: !3, line: 3672, column: 7)
!15522 = !DILocation(line: 3672, column: 24, scope: !15521)
!15523 = !DILocation(line: 3673, column: 7, scope: !15521)
!15524 = !DILocation(line: 3673, column: 27, scope: !15521)
!15525 = !DILocation(line: 3673, column: 12, scope: !15521)
!15526 = !DILocation(line: 3674, column: 4, scope: !15521)
!15527 = !DILocation(line: 3674, column: 8, scope: !15521)
!15528 = !DILocation(line: 3672, column: 7, scope: !15513)
!15529 = !DILocation(line: 3676, column: 7, scope: !15530)
!15530 = distinct !DILexicalBlock(scope: !15521, file: !3, line: 3675, column: 5)
!15531 = !DILocation(line: 3677, column: 7, scope: !15530)
!15532 = !DILocation(line: 3680, column: 3, scope: !15513)
!15533 = !DILocation(line: 3681, column: 1, scope: !15513)
!15534 = distinct !DISubprogram(name: "verify_gimple_switch", scope: !3, file: !3, line: 3687, type: !5223, scopeLine: 3688, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15535 = !DILocalVariable(name: "stmt", arg: 1, scope: !15534, file: !3, line: 3687, type: !2882)
!15536 = !DILocation(line: 3687, column: 30, scope: !15534)
!15537 = !DILocation(line: 3689, column: 44, scope: !15538)
!15538 = distinct !DILexicalBlock(scope: !15534, file: !3, line: 3689, column: 7)
!15539 = !DILocation(line: 3689, column: 23, scope: !15538)
!15540 = !DILocation(line: 3689, column: 8, scope: !15538)
!15541 = !DILocation(line: 3689, column: 7, scope: !15534)
!15542 = !DILocation(line: 3691, column: 7, scope: !15543)
!15543 = distinct !DILexicalBlock(scope: !15538, file: !3, line: 3690, column: 5)
!15544 = !DILocation(line: 3692, column: 48, scope: !15543)
!15545 = !DILocation(line: 3692, column: 27, scope: !15543)
!15546 = !DILocation(line: 3692, column: 7, scope: !15543)
!15547 = !DILocation(line: 3693, column: 7, scope: !15543)
!15548 = !DILocation(line: 3696, column: 3, scope: !15534)
!15549 = !DILocation(line: 3697, column: 1, scope: !15534)
!15550 = distinct !DISubprogram(name: "verify_gimple_return", scope: !3, file: !3, line: 3627, type: !5223, scopeLine: 3628, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15551 = !DILocalVariable(name: "stmt", arg: 1, scope: !15550, file: !3, line: 3627, type: !2882)
!15552 = !DILocation(line: 3627, column: 30, scope: !15550)
!15553 = !DILocalVariable(name: "op", scope: !15550, file: !3, line: 3629, type: !2553)
!15554 = !DILocation(line: 3629, column: 8, scope: !15550)
!15555 = !DILocation(line: 3629, column: 35, scope: !15550)
!15556 = !DILocation(line: 3629, column: 13, scope: !15550)
!15557 = !DILocalVariable(name: "restype", scope: !15550, file: !3, line: 3630, type: !2553)
!15558 = !DILocation(line: 3630, column: 8, scope: !15550)
!15559 = !DILocation(line: 3630, column: 18, scope: !15550)
!15560 = !DILocation(line: 3634, column: 7, scope: !15561)
!15561 = distinct !DILexicalBlock(scope: !15550, file: !3, line: 3634, column: 7)
!15562 = !DILocation(line: 3634, column: 10, scope: !15561)
!15563 = !DILocation(line: 3634, column: 7, scope: !15550)
!15564 = !DILocation(line: 3635, column: 5, scope: !15561)
!15565 = !DILocation(line: 3637, column: 23, scope: !15566)
!15566 = distinct !DILexicalBlock(scope: !15550, file: !3, line: 3637, column: 7)
!15567 = !DILocation(line: 3637, column: 8, scope: !15566)
!15568 = !DILocation(line: 3638, column: 7, scope: !15566)
!15569 = !DILocation(line: 3638, column: 10, scope: !15566)
!15570 = !DILocation(line: 3638, column: 25, scope: !15566)
!15571 = !DILocation(line: 3637, column: 7, scope: !15550)
!15572 = !DILocation(line: 3640, column: 7, scope: !15573)
!15573 = distinct !DILexicalBlock(scope: !15566, file: !3, line: 3639, column: 5)
!15574 = !DILocation(line: 3641, column: 27, scope: !15573)
!15575 = !DILocation(line: 3641, column: 7, scope: !15573)
!15576 = !DILocation(line: 3642, column: 7, scope: !15573)
!15577 = !DILocation(line: 3645, column: 35, scope: !15578)
!15578 = distinct !DILexicalBlock(scope: !15550, file: !3, line: 3645, column: 7)
!15579 = !DILocation(line: 3645, column: 44, scope: !15578)
!15580 = !DILocation(line: 3645, column: 8, scope: !15578)
!15581 = !DILocation(line: 3648, column: 7, scope: !15578)
!15582 = !DILocation(line: 3648, column: 12, scope: !15578)
!15583 = !DILocation(line: 3648, column: 27, scope: !15578)
!15584 = !DILocation(line: 3649, column: 5, scope: !15578)
!15585 = !DILocation(line: 3649, column: 8, scope: !15578)
!15586 = !DILocation(line: 3649, column: 35, scope: !15578)
!15587 = !DILocation(line: 3650, column: 5, scope: !15578)
!15588 = !DILocation(line: 3650, column: 35, scope: !15578)
!15589 = !DILocation(line: 3650, column: 44, scope: !15578)
!15590 = !DILocation(line: 3650, column: 8, scope: !15578)
!15591 = !DILocation(line: 3645, column: 7, scope: !15550)
!15592 = !DILocation(line: 3652, column: 7, scope: !15593)
!15593 = distinct !DILexicalBlock(scope: !15578, file: !3, line: 3651, column: 5)
!15594 = !DILocation(line: 3653, column: 27, scope: !15593)
!15595 = !DILocation(line: 3653, column: 7, scope: !15593)
!15596 = !DILocation(line: 3654, column: 27, scope: !15593)
!15597 = !DILocation(line: 3654, column: 7, scope: !15593)
!15598 = !DILocation(line: 3655, column: 7, scope: !15593)
!15599 = !DILocation(line: 3658, column: 3, scope: !15550)
!15600 = !DILocation(line: 3659, column: 1, scope: !15550)
!15601 = distinct !DISubprogram(name: "verify_gimple_phi", scope: !3, file: !3, line: 3704, type: !5223, scopeLine: 3705, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15602 = !DILocalVariable(name: "stmt", arg: 1, scope: !15601, file: !3, line: 3704, type: !2882)
!15603 = !DILocation(line: 3704, column: 27, scope: !15601)
!15604 = !DILocalVariable(name: "type", scope: !15601, file: !3, line: 3706, type: !2553)
!15605 = !DILocation(line: 3706, column: 8, scope: !15601)
!15606 = !DILocation(line: 3706, column: 15, scope: !15601)
!15607 = !DILocalVariable(name: "i", scope: !15601, file: !3, line: 3707, type: !7)
!15608 = !DILocation(line: 3707, column: 12, scope: !15601)
!15609 = !DILocation(line: 3709, column: 7, scope: !15610)
!15610 = distinct !DILexicalBlock(scope: !15601, file: !3, line: 3709, column: 7)
!15611 = !DILocation(line: 3709, column: 44, scope: !15610)
!15612 = !DILocation(line: 3709, column: 7, scope: !15601)
!15613 = !DILocation(line: 3711, column: 7, scope: !15614)
!15614 = distinct !DILexicalBlock(scope: !15610, file: !3, line: 3710, column: 5)
!15615 = !DILocation(line: 3712, column: 7, scope: !15614)
!15616 = !DILocation(line: 3715, column: 10, scope: !15617)
!15617 = distinct !DILexicalBlock(scope: !15601, file: !3, line: 3715, column: 3)
!15618 = !DILocation(line: 3715, column: 8, scope: !15617)
!15619 = !DILocation(line: 3715, column: 15, scope: !15620)
!15620 = distinct !DILexicalBlock(scope: !15617, file: !3, line: 3715, column: 3)
!15621 = !DILocation(line: 3715, column: 40, scope: !15620)
!15622 = !DILocation(line: 3715, column: 19, scope: !15620)
!15623 = !DILocation(line: 3715, column: 17, scope: !15620)
!15624 = !DILocation(line: 3715, column: 3, scope: !15617)
!15625 = !DILocalVariable(name: "arg", scope: !15626, file: !3, line: 3717, type: !2553)
!15626 = distinct !DILexicalBlock(scope: !15620, file: !3, line: 3716, column: 5)
!15627 = !DILocation(line: 3717, column: 12, scope: !15626)
!15628 = !DILocation(line: 3717, column: 38, scope: !15626)
!15629 = !DILocation(line: 3717, column: 44, scope: !15626)
!15630 = !DILocation(line: 3717, column: 18, scope: !15626)
!15631 = !DILocation(line: 3718, column: 46, scope: !15632)
!15632 = distinct !DILexicalBlock(scope: !15626, file: !3, line: 3718, column: 11)
!15633 = !DILocation(line: 3718, column: 27, scope: !15632)
!15634 = !DILocation(line: 3718, column: 12, scope: !15632)
!15635 = !DILocation(line: 3719, column: 5, scope: !15632)
!15636 = !DILocation(line: 3719, column: 24, scope: !15632)
!15637 = !DILocation(line: 3719, column: 9, scope: !15632)
!15638 = !DILocation(line: 3720, column: 4, scope: !15632)
!15639 = !DILocation(line: 3720, column: 43, scope: !15632)
!15640 = !DILocation(line: 3720, column: 24, scope: !15632)
!15641 = !DILocation(line: 3720, column: 9, scope: !15632)
!15642 = !DILocation(line: 3721, column: 8, scope: !15632)
!15643 = !DILocation(line: 3721, column: 35, scope: !15632)
!15644 = !DILocation(line: 3721, column: 12, scope: !15632)
!15645 = !DILocation(line: 3718, column: 11, scope: !15626)
!15646 = !DILocation(line: 3723, column: 4, scope: !15647)
!15647 = distinct !DILexicalBlock(scope: !15632, file: !3, line: 3722, column: 2)
!15648 = !DILocation(line: 3724, column: 24, scope: !15647)
!15649 = !DILocation(line: 3724, column: 4, scope: !15647)
!15650 = !DILocation(line: 3725, column: 4, scope: !15647)
!15651 = !DILocation(line: 3727, column: 39, scope: !15652)
!15652 = distinct !DILexicalBlock(scope: !15626, file: !3, line: 3727, column: 11)
!15653 = !DILocation(line: 3727, column: 45, scope: !15652)
!15654 = !DILocation(line: 3727, column: 12, scope: !15652)
!15655 = !DILocation(line: 3727, column: 11, scope: !15626)
!15656 = !DILocation(line: 3729, column: 52, scope: !15657)
!15657 = distinct !DILexicalBlock(scope: !15652, file: !3, line: 3728, column: 2)
!15658 = !DILocation(line: 3729, column: 4, scope: !15657)
!15659 = !DILocation(line: 3730, column: 24, scope: !15657)
!15660 = !DILocation(line: 3730, column: 4, scope: !15657)
!15661 = !DILocation(line: 3731, column: 24, scope: !15657)
!15662 = !DILocation(line: 3731, column: 4, scope: !15657)
!15663 = !DILocation(line: 3732, column: 4, scope: !15657)
!15664 = !DILocation(line: 3734, column: 5, scope: !15626)
!15665 = !DILocation(line: 3715, column: 48, scope: !15620)
!15666 = !DILocation(line: 3715, column: 3, scope: !15620)
!15667 = distinct !{!15667, !15624, !15668}
!15668 = !DILocation(line: 3734, column: 5, scope: !15617)
!15669 = !DILocation(line: 3736, column: 3, scope: !15601)
!15670 = !DILocation(line: 3737, column: 1, scope: !15601)
!15671 = distinct !DISubprogram(name: "verify_gimple_debug", scope: !3, file: !3, line: 3744, type: !5223, scopeLine: 3745, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15672 = !DILocalVariable(name: "stmt", arg: 1, scope: !15671, file: !3, line: 3744, type: !2882)
!15673 = !DILocation(line: 3744, column: 29, scope: !15671)
!15674 = !DILocation(line: 3752, column: 3, scope: !15671)
!15675 = distinct !DISubprogram(name: "gimple_assign_rhs_class", scope: !581, file: !581, line: 1844, type: !15676, scopeLine: 1845, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15676 = !DISubroutineType(types: !15677)
!15677 = !{!902, !4543}
!15678 = !DILocalVariable(name: "gs", arg: 1, scope: !15675, file: !581, line: 1844, type: !4543)
!15679 = !DILocation(line: 1844, column: 39, scope: !15675)
!15680 = !DILocation(line: 1846, column: 56, scope: !15675)
!15681 = !DILocation(line: 1846, column: 32, scope: !15675)
!15682 = !DILocation(line: 1846, column: 10, scope: !15675)
!15683 = !DILocation(line: 1846, column: 3, scope: !15675)
!15684 = distinct !DISubprogram(name: "verify_gimple_assign_single", scope: !3, file: !3, line: 3487, type: !5223, scopeLine: 3488, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15685 = !DILocalVariable(name: "stmt", arg: 1, scope: !15684, file: !3, line: 3487, type: !2882)
!15686 = !DILocation(line: 3487, column: 37, scope: !15684)
!15687 = !DILocalVariable(name: "rhs_code", scope: !15684, file: !3, line: 3489, type: !141)
!15688 = !DILocation(line: 3489, column: 18, scope: !15684)
!15689 = !DILocation(line: 3489, column: 53, scope: !15684)
!15690 = !DILocation(line: 3489, column: 29, scope: !15684)
!15691 = !DILocalVariable(name: "lhs", scope: !15684, file: !3, line: 3490, type: !2553)
!15692 = !DILocation(line: 3490, column: 8, scope: !15684)
!15693 = !DILocation(line: 3490, column: 33, scope: !15684)
!15694 = !DILocation(line: 3490, column: 14, scope: !15684)
!15695 = !DILocalVariable(name: "lhs_type", scope: !15684, file: !3, line: 3491, type: !2553)
!15696 = !DILocation(line: 3491, column: 8, scope: !15684)
!15697 = !DILocation(line: 3491, column: 19, scope: !15684)
!15698 = !DILocalVariable(name: "rhs1", scope: !15684, file: !3, line: 3492, type: !2553)
!15699 = !DILocation(line: 3492, column: 8, scope: !15684)
!15700 = !DILocation(line: 3492, column: 35, scope: !15684)
!15701 = !DILocation(line: 3492, column: 15, scope: !15684)
!15702 = !DILocalVariable(name: "rhs1_type", scope: !15684, file: !3, line: 3493, type: !2553)
!15703 = !DILocation(line: 3493, column: 8, scope: !15684)
!15704 = !DILocation(line: 3493, column: 20, scope: !15684)
!15705 = !DILocalVariable(name: "res", scope: !15684, file: !3, line: 3494, type: !2672)
!15706 = !DILocation(line: 3494, column: 8, scope: !15684)
!15707 = !DILocation(line: 3496, column: 35, scope: !15708)
!15708 = distinct !DILexicalBlock(scope: !15684, file: !3, line: 3496, column: 7)
!15709 = !DILocation(line: 3496, column: 45, scope: !15708)
!15710 = !DILocation(line: 3496, column: 8, scope: !15708)
!15711 = !DILocation(line: 3496, column: 7, scope: !15684)
!15712 = !DILocation(line: 3498, column: 7, scope: !15713)
!15713 = distinct !DILexicalBlock(scope: !15708, file: !3, line: 3497, column: 5)
!15714 = !DILocation(line: 3499, column: 27, scope: !15713)
!15715 = !DILocation(line: 3499, column: 7, scope: !15713)
!15716 = !DILocation(line: 3500, column: 27, scope: !15713)
!15717 = !DILocation(line: 3500, column: 7, scope: !15713)
!15718 = !DILocation(line: 3501, column: 7, scope: !15713)
!15719 = !DILocation(line: 3504, column: 28, scope: !15720)
!15720 = distinct !DILexicalBlock(scope: !15684, file: !3, line: 3504, column: 7)
!15721 = !DILocation(line: 3504, column: 7, scope: !15720)
!15722 = !DILocation(line: 3504, column: 7, scope: !15684)
!15723 = !DILocation(line: 3505, column: 46, scope: !15720)
!15724 = !DILocation(line: 3505, column: 12, scope: !15720)
!15725 = !DILocation(line: 3505, column: 9, scope: !15720)
!15726 = !DILocation(line: 3505, column: 5, scope: !15720)
!15727 = !DILocation(line: 3508, column: 11, scope: !15684)
!15728 = !DILocation(line: 3508, column: 3, scope: !15684)
!15729 = !DILocalVariable(name: "op", scope: !15730, file: !3, line: 3512, type: !2553)
!15730 = distinct !DILexicalBlock(scope: !15731, file: !3, line: 3511, column: 7)
!15731 = distinct !DILexicalBlock(scope: !15684, file: !3, line: 3509, column: 5)
!15732 = !DILocation(line: 3512, column: 7, scope: !15730)
!15733 = !DILocation(line: 3512, column: 12, scope: !15730)
!15734 = !DILocation(line: 3513, column: 30, scope: !15735)
!15735 = distinct !DILexicalBlock(scope: !15730, file: !3, line: 3513, column: 6)
!15736 = !DILocation(line: 3513, column: 7, scope: !15735)
!15737 = !DILocation(line: 3513, column: 6, scope: !15730)
!15738 = !DILocation(line: 3515, column: 6, scope: !15739)
!15739 = distinct !DILexicalBlock(scope: !15735, file: !3, line: 3514, column: 4)
!15740 = !DILocation(line: 3516, column: 6, scope: !15739)
!15741 = !DILocation(line: 3519, column: 27, scope: !15742)
!15742 = distinct !DILexicalBlock(scope: !15730, file: !3, line: 3519, column: 6)
!15743 = !DILocation(line: 3519, column: 43, scope: !15742)
!15744 = !DILocation(line: 3519, column: 7, scope: !15742)
!15745 = !DILocation(line: 3520, column: 6, scope: !15742)
!15746 = !DILocation(line: 3520, column: 52, scope: !15742)
!15747 = !DILocation(line: 3521, column: 10, scope: !15742)
!15748 = !DILocation(line: 3520, column: 10, scope: !15742)
!15749 = !DILocation(line: 3519, column: 6, scope: !15730)
!15750 = !DILocation(line: 3523, column: 6, scope: !15751)
!15751 = distinct !DILexicalBlock(scope: !15742, file: !3, line: 3522, column: 4)
!15752 = !DILocation(line: 3524, column: 26, scope: !15751)
!15753 = !DILocation(line: 3524, column: 6, scope: !15751)
!15754 = !DILocation(line: 3525, column: 26, scope: !15751)
!15755 = !DILocation(line: 3525, column: 6, scope: !15751)
!15756 = !DILocation(line: 3526, column: 6, scope: !15751)
!15757 = !DILocation(line: 3529, column: 43, scope: !15730)
!15758 = !DILocation(line: 3529, column: 9, scope: !15730)
!15759 = !DILocation(line: 3529, column: 2, scope: !15730)
!15760 = !DILocation(line: 3544, column: 27, scope: !15761)
!15761 = distinct !DILexicalBlock(scope: !15731, file: !3, line: 3544, column: 11)
!15762 = !DILocation(line: 3544, column: 12, scope: !15761)
!15763 = !DILocation(line: 3545, column: 4, scope: !15761)
!15764 = !DILocation(line: 3545, column: 27, scope: !15761)
!15765 = !DILocation(line: 3545, column: 7, scope: !15761)
!15766 = !DILocation(line: 3544, column: 11, scope: !15731)
!15767 = !DILocation(line: 3547, column: 4, scope: !15768)
!15768 = distinct !DILexicalBlock(scope: !15761, file: !3, line: 3546, column: 2)
!15769 = !DILocation(line: 3548, column: 24, scope: !15768)
!15770 = !DILocation(line: 3548, column: 4, scope: !15768)
!15771 = !DILocation(line: 3549, column: 24, scope: !15768)
!15772 = !DILocation(line: 3549, column: 4, scope: !15768)
!15773 = !DILocation(line: 3550, column: 4, scope: !15768)
!15774 = !DILocation(line: 3552, column: 14, scope: !15731)
!15775 = !DILocation(line: 3552, column: 18, scope: !15731)
!15776 = !DILocation(line: 3552, column: 55, scope: !15731)
!15777 = !DILocation(line: 3552, column: 21, scope: !15731)
!15778 = !DILocation(line: 3552, column: 7, scope: !15731)
!15779 = !DILocation(line: 3562, column: 14, scope: !15731)
!15780 = !DILocation(line: 3562, column: 7, scope: !15731)
!15781 = !DILocation(line: 3566, column: 14, scope: !15731)
!15782 = !DILocation(line: 3566, column: 7, scope: !15731)
!15783 = !DILocation(line: 3569, column: 27, scope: !15784)
!15784 = distinct !DILexicalBlock(scope: !15731, file: !3, line: 3569, column: 11)
!15785 = !DILocation(line: 3569, column: 12, scope: !15784)
!15786 = !DILocation(line: 3570, column: 4, scope: !15784)
!15787 = !DILocation(line: 3570, column: 23, scope: !15784)
!15788 = !DILocation(line: 3570, column: 8, scope: !15784)
!15789 = !DILocation(line: 3571, column: 4, scope: !15784)
!15790 = !DILocation(line: 3571, column: 27, scope: !15784)
!15791 = !DILocation(line: 3571, column: 7, scope: !15784)
!15792 = !DILocation(line: 3569, column: 11, scope: !15731)
!15793 = !DILocation(line: 3573, column: 4, scope: !15794)
!15794 = distinct !DILexicalBlock(scope: !15784, file: !3, line: 3572, column: 2)
!15795 = !DILocation(line: 3574, column: 24, scope: !15794)
!15796 = !DILocation(line: 3574, column: 4, scope: !15794)
!15797 = !DILocation(line: 3575, column: 24, scope: !15794)
!15798 = !DILocation(line: 3575, column: 4, scope: !15794)
!15799 = !DILocation(line: 3576, column: 4, scope: !15794)
!15800 = !DILocation(line: 3578, column: 14, scope: !15731)
!15801 = !DILocation(line: 3578, column: 7, scope: !15731)
!15802 = !DILocation(line: 3590, column: 14, scope: !15731)
!15803 = !DILocation(line: 3590, column: 7, scope: !15731)
!15804 = !DILocation(line: 3593, column: 5, scope: !15731)
!15805 = !DILocation(line: 3595, column: 10, scope: !15684)
!15806 = !DILocation(line: 3595, column: 3, scope: !15684)
!15807 = !DILocation(line: 3596, column: 1, scope: !15684)
!15808 = distinct !DISubprogram(name: "verify_gimple_assign_unary", scope: !3, file: !3, line: 3069, type: !5223, scopeLine: 3070, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15809 = !DILocalVariable(name: "stmt", arg: 1, scope: !15808, file: !3, line: 3069, type: !2882)
!15810 = !DILocation(line: 3069, column: 36, scope: !15808)
!15811 = !DILocalVariable(name: "rhs_code", scope: !15808, file: !3, line: 3071, type: !141)
!15812 = !DILocation(line: 3071, column: 18, scope: !15808)
!15813 = !DILocation(line: 3071, column: 53, scope: !15808)
!15814 = !DILocation(line: 3071, column: 29, scope: !15808)
!15815 = !DILocalVariable(name: "lhs", scope: !15808, file: !3, line: 3072, type: !2553)
!15816 = !DILocation(line: 3072, column: 8, scope: !15808)
!15817 = !DILocation(line: 3072, column: 33, scope: !15808)
!15818 = !DILocation(line: 3072, column: 14, scope: !15808)
!15819 = !DILocalVariable(name: "lhs_type", scope: !15808, file: !3, line: 3073, type: !2553)
!15820 = !DILocation(line: 3073, column: 8, scope: !15808)
!15821 = !DILocation(line: 3073, column: 19, scope: !15808)
!15822 = !DILocalVariable(name: "rhs1", scope: !15808, file: !3, line: 3074, type: !2553)
!15823 = !DILocation(line: 3074, column: 8, scope: !15808)
!15824 = !DILocation(line: 3074, column: 35, scope: !15808)
!15825 = !DILocation(line: 3074, column: 15, scope: !15808)
!15826 = !DILocalVariable(name: "rhs1_type", scope: !15808, file: !3, line: 3075, type: !2553)
!15827 = !DILocation(line: 3075, column: 8, scope: !15808)
!15828 = !DILocation(line: 3075, column: 20, scope: !15808)
!15829 = !DILocation(line: 3077, column: 23, scope: !15830)
!15830 = distinct !DILexicalBlock(scope: !15808, file: !3, line: 3077, column: 7)
!15831 = !DILocation(line: 3077, column: 8, scope: !15830)
!15832 = !DILocation(line: 3078, column: 7, scope: !15830)
!15833 = !DILocation(line: 3078, column: 12, scope: !15830)
!15834 = !DILocation(line: 3078, column: 21, scope: !15830)
!15835 = !DILocation(line: 3079, column: 5, scope: !15830)
!15836 = !DILocation(line: 3079, column: 8, scope: !15830)
!15837 = !DILocation(line: 3079, column: 29, scope: !15830)
!15838 = !DILocation(line: 3077, column: 7, scope: !15808)
!15839 = !DILocation(line: 3081, column: 7, scope: !15840)
!15840 = distinct !DILexicalBlock(scope: !15830, file: !3, line: 3080, column: 5)
!15841 = !DILocation(line: 3082, column: 7, scope: !15840)
!15842 = !DILocation(line: 3085, column: 23, scope: !15843)
!15843 = distinct !DILexicalBlock(scope: !15808, file: !3, line: 3085, column: 7)
!15844 = !DILocation(line: 3085, column: 8, scope: !15843)
!15845 = !DILocation(line: 3085, column: 7, scope: !15808)
!15846 = !DILocation(line: 3087, column: 7, scope: !15847)
!15847 = distinct !DILexicalBlock(scope: !15843, file: !3, line: 3086, column: 5)
!15848 = !DILocation(line: 3088, column: 7, scope: !15847)
!15849 = !DILocation(line: 3092, column: 11, scope: !15808)
!15850 = !DILocation(line: 3092, column: 3, scope: !15808)
!15851 = !DILocation(line: 3101, column: 7, scope: !15852)
!15852 = distinct !DILexicalBlock(scope: !15853, file: !3, line: 3101, column: 6)
!15853 = distinct !DILexicalBlock(scope: !15854, file: !3, line: 3095, column: 7)
!15854 = distinct !DILexicalBlock(scope: !15808, file: !3, line: 3093, column: 5)
!15855 = !DILocation(line: 3102, column: 7, scope: !15852)
!15856 = !DILocation(line: 3102, column: 10, scope: !15852)
!15857 = !DILocation(line: 3103, column: 7, scope: !15852)
!15858 = !DILocation(line: 3103, column: 11, scope: !15852)
!15859 = !DILocation(line: 3103, column: 40, scope: !15852)
!15860 = !DILocation(line: 3103, column: 37, scope: !15852)
!15861 = !DILocation(line: 3104, column: 4, scope: !15852)
!15862 = !DILocation(line: 3104, column: 7, scope: !15852)
!15863 = !DILocation(line: 3104, column: 20, scope: !15852)
!15864 = !DILocation(line: 3104, column: 17, scope: !15852)
!15865 = !DILocation(line: 3105, column: 6, scope: !15852)
!15866 = !DILocation(line: 3105, column: 10, scope: !15852)
!15867 = !DILocation(line: 3106, column: 3, scope: !15852)
!15868 = !DILocation(line: 3106, column: 6, scope: !15852)
!15869 = !DILocation(line: 3107, column: 3, scope: !15852)
!15870 = !DILocation(line: 3107, column: 7, scope: !15852)
!15871 = !DILocation(line: 3107, column: 37, scope: !15852)
!15872 = !DILocation(line: 3107, column: 34, scope: !15852)
!15873 = !DILocation(line: 3108, column: 7, scope: !15852)
!15874 = !DILocation(line: 3108, column: 10, scope: !15852)
!15875 = !DILocation(line: 3108, column: 22, scope: !15852)
!15876 = !DILocation(line: 3108, column: 19, scope: !15852)
!15877 = !DILocation(line: 3101, column: 6, scope: !15853)
!15878 = !DILocation(line: 3109, column: 4, scope: !15852)
!15879 = !DILocation(line: 3112, column: 7, scope: !15880)
!15880 = distinct !DILexicalBlock(scope: !15853, file: !3, line: 3112, column: 6)
!15881 = !DILocation(line: 3112, column: 28, scope: !15880)
!15882 = !DILocation(line: 3113, column: 7, scope: !15880)
!15883 = !DILocation(line: 3113, column: 10, scope: !15880)
!15884 = !DILocation(line: 3113, column: 32, scope: !15880)
!15885 = !DILocation(line: 3114, column: 6, scope: !15880)
!15886 = !DILocation(line: 3114, column: 10, scope: !15880)
!15887 = !DILocation(line: 3114, column: 31, scope: !15880)
!15888 = !DILocation(line: 3115, column: 3, scope: !15880)
!15889 = !DILocation(line: 3115, column: 6, scope: !15880)
!15890 = !DILocation(line: 3115, column: 28, scope: !15880)
!15891 = !DILocation(line: 3112, column: 6, scope: !15853)
!15892 = !DILocation(line: 3116, column: 4, scope: !15880)
!15893 = !DILocation(line: 3120, column: 6, scope: !15894)
!15894 = distinct !DILexicalBlock(scope: !15853, file: !3, line: 3120, column: 6)
!15895 = !DILocation(line: 3120, column: 36, scope: !15894)
!15896 = !DILocation(line: 3120, column: 33, scope: !15894)
!15897 = !DILocation(line: 3120, column: 6, scope: !15853)
!15898 = !DILocation(line: 3122, column: 6, scope: !15899)
!15899 = distinct !DILexicalBlock(scope: !15894, file: !3, line: 3121, column: 4)
!15900 = !DILocation(line: 3123, column: 26, scope: !15899)
!15901 = !DILocation(line: 3123, column: 6, scope: !15899)
!15902 = !DILocation(line: 3124, column: 26, scope: !15899)
!15903 = !DILocation(line: 3124, column: 6, scope: !15899)
!15904 = !DILocation(line: 3125, column: 6, scope: !15899)
!15905 = !DILocation(line: 3128, column: 2, scope: !15853)
!15906 = !DILocation(line: 3133, column: 7, scope: !15907)
!15907 = distinct !DILexicalBlock(scope: !15908, file: !3, line: 3133, column: 6)
!15908 = distinct !DILexicalBlock(scope: !15854, file: !3, line: 3132, column: 7)
!15909 = !DILocation(line: 3133, column: 34, scope: !15907)
!15910 = !DILocation(line: 3133, column: 38, scope: !15907)
!15911 = !DILocation(line: 3134, column: 6, scope: !15907)
!15912 = !DILocation(line: 3134, column: 10, scope: !15907)
!15913 = !DILocation(line: 3135, column: 6, scope: !15907)
!15914 = !DILocation(line: 3135, column: 3, scope: !15907)
!15915 = !DILocation(line: 3133, column: 6, scope: !15908)
!15916 = !DILocation(line: 3137, column: 6, scope: !15917)
!15917 = distinct !DILexicalBlock(scope: !15907, file: !3, line: 3136, column: 4)
!15918 = !DILocation(line: 3138, column: 26, scope: !15917)
!15919 = !DILocation(line: 3138, column: 6, scope: !15917)
!15920 = !DILocation(line: 3139, column: 26, scope: !15917)
!15921 = !DILocation(line: 3139, column: 6, scope: !15917)
!15922 = !DILocation(line: 3140, column: 6, scope: !15917)
!15923 = !DILocation(line: 3143, column: 2, scope: !15908)
!15924 = !DILocation(line: 3148, column: 36, scope: !15925)
!15925 = distinct !DILexicalBlock(scope: !15926, file: !3, line: 3148, column: 6)
!15926 = distinct !DILexicalBlock(scope: !15854, file: !3, line: 3147, column: 7)
!15927 = !DILocation(line: 3148, column: 46, scope: !15925)
!15928 = !DILocation(line: 3148, column: 7, scope: !15925)
!15929 = !DILocation(line: 3149, column: 6, scope: !15925)
!15930 = !DILocation(line: 3149, column: 39, scope: !15925)
!15931 = !DILocation(line: 3149, column: 50, scope: !15925)
!15932 = !DILocation(line: 3149, column: 10, scope: !15925)
!15933 = !DILocation(line: 3148, column: 6, scope: !15926)
!15934 = !DILocation(line: 3151, column: 6, scope: !15935)
!15935 = distinct !DILexicalBlock(scope: !15925, file: !3, line: 3150, column: 4)
!15936 = !DILocation(line: 3152, column: 26, scope: !15935)
!15937 = !DILocation(line: 3152, column: 6, scope: !15935)
!15938 = !DILocation(line: 3153, column: 26, scope: !15935)
!15939 = !DILocation(line: 3153, column: 6, scope: !15935)
!15940 = !DILocation(line: 3154, column: 6, scope: !15935)
!15941 = !DILocation(line: 3157, column: 2, scope: !15926)
!15942 = !DILocation(line: 3162, column: 7, scope: !15943)
!15943 = distinct !DILexicalBlock(scope: !15944, file: !3, line: 3162, column: 6)
!15944 = distinct !DILexicalBlock(scope: !15854, file: !3, line: 3161, column: 7)
!15945 = !DILocation(line: 3162, column: 35, scope: !15943)
!15946 = !DILocation(line: 3162, column: 39, scope: !15943)
!15947 = !DILocation(line: 3162, column: 6, scope: !15944)
!15948 = !DILocation(line: 3164, column: 6, scope: !15949)
!15949 = distinct !DILexicalBlock(scope: !15943, file: !3, line: 3163, column: 4)
!15950 = !DILocation(line: 3165, column: 26, scope: !15949)
!15951 = !DILocation(line: 3165, column: 6, scope: !15949)
!15952 = !DILocation(line: 3166, column: 26, scope: !15949)
!15953 = !DILocation(line: 3166, column: 6, scope: !15949)
!15954 = !DILocation(line: 3167, column: 6, scope: !15949)
!15955 = !DILocation(line: 3170, column: 9, scope: !15944)
!15956 = !DILocation(line: 3175, column: 7, scope: !15957)
!15957 = distinct !DILexicalBlock(scope: !15958, file: !3, line: 3175, column: 6)
!15958 = distinct !DILexicalBlock(scope: !15854, file: !3, line: 3174, column: 7)
!15959 = !DILocation(line: 3175, column: 34, scope: !15957)
!15960 = !DILocation(line: 3175, column: 38, scope: !15957)
!15961 = !DILocation(line: 3175, column: 6, scope: !15958)
!15962 = !DILocation(line: 3177, column: 6, scope: !15963)
!15963 = distinct !DILexicalBlock(scope: !15957, file: !3, line: 3176, column: 4)
!15964 = !DILocation(line: 3178, column: 26, scope: !15963)
!15965 = !DILocation(line: 3178, column: 6, scope: !15963)
!15966 = !DILocation(line: 3179, column: 26, scope: !15963)
!15967 = !DILocation(line: 3179, column: 6, scope: !15963)
!15968 = !DILocation(line: 3180, column: 6, scope: !15963)
!15969 = !DILocation(line: 3183, column: 9, scope: !15958)
!15970 = !DILocation(line: 3194, column: 7, scope: !15854)
!15971 = !DILocation(line: 3203, column: 7, scope: !15854)
!15972 = !DILocation(line: 3206, column: 7, scope: !15854)
!15973 = !DILocation(line: 3207, column: 5, scope: !15854)
!15974 = !DILocation(line: 3210, column: 35, scope: !15975)
!15975 = distinct !DILexicalBlock(scope: !15808, file: !3, line: 3210, column: 7)
!15976 = !DILocation(line: 3210, column: 45, scope: !15975)
!15977 = !DILocation(line: 3210, column: 8, scope: !15975)
!15978 = !DILocation(line: 3210, column: 7, scope: !15808)
!15979 = !DILocation(line: 3212, column: 7, scope: !15980)
!15980 = distinct !DILexicalBlock(scope: !15975, file: !3, line: 3211, column: 5)
!15981 = !DILocation(line: 3213, column: 27, scope: !15980)
!15982 = !DILocation(line: 3213, column: 7, scope: !15980)
!15983 = !DILocation(line: 3214, column: 27, scope: !15980)
!15984 = !DILocation(line: 3214, column: 7, scope: !15980)
!15985 = !DILocation(line: 3215, column: 7, scope: !15980)
!15986 = !DILocation(line: 3218, column: 3, scope: !15808)
!15987 = !DILocation(line: 3219, column: 1, scope: !15808)
!15988 = distinct !DISubprogram(name: "verify_gimple_assign_binary", scope: !3, file: !3, line: 3225, type: !5223, scopeLine: 3226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!15989 = !DILocalVariable(name: "stmt", arg: 1, scope: !15988, file: !3, line: 3225, type: !2882)
!15990 = !DILocation(line: 3225, column: 37, scope: !15988)
!15991 = !DILocalVariable(name: "rhs_code", scope: !15988, file: !3, line: 3227, type: !141)
!15992 = !DILocation(line: 3227, column: 18, scope: !15988)
!15993 = !DILocation(line: 3227, column: 53, scope: !15988)
!15994 = !DILocation(line: 3227, column: 29, scope: !15988)
!15995 = !DILocalVariable(name: "lhs", scope: !15988, file: !3, line: 3228, type: !2553)
!15996 = !DILocation(line: 3228, column: 8, scope: !15988)
!15997 = !DILocation(line: 3228, column: 33, scope: !15988)
!15998 = !DILocation(line: 3228, column: 14, scope: !15988)
!15999 = !DILocalVariable(name: "lhs_type", scope: !15988, file: !3, line: 3229, type: !2553)
!16000 = !DILocation(line: 3229, column: 8, scope: !15988)
!16001 = !DILocation(line: 3229, column: 19, scope: !15988)
!16002 = !DILocalVariable(name: "rhs1", scope: !15988, file: !3, line: 3230, type: !2553)
!16003 = !DILocation(line: 3230, column: 8, scope: !15988)
!16004 = !DILocation(line: 3230, column: 35, scope: !15988)
!16005 = !DILocation(line: 3230, column: 15, scope: !15988)
!16006 = !DILocalVariable(name: "rhs1_type", scope: !15988, file: !3, line: 3231, type: !2553)
!16007 = !DILocation(line: 3231, column: 8, scope: !15988)
!16008 = !DILocation(line: 3231, column: 20, scope: !15988)
!16009 = !DILocalVariable(name: "rhs2", scope: !15988, file: !3, line: 3232, type: !2553)
!16010 = !DILocation(line: 3232, column: 8, scope: !15988)
!16011 = !DILocation(line: 3232, column: 35, scope: !15988)
!16012 = !DILocation(line: 3232, column: 15, scope: !15988)
!16013 = !DILocalVariable(name: "rhs2_type", scope: !15988, file: !3, line: 3233, type: !2553)
!16014 = !DILocation(line: 3233, column: 8, scope: !15988)
!16015 = !DILocation(line: 3233, column: 20, scope: !15988)
!16016 = !DILocation(line: 3235, column: 23, scope: !16017)
!16017 = distinct !DILexicalBlock(scope: !15988, file: !3, line: 3235, column: 7)
!16018 = !DILocation(line: 3235, column: 8, scope: !16017)
!16019 = !DILocation(line: 3236, column: 7, scope: !16017)
!16020 = !DILocation(line: 3236, column: 12, scope: !16017)
!16021 = !DILocation(line: 3236, column: 21, scope: !16017)
!16022 = !DILocation(line: 3237, column: 5, scope: !16017)
!16023 = !DILocation(line: 3237, column: 8, scope: !16017)
!16024 = !DILocation(line: 3237, column: 29, scope: !16017)
!16025 = !DILocation(line: 3235, column: 7, scope: !15988)
!16026 = !DILocation(line: 3239, column: 7, scope: !16027)
!16027 = distinct !DILexicalBlock(scope: !16017, file: !3, line: 3238, column: 5)
!16028 = !DILocation(line: 3240, column: 7, scope: !16027)
!16029 = !DILocation(line: 3243, column: 23, scope: !16030)
!16030 = distinct !DILexicalBlock(scope: !15988, file: !3, line: 3243, column: 7)
!16031 = !DILocation(line: 3243, column: 8, scope: !16030)
!16032 = !DILocation(line: 3244, column: 7, scope: !16030)
!16033 = !DILocation(line: 3244, column: 26, scope: !16030)
!16034 = !DILocation(line: 3244, column: 11, scope: !16030)
!16035 = !DILocation(line: 3243, column: 7, scope: !15988)
!16036 = !DILocation(line: 3246, column: 7, scope: !16037)
!16037 = distinct !DILexicalBlock(scope: !16030, file: !3, line: 3245, column: 5)
!16038 = !DILocation(line: 3247, column: 7, scope: !16037)
!16039 = !DILocation(line: 3251, column: 11, scope: !15988)
!16040 = !DILocation(line: 3251, column: 3, scope: !15988)
!16041 = !DILocation(line: 3255, column: 6, scope: !16042)
!16042 = distinct !DILexicalBlock(scope: !16043, file: !3, line: 3255, column: 6)
!16043 = distinct !DILexicalBlock(scope: !16044, file: !3, line: 3254, column: 7)
!16044 = distinct !DILexicalBlock(scope: !15988, file: !3, line: 3252, column: 5)
!16045 = !DILocation(line: 3255, column: 27, scope: !16042)
!16046 = !DILocation(line: 3256, column: 6, scope: !16042)
!16047 = !DILocation(line: 3256, column: 11, scope: !16042)
!16048 = !DILocation(line: 3257, column: 11, scope: !16042)
!16049 = !DILocation(line: 3257, column: 14, scope: !16042)
!16050 = !DILocation(line: 3258, column: 6, scope: !16042)
!16051 = !DILocation(line: 3258, column: 11, scope: !16042)
!16052 = !DILocation(line: 3259, column: 11, scope: !16042)
!16053 = !DILocation(line: 3259, column: 14, scope: !16042)
!16054 = !DILocation(line: 3255, column: 6, scope: !16043)
!16055 = !DILocation(line: 3261, column: 6, scope: !16056)
!16056 = distinct !DILexicalBlock(scope: !16042, file: !3, line: 3260, column: 4)
!16057 = !DILocation(line: 3262, column: 26, scope: !16056)
!16058 = !DILocation(line: 3262, column: 6, scope: !16056)
!16059 = !DILocation(line: 3263, column: 26, scope: !16056)
!16060 = !DILocation(line: 3263, column: 6, scope: !16056)
!16061 = !DILocation(line: 3264, column: 26, scope: !16056)
!16062 = !DILocation(line: 3264, column: 6, scope: !16056)
!16063 = !DILocation(line: 3265, column: 6, scope: !16056)
!16064 = !DILocation(line: 3268, column: 2, scope: !16043)
!16065 = !DILocation(line: 3278, column: 8, scope: !16066)
!16066 = distinct !DILexicalBlock(scope: !16067, file: !3, line: 3278, column: 6)
!16067 = distinct !DILexicalBlock(scope: !16044, file: !3, line: 3275, column: 7)
!16068 = !DILocation(line: 3279, column: 7, scope: !16066)
!16069 = !DILocation(line: 3279, column: 11, scope: !16066)
!16070 = !DILocation(line: 3280, column: 7, scope: !16066)
!16071 = !DILocation(line: 3280, column: 12, scope: !16066)
!16072 = !DILocation(line: 3280, column: 34, scope: !16066)
!16073 = !DILocation(line: 3281, column: 5, scope: !16066)
!16074 = !DILocation(line: 3281, column: 8, scope: !16066)
!16075 = !DILocation(line: 3282, column: 6, scope: !16066)
!16076 = !DILocation(line: 3282, column: 11, scope: !16066)
!16077 = !DILocation(line: 3284, column: 3, scope: !16066)
!16078 = !DILocation(line: 3284, column: 8, scope: !16066)
!16079 = !DILocation(line: 3284, column: 30, scope: !16066)
!16080 = !DILocation(line: 3285, column: 8, scope: !16066)
!16081 = !DILocation(line: 3285, column: 11, scope: !16066)
!16082 = !DILocation(line: 3286, column: 8, scope: !16066)
!16083 = !DILocation(line: 3286, column: 11, scope: !16066)
!16084 = !DILocation(line: 3286, column: 33, scope: !16066)
!16085 = !DILocation(line: 3287, column: 8, scope: !16066)
!16086 = !DILocation(line: 3287, column: 11, scope: !16066)
!16087 = !DILocation(line: 3288, column: 6, scope: !16066)
!16088 = !DILocation(line: 3288, column: 37, scope: !16066)
!16089 = !DILocation(line: 3288, column: 47, scope: !16066)
!16090 = !DILocation(line: 3288, column: 10, scope: !16066)
!16091 = !DILocation(line: 3278, column: 6, scope: !16067)
!16092 = !DILocation(line: 3290, column: 6, scope: !16093)
!16093 = distinct !DILexicalBlock(scope: !16066, file: !3, line: 3289, column: 4)
!16094 = !DILocation(line: 3291, column: 26, scope: !16093)
!16095 = !DILocation(line: 3291, column: 6, scope: !16093)
!16096 = !DILocation(line: 3292, column: 26, scope: !16093)
!16097 = !DILocation(line: 3292, column: 6, scope: !16093)
!16098 = !DILocation(line: 3293, column: 26, scope: !16093)
!16099 = !DILocation(line: 3293, column: 6, scope: !16093)
!16100 = !DILocation(line: 3294, column: 6, scope: !16093)
!16101 = !DILocation(line: 3297, column: 2, scope: !16067)
!16102 = !DILocation(line: 3303, column: 6, scope: !16103)
!16103 = distinct !DILexicalBlock(scope: !16104, file: !3, line: 3303, column: 6)
!16104 = distinct !DILexicalBlock(scope: !16044, file: !3, line: 3302, column: 7)
!16105 = !DILocation(line: 3303, column: 28, scope: !16103)
!16106 = !DILocation(line: 3304, column: 6, scope: !16103)
!16107 = !DILocation(line: 3304, column: 11, scope: !16103)
!16108 = !DILocation(line: 3305, column: 4, scope: !16103)
!16109 = !DILocation(line: 3305, column: 7, scope: !16103)
!16110 = !DILocation(line: 3306, column: 4, scope: !16103)
!16111 = !DILocation(line: 3306, column: 7, scope: !16103)
!16112 = !DILocation(line: 3307, column: 6, scope: !16103)
!16113 = !DILocation(line: 3307, column: 11, scope: !16103)
!16114 = !DILocation(line: 3308, column: 3, scope: !16103)
!16115 = !DILocation(line: 3308, column: 7, scope: !16103)
!16116 = !DILocation(line: 3308, column: 29, scope: !16103)
!16117 = !DILocation(line: 3309, column: 7, scope: !16103)
!16118 = !DILocation(line: 3309, column: 11, scope: !16103)
!16119 = !DILocation(line: 3310, column: 6, scope: !16103)
!16120 = !DILocation(line: 3310, column: 37, scope: !16103)
!16121 = !DILocation(line: 3310, column: 47, scope: !16103)
!16122 = !DILocation(line: 3310, column: 10, scope: !16103)
!16123 = !DILocation(line: 3303, column: 6, scope: !16104)
!16124 = !DILocation(line: 3312, column: 6, scope: !16125)
!16125 = distinct !DILexicalBlock(scope: !16103, file: !3, line: 3311, column: 4)
!16126 = !DILocation(line: 3313, column: 26, scope: !16125)
!16127 = !DILocation(line: 3313, column: 6, scope: !16125)
!16128 = !DILocation(line: 3314, column: 26, scope: !16125)
!16129 = !DILocation(line: 3314, column: 6, scope: !16125)
!16130 = !DILocation(line: 3315, column: 26, scope: !16125)
!16131 = !DILocation(line: 3315, column: 6, scope: !16125)
!16132 = !DILocation(line: 3316, column: 6, scope: !16125)
!16133 = !DILocation(line: 3320, column: 6, scope: !16134)
!16134 = distinct !DILexicalBlock(scope: !16104, file: !3, line: 3320, column: 6)
!16135 = !DILocation(line: 3321, column: 6, scope: !16134)
!16136 = !DILocation(line: 3321, column: 10, scope: !16134)
!16137 = !DILocation(line: 3321, column: 27, scope: !16134)
!16138 = !DILocation(line: 3322, column: 3, scope: !16134)
!16139 = !DILocation(line: 3322, column: 46, scope: !16134)
!16140 = !DILocation(line: 3323, column: 9, scope: !16134)
!16141 = !DILocation(line: 3322, column: 7, scope: !16134)
!16142 = !DILocation(line: 3320, column: 6, scope: !16104)
!16143 = !DILocation(line: 3325, column: 6, scope: !16144)
!16144 = distinct !DILexicalBlock(scope: !16134, file: !3, line: 3324, column: 4)
!16145 = !DILocation(line: 3326, column: 6, scope: !16144)
!16146 = !DILocation(line: 3329, column: 2, scope: !16104)
!16147 = !DILocation(line: 3337, column: 6, scope: !16148)
!16148 = distinct !DILexicalBlock(scope: !16149, file: !3, line: 3337, column: 6)
!16149 = distinct !DILexicalBlock(scope: !16044, file: !3, line: 3333, column: 7)
!16150 = !DILocation(line: 3337, column: 27, scope: !16148)
!16151 = !DILocation(line: 3338, column: 6, scope: !16148)
!16152 = !DILocation(line: 3338, column: 9, scope: !16148)
!16153 = !DILocation(line: 3337, column: 6, scope: !16149)
!16154 = !DILocation(line: 3340, column: 10, scope: !16155)
!16155 = distinct !DILexicalBlock(scope: !16156, file: !3, line: 3340, column: 10)
!16156 = distinct !DILexicalBlock(scope: !16148, file: !3, line: 3339, column: 4)
!16157 = !DILocation(line: 3340, column: 32, scope: !16155)
!16158 = !DILocation(line: 3341, column: 3, scope: !16155)
!16159 = !DILocation(line: 3341, column: 6, scope: !16155)
!16160 = !DILocation(line: 3341, column: 28, scope: !16155)
!16161 = !DILocation(line: 3340, column: 10, scope: !16156)
!16162 = !DILocation(line: 3343, column: 3, scope: !16163)
!16163 = distinct !DILexicalBlock(scope: !16155, file: !3, line: 3342, column: 8)
!16164 = !DILocation(line: 3344, column: 3, scope: !16163)
!16165 = !DILocation(line: 3346, column: 17, scope: !16156)
!16166 = !DILocation(line: 3346, column: 15, scope: !16156)
!16167 = !DILocation(line: 3347, column: 18, scope: !16156)
!16168 = !DILocation(line: 3347, column: 16, scope: !16156)
!16169 = !DILocation(line: 3348, column: 18, scope: !16156)
!16170 = !DILocation(line: 3348, column: 16, scope: !16156)
!16171 = !DILocation(line: 3351, column: 10, scope: !16172)
!16172 = distinct !DILexicalBlock(scope: !16156, file: !3, line: 3351, column: 10)
!16173 = !DILocation(line: 3351, column: 10, scope: !16156)
!16174 = !DILocalVariable(name: "tem", scope: !16175, file: !3, line: 3353, type: !2553)
!16175 = distinct !DILexicalBlock(scope: !16172, file: !3, line: 3352, column: 8)
!16176 = !DILocation(line: 3353, column: 8, scope: !16175)
!16177 = !DILocation(line: 3353, column: 14, scope: !16175)
!16178 = !DILocation(line: 3354, column: 15, scope: !16175)
!16179 = !DILocation(line: 3354, column: 13, scope: !16175)
!16180 = !DILocation(line: 3355, column: 15, scope: !16175)
!16181 = !DILocation(line: 3355, column: 13, scope: !16175)
!16182 = !DILocation(line: 3356, column: 8, scope: !16175)
!16183 = !DILocation(line: 3357, column: 6, scope: !16156)
!16184 = !DILocation(line: 3359, column: 7, scope: !16149)
!16185 = !DILocation(line: 3363, column: 6, scope: !16186)
!16186 = distinct !DILexicalBlock(scope: !16187, file: !3, line: 3363, column: 6)
!16187 = distinct !DILexicalBlock(scope: !16044, file: !3, line: 3362, column: 7)
!16188 = !DILocation(line: 3364, column: 6, scope: !16186)
!16189 = !DILocation(line: 3364, column: 9, scope: !16186)
!16190 = !DILocation(line: 3365, column: 6, scope: !16186)
!16191 = !DILocation(line: 3365, column: 9, scope: !16186)
!16192 = !DILocation(line: 3363, column: 6, scope: !16187)
!16193 = !DILocation(line: 3367, column: 6, scope: !16194)
!16194 = distinct !DILexicalBlock(scope: !16186, file: !3, line: 3366, column: 4)
!16195 = !DILocation(line: 3368, column: 6, scope: !16194)
!16196 = !DILocation(line: 3372, column: 2, scope: !16187)
!16197 = !DILocation(line: 3376, column: 7, scope: !16044)
!16198 = !DILabel(scope: !16199, name: "do_pointer_plus_expr_check", file: !3, line: 3377)
!16199 = distinct !DILexicalBlock(scope: !16044, file: !3, line: 3376, column: 7)
!16200 = !DILocation(line: 3377, column: 1, scope: !16199)
!16201 = !DILocation(line: 3378, column: 7, scope: !16202)
!16202 = distinct !DILexicalBlock(scope: !16199, file: !3, line: 3378, column: 6)
!16203 = !DILocation(line: 3379, column: 6, scope: !16202)
!16204 = !DILocation(line: 3379, column: 37, scope: !16202)
!16205 = !DILocation(line: 3379, column: 47, scope: !16202)
!16206 = !DILocation(line: 3379, column: 10, scope: !16202)
!16207 = !DILocation(line: 3380, column: 6, scope: !16202)
!16208 = !DILocation(line: 3380, column: 37, scope: !16202)
!16209 = !DILocation(line: 3380, column: 47, scope: !16202)
!16210 = !DILocation(line: 3380, column: 10, scope: !16202)
!16211 = !DILocation(line: 3378, column: 6, scope: !16199)
!16212 = !DILocation(line: 3382, column: 6, scope: !16213)
!16213 = distinct !DILexicalBlock(scope: !16202, file: !3, line: 3381, column: 4)
!16214 = !DILocation(line: 3383, column: 26, scope: !16213)
!16215 = !DILocation(line: 3383, column: 6, scope: !16213)
!16216 = !DILocation(line: 3384, column: 26, scope: !16213)
!16217 = !DILocation(line: 3384, column: 6, scope: !16213)
!16218 = !DILocation(line: 3385, column: 26, scope: !16213)
!16219 = !DILocation(line: 3385, column: 6, scope: !16213)
!16220 = !DILocation(line: 3386, column: 6, scope: !16213)
!16221 = !DILocation(line: 3389, column: 2, scope: !16199)
!16222 = !DILocation(line: 3394, column: 7, scope: !16044)
!16223 = !DILocation(line: 3401, column: 7, scope: !16224)
!16224 = distinct !DILexicalBlock(scope: !16225, file: !3, line: 3401, column: 6)
!16225 = distinct !DILexicalBlock(scope: !16044, file: !3, line: 3399, column: 7)
!16226 = !DILocation(line: 3402, column: 6, scope: !16224)
!16227 = !DILocation(line: 3402, column: 10, scope: !16224)
!16228 = !DILocation(line: 3403, column: 6, scope: !16224)
!16229 = !DILocation(line: 3403, column: 10, scope: !16224)
!16230 = !DILocation(line: 3401, column: 6, scope: !16225)
!16231 = !DILocation(line: 3405, column: 6, scope: !16232)
!16232 = distinct !DILexicalBlock(scope: !16224, file: !3, line: 3404, column: 4)
!16233 = !DILocation(line: 3406, column: 26, scope: !16232)
!16234 = !DILocation(line: 3406, column: 6, scope: !16232)
!16235 = !DILocation(line: 3407, column: 26, scope: !16232)
!16236 = !DILocation(line: 3407, column: 6, scope: !16232)
!16237 = !DILocation(line: 3408, column: 26, scope: !16232)
!16238 = !DILocation(line: 3408, column: 6, scope: !16232)
!16239 = !DILocation(line: 3409, column: 6, scope: !16232)
!16240 = !DILocation(line: 3412, column: 2, scope: !16225)
!16241 = !DILocation(line: 3431, column: 40, scope: !16044)
!16242 = !DILocation(line: 3431, column: 50, scope: !16044)
!16243 = !DILocation(line: 3431, column: 56, scope: !16044)
!16244 = !DILocation(line: 3431, column: 14, scope: !16044)
!16245 = !DILocation(line: 3431, column: 7, scope: !16044)
!16246 = !DILocation(line: 3445, column: 7, scope: !16044)
!16247 = !DILocation(line: 3464, column: 7, scope: !16044)
!16248 = !DILocation(line: 3467, column: 7, scope: !16044)
!16249 = !DILocation(line: 3468, column: 5, scope: !16044)
!16250 = !DILocation(line: 3470, column: 35, scope: !16251)
!16251 = distinct !DILexicalBlock(scope: !15988, file: !3, line: 3470, column: 7)
!16252 = !DILocation(line: 3470, column: 45, scope: !16251)
!16253 = !DILocation(line: 3470, column: 8, scope: !16251)
!16254 = !DILocation(line: 3471, column: 7, scope: !16251)
!16255 = !DILocation(line: 3471, column: 38, scope: !16251)
!16256 = !DILocation(line: 3471, column: 48, scope: !16251)
!16257 = !DILocation(line: 3471, column: 11, scope: !16251)
!16258 = !DILocation(line: 3470, column: 7, scope: !15988)
!16259 = !DILocation(line: 3473, column: 7, scope: !16260)
!16260 = distinct !DILexicalBlock(scope: !16251, file: !3, line: 3472, column: 5)
!16261 = !DILocation(line: 3474, column: 27, scope: !16260)
!16262 = !DILocation(line: 3474, column: 7, scope: !16260)
!16263 = !DILocation(line: 3475, column: 27, scope: !16260)
!16264 = !DILocation(line: 3475, column: 7, scope: !16260)
!16265 = !DILocation(line: 3476, column: 27, scope: !16260)
!16266 = !DILocation(line: 3476, column: 7, scope: !16260)
!16267 = !DILocation(line: 3477, column: 7, scope: !16260)
!16268 = !DILocation(line: 3480, column: 3, scope: !15988)
!16269 = !DILocation(line: 3481, column: 1, scope: !15988)
!16270 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !581, file: !581, line: 1686, type: !16271, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16271 = !DISubroutineType(types: !16272)
!16272 = !{!902, !141}
!16273 = !DILocalVariable(name: "code", arg: 1, scope: !16270, file: !581, line: 1686, type: !141)
!16274 = !DILocation(line: 1686, column: 38, scope: !16270)
!16275 = !DILocation(line: 1688, column: 63, scope: !16270)
!16276 = !DILocation(line: 1688, column: 34, scope: !16270)
!16277 = !DILocation(line: 1688, column: 10, scope: !16270)
!16278 = !DILocation(line: 1688, column: 3, scope: !16270)
!16279 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !581, file: !581, line: 1815, type: !4560, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16280 = !DILocalVariable(name: "gs", arg: 1, scope: !16279, file: !581, line: 1815, type: !4543)
!16281 = !DILocation(line: 1815, column: 38, scope: !16279)
!16282 = !DILocalVariable(name: "code", scope: !16279, file: !581, line: 1817, type: !141)
!16283 = !DILocation(line: 1817, column: 18, scope: !16279)
!16284 = !DILocation(line: 1820, column: 28, scope: !16279)
!16285 = !DILocation(line: 1820, column: 10, scope: !16279)
!16286 = !DILocation(line: 1820, column: 8, scope: !16279)
!16287 = !DILocation(line: 1821, column: 29, scope: !16288)
!16288 = distinct !DILexicalBlock(scope: !16279, file: !581, line: 1821, column: 7)
!16289 = !DILocation(line: 1821, column: 7, scope: !16288)
!16290 = !DILocation(line: 1821, column: 35, scope: !16288)
!16291 = !DILocation(line: 1821, column: 7, scope: !16279)
!16292 = !DILocation(line: 1822, column: 12, scope: !16288)
!16293 = !DILocation(line: 1822, column: 10, scope: !16288)
!16294 = !DILocation(line: 1822, column: 5, scope: !16288)
!16295 = !DILocation(line: 1824, column: 10, scope: !16279)
!16296 = !DILocation(line: 1824, column: 3, scope: !16279)
!16297 = distinct !DISubprogram(name: "gimple_expr_code", scope: !581, file: !581, line: 1438, type: !4560, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16298 = !DILocalVariable(name: "stmt", arg: 1, scope: !16297, file: !581, line: 1438, type: !4543)
!16299 = !DILocation(line: 1438, column: 32, scope: !16297)
!16300 = !DILocalVariable(name: "code", scope: !16297, file: !581, line: 1440, type: !580)
!16301 = !DILocation(line: 1440, column: 20, scope: !16297)
!16302 = !DILocation(line: 1440, column: 40, scope: !16297)
!16303 = !DILocation(line: 1440, column: 27, scope: !16297)
!16304 = !DILocation(line: 1441, column: 7, scope: !16305)
!16305 = distinct !DILexicalBlock(scope: !16297, file: !581, line: 1441, column: 7)
!16306 = !DILocation(line: 1441, column: 12, scope: !16305)
!16307 = !DILocation(line: 1441, column: 29, scope: !16305)
!16308 = !DILocation(line: 1441, column: 32, scope: !16305)
!16309 = !DILocation(line: 1441, column: 37, scope: !16305)
!16310 = !DILocation(line: 1441, column: 7, scope: !16297)
!16311 = !DILocation(line: 1442, column: 29, scope: !16305)
!16312 = !DILocation(line: 1442, column: 35, scope: !16305)
!16313 = !DILocation(line: 1442, column: 42, scope: !16305)
!16314 = !DILocation(line: 1442, column: 5, scope: !16305)
!16315 = !DILocation(line: 1443, column: 12, scope: !16316)
!16316 = distinct !DILexicalBlock(scope: !16305, file: !581, line: 1443, column: 12)
!16317 = !DILocation(line: 1443, column: 17, scope: !16316)
!16318 = !DILocation(line: 1443, column: 12, scope: !16305)
!16319 = !DILocation(line: 1444, column: 5, scope: !16316)
!16320 = !DILocation(line: 1446, column: 5, scope: !16316)
!16321 = !DILocation(line: 1448, column: 5, scope: !16297)
!16322 = !DILocation(line: 1450, column: 1, scope: !16297)
!16323 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !581, file: !581, line: 1727, type: !4569, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16324 = !DILocalVariable(name: "gs", arg: 1, scope: !16323, file: !581, line: 1727, type: !4543)
!16325 = !DILocation(line: 1727, column: 34, scope: !16323)
!16326 = !DILocation(line: 1730, column: 21, scope: !16323)
!16327 = !DILocation(line: 1730, column: 10, scope: !16323)
!16328 = !DILocation(line: 1730, column: 3, scope: !16323)
!16329 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !581, file: !581, line: 1694, type: !4569, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16330 = !DILocalVariable(name: "gs", arg: 1, scope: !16329, file: !581, line: 1694, type: !4543)
!16331 = !DILocation(line: 1694, column: 33, scope: !16329)
!16332 = !DILocation(line: 1697, column: 21, scope: !16329)
!16333 = !DILocation(line: 1697, column: 10, scope: !16329)
!16334 = !DILocation(line: 1697, column: 3, scope: !16329)
!16335 = distinct !DISubprogram(name: "handled_component_p", scope: !142, file: !142, line: 4551, type: !6056, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16336 = !DILocalVariable(name: "t", arg: 1, scope: !16335, file: !142, line: 4551, type: !6058)
!16337 = !DILocation(line: 4551, column: 33, scope: !16335)
!16338 = !DILocation(line: 4553, column: 11, scope: !16335)
!16339 = !DILocation(line: 4553, column: 3, scope: !16335)
!16340 = !DILocation(line: 4562, column: 7, scope: !16341)
!16341 = distinct !DILexicalBlock(scope: !16335, file: !142, line: 4554, column: 5)
!16342 = !DILocation(line: 4565, column: 7, scope: !16341)
!16343 = !DILocation(line: 4567, column: 1, scope: !16335)
!16344 = distinct !DISubprogram(name: "verify_types_in_gimple_reference", scope: !3, file: !3, line: 2805, type: !16345, scopeLine: 2806, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16345 = !DISubroutineType(types: !16346)
!16346 = !{!2672, !2553, !2672}
!16347 = !DILocalVariable(name: "expr", arg: 1, scope: !16344, file: !3, line: 2805, type: !2553)
!16348 = !DILocation(line: 2805, column: 40, scope: !16344)
!16349 = !DILocalVariable(name: "require_lvalue", arg: 2, scope: !16344, file: !3, line: 2805, type: !2672)
!16350 = !DILocation(line: 2805, column: 51, scope: !16344)
!16351 = !DILocation(line: 2807, column: 3, scope: !16344)
!16352 = !DILocation(line: 2807, column: 31, scope: !16344)
!16353 = !DILocation(line: 2807, column: 10, scope: !16344)
!16354 = !DILocalVariable(name: "op", scope: !16355, file: !3, line: 2809, type: !2553)
!16355 = distinct !DILexicalBlock(scope: !16344, file: !3, line: 2808, column: 5)
!16356 = !DILocation(line: 2809, column: 12, scope: !16355)
!16357 = !DILocation(line: 2809, column: 17, scope: !16355)
!16358 = !DILocation(line: 2811, column: 11, scope: !16359)
!16359 = distinct !DILexicalBlock(scope: !16355, file: !3, line: 2811, column: 11)
!16360 = !DILocation(line: 2811, column: 28, scope: !16359)
!16361 = !DILocation(line: 2812, column: 4, scope: !16359)
!16362 = !DILocation(line: 2812, column: 7, scope: !16359)
!16363 = !DILocation(line: 2812, column: 24, scope: !16359)
!16364 = !DILocation(line: 2811, column: 11, scope: !16355)
!16365 = !DILocation(line: 2814, column: 24, scope: !16366)
!16366 = distinct !DILexicalBlock(scope: !16367, file: !3, line: 2814, column: 8)
!16367 = distinct !DILexicalBlock(scope: !16359, file: !3, line: 2813, column: 2)
!16368 = !DILocation(line: 2814, column: 9, scope: !16366)
!16369 = !DILocation(line: 2815, column: 8, scope: !16366)
!16370 = !DILocation(line: 2815, column: 12, scope: !16366)
!16371 = !DILocation(line: 2816, column: 5, scope: !16366)
!16372 = !DILocation(line: 2816, column: 24, scope: !16366)
!16373 = !DILocation(line: 2816, column: 9, scope: !16366)
!16374 = !DILocation(line: 2817, column: 8, scope: !16366)
!16375 = !DILocation(line: 2817, column: 12, scope: !16366)
!16376 = !DILocation(line: 2818, column: 5, scope: !16366)
!16377 = !DILocation(line: 2818, column: 24, scope: !16366)
!16378 = !DILocation(line: 2818, column: 9, scope: !16366)
!16379 = !DILocation(line: 2814, column: 8, scope: !16367)
!16380 = !DILocation(line: 2820, column: 8, scope: !16381)
!16381 = distinct !DILexicalBlock(scope: !16366, file: !3, line: 2819, column: 6)
!16382 = !DILocation(line: 2821, column: 28, scope: !16381)
!16383 = !DILocation(line: 2821, column: 8, scope: !16381)
!16384 = !DILocation(line: 2822, column: 8, scope: !16381)
!16385 = !DILocation(line: 2824, column: 2, scope: !16367)
!16386 = !DILocation(line: 2827, column: 11, scope: !16387)
!16387 = distinct !DILexicalBlock(scope: !16355, file: !3, line: 2827, column: 11)
!16388 = !DILocation(line: 2827, column: 28, scope: !16387)
!16389 = !DILocation(line: 2828, column: 4, scope: !16387)
!16390 = !DILocation(line: 2828, column: 35, scope: !16387)
!16391 = !DILocation(line: 2829, column: 7, scope: !16387)
!16392 = !DILocation(line: 2828, column: 8, scope: !16387)
!16393 = !DILocation(line: 2827, column: 11, scope: !16355)
!16394 = !DILocation(line: 2831, column: 4, scope: !16395)
!16395 = distinct !DILexicalBlock(scope: !16387, file: !3, line: 2830, column: 2)
!16396 = !DILocation(line: 2832, column: 24, scope: !16395)
!16397 = !DILocation(line: 2832, column: 4, scope: !16395)
!16398 = !DILocation(line: 2833, column: 24, scope: !16395)
!16399 = !DILocation(line: 2833, column: 4, scope: !16395)
!16400 = !DILocation(line: 2834, column: 4, scope: !16395)
!16401 = !DILocation(line: 2836, column: 11, scope: !16402)
!16402 = distinct !DILexicalBlock(scope: !16355, file: !3, line: 2836, column: 11)
!16403 = !DILocation(line: 2836, column: 28, scope: !16402)
!16404 = !DILocation(line: 2837, column: 4, scope: !16402)
!16405 = !DILocation(line: 2837, column: 35, scope: !16402)
!16406 = !DILocation(line: 2838, column: 7, scope: !16402)
!16407 = !DILocation(line: 2837, column: 8, scope: !16402)
!16408 = !DILocation(line: 2836, column: 11, scope: !16355)
!16409 = !DILocation(line: 2840, column: 4, scope: !16410)
!16410 = distinct !DILexicalBlock(scope: !16402, file: !3, line: 2839, column: 2)
!16411 = !DILocation(line: 2841, column: 24, scope: !16410)
!16412 = !DILocation(line: 2841, column: 4, scope: !16410)
!16413 = !DILocation(line: 2842, column: 24, scope: !16410)
!16414 = !DILocation(line: 2842, column: 4, scope: !16410)
!16415 = !DILocation(line: 2843, column: 4, scope: !16410)
!16416 = !DILocation(line: 2846, column: 12, scope: !16417)
!16417 = distinct !DILexicalBlock(scope: !16355, file: !3, line: 2846, column: 11)
!16418 = !DILocation(line: 2846, column: 29, scope: !16417)
!16419 = !DILocation(line: 2847, column: 5, scope: !16417)
!16420 = !DILocation(line: 2847, column: 8, scope: !16417)
!16421 = !DILocation(line: 2847, column: 25, scope: !16417)
!16422 = !DILocation(line: 2848, column: 4, scope: !16417)
!16423 = !DILocation(line: 2848, column: 35, scope: !16417)
!16424 = !DILocation(line: 2849, column: 7, scope: !16417)
!16425 = !DILocation(line: 2848, column: 8, scope: !16417)
!16426 = !DILocation(line: 2846, column: 11, scope: !16355)
!16427 = !DILocation(line: 2851, column: 4, scope: !16428)
!16428 = distinct !DILexicalBlock(scope: !16417, file: !3, line: 2850, column: 2)
!16429 = !DILocation(line: 2852, column: 24, scope: !16428)
!16430 = !DILocation(line: 2852, column: 4, scope: !16428)
!16431 = !DILocation(line: 2853, column: 24, scope: !16428)
!16432 = !DILocation(line: 2853, column: 4, scope: !16428)
!16433 = !DILocation(line: 2854, column: 4, scope: !16428)
!16434 = !DILocation(line: 2857, column: 11, scope: !16435)
!16435 = distinct !DILexicalBlock(scope: !16355, file: !3, line: 2857, column: 11)
!16436 = !DILocation(line: 2857, column: 28, scope: !16435)
!16437 = !DILocation(line: 2858, column: 4, scope: !16435)
!16438 = !DILocation(line: 2858, column: 35, scope: !16435)
!16439 = !DILocation(line: 2859, column: 7, scope: !16435)
!16440 = !DILocation(line: 2858, column: 8, scope: !16435)
!16441 = !DILocation(line: 2857, column: 11, scope: !16355)
!16442 = !DILocation(line: 2861, column: 4, scope: !16443)
!16443 = distinct !DILexicalBlock(scope: !16435, file: !3, line: 2860, column: 2)
!16444 = !DILocation(line: 2862, column: 24, scope: !16443)
!16445 = !DILocation(line: 2862, column: 4, scope: !16443)
!16446 = !DILocation(line: 2863, column: 24, scope: !16443)
!16447 = !DILocation(line: 2863, column: 4, scope: !16443)
!16448 = !DILocation(line: 2864, column: 4, scope: !16443)
!16449 = !DILocation(line: 2867, column: 11, scope: !16450)
!16450 = distinct !DILexicalBlock(scope: !16355, file: !3, line: 2867, column: 11)
!16451 = !DILocation(line: 2867, column: 28, scope: !16450)
!16452 = !DILocation(line: 2867, column: 11, scope: !16355)
!16453 = !DILocation(line: 2874, column: 8, scope: !16454)
!16454 = distinct !DILexicalBlock(scope: !16455, file: !3, line: 2874, column: 8)
!16455 = distinct !DILexicalBlock(scope: !16450, file: !3, line: 2868, column: 2)
!16456 = !DILocation(line: 2875, column: 8, scope: !16454)
!16457 = !DILocation(line: 2875, column: 12, scope: !16454)
!16458 = !DILocation(line: 2875, column: 27, scope: !16454)
!16459 = !DILocation(line: 2876, column: 5, scope: !16454)
!16460 = !DILocation(line: 2876, column: 33, scope: !16454)
!16461 = !DILocation(line: 2876, column: 8, scope: !16454)
!16462 = !DILocation(line: 2874, column: 8, scope: !16455)
!16463 = !DILocation(line: 2878, column: 8, scope: !16464)
!16464 = distinct !DILexicalBlock(scope: !16454, file: !3, line: 2877, column: 6)
!16465 = !DILocation(line: 2879, column: 28, scope: !16464)
!16466 = !DILocation(line: 2879, column: 8, scope: !16464)
!16467 = !DILocation(line: 2880, column: 8, scope: !16464)
!16468 = !DILocation(line: 2882, column: 35, scope: !16469)
!16469 = distinct !DILexicalBlock(scope: !16454, file: !3, line: 2882, column: 13)
!16470 = !DILocation(line: 2882, column: 14, scope: !16469)
!16471 = !DILocation(line: 2882, column: 13, scope: !16454)
!16472 = !DILocation(line: 2883, column: 6, scope: !16469)
!16473 = !DILocation(line: 2884, column: 2, scope: !16455)
!16474 = !DILocation(line: 2886, column: 14, scope: !16355)
!16475 = !DILocation(line: 2886, column: 12, scope: !16355)
!16476 = distinct !{!16476, !16351, !16477}
!16477 = !DILocation(line: 2887, column: 5, scope: !16344)
!16478 = !DILocation(line: 2889, column: 12, scope: !16344)
!16479 = !DILocation(line: 2889, column: 27, scope: !16344)
!16480 = !DILocation(line: 2889, column: 56, scope: !16344)
!16481 = !DILocation(line: 2889, column: 31, scope: !16344)
!16482 = !DILocation(line: 2890, column: 4, scope: !16344)
!16483 = !DILocation(line: 2890, column: 40, scope: !16344)
!16484 = !DILocation(line: 2890, column: 7, scope: !16344)
!16485 = !DILocation(line: 0, scope: !16344)
!16486 = !DILocation(line: 2889, column: 10, scope: !16344)
!16487 = !DILocation(line: 2889, column: 3, scope: !16344)
!16488 = !DILocation(line: 2891, column: 1, scope: !16344)
!16489 = distinct !DISubprogram(name: "one_pointer_to_useless_type_conversion_p", scope: !3, file: !3, line: 2897, type: !16490, scopeLine: 2898, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16490 = !DISubroutineType(types: !16491)
!16491 = !{!2672, !2553, !2553}
!16492 = !DILocalVariable(name: "dest", arg: 1, scope: !16489, file: !3, line: 2897, type: !2553)
!16493 = !DILocation(line: 2897, column: 48, scope: !16489)
!16494 = !DILocalVariable(name: "src_obj", arg: 2, scope: !16489, file: !3, line: 2897, type: !2553)
!16495 = !DILocation(line: 2897, column: 59, scope: !16489)
!16496 = !DILocalVariable(name: "src", scope: !16489, file: !3, line: 2899, type: !2553)
!16497 = !DILocation(line: 2899, column: 8, scope: !16489)
!16498 = !DILocation(line: 2901, column: 8, scope: !16499)
!16499 = distinct !DILexicalBlock(scope: !16489, file: !3, line: 2901, column: 7)
!16500 = !DILocation(line: 2901, column: 7, scope: !16489)
!16501 = !DILocation(line: 2902, column: 5, scope: !16499)
!16502 = !DILocation(line: 2904, column: 14, scope: !16503)
!16503 = distinct !DILexicalBlock(scope: !16489, file: !3, line: 2904, column: 3)
!16504 = !DILocation(line: 2904, column: 12, scope: !16503)
!16505 = !DILocation(line: 2904, column: 8, scope: !16503)
!16506 = !DILocation(line: 2904, column: 41, scope: !16507)
!16507 = distinct !DILexicalBlock(scope: !16503, file: !3, line: 2904, column: 3)
!16508 = !DILocation(line: 2904, column: 3, scope: !16503)
!16509 = !DILocation(line: 2905, column: 36, scope: !16510)
!16510 = distinct !DILexicalBlock(scope: !16507, file: !3, line: 2905, column: 9)
!16511 = !DILocation(line: 2905, column: 42, scope: !16510)
!16512 = !DILocation(line: 2905, column: 9, scope: !16510)
!16513 = !DILocation(line: 2905, column: 9, scope: !16507)
!16514 = !DILocation(line: 2906, column: 7, scope: !16510)
!16515 = !DILocation(line: 2905, column: 45, scope: !16510)
!16516 = !DILocation(line: 2904, column: 52, scope: !16507)
!16517 = !DILocation(line: 2904, column: 50, scope: !16507)
!16518 = !DILocation(line: 2904, column: 3, scope: !16507)
!16519 = distinct !{!16519, !16508, !16520}
!16520 = !DILocation(line: 2906, column: 14, scope: !16503)
!16521 = !DILocation(line: 2908, column: 3, scope: !16489)
!16522 = !DILocation(line: 2909, column: 1, scope: !16489)
!16523 = distinct !DISubprogram(name: "verify_types_in_gimple_min_lval", scope: !3, file: !3, line: 2763, type: !7259, scopeLine: 2764, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16524 = !DILocalVariable(name: "expr", arg: 1, scope: !16523, file: !3, line: 2763, type: !2553)
!16525 = !DILocation(line: 2763, column: 39, scope: !16523)
!16526 = !DILocalVariable(name: "op", scope: !16523, file: !3, line: 2765, type: !2553)
!16527 = !DILocation(line: 2765, column: 8, scope: !16523)
!16528 = !DILocation(line: 2767, column: 21, scope: !16529)
!16529 = distinct !DILexicalBlock(scope: !16523, file: !3, line: 2767, column: 7)
!16530 = !DILocation(line: 2767, column: 7, scope: !16529)
!16531 = !DILocation(line: 2767, column: 7, scope: !16523)
!16532 = !DILocation(line: 2768, column: 5, scope: !16529)
!16533 = !DILocation(line: 2770, column: 8, scope: !16534)
!16534 = distinct !DILexicalBlock(scope: !16523, file: !3, line: 2770, column: 7)
!16535 = !DILocation(line: 2771, column: 7, scope: !16534)
!16536 = !DILocation(line: 2771, column: 10, scope: !16534)
!16537 = !DILocation(line: 2771, column: 27, scope: !16534)
!16538 = !DILocation(line: 2770, column: 7, scope: !16523)
!16539 = !DILocation(line: 2773, column: 7, scope: !16540)
!16540 = distinct !DILexicalBlock(scope: !16534, file: !3, line: 2772, column: 5)
!16541 = !DILocation(line: 2774, column: 7, scope: !16540)
!16542 = !DILocation(line: 2778, column: 7, scope: !16543)
!16543 = distinct !DILexicalBlock(scope: !16523, file: !3, line: 2778, column: 7)
!16544 = !DILocation(line: 2778, column: 24, scope: !16543)
!16545 = !DILocation(line: 2778, column: 7, scope: !16523)
!16546 = !DILocation(line: 2779, column: 5, scope: !16543)
!16547 = !DILocation(line: 2781, column: 8, scope: !16523)
!16548 = !DILocation(line: 2781, column: 6, scope: !16523)
!16549 = !DILocation(line: 2782, column: 23, scope: !16550)
!16550 = distinct !DILexicalBlock(scope: !16523, file: !3, line: 2782, column: 7)
!16551 = !DILocation(line: 2782, column: 8, scope: !16550)
!16552 = !DILocation(line: 2782, column: 7, scope: !16523)
!16553 = !DILocation(line: 2784, column: 7, scope: !16554)
!16554 = distinct !DILexicalBlock(scope: !16550, file: !3, line: 2783, column: 5)
!16555 = !DILocation(line: 2785, column: 27, scope: !16554)
!16556 = !DILocation(line: 2785, column: 7, scope: !16554)
!16557 = !DILocation(line: 2786, column: 7, scope: !16554)
!16558 = !DILocation(line: 2788, column: 35, scope: !16559)
!16559 = distinct !DILexicalBlock(scope: !16523, file: !3, line: 2788, column: 7)
!16560 = !DILocation(line: 2789, column: 7, scope: !16559)
!16561 = !DILocation(line: 2788, column: 8, scope: !16559)
!16562 = !DILocation(line: 2788, column: 7, scope: !16523)
!16563 = !DILocation(line: 2791, column: 7, scope: !16564)
!16564 = distinct !DILexicalBlock(scope: !16559, file: !3, line: 2790, column: 5)
!16565 = !DILocation(line: 2792, column: 27, scope: !16564)
!16566 = !DILocation(line: 2792, column: 7, scope: !16564)
!16567 = !DILocation(line: 2793, column: 27, scope: !16564)
!16568 = !DILocation(line: 2793, column: 7, scope: !16564)
!16569 = !DILocation(line: 2794, column: 7, scope: !16564)
!16570 = !DILocation(line: 2797, column: 3, scope: !16523)
!16571 = !DILocation(line: 2798, column: 1, scope: !16523)
!16572 = distinct !DISubprogram(name: "valid_fixed_convert_types_p", scope: !3, file: !3, line: 2915, type: !16490, scopeLine: 2916, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16573 = !DILocalVariable(name: "type1", arg: 1, scope: !16572, file: !3, line: 2915, type: !2553)
!16574 = !DILocation(line: 2915, column: 35, scope: !16572)
!16575 = !DILocalVariable(name: "type2", arg: 2, scope: !16572, file: !3, line: 2915, type: !2553)
!16576 = !DILocation(line: 2915, column: 47, scope: !16572)
!16577 = !DILocation(line: 2917, column: 11, scope: !16572)
!16578 = !DILocation(line: 2918, column: 4, scope: !16572)
!16579 = !DILocation(line: 2918, column: 8, scope: !16572)
!16580 = !DILocation(line: 2919, column: 8, scope: !16572)
!16581 = !DILocation(line: 2919, column: 11, scope: !16572)
!16582 = !DILocation(line: 2920, column: 8, scope: !16572)
!16583 = !DILocation(line: 2920, column: 11, scope: !16572)
!16584 = !DILocation(line: 0, scope: !16572)
!16585 = !DILocation(line: 2917, column: 10, scope: !16572)
!16586 = !DILocation(line: 2917, column: 3, scope: !16572)
!16587 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !581, file: !581, line: 1759, type: !4569, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16588 = !DILocalVariable(name: "gs", arg: 1, scope: !16587, file: !581, line: 1759, type: !4543)
!16589 = !DILocation(line: 1759, column: 34, scope: !16587)
!16590 = !DILocation(line: 1763, column: 23, scope: !16591)
!16591 = distinct !DILexicalBlock(scope: !16587, file: !581, line: 1763, column: 7)
!16592 = !DILocation(line: 1763, column: 7, scope: !16591)
!16593 = !DILocation(line: 1763, column: 27, scope: !16591)
!16594 = !DILocation(line: 1763, column: 7, scope: !16587)
!16595 = !DILocation(line: 1764, column: 23, scope: !16591)
!16596 = !DILocation(line: 1764, column: 12, scope: !16591)
!16597 = !DILocation(line: 1764, column: 5, scope: !16591)
!16598 = !DILocation(line: 1766, column: 5, scope: !16591)
!16599 = !DILocation(line: 1767, column: 1, scope: !16587)
!16600 = distinct !DISubprogram(name: "gimple_call_fn", scope: !581, file: !581, line: 1911, type: !4569, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16601 = !DILocalVariable(name: "gs", arg: 1, scope: !16600, file: !581, line: 1911, type: !4543)
!16602 = !DILocation(line: 1911, column: 30, scope: !16600)
!16603 = !DILocation(line: 1914, column: 21, scope: !16600)
!16604 = !DILocation(line: 1914, column: 10, scope: !16600)
!16605 = !DILocation(line: 1914, column: 3, scope: !16600)
!16606 = distinct !DISubprogram(name: "gimple_call_noreturn_p", scope: !581, file: !581, line: 2178, type: !5223, scopeLine: 2179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16607 = !DILocalVariable(name: "s", arg: 1, scope: !16606, file: !581, line: 2178, type: !2882)
!16608 = !DILocation(line: 2178, column: 32, scope: !16606)
!16609 = !DILocation(line: 2181, column: 30, scope: !16606)
!16610 = !DILocation(line: 2181, column: 11, scope: !16606)
!16611 = !DILocation(line: 2181, column: 33, scope: !16606)
!16612 = !DILocation(line: 2181, column: 49, scope: !16606)
!16613 = !DILocation(line: 2181, column: 10, scope: !16606)
!16614 = !DILocation(line: 2181, column: 3, scope: !16606)
!16615 = distinct !DISubprogram(name: "gimple_call_chain", scope: !581, file: !581, line: 1983, type: !4569, scopeLine: 1984, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16616 = !DILocalVariable(name: "gs", arg: 1, scope: !16615, file: !581, line: 1983, type: !4543)
!16617 = !DILocation(line: 1983, column: 33, scope: !16615)
!16618 = !DILocation(line: 1986, column: 21, scope: !16615)
!16619 = !DILocation(line: 1986, column: 10, scope: !16615)
!16620 = !DILocation(line: 1986, column: 3, scope: !16615)
!16621 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !581, file: !581, line: 2013, type: !5171, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16622 = !DILocalVariable(name: "gs", arg: 1, scope: !16621, file: !581, line: 2013, type: !4543)
!16623 = !DILocation(line: 2013, column: 36, scope: !16621)
!16624 = !DILocalVariable(name: "num_ops", scope: !16621, file: !581, line: 2015, type: !7)
!16625 = !DILocation(line: 2015, column: 12, scope: !16621)
!16626 = !DILocation(line: 2017, column: 29, scope: !16621)
!16627 = !DILocation(line: 2017, column: 13, scope: !16621)
!16628 = !DILocation(line: 2017, column: 11, scope: !16621)
!16629 = !DILocation(line: 2018, column: 10, scope: !16621)
!16630 = !DILocation(line: 2018, column: 18, scope: !16621)
!16631 = !DILocation(line: 2018, column: 3, scope: !16621)
!16632 = distinct !DISubprogram(name: "gimple_call_arg", scope: !581, file: !581, line: 2025, type: !5185, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16633 = !DILocalVariable(name: "gs", arg: 1, scope: !16632, file: !581, line: 2025, type: !4543)
!16634 = !DILocation(line: 2025, column: 31, scope: !16632)
!16635 = !DILocalVariable(name: "index", arg: 2, scope: !16632, file: !581, line: 2025, type: !7)
!16636 = !DILocation(line: 2025, column: 44, scope: !16632)
!16637 = !DILocation(line: 2028, column: 21, scope: !16632)
!16638 = !DILocation(line: 2028, column: 25, scope: !16632)
!16639 = !DILocation(line: 2028, column: 31, scope: !16632)
!16640 = !DILocation(line: 2028, column: 10, scope: !16632)
!16641 = !DILocation(line: 2028, column: 3, scope: !16632)
!16642 = distinct !DISubprogram(name: "gimple_switch_index", scope: !581, file: !581, line: 3180, type: !4569, scopeLine: 3181, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16643 = !DILocalVariable(name: "gs", arg: 1, scope: !16642, file: !581, line: 3180, type: !4543)
!16644 = !DILocation(line: 3180, column: 35, scope: !16642)
!16645 = !DILocation(line: 3183, column: 21, scope: !16642)
!16646 = !DILocation(line: 3183, column: 10, scope: !16642)
!16647 = !DILocation(line: 3183, column: 3, scope: !16642)
!16648 = distinct !DISubprogram(name: "gimple_return_retval", scope: !581, file: !581, line: 4253, type: !4569, scopeLine: 4254, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16649 = !DILocalVariable(name: "gs", arg: 1, scope: !16648, file: !581, line: 4253, type: !4543)
!16650 = !DILocation(line: 4253, column: 36, scope: !16648)
!16651 = !DILocation(line: 4256, column: 21, scope: !16648)
!16652 = !DILocation(line: 4256, column: 10, scope: !16648)
!16653 = !DILocation(line: 4256, column: 3, scope: !16648)
!16654 = distinct !DISubprogram(name: "gsi_one_before_end_p", scope: !581, file: !581, line: 4476, type: !4800, scopeLine: 4477, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16655 = !DILocalVariable(name: "i", arg: 1, scope: !16654, file: !581, line: 4476, type: !4074)
!16656 = !DILocation(line: 4476, column: 44, scope: !16654)
!16657 = !DILocation(line: 4478, column: 12, scope: !16654)
!16658 = !DILocation(line: 4478, column: 16, scope: !16654)
!16659 = !DILocation(line: 4478, column: 24, scope: !16654)
!16660 = !DILocation(line: 4478, column: 29, scope: !16654)
!16661 = !DILocation(line: 4478, column: 34, scope: !16654)
!16662 = !DILocation(line: 4478, column: 39, scope: !16654)
!16663 = !DILocation(line: 0, scope: !16654)
!16664 = !DILocation(line: 4478, column: 10, scope: !16654)
!16665 = !DILocation(line: 4478, column: 3, scope: !16654)
!16666 = distinct !DISubprogram(name: "is_gimple_omp", scope: !581, file: !581, line: 4289, type: !5609, scopeLine: 4290, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16667 = !DILocalVariable(name: "stmt", arg: 1, scope: !16666, file: !581, line: 4289, type: !4543)
!16668 = !DILocation(line: 4289, column: 29, scope: !16666)
!16669 = !DILocation(line: 4291, column: 24, scope: !16666)
!16670 = !DILocation(line: 4291, column: 11, scope: !16666)
!16671 = !DILocation(line: 4291, column: 3, scope: !16666)
!16672 = !DILocation(line: 4294, column: 7, scope: !16673)
!16673 = distinct !DILexicalBlock(scope: !16666, file: !581, line: 4292, column: 5)
!16674 = !DILocation(line: 4296, column: 7, scope: !16673)
!16675 = !DILocation(line: 4298, column: 1, scope: !16666)
!16676 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !581, file: !581, line: 1954, type: !4569, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16677 = !DILocalVariable(name: "gs", arg: 1, scope: !16676, file: !581, line: 1954, type: !4543)
!16678 = !DILocation(line: 1954, column: 34, scope: !16676)
!16679 = !DILocalVariable(name: "addr", scope: !16676, file: !581, line: 1956, type: !2553)
!16680 = !DILocation(line: 1956, column: 8, scope: !16676)
!16681 = !DILocation(line: 1956, column: 31, scope: !16676)
!16682 = !DILocation(line: 1956, column: 15, scope: !16676)
!16683 = !DILocation(line: 1957, column: 7, scope: !16684)
!16684 = distinct !DILexicalBlock(scope: !16676, file: !581, line: 1957, column: 7)
!16685 = !DILocation(line: 1957, column: 24, scope: !16684)
!16686 = !DILocation(line: 1957, column: 7, scope: !16676)
!16687 = !DILocation(line: 1958, column: 12, scope: !16684)
!16688 = !DILocation(line: 1958, column: 5, scope: !16684)
!16689 = !DILocation(line: 1959, column: 3, scope: !16676)
!16690 = !DILocation(line: 1960, column: 1, scope: !16676)
!16691 = distinct !DISubprogram(name: "verify_expr", scope: !3, file: !3, line: 2493, type: !7603, scopeLine: 2494, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!16692 = !DILocalVariable(name: "tp", arg: 1, scope: !16691, file: !3, line: 2493, type: !2916)
!16693 = !DILocation(line: 2493, column: 20, scope: !16691)
!16694 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !16691, file: !3, line: 2493, type: !4040)
!16695 = !DILocation(line: 2493, column: 29, scope: !16691)
!16696 = !DILocalVariable(name: "data", arg: 3, scope: !16691, file: !3, line: 2493, type: !2547)
!16697 = !DILocation(line: 2493, column: 50, scope: !16691)
!16698 = !DILocalVariable(name: "t", scope: !16691, file: !3, line: 2495, type: !2553)
!16699 = !DILocation(line: 2495, column: 8, scope: !16691)
!16700 = !DILocation(line: 2495, column: 13, scope: !16691)
!16701 = !DILocation(line: 2495, column: 12, scope: !16691)
!16702 = !DILocalVariable(name: "x", scope: !16691, file: !3, line: 2495, type: !2553)
!16703 = !DILocation(line: 2495, column: 17, scope: !16691)
!16704 = !DILocation(line: 2497, column: 7, scope: !16705)
!16705 = distinct !DILexicalBlock(scope: !16691, file: !3, line: 2497, column: 7)
!16706 = !DILocation(line: 2497, column: 7, scope: !16691)
!16707 = !DILocation(line: 2498, column: 6, scope: !16705)
!16708 = !DILocation(line: 2498, column: 20, scope: !16705)
!16709 = !DILocation(line: 2498, column: 5, scope: !16705)
!16710 = !DILocation(line: 2505, column: 11, scope: !16691)
!16711 = !DILocation(line: 2505, column: 3, scope: !16691)
!16712 = !DILocation(line: 2508, column: 11, scope: !16713)
!16713 = distinct !DILexicalBlock(scope: !16714, file: !3, line: 2508, column: 11)
!16714 = distinct !DILexicalBlock(scope: !16691, file: !3, line: 2506, column: 5)
!16715 = !DILocation(line: 2508, column: 11, scope: !16714)
!16716 = !DILocation(line: 2510, column: 4, scope: !16717)
!16717 = distinct !DILexicalBlock(scope: !16713, file: !3, line: 2509, column: 2)
!16718 = !DILocation(line: 2511, column: 12, scope: !16717)
!16719 = !DILocation(line: 2511, column: 11, scope: !16717)
!16720 = !DILocation(line: 2511, column: 4, scope: !16717)
!16721 = !DILocation(line: 2513, column: 7, scope: !16714)
!16722 = !DILocation(line: 2516, column: 11, scope: !16714)
!16723 = !DILocation(line: 2516, column: 9, scope: !16714)
!16724 = !DILocation(line: 2517, column: 27, scope: !16725)
!16725 = distinct !DILexicalBlock(scope: !16714, file: !3, line: 2517, column: 11)
!16726 = !DILocation(line: 2517, column: 12, scope: !16725)
!16727 = !DILocation(line: 2517, column: 30, scope: !16725)
!16728 = !DILocation(line: 2517, column: 59, scope: !16725)
!16729 = !DILocation(line: 2517, column: 34, scope: !16725)
!16730 = !DILocation(line: 2517, column: 11, scope: !16714)
!16731 = !DILocation(line: 2519, column: 4, scope: !16732)
!16732 = distinct !DILexicalBlock(scope: !16725, file: !3, line: 2518, column: 2)
!16733 = !DILocation(line: 2520, column: 11, scope: !16732)
!16734 = !DILocation(line: 2520, column: 4, scope: !16732)
!16735 = !DILocation(line: 2522, column: 7, scope: !16714)
!16736 = !DILocation(line: 2525, column: 17, scope: !16714)
!16737 = !DILocation(line: 2525, column: 11, scope: !16714)
!16738 = !DILocation(line: 2525, column: 9, scope: !16714)
!16739 = !DILocation(line: 2526, column: 11, scope: !16740)
!16740 = distinct !DILexicalBlock(scope: !16714, file: !3, line: 2526, column: 11)
!16741 = !DILocation(line: 2526, column: 16, scope: !16740)
!16742 = !DILocation(line: 2526, column: 13, scope: !16740)
!16743 = !DILocation(line: 2526, column: 11, scope: !16714)
!16744 = !DILocation(line: 2528, column: 4, scope: !16745)
!16745 = distinct !DILexicalBlock(scope: !16740, file: !3, line: 2527, column: 2)
!16746 = !DILocation(line: 2529, column: 12, scope: !16745)
!16747 = !DILocation(line: 2529, column: 11, scope: !16745)
!16748 = !DILocation(line: 2529, column: 4, scope: !16745)
!16749 = !DILocation(line: 2531, column: 7, scope: !16714)
!16750 = !DILocation(line: 2534, column: 7, scope: !16714)
!16751 = !DILocation(line: 2535, column: 15, scope: !16714)
!16752 = !DILocation(line: 2535, column: 14, scope: !16714)
!16753 = !DILocation(line: 2535, column: 7, scope: !16714)
!16754 = !DILocalVariable(name: "old_constant", scope: !16755, file: !3, line: 2539, type: !2672)
!16755 = distinct !DILexicalBlock(scope: !16714, file: !3, line: 2538, column: 7)
!16756 = !DILocation(line: 2539, column: 7, scope: !16755)
!16757 = !DILocalVariable(name: "old_side_effects", scope: !16755, file: !3, line: 2540, type: !2672)
!16758 = !DILocation(line: 2540, column: 7, scope: !16755)
!16759 = !DILocalVariable(name: "new_constant", scope: !16755, file: !3, line: 2541, type: !2672)
!16760 = !DILocation(line: 2541, column: 7, scope: !16755)
!16761 = !DILocalVariable(name: "new_side_effects", scope: !16755, file: !3, line: 2542, type: !2672)
!16762 = !DILocation(line: 2542, column: 7, scope: !16755)
!16763 = !DILocation(line: 2544, column: 2, scope: !16755)
!16764 = !DILocation(line: 2546, column: 17, scope: !16755)
!16765 = !DILocation(line: 2546, column: 15, scope: !16755)
!16766 = !DILocation(line: 2547, column: 21, scope: !16755)
!16767 = !DILocation(line: 2547, column: 19, scope: !16755)
!16768 = !DILocation(line: 2549, column: 42, scope: !16755)
!16769 = !DILocation(line: 2549, column: 2, scope: !16755)
!16770 = !DILocation(line: 2550, column: 21, scope: !16755)
!16771 = !DILocation(line: 2550, column: 19, scope: !16755)
!16772 = !DILocation(line: 2551, column: 17, scope: !16755)
!16773 = !DILocation(line: 2551, column: 15, scope: !16755)
!16774 = !DILocation(line: 2553, column: 13, scope: !16775)
!16775 = distinct !DILexicalBlock(scope: !16755, file: !3, line: 2553, column: 13)
!16776 = !DILocation(line: 2553, column: 29, scope: !16775)
!16777 = !DILocation(line: 2553, column: 26, scope: !16775)
!16778 = !DILocation(line: 2553, column: 13, scope: !16755)
!16779 = !DILocation(line: 2555, column: 6, scope: !16780)
!16780 = distinct !DILexicalBlock(scope: !16775, file: !3, line: 2554, column: 4)
!16781 = !DILocation(line: 2556, column: 13, scope: !16780)
!16782 = !DILocation(line: 2556, column: 6, scope: !16780)
!16783 = !DILocation(line: 2558, column: 6, scope: !16784)
!16784 = distinct !DILexicalBlock(scope: !16755, file: !3, line: 2558, column: 6)
!16785 = !DILocation(line: 2558, column: 26, scope: !16784)
!16786 = !DILocation(line: 2558, column: 23, scope: !16784)
!16787 = !DILocation(line: 2558, column: 6, scope: !16755)
!16788 = !DILocation(line: 2560, column: 6, scope: !16789)
!16789 = distinct !DILexicalBlock(scope: !16784, file: !3, line: 2559, column: 4)
!16790 = !DILocation(line: 2561, column: 13, scope: !16789)
!16791 = !DILocation(line: 2561, column: 6, scope: !16789)
!16792 = !DILocation(line: 2567, column: 11, scope: !16793)
!16793 = distinct !DILexicalBlock(scope: !16755, file: !3, line: 2567, column: 2)
!16794 = !DILocation(line: 2567, column: 9, scope: !16793)
!16795 = !DILocation(line: 2567, column: 7, scope: !16793)
!16796 = !DILocation(line: 2568, column: 28, scope: !16797)
!16797 = distinct !DILexicalBlock(scope: !16793, file: !3, line: 2567, column: 2)
!16798 = !DILocation(line: 2568, column: 7, scope: !16797)
!16799 = !DILocation(line: 2567, column: 2, scope: !16793)
!16800 = !DILocation(line: 2569, column: 11, scope: !16797)
!16801 = !DILocation(line: 2569, column: 9, scope: !16797)
!16802 = !DILocation(line: 2567, column: 2, scope: !16797)
!16803 = distinct !{!16803, !16799, !16804}
!16804 = !DILocation(line: 2570, column: 4, scope: !16793)
!16805 = !DILocation(line: 2572, column: 8, scope: !16806)
!16806 = distinct !DILexicalBlock(scope: !16755, file: !3, line: 2572, column: 6)
!16807 = !DILocation(line: 2572, column: 22, scope: !16806)
!16808 = !DILocation(line: 2573, column: 8, scope: !16806)
!16809 = !DILocation(line: 2573, column: 11, scope: !16806)
!16810 = !DILocation(line: 2573, column: 25, scope: !16806)
!16811 = !DILocation(line: 2574, column: 8, scope: !16806)
!16812 = !DILocation(line: 2574, column: 11, scope: !16806)
!16813 = !DILocation(line: 2574, column: 25, scope: !16806)
!16814 = !DILocation(line: 2572, column: 6, scope: !16755)
!16815 = !DILocation(line: 2575, column: 4, scope: !16806)
!16816 = !DILocation(line: 2576, column: 7, scope: !16817)
!16817 = distinct !DILexicalBlock(scope: !16755, file: !3, line: 2576, column: 6)
!16818 = !DILocation(line: 2576, column: 6, scope: !16755)
!16819 = !DILocation(line: 2578, column: 6, scope: !16820)
!16820 = distinct !DILexicalBlock(scope: !16817, file: !3, line: 2577, column: 4)
!16821 = !DILocation(line: 2579, column: 13, scope: !16820)
!16822 = !DILocation(line: 2579, column: 6, scope: !16820)
!16823 = !DILocation(line: 2581, column: 6, scope: !16824)
!16824 = distinct !DILexicalBlock(scope: !16755, file: !3, line: 2581, column: 6)
!16825 = !DILocation(line: 2581, column: 6, scope: !16755)
!16826 = !DILocation(line: 2583, column: 6, scope: !16827)
!16827 = distinct !DILexicalBlock(scope: !16824, file: !3, line: 2582, column: 4)
!16828 = !DILocation(line: 2584, column: 13, scope: !16827)
!16829 = !DILocation(line: 2584, column: 6, scope: !16827)
!16830 = !DILocation(line: 2587, column: 2, scope: !16755)
!16831 = !DILocation(line: 2591, column: 11, scope: !16714)
!16832 = !DILocation(line: 2591, column: 9, scope: !16714)
!16833 = !DILocation(line: 2592, column: 12, scope: !16834)
!16834 = distinct !DILexicalBlock(scope: !16714, file: !3, line: 2592, column: 11)
!16835 = !DILocation(line: 2592, column: 11, scope: !16714)
!16836 = !DILocation(line: 2594, column: 4, scope: !16837)
!16837 = distinct !DILexicalBlock(scope: !16834, file: !3, line: 2593, column: 2)
!16838 = !DILocation(line: 2595, column: 11, scope: !16837)
!16839 = !DILocation(line: 2595, column: 4, scope: !16837)
!16840 = !DILocation(line: 2597, column: 32, scope: !16841)
!16841 = distinct !DILexicalBlock(scope: !16714, file: !3, line: 2597, column: 11)
!16842 = !DILocation(line: 2597, column: 12, scope: !16841)
!16843 = !DILocation(line: 2597, column: 11, scope: !16714)
!16844 = !DILocation(line: 2599, column: 4, scope: !16845)
!16845 = distinct !DILexicalBlock(scope: !16841, file: !3, line: 2598, column: 9)
!16846 = !DILocation(line: 2600, column: 11, scope: !16845)
!16847 = !DILocation(line: 2600, column: 4, scope: !16845)
!16848 = !DILocation(line: 2602, column: 7, scope: !16714)
!16849 = !DILocation(line: 2605, column: 2, scope: !16714)
!16850 = !DILocation(line: 2614, column: 7, scope: !16714)
!16851 = !DILocation(line: 2614, column: 7, scope: !16852)
!16852 = distinct !DILexicalBlock(scope: !16853, file: !3, line: 2614, column: 7)
!16853 = distinct !DILexicalBlock(scope: !16714, file: !3, line: 2614, column: 7)
!16854 = !DILocation(line: 2614, column: 7, scope: !16853)
!16855 = !DILocation(line: 2614, column: 7, scope: !16856)
!16856 = distinct !DILexicalBlock(scope: !16852, file: !3, line: 2614, column: 7)
!16857 = !DILocation(line: 2615, column: 7, scope: !16714)
!16858 = !DILocation(line: 2628, column: 7, scope: !16714)
!16859 = !DILocation(line: 2628, column: 35, scope: !16714)
!16860 = !DILocation(line: 2628, column: 14, scope: !16714)
!16861 = !DILocation(line: 2630, column: 8, scope: !16862)
!16862 = distinct !DILexicalBlock(scope: !16863, file: !3, line: 2630, column: 8)
!16863 = distinct !DILexicalBlock(scope: !16714, file: !3, line: 2629, column: 2)
!16864 = !DILocation(line: 2630, column: 22, scope: !16862)
!16865 = !DILocation(line: 2630, column: 39, scope: !16862)
!16866 = !DILocation(line: 2630, column: 42, scope: !16862)
!16867 = !DILocation(line: 2630, column: 8, scope: !16863)
!16868 = !DILocation(line: 2631, column: 6, scope: !16862)
!16869 = !DILocation(line: 2631, column: 6, scope: !16870)
!16870 = distinct !DILexicalBlock(scope: !16871, file: !3, line: 2631, column: 6)
!16871 = distinct !DILexicalBlock(scope: !16862, file: !3, line: 2631, column: 6)
!16872 = !DILocation(line: 2631, column: 6, scope: !16871)
!16873 = !DILocation(line: 2631, column: 6, scope: !16874)
!16874 = distinct !DILexicalBlock(scope: !16870, file: !3, line: 2631, column: 6)
!16875 = !DILocation(line: 2632, column: 13, scope: !16876)
!16876 = distinct !DILexicalBlock(scope: !16862, file: !3, line: 2632, column: 13)
!16877 = !DILocation(line: 2632, column: 27, scope: !16876)
!16878 = !DILocation(line: 2633, column: 6, scope: !16876)
!16879 = !DILocation(line: 2633, column: 9, scope: !16876)
!16880 = !DILocation(line: 2633, column: 23, scope: !16876)
!16881 = !DILocation(line: 2632, column: 13, scope: !16862)
!16882 = !DILocation(line: 2635, column: 8, scope: !16883)
!16883 = distinct !DILexicalBlock(scope: !16876, file: !3, line: 2634, column: 6)
!16884 = !DILocation(line: 2635, column: 8, scope: !16885)
!16885 = distinct !DILexicalBlock(scope: !16886, file: !3, line: 2635, column: 8)
!16886 = distinct !DILexicalBlock(scope: !16883, file: !3, line: 2635, column: 8)
!16887 = !DILocation(line: 2635, column: 8, scope: !16886)
!16888 = !DILocation(line: 2635, column: 8, scope: !16889)
!16889 = distinct !DILexicalBlock(scope: !16885, file: !3, line: 2635, column: 8)
!16890 = !DILocation(line: 2636, column: 12, scope: !16891)
!16891 = distinct !DILexicalBlock(scope: !16883, file: !3, line: 2636, column: 12)
!16892 = !DILocation(line: 2636, column: 12, scope: !16883)
!16893 = !DILocation(line: 2637, column: 3, scope: !16891)
!16894 = !DILocation(line: 2637, column: 3, scope: !16895)
!16895 = distinct !DILexicalBlock(scope: !16896, file: !3, line: 2637, column: 3)
!16896 = distinct !DILexicalBlock(scope: !16891, file: !3, line: 2637, column: 3)
!16897 = !DILocation(line: 2637, column: 3, scope: !16896)
!16898 = !DILocation(line: 2637, column: 3, scope: !16899)
!16899 = distinct !DILexicalBlock(scope: !16895, file: !3, line: 2637, column: 3)
!16900 = !DILocation(line: 2638, column: 12, scope: !16901)
!16901 = distinct !DILexicalBlock(scope: !16883, file: !3, line: 2638, column: 12)
!16902 = !DILocation(line: 2638, column: 12, scope: !16883)
!16903 = !DILocation(line: 2639, column: 3, scope: !16901)
!16904 = !DILocation(line: 2639, column: 3, scope: !16905)
!16905 = distinct !DILexicalBlock(scope: !16906, file: !3, line: 2639, column: 3)
!16906 = distinct !DILexicalBlock(scope: !16901, file: !3, line: 2639, column: 3)
!16907 = !DILocation(line: 2639, column: 3, scope: !16906)
!16908 = !DILocation(line: 2639, column: 3, scope: !16909)
!16909 = distinct !DILexicalBlock(scope: !16905, file: !3, line: 2639, column: 3)
!16910 = !DILocation(line: 2640, column: 6, scope: !16883)
!16911 = !DILocation(line: 2641, column: 13, scope: !16912)
!16912 = distinct !DILexicalBlock(scope: !16876, file: !3, line: 2641, column: 13)
!16913 = !DILocation(line: 2641, column: 27, scope: !16912)
!16914 = !DILocation(line: 2641, column: 13, scope: !16876)
!16915 = !DILocation(line: 2643, column: 28, scope: !16916)
!16916 = distinct !DILexicalBlock(scope: !16917, file: !3, line: 2643, column: 12)
!16917 = distinct !DILexicalBlock(scope: !16912, file: !3, line: 2642, column: 6)
!16918 = !DILocation(line: 2643, column: 13, scope: !16916)
!16919 = !DILocation(line: 2644, column: 5, scope: !16916)
!16920 = !DILocation(line: 2644, column: 24, scope: !16916)
!16921 = !DILocation(line: 2644, column: 9, scope: !16916)
!16922 = !DILocation(line: 2643, column: 12, scope: !16917)
!16923 = !DILocation(line: 2646, column: 5, scope: !16924)
!16924 = distinct !DILexicalBlock(scope: !16916, file: !3, line: 2645, column: 3)
!16925 = !DILocation(line: 2647, column: 12, scope: !16924)
!16926 = !DILocation(line: 2647, column: 5, scope: !16924)
!16927 = !DILocation(line: 2649, column: 17, scope: !16928)
!16928 = distinct !DILexicalBlock(scope: !16916, file: !3, line: 2649, column: 17)
!16929 = !DILocation(line: 2650, column: 10, scope: !16928)
!16930 = !DILocation(line: 2650, column: 14, scope: !16928)
!16931 = !DILocation(line: 2651, column: 10, scope: !16928)
!16932 = !DILocation(line: 2651, column: 7, scope: !16928)
!16933 = !DILocation(line: 2649, column: 17, scope: !16916)
!16934 = !DILocation(line: 2653, column: 5, scope: !16935)
!16935 = distinct !DILexicalBlock(scope: !16928, file: !3, line: 2652, column: 3)
!16936 = !DILocation(line: 2655, column: 12, scope: !16935)
!16937 = !DILocation(line: 2655, column: 5, scope: !16935)
!16938 = !DILocation(line: 2657, column: 13, scope: !16939)
!16939 = distinct !DILexicalBlock(scope: !16917, file: !3, line: 2657, column: 12)
!16940 = !DILocation(line: 2658, column: 5, scope: !16939)
!16941 = !DILocation(line: 2658, column: 9, scope: !16939)
!16942 = !DILocation(line: 2659, column: 12, scope: !16939)
!16943 = !DILocation(line: 2659, column: 9, scope: !16939)
!16944 = !DILocation(line: 2657, column: 12, scope: !16917)
!16945 = !DILocation(line: 2661, column: 5, scope: !16946)
!16946 = distinct !DILexicalBlock(scope: !16939, file: !3, line: 2660, column: 3)
!16947 = !DILocation(line: 2663, column: 12, scope: !16946)
!16948 = !DILocation(line: 2663, column: 5, scope: !16946)
!16949 = !DILocation(line: 2665, column: 6, scope: !16917)
!16950 = !DILocation(line: 2667, column: 8, scope: !16863)
!16951 = !DILocation(line: 2667, column: 6, scope: !16863)
!16952 = distinct !{!16952, !16858, !16953}
!16953 = !DILocation(line: 2668, column: 2, scope: !16714)
!16954 = !DILocation(line: 2670, column: 37, scope: !16955)
!16955 = distinct !DILexicalBlock(scope: !16714, file: !3, line: 2670, column: 11)
!16956 = !DILocation(line: 2670, column: 12, scope: !16955)
!16957 = !DILocation(line: 2670, column: 40, scope: !16955)
!16958 = !DILocation(line: 2670, column: 62, scope: !16955)
!16959 = !DILocation(line: 2670, column: 44, scope: !16955)
!16960 = !DILocation(line: 2670, column: 11, scope: !16714)
!16961 = !DILocation(line: 2672, column: 4, scope: !16962)
!16962 = distinct !DILexicalBlock(scope: !16955, file: !3, line: 2671, column: 2)
!16963 = !DILocation(line: 2673, column: 11, scope: !16962)
!16964 = !DILocation(line: 2673, column: 4, scope: !16962)
!16965 = !DILocation(line: 2675, column: 8, scope: !16714)
!16966 = !DILocation(line: 2675, column: 22, scope: !16714)
!16967 = !DILocation(line: 2676, column: 7, scope: !16714)
!16968 = !DILocation(line: 2681, column: 11, scope: !16969)
!16969 = distinct !DILexicalBlock(scope: !16714, file: !3, line: 2681, column: 11)
!16970 = !DILocation(line: 2681, column: 11, scope: !16714)
!16971 = !DILocation(line: 2683, column: 4, scope: !16972)
!16972 = distinct !DILexicalBlock(scope: !16969, file: !3, line: 2682, column: 2)
!16973 = !DILocation(line: 2684, column: 11, scope: !16972)
!16974 = !DILocation(line: 2684, column: 4, scope: !16972)
!16975 = !DILocation(line: 2686, column: 7, scope: !16714)
!16976 = !DILocation(line: 2686, column: 7, scope: !16977)
!16977 = distinct !DILexicalBlock(scope: !16978, file: !3, line: 2686, column: 7)
!16978 = distinct !DILexicalBlock(scope: !16714, file: !3, line: 2686, column: 7)
!16979 = !DILocation(line: 2686, column: 7, scope: !16978)
!16980 = !DILocation(line: 2686, column: 7, scope: !16981)
!16981 = distinct !DILexicalBlock(scope: !16977, file: !3, line: 2686, column: 7)
!16982 = !DILocation(line: 2687, column: 7, scope: !16714)
!16983 = !DILocation(line: 2687, column: 7, scope: !16984)
!16984 = distinct !DILexicalBlock(scope: !16985, file: !3, line: 2687, column: 7)
!16985 = distinct !DILexicalBlock(scope: !16714, file: !3, line: 2687, column: 7)
!16986 = !DILocation(line: 2687, column: 7, scope: !16985)
!16987 = !DILocation(line: 2687, column: 7, scope: !16988)
!16988 = distinct !DILexicalBlock(scope: !16984, file: !3, line: 2687, column: 7)
!16989 = !DILocation(line: 2688, column: 7, scope: !16714)
!16990 = !DILocation(line: 2692, column: 12, scope: !16991)
!16991 = distinct !DILexicalBlock(scope: !16714, file: !3, line: 2692, column: 11)
!16992 = !DILocation(line: 2692, column: 11, scope: !16714)
!16993 = !DILocation(line: 2694, column: 4, scope: !16994)
!16994 = distinct !DILexicalBlock(scope: !16991, file: !3, line: 2693, column: 2)
!16995 = !DILocation(line: 2695, column: 11, scope: !16994)
!16996 = !DILocation(line: 2695, column: 4, scope: !16994)
!16997 = !DILocation(line: 2699, column: 39, scope: !16998)
!16998 = distinct !DILexicalBlock(scope: !16714, file: !3, line: 2699, column: 11)
!16999 = !DILocation(line: 2700, column: 10, scope: !16998)
!17000 = !DILocation(line: 2699, column: 12, scope: !16998)
!17001 = !DILocation(line: 2699, column: 11, scope: !16714)
!17002 = !DILocation(line: 2702, column: 4, scope: !17003)
!17003 = distinct !DILexicalBlock(scope: !16998, file: !3, line: 2701, column: 2)
!17004 = !DILocation(line: 2704, column: 11, scope: !17003)
!17005 = !DILocation(line: 2704, column: 4, scope: !17003)
!17006 = !DILocation(line: 2700, column: 41, scope: !16998)
!17007 = !DILocation(line: 2741, column: 7, scope: !16714)
!17008 = !DILocation(line: 2741, column: 7, scope: !17009)
!17009 = distinct !DILexicalBlock(scope: !17010, file: !3, line: 2741, column: 7)
!17010 = distinct !DILexicalBlock(scope: !16714, file: !3, line: 2741, column: 7)
!17011 = !DILocation(line: 2741, column: 7, scope: !17010)
!17012 = !DILocation(line: 2741, column: 7, scope: !17013)
!17013 = distinct !DILexicalBlock(scope: !17009, file: !3, line: 2741, column: 7)
!17014 = !DILocation(line: 2742, column: 7, scope: !16714)
!17015 = !DILocation(line: 2742, column: 7, scope: !17016)
!17016 = distinct !DILexicalBlock(scope: !17017, file: !3, line: 2742, column: 7)
!17017 = distinct !DILexicalBlock(scope: !16714, file: !3, line: 2742, column: 7)
!17018 = !DILocation(line: 2742, column: 7, scope: !17017)
!17019 = !DILocation(line: 2742, column: 7, scope: !17020)
!17020 = distinct !DILexicalBlock(scope: !17016, file: !3, line: 2742, column: 7)
!17021 = !DILocation(line: 2743, column: 7, scope: !16714)
!17022 = !DILocation(line: 2746, column: 11, scope: !17023)
!17023 = distinct !DILexicalBlock(scope: !16714, file: !3, line: 2746, column: 11)
!17024 = !DILocation(line: 2746, column: 29, scope: !17023)
!17025 = !DILocation(line: 2746, column: 32, scope: !17023)
!17026 = !DILocation(line: 2746, column: 58, scope: !17023)
!17027 = !DILocation(line: 2746, column: 11, scope: !16714)
!17028 = !DILocation(line: 2747, column: 3, scope: !17023)
!17029 = !DILocation(line: 2747, column: 17, scope: !17023)
!17030 = !DILocation(line: 2747, column: 2, scope: !17023)
!17031 = !DILocation(line: 2748, column: 7, scope: !16714)
!17032 = !DILocation(line: 2751, column: 7, scope: !16714)
!17033 = !DILocation(line: 2753, column: 3, scope: !16691)
!17034 = !DILocation(line: 2756, column: 1, scope: !16691)
!17035 = distinct !DISubprogram(name: "ei_end_p", scope: !382, file: !382, line: 721, type: !17036, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17036 = !DISubroutineType(types: !17037)
!17037 = !{!2672, !7861}
!17038 = !DILocalVariable(name: "i", arg: 1, scope: !17035, file: !382, line: 721, type: !7861)
!17039 = !DILocation(line: 721, column: 25, scope: !17035)
!17040 = !DILocation(line: 723, column: 13, scope: !17035)
!17041 = !DILocation(line: 723, column: 22, scope: !17035)
!17042 = !DILocation(line: 723, column: 19, scope: !17035)
!17043 = !DILocation(line: 723, column: 10, scope: !17035)
!17044 = !DILocation(line: 723, column: 3, scope: !17035)
!17045 = distinct !DISubprogram(name: "ei_edge", scope: !382, file: !382, line: 752, type: !9381, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17046 = !DILocalVariable(name: "i", arg: 1, scope: !17045, file: !382, line: 752, type: !7861)
!17047 = !DILocation(line: 752, column: 24, scope: !17045)
!17048 = !DILocation(line: 754, column: 10, scope: !17045)
!17049 = !DILocation(line: 754, column: 3, scope: !17045)
!17050 = distinct !DISubprogram(name: "ei_container", scope: !382, file: !382, line: 685, type: !17051, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17051 = !DISubroutineType(types: !17052)
!17052 = !{!2850, !7861}
!17053 = !DILocalVariable(name: "i", arg: 1, scope: !17050, file: !382, line: 685, type: !7861)
!17054 = !DILocation(line: 685, column: 29, scope: !17050)
!17055 = !DILocation(line: 687, column: 3, scope: !17050)
!17056 = !DILocation(line: 688, column: 13, scope: !17050)
!17057 = !DILocation(line: 688, column: 10, scope: !17050)
!17058 = !DILocation(line: 688, column: 3, scope: !17050)
!17059 = distinct !DISubprogram(name: "gimple_seq_empty_p", scope: !581, file: !581, line: 215, type: !17060, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17060 = !DISubroutineType(types: !17061)
!17061 = !{!2672, !9899}
!17062 = !DILocalVariable(name: "s", arg: 1, scope: !17059, file: !581, line: 215, type: !9899)
!17063 = !DILocation(line: 215, column: 38, scope: !17059)
!17064 = !DILocation(line: 217, column: 10, scope: !17059)
!17065 = !DILocation(line: 217, column: 12, scope: !17059)
!17066 = !DILocation(line: 217, column: 20, scope: !17059)
!17067 = !DILocation(line: 217, column: 23, scope: !17059)
!17068 = !DILocation(line: 217, column: 26, scope: !17059)
!17069 = !DILocation(line: 217, column: 32, scope: !17059)
!17070 = !DILocation(line: 217, column: 3, scope: !17059)
!17071 = distinct !DISubprogram(name: "phi_nodes", scope: !5827, file: !5827, line: 508, type: !14334, scopeLine: 509, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17072 = !DILocalVariable(name: "bb", arg: 1, scope: !17071, file: !5827, line: 508, type: !4241)
!17073 = !DILocation(line: 508, column: 30, scope: !17071)
!17074 = !DILocation(line: 510, column: 3, scope: !17071)
!17075 = !DILocation(line: 511, column: 8, scope: !17076)
!17076 = distinct !DILexicalBlock(scope: !17071, file: !5827, line: 511, column: 7)
!17077 = !DILocation(line: 511, column: 12, scope: !17076)
!17078 = !DILocation(line: 511, column: 15, scope: !17076)
!17079 = !DILocation(line: 511, column: 7, scope: !17071)
!17080 = !DILocation(line: 512, column: 5, scope: !17076)
!17081 = !DILocation(line: 513, column: 10, scope: !17071)
!17082 = !DILocation(line: 513, column: 14, scope: !17071)
!17083 = !DILocation(line: 513, column: 17, scope: !17071)
!17084 = !DILocation(line: 513, column: 25, scope: !17071)
!17085 = !DILocation(line: 513, column: 3, scope: !17071)
!17086 = !DILocation(line: 514, column: 1, scope: !17071)
!17087 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !337, file: !337, line: 85, type: !17088, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17088 = !DISubroutineType(types: !17089)
!17089 = !{!3124, !15041, !7}
!17090 = !DILocalVariable(name: "vec_", arg: 1, scope: !17087, file: !337, line: 85, type: !15041)
!17091 = !DILocation(line: 85, column: 1, scope: !17087)
!17092 = !DILocalVariable(name: "ix_", arg: 2, scope: !17087, file: !337, line: 85, type: !7)
!17093 = !DILocation(line: 0, scope: !17087)
!17094 = distinct !DISubprogram(name: "VEC_basic_block_heap_reserve", scope: !382, file: !382, line: 283, type: !17095, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17095 = !DISubroutineType(types: !17096)
!17096 = !{!2548, !8431, !2548}
!17097 = !DILocalVariable(name: "vec_", arg: 1, scope: !17094, file: !382, line: 283, type: !8431)
!17098 = !DILocation(line: 283, column: 1, scope: !17094)
!17099 = !DILocalVariable(name: "alloc_", arg: 2, scope: !17094, file: !382, line: 283, type: !2548)
!17100 = !DILocalVariable(name: "extend", scope: !17094, file: !382, line: 283, type: !2548)
!17101 = !DILocation(line: 283, column: 1, scope: !17102)
!17102 = distinct !DILexicalBlock(scope: !17094, file: !382, line: 283, column: 1)
!17103 = distinct !DISubprogram(name: "VEC_basic_block_base_quick_push", scope: !382, file: !382, line: 281, type: !17104, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17104 = !DISubroutineType(types: !17105)
!17105 = !{!4039, !4406, !3523}
!17106 = !DILocalVariable(name: "vec_", arg: 1, scope: !17103, file: !382, line: 281, type: !4406)
!17107 = !DILocation(line: 281, column: 1, scope: !17103)
!17108 = !DILocalVariable(name: "obj_", arg: 2, scope: !17103, file: !382, line: 281, type: !3523)
!17109 = !DILocalVariable(name: "slot_", scope: !17103, file: !382, line: 281, type: !4039)
!17110 = distinct !DISubprogram(name: "single_succ_p", scope: !382, file: !382, line: 626, type: !4244, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17111 = !DILocalVariable(name: "bb", arg: 1, scope: !17110, file: !382, line: 626, type: !4241)
!17112 = !DILocation(line: 626, column: 34, scope: !17110)
!17113 = !DILocation(line: 628, column: 10, scope: !17110)
!17114 = !DILocation(line: 628, column: 33, scope: !17110)
!17115 = !DILocation(line: 628, column: 3, scope: !17110)
!17116 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !5827, file: !5827, line: 434, type: !17117, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17117 = !DISubroutineType(types: !17118)
!17118 = !{!2553, !4119}
!17119 = !DILocalVariable(name: "def", arg: 1, scope: !17116, file: !5827, line: 434, type: !4119)
!17120 = !DILocation(line: 434, column: 33, scope: !17116)
!17121 = !DILocation(line: 436, column: 11, scope: !17116)
!17122 = !DILocation(line: 436, column: 10, scope: !17116)
!17123 = !DILocation(line: 436, column: 3, scope: !17116)
!17124 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !581, file: !581, line: 3080, type: !14378, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17125 = !DILocalVariable(name: "gs", arg: 1, scope: !17124, file: !581, line: 3080, type: !2882)
!17126 = !DILocation(line: 3080, column: 31, scope: !17124)
!17127 = !DILocation(line: 3083, column: 11, scope: !17124)
!17128 = !DILocation(line: 3083, column: 15, scope: !17124)
!17129 = !DILocation(line: 3083, column: 26, scope: !17124)
!17130 = !DILocation(line: 3083, column: 3, scope: !17124)
!17131 = distinct !DISubprogram(name: "replace_ssa_name", scope: !3, file: !3, line: 5441, type: !17132, scopeLine: 5443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17132 = !DISubroutineType(types: !17133)
!17133 = !{!2553, !2553, !3584, !2553}
!17134 = !DILocalVariable(name: "name", arg: 1, scope: !17131, file: !3, line: 5441, type: !2553)
!17135 = !DILocation(line: 5441, column: 24, scope: !17131)
!17136 = !DILocalVariable(name: "vars_map", arg: 2, scope: !17131, file: !3, line: 5441, type: !3584)
!17137 = !DILocation(line: 5441, column: 52, scope: !17131)
!17138 = !DILocalVariable(name: "to_context", arg: 3, scope: !17131, file: !3, line: 5442, type: !2553)
!17139 = !DILocation(line: 5442, column: 10, scope: !17131)
!17140 = !DILocalVariable(name: "loc", scope: !17131, file: !3, line: 5444, type: !3462)
!17141 = !DILocation(line: 5444, column: 10, scope: !17131)
!17142 = !DILocalVariable(name: "new_name", scope: !17131, file: !3, line: 5445, type: !2553)
!17143 = !DILocation(line: 5445, column: 8, scope: !17131)
!17144 = !DILocalVariable(name: "decl", scope: !17131, file: !3, line: 5445, type: !2553)
!17145 = !DILocation(line: 5445, column: 18, scope: !17131)
!17146 = !DILocation(line: 5445, column: 25, scope: !17131)
!17147 = !DILocation(line: 5447, column: 3, scope: !17131)
!17148 = !DILocation(line: 5449, column: 31, scope: !17131)
!17149 = !DILocation(line: 5449, column: 41, scope: !17131)
!17150 = !DILocation(line: 5449, column: 9, scope: !17131)
!17151 = !DILocation(line: 5449, column: 7, scope: !17131)
!17152 = !DILocation(line: 5451, column: 8, scope: !17153)
!17153 = distinct !DILexicalBlock(scope: !17131, file: !3, line: 5451, column: 7)
!17154 = !DILocation(line: 5451, column: 7, scope: !17131)
!17155 = !DILocation(line: 5453, column: 41, scope: !17156)
!17156 = distinct !DILexicalBlock(scope: !17153, file: !3, line: 5452, column: 5)
!17157 = !DILocation(line: 5453, column: 51, scope: !17156)
!17158 = !DILocation(line: 5453, column: 7, scope: !17156)
!17159 = !DILocation(line: 5455, column: 18, scope: !17156)
!17160 = !DILocation(line: 5455, column: 7, scope: !17156)
!17161 = !DILocation(line: 5456, column: 28, scope: !17162)
!17162 = distinct !DILexicalBlock(scope: !17156, file: !3, line: 5456, column: 11)
!17163 = !DILocation(line: 5456, column: 11, scope: !17162)
!17164 = !DILocation(line: 5456, column: 11, scope: !17156)
!17165 = !DILocation(line: 5457, column: 22, scope: !17162)
!17166 = !DILocation(line: 5457, column: 2, scope: !17162)
!17167 = !DILocation(line: 5459, column: 33, scope: !17156)
!17168 = !DILocation(line: 5459, column: 39, scope: !17156)
!17169 = !DILocation(line: 5459, column: 18, scope: !17156)
!17170 = !DILocation(line: 5459, column: 16, scope: !17156)
!17171 = !DILocation(line: 5460, column: 11, scope: !17172)
!17172 = distinct !DILexicalBlock(scope: !17156, file: !3, line: 5460, column: 11)
!17173 = !DILocation(line: 5460, column: 11, scope: !17156)
!17174 = !DILocation(line: 5461, column: 19, scope: !17172)
!17175 = !DILocation(line: 5461, column: 25, scope: !17172)
!17176 = !DILocation(line: 5461, column: 2, scope: !17172)
!17177 = !DILocation(line: 5462, column: 7, scope: !17156)
!17178 = !DILocation(line: 5464, column: 33, scope: !17156)
!17179 = !DILocation(line: 5464, column: 43, scope: !17156)
!17180 = !DILocation(line: 5464, column: 13, scope: !17156)
!17181 = !DILocation(line: 5464, column: 11, scope: !17156)
!17182 = !DILocation(line: 5465, column: 14, scope: !17156)
!17183 = !DILocation(line: 5465, column: 8, scope: !17156)
!17184 = !DILocation(line: 5465, column: 12, scope: !17156)
!17185 = !DILocation(line: 5466, column: 5, scope: !17156)
!17186 = !DILocation(line: 5468, column: 24, scope: !17153)
!17187 = !DILocation(line: 5468, column: 23, scope: !17153)
!17188 = !DILocation(line: 5468, column: 16, scope: !17153)
!17189 = !DILocation(line: 5468, column: 14, scope: !17153)
!17190 = !DILocation(line: 5470, column: 10, scope: !17131)
!17191 = !DILocation(line: 5470, column: 3, scope: !17131)
!17192 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !5827, file: !5827, line: 233, type: !17193, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17193 = !DISubroutineType(types: !17194)
!17194 = !{null, !4052, !2553}
!17195 = !DILocalVariable(name: "use", arg: 1, scope: !17192, file: !5827, line: 233, type: !4052)
!17196 = !DILocation(line: 233, column: 37, scope: !17192)
!17197 = !DILocalVariable(name: "val", arg: 2, scope: !17192, file: !5827, line: 233, type: !2553)
!17198 = !DILocation(line: 233, column: 47, scope: !17192)
!17199 = !DILocation(line: 235, column: 19, scope: !17192)
!17200 = !DILocation(line: 235, column: 3, scope: !17192)
!17201 = !DILocation(line: 236, column: 17, scope: !17192)
!17202 = !DILocation(line: 236, column: 5, scope: !17192)
!17203 = !DILocation(line: 236, column: 10, scope: !17192)
!17204 = !DILocation(line: 236, column: 15, scope: !17192)
!17205 = !DILocation(line: 237, column: 17, scope: !17192)
!17206 = !DILocation(line: 237, column: 22, scope: !17192)
!17207 = !DILocation(line: 237, column: 3, scope: !17192)
!17208 = !DILocation(line: 238, column: 1, scope: !17192)
!17209 = distinct !DISubprogram(name: "move_stmt_r", scope: !3, file: !3, line: 5584, type: !17210, scopeLine: 5586, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17210 = !DISubroutineType(types: !17211)
!17211 = !{!2553, !4825, !4274, !4070}
!17212 = !DILocalVariable(name: "gsi_p", arg: 1, scope: !17209, file: !3, line: 5584, type: !4825)
!17213 = !DILocation(line: 5584, column: 36, scope: !17209)
!17214 = !DILocalVariable(name: "handled_ops_p", arg: 2, scope: !17209, file: !3, line: 5584, type: !4274)
!17215 = !DILocation(line: 5584, column: 49, scope: !17209)
!17216 = !DILocalVariable(name: "wi", arg: 3, scope: !17209, file: !3, line: 5585, type: !4070)
!17217 = !DILocation(line: 5585, column: 30, scope: !17209)
!17218 = !DILocalVariable(name: "p", scope: !17209, file: !3, line: 5587, type: !4108)
!17219 = !DILocation(line: 5587, column: 23, scope: !17209)
!17220 = !DILocation(line: 5587, column: 50, scope: !17209)
!17221 = !DILocation(line: 5587, column: 54, scope: !17209)
!17222 = !DILocation(line: 5587, column: 27, scope: !17209)
!17223 = !DILocalVariable(name: "stmt", scope: !17209, file: !3, line: 5588, type: !2882)
!17224 = !DILocation(line: 5588, column: 10, scope: !17209)
!17225 = !DILocation(line: 5588, column: 28, scope: !17209)
!17226 = !DILocation(line: 5588, column: 17, scope: !17209)
!17227 = !DILocalVariable(name: "block", scope: !17209, file: !3, line: 5589, type: !2553)
!17228 = !DILocation(line: 5589, column: 8, scope: !17209)
!17229 = !DILocation(line: 5589, column: 30, scope: !17209)
!17230 = !DILocation(line: 5589, column: 16, scope: !17209)
!17231 = !DILocation(line: 5591, column: 7, scope: !17232)
!17232 = distinct !DILexicalBlock(scope: !17209, file: !3, line: 5591, column: 7)
!17233 = !DILocation(line: 5591, column: 10, scope: !17232)
!17234 = !DILocation(line: 5591, column: 21, scope: !17232)
!17235 = !DILocation(line: 5592, column: 7, scope: !17232)
!17236 = !DILocation(line: 5592, column: 10, scope: !17232)
!17237 = !DILocation(line: 5592, column: 19, scope: !17232)
!17238 = !DILocation(line: 5592, column: 22, scope: !17232)
!17239 = !DILocation(line: 5592, column: 16, scope: !17232)
!17240 = !DILocation(line: 5593, column: 7, scope: !17232)
!17241 = !DILocation(line: 5593, column: 10, scope: !17232)
!17242 = !DILocation(line: 5593, column: 16, scope: !17232)
!17243 = !DILocation(line: 5591, column: 7, scope: !17209)
!17244 = !DILocation(line: 5594, column: 23, scope: !17232)
!17245 = !DILocation(line: 5594, column: 29, scope: !17232)
!17246 = !DILocation(line: 5594, column: 32, scope: !17232)
!17247 = !DILocation(line: 5594, column: 5, scope: !17232)
!17248 = !DILocation(line: 5604, column: 24, scope: !17209)
!17249 = !DILocation(line: 5604, column: 11, scope: !17209)
!17250 = !DILocation(line: 5604, column: 3, scope: !17209)
!17251 = !DILocalVariable(name: "r", scope: !17252, file: !3, line: 5609, type: !2553)
!17252 = distinct !DILexicalBlock(scope: !17253, file: !3, line: 5608, column: 7)
!17253 = distinct !DILexicalBlock(scope: !17209, file: !3, line: 5605, column: 5)
!17254 = !DILocation(line: 5609, column: 7, scope: !17252)
!17255 = !DILocalVariable(name: "fndecl", scope: !17252, file: !3, line: 5609, type: !2553)
!17256 = !DILocation(line: 5609, column: 10, scope: !17252)
!17257 = !DILocation(line: 5609, column: 39, scope: !17252)
!17258 = !DILocation(line: 5609, column: 19, scope: !17252)
!17259 = !DILocation(line: 5610, column: 6, scope: !17260)
!17260 = distinct !DILexicalBlock(scope: !17252, file: !3, line: 5610, column: 6)
!17261 = !DILocation(line: 5610, column: 13, scope: !17260)
!17262 = !DILocation(line: 5610, column: 16, scope: !17260)
!17263 = !DILocation(line: 5610, column: 45, scope: !17260)
!17264 = !DILocation(line: 5610, column: 6, scope: !17252)
!17265 = !DILocation(line: 5611, column: 12, scope: !17260)
!17266 = !DILocation(line: 5611, column: 4, scope: !17260)
!17267 = !DILocation(line: 5614, column: 29, scope: !17268)
!17268 = distinct !DILexicalBlock(scope: !17260, file: !3, line: 5612, column: 6)
!17269 = !DILocation(line: 5614, column: 12, scope: !17268)
!17270 = !DILocation(line: 5614, column: 10, scope: !17268)
!17271 = !DILocation(line: 5615, column: 41, scope: !17268)
!17272 = !DILocation(line: 5615, column: 44, scope: !17268)
!17273 = !DILocation(line: 5615, column: 12, scope: !17268)
!17274 = !DILocation(line: 5615, column: 10, scope: !17268)
!17275 = !DILocation(line: 5616, column: 29, scope: !17268)
!17276 = !DILocation(line: 5616, column: 38, scope: !17268)
!17277 = !DILocation(line: 5616, column: 8, scope: !17268)
!17278 = !DILocation(line: 5621, column: 29, scope: !17268)
!17279 = !DILocation(line: 5621, column: 12, scope: !17268)
!17280 = !DILocation(line: 5621, column: 10, scope: !17268)
!17281 = !DILocation(line: 5622, column: 41, scope: !17268)
!17282 = !DILocation(line: 5622, column: 44, scope: !17268)
!17283 = !DILocation(line: 5622, column: 12, scope: !17268)
!17284 = !DILocation(line: 5622, column: 10, scope: !17268)
!17285 = !DILocation(line: 5623, column: 29, scope: !17268)
!17286 = !DILocation(line: 5623, column: 38, scope: !17268)
!17287 = !DILocation(line: 5623, column: 8, scope: !17268)
!17288 = !DILocation(line: 5624, column: 8, scope: !17268)
!17289 = !DILocation(line: 5627, column: 8, scope: !17268)
!17290 = !DILocation(line: 5628, column: 6, scope: !17268)
!17291 = !DILocation(line: 5630, column: 7, scope: !17253)
!17292 = !DILocalVariable(name: "r", scope: !17293, file: !3, line: 5634, type: !2548)
!17293 = distinct !DILexicalBlock(scope: !17253, file: !3, line: 5633, column: 7)
!17294 = !DILocation(line: 5634, column: 6, scope: !17293)
!17295 = !DILocation(line: 5634, column: 30, scope: !17293)
!17296 = !DILocation(line: 5634, column: 10, scope: !17293)
!17297 = !DILocation(line: 5635, column: 30, scope: !17293)
!17298 = !DILocation(line: 5635, column: 33, scope: !17293)
!17299 = !DILocation(line: 5635, column: 6, scope: !17293)
!17300 = !DILocation(line: 5635, column: 4, scope: !17293)
!17301 = !DILocation(line: 5636, column: 26, scope: !17293)
!17302 = !DILocation(line: 5636, column: 32, scope: !17293)
!17303 = !DILocation(line: 5636, column: 2, scope: !17293)
!17304 = !DILocation(line: 5638, column: 7, scope: !17253)
!17305 = !DILocalVariable(name: "r", scope: !17306, file: !3, line: 5642, type: !2548)
!17306 = distinct !DILexicalBlock(scope: !17253, file: !3, line: 5641, column: 7)
!17307 = !DILocation(line: 5642, column: 6, scope: !17306)
!17308 = !DILocation(line: 5642, column: 37, scope: !17306)
!17309 = !DILocation(line: 5642, column: 10, scope: !17306)
!17310 = !DILocation(line: 5643, column: 30, scope: !17306)
!17311 = !DILocation(line: 5643, column: 33, scope: !17306)
!17312 = !DILocation(line: 5643, column: 6, scope: !17306)
!17313 = !DILocation(line: 5643, column: 4, scope: !17306)
!17314 = !DILocation(line: 5644, column: 33, scope: !17306)
!17315 = !DILocation(line: 5644, column: 39, scope: !17306)
!17316 = !DILocation(line: 5644, column: 2, scope: !17306)
!17317 = !DILocation(line: 5646, column: 7, scope: !17253)
!17318 = !DILocation(line: 5650, column: 7, scope: !17253)
!17319 = !DILocation(line: 5652, column: 26, scope: !17320)
!17320 = distinct !DILexicalBlock(scope: !17253, file: !3, line: 5652, column: 11)
!17321 = !DILocation(line: 5652, column: 11, scope: !17320)
!17322 = !DILocation(line: 5652, column: 11, scope: !17253)
!17323 = !DILocalVariable(name: "save_remap_decls_p", scope: !17324, file: !3, line: 5658, type: !2672)
!17324 = distinct !DILexicalBlock(scope: !17320, file: !3, line: 5653, column: 2)
!17325 = !DILocation(line: 5658, column: 9, scope: !17324)
!17326 = !DILocation(line: 5658, column: 30, scope: !17324)
!17327 = !DILocation(line: 5658, column: 33, scope: !17324)
!17328 = !DILocation(line: 5659, column: 4, scope: !17324)
!17329 = !DILocation(line: 5659, column: 7, scope: !17324)
!17330 = !DILocation(line: 5659, column: 21, scope: !17324)
!17331 = !DILocation(line: 5660, column: 5, scope: !17324)
!17332 = !DILocation(line: 5660, column: 19, scope: !17324)
!17333 = !DILocation(line: 5662, column: 38, scope: !17324)
!17334 = !DILocation(line: 5662, column: 21, scope: !17324)
!17335 = !DILocation(line: 5663, column: 21, scope: !17324)
!17336 = !DILocation(line: 5662, column: 4, scope: !17324)
!17337 = !DILocation(line: 5665, column: 23, scope: !17324)
!17338 = !DILocation(line: 5665, column: 4, scope: !17324)
!17339 = !DILocation(line: 5665, column: 7, scope: !17324)
!17340 = !DILocation(line: 5665, column: 21, scope: !17324)
!17341 = !DILocation(line: 5666, column: 2, scope: !17324)
!17342 = !DILocation(line: 5667, column: 7, scope: !17253)
!17343 = !DILocation(line: 5670, column: 3, scope: !17209)
!17344 = distinct !DISubprogram(name: "move_stmt_op", scope: !3, file: !3, line: 5490, type: !7603, scopeLine: 5491, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17345 = !DILocalVariable(name: "tp", arg: 1, scope: !17344, file: !3, line: 5490, type: !2916)
!17346 = !DILocation(line: 5490, column: 21, scope: !17344)
!17347 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !17344, file: !3, line: 5490, type: !4040)
!17348 = !DILocation(line: 5490, column: 30, scope: !17344)
!17349 = !DILocalVariable(name: "data", arg: 3, scope: !17344, file: !3, line: 5490, type: !2547)
!17350 = !DILocation(line: 5490, column: 51, scope: !17344)
!17351 = !DILocalVariable(name: "wi", scope: !17344, file: !3, line: 5492, type: !4070)
!17352 = !DILocation(line: 5492, column: 26, scope: !17344)
!17353 = !DILocation(line: 5492, column: 57, scope: !17344)
!17354 = !DILocation(line: 5492, column: 31, scope: !17344)
!17355 = !DILocalVariable(name: "p", scope: !17344, file: !3, line: 5493, type: !4108)
!17356 = !DILocation(line: 5493, column: 23, scope: !17344)
!17357 = !DILocation(line: 5493, column: 50, scope: !17344)
!17358 = !DILocation(line: 5493, column: 54, scope: !17344)
!17359 = !DILocation(line: 5493, column: 27, scope: !17344)
!17360 = !DILocalVariable(name: "t", scope: !17344, file: !3, line: 5494, type: !2553)
!17361 = !DILocation(line: 5494, column: 8, scope: !17344)
!17362 = !DILocation(line: 5494, column: 13, scope: !17344)
!17363 = !DILocation(line: 5494, column: 12, scope: !17344)
!17364 = !DILocation(line: 5496, column: 7, scope: !17365)
!17365 = distinct !DILexicalBlock(scope: !17344, file: !3, line: 5496, column: 7)
!17366 = !DILocation(line: 5496, column: 7, scope: !17344)
!17367 = !DILocation(line: 5498, column: 5, scope: !17365)
!17368 = !DILocation(line: 5500, column: 12, scope: !17369)
!17369 = distinct !DILexicalBlock(scope: !17365, file: !3, line: 5500, column: 12)
!17370 = !DILocation(line: 5500, column: 23, scope: !17369)
!17371 = !DILocation(line: 5500, column: 26, scope: !17369)
!17372 = !DILocation(line: 5500, column: 40, scope: !17369)
!17373 = !DILocation(line: 5500, column: 12, scope: !17365)
!17374 = !DILocation(line: 5502, column: 11, scope: !17375)
!17375 = distinct !DILexicalBlock(scope: !17376, file: !3, line: 5502, column: 11)
!17376 = distinct !DILexicalBlock(scope: !17369, file: !3, line: 5501, column: 5)
!17377 = !DILocation(line: 5502, column: 25, scope: !17375)
!17378 = !DILocation(line: 5502, column: 11, scope: !17376)
!17379 = !DILocation(line: 5503, column: 26, scope: !17375)
!17380 = !DILocation(line: 5503, column: 29, scope: !17375)
!17381 = !DILocation(line: 5503, column: 32, scope: !17375)
!17382 = !DILocation(line: 5503, column: 42, scope: !17375)
!17383 = !DILocation(line: 5503, column: 45, scope: !17375)
!17384 = !DILocation(line: 5503, column: 8, scope: !17375)
!17385 = !DILocation(line: 5503, column: 3, scope: !17375)
!17386 = !DILocation(line: 5503, column: 6, scope: !17375)
!17387 = !DILocation(line: 5503, column: 2, scope: !17375)
!17388 = !DILocation(line: 5504, column: 16, scope: !17389)
!17389 = distinct !DILexicalBlock(scope: !17375, file: !3, line: 5504, column: 16)
!17390 = !DILocation(line: 5504, column: 30, scope: !17389)
!17391 = !DILocation(line: 5504, column: 16, scope: !17375)
!17392 = !DILocation(line: 5506, column: 8, scope: !17393)
!17393 = distinct !DILexicalBlock(scope: !17394, file: !3, line: 5506, column: 8)
!17394 = distinct !DILexicalBlock(scope: !17389, file: !3, line: 5505, column: 2)
!17395 = !DILocation(line: 5506, column: 11, scope: !17393)
!17396 = !DILocation(line: 5506, column: 8, scope: !17394)
!17397 = !DILocalVariable(name: "in", scope: !17398, file: !3, line: 5508, type: !4100)
!17398 = distinct !DILexicalBlock(scope: !17393, file: !3, line: 5507, column: 6)
!17399 = !DILocation(line: 5508, column: 24, scope: !17398)
!17400 = !DILocalVariable(name: "out", scope: !17398, file: !3, line: 5508, type: !4099)
!17401 = !DILocation(line: 5508, column: 29, scope: !17398)
!17402 = !DILocation(line: 5509, column: 23, scope: !17398)
!17403 = !DILocation(line: 5509, column: 11, scope: !17398)
!17404 = !DILocation(line: 5509, column: 16, scope: !17398)
!17405 = !DILocation(line: 5509, column: 21, scope: !17398)
!17406 = !DILocation(line: 5511, column: 24, scope: !17398)
!17407 = !DILocation(line: 5511, column: 27, scope: !17398)
!17408 = !DILocation(line: 5511, column: 42, scope: !17398)
!17409 = !DILocation(line: 5511, column: 47, scope: !17398)
!17410 = !DILocation(line: 5511, column: 3, scope: !17398)
!17411 = !DILocation(line: 5510, column: 14, scope: !17398)
!17412 = !DILocation(line: 5510, column: 12, scope: !17398)
!17413 = !DILocation(line: 5512, column: 12, scope: !17414)
!17414 = distinct !DILexicalBlock(scope: !17398, file: !3, line: 5512, column: 12)
!17415 = !DILocation(line: 5512, column: 12, scope: !17398)
!17416 = !DILocation(line: 5513, column: 13, scope: !17414)
!17417 = !DILocation(line: 5513, column: 18, scope: !17414)
!17418 = !DILocation(line: 5513, column: 11, scope: !17414)
!17419 = !DILocation(line: 5513, column: 4, scope: !17414)
!17420 = !DILocation(line: 5513, column: 7, scope: !17414)
!17421 = !DILocation(line: 5513, column: 3, scope: !17414)
!17422 = !DILocation(line: 5514, column: 6, scope: !17398)
!17423 = !DILocation(line: 5516, column: 23, scope: !17394)
!17424 = !DILocation(line: 5516, column: 26, scope: !17394)
!17425 = !DILocation(line: 5516, column: 4, scope: !17394)
!17426 = !DILocation(line: 5516, column: 21, scope: !17394)
!17427 = !DILocation(line: 5517, column: 2, scope: !17394)
!17428 = !DILocation(line: 5518, column: 16, scope: !17429)
!17429 = distinct !DILexicalBlock(scope: !17389, file: !3, line: 5518, column: 16)
!17430 = !DILocation(line: 5518, column: 19, scope: !17429)
!17431 = !DILocation(line: 5518, column: 16, scope: !17389)
!17432 = !DILocation(line: 5526, column: 9, scope: !17433)
!17433 = distinct !DILexicalBlock(scope: !17434, file: !3, line: 5526, column: 8)
!17434 = distinct !DILexicalBlock(scope: !17429, file: !3, line: 5519, column: 2)
!17435 = !DILocation(line: 5526, column: 23, scope: !17433)
!17436 = !DILocation(line: 5527, column: 9, scope: !17433)
!17437 = !DILocation(line: 5527, column: 28, scope: !17433)
!17438 = !DILocation(line: 5527, column: 13, scope: !17433)
!17439 = !DILocation(line: 5528, column: 8, scope: !17433)
!17440 = !DILocation(line: 5528, column: 11, scope: !17433)
!17441 = !DILocation(line: 5528, column: 25, scope: !17433)
!17442 = !DILocation(line: 5526, column: 8, scope: !17434)
!17443 = !DILocation(line: 5529, column: 33, scope: !17433)
!17444 = !DILocation(line: 5529, column: 37, scope: !17433)
!17445 = !DILocation(line: 5529, column: 40, scope: !17433)
!17446 = !DILocation(line: 5529, column: 50, scope: !17433)
!17447 = !DILocation(line: 5529, column: 53, scope: !17433)
!17448 = !DILocation(line: 5529, column: 6, scope: !17433)
!17449 = !DILocation(line: 5531, column: 8, scope: !17450)
!17450 = distinct !DILexicalBlock(scope: !17434, file: !3, line: 5531, column: 8)
!17451 = !DILocation(line: 5532, column: 8, scope: !17450)
!17452 = !DILocation(line: 5532, column: 28, scope: !17450)
!17453 = !DILocation(line: 5532, column: 11, scope: !17450)
!17454 = !DILocation(line: 5531, column: 8, scope: !17434)
!17455 = !DILocation(line: 5534, column: 19, scope: !17456)
!17456 = distinct !DILexicalBlock(scope: !17450, file: !3, line: 5533, column: 6)
!17457 = !DILocation(line: 5534, column: 8, scope: !17456)
!17458 = !DILocation(line: 5535, column: 29, scope: !17456)
!17459 = !DILocation(line: 5535, column: 28, scope: !17456)
!17460 = !DILocation(line: 5535, column: 8, scope: !17456)
!17461 = !DILocation(line: 5536, column: 8, scope: !17456)
!17462 = !DILocation(line: 5537, column: 6, scope: !17456)
!17463 = !DILocation(line: 5538, column: 2, scope: !17434)
!17464 = !DILocation(line: 5539, column: 8, scope: !17376)
!17465 = !DILocation(line: 5539, column: 22, scope: !17376)
!17466 = !DILocation(line: 5540, column: 5, scope: !17376)
!17467 = !DILocation(line: 5541, column: 12, scope: !17468)
!17468 = distinct !DILexicalBlock(scope: !17369, file: !3, line: 5541, column: 12)
!17469 = !DILocation(line: 5541, column: 12, scope: !17369)
!17470 = !DILocation(line: 5542, column: 6, scope: !17468)
!17471 = !DILocation(line: 5542, column: 20, scope: !17468)
!17472 = !DILocation(line: 5542, column: 5, scope: !17468)
!17473 = !DILocation(line: 5544, column: 3, scope: !17344)
!17474 = distinct !DISubprogram(name: "replace_by_duplicate_decl", scope: !3, file: !3, line: 5400, type: !17475, scopeLine: 5402, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17475 = !DISubroutineType(types: !17476)
!17476 = !{null, !2916, !3584, !2553}
!17477 = !DILocalVariable(name: "tp", arg: 1, scope: !17474, file: !3, line: 5400, type: !2916)
!17478 = !DILocation(line: 5400, column: 34, scope: !17474)
!17479 = !DILocalVariable(name: "vars_map", arg: 2, scope: !17474, file: !3, line: 5400, type: !3584)
!17480 = !DILocation(line: 5400, column: 60, scope: !17474)
!17481 = !DILocalVariable(name: "to_context", arg: 3, scope: !17474, file: !3, line: 5401, type: !2553)
!17482 = !DILocation(line: 5401, column: 12, scope: !17474)
!17483 = !DILocalVariable(name: "t", scope: !17474, file: !3, line: 5403, type: !2553)
!17484 = !DILocation(line: 5403, column: 8, scope: !17474)
!17485 = !DILocation(line: 5403, column: 13, scope: !17474)
!17486 = !DILocation(line: 5403, column: 12, scope: !17474)
!17487 = !DILocalVariable(name: "new_t", scope: !17474, file: !3, line: 5403, type: !2553)
!17488 = !DILocation(line: 5403, column: 17, scope: !17474)
!17489 = !DILocalVariable(name: "f", scope: !17474, file: !3, line: 5404, type: !3356)
!17490 = !DILocation(line: 5404, column: 20, scope: !17474)
!17491 = !DILocation(line: 5404, column: 24, scope: !17474)
!17492 = !DILocalVariable(name: "loc", scope: !17474, file: !3, line: 5405, type: !3462)
!17493 = !DILocation(line: 5405, column: 10, scope: !17474)
!17494 = !DILocation(line: 5407, column: 7, scope: !17495)
!17495 = distinct !DILexicalBlock(scope: !17474, file: !3, line: 5407, column: 7)
!17496 = !DILocation(line: 5407, column: 27, scope: !17495)
!17497 = !DILocation(line: 5407, column: 24, scope: !17495)
!17498 = !DILocation(line: 5407, column: 7, scope: !17474)
!17499 = !DILocation(line: 5408, column: 5, scope: !17495)
!17500 = !DILocation(line: 5410, column: 31, scope: !17474)
!17501 = !DILocation(line: 5410, column: 41, scope: !17474)
!17502 = !DILocation(line: 5410, column: 9, scope: !17474)
!17503 = !DILocation(line: 5410, column: 7, scope: !17474)
!17504 = !DILocation(line: 5412, column: 8, scope: !17505)
!17505 = distinct !DILexicalBlock(scope: !17474, file: !3, line: 5412, column: 7)
!17506 = !DILocation(line: 5412, column: 7, scope: !17474)
!17507 = !DILocation(line: 5414, column: 33, scope: !17508)
!17508 = distinct !DILexicalBlock(scope: !17505, file: !3, line: 5413, column: 5)
!17509 = !DILocation(line: 5414, column: 43, scope: !17508)
!17510 = !DILocation(line: 5414, column: 13, scope: !17508)
!17511 = !DILocation(line: 5414, column: 11, scope: !17508)
!17512 = !DILocation(line: 5416, column: 11, scope: !17513)
!17513 = distinct !DILexicalBlock(scope: !17508, file: !3, line: 5416, column: 11)
!17514 = !DILocation(line: 5416, column: 11, scope: !17508)
!17515 = !DILocation(line: 5418, column: 27, scope: !17516)
!17516 = distinct !DILexicalBlock(scope: !17513, file: !3, line: 5417, column: 2)
!17517 = !DILocation(line: 5418, column: 30, scope: !17516)
!17518 = !DILocation(line: 5418, column: 45, scope: !17516)
!17519 = !DILocation(line: 5418, column: 12, scope: !17516)
!17520 = !DILocation(line: 5418, column: 10, scope: !17516)
!17521 = !DILocation(line: 5419, column: 21, scope: !17516)
!17522 = !DILocation(line: 5419, column: 4, scope: !17516)
!17523 = !DILocation(line: 5419, column: 7, scope: !17516)
!17524 = !DILocation(line: 5419, column: 19, scope: !17516)
!17525 = !DILocation(line: 5420, column: 2, scope: !17516)
!17526 = !DILocation(line: 5423, column: 4, scope: !17527)
!17527 = distinct !DILexicalBlock(scope: !17513, file: !3, line: 5422, column: 2)
!17528 = !DILocation(line: 5424, column: 12, scope: !17527)
!17529 = !DILocation(line: 5424, column: 10, scope: !17527)
!17530 = !DILocation(line: 5426, column: 30, scope: !17508)
!17531 = !DILocation(line: 5426, column: 7, scope: !17508)
!17532 = !DILocation(line: 5426, column: 28, scope: !17508)
!17533 = !DILocation(line: 5428, column: 14, scope: !17508)
!17534 = !DILocation(line: 5428, column: 8, scope: !17508)
!17535 = !DILocation(line: 5428, column: 12, scope: !17508)
!17536 = !DILocation(line: 5429, column: 5, scope: !17508)
!17537 = !DILocation(line: 5431, column: 21, scope: !17505)
!17538 = !DILocation(line: 5431, column: 20, scope: !17505)
!17539 = !DILocation(line: 5431, column: 13, scope: !17505)
!17540 = !DILocation(line: 5431, column: 11, scope: !17505)
!17541 = !DILocation(line: 5433, column: 9, scope: !17474)
!17542 = !DILocation(line: 5433, column: 4, scope: !17474)
!17543 = !DILocation(line: 5433, column: 7, scope: !17474)
!17544 = !DILocation(line: 5434, column: 1, scope: !17474)
!17545 = distinct !DISubprogram(name: "gimple_in_ssa_p", scope: !5827, file: !5827, line: 33, type: !17546, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17546 = !DISubroutineType(types: !17547)
!17547 = !{!2672, !17548}
!17548 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17549, size: 64)
!17549 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3357)
!17550 = !DILocalVariable(name: "fun", arg: 1, scope: !17545, file: !5827, line: 33, type: !17548)
!17551 = !DILocation(line: 33, column: 41, scope: !17545)
!17552 = !DILocation(line: 35, column: 10, scope: !17545)
!17553 = !DILocation(line: 35, column: 14, scope: !17545)
!17554 = !DILocation(line: 35, column: 17, scope: !17545)
!17555 = !DILocation(line: 35, column: 22, scope: !17545)
!17556 = !DILocation(line: 35, column: 32, scope: !17545)
!17557 = !DILocation(line: 35, column: 35, scope: !17545)
!17558 = !DILocation(line: 35, column: 40, scope: !17545)
!17559 = !DILocation(line: 35, column: 51, scope: !17545)
!17560 = !DILocation(line: 0, scope: !17545)
!17561 = !DILocation(line: 35, column: 3, scope: !17545)
!17562 = distinct !DISubprogram(name: "make_ssa_name", scope: !5827, file: !5827, line: 1245, type: !17563, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17563 = !DISubroutineType(types: !17564)
!17564 = !{!2553, !2553, !2882}
!17565 = !DILocalVariable(name: "var", arg: 1, scope: !17562, file: !5827, line: 1245, type: !2553)
!17566 = !DILocation(line: 1245, column: 21, scope: !17562)
!17567 = !DILocalVariable(name: "stmt", arg: 2, scope: !17562, file: !5827, line: 1245, type: !2882)
!17568 = !DILocation(line: 1245, column: 33, scope: !17562)
!17569 = !DILocation(line: 1247, column: 28, scope: !17562)
!17570 = !DILocation(line: 1247, column: 34, scope: !17562)
!17571 = !DILocation(line: 1247, column: 39, scope: !17562)
!17572 = !DILocation(line: 1247, column: 10, scope: !17562)
!17573 = !DILocation(line: 1247, column: 3, scope: !17562)
!17574 = distinct !DISubprogram(name: "link_imm_use", scope: !5827, file: !5827, line: 214, type: !17575, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17575 = !DISubroutineType(types: !17576)
!17576 = !{null, !4053, !2553}
!17577 = !DILocalVariable(name: "linknode", arg: 1, scope: !17574, file: !5827, line: 214, type: !4053)
!17578 = !DILocation(line: 214, column: 34, scope: !17574)
!17579 = !DILocalVariable(name: "def", arg: 2, scope: !17574, file: !5827, line: 214, type: !2553)
!17580 = !DILocation(line: 214, column: 49, scope: !17574)
!17581 = !DILocalVariable(name: "root", scope: !17574, file: !5827, line: 216, type: !4053)
!17582 = !DILocation(line: 216, column: 22, scope: !17574)
!17583 = !DILocation(line: 218, column: 8, scope: !17584)
!17584 = distinct !DILexicalBlock(scope: !17574, file: !5827, line: 218, column: 7)
!17585 = !DILocation(line: 218, column: 12, scope: !17584)
!17586 = !DILocation(line: 218, column: 15, scope: !17584)
!17587 = !DILocation(line: 218, column: 31, scope: !17584)
!17588 = !DILocation(line: 218, column: 7, scope: !17574)
!17589 = !DILocation(line: 219, column: 5, scope: !17584)
!17590 = !DILocation(line: 219, column: 15, scope: !17584)
!17591 = !DILocation(line: 219, column: 20, scope: !17584)
!17592 = !DILocation(line: 222, column: 16, scope: !17593)
!17593 = distinct !DILexicalBlock(scope: !17584, file: !5827, line: 221, column: 5)
!17594 = !DILocation(line: 222, column: 12, scope: !17593)
!17595 = !DILocation(line: 227, column: 29, scope: !17593)
!17596 = !DILocation(line: 227, column: 39, scope: !17593)
!17597 = !DILocation(line: 227, column: 7, scope: !17593)
!17598 = !DILocation(line: 229, column: 1, scope: !17574)
!17599 = distinct !DISubprogram(name: "move_stmt_eh_region_tree_nr", scope: !3, file: !3, line: 5566, type: !17600, scopeLine: 5567, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17600 = !DISubroutineType(types: !17601)
!17601 = !{!2553, !2553, !4108}
!17602 = !DILocalVariable(name: "old_t_nr", arg: 1, scope: !17599, file: !3, line: 5566, type: !2553)
!17603 = !DILocation(line: 5566, column: 35, scope: !17599)
!17604 = !DILocalVariable(name: "p", arg: 2, scope: !17599, file: !3, line: 5566, type: !4108)
!17605 = !DILocation(line: 5566, column: 65, scope: !17599)
!17606 = !DILocalVariable(name: "old_nr", scope: !17599, file: !3, line: 5568, type: !2548)
!17607 = !DILocation(line: 5568, column: 7, scope: !17599)
!17608 = !DILocalVariable(name: "new_nr", scope: !17599, file: !3, line: 5568, type: !2548)
!17609 = !DILocation(line: 5568, column: 15, scope: !17599)
!17610 = !DILocation(line: 5570, column: 26, scope: !17599)
!17611 = !DILocation(line: 5570, column: 12, scope: !17599)
!17612 = !DILocation(line: 5570, column: 10, scope: !17599)
!17613 = !DILocation(line: 5571, column: 36, scope: !17599)
!17614 = !DILocation(line: 5571, column: 44, scope: !17599)
!17615 = !DILocation(line: 5571, column: 12, scope: !17599)
!17616 = !DILocation(line: 5571, column: 10, scope: !17599)
!17617 = !DILocation(line: 5573, column: 31, scope: !17599)
!17618 = !DILocation(line: 5573, column: 10, scope: !17599)
!17619 = !DILocation(line: 5573, column: 3, scope: !17599)
!17620 = distinct !DISubprogram(name: "gimple_call_set_arg", scope: !581, file: !581, line: 2046, type: !5547, scopeLine: 2047, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17621 = !DILocalVariable(name: "gs", arg: 1, scope: !17620, file: !581, line: 2046, type: !2882)
!17622 = !DILocation(line: 2046, column: 29, scope: !17620)
!17623 = !DILocalVariable(name: "index", arg: 2, scope: !17620, file: !581, line: 2046, type: !7)
!17624 = !DILocation(line: 2046, column: 42, scope: !17620)
!17625 = !DILocalVariable(name: "arg", arg: 3, scope: !17620, file: !581, line: 2046, type: !2553)
!17626 = !DILocation(line: 2046, column: 54, scope: !17620)
!17627 = !DILocation(line: 2049, column: 18, scope: !17620)
!17628 = !DILocation(line: 2049, column: 22, scope: !17620)
!17629 = !DILocation(line: 2049, column: 28, scope: !17620)
!17630 = !DILocation(line: 2049, column: 33, scope: !17620)
!17631 = !DILocation(line: 2049, column: 3, scope: !17620)
!17632 = !DILocation(line: 2050, column: 1, scope: !17620)
!17633 = distinct !DISubprogram(name: "gimple_resx_region", scope: !581, file: !581, line: 3121, type: !14312, scopeLine: 3122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17634 = !DILocalVariable(name: "gs", arg: 1, scope: !17633, file: !581, line: 3121, type: !4543)
!17635 = !DILocation(line: 3121, column: 34, scope: !17633)
!17636 = !DILocation(line: 3124, column: 10, scope: !17633)
!17637 = !DILocation(line: 3124, column: 14, scope: !17633)
!17638 = !DILocation(line: 3124, column: 29, scope: !17633)
!17639 = !DILocation(line: 3124, column: 3, scope: !17633)
!17640 = distinct !DISubprogram(name: "move_stmt_eh_region_nr", scope: !3, file: !3, line: 5551, type: !17641, scopeLine: 5552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17641 = !DISubroutineType(types: !17642)
!17642 = !{!2548, !2548, !4108}
!17643 = !DILocalVariable(name: "old_nr", arg: 1, scope: !17640, file: !3, line: 5551, type: !2548)
!17644 = !DILocation(line: 5551, column: 29, scope: !17640)
!17645 = !DILocalVariable(name: "p", arg: 2, scope: !17640, file: !3, line: 5551, type: !4108)
!17646 = !DILocation(line: 5551, column: 57, scope: !17640)
!17647 = !DILocalVariable(name: "old_r", scope: !17640, file: !3, line: 5553, type: !3365)
!17648 = !DILocation(line: 5553, column: 13, scope: !17640)
!17649 = !DILocalVariable(name: "new_r", scope: !17640, file: !3, line: 5553, type: !3365)
!17650 = !DILocation(line: 5553, column: 20, scope: !17640)
!17651 = !DILocalVariable(name: "slot", scope: !17640, file: !3, line: 5554, type: !3462)
!17652 = !DILocation(line: 5554, column: 10, scope: !17640)
!17653 = !DILocation(line: 5556, column: 38, scope: !17640)
!17654 = !DILocation(line: 5556, column: 11, scope: !17640)
!17655 = !DILocation(line: 5556, column: 9, scope: !17640)
!17656 = !DILocation(line: 5557, column: 32, scope: !17640)
!17657 = !DILocation(line: 5557, column: 35, scope: !17640)
!17658 = !DILocation(line: 5557, column: 43, scope: !17640)
!17659 = !DILocation(line: 5557, column: 10, scope: !17640)
!17660 = !DILocation(line: 5557, column: 8, scope: !17640)
!17661 = !DILocation(line: 5558, column: 24, scope: !17640)
!17662 = !DILocation(line: 5558, column: 23, scope: !17640)
!17663 = !DILocation(line: 5558, column: 11, scope: !17640)
!17664 = !DILocation(line: 5558, column: 9, scope: !17640)
!17665 = !DILocation(line: 5560, column: 10, scope: !17640)
!17666 = !DILocation(line: 5560, column: 17, scope: !17640)
!17667 = !DILocation(line: 5560, column: 3, scope: !17640)
!17668 = distinct !DISubprogram(name: "gimple_resx_set_region", scope: !581, file: !581, line: 3130, type: !17669, scopeLine: 3131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17669 = !DISubroutineType(types: !17670)
!17670 = !{null, !2882, !2548}
!17671 = !DILocalVariable(name: "gs", arg: 1, scope: !17668, file: !581, line: 3130, type: !2882)
!17672 = !DILocation(line: 3130, column: 32, scope: !17668)
!17673 = !DILocalVariable(name: "region", arg: 2, scope: !17668, file: !581, line: 3130, type: !2548)
!17674 = !DILocation(line: 3130, column: 40, scope: !17668)
!17675 = !DILocation(line: 3133, column: 31, scope: !17668)
!17676 = !DILocation(line: 3133, column: 3, scope: !17668)
!17677 = !DILocation(line: 3133, column: 7, scope: !17668)
!17678 = !DILocation(line: 3133, column: 22, scope: !17668)
!17679 = !DILocation(line: 3133, column: 29, scope: !17668)
!17680 = !DILocation(line: 3134, column: 1, scope: !17668)
!17681 = distinct !DISubprogram(name: "gimple_eh_dispatch_region", scope: !581, file: !581, line: 3139, type: !14312, scopeLine: 3140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17682 = !DILocalVariable(name: "gs", arg: 1, scope: !17681, file: !581, line: 3139, type: !4543)
!17683 = !DILocation(line: 3139, column: 41, scope: !17681)
!17684 = !DILocation(line: 3142, column: 10, scope: !17681)
!17685 = !DILocation(line: 3142, column: 14, scope: !17681)
!17686 = !DILocation(line: 3142, column: 29, scope: !17681)
!17687 = !DILocation(line: 3142, column: 3, scope: !17681)
!17688 = distinct !DISubprogram(name: "gimple_eh_dispatch_set_region", scope: !581, file: !581, line: 3148, type: !17669, scopeLine: 3149, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17689 = !DILocalVariable(name: "gs", arg: 1, scope: !17688, file: !581, line: 3148, type: !2882)
!17690 = !DILocation(line: 3148, column: 39, scope: !17688)
!17691 = !DILocalVariable(name: "region", arg: 2, scope: !17688, file: !581, line: 3148, type: !2548)
!17692 = !DILocation(line: 3148, column: 47, scope: !17688)
!17693 = !DILocation(line: 3151, column: 31, scope: !17688)
!17694 = !DILocation(line: 3151, column: 3, scope: !17688)
!17695 = !DILocation(line: 3151, column: 7, scope: !17688)
!17696 = !DILocation(line: 3151, column: 22, scope: !17688)
!17697 = !DILocation(line: 3151, column: 29, scope: !17688)
!17698 = !DILocation(line: 3152, column: 1, scope: !17688)
!17699 = distinct !DISubprogram(name: "gimple_omp_body", scope: !581, file: !581, line: 3363, type: !15184, scopeLine: 3364, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17700 = !DILocalVariable(name: "gs", arg: 1, scope: !17699, file: !581, line: 3363, type: !2882)
!17701 = !DILocation(line: 3363, column: 25, scope: !17699)
!17702 = !DILocation(line: 3365, column: 10, scope: !17699)
!17703 = !DILocation(line: 3365, column: 14, scope: !17699)
!17704 = !DILocation(line: 3365, column: 18, scope: !17699)
!17705 = !DILocation(line: 3365, column: 3, scope: !17699)
!17706 = distinct !DISubprogram(name: "is_global_var", scope: !5827, file: !5827, line: 575, type: !6056, scopeLine: 576, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17707 = !DILocalVariable(name: "t", arg: 1, scope: !17706, file: !5827, line: 575, type: !6058)
!17708 = !DILocation(line: 575, column: 27, scope: !17706)
!17709 = !DILocation(line: 577, column: 11, scope: !17706)
!17710 = !DILocation(line: 577, column: 27, scope: !17706)
!17711 = !DILocation(line: 577, column: 30, scope: !17706)
!17712 = !DILocation(line: 577, column: 10, scope: !17706)
!17713 = !DILocation(line: 577, column: 3, scope: !17706)
!17714 = distinct !DISubprogram(name: "set_bb_seq", scope: !581, file: !581, line: 246, type: !17715, scopeLine: 247, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17715 = !DISubroutineType(types: !17716)
!17716 = !{null, !3523, !2872}
!17717 = !DILocalVariable(name: "bb", arg: 1, scope: !17714, file: !581, line: 246, type: !3523)
!17718 = !DILocation(line: 246, column: 25, scope: !17714)
!17719 = !DILocalVariable(name: "seq", arg: 2, scope: !17714, file: !581, line: 246, type: !2872)
!17720 = !DILocation(line: 246, column: 40, scope: !17714)
!17721 = !DILocation(line: 248, column: 3, scope: !17714)
!17722 = !DILocation(line: 249, column: 24, scope: !17714)
!17723 = !DILocation(line: 249, column: 3, scope: !17714)
!17724 = !DILocation(line: 249, column: 7, scope: !17714)
!17725 = !DILocation(line: 249, column: 10, scope: !17714)
!17726 = !DILocation(line: 249, column: 18, scope: !17714)
!17727 = !DILocation(line: 249, column: 22, scope: !17714)
!17728 = !DILocation(line: 250, column: 1, scope: !17714)
!17729 = distinct !DISubprogram(name: "gimple_try_redirect_by_replacing_jump", scope: !3, file: !3, line: 4599, type: !4203, scopeLine: 4600, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17730 = !DILocalVariable(name: "e", arg: 1, scope: !17729, file: !3, line: 4599, type: !2862)
!17731 = !DILocation(line: 4599, column: 45, scope: !17729)
!17732 = !DILocalVariable(name: "target", arg: 2, scope: !17729, file: !3, line: 4599, type: !3523)
!17733 = !DILocation(line: 4599, column: 60, scope: !17729)
!17734 = !DILocalVariable(name: "src", scope: !17729, file: !3, line: 4601, type: !3523)
!17735 = !DILocation(line: 4601, column: 15, scope: !17729)
!17736 = !DILocation(line: 4601, column: 21, scope: !17729)
!17737 = !DILocation(line: 4601, column: 24, scope: !17729)
!17738 = !DILocalVariable(name: "i", scope: !17729, file: !3, line: 4602, type: !4074)
!17739 = !DILocation(line: 4602, column: 24, scope: !17729)
!17740 = !DILocalVariable(name: "stmt", scope: !17729, file: !3, line: 4603, type: !2882)
!17741 = !DILocation(line: 4603, column: 10, scope: !17729)
!17742 = !DILocation(line: 4607, column: 7, scope: !17743)
!17743 = distinct !DILexicalBlock(scope: !17729, file: !3, line: 4607, column: 7)
!17744 = !DILocation(line: 4607, column: 31, scope: !17743)
!17745 = !DILocation(line: 4610, column: 7, scope: !17743)
!17746 = !DILocation(line: 4610, column: 10, scope: !17743)
!17747 = !DILocation(line: 4610, column: 52, scope: !17743)
!17748 = !DILocation(line: 4610, column: 60, scope: !17743)
!17749 = !DILocation(line: 4610, column: 57, scope: !17743)
!17750 = !DILocation(line: 4607, column: 7, scope: !17729)
!17751 = !DILocation(line: 4611, column: 5, scope: !17743)
!17752 = !DILocation(line: 4613, column: 20, scope: !17729)
!17753 = !DILocation(line: 4613, column: 7, scope: !17729)
!17754 = !DILocation(line: 4614, column: 7, scope: !17755)
!17755 = distinct !DILexicalBlock(scope: !17729, file: !3, line: 4614, column: 7)
!17756 = !DILocation(line: 4614, column: 7, scope: !17729)
!17757 = !DILocation(line: 4615, column: 5, scope: !17755)
!17758 = !DILocation(line: 4617, column: 10, scope: !17729)
!17759 = !DILocation(line: 4617, column: 8, scope: !17729)
!17760 = !DILocation(line: 4619, column: 20, scope: !17761)
!17761 = distinct !DILexicalBlock(scope: !17729, file: !3, line: 4619, column: 7)
!17762 = !DILocation(line: 4619, column: 7, scope: !17761)
!17763 = !DILocation(line: 4619, column: 26, scope: !17761)
!17764 = !DILocation(line: 4619, column: 41, scope: !17761)
!17765 = !DILocation(line: 4619, column: 57, scope: !17761)
!17766 = !DILocation(line: 4619, column: 44, scope: !17761)
!17767 = !DILocation(line: 4619, column: 63, scope: !17761)
!17768 = !DILocation(line: 4619, column: 7, scope: !17729)
!17769 = !DILocation(line: 4621, column: 7, scope: !17770)
!17770 = distinct !DILexicalBlock(scope: !17761, file: !3, line: 4620, column: 5)
!17771 = !DILocation(line: 4622, column: 30, scope: !17770)
!17772 = !DILocation(line: 4622, column: 33, scope: !17770)
!17773 = !DILocation(line: 4622, column: 11, scope: !17770)
!17774 = !DILocation(line: 4622, column: 9, scope: !17770)
!17775 = !DILocation(line: 4623, column: 7, scope: !17770)
!17776 = !DILocation(line: 4623, column: 10, scope: !17770)
!17777 = !DILocation(line: 4623, column: 16, scope: !17770)
!17778 = !DILocation(line: 4624, column: 14, scope: !17770)
!17779 = !DILocation(line: 4624, column: 7, scope: !17770)
!17780 = !DILocation(line: 4627, column: 3, scope: !17729)
!17781 = !DILocation(line: 4628, column: 1, scope: !17729)
!17782 = distinct !DISubprogram(name: "get_cases_for_edge", scope: !3, file: !3, line: 877, type: !17783, scopeLine: 878, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17783 = !DISubroutineType(types: !17784)
!17784 = !{!2553, !2862, !2882}
!17785 = !DILocalVariable(name: "e", arg: 1, scope: !17782, file: !3, line: 877, type: !2862)
!17786 = !DILocation(line: 877, column: 26, scope: !17782)
!17787 = !DILocalVariable(name: "t", arg: 2, scope: !17782, file: !3, line: 877, type: !2882)
!17788 = !DILocation(line: 877, column: 36, scope: !17782)
!17789 = !DILocalVariable(name: "slot", scope: !17782, file: !3, line: 879, type: !3462)
!17790 = !DILocation(line: 879, column: 10, scope: !17782)
!17791 = !DILocalVariable(name: "i", scope: !17782, file: !3, line: 880, type: !3027)
!17792 = !DILocation(line: 880, column: 10, scope: !17782)
!17793 = !DILocalVariable(name: "n", scope: !17782, file: !3, line: 880, type: !3027)
!17794 = !DILocation(line: 880, column: 13, scope: !17782)
!17795 = !DILocation(line: 884, column: 8, scope: !17796)
!17796 = distinct !DILexicalBlock(scope: !17782, file: !3, line: 884, column: 7)
!17797 = !DILocation(line: 884, column: 7, scope: !17782)
!17798 = !DILocation(line: 885, column: 5, scope: !17796)
!17799 = !DILocation(line: 887, column: 32, scope: !17782)
!17800 = !DILocation(line: 887, column: 47, scope: !17782)
!17801 = !DILocation(line: 887, column: 10, scope: !17782)
!17802 = !DILocation(line: 887, column: 8, scope: !17782)
!17803 = !DILocation(line: 888, column: 7, scope: !17804)
!17804 = distinct !DILexicalBlock(scope: !17782, file: !3, line: 888, column: 7)
!17805 = !DILocation(line: 888, column: 7, scope: !17782)
!17806 = !DILocation(line: 889, column: 20, scope: !17804)
!17807 = !DILocation(line: 889, column: 19, scope: !17804)
!17808 = !DILocation(line: 889, column: 12, scope: !17804)
!17809 = !DILocation(line: 889, column: 5, scope: !17804)
!17810 = !DILocation(line: 895, column: 33, scope: !17782)
!17811 = !DILocation(line: 895, column: 7, scope: !17782)
!17812 = !DILocation(line: 895, column: 5, scope: !17782)
!17813 = !DILocation(line: 896, column: 10, scope: !17814)
!17814 = distinct !DILexicalBlock(scope: !17782, file: !3, line: 896, column: 3)
!17815 = !DILocation(line: 896, column: 8, scope: !17814)
!17816 = !DILocation(line: 896, column: 15, scope: !17817)
!17817 = distinct !DILexicalBlock(scope: !17814, file: !3, line: 896, column: 3)
!17818 = !DILocation(line: 896, column: 19, scope: !17817)
!17819 = !DILocation(line: 896, column: 17, scope: !17817)
!17820 = !DILocation(line: 896, column: 3, scope: !17814)
!17821 = !DILocalVariable(name: "elt", scope: !17822, file: !3, line: 898, type: !2553)
!17822 = distinct !DILexicalBlock(scope: !17817, file: !3, line: 897, column: 5)
!17823 = !DILocation(line: 898, column: 12, scope: !17822)
!17824 = !DILocation(line: 898, column: 39, scope: !17822)
!17825 = !DILocation(line: 898, column: 42, scope: !17822)
!17826 = !DILocation(line: 898, column: 18, scope: !17822)
!17827 = !DILocalVariable(name: "lab", scope: !17822, file: !3, line: 899, type: !2553)
!17828 = !DILocation(line: 899, column: 12, scope: !17822)
!17829 = !DILocation(line: 899, column: 18, scope: !17822)
!17830 = !DILocalVariable(name: "label_bb", scope: !17822, file: !3, line: 900, type: !3523)
!17831 = !DILocation(line: 900, column: 19, scope: !17822)
!17832 = !DILocation(line: 900, column: 30, scope: !17822)
!17833 = !DILocalVariable(name: "this_edge", scope: !17822, file: !3, line: 901, type: !2862)
!17834 = !DILocation(line: 901, column: 12, scope: !17822)
!17835 = !DILocation(line: 901, column: 35, scope: !17822)
!17836 = !DILocation(line: 901, column: 38, scope: !17822)
!17837 = !DILocation(line: 901, column: 43, scope: !17822)
!17838 = !DILocation(line: 901, column: 24, scope: !17822)
!17839 = !DILocation(line: 905, column: 34, scope: !17822)
!17840 = !DILocation(line: 905, column: 49, scope: !17822)
!17841 = !DILocation(line: 905, column: 14, scope: !17822)
!17842 = !DILocation(line: 905, column: 12, scope: !17822)
!17843 = !DILocation(line: 906, column: 34, scope: !17822)
!17844 = !DILocation(line: 906, column: 33, scope: !17822)
!17845 = !DILocation(line: 906, column: 26, scope: !17822)
!17846 = !DILocation(line: 906, column: 7, scope: !17822)
!17847 = !DILocation(line: 906, column: 24, scope: !17822)
!17848 = !DILocation(line: 907, column: 15, scope: !17822)
!17849 = !DILocation(line: 907, column: 8, scope: !17822)
!17850 = !DILocation(line: 907, column: 13, scope: !17822)
!17851 = !DILocation(line: 908, column: 5, scope: !17822)
!17852 = !DILocation(line: 896, column: 23, scope: !17817)
!17853 = !DILocation(line: 896, column: 3, scope: !17817)
!17854 = distinct !{!17854, !17820, !17855}
!17855 = !DILocation(line: 908, column: 5, scope: !17814)
!17856 = !DILocation(line: 910, column: 40, scope: !17782)
!17857 = !DILocation(line: 910, column: 55, scope: !17782)
!17858 = !DILocation(line: 910, column: 18, scope: !17782)
!17859 = !DILocation(line: 910, column: 17, scope: !17782)
!17860 = !DILocation(line: 910, column: 10, scope: !17782)
!17861 = !DILocation(line: 910, column: 3, scope: !17782)
!17862 = !DILocation(line: 911, column: 1, scope: !17782)
!17863 = distinct !DISubprogram(name: "recording_case_labels_p", scope: !3, file: !3, line: 856, type: !4316, scopeLine: 857, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17864 = !DILocation(line: 858, column: 11, scope: !17863)
!17865 = !DILocation(line: 858, column: 25, scope: !17863)
!17866 = !DILocation(line: 858, column: 10, scope: !17863)
!17867 = !DILocation(line: 858, column: 3, scope: !17863)
!17868 = distinct !DISubprogram(name: "remove_phi_nodes_and_edges_for_unreachable_block", scope: !3, file: !3, line: 1733, type: !4218, scopeLine: 1734, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17869 = !DILocalVariable(name: "bb", arg: 1, scope: !17868, file: !3, line: 1733, type: !3523)
!17870 = !DILocation(line: 1733, column: 63, scope: !17868)
!17871 = !DILocation(line: 1737, column: 21, scope: !17868)
!17872 = !DILocation(line: 1737, column: 3, scope: !17868)
!17873 = !DILocation(line: 1740, column: 3, scope: !17868)
!17874 = !DILocation(line: 1740, column: 10, scope: !17868)
!17875 = !DILocation(line: 1740, column: 33, scope: !17868)
!17876 = !DILocation(line: 1741, column: 18, scope: !17868)
!17877 = !DILocation(line: 1741, column: 5, scope: !17868)
!17878 = distinct !{!17878, !17873, !17879}
!17879 = !DILocation(line: 1741, column: 35, scope: !17868)
!17880 = !DILocation(line: 1742, column: 1, scope: !17868)
!17881 = distinct !DISubprogram(name: "single_pred_p", scope: !382, file: !382, line: 634, type: !4244, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17882 = !DILocalVariable(name: "bb", arg: 1, scope: !17881, file: !382, line: 634, type: !4241)
!17883 = !DILocation(line: 634, column: 34, scope: !17881)
!17884 = !DILocation(line: 636, column: 10, scope: !17881)
!17885 = !DILocation(line: 636, column: 33, scope: !17881)
!17886 = !DILocation(line: 636, column: 3, scope: !17881)
!17887 = distinct !DISubprogram(name: "loops_state_satisfies_p", scope: !337, file: !337, line: 471, type: !17888, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17888 = !DISubroutineType(types: !17889)
!17889 = !{!2672, !7}
!17890 = !DILocalVariable(name: "flags", arg: 1, scope: !17887, file: !337, line: 471, type: !7)
!17891 = !DILocation(line: 471, column: 35, scope: !17887)
!17892 = !DILocation(line: 473, column: 11, scope: !17887)
!17893 = !DILocation(line: 473, column: 26, scope: !17887)
!17894 = !DILocation(line: 473, column: 34, scope: !17887)
!17895 = !DILocation(line: 473, column: 32, scope: !17887)
!17896 = !DILocation(line: 473, column: 44, scope: !17887)
!17897 = !DILocation(line: 473, column: 41, scope: !17887)
!17898 = !DILocation(line: 473, column: 10, scope: !17887)
!17899 = !DILocation(line: 473, column: 3, scope: !17887)
!17900 = distinct !DISubprogram(name: "op_iter_init_def", scope: !5827, file: !5827, line: 780, type: !17901, scopeLine: 781, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17901 = !DISubroutineType(types: !17902)
!17902 = !{!4119, !14599, !2882, !2548}
!17903 = !DILocalVariable(name: "ptr", arg: 1, scope: !17900, file: !5827, line: 780, type: !14599)
!17904 = !DILocation(line: 780, column: 32, scope: !17900)
!17905 = !DILocalVariable(name: "stmt", arg: 2, scope: !17900, file: !5827, line: 780, type: !2882)
!17906 = !DILocation(line: 780, column: 44, scope: !17900)
!17907 = !DILocalVariable(name: "flags", arg: 3, scope: !17900, file: !5827, line: 780, type: !2548)
!17908 = !DILocation(line: 780, column: 54, scope: !17900)
!17909 = !DILocation(line: 782, column: 3, scope: !17900)
!17910 = !DILocation(line: 784, column: 17, scope: !17900)
!17911 = !DILocation(line: 784, column: 22, scope: !17900)
!17912 = !DILocation(line: 784, column: 28, scope: !17900)
!17913 = !DILocation(line: 784, column: 3, scope: !17900)
!17914 = !DILocation(line: 785, column: 3, scope: !17900)
!17915 = !DILocation(line: 785, column: 8, scope: !17900)
!17916 = !DILocation(line: 785, column: 18, scope: !17900)
!17917 = !DILocation(line: 786, column: 28, scope: !17900)
!17918 = !DILocation(line: 786, column: 10, scope: !17900)
!17919 = !DILocation(line: 786, column: 3, scope: !17900)
!17920 = distinct !DISubprogram(name: "op_iter_next_def", scope: !5827, file: !5827, line: 681, type: !17921, scopeLine: 682, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17921 = !DISubroutineType(types: !17922)
!17922 = !{!4119, !14599}
!17923 = !DILocalVariable(name: "ptr", arg: 1, scope: !17920, file: !5827, line: 681, type: !14599)
!17924 = !DILocation(line: 681, column: 32, scope: !17920)
!17925 = !DILocalVariable(name: "def_p", scope: !17920, file: !5827, line: 683, type: !4119)
!17926 = !DILocation(line: 683, column: 17, scope: !17920)
!17927 = !DILocation(line: 687, column: 7, scope: !17928)
!17928 = distinct !DILexicalBlock(scope: !17920, file: !5827, line: 687, column: 7)
!17929 = !DILocation(line: 687, column: 12, scope: !17928)
!17930 = !DILocation(line: 687, column: 7, scope: !17920)
!17931 = !DILocation(line: 689, column: 15, scope: !17932)
!17932 = distinct !DILexicalBlock(scope: !17928, file: !5827, line: 688, column: 5)
!17933 = !DILocation(line: 689, column: 13, scope: !17932)
!17934 = !DILocation(line: 690, column: 19, scope: !17932)
!17935 = !DILocation(line: 690, column: 24, scope: !17932)
!17936 = !DILocation(line: 690, column: 30, scope: !17932)
!17937 = !DILocation(line: 690, column: 7, scope: !17932)
!17938 = !DILocation(line: 690, column: 12, scope: !17932)
!17939 = !DILocation(line: 690, column: 17, scope: !17932)
!17940 = !DILocation(line: 691, column: 14, scope: !17932)
!17941 = !DILocation(line: 691, column: 7, scope: !17932)
!17942 = !DILocation(line: 693, column: 3, scope: !17920)
!17943 = !DILocation(line: 693, column: 8, scope: !17920)
!17944 = !DILocation(line: 693, column: 13, scope: !17920)
!17945 = !DILocation(line: 694, column: 3, scope: !17920)
!17946 = !DILocation(line: 695, column: 1, scope: !17920)
!17947 = distinct !DISubprogram(name: "reinstall_phi_args", scope: !3, file: !3, line: 2411, type: !17948, scopeLine: 2412, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!17948 = !DISubroutineType(types: !17949)
!17949 = !{null, !2862, !2862}
!17950 = !DILocalVariable(name: "new_edge", arg: 1, scope: !17947, file: !3, line: 2411, type: !2862)
!17951 = !DILocation(line: 2411, column: 26, scope: !17947)
!17952 = !DILocalVariable(name: "old_edge", arg: 2, scope: !17947, file: !3, line: 2411, type: !2862)
!17953 = !DILocation(line: 2411, column: 41, scope: !17947)
!17954 = !DILocalVariable(name: "v", scope: !17947, file: !3, line: 2413, type: !17955)
!17955 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_var_map_vector", file: !3308, line: 563, baseType: !17956)
!17956 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17957, size: 64)
!17957 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_var_map_heap", file: !3308, line: 560, baseType: !17958)
!17958 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_var_map_heap", file: !3308, line: 560, size: 256, elements: !17959)
!17959 = !{!17960}
!17960 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !17958, file: !3308, line: 560, baseType: !17961, size: 256)
!17961 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_var_map_base", file: !3308, line: 559, baseType: !17962)
!17962 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_var_map_base", file: !3308, line: 559, size: 256, elements: !17963)
!17963 = !{!17964, !17965, !17966}
!17964 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !17962, file: !3308, line: 559, baseType: !7, size: 32)
!17965 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !17962, file: !3308, line: 559, baseType: !7, size: 32, offset: 32)
!17966 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !17962, file: !3308, line: 559, baseType: !17967, size: 192, offset: 64)
!17967 = !DICompositeType(tag: DW_TAG_array_type, baseType: !17968, size: 192, elements: !2653)
!17968 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_var_map", file: !3308, line: 557, baseType: !17969)
!17969 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_edge_var_map", file: !3308, line: 552, size: 192, elements: !17970)
!17970 = !{!17971, !17972, !17973}
!17971 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !17969, file: !3308, line: 553, baseType: !2553, size: 64)
!17972 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !17969, file: !3308, line: 554, baseType: !2553, size: 64, offset: 64)
!17973 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !17969, file: !3308, line: 555, baseType: !2682, size: 32, offset: 128)
!17974 = !DILocation(line: 2413, column: 23, scope: !17947)
!17975 = !DILocalVariable(name: "vm", scope: !17947, file: !3, line: 2414, type: !17976)
!17976 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17968, size: 64)
!17977 = !DILocation(line: 2414, column: 17, scope: !17947)
!17978 = !DILocalVariable(name: "i", scope: !17947, file: !3, line: 2415, type: !2548)
!17979 = !DILocation(line: 2415, column: 7, scope: !17947)
!17980 = !DILocalVariable(name: "phis", scope: !17947, file: !3, line: 2416, type: !4074)
!17981 = !DILocation(line: 2416, column: 24, scope: !17947)
!17982 = !DILocation(line: 2418, column: 37, scope: !17947)
!17983 = !DILocation(line: 2418, column: 7, scope: !17947)
!17984 = !DILocation(line: 2418, column: 5, scope: !17947)
!17985 = !DILocation(line: 2419, column: 8, scope: !17986)
!17986 = distinct !DILexicalBlock(scope: !17947, file: !3, line: 2419, column: 7)
!17987 = !DILocation(line: 2419, column: 7, scope: !17947)
!17988 = !DILocation(line: 2420, column: 5, scope: !17986)
!17989 = !DILocation(line: 2422, column: 10, scope: !17990)
!17990 = distinct !DILexicalBlock(scope: !17947, file: !3, line: 2422, column: 3)
!17991 = !DILocation(line: 2422, column: 38, scope: !17990)
!17992 = !DILocation(line: 2422, column: 48, scope: !17990)
!17993 = !DILocation(line: 2422, column: 22, scope: !17990)
!17994 = !DILocation(line: 2422, column: 8, scope: !17990)
!17995 = !DILocation(line: 2423, column: 8, scope: !17996)
!17996 = distinct !DILexicalBlock(scope: !17990, file: !3, line: 2422, column: 3)
!17997 = !DILocation(line: 2423, column: 45, scope: !17996)
!17998 = !DILocation(line: 2423, column: 49, scope: !17996)
!17999 = !DILocation(line: 2423, column: 48, scope: !17996)
!18000 = !DILocation(line: 0, scope: !17996)
!18001 = !DILocation(line: 2422, column: 3, scope: !17990)
!18002 = !DILocalVariable(name: "phi", scope: !18003, file: !3, line: 2426, type: !2882)
!18003 = distinct !DILexicalBlock(scope: !17996, file: !3, line: 2425, column: 5)
!18004 = !DILocation(line: 2426, column: 14, scope: !18003)
!18005 = !DILocation(line: 2426, column: 20, scope: !18003)
!18006 = !DILocalVariable(name: "result", scope: !18003, file: !3, line: 2427, type: !2553)
!18007 = !DILocation(line: 2427, column: 12, scope: !18003)
!18008 = !DILocation(line: 2427, column: 51, scope: !18003)
!18009 = !DILocation(line: 2427, column: 21, scope: !18003)
!18010 = !DILocalVariable(name: "arg", scope: !18003, file: !3, line: 2428, type: !2553)
!18011 = !DILocation(line: 2428, column: 12, scope: !18003)
!18012 = !DILocation(line: 2428, column: 45, scope: !18003)
!18013 = !DILocation(line: 2428, column: 18, scope: !18003)
!18014 = !DILocation(line: 2430, column: 7, scope: !18003)
!18015 = !DILocation(line: 2432, column: 20, scope: !18003)
!18016 = !DILocation(line: 2432, column: 25, scope: !18003)
!18017 = !DILocation(line: 2432, column: 30, scope: !18003)
!18018 = !DILocation(line: 2432, column: 72, scope: !18003)
!18019 = !DILocation(line: 2432, column: 40, scope: !18003)
!18020 = !DILocation(line: 2432, column: 7, scope: !18003)
!18021 = !DILocation(line: 2433, column: 5, scope: !18003)
!18022 = !DILocation(line: 2424, column: 9, scope: !17996)
!18023 = !DILocation(line: 2424, column: 13, scope: !17996)
!18024 = !DILocation(line: 2422, column: 3, scope: !17996)
!18025 = distinct !{!18025, !18001, !18026}
!18026 = !DILocation(line: 2433, column: 5, scope: !17990)
!18027 = !DILocation(line: 2435, column: 32, scope: !17947)
!18028 = !DILocation(line: 2435, column: 3, scope: !17947)
!18029 = !DILocation(line: 2436, column: 1, scope: !17947)
!18030 = distinct !DISubprogram(name: "VEC_edge_var_map_base_iterate", scope: !3308, file: !3308, line: 559, type: !18031, scopeLine: 559, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!18031 = !DISubroutineType(types: !18032)
!18032 = !{!2548, !18033, !7, !18034}
!18033 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17961, size: 64)
!18034 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17976, size: 64)
!18035 = !DILocalVariable(name: "vec_", arg: 1, scope: !18030, file: !3308, line: 559, type: !18033)
!18036 = !DILocation(line: 559, column: 1, scope: !18030)
!18037 = !DILocalVariable(name: "ix_", arg: 2, scope: !18030, file: !3308, line: 559, type: !7)
!18038 = !DILocalVariable(name: "ptr", arg: 3, scope: !18030, file: !3308, line: 559, type: !18034)
!18039 = !DILocation(line: 559, column: 1, scope: !18040)
!18040 = distinct !DILexicalBlock(scope: !18030, file: !3308, line: 559, column: 1)
!18041 = !DILocation(line: 559, column: 1, scope: !18042)
!18042 = distinct !DILexicalBlock(scope: !18040, file: !3308, line: 559, column: 1)
!18043 = !DILocation(line: 559, column: 1, scope: !18044)
!18044 = distinct !DILexicalBlock(scope: !18040, file: !3308, line: 559, column: 1)
!18045 = distinct !DISubprogram(name: "redirect_edge_var_map_result", scope: !5827, file: !5827, line: 1227, type: !18046, scopeLine: 1228, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!18046 = !DISubroutineType(types: !18047)
!18047 = !{!2553, !17976}
!18048 = !DILocalVariable(name: "v", arg: 1, scope: !18045, file: !5827, line: 1227, type: !17976)
!18049 = !DILocation(line: 1227, column: 45, scope: !18045)
!18050 = !DILocation(line: 1229, column: 10, scope: !18045)
!18051 = !DILocation(line: 1229, column: 13, scope: !18045)
!18052 = !DILocation(line: 1229, column: 3, scope: !18045)
!18053 = distinct !DISubprogram(name: "redirect_edge_var_map_def", scope: !5827, file: !5827, line: 1219, type: !18046, scopeLine: 1220, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!18054 = !DILocalVariable(name: "v", arg: 1, scope: !18053, file: !5827, line: 1219, type: !17976)
!18055 = !DILocation(line: 1219, column: 42, scope: !18053)
!18056 = !DILocation(line: 1221, column: 10, scope: !18053)
!18057 = !DILocation(line: 1221, column: 13, scope: !18053)
!18058 = !DILocation(line: 1221, column: 3, scope: !18053)
!18059 = distinct !DISubprogram(name: "redirect_edge_var_map_location", scope: !5827, file: !5827, line: 1235, type: !18060, scopeLine: 1236, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!18060 = !DISubroutineType(types: !18061)
!18061 = !{!2682, !17976}
!18062 = !DILocalVariable(name: "v", arg: 1, scope: !18059, file: !5827, line: 1235, type: !17976)
!18063 = !DILocation(line: 1235, column: 47, scope: !18059)
!18064 = !DILocation(line: 1237, column: 10, scope: !18059)
!18065 = !DILocation(line: 1237, column: 13, scope: !18059)
!18066 = !DILocation(line: 1237, column: 3, scope: !18059)
!18067 = distinct !DISubprogram(name: "gimple_phi_set_result", scope: !581, file: !581, line: 3089, type: !5117, scopeLine: 3090, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!18068 = !DILocalVariable(name: "gs", arg: 1, scope: !18067, file: !581, line: 3089, type: !2882)
!18069 = !DILocation(line: 3089, column: 31, scope: !18067)
!18070 = !DILocalVariable(name: "result", arg: 2, scope: !18067, file: !581, line: 3089, type: !2553)
!18071 = !DILocation(line: 3089, column: 40, scope: !18067)
!18072 = !DILocation(line: 3092, column: 27, scope: !18067)
!18073 = !DILocation(line: 3092, column: 3, scope: !18067)
!18074 = !DILocation(line: 3092, column: 7, scope: !18067)
!18075 = !DILocation(line: 3092, column: 18, scope: !18067)
!18076 = !DILocation(line: 3092, column: 25, scope: !18067)
!18077 = !DILocation(line: 3093, column: 1, scope: !18067)
!18078 = distinct !DISubprogram(name: "need_fake_edge_p", scope: !3, file: !3, line: 6483, type: !5223, scopeLine: 6484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!18079 = !DILocalVariable(name: "t", arg: 1, scope: !18078, file: !3, line: 6483, type: !2882)
!18080 = !DILocation(line: 6483, column: 26, scope: !18078)
!18081 = !DILocalVariable(name: "fndecl", scope: !18078, file: !3, line: 6485, type: !2553)
!18082 = !DILocation(line: 6485, column: 8, scope: !18078)
!18083 = !DILocalVariable(name: "call_flags", scope: !18078, file: !3, line: 6486, type: !2548)
!18084 = !DILocation(line: 6486, column: 7, scope: !18078)
!18085 = !DILocation(line: 6495, column: 23, scope: !18086)
!18086 = distinct !DILexicalBlock(scope: !18078, file: !3, line: 6495, column: 7)
!18087 = !DILocation(line: 6495, column: 7, scope: !18086)
!18088 = !DILocation(line: 6495, column: 7, scope: !18078)
!18089 = !DILocation(line: 6497, column: 36, scope: !18090)
!18090 = distinct !DILexicalBlock(scope: !18086, file: !3, line: 6496, column: 5)
!18091 = !DILocation(line: 6497, column: 16, scope: !18090)
!18092 = !DILocation(line: 6497, column: 14, scope: !18090)
!18093 = !DILocation(line: 6498, column: 39, scope: !18090)
!18094 = !DILocation(line: 6498, column: 20, scope: !18090)
!18095 = !DILocation(line: 6498, column: 18, scope: !18090)
!18096 = !DILocation(line: 6499, column: 5, scope: !18090)
!18097 = !DILocation(line: 6501, column: 23, scope: !18098)
!18098 = distinct !DILexicalBlock(scope: !18078, file: !3, line: 6501, column: 7)
!18099 = !DILocation(line: 6501, column: 7, scope: !18098)
!18100 = !DILocation(line: 6502, column: 7, scope: !18098)
!18101 = !DILocation(line: 6502, column: 10, scope: !18098)
!18102 = !DILocation(line: 6503, column: 7, scope: !18098)
!18103 = !DILocation(line: 6503, column: 10, scope: !18098)
!18104 = !DILocation(line: 6504, column: 7, scope: !18098)
!18105 = !DILocation(line: 6504, column: 11, scope: !18098)
!18106 = !DILocation(line: 6504, column: 22, scope: !18098)
!18107 = !DILocation(line: 6505, column: 7, scope: !18098)
!18108 = !DILocation(line: 6505, column: 12, scope: !18098)
!18109 = !DILocation(line: 6505, column: 23, scope: !18098)
!18110 = !DILocation(line: 6510, column: 7, scope: !18098)
!18111 = !DILocation(line: 6510, column: 12, scope: !18098)
!18112 = !DILocation(line: 6510, column: 41, scope: !18098)
!18113 = !DILocation(line: 6511, column: 5, scope: !18098)
!18114 = !DILocation(line: 6511, column: 8, scope: !18098)
!18115 = !DILocation(line: 6511, column: 36, scope: !18098)
!18116 = !DILocation(line: 6501, column: 7, scope: !18078)
!18117 = !DILocation(line: 6512, column: 5, scope: !18098)
!18118 = !DILocation(line: 6514, column: 23, scope: !18119)
!18119 = distinct !DILexicalBlock(scope: !18078, file: !3, line: 6514, column: 7)
!18120 = !DILocation(line: 6514, column: 7, scope: !18119)
!18121 = !DILocation(line: 6515, column: 7, scope: !18119)
!18122 = !DILocation(line: 6515, column: 12, scope: !18119)
!18123 = !DILocation(line: 6515, column: 23, scope: !18119)
!18124 = !DILocation(line: 6514, column: 7, scope: !18078)
!18125 = !DILocation(line: 6516, column: 5, scope: !18119)
!18126 = !DILocation(line: 6518, column: 20, scope: !18127)
!18127 = distinct !DILexicalBlock(scope: !18078, file: !3, line: 6518, column: 7)
!18128 = !DILocation(line: 6518, column: 7, scope: !18127)
!18129 = !DILocation(line: 6518, column: 23, scope: !18127)
!18130 = !DILocation(line: 6519, column: 8, scope: !18127)
!18131 = !DILocation(line: 6519, column: 35, scope: !18127)
!18132 = !DILocation(line: 6519, column: 12, scope: !18127)
!18133 = !DILocation(line: 6519, column: 38, scope: !18127)
!18134 = !DILocation(line: 6519, column: 61, scope: !18127)
!18135 = !DILocation(line: 6519, column: 41, scope: !18127)
!18136 = !DILocation(line: 6518, column: 7, scope: !18078)
!18137 = !DILocation(line: 6520, column: 5, scope: !18127)
!18138 = !DILocation(line: 6522, column: 3, scope: !18078)
!18139 = !DILocation(line: 6523, column: 1, scope: !18078)
!18140 = distinct !DISubprogram(name: "gimple_asm_volatile_p", scope: !581, file: !581, line: 2739, type: !5609, scopeLine: 2740, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!18141 = !DILocalVariable(name: "gs", arg: 1, scope: !18140, file: !581, line: 2739, type: !4543)
!18142 = !DILocation(line: 2739, column: 37, scope: !18140)
!18143 = !DILocation(line: 2742, column: 11, scope: !18140)
!18144 = !DILocation(line: 2742, column: 15, scope: !18140)
!18145 = !DILocation(line: 2742, column: 22, scope: !18140)
!18146 = !DILocation(line: 2742, column: 30, scope: !18140)
!18147 = !DILocation(line: 2742, column: 49, scope: !18140)
!18148 = !DILocation(line: 2742, column: 10, scope: !18140)
!18149 = !DILocation(line: 2742, column: 3, scope: !18140)
!18150 = distinct !DISubprogram(name: "gimple_asm_input_p", scope: !581, file: !581, line: 2775, type: !5609, scopeLine: 2776, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!18151 = !DILocalVariable(name: "gs", arg: 1, scope: !18150, file: !581, line: 2775, type: !4543)
!18152 = !DILocation(line: 2775, column: 34, scope: !18150)
!18153 = !DILocation(line: 2778, column: 11, scope: !18150)
!18154 = !DILocation(line: 2778, column: 15, scope: !18150)
!18155 = !DILocation(line: 2778, column: 22, scope: !18150)
!18156 = !DILocation(line: 2778, column: 30, scope: !18150)
!18157 = !DILocation(line: 2778, column: 46, scope: !18150)
!18158 = !DILocation(line: 2778, column: 10, scope: !18150)
!18159 = !DILocation(line: 2778, column: 3, scope: !18150)
!18160 = distinct !DISubprogram(name: "gimple_no_warning_p", scope: !581, file: !581, line: 1201, type: !5609, scopeLine: 1202, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!18161 = !DILocalVariable(name: "stmt", arg: 1, scope: !18160, file: !581, line: 1201, type: !4543)
!18162 = !DILocation(line: 1201, column: 35, scope: !18160)
!18163 = !DILocation(line: 1203, column: 10, scope: !18160)
!18164 = !DILocation(line: 1203, column: 16, scope: !18160)
!18165 = !DILocation(line: 1203, column: 23, scope: !18160)
!18166 = !DILocation(line: 1203, column: 3, scope: !18160)
!18167 = distinct !DISubprogram(name: "do_warn_unused_result", scope: !3, file: !3, line: 7231, type: !7179, scopeLine: 7232, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4182)
!18168 = !DILocalVariable(name: "seq", arg: 1, scope: !18167, file: !3, line: 7231, type: !2872)
!18169 = !DILocation(line: 7231, column: 35, scope: !18167)
!18170 = !DILocalVariable(name: "fdecl", scope: !18167, file: !3, line: 7233, type: !2553)
!18171 = !DILocation(line: 7233, column: 8, scope: !18167)
!18172 = !DILocalVariable(name: "ftype", scope: !18167, file: !3, line: 7233, type: !2553)
!18173 = !DILocation(line: 7233, column: 15, scope: !18167)
!18174 = !DILocalVariable(name: "i", scope: !18167, file: !3, line: 7234, type: !4074)
!18175 = !DILocation(line: 7234, column: 24, scope: !18167)
!18176 = !DILocation(line: 7236, column: 23, scope: !18177)
!18177 = distinct !DILexicalBlock(scope: !18167, file: !3, line: 7236, column: 3)
!18178 = !DILocation(line: 7236, column: 12, scope: !18177)
!18179 = !DILocation(line: 7236, column: 8, scope: !18177)
!18180 = !DILocation(line: 7236, column: 30, scope: !18181)
!18181 = distinct !DILexicalBlock(scope: !18177, file: !3, line: 7236, column: 3)
!18182 = !DILocation(line: 7236, column: 29, scope: !18181)
!18183 = !DILocation(line: 7236, column: 3, scope: !18177)
!18184 = !DILocalVariable(name: "g", scope: !18185, file: !3, line: 7238, type: !2882)
!18185 = distinct !DILexicalBlock(scope: !18181, file: !3, line: 7237, column: 5)
!18186 = !DILocation(line: 7238, column: 14, scope: !18185)
!18187 = !DILocation(line: 7238, column: 18, scope: !18185)
!18188 = !DILocation(line: 7240, column: 28, scope: !18185)
!18189 = !DILocation(line: 7240, column: 15, scope: !18185)
!18190 = !DILocation(line: 7240, column: 7, scope: !18185)
!18191 = !DILocation(line: 7243, column: 45, scope: !18192)
!18192 = distinct !DILexicalBlock(scope: !18185, file: !3, line: 7241, column: 2)
!18193 = !DILocation(line: 7243, column: 27, scope: !18192)
!18194 = !DILocation(line: 7243, column: 4, scope: !18192)
!18195 = !DILocation(line: 7244, column: 4, scope: !18192)
!18196 = !DILocation(line: 7246, column: 44, scope: !18192)
!18197 = !DILocation(line: 7246, column: 27, scope: !18192)
!18198 = !DILocation(line: 7246, column: 4, scope: !18192)
!18199 = !DILocation(line: 7247, column: 47, scope: !18192)
!18200 = !DILocation(line: 7247, column: 27, scope: !18192)
!18201 = !DILocation(line: 7247, column: 4, scope: !18192)
!18202 = !DILocation(line: 7248, column: 4, scope: !18192)
!18203 = !DILocation(line: 7250, column: 49, scope: !18192)
!18204 = !DILocation(line: 7250, column: 27, scope: !18192)
!18205 = !DILocation(line: 7250, column: 4, scope: !18192)
!18206 = !DILocation(line: 7251, column: 4, scope: !18192)
!18207 = !DILocation(line: 7253, column: 53, scope: !18192)
!18208 = !DILocation(line: 7253, column: 27, scope: !18192)
!18209 = !DILocation(line: 7253, column: 4, scope: !18192)
!18210 = !DILocation(line: 7254, column: 4, scope: !18192)
!18211 = !DILocation(line: 7257, column: 25, scope: !18212)
!18212 = distinct !DILexicalBlock(scope: !18192, file: !3, line: 7257, column: 8)
!18213 = !DILocation(line: 7257, column: 8, scope: !18212)
!18214 = !DILocation(line: 7257, column: 8, scope: !18192)
!18215 = !DILocation(line: 7258, column: 6, scope: !18212)
!18216 = !DILocation(line: 7263, column: 32, scope: !18192)
!18217 = !DILocation(line: 7263, column: 12, scope: !18192)
!18218 = !DILocation(line: 7263, column: 10, scope: !18192)
!18219 = !DILocation(line: 7264, column: 12, scope: !18192)
!18220 = !DILocation(line: 7264, column: 10, scope: !18192)
!18221 = !DILocation(line: 7266, column: 48, scope: !18222)
!18222 = distinct !DILexicalBlock(scope: !18192, file: !3, line: 7266, column: 8)
!18223 = !DILocation(line: 7266, column: 8, scope: !18222)
!18224 = !DILocation(line: 7266, column: 8, scope: !18192)
!18225 = !DILocalVariable(name: "loc", scope: !18226, file: !3, line: 7268, type: !2680)
!18226 = distinct !DILexicalBlock(scope: !18222, file: !3, line: 7267, column: 6)
!18227 = !DILocation(line: 7268, column: 19, scope: !18226)
!18228 = !DILocation(line: 7268, column: 42, scope: !18226)
!18229 = !DILocation(line: 7268, column: 25, scope: !18226)
!18230 = !DILocation(line: 7270, column: 12, scope: !18231)
!18231 = distinct !DILexicalBlock(scope: !18226, file: !3, line: 7270, column: 12)
!18232 = !DILocation(line: 7270, column: 12, scope: !18226)
!18233 = !DILocation(line: 7271, column: 15, scope: !18231)
!18234 = !DILocation(line: 7274, column: 8, scope: !18231)
!18235 = !DILocation(line: 7271, column: 3, scope: !18231)
!18236 = !DILocation(line: 7276, column: 15, scope: !18231)
!18237 = !DILocation(line: 7276, column: 3, scope: !18231)
!18238 = !DILocation(line: 7279, column: 6, scope: !18226)
!18239 = !DILocation(line: 7280, column: 4, scope: !18192)
!18240 = !DILocation(line: 7284, column: 4, scope: !18192)
!18241 = !DILocation(line: 7286, column: 5, scope: !18185)
!18242 = !DILocation(line: 7236, column: 45, scope: !18181)
!18243 = !DILocation(line: 7236, column: 3, scope: !18181)
!18244 = distinct !{!18244, !18183, !18245}
!18245 = !DILocation(line: 7286, column: 5, scope: !18177)
!18246 = !DILocation(line: 7287, column: 1, scope: !18167)
