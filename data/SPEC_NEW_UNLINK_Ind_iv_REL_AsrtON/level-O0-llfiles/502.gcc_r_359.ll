; ModuleID = 'tree-ssa-loop-niter.c'
source_filename = "tree-ssa-loop-niter.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.tree_niter_desc = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.double_int, %struct.affine_iv, %union.tree_node*, i32 }
%struct.affine_iv = type { %union.tree_node*, %union.tree_node*, i8 }
%struct.expanded_location = type { i8*, i32, i32, i8 }
%struct.bounds = type { [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct] }
%struct.__mpz_struct = type { i32, i32, i64* }
%struct.VEC_edge_heap = type { %struct.VEC_edge_base }
%struct.loop_iterator = type { %struct.VEC_int_heap*, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.ilb_data = type { %struct.loop*, %union.gimple_statement_d*, i8 }

@tree_code_type = external dso_local constant [0 x i32], align 4
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@optimize = external dso_local global i32, align 4
@flag_unsafe_loop_optimizations = external dso_local global i32, align 4
@.str = private unnamed_addr constant [39 x i8] c"assuming that the loop is not infinite\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"cannot optimize possibly infinite loops\00", align 1
@.str.2 = private unnamed_addr constant [49 x i8] c"assuming that the loop counter does not overflow\00", align 1
@.str.3 = private unnamed_addr constant [52 x i8] c"cannot optimize loop, the loop counter may overflow\00", align 1
@input_location = external dso_local global i32, align 4
@.str.4 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@integer_types = external dso_local global [11 x %union.tree_node*], align 16
@chrec_dont_know = external dso_local global %union.tree_node*, align 8
@current_function_decl = external dso_local global %union.tree_node*, align 8
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@dump_flags = external dso_local global i32, align 4
@.str.5 = private unnamed_addr constant [66 x i8] c"Found loop %i to be finite: it is within pure or const function.\0A\00", align 1
@.str.6 = private unnamed_addr constant [39 x i8] c"Found loop %i to be finite: iterating \00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c" times\0A\00", align 1
@compiler_params = external dso_local global %struct.param_info*, align 8
@.str.8 = private unnamed_addr constant [58 x i8] c"Proved that loop %d iterates %d times using brute force.\0A\00", align 1
@flag_expensive_optimizations = external dso_local global i32, align 4
@.str.9 = private unnamed_addr constant [22 x i8] c"tree-ssa-loop-niter.c\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@flag_wrapv = external dso_local global i32, align 4
@flag_trapv = external dso_local global i32, align 4
@flag_strict_overflow = external dso_local global i32, align 4
@tree_code_length = external dso_local constant [0 x i8], align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@.str.12 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@.str.13 = private unnamed_addr constant [38 x i8] c"Analyzing # of iterations of loop %d\0A\00", align 1
@.str.14 = private unnamed_addr constant [18 x i8] c"  exit condition \00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c" %s \00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"!=\00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"<=\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.20 = private unnamed_addr constant [34 x i8] c"  bounds on difference of bases: \00", align 1
@.str.21 = private unnamed_addr constant [6 x i8] c" ... \00", align 1
@.str.22 = private unnamed_addr constant [11 x i8] c"  result:\0A\00", align 1
@.str.23 = private unnamed_addr constant [23 x i8] c"    under assumptions \00", align 1
@.str.24 = private unnamed_addr constant [13 x i8] c"    zero if \00", align 1
@.str.25 = private unnamed_addr constant [21 x i8] c"    # of iterations \00", align 1
@.str.26 = private unnamed_addr constant [14 x i8] c", bounded by \00", align 1
@.str.27 = private unnamed_addr constant [11 x i8] c"  failed\0A\0A\00", align 1
@cfun = external dso_local global %struct.function*, align 8
@.str.28 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.29 = private unnamed_addr constant [7 x i8] c", + , \00", align 1
@.str.30 = private unnamed_addr constant [4 x i8] c"]%s\00", align 1
@.str.31 = private unnamed_addr constant [14 x i8] c"(no_overflow)\00", align 1
@.str.32 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@sizetype_tab = external dso_local global [4 x %union.tree_node*], align 16
@.str.33 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@.str.34 = private unnamed_addr constant [13 x i8] c"Statement %s\00", align 1
@.str.35 = private unnamed_addr constant [7 x i8] c"(exit)\00", align 1
@.str.36 = private unnamed_addr constant [24 x i8] c" is %sexecuted at most \00", align 1
@.str.37 = private unnamed_addr constant [10 x i8] c"probably \00", align 1
@.str.38 = private unnamed_addr constant [14 x i8] c" (bounded by \00", align 1
@.str.39 = private unnamed_addr constant [25 x i8] c") + 1 times in loop %d.\0A\00", align 1
@.str.40 = private unnamed_addr constant [21 x i8] c"Induction variable (\00", align 1
@.str.41 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.42 = private unnamed_addr constant [4 x i8] c" + \00", align 1
@.str.43 = private unnamed_addr constant [41 x i8] c" * iteration does not wrap in statement \00", align 1
@.str.44 = private unnamed_addr constant [14 x i8] c" in loop %d.\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @expand_simple_operations(%union.tree_node* %expr) #0 !dbg !3072 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %ret = alloca %union.tree_node*, align 8
  %e = alloca %union.tree_node*, align 8
  %ee = alloca %union.tree_node*, align 8
  %e1 = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %stmt = alloca %union.gimple_statement_d*, align 8
  %src = alloca %struct.basic_block_def*, align 8
  %dest = alloca %struct.basic_block_def*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !3076, metadata !DIExpression()), !dbg !3077
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3078, metadata !DIExpression()), !dbg !3079
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3080, metadata !DIExpression()), !dbg !3081
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !3082, metadata !DIExpression()), !dbg !3083
  store %union.tree_node* null, %union.tree_node** %ret, align 8, !dbg !3083
  call void @llvm.dbg.declare(metadata %union.tree_node** %e, metadata !3084, metadata !DIExpression()), !dbg !3085
  call void @llvm.dbg.declare(metadata %union.tree_node** %ee, metadata !3086, metadata !DIExpression()), !dbg !3087
  call void @llvm.dbg.declare(metadata %union.tree_node** %e1, metadata !3088, metadata !DIExpression()), !dbg !3089
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3090, metadata !DIExpression()), !dbg !3091
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !3092, metadata !DIExpression()), !dbg !3093
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3094
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !3096
  br i1 %cmp, label %if.then, label %if.end, !dbg !3097

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3098
  store %union.tree_node* %1, %union.tree_node** %retval, align 8, !dbg !3099
  br label %return, !dbg !3099

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3100
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %2), !dbg !3102
  %tobool = icmp ne i8 %call, 0, !dbg !3102
  br i1 %tobool, label %if.then1, label %if.end2, !dbg !3103

if.then1:                                         ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3104
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !3105
  br label %return, !dbg !3105

if.end2:                                          ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3106
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !3106
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !3106
  %bf.load = load i64, i64* %5, align 8, !dbg !3106
  %bf.clear = and i64 %bf.load, 65535, !dbg !3106
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3106
  store i32 %bf.cast, i32* %code, align 4, !dbg !3107
  %6 = load i32, i32* %code, align 4, !dbg !3108
  %idxprom = sext i32 %6 to i64, !dbg !3108
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3108
  %7 = load i32, i32* %arrayidx, align 4, !dbg !3108
  %cmp3 = icmp uge i32 %7, 4, !dbg !3108
  br i1 %cmp3, label %land.lhs.true, label %if.end28, !dbg !3108

land.lhs.true:                                    ; preds = %if.end2
  %8 = load i32, i32* %code, align 4, !dbg !3108
  %idxprom4 = sext i32 %8 to i64, !dbg !3108
  %arrayidx5 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom4, !dbg !3108
  %9 = load i32, i32* %arrayidx5, align 4, !dbg !3108
  %cmp6 = icmp ule i32 %9, 10, !dbg !3108
  br i1 %cmp6, label %if.then7, label %if.end28, !dbg !3110

if.then7:                                         ; preds = %land.lhs.true
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3111
  %call8 = call i32 @tree_operand_length(%union.tree_node* %10), !dbg !3111
  store i32 %call8, i32* %n, align 4, !dbg !3113
  store i32 0, i32* %i, align 4, !dbg !3114
  br label %for.cond, !dbg !3116

for.cond:                                         ; preds = %for.inc, %if.then7
  %11 = load i32, i32* %i, align 4, !dbg !3117
  %12 = load i32, i32* %n, align 4, !dbg !3119
  %cmp9 = icmp ult i32 %11, %12, !dbg !3120
  br i1 %cmp9, label %for.body, label %for.end, !dbg !3121

for.body:                                         ; preds = %for.cond
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3122
  %exp = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !3122
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3122
  %14 = load i32, i32* %i, align 4, !dbg !3122
  %idxprom10 = zext i32 %14 to i64, !dbg !3122
  %arrayidx11 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 %idxprom10, !dbg !3122
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx11, align 8, !dbg !3122
  store %union.tree_node* %15, %union.tree_node** %e, align 8, !dbg !3124
  %16 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !3125
  %call12 = call %union.tree_node* @expand_simple_operations(%union.tree_node* %16), !dbg !3126
  store %union.tree_node* %call12, %union.tree_node** %ee, align 8, !dbg !3127
  %17 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !3128
  %18 = load %union.tree_node*, %union.tree_node** %ee, align 8, !dbg !3130
  %cmp13 = icmp eq %union.tree_node* %17, %18, !dbg !3131
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !3132

if.then14:                                        ; preds = %for.body
  br label %for.inc, !dbg !3133

if.end15:                                         ; preds = %for.body
  %19 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !3134
  %tobool16 = icmp ne %union.tree_node* %19, null, !dbg !3134
  br i1 %tobool16, label %if.end19, label %if.then17, !dbg !3136

if.then17:                                        ; preds = %if.end15
  %20 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3137
  %call18 = call %union.tree_node* @copy_node_stat(%union.tree_node* %20), !dbg !3137
  store %union.tree_node* %call18, %union.tree_node** %ret, align 8, !dbg !3138
  br label %if.end19, !dbg !3139

if.end19:                                         ; preds = %if.then17, %if.end15
  %21 = load %union.tree_node*, %union.tree_node** %ee, align 8, !dbg !3140
  %22 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !3141
  %exp20 = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !3141
  %operands21 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp20, i32 0, i32 3, !dbg !3141
  %23 = load i32, i32* %i, align 4, !dbg !3141
  %idxprom22 = zext i32 %23 to i64, !dbg !3141
  %arrayidx23 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands21, i64 0, i64 %idxprom22, !dbg !3141
  store %union.tree_node* %21, %union.tree_node** %arrayidx23, align 8, !dbg !3142
  br label %for.inc, !dbg !3143

for.inc:                                          ; preds = %if.end19, %if.then14
  %24 = load i32, i32* %i, align 4, !dbg !3144
  %inc = add i32 %24, 1, !dbg !3144
  store i32 %inc, i32* %i, align 4, !dbg !3144
  br label %for.cond, !dbg !3145, !llvm.loop !3146

for.end:                                          ; preds = %for.cond
  %25 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !3148
  %tobool24 = icmp ne %union.tree_node* %25, null, !dbg !3148
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !3150

if.then25:                                        ; preds = %for.end
  %26 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3151
  store %union.tree_node* %26, %union.tree_node** %retval, align 8, !dbg !3152
  br label %return, !dbg !3152

if.end26:                                         ; preds = %for.end
  call void @fold_defer_overflow_warnings(), !dbg !3153
  %27 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !3154
  %call27 = call %union.tree_node* @fold(%union.tree_node* %27), !dbg !3155
  store %union.tree_node* %call27, %union.tree_node** %ret, align 8, !dbg !3156
  call void @fold_undefer_and_ignore_overflow_warnings(), !dbg !3157
  %28 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !3158
  store %union.tree_node* %28, %union.tree_node** %retval, align 8, !dbg !3159
  br label %return, !dbg !3159

if.end28:                                         ; preds = %land.lhs.true, %if.end2
  %29 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3160
  %base29 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !3160
  %30 = bitcast %struct.tree_base* %base29 to i64*, !dbg !3160
  %bf.load30 = load i64, i64* %30, align 8, !dbg !3160
  %bf.clear31 = and i64 %bf.load30, 65535, !dbg !3160
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !3160
  %cmp33 = icmp ne i32 %bf.cast32, 141, !dbg !3162
  br i1 %cmp33, label %if.then34, label %if.end35, !dbg !3163

if.then34:                                        ; preds = %if.end28
  %31 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3164
  store %union.tree_node* %31, %union.tree_node** %retval, align 8, !dbg !3165
  br label %return, !dbg !3165

if.end35:                                         ; preds = %if.end28
  %32 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3166
  %ssa_name = bitcast %union.tree_node* %32 to %struct.tree_ssa_name*, !dbg !3166
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !3166
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3166
  store %union.gimple_statement_d* %33, %union.gimple_statement_d** %stmt, align 8, !dbg !3167
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3168
  %call36 = call i32 @gimple_code(%union.gimple_statement_d* %34), !dbg !3170
  %cmp37 = icmp eq i32 %call36, 16, !dbg !3171
  br i1 %cmp37, label %if.then38, label %if.end58, !dbg !3172

if.then38:                                        ; preds = %if.end35
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %src, metadata !3173, metadata !DIExpression()), !dbg !3175
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest, metadata !3176, metadata !DIExpression()), !dbg !3177
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3178
  %call39 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %35), !dbg !3180
  %cmp40 = icmp ne i32 %call39, 1, !dbg !3181
  br i1 %cmp40, label %if.then41, label %if.end42, !dbg !3182

if.then41:                                        ; preds = %if.then38
  %36 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3183
  store %union.tree_node* %36, %union.tree_node** %retval, align 8, !dbg !3184
  br label %return, !dbg !3184

if.end42:                                         ; preds = %if.then38
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3185
  %call43 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %37, i32 0), !dbg !3185
  %call44 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call43), !dbg !3185
  store %union.tree_node* %call44, %union.tree_node** %e, align 8, !dbg !3186
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3187
  %call45 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %38), !dbg !3188
  store %struct.basic_block_def* %call45, %struct.basic_block_def** %dest, align 8, !dbg !3189
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3190
  %call46 = call %struct.basic_block_def* @single_pred(%struct.basic_block_def* %39), !dbg !3191
  store %struct.basic_block_def* %call46, %struct.basic_block_def** %src, align 8, !dbg !3192
  %40 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !3193
  %base47 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !3193
  %41 = bitcast %struct.tree_base* %base47 to i64*, !dbg !3193
  %bf.load48 = load i64, i64* %41, align 8, !dbg !3193
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !3193
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !3193
  %cmp51 = icmp eq i32 %bf.cast50, 141, !dbg !3195
  br i1 %cmp51, label %land.lhs.true52, label %if.end56, !dbg !3196

land.lhs.true52:                                  ; preds = %if.end42
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3197
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 3, !dbg !3198
  %43 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !3198
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3199
  %loop_father53 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 3, !dbg !3200
  %45 = load %struct.loop*, %struct.loop** %loop_father53, align 8, !dbg !3200
  %cmp54 = icmp ne %struct.loop* %43, %45, !dbg !3201
  br i1 %cmp54, label %if.then55, label %if.end56, !dbg !3202

if.then55:                                        ; preds = %land.lhs.true52
  %46 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3203
  store %union.tree_node* %46, %union.tree_node** %retval, align 8, !dbg !3204
  br label %return, !dbg !3204

if.end56:                                         ; preds = %land.lhs.true52, %if.end42
  %47 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !3205
  %call57 = call %union.tree_node* @expand_simple_operations(%union.tree_node* %47), !dbg !3206
  store %union.tree_node* %call57, %union.tree_node** %retval, align 8, !dbg !3207
  br label %return, !dbg !3207

if.end58:                                         ; preds = %if.end35
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3208
  %call59 = call i32 @gimple_code(%union.gimple_statement_d* %48), !dbg !3210
  %cmp60 = icmp ne i32 %call59, 6, !dbg !3211
  br i1 %cmp60, label %if.then61, label %if.end62, !dbg !3212

if.then61:                                        ; preds = %if.end58
  %49 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3213
  store %union.tree_node* %49, %union.tree_node** %retval, align 8, !dbg !3214
  br label %return, !dbg !3214

if.end62:                                         ; preds = %if.end58
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3215
  %call63 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %50), !dbg !3216
  store %union.tree_node* %call63, %union.tree_node** %e, align 8, !dbg !3217
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3218
  %call64 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %51), !dbg !3219
  store i32 %call64, i32* %code, align 4, !dbg !3220
  %52 = load i32, i32* %code, align 4, !dbg !3221
  %call65 = call i32 @get_gimple_rhs_class(i32 %52), !dbg !3223
  %cmp66 = icmp eq i32 %call65, 3, !dbg !3224
  br i1 %cmp66, label %if.then67, label %if.end76, !dbg !3225

if.then67:                                        ; preds = %if.end62
  %53 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !3226
  %call68 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %53), !dbg !3229
  %tobool69 = icmp ne i8 %call68, 0, !dbg !3229
  br i1 %tobool69, label %if.then70, label %if.end71, !dbg !3230

if.then70:                                        ; preds = %if.then67
  %54 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !3231
  store %union.tree_node* %54, %union.tree_node** %retval, align 8, !dbg !3232
  br label %return, !dbg !3232

if.end71:                                         ; preds = %if.then67
  %55 = load i32, i32* %code, align 4, !dbg !3233
  %cmp72 = icmp eq i32 %55, 141, !dbg !3235
  br i1 %cmp72, label %if.then73, label %if.end75, !dbg !3236

if.then73:                                        ; preds = %if.end71
  %56 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !3237
  %call74 = call %union.tree_node* @expand_simple_operations(%union.tree_node* %56), !dbg !3238
  store %union.tree_node* %call74, %union.tree_node** %retval, align 8, !dbg !3239
  br label %return, !dbg !3239

if.end75:                                         ; preds = %if.end71
  %57 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3240
  store %union.tree_node* %57, %union.tree_node** %retval, align 8, !dbg !3241
  br label %return, !dbg !3241

if.end76:                                         ; preds = %if.end62
  %58 = load i32, i32* %code, align 4, !dbg !3242
  switch i32 %58, label %sw.default [
    i32 116, label %sw.bb
    i32 113, label %sw.bb
    i32 63, label %sw.bb79
    i32 64, label %sw.bb79
    i32 66, label %sw.bb79
  ], !dbg !3243

sw.bb:                                            ; preds = %if.end76, %if.end76
  %59 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !3244
  %call77 = call %union.tree_node* @expand_simple_operations(%union.tree_node* %59), !dbg !3246
  store %union.tree_node* %call77, %union.tree_node** %ee, align 8, !dbg !3247
  %60 = load i32, i32* %code, align 4, !dbg !3248
  %61 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3248
  %common = bitcast %union.tree_node* %61 to %struct.tree_common*, !dbg !3248
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3248
  %62 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3248
  %63 = load %union.tree_node*, %union.tree_node** %ee, align 8, !dbg !3248
  %call78 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 %60, %union.tree_node* %62, %union.tree_node* %63), !dbg !3248
  store %union.tree_node* %call78, %union.tree_node** %retval, align 8, !dbg !3249
  br label %return, !dbg !3249

sw.bb79:                                          ; preds = %if.end76, %if.end76, %if.end76
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3250
  %call80 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %64), !dbg !3251
  store %union.tree_node* %call80, %union.tree_node** %e1, align 8, !dbg !3252
  %65 = load %union.tree_node*, %union.tree_node** %e1, align 8, !dbg !3253
  %call81 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %65), !dbg !3255
  %tobool82 = icmp ne i8 %call81, 0, !dbg !3255
  br i1 %tobool82, label %if.end84, label %if.then83, !dbg !3256

if.then83:                                        ; preds = %sw.bb79
  %66 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3257
  store %union.tree_node* %66, %union.tree_node** %retval, align 8, !dbg !3258
  br label %return, !dbg !3258

if.end84:                                         ; preds = %sw.bb79
  %67 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !3259
  %call85 = call %union.tree_node* @expand_simple_operations(%union.tree_node* %67), !dbg !3260
  store %union.tree_node* %call85, %union.tree_node** %ee, align 8, !dbg !3261
  %68 = load i32, i32* %code, align 4, !dbg !3262
  %69 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3262
  %common86 = bitcast %union.tree_node* %69 to %struct.tree_common*, !dbg !3262
  %type87 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common86, i32 0, i32 2, !dbg !3262
  %70 = load %union.tree_node*, %union.tree_node** %type87, align 8, !dbg !3262
  %71 = load %union.tree_node*, %union.tree_node** %ee, align 8, !dbg !3262
  %72 = load %union.tree_node*, %union.tree_node** %e1, align 8, !dbg !3262
  %call88 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %68, %union.tree_node* %70, %union.tree_node* %71, %union.tree_node* %72), !dbg !3262
  store %union.tree_node* %call88, %union.tree_node** %retval, align 8, !dbg !3263
  br label %return, !dbg !3263

sw.default:                                       ; preds = %if.end76
  %73 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3264
  store %union.tree_node* %73, %union.tree_node** %retval, align 8, !dbg !3265
  br label %return, !dbg !3265

return:                                           ; preds = %sw.default, %if.end84, %if.then83, %sw.bb, %if.end75, %if.then73, %if.then70, %if.then61, %if.end56, %if.then55, %if.then41, %if.then34, %if.end26, %if.then25, %if.then1, %if.then
  %74 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3266
  ret %union.tree_node* %74, !dbg !3266
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @tree_operand_length(%union.tree_node* %node) #0 !dbg !3267 {
entry:
  %retval = alloca i32, align 4
  %node.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %node, %union.tree_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %node.addr, metadata !3271, metadata !DIExpression()), !dbg !3272
  %0 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !3273
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3273
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3273
  %bf.load = load i64, i64* %1, align 8, !dbg !3273
  %bf.clear = and i64 %bf.load, 65535, !dbg !3273
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3273
  %idxprom = sext i32 %bf.cast to i64, !dbg !3273
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3273
  %2 = load i32, i32* %arrayidx, align 4, !dbg !3273
  %cmp = icmp eq i32 %2, 9, !dbg !3273
  br i1 %cmp, label %if.then, label %if.else, !dbg !3275

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !3276
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !3276
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3276
  %arrayidx1 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3276
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx1, align 8, !dbg !3276
  %int_cst = bitcast %union.tree_node* %4 to %struct.tree_int_cst*, !dbg !3276
  %int_cst2 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !3276
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst2, i32 0, i32 0, !dbg !3276
  %5 = load i64, i64* %low, align 8, !dbg !3276
  %conv = trunc i64 %5 to i32, !dbg !3276
  store i32 %conv, i32* %retval, align 4, !dbg !3277
  br label %return, !dbg !3277

if.else:                                          ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %node.addr, align 8, !dbg !3278
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3278
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !3278
  %bf.load4 = load i64, i64* %7, align 8, !dbg !3278
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !3278
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !3278
  %idxprom7 = sext i32 %bf.cast6 to i64, !dbg !3278
  %arrayidx8 = getelementptr inbounds [0 x i8], [0 x i8]* @tree_code_length, i64 0, i64 %idxprom7, !dbg !3278
  %8 = load i8, i8* %arrayidx8, align 1, !dbg !3278
  %conv9 = zext i8 %8 to i32, !dbg !3278
  store i32 %conv9, i32* %retval, align 4, !dbg !3279
  br label %return, !dbg !3279

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3280
  ret i32 %9, !dbg !3280
}

declare dso_local %union.tree_node* @copy_node_stat(%union.tree_node*) #2

declare dso_local void @fold_defer_overflow_warnings() #2

declare dso_local %union.tree_node* @fold(%union.tree_node*) #2

declare dso_local void @fold_undefer_and_ignore_overflow_warnings() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !3281 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3285, metadata !DIExpression()), !dbg !3286
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3287
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3288
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3289
  %bf.load = load i32, i32* %1, align 8, !dbg !3289
  %bf.clear = and i32 %bf.load, 255, !dbg !3289
  ret i32 %bf.clear, !dbg !3290
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !3291 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3294, metadata !DIExpression()), !dbg !3295
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3296
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !3297
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !3298
  %1 = load i32, i32* %nargs, align 4, !dbg !3298
  ret i32 %1, !dbg !3299
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !3300 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !3307, metadata !DIExpression()), !dbg !3308
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !3309
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !3310
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !3310
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !3311
  ret %union.tree_node* %2, !dbg !3312
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !3313 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3316, metadata !DIExpression()), !dbg !3317
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !3318, metadata !DIExpression()), !dbg !3319
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3320
  %1 = load i32, i32* %i.addr, align 4, !dbg !3321
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !3322
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !3323
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !3324
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !3325 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3328, metadata !DIExpression()), !dbg !3329
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3330
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3331
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !3332
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3332
  ret %struct.basic_block_def* %1, !dbg !3333
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_pred(%struct.basic_block_def* %bb) #0 !dbg !3334 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3340, metadata !DIExpression()), !dbg !3341
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3342
  %call = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %0), !dbg !3343
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 0, !dbg !3344
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3344
  ret %struct.basic_block_def* %1, !dbg !3345
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !3346 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3349, metadata !DIExpression()), !dbg !3350
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3351
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !3352
  ret %union.tree_node* %call, !dbg !3353
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !3354 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3357, metadata !DIExpression()), !dbg !3358
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3359, metadata !DIExpression()), !dbg !3360
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3361
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !3362
  store i32 %call, i32* %code, align 4, !dbg !3363
  %1 = load i32, i32* %code, align 4, !dbg !3364
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !3366
  %cmp = icmp eq i32 %call1, 3, !dbg !3367
  br i1 %cmp, label %if.then, label %if.end, !dbg !3368

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3369
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !3369
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !3369
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !3369
  %bf.load = load i64, i64* %3, align 8, !dbg !3369
  %bf.clear = and i64 %bf.load, 65535, !dbg !3369
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3369
  store i32 %bf.cast, i32* %code, align 4, !dbg !3370
  br label %if.end, !dbg !3371

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !3372
  ret i32 %4, !dbg !3373
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !3374 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !3377, metadata !DIExpression()), !dbg !3378
  %0 = load i32, i32* %code.addr, align 4, !dbg !3379
  %idxprom = sext i32 %0 to i64, !dbg !3380
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !3380
  %1 = load i8, i8* %arrayidx, align 1, !dbg !3380
  %conv = zext i8 %1 to i32, !dbg !3381
  ret i32 %conv, !dbg !3382
}

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !3383 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3384, metadata !DIExpression()), !dbg !3385
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3386
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !3388
  %cmp = icmp uge i32 %call, 3, !dbg !3389
  br i1 %cmp, label %if.then, label %if.else, !dbg !3390

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3391
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !3392
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !3393
  br label %return, !dbg !3393

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3394
  br label %return, !dbg !3394

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3395
  ret %union.tree_node* %2, !dbg !3395
}

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @loop_only_exit_p(%struct.loop* %loop, %struct.edge_def* %exit) #0 !dbg !3396 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %exit.addr = alloca %struct.edge_def*, align 8
  %body = alloca %struct.basic_block_def**, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %i = alloca i32, align 4
  %call = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3404, metadata !DIExpression()), !dbg !3405
  store %struct.edge_def* %exit, %struct.edge_def** %exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit.addr, metadata !3406, metadata !DIExpression()), !dbg !3407
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %body, metadata !3408, metadata !DIExpression()), !dbg !3410
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !3411, metadata !DIExpression()), !dbg !3418
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3419, metadata !DIExpression()), !dbg !3420
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call, metadata !3421, metadata !DIExpression()), !dbg !3422
  %0 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !3423
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3425
  %call1 = call %struct.edge_def* @single_exit(%struct.loop* %1), !dbg !3426
  %cmp = icmp ne %struct.edge_def* %0, %call1, !dbg !3427
  br i1 %cmp, label %if.then, label %if.end, !dbg !3428

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3429
  br label %return, !dbg !3429

if.end:                                           ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3430
  %call2 = call %struct.basic_block_def** @get_loop_body(%struct.loop* %2), !dbg !3431
  store %struct.basic_block_def** %call2, %struct.basic_block_def*** %body, align 8, !dbg !3432
  store i32 0, i32* %i, align 4, !dbg !3433
  br label %for.cond, !dbg !3435

for.cond:                                         ; preds = %for.inc16, %if.end
  %3 = load i32, i32* %i, align 4, !dbg !3436
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3438
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 6, !dbg !3439
  %5 = load i32, i32* %num_nodes, align 4, !dbg !3439
  %cmp3 = icmp ult i32 %3, %5, !dbg !3440
  br i1 %cmp3, label %for.body, label %for.end17, !dbg !3441

for.body:                                         ; preds = %for.cond
  %6 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !3442
  %7 = load i32, i32* %i, align 4, !dbg !3445
  %idxprom = zext i32 %7 to i64, !dbg !3442
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %6, i64 %idxprom, !dbg !3442
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !3442
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %8), !dbg !3446
  %9 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !3446
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3446
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !3446
  br label %for.cond4, !dbg !3447

for.cond4:                                        ; preds = %for.inc, %for.body
  %call5 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !3448
  %tobool = icmp ne i8 %call5, 0, !dbg !3450
  %lnot = xor i1 %tobool, true, !dbg !3450
  br i1 %lnot, label %for.body6, label %for.end, !dbg !3451

for.body6:                                        ; preds = %for.cond4
  %call7 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !3452
  store %union.gimple_statement_d* %call7, %union.gimple_statement_d** %call, align 8, !dbg !3454
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call, align 8, !dbg !3455
  %call8 = call i32 @gimple_code(%union.gimple_statement_d* %11), !dbg !3457
  %cmp9 = icmp ne i32 %call8, 8, !dbg !3458
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !3459

if.then10:                                        ; preds = %for.body6
  br label %for.inc, !dbg !3460

if.end11:                                         ; preds = %for.body6
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call, align 8, !dbg !3461
  %call12 = call zeroext i8 @gimple_has_side_effects(%union.gimple_statement_d* %12), !dbg !3463
  %tobool13 = icmp ne i8 %call12, 0, !dbg !3463
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !3464

if.then14:                                        ; preds = %if.end11
  %13 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !3465
  %14 = bitcast %struct.basic_block_def** %13 to i8*, !dbg !3465
  call void @free(i8* %14), !dbg !3467
  store i8 0, i8* %retval, align 1, !dbg !3468
  br label %return, !dbg !3468

if.end15:                                         ; preds = %if.end11
  br label %for.inc, !dbg !3469

for.inc:                                          ; preds = %if.end15, %if.then10
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !3470
  br label %for.cond4, !dbg !3471, !llvm.loop !3472

for.end:                                          ; preds = %for.cond4
  br label %for.inc16, !dbg !3474

for.inc16:                                        ; preds = %for.end
  %15 = load i32, i32* %i, align 4, !dbg !3475
  %inc = add i32 %15, 1, !dbg !3475
  store i32 %inc, i32* %i, align 4, !dbg !3475
  br label %for.cond, !dbg !3476, !llvm.loop !3477

for.end17:                                        ; preds = %for.cond
  %16 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !3479
  %17 = bitcast %struct.basic_block_def** %16 to i8*, !dbg !3479
  call void @free(i8* %17), !dbg !3480
  store i8 1, i8* %retval, align 1, !dbg !3481
  br label %return, !dbg !3481

return:                                           ; preds = %for.end17, %if.then14, %if.then
  %18 = load i8, i8* %retval, align 1, !dbg !3482
  ret i8 %18, !dbg !3482
}

declare dso_local %struct.edge_def* @single_exit(%struct.loop*) #2

declare dso_local %struct.basic_block_def** @get_loop_body(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !3483 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3486, metadata !DIExpression()), !dbg !3487
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !3488, metadata !DIExpression()), !dbg !3489
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !3490, metadata !DIExpression()), !dbg !3491
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3492
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !3493
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !3494
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !3495
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !3496
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !3497
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3498
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !3499
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !3500
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !3501
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3502
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !3503
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !3504
  ret void, !dbg !3505
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !3506 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3509, metadata !DIExpression()), !dbg !3510
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !3511
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3511
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !3512
  %conv = zext i1 %cmp to i32, !dbg !3512
  %conv1 = trunc i32 %conv to i8, !dbg !3513
  ret i8 %conv1, !dbg !3514
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !3515 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3518, metadata !DIExpression()), !dbg !3519
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !3520
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3520
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !3521
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3521
  ret %union.gimple_statement_d* %1, !dbg !3522
}

declare dso_local zeroext i8 @gimple_has_side_effects(%union.gimple_statement_d*) #2

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !3523 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !3527, metadata !DIExpression()), !dbg !3528
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !3529
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !3530
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3530
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !3531
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !3531
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !3532
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !3533
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !3534
  ret void, !dbg !3535
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @number_of_iterations_exit(%struct.loop* %loop, %struct.edge_def* %exit, %struct.tree_niter_desc* %niter, i8 zeroext %warn) #0 !dbg !3536 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %exit.addr = alloca %struct.edge_def*, align 8
  %niter.addr = alloca %struct.tree_niter_desc*, align 8
  %warn.addr = alloca i8, align 1
  %stmt = alloca %union.gimple_statement_d*, align 8
  %type = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %iv0 = alloca %struct.affine_iv, align 8
  %iv1 = alloca %struct.affine_iv, align 8
  %wording = alloca i8*, align 8
  %loc = alloca i32, align 4
  %tmp = alloca %struct.expanded_location, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3555, metadata !DIExpression()), !dbg !3556
  store %struct.edge_def* %exit, %struct.edge_def** %exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit.addr, metadata !3557, metadata !DIExpression()), !dbg !3558
  store %struct.tree_niter_desc* %niter, %struct.tree_niter_desc** %niter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tree_niter_desc** %niter.addr, metadata !3559, metadata !DIExpression()), !dbg !3560
  store i8 %warn, i8* %warn.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %warn.addr, metadata !3561, metadata !DIExpression()), !dbg !3562
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !3563, metadata !DIExpression()), !dbg !3564
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !3565, metadata !DIExpression()), !dbg !3566
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !3567, metadata !DIExpression()), !dbg !3568
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !3569, metadata !DIExpression()), !dbg !3570
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3571, metadata !DIExpression()), !dbg !3572
  call void @llvm.dbg.declare(metadata %struct.affine_iv* %iv0, metadata !3573, metadata !DIExpression()), !dbg !3574
  call void @llvm.dbg.declare(metadata %struct.affine_iv* %iv1, metadata !3575, metadata !DIExpression()), !dbg !3576
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3577
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 3, !dbg !3579
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !3579
  %2 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !3580
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 0, !dbg !3581
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3581
  %call = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %1, %struct.basic_block_def* %3), !dbg !3582
  %tobool = icmp ne i8 %call, 0, !dbg !3582
  br i1 %tobool, label %if.end, label %if.then, !dbg !3583

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3584
  br label %return, !dbg !3584

if.end:                                           ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !3585
  %5 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3586
  %assumptions = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %5, i32 0, i32 0, !dbg !3587
  store %union.tree_node* %4, %union.tree_node** %assumptions, align 8, !dbg !3588
  %6 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !3589
  %src1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %6, i32 0, i32 0, !dbg !3590
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !3590
  %call2 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %7), !dbg !3591
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %stmt, align 8, !dbg !3592
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3593
  %tobool3 = icmp ne %union.gimple_statement_d* %8, null, !dbg !3593
  br i1 %tobool3, label %lor.lhs.false, label %if.then5, !dbg !3595

lor.lhs.false:                                    ; preds = %if.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3596
  %call4 = call i32 @gimple_code(%union.gimple_statement_d* %9), !dbg !3597
  %cmp = icmp ne i32 %call4, 1, !dbg !3598
  br i1 %cmp, label %if.then5, label %if.end6, !dbg !3599

if.then5:                                         ; preds = %lor.lhs.false, %if.end
  store i8 0, i8* %retval, align 1, !dbg !3600
  br label %return, !dbg !3600

if.end6:                                          ; preds = %lor.lhs.false
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3601
  %call7 = call i32 @gimple_cond_code(%union.gimple_statement_d* %10), !dbg !3602
  store i32 %call7, i32* %code, align 4, !dbg !3603
  %11 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !3604
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %11, i32 0, i32 7, !dbg !3606
  %12 = load i32, i32* %flags, align 8, !dbg !3606
  %and = and i32 %12, 1024, !dbg !3607
  %tobool8 = icmp ne i32 %and, 0, !dbg !3607
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !3608

if.then9:                                         ; preds = %if.end6
  %13 = load i32, i32* %code, align 4, !dbg !3609
  %call10 = call i32 @invert_tree_comparison(i32 %13, i8 zeroext 0), !dbg !3610
  store i32 %call10, i32* %code, align 4, !dbg !3611
  br label %if.end11, !dbg !3612

if.end11:                                         ; preds = %if.then9, %if.end6
  %14 = load i32, i32* %code, align 4, !dbg !3613
  switch i32 %14, label %sw.default [
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 102, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
  ], !dbg !3614

sw.bb:                                            ; preds = %if.end11, %if.end11, %if.end11, %if.end11, %if.end11
  br label %sw.epilog, !dbg !3615

sw.default:                                       ; preds = %if.end11
  store i8 0, i8* %retval, align 1, !dbg !3617
  br label %return, !dbg !3617

sw.epilog:                                        ; preds = %sw.bb
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3618
  %call12 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %15), !dbg !3619
  store %union.tree_node* %call12, %union.tree_node** %op0, align 8, !dbg !3620
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3621
  %call13 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %16), !dbg !3622
  store %union.tree_node* %call13, %union.tree_node** %op1, align 8, !dbg !3623
  %17 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !3624
  %common = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !3624
  %type14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3624
  %18 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !3624
  store %union.tree_node* %18, %union.tree_node** %type, align 8, !dbg !3625
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3626
  %base = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !3626
  %20 = bitcast %struct.tree_base* %base to i64*, !dbg !3626
  %bf.load = load i64, i64* %20, align 8, !dbg !3626
  %bf.clear = and i64 %bf.load, 65535, !dbg !3626
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3626
  %cmp15 = icmp ne i32 %bf.cast, 8, !dbg !3628
  br i1 %cmp15, label %land.lhs.true, label %if.end28, !dbg !3629

land.lhs.true:                                    ; preds = %sw.epilog
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3630
  %base16 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !3630
  %22 = bitcast %struct.tree_base* %base16 to i64*, !dbg !3630
  %bf.load17 = load i64, i64* %22, align 8, !dbg !3630
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !3630
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !3630
  %cmp20 = icmp eq i32 %bf.cast19, 10, !dbg !3630
  br i1 %cmp20, label %if.end28, label %lor.lhs.false21, !dbg !3630

lor.lhs.false21:                                  ; preds = %land.lhs.true
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3630
  %base22 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !3630
  %24 = bitcast %struct.tree_base* %base22 to i64*, !dbg !3630
  %bf.load23 = load i64, i64* %24, align 8, !dbg !3630
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !3630
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !3630
  %cmp26 = icmp eq i32 %bf.cast25, 12, !dbg !3630
  br i1 %cmp26, label %if.end28, label %if.then27, !dbg !3631

if.then27:                                        ; preds = %lor.lhs.false21
  store i8 0, i8* %retval, align 1, !dbg !3632
  br label %return, !dbg !3632

if.end28:                                         ; preds = %lor.lhs.false21, %land.lhs.true, %sw.epilog
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3633
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3635
  %call29 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %26), !dbg !3636
  %27 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !3637
  %call30 = call zeroext i8 @simple_iv(%struct.loop* %25, %struct.loop* %call29, %union.tree_node* %27, %struct.affine_iv* %iv0, i8 zeroext 0), !dbg !3638
  %tobool31 = icmp ne i8 %call30, 0, !dbg !3638
  br i1 %tobool31, label %if.end33, label %if.then32, !dbg !3639

if.then32:                                        ; preds = %if.end28
  store i8 0, i8* %retval, align 1, !dbg !3640
  br label %return, !dbg !3640

if.end33:                                         ; preds = %if.end28
  %28 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3641
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3643
  %call34 = call %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %29), !dbg !3644
  %30 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !3645
  %call35 = call zeroext i8 @simple_iv(%struct.loop* %28, %struct.loop* %call34, %union.tree_node* %30, %struct.affine_iv* %iv1, i8 zeroext 0), !dbg !3646
  %tobool36 = icmp ne i8 %call35, 0, !dbg !3646
  br i1 %tobool36, label %if.end38, label %if.then37, !dbg !3647

if.then37:                                        ; preds = %if.end33
  store i8 0, i8* %retval, align 1, !dbg !3648
  br label %return, !dbg !3648

if.end38:                                         ; preds = %if.end33
  call void @fold_defer_overflow_warnings(), !dbg !3649
  %base39 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i32 0, i32 0, !dbg !3650
  %31 = load %union.tree_node*, %union.tree_node** %base39, align 8, !dbg !3650
  %call40 = call %union.tree_node* @expand_simple_operations(%union.tree_node* %31), !dbg !3651
  %base41 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i32 0, i32 0, !dbg !3652
  store %union.tree_node* %call40, %union.tree_node** %base41, align 8, !dbg !3653
  %base42 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i32 0, i32 0, !dbg !3654
  %32 = load %union.tree_node*, %union.tree_node** %base42, align 8, !dbg !3654
  %call43 = call %union.tree_node* @expand_simple_operations(%union.tree_node* %32), !dbg !3655
  %base44 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i32 0, i32 0, !dbg !3656
  store %union.tree_node* %call43, %union.tree_node** %base44, align 8, !dbg !3657
  %33 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3658
  %34 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3660
  %35 = load i32, i32* %code, align 4, !dbg !3661
  %36 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3662
  %37 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3663
  %38 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !3664
  %call45 = call zeroext i8 @loop_only_exit_p(%struct.loop* %37, %struct.edge_def* %38), !dbg !3665
  %call46 = call zeroext i8 @number_of_iterations_cond(%struct.loop* %33, %union.tree_node* %34, %struct.affine_iv* %iv0, i32 %35, %struct.affine_iv* %iv1, %struct.tree_niter_desc* %36, i8 zeroext %call45), !dbg !3666
  %tobool47 = icmp ne i8 %call46, 0, !dbg !3666
  br i1 %tobool47, label %if.end49, label %if.then48, !dbg !3667

if.then48:                                        ; preds = %if.end38
  call void @fold_undefer_and_ignore_overflow_warnings(), !dbg !3668
  store i8 0, i8* %retval, align 1, !dbg !3670
  br label %return, !dbg !3670

if.end49:                                         ; preds = %if.end38
  %39 = load i32, i32* @optimize, align 4, !dbg !3671
  %cmp50 = icmp sge i32 %39, 3, !dbg !3673
  br i1 %cmp50, label %if.then51, label %if.end60, !dbg !3674

if.then51:                                        ; preds = %if.end49
  %40 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3675
  %41 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3677
  %assumptions52 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %41, i32 0, i32 0, !dbg !3678
  %42 = load %union.tree_node*, %union.tree_node** %assumptions52, align 8, !dbg !3678
  %call53 = call %union.tree_node* @simplify_using_outer_evolutions(%struct.loop* %40, %union.tree_node* %42), !dbg !3679
  %43 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3680
  %assumptions54 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %43, i32 0, i32 0, !dbg !3681
  store %union.tree_node* %call53, %union.tree_node** %assumptions54, align 8, !dbg !3682
  %44 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3683
  %45 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3684
  %may_be_zero = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %45, i32 0, i32 1, !dbg !3685
  %46 = load %union.tree_node*, %union.tree_node** %may_be_zero, align 8, !dbg !3685
  %call55 = call %union.tree_node* @simplify_using_outer_evolutions(%struct.loop* %44, %union.tree_node* %46), !dbg !3686
  %47 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3687
  %may_be_zero56 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %47, i32 0, i32 1, !dbg !3688
  store %union.tree_node* %call55, %union.tree_node** %may_be_zero56, align 8, !dbg !3689
  %48 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3690
  %49 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3691
  %niter57 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %49, i32 0, i32 2, !dbg !3692
  %50 = load %union.tree_node*, %union.tree_node** %niter57, align 8, !dbg !3692
  %call58 = call %union.tree_node* @simplify_using_outer_evolutions(%struct.loop* %48, %union.tree_node* %50), !dbg !3693
  %51 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3694
  %niter59 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %51, i32 0, i32 2, !dbg !3695
  store %union.tree_node* %call58, %union.tree_node** %niter59, align 8, !dbg !3696
  br label %if.end60, !dbg !3697

if.end60:                                         ; preds = %if.then51, %if.end49
  %52 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3698
  %53 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3699
  %assumptions61 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %53, i32 0, i32 0, !dbg !3700
  %54 = load %union.tree_node*, %union.tree_node** %assumptions61, align 8, !dbg !3700
  %call62 = call %union.tree_node* @simplify_using_initial_conditions(%struct.loop* %52, %union.tree_node* %54), !dbg !3701
  %55 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3702
  %assumptions63 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %55, i32 0, i32 0, !dbg !3703
  store %union.tree_node* %call62, %union.tree_node** %assumptions63, align 8, !dbg !3704
  %56 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3705
  %57 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3706
  %may_be_zero64 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %57, i32 0, i32 1, !dbg !3707
  %58 = load %union.tree_node*, %union.tree_node** %may_be_zero64, align 8, !dbg !3707
  %call65 = call %union.tree_node* @simplify_using_initial_conditions(%struct.loop* %56, %union.tree_node* %58), !dbg !3708
  %59 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3709
  %may_be_zero66 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %59, i32 0, i32 1, !dbg !3710
  store %union.tree_node* %call65, %union.tree_node** %may_be_zero66, align 8, !dbg !3711
  call void @fold_undefer_and_ignore_overflow_warnings(), !dbg !3712
  %60 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3713
  %assumptions67 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %60, i32 0, i32 0, !dbg !3715
  %61 = load %union.tree_node*, %union.tree_node** %assumptions67, align 8, !dbg !3715
  %call68 = call i32 @integer_onep(%union.tree_node* %61), !dbg !3716
  %tobool69 = icmp ne i32 %call68, 0, !dbg !3716
  br i1 %tobool69, label %if.then70, label %if.end71, !dbg !3717

if.then70:                                        ; preds = %if.end60
  store i8 1, i8* %retval, align 1, !dbg !3718
  br label %return, !dbg !3718

if.end71:                                         ; preds = %if.end60
  %62 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3719
  %assumptions72 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %62, i32 0, i32 0, !dbg !3721
  %63 = load %union.tree_node*, %union.tree_node** %assumptions72, align 8, !dbg !3721
  %call73 = call i32 @integer_zerop(%union.tree_node* %63), !dbg !3722
  %tobool74 = icmp ne i32 %call73, 0, !dbg !3722
  br i1 %tobool74, label %if.then75, label %if.end76, !dbg !3723

if.then75:                                        ; preds = %if.end71
  store i8 0, i8* %retval, align 1, !dbg !3724
  br label %return, !dbg !3724

if.end76:                                         ; preds = %if.end71
  %64 = load i32, i32* @flag_unsafe_loop_optimizations, align 4, !dbg !3725
  %tobool77 = icmp ne i32 %64, 0, !dbg !3725
  br i1 %tobool77, label %if.then78, label %if.end80, !dbg !3727

if.then78:                                        ; preds = %if.end76
  %65 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !3728
  %66 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3729
  %assumptions79 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %66, i32 0, i32 0, !dbg !3730
  store %union.tree_node* %65, %union.tree_node** %assumptions79, align 8, !dbg !3731
  br label %if.end80, !dbg !3729

if.end80:                                         ; preds = %if.then78, %if.end76
  %67 = load i8, i8* %warn.addr, align 1, !dbg !3732
  %tobool81 = icmp ne i8 %67, 0, !dbg !3732
  br i1 %tobool81, label %if.then82, label %if.end114, !dbg !3734

if.then82:                                        ; preds = %if.end80
  call void @llvm.dbg.declare(metadata i8** %wording, metadata !3735, metadata !DIExpression()), !dbg !3737
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !3738, metadata !DIExpression()), !dbg !3739
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3740
  %call83 = call i32 @gimple_location(%union.gimple_statement_d* %68), !dbg !3741
  store i32 %call83, i32* %loc, align 4, !dbg !3739
  %step = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i32 0, i32 1, !dbg !3742
  %69 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !3742
  %call84 = call i32 @integer_zerop(%union.tree_node* %69), !dbg !3744
  %tobool85 = icmp ne i32 %call84, 0, !dbg !3744
  br i1 %tobool85, label %cond.false, label %cond.true, !dbg !3745

cond.true:                                        ; preds = %if.then82
  %step86 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i32 0, i32 1, !dbg !3746
  %70 = load %union.tree_node*, %union.tree_node** %step86, align 8, !dbg !3746
  %call87 = call i32 @integer_zerop(%union.tree_node* %70), !dbg !3747
  %tobool88 = icmp ne i32 %call87, 0, !dbg !3747
  br i1 %tobool88, label %land.lhs.true89, label %if.else, !dbg !3748

land.lhs.true89:                                  ; preds = %cond.true
  %step90 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i32 0, i32 1, !dbg !3749
  %71 = load %union.tree_node*, %union.tree_node** %step90, align 8, !dbg !3749
  %call91 = call i32 @integer_onep(%union.tree_node* %71), !dbg !3750
  %tobool92 = icmp ne i32 %call91, 0, !dbg !3750
  br i1 %tobool92, label %if.then104, label %lor.lhs.false93, !dbg !3751

lor.lhs.false93:                                  ; preds = %land.lhs.true89
  %step94 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i32 0, i32 1, !dbg !3752
  %72 = load %union.tree_node*, %union.tree_node** %step94, align 8, !dbg !3752
  %call95 = call i32 @integer_all_onesp(%union.tree_node* %72), !dbg !3753
  %tobool96 = icmp ne i32 %call95, 0, !dbg !3753
  br i1 %tobool96, label %if.then104, label %if.else, !dbg !3754

cond.false:                                       ; preds = %if.then82
  %step97 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i32 0, i32 1, !dbg !3755
  %73 = load %union.tree_node*, %union.tree_node** %step97, align 8, !dbg !3755
  %call98 = call i32 @integer_onep(%union.tree_node* %73), !dbg !3756
  %tobool99 = icmp ne i32 %call98, 0, !dbg !3756
  br i1 %tobool99, label %if.then104, label %lor.lhs.false100, !dbg !3757

lor.lhs.false100:                                 ; preds = %cond.false
  %step101 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i32 0, i32 1, !dbg !3758
  %74 = load %union.tree_node*, %union.tree_node** %step101, align 8, !dbg !3758
  %call102 = call i32 @integer_all_onesp(%union.tree_node* %74), !dbg !3759
  %tobool103 = icmp ne i32 %call102, 0, !dbg !3759
  br i1 %tobool103, label %if.then104, label %if.else, !dbg !3745

if.then104:                                       ; preds = %lor.lhs.false100, %cond.false, %lor.lhs.false93, %land.lhs.true89
  %75 = load i32, i32* @flag_unsafe_loop_optimizations, align 4, !dbg !3760
  %tobool105 = icmp ne i32 %75, 0, !dbg !3760
  %76 = zext i1 %tobool105 to i64, !dbg !3760
  %cond = select i1 %tobool105, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), !dbg !3760
  store i8* %cond, i8** %wording, align 8, !dbg !3761
  br label %if.end108, !dbg !3762

if.else:                                          ; preds = %lor.lhs.false100, %lor.lhs.false93, %cond.true
  %77 = load i32, i32* @flag_unsafe_loop_optimizations, align 4, !dbg !3763
  %tobool106 = icmp ne i32 %77, 0, !dbg !3763
  %78 = zext i1 %tobool106 to i64, !dbg !3763
  %cond107 = select i1 %tobool106, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.3, i64 0, i64 0), !dbg !3763
  store i8* %cond107, i8** %wording, align 8, !dbg !3764
  br label %if.end108

if.end108:                                        ; preds = %if.else, %if.then104
  %79 = load i32, i32* %loc, align 4, !dbg !3765
  call void @expand_location(%struct.expanded_location* sret %tmp, i32 %79), !dbg !3765
  %line = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %tmp, i32 0, i32 1, !dbg !3765
  %80 = load i32, i32* %line, align 8, !dbg !3765
  %cmp109 = icmp sgt i32 %80, 0, !dbg !3766
  br i1 %cmp109, label %cond.true110, label %cond.false111, !dbg !3767

cond.true110:                                     ; preds = %if.end108
  %81 = load i32, i32* %loc, align 4, !dbg !3768
  br label %cond.end, !dbg !3767

cond.false111:                                    ; preds = %if.end108
  %82 = load i32, i32* @input_location, align 4, !dbg !3769
  br label %cond.end, !dbg !3767

cond.end:                                         ; preds = %cond.false111, %cond.true110
  %cond112 = phi i32 [ %81, %cond.true110 ], [ %82, %cond.false111 ], !dbg !3767
  %83 = load i8*, i8** %wording, align 8, !dbg !3770
  %call113 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %cond112, i32 216, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* %83), !dbg !3771
  br label %if.end114, !dbg !3772

if.end114:                                        ; preds = %cond.end, %if.end80
  %84 = load i32, i32* @flag_unsafe_loop_optimizations, align 4, !dbg !3773
  %conv = trunc i32 %84 to i8, !dbg !3773
  store i8 %conv, i8* %retval, align 1, !dbg !3774
  br label %return, !dbg !3774

return:                                           ; preds = %if.end114, %if.then75, %if.then70, %if.then48, %if.then37, %if.then32, %if.then27, %sw.default, %if.then5, %if.then
  %85 = load i8, i8* %retval, align 1, !dbg !3775
  ret i8 %85, !dbg !3775
}

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local %union.gimple_statement_d* @last_stmt(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_cond_code(%union.gimple_statement_d* %gs) #0 !dbg !3776 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3777, metadata !DIExpression()), !dbg !3778
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3779
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3780
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3781
  %bf.load = load i32, i32* %1, align 8, !dbg !3781
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3781
  ret i32 %bf.lshr, !dbg !3782
}

declare dso_local i32 @invert_tree_comparison(i32, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %gs) #0 !dbg !3783 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3784, metadata !DIExpression()), !dbg !3785
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3786
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !3787
  ret %union.tree_node* %call, !dbg !3788
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %gs) #0 !dbg !3789 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3790, metadata !DIExpression()), !dbg !3791
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3792
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !3793
  ret %union.tree_node* %call, !dbg !3794
}

declare dso_local zeroext i8 @simple_iv(%struct.loop*, %struct.loop*, %union.tree_node*, %struct.affine_iv*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !3795 {
entry:
  %retval = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3798, metadata !DIExpression()), !dbg !3799
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3800, metadata !DIExpression()), !dbg !3801
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3802
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !3803
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !3801
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3804
  %tobool = icmp ne %struct.basic_block_def* %1, null, !dbg !3804
  br i1 %tobool, label %if.end, label %if.then, !dbg !3806

if.then:                                          ; preds = %entry
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !3807
  br label %return, !dbg !3807

if.end:                                           ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3808
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 3, !dbg !3809
  %3 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !3809
  store %struct.loop* %3, %struct.loop** %retval, align 8, !dbg !3810
  br label %return, !dbg !3810

return:                                           ; preds = %if.end, %if.then
  %4 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !3811
  ret %struct.loop* %4, !dbg !3811
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @number_of_iterations_cond(%struct.loop* %loop, %union.tree_node* %type, %struct.affine_iv* %iv0, i32 %code, %struct.affine_iv* %iv1, %struct.tree_niter_desc* %niter, i8 zeroext %only_exit) #0 !dbg !3812 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %iv0.addr = alloca %struct.affine_iv*, align 8
  %code.addr = alloca i32, align 4
  %iv1.addr = alloca %struct.affine_iv*, align 8
  %niter.addr = alloca %struct.tree_niter_desc*, align 8
  %only_exit.addr = alloca i8, align 1
  %exit_must_be_taken = alloca i8, align 1
  %ret = alloca i8, align 1
  %bnds = alloca %struct.bounds, align 8
  %tmp = alloca %struct.double_int, align 8
  %tmp7 = alloca %struct.affine_iv*, align 8
  %tmp100 = alloca %struct.double_int, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3816, metadata !DIExpression()), !dbg !3817
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !3818, metadata !DIExpression()), !dbg !3819
  store %struct.affine_iv* %iv0, %struct.affine_iv** %iv0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.affine_iv** %iv0.addr, metadata !3820, metadata !DIExpression()), !dbg !3821
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !3822, metadata !DIExpression()), !dbg !3823
  store %struct.affine_iv* %iv1, %struct.affine_iv** %iv1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.affine_iv** %iv1.addr, metadata !3824, metadata !DIExpression()), !dbg !3825
  store %struct.tree_niter_desc* %niter, %struct.tree_niter_desc** %niter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tree_niter_desc** %niter.addr, metadata !3826, metadata !DIExpression()), !dbg !3827
  store i8 %only_exit, i8* %only_exit.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %only_exit.addr, metadata !3828, metadata !DIExpression()), !dbg !3829
  call void @llvm.dbg.declare(metadata i8* %exit_must_be_taken, metadata !3830, metadata !DIExpression()), !dbg !3831
  store i8 0, i8* %exit_must_be_taken, align 1, !dbg !3831
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !3832, metadata !DIExpression()), !dbg !3833
  call void @llvm.dbg.declare(metadata %struct.bounds* %bnds, metadata !3834, metadata !DIExpression()), !dbg !3851
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !3852
  %1 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3853
  %assumptions = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %1, i32 0, i32 0, !dbg !3854
  store %union.tree_node* %0, %union.tree_node** %assumptions, align 8, !dbg !3855
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !3856
  %3 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3857
  %may_be_zero = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %3, i32 0, i32 1, !dbg !3858
  store %union.tree_node* %2, %union.tree_node** %may_be_zero, align 8, !dbg !3859
  %4 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3860
  %niter1 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %4, i32 0, i32 2, !dbg !3861
  store %union.tree_node* null, %union.tree_node** %niter1, align 8, !dbg !3862
  %5 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3863
  %max = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %5, i32 0, i32 3, !dbg !3864
  %call = call { i64, i64 } @shwi_to_double_int(i64 0), !dbg !3865
  %6 = bitcast %struct.double_int* %tmp to { i64, i64 }*, !dbg !3865
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !3865
  %8 = extractvalue { i64, i64 } %call, 0, !dbg !3865
  store i64 %8, i64* %7, align 8, !dbg !3865
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !3865
  %10 = extractvalue { i64, i64 } %call, 1, !dbg !3865
  store i64 %10, i64* %9, align 8, !dbg !3865
  %11 = bitcast %struct.double_int* %max to i8*, !dbg !3865
  %12 = bitcast %struct.double_int* %tmp to i8*, !dbg !3865
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 16, i1 false), !dbg !3865
  %13 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3866
  %bound = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %13, i32 0, i32 5, !dbg !3867
  store %union.tree_node* null, %union.tree_node** %bound, align 8, !dbg !3868
  %14 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3869
  %cmp = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %14, i32 0, i32 6, !dbg !3870
  store i32 0, i32* %cmp, align 8, !dbg !3871
  %15 = load i32, i32* %code.addr, align 4, !dbg !3872
  %cmp2 = icmp eq i32 %15, 100, !dbg !3874
  br i1 %cmp2, label %if.then, label %lor.lhs.false, !dbg !3875

lor.lhs.false:                                    ; preds = %entry
  %16 = load i32, i32* %code.addr, align 4, !dbg !3876
  %cmp3 = icmp eq i32 %16, 99, !dbg !3877
  br i1 %cmp3, label %if.then, label %lor.lhs.false4, !dbg !3878

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %17 = load i32, i32* %code.addr, align 4, !dbg !3879
  %cmp5 = icmp eq i32 %17, 102, !dbg !3880
  br i1 %cmp5, label %land.lhs.true, label %if.end, !dbg !3881

land.lhs.true:                                    ; preds = %lor.lhs.false4
  %18 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !3882
  %step = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %18, i32 0, i32 1, !dbg !3883
  %19 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !3883
  %call6 = call i32 @integer_zerop(%union.tree_node* %19), !dbg !3884
  %tobool = icmp ne i32 %call6, 0, !dbg !3884
  br i1 %tobool, label %if.then, label %if.end, !dbg !3885

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false, %entry
  br label %do.body, !dbg !3886

do.body:                                          ; preds = %if.then
  call void @llvm.dbg.declare(metadata %struct.affine_iv** %tmp7, metadata !3888, metadata !DIExpression()), !dbg !3890
  %20 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !3890
  store %struct.affine_iv* %20, %struct.affine_iv** %tmp7, align 8, !dbg !3890
  %21 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !3890
  store %struct.affine_iv* %21, %struct.affine_iv** %iv0.addr, align 8, !dbg !3890
  %22 = load %struct.affine_iv*, %struct.affine_iv** %tmp7, align 8, !dbg !3890
  store %struct.affine_iv* %22, %struct.affine_iv** %iv1.addr, align 8, !dbg !3890
  br label %do.end, !dbg !3890

do.end:                                           ; preds = %do.body
  %23 = load i32, i32* %code.addr, align 4, !dbg !3891
  %call8 = call i32 @swap_tree_comparison(i32 %23), !dbg !3892
  store i32 %call8, i32* %code.addr, align 4, !dbg !3893
  br label %if.end, !dbg !3894

if.end:                                           ; preds = %do.end, %land.lhs.true, %lor.lhs.false4
  %24 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3895
  %base = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !3895
  %25 = bitcast %struct.tree_base* %base to i64*, !dbg !3895
  %bf.load = load i64, i64* %25, align 8, !dbg !3895
  %bf.clear = and i64 %bf.load, 65535, !dbg !3895
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3895
  %cmp9 = icmp eq i32 %bf.cast, 10, !dbg !3895
  br i1 %cmp9, label %if.then16, label %lor.lhs.false10, !dbg !3895

lor.lhs.false10:                                  ; preds = %if.end
  %26 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3895
  %base11 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !3895
  %27 = bitcast %struct.tree_base* %base11 to i64*, !dbg !3895
  %bf.load12 = load i64, i64* %27, align 8, !dbg !3895
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !3895
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !3895
  %cmp15 = icmp eq i32 %bf.cast14, 12, !dbg !3895
  br i1 %cmp15, label %if.then16, label %if.end18, !dbg !3897

if.then16:                                        ; preds = %lor.lhs.false10, %if.end
  %28 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !3898
  %no_overflow = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %28, i32 0, i32 2, !dbg !3900
  store i8 1, i8* %no_overflow, align 8, !dbg !3901
  %29 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !3902
  %no_overflow17 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %29, i32 0, i32 2, !dbg !3903
  store i8 1, i8* %no_overflow17, align 8, !dbg !3904
  br label %if.end18, !dbg !3905

if.end18:                                         ; preds = %if.then16, %lor.lhs.false10
  %30 = load i8, i8* %only_exit.addr, align 1, !dbg !3906
  %tobool19 = icmp ne i8 %30, 0, !dbg !3906
  br i1 %tobool19, label %if.then20, label %if.end38, !dbg !3908

if.then20:                                        ; preds = %if.end18
  %31 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !3909
  %step21 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %31, i32 0, i32 1, !dbg !3912
  %32 = load %union.tree_node*, %union.tree_node** %step21, align 8, !dbg !3912
  %call22 = call i32 @integer_zerop(%union.tree_node* %32), !dbg !3913
  %tobool23 = icmp ne i32 %call22, 0, !dbg !3913
  br i1 %tobool23, label %if.else, label %land.lhs.true24, !dbg !3914

land.lhs.true24:                                  ; preds = %if.then20
  %33 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !3915
  %no_overflow25 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %33, i32 0, i32 2, !dbg !3916
  %34 = load i8, i8* %no_overflow25, align 8, !dbg !3916
  %conv = zext i8 %34 to i32, !dbg !3915
  %tobool26 = icmp ne i32 %conv, 0, !dbg !3915
  br i1 %tobool26, label %if.then27, label %if.else, !dbg !3917

if.then27:                                        ; preds = %land.lhs.true24
  store i8 1, i8* %exit_must_be_taken, align 1, !dbg !3918
  br label %if.end37, !dbg !3919

if.else:                                          ; preds = %land.lhs.true24, %if.then20
  %35 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !3920
  %step28 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %35, i32 0, i32 1, !dbg !3922
  %36 = load %union.tree_node*, %union.tree_node** %step28, align 8, !dbg !3922
  %call29 = call i32 @integer_zerop(%union.tree_node* %36), !dbg !3923
  %tobool30 = icmp ne i32 %call29, 0, !dbg !3923
  br i1 %tobool30, label %if.end36, label %land.lhs.true31, !dbg !3924

land.lhs.true31:                                  ; preds = %if.else
  %37 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !3925
  %no_overflow32 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %37, i32 0, i32 2, !dbg !3926
  %38 = load i8, i8* %no_overflow32, align 8, !dbg !3926
  %conv33 = zext i8 %38 to i32, !dbg !3925
  %tobool34 = icmp ne i32 %conv33, 0, !dbg !3925
  br i1 %tobool34, label %if.then35, label %if.end36, !dbg !3927

if.then35:                                        ; preds = %land.lhs.true31
  store i8 1, i8* %exit_must_be_taken, align 1, !dbg !3928
  br label %if.end36, !dbg !3929

if.end36:                                         ; preds = %if.then35, %land.lhs.true31, %if.else
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.then27
  br label %if.end38, !dbg !3930

if.end38:                                         ; preds = %if.end37, %if.end18
  %39 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !3931
  %step39 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %39, i32 0, i32 1, !dbg !3933
  %40 = load %union.tree_node*, %union.tree_node** %step39, align 8, !dbg !3933
  %call40 = call i32 @integer_zerop(%union.tree_node* %40), !dbg !3934
  %tobool41 = icmp ne i32 %call40, 0, !dbg !3934
  br i1 %tobool41, label %if.end59, label %land.lhs.true42, !dbg !3935

land.lhs.true42:                                  ; preds = %if.end38
  %41 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !3936
  %step43 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %41, i32 0, i32 1, !dbg !3937
  %42 = load %union.tree_node*, %union.tree_node** %step43, align 8, !dbg !3937
  %call44 = call i32 @integer_zerop(%union.tree_node* %42), !dbg !3938
  %tobool45 = icmp ne i32 %call44, 0, !dbg !3938
  br i1 %tobool45, label %if.end59, label %if.then46, !dbg !3939

if.then46:                                        ; preds = %land.lhs.true42
  %43 = load i32, i32* %code.addr, align 4, !dbg !3940
  %cmp47 = icmp ne i32 %43, 102, !dbg !3943
  br i1 %cmp47, label %if.then49, label %if.end50, !dbg !3944

if.then49:                                        ; preds = %if.then46
  store i8 0, i8* %retval, align 1, !dbg !3945
  br label %return, !dbg !3945

if.end50:                                         ; preds = %if.then46
  %44 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3946
  %45 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !3947
  %step51 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %45, i32 0, i32 1, !dbg !3948
  %46 = load %union.tree_node*, %union.tree_node** %step51, align 8, !dbg !3948
  %47 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !3949
  %step52 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %47, i32 0, i32 1, !dbg !3950
  %48 = load %union.tree_node*, %union.tree_node** %step52, align 8, !dbg !3950
  %call53 = call %union.tree_node* @fold_binary_to_constant(i32 64, %union.tree_node* %44, %union.tree_node* %46, %union.tree_node* %48), !dbg !3951
  %49 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !3952
  %step54 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %49, i32 0, i32 1, !dbg !3953
  store %union.tree_node* %call53, %union.tree_node** %step54, align 8, !dbg !3954
  %50 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !3955
  %no_overflow55 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %50, i32 0, i32 2, !dbg !3956
  store i8 0, i8* %no_overflow55, align 8, !dbg !3957
  %51 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3958
  %call56 = call %union.tree_node* @build_int_cst(%union.tree_node* %51, i64 0), !dbg !3959
  %52 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !3960
  %step57 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %52, i32 0, i32 1, !dbg !3961
  store %union.tree_node* %call56, %union.tree_node** %step57, align 8, !dbg !3962
  %53 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !3963
  %no_overflow58 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %53, i32 0, i32 2, !dbg !3964
  store i8 1, i8* %no_overflow58, align 8, !dbg !3965
  br label %if.end59, !dbg !3966

if.end59:                                         ; preds = %if.end50, %land.lhs.true42, %if.end38
  %54 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !3967
  %step60 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %54, i32 0, i32 1, !dbg !3969
  %55 = load %union.tree_node*, %union.tree_node** %step60, align 8, !dbg !3969
  %call61 = call i32 @integer_zerop(%union.tree_node* %55), !dbg !3970
  %tobool62 = icmp ne i32 %call61, 0, !dbg !3970
  br i1 %tobool62, label %land.lhs.true63, label %if.end68, !dbg !3971

land.lhs.true63:                                  ; preds = %if.end59
  %56 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !3972
  %step64 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %56, i32 0, i32 1, !dbg !3973
  %57 = load %union.tree_node*, %union.tree_node** %step64, align 8, !dbg !3973
  %call65 = call i32 @integer_zerop(%union.tree_node* %57), !dbg !3974
  %tobool66 = icmp ne i32 %call65, 0, !dbg !3974
  br i1 %tobool66, label %if.then67, label %if.end68, !dbg !3975

if.then67:                                        ; preds = %land.lhs.true63
  store i8 0, i8* %retval, align 1, !dbg !3976
  br label %return, !dbg !3976

if.end68:                                         ; preds = %land.lhs.true63, %if.end59
  %58 = load i32, i32* %code.addr, align 4, !dbg !3977
  %cmp69 = icmp ne i32 %58, 102, !dbg !3979
  br i1 %cmp69, label %if.then71, label %if.end89, !dbg !3980

if.then71:                                        ; preds = %if.end68
  %59 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !3981
  %step72 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %59, i32 0, i32 1, !dbg !3984
  %60 = load %union.tree_node*, %union.tree_node** %step72, align 8, !dbg !3984
  %tobool73 = icmp ne %union.tree_node* %60, null, !dbg !3981
  br i1 %tobool73, label %land.lhs.true74, label %if.end79, !dbg !3985

land.lhs.true74:                                  ; preds = %if.then71
  %61 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !3986
  %step75 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %61, i32 0, i32 1, !dbg !3987
  %62 = load %union.tree_node*, %union.tree_node** %step75, align 8, !dbg !3987
  %call76 = call i32 @tree_int_cst_sign_bit(%union.tree_node* %62), !dbg !3988
  %tobool77 = icmp ne i32 %call76, 0, !dbg !3988
  br i1 %tobool77, label %if.then78, label %if.end79, !dbg !3989

if.then78:                                        ; preds = %land.lhs.true74
  store i8 0, i8* %retval, align 1, !dbg !3990
  br label %return, !dbg !3990

if.end79:                                         ; preds = %land.lhs.true74, %if.then71
  %63 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !3991
  %step80 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %63, i32 0, i32 1, !dbg !3993
  %64 = load %union.tree_node*, %union.tree_node** %step80, align 8, !dbg !3993
  %call81 = call i32 @integer_zerop(%union.tree_node* %64), !dbg !3994
  %tobool82 = icmp ne i32 %call81, 0, !dbg !3994
  br i1 %tobool82, label %if.end88, label %land.lhs.true83, !dbg !3995

land.lhs.true83:                                  ; preds = %if.end79
  %65 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !3996
  %step84 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %65, i32 0, i32 1, !dbg !3997
  %66 = load %union.tree_node*, %union.tree_node** %step84, align 8, !dbg !3997
  %call85 = call i32 @tree_int_cst_sign_bit(%union.tree_node* %66), !dbg !3998
  %tobool86 = icmp ne i32 %call85, 0, !dbg !3998
  br i1 %tobool86, label %if.end88, label %if.then87, !dbg !3999

if.then87:                                        ; preds = %land.lhs.true83
  store i8 0, i8* %retval, align 1, !dbg !4000
  br label %return, !dbg !4000

if.end88:                                         ; preds = %land.lhs.true83, %if.end79
  br label %if.end89, !dbg !4001

if.end89:                                         ; preds = %if.end88, %if.end68
  %67 = load i32, i32* %code.addr, align 4, !dbg !4002
  %68 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4002
  %69 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !4002
  %base90 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %69, i32 0, i32 0, !dbg !4002
  %70 = load %union.tree_node*, %union.tree_node** %base90, align 8, !dbg !4002
  %71 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !4002
  %base91 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %71, i32 0, i32 0, !dbg !4002
  %72 = load %union.tree_node*, %union.tree_node** %base91, align 8, !dbg !4002
  %call92 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %67, %union.tree_node* %68, %union.tree_node* %70, %union.tree_node* %72), !dbg !4002
  %call93 = call i32 @integer_zerop(%union.tree_node* %call92), !dbg !4004
  %tobool94 = icmp ne i32 %call93, 0, !dbg !4004
  br i1 %tobool94, label %if.then95, label %if.end102, !dbg !4005

if.then95:                                        ; preds = %if.end89
  %73 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4006
  %call96 = call %union.tree_node* @unsigned_type_for(%union.tree_node* %73), !dbg !4008
  %call97 = call %union.tree_node* @build_int_cst(%union.tree_node* %call96, i64 0), !dbg !4009
  %74 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !4010
  %niter98 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %74, i32 0, i32 2, !dbg !4011
  store %union.tree_node* %call97, %union.tree_node** %niter98, align 8, !dbg !4012
  %75 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !4013
  %max99 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %75, i32 0, i32 3, !dbg !4014
  %call101 = call { i64, i64 } @shwi_to_double_int(i64 0), !dbg !4015
  %76 = bitcast %struct.double_int* %tmp100 to { i64, i64 }*, !dbg !4015
  %77 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %76, i32 0, i32 0, !dbg !4015
  %78 = extractvalue { i64, i64 } %call101, 0, !dbg !4015
  store i64 %78, i64* %77, align 8, !dbg !4015
  %79 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %76, i32 0, i32 1, !dbg !4015
  %80 = extractvalue { i64, i64 } %call101, 1, !dbg !4015
  store i64 %80, i64* %79, align 8, !dbg !4015
  %81 = bitcast %struct.double_int* %max99 to i8*, !dbg !4015
  %82 = bitcast %struct.double_int* %tmp100 to i8*, !dbg !4015
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %81, i8* align 8 %82, i64 16, i1 false), !dbg !4015
  store i8 1, i8* %retval, align 1, !dbg !4016
  br label %return, !dbg !4016

if.end102:                                        ; preds = %if.end89
  %83 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4017
  %84 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !4018
  %base103 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %84, i32 0, i32 0, !dbg !4019
  %85 = load %union.tree_node*, %union.tree_node** %base103, align 8, !dbg !4019
  %86 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !4020
  %base104 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %86, i32 0, i32 0, !dbg !4021
  %87 = load %union.tree_node*, %union.tree_node** %base104, align 8, !dbg !4021
  call void @bound_difference(%struct.loop* %83, %union.tree_node* %85, %union.tree_node* %87, %struct.bounds* %bnds), !dbg !4022
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4023
  %tobool105 = icmp ne %struct._IO_FILE* %88, null, !dbg !4023
  br i1 %tobool105, label %land.lhs.true106, label %if.end124, !dbg !4025

land.lhs.true106:                                 ; preds = %if.end102
  %89 = load i32, i32* @dump_flags, align 4, !dbg !4026
  %and = and i32 %89, 8, !dbg !4027
  %tobool107 = icmp ne i32 %and, 0, !dbg !4027
  br i1 %tobool107, label %if.then108, label %if.end124, !dbg !4028

if.then108:                                       ; preds = %land.lhs.true106
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4029
  %91 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4031
  %num = getelementptr inbounds %struct.loop, %struct.loop* %91, i32 0, i32 0, !dbg !4032
  %92 = load i32, i32* %num, align 8, !dbg !4032
  %call109 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %90, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.13, i64 0, i64 0), i32 %92), !dbg !4033
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4034
  %call110 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %93, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0)), !dbg !4035
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4036
  %95 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !4037
  call void @dump_affine_iv(%struct._IO_FILE* %94, %struct.affine_iv* %95), !dbg !4038
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4039
  %97 = load i32, i32* %code.addr, align 4, !dbg !4040
  %cmp111 = icmp eq i32 %97, 102, !dbg !4041
  br i1 %cmp111, label %cond.true, label %cond.false, !dbg !4040

cond.true:                                        ; preds = %if.then108
  br label %cond.end, !dbg !4040

cond.false:                                       ; preds = %if.then108
  %98 = load i32, i32* %code.addr, align 4, !dbg !4042
  %cmp113 = icmp eq i32 %98, 97, !dbg !4043
  %99 = zext i1 %cmp113 to i64, !dbg !4042
  %cond = select i1 %cmp113, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i64 0, i64 0), !dbg !4042
  br label %cond.end, !dbg !4040

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond115 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i64 0, i64 0), %cond.true ], [ %cond, %cond.false ], !dbg !4040
  %call116 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %96, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i64 0, i64 0), i8* %cond115), !dbg !4044
  %100 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4045
  %101 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !4046
  call void @dump_affine_iv(%struct._IO_FILE* %100, %struct.affine_iv* %101), !dbg !4047
  %102 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4048
  %call117 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %102, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0)), !dbg !4049
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4050
  %call118 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %103, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.20, i64 0, i64 0)), !dbg !4051
  %104 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4052
  %below = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i32 0, i32 0, !dbg !4053
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below, i64 0, i64 0, !dbg !4054
  %call119 = call i64 @mpz_out_str(%struct._IO_FILE* %104, i32 10, %struct.__mpz_struct* %arraydecay), !dbg !4055
  %105 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4056
  %call120 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %105, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21, i64 0, i64 0)), !dbg !4057
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4058
  %up = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i32 0, i32 1, !dbg !4059
  %arraydecay121 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up, i64 0, i64 0, !dbg !4060
  %call122 = call i64 @mpz_out_str(%struct._IO_FILE* %106, i32 10, %struct.__mpz_struct* %arraydecay121), !dbg !4061
  %107 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4062
  %call123 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %107, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0)), !dbg !4063
  br label %if.end124, !dbg !4064

if.end124:                                        ; preds = %cond.end, %land.lhs.true106, %if.end102
  %108 = load i32, i32* %code.addr, align 4, !dbg !4065
  switch i32 %108, label %sw.default [
    i32 102, label %sw.bb
    i32 97, label %sw.bb134
    i32 98, label %sw.bb136
  ], !dbg !4066

sw.bb:                                            ; preds = %if.end124
  %109 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !4067
  %step125 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %109, i32 0, i32 1, !dbg !4067
  %110 = load %union.tree_node*, %union.tree_node** %step125, align 8, !dbg !4067
  %call126 = call i32 @integer_zerop(%union.tree_node* %110), !dbg !4067
  %tobool127 = icmp ne i32 %call126, 0, !dbg !4067
  br i1 %tobool127, label %cond.false129, label %cond.true128, !dbg !4067

cond.true128:                                     ; preds = %sw.bb
  call void @fancy_abort(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i32 1314, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !4067
  br label %cond.end130, !dbg !4067

cond.false129:                                    ; preds = %sw.bb
  br label %cond.end130, !dbg !4067

cond.end130:                                      ; preds = %cond.false129, %cond.true128
  %cond131 = phi i32 [ 0, %cond.true128 ], [ 0, %cond.false129 ], !dbg !4067
  %111 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4069
  %112 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !4070
  %113 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !4071
  %base132 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %113, i32 0, i32 0, !dbg !4072
  %114 = load %union.tree_node*, %union.tree_node** %base132, align 8, !dbg !4072
  %115 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !4073
  %116 = load i8, i8* %exit_must_be_taken, align 1, !dbg !4074
  %call133 = call zeroext i8 @number_of_iterations_ne(%union.tree_node* %111, %struct.affine_iv* %112, %union.tree_node* %114, %struct.tree_niter_desc* %115, i8 zeroext %116, %struct.bounds* %bnds), !dbg !4075
  store i8 %call133, i8* %ret, align 1, !dbg !4076
  br label %sw.epilog, !dbg !4077

sw.bb134:                                         ; preds = %if.end124
  %117 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4078
  %118 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !4079
  %119 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !4080
  %120 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !4081
  %121 = load i8, i8* %exit_must_be_taken, align 1, !dbg !4082
  %call135 = call zeroext i8 @number_of_iterations_lt(%union.tree_node* %117, %struct.affine_iv* %118, %struct.affine_iv* %119, %struct.tree_niter_desc* %120, i8 zeroext %121, %struct.bounds* %bnds), !dbg !4083
  store i8 %call135, i8* %ret, align 1, !dbg !4084
  br label %sw.epilog, !dbg !4085

sw.bb136:                                         ; preds = %if.end124
  %122 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4086
  %123 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !4087
  %124 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !4088
  %125 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !4089
  %126 = load i8, i8* %exit_must_be_taken, align 1, !dbg !4090
  %call137 = call zeroext i8 @number_of_iterations_le(%union.tree_node* %122, %struct.affine_iv* %123, %struct.affine_iv* %124, %struct.tree_niter_desc* %125, i8 zeroext %126, %struct.bounds* %bnds), !dbg !4091
  store i8 %call137, i8* %ret, align 1, !dbg !4092
  br label %sw.epilog, !dbg !4093

sw.default:                                       ; preds = %if.end124
  call void @fancy_abort(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i32 1330, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !4094
  br label %sw.epilog, !dbg !4095

sw.epilog:                                        ; preds = %sw.default, %sw.bb136, %sw.bb134, %cond.end130
  %up138 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i32 0, i32 1, !dbg !4096
  %arraydecay139 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up138, i64 0, i64 0, !dbg !4097
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay139), !dbg !4098
  %below140 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i32 0, i32 0, !dbg !4099
  %arraydecay141 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below140, i64 0, i64 0, !dbg !4100
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay141), !dbg !4101
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4102
  %tobool142 = icmp ne %struct._IO_FILE* %127, null, !dbg !4102
  br i1 %tobool142, label %land.lhs.true143, label %if.end174, !dbg !4104

land.lhs.true143:                                 ; preds = %sw.epilog
  %128 = load i32, i32* @dump_flags, align 4, !dbg !4105
  %and144 = and i32 %128, 8, !dbg !4106
  %tobool145 = icmp ne i32 %and144, 0, !dbg !4106
  br i1 %tobool145, label %if.then146, label %if.end174, !dbg !4107

if.then146:                                       ; preds = %land.lhs.true143
  %129 = load i8, i8* %ret, align 1, !dbg !4108
  %tobool147 = icmp ne i8 %129, 0, !dbg !4108
  br i1 %tobool147, label %if.then148, label %if.else171, !dbg !4111

if.then148:                                       ; preds = %if.then146
  %130 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4112
  %call149 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %130, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i64 0, i64 0)), !dbg !4114
  %131 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !4115
  %assumptions150 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %131, i32 0, i32 0, !dbg !4117
  %132 = load %union.tree_node*, %union.tree_node** %assumptions150, align 8, !dbg !4117
  %call151 = call i32 @integer_nonzerop(%union.tree_node* %132), !dbg !4118
  %tobool152 = icmp ne i32 %call151, 0, !dbg !4118
  br i1 %tobool152, label %if.end157, label %if.then153, !dbg !4119

if.then153:                                       ; preds = %if.then148
  %133 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4120
  %call154 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %133, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.23, i64 0, i64 0)), !dbg !4122
  %134 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4123
  %135 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !4124
  %assumptions155 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %135, i32 0, i32 0, !dbg !4125
  %136 = load %union.tree_node*, %union.tree_node** %assumptions155, align 8, !dbg !4125
  call void @print_generic_expr(%struct._IO_FILE* %134, %union.tree_node* %136, i32 2), !dbg !4126
  %137 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4127
  %call156 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %137, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0)), !dbg !4128
  br label %if.end157, !dbg !4129

if.end157:                                        ; preds = %if.then153, %if.then148
  %138 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !4130
  %may_be_zero158 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %138, i32 0, i32 1, !dbg !4132
  %139 = load %union.tree_node*, %union.tree_node** %may_be_zero158, align 8, !dbg !4132
  %call159 = call i32 @integer_zerop(%union.tree_node* %139), !dbg !4133
  %tobool160 = icmp ne i32 %call159, 0, !dbg !4133
  br i1 %tobool160, label %if.end165, label %if.then161, !dbg !4134

if.then161:                                       ; preds = %if.end157
  %140 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4135
  %call162 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %140, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.24, i64 0, i64 0)), !dbg !4137
  %141 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4138
  %142 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !4139
  %may_be_zero163 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %142, i32 0, i32 1, !dbg !4140
  %143 = load %union.tree_node*, %union.tree_node** %may_be_zero163, align 8, !dbg !4140
  call void @print_generic_expr(%struct._IO_FILE* %141, %union.tree_node* %143, i32 2), !dbg !4141
  %144 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4142
  %call164 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %144, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0)), !dbg !4143
  br label %if.end165, !dbg !4144

if.end165:                                        ; preds = %if.then161, %if.end157
  %145 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4145
  %call166 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %145, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.25, i64 0, i64 0)), !dbg !4146
  %146 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4147
  %147 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !4148
  %niter167 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %147, i32 0, i32 2, !dbg !4149
  %148 = load %union.tree_node*, %union.tree_node** %niter167, align 8, !dbg !4149
  call void @print_generic_expr(%struct._IO_FILE* %146, %union.tree_node* %148, i32 2), !dbg !4150
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4151
  %call168 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %149, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i64 0, i64 0)), !dbg !4152
  %150 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4153
  %151 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !4154
  %max169 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %151, i32 0, i32 3, !dbg !4155
  %152 = bitcast %struct.double_int* %max169 to { i64, i64 }*, !dbg !4156
  %153 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %152, i32 0, i32 0, !dbg !4156
  %154 = load i64, i64* %153, align 8, !dbg !4156
  %155 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %152, i32 0, i32 1, !dbg !4156
  %156 = load i64, i64* %155, align 8, !dbg !4156
  call void @dump_double_int(%struct._IO_FILE* %150, i64 %154, i64 %156, i8 zeroext 1), !dbg !4156
  %157 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4157
  %call170 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %157, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0)), !dbg !4158
  br label %if.end173, !dbg !4159

if.else171:                                       ; preds = %if.then146
  %158 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4160
  %call172 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %158, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0)), !dbg !4161
  br label %if.end173

if.end173:                                        ; preds = %if.else171, %if.end165
  br label %if.end174, !dbg !4162

if.end174:                                        ; preds = %if.end173, %land.lhs.true143, %sw.epilog
  %159 = load i8, i8* %ret, align 1, !dbg !4163
  store i8 %159, i8* %retval, align 1, !dbg !4164
  br label %return, !dbg !4164

return:                                           ; preds = %if.end174, %if.then95, %if.then87, %if.then78, %if.then67, %if.then49
  %160 = load i8, i8* %retval, align 1, !dbg !4165
  ret i8 %160, !dbg !4165
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @simplify_using_outer_evolutions(%struct.loop* %loop, %union.tree_node* %expr) #0 !dbg !4166 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %changed = alloca i8, align 1
  %e = alloca %union.tree_node*, align 8
  %e0 = alloca %union.tree_node*, align 8
  %e1 = alloca %union.tree_node*, align 8
  %e2 = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4169, metadata !DIExpression()), !dbg !4170
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4171, metadata !DIExpression()), !dbg !4172
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4173, metadata !DIExpression()), !dbg !4174
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4175
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4175
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4175
  %bf.load = load i64, i64* %1, align 8, !dbg !4175
  %bf.clear = and i64 %bf.load, 65535, !dbg !4175
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4175
  store i32 %bf.cast, i32* %code, align 4, !dbg !4174
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !4176, metadata !DIExpression()), !dbg !4177
  call void @llvm.dbg.declare(metadata %union.tree_node** %e, metadata !4178, metadata !DIExpression()), !dbg !4179
  call void @llvm.dbg.declare(metadata %union.tree_node** %e0, metadata !4180, metadata !DIExpression()), !dbg !4181
  call void @llvm.dbg.declare(metadata %union.tree_node** %e1, metadata !4182, metadata !DIExpression()), !dbg !4183
  call void @llvm.dbg.declare(metadata %union.tree_node** %e2, metadata !4184, metadata !DIExpression()), !dbg !4185
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4186
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %2), !dbg !4188
  %tobool = icmp ne i8 %call, 0, !dbg !4188
  br i1 %tobool, label %if.then, label %if.end, !dbg !4189

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4190
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !4191
  br label %return, !dbg !4191

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %code, align 4, !dbg !4192
  %cmp = icmp eq i32 %4, 94, !dbg !4194
  br i1 %cmp, label %if.then4, label %lor.lhs.false, !dbg !4195

lor.lhs.false:                                    ; preds = %if.end
  %5 = load i32, i32* %code, align 4, !dbg !4196
  %cmp1 = icmp eq i32 %5, 93, !dbg !4197
  br i1 %cmp1, label %if.then4, label %lor.lhs.false2, !dbg !4198

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %6 = load i32, i32* %code, align 4, !dbg !4199
  %cmp3 = icmp eq i32 %6, 56, !dbg !4200
  br i1 %cmp3, label %if.then4, label %if.end44, !dbg !4201

if.then4:                                         ; preds = %lor.lhs.false2, %lor.lhs.false, %if.end
  store i8 0, i8* %changed, align 1, !dbg !4202
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4204
  %8 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4205
  %exp = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !4205
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4205
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4205
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4205
  %call5 = call %union.tree_node* @simplify_using_outer_evolutions(%struct.loop* %7, %union.tree_node* %9), !dbg !4206
  store %union.tree_node* %call5, %union.tree_node** %e0, align 8, !dbg !4207
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4208
  %exp6 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !4208
  %operands7 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6, i32 0, i32 3, !dbg !4208
  %arrayidx8 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands7, i64 0, i64 0, !dbg !4208
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx8, align 8, !dbg !4208
  %12 = load %union.tree_node*, %union.tree_node** %e0, align 8, !dbg !4210
  %cmp9 = icmp ne %union.tree_node* %11, %12, !dbg !4211
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !4212

if.then10:                                        ; preds = %if.then4
  store i8 1, i8* %changed, align 1, !dbg !4213
  br label %if.end11, !dbg !4214

if.end11:                                         ; preds = %if.then10, %if.then4
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4215
  %14 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4216
  %exp12 = bitcast %union.tree_node* %14 to %struct.tree_exp*, !dbg !4216
  %operands13 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 3, !dbg !4216
  %arrayidx14 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands13, i64 0, i64 1, !dbg !4216
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx14, align 8, !dbg !4216
  %call15 = call %union.tree_node* @simplify_using_outer_evolutions(%struct.loop* %13, %union.tree_node* %15), !dbg !4217
  store %union.tree_node* %call15, %union.tree_node** %e1, align 8, !dbg !4218
  %16 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4219
  %exp16 = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !4219
  %operands17 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp16, i32 0, i32 3, !dbg !4219
  %arrayidx18 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands17, i64 0, i64 1, !dbg !4219
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx18, align 8, !dbg !4219
  %18 = load %union.tree_node*, %union.tree_node** %e1, align 8, !dbg !4221
  %cmp19 = icmp ne %union.tree_node* %17, %18, !dbg !4222
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !4223

if.then20:                                        ; preds = %if.end11
  store i8 1, i8* %changed, align 1, !dbg !4224
  br label %if.end21, !dbg !4225

if.end21:                                         ; preds = %if.then20, %if.end11
  %19 = load i32, i32* %code, align 4, !dbg !4226
  %cmp22 = icmp eq i32 %19, 56, !dbg !4228
  br i1 %cmp22, label %if.then23, label %if.else, !dbg !4229

if.then23:                                        ; preds = %if.end21
  %20 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4230
  %21 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4232
  %exp24 = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !4232
  %operands25 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp24, i32 0, i32 3, !dbg !4232
  %arrayidx26 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands25, i64 0, i64 2, !dbg !4232
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx26, align 8, !dbg !4232
  %call27 = call %union.tree_node* @simplify_using_outer_evolutions(%struct.loop* %20, %union.tree_node* %22), !dbg !4233
  store %union.tree_node* %call27, %union.tree_node** %e2, align 8, !dbg !4234
  %23 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4235
  %exp28 = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !4235
  %operands29 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp28, i32 0, i32 3, !dbg !4235
  %arrayidx30 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands29, i64 0, i64 2, !dbg !4235
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx30, align 8, !dbg !4235
  %25 = load %union.tree_node*, %union.tree_node** %e2, align 8, !dbg !4237
  %cmp31 = icmp ne %union.tree_node* %24, %25, !dbg !4238
  br i1 %cmp31, label %if.then32, label %if.end33, !dbg !4239

if.then32:                                        ; preds = %if.then23
  store i8 1, i8* %changed, align 1, !dbg !4240
  br label %if.end33, !dbg !4241

if.end33:                                         ; preds = %if.then32, %if.then23
  br label %if.end34, !dbg !4242

if.else:                                          ; preds = %if.end21
  store %union.tree_node* null, %union.tree_node** %e2, align 8, !dbg !4243
  br label %if.end34

if.end34:                                         ; preds = %if.else, %if.end33
  %26 = load i8, i8* %changed, align 1, !dbg !4244
  %tobool35 = icmp ne i8 %26, 0, !dbg !4244
  br i1 %tobool35, label %if.then36, label %if.end43, !dbg !4246

if.then36:                                        ; preds = %if.end34
  %27 = load i32, i32* %code, align 4, !dbg !4247
  %cmp37 = icmp eq i32 %27, 56, !dbg !4250
  br i1 %cmp37, label %if.then38, label %if.else40, !dbg !4251

if.then38:                                        ; preds = %if.then36
  %28 = load i32, i32* %code, align 4, !dbg !4252
  %29 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4252
  %30 = load %union.tree_node*, %union.tree_node** %e0, align 8, !dbg !4252
  %31 = load %union.tree_node*, %union.tree_node** %e1, align 8, !dbg !4252
  %32 = load %union.tree_node*, %union.tree_node** %e2, align 8, !dbg !4252
  %call39 = call %union.tree_node* @fold_build3_stat_loc(i32 0, i32 %28, %union.tree_node* %29, %union.tree_node* %30, %union.tree_node* %31, %union.tree_node* %32), !dbg !4252
  store %union.tree_node* %call39, %union.tree_node** %expr.addr, align 8, !dbg !4253
  br label %if.end42, !dbg !4254

if.else40:                                        ; preds = %if.then36
  %33 = load i32, i32* %code, align 4, !dbg !4255
  %34 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4255
  %35 = load %union.tree_node*, %union.tree_node** %e0, align 8, !dbg !4255
  %36 = load %union.tree_node*, %union.tree_node** %e1, align 8, !dbg !4255
  %call41 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %33, %union.tree_node* %34, %union.tree_node* %35, %union.tree_node* %36), !dbg !4255
  store %union.tree_node* %call41, %union.tree_node** %expr.addr, align 8, !dbg !4256
  br label %if.end42

if.end42:                                         ; preds = %if.else40, %if.then38
  br label %if.end43, !dbg !4257

if.end43:                                         ; preds = %if.end42, %if.end34
  %37 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4258
  store %union.tree_node* %37, %union.tree_node** %retval, align 8, !dbg !4259
  br label %return, !dbg !4259

if.end44:                                         ; preds = %lor.lhs.false2
  %38 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4260
  %39 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4261
  %call45 = call %union.tree_node* @instantiate_parameters(%struct.loop* %38, %union.tree_node* %39), !dbg !4262
  store %union.tree_node* %call45, %union.tree_node** %e, align 8, !dbg !4263
  %40 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !4264
  %call46 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %40), !dbg !4266
  %tobool47 = icmp ne i8 %call46, 0, !dbg !4266
  br i1 %tobool47, label %if.then48, label %if.end49, !dbg !4267

if.then48:                                        ; preds = %if.end44
  %41 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !4268
  store %union.tree_node* %41, %union.tree_node** %retval, align 8, !dbg !4269
  br label %return, !dbg !4269

if.end49:                                         ; preds = %if.end44
  %42 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4270
  store %union.tree_node* %42, %union.tree_node** %retval, align 8, !dbg !4271
  br label %return, !dbg !4271

return:                                           ; preds = %if.end49, %if.then48, %if.end43, %if.then
  %43 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4272
  ret %union.tree_node* %43, !dbg !4272
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @simplify_using_initial_conditions(%struct.loop* %loop, %union.tree_node* %expr) #0 !dbg !4273 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %e = alloca %struct.edge_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %cond = alloca %union.tree_node*, align 8
  %cnt = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4274, metadata !DIExpression()), !dbg !4275
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !4276, metadata !DIExpression()), !dbg !4277
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4278, metadata !DIExpression()), !dbg !4279
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4280, metadata !DIExpression()), !dbg !4281
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4282, metadata !DIExpression()), !dbg !4283
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond, metadata !4284, metadata !DIExpression()), !dbg !4285
  call void @llvm.dbg.declare(metadata i32* %cnt, metadata !4286, metadata !DIExpression()), !dbg !4287
  store i32 0, i32* %cnt, align 4, !dbg !4287
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4288
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4288
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4288
  %bf.load = load i64, i64* %1, align 8, !dbg !4288
  %bf.clear = and i64 %bf.load, 65535, !dbg !4288
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4288
  %cmp = icmp eq i32 %bf.cast, 23, !dbg !4290
  br i1 %cmp, label %if.then, label %if.end, !dbg !4291

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4292
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !4293
  br label %return, !dbg !4293

if.end:                                           ; preds = %entry
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4294
  %header = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 2, !dbg !4296
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !4296
  store %struct.basic_block_def* %4, %struct.basic_block_def** %bb, align 8, !dbg !4297
  br label %for.cond, !dbg !4298

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4299
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4301
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !4301
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4301
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4301
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 0, !dbg !4301
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4301
  %cmp1 = icmp ne %struct.basic_block_def* %5, %8, !dbg !4302
  br i1 %cmp1, label %land.rhs, label %land.end, !dbg !4303

land.rhs:                                         ; preds = %for.cond
  %9 = load i32, i32* %cnt, align 4, !dbg !4304
  %cmp2 = icmp slt i32 %9, 8, !dbg !4305
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp2, %land.rhs ], !dbg !4306
  br i1 %10, label %for.body, label %for.end, !dbg !4307

for.body:                                         ; preds = %land.end
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4308
  %call = call zeroext i8 @single_pred_p(%struct.basic_block_def* %11), !dbg !4311
  %tobool = icmp ne i8 %call, 0, !dbg !4311
  br i1 %tobool, label %if.end4, label %if.then3, !dbg !4312

if.then3:                                         ; preds = %for.body
  br label %for.inc, !dbg !4313

if.end4:                                          ; preds = %for.body
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4314
  %call5 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %12), !dbg !4315
  store %struct.edge_def* %call5, %struct.edge_def** %e, align 8, !dbg !4316
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4317
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 7, !dbg !4319
  %14 = load i32, i32* %flags, align 8, !dbg !4319
  %and = and i32 %14, 3072, !dbg !4320
  %tobool6 = icmp ne i32 %and, 0, !dbg !4320
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !4321

if.then7:                                         ; preds = %if.end4
  br label %for.inc, !dbg !4322

if.end8:                                          ; preds = %if.end4
  %15 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4323
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %15, i32 0, i32 0, !dbg !4324
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4324
  %call9 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %16), !dbg !4325
  store %union.gimple_statement_d* %call9, %union.gimple_statement_d** %stmt, align 8, !dbg !4326
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4327
  %call10 = call i32 @gimple_cond_code(%union.gimple_statement_d* %17), !dbg !4327
  %18 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4327
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4327
  %call11 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %19), !dbg !4327
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4327
  %call12 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %20), !dbg !4327
  %call13 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %call10, %union.tree_node* %18, %union.tree_node* %call11, %union.tree_node* %call12), !dbg !4327
  store %union.tree_node* %call13, %union.tree_node** %cond, align 8, !dbg !4328
  %21 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4329
  %flags14 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i32 0, i32 7, !dbg !4331
  %22 = load i32, i32* %flags14, align 8, !dbg !4331
  %and15 = and i32 %22, 2048, !dbg !4332
  %tobool16 = icmp ne i32 %and15, 0, !dbg !4332
  br i1 %tobool16, label %if.then17, label %if.end19, !dbg !4333

if.then17:                                        ; preds = %if.end8
  %23 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !4334
  %call18 = call %union.tree_node* @invert_truthvalue_loc(i32 0, %union.tree_node* %23), !dbg !4334
  store %union.tree_node* %call18, %union.tree_node** %cond, align 8, !dbg !4335
  br label %if.end19, !dbg !4336

if.end19:                                         ; preds = %if.then17, %if.end8
  %24 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !4337
  %25 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4338
  %call20 = call %union.tree_node* @tree_simplify_using_condition(%union.tree_node* %24, %union.tree_node* %25), !dbg !4339
  store %union.tree_node* %call20, %union.tree_node** %expr.addr, align 8, !dbg !4340
  %26 = load i32, i32* %cnt, align 4, !dbg !4341
  %inc = add nsw i32 %26, 1, !dbg !4341
  store i32 %inc, i32* %cnt, align 4, !dbg !4341
  br label %for.inc, !dbg !4342

for.inc:                                          ; preds = %if.end19, %if.then7, %if.then3
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4343
  %call21 = call %struct.basic_block_def* @get_immediate_dominator(i32 1, %struct.basic_block_def* %27), !dbg !4344
  store %struct.basic_block_def* %call21, %struct.basic_block_def** %bb, align 8, !dbg !4345
  br label %for.cond, !dbg !4346, !llvm.loop !4347

for.end:                                          ; preds = %land.end
  %28 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !4349
  store %union.tree_node* %28, %union.tree_node** %retval, align 8, !dbg !4350
  br label %return, !dbg !4350

return:                                           ; preds = %for.end, %if.then
  %29 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4351
  ret %union.tree_node* %29, !dbg !4351
}

declare dso_local i32 @integer_onep(%union.tree_node*) #2

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !4352 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4355, metadata !DIExpression()), !dbg !4356
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4357
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4358
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !4359
  %1 = load i32, i32* %location, align 8, !dbg !4359
  ret i32 %1, !dbg !4360
}

declare dso_local i32 @integer_all_onesp(%union.tree_node*) #2

declare dso_local zeroext i8 @warning_at(i32, i32, i8*, ...) #2

declare dso_local void @expand_location(%struct.expanded_location* sret, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @find_loop_niter(%struct.loop* %loop, %struct.edge_def** %exit) #0 !dbg !4361 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %exit.addr = alloca %struct.edge_def**, align 8
  %i = alloca i32, align 4
  %exits = alloca %struct.VEC_edge_heap*, align 8
  %ex = alloca %struct.edge_def*, align 8
  %niter = alloca %union.tree_node*, align 8
  %aniter = alloca %union.tree_node*, align 8
  %desc = alloca %struct.tree_niter_desc, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4365, metadata !DIExpression()), !dbg !4366
  store %struct.edge_def** %exit, %struct.edge_def*** %exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %exit.addr, metadata !4367, metadata !DIExpression()), !dbg !4368
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4369, metadata !DIExpression()), !dbg !4370
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %exits, metadata !4371, metadata !DIExpression()), !dbg !4377
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4378
  %call = call %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop* %0), !dbg !4379
  store %struct.VEC_edge_heap* %call, %struct.VEC_edge_heap** %exits, align 8, !dbg !4377
  call void @llvm.dbg.declare(metadata %struct.edge_def** %ex, metadata !4380, metadata !DIExpression()), !dbg !4381
  call void @llvm.dbg.declare(metadata %union.tree_node** %niter, metadata !4382, metadata !DIExpression()), !dbg !4383
  store %union.tree_node* null, %union.tree_node** %niter, align 8, !dbg !4383
  call void @llvm.dbg.declare(metadata %union.tree_node** %aniter, metadata !4384, metadata !DIExpression()), !dbg !4385
  call void @llvm.dbg.declare(metadata %struct.tree_niter_desc* %desc, metadata !4386, metadata !DIExpression()), !dbg !4387
  %1 = load %struct.edge_def**, %struct.edge_def*** %exit.addr, align 8, !dbg !4388
  store %struct.edge_def* null, %struct.edge_def** %1, align 8, !dbg !4389
  store i32 0, i32* %i, align 4, !dbg !4390
  br label %for.cond, !dbg !4392

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !4393
  %tobool = icmp ne %struct.VEC_edge_heap* %2, null, !dbg !4393
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4393

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !4393
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %3, i32 0, i32 0, !dbg !4393
  br label %cond.end, !dbg !4393

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4393

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4393
  %4 = load i32, i32* %i, align 4, !dbg !4393
  %call1 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond, i32 %4, %struct.edge_def** %ex), !dbg !4393
  %tobool2 = icmp ne i32 %call1, 0, !dbg !4395
  br i1 %tobool2, label %for.body, label %for.end, !dbg !4395

for.body:                                         ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4396
  %6 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !4399
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %6, i32 0, i32 0, !dbg !4400
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4400
  %call3 = call zeroext i8 @just_once_each_iteration_p(%struct.loop* %5, %struct.basic_block_def* %7), !dbg !4401
  %tobool4 = icmp ne i8 %call3, 0, !dbg !4401
  br i1 %tobool4, label %if.end, label %if.then, !dbg !4402

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !4403

if.end:                                           ; preds = %for.body
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4404
  %9 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !4406
  %call5 = call zeroext i8 @number_of_iterations_exit(%struct.loop* %8, %struct.edge_def* %9, %struct.tree_niter_desc* %desc, i8 zeroext 0), !dbg !4407
  %tobool6 = icmp ne i8 %call5, 0, !dbg !4407
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !4408

if.then7:                                         ; preds = %if.end
  br label %for.inc, !dbg !4409

if.end8:                                          ; preds = %if.end
  %may_be_zero = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %desc, i32 0, i32 1, !dbg !4410
  %10 = load %union.tree_node*, %union.tree_node** %may_be_zero, align 8, !dbg !4410
  %call9 = call i32 @integer_nonzerop(%union.tree_node* %10), !dbg !4412
  %tobool10 = icmp ne i32 %call9, 0, !dbg !4412
  br i1 %tobool10, label %if.then11, label %if.end13, !dbg !4413

if.then11:                                        ; preds = %if.end8
  %11 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 6), align 16, !dbg !4414
  %call12 = call %union.tree_node* @build_int_cst(%union.tree_node* %11, i64 0), !dbg !4416
  store %union.tree_node* %call12, %union.tree_node** %niter, align 8, !dbg !4417
  %12 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !4418
  %13 = load %struct.edge_def**, %struct.edge_def*** %exit.addr, align 8, !dbg !4419
  store %struct.edge_def* %12, %struct.edge_def** %13, align 8, !dbg !4420
  br label %for.end, !dbg !4421

if.end13:                                         ; preds = %if.end8
  %may_be_zero14 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %desc, i32 0, i32 1, !dbg !4422
  %14 = load %union.tree_node*, %union.tree_node** %may_be_zero14, align 8, !dbg !4422
  %call15 = call i32 @integer_zerop(%union.tree_node* %14), !dbg !4424
  %tobool16 = icmp ne i32 %call15, 0, !dbg !4424
  br i1 %tobool16, label %if.end18, label %if.then17, !dbg !4425

if.then17:                                        ; preds = %if.end13
  br label %for.inc, !dbg !4426

if.end18:                                         ; preds = %if.end13
  %niter19 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %desc, i32 0, i32 2, !dbg !4427
  %15 = load %union.tree_node*, %union.tree_node** %niter19, align 8, !dbg !4427
  store %union.tree_node* %15, %union.tree_node** %aniter, align 8, !dbg !4428
  %16 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !4429
  %tobool20 = icmp ne %union.tree_node* %16, null, !dbg !4429
  br i1 %tobool20, label %if.end22, label %if.then21, !dbg !4431

if.then21:                                        ; preds = %if.end18
  %17 = load %union.tree_node*, %union.tree_node** %aniter, align 8, !dbg !4432
  store %union.tree_node* %17, %union.tree_node** %niter, align 8, !dbg !4434
  %18 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !4435
  %19 = load %struct.edge_def**, %struct.edge_def*** %exit.addr, align 8, !dbg !4436
  store %struct.edge_def* %18, %struct.edge_def** %19, align 8, !dbg !4437
  br label %for.inc, !dbg !4438

if.end22:                                         ; preds = %if.end18
  %20 = load %union.tree_node*, %union.tree_node** %aniter, align 8, !dbg !4439
  %base23 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !4439
  %21 = bitcast %struct.tree_base* %base23 to i64*, !dbg !4439
  %bf.load = load i64, i64* %21, align 8, !dbg !4439
  %bf.clear = and i64 %bf.load, 65535, !dbg !4439
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4439
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !4441
  br i1 %cmp, label %if.then24, label %if.end25, !dbg !4442

if.then24:                                        ; preds = %if.end22
  br label %for.inc, !dbg !4443

if.end25:                                         ; preds = %if.end22
  %22 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !4444
  %base26 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !4444
  %23 = bitcast %struct.tree_base* %base26 to i64*, !dbg !4444
  %bf.load27 = load i64, i64* %23, align 8, !dbg !4444
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !4444
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !4444
  %cmp30 = icmp ne i32 %bf.cast29, 23, !dbg !4446
  br i1 %cmp30, label %if.then31, label %if.end32, !dbg !4447

if.then31:                                        ; preds = %if.end25
  %24 = load %union.tree_node*, %union.tree_node** %aniter, align 8, !dbg !4448
  store %union.tree_node* %24, %union.tree_node** %niter, align 8, !dbg !4450
  %25 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !4451
  %26 = load %struct.edge_def**, %struct.edge_def*** %exit.addr, align 8, !dbg !4452
  store %struct.edge_def* %25, %struct.edge_def** %26, align 8, !dbg !4453
  br label %for.inc, !dbg !4454

if.end32:                                         ; preds = %if.end25
  %27 = load %union.tree_node*, %union.tree_node** %aniter, align 8, !dbg !4455
  %28 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !4457
  %call33 = call i32 @tree_int_cst_lt(%union.tree_node* %27, %union.tree_node* %28), !dbg !4458
  %tobool34 = icmp ne i32 %call33, 0, !dbg !4458
  br i1 %tobool34, label %if.then35, label %if.end36, !dbg !4459

if.then35:                                        ; preds = %if.end32
  %29 = load %union.tree_node*, %union.tree_node** %aniter, align 8, !dbg !4460
  store %union.tree_node* %29, %union.tree_node** %niter, align 8, !dbg !4462
  %30 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !4463
  %31 = load %struct.edge_def**, %struct.edge_def*** %exit.addr, align 8, !dbg !4464
  store %struct.edge_def* %30, %struct.edge_def** %31, align 8, !dbg !4465
  br label %for.inc, !dbg !4466

if.end36:                                         ; preds = %if.end32
  br label %for.inc, !dbg !4467

for.inc:                                          ; preds = %if.end36, %if.then35, %if.then31, %if.then24, %if.then21, %if.then17, %if.then7, %if.then
  %32 = load i32, i32* %i, align 4, !dbg !4468
  %inc = add i32 %32, 1, !dbg !4468
  store i32 %inc, i32* %i, align 4, !dbg !4468
  br label %for.cond, !dbg !4469, !llvm.loop !4470

for.end:                                          ; preds = %if.then11, %cond.end
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** %exits), !dbg !4472
  %33 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !4473
  %tobool37 = icmp ne %union.tree_node* %33, null, !dbg !4473
  br i1 %tobool37, label %cond.true38, label %cond.false39, !dbg !4473

cond.true38:                                      ; preds = %for.end
  %34 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !4474
  br label %cond.end40, !dbg !4473

cond.false39:                                     ; preds = %for.end
  %35 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !4475
  br label %cond.end40, !dbg !4473

cond.end40:                                       ; preds = %cond.false39, %cond.true38
  %cond41 = phi %union.tree_node* [ %34, %cond.true38 ], [ %35, %cond.false39 ], !dbg !4473
  ret %union.tree_node* %cond41, !dbg !4476
}

declare dso_local %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %vec_, i32 %ix_, %struct.edge_def** %ptr) #0 !dbg !4477 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.edge_def**, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !4482, metadata !DIExpression()), !dbg !4483
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4484, metadata !DIExpression()), !dbg !4483
  store %struct.edge_def** %ptr, %struct.edge_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %ptr.addr, metadata !4485, metadata !DIExpression()), !dbg !4483
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4486
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !4486
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4486

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4486
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4486
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !4486
  %3 = load i32, i32* %num, align 8, !dbg !4486
  %cmp = icmp ult i32 %1, %3, !dbg !4486
  br i1 %cmp, label %if.then, label %if.else, !dbg !4483

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4488
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 2, !dbg !4488
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !4488
  %idxprom = zext i32 %5 to i64, !dbg !4488
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !4488
  %6 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !4488
  %7 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !4488
  store %struct.edge_def* %6, %struct.edge_def** %7, align 8, !dbg !4488
  store i32 1, i32* %retval, align 4, !dbg !4488
  br label %return, !dbg !4488

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !4490
  store %struct.edge_def* null, %struct.edge_def** %8, align 8, !dbg !4490
  store i32 0, i32* %retval, align 4, !dbg !4490
  br label %return, !dbg !4490

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !4483
  ret i32 %9, !dbg !4483
}

declare dso_local zeroext i8 @just_once_each_iteration_p(%struct.loop*, %struct.basic_block_def*) #2

declare dso_local i32 @integer_nonzerop(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

declare dso_local i32 @tree_int_cst_lt(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_edge_heap_free(%struct.VEC_edge_heap** %vec_) #0 !dbg !4492 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_heap**, align 8
  store %struct.VEC_edge_heap** %vec_, %struct.VEC_edge_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %vec_.addr, metadata !4496, metadata !DIExpression()), !dbg !4497
  %0 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !4498
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %0, align 8, !dbg !4498
  %tobool = icmp ne %struct.VEC_edge_heap* %1, null, !dbg !4498
  br i1 %tobool, label %if.then, label %if.end, !dbg !4497

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !4498
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %2, align 8, !dbg !4498
  %4 = bitcast %struct.VEC_edge_heap* %3 to i8*, !dbg !4498
  call void @free(i8* %4), !dbg !4498
  br label %if.end, !dbg !4498

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !4497
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %5, align 8, !dbg !4497
  ret void, !dbg !4497
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @finite_loop_p(%struct.loop* %loop) #0 !dbg !4500 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %exits = alloca %struct.VEC_edge_heap*, align 8
  %ex = alloca %struct.edge_def*, align 8
  %desc = alloca %struct.tree_niter_desc, align 8
  %finite = alloca i8, align 1
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4503, metadata !DIExpression()), !dbg !4504
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4505, metadata !DIExpression()), !dbg !4506
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %exits, metadata !4507, metadata !DIExpression()), !dbg !4508
  call void @llvm.dbg.declare(metadata %struct.edge_def** %ex, metadata !4509, metadata !DIExpression()), !dbg !4510
  call void @llvm.dbg.declare(metadata %struct.tree_niter_desc* %desc, metadata !4511, metadata !DIExpression()), !dbg !4512
  call void @llvm.dbg.declare(metadata i8* %finite, metadata !4513, metadata !DIExpression()), !dbg !4514
  store i8 0, i8* %finite, align 1, !dbg !4514
  %0 = load i32, i32* @flag_unsafe_loop_optimizations, align 4, !dbg !4515
  %tobool = icmp ne i32 %0, 0, !dbg !4515
  br i1 %tobool, label %if.then, label %if.end, !dbg !4517

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !4518
  br label %return, !dbg !4518

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4519
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !4519
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !4519
  %bf.load = load i64, i64* %2, align 8, !dbg !4519
  %bf.lshr = lshr i64 %bf.load, 20, !dbg !4519
  %bf.clear = and i64 %bf.lshr, 1, !dbg !4519
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4519
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !4519
  br i1 %tobool1, label %land.lhs.true, label %lor.lhs.false, !dbg !4521

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4522
  %function_decl = bitcast %union.tree_node* %3 to %struct.tree_function_decl*, !dbg !4522
  %pure_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !4522
  %bf.load2 = load i32, i32* %pure_flag, align 8, !dbg !4522
  %bf.lshr3 = lshr i32 %bf.load2, 27, !dbg !4522
  %bf.clear4 = and i32 %bf.lshr3, 1, !dbg !4522
  %tobool5 = icmp ne i32 %bf.clear4, 0, !dbg !4522
  br i1 %tobool5, label %land.lhs.true, label %if.end17, !dbg !4523

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end
  %4 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4524
  %function_decl6 = bitcast %union.tree_node* %4 to %struct.tree_function_decl*, !dbg !4524
  %looping_const_or_pure_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl6, i32 0, i32 5, !dbg !4524
  %bf.load7 = load i32, i32* %looping_const_or_pure_flag, align 8, !dbg !4524
  %bf.lshr8 = lshr i32 %bf.load7, 28, !dbg !4524
  %bf.clear9 = and i32 %bf.lshr8, 1, !dbg !4524
  %tobool10 = icmp ne i32 %bf.clear9, 0, !dbg !4524
  br i1 %tobool10, label %if.end17, label %if.then11, !dbg !4525

if.then11:                                        ; preds = %land.lhs.true
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4526
  %tobool12 = icmp ne %struct._IO_FILE* %5, null, !dbg !4526
  br i1 %tobool12, label %land.lhs.true13, label %if.end16, !dbg !4529

land.lhs.true13:                                  ; preds = %if.then11
  %6 = load i32, i32* @dump_flags, align 4, !dbg !4530
  %and = and i32 %6, 8, !dbg !4531
  %tobool14 = icmp ne i32 %and, 0, !dbg !4531
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !4532

if.then15:                                        ; preds = %land.lhs.true13
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4533
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4534
  %num = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 0, !dbg !4535
  %9 = load i32, i32* %num, align 8, !dbg !4535
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.5, i64 0, i64 0), i32 %9), !dbg !4536
  br label %if.end16, !dbg !4536

if.end16:                                         ; preds = %if.then15, %land.lhs.true13, %if.then11
  store i8 1, i8* %retval, align 1, !dbg !4537
  br label %return, !dbg !4537

if.end17:                                         ; preds = %land.lhs.true, %lor.lhs.false
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4538
  %call18 = call %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop* %10), !dbg !4539
  store %struct.VEC_edge_heap* %call18, %struct.VEC_edge_heap** %exits, align 8, !dbg !4540
  store i32 0, i32* %i, align 4, !dbg !4541
  br label %for.cond, !dbg !4543

for.cond:                                         ; preds = %for.inc, %if.end17
  %11 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !4544
  %tobool19 = icmp ne %struct.VEC_edge_heap* %11, null, !dbg !4544
  br i1 %tobool19, label %cond.true, label %cond.false, !dbg !4544

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !4544
  %base20 = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %12, i32 0, i32 0, !dbg !4544
  br label %cond.end, !dbg !4544

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4544

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base20, %cond.true ], [ null, %cond.false ], !dbg !4544
  %13 = load i32, i32* %i, align 4, !dbg !4544
  %call21 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond, i32 %13, %struct.edge_def** %ex), !dbg !4544
  %tobool22 = icmp ne i32 %call21, 0, !dbg !4546
  br i1 %tobool22, label %for.body, label %for.end, !dbg !4546

for.body:                                         ; preds = %cond.end
  %14 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4547
  %15 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !4550
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %15, i32 0, i32 0, !dbg !4551
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4551
  %call23 = call zeroext i8 @just_once_each_iteration_p(%struct.loop* %14, %struct.basic_block_def* %16), !dbg !4552
  %tobool24 = icmp ne i8 %call23, 0, !dbg !4552
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !4553

if.then25:                                        ; preds = %for.body
  br label %for.inc, !dbg !4554

if.end26:                                         ; preds = %for.body
  %17 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4555
  %18 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !4557
  %call27 = call zeroext i8 @number_of_iterations_exit(%struct.loop* %17, %struct.edge_def* %18, %struct.tree_niter_desc* %desc, i8 zeroext 0), !dbg !4558
  %tobool28 = icmp ne i8 %call27, 0, !dbg !4558
  br i1 %tobool28, label %if.then29, label %if.end39, !dbg !4559

if.then29:                                        ; preds = %if.end26
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4560
  %tobool30 = icmp ne %struct._IO_FILE* %19, null, !dbg !4560
  br i1 %tobool30, label %land.lhs.true31, label %if.end38, !dbg !4563

land.lhs.true31:                                  ; preds = %if.then29
  %20 = load i32, i32* @dump_flags, align 4, !dbg !4564
  %and32 = and i32 %20, 8, !dbg !4565
  %tobool33 = icmp ne i32 %and32, 0, !dbg !4565
  br i1 %tobool33, label %if.then34, label %if.end38, !dbg !4566

if.then34:                                        ; preds = %land.lhs.true31
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4567
  %22 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4569
  %num35 = getelementptr inbounds %struct.loop, %struct.loop* %22, i32 0, i32 0, !dbg !4570
  %23 = load i32, i32* %num35, align 8, !dbg !4570
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i64 0, i64 0), i32 %23), !dbg !4571
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4572
  %niter = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %desc, i32 0, i32 2, !dbg !4573
  %25 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !4573
  call void @print_generic_expr(%struct._IO_FILE* %24, %union.tree_node* %25, i32 2), !dbg !4574
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4575
  %call37 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0)), !dbg !4576
  br label %if.end38, !dbg !4577

if.end38:                                         ; preds = %if.then34, %land.lhs.true31, %if.then29
  store i8 1, i8* %finite, align 1, !dbg !4578
  br label %for.end, !dbg !4579

if.end39:                                         ; preds = %if.end26
  br label %for.inc, !dbg !4580

for.inc:                                          ; preds = %if.end39, %if.then25
  %27 = load i32, i32* %i, align 4, !dbg !4581
  %inc = add i32 %27, 1, !dbg !4581
  store i32 %inc, i32* %i, align 4, !dbg !4581
  br label %for.cond, !dbg !4582, !llvm.loop !4583

for.end:                                          ; preds = %if.end38, %cond.end
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** %exits), !dbg !4585
  %28 = load i8, i8* %finite, align 1, !dbg !4586
  store i8 %28, i8* %retval, align 1, !dbg !4587
  br label %return, !dbg !4587

return:                                           ; preds = %for.end, %if.end16, %if.then
  %29 = load i8, i8* %retval, align 1, !dbg !4588
  ret i8 %29, !dbg !4588
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @loop_niter_by_eval(%struct.loop* %loop, %struct.edge_def* %exit) #0 !dbg !4589 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %exit.addr = alloca %struct.edge_def*, align 8
  %acnd = alloca %union.tree_node*, align 8
  %op = alloca [2 x %union.tree_node*], align 16
  %val = alloca [2 x %union.tree_node*], align 16
  %next = alloca [2 x %union.tree_node*], align 16
  %aval = alloca [2 x %union.tree_node*], align 16
  %phi = alloca %union.gimple_statement_d*, align 8
  %cond = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %cmp = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4592, metadata !DIExpression()), !dbg !4593
  store %struct.edge_def* %exit, %struct.edge_def** %exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit.addr, metadata !4594, metadata !DIExpression()), !dbg !4595
  call void @llvm.dbg.declare(metadata %union.tree_node** %acnd, metadata !4596, metadata !DIExpression()), !dbg !4597
  call void @llvm.dbg.declare(metadata [2 x %union.tree_node*]* %op, metadata !4598, metadata !DIExpression()), !dbg !4600
  call void @llvm.dbg.declare(metadata [2 x %union.tree_node*]* %val, metadata !4601, metadata !DIExpression()), !dbg !4602
  call void @llvm.dbg.declare(metadata [2 x %union.tree_node*]* %next, metadata !4603, metadata !DIExpression()), !dbg !4604
  call void @llvm.dbg.declare(metadata [2 x %union.tree_node*]* %aval, metadata !4605, metadata !DIExpression()), !dbg !4606
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !4607, metadata !DIExpression()), !dbg !4608
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond, metadata !4609, metadata !DIExpression()), !dbg !4610
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4611, metadata !DIExpression()), !dbg !4612
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4613, metadata !DIExpression()), !dbg !4614
  call void @llvm.dbg.declare(metadata i32* %cmp, metadata !4615, metadata !DIExpression()), !dbg !4616
  %0 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !4617
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !4618
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4618
  %call = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %1), !dbg !4619
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %cond, align 8, !dbg !4620
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond, align 8, !dbg !4621
  %tobool = icmp ne %union.gimple_statement_d* %2, null, !dbg !4621
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !4623

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond, align 8, !dbg !4624
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %3), !dbg !4625
  %cmp2 = icmp ne i32 %call1, 1, !dbg !4626
  br i1 %cmp2, label %if.then, label %if.end, !dbg !4627

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !4628
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !4629
  br label %return, !dbg !4629

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond, align 8, !dbg !4630
  %call3 = call i32 @gimple_cond_code(%union.gimple_statement_d* %5), !dbg !4631
  store i32 %call3, i32* %cmp, align 4, !dbg !4632
  %6 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !4633
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %6, i32 0, i32 7, !dbg !4635
  %7 = load i32, i32* %flags, align 8, !dbg !4635
  %and = and i32 %7, 1024, !dbg !4636
  %tobool4 = icmp ne i32 %and, 0, !dbg !4636
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !4637

if.then5:                                         ; preds = %if.end
  %8 = load i32, i32* %cmp, align 4, !dbg !4638
  %call6 = call i32 @invert_tree_comparison(i32 %8, i8 zeroext 0), !dbg !4639
  store i32 %call6, i32* %cmp, align 4, !dbg !4640
  br label %if.end7, !dbg !4641

if.end7:                                          ; preds = %if.then5, %if.end
  %9 = load i32, i32* %cmp, align 4, !dbg !4642
  switch i32 %9, label %sw.default [
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
  ], !dbg !4643

sw.bb:                                            ; preds = %if.end7, %if.end7, %if.end7, %if.end7, %if.end7, %if.end7
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond, align 8, !dbg !4644
  %call8 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %10), !dbg !4646
  %arrayidx = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %op, i64 0, i64 0, !dbg !4647
  store %union.tree_node* %call8, %union.tree_node** %arrayidx, align 16, !dbg !4648
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond, align 8, !dbg !4649
  %call9 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %11), !dbg !4650
  %arrayidx10 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %op, i64 0, i64 1, !dbg !4651
  store %union.tree_node* %call9, %union.tree_node** %arrayidx10, align 8, !dbg !4652
  br label %sw.epilog, !dbg !4653

sw.default:                                       ; preds = %if.end7
  %12 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !4654
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !4655
  br label %return, !dbg !4655

sw.epilog:                                        ; preds = %sw.bb
  store i32 0, i32* %j, align 4, !dbg !4656
  br label %for.cond, !dbg !4658

for.cond:                                         ; preds = %for.inc, %sw.epilog
  %13 = load i32, i32* %j, align 4, !dbg !4659
  %cmp11 = icmp ult i32 %13, 2, !dbg !4661
  br i1 %cmp11, label %for.body, label %for.end, !dbg !4662

for.body:                                         ; preds = %for.cond
  %14 = load i32, i32* %j, align 4, !dbg !4663
  %idxprom = zext i32 %14 to i64, !dbg !4666
  %arrayidx12 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %op, i64 0, i64 %idxprom, !dbg !4666
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !4666
  %call13 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %15), !dbg !4667
  %tobool14 = icmp ne i8 %call13, 0, !dbg !4667
  br i1 %tobool14, label %if.then15, label %if.else, !dbg !4668

if.then15:                                        ; preds = %for.body
  %16 = load i32, i32* %j, align 4, !dbg !4669
  %idxprom16 = zext i32 %16 to i64, !dbg !4671
  %arrayidx17 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %op, i64 0, i64 %idxprom16, !dbg !4671
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx17, align 8, !dbg !4671
  %18 = load i32, i32* %j, align 4, !dbg !4672
  %idxprom18 = zext i32 %18 to i64, !dbg !4673
  %arrayidx19 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %val, i64 0, i64 %idxprom18, !dbg !4673
  store %union.tree_node* %17, %union.tree_node** %arrayidx19, align 8, !dbg !4674
  %19 = load i32, i32* %j, align 4, !dbg !4675
  %idxprom20 = zext i32 %19 to i64, !dbg !4676
  %arrayidx21 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %next, i64 0, i64 %idxprom20, !dbg !4676
  store %union.tree_node* null, %union.tree_node** %arrayidx21, align 8, !dbg !4677
  %20 = load i32, i32* %j, align 4, !dbg !4678
  %idxprom22 = zext i32 %20 to i64, !dbg !4679
  %arrayidx23 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %op, i64 0, i64 %idxprom22, !dbg !4679
  store %union.tree_node* null, %union.tree_node** %arrayidx23, align 8, !dbg !4680
  br label %if.end41, !dbg !4681

if.else:                                          ; preds = %for.body
  %21 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4682
  %22 = load i32, i32* %j, align 4, !dbg !4684
  %idxprom24 = zext i32 %22 to i64, !dbg !4685
  %arrayidx25 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %op, i64 0, i64 %idxprom24, !dbg !4685
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx25, align 8, !dbg !4685
  %call26 = call %union.gimple_statement_d* @get_base_for(%struct.loop* %21, %union.tree_node* %23), !dbg !4686
  store %union.gimple_statement_d* %call26, %union.gimple_statement_d** %phi, align 8, !dbg !4687
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4688
  %tobool27 = icmp ne %union.gimple_statement_d* %24, null, !dbg !4688
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !4690

if.then28:                                        ; preds = %if.else
  %25 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !4691
  store %union.tree_node* %25, %union.tree_node** %retval, align 8, !dbg !4692
  br label %return, !dbg !4692

if.end29:                                         ; preds = %if.else
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4693
  %27 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4693
  %call30 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %27), !dbg !4693
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call30, i32 0, i32 6, !dbg !4693
  %28 = load i32, i32* %dest_idx, align 4, !dbg !4693
  %call31 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %26, i32 %28), !dbg !4693
  %call32 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call31), !dbg !4693
  %29 = load i32, i32* %j, align 4, !dbg !4694
  %idxprom33 = zext i32 %29 to i64, !dbg !4695
  %arrayidx34 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %val, i64 0, i64 %idxprom33, !dbg !4695
  store %union.tree_node* %call32, %union.tree_node** %arrayidx34, align 8, !dbg !4696
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4697
  %31 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4697
  %call35 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %31), !dbg !4697
  %dest_idx36 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call35, i32 0, i32 6, !dbg !4697
  %32 = load i32, i32* %dest_idx36, align 4, !dbg !4697
  %call37 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %30, i32 %32), !dbg !4697
  %call38 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call37), !dbg !4697
  %33 = load i32, i32* %j, align 4, !dbg !4698
  %idxprom39 = zext i32 %33 to i64, !dbg !4699
  %arrayidx40 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %next, i64 0, i64 %idxprom39, !dbg !4699
  store %union.tree_node* %call38, %union.tree_node** %arrayidx40, align 8, !dbg !4700
  br label %if.end41

if.end41:                                         ; preds = %if.end29, %if.then15
  br label %for.inc, !dbg !4701

for.inc:                                          ; preds = %if.end41
  %34 = load i32, i32* %j, align 4, !dbg !4702
  %inc = add i32 %34, 1, !dbg !4702
  store i32 %inc, i32* %j, align 4, !dbg !4702
  br label %for.cond, !dbg !4703, !llvm.loop !4704

for.end:                                          ; preds = %for.cond
  call void @fold_defer_overflow_warnings(), !dbg !4706
  store i32 0, i32* %i, align 4, !dbg !4707
  br label %for.cond42, !dbg !4709

for.cond42:                                       ; preds = %for.inc95, %for.end
  %35 = load i32, i32* %i, align 4, !dbg !4710
  %36 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !4712
  %arrayidx43 = getelementptr inbounds %struct.param_info, %struct.param_info* %36, i64 37, !dbg !4712
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx43, i32 0, i32 1, !dbg !4712
  %37 = load i32, i32* %value, align 8, !dbg !4712
  %cmp44 = icmp ult i32 %35, %37, !dbg !4713
  br i1 %cmp44, label %for.body45, label %for.end97, !dbg !4714

for.body45:                                       ; preds = %for.cond42
  store i32 0, i32* %j, align 4, !dbg !4715
  br label %for.cond46, !dbg !4718

for.cond46:                                       ; preds = %for.inc56, %for.body45
  %38 = load i32, i32* %j, align 4, !dbg !4719
  %cmp47 = icmp ult i32 %38, 2, !dbg !4721
  br i1 %cmp47, label %for.body48, label %for.end58, !dbg !4722

for.body48:                                       ; preds = %for.cond46
  %39 = load i32, i32* %j, align 4, !dbg !4723
  %idxprom49 = zext i32 %39 to i64, !dbg !4724
  %arrayidx50 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %op, i64 0, i64 %idxprom49, !dbg !4724
  %40 = load %union.tree_node*, %union.tree_node** %arrayidx50, align 8, !dbg !4724
  %41 = load i32, i32* %j, align 4, !dbg !4725
  %idxprom51 = zext i32 %41 to i64, !dbg !4726
  %arrayidx52 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %val, i64 0, i64 %idxprom51, !dbg !4726
  %42 = load %union.tree_node*, %union.tree_node** %arrayidx52, align 8, !dbg !4726
  %call53 = call %union.tree_node* @get_val_for(%union.tree_node* %40, %union.tree_node* %42), !dbg !4727
  %43 = load i32, i32* %j, align 4, !dbg !4728
  %idxprom54 = zext i32 %43 to i64, !dbg !4729
  %arrayidx55 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %aval, i64 0, i64 %idxprom54, !dbg !4729
  store %union.tree_node* %call53, %union.tree_node** %arrayidx55, align 8, !dbg !4730
  br label %for.inc56, !dbg !4729

for.inc56:                                        ; preds = %for.body48
  %44 = load i32, i32* %j, align 4, !dbg !4731
  %inc57 = add i32 %44, 1, !dbg !4731
  store i32 %inc57, i32* %j, align 4, !dbg !4731
  br label %for.cond46, !dbg !4732, !llvm.loop !4733

for.end58:                                        ; preds = %for.cond46
  %45 = load i32, i32* %cmp, align 4, !dbg !4735
  %46 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4735
  %arrayidx59 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %aval, i64 0, i64 0, !dbg !4735
  %47 = load %union.tree_node*, %union.tree_node** %arrayidx59, align 16, !dbg !4735
  %arrayidx60 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %aval, i64 0, i64 1, !dbg !4735
  %48 = load %union.tree_node*, %union.tree_node** %arrayidx60, align 8, !dbg !4735
  %call61 = call %union.tree_node* @fold_binary_loc(i32 0, i32 %45, %union.tree_node* %46, %union.tree_node* %47, %union.tree_node* %48), !dbg !4735
  store %union.tree_node* %call61, %union.tree_node** %acnd, align 8, !dbg !4736
  %49 = load %union.tree_node*, %union.tree_node** %acnd, align 8, !dbg !4737
  %tobool62 = icmp ne %union.tree_node* %49, null, !dbg !4737
  br i1 %tobool62, label %land.lhs.true, label %if.end74, !dbg !4739

land.lhs.true:                                    ; preds = %for.end58
  %50 = load %union.tree_node*, %union.tree_node** %acnd, align 8, !dbg !4740
  %call63 = call i32 @integer_zerop(%union.tree_node* %50), !dbg !4741
  %tobool64 = icmp ne i32 %call63, 0, !dbg !4741
  br i1 %tobool64, label %if.then65, label %if.end74, !dbg !4742

if.then65:                                        ; preds = %land.lhs.true
  call void @fold_undefer_and_ignore_overflow_warnings(), !dbg !4743
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4745
  %tobool66 = icmp ne %struct._IO_FILE* %51, null, !dbg !4745
  br i1 %tobool66, label %land.lhs.true67, label %if.end72, !dbg !4747

land.lhs.true67:                                  ; preds = %if.then65
  %52 = load i32, i32* @dump_flags, align 4, !dbg !4748
  %and68 = and i32 %52, 8, !dbg !4749
  %tobool69 = icmp ne i32 %and68, 0, !dbg !4749
  br i1 %tobool69, label %if.then70, label %if.end72, !dbg !4750

if.then70:                                        ; preds = %land.lhs.true67
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4751
  %54 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4752
  %num = getelementptr inbounds %struct.loop, %struct.loop* %54, i32 0, i32 0, !dbg !4753
  %55 = load i32, i32* %num, align 8, !dbg !4753
  %56 = load i32, i32* %i, align 4, !dbg !4754
  %call71 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %53, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.8, i64 0, i64 0), i32 %55, i32 %56), !dbg !4755
  br label %if.end72, !dbg !4755

if.end72:                                         ; preds = %if.then70, %land.lhs.true67, %if.then65
  %57 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 6), align 16, !dbg !4756
  %58 = load i32, i32* %i, align 4, !dbg !4757
  %conv = zext i32 %58 to i64, !dbg !4757
  %call73 = call %union.tree_node* @build_int_cst(%union.tree_node* %57, i64 %conv), !dbg !4758
  store %union.tree_node* %call73, %union.tree_node** %retval, align 8, !dbg !4759
  br label %return, !dbg !4759

if.end74:                                         ; preds = %land.lhs.true, %for.end58
  store i32 0, i32* %j, align 4, !dbg !4760
  br label %for.cond75, !dbg !4762

for.cond75:                                       ; preds = %for.inc92, %if.end74
  %59 = load i32, i32* %j, align 4, !dbg !4763
  %cmp76 = icmp ult i32 %59, 2, !dbg !4765
  br i1 %cmp76, label %for.body78, label %for.end94, !dbg !4766

for.body78:                                       ; preds = %for.cond75
  %60 = load i32, i32* %j, align 4, !dbg !4767
  %idxprom79 = zext i32 %60 to i64, !dbg !4769
  %arrayidx80 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %next, i64 0, i64 %idxprom79, !dbg !4769
  %61 = load %union.tree_node*, %union.tree_node** %arrayidx80, align 8, !dbg !4769
  %62 = load i32, i32* %j, align 4, !dbg !4770
  %idxprom81 = zext i32 %62 to i64, !dbg !4771
  %arrayidx82 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %val, i64 0, i64 %idxprom81, !dbg !4771
  %63 = load %union.tree_node*, %union.tree_node** %arrayidx82, align 8, !dbg !4771
  %call83 = call %union.tree_node* @get_val_for(%union.tree_node* %61, %union.tree_node* %63), !dbg !4772
  %64 = load i32, i32* %j, align 4, !dbg !4773
  %idxprom84 = zext i32 %64 to i64, !dbg !4774
  %arrayidx85 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %val, i64 0, i64 %idxprom84, !dbg !4774
  store %union.tree_node* %call83, %union.tree_node** %arrayidx85, align 8, !dbg !4775
  %65 = load i32, i32* %j, align 4, !dbg !4776
  %idxprom86 = zext i32 %65 to i64, !dbg !4778
  %arrayidx87 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %val, i64 0, i64 %idxprom86, !dbg !4778
  %66 = load %union.tree_node*, %union.tree_node** %arrayidx87, align 8, !dbg !4778
  %call88 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %66), !dbg !4779
  %tobool89 = icmp ne i8 %call88, 0, !dbg !4779
  br i1 %tobool89, label %if.end91, label %if.then90, !dbg !4780

if.then90:                                        ; preds = %for.body78
  call void @fold_undefer_and_ignore_overflow_warnings(), !dbg !4781
  %67 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !4783
  store %union.tree_node* %67, %union.tree_node** %retval, align 8, !dbg !4784
  br label %return, !dbg !4784

if.end91:                                         ; preds = %for.body78
  br label %for.inc92, !dbg !4785

for.inc92:                                        ; preds = %if.end91
  %68 = load i32, i32* %j, align 4, !dbg !4786
  %inc93 = add i32 %68, 1, !dbg !4786
  store i32 %inc93, i32* %j, align 4, !dbg !4786
  br label %for.cond75, !dbg !4787, !llvm.loop !4788

for.end94:                                        ; preds = %for.cond75
  br label %for.inc95, !dbg !4790

for.inc95:                                        ; preds = %for.end94
  %69 = load i32, i32* %i, align 4, !dbg !4791
  %inc96 = add i32 %69, 1, !dbg !4791
  store i32 %inc96, i32* %i, align 4, !dbg !4791
  br label %for.cond42, !dbg !4792, !llvm.loop !4793

for.end97:                                        ; preds = %for.cond42
  call void @fold_undefer_and_ignore_overflow_warnings(), !dbg !4795
  %70 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !4796
  store %union.tree_node* %70, %union.tree_node** %retval, align 8, !dbg !4797
  br label %return, !dbg !4797

return:                                           ; preds = %for.end97, %if.then90, %if.end72, %if.then28, %sw.default, %if.then
  %71 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4798
  ret %union.tree_node* %71, !dbg !4798
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @get_base_for(%struct.loop* %loop, %union.tree_node* %x) #0 !dbg !4799 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %x.addr = alloca %union.tree_node*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %init = alloca %union.tree_node*, align 8
  %next = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4802, metadata !DIExpression()), !dbg !4803
  store %union.tree_node* %x, %union.tree_node** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %x.addr, metadata !4804, metadata !DIExpression()), !dbg !4805
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !4806, metadata !DIExpression()), !dbg !4807
  call void @llvm.dbg.declare(metadata %union.tree_node** %init, metadata !4808, metadata !DIExpression()), !dbg !4809
  call void @llvm.dbg.declare(metadata %union.tree_node** %next, metadata !4810, metadata !DIExpression()), !dbg !4811
  %0 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4812
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %0), !dbg !4814
  %tobool = icmp ne i8 %call, 0, !dbg !4814
  br i1 %tobool, label %if.then, label %if.end, !dbg !4815

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !4816
  br label %return, !dbg !4816

if.end:                                           ; preds = %entry
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4817
  %2 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4818
  %call1 = call %union.gimple_statement_d* @chain_of_csts_start(%struct.loop* %1, %union.tree_node* %2), !dbg !4819
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %phi, align 8, !dbg !4820
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4821
  %tobool2 = icmp ne %union.gimple_statement_d* %3, null, !dbg !4821
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !4823

if.then3:                                         ; preds = %if.end
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !4824
  br label %return, !dbg !4824

if.end4:                                          ; preds = %if.end
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4825
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4825
  %call5 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %5), !dbg !4825
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call5, i32 0, i32 6, !dbg !4825
  %6 = load i32, i32* %dest_idx, align 4, !dbg !4825
  %call6 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %4, i32 %6), !dbg !4825
  %call7 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call6), !dbg !4825
  store %union.tree_node* %call7, %union.tree_node** %init, align 8, !dbg !4826
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4827
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4827
  %call8 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %8), !dbg !4827
  %dest_idx9 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call8, i32 0, i32 6, !dbg !4827
  %9 = load i32, i32* %dest_idx9, align 4, !dbg !4827
  %call10 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %7, i32 %9), !dbg !4827
  %call11 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call10), !dbg !4827
  store %union.tree_node* %call11, %union.tree_node** %next, align 8, !dbg !4828
  %10 = load %union.tree_node*, %union.tree_node** %next, align 8, !dbg !4829
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !4829
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !4829
  %bf.load = load i64, i64* %11, align 8, !dbg !4829
  %bf.clear = and i64 %bf.load, 65535, !dbg !4829
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4829
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !4831
  br i1 %cmp, label %if.then12, label %if.end13, !dbg !4832

if.then12:                                        ; preds = %if.end4
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !4833
  br label %return, !dbg !4833

if.end13:                                         ; preds = %if.end4
  %12 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !4834
  %call14 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %12), !dbg !4836
  %tobool15 = icmp ne i8 %call14, 0, !dbg !4836
  br i1 %tobool15, label %if.end17, label %if.then16, !dbg !4837

if.then16:                                        ; preds = %if.end13
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !4838
  br label %return, !dbg !4838

if.end17:                                         ; preds = %if.end13
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4839
  %14 = load %union.tree_node*, %union.tree_node** %next, align 8, !dbg !4841
  %call18 = call %union.gimple_statement_d* @chain_of_csts_start(%struct.loop* %13, %union.tree_node* %14), !dbg !4842
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4843
  %cmp19 = icmp ne %union.gimple_statement_d* %call18, %15, !dbg !4844
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !4845

if.then20:                                        ; preds = %if.end17
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !4846
  br label %return, !dbg !4846

if.end21:                                         ; preds = %if.end17
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4847
  store %union.gimple_statement_d* %16, %union.gimple_statement_d** %retval, align 8, !dbg !4848
  br label %return, !dbg !4848

return:                                           ; preds = %if.end21, %if.then20, %if.then16, %if.then12, %if.then3, %if.then
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !4849
  ret %union.gimple_statement_d* %17, !dbg !4849
}

declare dso_local %struct.edge_def* @loop_preheader_edge(%struct.loop*) #2

declare dso_local %struct.edge_def* @loop_latch_edge(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_val_for(%union.tree_node* %x, %union.tree_node* %base) #0 !dbg !4850 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %x.addr = alloca %union.tree_node*, align 8
  %base.addr = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %rhs1 = alloca %union.tree_node*, align 8
  %rhs2 = alloca %union.tree_node*, align 8
  store %union.tree_node* %x, %union.tree_node** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %x.addr, metadata !4853, metadata !DIExpression()), !dbg !4854
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !4855, metadata !DIExpression()), !dbg !4856
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4857, metadata !DIExpression()), !dbg !4858
  %0 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !4859
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %0), !dbg !4859
  %tobool = icmp ne i8 %call, 0, !dbg !4859
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !4859

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i32 2107, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !4859
  br label %cond.end, !dbg !4859

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4859

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4859
  %1 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4860
  %tobool1 = icmp ne %union.tree_node* %1, null, !dbg !4860
  br i1 %tobool1, label %if.end, label %if.then, !dbg !4862

if.then:                                          ; preds = %cond.end
  %2 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !4863
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !4864
  br label %return, !dbg !4864

if.end:                                           ; preds = %cond.end
  %3 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !4865
  %ssa_name = bitcast %union.tree_node* %3 to %struct.tree_ssa_name*, !dbg !4865
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !4865
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4865
  store %union.gimple_statement_d* %4, %union.gimple_statement_d** %stmt, align 8, !dbg !4866
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4867
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %5), !dbg !4869
  %cmp = icmp eq i32 %call2, 16, !dbg !4870
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !4871

if.then3:                                         ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !4872
  store %union.tree_node* %6, %union.tree_node** %retval, align 8, !dbg !4873
  br label %return, !dbg !4873

if.end4:                                          ; preds = %if.end
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4874
  %call5 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %7), !dbg !4874
  %tobool6 = icmp ne i8 %call5, 0, !dbg !4874
  br i1 %tobool6, label %cond.false8, label %cond.true7, !dbg !4874

cond.true7:                                       ; preds = %if.end4
  call void @fancy_abort(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i32 2116, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !4874
  br label %cond.end9, !dbg !4874

cond.false8:                                      ; preds = %if.end4
  br label %cond.end9, !dbg !4874

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond10 = phi i32 [ 0, %cond.true7 ], [ 0, %cond.false8 ], !dbg !4874
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4875
  %call11 = call zeroext i8 @gimple_assign_ssa_name_copy_p(%union.gimple_statement_d* %8), !dbg !4877
  %tobool12 = icmp ne i8 %call11, 0, !dbg !4877
  br i1 %tobool12, label %if.then13, label %if.else, !dbg !4878

if.then13:                                        ; preds = %cond.end9
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4879
  %call14 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %9), !dbg !4880
  %10 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !4881
  %call15 = call %union.tree_node* @get_val_for(%union.tree_node* %call14, %union.tree_node* %10), !dbg !4882
  store %union.tree_node* %call15, %union.tree_node** %retval, align 8, !dbg !4883
  br label %return, !dbg !4883

if.else:                                          ; preds = %cond.end9
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4884
  %call16 = call i32 @gimple_assign_rhs_class(%union.gimple_statement_d* %11), !dbg !4886
  %cmp17 = icmp eq i32 %call16, 2, !dbg !4887
  br i1 %cmp17, label %land.lhs.true, label %if.else27, !dbg !4888

land.lhs.true:                                    ; preds = %if.else
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4889
  %call18 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %12), !dbg !4889
  %base19 = bitcast %union.tree_node* %call18 to %struct.tree_base*, !dbg !4889
  %13 = bitcast %struct.tree_base* %base19 to i64*, !dbg !4889
  %bf.load = load i64, i64* %13, align 8, !dbg !4889
  %bf.clear = and i64 %bf.load, 65535, !dbg !4889
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4889
  %cmp20 = icmp eq i32 %bf.cast, 141, !dbg !4890
  br i1 %cmp20, label %if.then21, label %if.else27, !dbg !4891

if.then21:                                        ; preds = %land.lhs.true
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4892
  %call22 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %14), !dbg !4892
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4892
  %call23 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %15), !dbg !4892
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4892
  %call24 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %16), !dbg !4892
  %17 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !4892
  %call25 = call %union.tree_node* @get_val_for(%union.tree_node* %call24, %union.tree_node* %17), !dbg !4892
  %call26 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 %call22, %union.tree_node* %call23, %union.tree_node* %call25), !dbg !4892
  store %union.tree_node* %call26, %union.tree_node** %retval, align 8, !dbg !4894
  br label %return, !dbg !4894

if.else27:                                        ; preds = %land.lhs.true, %if.else
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4895
  %call28 = call i32 @gimple_assign_rhs_class(%union.gimple_statement_d* %18), !dbg !4897
  %cmp29 = icmp eq i32 %call28, 1, !dbg !4898
  br i1 %cmp29, label %if.then30, label %if.else54, !dbg !4899

if.then30:                                        ; preds = %if.else27
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs1, metadata !4900, metadata !DIExpression()), !dbg !4902
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4903
  %call31 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %19), !dbg !4904
  store %union.tree_node* %call31, %union.tree_node** %rhs1, align 8, !dbg !4902
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs2, metadata !4905, metadata !DIExpression()), !dbg !4906
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4907
  %call32 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %20), !dbg !4908
  store %union.tree_node* %call32, %union.tree_node** %rhs2, align 8, !dbg !4906
  %21 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !4909
  %base33 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !4909
  %22 = bitcast %struct.tree_base* %base33 to i64*, !dbg !4909
  %bf.load34 = load i64, i64* %22, align 8, !dbg !4909
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !4909
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !4909
  %cmp37 = icmp eq i32 %bf.cast36, 141, !dbg !4911
  br i1 %cmp37, label %if.then38, label %if.else40, !dbg !4912

if.then38:                                        ; preds = %if.then30
  %23 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !4913
  %24 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !4914
  %call39 = call %union.tree_node* @get_val_for(%union.tree_node* %23, %union.tree_node* %24), !dbg !4915
  store %union.tree_node* %call39, %union.tree_node** %rhs1, align 8, !dbg !4916
  br label %if.end50, !dbg !4917

if.else40:                                        ; preds = %if.then30
  %25 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !4918
  %base41 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !4918
  %26 = bitcast %struct.tree_base* %base41 to i64*, !dbg !4918
  %bf.load42 = load i64, i64* %26, align 8, !dbg !4918
  %bf.clear43 = and i64 %bf.load42, 65535, !dbg !4918
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !4918
  %cmp45 = icmp eq i32 %bf.cast44, 141, !dbg !4920
  br i1 %cmp45, label %if.then46, label %if.else48, !dbg !4921

if.then46:                                        ; preds = %if.else40
  %27 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !4922
  %28 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !4923
  %call47 = call %union.tree_node* @get_val_for(%union.tree_node* %27, %union.tree_node* %28), !dbg !4924
  store %union.tree_node* %call47, %union.tree_node** %rhs2, align 8, !dbg !4925
  br label %if.end49, !dbg !4926

if.else48:                                        ; preds = %if.else40
  call void @fancy_abort(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i32 2139, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !4927
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then46
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then38
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4928
  %call51 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %29), !dbg !4928
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4928
  %call52 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %30), !dbg !4928
  %31 = load %union.tree_node*, %union.tree_node** %rhs1, align 8, !dbg !4928
  %32 = load %union.tree_node*, %union.tree_node** %rhs2, align 8, !dbg !4928
  %call53 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %call51, %union.tree_node* %call52, %union.tree_node* %31, %union.tree_node* %32), !dbg !4928
  store %union.tree_node* %call53, %union.tree_node** %retval, align 8, !dbg !4929
  br label %return, !dbg !4929

if.else54:                                        ; preds = %if.else27
  call void @fancy_abort(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i32 2144, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !4930
  br label %if.end55

if.end55:                                         ; preds = %if.else54
  br label %if.end56

if.end56:                                         ; preds = %if.end55
  br label %if.end57

if.end57:                                         ; preds = %if.end56
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4931
  br label %return, !dbg !4931

return:                                           ; preds = %if.end57, %if.end50, %if.then21, %if.then13, %if.then3, %if.then
  %33 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4932
  ret %union.tree_node* %33, !dbg !4932
}

declare dso_local %union.tree_node* @fold_binary_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @find_loop_niter_by_eval(%struct.loop* %loop, %struct.edge_def** %exit) #0 !dbg !4933 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %exit.addr = alloca %struct.edge_def**, align 8
  %i = alloca i32, align 4
  %exits = alloca %struct.VEC_edge_heap*, align 8
  %ex = alloca %struct.edge_def*, align 8
  %niter = alloca %union.tree_node*, align 8
  %aniter = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4934, metadata !DIExpression()), !dbg !4935
  store %struct.edge_def** %exit, %struct.edge_def*** %exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %exit.addr, metadata !4936, metadata !DIExpression()), !dbg !4937
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4938, metadata !DIExpression()), !dbg !4939
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %exits, metadata !4940, metadata !DIExpression()), !dbg !4941
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4942
  %call = call %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop* %0), !dbg !4943
  store %struct.VEC_edge_heap* %call, %struct.VEC_edge_heap** %exits, align 8, !dbg !4941
  call void @llvm.dbg.declare(metadata %struct.edge_def** %ex, metadata !4944, metadata !DIExpression()), !dbg !4945
  call void @llvm.dbg.declare(metadata %union.tree_node** %niter, metadata !4946, metadata !DIExpression()), !dbg !4947
  store %union.tree_node* null, %union.tree_node** %niter, align 8, !dbg !4947
  call void @llvm.dbg.declare(metadata %union.tree_node** %aniter, metadata !4948, metadata !DIExpression()), !dbg !4949
  %1 = load %struct.edge_def**, %struct.edge_def*** %exit.addr, align 8, !dbg !4950
  store %struct.edge_def* null, %struct.edge_def** %1, align 8, !dbg !4951
  %2 = load i32, i32* @flag_expensive_optimizations, align 4, !dbg !4952
  %tobool = icmp ne i32 %2, 0, !dbg !4952
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !4954

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !4955
  %tobool1 = icmp ne %struct.VEC_edge_heap* %3, null, !dbg !4955
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !4955

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !4955
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %4, i32 0, i32 0, !dbg !4955
  br label %cond.end, !dbg !4955

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !4955

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4955
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4955
  %cmp = icmp ugt i32 %call2, 1, !dbg !4956
  br i1 %cmp, label %if.then, label %if.end, !dbg !4957

if.then:                                          ; preds = %cond.end
  %5 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !4958
  store %union.tree_node* %5, %union.tree_node** %retval, align 8, !dbg !4959
  br label %return, !dbg !4959

if.end:                                           ; preds = %cond.end, %entry
  store i32 0, i32* %i, align 4, !dbg !4960
  br label %for.cond, !dbg !4962

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !4963
  %tobool3 = icmp ne %struct.VEC_edge_heap* %6, null, !dbg !4963
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !4963

cond.true4:                                       ; preds = %for.cond
  %7 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !4963
  %base5 = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %7, i32 0, i32 0, !dbg !4963
  br label %cond.end7, !dbg !4963

cond.false6:                                      ; preds = %for.cond
  br label %cond.end7, !dbg !4963

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.VEC_edge_base* [ %base5, %cond.true4 ], [ null, %cond.false6 ], !dbg !4963
  %8 = load i32, i32* %i, align 4, !dbg !4963
  %call9 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond8, i32 %8, %struct.edge_def** %ex), !dbg !4963
  %tobool10 = icmp ne i32 %call9, 0, !dbg !4965
  br i1 %tobool10, label %for.body, label %for.end, !dbg !4965

for.body:                                         ; preds = %cond.end7
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4966
  %10 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !4969
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %10, i32 0, i32 0, !dbg !4970
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4970
  %call11 = call zeroext i8 @just_once_each_iteration_p(%struct.loop* %9, %struct.basic_block_def* %11), !dbg !4971
  %tobool12 = icmp ne i8 %call11, 0, !dbg !4971
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !4972

if.then13:                                        ; preds = %for.body
  br label %for.inc, !dbg !4973

if.end14:                                         ; preds = %for.body
  %12 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4974
  %13 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !4975
  %call15 = call %union.tree_node* @loop_niter_by_eval(%struct.loop* %12, %struct.edge_def* %13), !dbg !4976
  store %union.tree_node* %call15, %union.tree_node** %aniter, align 8, !dbg !4977
  %14 = load %union.tree_node*, %union.tree_node** %aniter, align 8, !dbg !4978
  %call16 = call zeroext i8 @chrec_contains_undetermined(%union.tree_node* %14), !dbg !4980
  %tobool17 = icmp ne i8 %call16, 0, !dbg !4980
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !4981

if.then18:                                        ; preds = %if.end14
  br label %for.inc, !dbg !4982

if.end19:                                         ; preds = %if.end14
  %15 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !4983
  %tobool20 = icmp ne %union.tree_node* %15, null, !dbg !4983
  br i1 %tobool20, label %land.lhs.true21, label %if.end25, !dbg !4985

land.lhs.true21:                                  ; preds = %if.end19
  %16 = load %union.tree_node*, %union.tree_node** %aniter, align 8, !dbg !4986
  %17 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !4987
  %call22 = call i32 @tree_int_cst_lt(%union.tree_node* %16, %union.tree_node* %17), !dbg !4988
  %tobool23 = icmp ne i32 %call22, 0, !dbg !4988
  br i1 %tobool23, label %if.end25, label %if.then24, !dbg !4989

if.then24:                                        ; preds = %land.lhs.true21
  br label %for.inc, !dbg !4990

if.end25:                                         ; preds = %land.lhs.true21, %if.end19
  %18 = load %union.tree_node*, %union.tree_node** %aniter, align 8, !dbg !4991
  store %union.tree_node* %18, %union.tree_node** %niter, align 8, !dbg !4992
  %19 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !4993
  %20 = load %struct.edge_def**, %struct.edge_def*** %exit.addr, align 8, !dbg !4994
  store %struct.edge_def* %19, %struct.edge_def** %20, align 8, !dbg !4995
  br label %for.inc, !dbg !4996

for.inc:                                          ; preds = %if.end25, %if.then24, %if.then18, %if.then13
  %21 = load i32, i32* %i, align 4, !dbg !4997
  %inc = add i32 %21, 1, !dbg !4997
  store i32 %inc, i32* %i, align 4, !dbg !4997
  br label %for.cond, !dbg !4998, !llvm.loop !4999

for.end:                                          ; preds = %cond.end7
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** %exits), !dbg !5001
  %22 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !5002
  %tobool26 = icmp ne %union.tree_node* %22, null, !dbg !5002
  br i1 %tobool26, label %cond.true27, label %cond.false28, !dbg !5002

cond.true27:                                      ; preds = %for.end
  %23 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !5003
  br label %cond.end29, !dbg !5002

cond.false28:                                     ; preds = %for.end
  %24 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !5004
  br label %cond.end29, !dbg !5002

cond.end29:                                       ; preds = %cond.false28, %cond.true27
  %cond30 = phi %union.tree_node* [ %23, %cond.true27 ], [ %24, %cond.false28 ], !dbg !5002
  store %union.tree_node* %cond30, %union.tree_node** %retval, align 8, !dbg !5005
  br label %return, !dbg !5005

return:                                           ; preds = %cond.end29, %if.then
  %25 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5006
  ret %union.tree_node* %25, !dbg !5006
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !5007 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5010, metadata !DIExpression()), !dbg !5011
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5011
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !5011
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5011

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5011
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !5011
  %2 = load i32, i32* %num, align 8, !dbg !5011
  br label %cond.end, !dbg !5011

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5011

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5011
  ret i32 %cond, !dbg !5011
}

declare dso_local zeroext i8 @chrec_contains_undetermined(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @array_at_struct_end_p(%union.tree_node* %ref) #0 !dbg !5012 {
entry:
  %retval = alloca i8, align 1
  %ref.addr = alloca %union.tree_node*, align 8
  %base = alloca %union.tree_node*, align 8
  %parent = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  store %union.tree_node* %ref, %union.tree_node** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref.addr, metadata !5015, metadata !DIExpression()), !dbg !5016
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !5017, metadata !DIExpression()), !dbg !5018
  %0 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5019
  %call = call %union.tree_node* @get_base_address(%union.tree_node* %0), !dbg !5020
  store %union.tree_node* %call, %union.tree_node** %base, align 8, !dbg !5018
  call void @llvm.dbg.declare(metadata %union.tree_node** %parent, metadata !5021, metadata !DIExpression()), !dbg !5022
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !5023, metadata !DIExpression()), !dbg !5024
  %1 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !5025
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !5025
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5027

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !5028
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !5028
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !5028
  %bf.load = load i64, i64* %3, align 8, !dbg !5028
  %bf.clear = and i64 %bf.load, 65535, !dbg !5028
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5028
  %cmp = icmp eq i32 %bf.cast, 47, !dbg !5028
  br i1 %cmp, label %if.end, label %lor.lhs.false2, !dbg !5028

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !5028
  %base3 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5028
  %5 = bitcast %struct.tree_base* %base3 to i64*, !dbg !5028
  %bf.load4 = load i64, i64* %5, align 8, !dbg !5028
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !5028
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !5028
  %cmp7 = icmp eq i32 %bf.cast6, 48, !dbg !5028
  br i1 %cmp7, label %if.end, label %lor.lhs.false8, !dbg !5028

lor.lhs.false8:                                   ; preds = %lor.lhs.false2
  %6 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !5028
  %base9 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5028
  %7 = bitcast %struct.tree_base* %base9 to i64*, !dbg !5028
  %bf.load10 = load i64, i64* %7, align 8, !dbg !5028
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !5028
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !5028
  %cmp13 = icmp eq i32 %bf.cast12, 49, !dbg !5028
  br i1 %cmp13, label %if.end, label %if.then, !dbg !5029

if.then:                                          ; preds = %lor.lhs.false8, %entry
  store i8 0, i8* %retval, align 1, !dbg !5030
  br label %return, !dbg !5030

if.end:                                           ; preds = %lor.lhs.false8, %lor.lhs.false2, %lor.lhs.false
  br label %for.cond, !dbg !5031

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5032
  %call14 = call zeroext i8 @handled_component_p(%union.tree_node* %8), !dbg !5035
  %tobool15 = icmp ne i8 %call14, 0, !dbg !5036
  br i1 %tobool15, label %for.body, label %for.end, !dbg !5036

for.body:                                         ; preds = %for.cond
  %9 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5037
  %exp = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !5037
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5037
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5037
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5037
  store %union.tree_node* %10, %union.tree_node** %parent, align 8, !dbg !5039
  %11 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5040
  %base16 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !5040
  %12 = bitcast %struct.tree_base* %base16 to i64*, !dbg !5040
  %bf.load17 = load i64, i64* %12, align 8, !dbg !5040
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !5040
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !5040
  %cmp20 = icmp eq i32 %bf.cast19, 41, !dbg !5042
  br i1 %cmp20, label %if.then21, label %if.end36, !dbg !5043

if.then21:                                        ; preds = %for.body
  %13 = load %union.tree_node*, %union.tree_node** %parent, align 8, !dbg !5044
  %common = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !5044
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5044
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5044
  %base22 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !5044
  %15 = bitcast %struct.tree_base* %base22 to i64*, !dbg !5044
  %bf.load23 = load i64, i64* %15, align 8, !dbg !5044
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !5044
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !5044
  %cmp26 = icmp eq i32 %bf.cast25, 17, !dbg !5047
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !5048

if.then27:                                        ; preds = %if.then21
  br label %for.inc, !dbg !5049

if.end28:                                         ; preds = %if.then21
  %16 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5050
  %exp29 = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !5050
  %operands30 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp29, i32 0, i32 3, !dbg !5050
  %arrayidx31 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands30, i64 0, i64 1, !dbg !5050
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx31, align 8, !dbg !5050
  store %union.tree_node* %17, %union.tree_node** %field, align 8, !dbg !5051
  %18 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5052
  %common32 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !5052
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common32, i32 0, i32 1, !dbg !5052
  %19 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5052
  %tobool33 = icmp ne %union.tree_node* %19, null, !dbg !5052
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !5054

if.then34:                                        ; preds = %if.end28
  store i8 0, i8* %retval, align 1, !dbg !5055
  br label %return, !dbg !5055

if.end35:                                         ; preds = %if.end28
  br label %if.end36, !dbg !5056

if.end36:                                         ; preds = %if.end35, %for.body
  br label %for.inc, !dbg !5057

for.inc:                                          ; preds = %if.end36, %if.then27
  %20 = load %union.tree_node*, %union.tree_node** %parent, align 8, !dbg !5058
  store %union.tree_node* %20, %union.tree_node** %ref.addr, align 8, !dbg !5059
  br label %for.cond, !dbg !5060, !llvm.loop !5061

for.end:                                          ; preds = %for.cond
  %21 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5063
  %base37 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !5063
  %22 = bitcast %struct.tree_base* %base37 to i64*, !dbg !5063
  %bf.load38 = load i64, i64* %22, align 8, !dbg !5063
  %bf.clear39 = and i64 %bf.load38, 65535, !dbg !5063
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !5063
  %cmp41 = icmp eq i32 %bf.cast40, 47, !dbg !5063
  br i1 %cmp41, label %cond.false, label %lor.lhs.false42, !dbg !5063

lor.lhs.false42:                                  ; preds = %for.end
  %23 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5063
  %base43 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !5063
  %24 = bitcast %struct.tree_base* %base43 to i64*, !dbg !5063
  %bf.load44 = load i64, i64* %24, align 8, !dbg !5063
  %bf.clear45 = and i64 %bf.load44, 65535, !dbg !5063
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !5063
  %cmp47 = icmp eq i32 %bf.cast46, 48, !dbg !5063
  br i1 %cmp47, label %cond.false, label %lor.lhs.false48, !dbg !5063

lor.lhs.false48:                                  ; preds = %lor.lhs.false42
  %25 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5063
  %base49 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !5063
  %26 = bitcast %struct.tree_base* %base49 to i64*, !dbg !5063
  %bf.load50 = load i64, i64* %26, align 8, !dbg !5063
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !5063
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !5063
  %cmp53 = icmp eq i32 %bf.cast52, 49, !dbg !5063
  br i1 %cmp53, label %cond.false, label %cond.true, !dbg !5063

cond.true:                                        ; preds = %lor.lhs.false48
  call void @fancy_abort(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i32 2654, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !5063
  br label %cond.end, !dbg !5063

cond.false:                                       ; preds = %lor.lhs.false48, %lor.lhs.false42, %for.end
  br label %cond.end, !dbg !5063

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5063
  store i8 1, i8* %retval, align 1, !dbg !5064
  br label %return, !dbg !5064

return:                                           ; preds = %cond.end, %if.then34, %if.then
  %27 = load i8, i8* %retval, align 1, !dbg !5065
  ret i8 %27, !dbg !5065
}

declare dso_local %union.tree_node* @get_base_address(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !5066 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !5069, metadata !DIExpression()), !dbg !5070
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5071
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5071
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5071
  %bf.load = load i64, i64* %1, align 8, !dbg !5071
  %bf.clear = and i64 %bf.load, 65535, !dbg !5071
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5071
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !5072

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !5073
  br label %return, !dbg !5073

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5075
  br label %return, !dbg !5075

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !5076
  ret i8 %2, !dbg !5076
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @estimate_numbers_of_iterations_loop(%struct.loop* %loop) #0 !dbg !5077 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %exits = alloca %struct.VEC_edge_heap*, align 8
  %niter = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %niter_desc = alloca %struct.tree_niter_desc, align 8
  %ex = alloca %struct.edge_def*, align 8
  %bound = alloca %struct.double_int, align 8
  %nit = alloca i64, align 8
  %tmp = alloca %struct.double_int, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5080, metadata !DIExpression()), !dbg !5081
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %exits, metadata !5082, metadata !DIExpression()), !dbg !5083
  call void @llvm.dbg.declare(metadata %union.tree_node** %niter, metadata !5084, metadata !DIExpression()), !dbg !5085
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5086, metadata !DIExpression()), !dbg !5087
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5088, metadata !DIExpression()), !dbg !5089
  call void @llvm.dbg.declare(metadata %struct.tree_niter_desc* %niter_desc, metadata !5090, metadata !DIExpression()), !dbg !5091
  call void @llvm.dbg.declare(metadata %struct.edge_def** %ex, metadata !5092, metadata !DIExpression()), !dbg !5093
  call void @llvm.dbg.declare(metadata %struct.double_int* %bound, metadata !5094, metadata !DIExpression()), !dbg !5095
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5096
  %estimate_state = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 16, !dbg !5098
  %1 = load i32, i32* %estimate_state, align 4, !dbg !5098
  %cmp = icmp ne i32 %1, 0, !dbg !5099
  br i1 %cmp, label %if.then, label %if.end, !dbg !5100

if.then:                                          ; preds = %entry
  br label %if.end35, !dbg !5101

if.end:                                           ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5102
  %estimate_state1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 16, !dbg !5103
  store i32 1, i32* %estimate_state1, align 4, !dbg !5104
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5105
  %any_upper_bound = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 14, !dbg !5106
  store i8 0, i8* %any_upper_bound, align 8, !dbg !5107
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5108
  %any_estimate = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 15, !dbg !5109
  store i8 0, i8* %any_estimate, align 1, !dbg !5110
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5111
  %call = call %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop* %5), !dbg !5112
  store %struct.VEC_edge_heap* %call, %struct.VEC_edge_heap** %exits, align 8, !dbg !5113
  store i32 0, i32* %i, align 4, !dbg !5114
  br label %for.cond, !dbg !5116

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !5117
  %tobool = icmp ne %struct.VEC_edge_heap* %6, null, !dbg !5117
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5117

cond.true:                                        ; preds = %for.cond
  %7 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !5117
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %7, i32 0, i32 0, !dbg !5117
  br label %cond.end, !dbg !5117

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5117

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5117
  %8 = load i32, i32* %i, align 4, !dbg !5117
  %call2 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond, i32 %8, %struct.edge_def** %ex), !dbg !5117
  %tobool3 = icmp ne i32 %call2, 0, !dbg !5119
  br i1 %tobool3, label %for.body, label %for.end, !dbg !5119

for.body:                                         ; preds = %cond.end
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5120
  %10 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !5123
  %call4 = call zeroext i8 @number_of_iterations_exit(%struct.loop* %9, %struct.edge_def* %10, %struct.tree_niter_desc* %niter_desc, i8 zeroext 0), !dbg !5124
  %tobool5 = icmp ne i8 %call4, 0, !dbg !5124
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !5125

if.then6:                                         ; preds = %for.body
  br label %for.inc, !dbg !5126

if.end7:                                          ; preds = %for.body
  %niter8 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter_desc, i32 0, i32 2, !dbg !5127
  %11 = load %union.tree_node*, %union.tree_node** %niter8, align 8, !dbg !5127
  store %union.tree_node* %11, %union.tree_node** %niter, align 8, !dbg !5128
  %12 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !5129
  %common = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !5129
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5129
  %13 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !5129
  store %union.tree_node* %13, %union.tree_node** %type, align 8, !dbg !5130
  %may_be_zero = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter_desc, i32 0, i32 1, !dbg !5131
  %14 = load %union.tree_node*, %union.tree_node** %may_be_zero, align 8, !dbg !5131
  %base10 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !5131
  %15 = bitcast %struct.tree_base* %base10 to i64*, !dbg !5131
  %bf.load = load i64, i64* %15, align 8, !dbg !5131
  %bf.clear = and i64 %bf.load, 65535, !dbg !5131
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5131
  %cmp11 = icmp ne i32 %bf.cast, 23, !dbg !5133
  br i1 %cmp11, label %if.then12, label %if.end16, !dbg !5134

if.then12:                                        ; preds = %if.end7
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5135
  %may_be_zero13 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter_desc, i32 0, i32 1, !dbg !5135
  %17 = load %union.tree_node*, %union.tree_node** %may_be_zero13, align 8, !dbg !5135
  %18 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5135
  %call14 = call %union.tree_node* @build_int_cst(%union.tree_node* %18, i64 0), !dbg !5135
  %19 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !5135
  %call15 = call %union.tree_node* @build3_stat(i32 56, %union.tree_node* %16, %union.tree_node* %17, %union.tree_node* %call14, %union.tree_node* %19), !dbg !5135
  store %union.tree_node* %call15, %union.tree_node** %niter, align 8, !dbg !5136
  br label %if.end16, !dbg !5137

if.end16:                                         ; preds = %if.then12, %if.end7
  %20 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5138
  %21 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !5139
  %max = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter_desc, i32 0, i32 3, !dbg !5140
  %22 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !5141
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 0, !dbg !5142
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5142
  %call17 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %23), !dbg !5143
  %24 = bitcast %struct.double_int* %max to { i64, i64 }*, !dbg !5144
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %24, i32 0, i32 0, !dbg !5144
  %26 = load i64, i64* %25, align 8, !dbg !5144
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %24, i32 0, i32 1, !dbg !5144
  %28 = load i64, i64* %27, align 8, !dbg !5144
  call void @record_estimate(%struct.loop* %20, %union.tree_node* %21, i64 %26, i64 %28, %union.gimple_statement_d* %call17, i8 zeroext 1, i8 zeroext 1, i8 zeroext 1), !dbg !5144
  br label %for.inc, !dbg !5145

for.inc:                                          ; preds = %if.end16, %if.then6
  %29 = load i32, i32* %i, align 4, !dbg !5146
  %inc = add i32 %29, 1, !dbg !5146
  store i32 %inc, i32* %i, align 4, !dbg !5146
  br label %for.cond, !dbg !5147, !llvm.loop !5148

for.end:                                          ; preds = %cond.end
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** %exits), !dbg !5150
  %30 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5151
  call void @infer_loop_bounds_from_undefined(%struct.loop* %30), !dbg !5152
  %31 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5153
  %header = getelementptr inbounds %struct.loop, %struct.loop* %31, i32 0, i32 2, !dbg !5155
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5155
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 8, !dbg !5156
  %33 = load i64, i64* %count, align 8, !dbg !5156
  %cmp18 = icmp ne i64 %33, 0, !dbg !5157
  br i1 %cmp18, label %if.then19, label %if.end22, !dbg !5158

if.then19:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata i64* %nit, metadata !5159, metadata !DIExpression()), !dbg !5161
  %34 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5162
  %call20 = call i64 @expected_loop_iterations_unbounded(%struct.loop* %34), !dbg !5163
  %add = add nsw i64 %call20, 1, !dbg !5164
  store i64 %add, i64* %nit, align 8, !dbg !5161
  %35 = load i64, i64* %nit, align 8, !dbg !5165
  %call21 = call { i64, i64 } @gcov_type_to_double_int(i64 %35), !dbg !5166
  %36 = bitcast %struct.double_int* %tmp to { i64, i64 }*, !dbg !5166
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 0, !dbg !5166
  %38 = extractvalue { i64, i64 } %call21, 0, !dbg !5166
  store i64 %38, i64* %37, align 8, !dbg !5166
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 1, !dbg !5166
  %40 = extractvalue { i64, i64 } %call21, 1, !dbg !5166
  store i64 %40, i64* %39, align 8, !dbg !5166
  %41 = bitcast %struct.double_int* %bound to i8*, !dbg !5166
  %42 = bitcast %struct.double_int* %tmp to i8*, !dbg !5166
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 16, i1 false), !dbg !5166
  %43 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5167
  %44 = bitcast %struct.double_int* %bound to { i64, i64 }*, !dbg !5168
  %45 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %44, i32 0, i32 0, !dbg !5168
  %46 = load i64, i64* %45, align 8, !dbg !5168
  %47 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %44, i32 0, i32 1, !dbg !5168
  %48 = load i64, i64* %47, align 8, !dbg !5168
  call void @record_niter_bound(%struct.loop* %43, i64 %46, i64 %48, i8 zeroext 1, i8 zeroext 0), !dbg !5168
  br label %if.end22, !dbg !5169

if.end22:                                         ; preds = %if.then19, %for.end
  %49 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5170
  %any_upper_bound23 = getelementptr inbounds %struct.loop, %struct.loop* %49, i32 0, i32 14, !dbg !5172
  %50 = load i8, i8* %any_upper_bound23, align 8, !dbg !5172
  %conv = zext i8 %50 to i32, !dbg !5170
  %tobool24 = icmp ne i32 %conv, 0, !dbg !5170
  br i1 %tobool24, label %land.lhs.true, label %if.end35, !dbg !5173

land.lhs.true:                                    ; preds = %if.end22
  %51 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5174
  %any_estimate25 = getelementptr inbounds %struct.loop, %struct.loop* %51, i32 0, i32 15, !dbg !5175
  %52 = load i8, i8* %any_estimate25, align 1, !dbg !5175
  %conv26 = zext i8 %52 to i32, !dbg !5174
  %tobool27 = icmp ne i32 %conv26, 0, !dbg !5174
  br i1 %tobool27, label %land.lhs.true28, label %if.end35, !dbg !5176

land.lhs.true28:                                  ; preds = %land.lhs.true
  %53 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5177
  %nb_iterations_upper_bound = getelementptr inbounds %struct.loop, %struct.loop* %53, i32 0, i32 12, !dbg !5178
  %54 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5179
  %nb_iterations_estimate = getelementptr inbounds %struct.loop, %struct.loop* %54, i32 0, i32 13, !dbg !5180
  %55 = bitcast %struct.double_int* %nb_iterations_upper_bound to { i64, i64 }*, !dbg !5181
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %55, i32 0, i32 0, !dbg !5181
  %57 = load i64, i64* %56, align 8, !dbg !5181
  %58 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %55, i32 0, i32 1, !dbg !5181
  %59 = load i64, i64* %58, align 8, !dbg !5181
  %60 = bitcast %struct.double_int* %nb_iterations_estimate to { i64, i64 }*, !dbg !5181
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %60, i32 0, i32 0, !dbg !5181
  %62 = load i64, i64* %61, align 8, !dbg !5181
  %63 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %60, i32 0, i32 1, !dbg !5181
  %64 = load i64, i64* %63, align 8, !dbg !5181
  %call29 = call i32 @double_int_ucmp(i64 %57, i64 %59, i64 %62, i64 %64), !dbg !5181
  %cmp30 = icmp slt i32 %call29, 0, !dbg !5182
  br i1 %cmp30, label %if.then32, label %if.end35, !dbg !5183

if.then32:                                        ; preds = %land.lhs.true28
  %65 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5184
  %nb_iterations_estimate33 = getelementptr inbounds %struct.loop, %struct.loop* %65, i32 0, i32 13, !dbg !5185
  %66 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5186
  %nb_iterations_upper_bound34 = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 12, !dbg !5187
  %67 = bitcast %struct.double_int* %nb_iterations_estimate33 to i8*, !dbg !5187
  %68 = bitcast %struct.double_int* %nb_iterations_upper_bound34 to i8*, !dbg !5187
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 16, i1 false), !dbg !5187
  br label %if.end35, !dbg !5184

if.end35:                                         ; preds = %if.then, %if.then32, %land.lhs.true28, %land.lhs.true, %if.end22
  ret void, !dbg !5188
}

declare dso_local %union.tree_node* @build3_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @record_estimate(%struct.loop* %loop, %union.tree_node* %bound, i64 %i_bound.coerce0, i64 %i_bound.coerce1, %union.gimple_statement_d* %at_stmt, i8 zeroext %is_exit, i8 zeroext %realistic, i8 zeroext %upper) #0 !dbg !5189 {
entry:
  %i_bound = alloca %struct.double_int, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %bound.addr = alloca %union.tree_node*, align 8
  %at_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %is_exit.addr = alloca i8, align 1
  %realistic.addr = alloca i8, align 1
  %upper.addr = alloca i8, align 1
  %delta = alloca %struct.double_int, align 8
  %exit = alloca %struct.edge_def*, align 8
  %elt = alloca %struct.nb_iter_bound*, align 8
  %tmp = alloca %struct.double_int, align 8
  %tmp36 = alloca %struct.double_int, align 8
  %tmp39 = alloca %struct.double_int, align 8
  %0 = bitcast %struct.double_int* %i_bound to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %i_bound.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %i_bound.coerce1, i64* %2, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5192, metadata !DIExpression()), !dbg !5193
  store %union.tree_node* %bound, %union.tree_node** %bound.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %bound.addr, metadata !5194, metadata !DIExpression()), !dbg !5195
  call void @llvm.dbg.declare(metadata %struct.double_int* %i_bound, metadata !5196, metadata !DIExpression()), !dbg !5197
  store %union.gimple_statement_d* %at_stmt, %union.gimple_statement_d** %at_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %at_stmt.addr, metadata !5198, metadata !DIExpression()), !dbg !5199
  store i8 %is_exit, i8* %is_exit.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %is_exit.addr, metadata !5200, metadata !DIExpression()), !dbg !5201
  store i8 %realistic, i8* %realistic.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %realistic.addr, metadata !5202, metadata !DIExpression()), !dbg !5203
  store i8 %upper, i8* %upper.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %upper.addr, metadata !5204, metadata !DIExpression()), !dbg !5205
  call void @llvm.dbg.declare(metadata %struct.double_int* %delta, metadata !5206, metadata !DIExpression()), !dbg !5207
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit, metadata !5208, metadata !DIExpression()), !dbg !5209
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5210
  %tobool = icmp ne %struct._IO_FILE* %3, null, !dbg !5210
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5212

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* @dump_flags, align 4, !dbg !5213
  %and = and i32 %4, 8, !dbg !5214
  %tobool1 = icmp ne i32 %and, 0, !dbg !5214
  br i1 %tobool1, label %if.then, label %if.end, !dbg !5215

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5216
  %6 = load i8, i8* %is_exit.addr, align 1, !dbg !5218
  %conv = zext i8 %6 to i32, !dbg !5218
  %tobool2 = icmp ne i32 %conv, 0, !dbg !5218
  %7 = zext i1 %tobool2 to i64, !dbg !5218
  %cond = select i1 %tobool2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.35, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i64 0, i64 0), !dbg !5218
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.34, i64 0, i64 0), i8* %cond), !dbg !5219
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5220
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !5221
  call void @print_gimple_stmt(%struct._IO_FILE* %8, %union.gimple_statement_d* %9, i32 0, i32 2), !dbg !5222
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5223
  %11 = load i8, i8* %upper.addr, align 1, !dbg !5224
  %conv3 = zext i8 %11 to i32, !dbg !5224
  %tobool4 = icmp ne i32 %conv3, 0, !dbg !5224
  %12 = zext i1 %tobool4 to i64, !dbg !5224
  %cond5 = select i1 %tobool4, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.37, i64 0, i64 0), !dbg !5224
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.36, i64 0, i64 0), i8* %cond5), !dbg !5225
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5226
  %14 = load %union.tree_node*, %union.tree_node** %bound.addr, align 8, !dbg !5227
  call void @print_generic_expr(%struct._IO_FILE* %13, %union.tree_node* %14, i32 2), !dbg !5228
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5229
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.38, i64 0, i64 0)), !dbg !5230
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5231
  %17 = bitcast %struct.double_int* %i_bound to { i64, i64 }*, !dbg !5232
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %17, i32 0, i32 0, !dbg !5232
  %19 = load i64, i64* %18, align 8, !dbg !5232
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %17, i32 0, i32 1, !dbg !5232
  %21 = load i64, i64* %20, align 8, !dbg !5232
  call void @dump_double_int(%struct._IO_FILE* %16, i64 %19, i64 %21, i8 zeroext 1), !dbg !5232
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5233
  %23 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5234
  %num = getelementptr inbounds %struct.loop, %struct.loop* %23, i32 0, i32 0, !dbg !5235
  %24 = load i32, i32* %num, align 8, !dbg !5235
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.39, i64 0, i64 0), i32 %24), !dbg !5236
  br label %if.end, !dbg !5237

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %25 = load %union.tree_node*, %union.tree_node** %bound.addr, align 8, !dbg !5238
  %base = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !5238
  %26 = bitcast %struct.tree_base* %base to i64*, !dbg !5238
  %bf.load = load i64, i64* %26, align 8, !dbg !5238
  %bf.clear = and i64 %bf.load, 65535, !dbg !5238
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5238
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !5240
  br i1 %cmp, label %if.then10, label %if.end11, !dbg !5241

if.then10:                                        ; preds = %if.end
  store i8 0, i8* %realistic.addr, align 1, !dbg !5242
  br label %if.end11, !dbg !5243

if.end11:                                         ; preds = %if.then10, %if.end
  %27 = load i8, i8* %upper.addr, align 1, !dbg !5244
  %tobool12 = icmp ne i8 %27, 0, !dbg !5244
  br i1 %tobool12, label %if.end16, label %land.lhs.true13, !dbg !5246

land.lhs.true13:                                  ; preds = %if.end11
  %28 = load i8, i8* %realistic.addr, align 1, !dbg !5247
  %tobool14 = icmp ne i8 %28, 0, !dbg !5247
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !5248

if.then15:                                        ; preds = %land.lhs.true13
  br label %return, !dbg !5249

if.end16:                                         ; preds = %land.lhs.true13, %if.end11
  %29 = load i8, i8* %upper.addr, align 1, !dbg !5250
  %tobool17 = icmp ne i8 %29, 0, !dbg !5250
  br i1 %tobool17, label %if.then18, label %if.end23, !dbg !5252

if.then18:                                        ; preds = %if.end16
  call void @llvm.dbg.declare(metadata %struct.nb_iter_bound** %elt, metadata !5253, metadata !DIExpression()), !dbg !5255
  %call19 = call i8* @ggc_alloc_stat(i64 40), !dbg !5256
  %30 = bitcast i8* %call19 to %struct.nb_iter_bound*, !dbg !5256
  store %struct.nb_iter_bound* %30, %struct.nb_iter_bound** %elt, align 8, !dbg !5255
  %31 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %elt, align 8, !dbg !5257
  %bound20 = getelementptr inbounds %struct.nb_iter_bound, %struct.nb_iter_bound* %31, i32 0, i32 1, !dbg !5258
  %32 = bitcast %struct.double_int* %bound20 to i8*, !dbg !5259
  %33 = bitcast %struct.double_int* %i_bound to i8*, !dbg !5259
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 16, i1 false), !dbg !5259
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !5260
  %35 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %elt, align 8, !dbg !5261
  %stmt = getelementptr inbounds %struct.nb_iter_bound, %struct.nb_iter_bound* %35, i32 0, i32 0, !dbg !5262
  store %union.gimple_statement_d* %34, %union.gimple_statement_d** %stmt, align 8, !dbg !5263
  %36 = load i8, i8* %is_exit.addr, align 1, !dbg !5264
  %37 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %elt, align 8, !dbg !5265
  %is_exit21 = getelementptr inbounds %struct.nb_iter_bound, %struct.nb_iter_bound* %37, i32 0, i32 2, !dbg !5266
  store i8 %36, i8* %is_exit21, align 8, !dbg !5267
  %38 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5268
  %bounds = getelementptr inbounds %struct.loop, %struct.loop* %38, i32 0, i32 17, !dbg !5269
  %39 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %bounds, align 8, !dbg !5269
  %40 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %elt, align 8, !dbg !5270
  %next = getelementptr inbounds %struct.nb_iter_bound, %struct.nb_iter_bound* %40, i32 0, i32 3, !dbg !5271
  store %struct.nb_iter_bound* %39, %struct.nb_iter_bound** %next, align 8, !dbg !5272
  %41 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %elt, align 8, !dbg !5273
  %42 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5274
  %bounds22 = getelementptr inbounds %struct.loop, %struct.loop* %42, i32 0, i32 17, !dbg !5275
  store %struct.nb_iter_bound* %41, %struct.nb_iter_bound** %bounds22, align 8, !dbg !5276
  br label %if.end23, !dbg !5277

if.end23:                                         ; preds = %if.then18, %if.end16
  %43 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5278
  %call24 = call %struct.edge_def* @single_exit(%struct.loop* %43), !dbg !5279
  store %struct.edge_def* %call24, %struct.edge_def** %exit, align 8, !dbg !5280
  %44 = load i8, i8* %is_exit.addr, align 1, !dbg !5281
  %conv25 = zext i8 %44 to i32, !dbg !5281
  %tobool26 = icmp ne i32 %conv25, 0, !dbg !5281
  br i1 %tobool26, label %if.then34, label %lor.lhs.false, !dbg !5283

lor.lhs.false:                                    ; preds = %if.end23
  %45 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !5284
  %cmp27 = icmp ne %struct.edge_def* %45, null, !dbg !5285
  br i1 %cmp27, label %land.lhs.true29, label %if.else, !dbg !5286

land.lhs.true29:                                  ; preds = %lor.lhs.false
  %46 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !5287
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %46, i32 0, i32 0, !dbg !5288
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5288
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !5289
  %call30 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %48), !dbg !5290
  %call31 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %47, %struct.basic_block_def* %call30), !dbg !5291
  %conv32 = zext i8 %call31 to i32, !dbg !5291
  %tobool33 = icmp ne i32 %conv32, 0, !dbg !5291
  br i1 %tobool33, label %if.then34, label %if.else, !dbg !5292

if.then34:                                        ; preds = %land.lhs.true29, %if.end23
  %call35 = call { i64, i64 } @shwi_to_double_int(i64 1), !dbg !5293
  %49 = bitcast %struct.double_int* %tmp to { i64, i64 }*, !dbg !5293
  %50 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %49, i32 0, i32 0, !dbg !5293
  %51 = extractvalue { i64, i64 } %call35, 0, !dbg !5293
  store i64 %51, i64* %50, align 8, !dbg !5293
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %49, i32 0, i32 1, !dbg !5293
  %53 = extractvalue { i64, i64 } %call35, 1, !dbg !5293
  store i64 %53, i64* %52, align 8, !dbg !5293
  %54 = bitcast %struct.double_int* %delta to i8*, !dbg !5293
  %55 = bitcast %struct.double_int* %tmp to i8*, !dbg !5293
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 16, i1 false), !dbg !5293
  br label %if.end38, !dbg !5294

if.else:                                          ; preds = %land.lhs.true29, %lor.lhs.false
  %call37 = call { i64, i64 } @shwi_to_double_int(i64 2), !dbg !5295
  %56 = bitcast %struct.double_int* %tmp36 to { i64, i64 }*, !dbg !5295
  %57 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %56, i32 0, i32 0, !dbg !5295
  %58 = extractvalue { i64, i64 } %call37, 0, !dbg !5295
  store i64 %58, i64* %57, align 8, !dbg !5295
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %56, i32 0, i32 1, !dbg !5295
  %60 = extractvalue { i64, i64 } %call37, 1, !dbg !5295
  store i64 %60, i64* %59, align 8, !dbg !5295
  %61 = bitcast %struct.double_int* %delta to i8*, !dbg !5295
  %62 = bitcast %struct.double_int* %tmp36 to i8*, !dbg !5295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 16, i1 false), !dbg !5295
  br label %if.end38

if.end38:                                         ; preds = %if.else, %if.then34
  %63 = bitcast %struct.double_int* %i_bound to { i64, i64 }*, !dbg !5296
  %64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %63, i32 0, i32 0, !dbg !5296
  %65 = load i64, i64* %64, align 8, !dbg !5296
  %66 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %63, i32 0, i32 1, !dbg !5296
  %67 = load i64, i64* %66, align 8, !dbg !5296
  %68 = bitcast %struct.double_int* %delta to { i64, i64 }*, !dbg !5296
  %69 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %68, i32 0, i32 0, !dbg !5296
  %70 = load i64, i64* %69, align 8, !dbg !5296
  %71 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %68, i32 0, i32 1, !dbg !5296
  %72 = load i64, i64* %71, align 8, !dbg !5296
  %call40 = call { i64, i64 } @double_int_add(i64 %65, i64 %67, i64 %70, i64 %72), !dbg !5296
  %73 = bitcast %struct.double_int* %tmp39 to { i64, i64 }*, !dbg !5296
  %74 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %73, i32 0, i32 0, !dbg !5296
  %75 = extractvalue { i64, i64 } %call40, 0, !dbg !5296
  store i64 %75, i64* %74, align 8, !dbg !5296
  %76 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %73, i32 0, i32 1, !dbg !5296
  %77 = extractvalue { i64, i64 } %call40, 1, !dbg !5296
  store i64 %77, i64* %76, align 8, !dbg !5296
  %78 = bitcast %struct.double_int* %i_bound to i8*, !dbg !5296
  %79 = bitcast %struct.double_int* %tmp39 to i8*, !dbg !5296
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 16, i1 false), !dbg !5296
  %80 = bitcast %struct.double_int* %i_bound to { i64, i64 }*, !dbg !5297
  %81 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %80, i32 0, i32 0, !dbg !5297
  %82 = load i64, i64* %81, align 8, !dbg !5297
  %83 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %80, i32 0, i32 1, !dbg !5297
  %84 = load i64, i64* %83, align 8, !dbg !5297
  %85 = bitcast %struct.double_int* %delta to { i64, i64 }*, !dbg !5297
  %86 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %85, i32 0, i32 0, !dbg !5297
  %87 = load i64, i64* %86, align 8, !dbg !5297
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %85, i32 0, i32 1, !dbg !5297
  %89 = load i64, i64* %88, align 8, !dbg !5297
  %call41 = call i32 @double_int_ucmp(i64 %82, i64 %84, i64 %87, i64 %89), !dbg !5297
  %cmp42 = icmp slt i32 %call41, 0, !dbg !5299
  br i1 %cmp42, label %if.then44, label %if.end45, !dbg !5300

if.then44:                                        ; preds = %if.end38
  br label %return, !dbg !5301

if.end45:                                         ; preds = %if.end38
  %90 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5302
  %91 = load i8, i8* %realistic.addr, align 1, !dbg !5303
  %92 = load i8, i8* %upper.addr, align 1, !dbg !5304
  %93 = bitcast %struct.double_int* %i_bound to { i64, i64 }*, !dbg !5305
  %94 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %93, i32 0, i32 0, !dbg !5305
  %95 = load i64, i64* %94, align 8, !dbg !5305
  %96 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %93, i32 0, i32 1, !dbg !5305
  %97 = load i64, i64* %96, align 8, !dbg !5305
  call void @record_niter_bound(%struct.loop* %90, i64 %95, i64 %97, i8 zeroext %91, i8 zeroext %92), !dbg !5305
  br label %return, !dbg !5306

return:                                           ; preds = %if.end45, %if.then44, %if.then15
  ret void, !dbg !5306
}

; Function Attrs: noinline nounwind uwtable
define internal void @infer_loop_bounds_from_undefined(%struct.loop* %loop) #0 !dbg !5307 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %bbs = alloca %struct.basic_block_def**, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %reliable = alloca i8, align 1
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5308, metadata !DIExpression()), !dbg !5309
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5310, metadata !DIExpression()), !dbg !5311
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !5312, metadata !DIExpression()), !dbg !5313
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !5314, metadata !DIExpression()), !dbg !5315
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5316, metadata !DIExpression()), !dbg !5317
  call void @llvm.dbg.declare(metadata i8* %reliable, metadata !5318, metadata !DIExpression()), !dbg !5319
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5320
  %call = call %struct.basic_block_def** @get_loop_body(%struct.loop* %0), !dbg !5321
  store %struct.basic_block_def** %call, %struct.basic_block_def*** %bbs, align 8, !dbg !5322
  store i32 0, i32* %i, align 4, !dbg !5323
  br label %for.cond, !dbg !5325

for.cond:                                         ; preds = %for.inc7, %entry
  %1 = load i32, i32* %i, align 4, !dbg !5326
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5328
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 6, !dbg !5329
  %3 = load i32, i32* %num_nodes, align 4, !dbg !5329
  %cmp = icmp ult i32 %1, %3, !dbg !5330
  br i1 %cmp, label %for.body, label %for.end8, !dbg !5331

for.body:                                         ; preds = %for.cond
  %4 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !5332
  %5 = load i32, i32* %i, align 4, !dbg !5334
  %idxprom = zext i32 %5 to i64, !dbg !5332
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %4, i64 %idxprom, !dbg !5332
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !5332
  store %struct.basic_block_def* %6, %struct.basic_block_def** %bb, align 8, !dbg !5335
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5336
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 3, !dbg !5337
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !5337
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5338
  %call1 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %8, %struct.basic_block_def* %9), !dbg !5339
  store i8 %call1, i8* %reliable, align 1, !dbg !5340
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5341
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %10), !dbg !5343
  %11 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !5343
  %12 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5343
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 24, i1 false), !dbg !5343
  br label %for.cond2, !dbg !5344

for.cond2:                                        ; preds = %for.inc, %for.body
  %call3 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5345
  %tobool = icmp ne i8 %call3, 0, !dbg !5347
  %lnot = xor i1 %tobool, true, !dbg !5347
  br i1 %lnot, label %for.body4, label %for.end, !dbg !5348

for.body4:                                        ; preds = %for.cond2
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5349, metadata !DIExpression()), !dbg !5351
  %call5 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5352
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %stmt, align 8, !dbg !5351
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5353
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5354
  %15 = load i8, i8* %reliable, align 1, !dbg !5355
  call void @infer_loop_bounds_from_array(%struct.loop* %13, %union.gimple_statement_d* %14, i8 zeroext %15), !dbg !5356
  %16 = load i8, i8* %reliable, align 1, !dbg !5357
  %tobool6 = icmp ne i8 %16, 0, !dbg !5357
  br i1 %tobool6, label %if.then, label %if.end, !dbg !5359

if.then:                                          ; preds = %for.body4
  %17 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5360
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5361
  call void @infer_loop_bounds_from_signedness(%struct.loop* %17, %union.gimple_statement_d* %18), !dbg !5362
  br label %if.end, !dbg !5362

if.end:                                           ; preds = %if.then, %for.body4
  br label %for.inc, !dbg !5363

for.inc:                                          ; preds = %if.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !5364
  br label %for.cond2, !dbg !5365, !llvm.loop !5366

for.end:                                          ; preds = %for.cond2
  br label %for.inc7, !dbg !5368

for.inc7:                                         ; preds = %for.end
  %19 = load i32, i32* %i, align 4, !dbg !5369
  %inc = add i32 %19, 1, !dbg !5369
  store i32 %inc, i32* %i, align 4, !dbg !5369
  br label %for.cond, !dbg !5370, !llvm.loop !5371

for.end8:                                         ; preds = %for.cond
  %20 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !5373
  %21 = bitcast %struct.basic_block_def** %20 to i8*, !dbg !5373
  call void @free(i8* %21), !dbg !5374
  ret void, !dbg !5375
}

declare dso_local i64 @expected_loop_iterations_unbounded(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal { i64, i64 } @gcov_type_to_double_int(i64 %val) #0 !dbg !5376 {
entry:
  %retval = alloca %struct.double_int, align 8
  %val.addr = alloca i64, align 8
  store i64 %val, i64* %val.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %val.addr, metadata !5379, metadata !DIExpression()), !dbg !5380
  call void @llvm.dbg.declare(metadata %struct.double_int* %retval, metadata !5381, metadata !DIExpression()), !dbg !5382
  %0 = load i64, i64* %val.addr, align 8, !dbg !5383
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i32 0, i32 0, !dbg !5384
  store i64 %0, i64* %low, align 8, !dbg !5385
  %1 = load i64, i64* %val.addr, align 8, !dbg !5386
  %shr = ashr i64 %1, 63, !dbg !5386
  store i64 %shr, i64* %val.addr, align 8, !dbg !5386
  %2 = load i64, i64* %val.addr, align 8, !dbg !5387
  %shr1 = ashr i64 %2, 1, !dbg !5387
  store i64 %shr1, i64* %val.addr, align 8, !dbg !5387
  %3 = load i64, i64* %val.addr, align 8, !dbg !5388
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i32 0, i32 1, !dbg !5389
  store i64 %3, i64* %high, align 8, !dbg !5390
  %4 = bitcast %struct.double_int* %retval to { i64, i64 }*, !dbg !5391
  %5 = load { i64, i64 }, { i64, i64 }* %4, align 8, !dbg !5391
  ret { i64, i64 } %5, !dbg !5391
}

; Function Attrs: noinline nounwind uwtable
define internal void @record_niter_bound(%struct.loop* %loop, i64 %i_bound.coerce0, i64 %i_bound.coerce1, i8 zeroext %realistic, i8 zeroext %upper) #0 !dbg !5392 {
entry:
  %i_bound = alloca %struct.double_int, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %realistic.addr = alloca i8, align 1
  %upper.addr = alloca i8, align 1
  %0 = bitcast %struct.double_int* %i_bound to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %i_bound.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %i_bound.coerce1, i64* %2, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5395, metadata !DIExpression()), !dbg !5396
  call void @llvm.dbg.declare(metadata %struct.double_int* %i_bound, metadata !5397, metadata !DIExpression()), !dbg !5398
  store i8 %realistic, i8* %realistic.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %realistic.addr, metadata !5399, metadata !DIExpression()), !dbg !5400
  store i8 %upper, i8* %upper.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %upper.addr, metadata !5401, metadata !DIExpression()), !dbg !5402
  %3 = load i8, i8* %upper.addr, align 1, !dbg !5403
  %conv = zext i8 %3 to i32, !dbg !5403
  %tobool = icmp ne i32 %conv, 0, !dbg !5403
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5405

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5406
  %any_upper_bound = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 14, !dbg !5407
  %5 = load i8, i8* %any_upper_bound, align 8, !dbg !5407
  %tobool1 = icmp ne i8 %5, 0, !dbg !5406
  br i1 %tobool1, label %lor.lhs.false, label %if.then, !dbg !5408

lor.lhs.false:                                    ; preds = %land.lhs.true
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5409
  %nb_iterations_upper_bound = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 12, !dbg !5410
  %7 = bitcast %struct.double_int* %i_bound to { i64, i64 }*, !dbg !5411
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 0, !dbg !5411
  %9 = load i64, i64* %8, align 8, !dbg !5411
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 1, !dbg !5411
  %11 = load i64, i64* %10, align 8, !dbg !5411
  %12 = bitcast %struct.double_int* %nb_iterations_upper_bound to { i64, i64 }*, !dbg !5411
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 0, !dbg !5411
  %14 = load i64, i64* %13, align 8, !dbg !5411
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 1, !dbg !5411
  %16 = load i64, i64* %15, align 8, !dbg !5411
  %call = call i32 @double_int_ucmp(i64 %9, i64 %11, i64 %14, i64 %16), !dbg !5411
  %cmp = icmp slt i32 %call, 0, !dbg !5412
  br i1 %cmp, label %if.then, label %if.end, !dbg !5413

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %17 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5414
  %any_upper_bound3 = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 14, !dbg !5416
  store i8 1, i8* %any_upper_bound3, align 8, !dbg !5417
  %18 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5418
  %nb_iterations_upper_bound4 = getelementptr inbounds %struct.loop, %struct.loop* %18, i32 0, i32 12, !dbg !5419
  %19 = bitcast %struct.double_int* %nb_iterations_upper_bound4 to i8*, !dbg !5420
  %20 = bitcast %struct.double_int* %i_bound to i8*, !dbg !5420
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 16, i1 false), !dbg !5420
  br label %if.end, !dbg !5421

if.end:                                           ; preds = %if.then, %lor.lhs.false, %entry
  %21 = load i8, i8* %realistic.addr, align 1, !dbg !5422
  %conv5 = zext i8 %21 to i32, !dbg !5422
  %tobool6 = icmp ne i32 %conv5, 0, !dbg !5422
  br i1 %tobool6, label %land.lhs.true7, label %if.end16, !dbg !5424

land.lhs.true7:                                   ; preds = %if.end
  %22 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5425
  %any_estimate = getelementptr inbounds %struct.loop, %struct.loop* %22, i32 0, i32 15, !dbg !5426
  %23 = load i8, i8* %any_estimate, align 1, !dbg !5426
  %tobool8 = icmp ne i8 %23, 0, !dbg !5425
  br i1 %tobool8, label %lor.lhs.false9, label %if.then13, !dbg !5427

lor.lhs.false9:                                   ; preds = %land.lhs.true7
  %24 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5428
  %nb_iterations_estimate = getelementptr inbounds %struct.loop, %struct.loop* %24, i32 0, i32 13, !dbg !5429
  %25 = bitcast %struct.double_int* %i_bound to { i64, i64 }*, !dbg !5430
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %25, i32 0, i32 0, !dbg !5430
  %27 = load i64, i64* %26, align 8, !dbg !5430
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %25, i32 0, i32 1, !dbg !5430
  %29 = load i64, i64* %28, align 8, !dbg !5430
  %30 = bitcast %struct.double_int* %nb_iterations_estimate to { i64, i64 }*, !dbg !5430
  %31 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %30, i32 0, i32 0, !dbg !5430
  %32 = load i64, i64* %31, align 8, !dbg !5430
  %33 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %30, i32 0, i32 1, !dbg !5430
  %34 = load i64, i64* %33, align 8, !dbg !5430
  %call10 = call i32 @double_int_ucmp(i64 %27, i64 %29, i64 %32, i64 %34), !dbg !5430
  %cmp11 = icmp slt i32 %call10, 0, !dbg !5431
  br i1 %cmp11, label %if.then13, label %if.end16, !dbg !5432

if.then13:                                        ; preds = %lor.lhs.false9, %land.lhs.true7
  %35 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5433
  %any_estimate14 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 15, !dbg !5435
  store i8 1, i8* %any_estimate14, align 1, !dbg !5436
  %36 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5437
  %nb_iterations_estimate15 = getelementptr inbounds %struct.loop, %struct.loop* %36, i32 0, i32 13, !dbg !5438
  %37 = bitcast %struct.double_int* %nb_iterations_estimate15 to i8*, !dbg !5439
  %38 = bitcast %struct.double_int* %i_bound to i8*, !dbg !5439
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 16, i1 false), !dbg !5439
  br label %if.end16, !dbg !5440

if.end16:                                         ; preds = %if.then13, %lor.lhs.false9, %if.end
  ret void, !dbg !5441
}

declare dso_local i32 @double_int_ucmp(i64, i64, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @estimate_numbers_of_iterations() #0 !dbg !5442 {
entry:
  %li = alloca %struct.loop_iterator, align 8
  %loop = alloca %struct.loop*, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !5445, metadata !DIExpression()), !dbg !5451
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !5452, metadata !DIExpression()), !dbg !5453
  call void @fold_defer_overflow_warnings(), !dbg !5454
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !5455
  br label %for.cond, !dbg !5455

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5457
  %tobool = icmp ne %struct.loop* %0, null, !dbg !5455
  br i1 %tobool, label %for.body, label %for.end, !dbg !5455

for.body:                                         ; preds = %for.cond
  %1 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5459
  call void @estimate_numbers_of_iterations_loop(%struct.loop* %1), !dbg !5461
  br label %for.inc, !dbg !5462

for.inc:                                          ; preds = %for.body
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !5457
  br label %for.cond, !dbg !5457, !llvm.loop !5463

for.end:                                          ; preds = %for.cond
  call void @fold_undefer_and_ignore_overflow_warnings(), !dbg !5465
  ret void, !dbg !5466
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 %flags) #0 !dbg !5467 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %flags.addr = alloca i32, align 4
  %aloop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %mn = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !5472, metadata !DIExpression()), !dbg !5473
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !5474, metadata !DIExpression()), !dbg !5475
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5476, metadata !DIExpression()), !dbg !5477
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !5478, metadata !DIExpression()), !dbg !5479
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5480, metadata !DIExpression()), !dbg !5481
  call void @llvm.dbg.declare(metadata i32* %mn, metadata !5482, metadata !DIExpression()), !dbg !5483
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5484
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 1, !dbg !5485
  store i32 0, i32* %idx, align 8, !dbg !5486
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5487
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !5487
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5487
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5487
  %tobool = icmp ne %struct.loops* %2, null, !dbg !5487
  br i1 %tobool, label %if.end, label %if.then, !dbg !5489

if.then:                                          ; preds = %entry
  %3 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5490
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %3, i32 0, i32 0, !dbg !5492
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %to_visit, align 8, !dbg !5493
  %4 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !5494
  store %struct.loop* null, %struct.loop** %4, align 8, !dbg !5495
  br label %return, !dbg !5496

if.end:                                           ; preds = %entry
  %call = call i32 @number_of_loops(), !dbg !5497
  %call1 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %call), !dbg !5497
  %5 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5498
  %to_visit2 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %5, i32 0, i32 0, !dbg !5499
  store %struct.VEC_int_heap* %call1, %struct.VEC_int_heap** %to_visit2, align 8, !dbg !5500
  %6 = load i32, i32* %flags.addr, align 4, !dbg !5501
  %and = and i32 %6, 1, !dbg !5502
  %tobool3 = icmp ne i32 %and, 0, !dbg !5503
  %7 = zext i1 %tobool3 to i64, !dbg !5503
  %cond = select i1 %tobool3, i32 0, i32 1, !dbg !5503
  store i32 %cond, i32* %mn, align 4, !dbg !5504
  %8 = load i32, i32* %flags.addr, align 4, !dbg !5505
  %and4 = and i32 %8, 4, !dbg !5507
  %tobool5 = icmp ne i32 %and4, 0, !dbg !5507
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !5508

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !5509
  br label %for.cond, !dbg !5512

for.cond:                                         ; preds = %for.inc, %if.then6
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5513
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !5513
  %x_current_loops8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 4, !dbg !5513
  %10 = load %struct.loops*, %struct.loops** %x_current_loops8, align 8, !dbg !5513
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %10, i32 0, i32 1, !dbg !5513
  %11 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !5513
  %tobool9 = icmp ne %struct.VEC_loop_p_gc* %11, null, !dbg !5513
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !5513

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5513
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !5513
  %x_current_loops11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 4, !dbg !5513
  %13 = load %struct.loops*, %struct.loops** %x_current_loops11, align 8, !dbg !5513
  %larray12 = getelementptr inbounds %struct.loops, %struct.loops* %13, i32 0, i32 1, !dbg !5513
  %14 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray12, align 8, !dbg !5513
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %14, i32 0, i32 0, !dbg !5513
  br label %cond.end, !dbg !5513

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5513

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5513
  %15 = load i32, i32* %i, align 4, !dbg !5513
  %call14 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond13, i32 %15, %struct.loop** %aloop), !dbg !5513
  %tobool15 = icmp ne i32 %call14, 0, !dbg !5515
  br i1 %tobool15, label %for.body, label %for.end, !dbg !5515

for.body:                                         ; preds = %cond.end
  %16 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5516
  %cmp = icmp ne %struct.loop* %16, null, !dbg !5518
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !5519

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5520
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 8, !dbg !5521
  %18 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !5521
  %cmp16 = icmp eq %struct.loop* %18, null, !dbg !5522
  br i1 %cmp16, label %land.lhs.true17, label %if.end30, !dbg !5523

land.lhs.true17:                                  ; preds = %land.lhs.true
  %19 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5524
  %num = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 0, !dbg !5525
  %20 = load i32, i32* %num, align 8, !dbg !5525
  %21 = load i32, i32* %mn, align 4, !dbg !5526
  %cmp18 = icmp sge i32 %20, %21, !dbg !5527
  br i1 %cmp18, label %if.then19, label %if.end30, !dbg !5528

if.then19:                                        ; preds = %land.lhs.true17
  %22 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5529
  %to_visit20 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %22, i32 0, i32 0, !dbg !5529
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit20, align 8, !dbg !5529
  %tobool21 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !5529
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !5529

cond.true22:                                      ; preds = %if.then19
  %24 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5529
  %to_visit23 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %24, i32 0, i32 0, !dbg !5529
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit23, align 8, !dbg !5529
  %base24 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !5529
  br label %cond.end26, !dbg !5529

cond.false25:                                     ; preds = %if.then19
  br label %cond.end26, !dbg !5529

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_int_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !5529
  %26 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5529
  %num28 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 0, !dbg !5529
  %27 = load i32, i32* %num28, align 8, !dbg !5529
  %call29 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond27, i32 %27), !dbg !5529
  br label %if.end30, !dbg !5529

if.end30:                                         ; preds = %cond.end26, %land.lhs.true17, %land.lhs.true, %for.body
  br label %for.inc, !dbg !5526

for.inc:                                          ; preds = %if.end30
  %28 = load i32, i32* %i, align 4, !dbg !5530
  %inc = add i32 %28, 1, !dbg !5530
  store i32 %inc, i32* %i, align 4, !dbg !5530
  br label %for.cond, !dbg !5531, !llvm.loop !5532

for.end:                                          ; preds = %cond.end
  br label %if.end113, !dbg !5534

if.else:                                          ; preds = %if.end
  %29 = load i32, i32* %flags.addr, align 4, !dbg !5535
  %and31 = and i32 %29, 2, !dbg !5537
  %tobool32 = icmp ne i32 %and31, 0, !dbg !5537
  br i1 %tobool32, label %if.then33, label %if.else75, !dbg !5538

if.then33:                                        ; preds = %if.else
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5539
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !5539
  %x_current_loops35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 4, !dbg !5539
  %31 = load %struct.loops*, %struct.loops** %x_current_loops35, align 8, !dbg !5539
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %31, i32 0, i32 3, !dbg !5542
  %32 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !5542
  store %struct.loop* %32, %struct.loop** %aloop, align 8, !dbg !5543
  br label %for.cond36, !dbg !5544

for.cond36:                                       ; preds = %for.inc40, %if.then33
  %33 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5545
  %inner37 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 8, !dbg !5547
  %34 = load %struct.loop*, %struct.loop** %inner37, align 8, !dbg !5547
  %cmp38 = icmp ne %struct.loop* %34, null, !dbg !5548
  br i1 %cmp38, label %for.body39, label %for.end42, !dbg !5549

for.body39:                                       ; preds = %for.cond36
  br label %for.inc40, !dbg !5550

for.inc40:                                        ; preds = %for.body39
  %35 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5551
  %inner41 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 8, !dbg !5552
  %36 = load %struct.loop*, %struct.loop** %inner41, align 8, !dbg !5552
  store %struct.loop* %36, %struct.loop** %aloop, align 8, !dbg !5553
  br label %for.cond36, !dbg !5554, !llvm.loop !5555

for.end42:                                        ; preds = %for.cond36
  br label %while.body, !dbg !5557

while.body:                                       ; preds = %for.end42, %if.end74
  %37 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5558
  %num43 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !5561
  %38 = load i32, i32* %num43, align 8, !dbg !5561
  %39 = load i32, i32* %mn, align 4, !dbg !5562
  %cmp44 = icmp sge i32 %38, %39, !dbg !5563
  br i1 %cmp44, label %if.then45, label %if.end56, !dbg !5564

if.then45:                                        ; preds = %while.body
  %40 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5565
  %to_visit46 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %40, i32 0, i32 0, !dbg !5565
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit46, align 8, !dbg !5565
  %tobool47 = icmp ne %struct.VEC_int_heap* %41, null, !dbg !5565
  br i1 %tobool47, label %cond.true48, label %cond.false51, !dbg !5565

cond.true48:                                      ; preds = %if.then45
  %42 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5565
  %to_visit49 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %42, i32 0, i32 0, !dbg !5565
  %43 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit49, align 8, !dbg !5565
  %base50 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %43, i32 0, i32 0, !dbg !5565
  br label %cond.end52, !dbg !5565

cond.false51:                                     ; preds = %if.then45
  br label %cond.end52, !dbg !5565

cond.end52:                                       ; preds = %cond.false51, %cond.true48
  %cond53 = phi %struct.VEC_int_base* [ %base50, %cond.true48 ], [ null, %cond.false51 ], !dbg !5565
  %44 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5565
  %num54 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 0, !dbg !5565
  %45 = load i32, i32* %num54, align 8, !dbg !5565
  %call55 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond53, i32 %45), !dbg !5565
  br label %if.end56, !dbg !5565

if.end56:                                         ; preds = %cond.end52, %while.body
  %46 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5566
  %next = getelementptr inbounds %struct.loop, %struct.loop* %46, i32 0, i32 9, !dbg !5568
  %47 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !5568
  %tobool57 = icmp ne %struct.loop* %47, null, !dbg !5566
  br i1 %tobool57, label %if.then58, label %if.else67, !dbg !5569

if.then58:                                        ; preds = %if.end56
  %48 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5570
  %next59 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 9, !dbg !5573
  %49 = load %struct.loop*, %struct.loop** %next59, align 8, !dbg !5573
  store %struct.loop* %49, %struct.loop** %aloop, align 8, !dbg !5574
  br label %for.cond60, !dbg !5575

for.cond60:                                       ; preds = %for.inc64, %if.then58
  %50 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5576
  %inner61 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 8, !dbg !5578
  %51 = load %struct.loop*, %struct.loop** %inner61, align 8, !dbg !5578
  %cmp62 = icmp ne %struct.loop* %51, null, !dbg !5579
  br i1 %cmp62, label %for.body63, label %for.end66, !dbg !5580

for.body63:                                       ; preds = %for.cond60
  br label %for.inc64, !dbg !5581

for.inc64:                                        ; preds = %for.body63
  %52 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5582
  %inner65 = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 8, !dbg !5583
  %53 = load %struct.loop*, %struct.loop** %inner65, align 8, !dbg !5583
  store %struct.loop* %53, %struct.loop** %aloop, align 8, !dbg !5584
  br label %for.cond60, !dbg !5585, !llvm.loop !5586

for.end66:                                        ; preds = %for.cond60
  br label %if.end74, !dbg !5588

if.else67:                                        ; preds = %if.end56
  %54 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5589
  %call68 = call %struct.loop* @loop_outer(%struct.loop* %54), !dbg !5591
  %tobool69 = icmp ne %struct.loop* %call68, null, !dbg !5591
  br i1 %tobool69, label %if.else71, label %if.then70, !dbg !5592

if.then70:                                        ; preds = %if.else67
  br label %while.end, !dbg !5593

if.else71:                                        ; preds = %if.else67
  %55 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5594
  %call72 = call %struct.loop* @loop_outer(%struct.loop* %55), !dbg !5595
  store %struct.loop* %call72, %struct.loop** %aloop, align 8, !dbg !5596
  br label %if.end73

if.end73:                                         ; preds = %if.else71
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %for.end66
  br label %while.body, !dbg !5557, !llvm.loop !5597

while.end:                                        ; preds = %if.then70
  br label %if.end112, !dbg !5599

if.else75:                                        ; preds = %if.else
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5600
  %add.ptr76 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !5600
  %x_current_loops77 = getelementptr inbounds %struct.function, %struct.function* %add.ptr76, i32 0, i32 4, !dbg !5600
  %57 = load %struct.loops*, %struct.loops** %x_current_loops77, align 8, !dbg !5600
  %tree_root78 = getelementptr inbounds %struct.loops, %struct.loops* %57, i32 0, i32 3, !dbg !5602
  %58 = load %struct.loop*, %struct.loop** %tree_root78, align 8, !dbg !5602
  store %struct.loop* %58, %struct.loop** %aloop, align 8, !dbg !5603
  br label %while.body79, !dbg !5604

while.body79:                                     ; preds = %if.else75, %if.end110
  %59 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5605
  %num80 = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 0, !dbg !5608
  %60 = load i32, i32* %num80, align 8, !dbg !5608
  %61 = load i32, i32* %mn, align 4, !dbg !5609
  %cmp81 = icmp sge i32 %60, %61, !dbg !5610
  br i1 %cmp81, label %if.then82, label %if.end93, !dbg !5611

if.then82:                                        ; preds = %while.body79
  %62 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5612
  %to_visit83 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %62, i32 0, i32 0, !dbg !5612
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit83, align 8, !dbg !5612
  %tobool84 = icmp ne %struct.VEC_int_heap* %63, null, !dbg !5612
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !5612

cond.true85:                                      ; preds = %if.then82
  %64 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5612
  %to_visit86 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %64, i32 0, i32 0, !dbg !5612
  %65 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit86, align 8, !dbg !5612
  %base87 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %65, i32 0, i32 0, !dbg !5612
  br label %cond.end89, !dbg !5612

cond.false88:                                     ; preds = %if.then82
  br label %cond.end89, !dbg !5612

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_int_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !5612
  %66 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5612
  %num91 = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 0, !dbg !5612
  %67 = load i32, i32* %num91, align 8, !dbg !5612
  %call92 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond90, i32 %67), !dbg !5612
  br label %if.end93, !dbg !5612

if.end93:                                         ; preds = %cond.end89, %while.body79
  %68 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5613
  %inner94 = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 8, !dbg !5615
  %69 = load %struct.loop*, %struct.loop** %inner94, align 8, !dbg !5615
  %cmp95 = icmp ne %struct.loop* %69, null, !dbg !5616
  br i1 %cmp95, label %if.then96, label %if.else98, !dbg !5617

if.then96:                                        ; preds = %if.end93
  %70 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5618
  %inner97 = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 8, !dbg !5619
  %71 = load %struct.loop*, %struct.loop** %inner97, align 8, !dbg !5619
  store %struct.loop* %71, %struct.loop** %aloop, align 8, !dbg !5620
  br label %if.end110, !dbg !5621

if.else98:                                        ; preds = %if.end93
  br label %while.cond99, !dbg !5622

while.cond99:                                     ; preds = %while.body103, %if.else98
  %72 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5624
  %cmp100 = icmp ne %struct.loop* %72, null, !dbg !5625
  br i1 %cmp100, label %land.rhs, label %land.end, !dbg !5626

land.rhs:                                         ; preds = %while.cond99
  %73 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5627
  %next101 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 9, !dbg !5628
  %74 = load %struct.loop*, %struct.loop** %next101, align 8, !dbg !5628
  %cmp102 = icmp eq %struct.loop* %74, null, !dbg !5629
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond99
  %75 = phi i1 [ false, %while.cond99 ], [ %cmp102, %land.rhs ], !dbg !5630
  br i1 %75, label %while.body103, label %while.end105, !dbg !5622

while.body103:                                    ; preds = %land.end
  %76 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5631
  %call104 = call %struct.loop* @loop_outer(%struct.loop* %76), !dbg !5632
  store %struct.loop* %call104, %struct.loop** %aloop, align 8, !dbg !5633
  br label %while.cond99, !dbg !5622, !llvm.loop !5634

while.end105:                                     ; preds = %land.end
  %77 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5636
  %cmp106 = icmp eq %struct.loop* %77, null, !dbg !5638
  br i1 %cmp106, label %if.then107, label %if.end108, !dbg !5639

if.then107:                                       ; preds = %while.end105
  br label %while.end111, !dbg !5640

if.end108:                                        ; preds = %while.end105
  %78 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5641
  %next109 = getelementptr inbounds %struct.loop, %struct.loop* %78, i32 0, i32 9, !dbg !5642
  %79 = load %struct.loop*, %struct.loop** %next109, align 8, !dbg !5642
  store %struct.loop* %79, %struct.loop** %aloop, align 8, !dbg !5643
  br label %if.end110

if.end110:                                        ; preds = %if.end108, %if.then96
  br label %while.body79, !dbg !5604, !llvm.loop !5644

while.end111:                                     ; preds = %if.then107
  br label %if.end112

if.end112:                                        ; preds = %while.end111, %while.end
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %for.end
  %80 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5646
  %81 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !5647
  call void @fel_next(%struct.loop_iterator* %80, %struct.loop** %81), !dbg !5648
  br label %return, !dbg !5649

return:                                           ; preds = %if.end113, %if.then
  ret void, !dbg !5649
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop) #0 !dbg !5650 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %anum = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !5653, metadata !DIExpression()), !dbg !5654
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !5655, metadata !DIExpression()), !dbg !5656
  call void @llvm.dbg.declare(metadata i32* %anum, metadata !5657, metadata !DIExpression()), !dbg !5658
  br label %while.cond, !dbg !5659

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5660
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 0, !dbg !5660
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit, align 8, !dbg !5660
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !5660
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5660

cond.true:                                        ; preds = %while.cond
  %2 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5660
  %to_visit1 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %2, i32 0, i32 0, !dbg !5660
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit1, align 8, !dbg !5660
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !5660
  br label %cond.end, !dbg !5660

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !5660

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5660
  %4 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5660
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %4, i32 0, i32 1, !dbg !5660
  %5 = load i32, i32* %idx, align 8, !dbg !5660
  %call = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %5, i32* %anum), !dbg !5660
  %tobool2 = icmp ne i32 %call, 0, !dbg !5659
  br i1 %tobool2, label %while.body, label %while.end, !dbg !5659

while.body:                                       ; preds = %cond.end
  %6 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5661
  %idx3 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %6, i32 0, i32 1, !dbg !5663
  %7 = load i32, i32* %idx3, align 8, !dbg !5664
  %inc = add i32 %7, 1, !dbg !5664
  store i32 %inc, i32* %idx3, align 8, !dbg !5664
  %8 = load i32, i32* %anum, align 4, !dbg !5665
  %call4 = call %struct.loop* @get_loop(i32 %8), !dbg !5666
  %9 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !5667
  store %struct.loop* %call4, %struct.loop** %9, align 8, !dbg !5668
  %10 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !5669
  %11 = load %struct.loop*, %struct.loop** %10, align 8, !dbg !5671
  %tobool5 = icmp ne %struct.loop* %11, null, !dbg !5671
  br i1 %tobool5, label %if.then, label %if.end, !dbg !5672

if.then:                                          ; preds = %while.body
  br label %return, !dbg !5673

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !5659, !llvm.loop !5674

while.end:                                        ; preds = %cond.end
  %12 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5676
  %to_visit6 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %12, i32 0, i32 0, !dbg !5676
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %to_visit6), !dbg !5676
  %13 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !5677
  store %struct.loop* null, %struct.loop** %13, align 8, !dbg !5678
  br label %return, !dbg !5679

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !5679
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @stmt_dominates_stmt_p(%union.gimple_statement_d* %s1, %union.gimple_statement_d* %s2) #0 !dbg !5680 {
entry:
  %retval = alloca i8, align 1
  %s1.addr = alloca %union.gimple_statement_d*, align 8
  %s2.addr = alloca %union.gimple_statement_d*, align 8
  %bb1 = alloca %struct.basic_block_def*, align 8
  %bb2 = alloca %struct.basic_block_def*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %union.gimple_statement_d* %s1, %union.gimple_statement_d** %s1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s1.addr, metadata !5683, metadata !DIExpression()), !dbg !5684
  store %union.gimple_statement_d* %s2, %union.gimple_statement_d** %s2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s2.addr, metadata !5685, metadata !DIExpression()), !dbg !5686
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb1, metadata !5687, metadata !DIExpression()), !dbg !5688
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s1.addr, align 8, !dbg !5689
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !5690
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb1, align 8, !dbg !5688
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb2, metadata !5691, metadata !DIExpression()), !dbg !5692
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s2.addr, align 8, !dbg !5693
  %call1 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %1), !dbg !5694
  store %struct.basic_block_def* %call1, %struct.basic_block_def** %bb2, align 8, !dbg !5692
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1, align 8, !dbg !5695
  %tobool = icmp ne %struct.basic_block_def* %2, null, !dbg !5695
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5697

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s1.addr, align 8, !dbg !5698
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s2.addr, align 8, !dbg !5699
  %cmp = icmp eq %union.gimple_statement_d* %3, %4, !dbg !5700
  br i1 %cmp, label %if.then, label %if.end, !dbg !5701

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 1, i8* %retval, align 1, !dbg !5702
  br label %return, !dbg !5702

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1, align 8, !dbg !5703
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2, align 8, !dbg !5705
  %cmp2 = icmp eq %struct.basic_block_def* %5, %6, !dbg !5706
  br i1 %cmp2, label %if.then3, label %if.end18, !dbg !5707

if.then3:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !5708, metadata !DIExpression()), !dbg !5710
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s2.addr, align 8, !dbg !5711
  %call4 = call i32 @gimple_code(%union.gimple_statement_d* %7), !dbg !5713
  %cmp5 = icmp eq i32 %call4, 16, !dbg !5714
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !5715

if.then6:                                         ; preds = %if.then3
  store i8 0, i8* %retval, align 1, !dbg !5716
  br label %return, !dbg !5716

if.end7:                                          ; preds = %if.then3
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s1.addr, align 8, !dbg !5717
  %call8 = call i32 @gimple_code(%union.gimple_statement_d* %8), !dbg !5719
  %cmp9 = icmp eq i32 %call8, 16, !dbg !5720
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !5721

if.then10:                                        ; preds = %if.end7
  store i8 1, i8* %retval, align 1, !dbg !5722
  br label %return, !dbg !5722

if.end11:                                         ; preds = %if.end7
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1, align 8, !dbg !5723
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %9), !dbg !5725
  %10 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !5725
  %11 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5725
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false), !dbg !5725
  br label %for.cond, !dbg !5726

for.cond:                                         ; preds = %for.inc, %if.end11
  %call12 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5727
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s2.addr, align 8, !dbg !5729
  %cmp13 = icmp ne %union.gimple_statement_d* %call12, %12, !dbg !5730
  br i1 %cmp13, label %for.body, label %for.end, !dbg !5731

for.body:                                         ; preds = %for.cond
  %call14 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !5732
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s1.addr, align 8, !dbg !5734
  %cmp15 = icmp eq %union.gimple_statement_d* %call14, %13, !dbg !5735
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !5736

if.then16:                                        ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !5737
  br label %return, !dbg !5737

if.end17:                                         ; preds = %for.body
  br label %for.inc, !dbg !5734

for.inc:                                          ; preds = %if.end17
  call void @gsi_next(%struct.gimple_stmt_iterator* %bsi), !dbg !5738
  br label %for.cond, !dbg !5739, !llvm.loop !5740

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !5742
  br label %return, !dbg !5742

if.end18:                                         ; preds = %if.end
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2, align 8, !dbg !5743
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1, align 8, !dbg !5744
  %call19 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %14, %struct.basic_block_def* %15), !dbg !5745
  store i8 %call19, i8* %retval, align 1, !dbg !5746
  br label %return, !dbg !5746

return:                                           ; preds = %if.end18, %for.end, %if.then16, %if.then10, %if.then6, %if.then
  %16 = load i8, i8* %retval, align 1, !dbg !5747
  ret i8 %16, !dbg !5747
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @nowrap_type_p(%union.tree_node* %type) #0 !dbg !5748 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5749, metadata !DIExpression()), !dbg !5750
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5751
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5751
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5751
  %bf.load = load i64, i64* %1, align 8, !dbg !5751
  %bf.clear = and i64 %bf.load, 65535, !dbg !5751
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5751
  %cmp = icmp eq i32 %bf.cast, 6, !dbg !5751
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !5751

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5751
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !5751
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !5751
  %bf.load2 = load i64, i64* %3, align 8, !dbg !5751
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !5751
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !5751
  %cmp5 = icmp eq i32 %bf.cast4, 7, !dbg !5751
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false6, !dbg !5751

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5751
  %base7 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5751
  %5 = bitcast %struct.tree_base* %base7 to i64*, !dbg !5751
  %bf.load8 = load i64, i64* %5, align 8, !dbg !5751
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !5751
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !5751
  %cmp11 = icmp eq i32 %bf.cast10, 8, !dbg !5751
  br i1 %cmp11, label %land.lhs.true, label %if.end, !dbg !5753

land.lhs.true:                                    ; preds = %lor.lhs.false6, %lor.lhs.false, %entry
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5754
  %base12 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5754
  %7 = bitcast %struct.tree_base* %base12 to i64*, !dbg !5754
  %bf.load13 = load i64, i64* %7, align 8, !dbg !5754
  %bf.lshr = lshr i64 %bf.load13, 21, !dbg !5754
  %bf.clear14 = and i64 %bf.lshr, 1, !dbg !5754
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !5754
  %tobool = icmp ne i32 %bf.cast15, 0, !dbg !5754
  br i1 %tobool, label %if.end, label %land.lhs.true16, !dbg !5754

land.lhs.true16:                                  ; preds = %land.lhs.true
  %8 = load i32, i32* @flag_wrapv, align 4, !dbg !5754
  %tobool17 = icmp ne i32 %8, 0, !dbg !5754
  br i1 %tobool17, label %if.end, label %land.lhs.true18, !dbg !5754

land.lhs.true18:                                  ; preds = %land.lhs.true16
  %9 = load i32, i32* @flag_trapv, align 4, !dbg !5754
  %tobool19 = icmp ne i32 %9, 0, !dbg !5754
  br i1 %tobool19, label %if.end, label %land.lhs.true20, !dbg !5754

land.lhs.true20:                                  ; preds = %land.lhs.true18
  %10 = load i32, i32* @flag_strict_overflow, align 4, !dbg !5754
  %tobool21 = icmp ne i32 %10, 0, !dbg !5754
  br i1 %tobool21, label %if.then, label %if.end, !dbg !5755

if.then:                                          ; preds = %land.lhs.true20
  store i8 1, i8* %retval, align 1, !dbg !5756
  br label %return, !dbg !5756

if.end:                                           ; preds = %land.lhs.true20, %land.lhs.true18, %land.lhs.true16, %land.lhs.true, %lor.lhs.false6
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5757
  %base22 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !5757
  %12 = bitcast %struct.tree_base* %base22 to i64*, !dbg !5757
  %bf.load23 = load i64, i64* %12, align 8, !dbg !5757
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !5757
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !5757
  %cmp26 = icmp eq i32 %bf.cast25, 10, !dbg !5757
  br i1 %cmp26, label %if.then33, label %lor.lhs.false27, !dbg !5757

lor.lhs.false27:                                  ; preds = %if.end
  %13 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5757
  %base28 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !5757
  %14 = bitcast %struct.tree_base* %base28 to i64*, !dbg !5757
  %bf.load29 = load i64, i64* %14, align 8, !dbg !5757
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !5757
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !5757
  %cmp32 = icmp eq i32 %bf.cast31, 12, !dbg !5757
  br i1 %cmp32, label %if.then33, label %if.end34, !dbg !5759

if.then33:                                        ; preds = %lor.lhs.false27, %if.end
  store i8 1, i8* %retval, align 1, !dbg !5760
  br label %return, !dbg !5760

if.end34:                                         ; preds = %lor.lhs.false27
  store i8 0, i8* %retval, align 1, !dbg !5761
  br label %return, !dbg !5761

return:                                           ; preds = %if.end34, %if.then33, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !5762
  ret i8 %15, !dbg !5762
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @scev_probably_wraps_p(%union.tree_node* %base, %union.tree_node* %step, %union.gimple_statement_d* %at_stmt, %struct.loop* %loop, i8 zeroext %use_overflow_semantics) #0 !dbg !5763 {
entry:
  %retval = alloca i8, align 1
  %base.addr = alloca %union.tree_node*, align 8
  %step.addr = alloca %union.tree_node*, align 8
  %at_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %use_overflow_semantics.addr = alloca i8, align 1
  %bound = alloca %struct.nb_iter_bound*, align 8
  %delta = alloca %union.tree_node*, align 8
  %step_abs = alloca %union.tree_node*, align 8
  %unsigned_type = alloca %union.tree_node*, align 8
  %valid_niter = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %extreme = alloca %union.tree_node*, align 8
  %extreme32 = alloca %union.tree_node*, align 8
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !5766, metadata !DIExpression()), !dbg !5767
  store %union.tree_node* %step, %union.tree_node** %step.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %step.addr, metadata !5768, metadata !DIExpression()), !dbg !5769
  store %union.gimple_statement_d* %at_stmt, %union.gimple_statement_d** %at_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %at_stmt.addr, metadata !5770, metadata !DIExpression()), !dbg !5771
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5772, metadata !DIExpression()), !dbg !5773
  store i8 %use_overflow_semantics, i8* %use_overflow_semantics.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %use_overflow_semantics.addr, metadata !5774, metadata !DIExpression()), !dbg !5775
  call void @llvm.dbg.declare(metadata %struct.nb_iter_bound** %bound, metadata !5776, metadata !DIExpression()), !dbg !5777
  call void @llvm.dbg.declare(metadata %union.tree_node** %delta, metadata !5778, metadata !DIExpression()), !dbg !5779
  call void @llvm.dbg.declare(metadata %union.tree_node** %step_abs, metadata !5780, metadata !DIExpression()), !dbg !5781
  call void @llvm.dbg.declare(metadata %union.tree_node** %unsigned_type, metadata !5782, metadata !DIExpression()), !dbg !5783
  call void @llvm.dbg.declare(metadata %union.tree_node** %valid_niter, metadata !5784, metadata !DIExpression()), !dbg !5785
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5786, metadata !DIExpression()), !dbg !5787
  %0 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !5788
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !5788
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5788
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !5788
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !5787
  %2 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !5789
  %call = call zeroext i8 @chrec_contains_undetermined(%union.tree_node* %2), !dbg !5791
  %conv = zext i8 %call to i32, !dbg !5791
  %tobool = icmp ne i32 %conv, 0, !dbg !5791
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !5792

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !5793
  %call2 = call zeroext i8 @chrec_contains_undetermined(%union.tree_node* %3), !dbg !5794
  %conv3 = zext i8 %call2 to i32, !dbg !5794
  %tobool4 = icmp ne i32 %conv3, 0, !dbg !5794
  br i1 %tobool4, label %if.then, label %if.end, !dbg !5795

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 1, i8* %retval, align 1, !dbg !5796
  br label %return, !dbg !5796

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !5797
  %call5 = call i32 @integer_zerop(%union.tree_node* %4), !dbg !5799
  %tobool6 = icmp ne i32 %call5, 0, !dbg !5799
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !5800

if.then7:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !5801
  br label %return, !dbg !5801

if.end8:                                          ; preds = %if.end
  %5 = load i8, i8* %use_overflow_semantics.addr, align 1, !dbg !5802
  %conv9 = zext i8 %5 to i32, !dbg !5802
  %tobool10 = icmp ne i32 %conv9, 0, !dbg !5802
  br i1 %tobool10, label %land.lhs.true, label %if.end17, !dbg !5804

land.lhs.true:                                    ; preds = %if.end8
  %6 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !5805
  %common11 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !5805
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2, !dbg !5805
  %7 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !5805
  %call13 = call zeroext i8 @nowrap_type_p(%union.tree_node* %7), !dbg !5806
  %conv14 = zext i8 %call13 to i32, !dbg !5806
  %tobool15 = icmp ne i32 %conv14, 0, !dbg !5806
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !5807

if.then16:                                        ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !5808
  br label %return, !dbg !5808

if.end17:                                         ; preds = %land.lhs.true, %if.end8
  %8 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !5809
  %base18 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !5809
  %9 = bitcast %struct.tree_base* %base18 to i64*, !dbg !5809
  %bf.load = load i64, i64* %9, align 8, !dbg !5809
  %bf.clear = and i64 %bf.load, 65535, !dbg !5809
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5809
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !5811
  br i1 %cmp, label %if.then20, label %if.end21, !dbg !5812

if.then20:                                        ; preds = %if.end17
  store i8 1, i8* %retval, align 1, !dbg !5813
  br label %return, !dbg !5813

if.end21:                                         ; preds = %if.end17
  call void @fold_defer_overflow_warnings(), !dbg !5814
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5815
  %call22 = call %union.tree_node* @unsigned_type_for(%union.tree_node* %10), !dbg !5816
  store %union.tree_node* %call22, %union.tree_node** %unsigned_type, align 8, !dbg !5817
  %11 = load %union.tree_node*, %union.tree_node** %unsigned_type, align 8, !dbg !5818
  %12 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !5818
  %call23 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %11, %union.tree_node* %12), !dbg !5818
  store %union.tree_node* %call23, %union.tree_node** %base.addr, align 8, !dbg !5819
  %13 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !5820
  %call24 = call i32 @tree_int_cst_sign_bit(%union.tree_node* %13), !dbg !5822
  %tobool25 = icmp ne i32 %call24, 0, !dbg !5822
  br i1 %tobool25, label %if.then26, label %if.else, !dbg !5823

if.then26:                                        ; preds = %if.end21
  call void @llvm.dbg.declare(metadata %union.tree_node** %extreme, metadata !5824, metadata !DIExpression()), !dbg !5826
  %14 = load %union.tree_node*, %union.tree_node** %unsigned_type, align 8, !dbg !5827
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5827
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5827
  %call27 = call %union.tree_node* @lower_bound_in_type(%union.tree_node* %15, %union.tree_node* %16), !dbg !5827
  %call28 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %14, %union.tree_node* %call27), !dbg !5827
  store %union.tree_node* %call28, %union.tree_node** %extreme, align 8, !dbg !5826
  %17 = load %union.tree_node*, %union.tree_node** %unsigned_type, align 8, !dbg !5828
  %18 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !5828
  %19 = load %union.tree_node*, %union.tree_node** %extreme, align 8, !dbg !5828
  %call29 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %17, %union.tree_node* %18, %union.tree_node* %19), !dbg !5828
  store %union.tree_node* %call29, %union.tree_node** %delta, align 8, !dbg !5829
  %20 = load %union.tree_node*, %union.tree_node** %unsigned_type, align 8, !dbg !5830
  %21 = load %union.tree_node*, %union.tree_node** %unsigned_type, align 8, !dbg !5830
  %22 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !5830
  %call30 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %21, %union.tree_node* %22), !dbg !5830
  %call31 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 79, %union.tree_node* %20, %union.tree_node* %call30), !dbg !5830
  store %union.tree_node* %call31, %union.tree_node** %step_abs, align 8, !dbg !5831
  br label %if.end37, !dbg !5832

if.else:                                          ; preds = %if.end21
  call void @llvm.dbg.declare(metadata %union.tree_node** %extreme32, metadata !5833, metadata !DIExpression()), !dbg !5835
  %23 = load %union.tree_node*, %union.tree_node** %unsigned_type, align 8, !dbg !5836
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5836
  %25 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5836
  %call33 = call %union.tree_node* @upper_bound_in_type(%union.tree_node* %24, %union.tree_node* %25), !dbg !5836
  %call34 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %23, %union.tree_node* %call33), !dbg !5836
  store %union.tree_node* %call34, %union.tree_node** %extreme32, align 8, !dbg !5835
  %26 = load %union.tree_node*, %union.tree_node** %unsigned_type, align 8, !dbg !5837
  %27 = load %union.tree_node*, %union.tree_node** %extreme32, align 8, !dbg !5837
  %28 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !5837
  %call35 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %26, %union.tree_node* %27, %union.tree_node* %28), !dbg !5837
  store %union.tree_node* %call35, %union.tree_node** %delta, align 8, !dbg !5838
  %29 = load %union.tree_node*, %union.tree_node** %unsigned_type, align 8, !dbg !5839
  %30 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !5839
  %call36 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %29, %union.tree_node* %30), !dbg !5839
  store %union.tree_node* %call36, %union.tree_node** %step_abs, align 8, !dbg !5840
  br label %if.end37

if.end37:                                         ; preds = %if.else, %if.then26
  %31 = load %union.tree_node*, %union.tree_node** %unsigned_type, align 8, !dbg !5841
  %32 = load %union.tree_node*, %union.tree_node** %delta, align 8, !dbg !5841
  %33 = load %union.tree_node*, %union.tree_node** %step_abs, align 8, !dbg !5841
  %call38 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 69, %union.tree_node* %31, %union.tree_node* %32, %union.tree_node* %33), !dbg !5841
  store %union.tree_node* %call38, %union.tree_node** %valid_niter, align 8, !dbg !5842
  %34 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5843
  call void @estimate_numbers_of_iterations_loop(%struct.loop* %34), !dbg !5844
  %35 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5845
  %bounds = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 17, !dbg !5847
  %36 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %bounds, align 8, !dbg !5847
  store %struct.nb_iter_bound* %36, %struct.nb_iter_bound** %bound, align 8, !dbg !5848
  br label %for.cond, !dbg !5849

for.cond:                                         ; preds = %for.inc, %if.end37
  %37 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %bound, align 8, !dbg !5850
  %tobool39 = icmp ne %struct.nb_iter_bound* %37, null, !dbg !5852
  br i1 %tobool39, label %for.body, label %for.end, !dbg !5852

for.body:                                         ; preds = %for.cond
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %at_stmt.addr, align 8, !dbg !5853
  %39 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %bound, align 8, !dbg !5856
  %40 = load %union.tree_node*, %union.tree_node** %valid_niter, align 8, !dbg !5857
  %call40 = call zeroext i8 @n_of_executions_at_most(%union.gimple_statement_d* %38, %struct.nb_iter_bound* %39, %union.tree_node* %40), !dbg !5858
  %tobool41 = icmp ne i8 %call40, 0, !dbg !5858
  br i1 %tobool41, label %if.then42, label %if.end43, !dbg !5859

if.then42:                                        ; preds = %for.body
  call void @fold_undefer_and_ignore_overflow_warnings(), !dbg !5860
  store i8 0, i8* %retval, align 1, !dbg !5862
  br label %return, !dbg !5862

if.end43:                                         ; preds = %for.body
  br label %for.inc, !dbg !5863

for.inc:                                          ; preds = %if.end43
  %41 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %bound, align 8, !dbg !5864
  %next = getelementptr inbounds %struct.nb_iter_bound, %struct.nb_iter_bound* %41, i32 0, i32 3, !dbg !5865
  %42 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %next, align 8, !dbg !5865
  store %struct.nb_iter_bound* %42, %struct.nb_iter_bound** %bound, align 8, !dbg !5866
  br label %for.cond, !dbg !5867, !llvm.loop !5868

for.end:                                          ; preds = %for.cond
  call void @fold_undefer_and_ignore_overflow_warnings(), !dbg !5870
  store i8 1, i8* %retval, align 1, !dbg !5871
  br label %return, !dbg !5871

return:                                           ; preds = %for.end, %if.then42, %if.then20, %if.then16, %if.then7, %if.then
  %43 = load i8, i8* %retval, align 1, !dbg !5872
  ret i8 %43, !dbg !5872
}

declare dso_local %union.tree_node* @unsigned_type_for(%union.tree_node*) #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local i32 @tree_int_cst_sign_bit(%union.tree_node*) #2

declare dso_local %union.tree_node* @lower_bound_in_type(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @upper_bound_in_type(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @n_of_executions_at_most(%union.gimple_statement_d* %stmt, %struct.nb_iter_bound* %niter_bound, %union.tree_node* %niter) #0 !dbg !5873 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %niter_bound.addr = alloca %struct.nb_iter_bound*, align 8
  %niter.addr = alloca %union.tree_node*, align 8
  %bound = alloca %struct.double_int, align 8
  %nit_type = alloca %union.tree_node*, align 8
  %e = alloca %union.tree_node*, align 8
  %cmp = alloca i32, align 4
  %tmp = alloca %struct.double_int, align 8
  %agg.tmp = alloca %struct.double_int, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5876, metadata !DIExpression()), !dbg !5877
  store %struct.nb_iter_bound* %niter_bound, %struct.nb_iter_bound** %niter_bound.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nb_iter_bound** %niter_bound.addr, metadata !5878, metadata !DIExpression()), !dbg !5879
  store %union.tree_node* %niter, %union.tree_node** %niter.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %niter.addr, metadata !5880, metadata !DIExpression()), !dbg !5881
  call void @llvm.dbg.declare(metadata %struct.double_int* %bound, metadata !5882, metadata !DIExpression()), !dbg !5883
  %0 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %niter_bound.addr, align 8, !dbg !5884
  %bound1 = getelementptr inbounds %struct.nb_iter_bound, %struct.nb_iter_bound* %0, i32 0, i32 1, !dbg !5885
  %1 = bitcast %struct.double_int* %bound to i8*, !dbg !5885
  %2 = bitcast %struct.double_int* %bound1 to i8*, !dbg !5885
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 16, i1 false), !dbg !5885
  call void @llvm.dbg.declare(metadata %union.tree_node** %nit_type, metadata !5886, metadata !DIExpression()), !dbg !5887
  %3 = load %union.tree_node*, %union.tree_node** %niter.addr, align 8, !dbg !5888
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !5888
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5888
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5888
  store %union.tree_node* %4, %union.tree_node** %nit_type, align 8, !dbg !5887
  call void @llvm.dbg.declare(metadata %union.tree_node** %e, metadata !5889, metadata !DIExpression()), !dbg !5890
  call void @llvm.dbg.declare(metadata i32* %cmp, metadata !5891, metadata !DIExpression()), !dbg !5892
  %5 = load %union.tree_node*, %union.tree_node** %nit_type, align 8, !dbg !5893
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !5893
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !5893
  %bf.load = load i64, i64* %6, align 8, !dbg !5893
  %bf.lshr = lshr i64 %bf.load, 21, !dbg !5893
  %bf.clear = and i64 %bf.lshr, 1, !dbg !5893
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5893
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !5893
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5893

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i32 3026, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !5893
  br label %cond.end, !dbg !5893

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5893

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5893
  %7 = load %union.tree_node*, %union.tree_node** %nit_type, align 8, !dbg !5894
  %8 = bitcast %struct.double_int* %bound to { i64, i64 }*, !dbg !5896
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0, !dbg !5896
  %10 = load i64, i64* %9, align 8, !dbg !5896
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1, !dbg !5896
  %12 = load i64, i64* %11, align 8, !dbg !5896
  %call = call zeroext i8 @double_int_fits_to_tree_p(%union.tree_node* %7, i64 %10, i64 %12), !dbg !5896
  %tobool2 = icmp ne i8 %call, 0, !dbg !5896
  br i1 %tobool2, label %if.end, label %if.then, !dbg !5897

if.then:                                          ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !5898
  br label %return, !dbg !5898

if.end:                                           ; preds = %cond.end
  %13 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %niter_bound.addr, align 8, !dbg !5899
  %is_exit = getelementptr inbounds %struct.nb_iter_bound, %struct.nb_iter_bound* %13, i32 0, i32 2, !dbg !5901
  %14 = load i8, i8* %is_exit, align 8, !dbg !5901
  %tobool3 = icmp ne i8 %14, 0, !dbg !5899
  br i1 %tobool3, label %if.then4, label %if.else14, !dbg !5902

if.then4:                                         ; preds = %if.end
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5903
  %tobool5 = icmp ne %union.gimple_statement_d* %15, null, !dbg !5903
  br i1 %tobool5, label %land.lhs.true, label %if.else, !dbg !5906

land.lhs.true:                                    ; preds = %if.then4
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5907
  %17 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %niter_bound.addr, align 8, !dbg !5908
  %stmt6 = getelementptr inbounds %struct.nb_iter_bound, %struct.nb_iter_bound* %17, i32 0, i32 0, !dbg !5909
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !5909
  %cmp7 = icmp ne %union.gimple_statement_d* %16, %18, !dbg !5910
  br i1 %cmp7, label %land.lhs.true8, label %if.else, !dbg !5911

land.lhs.true8:                                   ; preds = %land.lhs.true
  %19 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %niter_bound.addr, align 8, !dbg !5912
  %stmt9 = getelementptr inbounds %struct.nb_iter_bound, %struct.nb_iter_bound* %19, i32 0, i32 0, !dbg !5913
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt9, align 8, !dbg !5913
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5914
  %call10 = call zeroext i8 @stmt_dominates_stmt_p(%union.gimple_statement_d* %20, %union.gimple_statement_d* %21), !dbg !5915
  %conv = zext i8 %call10 to i32, !dbg !5915
  %tobool11 = icmp ne i32 %conv, 0, !dbg !5915
  br i1 %tobool11, label %if.then12, label %if.else, !dbg !5916

if.then12:                                        ; preds = %land.lhs.true8
  store i32 100, i32* %cmp, align 4, !dbg !5917
  br label %if.end13, !dbg !5918

if.else:                                          ; preds = %land.lhs.true8, %land.lhs.true, %if.then4
  store i32 99, i32* %cmp, align 4, !dbg !5919
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  br label %if.end37, !dbg !5920

if.else14:                                        ; preds = %if.end
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5921
  %tobool15 = icmp ne %union.gimple_statement_d* %22, null, !dbg !5921
  br i1 %tobool15, label %lor.lhs.false, label %if.then25, !dbg !5924

lor.lhs.false:                                    ; preds = %if.else14
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5925
  %call16 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %23), !dbg !5926
  %24 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %niter_bound.addr, align 8, !dbg !5927
  %stmt17 = getelementptr inbounds %struct.nb_iter_bound, %struct.nb_iter_bound* %24, i32 0, i32 0, !dbg !5928
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt17, align 8, !dbg !5928
  %call18 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %25), !dbg !5929
  %cmp19 = icmp ne %struct.basic_block_def* %call16, %call18, !dbg !5930
  br i1 %cmp19, label %land.lhs.true21, label %if.end36, !dbg !5931

land.lhs.true21:                                  ; preds = %lor.lhs.false
  %26 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %niter_bound.addr, align 8, !dbg !5932
  %stmt22 = getelementptr inbounds %struct.nb_iter_bound, %struct.nb_iter_bound* %26, i32 0, i32 0, !dbg !5933
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt22, align 8, !dbg !5933
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5934
  %call23 = call zeroext i8 @stmt_dominates_stmt_p(%union.gimple_statement_d* %27, %union.gimple_statement_d* %28), !dbg !5935
  %tobool24 = icmp ne i8 %call23, 0, !dbg !5935
  br i1 %tobool24, label %if.end36, label %if.then25, !dbg !5936

if.then25:                                        ; preds = %land.lhs.true21, %if.else14
  %call26 = call { i64, i64 } @shwi_to_double_int(i64 1), !dbg !5937
  %29 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !5937
  %30 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %29, i32 0, i32 0, !dbg !5937
  %31 = extractvalue { i64, i64 } %call26, 0, !dbg !5937
  store i64 %31, i64* %30, align 8, !dbg !5937
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %29, i32 0, i32 1, !dbg !5937
  %33 = extractvalue { i64, i64 } %call26, 1, !dbg !5937
  store i64 %33, i64* %32, align 8, !dbg !5937
  %34 = bitcast %struct.double_int* %bound to { i64, i64 }*, !dbg !5939
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %34, i32 0, i32 0, !dbg !5939
  %36 = load i64, i64* %35, align 8, !dbg !5939
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %34, i32 0, i32 1, !dbg !5939
  %38 = load i64, i64* %37, align 8, !dbg !5939
  %39 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !5939
  %40 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %39, i32 0, i32 0, !dbg !5939
  %41 = load i64, i64* %40, align 8, !dbg !5939
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %39, i32 0, i32 1, !dbg !5939
  %43 = load i64, i64* %42, align 8, !dbg !5939
  %call27 = call { i64, i64 } @double_int_add(i64 %36, i64 %38, i64 %41, i64 %43), !dbg !5939
  %44 = bitcast %struct.double_int* %tmp to { i64, i64 }*, !dbg !5939
  %45 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %44, i32 0, i32 0, !dbg !5939
  %46 = extractvalue { i64, i64 } %call27, 0, !dbg !5939
  store i64 %46, i64* %45, align 8, !dbg !5939
  %47 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %44, i32 0, i32 1, !dbg !5939
  %48 = extractvalue { i64, i64 } %call27, 1, !dbg !5939
  store i64 %48, i64* %47, align 8, !dbg !5939
  %49 = bitcast %struct.double_int* %bound to i8*, !dbg !5939
  %50 = bitcast %struct.double_int* %tmp to i8*, !dbg !5939
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %49, i8* align 8 %50, i64 16, i1 false), !dbg !5939
  %51 = bitcast %struct.double_int* %bound to { i64, i64 }*, !dbg !5940
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %51, i32 0, i32 0, !dbg !5940
  %53 = load i64, i64* %52, align 8, !dbg !5940
  %54 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %51, i32 0, i32 1, !dbg !5940
  %55 = load i64, i64* %54, align 8, !dbg !5940
  %call28 = call zeroext i8 @double_int_zero_p(i64 %53, i64 %55), !dbg !5940
  %conv29 = zext i8 %call28 to i32, !dbg !5940
  %tobool30 = icmp ne i32 %conv29, 0, !dbg !5940
  br i1 %tobool30, label %if.then34, label %lor.lhs.false31, !dbg !5942

lor.lhs.false31:                                  ; preds = %if.then25
  %56 = load %union.tree_node*, %union.tree_node** %nit_type, align 8, !dbg !5943
  %57 = bitcast %struct.double_int* %bound to { i64, i64 }*, !dbg !5944
  %58 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %57, i32 0, i32 0, !dbg !5944
  %59 = load i64, i64* %58, align 8, !dbg !5944
  %60 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %57, i32 0, i32 1, !dbg !5944
  %61 = load i64, i64* %60, align 8, !dbg !5944
  %call32 = call zeroext i8 @double_int_fits_to_tree_p(%union.tree_node* %56, i64 %59, i64 %61), !dbg !5944
  %tobool33 = icmp ne i8 %call32, 0, !dbg !5944
  br i1 %tobool33, label %if.end35, label %if.then34, !dbg !5945

if.then34:                                        ; preds = %lor.lhs.false31, %if.then25
  store i8 0, i8* %retval, align 1, !dbg !5946
  br label %return, !dbg !5946

if.end35:                                         ; preds = %lor.lhs.false31
  br label %if.end36, !dbg !5947

if.end36:                                         ; preds = %if.end35, %land.lhs.true21, %lor.lhs.false
  store i32 99, i32* %cmp, align 4, !dbg !5948
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.end13
  %62 = load i32, i32* %cmp, align 4, !dbg !5949
  %63 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5949
  %64 = load %union.tree_node*, %union.tree_node** %niter.addr, align 8, !dbg !5949
  %65 = load %union.tree_node*, %union.tree_node** %nit_type, align 8, !dbg !5949
  %66 = bitcast %struct.double_int* %bound to { i64, i64 }*, !dbg !5949
  %67 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %66, i32 0, i32 0, !dbg !5949
  %68 = load i64, i64* %67, align 8, !dbg !5949
  %69 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %66, i32 0, i32 1, !dbg !5949
  %70 = load i64, i64* %69, align 8, !dbg !5949
  %call38 = call %union.tree_node* @double_int_to_tree(%union.tree_node* %65, i64 %68, i64 %70), !dbg !5949
  %call39 = call %union.tree_node* @fold_binary_loc(i32 0, i32 %62, %union.tree_node* %63, %union.tree_node* %64, %union.tree_node* %call38), !dbg !5949
  store %union.tree_node* %call39, %union.tree_node** %e, align 8, !dbg !5950
  %71 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !5951
  %tobool40 = icmp ne %union.tree_node* %71, null, !dbg !5951
  br i1 %tobool40, label %land.rhs, label %land.end, !dbg !5952

land.rhs:                                         ; preds = %if.end37
  %72 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !5953
  %call41 = call i32 @integer_nonzerop(%union.tree_node* %72), !dbg !5954
  %tobool42 = icmp ne i32 %call41, 0, !dbg !5952
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end37
  %73 = phi i1 [ false, %if.end37 ], [ %tobool42, %land.rhs ], !dbg !5955
  %land.ext = zext i1 %73 to i32, !dbg !5952
  %conv43 = trunc i32 %land.ext to i8, !dbg !5951
  store i8 %conv43, i8* %retval, align 1, !dbg !5956
  br label %return, !dbg !5956

return:                                           ; preds = %land.end, %if.then34, %if.then
  %74 = load i8, i8* %retval, align 1, !dbg !5957
  ret i8 %74, !dbg !5957
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_numbers_of_iterations_estimates_loop(%struct.loop* %loop) #0 !dbg !5958 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %bound = alloca %struct.nb_iter_bound*, align 8
  %next = alloca %struct.nb_iter_bound*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5959, metadata !DIExpression()), !dbg !5960
  call void @llvm.dbg.declare(metadata %struct.nb_iter_bound** %bound, metadata !5961, metadata !DIExpression()), !dbg !5962
  call void @llvm.dbg.declare(metadata %struct.nb_iter_bound** %next, metadata !5963, metadata !DIExpression()), !dbg !5964
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5965
  %nb_iterations = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 11, !dbg !5966
  store %union.tree_node* null, %union.tree_node** %nb_iterations, align 8, !dbg !5967
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5968
  %estimate_state = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 16, !dbg !5969
  store i32 0, i32* %estimate_state, align 4, !dbg !5970
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5971
  %bounds = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 17, !dbg !5973
  %3 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %bounds, align 8, !dbg !5973
  store %struct.nb_iter_bound* %3, %struct.nb_iter_bound** %bound, align 8, !dbg !5974
  br label %for.cond, !dbg !5975

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %bound, align 8, !dbg !5976
  %tobool = icmp ne %struct.nb_iter_bound* %4, null, !dbg !5978
  br i1 %tobool, label %for.body, label %for.end, !dbg !5978

for.body:                                         ; preds = %for.cond
  %5 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %bound, align 8, !dbg !5979
  %next1 = getelementptr inbounds %struct.nb_iter_bound, %struct.nb_iter_bound* %5, i32 0, i32 3, !dbg !5981
  %6 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %next1, align 8, !dbg !5981
  store %struct.nb_iter_bound* %6, %struct.nb_iter_bound** %next, align 8, !dbg !5982
  %7 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %bound, align 8, !dbg !5983
  %8 = bitcast %struct.nb_iter_bound* %7 to i8*, !dbg !5983
  call void @ggc_free(i8* %8), !dbg !5984
  br label %for.inc, !dbg !5985

for.inc:                                          ; preds = %for.body
  %9 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %next, align 8, !dbg !5986
  store %struct.nb_iter_bound* %9, %struct.nb_iter_bound** %bound, align 8, !dbg !5987
  br label %for.cond, !dbg !5988, !llvm.loop !5989

for.end:                                          ; preds = %for.cond
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5991
  %bounds2 = getelementptr inbounds %struct.loop, %struct.loop* %10, i32 0, i32 17, !dbg !5992
  store %struct.nb_iter_bound* null, %struct.nb_iter_bound** %bounds2, align 8, !dbg !5993
  ret void, !dbg !5994
}

declare dso_local void @ggc_free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_numbers_of_iterations_estimates() #0 !dbg !5995 {
entry:
  %li = alloca %struct.loop_iterator, align 8
  %loop = alloca %struct.loop*, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !5996, metadata !DIExpression()), !dbg !5997
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !5998, metadata !DIExpression()), !dbg !5999
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !6000
  br label %for.cond, !dbg !6000

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6002
  %tobool = icmp ne %struct.loop* %0, null, !dbg !6000
  br i1 %tobool, label %for.body, label %for.end, !dbg !6000

for.body:                                         ; preds = %for.cond
  %1 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6004
  call void @free_numbers_of_iterations_estimates_loop(%struct.loop* %1), !dbg !6006
  br label %for.inc, !dbg !6007

for.inc:                                          ; preds = %for.body
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !6002
  br label %for.cond, !dbg !6002, !llvm.loop !6008

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6010
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @substitute_in_loop_info(%struct.loop* %loop, %union.tree_node* %name, %union.tree_node* %val) #0 !dbg !6011 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6014, metadata !DIExpression()), !dbg !6015
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !6016, metadata !DIExpression()), !dbg !6017
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !6018, metadata !DIExpression()), !dbg !6019
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6020
  %nb_iterations = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 11, !dbg !6021
  %1 = load %union.tree_node*, %union.tree_node** %nb_iterations, align 8, !dbg !6021
  %2 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6022
  %3 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6023
  %call = call %union.tree_node* @simplify_replace_tree(%union.tree_node* %1, %union.tree_node* %2, %union.tree_node* %3), !dbg !6024
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6025
  %nb_iterations1 = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 11, !dbg !6026
  store %union.tree_node* %call, %union.tree_node** %nb_iterations1, align 8, !dbg !6027
  ret void, !dbg !6028
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @simplify_replace_tree(%union.tree_node* %expr, %union.tree_node* %old, %union.tree_node* %new_tree) #0 !dbg !6029 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %old.addr = alloca %union.tree_node*, align 8
  %new_tree.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %ret = alloca %union.tree_node*, align 8
  %e = alloca %union.tree_node*, align 8
  %se = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !6032, metadata !DIExpression()), !dbg !6033
  store %union.tree_node* %old, %union.tree_node** %old.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %old.addr, metadata !6034, metadata !DIExpression()), !dbg !6035
  store %union.tree_node* %new_tree, %union.tree_node** %new_tree.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree.addr, metadata !6036, metadata !DIExpression()), !dbg !6037
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6038, metadata !DIExpression()), !dbg !6039
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6040, metadata !DIExpression()), !dbg !6041
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !6042, metadata !DIExpression()), !dbg !6043
  store %union.tree_node* null, %union.tree_node** %ret, align 8, !dbg !6043
  call void @llvm.dbg.declare(metadata %union.tree_node** %e, metadata !6044, metadata !DIExpression()), !dbg !6045
  call void @llvm.dbg.declare(metadata %union.tree_node** %se, metadata !6046, metadata !DIExpression()), !dbg !6047
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6048
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !6048
  br i1 %tobool, label %if.end, label %if.then, !dbg !6050

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6051
  br label %return, !dbg !6051

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6052
  %2 = load %union.tree_node*, %union.tree_node** %old.addr, align 8, !dbg !6054
  %cmp = icmp eq %union.tree_node* %1, %2, !dbg !6055
  br i1 %cmp, label %if.then2, label %lor.lhs.false, !dbg !6056

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6057
  %4 = load %union.tree_node*, %union.tree_node** %old.addr, align 8, !dbg !6058
  %call = call i32 @operand_equal_p(%union.tree_node* %3, %union.tree_node* %4, i32 0), !dbg !6059
  %tobool1 = icmp ne i32 %call, 0, !dbg !6059
  br i1 %tobool1, label %if.then2, label %if.end4, !dbg !6060

if.then2:                                         ; preds = %lor.lhs.false, %if.end
  %5 = load %union.tree_node*, %union.tree_node** %new_tree.addr, align 8, !dbg !6061
  %call3 = call %union.tree_node* @unshare_expr(%union.tree_node* %5), !dbg !6062
  store %union.tree_node* %call3, %union.tree_node** %retval, align 8, !dbg !6063
  br label %return, !dbg !6063

if.end4:                                          ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6064
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !6064
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !6064
  %bf.load = load i64, i64* %7, align 8, !dbg !6064
  %bf.clear = and i64 %bf.load, 65535, !dbg !6064
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6064
  %idxprom = sext i32 %bf.cast to i64, !dbg !6064
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6064
  %8 = load i32, i32* %arrayidx, align 4, !dbg !6064
  %cmp5 = icmp uge i32 %8, 4, !dbg !6064
  br i1 %cmp5, label %land.lhs.true, label %if.then13, !dbg !6064

land.lhs.true:                                    ; preds = %if.end4
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6064
  %base6 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !6064
  %10 = bitcast %struct.tree_base* %base6 to i64*, !dbg !6064
  %bf.load7 = load i64, i64* %10, align 8, !dbg !6064
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !6064
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !6064
  %idxprom10 = sext i32 %bf.cast9 to i64, !dbg !6064
  %arrayidx11 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom10, !dbg !6064
  %11 = load i32, i32* %arrayidx11, align 4, !dbg !6064
  %cmp12 = icmp ule i32 %11, 10, !dbg !6064
  br i1 %cmp12, label %if.end14, label %if.then13, !dbg !6066

if.then13:                                        ; preds = %land.lhs.true, %if.end4
  %12 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6067
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !6068
  br label %return, !dbg !6068

if.end14:                                         ; preds = %land.lhs.true
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6069
  %call15 = call i32 @tree_operand_length(%union.tree_node* %13), !dbg !6069
  store i32 %call15, i32* %n, align 4, !dbg !6070
  store i32 0, i32* %i, align 4, !dbg !6071
  br label %for.cond, !dbg !6073

for.cond:                                         ; preds = %for.inc, %if.end14
  %14 = load i32, i32* %i, align 4, !dbg !6074
  %15 = load i32, i32* %n, align 4, !dbg !6076
  %cmp16 = icmp ult i32 %14, %15, !dbg !6077
  br i1 %cmp16, label %for.body, label %for.end, !dbg !6078

for.body:                                         ; preds = %for.cond
  %16 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6079
  %exp = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !6079
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6079
  %17 = load i32, i32* %i, align 4, !dbg !6079
  %idxprom17 = zext i32 %17 to i64, !dbg !6079
  %arrayidx18 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 %idxprom17, !dbg !6079
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx18, align 8, !dbg !6079
  store %union.tree_node* %18, %union.tree_node** %e, align 8, !dbg !6081
  %19 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !6082
  %20 = load %union.tree_node*, %union.tree_node** %old.addr, align 8, !dbg !6083
  %21 = load %union.tree_node*, %union.tree_node** %new_tree.addr, align 8, !dbg !6084
  %call19 = call %union.tree_node* @simplify_replace_tree(%union.tree_node* %19, %union.tree_node* %20, %union.tree_node* %21), !dbg !6085
  store %union.tree_node* %call19, %union.tree_node** %se, align 8, !dbg !6086
  %22 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !6087
  %23 = load %union.tree_node*, %union.tree_node** %se, align 8, !dbg !6089
  %cmp20 = icmp eq %union.tree_node* %22, %23, !dbg !6090
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !6091

if.then21:                                        ; preds = %for.body
  br label %for.inc, !dbg !6092

if.end22:                                         ; preds = %for.body
  %24 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6093
  %tobool23 = icmp ne %union.tree_node* %24, null, !dbg !6093
  br i1 %tobool23, label %if.end26, label %if.then24, !dbg !6095

if.then24:                                        ; preds = %if.end22
  %25 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6096
  %call25 = call %union.tree_node* @copy_node_stat(%union.tree_node* %25), !dbg !6096
  store %union.tree_node* %call25, %union.tree_node** %ret, align 8, !dbg !6097
  br label %if.end26, !dbg !6098

if.end26:                                         ; preds = %if.then24, %if.end22
  %26 = load %union.tree_node*, %union.tree_node** %se, align 8, !dbg !6099
  %27 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6100
  %exp27 = bitcast %union.tree_node* %27 to %struct.tree_exp*, !dbg !6100
  %operands28 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp27, i32 0, i32 3, !dbg !6100
  %28 = load i32, i32* %i, align 4, !dbg !6100
  %idxprom29 = zext i32 %28 to i64, !dbg !6100
  %arrayidx30 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands28, i64 0, i64 %idxprom29, !dbg !6100
  store %union.tree_node* %26, %union.tree_node** %arrayidx30, align 8, !dbg !6101
  br label %for.inc, !dbg !6102

for.inc:                                          ; preds = %if.end26, %if.then21
  %29 = load i32, i32* %i, align 4, !dbg !6103
  %inc = add i32 %29, 1, !dbg !6103
  store i32 %inc, i32* %i, align 4, !dbg !6103
  br label %for.cond, !dbg !6104, !llvm.loop !6105

for.end:                                          ; preds = %for.cond
  %30 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6107
  %tobool31 = icmp ne %union.tree_node* %30, null, !dbg !6107
  br i1 %tobool31, label %cond.true, label %cond.false, !dbg !6107

cond.true:                                        ; preds = %for.end
  %31 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !6108
  %call32 = call %union.tree_node* @fold(%union.tree_node* %31), !dbg !6109
  br label %cond.end, !dbg !6107

cond.false:                                       ; preds = %for.end
  %32 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6110
  br label %cond.end, !dbg !6107

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call32, %cond.true ], [ %32, %cond.false ], !dbg !6107
  store %union.tree_node* %cond, %union.tree_node** %retval, align 8, !dbg !6111
  br label %return, !dbg !6111

return:                                           ; preds = %cond.end, %if.then13, %if.then2, %if.then
  %33 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6112
  ret %union.tree_node* %33, !dbg !6112
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !6113 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6117, metadata !DIExpression()), !dbg !6118
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !6119, metadata !DIExpression()), !dbg !6120
  %0 = load i32, i32* %index.addr, align 4, !dbg !6121
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6121
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !6121
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !6121
  %2 = load i32, i32* %capacity, align 8, !dbg !6121
  %cmp = icmp ule i32 %0, %2, !dbg !6121
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6121

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !6121
  br label %cond.end, !dbg !6121

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6121

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6121
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6122
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !6123
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !6124
  %4 = load i32, i32* %index.addr, align 4, !dbg !6125
  %idxprom = zext i32 %4 to i64, !dbg !6122
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !6122
  ret %struct.phi_arg_d* %arrayidx, !dbg !6126
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %bb) #0 !dbg !6127 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6130, metadata !DIExpression()), !dbg !6131
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6132
  %call = call zeroext i8 @single_pred_p(%struct.basic_block_def* %0), !dbg !6132
  %tobool = icmp ne i8 %call, 0, !dbg !6132
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6132

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0), i32 655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !6132
  br label %cond.end, !dbg !6132

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6132

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6132
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6133
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 0, !dbg !6133
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6133
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !6133
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !6133

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6133
  %preds3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 0, !dbg !6133
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds3, align 8, !dbg !6133
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !6133
  br label %cond.end5, !dbg !6133

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6133

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !6133
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !6133
  ret %struct.edge_def* %call7, !dbg !6134
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) #0 !dbg !6135 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6138, metadata !DIExpression()), !dbg !6139
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6140
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !6140
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6140
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !6140
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6140

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6140
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !6140
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !6140
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !6140
  br label %cond.end, !dbg !6140

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6140

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6140
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6140
  %cmp = icmp eq i32 %call, 1, !dbg !6141
  %conv = zext i1 %cmp to i32, !dbg !6141
  %conv2 = trunc i32 %conv to i8, !dbg !6140
  ret i8 %conv2, !dbg !6142
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !6143 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6146, metadata !DIExpression()), !dbg !6147
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6148, metadata !DIExpression()), !dbg !6147
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6147
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !6147
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6147

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6147
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6147
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !6147
  %3 = load i32, i32* %num, align 8, !dbg !6147
  %cmp = icmp ult i32 %1, %3, !dbg !6147
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6149
  %land.ext = zext i1 %4 to i32, !dbg !6147
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6147
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !6147
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6147
  %idxprom = zext i32 %6 to i64, !dbg !6147
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !6147
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !6147
  ret %struct.edge_def* %7, !dbg !6147
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !6150 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6153, metadata !DIExpression()), !dbg !6154
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6155, metadata !DIExpression()), !dbg !6156
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6157
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6159
  %tobool = icmp ne i8 %call, 0, !dbg !6159
  br i1 %tobool, label %if.then, label %if.else, !dbg !6160

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6161
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !6163
  %2 = load i32, i32* %i.addr, align 4, !dbg !6164
  %idxprom = zext i32 %2 to i64, !dbg !6163
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !6163
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6163
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !6165
  br label %return, !dbg !6165

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6166
  br label %return, !dbg !6166

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6167
  ret %union.tree_node* %4, !dbg !6167
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !6168 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6171, metadata !DIExpression()), !dbg !6172
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6173
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6174
  %cmp = icmp uge i32 %call, 1, !dbg !6175
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6176

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6177
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6178
  %cmp2 = icmp ule i32 %call1, 9, !dbg !6179
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !6180
  %land.ext = zext i1 %2 to i32, !dbg !6176
  %conv = trunc i32 %land.ext to i8, !dbg !6174
  ret i8 %conv, !dbg !6181
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !6182 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6185, metadata !DIExpression()), !dbg !6186
  call void @llvm.dbg.declare(metadata i64* %off, metadata !6187, metadata !DIExpression()), !dbg !6188
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6189
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !6190
  %idxprom = zext i32 %call to i64, !dbg !6191
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !6191
  %1 = load i64, i64* %arrayidx, align 8, !dbg !6191
  store i64 %1, i64* %off, align 8, !dbg !6192
  %2 = load i64, i64* %off, align 8, !dbg !6193
  %cmp = icmp ne i64 %2, 0, !dbg !6193
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6193

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !6193
  br label %cond.end, !dbg !6193

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6193

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6193
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6194
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !6195
  %5 = load i64, i64* %off, align 8, !dbg !6196
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !6197
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !6198
  ret %union.tree_node** %6, !dbg !6199
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !6200 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6203, metadata !DIExpression()), !dbg !6204
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6205
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6206
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !6207
  ret i32 %call1, !dbg !6208
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !6209 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6212, metadata !DIExpression()), !dbg !6213
  %0 = load i32, i32* %code.addr, align 4, !dbg !6214
  %idxprom = zext i32 %0 to i64, !dbg !6215
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !6215
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6215
  ret i32 %1, !dbg !6216
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !6217 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6218, metadata !DIExpression()), !dbg !6219
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6220, metadata !DIExpression()), !dbg !6221
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6222
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6223
  store i32 %call, i32* %code, align 4, !dbg !6221
  %1 = load i32, i32* %code, align 4, !dbg !6224
  %cmp = icmp eq i32 %1, 6, !dbg !6226
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6227

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !6228
  %cmp1 = icmp eq i32 %2, 1, !dbg !6229
  br i1 %cmp1, label %if.then, label %if.else, !dbg !6230

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6231
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !6232
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6233
  %bf.load = load i32, i32* %4, align 8, !dbg !6233
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6233
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !6234
  br label %return, !dbg !6234

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !6235
  %cmp2 = icmp eq i32 %5, 8, !dbg !6237
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !6238

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !6239
  br label %return, !dbg !6239

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !6240
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !6241
  br label %return, !dbg !6241

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !6242
  ret i32 %6, !dbg !6242
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !6243 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6244, metadata !DIExpression()), !dbg !6245
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6246
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6247
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !6248
  %1 = load i32, i32* %num_ops, align 4, !dbg !6248
  ret i32 %1, !dbg !6249
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !6250 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6253, metadata !DIExpression()), !dbg !6254
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6255
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !6256
  %1 = load i32, i32* %flags, align 8, !dbg !6256
  %and = and i32 %1, 512, !dbg !6257
  %tobool = icmp ne i32 %and, 0, !dbg !6257
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !6258

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6259
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !6260
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !6261
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !6261
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !6259
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !6262

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6263
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !6264
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !6265
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !6265
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !6266
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6266
  br label %cond.end, !dbg !6262

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !6262

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !6262
  ret %struct.gimple_seq_d* %cond, !dbg !6267
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !6268 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !6274, metadata !DIExpression()), !dbg !6275
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6276
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !6276
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6276

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6277
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !6278
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !6278
  br label %cond.end, !dbg !6276

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6276

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !6276
  ret %struct.gimple_seq_node_d* %cond, !dbg !6279
}

; Function Attrs: noinline nounwind uwtable
define internal { i64, i64 } @shwi_to_double_int(i64 %cst) #0 !dbg !6280 {
entry:
  %retval = alloca %struct.double_int, align 8
  %cst.addr = alloca i64, align 8
  store i64 %cst, i64* %cst.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %cst.addr, metadata !6283, metadata !DIExpression()), !dbg !6284
  call void @llvm.dbg.declare(metadata %struct.double_int* %retval, metadata !6285, metadata !DIExpression()), !dbg !6286
  %0 = load i64, i64* %cst.addr, align 8, !dbg !6287
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i32 0, i32 0, !dbg !6288
  store i64 %0, i64* %low, align 8, !dbg !6289
  %1 = load i64, i64* %cst.addr, align 8, !dbg !6290
  %cmp = icmp slt i64 %1, 0, !dbg !6291
  %2 = zext i1 %cmp to i64, !dbg !6290
  %cond = select i1 %cmp, i32 -1, i32 0, !dbg !6290
  %conv = sext i32 %cond to i64, !dbg !6290
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i32 0, i32 1, !dbg !6292
  store i64 %conv, i64* %high, align 8, !dbg !6293
  %3 = bitcast %struct.double_int* %retval to { i64, i64 }*, !dbg !6294
  %4 = load { i64, i64 }, { i64, i64 }* %3, align 8, !dbg !6294
  ret { i64, i64 } %4, !dbg !6294
}

declare dso_local i32 @swap_tree_comparison(i32) #2

declare dso_local %union.tree_node* @fold_binary_to_constant(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @bound_difference(%struct.loop* %loop, %union.tree_node* %x, %union.tree_node* %y, %struct.bounds* %bnds) #0 !dbg !6295 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %x.addr = alloca %union.tree_node*, align 8
  %y.addr = alloca %union.tree_node*, align 8
  %bnds.addr = alloca %struct.bounds*, align 8
  %type = alloca %union.tree_node*, align 8
  %varx = alloca %union.tree_node*, align 8
  %vary = alloca %union.tree_node*, align 8
  %offx = alloca [1 x %struct.__mpz_struct], align 16
  %offy = alloca [1 x %struct.__mpz_struct], align 16
  %minx = alloca [1 x %struct.__mpz_struct], align 16
  %maxx = alloca [1 x %struct.__mpz_struct], align 16
  %miny = alloca [1 x %struct.__mpz_struct], align 16
  %maxy = alloca [1 x %struct.__mpz_struct], align 16
  %cnt = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %c0 = alloca %union.tree_node*, align 8
  %c1 = alloca %union.tree_node*, align 8
  %cond = alloca %union.gimple_statement_d*, align 8
  %cmp = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6299, metadata !DIExpression()), !dbg !6300
  store %union.tree_node* %x, %union.tree_node** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %x.addr, metadata !6301, metadata !DIExpression()), !dbg !6302
  store %union.tree_node* %y, %union.tree_node** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %y.addr, metadata !6303, metadata !DIExpression()), !dbg !6304
  store %struct.bounds* %bnds, %struct.bounds** %bnds.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bounds** %bnds.addr, metadata !6305, metadata !DIExpression()), !dbg !6306
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6307, metadata !DIExpression()), !dbg !6308
  %0 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !6309
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !6309
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6309
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6309
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !6308
  call void @llvm.dbg.declare(metadata %union.tree_node** %varx, metadata !6310, metadata !DIExpression()), !dbg !6311
  call void @llvm.dbg.declare(metadata %union.tree_node** %vary, metadata !6312, metadata !DIExpression()), !dbg !6313
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %offx, metadata !6314, metadata !DIExpression()), !dbg !6315
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %offy, metadata !6316, metadata !DIExpression()), !dbg !6317
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %minx, metadata !6318, metadata !DIExpression()), !dbg !6319
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %maxx, metadata !6320, metadata !DIExpression()), !dbg !6321
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %miny, metadata !6322, metadata !DIExpression()), !dbg !6323
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %maxy, metadata !6324, metadata !DIExpression()), !dbg !6325
  call void @llvm.dbg.declare(metadata i32* %cnt, metadata !6326, metadata !DIExpression()), !dbg !6327
  store i32 0, i32* %cnt, align 4, !dbg !6327
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6328, metadata !DIExpression()), !dbg !6329
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6330, metadata !DIExpression()), !dbg !6331
  call void @llvm.dbg.declare(metadata %union.tree_node** %c0, metadata !6332, metadata !DIExpression()), !dbg !6333
  call void @llvm.dbg.declare(metadata %union.tree_node** %c1, metadata !6334, metadata !DIExpression()), !dbg !6335
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond, metadata !6336, metadata !DIExpression()), !dbg !6337
  call void @llvm.dbg.declare(metadata i32* %cmp, metadata !6338, metadata !DIExpression()), !dbg !6339
  %2 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !6340
  %call = call %union.tree_node* @tree_strip_sign_nop_conversions(%union.tree_node* %2), !dbg !6340
  store %union.tree_node* %call, %union.tree_node** %x.addr, align 8, !dbg !6340
  %3 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !6341
  %call2 = call %union.tree_node* @tree_strip_sign_nop_conversions(%union.tree_node* %3), !dbg !6341
  store %union.tree_node* %call2, %union.tree_node** %y.addr, align 8, !dbg !6341
  %4 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !6342
  %below = getelementptr inbounds %struct.bounds, %struct.bounds* %4, i32 0, i32 0, !dbg !6343
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below, i64 0, i64 0, !dbg !6342
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !6344
  %5 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !6345
  %up = getelementptr inbounds %struct.bounds, %struct.bounds* %5, i32 0, i32 1, !dbg !6346
  %arraydecay3 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up, i64 0, i64 0, !dbg !6345
  call void @mpz_init(%struct.__mpz_struct* %arraydecay3), !dbg !6347
  %arraydecay4 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offx, i64 0, i64 0, !dbg !6348
  call void @mpz_init(%struct.__mpz_struct* %arraydecay4), !dbg !6349
  %arraydecay5 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offy, i64 0, i64 0, !dbg !6350
  call void @mpz_init(%struct.__mpz_struct* %arraydecay5), !dbg !6351
  %6 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !6352
  %arraydecay6 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offx, i64 0, i64 0, !dbg !6353
  call void @split_to_var_and_offset(%union.tree_node* %6, %union.tree_node** %varx, %struct.__mpz_struct* %arraydecay6), !dbg !6354
  %7 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !6355
  %arraydecay7 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offy, i64 0, i64 0, !dbg !6356
  call void @split_to_var_and_offset(%union.tree_node* %7, %union.tree_node** %vary, %struct.__mpz_struct* %arraydecay7), !dbg !6357
  %8 = load %union.tree_node*, %union.tree_node** %varx, align 8, !dbg !6358
  %call8 = call i32 @integer_zerop(%union.tree_node* %8), !dbg !6360
  %tobool = icmp ne i32 %call8, 0, !dbg !6360
  br i1 %tobool, label %if.else, label %land.lhs.true, !dbg !6361

land.lhs.true:                                    ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** %varx, align 8, !dbg !6362
  %10 = load %union.tree_node*, %union.tree_node** %vary, align 8, !dbg !6363
  %call9 = call i32 @operand_equal_p(%union.tree_node* %9, %union.tree_node* %10, i32 0), !dbg !6364
  %tobool10 = icmp ne i32 %call9, 0, !dbg !6364
  br i1 %tobool10, label %if.then, label %if.else, !dbg !6365

if.then:                                          ; preds = %land.lhs.true
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6366
  %arraydecay11 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offx, i64 0, i64 0, !dbg !6368
  %arraydecay12 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offy, i64 0, i64 0, !dbg !6369
  %12 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !6370
  call void @bound_difference_of_offsetted_base(%union.tree_node* %11, %struct.__mpz_struct* %arraydecay11, %struct.__mpz_struct* %arraydecay12, %struct.bounds* %12), !dbg !6371
  br label %if.end, !dbg !6372

if.else:                                          ; preds = %land.lhs.true, %entry
  %arraydecay13 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %minx, i64 0, i64 0, !dbg !6373
  call void @mpz_init(%struct.__mpz_struct* %arraydecay13), !dbg !6375
  %arraydecay14 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %maxx, i64 0, i64 0, !dbg !6376
  call void @mpz_init(%struct.__mpz_struct* %arraydecay14), !dbg !6377
  %arraydecay15 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %miny, i64 0, i64 0, !dbg !6378
  call void @mpz_init(%struct.__mpz_struct* %arraydecay15), !dbg !6379
  %arraydecay16 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %maxy, i64 0, i64 0, !dbg !6380
  call void @mpz_init(%struct.__mpz_struct* %arraydecay16), !dbg !6381
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6382
  %14 = load %union.tree_node*, %union.tree_node** %varx, align 8, !dbg !6383
  %arraydecay17 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offx, i64 0, i64 0, !dbg !6384
  %arraydecay18 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %minx, i64 0, i64 0, !dbg !6385
  %arraydecay19 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %maxx, i64 0, i64 0, !dbg !6386
  call void @determine_value_range(%union.tree_node* %13, %union.tree_node* %14, %struct.__mpz_struct* %arraydecay17, %struct.__mpz_struct* %arraydecay18, %struct.__mpz_struct* %arraydecay19), !dbg !6387
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6388
  %16 = load %union.tree_node*, %union.tree_node** %vary, align 8, !dbg !6389
  %arraydecay20 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offy, i64 0, i64 0, !dbg !6390
  %arraydecay21 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %miny, i64 0, i64 0, !dbg !6391
  %arraydecay22 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %maxy, i64 0, i64 0, !dbg !6392
  call void @determine_value_range(%union.tree_node* %15, %union.tree_node* %16, %struct.__mpz_struct* %arraydecay20, %struct.__mpz_struct* %arraydecay21, %struct.__mpz_struct* %arraydecay22), !dbg !6393
  %17 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !6394
  %below23 = getelementptr inbounds %struct.bounds, %struct.bounds* %17, i32 0, i32 0, !dbg !6395
  %arraydecay24 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below23, i64 0, i64 0, !dbg !6394
  %arraydecay25 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %minx, i64 0, i64 0, !dbg !6396
  %arraydecay26 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %maxy, i64 0, i64 0, !dbg !6397
  call void @mpz_sub(%struct.__mpz_struct* %arraydecay24, %struct.__mpz_struct* %arraydecay25, %struct.__mpz_struct* %arraydecay26), !dbg !6398
  %18 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !6399
  %up27 = getelementptr inbounds %struct.bounds, %struct.bounds* %18, i32 0, i32 1, !dbg !6400
  %arraydecay28 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up27, i64 0, i64 0, !dbg !6399
  %arraydecay29 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %maxx, i64 0, i64 0, !dbg !6401
  %arraydecay30 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %miny, i64 0, i64 0, !dbg !6402
  call void @mpz_sub(%struct.__mpz_struct* %arraydecay28, %struct.__mpz_struct* %arraydecay29, %struct.__mpz_struct* %arraydecay30), !dbg !6403
  %arraydecay31 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %minx, i64 0, i64 0, !dbg !6404
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay31), !dbg !6405
  %arraydecay32 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %maxx, i64 0, i64 0, !dbg !6406
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay32), !dbg !6407
  %arraydecay33 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %miny, i64 0, i64 0, !dbg !6408
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay33), !dbg !6409
  %arraydecay34 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %maxy, i64 0, i64 0, !dbg !6410
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay34), !dbg !6411
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %19 = load %union.tree_node*, %union.tree_node** %varx, align 8, !dbg !6412
  %call35 = call i32 @integer_zerop(%union.tree_node* %19), !dbg !6414
  %tobool36 = icmp ne i32 %call35, 0, !dbg !6414
  br i1 %tobool36, label %land.lhs.true37, label %if.end41, !dbg !6415

land.lhs.true37:                                  ; preds = %if.end
  %20 = load %union.tree_node*, %union.tree_node** %vary, align 8, !dbg !6416
  %call38 = call i32 @integer_zerop(%union.tree_node* %20), !dbg !6417
  %tobool39 = icmp ne i32 %call38, 0, !dbg !6417
  br i1 %tobool39, label %if.then40, label %if.end41, !dbg !6418

if.then40:                                        ; preds = %land.lhs.true37
  br label %end, !dbg !6419

if.end41:                                         ; preds = %land.lhs.true37, %if.end
  %21 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6420
  %header = getelementptr inbounds %struct.loop, %struct.loop* %21, i32 0, i32 2, !dbg !6422
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !6422
  store %struct.basic_block_def* %22, %struct.basic_block_def** %bb, align 8, !dbg !6423
  br label %for.cond, !dbg !6424

for.cond:                                         ; preds = %for.inc, %if.end41
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6425
  %24 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6427
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %24, i64 0, !dbg !6427
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6427
  %25 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6427
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %25, i32 0, i32 0, !dbg !6427
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !6427
  %cmp42 = icmp ne %struct.basic_block_def* %23, %26, !dbg !6428
  br i1 %cmp42, label %land.rhs, label %land.end, !dbg !6429

land.rhs:                                         ; preds = %for.cond
  %27 = load i32, i32* %cnt, align 4, !dbg !6430
  %cmp43 = icmp slt i32 %27, 8, !dbg !6431
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %28 = phi i1 [ false, %for.cond ], [ %cmp43, %land.rhs ], !dbg !6432
  br i1 %28, label %for.body, label %for.end, !dbg !6433

for.body:                                         ; preds = %land.end
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6434
  %call44 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %29), !dbg !6437
  %tobool45 = icmp ne i8 %call44, 0, !dbg !6437
  br i1 %tobool45, label %if.end47, label %if.then46, !dbg !6438

if.then46:                                        ; preds = %for.body
  br label %for.inc, !dbg !6439

if.end47:                                         ; preds = %for.body
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6440
  %call48 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %30), !dbg !6441
  store %struct.edge_def* %call48, %struct.edge_def** %e, align 8, !dbg !6442
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6443
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %31, i32 0, i32 7, !dbg !6445
  %32 = load i32, i32* %flags, align 8, !dbg !6445
  %and = and i32 %32, 3072, !dbg !6446
  %tobool49 = icmp ne i32 %and, 0, !dbg !6446
  br i1 %tobool49, label %if.end51, label %if.then50, !dbg !6447

if.then50:                                        ; preds = %if.end47
  br label %for.inc, !dbg !6448

if.end51:                                         ; preds = %if.end47
  %33 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6449
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %33, i32 0, i32 0, !dbg !6450
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6450
  %call52 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %34), !dbg !6451
  store %union.gimple_statement_d* %call52, %union.gimple_statement_d** %cond, align 8, !dbg !6452
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond, align 8, !dbg !6453
  %call53 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %35), !dbg !6454
  store %union.tree_node* %call53, %union.tree_node** %c0, align 8, !dbg !6455
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond, align 8, !dbg !6456
  %call54 = call i32 @gimple_cond_code(%union.gimple_statement_d* %36), !dbg !6457
  store i32 %call54, i32* %cmp, align 4, !dbg !6458
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond, align 8, !dbg !6459
  %call55 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %37), !dbg !6460
  store %union.tree_node* %call55, %union.tree_node** %c1, align 8, !dbg !6461
  %38 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6462
  %flags56 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %38, i32 0, i32 7, !dbg !6464
  %39 = load i32, i32* %flags56, align 8, !dbg !6464
  %and57 = and i32 %39, 2048, !dbg !6465
  %tobool58 = icmp ne i32 %and57, 0, !dbg !6465
  br i1 %tobool58, label %if.then59, label %if.end61, !dbg !6466

if.then59:                                        ; preds = %if.end51
  %40 = load i32, i32* %cmp, align 4, !dbg !6467
  %call60 = call i32 @invert_tree_comparison(i32 %40, i8 zeroext 0), !dbg !6468
  store i32 %call60, i32* %cmp, align 4, !dbg !6469
  br label %if.end61, !dbg !6470

if.end61:                                         ; preds = %if.then59, %if.end51
  %41 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6471
  %42 = load %union.tree_node*, %union.tree_node** %varx, align 8, !dbg !6472
  %arraydecay62 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offx, i64 0, i64 0, !dbg !6473
  %43 = load %union.tree_node*, %union.tree_node** %vary, align 8, !dbg !6474
  %arraydecay63 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offy, i64 0, i64 0, !dbg !6475
  %44 = load %union.tree_node*, %union.tree_node** %c0, align 8, !dbg !6476
  %45 = load i32, i32* %cmp, align 4, !dbg !6477
  %46 = load %union.tree_node*, %union.tree_node** %c1, align 8, !dbg !6478
  %47 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !6479
  call void @refine_bounds_using_guard(%union.tree_node* %41, %union.tree_node* %42, %struct.__mpz_struct* %arraydecay62, %union.tree_node* %43, %struct.__mpz_struct* %arraydecay63, %union.tree_node* %44, i32 %45, %union.tree_node* %46, %struct.bounds* %47), !dbg !6480
  %48 = load i32, i32* %cnt, align 4, !dbg !6481
  %inc = add nsw i32 %48, 1, !dbg !6481
  store i32 %inc, i32* %cnt, align 4, !dbg !6481
  br label %for.inc, !dbg !6482

for.inc:                                          ; preds = %if.end61, %if.then50, %if.then46
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6483
  %call64 = call %struct.basic_block_def* @get_immediate_dominator(i32 1, %struct.basic_block_def* %49), !dbg !6484
  store %struct.basic_block_def* %call64, %struct.basic_block_def** %bb, align 8, !dbg !6485
  br label %for.cond, !dbg !6486, !llvm.loop !6487

for.end:                                          ; preds = %land.end
  br label %end, !dbg !6488

end:                                              ; preds = %for.end, %if.then40
  call void @llvm.dbg.label(metadata !6489), !dbg !6490
  %arraydecay65 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offx, i64 0, i64 0, !dbg !6491
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay65), !dbg !6492
  %arraydecay66 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offy, i64 0, i64 0, !dbg !6493
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay66), !dbg !6494
  ret void, !dbg !6495
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_affine_iv(%struct._IO_FILE* %file, %struct.affine_iv* %iv) #0 !dbg !6496 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %iv.addr = alloca %struct.affine_iv*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !6550, metadata !DIExpression()), !dbg !6551
  store %struct.affine_iv* %iv, %struct.affine_iv** %iv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.affine_iv** %iv.addr, metadata !6552, metadata !DIExpression()), !dbg !6553
  %0 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !6554
  %step = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %0, i32 0, i32 1, !dbg !6556
  %1 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !6556
  %call = call i32 @integer_zerop(%union.tree_node* %1), !dbg !6557
  %tobool = icmp ne i32 %call, 0, !dbg !6557
  br i1 %tobool, label %if.end, label %if.then, !dbg !6558

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6559
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)), !dbg !6560
  br label %if.end, !dbg !6560

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6561
  %4 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !6562
  %base = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %4, i32 0, i32 0, !dbg !6563
  %5 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6563
  call void @print_generic_expr(%struct._IO_FILE* %3, %union.tree_node* %5, i32 2), !dbg !6564
  %6 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !6565
  %step2 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %6, i32 0, i32 1, !dbg !6567
  %7 = load %union.tree_node*, %union.tree_node** %step2, align 8, !dbg !6567
  %call3 = call i32 @integer_zerop(%union.tree_node* %7), !dbg !6568
  %tobool4 = icmp ne i32 %call3, 0, !dbg !6568
  br i1 %tobool4, label %if.end10, label %if.then5, !dbg !6569

if.then5:                                         ; preds = %if.end
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6570
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.29, i64 0, i64 0)), !dbg !6572
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6573
  %10 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !6574
  %step7 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %10, i32 0, i32 1, !dbg !6575
  %11 = load %union.tree_node*, %union.tree_node** %step7, align 8, !dbg !6575
  call void @print_generic_expr(%struct._IO_FILE* %9, %union.tree_node* %11, i32 2), !dbg !6576
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6577
  %13 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !6578
  %no_overflow = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %13, i32 0, i32 2, !dbg !6579
  %14 = load i8, i8* %no_overflow, align 8, !dbg !6579
  %conv = zext i8 %14 to i32, !dbg !6578
  %tobool8 = icmp ne i32 %conv, 0, !dbg !6578
  %15 = zext i1 %tobool8 to i64, !dbg !6578
  %cond = select i1 %tobool8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i64 0, i64 0), !dbg !6578
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.30, i64 0, i64 0), i8* %cond), !dbg !6580
  br label %if.end10, !dbg !6581

if.end10:                                         ; preds = %if.then5, %if.end
  ret void, !dbg !6582
}

declare dso_local i64 @mpz_out_str(%struct._IO_FILE*, i32, %struct.__mpz_struct*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @number_of_iterations_ne(%union.tree_node* %type, %struct.affine_iv* %iv, %union.tree_node* %final, %struct.tree_niter_desc* %niter, i8 zeroext %exit_must_be_taken, %struct.bounds* %bnds) #0 !dbg !6583 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca %union.tree_node*, align 8
  %iv.addr = alloca %struct.affine_iv*, align 8
  %final.addr = alloca %union.tree_node*, align 8
  %niter.addr = alloca %struct.tree_niter_desc*, align 8
  %exit_must_be_taken.addr = alloca i8, align 1
  %bnds.addr = alloca %struct.bounds*, align 8
  %niter_type = alloca %union.tree_node*, align 8
  %s = alloca %union.tree_node*, align 8
  %c = alloca %union.tree_node*, align 8
  %d = alloca %union.tree_node*, align 8
  %bits = alloca %union.tree_node*, align 8
  %assumption = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %bound = alloca %union.tree_node*, align 8
  %max = alloca [1 x %struct.__mpz_struct], align 16
  %tmp17 = alloca %struct.double_int, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !6586, metadata !DIExpression()), !dbg !6587
  store %struct.affine_iv* %iv, %struct.affine_iv** %iv.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.affine_iv** %iv.addr, metadata !6588, metadata !DIExpression()), !dbg !6589
  store %union.tree_node* %final, %union.tree_node** %final.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %final.addr, metadata !6590, metadata !DIExpression()), !dbg !6591
  store %struct.tree_niter_desc* %niter, %struct.tree_niter_desc** %niter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tree_niter_desc** %niter.addr, metadata !6592, metadata !DIExpression()), !dbg !6593
  store i8 %exit_must_be_taken, i8* %exit_must_be_taken.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %exit_must_be_taken.addr, metadata !6594, metadata !DIExpression()), !dbg !6595
  store %struct.bounds* %bnds, %struct.bounds** %bnds.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bounds** %bnds.addr, metadata !6596, metadata !DIExpression()), !dbg !6597
  call void @llvm.dbg.declare(metadata %union.tree_node** %niter_type, metadata !6598, metadata !DIExpression()), !dbg !6599
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6600
  %call = call %union.tree_node* @unsigned_type_for(%union.tree_node* %0), !dbg !6601
  store %union.tree_node* %call, %union.tree_node** %niter_type, align 8, !dbg !6599
  call void @llvm.dbg.declare(metadata %union.tree_node** %s, metadata !6602, metadata !DIExpression()), !dbg !6603
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !6604, metadata !DIExpression()), !dbg !6605
  call void @llvm.dbg.declare(metadata %union.tree_node** %d, metadata !6606, metadata !DIExpression()), !dbg !6607
  call void @llvm.dbg.declare(metadata %union.tree_node** %bits, metadata !6608, metadata !DIExpression()), !dbg !6609
  call void @llvm.dbg.declare(metadata %union.tree_node** %assumption, metadata !6610, metadata !DIExpression()), !dbg !6611
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !6612, metadata !DIExpression()), !dbg !6613
  call void @llvm.dbg.declare(metadata %union.tree_node** %bound, metadata !6614, metadata !DIExpression()), !dbg !6615
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %max, metadata !6616, metadata !DIExpression()), !dbg !6617
  %1 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6618
  %control = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %1, i32 0, i32 4, !dbg !6619
  %2 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !6620
  %3 = bitcast %struct.affine_iv* %control to i8*, !dbg !6621
  %4 = bitcast %struct.affine_iv* %2 to i8*, !dbg !6621
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false), !dbg !6621
  %5 = load %union.tree_node*, %union.tree_node** %final.addr, align 8, !dbg !6622
  %6 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6623
  %bound1 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %6, i32 0, i32 5, !dbg !6624
  store %union.tree_node* %5, %union.tree_node** %bound1, align 8, !dbg !6625
  %7 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6626
  %cmp = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %7, i32 0, i32 6, !dbg !6627
  store i32 102, i32* %cmp, align 8, !dbg !6628
  %8 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !6629
  %step = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %8, i32 0, i32 1, !dbg !6631
  %9 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !6631
  %call2 = call i32 @tree_int_cst_sign_bit(%union.tree_node* %9), !dbg !6632
  %tobool = icmp ne i32 %call2, 0, !dbg !6632
  br i1 %tobool, label %if.then, label %if.else, !dbg !6633

if.then:                                          ; preds = %entry
  %10 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6634
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6634
  %12 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !6634
  %step3 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %12, i32 0, i32 1, !dbg !6634
  %13 = load %union.tree_node*, %union.tree_node** %step3, align 8, !dbg !6634
  %call4 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 79, %union.tree_node* %11, %union.tree_node* %13), !dbg !6634
  %call5 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %10, %union.tree_node* %call4), !dbg !6634
  store %union.tree_node* %call5, %union.tree_node** %s, align 8, !dbg !6636
  %14 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6637
  %15 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6637
  %16 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !6637
  %base = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %16, i32 0, i32 0, !dbg !6637
  %17 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6637
  %call6 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %15, %union.tree_node* %17), !dbg !6637
  %18 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6637
  %19 = load %union.tree_node*, %union.tree_node** %final.addr, align 8, !dbg !6637
  %call7 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %18, %union.tree_node* %19), !dbg !6637
  %call8 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %14, %union.tree_node* %call6, %union.tree_node* %call7), !dbg !6637
  store %union.tree_node* %call8, %union.tree_node** %c, align 8, !dbg !6638
  %20 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !6639
  call void @bounds_negate(%struct.bounds* %20), !dbg !6640
  br label %if.end, !dbg !6641

if.else:                                          ; preds = %entry
  %21 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6642
  %22 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !6642
  %step9 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %22, i32 0, i32 1, !dbg !6642
  %23 = load %union.tree_node*, %union.tree_node** %step9, align 8, !dbg !6642
  %call10 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %21, %union.tree_node* %23), !dbg !6642
  store %union.tree_node* %call10, %union.tree_node** %s, align 8, !dbg !6644
  %24 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6645
  %25 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6645
  %26 = load %union.tree_node*, %union.tree_node** %final.addr, align 8, !dbg !6645
  %call11 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %25, %union.tree_node* %26), !dbg !6645
  %27 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6645
  %28 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !6645
  %base12 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %28, i32 0, i32 0, !dbg !6645
  %29 = load %union.tree_node*, %union.tree_node** %base12, align 8, !dbg !6645
  %call13 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %27, %union.tree_node* %29), !dbg !6645
  %call14 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %24, %union.tree_node* %call11, %union.tree_node* %call13), !dbg !6645
  store %union.tree_node* %call14, %union.tree_node** %c, align 8, !dbg !6646
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !6647
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !6648
  %arraydecay15 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !6649
  %30 = load %struct.affine_iv*, %struct.affine_iv** %iv.addr, align 8, !dbg !6650
  %no_overflow = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %30, i32 0, i32 2, !dbg !6651
  %31 = load i8, i8* %no_overflow, align 8, !dbg !6651
  %32 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !6652
  %33 = load %union.tree_node*, %union.tree_node** %s, align 8, !dbg !6653
  %34 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !6654
  call void @number_of_iterations_ne_max(%struct.__mpz_struct* %arraydecay15, i8 zeroext %31, %union.tree_node* %32, %union.tree_node* %33, %struct.bounds* %34), !dbg !6655
  %35 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6656
  %max16 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %35, i32 0, i32 3, !dbg !6657
  %36 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6658
  %arraydecay18 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !6659
  %call19 = call { i64, i64 } @mpz_get_double_int(%union.tree_node* %36, %struct.__mpz_struct* %arraydecay18, i8 zeroext 0), !dbg !6660
  %37 = bitcast %struct.double_int* %tmp17 to { i64, i64 }*, !dbg !6660
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %37, i32 0, i32 0, !dbg !6660
  %39 = extractvalue { i64, i64 } %call19, 0, !dbg !6660
  store i64 %39, i64* %38, align 8, !dbg !6660
  %40 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %37, i32 0, i32 1, !dbg !6660
  %41 = extractvalue { i64, i64 } %call19, 1, !dbg !6660
  store i64 %41, i64* %40, align 8, !dbg !6660
  %42 = bitcast %struct.double_int* %max16 to i8*, !dbg !6660
  %43 = bitcast %struct.double_int* %tmp17 to i8*, !dbg !6660
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 16, i1 false), !dbg !6660
  %arraydecay20 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !6661
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay20), !dbg !6662
  %44 = load %union.tree_node*, %union.tree_node** %s, align 8, !dbg !6663
  %call21 = call i32 @integer_onep(%union.tree_node* %44), !dbg !6665
  %tobool22 = icmp ne i32 %call21, 0, !dbg !6665
  br i1 %tobool22, label %if.then23, label %if.end25, !dbg !6666

if.then23:                                        ; preds = %if.end
  %45 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !6667
  %46 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6669
  %niter24 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %46, i32 0, i32 2, !dbg !6670
  store %union.tree_node* %45, %union.tree_node** %niter24, align 8, !dbg !6671
  store i8 1, i8* %retval, align 1, !dbg !6672
  br label %return, !dbg !6672

if.end25:                                         ; preds = %if.end
  %47 = load %union.tree_node*, %union.tree_node** %s, align 8, !dbg !6673
  %call26 = call %union.tree_node* @num_ending_zeros(%union.tree_node* %47), !dbg !6674
  store %union.tree_node* %call26, %union.tree_node** %bits, align 8, !dbg !6675
  %48 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6676
  %49 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6677
  %type27 = bitcast %union.tree_node* %49 to %struct.tree_type*, !dbg !6677
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type27, i32 0, i32 6, !dbg !6677
  %bf.load = load i32, i32* %precision, align 4, !dbg !6677
  %bf.clear = and i32 %bf.load, 1023, !dbg !6677
  %conv = zext i32 %bf.clear to i64, !dbg !6677
  %50 = load %union.tree_node*, %union.tree_node** %bits, align 8, !dbg !6678
  %call28 = call i64 @tree_low_cst(%union.tree_node* %50, i32 1), !dbg !6679
  %sub = sub nsw i64 %conv, %call28, !dbg !6680
  %conv29 = trunc i64 %sub to i32, !dbg !6681
  %call30 = call %union.tree_node* @build_low_bits_mask(%union.tree_node* %48, i32 %conv29), !dbg !6682
  store %union.tree_node* %call30, %union.tree_node** %bound, align 8, !dbg !6683
  %51 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6684
  %52 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6685
  %call31 = call %union.tree_node* @build_int_cst(%union.tree_node* %52, i64 1), !dbg !6686
  %53 = load %union.tree_node*, %union.tree_node** %bits, align 8, !dbg !6687
  %call32 = call %union.tree_node* @fold_binary_to_constant(i32 83, %union.tree_node* %51, %union.tree_node* %call31, %union.tree_node* %53), !dbg !6688
  store %union.tree_node* %call32, %union.tree_node** %d, align 8, !dbg !6689
  %54 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6690
  %55 = load %union.tree_node*, %union.tree_node** %s, align 8, !dbg !6691
  %56 = load %union.tree_node*, %union.tree_node** %bits, align 8, !dbg !6692
  %call33 = call %union.tree_node* @fold_binary_to_constant(i32 84, %union.tree_node* %54, %union.tree_node* %55, %union.tree_node* %56), !dbg !6693
  store %union.tree_node* %call33, %union.tree_node** %s, align 8, !dbg !6694
  %57 = load i8, i8* %exit_must_be_taken.addr, align 1, !dbg !6695
  %tobool34 = icmp ne i8 %57, 0, !dbg !6695
  br i1 %tobool34, label %if.end45, label %if.then35, !dbg !6697

if.then35:                                        ; preds = %if.end25
  %58 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6698
  %59 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !6698
  %60 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !6698
  %call36 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 73, %union.tree_node* %58, %union.tree_node* %59, %union.tree_node* %60), !dbg !6698
  store %union.tree_node* %call36, %union.tree_node** %assumption, align 8, !dbg !6700
  %61 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !6701
  %62 = load %union.tree_node*, %union.tree_node** %assumption, align 8, !dbg !6701
  %63 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6701
  %call37 = call %union.tree_node* @build_int_cst(%union.tree_node* %63, i64 0), !dbg !6701
  %call38 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 101, %union.tree_node* %61, %union.tree_node* %62, %union.tree_node* %call37), !dbg !6701
  store %union.tree_node* %call38, %union.tree_node** %assumption, align 8, !dbg !6702
  %64 = load %union.tree_node*, %union.tree_node** %assumption, align 8, !dbg !6703
  %call39 = call i32 @integer_nonzerop(%union.tree_node* %64), !dbg !6705
  %tobool40 = icmp ne i32 %call39, 0, !dbg !6705
  br i1 %tobool40, label %if.end44, label %if.then41, !dbg !6706

if.then41:                                        ; preds = %if.then35
  %65 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !6707
  %66 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6707
  %assumptions = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %66, i32 0, i32 0, !dbg !6707
  %67 = load %union.tree_node*, %union.tree_node** %assumptions, align 8, !dbg !6707
  %68 = load %union.tree_node*, %union.tree_node** %assumption, align 8, !dbg !6707
  %call42 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 93, %union.tree_node* %65, %union.tree_node* %67, %union.tree_node* %68), !dbg !6707
  %69 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6708
  %assumptions43 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %69, i32 0, i32 0, !dbg !6709
  store %union.tree_node* %call42, %union.tree_node** %assumptions43, align 8, !dbg !6710
  br label %if.end44, !dbg !6708

if.end44:                                         ; preds = %if.then41, %if.then35
  br label %if.end45, !dbg !6711

if.end45:                                         ; preds = %if.end44, %if.end25
  %70 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6712
  %71 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !6712
  %72 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !6712
  %call46 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 76, %union.tree_node* %70, %union.tree_node* %71, %union.tree_node* %72), !dbg !6712
  store %union.tree_node* %call46, %union.tree_node** %c, align 8, !dbg !6713
  %73 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6714
  %74 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !6714
  %75 = load %union.tree_node*, %union.tree_node** %s, align 8, !dbg !6714
  %76 = load %union.tree_node*, %union.tree_node** %bound, align 8, !dbg !6714
  %call47 = call %union.tree_node* @inverse(%union.tree_node* %75, %union.tree_node* %76), !dbg !6714
  %call48 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 65, %union.tree_node* %73, %union.tree_node* %74, %union.tree_node* %call47), !dbg !6714
  store %union.tree_node* %call48, %union.tree_node** %tmp, align 8, !dbg !6715
  %77 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6716
  %78 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !6716
  %79 = load %union.tree_node*, %union.tree_node** %bound, align 8, !dbg !6716
  %call49 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 89, %union.tree_node* %77, %union.tree_node* %78, %union.tree_node* %79), !dbg !6716
  %80 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6717
  %niter50 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %80, i32 0, i32 2, !dbg !6718
  store %union.tree_node* %call49, %union.tree_node** %niter50, align 8, !dbg !6719
  store i8 1, i8* %retval, align 1, !dbg !6720
  br label %return, !dbg !6720

return:                                           ; preds = %if.end45, %if.then23
  %81 = load i8, i8* %retval, align 1, !dbg !6721
  ret i8 %81, !dbg !6721
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @number_of_iterations_lt(%union.tree_node* %type, %struct.affine_iv* %iv0, %struct.affine_iv* %iv1, %struct.tree_niter_desc* %niter, i8 zeroext %exit_must_be_taken, %struct.bounds* %bnds) #0 !dbg !6722 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca %union.tree_node*, align 8
  %iv0.addr = alloca %struct.affine_iv*, align 8
  %iv1.addr = alloca %struct.affine_iv*, align 8
  %niter.addr = alloca %struct.tree_niter_desc*, align 8
  %exit_must_be_taken.addr = alloca i8, align 1
  %bnds.addr = alloca %struct.bounds*, align 8
  %niter_type = alloca %union.tree_node*, align 8
  %delta = alloca %union.tree_node*, align 8
  %step = alloca %union.tree_node*, align 8
  %s = alloca %union.tree_node*, align 8
  %mstep = alloca [1 x %struct.__mpz_struct], align 16
  %tmp = alloca [1 x %struct.__mpz_struct], align 16
  %tmp34 = alloca %struct.double_int, align 8
  %zps = alloca %struct.affine_iv, align 8
  %agg.tmp = alloca %struct.double_int, align 8
  %tmp80 = alloca %struct.double_int, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !6725, metadata !DIExpression()), !dbg !6726
  store %struct.affine_iv* %iv0, %struct.affine_iv** %iv0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.affine_iv** %iv0.addr, metadata !6727, metadata !DIExpression()), !dbg !6728
  store %struct.affine_iv* %iv1, %struct.affine_iv** %iv1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.affine_iv** %iv1.addr, metadata !6729, metadata !DIExpression()), !dbg !6730
  store %struct.tree_niter_desc* %niter, %struct.tree_niter_desc** %niter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tree_niter_desc** %niter.addr, metadata !6731, metadata !DIExpression()), !dbg !6732
  store i8 %exit_must_be_taken, i8* %exit_must_be_taken.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %exit_must_be_taken.addr, metadata !6733, metadata !DIExpression()), !dbg !6734
  store %struct.bounds* %bnds, %struct.bounds** %bnds.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bounds** %bnds.addr, metadata !6735, metadata !DIExpression()), !dbg !6736
  call void @llvm.dbg.declare(metadata %union.tree_node** %niter_type, metadata !6737, metadata !DIExpression()), !dbg !6738
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6739
  %call = call %union.tree_node* @unsigned_type_for(%union.tree_node* %0), !dbg !6740
  store %union.tree_node* %call, %union.tree_node** %niter_type, align 8, !dbg !6738
  call void @llvm.dbg.declare(metadata %union.tree_node** %delta, metadata !6741, metadata !DIExpression()), !dbg !6742
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !6743, metadata !DIExpression()), !dbg !6744
  call void @llvm.dbg.declare(metadata %union.tree_node** %s, metadata !6745, metadata !DIExpression()), !dbg !6746
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %mstep, metadata !6747, metadata !DIExpression()), !dbg !6748
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %tmp, metadata !6749, metadata !DIExpression()), !dbg !6750
  %1 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !6751
  %step1 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %1, i32 0, i32 1, !dbg !6753
  %2 = load %union.tree_node*, %union.tree_node** %step1, align 8, !dbg !6753
  %call2 = call i32 @integer_nonzerop(%union.tree_node* %2), !dbg !6754
  %tobool = icmp ne i32 %call2, 0, !dbg !6754
  br i1 %tobool, label %if.then, label %if.else, !dbg !6755

if.then:                                          ; preds = %entry
  %3 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6756
  %control = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %3, i32 0, i32 4, !dbg !6758
  %4 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !6759
  %5 = bitcast %struct.affine_iv* %control to i8*, !dbg !6760
  %6 = bitcast %struct.affine_iv* %4 to i8*, !dbg !6760
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 24, i1 false), !dbg !6760
  %7 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6761
  %cmp = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %7, i32 0, i32 6, !dbg !6762
  store i32 97, i32* %cmp, align 8, !dbg !6763
  %8 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !6764
  %base = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %8, i32 0, i32 0, !dbg !6765
  %9 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !6765
  %10 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6766
  %bound = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %10, i32 0, i32 5, !dbg !6767
  store %union.tree_node* %9, %union.tree_node** %bound, align 8, !dbg !6768
  br label %if.end, !dbg !6769

if.else:                                          ; preds = %entry
  %11 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6770
  %control3 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %11, i32 0, i32 4, !dbg !6772
  %12 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !6773
  %13 = bitcast %struct.affine_iv* %control3 to i8*, !dbg !6774
  %14 = bitcast %struct.affine_iv* %12 to i8*, !dbg !6774
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 24, i1 false), !dbg !6774
  %15 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6775
  %cmp4 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %15, i32 0, i32 6, !dbg !6776
  store i32 99, i32* %cmp4, align 8, !dbg !6777
  %16 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !6778
  %base5 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %16, i32 0, i32 0, !dbg !6779
  %17 = load %union.tree_node*, %union.tree_node** %base5, align 8, !dbg !6779
  %18 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6780
  %bound6 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %18, i32 0, i32 5, !dbg !6781
  store %union.tree_node* %17, %union.tree_node** %bound6, align 8, !dbg !6782
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %19 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6783
  %20 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6783
  %21 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !6783
  %base7 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %21, i32 0, i32 0, !dbg !6783
  %22 = load %union.tree_node*, %union.tree_node** %base7, align 8, !dbg !6783
  %call8 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %20, %union.tree_node* %22), !dbg !6783
  %23 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6783
  %24 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !6783
  %base9 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %24, i32 0, i32 0, !dbg !6783
  %25 = load %union.tree_node*, %union.tree_node** %base9, align 8, !dbg !6783
  %call10 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %23, %union.tree_node* %25), !dbg !6783
  %call11 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %19, %union.tree_node* %call8, %union.tree_node* %call10), !dbg !6783
  store %union.tree_node* %call11, %union.tree_node** %delta, align 8, !dbg !6784
  %26 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !6785
  %step12 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %26, i32 0, i32 1, !dbg !6787
  %27 = load %union.tree_node*, %union.tree_node** %step12, align 8, !dbg !6787
  %call13 = call i32 @integer_onep(%union.tree_node* %27), !dbg !6788
  %tobool14 = icmp ne i32 %call13, 0, !dbg !6788
  br i1 %tobool14, label %land.lhs.true, label %lor.lhs.false, !dbg !6789

land.lhs.true:                                    ; preds = %if.end
  %28 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !6790
  %step15 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %28, i32 0, i32 1, !dbg !6791
  %29 = load %union.tree_node*, %union.tree_node** %step15, align 8, !dbg !6791
  %call16 = call i32 @integer_zerop(%union.tree_node* %29), !dbg !6792
  %tobool17 = icmp ne i32 %call16, 0, !dbg !6792
  br i1 %tobool17, label %if.then25, label %lor.lhs.false, !dbg !6793

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.end
  %30 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !6794
  %step18 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %30, i32 0, i32 1, !dbg !6795
  %31 = load %union.tree_node*, %union.tree_node** %step18, align 8, !dbg !6795
  %call19 = call i32 @integer_all_onesp(%union.tree_node* %31), !dbg !6796
  %tobool20 = icmp ne i32 %call19, 0, !dbg !6796
  br i1 %tobool20, label %land.lhs.true21, label %if.end37, !dbg !6797

land.lhs.true21:                                  ; preds = %lor.lhs.false
  %32 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !6798
  %step22 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %32, i32 0, i32 1, !dbg !6799
  %33 = load %union.tree_node*, %union.tree_node** %step22, align 8, !dbg !6799
  %call23 = call i32 @integer_zerop(%union.tree_node* %33), !dbg !6800
  %tobool24 = icmp ne i32 %call23, 0, !dbg !6800
  br i1 %tobool24, label %if.then25, label %if.end37, !dbg !6801

if.then25:                                        ; preds = %land.lhs.true21, %land.lhs.true
  %34 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !6802
  %below = getelementptr inbounds %struct.bounds, %struct.bounds* %34, i32 0, i32 0, !dbg !6805
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below, i64 0, i64 0, !dbg !6802
  %call26 = call i32 @mpz_sgn(%struct.__mpz_struct* %arraydecay), !dbg !6806
  %cmp27 = icmp slt i32 %call26, 0, !dbg !6807
  br i1 %cmp27, label %if.then28, label %if.end32, !dbg !6808

if.then28:                                        ; preds = %if.then25
  %35 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !6809
  %36 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !6809
  %base29 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %36, i32 0, i32 0, !dbg !6809
  %37 = load %union.tree_node*, %union.tree_node** %base29, align 8, !dbg !6809
  %38 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !6809
  %base30 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %38, i32 0, i32 0, !dbg !6809
  %39 = load %union.tree_node*, %union.tree_node** %base30, align 8, !dbg !6809
  %call31 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 97, %union.tree_node* %35, %union.tree_node* %37, %union.tree_node* %39), !dbg !6809
  %40 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6810
  %may_be_zero = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %40, i32 0, i32 1, !dbg !6811
  store %union.tree_node* %call31, %union.tree_node** %may_be_zero, align 8, !dbg !6812
  br label %if.end32, !dbg !6810

if.end32:                                         ; preds = %if.then28, %if.then25
  %41 = load %union.tree_node*, %union.tree_node** %delta, align 8, !dbg !6813
  %42 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6814
  %niter33 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %42, i32 0, i32 2, !dbg !6815
  store %union.tree_node* %41, %union.tree_node** %niter33, align 8, !dbg !6816
  %43 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6817
  %max = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %43, i32 0, i32 3, !dbg !6818
  %44 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6819
  %45 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !6820
  %up = getelementptr inbounds %struct.bounds, %struct.bounds* %45, i32 0, i32 1, !dbg !6821
  %arraydecay35 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up, i64 0, i64 0, !dbg !6820
  %call36 = call { i64, i64 } @mpz_get_double_int(%union.tree_node* %44, %struct.__mpz_struct* %arraydecay35, i8 zeroext 0), !dbg !6822
  %46 = bitcast %struct.double_int* %tmp34 to { i64, i64 }*, !dbg !6822
  %47 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %46, i32 0, i32 0, !dbg !6822
  %48 = extractvalue { i64, i64 } %call36, 0, !dbg !6822
  store i64 %48, i64* %47, align 8, !dbg !6822
  %49 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %46, i32 0, i32 1, !dbg !6822
  %50 = extractvalue { i64, i64 } %call36, 1, !dbg !6822
  store i64 %50, i64* %49, align 8, !dbg !6822
  %51 = bitcast %struct.double_int* %max to i8*, !dbg !6822
  %52 = bitcast %struct.double_int* %tmp34 to i8*, !dbg !6822
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %52, i64 16, i1 false), !dbg !6822
  store i8 1, i8* %retval, align 1, !dbg !6823
  br label %return, !dbg !6823

if.end37:                                         ; preds = %land.lhs.true21, %lor.lhs.false
  %53 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !6824
  %step38 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %53, i32 0, i32 1, !dbg !6826
  %54 = load %union.tree_node*, %union.tree_node** %step38, align 8, !dbg !6826
  %call39 = call i32 @integer_nonzerop(%union.tree_node* %54), !dbg !6827
  %tobool40 = icmp ne i32 %call39, 0, !dbg !6827
  br i1 %tobool40, label %if.then41, label %if.else44, !dbg !6828

if.then41:                                        ; preds = %if.end37
  %55 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6829
  %56 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !6829
  %step42 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %56, i32 0, i32 1, !dbg !6829
  %57 = load %union.tree_node*, %union.tree_node** %step42, align 8, !dbg !6829
  %call43 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %55, %union.tree_node* %57), !dbg !6829
  store %union.tree_node* %call43, %union.tree_node** %step, align 8, !dbg !6830
  br label %if.end48, !dbg !6831

if.else44:                                        ; preds = %if.end37
  %58 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6832
  %59 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6832
  %60 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !6832
  %step45 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %60, i32 0, i32 1, !dbg !6832
  %61 = load %union.tree_node*, %union.tree_node** %step45, align 8, !dbg !6832
  %call46 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 79, %union.tree_node* %59, %union.tree_node* %61), !dbg !6832
  %call47 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %58, %union.tree_node* %call46), !dbg !6832
  store %union.tree_node* %call47, %union.tree_node** %step, align 8, !dbg !6833
  br label %if.end48

if.end48:                                         ; preds = %if.else44, %if.then41
  %62 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6834
  %63 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !6836
  %64 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !6837
  %65 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6838
  %66 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !6839
  %67 = load i8, i8* %exit_must_be_taken.addr, align 1, !dbg !6840
  %68 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !6841
  %call49 = call zeroext i8 @number_of_iterations_lt_to_ne(%union.tree_node* %62, %struct.affine_iv* %63, %struct.affine_iv* %64, %struct.tree_niter_desc* %65, %union.tree_node** %delta, %union.tree_node* %66, i8 zeroext %67, %struct.bounds* %68), !dbg !6842
  %tobool50 = icmp ne i8 %call49, 0, !dbg !6842
  br i1 %tobool50, label %if.then51, label %if.end56, !dbg !6843

if.then51:                                        ; preds = %if.end48
  call void @llvm.dbg.declare(metadata %struct.affine_iv* %zps, metadata !6844, metadata !DIExpression()), !dbg !6846
  %69 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6847
  %call52 = call %union.tree_node* @build_int_cst(%union.tree_node* %69, i64 0), !dbg !6848
  %base53 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %zps, i32 0, i32 0, !dbg !6849
  store %union.tree_node* %call52, %union.tree_node** %base53, align 8, !dbg !6850
  %70 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !6851
  %step54 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %zps, i32 0, i32 1, !dbg !6852
  store %union.tree_node* %70, %union.tree_node** %step54, align 8, !dbg !6853
  %no_overflow = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %zps, i32 0, i32 2, !dbg !6854
  store i8 1, i8* %no_overflow, align 8, !dbg !6855
  %71 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6856
  %72 = load %union.tree_node*, %union.tree_node** %delta, align 8, !dbg !6857
  %73 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6858
  %74 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !6859
  %call55 = call zeroext i8 @number_of_iterations_ne(%union.tree_node* %71, %struct.affine_iv* %zps, %union.tree_node* %72, %struct.tree_niter_desc* %73, i8 zeroext 1, %struct.bounds* %74), !dbg !6860
  store i8 %call55, i8* %retval, align 1, !dbg !6861
  br label %return, !dbg !6861

if.end56:                                         ; preds = %if.end48
  %75 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6862
  %76 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !6864
  %77 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !6865
  %78 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6866
  %79 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !6867
  %call57 = call zeroext i8 @assert_no_overflow_lt(%union.tree_node* %75, %struct.affine_iv* %76, %struct.affine_iv* %77, %struct.tree_niter_desc* %78, %union.tree_node* %79), !dbg !6868
  %tobool58 = icmp ne i8 %call57, 0, !dbg !6868
  br i1 %tobool58, label %if.end60, label %if.then59, !dbg !6869

if.then59:                                        ; preds = %if.end56
  store i8 0, i8* %retval, align 1, !dbg !6870
  br label %return, !dbg !6870

if.end60:                                         ; preds = %if.end56
  %80 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6871
  %81 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !6872
  %82 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !6873
  %83 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6874
  %84 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !6875
  call void @assert_loop_rolls_lt(%union.tree_node* %80, %struct.affine_iv* %81, %struct.affine_iv* %82, %struct.tree_niter_desc* %83, %struct.bounds* %84), !dbg !6876
  %85 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6877
  %86 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !6877
  %87 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6877
  %call61 = call %union.tree_node* @build_int_cst(%union.tree_node* %87, i64 1), !dbg !6877
  %call62 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %85, %union.tree_node* %86, %union.tree_node* %call61), !dbg !6877
  store %union.tree_node* %call62, %union.tree_node** %s, align 8, !dbg !6878
  %88 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6879
  %89 = load %union.tree_node*, %union.tree_node** %delta, align 8, !dbg !6879
  %90 = load %union.tree_node*, %union.tree_node** %s, align 8, !dbg !6879
  %call63 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %88, %union.tree_node* %89, %union.tree_node* %90), !dbg !6879
  store %union.tree_node* %call63, %union.tree_node** %delta, align 8, !dbg !6880
  %91 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6881
  %92 = load %union.tree_node*, %union.tree_node** %delta, align 8, !dbg !6881
  %93 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !6881
  %call64 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 69, %union.tree_node* %91, %union.tree_node* %92, %union.tree_node* %93), !dbg !6881
  %94 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6882
  %niter65 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %94, i32 0, i32 2, !dbg !6883
  store %union.tree_node* %call64, %union.tree_node** %niter65, align 8, !dbg !6884
  %arraydecay66 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mstep, i64 0, i64 0, !dbg !6885
  call void @mpz_init(%struct.__mpz_struct* %arraydecay66), !dbg !6886
  %arraydecay67 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tmp, i64 0, i64 0, !dbg !6887
  call void @mpz_init(%struct.__mpz_struct* %arraydecay67), !dbg !6888
  %arraydecay68 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mstep, i64 0, i64 0, !dbg !6889
  %95 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !6890
  %call69 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %95), !dbg !6891
  %96 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !6891
  %97 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %96, i32 0, i32 0, !dbg !6891
  %98 = extractvalue { i64, i64 } %call69, 0, !dbg !6891
  store i64 %98, i64* %97, align 8, !dbg !6891
  %99 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %96, i32 0, i32 1, !dbg !6891
  %100 = extractvalue { i64, i64 } %call69, 1, !dbg !6891
  store i64 %100, i64* %99, align 8, !dbg !6891
  %101 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !6892
  %102 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %101, i32 0, i32 0, !dbg !6892
  %103 = load i64, i64* %102, align 8, !dbg !6892
  %104 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %101, i32 0, i32 1, !dbg !6892
  %105 = load i64, i64* %104, align 8, !dbg !6892
  call void @mpz_set_double_int(%struct.__mpz_struct* %arraydecay68, i64 %103, i64 %105, i8 zeroext 1), !dbg !6892
  %arraydecay70 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tmp, i64 0, i64 0, !dbg !6893
  %106 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !6894
  %up71 = getelementptr inbounds %struct.bounds, %struct.bounds* %106, i32 0, i32 1, !dbg !6895
  %arraydecay72 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up71, i64 0, i64 0, !dbg !6894
  %arraydecay73 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mstep, i64 0, i64 0, !dbg !6896
  call void @mpz_add(%struct.__mpz_struct* %arraydecay70, %struct.__mpz_struct* %arraydecay72, %struct.__mpz_struct* %arraydecay73), !dbg !6897
  %arraydecay74 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tmp, i64 0, i64 0, !dbg !6898
  %arraydecay75 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tmp, i64 0, i64 0, !dbg !6899
  call void @mpz_sub_ui(%struct.__mpz_struct* %arraydecay74, %struct.__mpz_struct* %arraydecay75, i64 1), !dbg !6900
  %arraydecay76 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tmp, i64 0, i64 0, !dbg !6901
  %arraydecay77 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tmp, i64 0, i64 0, !dbg !6902
  %arraydecay78 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mstep, i64 0, i64 0, !dbg !6903
  call void @mpz_fdiv_q(%struct.__mpz_struct* %arraydecay76, %struct.__mpz_struct* %arraydecay77, %struct.__mpz_struct* %arraydecay78), !dbg !6904
  %107 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6905
  %max79 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %107, i32 0, i32 3, !dbg !6906
  %108 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !6907
  %arraydecay81 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tmp, i64 0, i64 0, !dbg !6908
  %call82 = call { i64, i64 } @mpz_get_double_int(%union.tree_node* %108, %struct.__mpz_struct* %arraydecay81, i8 zeroext 0), !dbg !6909
  %109 = bitcast %struct.double_int* %tmp80 to { i64, i64 }*, !dbg !6909
  %110 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %109, i32 0, i32 0, !dbg !6909
  %111 = extractvalue { i64, i64 } %call82, 0, !dbg !6909
  store i64 %111, i64* %110, align 8, !dbg !6909
  %112 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %109, i32 0, i32 1, !dbg !6909
  %113 = extractvalue { i64, i64 } %call82, 1, !dbg !6909
  store i64 %113, i64* %112, align 8, !dbg !6909
  %114 = bitcast %struct.double_int* %max79 to i8*, !dbg !6909
  %115 = bitcast %struct.double_int* %tmp80 to i8*, !dbg !6909
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 8 %115, i64 16, i1 false), !dbg !6909
  %arraydecay83 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mstep, i64 0, i64 0, !dbg !6910
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay83), !dbg !6911
  %arraydecay84 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tmp, i64 0, i64 0, !dbg !6912
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay84), !dbg !6913
  store i8 1, i8* %retval, align 1, !dbg !6914
  br label %return, !dbg !6914

return:                                           ; preds = %if.end60, %if.then59, %if.then51, %if.end32
  %116 = load i8, i8* %retval, align 1, !dbg !6915
  ret i8 %116, !dbg !6915
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @number_of_iterations_le(%union.tree_node* %type, %struct.affine_iv* %iv0, %struct.affine_iv* %iv1, %struct.tree_niter_desc* %niter, i8 zeroext %exit_must_be_taken, %struct.bounds* %bnds) #0 !dbg !6916 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca %union.tree_node*, align 8
  %iv0.addr = alloca %struct.affine_iv*, align 8
  %iv1.addr = alloca %struct.affine_iv*, align 8
  %niter.addr = alloca %struct.tree_niter_desc*, align 8
  %exit_must_be_taken.addr = alloca i8, align 1
  %bnds.addr = alloca %struct.bounds*, align 8
  %assumption = alloca %union.tree_node*, align 8
  %type1 = alloca %union.tree_node*, align 8
  %agg.tmp = alloca %struct.double_int, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !6917, metadata !DIExpression()), !dbg !6918
  store %struct.affine_iv* %iv0, %struct.affine_iv** %iv0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.affine_iv** %iv0.addr, metadata !6919, metadata !DIExpression()), !dbg !6920
  store %struct.affine_iv* %iv1, %struct.affine_iv** %iv1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.affine_iv** %iv1.addr, metadata !6921, metadata !DIExpression()), !dbg !6922
  store %struct.tree_niter_desc* %niter, %struct.tree_niter_desc** %niter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tree_niter_desc** %niter.addr, metadata !6923, metadata !DIExpression()), !dbg !6924
  store i8 %exit_must_be_taken, i8* %exit_must_be_taken.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %exit_must_be_taken.addr, metadata !6925, metadata !DIExpression()), !dbg !6926
  store %struct.bounds* %bnds, %struct.bounds** %bnds.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bounds** %bnds.addr, metadata !6927, metadata !DIExpression()), !dbg !6928
  call void @llvm.dbg.declare(metadata %union.tree_node** %assumption, metadata !6929, metadata !DIExpression()), !dbg !6930
  call void @llvm.dbg.declare(metadata %union.tree_node** %type1, metadata !6931, metadata !DIExpression()), !dbg !6932
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6933
  store %union.tree_node* %0, %union.tree_node** %type1, align 8, !dbg !6932
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6934
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6934
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6934
  %bf.load = load i64, i64* %2, align 8, !dbg !6934
  %bf.clear = and i64 %bf.load, 65535, !dbg !6934
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6934
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !6934
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6934

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6934
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6934
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !6934
  %bf.load2 = load i64, i64* %4, align 8, !dbg !6934
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !6934
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !6934
  %cmp5 = icmp eq i32 %bf.cast4, 12, !dbg !6934
  br i1 %cmp5, label %if.then, label %if.end, !dbg !6936

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !6937
  store %union.tree_node* %5, %union.tree_node** %type1, align 8, !dbg !6938
  br label %if.end, !dbg !6939

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %6 = load i8, i8* %exit_must_be_taken.addr, align 1, !dbg !6940
  %tobool = icmp ne i8 %6, 0, !dbg !6940
  br i1 %tobool, label %if.end37, label %land.lhs.true, !dbg !6942

land.lhs.true:                                    ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6943
  %base6 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !6943
  %8 = bitcast %struct.tree_base* %base6 to i64*, !dbg !6943
  %bf.load7 = load i64, i64* %8, align 8, !dbg !6943
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !6943
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !6943
  %cmp10 = icmp eq i32 %bf.cast9, 10, !dbg !6943
  br i1 %cmp10, label %if.end37, label %lor.lhs.false11, !dbg !6943

lor.lhs.false11:                                  ; preds = %land.lhs.true
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6943
  %base12 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !6943
  %10 = bitcast %struct.tree_base* %base12 to i64*, !dbg !6943
  %bf.load13 = load i64, i64* %10, align 8, !dbg !6943
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !6943
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !6943
  %cmp16 = icmp eq i32 %bf.cast15, 12, !dbg !6943
  br i1 %cmp16, label %if.end37, label %if.then17, !dbg !6944

if.then17:                                        ; preds = %lor.lhs.false11
  %11 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !6945
  %step = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %11, i32 0, i32 1, !dbg !6948
  %12 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !6948
  %call = call i32 @integer_nonzerop(%union.tree_node* %12), !dbg !6949
  %tobool18 = icmp ne i32 %call, 0, !dbg !6949
  br i1 %tobool18, label %if.then19, label %if.else, !dbg !6950

if.then19:                                        ; preds = %if.then17
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !6951
  %14 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !6951
  %base20 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %14, i32 0, i32 0, !dbg !6951
  %15 = load %union.tree_node*, %union.tree_node** %base20, align 8, !dbg !6951
  %16 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6951
  %type21 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !6951
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type21, i32 0, i32 14, !dbg !6951
  %17 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !6951
  %call22 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 102, %union.tree_node* %13, %union.tree_node* %15, %union.tree_node* %17), !dbg !6951
  store %union.tree_node* %call22, %union.tree_node** %assumption, align 8, !dbg !6952
  br label %if.end26, !dbg !6953

if.else:                                          ; preds = %if.then17
  %18 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !6954
  %19 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !6954
  %base23 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %19, i32 0, i32 0, !dbg !6954
  %20 = load %union.tree_node*, %union.tree_node** %base23, align 8, !dbg !6954
  %21 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6954
  %type24 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !6954
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type24, i32 0, i32 13, !dbg !6954
  %22 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !6954
  %call25 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 102, %union.tree_node* %18, %union.tree_node* %20, %union.tree_node* %22), !dbg !6954
  store %union.tree_node* %call25, %union.tree_node** %assumption, align 8, !dbg !6955
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.then19
  %23 = load %union.tree_node*, %union.tree_node** %assumption, align 8, !dbg !6956
  %call27 = call i32 @integer_zerop(%union.tree_node* %23), !dbg !6958
  %tobool28 = icmp ne i32 %call27, 0, !dbg !6958
  br i1 %tobool28, label %if.then29, label %if.end30, !dbg !6959

if.then29:                                        ; preds = %if.end26
  store i8 0, i8* %retval, align 1, !dbg !6960
  br label %return, !dbg !6960

if.end30:                                         ; preds = %if.end26
  %24 = load %union.tree_node*, %union.tree_node** %assumption, align 8, !dbg !6961
  %call31 = call i32 @integer_nonzerop(%union.tree_node* %24), !dbg !6963
  %tobool32 = icmp ne i32 %call31, 0, !dbg !6963
  br i1 %tobool32, label %if.end36, label %if.then33, !dbg !6964

if.then33:                                        ; preds = %if.end30
  %25 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !6965
  %26 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6965
  %assumptions = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %26, i32 0, i32 0, !dbg !6965
  %27 = load %union.tree_node*, %union.tree_node** %assumptions, align 8, !dbg !6965
  %28 = load %union.tree_node*, %union.tree_node** %assumption, align 8, !dbg !6965
  %call34 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 93, %union.tree_node* %25, %union.tree_node* %27, %union.tree_node* %28), !dbg !6965
  %29 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !6966
  %assumptions35 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %29, i32 0, i32 0, !dbg !6967
  store %union.tree_node* %call34, %union.tree_node** %assumptions35, align 8, !dbg !6968
  br label %if.end36, !dbg !6966

if.end36:                                         ; preds = %if.then33, %if.end30
  br label %if.end37, !dbg !6969

if.end37:                                         ; preds = %if.end36, %lor.lhs.false11, %land.lhs.true, %if.end
  %30 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !6970
  %step38 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %30, i32 0, i32 1, !dbg !6972
  %31 = load %union.tree_node*, %union.tree_node** %step38, align 8, !dbg !6972
  %call39 = call i32 @integer_nonzerop(%union.tree_node* %31), !dbg !6973
  %tobool40 = icmp ne i32 %call39, 0, !dbg !6973
  br i1 %tobool40, label %if.then41, label %if.else64, !dbg !6974

if.then41:                                        ; preds = %if.end37
  %32 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6975
  %base42 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !6975
  %33 = bitcast %struct.tree_base* %base42 to i64*, !dbg !6975
  %bf.load43 = load i64, i64* %33, align 8, !dbg !6975
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !6975
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !6975
  %cmp46 = icmp eq i32 %bf.cast45, 10, !dbg !6975
  br i1 %cmp46, label %if.then53, label %lor.lhs.false47, !dbg !6975

lor.lhs.false47:                                  ; preds = %if.then41
  %34 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6975
  %base48 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !6975
  %35 = bitcast %struct.tree_base* %base48 to i64*, !dbg !6975
  %bf.load49 = load i64, i64* %35, align 8, !dbg !6975
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !6975
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !6975
  %cmp52 = icmp eq i32 %bf.cast51, 12, !dbg !6975
  br i1 %cmp52, label %if.then53, label %if.else58, !dbg !6978

if.then53:                                        ; preds = %lor.lhs.false47, %if.then41
  %36 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6979
  %37 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !6979
  %base54 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %37, i32 0, i32 0, !dbg !6979
  %38 = load %union.tree_node*, %union.tree_node** %base54, align 8, !dbg !6979
  %39 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6979
  %call55 = call %union.tree_node* @build_int_cst(%union.tree_node* %39, i64 1), !dbg !6979
  %call56 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 66, %union.tree_node* %36, %union.tree_node* %38, %union.tree_node* %call55), !dbg !6979
  %40 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !6980
  %base57 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %40, i32 0, i32 0, !dbg !6981
  store %union.tree_node* %call56, %union.tree_node** %base57, align 8, !dbg !6982
  br label %if.end63, !dbg !6980

if.else58:                                        ; preds = %lor.lhs.false47
  %41 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6983
  %42 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !6983
  %base59 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %42, i32 0, i32 0, !dbg !6983
  %43 = load %union.tree_node*, %union.tree_node** %base59, align 8, !dbg !6983
  %44 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6983
  %call60 = call %union.tree_node* @build_int_cst(%union.tree_node* %44, i64 1), !dbg !6983
  %call61 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %41, %union.tree_node* %43, %union.tree_node* %call60), !dbg !6983
  %45 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !6984
  %base62 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %45, i32 0, i32 0, !dbg !6985
  store %union.tree_node* %call61, %union.tree_node** %base62, align 8, !dbg !6986
  br label %if.end63

if.end63:                                         ; preds = %if.else58, %if.then53
  br label %if.end88, !dbg !6987

if.else64:                                        ; preds = %if.end37
  %46 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6988
  %base65 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !6988
  %47 = bitcast %struct.tree_base* %base65 to i64*, !dbg !6988
  %bf.load66 = load i64, i64* %47, align 8, !dbg !6988
  %bf.clear67 = and i64 %bf.load66, 65535, !dbg !6988
  %bf.cast68 = trunc i64 %bf.clear67 to i32, !dbg !6988
  %cmp69 = icmp eq i32 %bf.cast68, 10, !dbg !6988
  br i1 %cmp69, label %if.then76, label %lor.lhs.false70, !dbg !6988

lor.lhs.false70:                                  ; preds = %if.else64
  %48 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6988
  %base71 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !6988
  %49 = bitcast %struct.tree_base* %base71 to i64*, !dbg !6988
  %bf.load72 = load i64, i64* %49, align 8, !dbg !6988
  %bf.clear73 = and i64 %bf.load72, 65535, !dbg !6988
  %bf.cast74 = trunc i64 %bf.clear73 to i32, !dbg !6988
  %cmp75 = icmp eq i32 %bf.cast74, 12, !dbg !6988
  br i1 %cmp75, label %if.then76, label %if.else82, !dbg !6990

if.then76:                                        ; preds = %lor.lhs.false70, %if.else64
  %50 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6991
  %51 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !6991
  %base77 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %51, i32 0, i32 0, !dbg !6991
  %52 = load %union.tree_node*, %union.tree_node** %base77, align 8, !dbg !6991
  %53 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6991
  %54 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6991
  %call78 = call %union.tree_node* @build_int_cst(%union.tree_node* %54, i64 1), !dbg !6991
  %call79 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 79, %union.tree_node* %53, %union.tree_node* %call78), !dbg !6991
  %call80 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 66, %union.tree_node* %50, %union.tree_node* %52, %union.tree_node* %call79), !dbg !6991
  %55 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !6992
  %base81 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %55, i32 0, i32 0, !dbg !6993
  store %union.tree_node* %call80, %union.tree_node** %base81, align 8, !dbg !6994
  br label %if.end87, !dbg !6992

if.else82:                                        ; preds = %lor.lhs.false70
  %56 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6995
  %57 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !6995
  %base83 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %57, i32 0, i32 0, !dbg !6995
  %58 = load %union.tree_node*, %union.tree_node** %base83, align 8, !dbg !6995
  %59 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6995
  %call84 = call %union.tree_node* @build_int_cst(%union.tree_node* %59, i64 1), !dbg !6995
  %call85 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %56, %union.tree_node* %58, %union.tree_node* %call84), !dbg !6995
  %60 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !6996
  %base86 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %60, i32 0, i32 0, !dbg !6997
  store %union.tree_node* %call85, %union.tree_node** %base86, align 8, !dbg !6998
  br label %if.end87

if.end87:                                         ; preds = %if.else82, %if.then76
  br label %if.end88

if.end88:                                         ; preds = %if.end87, %if.end63
  %61 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !6999
  %call89 = call { i64, i64 } @shwi_to_double_int(i64 1), !dbg !7000
  %62 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !7000
  %63 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %62, i32 0, i32 0, !dbg !7000
  %64 = extractvalue { i64, i64 } %call89, 0, !dbg !7000
  store i64 %64, i64* %63, align 8, !dbg !7000
  %65 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %62, i32 0, i32 1, !dbg !7000
  %66 = extractvalue { i64, i64 } %call89, 1, !dbg !7000
  store i64 %66, i64* %65, align 8, !dbg !7000
  %67 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !7001
  %68 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !7002
  %69 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %68, i32 0, i32 0, !dbg !7002
  %70 = load i64, i64* %69, align 8, !dbg !7002
  %71 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %68, i32 0, i32 1, !dbg !7002
  %72 = load i64, i64* %71, align 8, !dbg !7002
  call void @bounds_add(%struct.bounds* %61, i64 %70, i64 %72, %union.tree_node* %67), !dbg !7002
  %73 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7003
  %74 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !7004
  %75 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !7005
  %76 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !7006
  %77 = load i8, i8* %exit_must_be_taken.addr, align 1, !dbg !7007
  %78 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7008
  %call90 = call zeroext i8 @number_of_iterations_lt(%union.tree_node* %73, %struct.affine_iv* %74, %struct.affine_iv* %75, %struct.tree_niter_desc* %76, i8 zeroext %77, %struct.bounds* %78), !dbg !7009
  store i8 %call90, i8* %retval, align 1, !dbg !7010
  br label %return, !dbg !7010

return:                                           ; preds = %if.end88, %if.then29
  %79 = load i8, i8* %retval, align 1, !dbg !7011
  ret i8 %79, !dbg !7011
}

declare dso_local void @mpz_clear(%struct.__mpz_struct*) #2

declare dso_local void @dump_double_int(%struct._IO_FILE*, i64, i64, i8 zeroext) #2

declare dso_local %union.tree_node* @tree_strip_sign_nop_conversions(%union.tree_node*) #2

declare dso_local void @mpz_init(%struct.__mpz_struct*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @split_to_var_and_offset(%union.tree_node* %expr, %union.tree_node** %var, %struct.__mpz_struct* %offset) #0 !dbg !7012 {
entry:
  %expr.addr = alloca %union.tree_node*, align 8
  %var.addr = alloca %union.tree_node**, align 8
  %offset.addr = alloca %struct.__mpz_struct*, align 8
  %type = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %off = alloca %struct.double_int, align 8
  %negate = alloca i8, align 1
  %tmp = alloca %struct.double_int, align 8
  %tmp11 = alloca %struct.double_int, align 8
  %tmp14 = alloca %struct.double_int, align 8
  %tmp21 = alloca %struct.double_int, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !7016, metadata !DIExpression()), !dbg !7017
  store %union.tree_node** %var, %union.tree_node*** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %var.addr, metadata !7018, metadata !DIExpression()), !dbg !7019
  store %struct.__mpz_struct* %offset, %struct.__mpz_struct** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %offset.addr, metadata !7020, metadata !DIExpression()), !dbg !7021
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7022, metadata !DIExpression()), !dbg !7023
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7024
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !7024
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7024
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !7024
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !7023
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !7025, metadata !DIExpression()), !dbg !7026
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !7027, metadata !DIExpression()), !dbg !7028
  call void @llvm.dbg.declare(metadata %struct.double_int* %off, metadata !7029, metadata !DIExpression()), !dbg !7030
  call void @llvm.dbg.declare(metadata i8* %negate, metadata !7031, metadata !DIExpression()), !dbg !7032
  store i8 0, i8* %negate, align 1, !dbg !7032
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7033
  %3 = load %union.tree_node**, %union.tree_node*** %var.addr, align 8, !dbg !7034
  store %union.tree_node* %2, %union.tree_node** %3, align 8, !dbg !7035
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %offset.addr, align 8, !dbg !7036
  call void @mpz_set_ui(%struct.__mpz_struct* %4, i64 0), !dbg !7037
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7038
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7038
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !7038
  %bf.load = load i64, i64* %6, align 8, !dbg !7038
  %bf.clear = and i64 %bf.load, 65535, !dbg !7038
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7038
  switch i32 %bf.cast, label %sw.default [
    i32 64, label %sw.bb
    i32 63, label %sw.bb2
    i32 66, label %sw.bb2
    i32 23, label %sw.bb19
  ], !dbg !7039

sw.bb:                                            ; preds = %entry
  store i8 1, i8* %negate, align 1, !dbg !7040
  br label %sw.bb2, !dbg !7042

sw.bb2:                                           ; preds = %entry, %entry, %sw.bb
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7043
  %exp = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !7043
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7043
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7043
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7043
  store %union.tree_node* %8, %union.tree_node** %op0, align 8, !dbg !7044
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7045
  %exp3 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !7045
  %operands4 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3, i32 0, i32 3, !dbg !7045
  %arrayidx5 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4, i64 0, i64 1, !dbg !7045
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx5, align 8, !dbg !7045
  store %union.tree_node* %10, %union.tree_node** %op1, align 8, !dbg !7046
  %11 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7047
  %base6 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !7047
  %12 = bitcast %struct.tree_base* %base6 to i64*, !dbg !7047
  %bf.load7 = load i64, i64* %12, align 8, !dbg !7047
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !7047
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !7047
  %cmp = icmp ne i32 %bf.cast9, 23, !dbg !7049
  br i1 %cmp, label %if.then, label %if.end, !dbg !7050

if.then:                                          ; preds = %sw.bb2
  br label %sw.epilog, !dbg !7051

if.end:                                           ; preds = %sw.bb2
  %13 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7052
  %14 = load %union.tree_node**, %union.tree_node*** %var.addr, align 8, !dbg !7053
  store %union.tree_node* %13, %union.tree_node** %14, align 8, !dbg !7054
  %15 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7055
  %call = call { i64, i64 } @tree_to_double_int(%union.tree_node* %15), !dbg !7056
  %16 = bitcast %struct.double_int* %tmp to { i64, i64 }*, !dbg !7056
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0, !dbg !7056
  %18 = extractvalue { i64, i64 } %call, 0, !dbg !7056
  store i64 %18, i64* %17, align 8, !dbg !7056
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1, !dbg !7056
  %20 = extractvalue { i64, i64 } %call, 1, !dbg !7056
  store i64 %20, i64* %19, align 8, !dbg !7056
  %21 = bitcast %struct.double_int* %off to i8*, !dbg !7056
  %22 = bitcast %struct.double_int* %tmp to i8*, !dbg !7056
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 16, i1 false), !dbg !7056
  %23 = load i8, i8* %negate, align 1, !dbg !7057
  %tobool = icmp ne i8 %23, 0, !dbg !7057
  br i1 %tobool, label %if.then10, label %if.end13, !dbg !7059

if.then10:                                        ; preds = %if.end
  %24 = bitcast %struct.double_int* %off to { i64, i64 }*, !dbg !7060
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %24, i32 0, i32 0, !dbg !7060
  %26 = load i64, i64* %25, align 8, !dbg !7060
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %24, i32 0, i32 1, !dbg !7060
  %28 = load i64, i64* %27, align 8, !dbg !7060
  %call12 = call { i64, i64 } @double_int_neg(i64 %26, i64 %28), !dbg !7060
  %29 = bitcast %struct.double_int* %tmp11 to { i64, i64 }*, !dbg !7060
  %30 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %29, i32 0, i32 0, !dbg !7060
  %31 = extractvalue { i64, i64 } %call12, 0, !dbg !7060
  store i64 %31, i64* %30, align 8, !dbg !7060
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %29, i32 0, i32 1, !dbg !7060
  %33 = extractvalue { i64, i64 } %call12, 1, !dbg !7060
  store i64 %33, i64* %32, align 8, !dbg !7060
  %34 = bitcast %struct.double_int* %off to i8*, !dbg !7060
  %35 = bitcast %struct.double_int* %tmp11 to i8*, !dbg !7060
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 %35, i64 16, i1 false), !dbg !7060
  br label %if.end13, !dbg !7061

if.end13:                                         ; preds = %if.then10, %if.end
  %36 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7062
  %type15 = bitcast %union.tree_node* %36 to %struct.tree_type*, !dbg !7062
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type15, i32 0, i32 6, !dbg !7062
  %bf.load16 = load i32, i32* %precision, align 4, !dbg !7062
  %bf.clear17 = and i32 %bf.load16, 1023, !dbg !7062
  %37 = bitcast %struct.double_int* %off to { i64, i64 }*, !dbg !7063
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %37, i32 0, i32 0, !dbg !7063
  %39 = load i64, i64* %38, align 8, !dbg !7063
  %40 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %37, i32 0, i32 1, !dbg !7063
  %41 = load i64, i64* %40, align 8, !dbg !7063
  %call18 = call { i64, i64 } @double_int_sext(i64 %39, i64 %41, i32 %bf.clear17), !dbg !7063
  %42 = bitcast %struct.double_int* %tmp14 to { i64, i64 }*, !dbg !7063
  %43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %42, i32 0, i32 0, !dbg !7063
  %44 = extractvalue { i64, i64 } %call18, 0, !dbg !7063
  store i64 %44, i64* %43, align 8, !dbg !7063
  %45 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %42, i32 0, i32 1, !dbg !7063
  %46 = extractvalue { i64, i64 } %call18, 1, !dbg !7063
  store i64 %46, i64* %45, align 8, !dbg !7063
  %47 = bitcast %struct.double_int* %off to i8*, !dbg !7063
  %48 = bitcast %struct.double_int* %tmp14 to i8*, !dbg !7063
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %48, i64 16, i1 false), !dbg !7063
  %49 = load %struct.__mpz_struct*, %struct.__mpz_struct** %offset.addr, align 8, !dbg !7064
  %50 = bitcast %struct.double_int* %off to { i64, i64 }*, !dbg !7065
  %51 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %50, i32 0, i32 0, !dbg !7065
  %52 = load i64, i64* %51, align 8, !dbg !7065
  %53 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %50, i32 0, i32 1, !dbg !7065
  %54 = load i64, i64* %53, align 8, !dbg !7065
  call void @mpz_set_double_int(%struct.__mpz_struct* %49, i64 %52, i64 %54, i8 zeroext 0), !dbg !7065
  br label %sw.epilog, !dbg !7066

sw.bb19:                                          ; preds = %entry
  %55 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7067
  %call20 = call %union.tree_node* @build_int_cst_type(%union.tree_node* %55, i64 0), !dbg !7068
  %56 = load %union.tree_node**, %union.tree_node*** %var.addr, align 8, !dbg !7069
  store %union.tree_node* %call20, %union.tree_node** %56, align 8, !dbg !7070
  %57 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7071
  %call22 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %57), !dbg !7072
  %58 = bitcast %struct.double_int* %tmp21 to { i64, i64 }*, !dbg !7072
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %58, i32 0, i32 0, !dbg !7072
  %60 = extractvalue { i64, i64 } %call22, 0, !dbg !7072
  store i64 %60, i64* %59, align 8, !dbg !7072
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %58, i32 0, i32 1, !dbg !7072
  %62 = extractvalue { i64, i64 } %call22, 1, !dbg !7072
  store i64 %62, i64* %61, align 8, !dbg !7072
  %63 = bitcast %struct.double_int* %off to i8*, !dbg !7072
  %64 = bitcast %struct.double_int* %tmp21 to i8*, !dbg !7072
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 16, i1 false), !dbg !7072
  %65 = load %struct.__mpz_struct*, %struct.__mpz_struct** %offset.addr, align 8, !dbg !7073
  %66 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7074
  %base23 = bitcast %union.tree_node* %66 to %struct.tree_base*, !dbg !7074
  %67 = bitcast %struct.tree_base* %base23 to i64*, !dbg !7074
  %bf.load24 = load i64, i64* %67, align 8, !dbg !7074
  %bf.lshr = lshr i64 %bf.load24, 21, !dbg !7074
  %bf.clear25 = and i64 %bf.lshr, 1, !dbg !7074
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !7074
  %conv = trunc i32 %bf.cast26 to i8, !dbg !7074
  %68 = bitcast %struct.double_int* %off to { i64, i64 }*, !dbg !7075
  %69 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %68, i32 0, i32 0, !dbg !7075
  %70 = load i64, i64* %69, align 8, !dbg !7075
  %71 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %68, i32 0, i32 1, !dbg !7075
  %72 = load i64, i64* %71, align 8, !dbg !7075
  call void @mpz_set_double_int(%struct.__mpz_struct* %65, i64 %70, i64 %72, i8 zeroext %conv), !dbg !7075
  br label %sw.epilog, !dbg !7076

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !7077

sw.epilog:                                        ; preds = %sw.default, %sw.bb19, %if.end13, %if.then
  ret void, !dbg !7078
}

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @bound_difference_of_offsetted_base(%union.tree_node* %type, %struct.__mpz_struct* %x, %struct.__mpz_struct* %y, %struct.bounds* %bnds) #0 !dbg !7079 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %x.addr = alloca %struct.__mpz_struct*, align 8
  %y.addr = alloca %struct.__mpz_struct*, align 8
  %bnds.addr = alloca %struct.bounds*, align 8
  %rel = alloca i32, align 4
  %may_wrap = alloca i8, align 1
  %m = alloca [1 x %struct.__mpz_struct], align 16
  %agg.tmp = alloca %struct.double_int, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !7082, metadata !DIExpression()), !dbg !7083
  store %struct.__mpz_struct* %x, %struct.__mpz_struct** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %x.addr, metadata !7084, metadata !DIExpression()), !dbg !7085
  store %struct.__mpz_struct* %y, %struct.__mpz_struct** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %y.addr, metadata !7086, metadata !DIExpression()), !dbg !7087
  store %struct.bounds* %bnds, %struct.bounds** %bnds.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bounds** %bnds.addr, metadata !7088, metadata !DIExpression()), !dbg !7089
  call void @llvm.dbg.declare(metadata i32* %rel, metadata !7090, metadata !DIExpression()), !dbg !7091
  %0 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !7092
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %y.addr, align 8, !dbg !7093
  %call = call i32 @mpz_cmp(%struct.__mpz_struct* %0, %struct.__mpz_struct* %1), !dbg !7094
  store i32 %call, i32* %rel, align 4, !dbg !7091
  call void @llvm.dbg.declare(metadata i8* %may_wrap, metadata !7095, metadata !DIExpression()), !dbg !7096
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7097
  %call1 = call zeroext i8 @nowrap_type_p(%union.tree_node* %2), !dbg !7098
  %tobool = icmp ne i8 %call1, 0, !dbg !7099
  %lnot = xor i1 %tobool, true, !dbg !7099
  %lnot.ext = zext i1 %lnot to i32, !dbg !7099
  %conv = trunc i32 %lnot.ext to i8, !dbg !7099
  store i8 %conv, i8* %may_wrap, align 1, !dbg !7096
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %m, metadata !7100, metadata !DIExpression()), !dbg !7101
  %3 = load i32, i32* %rel, align 4, !dbg !7102
  %cmp = icmp eq i32 %3, 0, !dbg !7104
  br i1 %cmp, label %if.then, label %if.end, !dbg !7105

if.then:                                          ; preds = %entry
  %4 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7106
  %below = getelementptr inbounds %struct.bounds, %struct.bounds* %4, i32 0, i32 0, !dbg !7108
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below, i64 0, i64 0, !dbg !7106
  call void @mpz_set_ui(%struct.__mpz_struct* %arraydecay, i64 0), !dbg !7109
  %5 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7110
  %up = getelementptr inbounds %struct.bounds, %struct.bounds* %5, i32 0, i32 1, !dbg !7111
  %arraydecay3 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up, i64 0, i64 0, !dbg !7110
  call void @mpz_set_ui(%struct.__mpz_struct* %arraydecay3, i64 0), !dbg !7112
  br label %return, !dbg !7113

if.end:                                           ; preds = %entry
  %arraydecay4 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %m, i64 0, i64 0, !dbg !7114
  call void @mpz_init(%struct.__mpz_struct* %arraydecay4), !dbg !7115
  %arraydecay5 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %m, i64 0, i64 0, !dbg !7116
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7117
  %type6 = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !7117
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6, i32 0, i32 6, !dbg !7117
  %bf.load = load i32, i32* %precision, align 4, !dbg !7117
  %bf.clear = and i32 %bf.load, 1023, !dbg !7117
  %call7 = call { i64, i64 } @double_int_mask(i32 %bf.clear), !dbg !7118
  %7 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !7118
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 0, !dbg !7118
  %9 = extractvalue { i64, i64 } %call7, 0, !dbg !7118
  store i64 %9, i64* %8, align 8, !dbg !7118
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 1, !dbg !7118
  %11 = extractvalue { i64, i64 } %call7, 1, !dbg !7118
  store i64 %11, i64* %10, align 8, !dbg !7118
  %12 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !7119
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 0, !dbg !7119
  %14 = load i64, i64* %13, align 8, !dbg !7119
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 1, !dbg !7119
  %16 = load i64, i64* %15, align 8, !dbg !7119
  call void @mpz_set_double_int(%struct.__mpz_struct* %arraydecay5, i64 %14, i64 %16, i8 zeroext 1), !dbg !7119
  %arraydecay8 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %m, i64 0, i64 0, !dbg !7120
  %arraydecay9 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %m, i64 0, i64 0, !dbg !7121
  call void @mpz_add_ui(%struct.__mpz_struct* %arraydecay8, %struct.__mpz_struct* %arraydecay9, i64 1), !dbg !7122
  %17 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7123
  %up10 = getelementptr inbounds %struct.bounds, %struct.bounds* %17, i32 0, i32 1, !dbg !7124
  %arraydecay11 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up10, i64 0, i64 0, !dbg !7123
  %18 = load %struct.__mpz_struct*, %struct.__mpz_struct** %x.addr, align 8, !dbg !7125
  %19 = load %struct.__mpz_struct*, %struct.__mpz_struct** %y.addr, align 8, !dbg !7126
  call void @mpz_sub(%struct.__mpz_struct* %arraydecay11, %struct.__mpz_struct* %18, %struct.__mpz_struct* %19), !dbg !7127
  %20 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7128
  %below12 = getelementptr inbounds %struct.bounds, %struct.bounds* %20, i32 0, i32 0, !dbg !7129
  %arraydecay13 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below12, i64 0, i64 0, !dbg !7128
  %21 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7130
  %up14 = getelementptr inbounds %struct.bounds, %struct.bounds* %21, i32 0, i32 1, !dbg !7131
  %arraydecay15 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up14, i64 0, i64 0, !dbg !7130
  call void @mpz_set(%struct.__mpz_struct* %arraydecay13, %struct.__mpz_struct* %arraydecay15), !dbg !7132
  %22 = load i8, i8* %may_wrap, align 1, !dbg !7133
  %tobool16 = icmp ne i8 %22, 0, !dbg !7133
  br i1 %tobool16, label %if.then17, label %if.end32, !dbg !7135

if.then17:                                        ; preds = %if.end
  %23 = load i32, i32* %rel, align 4, !dbg !7136
  %cmp18 = icmp sgt i32 %23, 0, !dbg !7139
  br i1 %cmp18, label %if.then20, label %if.else, !dbg !7140

if.then20:                                        ; preds = %if.then17
  %24 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7141
  %below21 = getelementptr inbounds %struct.bounds, %struct.bounds* %24, i32 0, i32 0, !dbg !7142
  %arraydecay22 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below21, i64 0, i64 0, !dbg !7141
  %25 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7143
  %below23 = getelementptr inbounds %struct.bounds, %struct.bounds* %25, i32 0, i32 0, !dbg !7144
  %arraydecay24 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below23, i64 0, i64 0, !dbg !7143
  %arraydecay25 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %m, i64 0, i64 0, !dbg !7145
  call void @mpz_sub(%struct.__mpz_struct* %arraydecay22, %struct.__mpz_struct* %arraydecay24, %struct.__mpz_struct* %arraydecay25), !dbg !7146
  br label %if.end31, !dbg !7146

if.else:                                          ; preds = %if.then17
  %26 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7147
  %up26 = getelementptr inbounds %struct.bounds, %struct.bounds* %26, i32 0, i32 1, !dbg !7148
  %arraydecay27 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up26, i64 0, i64 0, !dbg !7147
  %27 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7149
  %up28 = getelementptr inbounds %struct.bounds, %struct.bounds* %27, i32 0, i32 1, !dbg !7150
  %arraydecay29 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up28, i64 0, i64 0, !dbg !7149
  %arraydecay30 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %m, i64 0, i64 0, !dbg !7151
  call void @mpz_add(%struct.__mpz_struct* %arraydecay27, %struct.__mpz_struct* %arraydecay29, %struct.__mpz_struct* %arraydecay30), !dbg !7152
  br label %if.end31

if.end31:                                         ; preds = %if.else, %if.then20
  br label %if.end32, !dbg !7153

if.end32:                                         ; preds = %if.end31, %if.end
  %arraydecay33 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %m, i64 0, i64 0, !dbg !7154
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay33), !dbg !7155
  br label %return, !dbg !7156

return:                                           ; preds = %if.end32, %if.then
  ret void, !dbg !7156
}

; Function Attrs: noinline nounwind uwtable
define internal void @determine_value_range(%union.tree_node* %type, %union.tree_node* %var, %struct.__mpz_struct* %off, %struct.__mpz_struct* %min, %struct.__mpz_struct* %max) #0 !dbg !7157 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %off.addr = alloca %struct.__mpz_struct*, align 8
  %min.addr = alloca %struct.__mpz_struct*, align 8
  %max.addr = alloca %struct.__mpz_struct*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !7160, metadata !DIExpression()), !dbg !7161
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !7162, metadata !DIExpression()), !dbg !7163
  store %struct.__mpz_struct* %off, %struct.__mpz_struct** %off.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %off.addr, metadata !7164, metadata !DIExpression()), !dbg !7165
  store %struct.__mpz_struct* %min, %struct.__mpz_struct** %min.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %min.addr, metadata !7166, metadata !DIExpression()), !dbg !7167
  store %struct.__mpz_struct* %max, %struct.__mpz_struct** %max.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %max.addr, metadata !7168, metadata !DIExpression()), !dbg !7169
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7170
  %call = call i32 @integer_zerop(%union.tree_node* %0), !dbg !7172
  %tobool = icmp ne i32 %call, 0, !dbg !7172
  br i1 %tobool, label %if.then, label %if.end, !dbg !7173

if.then:                                          ; preds = %entry
  %1 = load %struct.__mpz_struct*, %struct.__mpz_struct** %min.addr, align 8, !dbg !7174
  %2 = load %struct.__mpz_struct*, %struct.__mpz_struct** %off.addr, align 8, !dbg !7176
  call void @mpz_set(%struct.__mpz_struct* %1, %struct.__mpz_struct* %2), !dbg !7177
  %3 = load %struct.__mpz_struct*, %struct.__mpz_struct** %max.addr, align 8, !dbg !7178
  %4 = load %struct.__mpz_struct*, %struct.__mpz_struct** %off.addr, align 8, !dbg !7179
  call void @mpz_set(%struct.__mpz_struct* %3, %struct.__mpz_struct* %4), !dbg !7180
  br label %if.end7, !dbg !7181

if.end:                                           ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7182
  %6 = load %struct.__mpz_struct*, %struct.__mpz_struct** %min.addr, align 8, !dbg !7183
  %7 = load %struct.__mpz_struct*, %struct.__mpz_struct** %max.addr, align 8, !dbg !7184
  call void @get_type_static_bounds(%union.tree_node* %5, %struct.__mpz_struct* %6, %struct.__mpz_struct* %7), !dbg !7185
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7186
  %call1 = call zeroext i8 @nowrap_type_p(%union.tree_node* %8), !dbg !7188
  %tobool2 = icmp ne i8 %call1, 0, !dbg !7188
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !7189

if.then3:                                         ; preds = %if.end
  br label %if.end7, !dbg !7190

if.end4:                                          ; preds = %if.end
  %9 = load %struct.__mpz_struct*, %struct.__mpz_struct** %off.addr, align 8, !dbg !7191
  %call5 = call i32 @mpz_sgn(%struct.__mpz_struct* %9), !dbg !7193
  %cmp = icmp slt i32 %call5, 0, !dbg !7194
  br i1 %cmp, label %if.then6, label %if.else, !dbg !7195

if.then6:                                         ; preds = %if.end4
  %10 = load %struct.__mpz_struct*, %struct.__mpz_struct** %max.addr, align 8, !dbg !7196
  %11 = load %struct.__mpz_struct*, %struct.__mpz_struct** %max.addr, align 8, !dbg !7197
  %12 = load %struct.__mpz_struct*, %struct.__mpz_struct** %off.addr, align 8, !dbg !7198
  call void @mpz_add(%struct.__mpz_struct* %10, %struct.__mpz_struct* %11, %struct.__mpz_struct* %12), !dbg !7199
  br label %if.end7, !dbg !7199

if.else:                                          ; preds = %if.end4
  %13 = load %struct.__mpz_struct*, %struct.__mpz_struct** %min.addr, align 8, !dbg !7200
  %14 = load %struct.__mpz_struct*, %struct.__mpz_struct** %min.addr, align 8, !dbg !7201
  %15 = load %struct.__mpz_struct*, %struct.__mpz_struct** %off.addr, align 8, !dbg !7202
  call void @mpz_add(%struct.__mpz_struct* %13, %struct.__mpz_struct* %14, %struct.__mpz_struct* %15), !dbg !7203
  br label %if.end7

if.end7:                                          ; preds = %if.then, %if.then3, %if.else, %if.then6
  ret void, !dbg !7204
}

declare dso_local void @mpz_sub(%struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @refine_bounds_using_guard(%union.tree_node* %type, %union.tree_node* %varx, %struct.__mpz_struct* %offx, %union.tree_node* %vary, %struct.__mpz_struct* %offy, %union.tree_node* %c0, i32 %cmp, %union.tree_node* %c1, %struct.bounds* %bnds) #0 !dbg !7205 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %varx.addr = alloca %union.tree_node*, align 8
  %offx.addr = alloca %struct.__mpz_struct*, align 8
  %vary.addr = alloca %union.tree_node*, align 8
  %offy.addr = alloca %struct.__mpz_struct*, align 8
  %c0.addr = alloca %union.tree_node*, align 8
  %cmp.addr = alloca i32, align 4
  %c1.addr = alloca %union.tree_node*, align 8
  %bnds.addr = alloca %struct.bounds*, align 8
  %varc0 = alloca %union.tree_node*, align 8
  %varc1 = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %ctype = alloca %union.tree_node*, align 8
  %offc0 = alloca [1 x %struct.__mpz_struct], align 16
  %offc1 = alloca [1 x %struct.__mpz_struct], align 16
  %loffx = alloca [1 x %struct.__mpz_struct], align 16
  %loffy = alloca [1 x %struct.__mpz_struct], align 16
  %bnd = alloca [1 x %struct.__mpz_struct], align 16
  %lbound = alloca i8, align 1
  %no_wrap = alloca i8, align 1
  %x_ok = alloca i8, align 1
  %y_ok = alloca i8, align 1
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !7208, metadata !DIExpression()), !dbg !7209
  store %union.tree_node* %varx, %union.tree_node** %varx.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %varx.addr, metadata !7210, metadata !DIExpression()), !dbg !7211
  store %struct.__mpz_struct* %offx, %struct.__mpz_struct** %offx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %offx.addr, metadata !7212, metadata !DIExpression()), !dbg !7213
  store %union.tree_node* %vary, %union.tree_node** %vary.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vary.addr, metadata !7214, metadata !DIExpression()), !dbg !7215
  store %struct.__mpz_struct* %offy, %struct.__mpz_struct** %offy.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %offy.addr, metadata !7216, metadata !DIExpression()), !dbg !7217
  store %union.tree_node* %c0, %union.tree_node** %c0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %c0.addr, metadata !7218, metadata !DIExpression()), !dbg !7219
  store i32 %cmp, i32* %cmp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cmp.addr, metadata !7220, metadata !DIExpression()), !dbg !7221
  store %union.tree_node* %c1, %union.tree_node** %c1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %c1.addr, metadata !7222, metadata !DIExpression()), !dbg !7223
  store %struct.bounds* %bnds, %struct.bounds** %bnds.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bounds** %bnds.addr, metadata !7224, metadata !DIExpression()), !dbg !7225
  call void @llvm.dbg.declare(metadata %union.tree_node** %varc0, metadata !7226, metadata !DIExpression()), !dbg !7227
  call void @llvm.dbg.declare(metadata %union.tree_node** %varc1, metadata !7228, metadata !DIExpression()), !dbg !7229
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !7230, metadata !DIExpression()), !dbg !7231
  call void @llvm.dbg.declare(metadata %union.tree_node** %ctype, metadata !7232, metadata !DIExpression()), !dbg !7233
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %offc0, metadata !7234, metadata !DIExpression()), !dbg !7235
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %offc1, metadata !7236, metadata !DIExpression()), !dbg !7237
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %loffx, metadata !7238, metadata !DIExpression()), !dbg !7239
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %loffy, metadata !7240, metadata !DIExpression()), !dbg !7241
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %bnd, metadata !7242, metadata !DIExpression()), !dbg !7243
  call void @llvm.dbg.declare(metadata i8* %lbound, metadata !7244, metadata !DIExpression()), !dbg !7245
  store i8 0, i8* %lbound, align 1, !dbg !7245
  call void @llvm.dbg.declare(metadata i8* %no_wrap, metadata !7246, metadata !DIExpression()), !dbg !7247
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7248
  %call = call zeroext i8 @nowrap_type_p(%union.tree_node* %0), !dbg !7249
  store i8 %call, i8* %no_wrap, align 1, !dbg !7247
  call void @llvm.dbg.declare(metadata i8* %x_ok, metadata !7250, metadata !DIExpression()), !dbg !7251
  call void @llvm.dbg.declare(metadata i8* %y_ok, metadata !7252, metadata !DIExpression()), !dbg !7253
  %1 = load i32, i32* %cmp.addr, align 4, !dbg !7254
  switch i32 %1, label %sw.default [
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 101, label %sw.bb5
    i32 102, label %sw.bb6
  ], !dbg !7255

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry
  %2 = load %union.tree_node*, %union.tree_node** %c0.addr, align 8, !dbg !7256
  %call1 = call %union.tree_node* @tree_strip_sign_nop_conversions(%union.tree_node* %2), !dbg !7256
  store %union.tree_node* %call1, %union.tree_node** %c0.addr, align 8, !dbg !7256
  %3 = load %union.tree_node*, %union.tree_node** %c1.addr, align 8, !dbg !7258
  %call2 = call %union.tree_node* @tree_strip_sign_nop_conversions(%union.tree_node* %3), !dbg !7258
  store %union.tree_node* %call2, %union.tree_node** %c1.addr, align 8, !dbg !7258
  %4 = load %union.tree_node*, %union.tree_node** %c0.addr, align 8, !dbg !7259
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !7259
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7259
  %5 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !7259
  store %union.tree_node* %5, %union.tree_node** %ctype, align 8, !dbg !7260
  %6 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !7261
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7263
  %call4 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %6, %union.tree_node* %7), !dbg !7264
  %tobool = icmp ne i8 %call4, 0, !dbg !7264
  br i1 %tobool, label %if.end, label %if.then, !dbg !7265

if.then:                                          ; preds = %sw.bb
  br label %return, !dbg !7266

if.end:                                           ; preds = %sw.bb
  br label %sw.epilog, !dbg !7267

sw.bb5:                                           ; preds = %entry
  br label %return, !dbg !7268

sw.bb6:                                           ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %c1.addr, align 8, !dbg !7269
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7269
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !7269
  %bf.load = load i64, i64* %9, align 8, !dbg !7269
  %bf.clear = and i64 %bf.load, 65535, !dbg !7269
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7269
  %cmp7 = icmp ne i32 %bf.cast, 23, !dbg !7271
  br i1 %cmp7, label %if.then25, label %lor.lhs.false, !dbg !7272

lor.lhs.false:                                    ; preds = %sw.bb6
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7273
  %base8 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !7273
  %11 = bitcast %struct.tree_base* %base8 to i64*, !dbg !7273
  %bf.load9 = load i64, i64* %11, align 8, !dbg !7273
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !7273
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !7273
  %cmp12 = icmp eq i32 %bf.cast11, 6, !dbg !7273
  br i1 %cmp12, label %if.end26, label %lor.lhs.false13, !dbg !7273

lor.lhs.false13:                                  ; preds = %lor.lhs.false
  %12 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7273
  %base14 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !7273
  %13 = bitcast %struct.tree_base* %base14 to i64*, !dbg !7273
  %bf.load15 = load i64, i64* %13, align 8, !dbg !7273
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !7273
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !7273
  %cmp18 = icmp eq i32 %bf.cast17, 7, !dbg !7273
  br i1 %cmp18, label %if.end26, label %lor.lhs.false19, !dbg !7273

lor.lhs.false19:                                  ; preds = %lor.lhs.false13
  %14 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7273
  %base20 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !7273
  %15 = bitcast %struct.tree_base* %base20 to i64*, !dbg !7273
  %bf.load21 = load i64, i64* %15, align 8, !dbg !7273
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !7273
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !7273
  %cmp24 = icmp eq i32 %bf.cast23, 8, !dbg !7273
  br i1 %cmp24, label %if.end26, label %if.then25, !dbg !7274

if.then25:                                        ; preds = %lor.lhs.false19, %sw.bb6
  br label %return, !dbg !7275

if.end26:                                         ; preds = %lor.lhs.false19, %lor.lhs.false13, %lor.lhs.false
  %16 = load %union.tree_node*, %union.tree_node** %c0.addr, align 8, !dbg !7276
  %common27 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !7276
  %type28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 2, !dbg !7276
  %17 = load %union.tree_node*, %union.tree_node** %type28, align 8, !dbg !7276
  store %union.tree_node* %17, %union.tree_node** %ctype, align 8, !dbg !7277
  %18 = load %union.tree_node*, %union.tree_node** %ctype, align 8, !dbg !7278
  %type29 = bitcast %union.tree_node* %18 to %struct.tree_type*, !dbg !7278
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type29, i32 0, i32 6, !dbg !7278
  %bf.load30 = load i32, i32* %precision, align 4, !dbg !7278
  %bf.clear31 = and i32 %bf.load30, 1023, !dbg !7278
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7280
  %type32 = bitcast %union.tree_node* %19 to %struct.tree_type*, !dbg !7280
  %precision33 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type32, i32 0, i32 6, !dbg !7280
  %bf.load34 = load i32, i32* %precision33, align 4, !dbg !7280
  %bf.clear35 = and i32 %bf.load34, 1023, !dbg !7280
  %cmp36 = icmp ne i32 %bf.clear31, %bf.clear35, !dbg !7281
  br i1 %cmp36, label %if.then37, label %if.end38, !dbg !7282

if.then37:                                        ; preds = %if.end26
  br label %return, !dbg !7283

if.end38:                                         ; preds = %if.end26
  %20 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7284
  %21 = load %union.tree_node*, %union.tree_node** %c0.addr, align 8, !dbg !7284
  %call39 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %20, %union.tree_node* %21), !dbg !7284
  store %union.tree_node* %call39, %union.tree_node** %c0.addr, align 8, !dbg !7285
  %22 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7286
  %23 = load %union.tree_node*, %union.tree_node** %c1.addr, align 8, !dbg !7286
  %call40 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %22, %union.tree_node* %23), !dbg !7286
  store %union.tree_node* %call40, %union.tree_node** %c1.addr, align 8, !dbg !7287
  %24 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7288
  %type41 = bitcast %union.tree_node* %24 to %struct.tree_type*, !dbg !7288
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type41, i32 0, i32 13, !dbg !7288
  %25 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !7288
  %tobool42 = icmp ne %union.tree_node* %25, null, !dbg !7288
  br i1 %tobool42, label %land.lhs.true, label %if.end48, !dbg !7290

land.lhs.true:                                    ; preds = %if.end38
  %26 = load %union.tree_node*, %union.tree_node** %c1.addr, align 8, !dbg !7291
  %27 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7292
  %type43 = bitcast %union.tree_node* %27 to %struct.tree_type*, !dbg !7292
  %minval44 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type43, i32 0, i32 13, !dbg !7292
  %28 = load %union.tree_node*, %union.tree_node** %minval44, align 8, !dbg !7292
  %call45 = call i32 @operand_equal_p(%union.tree_node* %26, %union.tree_node* %28, i32 0), !dbg !7293
  %tobool46 = icmp ne i32 %call45, 0, !dbg !7293
  br i1 %tobool46, label %if.then47, label %if.end48, !dbg !7294

if.then47:                                        ; preds = %land.lhs.true
  store i32 99, i32* %cmp.addr, align 4, !dbg !7295
  br label %sw.epilog, !dbg !7297

if.end48:                                         ; preds = %land.lhs.true, %if.end38
  %29 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7298
  %type49 = bitcast %union.tree_node* %29 to %struct.tree_type*, !dbg !7298
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type49, i32 0, i32 14, !dbg !7298
  %30 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !7298
  %tobool50 = icmp ne %union.tree_node* %30, null, !dbg !7298
  br i1 %tobool50, label %land.lhs.true51, label %if.end57, !dbg !7300

land.lhs.true51:                                  ; preds = %if.end48
  %31 = load %union.tree_node*, %union.tree_node** %c1.addr, align 8, !dbg !7301
  %32 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7302
  %type52 = bitcast %union.tree_node* %32 to %struct.tree_type*, !dbg !7302
  %maxval53 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type52, i32 0, i32 14, !dbg !7302
  %33 = load %union.tree_node*, %union.tree_node** %maxval53, align 8, !dbg !7302
  %call54 = call i32 @operand_equal_p(%union.tree_node* %31, %union.tree_node* %33, i32 0), !dbg !7303
  %tobool55 = icmp ne i32 %call54, 0, !dbg !7303
  br i1 %tobool55, label %if.then56, label %if.end57, !dbg !7304

if.then56:                                        ; preds = %land.lhs.true51
  store i32 97, i32* %cmp.addr, align 4, !dbg !7305
  br label %sw.epilog, !dbg !7307

if.end57:                                         ; preds = %land.lhs.true51, %if.end48
  br label %return, !dbg !7308

sw.default:                                       ; preds = %entry
  br label %return, !dbg !7309

sw.epilog:                                        ; preds = %if.then56, %if.then47, %if.end
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offc0, i64 0, i64 0, !dbg !7310
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !7311
  %arraydecay58 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offc1, i64 0, i64 0, !dbg !7312
  call void @mpz_init(%struct.__mpz_struct* %arraydecay58), !dbg !7313
  %34 = load %union.tree_node*, %union.tree_node** %c0.addr, align 8, !dbg !7314
  %call59 = call %union.tree_node* @expand_simple_operations(%union.tree_node* %34), !dbg !7315
  %arraydecay60 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offc0, i64 0, i64 0, !dbg !7316
  call void @split_to_var_and_offset(%union.tree_node* %call59, %union.tree_node** %varc0, %struct.__mpz_struct* %arraydecay60), !dbg !7317
  %35 = load %union.tree_node*, %union.tree_node** %c1.addr, align 8, !dbg !7318
  %call61 = call %union.tree_node* @expand_simple_operations(%union.tree_node* %35), !dbg !7319
  %arraydecay62 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offc1, i64 0, i64 0, !dbg !7320
  call void @split_to_var_and_offset(%union.tree_node* %call61, %union.tree_node** %varc1, %struct.__mpz_struct* %arraydecay62), !dbg !7321
  %36 = load %union.tree_node*, %union.tree_node** %varx.addr, align 8, !dbg !7322
  %37 = load %union.tree_node*, %union.tree_node** %varc1, align 8, !dbg !7324
  %call63 = call i32 @operand_equal_p(%union.tree_node* %36, %union.tree_node* %37, i32 0), !dbg !7325
  %tobool64 = icmp ne i32 %call63, 0, !dbg !7325
  br i1 %tobool64, label %if.then65, label %if.end69, !dbg !7326

if.then65:                                        ; preds = %sw.epilog
  %38 = load %union.tree_node*, %union.tree_node** %varc0, align 8, !dbg !7327
  store %union.tree_node* %38, %union.tree_node** %tmp, align 8, !dbg !7329
  %39 = load %union.tree_node*, %union.tree_node** %varc1, align 8, !dbg !7330
  store %union.tree_node* %39, %union.tree_node** %varc0, align 8, !dbg !7331
  %40 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !7332
  store %union.tree_node* %40, %union.tree_node** %varc1, align 8, !dbg !7333
  %arraydecay66 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offc0, i64 0, i64 0, !dbg !7334
  %arraydecay67 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offc1, i64 0, i64 0, !dbg !7335
  call void @mpz_swap(%struct.__mpz_struct* %arraydecay66, %struct.__mpz_struct* %arraydecay67), !dbg !7336
  %41 = load i32, i32* %cmp.addr, align 4, !dbg !7337
  %call68 = call i32 @swap_tree_comparison(i32 %41), !dbg !7338
  store i32 %call68, i32* %cmp.addr, align 4, !dbg !7339
  br label %if.end69, !dbg !7340

if.end69:                                         ; preds = %if.then65, %sw.epilog
  %42 = load %union.tree_node*, %union.tree_node** %varx.addr, align 8, !dbg !7341
  %43 = load %union.tree_node*, %union.tree_node** %varc0, align 8, !dbg !7343
  %call70 = call i32 @operand_equal_p(%union.tree_node* %42, %union.tree_node* %43, i32 0), !dbg !7344
  %tobool71 = icmp ne i32 %call70, 0, !dbg !7344
  br i1 %tobool71, label %lor.lhs.false72, label %if.then75, !dbg !7345

lor.lhs.false72:                                  ; preds = %if.end69
  %44 = load %union.tree_node*, %union.tree_node** %vary.addr, align 8, !dbg !7346
  %45 = load %union.tree_node*, %union.tree_node** %varc1, align 8, !dbg !7347
  %call73 = call i32 @operand_equal_p(%union.tree_node* %44, %union.tree_node* %45, i32 0), !dbg !7348
  %tobool74 = icmp ne i32 %call73, 0, !dbg !7348
  br i1 %tobool74, label %if.end76, label %if.then75, !dbg !7349

if.then75:                                        ; preds = %lor.lhs.false72, %if.end69
  br label %end, !dbg !7350

if.end76:                                         ; preds = %lor.lhs.false72
  %arraydecay77 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %loffx, i64 0, i64 0, !dbg !7351
  %46 = load %struct.__mpz_struct*, %struct.__mpz_struct** %offx.addr, align 8, !dbg !7352
  call void @mpz_init_set(%struct.__mpz_struct* %arraydecay77, %struct.__mpz_struct* %46), !dbg !7353
  %arraydecay78 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %loffy, i64 0, i64 0, !dbg !7354
  %47 = load %struct.__mpz_struct*, %struct.__mpz_struct** %offy.addr, align 8, !dbg !7355
  call void @mpz_init_set(%struct.__mpz_struct* %arraydecay78, %struct.__mpz_struct* %47), !dbg !7356
  %48 = load i32, i32* %cmp.addr, align 4, !dbg !7357
  %cmp79 = icmp eq i32 %48, 99, !dbg !7359
  br i1 %cmp79, label %if.then82, label %lor.lhs.false80, !dbg !7360

lor.lhs.false80:                                  ; preds = %if.end76
  %49 = load i32, i32* %cmp.addr, align 4, !dbg !7361
  %cmp81 = icmp eq i32 %49, 100, !dbg !7362
  br i1 %cmp81, label %if.then82, label %if.end88, !dbg !7363

if.then82:                                        ; preds = %lor.lhs.false80, %if.end76
  %50 = load %union.tree_node*, %union.tree_node** %varx.addr, align 8, !dbg !7364
  store %union.tree_node* %50, %union.tree_node** %tmp, align 8, !dbg !7366
  %51 = load %union.tree_node*, %union.tree_node** %vary.addr, align 8, !dbg !7367
  store %union.tree_node* %51, %union.tree_node** %varx.addr, align 8, !dbg !7368
  %52 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !7369
  store %union.tree_node* %52, %union.tree_node** %vary.addr, align 8, !dbg !7370
  %arraydecay83 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offc0, i64 0, i64 0, !dbg !7371
  %arraydecay84 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offc1, i64 0, i64 0, !dbg !7372
  call void @mpz_swap(%struct.__mpz_struct* %arraydecay83, %struct.__mpz_struct* %arraydecay84), !dbg !7373
  %arraydecay85 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %loffx, i64 0, i64 0, !dbg !7374
  %arraydecay86 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %loffy, i64 0, i64 0, !dbg !7375
  call void @mpz_swap(%struct.__mpz_struct* %arraydecay85, %struct.__mpz_struct* %arraydecay86), !dbg !7376
  %53 = load i32, i32* %cmp.addr, align 4, !dbg !7377
  %call87 = call i32 @swap_tree_comparison(i32 %53), !dbg !7378
  store i32 %call87, i32* %cmp.addr, align 4, !dbg !7379
  store i8 1, i8* %lbound, align 1, !dbg !7380
  br label %if.end88, !dbg !7381

if.end88:                                         ; preds = %if.then82, %lor.lhs.false80
  %54 = load i8, i8* %no_wrap, align 1, !dbg !7382
  %tobool89 = icmp ne i8 %54, 0, !dbg !7382
  br i1 %tobool89, label %if.then90, label %if.else, !dbg !7384

if.then90:                                        ; preds = %if.end88
  store i8 1, i8* %x_ok, align 1, !dbg !7385
  store i8 1, i8* %y_ok, align 1, !dbg !7387
  br label %if.end108, !dbg !7388

if.else:                                          ; preds = %if.end88
  %55 = load %union.tree_node*, %union.tree_node** %varx.addr, align 8, !dbg !7389
  %call91 = call i32 @integer_zerop(%union.tree_node* %55), !dbg !7391
  %tobool92 = icmp ne i32 %call91, 0, !dbg !7391
  br i1 %tobool92, label %lor.end, label %lor.rhs, !dbg !7392

lor.rhs:                                          ; preds = %if.else
  %arraydecay93 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %loffx, i64 0, i64 0, !dbg !7393
  %arraydecay94 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offc0, i64 0, i64 0, !dbg !7394
  %call95 = call i32 @mpz_cmp(%struct.__mpz_struct* %arraydecay93, %struct.__mpz_struct* %arraydecay94), !dbg !7395
  %cmp96 = icmp sge i32 %call95, 0, !dbg !7396
  br label %lor.end, !dbg !7392

lor.end:                                          ; preds = %lor.rhs, %if.else
  %56 = phi i1 [ true, %if.else ], [ %cmp96, %lor.rhs ]
  %lor.ext = zext i1 %56 to i32, !dbg !7392
  %conv = trunc i32 %lor.ext to i8, !dbg !7397
  store i8 %conv, i8* %x_ok, align 1, !dbg !7398
  %57 = load %union.tree_node*, %union.tree_node** %vary.addr, align 8, !dbg !7399
  %call97 = call i32 @integer_zerop(%union.tree_node* %57), !dbg !7400
  %tobool98 = icmp ne i32 %call97, 0, !dbg !7400
  br i1 %tobool98, label %lor.end105, label %lor.rhs99, !dbg !7401

lor.rhs99:                                        ; preds = %lor.end
  %arraydecay100 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %loffy, i64 0, i64 0, !dbg !7402
  %arraydecay101 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offc1, i64 0, i64 0, !dbg !7403
  %call102 = call i32 @mpz_cmp(%struct.__mpz_struct* %arraydecay100, %struct.__mpz_struct* %arraydecay101), !dbg !7404
  %cmp103 = icmp sle i32 %call102, 0, !dbg !7405
  br label %lor.end105, !dbg !7401

lor.end105:                                       ; preds = %lor.rhs99, %lor.end
  %58 = phi i1 [ true, %lor.end ], [ %cmp103, %lor.rhs99 ]
  %lor.ext106 = zext i1 %58 to i32, !dbg !7401
  %conv107 = trunc i32 %lor.ext106 to i8, !dbg !7406
  store i8 %conv107, i8* %y_ok, align 1, !dbg !7407
  br label %if.end108

if.end108:                                        ; preds = %lor.end105, %if.then90
  %59 = load i8, i8* %x_ok, align 1, !dbg !7408
  %conv109 = zext i8 %59 to i32, !dbg !7408
  %tobool110 = icmp ne i32 %conv109, 0, !dbg !7408
  br i1 %tobool110, label %land.lhs.true111, label %if.end158, !dbg !7410

land.lhs.true111:                                 ; preds = %if.end108
  %60 = load i8, i8* %y_ok, align 1, !dbg !7411
  %conv112 = zext i8 %60 to i32, !dbg !7411
  %tobool113 = icmp ne i32 %conv112, 0, !dbg !7411
  br i1 %tobool113, label %if.then114, label %if.end158, !dbg !7412

if.then114:                                       ; preds = %land.lhs.true111
  %arraydecay115 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %bnd, i64 0, i64 0, !dbg !7413
  call void @mpz_init(%struct.__mpz_struct* %arraydecay115), !dbg !7415
  %arraydecay116 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %bnd, i64 0, i64 0, !dbg !7416
  %arraydecay117 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %loffx, i64 0, i64 0, !dbg !7417
  %arraydecay118 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %loffy, i64 0, i64 0, !dbg !7418
  call void @mpz_sub(%struct.__mpz_struct* %arraydecay116, %struct.__mpz_struct* %arraydecay117, %struct.__mpz_struct* %arraydecay118), !dbg !7419
  %arraydecay119 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %bnd, i64 0, i64 0, !dbg !7420
  %arraydecay120 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %bnd, i64 0, i64 0, !dbg !7421
  %arraydecay121 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offc1, i64 0, i64 0, !dbg !7422
  call void @mpz_add(%struct.__mpz_struct* %arraydecay119, %struct.__mpz_struct* %arraydecay120, %struct.__mpz_struct* %arraydecay121), !dbg !7423
  %arraydecay122 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %bnd, i64 0, i64 0, !dbg !7424
  %arraydecay123 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %bnd, i64 0, i64 0, !dbg !7425
  %arraydecay124 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offc0, i64 0, i64 0, !dbg !7426
  call void @mpz_sub(%struct.__mpz_struct* %arraydecay122, %struct.__mpz_struct* %arraydecay123, %struct.__mpz_struct* %arraydecay124), !dbg !7427
  %61 = load i32, i32* %cmp.addr, align 4, !dbg !7428
  %cmp125 = icmp eq i32 %61, 97, !dbg !7430
  br i1 %cmp125, label %if.then127, label %if.end130, !dbg !7431

if.then127:                                       ; preds = %if.then114
  %arraydecay128 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %bnd, i64 0, i64 0, !dbg !7432
  %arraydecay129 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %bnd, i64 0, i64 0, !dbg !7433
  call void @mpz_sub_ui(%struct.__mpz_struct* %arraydecay128, %struct.__mpz_struct* %arraydecay129, i64 1), !dbg !7434
  br label %if.end130, !dbg !7434

if.end130:                                        ; preds = %if.then127, %if.then114
  %62 = load i8, i8* %lbound, align 1, !dbg !7435
  %tobool131 = icmp ne i8 %62, 0, !dbg !7435
  br i1 %tobool131, label %if.then132, label %if.else145, !dbg !7437

if.then132:                                       ; preds = %if.end130
  %arraydecay133 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %bnd, i64 0, i64 0, !dbg !7438
  %arraydecay134 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %bnd, i64 0, i64 0, !dbg !7440
  call void @mpz_neg(%struct.__mpz_struct* %arraydecay133, %struct.__mpz_struct* %arraydecay134), !dbg !7441
  %63 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7442
  %below = getelementptr inbounds %struct.bounds, %struct.bounds* %63, i32 0, i32 0, !dbg !7444
  %arraydecay135 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below, i64 0, i64 0, !dbg !7442
  %arraydecay136 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %bnd, i64 0, i64 0, !dbg !7445
  %call137 = call i32 @mpz_cmp(%struct.__mpz_struct* %arraydecay135, %struct.__mpz_struct* %arraydecay136), !dbg !7446
  %cmp138 = icmp slt i32 %call137, 0, !dbg !7447
  br i1 %cmp138, label %if.then140, label %if.end144, !dbg !7448

if.then140:                                       ; preds = %if.then132
  %64 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7449
  %below141 = getelementptr inbounds %struct.bounds, %struct.bounds* %64, i32 0, i32 0, !dbg !7450
  %arraydecay142 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below141, i64 0, i64 0, !dbg !7449
  %arraydecay143 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %bnd, i64 0, i64 0, !dbg !7451
  call void @mpz_set(%struct.__mpz_struct* %arraydecay142, %struct.__mpz_struct* %arraydecay143), !dbg !7452
  br label %if.end144, !dbg !7452

if.end144:                                        ; preds = %if.then140, %if.then132
  br label %if.end156, !dbg !7453

if.else145:                                       ; preds = %if.end130
  %arraydecay146 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %bnd, i64 0, i64 0, !dbg !7454
  %65 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7457
  %up = getelementptr inbounds %struct.bounds, %struct.bounds* %65, i32 0, i32 1, !dbg !7458
  %arraydecay147 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up, i64 0, i64 0, !dbg !7457
  %call148 = call i32 @mpz_cmp(%struct.__mpz_struct* %arraydecay146, %struct.__mpz_struct* %arraydecay147), !dbg !7459
  %cmp149 = icmp slt i32 %call148, 0, !dbg !7460
  br i1 %cmp149, label %if.then151, label %if.end155, !dbg !7461

if.then151:                                       ; preds = %if.else145
  %66 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7462
  %up152 = getelementptr inbounds %struct.bounds, %struct.bounds* %66, i32 0, i32 1, !dbg !7463
  %arraydecay153 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up152, i64 0, i64 0, !dbg !7462
  %arraydecay154 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %bnd, i64 0, i64 0, !dbg !7464
  call void @mpz_set(%struct.__mpz_struct* %arraydecay153, %struct.__mpz_struct* %arraydecay154), !dbg !7465
  br label %if.end155, !dbg !7465

if.end155:                                        ; preds = %if.then151, %if.else145
  br label %if.end156

if.end156:                                        ; preds = %if.end155, %if.end144
  %arraydecay157 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %bnd, i64 0, i64 0, !dbg !7466
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay157), !dbg !7467
  br label %if.end158, !dbg !7468

if.end158:                                        ; preds = %if.end156, %land.lhs.true111, %if.end108
  %arraydecay159 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %loffx, i64 0, i64 0, !dbg !7469
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay159), !dbg !7470
  %arraydecay160 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %loffy, i64 0, i64 0, !dbg !7471
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay160), !dbg !7472
  br label %end, !dbg !7472

end:                                              ; preds = %if.end158, %if.then75
  call void @llvm.dbg.label(metadata !7473), !dbg !7474
  %arraydecay161 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offc0, i64 0, i64 0, !dbg !7475
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay161), !dbg !7476
  %arraydecay162 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offc1, i64 0, i64 0, !dbg !7477
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay162), !dbg !7478
  br label %return, !dbg !7479

return:                                           ; preds = %end, %sw.default, %if.end57, %if.then37, %if.then25, %sw.bb5, %if.then
  ret void, !dbg !7479
}

declare dso_local %struct.basic_block_def* @get_immediate_dominator(i32, %struct.basic_block_def*) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local void @mpz_set_ui(%struct.__mpz_struct*, i64) #2

declare dso_local { i64, i64 } @tree_to_double_int(%union.tree_node*) #2

declare dso_local { i64, i64 } @double_int_neg(i64, i64) #2

declare dso_local { i64, i64 } @double_int_sext(i64, i64, i32) #2

declare dso_local void @mpz_set_double_int(%struct.__mpz_struct*, i64, i64, i8 zeroext) #2

declare dso_local %union.tree_node* @build_int_cst_type(%union.tree_node*, i64) #2

declare dso_local i32 @mpz_cmp(%struct.__mpz_struct*, %struct.__mpz_struct*) #2

declare dso_local { i64, i64 } @double_int_mask(i32) #2

declare dso_local void @mpz_add_ui(%struct.__mpz_struct*, %struct.__mpz_struct*, i64) #2

declare dso_local void @mpz_set(%struct.__mpz_struct*, %struct.__mpz_struct*) #2

declare dso_local void @mpz_add(%struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*) #2

declare dso_local void @get_type_static_bounds(%union.tree_node*, %struct.__mpz_struct*, %struct.__mpz_struct*) #2

declare dso_local i32 @mpz_sgn(%struct.__mpz_struct*) #2

declare dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @mpz_swap(%struct.__mpz_struct*, %struct.__mpz_struct*) #2

declare dso_local void @mpz_init_set(%struct.__mpz_struct*, %struct.__mpz_struct*) #2

declare dso_local void @mpz_sub_ui(%struct.__mpz_struct*, %struct.__mpz_struct*, i64) #2

declare dso_local void @mpz_neg(%struct.__mpz_struct*, %struct.__mpz_struct*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @bounds_negate(%struct.bounds* %bnds) #0 !dbg !7480 {
entry:
  %bnds.addr = alloca %struct.bounds*, align 8
  %tmp = alloca [1 x %struct.__mpz_struct], align 16
  store %struct.bounds* %bnds, %struct.bounds** %bnds.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bounds** %bnds.addr, metadata !7483, metadata !DIExpression()), !dbg !7484
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %tmp, metadata !7485, metadata !DIExpression()), !dbg !7486
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tmp, i64 0, i64 0, !dbg !7487
  %0 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7488
  %up = getelementptr inbounds %struct.bounds, %struct.bounds* %0, i32 0, i32 1, !dbg !7489
  %arraydecay1 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up, i64 0, i64 0, !dbg !7488
  call void @mpz_init_set(%struct.__mpz_struct* %arraydecay, %struct.__mpz_struct* %arraydecay1), !dbg !7490
  %1 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7491
  %up2 = getelementptr inbounds %struct.bounds, %struct.bounds* %1, i32 0, i32 1, !dbg !7492
  %arraydecay3 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up2, i64 0, i64 0, !dbg !7491
  %2 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7493
  %below = getelementptr inbounds %struct.bounds, %struct.bounds* %2, i32 0, i32 0, !dbg !7494
  %arraydecay4 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below, i64 0, i64 0, !dbg !7493
  call void @mpz_neg(%struct.__mpz_struct* %arraydecay3, %struct.__mpz_struct* %arraydecay4), !dbg !7495
  %3 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7496
  %below5 = getelementptr inbounds %struct.bounds, %struct.bounds* %3, i32 0, i32 0, !dbg !7497
  %arraydecay6 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below5, i64 0, i64 0, !dbg !7496
  %arraydecay7 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tmp, i64 0, i64 0, !dbg !7498
  call void @mpz_neg(%struct.__mpz_struct* %arraydecay6, %struct.__mpz_struct* %arraydecay7), !dbg !7499
  %arraydecay8 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tmp, i64 0, i64 0, !dbg !7500
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay8), !dbg !7501
  ret void, !dbg !7502
}

; Function Attrs: noinline nounwind uwtable
define internal void @number_of_iterations_ne_max(%struct.__mpz_struct* %bnd, i8 zeroext %no_overflow, %union.tree_node* %c, %union.tree_node* %s, %struct.bounds* %bnds) #0 !dbg !7503 {
entry:
  %bnd.addr = alloca %struct.__mpz_struct*, align 8
  %no_overflow.addr = alloca i8, align 1
  %c.addr = alloca %union.tree_node*, align 8
  %s.addr = alloca %union.tree_node*, align 8
  %bnds.addr = alloca %struct.bounds*, align 8
  %max = alloca %struct.double_int, align 8
  %d = alloca [1 x %struct.__mpz_struct], align 16
  %tmp = alloca %struct.double_int, align 8
  %agg.tmp = alloca %struct.double_int, align 8
  %agg.tmp22 = alloca %struct.double_int, align 8
  %agg.tmp34 = alloca %struct.double_int, align 8
  store %struct.__mpz_struct* %bnd, %struct.__mpz_struct** %bnd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__mpz_struct** %bnd.addr, metadata !7506, metadata !DIExpression()), !dbg !7507
  store i8 %no_overflow, i8* %no_overflow.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %no_overflow.addr, metadata !7508, metadata !DIExpression()), !dbg !7509
  store %union.tree_node* %c, %union.tree_node** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %c.addr, metadata !7510, metadata !DIExpression()), !dbg !7511
  store %union.tree_node* %s, %union.tree_node** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %s.addr, metadata !7512, metadata !DIExpression()), !dbg !7513
  store %struct.bounds* %bnds, %struct.bounds** %bnds.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bounds** %bnds.addr, metadata !7514, metadata !DIExpression()), !dbg !7515
  call void @llvm.dbg.declare(metadata %struct.double_int* %max, metadata !7516, metadata !DIExpression()), !dbg !7517
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %d, metadata !7518, metadata !DIExpression()), !dbg !7519
  %0 = load i8, i8* %no_overflow.addr, align 1, !dbg !7520
  %tobool = icmp ne i8 %0, 0, !dbg !7520
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !7522

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %c.addr, align 8, !dbg !7523
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !7523
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7523
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7523
  %3 = load %union.tree_node*, %union.tree_node** %c.addr, align 8, !dbg !7524
  %4 = load %union.tree_node*, %union.tree_node** %s.addr, align 8, !dbg !7525
  %call = call i32 @multiple_of_p(%union.tree_node* %2, %union.tree_node* %3, %union.tree_node* %4), !dbg !7526
  %tobool1 = icmp ne i32 %call, 0, !dbg !7526
  br i1 %tobool1, label %if.end, label %if.then, !dbg !7527

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %c.addr, align 8, !dbg !7528
  %common2 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !7528
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !7528
  %6 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !7528
  %type4 = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !7528
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4, i32 0, i32 6, !dbg !7528
  %bf.load = load i32, i32* %precision, align 4, !dbg !7528
  %bf.clear = and i32 %bf.load, 1023, !dbg !7528
  %conv = zext i32 %bf.clear to i64, !dbg !7528
  %7 = load %union.tree_node*, %union.tree_node** %s.addr, align 8, !dbg !7530
  %call5 = call %union.tree_node* @num_ending_zeros(%union.tree_node* %7), !dbg !7531
  %call6 = call i64 @tree_low_cst(%union.tree_node* %call5, i32 1), !dbg !7532
  %sub = sub nsw i64 %conv, %call6, !dbg !7533
  %conv7 = trunc i64 %sub to i32, !dbg !7528
  %call8 = call { i64, i64 } @double_int_mask(i32 %conv7), !dbg !7534
  %8 = bitcast %struct.double_int* %tmp to { i64, i64 }*, !dbg !7534
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0, !dbg !7534
  %10 = extractvalue { i64, i64 } %call8, 0, !dbg !7534
  store i64 %10, i64* %9, align 8, !dbg !7534
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1, !dbg !7534
  %12 = extractvalue { i64, i64 } %call8, 1, !dbg !7534
  store i64 %12, i64* %11, align 8, !dbg !7534
  %13 = bitcast %struct.double_int* %max to i8*, !dbg !7534
  %14 = bitcast %struct.double_int* %tmp to i8*, !dbg !7534
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 16, i1 false), !dbg !7534
  %15 = load %struct.__mpz_struct*, %struct.__mpz_struct** %bnd.addr, align 8, !dbg !7535
  %16 = bitcast %struct.double_int* %max to { i64, i64 }*, !dbg !7536
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 0, !dbg !7536
  %18 = load i64, i64* %17, align 8, !dbg !7536
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %16, i32 0, i32 1, !dbg !7536
  %20 = load i64, i64* %19, align 8, !dbg !7536
  call void @mpz_set_double_int(%struct.__mpz_struct* %15, i64 %18, i64 %20, i8 zeroext 1), !dbg !7536
  br label %return, !dbg !7537

if.end:                                           ; preds = %land.lhs.true, %entry
  %21 = load i8, i8* %no_overflow.addr, align 1, !dbg !7538
  %conv9 = zext i8 %21 to i32, !dbg !7538
  %tobool10 = icmp ne i32 %conv9, 0, !dbg !7538
  br i1 %tobool10, label %if.then13, label %lor.lhs.false, !dbg !7540

lor.lhs.false:                                    ; preds = %if.end
  %22 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7541
  %below = getelementptr inbounds %struct.bounds, %struct.bounds* %22, i32 0, i32 0, !dbg !7542
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below, i64 0, i64 0, !dbg !7541
  %call11 = call i32 @mpz_sgn(%struct.__mpz_struct* %arraydecay), !dbg !7543
  %cmp = icmp sge i32 %call11, 0, !dbg !7544
  br i1 %cmp, label %if.then13, label %if.else, !dbg !7545

if.then13:                                        ; preds = %lor.lhs.false, %if.end
  %23 = load %struct.__mpz_struct*, %struct.__mpz_struct** %bnd.addr, align 8, !dbg !7546
  %24 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7547
  %up = getelementptr inbounds %struct.bounds, %struct.bounds* %24, i32 0, i32 1, !dbg !7548
  %arraydecay14 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up, i64 0, i64 0, !dbg !7547
  call void @mpz_set(%struct.__mpz_struct* %23, %struct.__mpz_struct* %arraydecay14), !dbg !7549
  br label %if.end31, !dbg !7549

if.else:                                          ; preds = %lor.lhs.false
  %25 = load %union.tree_node*, %union.tree_node** %c.addr, align 8, !dbg !7550
  %base = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !7550
  %26 = bitcast %struct.tree_base* %base to i64*, !dbg !7550
  %bf.load15 = load i64, i64* %26, align 8, !dbg !7550
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !7550
  %bf.cast = trunc i64 %bf.clear16 to i32, !dbg !7550
  %cmp17 = icmp eq i32 %bf.cast, 23, !dbg !7552
  br i1 %cmp17, label %if.then19, label %if.else21, !dbg !7553

if.then19:                                        ; preds = %if.else
  %27 = load %struct.__mpz_struct*, %struct.__mpz_struct** %bnd.addr, align 8, !dbg !7554
  %28 = load %union.tree_node*, %union.tree_node** %c.addr, align 8, !dbg !7555
  %call20 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %28), !dbg !7556
  %29 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !7556
  %30 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %29, i32 0, i32 0, !dbg !7556
  %31 = extractvalue { i64, i64 } %call20, 0, !dbg !7556
  store i64 %31, i64* %30, align 8, !dbg !7556
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %29, i32 0, i32 1, !dbg !7556
  %33 = extractvalue { i64, i64 } %call20, 1, !dbg !7556
  store i64 %33, i64* %32, align 8, !dbg !7556
  %34 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !7557
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %34, i32 0, i32 0, !dbg !7557
  %36 = load i64, i64* %35, align 8, !dbg !7557
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %34, i32 0, i32 1, !dbg !7557
  %38 = load i64, i64* %37, align 8, !dbg !7557
  call void @mpz_set_double_int(%struct.__mpz_struct* %27, i64 %36, i64 %38, i8 zeroext 1), !dbg !7557
  br label %if.end30, !dbg !7557

if.else21:                                        ; preds = %if.else
  %39 = load %struct.__mpz_struct*, %struct.__mpz_struct** %bnd.addr, align 8, !dbg !7558
  %40 = load %union.tree_node*, %union.tree_node** %c.addr, align 8, !dbg !7559
  %common23 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !7559
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 2, !dbg !7559
  %41 = load %union.tree_node*, %union.tree_node** %type24, align 8, !dbg !7559
  %type25 = bitcast %union.tree_node* %41 to %struct.tree_type*, !dbg !7559
  %precision26 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type25, i32 0, i32 6, !dbg !7559
  %bf.load27 = load i32, i32* %precision26, align 4, !dbg !7559
  %bf.clear28 = and i32 %bf.load27, 1023, !dbg !7559
  %call29 = call { i64, i64 } @double_int_mask(i32 %bf.clear28), !dbg !7560
  %42 = bitcast %struct.double_int* %agg.tmp22 to { i64, i64 }*, !dbg !7560
  %43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %42, i32 0, i32 0, !dbg !7560
  %44 = extractvalue { i64, i64 } %call29, 0, !dbg !7560
  store i64 %44, i64* %43, align 8, !dbg !7560
  %45 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %42, i32 0, i32 1, !dbg !7560
  %46 = extractvalue { i64, i64 } %call29, 1, !dbg !7560
  store i64 %46, i64* %45, align 8, !dbg !7560
  %47 = bitcast %struct.double_int* %agg.tmp22 to { i64, i64 }*, !dbg !7561
  %48 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %47, i32 0, i32 0, !dbg !7561
  %49 = load i64, i64* %48, align 8, !dbg !7561
  %50 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %47, i32 0, i32 1, !dbg !7561
  %51 = load i64, i64* %50, align 8, !dbg !7561
  call void @mpz_set_double_int(%struct.__mpz_struct* %39, i64 %49, i64 %51, i8 zeroext 1), !dbg !7561
  br label %if.end30

if.end30:                                         ; preds = %if.else21, %if.then19
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.then13
  %arraydecay32 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %d, i64 0, i64 0, !dbg !7562
  call void @mpz_init(%struct.__mpz_struct* %arraydecay32), !dbg !7563
  %arraydecay33 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %d, i64 0, i64 0, !dbg !7564
  %52 = load %union.tree_node*, %union.tree_node** %s.addr, align 8, !dbg !7565
  %call35 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %52), !dbg !7566
  %53 = bitcast %struct.double_int* %agg.tmp34 to { i64, i64 }*, !dbg !7566
  %54 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %53, i32 0, i32 0, !dbg !7566
  %55 = extractvalue { i64, i64 } %call35, 0, !dbg !7566
  store i64 %55, i64* %54, align 8, !dbg !7566
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %53, i32 0, i32 1, !dbg !7566
  %57 = extractvalue { i64, i64 } %call35, 1, !dbg !7566
  store i64 %57, i64* %56, align 8, !dbg !7566
  %58 = bitcast %struct.double_int* %agg.tmp34 to { i64, i64 }*, !dbg !7567
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %58, i32 0, i32 0, !dbg !7567
  %60 = load i64, i64* %59, align 8, !dbg !7567
  %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %58, i32 0, i32 1, !dbg !7567
  %62 = load i64, i64* %61, align 8, !dbg !7567
  call void @mpz_set_double_int(%struct.__mpz_struct* %arraydecay33, i64 %60, i64 %62, i8 zeroext 1), !dbg !7567
  %63 = load %struct.__mpz_struct*, %struct.__mpz_struct** %bnd.addr, align 8, !dbg !7568
  %64 = load %struct.__mpz_struct*, %struct.__mpz_struct** %bnd.addr, align 8, !dbg !7569
  %arraydecay36 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %d, i64 0, i64 0, !dbg !7570
  call void @mpz_fdiv_q(%struct.__mpz_struct* %63, %struct.__mpz_struct* %64, %struct.__mpz_struct* %arraydecay36), !dbg !7571
  %arraydecay37 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %d, i64 0, i64 0, !dbg !7572
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay37), !dbg !7573
  br label %return, !dbg !7574

return:                                           ; preds = %if.end31, %if.then
  ret void, !dbg !7574
}

declare dso_local { i64, i64 } @mpz_get_double_int(%union.tree_node*, %struct.__mpz_struct*, i8 zeroext) #2

declare dso_local %union.tree_node* @num_ending_zeros(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_low_bits_mask(%union.tree_node*, i32) #2

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @inverse(%union.tree_node* %x, %union.tree_node* %mask) #0 !dbg !7575 {
entry:
  %x.addr = alloca %union.tree_node*, align 8
  %mask.addr = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %rslt = alloca %union.tree_node*, align 8
  %ctr = alloca i32, align 4
  %ix = alloca i64, align 8
  %imask = alloca i64, align 8
  %irslt = alloca i64, align 8
  store %union.tree_node* %x, %union.tree_node** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %x.addr, metadata !7576, metadata !DIExpression()), !dbg !7577
  store %union.tree_node* %mask, %union.tree_node** %mask.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %mask.addr, metadata !7578, metadata !DIExpression()), !dbg !7579
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7580, metadata !DIExpression()), !dbg !7581
  %0 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !7582
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !7582
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7582
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !7582
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !7581
  call void @llvm.dbg.declare(metadata %union.tree_node** %rslt, metadata !7583, metadata !DIExpression()), !dbg !7584
  call void @llvm.dbg.declare(metadata i32* %ctr, metadata !7585, metadata !DIExpression()), !dbg !7586
  %2 = load %union.tree_node*, %union.tree_node** %mask.addr, align 8, !dbg !7587
  %call = call i32 @tree_floor_log2(%union.tree_node* %2), !dbg !7588
  store i32 %call, i32* %ctr, align 4, !dbg !7586
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7589
  %type2 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !7589
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 6, !dbg !7589
  %bf.load = load i32, i32* %precision, align 4, !dbg !7589
  %bf.clear = and i32 %bf.load, 1023, !dbg !7589
  %cmp = icmp sle i32 %bf.clear, 64, !dbg !7591
  br i1 %cmp, label %if.then, label %if.else, !dbg !7592

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %ix, metadata !7593, metadata !DIExpression()), !dbg !7595
  call void @llvm.dbg.declare(metadata i64* %imask, metadata !7596, metadata !DIExpression()), !dbg !7597
  call void @llvm.dbg.declare(metadata i64* %irslt, metadata !7598, metadata !DIExpression()), !dbg !7599
  store i64 1, i64* %irslt, align 8, !dbg !7599
  %4 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !7600
  %call3 = call zeroext i8 @cst_and_fits_in_hwi(%union.tree_node* %4), !dbg !7600
  %tobool = icmp ne i8 %call3, 0, !dbg !7600
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7600

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i32 509, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !7600
  br label %cond.end, !dbg !7600

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !7600

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7600
  %5 = load %union.tree_node*, %union.tree_node** %mask.addr, align 8, !dbg !7601
  %call4 = call zeroext i8 @cst_and_fits_in_hwi(%union.tree_node* %5), !dbg !7601
  %tobool5 = icmp ne i8 %call4, 0, !dbg !7601
  br i1 %tobool5, label %cond.false7, label %cond.true6, !dbg !7601

cond.true6:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i32 510, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !7601
  br label %cond.end8, !dbg !7601

cond.false7:                                      ; preds = %cond.end
  br label %cond.end8, !dbg !7601

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i32 [ 0, %cond.true6 ], [ 0, %cond.false7 ], !dbg !7601
  %6 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !7602
  %call10 = call i64 @int_cst_value(%union.tree_node* %6), !dbg !7603
  store i64 %call10, i64* %ix, align 8, !dbg !7604
  %7 = load %union.tree_node*, %union.tree_node** %mask.addr, align 8, !dbg !7605
  %call11 = call i64 @int_cst_value(%union.tree_node* %7), !dbg !7606
  store i64 %call11, i64* %imask, align 8, !dbg !7607
  br label %for.cond, !dbg !7608

for.cond:                                         ; preds = %for.inc, %cond.end8
  %8 = load i32, i32* %ctr, align 4, !dbg !7609
  %tobool12 = icmp ne i32 %8, 0, !dbg !7612
  br i1 %tobool12, label %for.body, label %for.end, !dbg !7612

for.body:                                         ; preds = %for.cond
  %9 = load i64, i64* %ix, align 8, !dbg !7613
  %10 = load i64, i64* %irslt, align 8, !dbg !7615
  %mul = mul i64 %10, %9, !dbg !7615
  store i64 %mul, i64* %irslt, align 8, !dbg !7615
  %11 = load i64, i64* %ix, align 8, !dbg !7616
  %12 = load i64, i64* %ix, align 8, !dbg !7617
  %mul13 = mul i64 %12, %11, !dbg !7617
  store i64 %mul13, i64* %ix, align 8, !dbg !7617
  br label %for.inc, !dbg !7618

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %ctr, align 4, !dbg !7619
  %dec = add i32 %13, -1, !dbg !7619
  store i32 %dec, i32* %ctr, align 4, !dbg !7619
  br label %for.cond, !dbg !7620, !llvm.loop !7621

for.end:                                          ; preds = %for.cond
  %14 = load i64, i64* %imask, align 8, !dbg !7623
  %15 = load i64, i64* %irslt, align 8, !dbg !7624
  %and = and i64 %15, %14, !dbg !7624
  store i64 %and, i64* %irslt, align 8, !dbg !7624
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7625
  %17 = load i64, i64* %irslt, align 8, !dbg !7626
  %call14 = call %union.tree_node* @build_int_cst_type(%union.tree_node* %16, i64 %17), !dbg !7627
  store %union.tree_node* %call14, %union.tree_node** %rslt, align 8, !dbg !7628
  br label %if.end, !dbg !7629

if.else:                                          ; preds = %entry
  %18 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7630
  %call15 = call %union.tree_node* @build_int_cst(%union.tree_node* %18, i64 1), !dbg !7632
  store %union.tree_node* %call15, %union.tree_node** %rslt, align 8, !dbg !7633
  br label %for.cond16, !dbg !7634

for.cond16:                                       ; preds = %for.inc21, %if.else
  %19 = load i32, i32* %ctr, align 4, !dbg !7635
  %tobool17 = icmp ne i32 %19, 0, !dbg !7638
  br i1 %tobool17, label %for.body18, label %for.end23, !dbg !7638

for.body18:                                       ; preds = %for.cond16
  %20 = load %union.tree_node*, %union.tree_node** %rslt, align 8, !dbg !7639
  %21 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !7641
  %call19 = call %union.tree_node* @int_const_binop(i32 65, %union.tree_node* %20, %union.tree_node* %21, i32 0), !dbg !7642
  store %union.tree_node* %call19, %union.tree_node** %rslt, align 8, !dbg !7643
  %22 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !7644
  %23 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !7645
  %call20 = call %union.tree_node* @int_const_binop(i32 65, %union.tree_node* %22, %union.tree_node* %23, i32 0), !dbg !7646
  store %union.tree_node* %call20, %union.tree_node** %x.addr, align 8, !dbg !7647
  br label %for.inc21, !dbg !7648

for.inc21:                                        ; preds = %for.body18
  %24 = load i32, i32* %ctr, align 4, !dbg !7649
  %dec22 = add i32 %24, -1, !dbg !7649
  store i32 %dec22, i32* %ctr, align 4, !dbg !7649
  br label %for.cond16, !dbg !7650, !llvm.loop !7651

for.end23:                                        ; preds = %for.cond16
  %25 = load %union.tree_node*, %union.tree_node** %rslt, align 8, !dbg !7653
  %26 = load %union.tree_node*, %union.tree_node** %mask.addr, align 8, !dbg !7654
  %call24 = call %union.tree_node* @int_const_binop(i32 89, %union.tree_node* %25, %union.tree_node* %26, i32 0), !dbg !7655
  store %union.tree_node* %call24, %union.tree_node** %rslt, align 8, !dbg !7656
  br label %if.end

if.end:                                           ; preds = %for.end23, %for.end
  %27 = load %union.tree_node*, %union.tree_node** %rslt, align 8, !dbg !7657
  ret %union.tree_node* %27, !dbg !7658
}

declare dso_local i32 @multiple_of_p(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @mpz_fdiv_q(%struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*) #2

declare dso_local i32 @tree_floor_log2(%union.tree_node*) #2

declare dso_local zeroext i8 @cst_and_fits_in_hwi(%union.tree_node*) #2

declare dso_local i64 @int_cst_value(%union.tree_node*) #2

declare dso_local %union.tree_node* @int_const_binop(i32, %union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @number_of_iterations_lt_to_ne(%union.tree_node* %type, %struct.affine_iv* %iv0, %struct.affine_iv* %iv1, %struct.tree_niter_desc* %niter, %union.tree_node** %delta, %union.tree_node* %step, i8 zeroext %exit_must_be_taken, %struct.bounds* %bnds) #0 !dbg !7659 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca %union.tree_node*, align 8
  %iv0.addr = alloca %struct.affine_iv*, align 8
  %iv1.addr = alloca %struct.affine_iv*, align 8
  %niter.addr = alloca %struct.tree_niter_desc*, align 8
  %delta.addr = alloca %union.tree_node**, align 8
  %step.addr = alloca %union.tree_node*, align 8
  %exit_must_be_taken.addr = alloca i8, align 1
  %bnds.addr = alloca %struct.bounds*, align 8
  %niter_type = alloca %union.tree_node*, align 8
  %mod = alloca %union.tree_node*, align 8
  %tmod = alloca %union.tree_node*, align 8
  %mmod = alloca [1 x %struct.__mpz_struct], align 16
  %assumption = alloca %union.tree_node*, align 8
  %bound = alloca %union.tree_node*, align 8
  %noloop = alloca %union.tree_node*, align 8
  %ret = alloca i8, align 1
  %fv_comp_no_overflow = alloca i8, align 1
  %type12 = alloca %union.tree_node*, align 8
  %agg.tmp = alloca %struct.double_int, align 8
  %agg.tmp161 = alloca %struct.double_int, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !7662, metadata !DIExpression()), !dbg !7663
  store %struct.affine_iv* %iv0, %struct.affine_iv** %iv0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.affine_iv** %iv0.addr, metadata !7664, metadata !DIExpression()), !dbg !7665
  store %struct.affine_iv* %iv1, %struct.affine_iv** %iv1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.affine_iv** %iv1.addr, metadata !7666, metadata !DIExpression()), !dbg !7667
  store %struct.tree_niter_desc* %niter, %struct.tree_niter_desc** %niter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tree_niter_desc** %niter.addr, metadata !7668, metadata !DIExpression()), !dbg !7669
  store %union.tree_node** %delta, %union.tree_node*** %delta.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %delta.addr, metadata !7670, metadata !DIExpression()), !dbg !7671
  store %union.tree_node* %step, %union.tree_node** %step.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %step.addr, metadata !7672, metadata !DIExpression()), !dbg !7673
  store i8 %exit_must_be_taken, i8* %exit_must_be_taken.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %exit_must_be_taken.addr, metadata !7674, metadata !DIExpression()), !dbg !7675
  store %struct.bounds* %bnds, %struct.bounds** %bnds.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bounds** %bnds.addr, metadata !7676, metadata !DIExpression()), !dbg !7677
  call void @llvm.dbg.declare(metadata %union.tree_node** %niter_type, metadata !7678, metadata !DIExpression()), !dbg !7679
  %0 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !7680
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !7680
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7680
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !7680
  store %union.tree_node* %1, %union.tree_node** %niter_type, align 8, !dbg !7679
  call void @llvm.dbg.declare(metadata %union.tree_node** %mod, metadata !7681, metadata !DIExpression()), !dbg !7682
  %2 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !7683
  %3 = load %union.tree_node**, %union.tree_node*** %delta.addr, align 8, !dbg !7683
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !7683
  %5 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !7683
  %call = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 73, %union.tree_node* %2, %union.tree_node* %4, %union.tree_node* %5), !dbg !7683
  store %union.tree_node* %call, %union.tree_node** %mod, align 8, !dbg !7682
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmod, metadata !7684, metadata !DIExpression()), !dbg !7685
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %mmod, metadata !7686, metadata !DIExpression()), !dbg !7687
  call void @llvm.dbg.declare(metadata %union.tree_node** %assumption, metadata !7688, metadata !DIExpression()), !dbg !7689
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !7690
  store %union.tree_node* %6, %union.tree_node** %assumption, align 8, !dbg !7689
  call void @llvm.dbg.declare(metadata %union.tree_node** %bound, metadata !7691, metadata !DIExpression()), !dbg !7692
  call void @llvm.dbg.declare(metadata %union.tree_node** %noloop, metadata !7693, metadata !DIExpression()), !dbg !7694
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !7695, metadata !DIExpression()), !dbg !7696
  store i8 0, i8* %ret, align 1, !dbg !7696
  call void @llvm.dbg.declare(metadata i8* %fv_comp_no_overflow, metadata !7697, metadata !DIExpression()), !dbg !7698
  call void @llvm.dbg.declare(metadata %union.tree_node** %type12, metadata !7699, metadata !DIExpression()), !dbg !7700
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7701
  store %union.tree_node* %7, %union.tree_node** %type12, align 8, !dbg !7700
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7702
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7702
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !7702
  %bf.load = load i64, i64* %9, align 8, !dbg !7702
  %bf.clear = and i64 %bf.load, 65535, !dbg !7702
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7702
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !7702
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7702

lor.lhs.false:                                    ; preds = %entry
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7702
  %base3 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !7702
  %11 = bitcast %struct.tree_base* %base3 to i64*, !dbg !7702
  %bf.load4 = load i64, i64* %11, align 8, !dbg !7702
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !7702
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !7702
  %cmp7 = icmp eq i32 %bf.cast6, 12, !dbg !7702
  br i1 %cmp7, label %if.then, label %if.end, !dbg !7704

if.then:                                          ; preds = %lor.lhs.false, %entry
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !7705
  store %union.tree_node* %12, %union.tree_node** %type12, align 8, !dbg !7706
  br label %if.end, !dbg !7707

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %13 = load %union.tree_node*, %union.tree_node** %mod, align 8, !dbg !7708
  %base8 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !7708
  %14 = bitcast %struct.tree_base* %base8 to i64*, !dbg !7708
  %bf.load9 = load i64, i64* %14, align 8, !dbg !7708
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !7708
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !7708
  %cmp12 = icmp ne i32 %bf.cast11, 23, !dbg !7710
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !7711

if.then13:                                        ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !7712
  br label %return, !dbg !7712

if.end14:                                         ; preds = %if.end
  %15 = load %union.tree_node*, %union.tree_node** %mod, align 8, !dbg !7713
  %call15 = call i32 @integer_nonzerop(%union.tree_node* %15), !dbg !7715
  %tobool = icmp ne i32 %call15, 0, !dbg !7715
  br i1 %tobool, label %if.then16, label %if.end18, !dbg !7716

if.then16:                                        ; preds = %if.end14
  %16 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !7717
  %17 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !7717
  %18 = load %union.tree_node*, %union.tree_node** %mod, align 8, !dbg !7717
  %call17 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %16, %union.tree_node* %17, %union.tree_node* %18), !dbg !7717
  store %union.tree_node* %call17, %union.tree_node** %mod, align 8, !dbg !7718
  br label %if.end18, !dbg !7719

if.end18:                                         ; preds = %if.then16, %if.end14
  %19 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !7720
  %20 = load %union.tree_node*, %union.tree_node** %mod, align 8, !dbg !7720
  %call19 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %19, %union.tree_node* %20), !dbg !7720
  store %union.tree_node* %call19, %union.tree_node** %tmod, align 8, !dbg !7721
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mmod, i64 0, i64 0, !dbg !7722
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !7723
  %arraydecay20 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mmod, i64 0, i64 0, !dbg !7724
  %21 = load %union.tree_node*, %union.tree_node** %mod, align 8, !dbg !7725
  %call21 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %21), !dbg !7726
  %22 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !7726
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %22, i32 0, i32 0, !dbg !7726
  %24 = extractvalue { i64, i64 } %call21, 0, !dbg !7726
  store i64 %24, i64* %23, align 8, !dbg !7726
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %22, i32 0, i32 1, !dbg !7726
  %26 = extractvalue { i64, i64 } %call21, 1, !dbg !7726
  store i64 %26, i64* %25, align 8, !dbg !7726
  %27 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !7727
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %27, i32 0, i32 0, !dbg !7727
  %29 = load i64, i64* %28, align 8, !dbg !7727
  %30 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %27, i32 0, i32 1, !dbg !7727
  %31 = load i64, i64* %30, align 8, !dbg !7727
  call void @mpz_set_double_int(%struct.__mpz_struct* %arraydecay20, i64 %29, i64 %31, i8 zeroext 1), !dbg !7727
  %arraydecay22 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mmod, i64 0, i64 0, !dbg !7728
  %arraydecay23 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mmod, i64 0, i64 0, !dbg !7729
  call void @mpz_neg(%struct.__mpz_struct* %arraydecay22, %struct.__mpz_struct* %arraydecay23), !dbg !7730
  %32 = load %union.tree_node*, %union.tree_node** %mod, align 8, !dbg !7731
  %call24 = call i32 @integer_zerop(%union.tree_node* %32), !dbg !7733
  %tobool25 = icmp ne i32 %call24, 0, !dbg !7733
  br i1 %tobool25, label %if.then38, label %lor.lhs.false26, !dbg !7734

lor.lhs.false26:                                  ; preds = %if.end18
  %33 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7735
  %base27 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !7735
  %34 = bitcast %struct.tree_base* %base27 to i64*, !dbg !7735
  %bf.load28 = load i64, i64* %34, align 8, !dbg !7735
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !7735
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !7735
  %cmp31 = icmp eq i32 %bf.cast30, 10, !dbg !7735
  br i1 %cmp31, label %if.then38, label %lor.lhs.false32, !dbg !7735

lor.lhs.false32:                                  ; preds = %lor.lhs.false26
  %35 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7735
  %base33 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !7735
  %36 = bitcast %struct.tree_base* %base33 to i64*, !dbg !7735
  %bf.load34 = load i64, i64* %36, align 8, !dbg !7735
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !7735
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !7735
  %cmp37 = icmp eq i32 %bf.cast36, 12, !dbg !7735
  br i1 %cmp37, label %if.then38, label %if.else, !dbg !7736

if.then38:                                        ; preds = %lor.lhs.false32, %lor.lhs.false26, %if.end18
  store i8 1, i8* %fv_comp_no_overflow, align 1, !dbg !7737
  br label %if.end54, !dbg !7738

if.else:                                          ; preds = %lor.lhs.false32
  %37 = load i8, i8* %exit_must_be_taken.addr, align 1, !dbg !7739
  %tobool39 = icmp ne i8 %37, 0, !dbg !7739
  br i1 %tobool39, label %if.else41, label %if.then40, !dbg !7741

if.then40:                                        ; preds = %if.else
  store i8 0, i8* %fv_comp_no_overflow, align 1, !dbg !7742
  br label %if.end53, !dbg !7743

if.else41:                                        ; preds = %if.else
  %38 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !7744
  %no_overflow = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %38, i32 0, i32 2, !dbg !7745
  %39 = load i8, i8* %no_overflow, align 8, !dbg !7745
  %conv = zext i8 %39 to i32, !dbg !7744
  %tobool42 = icmp ne i32 %conv, 0, !dbg !7744
  br i1 %tobool42, label %land.lhs.true, label %lor.rhs, !dbg !7746

land.lhs.true:                                    ; preds = %if.else41
  %40 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !7747
  %step43 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %40, i32 0, i32 1, !dbg !7748
  %41 = load %union.tree_node*, %union.tree_node** %step43, align 8, !dbg !7748
  %call44 = call i32 @integer_nonzerop(%union.tree_node* %41), !dbg !7749
  %tobool45 = icmp ne i32 %call44, 0, !dbg !7749
  br i1 %tobool45, label %lor.end, label %lor.rhs, !dbg !7750

lor.rhs:                                          ; preds = %land.lhs.true, %if.else41
  %42 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !7751
  %no_overflow46 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %42, i32 0, i32 2, !dbg !7752
  %43 = load i8, i8* %no_overflow46, align 8, !dbg !7752
  %conv47 = zext i8 %43 to i32, !dbg !7751
  %tobool48 = icmp ne i32 %conv47, 0, !dbg !7751
  br i1 %tobool48, label %land.rhs, label %land.end, !dbg !7753

land.rhs:                                         ; preds = %lor.rhs
  %44 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !7754
  %step49 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %44, i32 0, i32 1, !dbg !7755
  %45 = load %union.tree_node*, %union.tree_node** %step49, align 8, !dbg !7755
  %call50 = call i32 @integer_nonzerop(%union.tree_node* %45), !dbg !7756
  %tobool51 = icmp ne i32 %call50, 0, !dbg !7753
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %46 = phi i1 [ false, %lor.rhs ], [ %tobool51, %land.rhs ], !dbg !7757
  br label %lor.end, !dbg !7750

lor.end:                                          ; preds = %land.end, %land.lhs.true
  %47 = phi i1 [ true, %land.lhs.true ], [ %46, %land.end ]
  %lor.ext = zext i1 %47 to i32, !dbg !7750
  %conv52 = trunc i32 %lor.ext to i8, !dbg !7758
  store i8 %conv52, i8* %fv_comp_no_overflow, align 1, !dbg !7759
  br label %if.end53

if.end53:                                         ; preds = %lor.end, %if.then40
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.then38
  %48 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !7760
  %step55 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %48, i32 0, i32 1, !dbg !7762
  %49 = load %union.tree_node*, %union.tree_node** %step55, align 8, !dbg !7762
  %call56 = call i32 @integer_nonzerop(%union.tree_node* %49), !dbg !7763
  %tobool57 = icmp ne i32 %call56, 0, !dbg !7763
  br i1 %tobool57, label %if.then58, label %if.else102, !dbg !7764

if.then58:                                        ; preds = %if.end54
  %50 = load i8, i8* %fv_comp_no_overflow, align 1, !dbg !7765
  %tobool59 = icmp ne i8 %50, 0, !dbg !7765
  br i1 %tobool59, label %if.end69, label %if.then60, !dbg !7768

if.then60:                                        ; preds = %if.then58
  %51 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !7769
  %52 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !7769
  %type61 = bitcast %union.tree_node* %52 to %struct.tree_type*, !dbg !7769
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type61, i32 0, i32 14, !dbg !7769
  %53 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !7769
  %54 = load %union.tree_node*, %union.tree_node** %tmod, align 8, !dbg !7769
  %call62 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %51, %union.tree_node* %53, %union.tree_node* %54), !dbg !7769
  store %union.tree_node* %call62, %union.tree_node** %bound, align 8, !dbg !7771
  %55 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !7772
  %56 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !7772
  %base63 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %56, i32 0, i32 0, !dbg !7772
  %57 = load %union.tree_node*, %union.tree_node** %base63, align 8, !dbg !7772
  %58 = load %union.tree_node*, %union.tree_node** %bound, align 8, !dbg !7772
  %call64 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 98, %union.tree_node* %55, %union.tree_node* %57, %union.tree_node* %58), !dbg !7772
  store %union.tree_node* %call64, %union.tree_node** %assumption, align 8, !dbg !7773
  %59 = load %union.tree_node*, %union.tree_node** %assumption, align 8, !dbg !7774
  %call65 = call i32 @integer_zerop(%union.tree_node* %59), !dbg !7776
  %tobool66 = icmp ne i32 %call65, 0, !dbg !7776
  br i1 %tobool66, label %if.then67, label %if.end68, !dbg !7777

if.then67:                                        ; preds = %if.then60
  br label %end, !dbg !7778

if.end68:                                         ; preds = %if.then60
  br label %if.end69, !dbg !7779

if.end69:                                         ; preds = %if.end68, %if.then58
  %arraydecay70 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mmod, i64 0, i64 0, !dbg !7780
  %60 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7782
  %below = getelementptr inbounds %struct.bounds, %struct.bounds* %60, i32 0, i32 0, !dbg !7783
  %arraydecay71 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below, i64 0, i64 0, !dbg !7782
  %call72 = call i32 @mpz_cmp(%struct.__mpz_struct* %arraydecay70, %struct.__mpz_struct* %arraydecay71), !dbg !7784
  %cmp73 = icmp slt i32 %call72, 0, !dbg !7785
  br i1 %cmp73, label %if.then75, label %if.else76, !dbg !7786

if.then75:                                        ; preds = %if.end69
  %61 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !7787
  store %union.tree_node* %61, %union.tree_node** %noloop, align 8, !dbg !7788
  br label %if.end101, !dbg !7789

if.else76:                                        ; preds = %if.end69
  %62 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7790
  %base77 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !7790
  %63 = bitcast %struct.tree_base* %base77 to i64*, !dbg !7790
  %bf.load78 = load i64, i64* %63, align 8, !dbg !7790
  %bf.clear79 = and i64 %bf.load78, 65535, !dbg !7790
  %bf.cast80 = trunc i64 %bf.clear79 to i32, !dbg !7790
  %cmp81 = icmp eq i32 %bf.cast80, 10, !dbg !7790
  br i1 %cmp81, label %if.then90, label %lor.lhs.false83, !dbg !7790

lor.lhs.false83:                                  ; preds = %if.else76
  %64 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7790
  %base84 = bitcast %union.tree_node* %64 to %struct.tree_base*, !dbg !7790
  %65 = bitcast %struct.tree_base* %base84 to i64*, !dbg !7790
  %bf.load85 = load i64, i64* %65, align 8, !dbg !7790
  %bf.clear86 = and i64 %bf.load85, 65535, !dbg !7790
  %bf.cast87 = trunc i64 %bf.clear86 to i32, !dbg !7790
  %cmp88 = icmp eq i32 %bf.cast87, 12, !dbg !7790
  br i1 %cmp88, label %if.then90, label %if.else95, !dbg !7792

if.then90:                                        ; preds = %lor.lhs.false83, %if.else76
  %66 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !7793
  %67 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !7793
  %base91 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %67, i32 0, i32 0, !dbg !7793
  %68 = load %union.tree_node*, %union.tree_node** %base91, align 8, !dbg !7793
  %69 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7793
  %70 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !7793
  %base92 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %70, i32 0, i32 0, !dbg !7793
  %71 = load %union.tree_node*, %union.tree_node** %base92, align 8, !dbg !7793
  %72 = load %union.tree_node*, %union.tree_node** %tmod, align 8, !dbg !7793
  %call93 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 66, %union.tree_node* %69, %union.tree_node* %71, %union.tree_node* %72), !dbg !7793
  %call94 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 99, %union.tree_node* %66, %union.tree_node* %68, %union.tree_node* %call93), !dbg !7793
  store %union.tree_node* %call94, %union.tree_node** %noloop, align 8, !dbg !7794
  br label %if.end100, !dbg !7795

if.else95:                                        ; preds = %lor.lhs.false83
  %73 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !7796
  %74 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !7796
  %base96 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %74, i32 0, i32 0, !dbg !7796
  %75 = load %union.tree_node*, %union.tree_node** %base96, align 8, !dbg !7796
  %76 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !7796
  %77 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !7796
  %base97 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %77, i32 0, i32 0, !dbg !7796
  %78 = load %union.tree_node*, %union.tree_node** %base97, align 8, !dbg !7796
  %79 = load %union.tree_node*, %union.tree_node** %tmod, align 8, !dbg !7796
  %call98 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %76, %union.tree_node* %78, %union.tree_node* %79), !dbg !7796
  %call99 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 99, %union.tree_node* %73, %union.tree_node* %75, %union.tree_node* %call98), !dbg !7796
  store %union.tree_node* %call99, %union.tree_node** %noloop, align 8, !dbg !7797
  br label %if.end100

if.end100:                                        ; preds = %if.else95, %if.then90
  br label %if.end101

if.end101:                                        ; preds = %if.end100, %if.then75
  br label %if.end148, !dbg !7798

if.else102:                                       ; preds = %if.end54
  %80 = load i8, i8* %fv_comp_no_overflow, align 1, !dbg !7799
  %tobool103 = icmp ne i8 %80, 0, !dbg !7799
  br i1 %tobool103, label %if.end113, label %if.then104, !dbg !7802

if.then104:                                       ; preds = %if.else102
  %81 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !7803
  %82 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !7803
  %type105 = bitcast %union.tree_node* %82 to %struct.tree_type*, !dbg !7803
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type105, i32 0, i32 13, !dbg !7803
  %83 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !7803
  %84 = load %union.tree_node*, %union.tree_node** %tmod, align 8, !dbg !7803
  %call106 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %81, %union.tree_node* %83, %union.tree_node* %84), !dbg !7803
  store %union.tree_node* %call106, %union.tree_node** %bound, align 8, !dbg !7805
  %85 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !7806
  %86 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !7806
  %base107 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %86, i32 0, i32 0, !dbg !7806
  %87 = load %union.tree_node*, %union.tree_node** %base107, align 8, !dbg !7806
  %88 = load %union.tree_node*, %union.tree_node** %bound, align 8, !dbg !7806
  %call108 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 100, %union.tree_node* %85, %union.tree_node* %87, %union.tree_node* %88), !dbg !7806
  store %union.tree_node* %call108, %union.tree_node** %assumption, align 8, !dbg !7807
  %89 = load %union.tree_node*, %union.tree_node** %assumption, align 8, !dbg !7808
  %call109 = call i32 @integer_zerop(%union.tree_node* %89), !dbg !7810
  %tobool110 = icmp ne i32 %call109, 0, !dbg !7810
  br i1 %tobool110, label %if.then111, label %if.end112, !dbg !7811

if.then111:                                       ; preds = %if.then104
  br label %end, !dbg !7812

if.end112:                                        ; preds = %if.then104
  br label %if.end113, !dbg !7813

if.end113:                                        ; preds = %if.end112, %if.else102
  %arraydecay114 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mmod, i64 0, i64 0, !dbg !7814
  %90 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7816
  %below115 = getelementptr inbounds %struct.bounds, %struct.bounds* %90, i32 0, i32 0, !dbg !7817
  %arraydecay116 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below115, i64 0, i64 0, !dbg !7816
  %call117 = call i32 @mpz_cmp(%struct.__mpz_struct* %arraydecay114, %struct.__mpz_struct* %arraydecay116), !dbg !7818
  %cmp118 = icmp slt i32 %call117, 0, !dbg !7819
  br i1 %cmp118, label %if.then120, label %if.else121, !dbg !7820

if.then120:                                       ; preds = %if.end113
  %91 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !7821
  store %union.tree_node* %91, %union.tree_node** %noloop, align 8, !dbg !7822
  br label %if.end147, !dbg !7823

if.else121:                                       ; preds = %if.end113
  %92 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7824
  %base122 = bitcast %union.tree_node* %92 to %struct.tree_base*, !dbg !7824
  %93 = bitcast %struct.tree_base* %base122 to i64*, !dbg !7824
  %bf.load123 = load i64, i64* %93, align 8, !dbg !7824
  %bf.clear124 = and i64 %bf.load123, 65535, !dbg !7824
  %bf.cast125 = trunc i64 %bf.clear124 to i32, !dbg !7824
  %cmp126 = icmp eq i32 %bf.cast125, 10, !dbg !7824
  br i1 %cmp126, label %if.then135, label %lor.lhs.false128, !dbg !7824

lor.lhs.false128:                                 ; preds = %if.else121
  %94 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7824
  %base129 = bitcast %union.tree_node* %94 to %struct.tree_base*, !dbg !7824
  %95 = bitcast %struct.tree_base* %base129 to i64*, !dbg !7824
  %bf.load130 = load i64, i64* %95, align 8, !dbg !7824
  %bf.clear131 = and i64 %bf.load130, 65535, !dbg !7824
  %bf.cast132 = trunc i64 %bf.clear131 to i32, !dbg !7824
  %cmp133 = icmp eq i32 %bf.cast132, 12, !dbg !7824
  br i1 %cmp133, label %if.then135, label %if.else141, !dbg !7826

if.then135:                                       ; preds = %lor.lhs.false128, %if.else121
  %96 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !7827
  %97 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7827
  %98 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !7827
  %base136 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %98, i32 0, i32 0, !dbg !7827
  %99 = load %union.tree_node*, %union.tree_node** %base136, align 8, !dbg !7827
  %100 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !7827
  %101 = load %union.tree_node*, %union.tree_node** %tmod, align 8, !dbg !7827
  %call137 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 79, %union.tree_node* %100, %union.tree_node* %101), !dbg !7827
  %call138 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 66, %union.tree_node* %97, %union.tree_node* %99, %union.tree_node* %call137), !dbg !7827
  %102 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !7827
  %base139 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %102, i32 0, i32 0, !dbg !7827
  %103 = load %union.tree_node*, %union.tree_node** %base139, align 8, !dbg !7827
  %call140 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 99, %union.tree_node* %96, %union.tree_node* %call138, %union.tree_node* %103), !dbg !7827
  store %union.tree_node* %call140, %union.tree_node** %noloop, align 8, !dbg !7828
  br label %if.end146, !dbg !7829

if.else141:                                       ; preds = %lor.lhs.false128
  %104 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !7830
  %105 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !7830
  %106 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !7830
  %base142 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %106, i32 0, i32 0, !dbg !7830
  %107 = load %union.tree_node*, %union.tree_node** %base142, align 8, !dbg !7830
  %108 = load %union.tree_node*, %union.tree_node** %tmod, align 8, !dbg !7830
  %call143 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %105, %union.tree_node* %107, %union.tree_node* %108), !dbg !7830
  %109 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !7830
  %base144 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %109, i32 0, i32 0, !dbg !7830
  %110 = load %union.tree_node*, %union.tree_node** %base144, align 8, !dbg !7830
  %call145 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 99, %union.tree_node* %104, %union.tree_node* %call143, %union.tree_node* %110), !dbg !7830
  store %union.tree_node* %call145, %union.tree_node** %noloop, align 8, !dbg !7831
  br label %if.end146

if.end146:                                        ; preds = %if.else141, %if.then135
  br label %if.end147

if.end147:                                        ; preds = %if.end146, %if.then120
  br label %if.end148

if.end148:                                        ; preds = %if.end147, %if.end101
  %111 = load %union.tree_node*, %union.tree_node** %assumption, align 8, !dbg !7832
  %call149 = call i32 @integer_nonzerop(%union.tree_node* %111), !dbg !7834
  %tobool150 = icmp ne i32 %call149, 0, !dbg !7834
  br i1 %tobool150, label %if.end154, label %if.then151, !dbg !7835

if.then151:                                       ; preds = %if.end148
  %112 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !7836
  %113 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !7836
  %assumptions = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %113, i32 0, i32 0, !dbg !7836
  %114 = load %union.tree_node*, %union.tree_node** %assumptions, align 8, !dbg !7836
  %115 = load %union.tree_node*, %union.tree_node** %assumption, align 8, !dbg !7836
  %call152 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 93, %union.tree_node* %112, %union.tree_node* %114, %union.tree_node* %115), !dbg !7836
  %116 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !7837
  %assumptions153 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %116, i32 0, i32 0, !dbg !7838
  store %union.tree_node* %call152, %union.tree_node** %assumptions153, align 8, !dbg !7839
  br label %if.end154, !dbg !7837

if.end154:                                        ; preds = %if.then151, %if.end148
  %117 = load %union.tree_node*, %union.tree_node** %noloop, align 8, !dbg !7840
  %call155 = call i32 @integer_zerop(%union.tree_node* %117), !dbg !7842
  %tobool156 = icmp ne i32 %call155, 0, !dbg !7842
  br i1 %tobool156, label %if.end160, label %if.then157, !dbg !7843

if.then157:                                       ; preds = %if.end154
  %118 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !7844
  %119 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !7844
  %may_be_zero = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %119, i32 0, i32 1, !dbg !7844
  %120 = load %union.tree_node*, %union.tree_node** %may_be_zero, align 8, !dbg !7844
  %121 = load %union.tree_node*, %union.tree_node** %noloop, align 8, !dbg !7844
  %call158 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 94, %union.tree_node* %118, %union.tree_node* %120, %union.tree_node* %121), !dbg !7844
  %122 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !7845
  %may_be_zero159 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %122, i32 0, i32 1, !dbg !7846
  store %union.tree_node* %call158, %union.tree_node** %may_be_zero159, align 8, !dbg !7847
  br label %if.end160, !dbg !7845

if.end160:                                        ; preds = %if.then157, %if.end154
  %123 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !7848
  %124 = load %union.tree_node*, %union.tree_node** %mod, align 8, !dbg !7849
  %call162 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %124), !dbg !7850
  %125 = bitcast %struct.double_int* %agg.tmp161 to { i64, i64 }*, !dbg !7850
  %126 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %125, i32 0, i32 0, !dbg !7850
  %127 = extractvalue { i64, i64 } %call162, 0, !dbg !7850
  store i64 %127, i64* %126, align 8, !dbg !7850
  %128 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %125, i32 0, i32 1, !dbg !7850
  %129 = extractvalue { i64, i64 } %call162, 1, !dbg !7850
  store i64 %129, i64* %128, align 8, !dbg !7850
  %130 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7851
  %131 = bitcast %struct.double_int* %agg.tmp161 to { i64, i64 }*, !dbg !7852
  %132 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %131, i32 0, i32 0, !dbg !7852
  %133 = load i64, i64* %132, align 8, !dbg !7852
  %134 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %131, i32 0, i32 1, !dbg !7852
  %135 = load i64, i64* %134, align 8, !dbg !7852
  call void @bounds_add(%struct.bounds* %123, i64 %133, i64 %135, %union.tree_node* %130), !dbg !7852
  %136 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !7853
  %137 = load %union.tree_node**, %union.tree_node*** %delta.addr, align 8, !dbg !7853
  %138 = load %union.tree_node*, %union.tree_node** %137, align 8, !dbg !7853
  %139 = load %union.tree_node*, %union.tree_node** %mod, align 8, !dbg !7853
  %call163 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %136, %union.tree_node* %138, %union.tree_node* %139), !dbg !7853
  %140 = load %union.tree_node**, %union.tree_node*** %delta.addr, align 8, !dbg !7854
  store %union.tree_node* %call163, %union.tree_node** %140, align 8, !dbg !7855
  store i8 1, i8* %ret, align 1, !dbg !7856
  br label %end, !dbg !7857

end:                                              ; preds = %if.end160, %if.then111, %if.then67
  call void @llvm.dbg.label(metadata !7858), !dbg !7859
  %arraydecay164 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mmod, i64 0, i64 0, !dbg !7860
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay164), !dbg !7861
  %141 = load i8, i8* %ret, align 1, !dbg !7862
  store i8 %141, i8* %retval, align 1, !dbg !7863
  br label %return, !dbg !7863

return:                                           ; preds = %end, %if.then13
  %142 = load i8, i8* %retval, align 1, !dbg !7864
  ret i8 %142, !dbg !7864
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @assert_no_overflow_lt(%union.tree_node* %type, %struct.affine_iv* %iv0, %struct.affine_iv* %iv1, %struct.tree_niter_desc* %niter, %union.tree_node* %step) #0 !dbg !7865 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca %union.tree_node*, align 8
  %iv0.addr = alloca %struct.affine_iv*, align 8
  %iv1.addr = alloca %struct.affine_iv*, align 8
  %niter.addr = alloca %struct.tree_niter_desc*, align 8
  %step.addr = alloca %union.tree_node*, align 8
  %bound = alloca %union.tree_node*, align 8
  %d = alloca %union.tree_node*, align 8
  %assumption = alloca %union.tree_node*, align 8
  %diff = alloca %union.tree_node*, align 8
  %niter_type = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !7868, metadata !DIExpression()), !dbg !7869
  store %struct.affine_iv* %iv0, %struct.affine_iv** %iv0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.affine_iv** %iv0.addr, metadata !7870, metadata !DIExpression()), !dbg !7871
  store %struct.affine_iv* %iv1, %struct.affine_iv** %iv1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.affine_iv** %iv1.addr, metadata !7872, metadata !DIExpression()), !dbg !7873
  store %struct.tree_niter_desc* %niter, %struct.tree_niter_desc** %niter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tree_niter_desc** %niter.addr, metadata !7874, metadata !DIExpression()), !dbg !7875
  store %union.tree_node* %step, %union.tree_node** %step.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %step.addr, metadata !7876, metadata !DIExpression()), !dbg !7877
  call void @llvm.dbg.declare(metadata %union.tree_node** %bound, metadata !7878, metadata !DIExpression()), !dbg !7879
  call void @llvm.dbg.declare(metadata %union.tree_node** %d, metadata !7880, metadata !DIExpression()), !dbg !7881
  call void @llvm.dbg.declare(metadata %union.tree_node** %assumption, metadata !7882, metadata !DIExpression()), !dbg !7883
  call void @llvm.dbg.declare(metadata %union.tree_node** %diff, metadata !7884, metadata !DIExpression()), !dbg !7885
  call void @llvm.dbg.declare(metadata %union.tree_node** %niter_type, metadata !7886, metadata !DIExpression()), !dbg !7887
  %0 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !7888
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !7888
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7888
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !7888
  store %union.tree_node* %1, %union.tree_node** %niter_type, align 8, !dbg !7887
  %2 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !7889
  %step2 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %2, i32 0, i32 1, !dbg !7891
  %3 = load %union.tree_node*, %union.tree_node** %step2, align 8, !dbg !7891
  %call = call i32 @integer_nonzerop(%union.tree_node* %3), !dbg !7892
  %tobool = icmp ne i32 %call, 0, !dbg !7892
  br i1 %tobool, label %if.then, label %if.else22, !dbg !7893

if.then:                                          ; preds = %entry
  %4 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !7894
  %no_overflow = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %4, i32 0, i32 2, !dbg !7897
  %5 = load i8, i8* %no_overflow, align 8, !dbg !7897
  %tobool3 = icmp ne i8 %5, 0, !dbg !7894
  br i1 %tobool3, label %if.then4, label %if.end, !dbg !7898

if.then4:                                         ; preds = %if.then
  store i8 1, i8* %retval, align 1, !dbg !7899
  br label %return, !dbg !7899

if.end:                                           ; preds = %if.then
  %6 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !7900
  %base = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %6, i32 0, i32 0, !dbg !7900
  %7 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !7900
  %base5 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !7900
  %8 = bitcast %struct.tree_base* %base5 to i64*, !dbg !7900
  %bf.load = load i64, i64* %8, align 8, !dbg !7900
  %bf.clear = and i64 %bf.load, 65535, !dbg !7900
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7900
  %cmp = icmp eq i32 %bf.cast, 23, !dbg !7902
  br i1 %cmp, label %if.then6, label %if.else, !dbg !7903

if.then6:                                         ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !7904
  %10 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !7904
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7904
  %type7 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !7904
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type7, i32 0, i32 14, !dbg !7904
  %12 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !7904
  %call8 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %10, %union.tree_node* %12), !dbg !7904
  %13 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !7904
  %14 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !7904
  %base9 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %14, i32 0, i32 0, !dbg !7904
  %15 = load %union.tree_node*, %union.tree_node** %base9, align 8, !dbg !7904
  %call10 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %13, %union.tree_node* %15), !dbg !7904
  %call11 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %9, %union.tree_node* %call8, %union.tree_node* %call10), !dbg !7904
  store %union.tree_node* %call11, %union.tree_node** %d, align 8, !dbg !7906
  %16 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !7907
  %17 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !7907
  %18 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !7907
  %call12 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 73, %union.tree_node* %16, %union.tree_node* %17, %union.tree_node* %18), !dbg !7907
  store %union.tree_node* %call12, %union.tree_node** %diff, align 8, !dbg !7908
  br label %if.end15, !dbg !7909

if.else:                                          ; preds = %if.end
  %19 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !7910
  %20 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !7910
  %21 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !7910
  %call13 = call %union.tree_node* @build_int_cst(%union.tree_node* %21, i64 1), !dbg !7910
  %call14 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %19, %union.tree_node* %20, %union.tree_node* %call13), !dbg !7910
  store %union.tree_node* %call14, %union.tree_node** %diff, align 8, !dbg !7911
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then6
  %22 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7912
  %23 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7912
  %type16 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !7912
  %maxval17 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type16, i32 0, i32 14, !dbg !7912
  %24 = load %union.tree_node*, %union.tree_node** %maxval17, align 8, !dbg !7912
  %25 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7912
  %26 = load %union.tree_node*, %union.tree_node** %diff, align 8, !dbg !7912
  %call18 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %25, %union.tree_node* %26), !dbg !7912
  %call19 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %22, %union.tree_node* %24, %union.tree_node* %call18), !dbg !7912
  store %union.tree_node* %call19, %union.tree_node** %bound, align 8, !dbg !7913
  %27 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !7914
  %28 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !7914
  %base20 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %28, i32 0, i32 0, !dbg !7914
  %29 = load %union.tree_node*, %union.tree_node** %base20, align 8, !dbg !7914
  %30 = load %union.tree_node*, %union.tree_node** %bound, align 8, !dbg !7914
  %call21 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 98, %union.tree_node* %27, %union.tree_node* %29, %union.tree_node* %30), !dbg !7914
  store %union.tree_node* %call21, %union.tree_node** %assumption, align 8, !dbg !7915
  br label %if.end50, !dbg !7916

if.else22:                                        ; preds = %entry
  %31 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !7917
  %no_overflow23 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %31, i32 0, i32 2, !dbg !7920
  %32 = load i8, i8* %no_overflow23, align 8, !dbg !7920
  %tobool24 = icmp ne i8 %32, 0, !dbg !7917
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !7921

if.then25:                                        ; preds = %if.else22
  store i8 1, i8* %retval, align 1, !dbg !7922
  br label %return, !dbg !7922

if.end26:                                         ; preds = %if.else22
  %33 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !7923
  %base27 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %33, i32 0, i32 0, !dbg !7923
  %34 = load %union.tree_node*, %union.tree_node** %base27, align 8, !dbg !7923
  %base28 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !7923
  %35 = bitcast %struct.tree_base* %base28 to i64*, !dbg !7923
  %bf.load29 = load i64, i64* %35, align 8, !dbg !7923
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !7923
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !7923
  %cmp32 = icmp eq i32 %bf.cast31, 23, !dbg !7925
  br i1 %cmp32, label %if.then33, label %if.else40, !dbg !7926

if.then33:                                        ; preds = %if.end26
  %36 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !7927
  %37 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !7927
  %38 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !7927
  %base34 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %38, i32 0, i32 0, !dbg !7927
  %39 = load %union.tree_node*, %union.tree_node** %base34, align 8, !dbg !7927
  %call35 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %37, %union.tree_node* %39), !dbg !7927
  %40 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !7927
  %41 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7927
  %type36 = bitcast %union.tree_node* %41 to %struct.tree_type*, !dbg !7927
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type36, i32 0, i32 13, !dbg !7927
  %42 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !7927
  %call37 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %40, %union.tree_node* %42), !dbg !7927
  %call38 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %36, %union.tree_node* %call35, %union.tree_node* %call37), !dbg !7927
  store %union.tree_node* %call38, %union.tree_node** %d, align 8, !dbg !7929
  %43 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !7930
  %44 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !7930
  %45 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !7930
  %call39 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 73, %union.tree_node* %43, %union.tree_node* %44, %union.tree_node* %45), !dbg !7930
  store %union.tree_node* %call39, %union.tree_node** %diff, align 8, !dbg !7931
  br label %if.end43, !dbg !7932

if.else40:                                        ; preds = %if.end26
  %46 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !7933
  %47 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !7933
  %48 = load %union.tree_node*, %union.tree_node** %niter_type, align 8, !dbg !7933
  %call41 = call %union.tree_node* @build_int_cst(%union.tree_node* %48, i64 1), !dbg !7933
  %call42 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %46, %union.tree_node* %47, %union.tree_node* %call41), !dbg !7933
  store %union.tree_node* %call42, %union.tree_node** %diff, align 8, !dbg !7934
  br label %if.end43

if.end43:                                         ; preds = %if.else40, %if.then33
  %49 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7935
  %50 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7935
  %type44 = bitcast %union.tree_node* %50 to %struct.tree_type*, !dbg !7935
  %minval45 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type44, i32 0, i32 13, !dbg !7935
  %51 = load %union.tree_node*, %union.tree_node** %minval45, align 8, !dbg !7935
  %52 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7935
  %53 = load %union.tree_node*, %union.tree_node** %diff, align 8, !dbg !7935
  %call46 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %52, %union.tree_node* %53), !dbg !7935
  %call47 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %49, %union.tree_node* %51, %union.tree_node* %call46), !dbg !7935
  store %union.tree_node* %call47, %union.tree_node** %bound, align 8, !dbg !7936
  %54 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !7937
  %55 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !7937
  %base48 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %55, i32 0, i32 0, !dbg !7937
  %56 = load %union.tree_node*, %union.tree_node** %base48, align 8, !dbg !7937
  %57 = load %union.tree_node*, %union.tree_node** %bound, align 8, !dbg !7937
  %call49 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 100, %union.tree_node* %54, %union.tree_node* %56, %union.tree_node* %57), !dbg !7937
  store %union.tree_node* %call49, %union.tree_node** %assumption, align 8, !dbg !7938
  br label %if.end50

if.end50:                                         ; preds = %if.end43, %if.end15
  %58 = load %union.tree_node*, %union.tree_node** %assumption, align 8, !dbg !7939
  %call51 = call i32 @integer_zerop(%union.tree_node* %58), !dbg !7941
  %tobool52 = icmp ne i32 %call51, 0, !dbg !7941
  br i1 %tobool52, label %if.then53, label %if.end54, !dbg !7942

if.then53:                                        ; preds = %if.end50
  store i8 0, i8* %retval, align 1, !dbg !7943
  br label %return, !dbg !7943

if.end54:                                         ; preds = %if.end50
  %59 = load %union.tree_node*, %union.tree_node** %assumption, align 8, !dbg !7944
  %call55 = call i32 @integer_nonzerop(%union.tree_node* %59), !dbg !7946
  %tobool56 = icmp ne i32 %call55, 0, !dbg !7946
  br i1 %tobool56, label %if.end60, label %if.then57, !dbg !7947

if.then57:                                        ; preds = %if.end54
  %60 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !7948
  %61 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !7948
  %assumptions = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %61, i32 0, i32 0, !dbg !7948
  %62 = load %union.tree_node*, %union.tree_node** %assumptions, align 8, !dbg !7948
  %63 = load %union.tree_node*, %union.tree_node** %assumption, align 8, !dbg !7948
  %call58 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 93, %union.tree_node* %60, %union.tree_node* %62, %union.tree_node* %63), !dbg !7948
  %64 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !7949
  %assumptions59 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %64, i32 0, i32 0, !dbg !7950
  store %union.tree_node* %call58, %union.tree_node** %assumptions59, align 8, !dbg !7951
  br label %if.end60, !dbg !7949

if.end60:                                         ; preds = %if.then57, %if.end54
  %65 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !7952
  %no_overflow61 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %65, i32 0, i32 2, !dbg !7953
  store i8 1, i8* %no_overflow61, align 8, !dbg !7954
  %66 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !7955
  %no_overflow62 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %66, i32 0, i32 2, !dbg !7956
  store i8 1, i8* %no_overflow62, align 8, !dbg !7957
  store i8 1, i8* %retval, align 1, !dbg !7958
  br label %return, !dbg !7958

return:                                           ; preds = %if.end60, %if.then53, %if.then25, %if.then4
  %67 = load i8, i8* %retval, align 1, !dbg !7959
  ret i8 %67, !dbg !7959
}

; Function Attrs: noinline nounwind uwtable
define internal void @assert_loop_rolls_lt(%union.tree_node* %type, %struct.affine_iv* %iv0, %struct.affine_iv* %iv1, %struct.tree_niter_desc* %niter, %struct.bounds* %bnds) #0 !dbg !7960 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %iv0.addr = alloca %struct.affine_iv*, align 8
  %iv1.addr = alloca %struct.affine_iv*, align 8
  %niter.addr = alloca %struct.tree_niter_desc*, align 8
  %bnds.addr = alloca %struct.bounds*, align 8
  %assumption = alloca %union.tree_node*, align 8
  %bound = alloca %union.tree_node*, align 8
  %diff = alloca %union.tree_node*, align 8
  %mbz = alloca %union.tree_node*, align 8
  %mbzl = alloca %union.tree_node*, align 8
  %mbzr = alloca %union.tree_node*, align 8
  %type1 = alloca %union.tree_node*, align 8
  %rolls_p = alloca i8, align 1
  %no_overflow_p = alloca i8, align 1
  %dstep = alloca %struct.double_int, align 8
  %mstep = alloca [1 x %struct.__mpz_struct], align 16
  %max = alloca [1 x %struct.__mpz_struct], align 16
  %tmp = alloca %struct.double_int, align 8
  %tmp3 = alloca %struct.double_int, align 8
  %agg.tmp = alloca %struct.double_int, align 8
  %tmp8 = alloca %struct.double_int, align 8
  %agg.tmp21 = alloca %struct.double_int, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !7963, metadata !DIExpression()), !dbg !7964
  store %struct.affine_iv* %iv0, %struct.affine_iv** %iv0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.affine_iv** %iv0.addr, metadata !7965, metadata !DIExpression()), !dbg !7966
  store %struct.affine_iv* %iv1, %struct.affine_iv** %iv1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.affine_iv** %iv1.addr, metadata !7967, metadata !DIExpression()), !dbg !7968
  store %struct.tree_niter_desc* %niter, %struct.tree_niter_desc** %niter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tree_niter_desc** %niter.addr, metadata !7969, metadata !DIExpression()), !dbg !7970
  store %struct.bounds* %bnds, %struct.bounds** %bnds.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bounds** %bnds.addr, metadata !7971, metadata !DIExpression()), !dbg !7972
  call void @llvm.dbg.declare(metadata %union.tree_node** %assumption, metadata !7973, metadata !DIExpression()), !dbg !7974
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !7975
  store %union.tree_node* %0, %union.tree_node** %assumption, align 8, !dbg !7974
  call void @llvm.dbg.declare(metadata %union.tree_node** %bound, metadata !7976, metadata !DIExpression()), !dbg !7977
  call void @llvm.dbg.declare(metadata %union.tree_node** %diff, metadata !7978, metadata !DIExpression()), !dbg !7979
  call void @llvm.dbg.declare(metadata %union.tree_node** %mbz, metadata !7980, metadata !DIExpression()), !dbg !7981
  call void @llvm.dbg.declare(metadata %union.tree_node** %mbzl, metadata !7982, metadata !DIExpression()), !dbg !7983
  call void @llvm.dbg.declare(metadata %union.tree_node** %mbzr, metadata !7984, metadata !DIExpression()), !dbg !7985
  call void @llvm.dbg.declare(metadata %union.tree_node** %type1, metadata !7986, metadata !DIExpression()), !dbg !7987
  call void @llvm.dbg.declare(metadata i8* %rolls_p, metadata !7988, metadata !DIExpression()), !dbg !7989
  call void @llvm.dbg.declare(metadata i8* %no_overflow_p, metadata !7990, metadata !DIExpression()), !dbg !7991
  call void @llvm.dbg.declare(metadata %struct.double_int* %dstep, metadata !7992, metadata !DIExpression()), !dbg !7993
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %mstep, metadata !7994, metadata !DIExpression()), !dbg !7995
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %max, metadata !7996, metadata !DIExpression()), !dbg !7997
  %1 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !7998
  %step = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %1, i32 0, i32 1, !dbg !8000
  %2 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !8000
  %call = call i32 @integer_nonzerop(%union.tree_node* %2), !dbg !8001
  %tobool = icmp ne i32 %call, 0, !dbg !8001
  br i1 %tobool, label %if.then, label %if.else, !dbg !8002

if.then:                                          ; preds = %entry
  %3 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !8003
  %step1 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %3, i32 0, i32 1, !dbg !8004
  %4 = load %union.tree_node*, %union.tree_node** %step1, align 8, !dbg !8004
  %call2 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %4), !dbg !8005
  %5 = bitcast %struct.double_int* %tmp to { i64, i64 }*, !dbg !8005
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i32 0, i32 0, !dbg !8005
  %7 = extractvalue { i64, i64 } %call2, 0, !dbg !8005
  store i64 %7, i64* %6, align 8, !dbg !8005
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i32 0, i32 1, !dbg !8005
  %9 = extractvalue { i64, i64 } %call2, 1, !dbg !8005
  store i64 %9, i64* %8, align 8, !dbg !8005
  %10 = bitcast %struct.double_int* %dstep to i8*, !dbg !8005
  %11 = bitcast %struct.double_int* %tmp to i8*, !dbg !8005
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false), !dbg !8005
  br label %if.end, !dbg !8006

if.else:                                          ; preds = %entry
  %12 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !8007
  %step4 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %12, i32 0, i32 1, !dbg !8009
  %13 = load %union.tree_node*, %union.tree_node** %step4, align 8, !dbg !8009
  %call5 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %13), !dbg !8010
  %14 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !8010
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i32 0, i32 0, !dbg !8010
  %16 = extractvalue { i64, i64 } %call5, 0, !dbg !8010
  store i64 %16, i64* %15, align 8, !dbg !8010
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i32 0, i32 1, !dbg !8010
  %18 = extractvalue { i64, i64 } %call5, 1, !dbg !8010
  store i64 %18, i64* %17, align 8, !dbg !8010
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8011
  %type6 = bitcast %union.tree_node* %19 to %struct.tree_type*, !dbg !8011
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6, i32 0, i32 6, !dbg !8011
  %bf.load = load i32, i32* %precision, align 4, !dbg !8011
  %bf.clear = and i32 %bf.load, 1023, !dbg !8011
  %20 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !8012
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %20, i32 0, i32 0, !dbg !8012
  %22 = load i64, i64* %21, align 8, !dbg !8012
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %20, i32 0, i32 1, !dbg !8012
  %24 = load i64, i64* %23, align 8, !dbg !8012
  %call7 = call { i64, i64 } @double_int_sext(i64 %22, i64 %24, i32 %bf.clear), !dbg !8012
  %25 = bitcast %struct.double_int* %tmp3 to { i64, i64 }*, !dbg !8012
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %25, i32 0, i32 0, !dbg !8012
  %27 = extractvalue { i64, i64 } %call7, 0, !dbg !8012
  store i64 %27, i64* %26, align 8, !dbg !8012
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %25, i32 0, i32 1, !dbg !8012
  %29 = extractvalue { i64, i64 } %call7, 1, !dbg !8012
  store i64 %29, i64* %28, align 8, !dbg !8012
  %30 = bitcast %struct.double_int* %dstep to i8*, !dbg !8012
  %31 = bitcast %struct.double_int* %tmp3 to i8*, !dbg !8012
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 16, i1 false), !dbg !8012
  %32 = bitcast %struct.double_int* %dstep to { i64, i64 }*, !dbg !8013
  %33 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %32, i32 0, i32 0, !dbg !8013
  %34 = load i64, i64* %33, align 8, !dbg !8013
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %32, i32 0, i32 1, !dbg !8013
  %36 = load i64, i64* %35, align 8, !dbg !8013
  %call9 = call { i64, i64 } @double_int_neg(i64 %34, i64 %36), !dbg !8013
  %37 = bitcast %struct.double_int* %tmp8 to { i64, i64 }*, !dbg !8013
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %37, i32 0, i32 0, !dbg !8013
  %39 = extractvalue { i64, i64 } %call9, 0, !dbg !8013
  store i64 %39, i64* %38, align 8, !dbg !8013
  %40 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %37, i32 0, i32 1, !dbg !8013
  %41 = extractvalue { i64, i64 } %call9, 1, !dbg !8013
  store i64 %41, i64* %40, align 8, !dbg !8013
  %42 = bitcast %struct.double_int* %dstep to i8*, !dbg !8013
  %43 = bitcast %struct.double_int* %tmp8 to i8*, !dbg !8013
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 16, i1 false), !dbg !8013
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mstep, i64 0, i64 0, !dbg !8014
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !8015
  %arraydecay10 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mstep, i64 0, i64 0, !dbg !8016
  %44 = bitcast %struct.double_int* %dstep to { i64, i64 }*, !dbg !8017
  %45 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %44, i32 0, i32 0, !dbg !8017
  %46 = load i64, i64* %45, align 8, !dbg !8017
  %47 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %44, i32 0, i32 1, !dbg !8017
  %48 = load i64, i64* %47, align 8, !dbg !8017
  call void @mpz_set_double_int(%struct.__mpz_struct* %arraydecay10, i64 %46, i64 %48, i8 zeroext 1), !dbg !8017
  %arraydecay11 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mstep, i64 0, i64 0, !dbg !8018
  %arraydecay12 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mstep, i64 0, i64 0, !dbg !8019
  call void @mpz_neg(%struct.__mpz_struct* %arraydecay11, %struct.__mpz_struct* %arraydecay12), !dbg !8020
  %arraydecay13 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mstep, i64 0, i64 0, !dbg !8021
  %arraydecay14 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mstep, i64 0, i64 0, !dbg !8022
  call void @mpz_add_ui(%struct.__mpz_struct* %arraydecay13, %struct.__mpz_struct* %arraydecay14, i64 1), !dbg !8023
  %arraydecay15 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mstep, i64 0, i64 0, !dbg !8024
  %49 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !8025
  %below = getelementptr inbounds %struct.bounds, %struct.bounds* %49, i32 0, i32 0, !dbg !8026
  %arraydecay16 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below, i64 0, i64 0, !dbg !8025
  %call17 = call i32 @mpz_cmp(%struct.__mpz_struct* %arraydecay15, %struct.__mpz_struct* %arraydecay16), !dbg !8027
  %cmp = icmp sle i32 %call17, 0, !dbg !8028
  %conv = zext i1 %cmp to i32, !dbg !8028
  %conv18 = trunc i32 %conv to i8, !dbg !8027
  store i8 %conv18, i8* %rolls_p, align 1, !dbg !8029
  %arraydecay19 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !8030
  call void @mpz_init(%struct.__mpz_struct* %arraydecay19), !dbg !8031
  %arraydecay20 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !8032
  %50 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8033
  %type22 = bitcast %union.tree_node* %50 to %struct.tree_type*, !dbg !8033
  %precision23 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type22, i32 0, i32 6, !dbg !8033
  %bf.load24 = load i32, i32* %precision23, align 4, !dbg !8033
  %bf.clear25 = and i32 %bf.load24, 1023, !dbg !8033
  %call26 = call { i64, i64 } @double_int_mask(i32 %bf.clear25), !dbg !8034
  %51 = bitcast %struct.double_int* %agg.tmp21 to { i64, i64 }*, !dbg !8034
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %51, i32 0, i32 0, !dbg !8034
  %53 = extractvalue { i64, i64 } %call26, 0, !dbg !8034
  store i64 %53, i64* %52, align 8, !dbg !8034
  %54 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %51, i32 0, i32 1, !dbg !8034
  %55 = extractvalue { i64, i64 } %call26, 1, !dbg !8034
  store i64 %55, i64* %54, align 8, !dbg !8034
  %56 = bitcast %struct.double_int* %agg.tmp21 to { i64, i64 }*, !dbg !8035
  %57 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %56, i32 0, i32 0, !dbg !8035
  %58 = load i64, i64* %57, align 8, !dbg !8035
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %56, i32 0, i32 1, !dbg !8035
  %60 = load i64, i64* %59, align 8, !dbg !8035
  call void @mpz_set_double_int(%struct.__mpz_struct* %arraydecay20, i64 %58, i64 %60, i8 zeroext 1), !dbg !8035
  %arraydecay27 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !8036
  %arraydecay28 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !8037
  %arraydecay29 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mstep, i64 0, i64 0, !dbg !8038
  call void @mpz_add(%struct.__mpz_struct* %arraydecay27, %struct.__mpz_struct* %arraydecay28, %struct.__mpz_struct* %arraydecay29), !dbg !8039
  %61 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !8040
  %up = getelementptr inbounds %struct.bounds, %struct.bounds* %61, i32 0, i32 1, !dbg !8041
  %arraydecay30 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up, i64 0, i64 0, !dbg !8040
  %arraydecay31 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !8042
  %call32 = call i32 @mpz_cmp(%struct.__mpz_struct* %arraydecay30, %struct.__mpz_struct* %arraydecay31), !dbg !8043
  %cmp33 = icmp sle i32 %call32, 0, !dbg !8044
  br i1 %cmp33, label %lor.end46, label %lor.rhs, !dbg !8045

lor.rhs:                                          ; preds = %if.end
  %62 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8046
  %base = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !8046
  %63 = bitcast %struct.tree_base* %base to i64*, !dbg !8046
  %bf.load35 = load i64, i64* %63, align 8, !dbg !8046
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !8046
  %bf.cast = trunc i64 %bf.clear36 to i32, !dbg !8046
  %cmp37 = icmp eq i32 %bf.cast, 10, !dbg !8046
  br i1 %cmp37, label %lor.end, label %lor.rhs39, !dbg !8046

lor.rhs39:                                        ; preds = %lor.rhs
  %64 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8046
  %base40 = bitcast %union.tree_node* %64 to %struct.tree_base*, !dbg !8046
  %65 = bitcast %struct.tree_base* %base40 to i64*, !dbg !8046
  %bf.load41 = load i64, i64* %65, align 8, !dbg !8046
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !8046
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !8046
  %cmp44 = icmp eq i32 %bf.cast43, 12, !dbg !8046
  br label %lor.end, !dbg !8046

lor.end:                                          ; preds = %lor.rhs39, %lor.rhs
  %66 = phi i1 [ true, %lor.rhs ], [ %cmp44, %lor.rhs39 ]
  br label %lor.end46, !dbg !8045

lor.end46:                                        ; preds = %lor.end, %if.end
  %67 = phi i1 [ true, %if.end ], [ %66, %lor.end ]
  %lor.ext = zext i1 %67 to i32, !dbg !8045
  %conv47 = trunc i32 %lor.ext to i8, !dbg !8047
  store i8 %conv47, i8* %no_overflow_p, align 1, !dbg !8048
  %arraydecay48 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mstep, i64 0, i64 0, !dbg !8049
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay48), !dbg !8050
  %arraydecay49 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !8051
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay49), !dbg !8052
  %68 = load i8, i8* %rolls_p, align 1, !dbg !8053
  %conv50 = zext i8 %68 to i32, !dbg !8053
  %tobool51 = icmp ne i32 %conv50, 0, !dbg !8053
  br i1 %tobool51, label %land.lhs.true, label %if.end55, !dbg !8055

land.lhs.true:                                    ; preds = %lor.end46
  %69 = load i8, i8* %no_overflow_p, align 1, !dbg !8056
  %conv52 = zext i8 %69 to i32, !dbg !8056
  %tobool53 = icmp ne i32 %conv52, 0, !dbg !8056
  br i1 %tobool53, label %if.then54, label %if.end55, !dbg !8057

if.then54:                                        ; preds = %land.lhs.true
  br label %if.end141, !dbg !8058

if.end55:                                         ; preds = %land.lhs.true, %lor.end46
  %70 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8059
  store %union.tree_node* %70, %union.tree_node** %type1, align 8, !dbg !8060
  %71 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8061
  %base56 = bitcast %union.tree_node* %71 to %struct.tree_base*, !dbg !8061
  %72 = bitcast %struct.tree_base* %base56 to i64*, !dbg !8061
  %bf.load57 = load i64, i64* %72, align 8, !dbg !8061
  %bf.clear58 = and i64 %bf.load57, 65535, !dbg !8061
  %bf.cast59 = trunc i64 %bf.clear58 to i32, !dbg !8061
  %cmp60 = icmp eq i32 %bf.cast59, 10, !dbg !8061
  br i1 %cmp60, label %if.then68, label %lor.lhs.false, !dbg !8061

lor.lhs.false:                                    ; preds = %if.end55
  %73 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8061
  %base62 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !8061
  %74 = bitcast %struct.tree_base* %base62 to i64*, !dbg !8061
  %bf.load63 = load i64, i64* %74, align 8, !dbg !8061
  %bf.clear64 = and i64 %bf.load63, 65535, !dbg !8061
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !8061
  %cmp66 = icmp eq i32 %bf.cast65, 12, !dbg !8061
  br i1 %cmp66, label %if.then68, label %if.end69, !dbg !8063

if.then68:                                        ; preds = %lor.lhs.false, %if.end55
  %75 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !8064
  store %union.tree_node* %75, %union.tree_node** %type1, align 8, !dbg !8065
  br label %if.end69, !dbg !8066

if.end69:                                         ; preds = %if.then68, %lor.lhs.false
  %76 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !8067
  %step70 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %76, i32 0, i32 1, !dbg !8069
  %77 = load %union.tree_node*, %union.tree_node** %step70, align 8, !dbg !8069
  %call71 = call i32 @integer_nonzerop(%union.tree_node* %77), !dbg !8070
  %tobool72 = icmp ne i32 %call71, 0, !dbg !8070
  br i1 %tobool72, label %if.then73, label %if.else101, !dbg !8071

if.then73:                                        ; preds = %if.end69
  %78 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8072
  %79 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !8072
  %step74 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %79, i32 0, i32 1, !dbg !8072
  %80 = load %union.tree_node*, %union.tree_node** %step74, align 8, !dbg !8072
  %81 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8072
  %call75 = call %union.tree_node* @build_int_cst(%union.tree_node* %81, i64 1), !dbg !8072
  %call76 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %78, %union.tree_node* %80, %union.tree_node* %call75), !dbg !8072
  store %union.tree_node* %call76, %union.tree_node** %diff, align 8, !dbg !8074
  %82 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8075
  %base77 = bitcast %union.tree_node* %82 to %struct.tree_base*, !dbg !8075
  %83 = bitcast %struct.tree_base* %base77 to i64*, !dbg !8075
  %bf.load78 = load i64, i64* %83, align 8, !dbg !8075
  %bf.clear79 = and i64 %bf.load78, 65535, !dbg !8075
  %bf.cast80 = trunc i64 %bf.clear79 to i32, !dbg !8075
  %cmp81 = icmp eq i32 %bf.cast80, 10, !dbg !8075
  br i1 %cmp81, label %if.end95, label %lor.lhs.false83, !dbg !8075

lor.lhs.false83:                                  ; preds = %if.then73
  %84 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8075
  %base84 = bitcast %union.tree_node* %84 to %struct.tree_base*, !dbg !8075
  %85 = bitcast %struct.tree_base* %base84 to i64*, !dbg !8075
  %bf.load85 = load i64, i64* %85, align 8, !dbg !8075
  %bf.clear86 = and i64 %bf.load85, 65535, !dbg !8075
  %bf.cast87 = trunc i64 %bf.clear86 to i32, !dbg !8075
  %cmp88 = icmp eq i32 %bf.cast87, 12, !dbg !8075
  br i1 %cmp88, label %if.end95, label %if.then90, !dbg !8077

if.then90:                                        ; preds = %lor.lhs.false83
  %86 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8078
  %87 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8078
  %type91 = bitcast %union.tree_node* %87 to %struct.tree_type*, !dbg !8078
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type91, i32 0, i32 13, !dbg !8078
  %88 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !8078
  %89 = load %union.tree_node*, %union.tree_node** %diff, align 8, !dbg !8078
  %call92 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %86, %union.tree_node* %88, %union.tree_node* %89), !dbg !8078
  store %union.tree_node* %call92, %union.tree_node** %bound, align 8, !dbg !8080
  %90 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !8081
  %91 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !8081
  %base93 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %91, i32 0, i32 0, !dbg !8081
  %92 = load %union.tree_node*, %union.tree_node** %base93, align 8, !dbg !8081
  %93 = load %union.tree_node*, %union.tree_node** %bound, align 8, !dbg !8081
  %call94 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 100, %union.tree_node* %90, %union.tree_node* %92, %union.tree_node* %93), !dbg !8081
  store %union.tree_node* %call94, %union.tree_node** %assumption, align 8, !dbg !8082
  br label %if.end95, !dbg !8083

if.end95:                                         ; preds = %if.then90, %lor.lhs.false83, %if.then73
  %94 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8084
  %95 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8084
  %96 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !8084
  %base96 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %96, i32 0, i32 0, !dbg !8084
  %97 = load %union.tree_node*, %union.tree_node** %base96, align 8, !dbg !8084
  %call97 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %95, %union.tree_node* %97), !dbg !8084
  %98 = load %union.tree_node*, %union.tree_node** %diff, align 8, !dbg !8084
  %call98 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %94, %union.tree_node* %call97, %union.tree_node* %98), !dbg !8084
  store %union.tree_node* %call98, %union.tree_node** %mbzl, align 8, !dbg !8085
  %99 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8086
  %100 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !8086
  %base99 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %100, i32 0, i32 0, !dbg !8086
  %101 = load %union.tree_node*, %union.tree_node** %base99, align 8, !dbg !8086
  %call100 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %99, %union.tree_node* %101), !dbg !8086
  store %union.tree_node* %call100, %union.tree_node** %mbzr, align 8, !dbg !8087
  br label %if.end129, !dbg !8088

if.else101:                                       ; preds = %if.end69
  %102 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8089
  %103 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !8089
  %step102 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %103, i32 0, i32 1, !dbg !8089
  %104 = load %union.tree_node*, %union.tree_node** %step102, align 8, !dbg !8089
  %105 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8089
  %call103 = call %union.tree_node* @build_int_cst(%union.tree_node* %105, i64 1), !dbg !8089
  %call104 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %102, %union.tree_node* %104, %union.tree_node* %call103), !dbg !8089
  store %union.tree_node* %call104, %union.tree_node** %diff, align 8, !dbg !8091
  %106 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8092
  %base105 = bitcast %union.tree_node* %106 to %struct.tree_base*, !dbg !8092
  %107 = bitcast %struct.tree_base* %base105 to i64*, !dbg !8092
  %bf.load106 = load i64, i64* %107, align 8, !dbg !8092
  %bf.clear107 = and i64 %bf.load106, 65535, !dbg !8092
  %bf.cast108 = trunc i64 %bf.clear107 to i32, !dbg !8092
  %cmp109 = icmp eq i32 %bf.cast108, 10, !dbg !8092
  br i1 %cmp109, label %if.end123, label %lor.lhs.false111, !dbg !8092

lor.lhs.false111:                                 ; preds = %if.else101
  %108 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8092
  %base112 = bitcast %union.tree_node* %108 to %struct.tree_base*, !dbg !8092
  %109 = bitcast %struct.tree_base* %base112 to i64*, !dbg !8092
  %bf.load113 = load i64, i64* %109, align 8, !dbg !8092
  %bf.clear114 = and i64 %bf.load113, 65535, !dbg !8092
  %bf.cast115 = trunc i64 %bf.clear114 to i32, !dbg !8092
  %cmp116 = icmp eq i32 %bf.cast115, 12, !dbg !8092
  br i1 %cmp116, label %if.end123, label %if.then118, !dbg !8094

if.then118:                                       ; preds = %lor.lhs.false111
  %110 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8095
  %111 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8095
  %type119 = bitcast %union.tree_node* %111 to %struct.tree_type*, !dbg !8095
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type119, i32 0, i32 14, !dbg !8095
  %112 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !8095
  %113 = load %union.tree_node*, %union.tree_node** %diff, align 8, !dbg !8095
  %call120 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %110, %union.tree_node* %112, %union.tree_node* %113), !dbg !8095
  store %union.tree_node* %call120, %union.tree_node** %bound, align 8, !dbg !8097
  %114 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !8098
  %115 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !8098
  %base121 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %115, i32 0, i32 0, !dbg !8098
  %116 = load %union.tree_node*, %union.tree_node** %base121, align 8, !dbg !8098
  %117 = load %union.tree_node*, %union.tree_node** %bound, align 8, !dbg !8098
  %call122 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 98, %union.tree_node* %114, %union.tree_node* %116, %union.tree_node* %117), !dbg !8098
  store %union.tree_node* %call122, %union.tree_node** %assumption, align 8, !dbg !8099
  br label %if.end123, !dbg !8100

if.end123:                                        ; preds = %if.then118, %lor.lhs.false111, %if.else101
  %118 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8101
  %119 = load %struct.affine_iv*, %struct.affine_iv** %iv0.addr, align 8, !dbg !8101
  %base124 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %119, i32 0, i32 0, !dbg !8101
  %120 = load %union.tree_node*, %union.tree_node** %base124, align 8, !dbg !8101
  %call125 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %118, %union.tree_node* %120), !dbg !8101
  store %union.tree_node* %call125, %union.tree_node** %mbzl, align 8, !dbg !8102
  %121 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8103
  %122 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8103
  %123 = load %struct.affine_iv*, %struct.affine_iv** %iv1.addr, align 8, !dbg !8103
  %base126 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %123, i32 0, i32 0, !dbg !8103
  %124 = load %union.tree_node*, %union.tree_node** %base126, align 8, !dbg !8103
  %call127 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %122, %union.tree_node* %124), !dbg !8103
  %125 = load %union.tree_node*, %union.tree_node** %diff, align 8, !dbg !8103
  %call128 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %121, %union.tree_node* %call127, %union.tree_node* %125), !dbg !8103
  store %union.tree_node* %call128, %union.tree_node** %mbzr, align 8, !dbg !8104
  br label %if.end129

if.end129:                                        ; preds = %if.end123, %if.end95
  %126 = load %union.tree_node*, %union.tree_node** %assumption, align 8, !dbg !8105
  %call130 = call i32 @integer_nonzerop(%union.tree_node* %126), !dbg !8107
  %tobool131 = icmp ne i32 %call130, 0, !dbg !8107
  br i1 %tobool131, label %if.end135, label %if.then132, !dbg !8108

if.then132:                                       ; preds = %if.end129
  %127 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !8109
  %128 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !8109
  %assumptions = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %128, i32 0, i32 0, !dbg !8109
  %129 = load %union.tree_node*, %union.tree_node** %assumptions, align 8, !dbg !8109
  %130 = load %union.tree_node*, %union.tree_node** %assumption, align 8, !dbg !8109
  %call133 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 93, %union.tree_node* %127, %union.tree_node* %129, %union.tree_node* %130), !dbg !8109
  %131 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !8110
  %assumptions134 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %131, i32 0, i32 0, !dbg !8111
  store %union.tree_node* %call133, %union.tree_node** %assumptions134, align 8, !dbg !8112
  br label %if.end135, !dbg !8110

if.end135:                                        ; preds = %if.then132, %if.end129
  %132 = load i8, i8* %rolls_p, align 1, !dbg !8113
  %tobool136 = icmp ne i8 %132, 0, !dbg !8113
  br i1 %tobool136, label %if.end141, label %if.then137, !dbg !8115

if.then137:                                       ; preds = %if.end135
  %133 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !8116
  %134 = load %union.tree_node*, %union.tree_node** %mbzl, align 8, !dbg !8116
  %135 = load %union.tree_node*, %union.tree_node** %mbzr, align 8, !dbg !8116
  %call138 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 99, %union.tree_node* %133, %union.tree_node* %134, %union.tree_node* %135), !dbg !8116
  store %union.tree_node* %call138, %union.tree_node** %mbz, align 8, !dbg !8118
  %136 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !8119
  %137 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !8119
  %may_be_zero = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %137, i32 0, i32 1, !dbg !8119
  %138 = load %union.tree_node*, %union.tree_node** %may_be_zero, align 8, !dbg !8119
  %139 = load %union.tree_node*, %union.tree_node** %mbz, align 8, !dbg !8119
  %call139 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 94, %union.tree_node* %136, %union.tree_node* %138, %union.tree_node* %139), !dbg !8119
  %140 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !8120
  %may_be_zero140 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %140, i32 0, i32 1, !dbg !8121
  store %union.tree_node* %call139, %union.tree_node** %may_be_zero140, align 8, !dbg !8122
  br label %if.end141, !dbg !8123

if.end141:                                        ; preds = %if.then54, %if.then137, %if.end135
  ret void, !dbg !8124
}

; Function Attrs: noinline nounwind uwtable
define internal void @bounds_add(%struct.bounds* %bnds, i64 %delta.coerce0, i64 %delta.coerce1, %union.tree_node* %type) #0 !dbg !8125 {
entry:
  %delta = alloca %struct.double_int, align 8
  %bnds.addr = alloca %struct.bounds*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %mdelta = alloca [1 x %struct.__mpz_struct], align 16
  %max = alloca [1 x %struct.__mpz_struct], align 16
  %agg.tmp = alloca %struct.double_int, align 8
  %0 = bitcast %struct.double_int* %delta to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %delta.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %delta.coerce1, i64* %2, align 8
  store %struct.bounds* %bnds, %struct.bounds** %bnds.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bounds** %bnds.addr, metadata !8128, metadata !DIExpression()), !dbg !8129
  call void @llvm.dbg.declare(metadata %struct.double_int* %delta, metadata !8130, metadata !DIExpression()), !dbg !8131
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !8132, metadata !DIExpression()), !dbg !8133
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %mdelta, metadata !8134, metadata !DIExpression()), !dbg !8135
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %max, metadata !8136, metadata !DIExpression()), !dbg !8137
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mdelta, i64 0, i64 0, !dbg !8138
  call void @mpz_init(%struct.__mpz_struct* %arraydecay), !dbg !8139
  %arraydecay1 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mdelta, i64 0, i64 0, !dbg !8140
  %3 = bitcast %struct.double_int* %delta to { i64, i64 }*, !dbg !8141
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0, !dbg !8141
  %5 = load i64, i64* %4, align 8, !dbg !8141
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1, !dbg !8141
  %7 = load i64, i64* %6, align 8, !dbg !8141
  call void @mpz_set_double_int(%struct.__mpz_struct* %arraydecay1, i64 %5, i64 %7, i8 zeroext 0), !dbg !8141
  %arraydecay2 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !8142
  call void @mpz_init(%struct.__mpz_struct* %arraydecay2), !dbg !8143
  %arraydecay3 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !8144
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !8145
  %type4 = bitcast %union.tree_node* %8 to %struct.tree_type*, !dbg !8145
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4, i32 0, i32 6, !dbg !8145
  %bf.load = load i32, i32* %precision, align 4, !dbg !8145
  %bf.clear = and i32 %bf.load, 1023, !dbg !8145
  %call = call { i64, i64 } @double_int_mask(i32 %bf.clear), !dbg !8146
  %9 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !8146
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i32 0, i32 0, !dbg !8146
  %11 = extractvalue { i64, i64 } %call, 0, !dbg !8146
  store i64 %11, i64* %10, align 8, !dbg !8146
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i32 0, i32 1, !dbg !8146
  %13 = extractvalue { i64, i64 } %call, 1, !dbg !8146
  store i64 %13, i64* %12, align 8, !dbg !8146
  %14 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !8147
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i32 0, i32 0, !dbg !8147
  %16 = load i64, i64* %15, align 8, !dbg !8147
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i32 0, i32 1, !dbg !8147
  %18 = load i64, i64* %17, align 8, !dbg !8147
  call void @mpz_set_double_int(%struct.__mpz_struct* %arraydecay3, i64 %16, i64 %18, i8 zeroext 1), !dbg !8147
  %19 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !8148
  %up = getelementptr inbounds %struct.bounds, %struct.bounds* %19, i32 0, i32 1, !dbg !8149
  %arraydecay5 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up, i64 0, i64 0, !dbg !8148
  %20 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !8150
  %up6 = getelementptr inbounds %struct.bounds, %struct.bounds* %20, i32 0, i32 1, !dbg !8151
  %arraydecay7 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up6, i64 0, i64 0, !dbg !8150
  %arraydecay8 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mdelta, i64 0, i64 0, !dbg !8152
  call void @mpz_add(%struct.__mpz_struct* %arraydecay5, %struct.__mpz_struct* %arraydecay7, %struct.__mpz_struct* %arraydecay8), !dbg !8153
  %21 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !8154
  %below = getelementptr inbounds %struct.bounds, %struct.bounds* %21, i32 0, i32 0, !dbg !8155
  %arraydecay9 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below, i64 0, i64 0, !dbg !8154
  %22 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !8156
  %below10 = getelementptr inbounds %struct.bounds, %struct.bounds* %22, i32 0, i32 0, !dbg !8157
  %arraydecay11 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below10, i64 0, i64 0, !dbg !8156
  %arraydecay12 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mdelta, i64 0, i64 0, !dbg !8158
  call void @mpz_add(%struct.__mpz_struct* %arraydecay9, %struct.__mpz_struct* %arraydecay11, %struct.__mpz_struct* %arraydecay12), !dbg !8159
  %23 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !8160
  %up13 = getelementptr inbounds %struct.bounds, %struct.bounds* %23, i32 0, i32 1, !dbg !8162
  %arraydecay14 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up13, i64 0, i64 0, !dbg !8160
  %arraydecay15 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !8163
  %call16 = call i32 @mpz_cmp(%struct.__mpz_struct* %arraydecay14, %struct.__mpz_struct* %arraydecay15), !dbg !8164
  %cmp = icmp sgt i32 %call16, 0, !dbg !8165
  br i1 %cmp, label %if.then, label %if.end, !dbg !8166

if.then:                                          ; preds = %entry
  %24 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !8167
  %up17 = getelementptr inbounds %struct.bounds, %struct.bounds* %24, i32 0, i32 1, !dbg !8168
  %arraydecay18 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %up17, i64 0, i64 0, !dbg !8167
  %arraydecay19 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !8169
  call void @mpz_set(%struct.__mpz_struct* %arraydecay18, %struct.__mpz_struct* %arraydecay19), !dbg !8170
  br label %if.end, !dbg !8170

if.end:                                           ; preds = %if.then, %entry
  %arraydecay20 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !8171
  %arraydecay21 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !8172
  call void @mpz_neg(%struct.__mpz_struct* %arraydecay20, %struct.__mpz_struct* %arraydecay21), !dbg !8173
  %25 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !8174
  %below22 = getelementptr inbounds %struct.bounds, %struct.bounds* %25, i32 0, i32 0, !dbg !8176
  %arraydecay23 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below22, i64 0, i64 0, !dbg !8174
  %arraydecay24 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !8177
  %call25 = call i32 @mpz_cmp(%struct.__mpz_struct* %arraydecay23, %struct.__mpz_struct* %arraydecay24), !dbg !8178
  %cmp26 = icmp slt i32 %call25, 0, !dbg !8179
  br i1 %cmp26, label %if.then27, label %if.end31, !dbg !8180

if.then27:                                        ; preds = %if.end
  %26 = load %struct.bounds*, %struct.bounds** %bnds.addr, align 8, !dbg !8181
  %below28 = getelementptr inbounds %struct.bounds, %struct.bounds* %26, i32 0, i32 0, !dbg !8182
  %arraydecay29 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %below28, i64 0, i64 0, !dbg !8181
  %arraydecay30 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !8183
  call void @mpz_set(%struct.__mpz_struct* %arraydecay29, %struct.__mpz_struct* %arraydecay30), !dbg !8184
  br label %if.end31, !dbg !8184

if.end31:                                         ; preds = %if.then27, %if.end
  %arraydecay32 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mdelta, i64 0, i64 0, !dbg !8185
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay32), !dbg !8186
  %arraydecay33 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !8187
  call void @mpz_clear(%struct.__mpz_struct* %arraydecay33), !dbg !8188
  ret void, !dbg !8189
}

declare dso_local %union.tree_node* @fold_build3_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @instantiate_parameters(%struct.loop* %loop, %union.tree_node* %chrec) #0 !dbg !8190 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8192, metadata !DIExpression()), !dbg !8193
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !8194, metadata !DIExpression()), !dbg !8195
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8196
  %call = call %struct.basic_block_def* @block_before_loop(%struct.loop* %0), !dbg !8197
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8198
  %2 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !8199
  %call1 = call %union.tree_node* @instantiate_scev(%struct.basic_block_def* %call, %struct.loop* %1, %union.tree_node* %2), !dbg !8200
  ret %union.tree_node* %call1, !dbg !8201
}

declare dso_local %union.tree_node* @instantiate_scev(%struct.basic_block_def*, %struct.loop*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @block_before_loop(%struct.loop* %loop) #0 !dbg !8202 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %preheader = alloca %struct.edge_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8205, metadata !DIExpression()), !dbg !8206
  call void @llvm.dbg.declare(metadata %struct.edge_def** %preheader, metadata !8207, metadata !DIExpression()), !dbg !8208
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8209
  %call = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %0), !dbg !8210
  store %struct.edge_def* %call, %struct.edge_def** %preheader, align 8, !dbg !8208
  %1 = load %struct.edge_def*, %struct.edge_def** %preheader, align 8, !dbg !8211
  %tobool = icmp ne %struct.edge_def* %1, null, !dbg !8211
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8211

cond.true:                                        ; preds = %entry
  %2 = load %struct.edge_def*, %struct.edge_def** %preheader, align 8, !dbg !8212
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 0, !dbg !8213
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !8213
  br label %cond.end, !dbg !8211

cond.false:                                       ; preds = %entry
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8214
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !8214
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8214
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8214
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 0, !dbg !8214
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !8214
  br label %cond.end, !dbg !8211

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %3, %cond.true ], [ %6, %cond.false ], !dbg !8211
  ret %struct.basic_block_def* %cond, !dbg !8215
}

declare dso_local %union.tree_node* @invert_truthvalue_loc(i32, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @tree_simplify_using_condition(%union.tree_node* %cond, %union.tree_node* %expr) #0 !dbg !8216 {
entry:
  %cond.addr = alloca %union.tree_node*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %cond, %union.tree_node** %cond.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond.addr, metadata !8217, metadata !DIExpression()), !dbg !8218
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8219, metadata !DIExpression()), !dbg !8220
  %0 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8221
  %call = call %union.tree_node* @expand_simple_operations(%union.tree_node* %0), !dbg !8222
  store %union.tree_node* %call, %union.tree_node** %cond.addr, align 8, !dbg !8223
  %1 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8224
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8225
  %call1 = call %union.tree_node* @tree_simplify_using_condition_1(%union.tree_node* %1, %union.tree_node* %2), !dbg !8226
  ret %union.tree_node* %call1, !dbg !8227
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @tree_simplify_using_condition_1(%union.tree_node* %cond, %union.tree_node* %expr) #0 !dbg !8228 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %cond.addr = alloca %union.tree_node*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %changed = alloca i8, align 1
  %e = alloca %union.tree_node*, align 8
  %te = alloca %union.tree_node*, align 8
  %e0 = alloca %union.tree_node*, align 8
  %e1 = alloca %union.tree_node*, align 8
  %e2 = alloca %union.tree_node*, align 8
  %notcond = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  store %union.tree_node* %cond, %union.tree_node** %cond.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond.addr, metadata !8229, metadata !DIExpression()), !dbg !8230
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !8231, metadata !DIExpression()), !dbg !8232
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !8233, metadata !DIExpression()), !dbg !8234
  call void @llvm.dbg.declare(metadata %union.tree_node** %e, metadata !8235, metadata !DIExpression()), !dbg !8236
  call void @llvm.dbg.declare(metadata %union.tree_node** %te, metadata !8237, metadata !DIExpression()), !dbg !8238
  call void @llvm.dbg.declare(metadata %union.tree_node** %e0, metadata !8239, metadata !DIExpression()), !dbg !8240
  call void @llvm.dbg.declare(metadata %union.tree_node** %e1, metadata !8241, metadata !DIExpression()), !dbg !8242
  call void @llvm.dbg.declare(metadata %union.tree_node** %e2, metadata !8243, metadata !DIExpression()), !dbg !8244
  call void @llvm.dbg.declare(metadata %union.tree_node** %notcond, metadata !8245, metadata !DIExpression()), !dbg !8246
  call void @llvm.dbg.declare(metadata i32* %code, metadata !8247, metadata !DIExpression()), !dbg !8248
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8249
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !8249
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !8249
  %bf.load = load i64, i64* %1, align 8, !dbg !8249
  %bf.clear = and i64 %bf.load, 65535, !dbg !8249
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8249
  store i32 %bf.cast, i32* %code, align 4, !dbg !8248
  %2 = load i32, i32* %code, align 4, !dbg !8250
  %cmp = icmp eq i32 %2, 23, !dbg !8252
  br i1 %cmp, label %if.then, label %if.end, !dbg !8253

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8254
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !8255
  br label %return, !dbg !8255

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %code, align 4, !dbg !8256
  %cmp1 = icmp eq i32 %4, 94, !dbg !8258
  br i1 %cmp1, label %if.then5, label %lor.lhs.false, !dbg !8259

lor.lhs.false:                                    ; preds = %if.end
  %5 = load i32, i32* %code, align 4, !dbg !8260
  %cmp2 = icmp eq i32 %5, 93, !dbg !8261
  br i1 %cmp2, label %if.then5, label %lor.lhs.false3, !dbg !8262

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %6 = load i32, i32* %code, align 4, !dbg !8263
  %cmp4 = icmp eq i32 %6, 56, !dbg !8264
  br i1 %cmp4, label %if.then5, label %if.end43, !dbg !8265

if.then5:                                         ; preds = %lor.lhs.false3, %lor.lhs.false, %if.end
  store i8 0, i8* %changed, align 1, !dbg !8266
  %7 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8268
  %8 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8269
  %exp = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !8269
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8269
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8269
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8269
  %call = call %union.tree_node* @tree_simplify_using_condition_1(%union.tree_node* %7, %union.tree_node* %9), !dbg !8270
  store %union.tree_node* %call, %union.tree_node** %e0, align 8, !dbg !8271
  %10 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8272
  %exp6 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !8272
  %operands7 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6, i32 0, i32 3, !dbg !8272
  %arrayidx8 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands7, i64 0, i64 0, !dbg !8272
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx8, align 8, !dbg !8272
  %12 = load %union.tree_node*, %union.tree_node** %e0, align 8, !dbg !8274
  %cmp9 = icmp ne %union.tree_node* %11, %12, !dbg !8275
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !8276

if.then10:                                        ; preds = %if.then5
  store i8 1, i8* %changed, align 1, !dbg !8277
  br label %if.end11, !dbg !8278

if.end11:                                         ; preds = %if.then10, %if.then5
  %13 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8279
  %14 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8280
  %exp12 = bitcast %union.tree_node* %14 to %struct.tree_exp*, !dbg !8280
  %operands13 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 3, !dbg !8280
  %arrayidx14 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands13, i64 0, i64 1, !dbg !8280
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx14, align 8, !dbg !8280
  %call15 = call %union.tree_node* @tree_simplify_using_condition_1(%union.tree_node* %13, %union.tree_node* %15), !dbg !8281
  store %union.tree_node* %call15, %union.tree_node** %e1, align 8, !dbg !8282
  %16 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8283
  %exp16 = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !8283
  %operands17 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp16, i32 0, i32 3, !dbg !8283
  %arrayidx18 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands17, i64 0, i64 1, !dbg !8283
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx18, align 8, !dbg !8283
  %18 = load %union.tree_node*, %union.tree_node** %e1, align 8, !dbg !8285
  %cmp19 = icmp ne %union.tree_node* %17, %18, !dbg !8286
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !8287

if.then20:                                        ; preds = %if.end11
  store i8 1, i8* %changed, align 1, !dbg !8288
  br label %if.end21, !dbg !8289

if.end21:                                         ; preds = %if.then20, %if.end11
  %19 = load i32, i32* %code, align 4, !dbg !8290
  %cmp22 = icmp eq i32 %19, 56, !dbg !8292
  br i1 %cmp22, label %if.then23, label %if.else, !dbg !8293

if.then23:                                        ; preds = %if.end21
  %20 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8294
  %21 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8296
  %exp24 = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !8296
  %operands25 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp24, i32 0, i32 3, !dbg !8296
  %arrayidx26 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands25, i64 0, i64 2, !dbg !8296
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx26, align 8, !dbg !8296
  %call27 = call %union.tree_node* @tree_simplify_using_condition_1(%union.tree_node* %20, %union.tree_node* %22), !dbg !8297
  store %union.tree_node* %call27, %union.tree_node** %e2, align 8, !dbg !8298
  %23 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8299
  %exp28 = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !8299
  %operands29 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp28, i32 0, i32 3, !dbg !8299
  %arrayidx30 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands29, i64 0, i64 2, !dbg !8299
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx30, align 8, !dbg !8299
  %25 = load %union.tree_node*, %union.tree_node** %e2, align 8, !dbg !8301
  %cmp31 = icmp ne %union.tree_node* %24, %25, !dbg !8302
  br i1 %cmp31, label %if.then32, label %if.end33, !dbg !8303

if.then32:                                        ; preds = %if.then23
  store i8 1, i8* %changed, align 1, !dbg !8304
  br label %if.end33, !dbg !8305

if.end33:                                         ; preds = %if.then32, %if.then23
  br label %if.end34, !dbg !8306

if.else:                                          ; preds = %if.end21
  store %union.tree_node* null, %union.tree_node** %e2, align 8, !dbg !8307
  br label %if.end34

if.end34:                                         ; preds = %if.else, %if.end33
  %26 = load i8, i8* %changed, align 1, !dbg !8308
  %tobool = icmp ne i8 %26, 0, !dbg !8308
  br i1 %tobool, label %if.then35, label %if.end42, !dbg !8310

if.then35:                                        ; preds = %if.end34
  %27 = load i32, i32* %code, align 4, !dbg !8311
  %cmp36 = icmp eq i32 %27, 56, !dbg !8314
  br i1 %cmp36, label %if.then37, label %if.else39, !dbg !8315

if.then37:                                        ; preds = %if.then35
  %28 = load i32, i32* %code, align 4, !dbg !8316
  %29 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !8316
  %30 = load %union.tree_node*, %union.tree_node** %e0, align 8, !dbg !8316
  %31 = load %union.tree_node*, %union.tree_node** %e1, align 8, !dbg !8316
  %32 = load %union.tree_node*, %union.tree_node** %e2, align 8, !dbg !8316
  %call38 = call %union.tree_node* @fold_build3_stat_loc(i32 0, i32 %28, %union.tree_node* %29, %union.tree_node* %30, %union.tree_node* %31, %union.tree_node* %32), !dbg !8316
  store %union.tree_node* %call38, %union.tree_node** %expr.addr, align 8, !dbg !8317
  br label %if.end41, !dbg !8318

if.else39:                                        ; preds = %if.then35
  %33 = load i32, i32* %code, align 4, !dbg !8319
  %34 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !8319
  %35 = load %union.tree_node*, %union.tree_node** %e0, align 8, !dbg !8319
  %36 = load %union.tree_node*, %union.tree_node** %e1, align 8, !dbg !8319
  %call40 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %33, %union.tree_node* %34, %union.tree_node* %35, %union.tree_node* %36), !dbg !8319
  store %union.tree_node* %call40, %union.tree_node** %expr.addr, align 8, !dbg !8320
  br label %if.end41

if.end41:                                         ; preds = %if.else39, %if.then37
  br label %if.end42, !dbg !8321

if.end42:                                         ; preds = %if.end41, %if.end34
  %37 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8322
  store %union.tree_node* %37, %union.tree_node** %retval, align 8, !dbg !8323
  br label %return, !dbg !8323

if.end43:                                         ; preds = %lor.lhs.false3
  %38 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8324
  %base44 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !8324
  %39 = bitcast %struct.tree_base* %base44 to i64*, !dbg !8324
  %bf.load45 = load i64, i64* %39, align 8, !dbg !8324
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !8324
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !8324
  %cmp48 = icmp eq i32 %bf.cast47, 101, !dbg !8326
  br i1 %cmp48, label %if.then49, label %if.end72, !dbg !8327

if.then49:                                        ; preds = %if.end43
  %40 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8328
  %exp50 = bitcast %union.tree_node* %40 to %struct.tree_exp*, !dbg !8328
  %operands51 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp50, i32 0, i32 3, !dbg !8328
  %arrayidx52 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands51, i64 0, i64 0, !dbg !8328
  %41 = load %union.tree_node*, %union.tree_node** %arrayidx52, align 8, !dbg !8328
  store %union.tree_node* %41, %union.tree_node** %e0, align 8, !dbg !8330
  %42 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8331
  %exp53 = bitcast %union.tree_node* %42 to %struct.tree_exp*, !dbg !8331
  %operands54 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp53, i32 0, i32 3, !dbg !8331
  %arrayidx55 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands54, i64 0, i64 1, !dbg !8331
  %43 = load %union.tree_node*, %union.tree_node** %arrayidx55, align 8, !dbg !8331
  store %union.tree_node* %43, %union.tree_node** %e1, align 8, !dbg !8332
  %44 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8333
  %45 = load %union.tree_node*, %union.tree_node** %e0, align 8, !dbg !8334
  %46 = load %union.tree_node*, %union.tree_node** %e1, align 8, !dbg !8335
  %call56 = call %union.tree_node* @simplify_replace_tree(%union.tree_node* %44, %union.tree_node* %45, %union.tree_node* %46), !dbg !8336
  store %union.tree_node* %call56, %union.tree_node** %e, align 8, !dbg !8337
  %47 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !8338
  %call57 = call i32 @integer_zerop(%union.tree_node* %47), !dbg !8340
  %tobool58 = icmp ne i32 %call57, 0, !dbg !8340
  br i1 %tobool58, label %if.then62, label %lor.lhs.false59, !dbg !8341

lor.lhs.false59:                                  ; preds = %if.then49
  %48 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !8342
  %call60 = call i32 @integer_nonzerop(%union.tree_node* %48), !dbg !8343
  %tobool61 = icmp ne i32 %call60, 0, !dbg !8343
  br i1 %tobool61, label %if.then62, label %if.end63, !dbg !8344

if.then62:                                        ; preds = %lor.lhs.false59, %if.then49
  %49 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !8345
  store %union.tree_node* %49, %union.tree_node** %retval, align 8, !dbg !8346
  br label %return, !dbg !8346

if.end63:                                         ; preds = %lor.lhs.false59
  %50 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8347
  %51 = load %union.tree_node*, %union.tree_node** %e1, align 8, !dbg !8348
  %52 = load %union.tree_node*, %union.tree_node** %e0, align 8, !dbg !8349
  %call64 = call %union.tree_node* @simplify_replace_tree(%union.tree_node* %50, %union.tree_node* %51, %union.tree_node* %52), !dbg !8350
  store %union.tree_node* %call64, %union.tree_node** %e, align 8, !dbg !8351
  %53 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !8352
  %call65 = call i32 @integer_zerop(%union.tree_node* %53), !dbg !8354
  %tobool66 = icmp ne i32 %call65, 0, !dbg !8354
  br i1 %tobool66, label %if.then70, label %lor.lhs.false67, !dbg !8355

lor.lhs.false67:                                  ; preds = %if.end63
  %54 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !8356
  %call68 = call i32 @integer_nonzerop(%union.tree_node* %54), !dbg !8357
  %tobool69 = icmp ne i32 %call68, 0, !dbg !8357
  br i1 %tobool69, label %if.then70, label %if.end71, !dbg !8358

if.then70:                                        ; preds = %lor.lhs.false67, %if.end63
  %55 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !8359
  store %union.tree_node* %55, %union.tree_node** %retval, align 8, !dbg !8360
  br label %return, !dbg !8360

if.end71:                                         ; preds = %lor.lhs.false67
  br label %if.end72, !dbg !8361

if.end72:                                         ; preds = %if.end71, %if.end43
  %56 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8362
  %base73 = bitcast %union.tree_node* %56 to %struct.tree_base*, !dbg !8362
  %57 = bitcast %struct.tree_base* %base73 to i64*, !dbg !8362
  %bf.load74 = load i64, i64* %57, align 8, !dbg !8362
  %bf.clear75 = and i64 %bf.load74, 65535, !dbg !8362
  %bf.cast76 = trunc i64 %bf.clear75 to i32, !dbg !8362
  %cmp77 = icmp eq i32 %bf.cast76, 101, !dbg !8364
  br i1 %cmp77, label %if.then78, label %if.end95, !dbg !8365

if.then78:                                        ; preds = %if.end72
  %58 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8366
  %exp79 = bitcast %union.tree_node* %58 to %struct.tree_exp*, !dbg !8366
  %operands80 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp79, i32 0, i32 3, !dbg !8366
  %arrayidx81 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands80, i64 0, i64 0, !dbg !8366
  %59 = load %union.tree_node*, %union.tree_node** %arrayidx81, align 8, !dbg !8366
  store %union.tree_node* %59, %union.tree_node** %e0, align 8, !dbg !8368
  %60 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8369
  %exp82 = bitcast %union.tree_node* %60 to %struct.tree_exp*, !dbg !8369
  %operands83 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp82, i32 0, i32 3, !dbg !8369
  %arrayidx84 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands83, i64 0, i64 1, !dbg !8369
  %61 = load %union.tree_node*, %union.tree_node** %arrayidx84, align 8, !dbg !8369
  store %union.tree_node* %61, %union.tree_node** %e1, align 8, !dbg !8370
  %62 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8371
  %63 = load %union.tree_node*, %union.tree_node** %e0, align 8, !dbg !8372
  %64 = load %union.tree_node*, %union.tree_node** %e1, align 8, !dbg !8373
  %call85 = call %union.tree_node* @simplify_replace_tree(%union.tree_node* %62, %union.tree_node* %63, %union.tree_node* %64), !dbg !8374
  store %union.tree_node* %call85, %union.tree_node** %e, align 8, !dbg !8375
  %65 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !8376
  %call86 = call i32 @integer_zerop(%union.tree_node* %65), !dbg !8378
  %tobool87 = icmp ne i32 %call86, 0, !dbg !8378
  br i1 %tobool87, label %if.then88, label %if.end89, !dbg !8379

if.then88:                                        ; preds = %if.then78
  %66 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !8380
  store %union.tree_node* %66, %union.tree_node** %retval, align 8, !dbg !8381
  br label %return, !dbg !8381

if.end89:                                         ; preds = %if.then78
  %67 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8382
  %68 = load %union.tree_node*, %union.tree_node** %e1, align 8, !dbg !8383
  %69 = load %union.tree_node*, %union.tree_node** %e0, align 8, !dbg !8384
  %call90 = call %union.tree_node* @simplify_replace_tree(%union.tree_node* %67, %union.tree_node* %68, %union.tree_node* %69), !dbg !8385
  store %union.tree_node* %call90, %union.tree_node** %e, align 8, !dbg !8386
  %70 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !8387
  %call91 = call i32 @integer_zerop(%union.tree_node* %70), !dbg !8389
  %tobool92 = icmp ne i32 %call91, 0, !dbg !8389
  br i1 %tobool92, label %if.then93, label %if.end94, !dbg !8390

if.then93:                                        ; preds = %if.end89
  %71 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !8391
  store %union.tree_node* %71, %union.tree_node** %retval, align 8, !dbg !8392
  br label %return, !dbg !8392

if.end94:                                         ; preds = %if.end89
  br label %if.end95, !dbg !8393

if.end95:                                         ; preds = %if.end94, %if.end72
  %72 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8394
  %base96 = bitcast %union.tree_node* %72 to %struct.tree_base*, !dbg !8394
  %73 = bitcast %struct.tree_base* %base96 to i64*, !dbg !8394
  %bf.load97 = load i64, i64* %73, align 8, !dbg !8394
  %bf.clear98 = and i64 %bf.load97, 65535, !dbg !8394
  %bf.cast99 = trunc i64 %bf.clear98 to i32, !dbg !8394
  %cmp100 = icmp eq i32 %bf.cast99, 102, !dbg !8396
  br i1 %cmp100, label %if.then101, label %if.end118, !dbg !8397

if.then101:                                       ; preds = %if.end95
  %74 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8398
  %exp102 = bitcast %union.tree_node* %74 to %struct.tree_exp*, !dbg !8398
  %operands103 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp102, i32 0, i32 3, !dbg !8398
  %arrayidx104 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands103, i64 0, i64 0, !dbg !8398
  %75 = load %union.tree_node*, %union.tree_node** %arrayidx104, align 8, !dbg !8398
  store %union.tree_node* %75, %union.tree_node** %e0, align 8, !dbg !8400
  %76 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8401
  %exp105 = bitcast %union.tree_node* %76 to %struct.tree_exp*, !dbg !8401
  %operands106 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp105, i32 0, i32 3, !dbg !8401
  %arrayidx107 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands106, i64 0, i64 1, !dbg !8401
  %77 = load %union.tree_node*, %union.tree_node** %arrayidx107, align 8, !dbg !8401
  store %union.tree_node* %77, %union.tree_node** %e1, align 8, !dbg !8402
  %78 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8403
  %79 = load %union.tree_node*, %union.tree_node** %e0, align 8, !dbg !8404
  %80 = load %union.tree_node*, %union.tree_node** %e1, align 8, !dbg !8405
  %call108 = call %union.tree_node* @simplify_replace_tree(%union.tree_node* %78, %union.tree_node* %79, %union.tree_node* %80), !dbg !8406
  store %union.tree_node* %call108, %union.tree_node** %e, align 8, !dbg !8407
  %81 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !8408
  %call109 = call i32 @integer_zerop(%union.tree_node* %81), !dbg !8410
  %tobool110 = icmp ne i32 %call109, 0, !dbg !8410
  br i1 %tobool110, label %if.then111, label %if.end112, !dbg !8411

if.then111:                                       ; preds = %if.then101
  %82 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !8412
  store %union.tree_node* %82, %union.tree_node** %retval, align 8, !dbg !8413
  br label %return, !dbg !8413

if.end112:                                        ; preds = %if.then101
  %83 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8414
  %84 = load %union.tree_node*, %union.tree_node** %e1, align 8, !dbg !8415
  %85 = load %union.tree_node*, %union.tree_node** %e0, align 8, !dbg !8416
  %call113 = call %union.tree_node* @simplify_replace_tree(%union.tree_node* %83, %union.tree_node* %84, %union.tree_node* %85), !dbg !8417
  store %union.tree_node* %call113, %union.tree_node** %e, align 8, !dbg !8418
  %86 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !8419
  %call114 = call i32 @integer_zerop(%union.tree_node* %86), !dbg !8421
  %tobool115 = icmp ne i32 %call114, 0, !dbg !8421
  br i1 %tobool115, label %if.then116, label %if.end117, !dbg !8422

if.then116:                                       ; preds = %if.end112
  %87 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !8423
  store %union.tree_node* %87, %union.tree_node** %retval, align 8, !dbg !8424
  br label %return, !dbg !8424

if.end117:                                        ; preds = %if.end112
  br label %if.end118, !dbg !8425

if.end118:                                        ; preds = %if.end117, %if.end95
  %88 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8426
  %call119 = call %union.tree_node* @expand_simple_operations(%union.tree_node* %88), !dbg !8427
  store %union.tree_node* %call119, %union.tree_node** %te, align 8, !dbg !8428
  %89 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8429
  %call120 = call %union.tree_node* @invert_truthvalue_loc(i32 0, %union.tree_node* %89), !dbg !8429
  store %union.tree_node* %call120, %union.tree_node** %notcond, align 8, !dbg !8430
  %90 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !8431
  %91 = load %union.tree_node*, %union.tree_node** %notcond, align 8, !dbg !8431
  %92 = load %union.tree_node*, %union.tree_node** %te, align 8, !dbg !8431
  %call121 = call %union.tree_node* @fold_binary_loc(i32 0, i32 94, %union.tree_node* %90, %union.tree_node* %91, %union.tree_node* %92), !dbg !8431
  store %union.tree_node* %call121, %union.tree_node** %e, align 8, !dbg !8432
  %93 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !8433
  %tobool122 = icmp ne %union.tree_node* %93, null, !dbg !8433
  br i1 %tobool122, label %land.lhs.true, label %if.end126, !dbg !8435

land.lhs.true:                                    ; preds = %if.end118
  %94 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !8436
  %call123 = call i32 @integer_nonzerop(%union.tree_node* %94), !dbg !8437
  %tobool124 = icmp ne i32 %call123, 0, !dbg !8437
  br i1 %tobool124, label %if.then125, label %if.end126, !dbg !8438

if.then125:                                       ; preds = %land.lhs.true
  %95 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !8439
  store %union.tree_node* %95, %union.tree_node** %retval, align 8, !dbg !8440
  br label %return, !dbg !8440

if.end126:                                        ; preds = %land.lhs.true, %if.end118
  %96 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !8441
  %97 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8441
  %98 = load %union.tree_node*, %union.tree_node** %te, align 8, !dbg !8441
  %call127 = call %union.tree_node* @fold_binary_loc(i32 0, i32 93, %union.tree_node* %96, %union.tree_node* %97, %union.tree_node* %98), !dbg !8441
  store %union.tree_node* %call127, %union.tree_node** %e, align 8, !dbg !8442
  %99 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !8443
  %tobool128 = icmp ne %union.tree_node* %99, null, !dbg !8443
  br i1 %tobool128, label %land.lhs.true129, label %if.end133, !dbg !8445

land.lhs.true129:                                 ; preds = %if.end126
  %100 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !8446
  %call130 = call i32 @integer_zerop(%union.tree_node* %100), !dbg !8447
  %tobool131 = icmp ne i32 %call130, 0, !dbg !8447
  br i1 %tobool131, label %if.then132, label %if.end133, !dbg !8448

if.then132:                                       ; preds = %land.lhs.true129
  %101 = load %union.tree_node*, %union.tree_node** %e, align 8, !dbg !8449
  store %union.tree_node* %101, %union.tree_node** %retval, align 8, !dbg !8450
  br label %return, !dbg !8450

if.end133:                                        ; preds = %land.lhs.true129, %if.end126
  %102 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !8451
  store %union.tree_node* %102, %union.tree_node** %retval, align 8, !dbg !8452
  br label %return, !dbg !8452

return:                                           ; preds = %if.end133, %if.then132, %if.then125, %if.then116, %if.then111, %if.then93, %if.then88, %if.then70, %if.then62, %if.end42, %if.then
  %103 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8453
  ret %union.tree_node* %103, !dbg !8453
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @chain_of_csts_start(%struct.loop* %loop, %union.tree_node* %x) #0 !dbg !8454 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %x.addr = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %use = alloca %union.tree_node*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %code = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8455, metadata !DIExpression()), !dbg !8456
  store %union.tree_node* %x, %union.tree_node** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %x.addr, metadata !8457, metadata !DIExpression()), !dbg !8458
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !8459, metadata !DIExpression()), !dbg !8460
  %0 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !8461
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !8461
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !8461
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8461
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %stmt, align 8, !dbg !8460
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !8462, metadata !DIExpression()), !dbg !8463
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !8464, metadata !DIExpression()), !dbg !8465
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8466
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %2), !dbg !8467
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !8465
  call void @llvm.dbg.declare(metadata i32* %code, metadata !8468, metadata !DIExpression()), !dbg !8469
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8470
  %tobool = icmp ne %struct.basic_block_def* %3, null, !dbg !8470
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !8472

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8473
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8474
  %call1 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %4, %struct.basic_block_def* %5), !dbg !8475
  %tobool2 = icmp ne i8 %call1, 0, !dbg !8475
  br i1 %tobool2, label %if.end, label %if.then, !dbg !8476

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !8477
  br label %return, !dbg !8477

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8478
  %call3 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !8480
  %cmp = icmp eq i32 %call3, 16, !dbg !8481
  br i1 %cmp, label %if.then4, label %if.end8, !dbg !8482

if.then4:                                         ; preds = %if.end
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8483
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8486
  %header = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 2, !dbg !8487
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !8487
  %cmp5 = icmp eq %struct.basic_block_def* %7, %9, !dbg !8488
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !8489

if.then6:                                         ; preds = %if.then4
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8490
  store %union.gimple_statement_d* %10, %union.gimple_statement_d** %retval, align 8, !dbg !8491
  br label %return, !dbg !8491

if.end7:                                          ; preds = %if.then4
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !8492
  br label %return, !dbg !8492

if.end8:                                          ; preds = %if.end
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8493
  %call9 = call i32 @gimple_code(%union.gimple_statement_d* %11), !dbg !8495
  %cmp10 = icmp ne i32 %call9, 6, !dbg !8496
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !8497

if.then11:                                        ; preds = %if.end8
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !8498
  br label %return, !dbg !8498

if.end12:                                         ; preds = %if.end8
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8499
  %call13 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %12), !dbg !8500
  store i32 %call13, i32* %code, align 4, !dbg !8501
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8502
  %call14 = call zeroext i8 @gimple_references_memory_p(%union.gimple_statement_d* %13), !dbg !8504
  %conv = zext i8 %call14 to i32, !dbg !8504
  %tobool15 = icmp ne i32 %conv, 0, !dbg !8504
  br i1 %tobool15, label %if.then25, label %lor.lhs.false16, !dbg !8505

lor.lhs.false16:                                  ; preds = %if.end12
  %14 = load i32, i32* %code, align 4, !dbg !8506
  %idxprom = sext i32 %14 to i64, !dbg !8506
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8506
  %15 = load i32, i32* %arrayidx, align 4, !dbg !8506
  %cmp17 = icmp eq i32 %15, 4, !dbg !8507
  br i1 %cmp17, label %if.then25, label %lor.lhs.false19, !dbg !8508

lor.lhs.false19:                                  ; preds = %lor.lhs.false16
  %16 = load i32, i32* %code, align 4, !dbg !8509
  %cmp20 = icmp eq i32 %16, 121, !dbg !8510
  br i1 %cmp20, label %land.lhs.true, label %if.end26, !dbg !8511

land.lhs.true:                                    ; preds = %lor.lhs.false19
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8512
  %call22 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %17), !dbg !8513
  %call23 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call22), !dbg !8514
  %tobool24 = icmp ne i8 %call23, 0, !dbg !8514
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !8515

if.then25:                                        ; preds = %land.lhs.true, %lor.lhs.false16, %if.end12
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !8516
  br label %return, !dbg !8516

if.end26:                                         ; preds = %land.lhs.true, %lor.lhs.false19
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8517
  %call27 = call %union.tree_node* @single_ssa_tree_operand(%union.gimple_statement_d* %18, i32 1), !dbg !8517
  store %union.tree_node* %call27, %union.tree_node** %use, align 8, !dbg !8518
  %19 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8519
  %cmp28 = icmp eq %union.tree_node* %19, null, !dbg !8521
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !8522

if.then30:                                        ; preds = %if.end26
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !8523
  br label %return, !dbg !8523

if.end31:                                         ; preds = %if.end26
  %20 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8524
  %21 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !8525
  %call32 = call %union.gimple_statement_d* @chain_of_csts_start(%struct.loop* %20, %union.tree_node* %21), !dbg !8526
  store %union.gimple_statement_d* %call32, %union.gimple_statement_d** %retval, align 8, !dbg !8527
  br label %return, !dbg !8527

return:                                           ; preds = %if.end31, %if.then30, %if.then25, %if.then11, %if.end7, %if.then6, %if.then
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !8528
  ret %union.gimple_statement_d* %22, !dbg !8528
}

declare dso_local zeroext i8 @flow_bb_inside_loop_p(%struct.loop*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_references_memory_p(%union.gimple_statement_d* %stmt) #0 !dbg !8529 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8532, metadata !DIExpression()), !dbg !8533
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8534
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !8535
  %conv = zext i8 %call to i32, !dbg !8535
  %tobool = icmp ne i32 %conv, 0, !dbg !8535
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8536

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8537
  %call1 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %1), !dbg !8538
  %tobool2 = icmp ne %union.tree_node* %call1, null, !dbg !8536
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !dbg !8539
  %land.ext = zext i1 %2 to i32, !dbg !8536
  %conv3 = trunc i32 %land.ext to i8, !dbg !8535
  ret i8 %conv3, !dbg !8540
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @single_ssa_tree_operand(%union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !8541 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %var = alloca %union.tree_node*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8544, metadata !DIExpression()), !dbg !8545
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !8546, metadata !DIExpression()), !dbg !8547
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !8548, metadata !DIExpression()), !dbg !8549
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !8550, metadata !DIExpression()), !dbg !8563
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8564
  %1 = load i32, i32* %flags.addr, align 4, !dbg !8565
  %call = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %0, i32 %1), !dbg !8566
  store %union.tree_node* %call, %union.tree_node** %var, align 8, !dbg !8567
  %call1 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !8568
  %tobool = icmp ne i8 %call1, 0, !dbg !8568
  br i1 %tobool, label %if.then, label %if.end, !dbg !8570

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8571
  br label %return, !dbg !8571

if.end:                                           ; preds = %entry
  %call2 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !8572
  %call3 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !8573
  %tobool4 = icmp ne i8 %call3, 0, !dbg !8573
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !8575

if.then5:                                         ; preds = %if.end
  %2 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8576
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !8577
  br label %return, !dbg !8577

if.end6:                                          ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8578
  br label %return, !dbg !8578

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8579
  ret %union.tree_node* %3, !dbg !8579
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !8580 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8581, metadata !DIExpression()), !dbg !8582
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8583
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8584
  %cmp = icmp uge i32 %call, 6, !dbg !8585
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !8586

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8587
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !8588
  %cmp2 = icmp ule i32 %call1, 9, !dbg !8589
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !8590
  %land.ext = zext i1 %2 to i32, !dbg !8586
  %conv = trunc i32 %land.ext to i8, !dbg !8584
  ret i8 %conv, !dbg !8591
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !8592 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8593, metadata !DIExpression()), !dbg !8594
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8595
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !8597
  %tobool = icmp ne i8 %call, 0, !dbg !8597
  br i1 %tobool, label %if.end, label %if.then, !dbg !8598

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8599
  br label %return, !dbg !8599

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8600
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !8601
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !8602
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !8602
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !8603
  br label %return, !dbg !8603

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8604
  ret %union.tree_node* %3, !dbg !8604
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !8605 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8609, metadata !DIExpression()), !dbg !8610
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8611, metadata !DIExpression()), !dbg !8612
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !8613, metadata !DIExpression()), !dbg !8614
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8615
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8616
  %2 = load i32, i32* %flags.addr, align 4, !dbg !8617
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %0, %union.gimple_statement_d* %1, i32 %2), !dbg !8618
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8619
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 1, !dbg !8620
  store i32 1, i32* %iter_type, align 4, !dbg !8621
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8622
  %call = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %4), !dbg !8623
  ret %union.tree_node* %call, !dbg !8624
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !8625 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8630, metadata !DIExpression()), !dbg !8631
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8632
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !8633
  %1 = load i8, i8* %done, align 8, !dbg !8633
  ret i8 %1, !dbg !8634
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !8635 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %val = alloca %union.tree_node*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8638, metadata !DIExpression()), !dbg !8639
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !8640, metadata !DIExpression()), !dbg !8641
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8642
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !8644
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !8644
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !8642
  br i1 %tobool, label %if.then, label %if.end, !dbg !8645

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8646
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !8646
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !8646
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !8646
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use_ptr), !dbg !8646
  store %union.tree_node* %call, %union.tree_node** %val, align 8, !dbg !8648
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8649
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !8650
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !8650
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !8651
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !8651
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8652
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !8653
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !8654
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8655
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !8656
  br label %return, !dbg !8656

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8657
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 2, !dbg !8659
  %10 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !8659
  %tobool4 = icmp ne %struct.def_optype_d* %10, null, !dbg !8657
  br i1 %tobool4, label %if.then5, label %if.end11, !dbg !8660

if.then5:                                         ; preds = %if.end
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8661
  %defs6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !8661
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs6, align 8, !dbg !8661
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 1, !dbg !8661
  %13 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !8661
  %call7 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %13), !dbg !8661
  store %union.tree_node* %call7, %union.tree_node** %val, align 8, !dbg !8663
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8664
  %defs8 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !8665
  %15 = load %struct.def_optype_d*, %struct.def_optype_d** %defs8, align 8, !dbg !8665
  %next9 = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %15, i32 0, i32 0, !dbg !8666
  %16 = load %struct.def_optype_d*, %struct.def_optype_d** %next9, align 8, !dbg !8666
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8667
  %defs10 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 2, !dbg !8668
  store %struct.def_optype_d* %16, %struct.def_optype_d** %defs10, align 8, !dbg !8669
  %18 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8670
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !8671
  br label %return, !dbg !8671

if.end11:                                         ; preds = %if.end
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8672
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 0, !dbg !8673
  store i8 1, i8* %done, align 8, !dbg !8674
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8675
  br label %return, !dbg !8675

return:                                           ; preds = %if.end11, %if.then5, %if.then
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8676
  ret %union.tree_node* %20, !dbg !8676
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !8677 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8680, metadata !DIExpression()), !dbg !8681
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8682, metadata !DIExpression()), !dbg !8683
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !8684, metadata !DIExpression()), !dbg !8685
  %0 = load i32, i32* %flags.addr, align 4, !dbg !8686
  %and = and i32 %0, 8, !dbg !8686
  %tobool = icmp ne i32 %and, 0, !dbg !8686
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !8686

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !8686
  %and1 = and i32 %1, 2, !dbg !8686
  %tobool2 = icmp ne i32 %and1, 0, !dbg !8686
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !8686

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !8686
  %and3 = and i32 %2, 4, !dbg !8686
  %tobool4 = icmp ne i32 %and3, 0, !dbg !8686
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !8686

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !8686
  %and6 = and i32 %3, 1, !dbg !8686
  %tobool7 = icmp ne i32 %and6, 0, !dbg !8686
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !8686

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !8686
  br label %cond.end, !dbg !8686

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !8686

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8686
  %4 = load i32, i32* %flags.addr, align 4, !dbg !8687
  %and8 = and i32 %4, 10, !dbg !8688
  %tobool9 = icmp ne i32 %and8, 0, !dbg !8688
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !8689

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8690
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !8691
  br label %cond.end12, !dbg !8689

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !8689

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !8689
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8692
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !8693
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !8694
  %7 = load i32, i32* %flags.addr, align 4, !dbg !8695
  %and14 = and i32 %7, 8, !dbg !8697
  %tobool15 = icmp ne i32 %and14, 0, !dbg !8697
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !8698

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8699
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !8700
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !8700
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !8699
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !8701

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8702
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !8703
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !8704
  br i1 %cmp, label %if.then, label %if.end, !dbg !8705

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8706
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !8707
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !8707
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !8708
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !8708
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8709
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !8710
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !8711
  br label %if.end, !dbg !8709

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !8712
  %and23 = and i32 %15, 5, !dbg !8713
  %tobool24 = icmp ne i32 %and23, 0, !dbg !8713
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !8714

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8715
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !8716
  br label %cond.end28, !dbg !8714

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !8714

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !8714
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8717
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !8718
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !8719
  %18 = load i32, i32* %flags.addr, align 4, !dbg !8720
  %and30 = and i32 %18, 4, !dbg !8722
  %tobool31 = icmp ne i32 %and30, 0, !dbg !8722
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !8723

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8724
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !8725
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !8725
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !8724
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !8726

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8727
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !8728
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !8729
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !8730

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8731
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !8732
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !8732
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !8733
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !8733
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8734
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !8735
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !8736
  br label %if.end42, !dbg !8734

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8737
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !8738
  store i8 0, i8* %done, align 8, !dbg !8739
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8740
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !8741
  store i32 0, i32* %phi_i, align 8, !dbg !8742
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8743
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !8744
  store i32 0, i32* %num_phi, align 4, !dbg !8745
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8746
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !8747
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !8748
  ret void, !dbg !8749
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !8750 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8753, metadata !DIExpression()), !dbg !8754
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8755
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !8757
  %tobool = icmp ne i8 %call, 0, !dbg !8757
  br i1 %tobool, label %if.end, label %if.then, !dbg !8758

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !8759
  br label %return, !dbg !8759

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8760
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !8761
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !8762
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !8763
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !8763
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !8764
  br label %return, !dbg !8764

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !8765
  ret %struct.def_optype_d* %3, !dbg !8765
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !8766 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8767, metadata !DIExpression()), !dbg !8768
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8769
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !8771
  %tobool = icmp ne i8 %call, 0, !dbg !8771
  br i1 %tobool, label %if.end, label %if.then, !dbg !8772

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8773
  br label %return, !dbg !8773

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8774
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !8775
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !8776
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !8776
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !8777
  br label %return, !dbg !8777

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8778
  ret %union.tree_node* %3, !dbg !8778
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !8779 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !8782, metadata !DIExpression()), !dbg !8783
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8784
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !8786
  %tobool = icmp ne i8 %call, 0, !dbg !8786
  br i1 %tobool, label %if.end, label %if.then, !dbg !8787

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !8788
  br label %return, !dbg !8788

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !8789
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !8790
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !8791
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !8792
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !8792
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !8793
  br label %return, !dbg !8793

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !8794
  ret %struct.use_optype_d* %3, !dbg !8794
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !8795 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !8799, metadata !DIExpression()), !dbg !8800
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !8801
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !8802
  ret %union.tree_node* %1, !dbg !8803
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !8804 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8805, metadata !DIExpression()), !dbg !8806
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8807
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8808
  %cmp = icmp eq i32 %call, 6, !dbg !8809
  %conv = zext i1 %cmp to i32, !dbg !8809
  %conv1 = trunc i32 %conv to i8, !dbg !8808
  ret i8 %conv1, !dbg !8810
}

declare dso_local zeroext i8 @gimple_assign_ssa_name_copy_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_class(%union.gimple_statement_d* %gs) #0 !dbg !8811 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8814, metadata !DIExpression()), !dbg !8815
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8816
  %call = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %0), !dbg !8817
  %call1 = call i32 @get_gimple_rhs_class(i32 %call), !dbg !8818
  ret i32 %call1, !dbg !8819
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #0 !dbg !8820 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8821, metadata !DIExpression()), !dbg !8822
  call void @llvm.dbg.declare(metadata i32* %code, metadata !8823, metadata !DIExpression()), !dbg !8824
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8825
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8826
  store i32 %call, i32* %code, align 4, !dbg !8824
  %1 = load i32, i32* %code, align 4, !dbg !8827
  %cmp = icmp eq i32 %1, 6, !dbg !8829
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8830

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !8831
  %cmp1 = icmp eq i32 %2, 8, !dbg !8832
  br i1 %cmp1, label %if.then, label %if.else11, !dbg !8833

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !8834, metadata !DIExpression()), !dbg !8836
  %3 = load i32, i32* %code, align 4, !dbg !8837
  %cmp2 = icmp eq i32 %3, 8, !dbg !8839
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !8840

if.then3:                                         ; preds = %if.then
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8841
  %call4 = call %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %4), !dbg !8842
  store %union.tree_node* %call4, %union.tree_node** %type, align 8, !dbg !8843
  br label %if.end, !dbg !8844

if.else:                                          ; preds = %if.then
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8845
  %call5 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !8846
  switch i32 %call5, label %sw.default [
    i32 66, label %sw.bb
  ], !dbg !8847

sw.bb:                                            ; preds = %if.else
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8848
  %call6 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !8848
  %common = bitcast %union.tree_node* %call6 to %struct.tree_common*, !dbg !8848
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8848
  %7 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !8848
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !8850
  br label %sw.epilog, !dbg !8851

sw.default:                                       ; preds = %if.else
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8852
  %call8 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %8), !dbg !8852
  %common9 = bitcast %union.tree_node* %call8 to %struct.tree_common*, !dbg !8852
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !8852
  %9 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !8852
  store %union.tree_node* %9, %union.tree_node** %type, align 8, !dbg !8853
  br label %sw.epilog, !dbg !8854

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %if.then3
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8855
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !8856
  br label %return, !dbg !8856

if.else11:                                        ; preds = %lor.lhs.false
  %11 = load i32, i32* %code, align 4, !dbg !8857
  %cmp12 = icmp eq i32 %11, 1, !dbg !8859
  br i1 %cmp12, label %if.then13, label %if.else14, !dbg !8860

if.then13:                                        ; preds = %if.else11
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !8861
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !8862
  br label %return, !dbg !8862

if.else14:                                        ; preds = %if.else11
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !8863
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !8864
  br label %return, !dbg !8864

return:                                           ; preds = %if.else14, %if.then13, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8865
  ret %union.tree_node* %14, !dbg !8865
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %gs) #0 !dbg !8866 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %fn = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8867, metadata !DIExpression()), !dbg !8868
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !8869, metadata !DIExpression()), !dbg !8870
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8871
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !8872
  store %union.tree_node* %call, %union.tree_node** %fn, align 8, !dbg !8870
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !8873, metadata !DIExpression()), !dbg !8874
  %1 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !8875
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !8875
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8875
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8875
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !8874
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8876
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !8876
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !8876
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !8876
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !8877
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8878
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !8878
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !8878
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !8878
  ret %union.tree_node* %6, !dbg !8879
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !8880 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8881, metadata !DIExpression()), !dbg !8882
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8883
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !8884
  ret %union.tree_node* %call, !dbg !8885
}

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

declare dso_local i8* @ggc_alloc_stat(i64) #2

declare dso_local { i64, i64 } @double_int_add(i64, i64, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @infer_loop_bounds_from_array(%struct.loop* %loop, %union.gimple_statement_d* %stmt, i8 zeroext %reliable) #0 !dbg !8886 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %reliable.addr = alloca i8, align 1
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %arg = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8889, metadata !DIExpression()), !dbg !8890
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8891, metadata !DIExpression()), !dbg !8892
  store i8 %reliable, i8* %reliable.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %reliable.addr, metadata !8893, metadata !DIExpression()), !dbg !8894
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8895
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !8897
  %tobool = icmp ne i8 %call, 0, !dbg !8897
  br i1 %tobool, label %if.then, label %if.else, !dbg !8898

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !8899, metadata !DIExpression()), !dbg !8901
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8902
  %call1 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %1), !dbg !8903
  store %union.tree_node* %call1, %union.tree_node** %op0, align 8, !dbg !8901
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !8904, metadata !DIExpression()), !dbg !8905
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8906
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !8907
  store %union.tree_node* %call2, %union.tree_node** %op1, align 8, !dbg !8905
  %3 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8908
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !8908
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !8908
  %bf.load = load i64, i64* %4, align 8, !dbg !8908
  %bf.clear = and i64 %bf.load, 65535, !dbg !8908
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8908
  %idxprom = sext i32 %bf.cast to i64, !dbg !8908
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8908
  %5 = load i32, i32* %arrayidx, align 4, !dbg !8908
  %cmp = icmp eq i32 %5, 4, !dbg !8908
  br i1 %cmp, label %if.then3, label %if.end, !dbg !8910

if.then3:                                         ; preds = %if.then
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8911
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8912
  %8 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8913
  %9 = load i8, i8* %reliable.addr, align 1, !dbg !8914
  call void @infer_loop_bounds_from_ref(%struct.loop* %6, %union.gimple_statement_d* %7, %union.tree_node* %8, i8 zeroext %9), !dbg !8915
  br label %if.end, !dbg !8915

if.end:                                           ; preds = %if.then3, %if.then
  %10 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8916
  %base4 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !8916
  %11 = bitcast %struct.tree_base* %base4 to i64*, !dbg !8916
  %bf.load5 = load i64, i64* %11, align 8, !dbg !8916
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !8916
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !8916
  %idxprom8 = sext i32 %bf.cast7 to i64, !dbg !8916
  %arrayidx9 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom8, !dbg !8916
  %12 = load i32, i32* %arrayidx9, align 4, !dbg !8916
  %cmp10 = icmp eq i32 %12, 4, !dbg !8916
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !8918

if.then11:                                        ; preds = %if.end
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8919
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8920
  %15 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8921
  %16 = load i8, i8* %reliable.addr, align 1, !dbg !8922
  call void @infer_loop_bounds_from_ref(%struct.loop* %13, %union.gimple_statement_d* %14, %union.tree_node* %15, i8 zeroext %16), !dbg !8923
  br label %if.end12, !dbg !8923

if.end12:                                         ; preds = %if.then11, %if.end
  br label %if.end40, !dbg !8924

if.else:                                          ; preds = %entry
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8925
  %call13 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %17), !dbg !8927
  %tobool14 = icmp ne i8 %call13, 0, !dbg !8927
  br i1 %tobool14, label %if.then15, label %if.end39, !dbg !8928

if.then15:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !8929, metadata !DIExpression()), !dbg !8931
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !8932, metadata !DIExpression()), !dbg !8933
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8934, metadata !DIExpression()), !dbg !8935
  call void @llvm.dbg.declare(metadata i32* %n, metadata !8936, metadata !DIExpression()), !dbg !8937
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8938
  %call16 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %18), !dbg !8939
  store i32 %call16, i32* %n, align 4, !dbg !8937
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8940
  %call17 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %19), !dbg !8941
  store %union.tree_node* %call17, %union.tree_node** %lhs, align 8, !dbg !8942
  %20 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8943
  %tobool18 = icmp ne %union.tree_node* %20, null, !dbg !8943
  br i1 %tobool18, label %land.lhs.true, label %if.end27, !dbg !8945

land.lhs.true:                                    ; preds = %if.then15
  %21 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8946
  %base19 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !8946
  %22 = bitcast %struct.tree_base* %base19 to i64*, !dbg !8946
  %bf.load20 = load i64, i64* %22, align 8, !dbg !8946
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !8946
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !8946
  %idxprom23 = sext i32 %bf.cast22 to i64, !dbg !8946
  %arrayidx24 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom23, !dbg !8946
  %23 = load i32, i32* %arrayidx24, align 4, !dbg !8946
  %cmp25 = icmp eq i32 %23, 4, !dbg !8946
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !8947

if.then26:                                        ; preds = %land.lhs.true
  %24 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8948
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8949
  %26 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8950
  %27 = load i8, i8* %reliable.addr, align 1, !dbg !8951
  call void @infer_loop_bounds_from_ref(%struct.loop* %24, %union.gimple_statement_d* %25, %union.tree_node* %26, i8 zeroext %27), !dbg !8952
  br label %if.end27, !dbg !8952

if.end27:                                         ; preds = %if.then26, %land.lhs.true, %if.then15
  store i32 0, i32* %i, align 4, !dbg !8953
  br label %for.cond, !dbg !8955

for.cond:                                         ; preds = %for.inc, %if.end27
  %28 = load i32, i32* %i, align 4, !dbg !8956
  %29 = load i32, i32* %n, align 4, !dbg !8958
  %cmp28 = icmp ult i32 %28, %29, !dbg !8959
  br i1 %cmp28, label %for.body, label %for.end, !dbg !8960

for.body:                                         ; preds = %for.cond
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8961
  %31 = load i32, i32* %i, align 4, !dbg !8963
  %call29 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %30, i32 %31), !dbg !8964
  store %union.tree_node* %call29, %union.tree_node** %arg, align 8, !dbg !8965
  %32 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8966
  %base30 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !8966
  %33 = bitcast %struct.tree_base* %base30 to i64*, !dbg !8966
  %bf.load31 = load i64, i64* %33, align 8, !dbg !8966
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !8966
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !8966
  %idxprom34 = sext i32 %bf.cast33 to i64, !dbg !8966
  %arrayidx35 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom34, !dbg !8966
  %34 = load i32, i32* %arrayidx35, align 4, !dbg !8966
  %cmp36 = icmp eq i32 %34, 4, !dbg !8966
  br i1 %cmp36, label %if.then37, label %if.end38, !dbg !8968

if.then37:                                        ; preds = %for.body
  %35 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8969
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8970
  %37 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !8971
  %38 = load i8, i8* %reliable.addr, align 1, !dbg !8972
  call void @infer_loop_bounds_from_ref(%struct.loop* %35, %union.gimple_statement_d* %36, %union.tree_node* %37, i8 zeroext %38), !dbg !8973
  br label %if.end38, !dbg !8973

if.end38:                                         ; preds = %if.then37, %for.body
  br label %for.inc, !dbg !8974

for.inc:                                          ; preds = %if.end38
  %39 = load i32, i32* %i, align 4, !dbg !8975
  %inc = add i32 %39, 1, !dbg !8975
  store i32 %inc, i32* %i, align 4, !dbg !8975
  br label %for.cond, !dbg !8976, !llvm.loop !8977

for.end:                                          ; preds = %for.cond
  br label %if.end39, !dbg !8979

if.end39:                                         ; preds = %for.end, %if.else
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.end12
  ret void, !dbg !8980
}

; Function Attrs: noinline nounwind uwtable
define internal void @infer_loop_bounds_from_signedness(%struct.loop* %loop, %union.gimple_statement_d* %stmt) #0 !dbg !8981 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %def = alloca %union.tree_node*, align 8
  %base = alloca %union.tree_node*, align 8
  %step = alloca %union.tree_node*, align 8
  %scev = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %low = alloca %union.tree_node*, align 8
  %high = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8984, metadata !DIExpression()), !dbg !8985
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8986, metadata !DIExpression()), !dbg !8987
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !8988, metadata !DIExpression()), !dbg !8989
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !8990, metadata !DIExpression()), !dbg !8991
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !8992, metadata !DIExpression()), !dbg !8993
  call void @llvm.dbg.declare(metadata %union.tree_node** %scev, metadata !8994, metadata !DIExpression()), !dbg !8995
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !8996, metadata !DIExpression()), !dbg !8997
  call void @llvm.dbg.declare(metadata %union.tree_node** %low, metadata !8998, metadata !DIExpression()), !dbg !8999
  call void @llvm.dbg.declare(metadata %union.tree_node** %high, metadata !9000, metadata !DIExpression()), !dbg !9001
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9002
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !9004
  %cmp = icmp ne i32 %call, 6, !dbg !9005
  br i1 %cmp, label %if.then, label %if.end, !dbg !9006

if.then:                                          ; preds = %entry
  br label %return, !dbg !9007

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9008
  %call1 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %1), !dbg !9009
  store %union.tree_node* %call1, %union.tree_node** %def, align 8, !dbg !9010
  %2 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !9011
  %base2 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !9011
  %3 = bitcast %struct.tree_base* %base2 to i64*, !dbg !9011
  %bf.load = load i64, i64* %3, align 8, !dbg !9011
  %bf.clear = and i64 %bf.load, 65535, !dbg !9011
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9011
  %cmp3 = icmp ne i32 %bf.cast, 141, !dbg !9013
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !9014

if.then4:                                         ; preds = %if.end
  br label %return, !dbg !9015

if.end5:                                          ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !9016
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !9016
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9016
  %5 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !9016
  store %union.tree_node* %5, %union.tree_node** %type, align 8, !dbg !9017
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9018
  %base7 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !9018
  %7 = bitcast %struct.tree_base* %base7 to i64*, !dbg !9018
  %bf.load8 = load i64, i64* %7, align 8, !dbg !9018
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !9018
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !9018
  %cmp11 = icmp eq i32 %bf.cast10, 6, !dbg !9018
  br i1 %cmp11, label %lor.lhs.false23, label %lor.lhs.false, !dbg !9018

lor.lhs.false:                                    ; preds = %if.end5
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9018
  %base12 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !9018
  %9 = bitcast %struct.tree_base* %base12 to i64*, !dbg !9018
  %bf.load13 = load i64, i64* %9, align 8, !dbg !9018
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !9018
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !9018
  %cmp16 = icmp eq i32 %bf.cast15, 7, !dbg !9018
  br i1 %cmp16, label %lor.lhs.false23, label %lor.lhs.false17, !dbg !9018

lor.lhs.false17:                                  ; preds = %lor.lhs.false
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9018
  %base18 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !9018
  %11 = bitcast %struct.tree_base* %base18 to i64*, !dbg !9018
  %bf.load19 = load i64, i64* %11, align 8, !dbg !9018
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !9018
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !9018
  %cmp22 = icmp eq i32 %bf.cast21, 8, !dbg !9018
  br i1 %cmp22, label %lor.lhs.false23, label %if.then33, !dbg !9020

lor.lhs.false23:                                  ; preds = %lor.lhs.false17, %lor.lhs.false, %if.end5
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9021
  %base24 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !9021
  %13 = bitcast %struct.tree_base* %base24 to i64*, !dbg !9021
  %bf.load25 = load i64, i64* %13, align 8, !dbg !9021
  %bf.lshr = lshr i64 %bf.load25, 21, !dbg !9021
  %bf.clear26 = and i64 %bf.lshr, 1, !dbg !9021
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !9021
  %tobool = icmp ne i32 %bf.cast27, 0, !dbg !9021
  br i1 %tobool, label %if.then33, label %land.lhs.true, !dbg !9021

land.lhs.true:                                    ; preds = %lor.lhs.false23
  %14 = load i32, i32* @flag_wrapv, align 4, !dbg !9021
  %tobool28 = icmp ne i32 %14, 0, !dbg !9021
  br i1 %tobool28, label %if.then33, label %land.lhs.true29, !dbg !9021

land.lhs.true29:                                  ; preds = %land.lhs.true
  %15 = load i32, i32* @flag_trapv, align 4, !dbg !9021
  %tobool30 = icmp ne i32 %15, 0, !dbg !9021
  br i1 %tobool30, label %if.then33, label %land.lhs.true31, !dbg !9021

land.lhs.true31:                                  ; preds = %land.lhs.true29
  %16 = load i32, i32* @flag_strict_overflow, align 4, !dbg !9021
  %tobool32 = icmp ne i32 %16, 0, !dbg !9021
  br i1 %tobool32, label %if.end34, label %if.then33, !dbg !9022

if.then33:                                        ; preds = %land.lhs.true31, %land.lhs.true29, %land.lhs.true, %lor.lhs.false23, %lor.lhs.false17
  br label %return, !dbg !9023

if.end34:                                         ; preds = %land.lhs.true31
  %17 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9024
  %18 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9025
  %19 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !9026
  %call35 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %18, %union.tree_node* %19), !dbg !9027
  %call36 = call %union.tree_node* @instantiate_parameters(%struct.loop* %17, %union.tree_node* %call35), !dbg !9028
  store %union.tree_node* %call36, %union.tree_node** %scev, align 8, !dbg !9029
  %20 = load %union.tree_node*, %union.tree_node** %scev, align 8, !dbg !9030
  %call37 = call zeroext i8 @chrec_contains_undetermined(%union.tree_node* %20), !dbg !9032
  %tobool38 = icmp ne i8 %call37, 0, !dbg !9032
  br i1 %tobool38, label %if.then39, label %if.end40, !dbg !9033

if.then39:                                        ; preds = %if.end34
  br label %return, !dbg !9034

if.end40:                                         ; preds = %if.end34
  %21 = load %union.tree_node*, %union.tree_node** %scev, align 8, !dbg !9035
  %22 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9036
  %num = getelementptr inbounds %struct.loop, %struct.loop* %22, i32 0, i32 0, !dbg !9037
  %23 = load i32, i32* %num, align 8, !dbg !9037
  %call41 = call %union.tree_node* @initial_condition_in_loop_num(%union.tree_node* %21, i32 %23), !dbg !9038
  store %union.tree_node* %call41, %union.tree_node** %base, align 8, !dbg !9039
  %24 = load %union.tree_node*, %union.tree_node** %scev, align 8, !dbg !9040
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9041
  %num42 = getelementptr inbounds %struct.loop, %struct.loop* %25, i32 0, i32 0, !dbg !9042
  %26 = load i32, i32* %num42, align 8, !dbg !9042
  %call43 = call %union.tree_node* @evolution_part_in_loop_num(%union.tree_node* %24, i32 %26), !dbg !9043
  store %union.tree_node* %call43, %union.tree_node** %step, align 8, !dbg !9044
  %27 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !9045
  %tobool44 = icmp ne %union.tree_node* %27, null, !dbg !9045
  br i1 %tobool44, label %lor.lhs.false45, label %if.then61, !dbg !9047

lor.lhs.false45:                                  ; preds = %if.end40
  %28 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !9048
  %tobool46 = icmp ne %union.tree_node* %28, null, !dbg !9048
  br i1 %tobool46, label %lor.lhs.false47, label %if.then61, !dbg !9049

lor.lhs.false47:                                  ; preds = %lor.lhs.false45
  %29 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !9050
  %base48 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !9050
  %30 = bitcast %struct.tree_base* %base48 to i64*, !dbg !9050
  %bf.load49 = load i64, i64* %30, align 8, !dbg !9050
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !9050
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !9050
  %cmp52 = icmp ne i32 %bf.cast51, 23, !dbg !9051
  br i1 %cmp52, label %if.then61, label %lor.lhs.false53, !dbg !9052

lor.lhs.false53:                                  ; preds = %lor.lhs.false47
  %31 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !9053
  %call54 = call zeroext i8 @tree_contains_chrecs(%union.tree_node* %31, i32* null), !dbg !9054
  %conv = zext i8 %call54 to i32, !dbg !9054
  %tobool55 = icmp ne i32 %conv, 0, !dbg !9054
  br i1 %tobool55, label %if.then61, label %lor.lhs.false56, !dbg !9055

lor.lhs.false56:                                  ; preds = %lor.lhs.false53
  %32 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !9056
  %33 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9057
  %num57 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 0, !dbg !9058
  %34 = load i32, i32* %num57, align 8, !dbg !9058
  %call58 = call zeroext i8 @chrec_contains_symbols_defined_in_loop(%union.tree_node* %32, i32 %34), !dbg !9059
  %conv59 = zext i8 %call58 to i32, !dbg !9059
  %tobool60 = icmp ne i32 %conv59, 0, !dbg !9059
  br i1 %tobool60, label %if.then61, label %if.end62, !dbg !9060

if.then61:                                        ; preds = %lor.lhs.false56, %lor.lhs.false53, %lor.lhs.false47, %lor.lhs.false45, %if.end40
  br label %return, !dbg !9061

if.end62:                                         ; preds = %lor.lhs.false56
  %35 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9062
  %36 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9063
  %call63 = call %union.tree_node* @lower_bound_in_type(%union.tree_node* %35, %union.tree_node* %36), !dbg !9064
  store %union.tree_node* %call63, %union.tree_node** %low, align 8, !dbg !9065
  %37 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9066
  %38 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9067
  %call64 = call %union.tree_node* @upper_bound_in_type(%union.tree_node* %37, %union.tree_node* %38), !dbg !9068
  store %union.tree_node* %call64, %union.tree_node** %high, align 8, !dbg !9069
  %39 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9070
  %40 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !9071
  %41 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !9072
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9073
  %43 = load %union.tree_node*, %union.tree_node** %low, align 8, !dbg !9074
  %44 = load %union.tree_node*, %union.tree_node** %high, align 8, !dbg !9075
  call void @record_nonwrapping_iv(%struct.loop* %39, %union.tree_node* %40, %union.tree_node* %41, %union.gimple_statement_d* %42, %union.tree_node* %43, %union.tree_node* %44, i8 zeroext 0, i8 zeroext 1), !dbg !9076
  br label %return, !dbg !9077

return:                                           ; preds = %if.end62, %if.then61, %if.then39, %if.then33, %if.then4, %if.then
  ret void, !dbg !9077
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !9078 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9079, metadata !DIExpression()), !dbg !9080
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9081
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !9082
  ret %union.tree_node* %call, !dbg !9083
}

; Function Attrs: noinline nounwind uwtable
define internal void @infer_loop_bounds_from_ref(%struct.loop* %loop, %union.gimple_statement_d* %stmt, %union.tree_node* %ref, i8 zeroext %reliable) #0 !dbg !9084 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %ref.addr = alloca %union.tree_node*, align 8
  %reliable.addr = alloca i8, align 1
  %data = alloca %struct.ilb_data, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !9087, metadata !DIExpression()), !dbg !9088
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9089, metadata !DIExpression()), !dbg !9090
  store %union.tree_node* %ref, %union.tree_node** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref.addr, metadata !9091, metadata !DIExpression()), !dbg !9092
  store i8 %reliable, i8* %reliable.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %reliable.addr, metadata !9093, metadata !DIExpression()), !dbg !9094
  call void @llvm.dbg.declare(metadata %struct.ilb_data* %data, metadata !9095, metadata !DIExpression()), !dbg !9096
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9097
  %loop1 = getelementptr inbounds %struct.ilb_data, %struct.ilb_data* %data, i32 0, i32 0, !dbg !9098
  store %struct.loop* %0, %struct.loop** %loop1, align 8, !dbg !9099
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9100
  %stmt2 = getelementptr inbounds %struct.ilb_data, %struct.ilb_data* %data, i32 0, i32 1, !dbg !9101
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %stmt2, align 8, !dbg !9102
  %2 = load i8, i8* %reliable.addr, align 1, !dbg !9103
  %reliable3 = getelementptr inbounds %struct.ilb_data, %struct.ilb_data* %data, i32 0, i32 2, !dbg !9104
  store i8 %2, i8* %reliable3, align 8, !dbg !9105
  %3 = bitcast %struct.ilb_data* %data to i8*, !dbg !9106
  %call = call zeroext i8 @for_each_index(%union.tree_node** %ref.addr, i8 (%union.tree_node*, %union.tree_node**, i8*)* @idx_infer_loop_bounds, i8* %3), !dbg !9107
  ret void, !dbg !9108
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !9109 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9110, metadata !DIExpression()), !dbg !9111
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9112
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !9113
  %cmp = icmp eq i32 %call, 8, !dbg !9114
  %conv = zext i1 %cmp to i32, !dbg !9114
  %conv1 = trunc i32 %conv to i8, !dbg !9113
  ret i8 %conv1, !dbg !9115
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !9116 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9117, metadata !DIExpression()), !dbg !9118
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !9119, metadata !DIExpression()), !dbg !9120
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9121
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !9122
  store i32 %call, i32* %num_ops, align 4, !dbg !9123
  %1 = load i32, i32* %num_ops, align 4, !dbg !9124
  %sub = sub i32 %1, 3, !dbg !9125
  ret i32 %sub, !dbg !9126
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !9127 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9128, metadata !DIExpression()), !dbg !9129
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9130
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !9131
  ret %union.tree_node* %call, !dbg !9132
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !9133 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9134, metadata !DIExpression()), !dbg !9135
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !9136, metadata !DIExpression()), !dbg !9137
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9138
  %1 = load i32, i32* %index.addr, align 4, !dbg !9139
  %add = add i32 %1, 3, !dbg !9140
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !9141
  ret %union.tree_node* %call, !dbg !9142
}

declare dso_local zeroext i8 @for_each_index(%union.tree_node**, i8 (%union.tree_node*, %union.tree_node**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @idx_infer_loop_bounds(%union.tree_node* %base, %union.tree_node** %idx, i8* %dta) #0 !dbg !9143 {
entry:
  %retval = alloca i8, align 1
  %base.addr = alloca %union.tree_node*, align 8
  %idx.addr = alloca %union.tree_node**, align 8
  %dta.addr = alloca i8*, align 8
  %data = alloca %struct.ilb_data*, align 8
  %ev = alloca %union.tree_node*, align 8
  %init = alloca %union.tree_node*, align 8
  %step = alloca %union.tree_node*, align 8
  %low = alloca %union.tree_node*, align 8
  %high = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %next = alloca %union.tree_node*, align 8
  %sign = alloca i8, align 1
  %upper = alloca i8, align 1
  %at_end = alloca i8, align 1
  %loop = alloca %struct.loop*, align 8
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !9146, metadata !DIExpression()), !dbg !9147
  store %union.tree_node** %idx, %union.tree_node*** %idx.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %idx.addr, metadata !9148, metadata !DIExpression()), !dbg !9149
  store i8* %dta, i8** %dta.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dta.addr, metadata !9150, metadata !DIExpression()), !dbg !9151
  call void @llvm.dbg.declare(metadata %struct.ilb_data** %data, metadata !9152, metadata !DIExpression()), !dbg !9153
  %0 = load i8*, i8** %dta.addr, align 8, !dbg !9154
  %1 = bitcast i8* %0 to %struct.ilb_data*, !dbg !9155
  store %struct.ilb_data* %1, %struct.ilb_data** %data, align 8, !dbg !9153
  call void @llvm.dbg.declare(metadata %union.tree_node** %ev, metadata !9156, metadata !DIExpression()), !dbg !9157
  call void @llvm.dbg.declare(metadata %union.tree_node** %init, metadata !9158, metadata !DIExpression()), !dbg !9159
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !9160, metadata !DIExpression()), !dbg !9161
  call void @llvm.dbg.declare(metadata %union.tree_node** %low, metadata !9162, metadata !DIExpression()), !dbg !9163
  call void @llvm.dbg.declare(metadata %union.tree_node** %high, metadata !9164, metadata !DIExpression()), !dbg !9165
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !9166, metadata !DIExpression()), !dbg !9167
  call void @llvm.dbg.declare(metadata %union.tree_node** %next, metadata !9168, metadata !DIExpression()), !dbg !9169
  call void @llvm.dbg.declare(metadata i8* %sign, metadata !9170, metadata !DIExpression()), !dbg !9171
  call void @llvm.dbg.declare(metadata i8* %upper, metadata !9172, metadata !DIExpression()), !dbg !9173
  %2 = load %struct.ilb_data*, %struct.ilb_data** %data, align 8, !dbg !9174
  %reliable = getelementptr inbounds %struct.ilb_data, %struct.ilb_data* %2, i32 0, i32 2, !dbg !9175
  %3 = load i8, i8* %reliable, align 8, !dbg !9175
  store i8 %3, i8* %upper, align 1, !dbg !9173
  call void @llvm.dbg.declare(metadata i8* %at_end, metadata !9176, metadata !DIExpression()), !dbg !9177
  store i8 0, i8* %at_end, align 1, !dbg !9177
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !9178, metadata !DIExpression()), !dbg !9179
  %4 = load %struct.ilb_data*, %struct.ilb_data** %data, align 8, !dbg !9180
  %loop1 = getelementptr inbounds %struct.ilb_data, %struct.ilb_data* %4, i32 0, i32 0, !dbg !9181
  %5 = load %struct.loop*, %struct.loop** %loop1, align 8, !dbg !9181
  store %struct.loop* %5, %struct.loop** %loop, align 8, !dbg !9179
  %6 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !9182
  %base2 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !9182
  %7 = bitcast %struct.tree_base* %base2 to i64*, !dbg !9182
  %bf.load = load i64, i64* %7, align 8, !dbg !9182
  %bf.clear = and i64 %bf.load, 65535, !dbg !9182
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9182
  %cmp = icmp ne i32 %bf.cast, 45, !dbg !9184
  br i1 %cmp, label %if.then, label %if.end, !dbg !9185

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !9186
  br label %return, !dbg !9186

if.end:                                           ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !9187
  %call = call zeroext i8 @array_at_struct_end_p(%union.tree_node* %8), !dbg !9189
  %tobool = icmp ne i8 %call, 0, !dbg !9189
  br i1 %tobool, label %if.then3, label %if.end4, !dbg !9190

if.then3:                                         ; preds = %if.end
  store i8 1, i8* %at_end, align 1, !dbg !9191
  store i8 0, i8* %upper, align 1, !dbg !9193
  br label %if.end4, !dbg !9194

if.end4:                                          ; preds = %if.then3, %if.end
  %9 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !9195
  %10 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !9196
  %11 = load %union.tree_node**, %union.tree_node*** %idx.addr, align 8, !dbg !9197
  %12 = load %union.tree_node*, %union.tree_node** %11, align 8, !dbg !9198
  %call5 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %10, %union.tree_node* %12), !dbg !9199
  %call6 = call %union.tree_node* @instantiate_parameters(%struct.loop* %9, %union.tree_node* %call5), !dbg !9200
  store %union.tree_node* %call6, %union.tree_node** %ev, align 8, !dbg !9201
  %13 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !9202
  %call7 = call %union.tree_node* @initial_condition(%union.tree_node* %13), !dbg !9203
  store %union.tree_node* %call7, %union.tree_node** %init, align 8, !dbg !9204
  %14 = load %union.tree_node*, %union.tree_node** %ev, align 8, !dbg !9205
  %15 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !9206
  %num = getelementptr inbounds %struct.loop, %struct.loop* %15, i32 0, i32 0, !dbg !9207
  %16 = load i32, i32* %num, align 8, !dbg !9207
  %call8 = call %union.tree_node* @evolution_part_in_loop_num(%union.tree_node* %14, i32 %16), !dbg !9208
  store %union.tree_node* %call8, %union.tree_node** %step, align 8, !dbg !9209
  %17 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !9210
  %tobool9 = icmp ne %union.tree_node* %17, null, !dbg !9210
  br i1 %tobool9, label %lor.lhs.false, label %if.then28, !dbg !9212

lor.lhs.false:                                    ; preds = %if.end4
  %18 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !9213
  %tobool10 = icmp ne %union.tree_node* %18, null, !dbg !9213
  br i1 %tobool10, label %lor.lhs.false11, label %if.then28, !dbg !9214

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %19 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !9215
  %base12 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !9215
  %20 = bitcast %struct.tree_base* %base12 to i64*, !dbg !9215
  %bf.load13 = load i64, i64* %20, align 8, !dbg !9215
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !9215
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !9215
  %cmp16 = icmp ne i32 %bf.cast15, 23, !dbg !9216
  br i1 %cmp16, label %if.then28, label %lor.lhs.false17, !dbg !9217

lor.lhs.false17:                                  ; preds = %lor.lhs.false11
  %21 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !9218
  %call18 = call i32 @integer_zerop(%union.tree_node* %21), !dbg !9219
  %tobool19 = icmp ne i32 %call18, 0, !dbg !9219
  br i1 %tobool19, label %if.then28, label %lor.lhs.false20, !dbg !9220

lor.lhs.false20:                                  ; preds = %lor.lhs.false17
  %22 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !9221
  %call21 = call zeroext i8 @tree_contains_chrecs(%union.tree_node* %22, i32* null), !dbg !9222
  %conv = zext i8 %call21 to i32, !dbg !9222
  %tobool22 = icmp ne i32 %conv, 0, !dbg !9222
  br i1 %tobool22, label %if.then28, label %lor.lhs.false23, !dbg !9223

lor.lhs.false23:                                  ; preds = %lor.lhs.false20
  %23 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !9224
  %24 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !9225
  %num24 = getelementptr inbounds %struct.loop, %struct.loop* %24, i32 0, i32 0, !dbg !9226
  %25 = load i32, i32* %num24, align 8, !dbg !9226
  %call25 = call zeroext i8 @chrec_contains_symbols_defined_in_loop(%union.tree_node* %23, i32 %25), !dbg !9227
  %conv26 = zext i8 %call25 to i32, !dbg !9227
  %tobool27 = icmp ne i32 %conv26, 0, !dbg !9227
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !9228

if.then28:                                        ; preds = %lor.lhs.false23, %lor.lhs.false20, %lor.lhs.false17, %lor.lhs.false11, %lor.lhs.false, %if.end4
  store i8 1, i8* %retval, align 1, !dbg !9229
  br label %return, !dbg !9229

if.end29:                                         ; preds = %lor.lhs.false23
  %26 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !9230
  %call30 = call %union.tree_node* @array_ref_low_bound(%union.tree_node* %26), !dbg !9231
  store %union.tree_node* %call30, %union.tree_node** %low, align 8, !dbg !9232
  %27 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !9233
  %call31 = call %union.tree_node* @array_ref_up_bound(%union.tree_node* %27), !dbg !9234
  store %union.tree_node* %call31, %union.tree_node** %high, align 8, !dbg !9235
  %28 = load %union.tree_node*, %union.tree_node** %low, align 8, !dbg !9236
  %base32 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !9236
  %29 = bitcast %struct.tree_base* %base32 to i64*, !dbg !9236
  %bf.load33 = load i64, i64* %29, align 8, !dbg !9236
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !9236
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !9236
  %cmp36 = icmp ne i32 %bf.cast35, 23, !dbg !9238
  br i1 %cmp36, label %if.then47, label %lor.lhs.false38, !dbg !9239

lor.lhs.false38:                                  ; preds = %if.end29
  %30 = load %union.tree_node*, %union.tree_node** %high, align 8, !dbg !9240
  %tobool39 = icmp ne %union.tree_node* %30, null, !dbg !9240
  br i1 %tobool39, label %lor.lhs.false40, label %if.then47, !dbg !9241

lor.lhs.false40:                                  ; preds = %lor.lhs.false38
  %31 = load %union.tree_node*, %union.tree_node** %high, align 8, !dbg !9242
  %base41 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !9242
  %32 = bitcast %struct.tree_base* %base41 to i64*, !dbg !9242
  %bf.load42 = load i64, i64* %32, align 8, !dbg !9242
  %bf.clear43 = and i64 %bf.load42, 65535, !dbg !9242
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !9242
  %cmp45 = icmp ne i32 %bf.cast44, 23, !dbg !9243
  br i1 %cmp45, label %if.then47, label %if.end48, !dbg !9244

if.then47:                                        ; preds = %lor.lhs.false40, %lor.lhs.false38, %if.end29
  store i8 1, i8* %retval, align 1, !dbg !9245
  br label %return, !dbg !9245

if.end48:                                         ; preds = %lor.lhs.false40
  %33 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !9246
  %call49 = call i32 @tree_int_cst_sign_bit(%union.tree_node* %33), !dbg !9247
  %conv50 = trunc i32 %call49 to i8, !dbg !9247
  store i8 %conv50, i8* %sign, align 1, !dbg !9248
  %34 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !9249
  %common = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !9249
  %type51 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9249
  %35 = load %union.tree_node*, %union.tree_node** %type51, align 8, !dbg !9249
  store %union.tree_node* %35, %union.tree_node** %type, align 8, !dbg !9250
  %36 = load i8, i8* %at_end, align 1, !dbg !9251
  %conv52 = zext i8 %36 to i32, !dbg !9251
  %tobool53 = icmp ne i32 %conv52, 0, !dbg !9251
  br i1 %tobool53, label %land.lhs.true, label %if.end57, !dbg !9253

land.lhs.true:                                    ; preds = %if.end48
  %37 = load %union.tree_node*, %union.tree_node** %low, align 8, !dbg !9254
  %38 = load %union.tree_node*, %union.tree_node** %high, align 8, !dbg !9255
  %call54 = call i32 @operand_equal_p(%union.tree_node* %37, %union.tree_node* %38, i32 0), !dbg !9256
  %tobool55 = icmp ne i32 %call54, 0, !dbg !9256
  br i1 %tobool55, label %if.then56, label %if.end57, !dbg !9257

if.then56:                                        ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !9258
  br label %return, !dbg !9258

if.end57:                                         ; preds = %land.lhs.true, %if.end48
  %39 = load %union.tree_node*, %union.tree_node** %high, align 8, !dbg !9259
  %40 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9261
  %call58 = call i32 @int_fits_type_p(%union.tree_node* %39, %union.tree_node* %40), !dbg !9262
  %tobool59 = icmp ne i32 %call58, 0, !dbg !9262
  br i1 %tobool59, label %lor.lhs.false60, label %if.then63, !dbg !9263

lor.lhs.false60:                                  ; preds = %if.end57
  %41 = load %union.tree_node*, %union.tree_node** %low, align 8, !dbg !9264
  %42 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9265
  %call61 = call i32 @int_fits_type_p(%union.tree_node* %41, %union.tree_node* %42), !dbg !9266
  %tobool62 = icmp ne i32 %call61, 0, !dbg !9266
  br i1 %tobool62, label %if.end64, label %if.then63, !dbg !9267

if.then63:                                        ; preds = %lor.lhs.false60, %if.end57
  store i8 1, i8* %retval, align 1, !dbg !9268
  br label %return, !dbg !9268

if.end64:                                         ; preds = %lor.lhs.false60
  %43 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9269
  %44 = load %union.tree_node*, %union.tree_node** %low, align 8, !dbg !9269
  %call65 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %43, %union.tree_node* %44), !dbg !9269
  store %union.tree_node* %call65, %union.tree_node** %low, align 8, !dbg !9270
  %45 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9271
  %46 = load %union.tree_node*, %union.tree_node** %high, align 8, !dbg !9271
  %call66 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %45, %union.tree_node* %46), !dbg !9271
  store %union.tree_node* %call66, %union.tree_node** %high, align 8, !dbg !9272
  %47 = load i8, i8* %sign, align 1, !dbg !9273
  %tobool67 = icmp ne i8 %47, 0, !dbg !9273
  br i1 %tobool67, label %if.then68, label %if.else, !dbg !9275

if.then68:                                        ; preds = %if.end64
  %48 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9276
  %49 = load %union.tree_node*, %union.tree_node** %low, align 8, !dbg !9276
  %50 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !9276
  %call69 = call %union.tree_node* @fold_binary_loc(i32 0, i32 63, %union.tree_node* %48, %union.tree_node* %49, %union.tree_node* %50), !dbg !9276
  store %union.tree_node* %call69, %union.tree_node** %next, align 8, !dbg !9277
  br label %if.end71, !dbg !9278

if.else:                                          ; preds = %if.end64
  %51 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9279
  %52 = load %union.tree_node*, %union.tree_node** %high, align 8, !dbg !9279
  %53 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !9279
  %call70 = call %union.tree_node* @fold_binary_loc(i32 0, i32 63, %union.tree_node* %51, %union.tree_node* %52, %union.tree_node* %53), !dbg !9279
  store %union.tree_node* %call70, %union.tree_node** %next, align 8, !dbg !9280
  br label %if.end71

if.end71:                                         ; preds = %if.else, %if.then68
  %54 = load %union.tree_node*, %union.tree_node** %low, align 8, !dbg !9281
  %55 = load %union.tree_node*, %union.tree_node** %next, align 8, !dbg !9283
  %call72 = call i32 @tree_int_cst_compare(%union.tree_node* %54, %union.tree_node* %55), !dbg !9284
  %cmp73 = icmp sle i32 %call72, 0, !dbg !9285
  br i1 %cmp73, label %land.lhs.true75, label %if.end80, !dbg !9286

land.lhs.true75:                                  ; preds = %if.end71
  %56 = load %union.tree_node*, %union.tree_node** %next, align 8, !dbg !9287
  %57 = load %union.tree_node*, %union.tree_node** %high, align 8, !dbg !9288
  %call76 = call i32 @tree_int_cst_compare(%union.tree_node* %56, %union.tree_node* %57), !dbg !9289
  %cmp77 = icmp sle i32 %call76, 0, !dbg !9290
  br i1 %cmp77, label %if.then79, label %if.end80, !dbg !9291

if.then79:                                        ; preds = %land.lhs.true75
  store i8 1, i8* %retval, align 1, !dbg !9292
  br label %return, !dbg !9292

if.end80:                                         ; preds = %land.lhs.true75, %if.end71
  %58 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !9293
  %59 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !9294
  %60 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !9295
  %61 = load %struct.ilb_data*, %struct.ilb_data** %data, align 8, !dbg !9296
  %stmt = getelementptr inbounds %struct.ilb_data, %struct.ilb_data* %61, i32 0, i32 1, !dbg !9297
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9297
  %63 = load %union.tree_node*, %union.tree_node** %low, align 8, !dbg !9298
  %64 = load %union.tree_node*, %union.tree_node** %high, align 8, !dbg !9299
  %65 = load i8, i8* %upper, align 1, !dbg !9300
  call void @record_nonwrapping_iv(%struct.loop* %58, %union.tree_node* %59, %union.tree_node* %60, %union.gimple_statement_d* %62, %union.tree_node* %63, %union.tree_node* %64, i8 zeroext 1, i8 zeroext %65), !dbg !9301
  store i8 1, i8* %retval, align 1, !dbg !9302
  br label %return, !dbg !9302

return:                                           ; preds = %if.end80, %if.then79, %if.then63, %if.then56, %if.then47, %if.then28, %if.then
  %66 = load i8, i8* %retval, align 1, !dbg !9303
  ret i8 %66, !dbg !9303
}

declare dso_local %union.tree_node* @analyze_scalar_evolution(%struct.loop*, %union.tree_node*) #2

declare dso_local %union.tree_node* @initial_condition(%union.tree_node*) #2

declare dso_local %union.tree_node* @evolution_part_in_loop_num(%union.tree_node*, i32) #2

declare dso_local zeroext i8 @tree_contains_chrecs(%union.tree_node*, i32*) #2

declare dso_local zeroext i8 @chrec_contains_symbols_defined_in_loop(%union.tree_node*, i32) #2

declare dso_local %union.tree_node* @array_ref_low_bound(%union.tree_node*) #2

declare dso_local %union.tree_node* @array_ref_up_bound(%union.tree_node*) #2

declare dso_local i32 @int_fits_type_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local i32 @tree_int_cst_compare(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @record_nonwrapping_iv(%struct.loop* %loop, %union.tree_node* %base, %union.tree_node* %step, %union.gimple_statement_d* %stmt, %union.tree_node* %low, %union.tree_node* %high, i8 zeroext %realistic, i8 zeroext %upper) #0 !dbg !9304 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %base.addr = alloca %union.tree_node*, align 8
  %step.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %low.addr = alloca %union.tree_node*, align 8
  %high.addr = alloca %union.tree_node*, align 8
  %realistic.addr = alloca i8, align 1
  %upper.addr = alloca i8, align 1
  %niter_bound = alloca %union.tree_node*, align 8
  %extreme = alloca %union.tree_node*, align 8
  %delta = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %unsigned_type = alloca %union.tree_node*, align 8
  %max = alloca %struct.double_int, align 8
  %tmp = alloca %struct.double_int, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !9307, metadata !DIExpression()), !dbg !9308
  store %union.tree_node* %base, %union.tree_node** %base.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %base.addr, metadata !9309, metadata !DIExpression()), !dbg !9310
  store %union.tree_node* %step, %union.tree_node** %step.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %step.addr, metadata !9311, metadata !DIExpression()), !dbg !9312
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9313, metadata !DIExpression()), !dbg !9314
  store %union.tree_node* %low, %union.tree_node** %low.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %low.addr, metadata !9315, metadata !DIExpression()), !dbg !9316
  store %union.tree_node* %high, %union.tree_node** %high.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %high.addr, metadata !9317, metadata !DIExpression()), !dbg !9318
  store i8 %realistic, i8* %realistic.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %realistic.addr, metadata !9319, metadata !DIExpression()), !dbg !9320
  store i8 %upper, i8* %upper.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %upper.addr, metadata !9321, metadata !DIExpression()), !dbg !9322
  call void @llvm.dbg.declare(metadata %union.tree_node** %niter_bound, metadata !9323, metadata !DIExpression()), !dbg !9324
  call void @llvm.dbg.declare(metadata %union.tree_node** %extreme, metadata !9325, metadata !DIExpression()), !dbg !9326
  call void @llvm.dbg.declare(metadata %union.tree_node** %delta, metadata !9327, metadata !DIExpression()), !dbg !9328
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !9329, metadata !DIExpression()), !dbg !9330
  %0 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !9331
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !9331
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9331
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !9331
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !9330
  call void @llvm.dbg.declare(metadata %union.tree_node** %unsigned_type, metadata !9332, metadata !DIExpression()), !dbg !9333
  call void @llvm.dbg.declare(metadata %struct.double_int* %max, metadata !9334, metadata !DIExpression()), !dbg !9335
  %2 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !9336
  %base2 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !9336
  %3 = bitcast %struct.tree_base* %base2 to i64*, !dbg !9336
  %bf.load = load i64, i64* %3, align 8, !dbg !9336
  %bf.clear = and i64 %bf.load, 65535, !dbg !9336
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9336
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !9338
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !9339

lor.lhs.false:                                    ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !9340
  %call = call i32 @integer_zerop(%union.tree_node* %4), !dbg !9341
  %tobool = icmp ne i32 %call, 0, !dbg !9341
  br i1 %tobool, label %if.then, label %if.end, !dbg !9342

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !9343

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9344
  %tobool3 = icmp ne %struct._IO_FILE* %5, null, !dbg !9344
  br i1 %tobool3, label %land.lhs.true, label %if.end13, !dbg !9346

land.lhs.true:                                    ; preds = %if.end
  %6 = load i32, i32* @dump_flags, align 4, !dbg !9347
  %and = and i32 %6, 8, !dbg !9348
  %tobool4 = icmp ne i32 %and, 0, !dbg !9348
  br i1 %tobool4, label %if.then5, label %if.end13, !dbg !9349

if.then5:                                         ; preds = %land.lhs.true
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9350
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.40, i64 0, i64 0)), !dbg !9352
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9353
  %9 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !9354
  %common7 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !9354
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2, !dbg !9354
  %10 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !9354
  call void @print_generic_expr(%struct._IO_FILE* %8, %union.tree_node* %10, i32 2), !dbg !9355
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9356
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0)), !dbg !9357
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9358
  %13 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !9359
  call void @print_generic_expr(%struct._IO_FILE* %12, %union.tree_node* %13, i32 2), !dbg !9360
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9361
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.42, i64 0, i64 0)), !dbg !9362
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9363
  %16 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !9364
  call void @print_generic_expr(%struct._IO_FILE* %15, %union.tree_node* %16, i32 2), !dbg !9365
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9366
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.43, i64 0, i64 0)), !dbg !9367
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9368
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9369
  call void @print_gimple_stmt(%struct._IO_FILE* %18, %union.gimple_statement_d* %19, i32 0, i32 2), !dbg !9370
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9371
  %21 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9372
  %num = getelementptr inbounds %struct.loop, %struct.loop* %21, i32 0, i32 0, !dbg !9373
  %22 = load i32, i32* %num, align 8, !dbg !9373
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.44, i64 0, i64 0), i32 %22), !dbg !9374
  br label %if.end13, !dbg !9375

if.end13:                                         ; preds = %if.then5, %land.lhs.true, %if.end
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9376
  %call14 = call %union.tree_node* @unsigned_type_for(%union.tree_node* %23), !dbg !9377
  store %union.tree_node* %call14, %union.tree_node** %unsigned_type, align 8, !dbg !9378
  %24 = load %union.tree_node*, %union.tree_node** %unsigned_type, align 8, !dbg !9379
  %25 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !9379
  %call15 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %24, %union.tree_node* %25), !dbg !9379
  store %union.tree_node* %call15, %union.tree_node** %base.addr, align 8, !dbg !9380
  %26 = load %union.tree_node*, %union.tree_node** %unsigned_type, align 8, !dbg !9381
  %27 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !9381
  %call16 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %26, %union.tree_node* %27), !dbg !9381
  store %union.tree_node* %call16, %union.tree_node** %step.addr, align 8, !dbg !9382
  %28 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !9383
  %call17 = call i32 @tree_int_cst_sign_bit(%union.tree_node* %28), !dbg !9385
  %tobool18 = icmp ne i32 %call17, 0, !dbg !9385
  br i1 %tobool18, label %if.then19, label %if.else, !dbg !9386

if.then19:                                        ; preds = %if.end13
  %29 = load %union.tree_node*, %union.tree_node** %unsigned_type, align 8, !dbg !9387
  %30 = load %union.tree_node*, %union.tree_node** %low.addr, align 8, !dbg !9387
  %call20 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %29, %union.tree_node* %30), !dbg !9387
  store %union.tree_node* %call20, %union.tree_node** %extreme, align 8, !dbg !9389
  %31 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !9390
  %base21 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !9390
  %32 = bitcast %struct.tree_base* %base21 to i64*, !dbg !9390
  %bf.load22 = load i64, i64* %32, align 8, !dbg !9390
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !9390
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !9390
  %cmp25 = icmp ne i32 %bf.cast24, 23, !dbg !9392
  br i1 %cmp25, label %if.then26, label %if.end28, !dbg !9393

if.then26:                                        ; preds = %if.then19
  %33 = load %union.tree_node*, %union.tree_node** %unsigned_type, align 8, !dbg !9394
  %34 = load %union.tree_node*, %union.tree_node** %high.addr, align 8, !dbg !9394
  %call27 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %33, %union.tree_node* %34), !dbg !9394
  store %union.tree_node* %call27, %union.tree_node** %base.addr, align 8, !dbg !9395
  br label %if.end28, !dbg !9396

if.end28:                                         ; preds = %if.then26, %if.then19
  %35 = load %union.tree_node*, %union.tree_node** %unsigned_type, align 8, !dbg !9397
  %36 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !9397
  %37 = load %union.tree_node*, %union.tree_node** %extreme, align 8, !dbg !9397
  %call29 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %35, %union.tree_node* %36, %union.tree_node* %37), !dbg !9397
  store %union.tree_node* %call29, %union.tree_node** %delta, align 8, !dbg !9398
  %38 = load %union.tree_node*, %union.tree_node** %unsigned_type, align 8, !dbg !9399
  %39 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !9399
  %call30 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 79, %union.tree_node* %38, %union.tree_node* %39), !dbg !9399
  store %union.tree_node* %call30, %union.tree_node** %step.addr, align 8, !dbg !9400
  br label %if.end41, !dbg !9401

if.else:                                          ; preds = %if.end13
  %40 = load %union.tree_node*, %union.tree_node** %unsigned_type, align 8, !dbg !9402
  %41 = load %union.tree_node*, %union.tree_node** %high.addr, align 8, !dbg !9402
  %call31 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %40, %union.tree_node* %41), !dbg !9402
  store %union.tree_node* %call31, %union.tree_node** %extreme, align 8, !dbg !9404
  %42 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !9405
  %base32 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !9405
  %43 = bitcast %struct.tree_base* %base32 to i64*, !dbg !9405
  %bf.load33 = load i64, i64* %43, align 8, !dbg !9405
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !9405
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !9405
  %cmp36 = icmp ne i32 %bf.cast35, 23, !dbg !9407
  br i1 %cmp36, label %if.then37, label %if.end39, !dbg !9408

if.then37:                                        ; preds = %if.else
  %44 = load %union.tree_node*, %union.tree_node** %unsigned_type, align 8, !dbg !9409
  %45 = load %union.tree_node*, %union.tree_node** %low.addr, align 8, !dbg !9409
  %call38 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %44, %union.tree_node* %45), !dbg !9409
  store %union.tree_node* %call38, %union.tree_node** %base.addr, align 8, !dbg !9410
  br label %if.end39, !dbg !9411

if.end39:                                         ; preds = %if.then37, %if.else
  %46 = load %union.tree_node*, %union.tree_node** %unsigned_type, align 8, !dbg !9412
  %47 = load %union.tree_node*, %union.tree_node** %extreme, align 8, !dbg !9412
  %48 = load %union.tree_node*, %union.tree_node** %base.addr, align 8, !dbg !9412
  %call40 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %46, %union.tree_node* %47, %union.tree_node* %48), !dbg !9412
  store %union.tree_node* %call40, %union.tree_node** %delta, align 8, !dbg !9413
  br label %if.end41

if.end41:                                         ; preds = %if.end39, %if.end28
  %49 = load %union.tree_node*, %union.tree_node** %unsigned_type, align 8, !dbg !9414
  %50 = load %union.tree_node*, %union.tree_node** %delta, align 8, !dbg !9414
  %51 = load %union.tree_node*, %union.tree_node** %step.addr, align 8, !dbg !9414
  %call42 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 69, %union.tree_node* %49, %union.tree_node* %50, %union.tree_node* %51), !dbg !9414
  store %union.tree_node* %call42, %union.tree_node** %niter_bound, align 8, !dbg !9415
  %52 = load %union.tree_node*, %union.tree_node** %niter_bound, align 8, !dbg !9416
  %call43 = call { i64, i64 } @derive_constant_upper_bound(%union.tree_node* %52), !dbg !9417
  %53 = bitcast %struct.double_int* %tmp to { i64, i64 }*, !dbg !9417
  %54 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %53, i32 0, i32 0, !dbg !9417
  %55 = extractvalue { i64, i64 } %call43, 0, !dbg !9417
  store i64 %55, i64* %54, align 8, !dbg !9417
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %53, i32 0, i32 1, !dbg !9417
  %57 = extractvalue { i64, i64 } %call43, 1, !dbg !9417
  store i64 %57, i64* %56, align 8, !dbg !9417
  %58 = bitcast %struct.double_int* %max to i8*, !dbg !9417
  %59 = bitcast %struct.double_int* %tmp to i8*, !dbg !9417
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* align 8 %59, i64 16, i1 false), !dbg !9417
  %60 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9418
  %61 = load %union.tree_node*, %union.tree_node** %niter_bound, align 8, !dbg !9419
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9420
  %63 = load i8, i8* %realistic.addr, align 1, !dbg !9421
  %64 = load i8, i8* %upper.addr, align 1, !dbg !9422
  %65 = bitcast %struct.double_int* %max to { i64, i64 }*, !dbg !9423
  %66 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %65, i32 0, i32 0, !dbg !9423
  %67 = load i64, i64* %66, align 8, !dbg !9423
  %68 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %65, i32 0, i32 1, !dbg !9423
  %69 = load i64, i64* %68, align 8, !dbg !9423
  call void @record_estimate(%struct.loop* %60, %union.tree_node* %61, i64 %67, i64 %69, %union.gimple_statement_d* %62, i8 zeroext 0, i8 zeroext %63, i8 zeroext %64), !dbg !9423
  br label %return, !dbg !9424

return:                                           ; preds = %if.end41, %if.then
  ret void, !dbg !9424
}

; Function Attrs: noinline nounwind uwtable
define internal { i64, i64 } @derive_constant_upper_bound(%union.tree_node* %val) #0 !dbg !9425 {
entry:
  %retval = alloca %struct.double_int, align 8
  %val.addr = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !9428, metadata !DIExpression()), !dbg !9429
  call void @llvm.dbg.declare(metadata i32* %code, metadata !9430, metadata !DIExpression()), !dbg !9431
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !9432, metadata !DIExpression()), !dbg !9433
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !9434, metadata !DIExpression()), !dbg !9435
  %0 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !9436
  call void @extract_ops_from_tree(%union.tree_node* %0, i32* %code, %union.tree_node** %op0, %union.tree_node** %op1), !dbg !9437
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !9438
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !9438
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9438
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9438
  %3 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9439
  %4 = load i32, i32* %code, align 4, !dbg !9440
  %5 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !9441
  %call = call { i64, i64 } @derive_constant_upper_bound_ops(%union.tree_node* %2, %union.tree_node* %3, i32 %4, %union.tree_node* %5), !dbg !9442
  %6 = bitcast %struct.double_int* %retval to { i64, i64 }*, !dbg !9442
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !dbg !9442
  %8 = extractvalue { i64, i64 } %call, 0, !dbg !9442
  store i64 %8, i64* %7, align 8, !dbg !9442
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !dbg !9442
  %10 = extractvalue { i64, i64 } %call, 1, !dbg !9442
  store i64 %10, i64* %9, align 8, !dbg !9442
  %11 = bitcast %struct.double_int* %retval to { i64, i64 }*, !dbg !9443
  %12 = load { i64, i64 }, { i64, i64 }* %11, align 8, !dbg !9443
  ret { i64, i64 } %12, !dbg !9443
}

declare dso_local void @extract_ops_from_tree(%union.tree_node*, i32*, %union.tree_node**, %union.tree_node**) #2

; Function Attrs: noinline nounwind uwtable
define internal { i64, i64 } @derive_constant_upper_bound_ops(%union.tree_node* %type, %union.tree_node* %op0, i32 %code, %union.tree_node* %op1) #0 !dbg !9444 {
entry:
  %retval = alloca %struct.double_int, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %op0.addr = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %op1.addr = alloca %union.tree_node*, align 8
  %subtype = alloca %union.tree_node*, align 8
  %maxt = alloca %union.tree_node*, align 8
  %bnd = alloca %struct.double_int, align 8
  %max = alloca %struct.double_int, align 8
  %mmax = alloca %struct.double_int, align 8
  %cst = alloca %struct.double_int, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.double_int, align 8
  %tmp32 = alloca %struct.double_int, align 8
  %tmp49 = alloca %struct.double_int, align 8
  %tmp51 = alloca %struct.double_int, align 8
  %tmp58 = alloca %struct.double_int, align 8
  %tmp61 = alloca %struct.double_int, align 8
  %tmp66 = alloca %struct.double_int, align 8
  %tmp72 = alloca %struct.double_int, align 8
  %agg.tmp = alloca %struct.double_int, align 8
  %tem = alloca %union.tree_node*, align 8
  %tmp101 = alloca %struct.double_int, align 8
  %agg.tmp102 = alloca %struct.double_int, align 8
  %tmp117 = alloca %struct.double_int, align 8
  %agg.tmp119 = alloca %struct.double_int, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9447, metadata !DIExpression()), !dbg !9448
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !9449, metadata !DIExpression()), !dbg !9450
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !9451, metadata !DIExpression()), !dbg !9452
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !9453, metadata !DIExpression()), !dbg !9454
  call void @llvm.dbg.declare(metadata %union.tree_node** %subtype, metadata !9455, metadata !DIExpression()), !dbg !9456
  call void @llvm.dbg.declare(metadata %union.tree_node** %maxt, metadata !9457, metadata !DIExpression()), !dbg !9458
  call void @llvm.dbg.declare(metadata %struct.double_int* %bnd, metadata !9459, metadata !DIExpression()), !dbg !9460
  call void @llvm.dbg.declare(metadata %struct.double_int* %max, metadata !9461, metadata !DIExpression()), !dbg !9462
  call void @llvm.dbg.declare(metadata %struct.double_int* %mmax, metadata !9463, metadata !DIExpression()), !dbg !9464
  call void @llvm.dbg.declare(metadata %struct.double_int* %cst, metadata !9465, metadata !DIExpression()), !dbg !9466
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !9467, metadata !DIExpression()), !dbg !9468
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9469
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !9469
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !9469
  %bf.load = load i64, i64* %1, align 8, !dbg !9469
  %bf.clear = and i64 %bf.load, 65535, !dbg !9469
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9469
  %cmp = icmp eq i32 %bf.cast, 6, !dbg !9469
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !9469

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9469
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !9469
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !9469
  %bf.load2 = load i64, i64* %3, align 8, !dbg !9469
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !9469
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !9469
  %cmp5 = icmp eq i32 %bf.cast4, 7, !dbg !9469
  br i1 %cmp5, label %if.then, label %lor.lhs.false6, !dbg !9469

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9469
  %base7 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !9469
  %5 = bitcast %struct.tree_base* %base7 to i64*, !dbg !9469
  %bf.load8 = load i64, i64* %5, align 8, !dbg !9469
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !9469
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !9469
  %cmp11 = icmp eq i32 %bf.cast10, 8, !dbg !9469
  br i1 %cmp11, label %if.then, label %if.else, !dbg !9471

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false, %entry
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9472
  %type12 = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !9472
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type12, i32 0, i32 14, !dbg !9472
  %7 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !9472
  store %union.tree_node* %7, %union.tree_node** %maxt, align 8, !dbg !9473
  br label %if.end, !dbg !9474

if.else:                                          ; preds = %lor.lhs.false6
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9475
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9476
  %call = call %union.tree_node* @upper_bound_in_type(%union.tree_node* %8, %union.tree_node* %9), !dbg !9477
  store %union.tree_node* %call, %union.tree_node** %maxt, align 8, !dbg !9478
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load %union.tree_node*, %union.tree_node** %maxt, align 8, !dbg !9479
  %call13 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %10), !dbg !9480
  %11 = bitcast %struct.double_int* %tmp to { i64, i64 }*, !dbg !9480
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !9480
  %13 = extractvalue { i64, i64 } %call13, 0, !dbg !9480
  store i64 %13, i64* %12, align 8, !dbg !9480
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !9480
  %15 = extractvalue { i64, i64 } %call13, 1, !dbg !9480
  store i64 %15, i64* %14, align 8, !dbg !9480
  %16 = bitcast %struct.double_int* %max to i8*, !dbg !9480
  %17 = bitcast %struct.double_int* %tmp to i8*, !dbg !9480
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 16, i1 false), !dbg !9480
  %18 = load i32, i32* %code.addr, align 4, !dbg !9481
  switch i32 %18, label %sw.default [
    i32 23, label %sw.bb
    i32 116, label %sw.bb15
    i32 113, label %sw.bb15
    i32 63, label %sw.bb38
    i32 66, label %sw.bb38
    i32 64, label %sw.bb38
    i32 69, label %sw.bb106
    i32 76, label %sw.bb106
    i32 89, label %sw.bb122
    i32 141, label %sw.bb134
  ], !dbg !9482

sw.bb:                                            ; preds = %if.end
  %19 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !9483
  %call14 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %19), !dbg !9485
  %20 = bitcast %struct.double_int* %retval to { i64, i64 }*, !dbg !9485
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %20, i32 0, i32 0, !dbg !9485
  %22 = extractvalue { i64, i64 } %call14, 0, !dbg !9485
  store i64 %22, i64* %21, align 8, !dbg !9485
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %20, i32 0, i32 1, !dbg !9485
  %24 = extractvalue { i64, i64 } %call14, 1, !dbg !9485
  store i64 %24, i64* %23, align 8, !dbg !9485
  br label %return, !dbg !9486

sw.bb15:                                          ; preds = %if.end, %if.end
  %25 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !9487
  %common = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !9487
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9487
  %26 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !9487
  store %union.tree_node* %26, %union.tree_node** %subtype, align 8, !dbg !9488
  %27 = load %union.tree_node*, %union.tree_node** %subtype, align 8, !dbg !9489
  %base17 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !9489
  %28 = bitcast %struct.tree_base* %base17 to i64*, !dbg !9489
  %bf.load18 = load i64, i64* %28, align 8, !dbg !9489
  %bf.lshr = lshr i64 %bf.load18, 21, !dbg !9489
  %bf.clear19 = and i64 %bf.lshr, 1, !dbg !9489
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !9489
  %tobool = icmp ne i32 %bf.cast20, 0, !dbg !9489
  br i1 %tobool, label %if.end31, label %land.lhs.true, !dbg !9491

land.lhs.true:                                    ; preds = %sw.bb15
  %29 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9492
  %base21 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !9492
  %30 = bitcast %struct.tree_base* %base21 to i64*, !dbg !9492
  %bf.load22 = load i64, i64* %30, align 8, !dbg !9492
  %bf.lshr23 = lshr i64 %bf.load22, 21, !dbg !9492
  %bf.clear24 = and i64 %bf.lshr23, 1, !dbg !9492
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !9492
  %tobool26 = icmp ne i32 %bf.cast25, 0, !dbg !9492
  br i1 %tobool26, label %land.lhs.true27, label %if.end31, !dbg !9493

land.lhs.true27:                                  ; preds = %land.lhs.true
  %31 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !9494
  %call28 = call zeroext i8 @tree_expr_nonnegative_p(%union.tree_node* %31), !dbg !9495
  %tobool29 = icmp ne i8 %call28, 0, !dbg !9495
  br i1 %tobool29, label %if.end31, label %if.then30, !dbg !9496

if.then30:                                        ; preds = %land.lhs.true27
  %32 = bitcast %struct.double_int* %retval to i8*, !dbg !9497
  %33 = bitcast %struct.double_int* %max to i8*, !dbg !9497
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 16, i1 false), !dbg !9497
  br label %return, !dbg !9499

if.end31:                                         ; preds = %land.lhs.true27, %land.lhs.true, %sw.bb15
  %34 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !9500
  %call33 = call { i64, i64 } @derive_constant_upper_bound(%union.tree_node* %34), !dbg !9501
  %35 = bitcast %struct.double_int* %tmp32 to { i64, i64 }*, !dbg !9501
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %35, i32 0, i32 0, !dbg !9501
  %37 = extractvalue { i64, i64 } %call33, 0, !dbg !9501
  store i64 %37, i64* %36, align 8, !dbg !9501
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %35, i32 0, i32 1, !dbg !9501
  %39 = extractvalue { i64, i64 } %call33, 1, !dbg !9501
  store i64 %39, i64* %38, align 8, !dbg !9501
  %40 = bitcast %struct.double_int* %bnd to i8*, !dbg !9501
  %41 = bitcast %struct.double_int* %tmp32 to i8*, !dbg !9501
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 16, i1 false), !dbg !9501
  %42 = bitcast %struct.double_int* %max to { i64, i64 }*, !dbg !9502
  %43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %42, i32 0, i32 0, !dbg !9502
  %44 = load i64, i64* %43, align 8, !dbg !9502
  %45 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %42, i32 0, i32 1, !dbg !9502
  %46 = load i64, i64* %45, align 8, !dbg !9502
  %47 = bitcast %struct.double_int* %bnd to { i64, i64 }*, !dbg !9502
  %48 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %47, i32 0, i32 0, !dbg !9502
  %49 = load i64, i64* %48, align 8, !dbg !9502
  %50 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %47, i32 0, i32 1, !dbg !9502
  %51 = load i64, i64* %50, align 8, !dbg !9502
  %call34 = call i32 @double_int_ucmp(i64 %44, i64 %46, i64 %49, i64 %51), !dbg !9502
  %cmp35 = icmp slt i32 %call34, 0, !dbg !9504
  br i1 %cmp35, label %if.then36, label %if.end37, !dbg !9505

if.then36:                                        ; preds = %if.end31
  %52 = bitcast %struct.double_int* %retval to i8*, !dbg !9506
  %53 = bitcast %struct.double_int* %max to i8*, !dbg !9506
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 16, i1 false), !dbg !9506
  br label %return, !dbg !9507

if.end37:                                         ; preds = %if.end31
  %54 = bitcast %struct.double_int* %retval to i8*, !dbg !9508
  %55 = bitcast %struct.double_int* %bnd to i8*, !dbg !9508
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 16, i1 false), !dbg !9508
  br label %return, !dbg !9509

sw.bb38:                                          ; preds = %if.end, %if.end, %if.end
  %56 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !9510
  %base39 = bitcast %union.tree_node* %56 to %struct.tree_base*, !dbg !9510
  %57 = bitcast %struct.tree_base* %base39 to i64*, !dbg !9510
  %bf.load40 = load i64, i64* %57, align 8, !dbg !9510
  %bf.clear41 = and i64 %bf.load40, 65535, !dbg !9510
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !9510
  %cmp43 = icmp ne i32 %bf.cast42, 23, !dbg !9512
  br i1 %cmp43, label %if.then47, label %lor.lhs.false44, !dbg !9513

lor.lhs.false44:                                  ; preds = %sw.bb38
  %58 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !9514
  %call45 = call zeroext i8 @tree_expr_nonnegative_p(%union.tree_node* %58), !dbg !9515
  %tobool46 = icmp ne i8 %call45, 0, !dbg !9515
  br i1 %tobool46, label %if.end48, label %if.then47, !dbg !9516

if.then47:                                        ; preds = %lor.lhs.false44, %sw.bb38
  %59 = bitcast %struct.double_int* %retval to i8*, !dbg !9517
  %60 = bitcast %struct.double_int* %max to i8*, !dbg !9517
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 16, i1 false), !dbg !9517
  br label %return, !dbg !9518

if.end48:                                         ; preds = %lor.lhs.false44
  %61 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !9519
  %call50 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %61), !dbg !9520
  %62 = bitcast %struct.double_int* %tmp49 to { i64, i64 }*, !dbg !9520
  %63 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %62, i32 0, i32 0, !dbg !9520
  %64 = extractvalue { i64, i64 } %call50, 0, !dbg !9520
  store i64 %64, i64* %63, align 8, !dbg !9520
  %65 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %62, i32 0, i32 1, !dbg !9520
  %66 = extractvalue { i64, i64 } %call50, 1, !dbg !9520
  store i64 %66, i64* %65, align 8, !dbg !9520
  %67 = bitcast %struct.double_int* %cst to i8*, !dbg !9520
  %68 = bitcast %struct.double_int* %tmp49 to i8*, !dbg !9520
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 16, i1 false), !dbg !9520
  %69 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9521
  %type52 = bitcast %union.tree_node* %69 to %struct.tree_type*, !dbg !9521
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type52, i32 0, i32 6, !dbg !9521
  %bf.load53 = load i32, i32* %precision, align 4, !dbg !9521
  %bf.clear54 = and i32 %bf.load53, 1023, !dbg !9521
  %70 = bitcast %struct.double_int* %cst to { i64, i64 }*, !dbg !9522
  %71 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %70, i32 0, i32 0, !dbg !9522
  %72 = load i64, i64* %71, align 8, !dbg !9522
  %73 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %70, i32 0, i32 1, !dbg !9522
  %74 = load i64, i64* %73, align 8, !dbg !9522
  %call55 = call { i64, i64 } @double_int_sext(i64 %72, i64 %74, i32 %bf.clear54), !dbg !9522
  %75 = bitcast %struct.double_int* %tmp51 to { i64, i64 }*, !dbg !9522
  %76 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %75, i32 0, i32 0, !dbg !9522
  %77 = extractvalue { i64, i64 } %call55, 0, !dbg !9522
  store i64 %77, i64* %76, align 8, !dbg !9522
  %78 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %75, i32 0, i32 1, !dbg !9522
  %79 = extractvalue { i64, i64 } %call55, 1, !dbg !9522
  store i64 %79, i64* %78, align 8, !dbg !9522
  %80 = bitcast %struct.double_int* %cst to i8*, !dbg !9522
  %81 = bitcast %struct.double_int* %tmp51 to i8*, !dbg !9522
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 16, i1 false), !dbg !9522
  %82 = load i32, i32* %code.addr, align 4, !dbg !9523
  %cmp56 = icmp ne i32 %82, 64, !dbg !9525
  br i1 %cmp56, label %if.then57, label %if.end60, !dbg !9526

if.then57:                                        ; preds = %if.end48
  %83 = bitcast %struct.double_int* %cst to { i64, i64 }*, !dbg !9527
  %84 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %83, i32 0, i32 0, !dbg !9527
  %85 = load i64, i64* %84, align 8, !dbg !9527
  %86 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %83, i32 0, i32 1, !dbg !9527
  %87 = load i64, i64* %86, align 8, !dbg !9527
  %call59 = call { i64, i64 } @double_int_neg(i64 %85, i64 %87), !dbg !9527
  %88 = bitcast %struct.double_int* %tmp58 to { i64, i64 }*, !dbg !9527
  %89 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %88, i32 0, i32 0, !dbg !9527
  %90 = extractvalue { i64, i64 } %call59, 0, !dbg !9527
  store i64 %90, i64* %89, align 8, !dbg !9527
  %91 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %88, i32 0, i32 1, !dbg !9527
  %92 = extractvalue { i64, i64 } %call59, 1, !dbg !9527
  store i64 %92, i64* %91, align 8, !dbg !9527
  %93 = bitcast %struct.double_int* %cst to i8*, !dbg !9527
  %94 = bitcast %struct.double_int* %tmp58 to i8*, !dbg !9527
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %93, i8* align 8 %94, i64 16, i1 false), !dbg !9527
  br label %if.end60, !dbg !9528

if.end60:                                         ; preds = %if.then57, %if.end48
  %95 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !9529
  %call62 = call { i64, i64 } @derive_constant_upper_bound(%union.tree_node* %95), !dbg !9530
  %96 = bitcast %struct.double_int* %tmp61 to { i64, i64 }*, !dbg !9530
  %97 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %96, i32 0, i32 0, !dbg !9530
  %98 = extractvalue { i64, i64 } %call62, 0, !dbg !9530
  store i64 %98, i64* %97, align 8, !dbg !9530
  %99 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %96, i32 0, i32 1, !dbg !9530
  %100 = extractvalue { i64, i64 } %call62, 1, !dbg !9530
  store i64 %100, i64* %99, align 8, !dbg !9530
  %101 = bitcast %struct.double_int* %bnd to i8*, !dbg !9530
  %102 = bitcast %struct.double_int* %tmp61 to i8*, !dbg !9530
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %101, i8* align 8 %102, i64 16, i1 false), !dbg !9530
  %103 = bitcast %struct.double_int* %cst to { i64, i64 }*, !dbg !9531
  %104 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %103, i32 0, i32 0, !dbg !9531
  %105 = load i64, i64* %104, align 8, !dbg !9531
  %106 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %103, i32 0, i32 1, !dbg !9531
  %107 = load i64, i64* %106, align 8, !dbg !9531
  %call63 = call zeroext i8 @double_int_negative_p(i64 %105, i64 %107), !dbg !9531
  %tobool64 = icmp ne i8 %call63, 0, !dbg !9531
  br i1 %tobool64, label %if.then65, label %if.else80, !dbg !9533

if.then65:                                        ; preds = %if.end60
  %108 = bitcast %struct.double_int* %cst to { i64, i64 }*, !dbg !9534
  %109 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %108, i32 0, i32 0, !dbg !9534
  %110 = load i64, i64* %109, align 8, !dbg !9534
  %111 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %108, i32 0, i32 1, !dbg !9534
  %112 = load i64, i64* %111, align 8, !dbg !9534
  %call67 = call { i64, i64 } @double_int_neg(i64 %110, i64 %112), !dbg !9534
  %113 = bitcast %struct.double_int* %tmp66 to { i64, i64 }*, !dbg !9534
  %114 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %113, i32 0, i32 0, !dbg !9534
  %115 = extractvalue { i64, i64 } %call67, 0, !dbg !9534
  store i64 %115, i64* %114, align 8, !dbg !9534
  %116 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %113, i32 0, i32 1, !dbg !9534
  %117 = extractvalue { i64, i64 } %call67, 1, !dbg !9534
  store i64 %117, i64* %116, align 8, !dbg !9534
  %118 = bitcast %struct.double_int* %cst to i8*, !dbg !9534
  %119 = bitcast %struct.double_int* %tmp66 to i8*, !dbg !9534
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %118, i8* align 8 %119, i64 16, i1 false), !dbg !9534
  %120 = bitcast %struct.double_int* %cst to { i64, i64 }*, !dbg !9536
  %121 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %120, i32 0, i32 0, !dbg !9536
  %122 = load i64, i64* %121, align 8, !dbg !9536
  %123 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %120, i32 0, i32 1, !dbg !9536
  %124 = load i64, i64* %123, align 8, !dbg !9536
  %call68 = call zeroext i8 @double_int_negative_p(i64 %122, i64 %124), !dbg !9536
  %tobool69 = icmp ne i8 %call68, 0, !dbg !9536
  br i1 %tobool69, label %if.then70, label %if.end71, !dbg !9538

if.then70:                                        ; preds = %if.then65
  %125 = bitcast %struct.double_int* %retval to i8*, !dbg !9539
  %126 = bitcast %struct.double_int* %max to i8*, !dbg !9539
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* align 8 %126, i64 16, i1 false), !dbg !9539
  br label %return, !dbg !9540

if.end71:                                         ; preds = %if.then65
  %127 = bitcast %struct.double_int* %cst to { i64, i64 }*, !dbg !9541
  %128 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %127, i32 0, i32 0, !dbg !9541
  %129 = load i64, i64* %128, align 8, !dbg !9541
  %130 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %127, i32 0, i32 1, !dbg !9541
  %131 = load i64, i64* %130, align 8, !dbg !9541
  %call73 = call { i64, i64 } @double_int_neg(i64 %129, i64 %131), !dbg !9541
  %132 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !9541
  %133 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %132, i32 0, i32 0, !dbg !9541
  %134 = extractvalue { i64, i64 } %call73, 0, !dbg !9541
  store i64 %134, i64* %133, align 8, !dbg !9541
  %135 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %132, i32 0, i32 1, !dbg !9541
  %136 = extractvalue { i64, i64 } %call73, 1, !dbg !9541
  store i64 %136, i64* %135, align 8, !dbg !9541
  %137 = bitcast %struct.double_int* %max to { i64, i64 }*, !dbg !9542
  %138 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %137, i32 0, i32 0, !dbg !9542
  %139 = load i64, i64* %138, align 8, !dbg !9542
  %140 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %137, i32 0, i32 1, !dbg !9542
  %141 = load i64, i64* %140, align 8, !dbg !9542
  %142 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !9542
  %143 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %142, i32 0, i32 0, !dbg !9542
  %144 = load i64, i64* %143, align 8, !dbg !9542
  %145 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %142, i32 0, i32 1, !dbg !9542
  %146 = load i64, i64* %145, align 8, !dbg !9542
  %call74 = call { i64, i64 } @double_int_add(i64 %139, i64 %141, i64 %144, i64 %146), !dbg !9542
  %147 = bitcast %struct.double_int* %tmp72 to { i64, i64 }*, !dbg !9542
  %148 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %147, i32 0, i32 0, !dbg !9542
  %149 = extractvalue { i64, i64 } %call74, 0, !dbg !9542
  store i64 %149, i64* %148, align 8, !dbg !9542
  %150 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %147, i32 0, i32 1, !dbg !9542
  %151 = extractvalue { i64, i64 } %call74, 1, !dbg !9542
  store i64 %151, i64* %150, align 8, !dbg !9542
  %152 = bitcast %struct.double_int* %mmax to i8*, !dbg !9542
  %153 = bitcast %struct.double_int* %tmp72 to i8*, !dbg !9542
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %152, i8* align 8 %153, i64 16, i1 false), !dbg !9542
  %154 = bitcast %struct.double_int* %bnd to { i64, i64 }*, !dbg !9543
  %155 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %154, i32 0, i32 0, !dbg !9543
  %156 = load i64, i64* %155, align 8, !dbg !9543
  %157 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %154, i32 0, i32 1, !dbg !9543
  %158 = load i64, i64* %157, align 8, !dbg !9543
  %159 = bitcast %struct.double_int* %mmax to { i64, i64 }*, !dbg !9543
  %160 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %159, i32 0, i32 0, !dbg !9543
  %161 = load i64, i64* %160, align 8, !dbg !9543
  %162 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %159, i32 0, i32 1, !dbg !9543
  %163 = load i64, i64* %162, align 8, !dbg !9543
  %call75 = call i32 @double_int_ucmp(i64 %156, i64 %158, i64 %161, i64 %163), !dbg !9543
  %cmp76 = icmp sgt i32 %call75, 0, !dbg !9545
  br i1 %cmp76, label %if.then77, label %if.end78, !dbg !9546

if.then77:                                        ; preds = %if.end71
  %164 = bitcast %struct.double_int* %retval to i8*, !dbg !9547
  %165 = bitcast %struct.double_int* %max to i8*, !dbg !9547
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %164, i8* align 8 %165, i64 16, i1 false), !dbg !9547
  br label %return, !dbg !9548

if.end78:                                         ; preds = %if.end71
  %166 = bitcast %struct.double_int* %bnd to { i64, i64 }*, !dbg !9549
  %167 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %166, i32 0, i32 0, !dbg !9549
  %168 = load i64, i64* %167, align 8, !dbg !9549
  %169 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %166, i32 0, i32 1, !dbg !9549
  %170 = load i64, i64* %169, align 8, !dbg !9549
  %171 = bitcast %struct.double_int* %cst to { i64, i64 }*, !dbg !9549
  %172 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %171, i32 0, i32 0, !dbg !9549
  %173 = load i64, i64* %172, align 8, !dbg !9549
  %174 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %171, i32 0, i32 1, !dbg !9549
  %175 = load i64, i64* %174, align 8, !dbg !9549
  %call79 = call { i64, i64 } @double_int_add(i64 %168, i64 %170, i64 %173, i64 %175), !dbg !9549
  %176 = bitcast %struct.double_int* %retval to { i64, i64 }*, !dbg !9549
  %177 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %176, i32 0, i32 0, !dbg !9549
  %178 = extractvalue { i64, i64 } %call79, 0, !dbg !9549
  store i64 %178, i64* %177, align 8, !dbg !9549
  %179 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %176, i32 0, i32 1, !dbg !9549
  %180 = extractvalue { i64, i64 } %call79, 1, !dbg !9549
  store i64 %180, i64* %179, align 8, !dbg !9549
  br label %return, !dbg !9550

if.else80:                                        ; preds = %if.end60
  %181 = bitcast %struct.double_int* %bnd to { i64, i64 }*, !dbg !9551
  %182 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %181, i32 0, i32 0, !dbg !9551
  %183 = load i64, i64* %182, align 8, !dbg !9551
  %184 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %181, i32 0, i32 1, !dbg !9551
  %185 = load i64, i64* %184, align 8, !dbg !9551
  %186 = bitcast %struct.double_int* %cst to { i64, i64 }*, !dbg !9551
  %187 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %186, i32 0, i32 0, !dbg !9551
  %188 = load i64, i64* %187, align 8, !dbg !9551
  %189 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %186, i32 0, i32 1, !dbg !9551
  %190 = load i64, i64* %189, align 8, !dbg !9551
  %call81 = call i32 @double_int_ucmp(i64 %183, i64 %185, i64 %188, i64 %190), !dbg !9551
  %cmp82 = icmp slt i32 %call81, 0, !dbg !9554
  br i1 %cmp82, label %if.then83, label %if.end84, !dbg !9555

if.then83:                                        ; preds = %if.else80
  %191 = bitcast %struct.double_int* %retval to i8*, !dbg !9556
  %192 = bitcast %struct.double_int* %max to i8*, !dbg !9556
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %191, i8* align 8 %192, i64 16, i1 false), !dbg !9556
  br label %return, !dbg !9557

if.end84:                                         ; preds = %if.else80
  %193 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9558
  %base85 = bitcast %union.tree_node* %193 to %struct.tree_base*, !dbg !9558
  %194 = bitcast %struct.tree_base* %base85 to i64*, !dbg !9558
  %bf.load86 = load i64, i64* %194, align 8, !dbg !9558
  %bf.lshr87 = lshr i64 %bf.load86, 21, !dbg !9558
  %bf.clear88 = and i64 %bf.lshr87, 1, !dbg !9558
  %bf.cast89 = trunc i64 %bf.clear88 to i32, !dbg !9558
  %tobool90 = icmp ne i32 %bf.cast89, 0, !dbg !9558
  br i1 %tobool90, label %if.then91, label %if.end100, !dbg !9560

if.then91:                                        ; preds = %if.end84
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !9561, metadata !DIExpression()), !dbg !9563
  %195 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !9564
  %196 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !9564
  %197 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9564
  %198 = bitcast %struct.double_int* %cst to { i64, i64 }*, !dbg !9564
  %199 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %198, i32 0, i32 0, !dbg !9564
  %200 = load i64, i64* %199, align 8, !dbg !9564
  %201 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %198, i32 0, i32 1, !dbg !9564
  %202 = load i64, i64* %201, align 8, !dbg !9564
  %call92 = call %union.tree_node* @double_int_to_tree(%union.tree_node* %197, i64 %200, i64 %202), !dbg !9564
  %call93 = call %union.tree_node* @fold_binary_loc(i32 0, i32 100, %union.tree_node* %195, %union.tree_node* %196, %union.tree_node* %call92), !dbg !9564
  store %union.tree_node* %call93, %union.tree_node** %tem, align 8, !dbg !9563
  %203 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !9565
  %tobool94 = icmp ne %union.tree_node* %203, null, !dbg !9565
  br i1 %tobool94, label %lor.lhs.false95, label %if.then98, !dbg !9567

lor.lhs.false95:                                  ; preds = %if.then91
  %204 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !9568
  %call96 = call i32 @integer_nonzerop(%union.tree_node* %204), !dbg !9569
  %tobool97 = icmp ne i32 %call96, 0, !dbg !9569
  br i1 %tobool97, label %if.then98, label %if.end99, !dbg !9570

if.then98:                                        ; preds = %lor.lhs.false95, %if.then91
  %205 = bitcast %struct.double_int* %retval to i8*, !dbg !9571
  %206 = bitcast %struct.double_int* %max to i8*, !dbg !9571
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %205, i8* align 8 %206, i64 16, i1 false), !dbg !9571
  br label %return, !dbg !9572

if.end99:                                         ; preds = %lor.lhs.false95
  br label %if.end100, !dbg !9573

if.end100:                                        ; preds = %if.end99, %if.end84
  %207 = bitcast %struct.double_int* %cst to { i64, i64 }*, !dbg !9574
  %208 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %207, i32 0, i32 0, !dbg !9574
  %209 = load i64, i64* %208, align 8, !dbg !9574
  %210 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %207, i32 0, i32 1, !dbg !9574
  %211 = load i64, i64* %210, align 8, !dbg !9574
  %call103 = call { i64, i64 } @double_int_neg(i64 %209, i64 %211), !dbg !9574
  %212 = bitcast %struct.double_int* %agg.tmp102 to { i64, i64 }*, !dbg !9574
  %213 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %212, i32 0, i32 0, !dbg !9574
  %214 = extractvalue { i64, i64 } %call103, 0, !dbg !9574
  store i64 %214, i64* %213, align 8, !dbg !9574
  %215 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %212, i32 0, i32 1, !dbg !9574
  %216 = extractvalue { i64, i64 } %call103, 1, !dbg !9574
  store i64 %216, i64* %215, align 8, !dbg !9574
  %217 = bitcast %struct.double_int* %bnd to { i64, i64 }*, !dbg !9575
  %218 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %217, i32 0, i32 0, !dbg !9575
  %219 = load i64, i64* %218, align 8, !dbg !9575
  %220 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %217, i32 0, i32 1, !dbg !9575
  %221 = load i64, i64* %220, align 8, !dbg !9575
  %222 = bitcast %struct.double_int* %agg.tmp102 to { i64, i64 }*, !dbg !9575
  %223 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %222, i32 0, i32 0, !dbg !9575
  %224 = load i64, i64* %223, align 8, !dbg !9575
  %225 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %222, i32 0, i32 1, !dbg !9575
  %226 = load i64, i64* %225, align 8, !dbg !9575
  %call104 = call { i64, i64 } @double_int_add(i64 %219, i64 %221, i64 %224, i64 %226), !dbg !9575
  %227 = bitcast %struct.double_int* %tmp101 to { i64, i64 }*, !dbg !9575
  %228 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %227, i32 0, i32 0, !dbg !9575
  %229 = extractvalue { i64, i64 } %call104, 0, !dbg !9575
  store i64 %229, i64* %228, align 8, !dbg !9575
  %230 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %227, i32 0, i32 1, !dbg !9575
  %231 = extractvalue { i64, i64 } %call104, 1, !dbg !9575
  store i64 %231, i64* %230, align 8, !dbg !9575
  %232 = bitcast %struct.double_int* %bnd to i8*, !dbg !9575
  %233 = bitcast %struct.double_int* %tmp101 to i8*, !dbg !9575
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %232, i8* align 8 %233, i64 16, i1 false), !dbg !9575
  br label %if.end105

if.end105:                                        ; preds = %if.end100
  %234 = bitcast %struct.double_int* %retval to i8*, !dbg !9576
  %235 = bitcast %struct.double_int* %bnd to i8*, !dbg !9576
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %234, i8* align 8 %235, i64 16, i1 false), !dbg !9576
  br label %return, !dbg !9577

sw.bb106:                                         ; preds = %if.end, %if.end
  %236 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !9578
  %base107 = bitcast %union.tree_node* %236 to %struct.tree_base*, !dbg !9578
  %237 = bitcast %struct.tree_base* %base107 to i64*, !dbg !9578
  %bf.load108 = load i64, i64* %237, align 8, !dbg !9578
  %bf.clear109 = and i64 %bf.load108, 65535, !dbg !9578
  %bf.cast110 = trunc i64 %bf.clear109 to i32, !dbg !9578
  %cmp111 = icmp ne i32 %bf.cast110, 23, !dbg !9580
  br i1 %cmp111, label %if.then115, label %lor.lhs.false112, !dbg !9581

lor.lhs.false112:                                 ; preds = %sw.bb106
  %238 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !9582
  %call113 = call i32 @tree_int_cst_sign_bit(%union.tree_node* %238), !dbg !9583
  %tobool114 = icmp ne i32 %call113, 0, !dbg !9583
  br i1 %tobool114, label %if.then115, label %if.end116, !dbg !9584

if.then115:                                       ; preds = %lor.lhs.false112, %sw.bb106
  %239 = bitcast %struct.double_int* %retval to i8*, !dbg !9585
  %240 = bitcast %struct.double_int* %max to i8*, !dbg !9585
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %239, i8* align 8 %240, i64 16, i1 false), !dbg !9585
  br label %return, !dbg !9586

if.end116:                                        ; preds = %lor.lhs.false112
  %241 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !9587
  %call118 = call { i64, i64 } @derive_constant_upper_bound(%union.tree_node* %241), !dbg !9588
  %242 = bitcast %struct.double_int* %tmp117 to { i64, i64 }*, !dbg !9588
  %243 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %242, i32 0, i32 0, !dbg !9588
  %244 = extractvalue { i64, i64 } %call118, 0, !dbg !9588
  store i64 %244, i64* %243, align 8, !dbg !9588
  %245 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %242, i32 0, i32 1, !dbg !9588
  %246 = extractvalue { i64, i64 } %call118, 1, !dbg !9588
  store i64 %246, i64* %245, align 8, !dbg !9588
  %247 = bitcast %struct.double_int* %bnd to i8*, !dbg !9588
  %248 = bitcast %struct.double_int* %tmp117 to i8*, !dbg !9588
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %247, i8* align 8 %248, i64 16, i1 false), !dbg !9588
  %249 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !9589
  %call120 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %249), !dbg !9590
  %250 = bitcast %struct.double_int* %agg.tmp119 to { i64, i64 }*, !dbg !9590
  %251 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %250, i32 0, i32 0, !dbg !9590
  %252 = extractvalue { i64, i64 } %call120, 0, !dbg !9590
  store i64 %252, i64* %251, align 8, !dbg !9590
  %253 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %250, i32 0, i32 1, !dbg !9590
  %254 = extractvalue { i64, i64 } %call120, 1, !dbg !9590
  store i64 %254, i64* %253, align 8, !dbg !9590
  %255 = bitcast %struct.double_int* %bnd to { i64, i64 }*, !dbg !9591
  %256 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %255, i32 0, i32 0, !dbg !9591
  %257 = load i64, i64* %256, align 8, !dbg !9591
  %258 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %255, i32 0, i32 1, !dbg !9591
  %259 = load i64, i64* %258, align 8, !dbg !9591
  %260 = bitcast %struct.double_int* %agg.tmp119 to { i64, i64 }*, !dbg !9591
  %261 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %260, i32 0, i32 0, !dbg !9591
  %262 = load i64, i64* %261, align 8, !dbg !9591
  %263 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %260, i32 0, i32 1, !dbg !9591
  %264 = load i64, i64* %263, align 8, !dbg !9591
  %call121 = call { i64, i64 } @double_int_udiv(i64 %257, i64 %259, i64 %262, i64 %264, i32 69), !dbg !9591
  %265 = bitcast %struct.double_int* %retval to { i64, i64 }*, !dbg !9591
  %266 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %265, i32 0, i32 0, !dbg !9591
  %267 = extractvalue { i64, i64 } %call121, 0, !dbg !9591
  store i64 %267, i64* %266, align 8, !dbg !9591
  %268 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %265, i32 0, i32 1, !dbg !9591
  %269 = extractvalue { i64, i64 } %call121, 1, !dbg !9591
  store i64 %269, i64* %268, align 8, !dbg !9591
  br label %return, !dbg !9592

sw.bb122:                                         ; preds = %if.end
  %270 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !9593
  %base123 = bitcast %union.tree_node* %270 to %struct.tree_base*, !dbg !9593
  %271 = bitcast %struct.tree_base* %base123 to i64*, !dbg !9593
  %bf.load124 = load i64, i64* %271, align 8, !dbg !9593
  %bf.clear125 = and i64 %bf.load124, 65535, !dbg !9593
  %bf.cast126 = trunc i64 %bf.clear125 to i32, !dbg !9593
  %cmp127 = icmp ne i32 %bf.cast126, 23, !dbg !9595
  br i1 %cmp127, label %if.then131, label %lor.lhs.false128, !dbg !9596

lor.lhs.false128:                                 ; preds = %sw.bb122
  %272 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !9597
  %call129 = call i32 @tree_int_cst_sign_bit(%union.tree_node* %272), !dbg !9598
  %tobool130 = icmp ne i32 %call129, 0, !dbg !9598
  br i1 %tobool130, label %if.then131, label %if.end132, !dbg !9599

if.then131:                                       ; preds = %lor.lhs.false128, %sw.bb122
  %273 = bitcast %struct.double_int* %retval to i8*, !dbg !9600
  %274 = bitcast %struct.double_int* %max to i8*, !dbg !9600
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %273, i8* align 8 %274, i64 16, i1 false), !dbg !9600
  br label %return, !dbg !9601

if.end132:                                        ; preds = %lor.lhs.false128
  %275 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !9602
  %call133 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %275), !dbg !9603
  %276 = bitcast %struct.double_int* %retval to { i64, i64 }*, !dbg !9603
  %277 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %276, i32 0, i32 0, !dbg !9603
  %278 = extractvalue { i64, i64 } %call133, 0, !dbg !9603
  store i64 %278, i64* %277, align 8, !dbg !9603
  %279 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %276, i32 0, i32 1, !dbg !9603
  %280 = extractvalue { i64, i64 } %call133, 1, !dbg !9603
  store i64 %280, i64* %279, align 8, !dbg !9603
  br label %return, !dbg !9604

sw.bb134:                                         ; preds = %if.end
  %281 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !9605
  %ssa_name = bitcast %union.tree_node* %281 to %struct.tree_ssa_name*, !dbg !9605
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !9605
  %282 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !9605
  store %union.gimple_statement_d* %282, %union.gimple_statement_d** %stmt, align 8, !dbg !9606
  %283 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9607
  %call135 = call i32 @gimple_code(%union.gimple_statement_d* %283), !dbg !9609
  %cmp136 = icmp ne i32 %call135, 6, !dbg !9610
  br i1 %cmp136, label %if.then140, label %lor.lhs.false137, !dbg !9611

lor.lhs.false137:                                 ; preds = %sw.bb134
  %284 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9612
  %call138 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %284), !dbg !9613
  %285 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !9614
  %cmp139 = icmp ne %union.tree_node* %call138, %285, !dbg !9615
  br i1 %cmp139, label %if.then140, label %if.end141, !dbg !9616

if.then140:                                       ; preds = %lor.lhs.false137, %sw.bb134
  %286 = bitcast %struct.double_int* %retval to i8*, !dbg !9617
  %287 = bitcast %struct.double_int* %max to i8*, !dbg !9617
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %286, i8* align 8 %287, i64 16, i1 false), !dbg !9617
  br label %return, !dbg !9618

if.end141:                                        ; preds = %lor.lhs.false137
  %288 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9619
  %call142 = call { i64, i64 } @derive_constant_upper_bound_assign(%union.gimple_statement_d* %288), !dbg !9620
  %289 = bitcast %struct.double_int* %retval to { i64, i64 }*, !dbg !9620
  %290 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %289, i32 0, i32 0, !dbg !9620
  %291 = extractvalue { i64, i64 } %call142, 0, !dbg !9620
  store i64 %291, i64* %290, align 8, !dbg !9620
  %292 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %289, i32 0, i32 1, !dbg !9620
  %293 = extractvalue { i64, i64 } %call142, 1, !dbg !9620
  store i64 %293, i64* %292, align 8, !dbg !9620
  br label %return, !dbg !9621

sw.default:                                       ; preds = %if.end
  %294 = bitcast %struct.double_int* %retval to i8*, !dbg !9622
  %295 = bitcast %struct.double_int* %max to i8*, !dbg !9622
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %294, i8* align 8 %295, i64 16, i1 false), !dbg !9622
  br label %return, !dbg !9623

return:                                           ; preds = %sw.default, %if.end141, %if.then140, %if.end132, %if.then131, %if.end116, %if.then115, %if.end105, %if.then98, %if.then83, %if.end78, %if.then77, %if.then70, %if.then47, %if.end37, %if.then36, %if.then30, %sw.bb
  %296 = bitcast %struct.double_int* %retval to { i64, i64 }*, !dbg !9624
  %297 = load { i64, i64 }, { i64, i64 }* %296, align 8, !dbg !9624
  ret { i64, i64 } %297, !dbg !9624
}

declare dso_local zeroext i8 @tree_expr_nonnegative_p(%union.tree_node*) #2

declare dso_local zeroext i8 @double_int_negative_p(i64, i64) #2

declare dso_local %union.tree_node* @double_int_to_tree(%union.tree_node*, i64, i64) #2

declare dso_local { i64, i64 } @double_int_udiv(i64, i64, i64, i64, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal { i64, i64 } @derive_constant_upper_bound_assign(%union.gimple_statement_d* %stmt) #0 !dbg !9625 {
entry:
  %retval = alloca %struct.double_int, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9628, metadata !DIExpression()), !dbg !9629
  call void @llvm.dbg.declare(metadata i32* %code, metadata !9630, metadata !DIExpression()), !dbg !9631
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9632
  %call = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %0), !dbg !9633
  store i32 %call, i32* %code, align 4, !dbg !9631
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !9634, metadata !DIExpression()), !dbg !9635
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9636
  %call1 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %1), !dbg !9637
  store %union.tree_node* %call1, %union.tree_node** %op0, align 8, !dbg !9635
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !9638, metadata !DIExpression()), !dbg !9639
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9640
  %call2 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %2), !dbg !9641
  store %union.tree_node* %call2, %union.tree_node** %op1, align 8, !dbg !9639
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9642
  %call3 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %3), !dbg !9642
  %common = bitcast %union.tree_node* %call3 to %struct.tree_common*, !dbg !9642
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9642
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9642
  %5 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9643
  %6 = load i32, i32* %code, align 4, !dbg !9644
  %7 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !9645
  %call4 = call { i64, i64 } @derive_constant_upper_bound_ops(%union.tree_node* %4, %union.tree_node* %5, i32 %6, %union.tree_node* %7), !dbg !9646
  %8 = bitcast %struct.double_int* %retval to { i64, i64 }*, !dbg !9646
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0, !dbg !9646
  %10 = extractvalue { i64, i64 } %call4, 0, !dbg !9646
  store i64 %10, i64* %9, align 8, !dbg !9646
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1, !dbg !9646
  %12 = extractvalue { i64, i64 } %call4, 1, !dbg !9646
  store i64 %12, i64* %11, align 8, !dbg !9646
  %13 = bitcast %struct.double_int* %retval to { i64, i64 }*, !dbg !9647
  %14 = load { i64, i64 }, { i64, i64 }* %13, align 8, !dbg !9647
  ret { i64, i64 } %14, !dbg !9647
}

declare dso_local %union.tree_node* @initial_condition_in_loop_num(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) #0 !dbg !9648 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !9651, metadata !DIExpression()), !dbg !9652
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !9652
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !9652
  %1 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !9652
  ret %struct.VEC_int_heap* %1, !dbg !9652
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @number_of_loops() #0 !dbg !9653 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9656
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !9656
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !9656
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !9656
  %tobool = icmp ne %struct.loops* %1, null, !dbg !9656
  br i1 %tobool, label %if.end, label %if.then, !dbg !9658

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !9659
  br label %return, !dbg !9659

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9660
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !9660
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !9660
  %3 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !9660
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 1, !dbg !9660
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !9660
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %4, null, !dbg !9660
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !9660

cond.true:                                        ; preds = %if.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9660
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !9660
  %x_current_loops5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 4, !dbg !9660
  %6 = load %struct.loops*, %struct.loops** %x_current_loops5, align 8, !dbg !9660
  %larray6 = getelementptr inbounds %struct.loops, %struct.loops* %6, i32 0, i32 1, !dbg !9660
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray6, align 8, !dbg !9660
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %7, i32 0, i32 0, !dbg !9660
  br label %cond.end, !dbg !9660

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !9660

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9660
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !9660
  store i32 %call, i32* %retval, align 4, !dbg !9661
  br label %return, !dbg !9661

return:                                           ; preds = %cond.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !9662
  ret i32 %8, !dbg !9662
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) #0 !dbg !9663 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !9668, metadata !DIExpression()), !dbg !9669
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !9670, metadata !DIExpression()), !dbg !9669
  store %struct.loop** %ptr, %struct.loop*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %ptr.addr, metadata !9671, metadata !DIExpression()), !dbg !9669
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !9672
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !9672
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !9672

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !9672
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !9672
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !9672
  %3 = load i32, i32* %num, align 8, !dbg !9672
  %cmp = icmp ult i32 %1, %3, !dbg !9672
  br i1 %cmp, label %if.then, label %if.else, !dbg !9669

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !9674
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !9674
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !9674
  %idxprom = zext i32 %5 to i64, !dbg !9674
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !9674
  %6 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !9674
  %7 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !9674
  store %struct.loop* %6, %struct.loop** %7, align 8, !dbg !9674
  store i32 1, i32* %retval, align 4, !dbg !9674
  br label %return, !dbg !9674

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !9676
  store %struct.loop* null, %struct.loop** %8, align 8, !dbg !9676
  store i32 0, i32* %retval, align 4, !dbg !9676
  br label %return, !dbg !9676

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !9669
  ret i32 %9, !dbg !9669
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !9678 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !9683, metadata !DIExpression()), !dbg !9684
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !9685, metadata !DIExpression()), !dbg !9684
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !9686, metadata !DIExpression()), !dbg !9684
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !9684
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !9684
  %1 = load i32, i32* %num, align 4, !dbg !9684
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !9684
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !9684
  %3 = load i32, i32* %alloc, align 4, !dbg !9684
  %cmp = icmp ult i32 %1, %3, !dbg !9684
  %conv = zext i1 %cmp to i32, !dbg !9684
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !9684
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !9684
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !9684
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !9684
  %6 = load i32, i32* %num1, align 4, !dbg !9684
  %inc = add i32 %6, 1, !dbg !9684
  store i32 %inc, i32* %num1, align 4, !dbg !9684
  %idxprom = zext i32 %6 to i64, !dbg !9684
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !9684
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !9684
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !9684
  %8 = load i32*, i32** %slot_, align 8, !dbg !9684
  store i32 %7, i32* %8, align 4, !dbg !9684
  %9 = load i32*, i32** %slot_, align 8, !dbg !9684
  ret i32* %9, !dbg !9684
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !9687 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !9690, metadata !DIExpression()), !dbg !9691
  call void @llvm.dbg.declare(metadata i32* %n, metadata !9692, metadata !DIExpression()), !dbg !9693
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9694
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !9694
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !9694
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !9694
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9694

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9694
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !9694
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !9694
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !9694
  br label %cond.end, !dbg !9694

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9694

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9694
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !9694
  store i32 %call, i32* %n, align 4, !dbg !9693
  %4 = load i32, i32* %n, align 4, !dbg !9695
  %cmp = icmp eq i32 %4, 0, !dbg !9697
  br i1 %cmp, label %if.then, label %if.end, !dbg !9698

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !9699
  br label %return, !dbg !9699

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9700
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !9700
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !9700
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !9700
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !9700

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !9700
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !9700
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !9700
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !9700
  br label %cond.end8, !dbg !9700

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !9700

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !9700
  %9 = load i32, i32* %n, align 4, !dbg !9700
  %sub = sub i32 %9, 1, !dbg !9700
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !9700
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !9701
  br label %return, !dbg !9701

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !9702
  ret %struct.loop* %10, !dbg !9702
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !9703 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !9706, metadata !DIExpression()), !dbg !9707
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !9707
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !9707
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9707

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !9707
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !9707
  %2 = load i32, i32* %num, align 8, !dbg !9707
  br label %cond.end, !dbg !9707

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9707

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !9707
  ret i32 %cond, !dbg !9707
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !9708 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !9711, metadata !DIExpression()), !dbg !9712
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !9713, metadata !DIExpression()), !dbg !9712
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !9712
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !9712
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !9712

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !9712
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !9712
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !9712
  %3 = load i32, i32* %num, align 8, !dbg !9712
  %cmp = icmp ult i32 %1, %3, !dbg !9712
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !9714
  %land.ext = zext i1 %4 to i32, !dbg !9712
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !9712
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !9712
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !9712
  %idxprom = zext i32 %6 to i64, !dbg !9712
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !9712
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !9712
  ret %struct.loop* %7, !dbg !9712
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !9715 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !9720, metadata !DIExpression()), !dbg !9721
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !9722, metadata !DIExpression()), !dbg !9721
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !9723, metadata !DIExpression()), !dbg !9721
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !9724
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !9724
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !9724

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !9724
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !9724
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !9724
  %3 = load i32, i32* %num, align 4, !dbg !9724
  %cmp = icmp ult i32 %1, %3, !dbg !9724
  br i1 %cmp, label %if.then, label %if.else, !dbg !9721

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !9726
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !9726
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !9726
  %idxprom = zext i32 %5 to i64, !dbg !9726
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !9726
  %6 = load i32, i32* %arrayidx, align 4, !dbg !9726
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !9726
  store i32 %6, i32* %7, align 4, !dbg !9726
  store i32 1, i32* %retval, align 4, !dbg !9726
  br label %return, !dbg !9726

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !9728
  store i32 0, i32* %8, align 4, !dbg !9728
  store i32 0, i32* %retval, align 4, !dbg !9728
  br label %return, !dbg !9728

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !9721
  ret i32 %9, !dbg !9721
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_loop(i32 %num) #0 !dbg !9730 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !9733, metadata !DIExpression()), !dbg !9734
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9735
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !9735
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !9735
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !9735
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 1, !dbg !9735
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !9735
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !9735
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9735

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9735
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !9735
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !9735
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !9735
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 1, !dbg !9735
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !9735
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !9735
  br label %cond.end, !dbg !9735

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9735

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9735
  %6 = load i32, i32* %num.addr, align 4, !dbg !9735
  %call = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %6), !dbg !9735
  ret %struct.loop* %call, !dbg !9736
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !9737 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !9741, metadata !DIExpression()), !dbg !9742
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !9743
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !9743
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !9743
  br i1 %tobool, label %if.then, label %if.end, !dbg !9742

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !9743
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !9743
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !9743
  call void @free(i8* %4), !dbg !9743
  br label %if.end, !dbg !9743

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !9742
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !9742
  ret void, !dbg !9742
}

declare dso_local zeroext i8 @double_int_fits_to_tree_p(%union.tree_node*, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @double_int_zero_p(i64 %cst.coerce0, i64 %cst.coerce1) #0 !dbg !9745 {
entry:
  %cst = alloca %struct.double_int, align 8
  %0 = bitcast %struct.double_int* %cst to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %cst.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %cst.coerce1, i64* %2, align 8
  call void @llvm.dbg.declare(metadata %struct.double_int* %cst, metadata !9748, metadata !DIExpression()), !dbg !9749
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %cst, i32 0, i32 0, !dbg !9750
  %3 = load i64, i64* %low, align 8, !dbg !9750
  %cmp = icmp eq i64 %3, 0, !dbg !9751
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !9752

land.rhs:                                         ; preds = %entry
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %cst, i32 0, i32 1, !dbg !9753
  %4 = load i64, i64* %high, align 8, !dbg !9753
  %cmp1 = icmp eq i64 %4, 0, !dbg !9754
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %5 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ], !dbg !9755
  %land.ext = zext i1 %5 to i32, !dbg !9752
  %conv = trunc i32 %land.ext to i8, !dbg !9756
  ret i8 %conv, !dbg !9757
}

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3068, !3069, !3070}
!llvm.ident = !{!3071}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !1654, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "tree-ssa-loop-niter.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2 = !{!3, !132, !327, !336, !340, !346, !351, !356, !374, !381, !388, !401, !440, !446, !450, !584, !1458, !1472, !1595, !1621, !1635, !1642, !1649}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !4, line: 7, baseType: !5, size: 32, elements: !6)
!4 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!5 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!6 = !{!7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131}
!7 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!8 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!9 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!10 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!11 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!12 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!13 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!14 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!15 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!16 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!17 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!18 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!19 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!20 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!21 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!22 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!23 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!24 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!25 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!26 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!27 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!28 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!29 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!30 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!31 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!32 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!33 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!34 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!35 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!36 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!37 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!38 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!39 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!40 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!41 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!42 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!43 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!44 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!45 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!46 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!47 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!48 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!49 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!50 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!51 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!52 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!53 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!54 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!55 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!56 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!57 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!58 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!59 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!60 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!61 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!62 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!63 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!64 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!65 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!66 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!67 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!68 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!69 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!70 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!71 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!72 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!73 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!74 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!75 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!76 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!77 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!78 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!79 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!80 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!81 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!82 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!83 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!84 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!85 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!86 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!87 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!88 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!89 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!90 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!91 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!92 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!93 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!94 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!95 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!131 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!132 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !133, line: 39, baseType: !5, size: 32, elements: !134)
!133 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!134 = !{!135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326}
!135 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!136 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!137 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!138 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!139 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!140 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!141 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!142 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!143 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!144 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!145 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!146 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!147 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!148 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!149 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!150 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!151 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!152 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!153 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!154 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!155 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!156 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!157 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!158 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!159 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!160 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!161 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!162 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!163 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!164 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!165 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!166 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!167 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!168 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!169 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!170 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!171 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!172 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!173 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!174 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!175 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!176 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!177 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!178 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!179 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!180 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!181 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!182 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!183 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!184 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!185 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!186 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!187 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!188 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!189 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!190 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!191 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!192 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!193 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!194 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!195 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!196 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!197 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!198 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!199 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!200 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!201 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!202 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!203 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!204 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!205 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!206 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!207 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!208 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!209 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!210 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!211 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!212 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!213 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!214 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!215 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!216 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!217 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!218 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!219 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!220 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!221 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!222 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!223 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!226 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!227 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!232 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!233 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!234 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!235 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!236 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!237 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!238 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!239 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!240 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!241 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!242 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!243 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!244 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!245 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!246 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!247 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!248 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!249 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!250 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!251 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!252 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!253 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!254 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!255 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!256 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!257 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!258 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!259 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!260 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!261 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!262 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!263 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!264 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!265 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!266 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!267 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!268 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!269 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!270 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!271 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!272 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!273 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!274 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!275 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!276 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!277 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!278 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!279 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!280 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!281 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!282 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!283 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!284 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!285 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!286 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!287 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!288 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!289 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!299 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!300 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!302 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!303 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!304 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!305 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!306 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!320 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!321 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!322 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!323 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!324 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!325 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!326 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!327 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !328, line: 31, baseType: !5, size: 32, elements: !329)
!328 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!329 = !{!330, !331, !332, !333, !334, !335}
!330 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!331 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!332 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!333 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!334 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!335 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!336 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !328, line: 91, baseType: !5, size: 32, elements: !337)
!337 = !{!338, !339}
!338 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!339 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!340 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !341, line: 363, baseType: !5, size: 32, elements: !342)
!341 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!342 = !{!343, !344, !345}
!343 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!344 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!345 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!346 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !341, line: 355, baseType: !5, size: 32, elements: !347)
!347 = !{!348, !349, !350}
!348 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!349 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!350 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!351 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !352, line: 474, baseType: !5, size: 32, elements: !353)
!352 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!353 = !{!354, !355}
!354 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!355 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!356 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !133, line: 280, baseType: !5, size: 32, elements: !357)
!357 = !{!358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373}
!358 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!370 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!371 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!372 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!374 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !133, line: 1817, baseType: !5, size: 32, elements: !375)
!375 = !{!376, !377, !378, !379, !380}
!376 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!377 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!378 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!379 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!381 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !133, line: 1805, baseType: !5, size: 32, elements: !382)
!382 = !{!383, !384, !385, !386, !387}
!383 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!384 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!385 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!386 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!387 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!388 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !133, line: 58, baseType: !5, size: 32, elements: !389)
!389 = !{!390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400}
!390 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!391 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!392 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!393 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!394 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!395 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!396 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!397 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!398 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!399 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!400 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!401 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !402, line: 51, baseType: !5, size: 32, elements: !403)
!402 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!403 = !{!404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439}
!404 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!405 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!406 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!407 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!408 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!409 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!410 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!411 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!412 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!413 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!414 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!415 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!416 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!417 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!418 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!419 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!420 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!421 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!422 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!423 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!424 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!425 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!426 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!427 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!428 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!429 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!430 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!431 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!432 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!433 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!434 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!435 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!436 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!437 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!438 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!439 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!440 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !402, line: 80, baseType: !5, size: 32, elements: !441)
!441 = !{!442, !443, !444, !445}
!442 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!443 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!444 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!445 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!446 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !341, line: 912, baseType: !5, size: 32, elements: !447)
!447 = !{!448, !449}
!448 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!449 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!450 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !133, line: 3410, baseType: !5, size: 32, elements: !451)
!451 = !{!452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583}
!452 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!453 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!454 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!455 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!456 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!457 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!458 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!459 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!460 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!461 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!462 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!463 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!464 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!465 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!466 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!467 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!468 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!469 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!470 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!471 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!472 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!473 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!474 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!475 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!476 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!477 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!478 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!479 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!480 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!481 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!482 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!483 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!484 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!485 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!486 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!487 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!488 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!489 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!490 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!491 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!492 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!493 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!494 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!495 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!496 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!497 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!498 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!499 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!500 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!501 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!502 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!503 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!504 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!505 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!506 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!507 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!508 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!509 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!510 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!511 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!512 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!513 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!514 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!515 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!516 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!517 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!518 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!519 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!520 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!521 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!522 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!523 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!524 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!525 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!526 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!527 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!528 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!529 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!530 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!531 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!532 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!533 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!534 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!535 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!536 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!537 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!538 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!539 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!540 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!541 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!542 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!543 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!544 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!545 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!546 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!547 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!548 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!549 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!550 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!551 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!552 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!553 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!554 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!555 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!556 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!557 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!558 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!559 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!560 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!561 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!562 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!563 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!564 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!565 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!566 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!567 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!568 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!569 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!570 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!571 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!572 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!573 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!574 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!575 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!576 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!577 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!578 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!579 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!580 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!581 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!582 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!583 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!584 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_code", file: !585, line: 723, baseType: !5, size: 32, elements: !586)
!585 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!586 = !{!587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457}
!587 = !DIEnumerator(name: "OPT__help", value: 0, isUnsigned: true)
!588 = !DIEnumerator(name: "OPT__help_", value: 1, isUnsigned: true)
!589 = !DIEnumerator(name: "OPT__output_pch_", value: 2, isUnsigned: true)
!590 = !DIEnumerator(name: "OPT__param", value: 3, isUnsigned: true)
!591 = !DIEnumerator(name: "OPT__target_help", value: 4, isUnsigned: true)
!592 = !DIEnumerator(name: "OPT__version", value: 5, isUnsigned: true)
!593 = !DIEnumerator(name: "OPT_A", value: 6, isUnsigned: true)
!594 = !DIEnumerator(name: "OPT_C", value: 7, isUnsigned: true)
!595 = !DIEnumerator(name: "OPT_CC", value: 8, isUnsigned: true)
!596 = !DIEnumerator(name: "OPT_D", value: 9, isUnsigned: true)
!597 = !DIEnumerator(name: "OPT_E", value: 10, isUnsigned: true)
!598 = !DIEnumerator(name: "OPT_F", value: 11, isUnsigned: true)
!599 = !DIEnumerator(name: "OPT_G", value: 12, isUnsigned: true)
!600 = !DIEnumerator(name: "OPT_H", value: 13, isUnsigned: true)
!601 = !DIEnumerator(name: "OPT_I", value: 14, isUnsigned: true)
!602 = !DIEnumerator(name: "OPT_J", value: 15, isUnsigned: true)
!603 = !DIEnumerator(name: "OPT_M", value: 16, isUnsigned: true)
!604 = !DIEnumerator(name: "OPT_MD", value: 17, isUnsigned: true)
!605 = !DIEnumerator(name: "OPT_MD_", value: 18, isUnsigned: true)
!606 = !DIEnumerator(name: "OPT_MF", value: 19, isUnsigned: true)
!607 = !DIEnumerator(name: "OPT_MG", value: 20, isUnsigned: true)
!608 = !DIEnumerator(name: "OPT_MM", value: 21, isUnsigned: true)
!609 = !DIEnumerator(name: "OPT_MMD", value: 22, isUnsigned: true)
!610 = !DIEnumerator(name: "OPT_MMD_", value: 23, isUnsigned: true)
!611 = !DIEnumerator(name: "OPT_MP", value: 24, isUnsigned: true)
!612 = !DIEnumerator(name: "OPT_MQ", value: 25, isUnsigned: true)
!613 = !DIEnumerator(name: "OPT_MT", value: 26, isUnsigned: true)
!614 = !DIEnumerator(name: "OPT_O", value: 27, isUnsigned: true)
!615 = !DIEnumerator(name: "OPT_Os", value: 28, isUnsigned: true)
!616 = !DIEnumerator(name: "OPT_P", value: 29, isUnsigned: true)
!617 = !DIEnumerator(name: "OPT_U", value: 30, isUnsigned: true)
!618 = !DIEnumerator(name: "OPT_W", value: 31, isUnsigned: true)
!619 = !DIEnumerator(name: "OPT_Wabi", value: 32, isUnsigned: true)
!620 = !DIEnumerator(name: "OPT_Waddress", value: 33, isUnsigned: true)
!621 = !DIEnumerator(name: "OPT_Waggregate_return", value: 34, isUnsigned: true)
!622 = !DIEnumerator(name: "OPT_Waliasing", value: 35, isUnsigned: true)
!623 = !DIEnumerator(name: "OPT_Walign_commons", value: 36, isUnsigned: true)
!624 = !DIEnumerator(name: "OPT_Wall", value: 37, isUnsigned: true)
!625 = !DIEnumerator(name: "OPT_Wall_deprecation", value: 38, isUnsigned: true)
!626 = !DIEnumerator(name: "OPT_Wall_javadoc", value: 39, isUnsigned: true)
!627 = !DIEnumerator(name: "OPT_Wampersand", value: 40, isUnsigned: true)
!628 = !DIEnumerator(name: "OPT_Warray_bounds", value: 41, isUnsigned: true)
!629 = !DIEnumerator(name: "OPT_Warray_temporaries", value: 42, isUnsigned: true)
!630 = !DIEnumerator(name: "OPT_Wassert_identifier", value: 43, isUnsigned: true)
!631 = !DIEnumerator(name: "OPT_Wassign_intercept", value: 44, isUnsigned: true)
!632 = !DIEnumerator(name: "OPT_Wattributes", value: 45, isUnsigned: true)
!633 = !DIEnumerator(name: "OPT_Wbad_function_cast", value: 46, isUnsigned: true)
!634 = !DIEnumerator(name: "OPT_Wboxing", value: 47, isUnsigned: true)
!635 = !DIEnumerator(name: "OPT_Wbuiltin_macro_redefined", value: 48, isUnsigned: true)
!636 = !DIEnumerator(name: "OPT_Wc___compat", value: 49, isUnsigned: true)
!637 = !DIEnumerator(name: "OPT_Wc__0x_compat", value: 50, isUnsigned: true)
!638 = !DIEnumerator(name: "OPT_Wcast_align", value: 51, isUnsigned: true)
!639 = !DIEnumerator(name: "OPT_Wcast_qual", value: 52, isUnsigned: true)
!640 = !DIEnumerator(name: "OPT_Wchar_concat", value: 53, isUnsigned: true)
!641 = !DIEnumerator(name: "OPT_Wchar_subscripts", value: 54, isUnsigned: true)
!642 = !DIEnumerator(name: "OPT_Wcharacter_truncation", value: 55, isUnsigned: true)
!643 = !DIEnumerator(name: "OPT_Wclobbered", value: 56, isUnsigned: true)
!644 = !DIEnumerator(name: "OPT_Wcomment", value: 57, isUnsigned: true)
!645 = !DIEnumerator(name: "OPT_Wcomments", value: 58, isUnsigned: true)
!646 = !DIEnumerator(name: "OPT_Wcondition_assign", value: 59, isUnsigned: true)
!647 = !DIEnumerator(name: "OPT_Wconstructor_name", value: 60, isUnsigned: true)
!648 = !DIEnumerator(name: "OPT_Wconversion", value: 61, isUnsigned: true)
!649 = !DIEnumerator(name: "OPT_Wconversion_null", value: 62, isUnsigned: true)
!650 = !DIEnumerator(name: "OPT_Wcoverage_mismatch", value: 63, isUnsigned: true)
!651 = !DIEnumerator(name: "OPT_Wctor_dtor_privacy", value: 64, isUnsigned: true)
!652 = !DIEnumerator(name: "OPT_Wdeclaration_after_statement", value: 65, isUnsigned: true)
!653 = !DIEnumerator(name: "OPT_Wdep_ann", value: 66, isUnsigned: true)
!654 = !DIEnumerator(name: "OPT_Wdeprecated", value: 67, isUnsigned: true)
!655 = !DIEnumerator(name: "OPT_Wdeprecated_declarations", value: 68, isUnsigned: true)
!656 = !DIEnumerator(name: "OPT_Wdisabled_optimization", value: 69, isUnsigned: true)
!657 = !DIEnumerator(name: "OPT_Wdiscouraged", value: 70, isUnsigned: true)
!658 = !DIEnumerator(name: "OPT_Wdiv_by_zero", value: 71, isUnsigned: true)
!659 = !DIEnumerator(name: "OPT_Weffc__", value: 72, isUnsigned: true)
!660 = !DIEnumerator(name: "OPT_Wempty_block", value: 73, isUnsigned: true)
!661 = !DIEnumerator(name: "OPT_Wempty_body", value: 74, isUnsigned: true)
!662 = !DIEnumerator(name: "OPT_Wendif_labels", value: 75, isUnsigned: true)
!663 = !DIEnumerator(name: "OPT_Wenum_compare", value: 76, isUnsigned: true)
!664 = !DIEnumerator(name: "OPT_Wenum_identifier", value: 77, isUnsigned: true)
!665 = !DIEnumerator(name: "OPT_Wenum_switch", value: 78, isUnsigned: true)
!666 = !DIEnumerator(name: "OPT_Werror", value: 79, isUnsigned: true)
!667 = !DIEnumerator(name: "OPT_Werror_implicit_function_declaration", value: 80, isUnsigned: true)
!668 = !DIEnumerator(name: "OPT_Werror_", value: 81, isUnsigned: true)
!669 = !DIEnumerator(name: "OPT_Wextra", value: 82, isUnsigned: true)
!670 = !DIEnumerator(name: "OPT_Wextraneous_semicolon", value: 83, isUnsigned: true)
!671 = !DIEnumerator(name: "OPT_Wfallthrough", value: 84, isUnsigned: true)
!672 = !DIEnumerator(name: "OPT_Wfatal_errors", value: 85, isUnsigned: true)
!673 = !DIEnumerator(name: "OPT_Wfield_hiding", value: 86, isUnsigned: true)
!674 = !DIEnumerator(name: "OPT_Wfinal_bound", value: 87, isUnsigned: true)
!675 = !DIEnumerator(name: "OPT_Wfinally", value: 88, isUnsigned: true)
!676 = !DIEnumerator(name: "OPT_Wfloat_equal", value: 89, isUnsigned: true)
!677 = !DIEnumerator(name: "OPT_Wforbidden", value: 90, isUnsigned: true)
!678 = !DIEnumerator(name: "OPT_Wformat", value: 91, isUnsigned: true)
!679 = !DIEnumerator(name: "OPT_Wformat_contains_nul", value: 92, isUnsigned: true)
!680 = !DIEnumerator(name: "OPT_Wformat_extra_args", value: 93, isUnsigned: true)
!681 = !DIEnumerator(name: "OPT_Wformat_nonliteral", value: 94, isUnsigned: true)
!682 = !DIEnumerator(name: "OPT_Wformat_security", value: 95, isUnsigned: true)
!683 = !DIEnumerator(name: "OPT_Wformat_y2k", value: 96, isUnsigned: true)
!684 = !DIEnumerator(name: "OPT_Wformat_zero_length", value: 97, isUnsigned: true)
!685 = !DIEnumerator(name: "OPT_Wformat_", value: 98, isUnsigned: true)
!686 = !DIEnumerator(name: "OPT_Wframe_larger_than_", value: 99, isUnsigned: true)
!687 = !DIEnumerator(name: "OPT_Whiding", value: 100, isUnsigned: true)
!688 = !DIEnumerator(name: "OPT_Wignored_qualifiers", value: 101, isUnsigned: true)
!689 = !DIEnumerator(name: "OPT_Wimplicit", value: 102, isUnsigned: true)
!690 = !DIEnumerator(name: "OPT_Wimplicit_function_declaration", value: 103, isUnsigned: true)
!691 = !DIEnumerator(name: "OPT_Wimplicit_int", value: 104, isUnsigned: true)
!692 = !DIEnumerator(name: "OPT_Wimplicit_interface", value: 105, isUnsigned: true)
!693 = !DIEnumerator(name: "OPT_Wimplicit_procedure", value: 106, isUnsigned: true)
!694 = !DIEnumerator(name: "OPT_Wimport", value: 107, isUnsigned: true)
!695 = !DIEnumerator(name: "OPT_Windirect_static", value: 108, isUnsigned: true)
!696 = !DIEnumerator(name: "OPT_Winit_self", value: 109, isUnsigned: true)
!697 = !DIEnumerator(name: "OPT_Winline", value: 110, isUnsigned: true)
!698 = !DIEnumerator(name: "OPT_Wint_to_pointer_cast", value: 111, isUnsigned: true)
!699 = !DIEnumerator(name: "OPT_Wintf_annotation", value: 112, isUnsigned: true)
!700 = !DIEnumerator(name: "OPT_Wintf_non_inherited", value: 113, isUnsigned: true)
!701 = !DIEnumerator(name: "OPT_Wintrinsic_shadow", value: 114, isUnsigned: true)
!702 = !DIEnumerator(name: "OPT_Wintrinsics_std", value: 115, isUnsigned: true)
!703 = !DIEnumerator(name: "OPT_Winvalid_offsetof", value: 116, isUnsigned: true)
!704 = !DIEnumerator(name: "OPT_Winvalid_pch", value: 117, isUnsigned: true)
!705 = !DIEnumerator(name: "OPT_Wjavadoc", value: 118, isUnsigned: true)
!706 = !DIEnumerator(name: "OPT_Wjump_misses_init", value: 119, isUnsigned: true)
!707 = !DIEnumerator(name: "OPT_Wlarger_than_", value: 120, isUnsigned: true)
!708 = !DIEnumerator(name: "OPT_Wlarger_than_eq", value: 121, isUnsigned: true)
!709 = !DIEnumerator(name: "OPT_Wline_truncation", value: 122, isUnsigned: true)
!710 = !DIEnumerator(name: "OPT_Wlocal_hiding", value: 123, isUnsigned: true)
!711 = !DIEnumerator(name: "OPT_Wlogical_op", value: 124, isUnsigned: true)
!712 = !DIEnumerator(name: "OPT_Wlong_long", value: 125, isUnsigned: true)
!713 = !DIEnumerator(name: "OPT_Wmain", value: 126, isUnsigned: true)
!714 = !DIEnumerator(name: "OPT_Wmasked_catch_block", value: 127, isUnsigned: true)
!715 = !DIEnumerator(name: "OPT_Wmissing_braces", value: 128, isUnsigned: true)
!716 = !DIEnumerator(name: "OPT_Wmissing_declarations", value: 129, isUnsigned: true)
!717 = !DIEnumerator(name: "OPT_Wmissing_field_initializers", value: 130, isUnsigned: true)
!718 = !DIEnumerator(name: "OPT_Wmissing_format_attribute", value: 131, isUnsigned: true)
!719 = !DIEnumerator(name: "OPT_Wmissing_include_dirs", value: 132, isUnsigned: true)
!720 = !DIEnumerator(name: "OPT_Wmissing_noreturn", value: 133, isUnsigned: true)
!721 = !DIEnumerator(name: "OPT_Wmissing_parameter_type", value: 134, isUnsigned: true)
!722 = !DIEnumerator(name: "OPT_Wmissing_prototypes", value: 135, isUnsigned: true)
!723 = !DIEnumerator(name: "OPT_Wmudflap", value: 136, isUnsigned: true)
!724 = !DIEnumerator(name: "OPT_Wmultichar", value: 137, isUnsigned: true)
!725 = !DIEnumerator(name: "OPT_Wnested_externs", value: 138, isUnsigned: true)
!726 = !DIEnumerator(name: "OPT_Wnls", value: 139, isUnsigned: true)
!727 = !DIEnumerator(name: "OPT_Wno_effect_assign", value: 140, isUnsigned: true)
!728 = !DIEnumerator(name: "OPT_Wnon_template_friend", value: 141, isUnsigned: true)
!729 = !DIEnumerator(name: "OPT_Wnon_virtual_dtor", value: 142, isUnsigned: true)
!730 = !DIEnumerator(name: "OPT_Wnonnull", value: 143, isUnsigned: true)
!731 = !DIEnumerator(name: "OPT_Wnormalized_", value: 144, isUnsigned: true)
!732 = !DIEnumerator(name: "OPT_Wnull", value: 145, isUnsigned: true)
!733 = !DIEnumerator(name: "OPT_Wold_style_cast", value: 146, isUnsigned: true)
!734 = !DIEnumerator(name: "OPT_Wold_style_declaration", value: 147, isUnsigned: true)
!735 = !DIEnumerator(name: "OPT_Wold_style_definition", value: 148, isUnsigned: true)
!736 = !DIEnumerator(name: "OPT_Wout_of_date", value: 149, isUnsigned: true)
!737 = !DIEnumerator(name: "OPT_Wover_ann", value: 150, isUnsigned: true)
!738 = !DIEnumerator(name: "OPT_Woverflow", value: 151, isUnsigned: true)
!739 = !DIEnumerator(name: "OPT_Woverlength_strings", value: 152, isUnsigned: true)
!740 = !DIEnumerator(name: "OPT_Woverloaded_virtual", value: 153, isUnsigned: true)
!741 = !DIEnumerator(name: "OPT_Woverride_init", value: 154, isUnsigned: true)
!742 = !DIEnumerator(name: "OPT_Wpacked", value: 155, isUnsigned: true)
!743 = !DIEnumerator(name: "OPT_Wpacked_bitfield_compat", value: 156, isUnsigned: true)
!744 = !DIEnumerator(name: "OPT_Wpadded", value: 157, isUnsigned: true)
!745 = !DIEnumerator(name: "OPT_Wparam_assign", value: 158, isUnsigned: true)
!746 = !DIEnumerator(name: "OPT_Wparentheses", value: 159, isUnsigned: true)
!747 = !DIEnumerator(name: "OPT_Wpkg_default_method", value: 160, isUnsigned: true)
!748 = !DIEnumerator(name: "OPT_Wpmf_conversions", value: 161, isUnsigned: true)
!749 = !DIEnumerator(name: "OPT_Wpointer_arith", value: 162, isUnsigned: true)
!750 = !DIEnumerator(name: "OPT_Wpointer_sign", value: 163, isUnsigned: true)
!751 = !DIEnumerator(name: "OPT_Wpointer_to_int_cast", value: 164, isUnsigned: true)
!752 = !DIEnumerator(name: "OPT_Wpragmas", value: 165, isUnsigned: true)
!753 = !DIEnumerator(name: "OPT_Wprotocol", value: 166, isUnsigned: true)
!754 = !DIEnumerator(name: "OPT_Wpsabi", value: 167, isUnsigned: true)
!755 = !DIEnumerator(name: "OPT_Wraw", value: 168, isUnsigned: true)
!756 = !DIEnumerator(name: "OPT_Wredundant_decls", value: 169, isUnsigned: true)
!757 = !DIEnumerator(name: "OPT_Wredundant_modifiers", value: 170, isUnsigned: true)
!758 = !DIEnumerator(name: "OPT_Wreorder", value: 171, isUnsigned: true)
!759 = !DIEnumerator(name: "OPT_Wreturn_type", value: 172, isUnsigned: true)
!760 = !DIEnumerator(name: "OPT_Wselector", value: 173, isUnsigned: true)
!761 = !DIEnumerator(name: "OPT_Wsequence_point", value: 174, isUnsigned: true)
!762 = !DIEnumerator(name: "OPT_Wserial", value: 175, isUnsigned: true)
!763 = !DIEnumerator(name: "OPT_Wshadow", value: 176, isUnsigned: true)
!764 = !DIEnumerator(name: "OPT_Wsign_compare", value: 177, isUnsigned: true)
!765 = !DIEnumerator(name: "OPT_Wsign_conversion", value: 178, isUnsigned: true)
!766 = !DIEnumerator(name: "OPT_Wsign_promo", value: 179, isUnsigned: true)
!767 = !DIEnumerator(name: "OPT_Wspecial_param_hiding", value: 180, isUnsigned: true)
!768 = !DIEnumerator(name: "OPT_Wstack_protector", value: 181, isUnsigned: true)
!769 = !DIEnumerator(name: "OPT_Wstatic_access", value: 182, isUnsigned: true)
!770 = !DIEnumerator(name: "OPT_Wstatic_receiver", value: 183, isUnsigned: true)
!771 = !DIEnumerator(name: "OPT_Wstrict_aliasing", value: 184, isUnsigned: true)
!772 = !DIEnumerator(name: "OPT_Wstrict_aliasing_", value: 185, isUnsigned: true)
!773 = !DIEnumerator(name: "OPT_Wstrict_null_sentinel", value: 186, isUnsigned: true)
!774 = !DIEnumerator(name: "OPT_Wstrict_overflow", value: 187, isUnsigned: true)
!775 = !DIEnumerator(name: "OPT_Wstrict_overflow_", value: 188, isUnsigned: true)
!776 = !DIEnumerator(name: "OPT_Wstrict_prototypes", value: 189, isUnsigned: true)
!777 = !DIEnumerator(name: "OPT_Wstrict_selector_match", value: 190, isUnsigned: true)
!778 = !DIEnumerator(name: "OPT_Wsuppress", value: 191, isUnsigned: true)
!779 = !DIEnumerator(name: "OPT_Wsurprising", value: 192, isUnsigned: true)
!780 = !DIEnumerator(name: "OPT_Wswitch", value: 193, isUnsigned: true)
!781 = !DIEnumerator(name: "OPT_Wswitch_default", value: 194, isUnsigned: true)
!782 = !DIEnumerator(name: "OPT_Wswitch_enum", value: 195, isUnsigned: true)
!783 = !DIEnumerator(name: "OPT_Wsync_nand", value: 196, isUnsigned: true)
!784 = !DIEnumerator(name: "OPT_Wsynth", value: 197, isUnsigned: true)
!785 = !DIEnumerator(name: "OPT_Wsynthetic_access", value: 198, isUnsigned: true)
!786 = !DIEnumerator(name: "OPT_Wsystem_headers", value: 199, isUnsigned: true)
!787 = !DIEnumerator(name: "OPT_Wtabs", value: 200, isUnsigned: true)
!788 = !DIEnumerator(name: "OPT_Wtasks", value: 201, isUnsigned: true)
!789 = !DIEnumerator(name: "OPT_Wtraditional", value: 202, isUnsigned: true)
!790 = !DIEnumerator(name: "OPT_Wtraditional_conversion", value: 203, isUnsigned: true)
!791 = !DIEnumerator(name: "OPT_Wtrigraphs", value: 204, isUnsigned: true)
!792 = !DIEnumerator(name: "OPT_Wtype_hiding", value: 205, isUnsigned: true)
!793 = !DIEnumerator(name: "OPT_Wtype_limits", value: 206, isUnsigned: true)
!794 = !DIEnumerator(name: "OPT_Wuncheck", value: 207, isUnsigned: true)
!795 = !DIEnumerator(name: "OPT_Wundeclared_selector", value: 208, isUnsigned: true)
!796 = !DIEnumerator(name: "OPT_Wundef", value: 209, isUnsigned: true)
!797 = !DIEnumerator(name: "OPT_Wunderflow", value: 210, isUnsigned: true)
!798 = !DIEnumerator(name: "OPT_Wuninitialized", value: 211, isUnsigned: true)
!799 = !DIEnumerator(name: "OPT_Wunknown_pragmas", value: 212, isUnsigned: true)
!800 = !DIEnumerator(name: "OPT_Wunnecessary_else", value: 213, isUnsigned: true)
!801 = !DIEnumerator(name: "OPT_Wunqualified_field", value: 214, isUnsigned: true)
!802 = !DIEnumerator(name: "OPT_Wunreachable_code", value: 215, isUnsigned: true)
!803 = !DIEnumerator(name: "OPT_Wunsafe_loop_optimizations", value: 216, isUnsigned: true)
!804 = !DIEnumerator(name: "OPT_Wunsuffixed_float_constants", value: 217, isUnsigned: true)
!805 = !DIEnumerator(name: "OPT_Wunused", value: 218, isUnsigned: true)
!806 = !DIEnumerator(name: "OPT_Wunused_argument", value: 219, isUnsigned: true)
!807 = !DIEnumerator(name: "OPT_Wunused_function", value: 220, isUnsigned: true)
!808 = !DIEnumerator(name: "OPT_Wunused_import", value: 221, isUnsigned: true)
!809 = !DIEnumerator(name: "OPT_Wunused_label", value: 222, isUnsigned: true)
!810 = !DIEnumerator(name: "OPT_Wunused_local", value: 223, isUnsigned: true)
!811 = !DIEnumerator(name: "OPT_Wunused_macros", value: 224, isUnsigned: true)
!812 = !DIEnumerator(name: "OPT_Wunused_parameter", value: 225, isUnsigned: true)
!813 = !DIEnumerator(name: "OPT_Wunused_private", value: 226, isUnsigned: true)
!814 = !DIEnumerator(name: "OPT_Wunused_result", value: 227, isUnsigned: true)
!815 = !DIEnumerator(name: "OPT_Wunused_thrown", value: 228, isUnsigned: true)
!816 = !DIEnumerator(name: "OPT_Wunused_value", value: 229, isUnsigned: true)
!817 = !DIEnumerator(name: "OPT_Wunused_variable", value: 230, isUnsigned: true)
!818 = !DIEnumerator(name: "OPT_Wuseless_type_check", value: 231, isUnsigned: true)
!819 = !DIEnumerator(name: "OPT_Wvarargs_cast", value: 232, isUnsigned: true)
!820 = !DIEnumerator(name: "OPT_Wvariadic_macros", value: 233, isUnsigned: true)
!821 = !DIEnumerator(name: "OPT_Wvla", value: 234, isUnsigned: true)
!822 = !DIEnumerator(name: "OPT_Wvolatile_register_var", value: 235, isUnsigned: true)
!823 = !DIEnumerator(name: "OPT_Wwarning_token", value: 236, isUnsigned: true)
!824 = !DIEnumerator(name: "OPT_Wwrite_strings", value: 237, isUnsigned: true)
!825 = !DIEnumerator(name: "OPT_ansi", value: 238, isUnsigned: true)
!826 = !DIEnumerator(name: "OPT_aux_info", value: 239, isUnsigned: true)
!827 = !DIEnumerator(name: "OPT_aux_info_", value: 240, isUnsigned: true)
!828 = !DIEnumerator(name: "OPT_auxbase", value: 241, isUnsigned: true)
!829 = !DIEnumerator(name: "OPT_auxbase_strip", value: 242, isUnsigned: true)
!830 = !DIEnumerator(name: "OPT_cpp", value: 243, isUnsigned: true)
!831 = !DIEnumerator(name: "OPT_d", value: 244, isUnsigned: true)
!832 = !DIEnumerator(name: "OPT_dumpbase", value: 245, isUnsigned: true)
!833 = !DIEnumerator(name: "OPT_dumpdir", value: 246, isUnsigned: true)
!834 = !DIEnumerator(name: "OPT_fCLASSPATH_", value: 247, isUnsigned: true)
!835 = !DIEnumerator(name: "OPT_fPIC", value: 248, isUnsigned: true)
!836 = !DIEnumerator(name: "OPT_fPIE", value: 249, isUnsigned: true)
!837 = !DIEnumerator(name: "OPT_fRTS_", value: 250, isUnsigned: true)
!838 = !DIEnumerator(name: "OPT_fabi_version_", value: 251, isUnsigned: true)
!839 = !DIEnumerator(name: "OPT_faccess_control", value: 252, isUnsigned: true)
!840 = !DIEnumerator(name: "OPT_falign_commons", value: 253, isUnsigned: true)
!841 = !DIEnumerator(name: "OPT_falign_functions", value: 254, isUnsigned: true)
!842 = !DIEnumerator(name: "OPT_falign_functions_", value: 255, isUnsigned: true)
!843 = !DIEnumerator(name: "OPT_falign_jumps", value: 256, isUnsigned: true)
!844 = !DIEnumerator(name: "OPT_falign_jumps_", value: 257, isUnsigned: true)
!845 = !DIEnumerator(name: "OPT_falign_labels", value: 258, isUnsigned: true)
!846 = !DIEnumerator(name: "OPT_falign_labels_", value: 259, isUnsigned: true)
!847 = !DIEnumerator(name: "OPT_falign_loops", value: 260, isUnsigned: true)
!848 = !DIEnumerator(name: "OPT_falign_loops_", value: 261, isUnsigned: true)
!849 = !DIEnumerator(name: "OPT_fall_intrinsics", value: 262, isUnsigned: true)
!850 = !DIEnumerator(name: "OPT_fall_virtual", value: 263, isUnsigned: true)
!851 = !DIEnumerator(name: "OPT_fallow_leading_underscore", value: 264, isUnsigned: true)
!852 = !DIEnumerator(name: "OPT_falt_external_templates", value: 265, isUnsigned: true)
!853 = !DIEnumerator(name: "OPT_fargument_alias", value: 266, isUnsigned: true)
!854 = !DIEnumerator(name: "OPT_fargument_noalias", value: 267, isUnsigned: true)
!855 = !DIEnumerator(name: "OPT_fargument_noalias_anything", value: 268, isUnsigned: true)
!856 = !DIEnumerator(name: "OPT_fargument_noalias_global", value: 269, isUnsigned: true)
!857 = !DIEnumerator(name: "OPT_fasm", value: 270, isUnsigned: true)
!858 = !DIEnumerator(name: "OPT_fassert", value: 271, isUnsigned: true)
!859 = !DIEnumerator(name: "OPT_fassociative_math", value: 272, isUnsigned: true)
!860 = !DIEnumerator(name: "OPT_fassume_compiled", value: 273, isUnsigned: true)
!861 = !DIEnumerator(name: "OPT_fassume_compiled_", value: 274, isUnsigned: true)
!862 = !DIEnumerator(name: "OPT_fasynchronous_unwind_tables", value: 275, isUnsigned: true)
!863 = !DIEnumerator(name: "OPT_fauto_inc_dec", value: 276, isUnsigned: true)
!864 = !DIEnumerator(name: "OPT_fautomatic", value: 277, isUnsigned: true)
!865 = !DIEnumerator(name: "OPT_faux_classpath", value: 278, isUnsigned: true)
!866 = !DIEnumerator(name: "OPT_fbackslash", value: 279, isUnsigned: true)
!867 = !DIEnumerator(name: "OPT_fbacktrace", value: 280, isUnsigned: true)
!868 = !DIEnumerator(name: "OPT_fblas_matmul_limit_", value: 281, isUnsigned: true)
!869 = !DIEnumerator(name: "OPT_fbootclasspath_", value: 282, isUnsigned: true)
!870 = !DIEnumerator(name: "OPT_fbootstrap_classes", value: 283, isUnsigned: true)
!871 = !DIEnumerator(name: "OPT_fbounds_check", value: 284, isUnsigned: true)
!872 = !DIEnumerator(name: "OPT_fbranch_count_reg", value: 285, isUnsigned: true)
!873 = !DIEnumerator(name: "OPT_fbranch_probabilities", value: 286, isUnsigned: true)
!874 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize", value: 287, isUnsigned: true)
!875 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize2", value: 288, isUnsigned: true)
!876 = !DIEnumerator(name: "OPT_fbtr_bb_exclusive", value: 289, isUnsigned: true)
!877 = !DIEnumerator(name: "OPT_fbuiltin", value: 290, isUnsigned: true)
!878 = !DIEnumerator(name: "OPT_fbuiltin_", value: 291, isUnsigned: true)
!879 = !DIEnumerator(name: "OPT_fcall_saved_", value: 292, isUnsigned: true)
!880 = !DIEnumerator(name: "OPT_fcall_used_", value: 293, isUnsigned: true)
!881 = !DIEnumerator(name: "OPT_fcaller_saves", value: 294, isUnsigned: true)
!882 = !DIEnumerator(name: "OPT_fcheck_array_temporaries", value: 295, isUnsigned: true)
!883 = !DIEnumerator(name: "OPT_fcheck_data_deps", value: 296, isUnsigned: true)
!884 = !DIEnumerator(name: "OPT_fcheck_new", value: 297, isUnsigned: true)
!885 = !DIEnumerator(name: "OPT_fcheck_references", value: 298, isUnsigned: true)
!886 = !DIEnumerator(name: "OPT_fcheck_", value: 299, isUnsigned: true)
!887 = !DIEnumerator(name: "OPT_fclasspath_", value: 300, isUnsigned: true)
!888 = !DIEnumerator(name: "OPT_fcommon", value: 301, isUnsigned: true)
!889 = !DIEnumerator(name: "OPT_fcompare_debug_second", value: 302, isUnsigned: true)
!890 = !DIEnumerator(name: "OPT_fcompare_debug_", value: 303, isUnsigned: true)
!891 = !DIEnumerator(name: "OPT_fcompile_resource_", value: 304, isUnsigned: true)
!892 = !DIEnumerator(name: "OPT_fcond_mismatch", value: 305, isUnsigned: true)
!893 = !DIEnumerator(name: "OPT_fconserve_space", value: 306, isUnsigned: true)
!894 = !DIEnumerator(name: "OPT_fconserve_stack", value: 307, isUnsigned: true)
!895 = !DIEnumerator(name: "OPT_fconstant_string_class_", value: 308, isUnsigned: true)
!896 = !DIEnumerator(name: "OPT_fconvert_big_endian", value: 309, isUnsigned: true)
!897 = !DIEnumerator(name: "OPT_fconvert_little_endian", value: 310, isUnsigned: true)
!898 = !DIEnumerator(name: "OPT_fconvert_native", value: 311, isUnsigned: true)
!899 = !DIEnumerator(name: "OPT_fconvert_swap", value: 312, isUnsigned: true)
!900 = !DIEnumerator(name: "OPT_fcprop_registers", value: 313, isUnsigned: true)
!901 = !DIEnumerator(name: "OPT_fcray_pointer", value: 314, isUnsigned: true)
!902 = !DIEnumerator(name: "OPT_fcrossjumping", value: 315, isUnsigned: true)
!903 = !DIEnumerator(name: "OPT_fcse_follow_jumps", value: 316, isUnsigned: true)
!904 = !DIEnumerator(name: "OPT_fcse_skip_blocks", value: 317, isUnsigned: true)
!905 = !DIEnumerator(name: "OPT_fcx_fortran_rules", value: 318, isUnsigned: true)
!906 = !DIEnumerator(name: "OPT_fcx_limited_range", value: 319, isUnsigned: true)
!907 = !DIEnumerator(name: "OPT_fd_lines_as_code", value: 320, isUnsigned: true)
!908 = !DIEnumerator(name: "OPT_fd_lines_as_comments", value: 321, isUnsigned: true)
!909 = !DIEnumerator(name: "OPT_fdata_sections", value: 322, isUnsigned: true)
!910 = !DIEnumerator(name: "OPT_fdbg_cnt_list", value: 323, isUnsigned: true)
!911 = !DIEnumerator(name: "OPT_fdbg_cnt_", value: 324, isUnsigned: true)
!912 = !DIEnumerator(name: "OPT_fdce", value: 325, isUnsigned: true)
!913 = !DIEnumerator(name: "OPT_fdebug_prefix_map_", value: 326, isUnsigned: true)
!914 = !DIEnumerator(name: "OPT_fdeduce_init_list", value: 327, isUnsigned: true)
!915 = !DIEnumerator(name: "OPT_fdefault_double_8", value: 328, isUnsigned: true)
!916 = !DIEnumerator(name: "OPT_fdefault_inline", value: 329, isUnsigned: true)
!917 = !DIEnumerator(name: "OPT_fdefault_integer_8", value: 330, isUnsigned: true)
!918 = !DIEnumerator(name: "OPT_fdefault_real_8", value: 331, isUnsigned: true)
!919 = !DIEnumerator(name: "OPT_fdefer_pop", value: 332, isUnsigned: true)
!920 = !DIEnumerator(name: "OPT_fdelayed_branch", value: 333, isUnsigned: true)
!921 = !DIEnumerator(name: "OPT_fdelete_null_pointer_checks", value: 334, isUnsigned: true)
!922 = !DIEnumerator(name: "OPT_fdiagnostics_show_location_", value: 335, isUnsigned: true)
!923 = !DIEnumerator(name: "OPT_fdiagnostics_show_option", value: 336, isUnsigned: true)
!924 = !DIEnumerator(name: "OPT_fdirectives_only", value: 337, isUnsigned: true)
!925 = !DIEnumerator(name: "OPT_fdisable_assertions", value: 338, isUnsigned: true)
!926 = !DIEnumerator(name: "OPT_fdisable_assertions_", value: 339, isUnsigned: true)
!927 = !DIEnumerator(name: "OPT_fdollar_ok", value: 340, isUnsigned: true)
!928 = !DIEnumerator(name: "OPT_fdollars_in_identifiers", value: 341, isUnsigned: true)
!929 = !DIEnumerator(name: "OPT_fdse", value: 342, isUnsigned: true)
!930 = !DIEnumerator(name: "OPT_fdump_", value: 343, isUnsigned: true)
!931 = !DIEnumerator(name: "OPT_fdump_core", value: 344, isUnsigned: true)
!932 = !DIEnumerator(name: "OPT_fdump_final_insns_", value: 345, isUnsigned: true)
!933 = !DIEnumerator(name: "OPT_fdump_noaddr", value: 346, isUnsigned: true)
!934 = !DIEnumerator(name: "OPT_fdump_parse_tree", value: 347, isUnsigned: true)
!935 = !DIEnumerator(name: "OPT_fdump_unnumbered", value: 348, isUnsigned: true)
!936 = !DIEnumerator(name: "OPT_fdump_unnumbered_links", value: 349, isUnsigned: true)
!937 = !DIEnumerator(name: "OPT_fdwarf2_cfi_asm", value: 350, isUnsigned: true)
!938 = !DIEnumerator(name: "OPT_fearly_inlining", value: 351, isUnsigned: true)
!939 = !DIEnumerator(name: "OPT_felide_constructors", value: 352, isUnsigned: true)
!940 = !DIEnumerator(name: "OPT_feliminate_dwarf2_dups", value: 353, isUnsigned: true)
!941 = !DIEnumerator(name: "OPT_feliminate_unused_debug_symbols", value: 354, isUnsigned: true)
!942 = !DIEnumerator(name: "OPT_feliminate_unused_debug_types", value: 355, isUnsigned: true)
!943 = !DIEnumerator(name: "OPT_femit_class_debug_always", value: 356, isUnsigned: true)
!944 = !DIEnumerator(name: "OPT_femit_class_file", value: 357, isUnsigned: true)
!945 = !DIEnumerator(name: "OPT_femit_class_files", value: 358, isUnsigned: true)
!946 = !DIEnumerator(name: "OPT_femit_struct_debug_baseonly", value: 359, isUnsigned: true)
!947 = !DIEnumerator(name: "OPT_femit_struct_debug_detailed_", value: 360, isUnsigned: true)
!948 = !DIEnumerator(name: "OPT_femit_struct_debug_reduced", value: 361, isUnsigned: true)
!949 = !DIEnumerator(name: "OPT_fenable_assertions", value: 362, isUnsigned: true)
!950 = !DIEnumerator(name: "OPT_fenable_assertions_", value: 363, isUnsigned: true)
!951 = !DIEnumerator(name: "OPT_fenable_icf_debug", value: 364, isUnsigned: true)
!952 = !DIEnumerator(name: "OPT_fencoding_", value: 365, isUnsigned: true)
!953 = !DIEnumerator(name: "OPT_fenforce_eh_specs", value: 366, isUnsigned: true)
!954 = !DIEnumerator(name: "OPT_fenum_int_equiv", value: 367, isUnsigned: true)
!955 = !DIEnumerator(name: "OPT_fexceptions", value: 368, isUnsigned: true)
!956 = !DIEnumerator(name: "OPT_fexcess_precision_", value: 369, isUnsigned: true)
!957 = !DIEnumerator(name: "OPT_fexec_charset_", value: 370, isUnsigned: true)
!958 = !DIEnumerator(name: "OPT_fexpensive_optimizations", value: 371, isUnsigned: true)
!959 = !DIEnumerator(name: "OPT_fextdirs_", value: 372, isUnsigned: true)
!960 = !DIEnumerator(name: "OPT_fextended_identifiers", value: 373, isUnsigned: true)
!961 = !DIEnumerator(name: "OPT_fexternal_blas", value: 374, isUnsigned: true)
!962 = !DIEnumerator(name: "OPT_fexternal_templates", value: 375, isUnsigned: true)
!963 = !DIEnumerator(name: "OPT_ff2c", value: 376, isUnsigned: true)
!964 = !DIEnumerator(name: "OPT_ffast_math", value: 377, isUnsigned: true)
!965 = !DIEnumerator(name: "OPT_ffilelist_file", value: 378, isUnsigned: true)
!966 = !DIEnumerator(name: "OPT_ffinite_math_only", value: 379, isUnsigned: true)
!967 = !DIEnumerator(name: "OPT_ffixed_", value: 380, isUnsigned: true)
!968 = !DIEnumerator(name: "OPT_ffixed_form", value: 381, isUnsigned: true)
!969 = !DIEnumerator(name: "OPT_ffixed_line_length_", value: 382, isUnsigned: true)
!970 = !DIEnumerator(name: "OPT_ffixed_line_length_none", value: 383, isUnsigned: true)
!971 = !DIEnumerator(name: "OPT_ffloat_store", value: 384, isUnsigned: true)
!972 = !DIEnumerator(name: "OPT_ffor_scope", value: 385, isUnsigned: true)
!973 = !DIEnumerator(name: "OPT_fforce_addr", value: 386, isUnsigned: true)
!974 = !DIEnumerator(name: "OPT_fforce_classes_archive_check", value: 387, isUnsigned: true)
!975 = !DIEnumerator(name: "OPT_fforward_propagate", value: 388, isUnsigned: true)
!976 = !DIEnumerator(name: "OPT_ffpe_trap_", value: 389, isUnsigned: true)
!977 = !DIEnumerator(name: "OPT_ffree_form", value: 390, isUnsigned: true)
!978 = !DIEnumerator(name: "OPT_ffree_line_length_", value: 391, isUnsigned: true)
!979 = !DIEnumerator(name: "OPT_ffree_line_length_none", value: 392, isUnsigned: true)
!980 = !DIEnumerator(name: "OPT_ffreestanding", value: 393, isUnsigned: true)
!981 = !DIEnumerator(name: "OPT_ffriend_injection", value: 394, isUnsigned: true)
!982 = !DIEnumerator(name: "OPT_ffunction_cse", value: 395, isUnsigned: true)
!983 = !DIEnumerator(name: "OPT_ffunction_sections", value: 396, isUnsigned: true)
!984 = !DIEnumerator(name: "OPT_fgcse", value: 397, isUnsigned: true)
!985 = !DIEnumerator(name: "OPT_fgcse_after_reload", value: 398, isUnsigned: true)
!986 = !DIEnumerator(name: "OPT_fgcse_las", value: 399, isUnsigned: true)
!987 = !DIEnumerator(name: "OPT_fgcse_lm", value: 400, isUnsigned: true)
!988 = !DIEnumerator(name: "OPT_fgcse_sm", value: 401, isUnsigned: true)
!989 = !DIEnumerator(name: "OPT_fgnu_keywords", value: 402, isUnsigned: true)
!990 = !DIEnumerator(name: "OPT_fgnu_runtime", value: 403, isUnsigned: true)
!991 = !DIEnumerator(name: "OPT_fgnu89_inline", value: 404, isUnsigned: true)
!992 = !DIEnumerator(name: "OPT_fgraphite", value: 405, isUnsigned: true)
!993 = !DIEnumerator(name: "OPT_fgraphite_identity", value: 406, isUnsigned: true)
!994 = !DIEnumerator(name: "OPT_fguess_branch_probability", value: 407, isUnsigned: true)
!995 = !DIEnumerator(name: "OPT_fguiding_decls", value: 408, isUnsigned: true)
!996 = !DIEnumerator(name: "OPT_fhandle_exceptions", value: 409, isUnsigned: true)
!997 = !DIEnumerator(name: "OPT_fhash_synchronization", value: 410, isUnsigned: true)
!998 = !DIEnumerator(name: "OPT_fhelp", value: 411, isUnsigned: true)
!999 = !DIEnumerator(name: "OPT_fhelp_", value: 412, isUnsigned: true)
!1000 = !DIEnumerator(name: "OPT_fhonor_std", value: 413, isUnsigned: true)
!1001 = !DIEnumerator(name: "OPT_fhosted", value: 414, isUnsigned: true)
!1002 = !DIEnumerator(name: "OPT_fhuge_objects", value: 415, isUnsigned: true)
!1003 = !DIEnumerator(name: "OPT_fident", value: 416, isUnsigned: true)
!1004 = !DIEnumerator(name: "OPT_fif_conversion", value: 417, isUnsigned: true)
!1005 = !DIEnumerator(name: "OPT_fif_conversion2", value: 418, isUnsigned: true)
!1006 = !DIEnumerator(name: "OPT_fimplement_inlines", value: 419, isUnsigned: true)
!1007 = !DIEnumerator(name: "OPT_fimplicit_inline_templates", value: 420, isUnsigned: true)
!1008 = !DIEnumerator(name: "OPT_fimplicit_none", value: 421, isUnsigned: true)
!1009 = !DIEnumerator(name: "OPT_fimplicit_templates", value: 422, isUnsigned: true)
!1010 = !DIEnumerator(name: "OPT_findirect_classes", value: 423, isUnsigned: true)
!1011 = !DIEnumerator(name: "OPT_findirect_dispatch", value: 424, isUnsigned: true)
!1012 = !DIEnumerator(name: "OPT_findirect_inlining", value: 425, isUnsigned: true)
!1013 = !DIEnumerator(name: "OPT_finhibit_size_directive", value: 426, isUnsigned: true)
!1014 = !DIEnumerator(name: "OPT_finit_character_", value: 427, isUnsigned: true)
!1015 = !DIEnumerator(name: "OPT_finit_integer_", value: 428, isUnsigned: true)
!1016 = !DIEnumerator(name: "OPT_finit_local_zero", value: 429, isUnsigned: true)
!1017 = !DIEnumerator(name: "OPT_finit_logical_", value: 430, isUnsigned: true)
!1018 = !DIEnumerator(name: "OPT_finit_real_", value: 431, isUnsigned: true)
!1019 = !DIEnumerator(name: "OPT_finline", value: 432, isUnsigned: true)
!1020 = !DIEnumerator(name: "OPT_finline_functions", value: 433, isUnsigned: true)
!1021 = !DIEnumerator(name: "OPT_finline_functions_called_once", value: 434, isUnsigned: true)
!1022 = !DIEnumerator(name: "OPT_finline_limit_", value: 435, isUnsigned: true)
!1023 = !DIEnumerator(name: "OPT_finline_limit_eq", value: 436, isUnsigned: true)
!1024 = !DIEnumerator(name: "OPT_finline_small_functions", value: 437, isUnsigned: true)
!1025 = !DIEnumerator(name: "OPT_finput_charset_", value: 438, isUnsigned: true)
!1026 = !DIEnumerator(name: "OPT_finstrument_functions", value: 439, isUnsigned: true)
!1027 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_file_list_", value: 440, isUnsigned: true)
!1028 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_function_list_", value: 441, isUnsigned: true)
!1029 = !DIEnumerator(name: "OPT_fintrinsic_modules_path", value: 442, isUnsigned: true)
!1030 = !DIEnumerator(name: "OPT_fipa_cp", value: 443, isUnsigned: true)
!1031 = !DIEnumerator(name: "OPT_fipa_cp_clone", value: 444, isUnsigned: true)
!1032 = !DIEnumerator(name: "OPT_fipa_matrix_reorg", value: 445, isUnsigned: true)
!1033 = !DIEnumerator(name: "OPT_fipa_pta", value: 446, isUnsigned: true)
!1034 = !DIEnumerator(name: "OPT_fipa_pure_const", value: 447, isUnsigned: true)
!1035 = !DIEnumerator(name: "OPT_fipa_reference", value: 448, isUnsigned: true)
!1036 = !DIEnumerator(name: "OPT_fipa_sra", value: 449, isUnsigned: true)
!1037 = !DIEnumerator(name: "OPT_fipa_struct_reorg", value: 450, isUnsigned: true)
!1038 = !DIEnumerator(name: "OPT_fipa_type_escape", value: 451, isUnsigned: true)
!1039 = !DIEnumerator(name: "OPT_fira_algorithm_", value: 452, isUnsigned: true)
!1040 = !DIEnumerator(name: "OPT_fira_coalesce", value: 453, isUnsigned: true)
!1041 = !DIEnumerator(name: "OPT_fira_loop_pressure", value: 454, isUnsigned: true)
!1042 = !DIEnumerator(name: "OPT_fira_region_", value: 455, isUnsigned: true)
!1043 = !DIEnumerator(name: "OPT_fira_share_save_slots", value: 456, isUnsigned: true)
!1044 = !DIEnumerator(name: "OPT_fira_share_spill_slots", value: 457, isUnsigned: true)
!1045 = !DIEnumerator(name: "OPT_fira_verbose_", value: 458, isUnsigned: true)
!1046 = !DIEnumerator(name: "OPT_fivopts", value: 459, isUnsigned: true)
!1047 = !DIEnumerator(name: "OPT_fjni", value: 460, isUnsigned: true)
!1048 = !DIEnumerator(name: "OPT_fjump_tables", value: 461, isUnsigned: true)
!1049 = !DIEnumerator(name: "OPT_fkeep_inline_functions", value: 462, isUnsigned: true)
!1050 = !DIEnumerator(name: "OPT_fkeep_static_consts", value: 463, isUnsigned: true)
!1051 = !DIEnumerator(name: "OPT_flabels_ok", value: 464, isUnsigned: true)
!1052 = !DIEnumerator(name: "OPT_flax_vector_conversions", value: 465, isUnsigned: true)
!1053 = !DIEnumerator(name: "OPT_fleading_underscore", value: 466, isUnsigned: true)
!1054 = !DIEnumerator(name: "OPT_floop_block", value: 467, isUnsigned: true)
!1055 = !DIEnumerator(name: "OPT_floop_interchange", value: 468, isUnsigned: true)
!1056 = !DIEnumerator(name: "OPT_floop_optimize", value: 469, isUnsigned: true)
!1057 = !DIEnumerator(name: "OPT_floop_parallelize_all", value: 470, isUnsigned: true)
!1058 = !DIEnumerator(name: "OPT_floop_strip_mine", value: 471, isUnsigned: true)
!1059 = !DIEnumerator(name: "OPT_flto", value: 472, isUnsigned: true)
!1060 = !DIEnumerator(name: "OPT_flto_compression_level_", value: 473, isUnsigned: true)
!1061 = !DIEnumerator(name: "OPT_flto_report", value: 474, isUnsigned: true)
!1062 = !DIEnumerator(name: "OPT_fltrans", value: 475, isUnsigned: true)
!1063 = !DIEnumerator(name: "OPT_fltrans_output_list_", value: 476, isUnsigned: true)
!1064 = !DIEnumerator(name: "OPT_fmath_errno", value: 477, isUnsigned: true)
!1065 = !DIEnumerator(name: "OPT_fmax_array_constructor_", value: 478, isUnsigned: true)
!1066 = !DIEnumerator(name: "OPT_fmax_errors_", value: 479, isUnsigned: true)
!1067 = !DIEnumerator(name: "OPT_fmax_identifier_length_", value: 480, isUnsigned: true)
!1068 = !DIEnumerator(name: "OPT_fmax_stack_var_size_", value: 481, isUnsigned: true)
!1069 = !DIEnumerator(name: "OPT_fmax_subrecord_length_", value: 482, isUnsigned: true)
!1070 = !DIEnumerator(name: "OPT_fmem_report", value: 483, isUnsigned: true)
!1071 = !DIEnumerator(name: "OPT_fmerge_all_constants", value: 484, isUnsigned: true)
!1072 = !DIEnumerator(name: "OPT_fmerge_constants", value: 485, isUnsigned: true)
!1073 = !DIEnumerator(name: "OPT_fmerge_debug_strings", value: 486, isUnsigned: true)
!1074 = !DIEnumerator(name: "OPT_fmessage_length_", value: 487, isUnsigned: true)
!1075 = !DIEnumerator(name: "OPT_fmodule_private", value: 488, isUnsigned: true)
!1076 = !DIEnumerator(name: "OPT_fmodulo_sched", value: 489, isUnsigned: true)
!1077 = !DIEnumerator(name: "OPT_fmodulo_sched_allow_regmoves", value: 490, isUnsigned: true)
!1078 = !DIEnumerator(name: "OPT_fmove_loop_invariants", value: 491, isUnsigned: true)
!1079 = !DIEnumerator(name: "OPT_fms_extensions", value: 492, isUnsigned: true)
!1080 = !DIEnumerator(name: "OPT_fmudflap", value: 493, isUnsigned: true)
!1081 = !DIEnumerator(name: "OPT_fmudflapir", value: 494, isUnsigned: true)
!1082 = !DIEnumerator(name: "OPT_fmudflapth", value: 495, isUnsigned: true)
!1083 = !DIEnumerator(name: "OPT_fname_mangling_version_", value: 496, isUnsigned: true)
!1084 = !DIEnumerator(name: "OPT_fnew_abi", value: 497, isUnsigned: true)
!1085 = !DIEnumerator(name: "OPT_fnext_runtime", value: 498, isUnsigned: true)
!1086 = !DIEnumerator(name: "OPT_fnil_receivers", value: 499, isUnsigned: true)
!1087 = !DIEnumerator(name: "OPT_fnon_call_exceptions", value: 500, isUnsigned: true)
!1088 = !DIEnumerator(name: "OPT_fnonansi_builtins", value: 501, isUnsigned: true)
!1089 = !DIEnumerator(name: "OPT_fnonnull_objects", value: 502, isUnsigned: true)
!1090 = !DIEnumerator(name: "OPT_fobjc_call_cxx_cdtors", value: 503, isUnsigned: true)
!1091 = !DIEnumerator(name: "OPT_fobjc_direct_dispatch", value: 504, isUnsigned: true)
!1092 = !DIEnumerator(name: "OPT_fobjc_exceptions", value: 505, isUnsigned: true)
!1093 = !DIEnumerator(name: "OPT_fobjc_gc", value: 506, isUnsigned: true)
!1094 = !DIEnumerator(name: "OPT_fobjc_sjlj_exceptions", value: 507, isUnsigned: true)
!1095 = !DIEnumerator(name: "OPT_fomit_frame_pointer", value: 508, isUnsigned: true)
!1096 = !DIEnumerator(name: "OPT_fopenmp", value: 509, isUnsigned: true)
!1097 = !DIEnumerator(name: "OPT_foperator_names", value: 510, isUnsigned: true)
!1098 = !DIEnumerator(name: "OPT_foptimize_register_move", value: 511, isUnsigned: true)
!1099 = !DIEnumerator(name: "OPT_foptimize_sibling_calls", value: 512, isUnsigned: true)
!1100 = !DIEnumerator(name: "OPT_foptimize_static_class_initialization", value: 513, isUnsigned: true)
!1101 = !DIEnumerator(name: "OPT_foptional_diags", value: 514, isUnsigned: true)
!1102 = !DIEnumerator(name: "OPT_foutput_class_dir_", value: 515, isUnsigned: true)
!1103 = !DIEnumerator(name: "OPT_fpack_derived", value: 516, isUnsigned: true)
!1104 = !DIEnumerator(name: "OPT_fpack_struct", value: 517, isUnsigned: true)
!1105 = !DIEnumerator(name: "OPT_fpack_struct_", value: 518, isUnsigned: true)
!1106 = !DIEnumerator(name: "OPT_fpcc_struct_return", value: 519, isUnsigned: true)
!1107 = !DIEnumerator(name: "OPT_fpch_deps", value: 520, isUnsigned: true)
!1108 = !DIEnumerator(name: "OPT_fpch_preprocess", value: 521, isUnsigned: true)
!1109 = !DIEnumerator(name: "OPT_fpeel_loops", value: 522, isUnsigned: true)
!1110 = !DIEnumerator(name: "OPT_fpeephole", value: 523, isUnsigned: true)
!1111 = !DIEnumerator(name: "OPT_fpeephole2", value: 524, isUnsigned: true)
!1112 = !DIEnumerator(name: "OPT_fpermissive", value: 525, isUnsigned: true)
!1113 = !DIEnumerator(name: "OPT_fpic", value: 526, isUnsigned: true)
!1114 = !DIEnumerator(name: "OPT_fpie", value: 527, isUnsigned: true)
!1115 = !DIEnumerator(name: "OPT_fplugin_arg_", value: 528, isUnsigned: true)
!1116 = !DIEnumerator(name: "OPT_fplugin_", value: 529, isUnsigned: true)
!1117 = !DIEnumerator(name: "OPT_fpost_ipa_mem_report", value: 530, isUnsigned: true)
!1118 = !DIEnumerator(name: "OPT_fpre_ipa_mem_report", value: 531, isUnsigned: true)
!1119 = !DIEnumerator(name: "OPT_fpredictive_commoning", value: 532, isUnsigned: true)
!1120 = !DIEnumerator(name: "OPT_fprefetch_loop_arrays", value: 533, isUnsigned: true)
!1121 = !DIEnumerator(name: "OPT_fpreprocessed", value: 534, isUnsigned: true)
!1122 = !DIEnumerator(name: "OPT_fpretty_templates", value: 535, isUnsigned: true)
!1123 = !DIEnumerator(name: "OPT_fprofile", value: 536, isUnsigned: true)
!1124 = !DIEnumerator(name: "OPT_fprofile_arcs", value: 537, isUnsigned: true)
!1125 = !DIEnumerator(name: "OPT_fprofile_correction", value: 538, isUnsigned: true)
!1126 = !DIEnumerator(name: "OPT_fprofile_dir_", value: 539, isUnsigned: true)
!1127 = !DIEnumerator(name: "OPT_fprofile_generate", value: 540, isUnsigned: true)
!1128 = !DIEnumerator(name: "OPT_fprofile_generate_", value: 541, isUnsigned: true)
!1129 = !DIEnumerator(name: "OPT_fprofile_use", value: 542, isUnsigned: true)
!1130 = !DIEnumerator(name: "OPT_fprofile_use_", value: 543, isUnsigned: true)
!1131 = !DIEnumerator(name: "OPT_fprofile_values", value: 544, isUnsigned: true)
!1132 = !DIEnumerator(name: "OPT_fprotect_parens", value: 545, isUnsigned: true)
!1133 = !DIEnumerator(name: "OPT_frandom_seed", value: 546, isUnsigned: true)
!1134 = !DIEnumerator(name: "OPT_frandom_seed_", value: 547, isUnsigned: true)
!1135 = !DIEnumerator(name: "OPT_frange_check", value: 548, isUnsigned: true)
!1136 = !DIEnumerator(name: "OPT_freciprocal_math", value: 549, isUnsigned: true)
!1137 = !DIEnumerator(name: "OPT_frecord_gcc_switches", value: 550, isUnsigned: true)
!1138 = !DIEnumerator(name: "OPT_frecord_marker_4", value: 551, isUnsigned: true)
!1139 = !DIEnumerator(name: "OPT_frecord_marker_8", value: 552, isUnsigned: true)
!1140 = !DIEnumerator(name: "OPT_frecursive", value: 553, isUnsigned: true)
!1141 = !DIEnumerator(name: "OPT_freduced_reflection", value: 554, isUnsigned: true)
!1142 = !DIEnumerator(name: "OPT_freg_struct_return", value: 555, isUnsigned: true)
!1143 = !DIEnumerator(name: "OPT_fregmove", value: 556, isUnsigned: true)
!1144 = !DIEnumerator(name: "OPT_frename_registers", value: 557, isUnsigned: true)
!1145 = !DIEnumerator(name: "OPT_freorder_blocks", value: 558, isUnsigned: true)
!1146 = !DIEnumerator(name: "OPT_freorder_blocks_and_partition", value: 559, isUnsigned: true)
!1147 = !DIEnumerator(name: "OPT_freorder_functions", value: 560, isUnsigned: true)
!1148 = !DIEnumerator(name: "OPT_frepack_arrays", value: 561, isUnsigned: true)
!1149 = !DIEnumerator(name: "OPT_freplace_objc_classes", value: 562, isUnsigned: true)
!1150 = !DIEnumerator(name: "OPT_frepo", value: 563, isUnsigned: true)
!1151 = !DIEnumerator(name: "OPT_frerun_cse_after_loop", value: 564, isUnsigned: true)
!1152 = !DIEnumerator(name: "OPT_frerun_loop_opt", value: 565, isUnsigned: true)
!1153 = !DIEnumerator(name: "OPT_freschedule_modulo_scheduled_loops", value: 566, isUnsigned: true)
!1154 = !DIEnumerator(name: "OPT_fresolution", value: 567, isUnsigned: true)
!1155 = !DIEnumerator(name: "OPT_frounding_math", value: 568, isUnsigned: true)
!1156 = !DIEnumerator(name: "OPT_frtti", value: 569, isUnsigned: true)
!1157 = !DIEnumerator(name: "OPT_fsaw_java_file", value: 570, isUnsigned: true)
!1158 = !DIEnumerator(name: "OPT_fsched_critical_path_heuristic", value: 571, isUnsigned: true)
!1159 = !DIEnumerator(name: "OPT_fsched_dep_count_heuristic", value: 572, isUnsigned: true)
!1160 = !DIEnumerator(name: "OPT_fsched_group_heuristic", value: 573, isUnsigned: true)
!1161 = !DIEnumerator(name: "OPT_fsched_interblock", value: 574, isUnsigned: true)
!1162 = !DIEnumerator(name: "OPT_fsched_last_insn_heuristic", value: 575, isUnsigned: true)
!1163 = !DIEnumerator(name: "OPT_fsched_pressure", value: 576, isUnsigned: true)
!1164 = !DIEnumerator(name: "OPT_fsched_rank_heuristic", value: 577, isUnsigned: true)
!1165 = !DIEnumerator(name: "OPT_fsched_spec", value: 578, isUnsigned: true)
!1166 = !DIEnumerator(name: "OPT_fsched_spec_insn_heuristic", value: 579, isUnsigned: true)
!1167 = !DIEnumerator(name: "OPT_fsched_spec_load", value: 580, isUnsigned: true)
!1168 = !DIEnumerator(name: "OPT_fsched_spec_load_dangerous", value: 581, isUnsigned: true)
!1169 = !DIEnumerator(name: "OPT_fsched_stalled_insns", value: 582, isUnsigned: true)
!1170 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep", value: 583, isUnsigned: true)
!1171 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep_", value: 584, isUnsigned: true)
!1172 = !DIEnumerator(name: "OPT_fsched_stalled_insns_", value: 585, isUnsigned: true)
!1173 = !DIEnumerator(name: "OPT_fsched_verbose_", value: 586, isUnsigned: true)
!1174 = !DIEnumerator(name: "OPT_fsched2_use_superblocks", value: 587, isUnsigned: true)
!1175 = !DIEnumerator(name: "OPT_fsched2_use_traces", value: 588, isUnsigned: true)
!1176 = !DIEnumerator(name: "OPT_fschedule_insns", value: 589, isUnsigned: true)
!1177 = !DIEnumerator(name: "OPT_fschedule_insns2", value: 590, isUnsigned: true)
!1178 = !DIEnumerator(name: "OPT_fsecond_underscore", value: 591, isUnsigned: true)
!1179 = !DIEnumerator(name: "OPT_fsection_anchors", value: 592, isUnsigned: true)
!1180 = !DIEnumerator(name: "OPT_fsee", value: 593, isUnsigned: true)
!1181 = !DIEnumerator(name: "OPT_fsel_sched_pipelining", value: 594, isUnsigned: true)
!1182 = !DIEnumerator(name: "OPT_fsel_sched_pipelining_outer_loops", value: 595, isUnsigned: true)
!1183 = !DIEnumerator(name: "OPT_fsel_sched_reschedule_pipelined", value: 596, isUnsigned: true)
!1184 = !DIEnumerator(name: "OPT_fselective_scheduling", value: 597, isUnsigned: true)
!1185 = !DIEnumerator(name: "OPT_fselective_scheduling2", value: 598, isUnsigned: true)
!1186 = !DIEnumerator(name: "OPT_fshort_double", value: 599, isUnsigned: true)
!1187 = !DIEnumerator(name: "OPT_fshort_enums", value: 600, isUnsigned: true)
!1188 = !DIEnumerator(name: "OPT_fshort_wchar", value: 601, isUnsigned: true)
!1189 = !DIEnumerator(name: "OPT_fshow_column", value: 602, isUnsigned: true)
!1190 = !DIEnumerator(name: "OPT_fsign_zero", value: 603, isUnsigned: true)
!1191 = !DIEnumerator(name: "OPT_fsignaling_nans", value: 604, isUnsigned: true)
!1192 = !DIEnumerator(name: "OPT_fsigned_bitfields", value: 605, isUnsigned: true)
!1193 = !DIEnumerator(name: "OPT_fsigned_char", value: 606, isUnsigned: true)
!1194 = !DIEnumerator(name: "OPT_fsigned_zeros", value: 607, isUnsigned: true)
!1195 = !DIEnumerator(name: "OPT_fsingle_precision_constant", value: 608, isUnsigned: true)
!1196 = !DIEnumerator(name: "OPT_fsource_filename_", value: 609, isUnsigned: true)
!1197 = !DIEnumerator(name: "OPT_fsource_", value: 610, isUnsigned: true)
!1198 = !DIEnumerator(name: "OPT_fsplit_ivs_in_unroller", value: 611, isUnsigned: true)
!1199 = !DIEnumerator(name: "OPT_fsplit_wide_types", value: 612, isUnsigned: true)
!1200 = !DIEnumerator(name: "OPT_fsquangle", value: 613, isUnsigned: true)
!1201 = !DIEnumerator(name: "OPT_fstack_check", value: 614, isUnsigned: true)
!1202 = !DIEnumerator(name: "OPT_fstack_check_", value: 615, isUnsigned: true)
!1203 = !DIEnumerator(name: "OPT_fstack_limit", value: 616, isUnsigned: true)
!1204 = !DIEnumerator(name: "OPT_fstack_limit_register_", value: 617, isUnsigned: true)
!1205 = !DIEnumerator(name: "OPT_fstack_limit_symbol_", value: 618, isUnsigned: true)
!1206 = !DIEnumerator(name: "OPT_fstack_protector", value: 619, isUnsigned: true)
!1207 = !DIEnumerator(name: "OPT_fstack_protector_all", value: 620, isUnsigned: true)
!1208 = !DIEnumerator(name: "OPT_fstats", value: 621, isUnsigned: true)
!1209 = !DIEnumerator(name: "OPT_fstore_check", value: 622, isUnsigned: true)
!1210 = !DIEnumerator(name: "OPT_fstrength_reduce", value: 623, isUnsigned: true)
!1211 = !DIEnumerator(name: "OPT_fstrict_aliasing", value: 624, isUnsigned: true)
!1212 = !DIEnumerator(name: "OPT_fstrict_overflow", value: 625, isUnsigned: true)
!1213 = !DIEnumerator(name: "OPT_fstrict_prototype", value: 626, isUnsigned: true)
!1214 = !DIEnumerator(name: "OPT_fsyntax_only", value: 627, isUnsigned: true)
!1215 = !DIEnumerator(name: "OPT_ftabstop_", value: 628, isUnsigned: true)
!1216 = !DIEnumerator(name: "OPT_ftarget_help", value: 629, isUnsigned: true)
!1217 = !DIEnumerator(name: "OPT_ftarget_", value: 630, isUnsigned: true)
!1218 = !DIEnumerator(name: "OPT_ftemplate_depth_", value: 631, isUnsigned: true)
!1219 = !DIEnumerator(name: "OPT_ftemplate_depth_eq", value: 632, isUnsigned: true)
!1220 = !DIEnumerator(name: "OPT_ftest_coverage", value: 633, isUnsigned: true)
!1221 = !DIEnumerator(name: "OPT_fthis_is_variable", value: 634, isUnsigned: true)
!1222 = !DIEnumerator(name: "OPT_fthread_jumps", value: 635, isUnsigned: true)
!1223 = !DIEnumerator(name: "OPT_fthreadsafe_statics", value: 636, isUnsigned: true)
!1224 = !DIEnumerator(name: "OPT_ftime_report", value: 637, isUnsigned: true)
!1225 = !DIEnumerator(name: "OPT_ftls_model_", value: 638, isUnsigned: true)
!1226 = !DIEnumerator(name: "OPT_ftoplevel_reorder", value: 639, isUnsigned: true)
!1227 = !DIEnumerator(name: "OPT_ftracer", value: 640, isUnsigned: true)
!1228 = !DIEnumerator(name: "OPT_ftrapping_math", value: 641, isUnsigned: true)
!1229 = !DIEnumerator(name: "OPT_ftrapv", value: 642, isUnsigned: true)
!1230 = !DIEnumerator(name: "OPT_ftree_builtin_call_dce", value: 643, isUnsigned: true)
!1231 = !DIEnumerator(name: "OPT_ftree_ccp", value: 644, isUnsigned: true)
!1232 = !DIEnumerator(name: "OPT_ftree_ch", value: 645, isUnsigned: true)
!1233 = !DIEnumerator(name: "OPT_ftree_copy_prop", value: 646, isUnsigned: true)
!1234 = !DIEnumerator(name: "OPT_ftree_copyrename", value: 647, isUnsigned: true)
!1235 = !DIEnumerator(name: "OPT_ftree_cselim", value: 648, isUnsigned: true)
!1236 = !DIEnumerator(name: "OPT_ftree_dce", value: 649, isUnsigned: true)
!1237 = !DIEnumerator(name: "OPT_ftree_dominator_opts", value: 650, isUnsigned: true)
!1238 = !DIEnumerator(name: "OPT_ftree_dse", value: 651, isUnsigned: true)
!1239 = !DIEnumerator(name: "OPT_ftree_forwprop", value: 652, isUnsigned: true)
!1240 = !DIEnumerator(name: "OPT_ftree_fre", value: 653, isUnsigned: true)
!1241 = !DIEnumerator(name: "OPT_ftree_loop_distribution", value: 654, isUnsigned: true)
!1242 = !DIEnumerator(name: "OPT_ftree_loop_im", value: 655, isUnsigned: true)
!1243 = !DIEnumerator(name: "OPT_ftree_loop_ivcanon", value: 656, isUnsigned: true)
!1244 = !DIEnumerator(name: "OPT_ftree_loop_linear", value: 657, isUnsigned: true)
!1245 = !DIEnumerator(name: "OPT_ftree_loop_optimize", value: 658, isUnsigned: true)
!1246 = !DIEnumerator(name: "OPT_ftree_lrs", value: 659, isUnsigned: true)
!1247 = !DIEnumerator(name: "OPT_ftree_parallelize_loops_", value: 660, isUnsigned: true)
!1248 = !DIEnumerator(name: "OPT_ftree_phiprop", value: 661, isUnsigned: true)
!1249 = !DIEnumerator(name: "OPT_ftree_pre", value: 662, isUnsigned: true)
!1250 = !DIEnumerator(name: "OPT_ftree_pta", value: 663, isUnsigned: true)
!1251 = !DIEnumerator(name: "OPT_ftree_reassoc", value: 664, isUnsigned: true)
!1252 = !DIEnumerator(name: "OPT_ftree_salias", value: 665, isUnsigned: true)
!1253 = !DIEnumerator(name: "OPT_ftree_scev_cprop", value: 666, isUnsigned: true)
!1254 = !DIEnumerator(name: "OPT_ftree_sink", value: 667, isUnsigned: true)
!1255 = !DIEnumerator(name: "OPT_ftree_slp_vectorize", value: 668, isUnsigned: true)
!1256 = !DIEnumerator(name: "OPT_ftree_sra", value: 669, isUnsigned: true)
!1257 = !DIEnumerator(name: "OPT_ftree_store_ccp", value: 670, isUnsigned: true)
!1258 = !DIEnumerator(name: "OPT_ftree_store_copy_prop", value: 671, isUnsigned: true)
!1259 = !DIEnumerator(name: "OPT_ftree_switch_conversion", value: 672, isUnsigned: true)
!1260 = !DIEnumerator(name: "OPT_ftree_ter", value: 673, isUnsigned: true)
!1261 = !DIEnumerator(name: "OPT_ftree_vect_loop_version", value: 674, isUnsigned: true)
!1262 = !DIEnumerator(name: "OPT_ftree_vectorize", value: 675, isUnsigned: true)
!1263 = !DIEnumerator(name: "OPT_ftree_vectorizer_verbose_", value: 676, isUnsigned: true)
!1264 = !DIEnumerator(name: "OPT_ftree_vrp", value: 677, isUnsigned: true)
!1265 = !DIEnumerator(name: "OPT_funderscoring", value: 678, isUnsigned: true)
!1266 = !DIEnumerator(name: "OPT_funit_at_a_time", value: 679, isUnsigned: true)
!1267 = !DIEnumerator(name: "OPT_funroll_all_loops", value: 680, isUnsigned: true)
!1268 = !DIEnumerator(name: "OPT_funroll_loops", value: 681, isUnsigned: true)
!1269 = !DIEnumerator(name: "OPT_funsafe_loop_optimizations", value: 682, isUnsigned: true)
!1270 = !DIEnumerator(name: "OPT_funsafe_math_optimizations", value: 683, isUnsigned: true)
!1271 = !DIEnumerator(name: "OPT_funsigned_bitfields", value: 684, isUnsigned: true)
!1272 = !DIEnumerator(name: "OPT_funsigned_char", value: 685, isUnsigned: true)
!1273 = !DIEnumerator(name: "OPT_funswitch_loops", value: 686, isUnsigned: true)
!1274 = !DIEnumerator(name: "OPT_funwind_tables", value: 687, isUnsigned: true)
!1275 = !DIEnumerator(name: "OPT_fuse_atomic_builtins", value: 688, isUnsigned: true)
!1276 = !DIEnumerator(name: "OPT_fuse_boehm_gc", value: 689, isUnsigned: true)
!1277 = !DIEnumerator(name: "OPT_fuse_cxa_atexit", value: 690, isUnsigned: true)
!1278 = !DIEnumerator(name: "OPT_fuse_cxa_get_exception_ptr", value: 691, isUnsigned: true)
!1279 = !DIEnumerator(name: "OPT_fuse_divide_subroutine", value: 692, isUnsigned: true)
!1280 = !DIEnumerator(name: "OPT_fuse_linker_plugin", value: 693, isUnsigned: true)
!1281 = !DIEnumerator(name: "OPT_fvar_tracking", value: 694, isUnsigned: true)
!1282 = !DIEnumerator(name: "OPT_fvar_tracking_assignments", value: 695, isUnsigned: true)
!1283 = !DIEnumerator(name: "OPT_fvar_tracking_assignments_toggle", value: 696, isUnsigned: true)
!1284 = !DIEnumerator(name: "OPT_fvar_tracking_uninit", value: 697, isUnsigned: true)
!1285 = !DIEnumerator(name: "OPT_fvariable_expansion_in_unroller", value: 698, isUnsigned: true)
!1286 = !DIEnumerator(name: "OPT_fvect_cost_model", value: 699, isUnsigned: true)
!1287 = !DIEnumerator(name: "OPT_fverbose_asm", value: 700, isUnsigned: true)
!1288 = !DIEnumerator(name: "OPT_fversion", value: 701, isUnsigned: true)
!1289 = !DIEnumerator(name: "OPT_fvisibility_inlines_hidden", value: 702, isUnsigned: true)
!1290 = !DIEnumerator(name: "OPT_fvisibility_ms_compat", value: 703, isUnsigned: true)
!1291 = !DIEnumerator(name: "OPT_fvisibility_", value: 704, isUnsigned: true)
!1292 = !DIEnumerator(name: "OPT_fvpt", value: 705, isUnsigned: true)
!1293 = !DIEnumerator(name: "OPT_fvtable_gc", value: 706, isUnsigned: true)
!1294 = !DIEnumerator(name: "OPT_fvtable_thunks", value: 707, isUnsigned: true)
!1295 = !DIEnumerator(name: "OPT_fweak", value: 708, isUnsigned: true)
!1296 = !DIEnumerator(name: "OPT_fweb", value: 709, isUnsigned: true)
!1297 = !DIEnumerator(name: "OPT_fwhole_file", value: 710, isUnsigned: true)
!1298 = !DIEnumerator(name: "OPT_fwhole_program", value: 711, isUnsigned: true)
!1299 = !DIEnumerator(name: "OPT_fwhopr", value: 712, isUnsigned: true)
!1300 = !DIEnumerator(name: "OPT_fwide_exec_charset_", value: 713, isUnsigned: true)
!1301 = !DIEnumerator(name: "OPT_fworking_directory", value: 714, isUnsigned: true)
!1302 = !DIEnumerator(name: "OPT_fwpa", value: 715, isUnsigned: true)
!1303 = !DIEnumerator(name: "OPT_fwrapv", value: 716, isUnsigned: true)
!1304 = !DIEnumerator(name: "OPT_fxref", value: 717, isUnsigned: true)
!1305 = !DIEnumerator(name: "OPT_fzero_initialized_in_bss", value: 718, isUnsigned: true)
!1306 = !DIEnumerator(name: "OPT_fzero_link", value: 719, isUnsigned: true)
!1307 = !DIEnumerator(name: "OPT_g", value: 720, isUnsigned: true)
!1308 = !DIEnumerator(name: "OPT_gant", value: 721, isUnsigned: true)
!1309 = !DIEnumerator(name: "OPT_gcoff", value: 722, isUnsigned: true)
!1310 = !DIEnumerator(name: "OPT_gdwarfplus", value: 723, isUnsigned: true)
!1311 = !DIEnumerator(name: "OPT_gdwarf_", value: 724, isUnsigned: true)
!1312 = !DIEnumerator(name: "OPT_gen_decls", value: 725, isUnsigned: true)
!1313 = !DIEnumerator(name: "OPT_ggdb", value: 726, isUnsigned: true)
!1314 = !DIEnumerator(name: "OPT_gnat", value: 727, isUnsigned: true)
!1315 = !DIEnumerator(name: "OPT_gnatO", value: 728, isUnsigned: true)
!1316 = !DIEnumerator(name: "OPT_gno_strict_dwarf", value: 729, isUnsigned: true)
!1317 = !DIEnumerator(name: "OPT_gstabs", value: 730, isUnsigned: true)
!1318 = !DIEnumerator(name: "OPT_gstabs_", value: 731, isUnsigned: true)
!1319 = !DIEnumerator(name: "OPT_gstrict_dwarf", value: 732, isUnsigned: true)
!1320 = !DIEnumerator(name: "OPT_gtoggle", value: 733, isUnsigned: true)
!1321 = !DIEnumerator(name: "OPT_gvms", value: 734, isUnsigned: true)
!1322 = !DIEnumerator(name: "OPT_gxcoff", value: 735, isUnsigned: true)
!1323 = !DIEnumerator(name: "OPT_gxcoff_", value: 736, isUnsigned: true)
!1324 = !DIEnumerator(name: "OPT_idirafter", value: 737, isUnsigned: true)
!1325 = !DIEnumerator(name: "OPT_imacros", value: 738, isUnsigned: true)
!1326 = !DIEnumerator(name: "OPT_imultilib", value: 739, isUnsigned: true)
!1327 = !DIEnumerator(name: "OPT_include", value: 740, isUnsigned: true)
!1328 = !DIEnumerator(name: "OPT_iprefix", value: 741, isUnsigned: true)
!1329 = !DIEnumerator(name: "OPT_iquote", value: 742, isUnsigned: true)
!1330 = !DIEnumerator(name: "OPT_isysroot", value: 743, isUnsigned: true)
!1331 = !DIEnumerator(name: "OPT_isystem", value: 744, isUnsigned: true)
!1332 = !DIEnumerator(name: "OPT_iwithprefix", value: 745, isUnsigned: true)
!1333 = !DIEnumerator(name: "OPT_iwithprefixbefore", value: 746, isUnsigned: true)
!1334 = !DIEnumerator(name: "OPT_lang_asm", value: 747, isUnsigned: true)
!1335 = !DIEnumerator(name: "OPT_lang_objc", value: 748, isUnsigned: true)
!1336 = !DIEnumerator(name: "OPT_m128bit_long_double", value: 749, isUnsigned: true)
!1337 = !DIEnumerator(name: "OPT_m32", value: 750, isUnsigned: true)
!1338 = !DIEnumerator(name: "OPT_m3dnow", value: 751, isUnsigned: true)
!1339 = !DIEnumerator(name: "OPT_m3dnowa", value: 752, isUnsigned: true)
!1340 = !DIEnumerator(name: "OPT_m64", value: 753, isUnsigned: true)
!1341 = !DIEnumerator(name: "OPT_m80387", value: 754, isUnsigned: true)
!1342 = !DIEnumerator(name: "OPT_m96bit_long_double", value: 755, isUnsigned: true)
!1343 = !DIEnumerator(name: "OPT_mabi_", value: 756, isUnsigned: true)
!1344 = !DIEnumerator(name: "OPT_mabm", value: 757, isUnsigned: true)
!1345 = !DIEnumerator(name: "OPT_maccumulate_outgoing_args", value: 758, isUnsigned: true)
!1346 = !DIEnumerator(name: "OPT_maes", value: 759, isUnsigned: true)
!1347 = !DIEnumerator(name: "OPT_malign_double", value: 760, isUnsigned: true)
!1348 = !DIEnumerator(name: "OPT_malign_functions_", value: 761, isUnsigned: true)
!1349 = !DIEnumerator(name: "OPT_malign_jumps_", value: 762, isUnsigned: true)
!1350 = !DIEnumerator(name: "OPT_malign_loops_", value: 763, isUnsigned: true)
!1351 = !DIEnumerator(name: "OPT_malign_stringops", value: 764, isUnsigned: true)
!1352 = !DIEnumerator(name: "OPT_march_", value: 765, isUnsigned: true)
!1353 = !DIEnumerator(name: "OPT_masm_", value: 766, isUnsigned: true)
!1354 = !DIEnumerator(name: "OPT_mavx", value: 767, isUnsigned: true)
!1355 = !DIEnumerator(name: "OPT_mbranch_cost_", value: 768, isUnsigned: true)
!1356 = !DIEnumerator(name: "OPT_mcld", value: 769, isUnsigned: true)
!1357 = !DIEnumerator(name: "OPT_mcmodel_", value: 770, isUnsigned: true)
!1358 = !DIEnumerator(name: "OPT_mcrc32", value: 771, isUnsigned: true)
!1359 = !DIEnumerator(name: "OPT_mcx16", value: 772, isUnsigned: true)
!1360 = !DIEnumerator(name: "OPT_mfancy_math_387", value: 773, isUnsigned: true)
!1361 = !DIEnumerator(name: "OPT_mfma", value: 774, isUnsigned: true)
!1362 = !DIEnumerator(name: "OPT_mfma4", value: 775, isUnsigned: true)
!1363 = !DIEnumerator(name: "OPT_mforce_drap", value: 776, isUnsigned: true)
!1364 = !DIEnumerator(name: "OPT_mfp_ret_in_387", value: 777, isUnsigned: true)
!1365 = !DIEnumerator(name: "OPT_mfpmath_", value: 778, isUnsigned: true)
!1366 = !DIEnumerator(name: "OPT_mfused_madd", value: 779, isUnsigned: true)
!1367 = !DIEnumerator(name: "OPT_mglibc", value: 780, isUnsigned: true)
!1368 = !DIEnumerator(name: "OPT_mhard_float", value: 781, isUnsigned: true)
!1369 = !DIEnumerator(name: "OPT_mieee_fp", value: 782, isUnsigned: true)
!1370 = !DIEnumerator(name: "OPT_mincoming_stack_boundary_", value: 783, isUnsigned: true)
!1371 = !DIEnumerator(name: "OPT_minline_all_stringops", value: 784, isUnsigned: true)
!1372 = !DIEnumerator(name: "OPT_minline_stringops_dynamically", value: 785, isUnsigned: true)
!1373 = !DIEnumerator(name: "OPT_mintel_syntax", value: 786, isUnsigned: true)
!1374 = !DIEnumerator(name: "OPT_mlarge_data_threshold_", value: 787, isUnsigned: true)
!1375 = !DIEnumerator(name: "OPT_mlwp", value: 788, isUnsigned: true)
!1376 = !DIEnumerator(name: "OPT_mmmx", value: 789, isUnsigned: true)
!1377 = !DIEnumerator(name: "OPT_mmovbe", value: 790, isUnsigned: true)
!1378 = !DIEnumerator(name: "OPT_mms_bitfields", value: 791, isUnsigned: true)
!1379 = !DIEnumerator(name: "OPT_mno_align_stringops", value: 792, isUnsigned: true)
!1380 = !DIEnumerator(name: "OPT_mno_fancy_math_387", value: 793, isUnsigned: true)
!1381 = !DIEnumerator(name: "OPT_mno_push_args", value: 794, isUnsigned: true)
!1382 = !DIEnumerator(name: "OPT_mno_red_zone", value: 795, isUnsigned: true)
!1383 = !DIEnumerator(name: "OPT_mno_sse4", value: 796, isUnsigned: true)
!1384 = !DIEnumerator(name: "OPT_momit_leaf_frame_pointer", value: 797, isUnsigned: true)
!1385 = !DIEnumerator(name: "OPT_mpc", value: 798, isUnsigned: true)
!1386 = !DIEnumerator(name: "OPT_mpclmul", value: 799, isUnsigned: true)
!1387 = !DIEnumerator(name: "OPT_mpopcnt", value: 800, isUnsigned: true)
!1388 = !DIEnumerator(name: "OPT_mpreferred_stack_boundary_", value: 801, isUnsigned: true)
!1389 = !DIEnumerator(name: "OPT_mpush_args", value: 802, isUnsigned: true)
!1390 = !DIEnumerator(name: "OPT_mrecip", value: 803, isUnsigned: true)
!1391 = !DIEnumerator(name: "OPT_mred_zone", value: 804, isUnsigned: true)
!1392 = !DIEnumerator(name: "OPT_mregparm_", value: 805, isUnsigned: true)
!1393 = !DIEnumerator(name: "OPT_mrtd", value: 806, isUnsigned: true)
!1394 = !DIEnumerator(name: "OPT_msahf", value: 807, isUnsigned: true)
!1395 = !DIEnumerator(name: "OPT_msoft_float", value: 808, isUnsigned: true)
!1396 = !DIEnumerator(name: "OPT_msse", value: 809, isUnsigned: true)
!1397 = !DIEnumerator(name: "OPT_msse2", value: 810, isUnsigned: true)
!1398 = !DIEnumerator(name: "OPT_msse2avx", value: 811, isUnsigned: true)
!1399 = !DIEnumerator(name: "OPT_msse3", value: 812, isUnsigned: true)
!1400 = !DIEnumerator(name: "OPT_msse4", value: 813, isUnsigned: true)
!1401 = !DIEnumerator(name: "OPT_msse4_1", value: 814, isUnsigned: true)
!1402 = !DIEnumerator(name: "OPT_msse4_2", value: 815, isUnsigned: true)
!1403 = !DIEnumerator(name: "OPT_msse4a", value: 816, isUnsigned: true)
!1404 = !DIEnumerator(name: "OPT_msseregparm", value: 817, isUnsigned: true)
!1405 = !DIEnumerator(name: "OPT_mssse3", value: 818, isUnsigned: true)
!1406 = !DIEnumerator(name: "OPT_mstack_arg_probe", value: 819, isUnsigned: true)
!1407 = !DIEnumerator(name: "OPT_mstackrealign", value: 820, isUnsigned: true)
!1408 = !DIEnumerator(name: "OPT_mstringop_strategy_", value: 821, isUnsigned: true)
!1409 = !DIEnumerator(name: "OPT_mtls_dialect_", value: 822, isUnsigned: true)
!1410 = !DIEnumerator(name: "OPT_mtls_direct_seg_refs", value: 823, isUnsigned: true)
!1411 = !DIEnumerator(name: "OPT_mtune_", value: 824, isUnsigned: true)
!1412 = !DIEnumerator(name: "OPT_muclibc", value: 825, isUnsigned: true)
!1413 = !DIEnumerator(name: "OPT_mveclibabi_", value: 826, isUnsigned: true)
!1414 = !DIEnumerator(name: "OPT_mxop", value: 827, isUnsigned: true)
!1415 = !DIEnumerator(name: "OPT_nocpp", value: 828, isUnsigned: true)
!1416 = !DIEnumerator(name: "OPT_nostdinc", value: 829, isUnsigned: true)
!1417 = !DIEnumerator(name: "OPT_nostdinc__", value: 830, isUnsigned: true)
!1418 = !DIEnumerator(name: "OPT_nostdlib", value: 831, isUnsigned: true)
!1419 = !DIEnumerator(name: "OPT_o", value: 832, isUnsigned: true)
!1420 = !DIEnumerator(name: "OPT_p", value: 833, isUnsigned: true)
!1421 = !DIEnumerator(name: "OPT_pedantic", value: 834, isUnsigned: true)
!1422 = !DIEnumerator(name: "OPT_pedantic_errors", value: 835, isUnsigned: true)
!1423 = !DIEnumerator(name: "OPT_pie", value: 836, isUnsigned: true)
!1424 = !DIEnumerator(name: "OPT_print_objc_runtime_info", value: 837, isUnsigned: true)
!1425 = !DIEnumerator(name: "OPT_print_pch_checksum", value: 838, isUnsigned: true)
!1426 = !DIEnumerator(name: "OPT_quiet", value: 839, isUnsigned: true)
!1427 = !DIEnumerator(name: "OPT_remap", value: 840, isUnsigned: true)
!1428 = !DIEnumerator(name: "OPT_shared", value: 841, isUnsigned: true)
!1429 = !DIEnumerator(name: "OPT_static_libgfortran", value: 842, isUnsigned: true)
!1430 = !DIEnumerator(name: "OPT_std_c__0x", value: 843, isUnsigned: true)
!1431 = !DIEnumerator(name: "OPT_std_c__98", value: 844, isUnsigned: true)
!1432 = !DIEnumerator(name: "OPT_std_c89", value: 845, isUnsigned: true)
!1433 = !DIEnumerator(name: "OPT_std_c90", value: 846, isUnsigned: true)
!1434 = !DIEnumerator(name: "OPT_std_c99", value: 847, isUnsigned: true)
!1435 = !DIEnumerator(name: "OPT_std_c9x", value: 848, isUnsigned: true)
!1436 = !DIEnumerator(name: "OPT_std_f2003", value: 849, isUnsigned: true)
!1437 = !DIEnumerator(name: "OPT_std_f2008", value: 850, isUnsigned: true)
!1438 = !DIEnumerator(name: "OPT_std_f95", value: 851, isUnsigned: true)
!1439 = !DIEnumerator(name: "OPT_std_gnu", value: 852, isUnsigned: true)
!1440 = !DIEnumerator(name: "OPT_std_gnu__0x", value: 853, isUnsigned: true)
!1441 = !DIEnumerator(name: "OPT_std_gnu__98", value: 854, isUnsigned: true)
!1442 = !DIEnumerator(name: "OPT_std_gnu89", value: 855, isUnsigned: true)
!1443 = !DIEnumerator(name: "OPT_std_gnu90", value: 856, isUnsigned: true)
!1444 = !DIEnumerator(name: "OPT_std_gnu99", value: 857, isUnsigned: true)
!1445 = !DIEnumerator(name: "OPT_std_gnu9x", value: 858, isUnsigned: true)
!1446 = !DIEnumerator(name: "OPT_std_iso9899_1990", value: 859, isUnsigned: true)
!1447 = !DIEnumerator(name: "OPT_std_iso9899_199409", value: 860, isUnsigned: true)
!1448 = !DIEnumerator(name: "OPT_std_iso9899_1999", value: 861, isUnsigned: true)
!1449 = !DIEnumerator(name: "OPT_std_iso9899_199x", value: 862, isUnsigned: true)
!1450 = !DIEnumerator(name: "OPT_std_legacy", value: 863, isUnsigned: true)
!1451 = !DIEnumerator(name: "OPT_traditional_cpp", value: 864, isUnsigned: true)
!1452 = !DIEnumerator(name: "OPT_trigraphs", value: 865, isUnsigned: true)
!1453 = !DIEnumerator(name: "OPT_undef", value: 866, isUnsigned: true)
!1454 = !DIEnumerator(name: "OPT_v", value: 867, isUnsigned: true)
!1455 = !DIEnumerator(name: "OPT_version", value: 868, isUnsigned: true)
!1456 = !DIEnumerator(name: "OPT_w", value: 869, isUnsigned: true)
!1457 = !DIEnumerator(name: "N_OPTS", value: 870, isUnsigned: true)
!1458 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "integer_type_kind", file: !133, line: 3745, baseType: !5, size: 32, elements: !1459)
!1459 = !{!1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471}
!1460 = !DIEnumerator(name: "itk_char", value: 0, isUnsigned: true)
!1461 = !DIEnumerator(name: "itk_signed_char", value: 1, isUnsigned: true)
!1462 = !DIEnumerator(name: "itk_unsigned_char", value: 2, isUnsigned: true)
!1463 = !DIEnumerator(name: "itk_short", value: 3, isUnsigned: true)
!1464 = !DIEnumerator(name: "itk_unsigned_short", value: 4, isUnsigned: true)
!1465 = !DIEnumerator(name: "itk_int", value: 5, isUnsigned: true)
!1466 = !DIEnumerator(name: "itk_unsigned_int", value: 6, isUnsigned: true)
!1467 = !DIEnumerator(name: "itk_long", value: 7, isUnsigned: true)
!1468 = !DIEnumerator(name: "itk_unsigned_long", value: 8, isUnsigned: true)
!1469 = !DIEnumerator(name: "itk_long_long", value: 9, isUnsigned: true)
!1470 = !DIEnumerator(name: "itk_unsigned_long_long", value: 10, isUnsigned: true)
!1471 = !DIEnumerator(name: "itk_none", value: 11, isUnsigned: true)
!1472 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !1473, line: 82, baseType: !5, size: 32, elements: !1474)
!1473 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1474 = !{!1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594}
!1475 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!1476 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!1477 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!1478 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!1479 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!1480 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!1481 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!1482 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!1483 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!1484 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!1485 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!1486 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!1487 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!1488 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!1489 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!1490 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!1491 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!1492 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!1493 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!1494 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!1495 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!1496 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!1497 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!1498 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!1499 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!1500 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!1501 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!1502 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!1503 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!1504 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!1505 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!1506 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!1507 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!1508 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!1509 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!1510 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!1511 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!1512 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!1513 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!1514 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!1515 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!1516 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!1517 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!1518 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!1519 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!1520 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!1521 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!1522 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!1523 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!1524 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!1525 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!1526 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!1527 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!1528 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!1529 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!1530 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!1531 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!1532 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!1533 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!1534 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!1535 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!1536 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!1537 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!1538 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!1539 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!1540 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!1541 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!1542 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!1543 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!1544 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!1545 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!1546 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!1547 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!1548 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!1549 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!1550 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!1551 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!1552 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!1553 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!1554 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!1555 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!1556 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!1557 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!1558 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!1559 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!1560 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!1561 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!1562 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!1563 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!1564 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!1565 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!1566 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!1567 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!1568 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!1569 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!1570 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!1571 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!1572 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!1573 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!1574 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!1575 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!1576 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!1577 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!1578 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!1579 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!1580 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!1581 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!1582 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!1583 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!1584 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!1585 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!1586 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!1587 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!1588 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!1589 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!1590 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!1591 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!1592 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!1593 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!1594 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!1595 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !402, line: 727, baseType: !5, size: 32, elements: !1596)
!1596 = !{!1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620}
!1597 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!1598 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!1599 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!1600 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!1601 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!1602 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!1603 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!1604 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!1605 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!1606 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!1607 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!1608 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!1609 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!1610 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!1611 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!1612 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!1613 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!1614 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!1615 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!1616 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!1617 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!1618 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!1619 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!1620 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!1621 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !341, line: 295, baseType: !5, size: 32, elements: !1622)
!1622 = !{!1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634}
!1623 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!1624 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!1625 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!1626 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!1627 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!1628 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!1629 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!1630 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!1631 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!1632 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!1633 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!1634 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!1635 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !133, line: 4288, baseType: !5, size: 32, elements: !1636)
!1636 = !{!1637, !1638, !1639, !1640, !1641}
!1637 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!1638 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!1639 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!1640 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!1641 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!1642 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !1643, line: 119, baseType: !5, size: 32, elements: !1644)
!1643 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1644 = !{!1645, !1646, !1647, !1648}
!1645 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!1646 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!1647 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!1648 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!1649 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "li_flags", file: !328, line: 498, baseType: !5, size: 32, elements: !1650)
!1650 = !{!1651, !1652, !1653}
!1651 = !DIEnumerator(name: "LI_INCLUDE_ROOT", value: 1, isUnsigned: true)
!1652 = !DIEnumerator(name: "LI_FROM_INNERMOST", value: 2, isUnsigned: true)
!1653 = !DIEnumerator(name: "LI_ONLY_INNERMOST", value: 4, isUnsigned: true)
!1654 = !{!1655, !1939, !132, !1752, !1785, !5, !1987, !3045, !2020, !1924, !440, !1709, !1657, !3047, !1966, !2239, !3049, !3055, !2228}
!1655 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1656, line: 56, baseType: !1657)
!1656 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1657 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1658, size: 64)
!1658 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !133, line: 3371, size: 1792, elements: !1659)
!1659 = !{!1660, !1693, !1699, !1712, !1731, !1742, !1747, !1758, !1764, !1778, !1790, !1828, !2376, !2404, !2421, !2422, !2427, !2436, !2442, !2447, !2451, !2455, !2697, !2744, !2750, !2756, !2763, !2776, !2790, !2807, !2819, !2841, !2856, !3027}
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1658, file: !133, line: 3372, baseType: !1661, size: 64)
!1661 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !133, line: 360, size: 64, elements: !1662)
!1662 = !{!1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692}
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1661, file: !133, line: 361, baseType: !5, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1661, file: !133, line: 363, baseType: !5, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1661, file: !133, line: 364, baseType: !5, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1661, file: !133, line: 365, baseType: !5, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1661, file: !133, line: 366, baseType: !5, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1661, file: !133, line: 367, baseType: !5, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1661, file: !133, line: 368, baseType: !5, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1661, file: !133, line: 369, baseType: !5, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1661, file: !133, line: 370, baseType: !5, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1661, file: !133, line: 372, baseType: !5, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1661, file: !133, line: 373, baseType: !5, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1661, file: !133, line: 374, baseType: !5, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1661, file: !133, line: 375, baseType: !5, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1661, file: !133, line: 376, baseType: !5, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1661, file: !133, line: 377, baseType: !5, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1661, file: !133, line: 378, baseType: !5, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1661, file: !133, line: 379, baseType: !5, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1661, file: !133, line: 381, baseType: !5, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1661, file: !133, line: 382, baseType: !5, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1661, file: !133, line: 383, baseType: !5, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1661, file: !133, line: 384, baseType: !5, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1661, file: !133, line: 385, baseType: !5, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1661, file: !133, line: 386, baseType: !5, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1661, file: !133, line: 387, baseType: !5, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1661, file: !133, line: 388, baseType: !5, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1661, file: !133, line: 390, baseType: !5, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1661, file: !133, line: 391, baseType: !5, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1661, file: !133, line: 392, baseType: !5, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1661, file: !133, line: 394, baseType: !5, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1661, file: !133, line: 399, baseType: !5, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1658, file: !133, line: 3373, baseType: !1694, size: 192)
!1694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !133, line: 402, size: 192, elements: !1695)
!1695 = !{!1696, !1697, !1698}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1694, file: !133, line: 403, baseType: !1661, size: 64)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1694, file: !133, line: 404, baseType: !1655, size: 64, offset: 64)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1694, file: !133, line: 405, baseType: !1655, size: 64, offset: 128)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1658, file: !133, line: 3374, baseType: !1700, size: 320)
!1700 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !133, line: 1384, size: 320, elements: !1701)
!1701 = !{!1702, !1703}
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1700, file: !133, line: 1385, baseType: !1694, size: 192)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1700, file: !133, line: 1386, baseType: !1704, size: 128, offset: 192)
!1704 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1705, line: 58, baseType: !1706)
!1705 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1706 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1705, line: 54, size: 128, elements: !1707)
!1707 = !{!1708, !1710}
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1706, file: !1705, line: 56, baseType: !1709, size: 64)
!1709 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1706, file: !1705, line: 57, baseType: !1711, size: 64, offset: 64)
!1711 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1658, file: !133, line: 3375, baseType: !1713, size: 256)
!1713 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !133, line: 1397, size: 256, elements: !1714)
!1714 = !{!1715, !1716}
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1713, file: !133, line: 1398, baseType: !1694, size: 192)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1713, file: !133, line: 1399, baseType: !1717, size: 64, offset: 192)
!1717 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1718, size: 64)
!1718 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1719, line: 52, size: 256, elements: !1720)
!1719 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1720 = !{!1721, !1722, !1723, !1724, !1725, !1726, !1727}
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1718, file: !1719, line: 56, baseType: !5, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1718, file: !1719, line: 57, baseType: !5, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1718, file: !1719, line: 58, baseType: !5, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1718, file: !1719, line: 59, baseType: !5, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1718, file: !1719, line: 60, baseType: !5, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1718, file: !1719, line: 61, baseType: !5, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1718, file: !1719, line: 62, baseType: !1728, size: 192, offset: 64)
!1728 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1709, size: 192, elements: !1729)
!1729 = !{!1730}
!1730 = !DISubrange(count: 3)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1658, file: !133, line: 3376, baseType: !1732, size: 256)
!1732 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !133, line: 1408, size: 256, elements: !1733)
!1733 = !{!1734, !1735}
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1732, file: !133, line: 1409, baseType: !1694, size: 192)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1732, file: !133, line: 1410, baseType: !1736, size: 64, offset: 192)
!1736 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1737, size: 64)
!1737 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1738, line: 27, size: 192, elements: !1739)
!1738 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1739 = !{!1740, !1741}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1737, file: !1738, line: 29, baseType: !1704, size: 128)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1737, file: !1738, line: 30, baseType: !3, size: 32, offset: 128)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1658, file: !133, line: 3377, baseType: !1743, size: 256)
!1743 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !133, line: 1437, size: 256, elements: !1744)
!1744 = !{!1745, !1746}
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1743, file: !133, line: 1438, baseType: !1694, size: 192)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1743, file: !133, line: 1439, baseType: !1655, size: 64, offset: 192)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1658, file: !133, line: 3378, baseType: !1748, size: 256)
!1748 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !133, line: 1418, size: 256, elements: !1749)
!1749 = !{!1750, !1751, !1753}
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1748, file: !133, line: 1419, baseType: !1694, size: 192)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1748, file: !133, line: 1420, baseType: !1752, size: 32, offset: 192)
!1752 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1748, file: !133, line: 1421, baseType: !1754, size: 8, offset: 224)
!1754 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1755, size: 8, elements: !1756)
!1755 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1756 = !{!1757}
!1757 = !DISubrange(count: 1)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1658, file: !133, line: 3379, baseType: !1759, size: 320)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !133, line: 1428, size: 320, elements: !1760)
!1760 = !{!1761, !1762, !1763}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1759, file: !133, line: 1429, baseType: !1694, size: 192)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1759, file: !133, line: 1430, baseType: !1655, size: 64, offset: 192)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1759, file: !133, line: 1431, baseType: !1655, size: 64, offset: 256)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1658, file: !133, line: 3380, baseType: !1765, size: 320)
!1765 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !133, line: 1460, size: 320, elements: !1766)
!1766 = !{!1767, !1768}
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1765, file: !133, line: 1461, baseType: !1694, size: 192)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1765, file: !133, line: 1462, baseType: !1769, size: 128, offset: 192)
!1769 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1770, line: 31, size: 128, elements: !1771)
!1770 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1771 = !{!1772, !1776, !1777}
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1769, file: !1770, line: 32, baseType: !1773, size: 64)
!1773 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1774, size: 64)
!1774 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1775)
!1775 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1769, file: !1770, line: 33, baseType: !5, size: 32, offset: 64)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1769, file: !1770, line: 34, baseType: !5, size: 32, offset: 96)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1658, file: !133, line: 3381, baseType: !1779, size: 384)
!1779 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !133, line: 2507, size: 384, elements: !1780)
!1780 = !{!1781, !1782, !1787, !1788, !1789}
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1779, file: !133, line: 2508, baseType: !1694, size: 192)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1779, file: !133, line: 2509, baseType: !1783, size: 32, offset: 192)
!1783 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1784, line: 58, baseType: !1785)
!1784 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1785 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1786, line: 44, baseType: !5)
!1786 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1779, file: !133, line: 2510, baseType: !5, size: 32, offset: 224)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1779, file: !133, line: 2511, baseType: !1655, size: 64, offset: 256)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1779, file: !133, line: 2512, baseType: !1655, size: 64, offset: 320)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1658, file: !133, line: 3382, baseType: !1791, size: 896)
!1791 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !133, line: 2652, size: 896, elements: !1792)
!1792 = !{!1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825}
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1791, file: !133, line: 2653, baseType: !1779, size: 384)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1791, file: !133, line: 2654, baseType: !1655, size: 64, offset: 384)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1791, file: !133, line: 2656, baseType: !5, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1791, file: !133, line: 2658, baseType: !5, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1791, file: !133, line: 2659, baseType: !5, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1791, file: !133, line: 2660, baseType: !5, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1791, file: !133, line: 2661, baseType: !5, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1791, file: !133, line: 2662, baseType: !5, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1791, file: !133, line: 2663, baseType: !5, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1791, file: !133, line: 2664, baseType: !5, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1791, file: !133, line: 2666, baseType: !5, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1791, file: !133, line: 2667, baseType: !5, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1791, file: !133, line: 2668, baseType: !5, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1791, file: !133, line: 2669, baseType: !5, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1791, file: !133, line: 2670, baseType: !5, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1791, file: !133, line: 2671, baseType: !5, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1791, file: !133, line: 2672, baseType: !5, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1791, file: !133, line: 2673, baseType: !5, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1791, file: !133, line: 2674, baseType: !5, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1791, file: !133, line: 2678, baseType: !5, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1791, file: !133, line: 2682, baseType: !5, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1791, file: !133, line: 2685, baseType: !5, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1791, file: !133, line: 2688, baseType: !5, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1791, file: !133, line: 2690, baseType: !5, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1791, file: !133, line: 2692, baseType: !5, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1791, file: !133, line: 2695, baseType: !5, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1791, file: !133, line: 2698, baseType: !5, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1791, file: !133, line: 2703, baseType: !5, size: 32, offset: 512)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1791, file: !133, line: 2705, baseType: !1655, size: 64, offset: 576)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1791, file: !133, line: 2706, baseType: !1655, size: 64, offset: 640)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1791, file: !133, line: 2707, baseType: !1655, size: 64, offset: 704)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1791, file: !133, line: 2708, baseType: !1655, size: 64, offset: 768)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1791, file: !133, line: 2711, baseType: !1826, size: 64, offset: 832)
!1826 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1827, size: 64)
!1827 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !133, line: 2711, flags: DIFlagFwdDecl)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1658, file: !133, line: 3383, baseType: !1829, size: 960)
!1829 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !133, line: 2756, size: 960, elements: !1830)
!1830 = !{!1831, !1832}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1829, file: !133, line: 2757, baseType: !1791, size: 896)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1829, file: !133, line: 2758, baseType: !1833, size: 64, offset: 896)
!1833 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1656, line: 50, baseType: !1834)
!1834 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1835, size: 64)
!1835 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1836, line: 240, size: 384, elements: !1837)
!1836 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1837 = !{!1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848}
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1835, file: !1836, line: 242, baseType: !5, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1835, file: !1836, line: 245, baseType: !5, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1835, file: !1836, line: 252, baseType: !5, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1835, file: !1836, line: 257, baseType: !5, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1835, file: !1836, line: 265, baseType: !5, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1835, file: !1836, line: 277, baseType: !5, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1835, file: !1836, line: 291, baseType: !5, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1835, file: !1836, line: 298, baseType: !5, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1835, file: !1836, line: 305, baseType: !5, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1835, file: !1836, line: 310, baseType: !5, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1835, file: !1836, line: 321, baseType: !1849, size: 320, offset: 64)
!1849 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1836, line: 315, size: 320, elements: !1850)
!1850 = !{!1851, !2309, !2311, !2374, !2375}
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1849, file: !1836, line: 316, baseType: !1852, size: 64)
!1852 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1853, size: 64, elements: !1756)
!1853 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1836, line: 183, baseType: !1854)
!1854 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1836, line: 166, size: 64, elements: !1855)
!1855 = !{!1856, !1857, !1858, !1861, !1862, !1870, !1871, !1883, !1886, !1948, !1949, !2286, !2299, !2306}
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1854, file: !1836, line: 168, baseType: !1752, size: 32)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1854, file: !1836, line: 169, baseType: !5, size: 32)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1854, file: !1836, line: 170, baseType: !1859, size: 64)
!1859 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1860, size: 64)
!1860 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1755)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1854, file: !1836, line: 171, baseType: !1833, size: 64)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1854, file: !1836, line: 172, baseType: !1863, size: 64)
!1863 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1656, line: 53, baseType: !1864)
!1864 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1865, size: 64)
!1865 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1836, line: 359, size: 128, elements: !1866)
!1866 = !{!1867, !1868}
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1865, file: !1836, line: 360, baseType: !1752, size: 32)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1865, file: !1836, line: 361, baseType: !1869, size: 64, offset: 64)
!1869 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1833, size: 64, elements: !1756)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1854, file: !1836, line: 173, baseType: !3, size: 32)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1854, file: !1836, line: 174, baseType: !1872, size: 32)
!1872 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1836, line: 133, baseType: !1873)
!1873 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1836, line: 115, size: 32, elements: !1874)
!1874 = !{!1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882}
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1873, file: !1836, line: 118, baseType: !5, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1873, file: !1836, line: 120, baseType: !5, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1873, file: !1836, line: 121, baseType: !5, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1873, file: !1836, line: 123, baseType: !5, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1873, file: !1836, line: 125, baseType: !5, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1873, file: !1836, line: 127, baseType: !5, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1873, file: !1836, line: 130, baseType: !5, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1873, file: !1836, line: 132, baseType: !5, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1854, file: !1836, line: 175, baseType: !1884, size: 64)
!1884 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1885, size: 64)
!1885 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1836, line: 175, flags: DIFlagFwdDecl)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1854, file: !1836, line: 176, baseType: !1887, size: 64)
!1887 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1888, size: 64)
!1888 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1889, line: 75, size: 256, elements: !1890)
!1889 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1890 = !{!1891, !1905, !1906, !1907}
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1888, file: !1889, line: 76, baseType: !1892, size: 64)
!1892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1893, size: 64)
!1893 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1889, line: 68, baseType: !1894)
!1894 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1889, line: 63, size: 320, elements: !1895)
!1895 = !{!1896, !1898, !1899, !1900}
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1894, file: !1889, line: 64, baseType: !1897, size: 64)
!1897 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1894, size: 64)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1894, file: !1889, line: 65, baseType: !1897, size: 64, offset: 64)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1894, file: !1889, line: 66, baseType: !5, size: 32, offset: 128)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1894, file: !1889, line: 67, baseType: !1901, size: 128, offset: 192)
!1901 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1902, size: 128, elements: !1903)
!1902 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1889, line: 29, baseType: !1709)
!1903 = !{!1904}
!1904 = !DISubrange(count: 2)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1888, file: !1889, line: 77, baseType: !1892, size: 64, offset: 64)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1888, file: !1889, line: 78, baseType: !5, size: 32, offset: 128)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1888, file: !1889, line: 79, baseType: !1908, size: 64, offset: 192)
!1908 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1909, size: 64)
!1909 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1889, line: 49, baseType: !1910)
!1910 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1889, line: 45, size: 832, elements: !1911)
!1911 = !{!1912, !1913, !1914}
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1910, file: !1889, line: 46, baseType: !1897, size: 64)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1910, file: !1889, line: 47, baseType: !1887, size: 64, offset: 64)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1910, file: !1889, line: 48, baseType: !1915, size: 704, offset: 128)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1916, line: 164, size: 704, elements: !1917)
!1916 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1917 = !{!1918, !1919, !1930, !1931, !1932, !1933, !1934, !1935, !1940, !1944, !1945, !1946, !1947}
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1915, file: !1916, line: 166, baseType: !1711, size: 64)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1915, file: !1916, line: 167, baseType: !1920, size: 64, offset: 64)
!1920 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1921, size: 64)
!1921 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1916, line: 157, size: 192, elements: !1922)
!1922 = !{!1923, !1925, !1926}
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1921, file: !1916, line: 159, baseType: !1924, size: 64)
!1924 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1755, size: 64)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1921, file: !1916, line: 160, baseType: !1920, size: 64, offset: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1921, file: !1916, line: 161, baseType: !1927, size: 32, offset: 128)
!1927 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1755, size: 32, elements: !1928)
!1928 = !{!1929}
!1929 = !DISubrange(count: 4)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1915, file: !1916, line: 168, baseType: !1924, size: 64, offset: 128)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1915, file: !1916, line: 169, baseType: !1924, size: 64, offset: 192)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1915, file: !1916, line: 170, baseType: !1924, size: 64, offset: 256)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1915, file: !1916, line: 171, baseType: !1711, size: 64, offset: 320)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1915, file: !1916, line: 172, baseType: !1752, size: 32, offset: 384)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1915, file: !1916, line: 176, baseType: !1936, size: 64, offset: 448)
!1936 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1937, size: 64)
!1937 = !DISubroutineType(types: !1938)
!1938 = !{!1920, !1939, !1711}
!1939 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1915, file: !1916, line: 177, baseType: !1941, size: 64, offset: 512)
!1941 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1942, size: 64)
!1942 = !DISubroutineType(types: !1943)
!1943 = !{null, !1939, !1920}
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1915, file: !1916, line: 178, baseType: !1939, size: 64, offset: 576)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1915, file: !1916, line: 179, baseType: !5, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1915, file: !1916, line: 180, baseType: !5, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1915, file: !1916, line: 184, baseType: !5, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1854, file: !1836, line: 177, baseType: !1655, size: 64)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1854, file: !1836, line: 178, baseType: !1950, size: 64)
!1950 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1951, size: 64)
!1951 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !341, line: 217, size: 832, elements: !1952)
!1952 = !{!1953, !2198, !2199, !2200, !2256, !2260, !2261, !2262, !2280, !2281, !2282, !2283, !2284, !2285}
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1951, file: !341, line: 219, baseType: !1954, size: 64)
!1954 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1955, size: 64)
!1955 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !341, line: 151, baseType: !1956)
!1956 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !341, line: 151, size: 128, elements: !1957)
!1957 = !{!1958}
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1956, file: !341, line: 151, baseType: !1959, size: 128)
!1959 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !341, line: 150, baseType: !1960)
!1960 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !341, line: 150, size: 128, elements: !1961)
!1961 = !{!1962, !1963, !1964}
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1960, file: !341, line: 150, baseType: !5, size: 32)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1960, file: !341, line: 150, baseType: !5, size: 32, offset: 32)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1960, file: !341, line: 150, baseType: !1965, size: 64, offset: 64)
!1965 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1966, size: 64, elements: !1756)
!1966 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1656, line: 108, baseType: !1967)
!1967 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1968, size: 64)
!1968 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !341, line: 122, size: 512, elements: !1969)
!1969 = !{!1970, !1971, !1972, !2190, !2191, !2192, !2193, !2194, !2195, !2196}
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1968, file: !341, line: 124, baseType: !1950, size: 64)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1968, file: !341, line: 125, baseType: !1950, size: 64, offset: 64)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1968, file: !341, line: 131, baseType: !1973, size: 64, offset: 128)
!1973 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !341, line: 128, size: 64, elements: !1974)
!1974 = !{!1975, !2189}
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1973, file: !341, line: 129, baseType: !1976, size: 64)
!1976 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1656, line: 66, baseType: !1977)
!1977 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1978, size: 64)
!1978 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !402, line: 143, size: 192, elements: !1979)
!1979 = !{!1980, !2187, !2188}
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1978, file: !402, line: 145, baseType: !1981, size: 64)
!1981 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1656, line: 69, baseType: !1982)
!1982 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1983, size: 64)
!1983 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !402, line: 136, size: 192, elements: !1984)
!1984 = !{!1985, !2185, !2186}
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1983, file: !402, line: 137, baseType: !1986, size: 64)
!1986 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1656, line: 58, baseType: !1987)
!1987 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1988, size: 64)
!1988 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !402, line: 737, size: 768, elements: !1989)
!1989 = !{!1990, !2007, !2040, !2046, !2051, !2056, !2063, !2069, !2075, !2080, !2094, !2099, !2105, !2110, !2120, !2125, !2143, !2150, !2157, !2163, !2168, !2174, !2180}
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1988, file: !402, line: 738, baseType: !1991, size: 256)
!1991 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !402, line: 271, size: 256, elements: !1992)
!1992 = !{!1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006}
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1991, file: !402, line: 274, baseType: !5, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1991, file: !402, line: 277, baseType: !5, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1991, file: !402, line: 281, baseType: !5, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1991, file: !402, line: 284, baseType: !5, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1991, file: !402, line: 291, baseType: !5, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1991, file: !402, line: 295, baseType: !5, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1991, file: !402, line: 298, baseType: !5, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1991, file: !402, line: 301, baseType: !5, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1991, file: !402, line: 307, baseType: !5, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1991, file: !402, line: 312, baseType: !5, size: 32, offset: 32)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1991, file: !402, line: 316, baseType: !1783, size: 32, offset: 64)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1991, file: !402, line: 319, baseType: !5, size: 32, offset: 96)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1991, file: !402, line: 323, baseType: !1950, size: 64, offset: 128)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1991, file: !402, line: 327, baseType: !1655, size: 64, offset: 192)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1988, file: !402, line: 739, baseType: !2008, size: 448)
!2008 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !402, line: 350, size: 448, elements: !2009)
!2009 = !{!2010, !2038}
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2008, file: !402, line: 353, baseType: !2011, size: 384)
!2011 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !402, line: 333, size: 384, elements: !2012)
!2012 = !{!2013, !2014, !2021}
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2011, file: !402, line: 336, baseType: !1991, size: 256)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !2011, file: !402, line: 343, baseType: !2015, size: 64, offset: 256)
!2015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2016, size: 64)
!2016 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1643, line: 37, size: 128, elements: !2017)
!2017 = !{!2018, !2019}
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2016, file: !1643, line: 39, baseType: !2015, size: 64)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !2016, file: !1643, line: 40, baseType: !2020, size: 64, offset: 64)
!2020 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1655, size: 64)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !2011, file: !402, line: 344, baseType: !2022, size: 64, offset: 320)
!2022 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2023, size: 64)
!2023 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1643, line: 45, size: 320, elements: !2024)
!2024 = !{!2025, !2026}
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2023, file: !1643, line: 47, baseType: !2022, size: 64)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !2023, file: !1643, line: 48, baseType: !2027, size: 256, offset: 64)
!2027 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !133, line: 1883, size: 256, elements: !2028)
!2028 = !{!2029, !2031, !2032, !2037}
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2027, file: !133, line: 1884, baseType: !2030, size: 64)
!2030 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2027, size: 64)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2027, file: !133, line: 1885, baseType: !2030, size: 64, offset: 64)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !2027, file: !133, line: 1891, baseType: !2033, size: 64, offset: 128)
!2033 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2027, file: !133, line: 1891, size: 64, elements: !2034)
!2034 = !{!2035, !2036}
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2033, file: !133, line: 1891, baseType: !1986, size: 64)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2033, file: !133, line: 1891, baseType: !1655, size: 64)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2027, file: !133, line: 1892, baseType: !2020, size: 64, offset: 192)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2008, file: !402, line: 359, baseType: !2039, size: 64, offset: 384)
!2039 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1655, size: 64, elements: !1756)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1988, file: !402, line: 740, baseType: !2041, size: 512)
!2041 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !402, line: 365, size: 512, elements: !2042)
!2042 = !{!2043, !2044, !2045}
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2041, file: !402, line: 368, baseType: !2011, size: 384)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !2041, file: !402, line: 373, baseType: !1655, size: 64, offset: 384)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !2041, file: !402, line: 374, baseType: !1655, size: 64, offset: 448)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1988, file: !402, line: 741, baseType: !2047, size: 576)
!2047 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !402, line: 380, size: 576, elements: !2048)
!2048 = !{!2049, !2050}
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2047, file: !402, line: 383, baseType: !2041, size: 512)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2047, file: !402, line: 389, baseType: !2039, size: 64, offset: 512)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1988, file: !402, line: 742, baseType: !2052, size: 320)
!2052 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !402, line: 395, size: 320, elements: !2053)
!2053 = !{!2054, !2055}
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2052, file: !402, line: 397, baseType: !1991, size: 256)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2052, file: !402, line: 400, baseType: !1976, size: 64, offset: 256)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1988, file: !402, line: 743, baseType: !2057, size: 448)
!2057 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !402, line: 406, size: 448, elements: !2058)
!2058 = !{!2059, !2060, !2061, !2062}
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2057, file: !402, line: 408, baseType: !1991, size: 256)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2057, file: !402, line: 412, baseType: !1655, size: 64, offset: 256)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2057, file: !402, line: 420, baseType: !1655, size: 64, offset: 320)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2057, file: !402, line: 423, baseType: !1976, size: 64, offset: 384)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1988, file: !402, line: 744, baseType: !2064, size: 384)
!2064 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !402, line: 429, size: 384, elements: !2065)
!2065 = !{!2066, !2067, !2068}
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2064, file: !402, line: 431, baseType: !1991, size: 256)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2064, file: !402, line: 434, baseType: !1655, size: 64, offset: 256)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !2064, file: !402, line: 437, baseType: !1976, size: 64, offset: 320)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1988, file: !402, line: 745, baseType: !2070, size: 384)
!2070 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !402, line: 443, size: 384, elements: !2071)
!2071 = !{!2072, !2073, !2074}
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2070, file: !402, line: 445, baseType: !1991, size: 256)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2070, file: !402, line: 449, baseType: !1655, size: 64, offset: 256)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !2070, file: !402, line: 453, baseType: !1976, size: 64, offset: 320)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1988, file: !402, line: 746, baseType: !2076, size: 320)
!2076 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !402, line: 459, size: 320, elements: !2077)
!2077 = !{!2078, !2079}
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2076, file: !402, line: 461, baseType: !1991, size: 256)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !2076, file: !402, line: 464, baseType: !1655, size: 64, offset: 256)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1988, file: !402, line: 747, baseType: !2081, size: 768)
!2081 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !402, line: 469, size: 768, elements: !2082)
!2082 = !{!2083, !2084, !2085, !2086, !2087}
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2081, file: !402, line: 471, baseType: !1991, size: 256)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2081, file: !402, line: 474, baseType: !5, size: 32, offset: 256)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !2081, file: !402, line: 475, baseType: !5, size: 32, offset: 288)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2081, file: !402, line: 478, baseType: !1655, size: 64, offset: 320)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !2081, file: !402, line: 481, baseType: !2088, size: 384, offset: 384)
!2088 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2089, size: 384, elements: !1756)
!2089 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !133, line: 1917, size: 384, elements: !2090)
!2090 = !{!2091, !2092, !2093}
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2089, file: !133, line: 1920, baseType: !2027, size: 256)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2089, file: !133, line: 1921, baseType: !1655, size: 64, offset: 256)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2089, file: !133, line: 1922, baseType: !1783, size: 32, offset: 320)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1988, file: !402, line: 748, baseType: !2095, size: 320)
!2095 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !402, line: 487, size: 320, elements: !2096)
!2096 = !{!2097, !2098}
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2095, file: !402, line: 490, baseType: !1991, size: 256)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2095, file: !402, line: 494, baseType: !1752, size: 32, offset: 256)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1988, file: !402, line: 749, baseType: !2100, size: 384)
!2100 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !402, line: 500, size: 384, elements: !2101)
!2101 = !{!2102, !2103, !2104}
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2100, file: !402, line: 502, baseType: !1991, size: 256)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2100, file: !402, line: 506, baseType: !1976, size: 64, offset: 256)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2100, file: !402, line: 510, baseType: !1976, size: 64, offset: 320)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1988, file: !402, line: 750, baseType: !2106, size: 320)
!2106 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !402, line: 529, size: 320, elements: !2107)
!2107 = !{!2108, !2109}
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2106, file: !402, line: 531, baseType: !1991, size: 256)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2106, file: !402, line: 540, baseType: !1976, size: 64, offset: 256)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1988, file: !402, line: 751, baseType: !2111, size: 704)
!2111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !402, line: 546, size: 704, elements: !2112)
!2112 = !{!2113, !2114, !2115, !2116, !2117, !2118, !2119}
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2111, file: !402, line: 549, baseType: !2041, size: 512)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2111, file: !402, line: 553, baseType: !1859, size: 64, offset: 512)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2111, file: !402, line: 557, baseType: !1775, size: 8, offset: 576)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2111, file: !402, line: 558, baseType: !1775, size: 8, offset: 584)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2111, file: !402, line: 559, baseType: !1775, size: 8, offset: 592)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2111, file: !402, line: 560, baseType: !1775, size: 8, offset: 600)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2111, file: !402, line: 566, baseType: !2039, size: 64, offset: 640)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1988, file: !402, line: 752, baseType: !2121, size: 384)
!2121 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !402, line: 571, size: 384, elements: !2122)
!2122 = !{!2123, !2124}
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2121, file: !402, line: 573, baseType: !2052, size: 320)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2121, file: !402, line: 577, baseType: !1655, size: 64, offset: 320)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1988, file: !402, line: 753, baseType: !2126, size: 576)
!2126 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !402, line: 600, size: 576, elements: !2127)
!2127 = !{!2128, !2129, !2130, !2133, !2142}
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2126, file: !402, line: 602, baseType: !2052, size: 320)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2126, file: !402, line: 605, baseType: !1655, size: 64, offset: 320)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2126, file: !402, line: 609, baseType: !2131, size: 64, offset: 384)
!2131 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2132, line: 46, baseType: !1709)
!2132 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2126, file: !402, line: 612, baseType: !2134, size: 64, offset: 448)
!2134 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2135, size: 64)
!2135 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !402, line: 581, size: 320, elements: !2136)
!2136 = !{!2137, !2138, !2139, !2140, !2141}
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2135, file: !402, line: 583, baseType: !132, size: 32)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2135, file: !402, line: 586, baseType: !1655, size: 64, offset: 64)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2135, file: !402, line: 589, baseType: !1655, size: 64, offset: 128)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2135, file: !402, line: 592, baseType: !1655, size: 64, offset: 192)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2135, file: !402, line: 595, baseType: !1655, size: 64, offset: 256)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2126, file: !402, line: 616, baseType: !1976, size: 64, offset: 512)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1988, file: !402, line: 754, baseType: !2144, size: 512)
!2144 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !402, line: 622, size: 512, elements: !2145)
!2145 = !{!2146, !2147, !2148, !2149}
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2144, file: !402, line: 624, baseType: !2052, size: 320)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2144, file: !402, line: 628, baseType: !1655, size: 64, offset: 320)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2144, file: !402, line: 632, baseType: !1655, size: 64, offset: 384)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2144, file: !402, line: 636, baseType: !1655, size: 64, offset: 448)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1988, file: !402, line: 755, baseType: !2151, size: 704)
!2151 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !402, line: 642, size: 704, elements: !2152)
!2152 = !{!2153, !2154, !2155, !2156}
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2151, file: !402, line: 644, baseType: !2144, size: 512)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2151, file: !402, line: 648, baseType: !1655, size: 64, offset: 512)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2151, file: !402, line: 652, baseType: !1655, size: 64, offset: 576)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2151, file: !402, line: 653, baseType: !1655, size: 64, offset: 640)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1988, file: !402, line: 756, baseType: !2158, size: 448)
!2158 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !402, line: 663, size: 448, elements: !2159)
!2159 = !{!2160, !2161, !2162}
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2158, file: !402, line: 665, baseType: !2052, size: 320)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2158, file: !402, line: 668, baseType: !1655, size: 64, offset: 320)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2158, file: !402, line: 673, baseType: !1655, size: 64, offset: 384)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1988, file: !402, line: 757, baseType: !2164, size: 384)
!2164 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !402, line: 694, size: 384, elements: !2165)
!2165 = !{!2166, !2167}
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2164, file: !402, line: 696, baseType: !2052, size: 320)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2164, file: !402, line: 699, baseType: !1655, size: 64, offset: 320)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1988, file: !402, line: 758, baseType: !2169, size: 384)
!2169 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !402, line: 681, size: 384, elements: !2170)
!2170 = !{!2171, !2172, !2173}
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2169, file: !402, line: 683, baseType: !1991, size: 256)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2169, file: !402, line: 686, baseType: !1655, size: 64, offset: 256)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2169, file: !402, line: 689, baseType: !1655, size: 64, offset: 320)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1988, file: !402, line: 759, baseType: !2175, size: 384)
!2175 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !402, line: 707, size: 384, elements: !2176)
!2176 = !{!2177, !2178, !2179}
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2175, file: !402, line: 709, baseType: !1991, size: 256)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2175, file: !402, line: 712, baseType: !1655, size: 64, offset: 256)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2175, file: !402, line: 712, baseType: !1655, size: 64, offset: 320)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1988, file: !402, line: 760, baseType: !2181, size: 320)
!2181 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !402, line: 718, size: 320, elements: !2182)
!2182 = !{!2183, !2184}
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2181, file: !402, line: 720, baseType: !1991, size: 256)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2181, file: !402, line: 723, baseType: !1655, size: 64, offset: 256)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1983, file: !402, line: 138, baseType: !1982, size: 64, offset: 64)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1983, file: !402, line: 139, baseType: !1982, size: 64, offset: 128)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1978, file: !402, line: 146, baseType: !1981, size: 64, offset: 64)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1978, file: !402, line: 152, baseType: !1976, size: 64, offset: 128)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1973, file: !341, line: 130, baseType: !1833, size: 64)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1968, file: !341, line: 134, baseType: !1939, size: 64, offset: 192)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1968, file: !341, line: 137, baseType: !1655, size: 64, offset: 256)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1968, file: !341, line: 138, baseType: !1783, size: 32, offset: 320)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1968, file: !341, line: 142, baseType: !5, size: 32, offset: 352)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1968, file: !341, line: 144, baseType: !1752, size: 32, offset: 384)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1968, file: !341, line: 145, baseType: !1752, size: 32, offset: 416)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1968, file: !341, line: 146, baseType: !2197, size: 64, offset: 448)
!2197 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !341, line: 119, baseType: !1711)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1951, file: !341, line: 220, baseType: !1954, size: 64, offset: 64)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1951, file: !341, line: 223, baseType: !1939, size: 64, offset: 128)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1951, file: !341, line: 226, baseType: !2201, size: 64, offset: 192)
!2201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2202, size: 64)
!2202 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !328, line: 100, size: 1216, elements: !2203)
!2203 = !{!2204, !2205, !2206, !2207, !2208, !2213, !2214, !2215, !2229, !2230, !2231, !2232, !2233, !2234, !2235, !2236, !2237, !2238, !2246, !2254, !2255}
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2202, file: !328, line: 102, baseType: !1752, size: 32)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !2202, file: !328, line: 105, baseType: !5, size: 32, offset: 32)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2202, file: !328, line: 108, baseType: !1950, size: 64, offset: 64)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !2202, file: !328, line: 111, baseType: !1950, size: 64, offset: 128)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !2202, file: !328, line: 114, baseType: !2209, size: 64, offset: 192)
!2209 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !328, line: 41, size: 64, elements: !2210)
!2210 = !{!2211, !2212}
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !2209, file: !328, line: 42, baseType: !327, size: 32)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !2209, file: !328, line: 43, baseType: !5, size: 32, offset: 32)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !2202, file: !328, line: 117, baseType: !5, size: 32, offset: 256)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !2202, file: !328, line: 120, baseType: !5, size: 32, offset: 288)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !2202, file: !328, line: 123, baseType: !2216, size: 64, offset: 320)
!2216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2217, size: 64)
!2217 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !328, line: 87, baseType: !2218)
!2218 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !328, line: 87, size: 128, elements: !2219)
!2219 = !{!2220}
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2218, file: !328, line: 87, baseType: !2221, size: 128)
!2221 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !328, line: 85, baseType: !2222)
!2222 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !328, line: 85, size: 128, elements: !2223)
!2223 = !{!2224, !2225, !2226}
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2222, file: !328, line: 85, baseType: !5, size: 32)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2222, file: !328, line: 85, baseType: !5, size: 32, offset: 32)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2222, file: !328, line: 85, baseType: !2227, size: 64, offset: 64)
!2227 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2228, size: 64, elements: !1756)
!2228 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !328, line: 84, baseType: !2201)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !2202, file: !328, line: 126, baseType: !2201, size: 64, offset: 384)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2202, file: !328, line: 129, baseType: !2201, size: 64, offset: 448)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2202, file: !328, line: 132, baseType: !1939, size: 64, offset: 512)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !2202, file: !328, line: 139, baseType: !1655, size: 64, offset: 576)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !2202, file: !328, line: 143, baseType: !1704, size: 128, offset: 640)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !2202, file: !328, line: 146, baseType: !1704, size: 128, offset: 768)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !2202, file: !328, line: 148, baseType: !1775, size: 8, offset: 896)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !2202, file: !328, line: 149, baseType: !1775, size: 8, offset: 904)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !2202, file: !328, line: 153, baseType: !336, size: 32, offset: 928)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !2202, file: !328, line: 156, baseType: !2239, size: 64, offset: 960)
!2239 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2240, size: 64)
!2240 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !328, line: 48, size: 320, elements: !2241)
!2241 = !{!2242, !2243, !2244, !2245}
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2240, file: !328, line: 50, baseType: !1986, size: 64)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !2240, file: !328, line: 59, baseType: !1704, size: 128, offset: 64)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !2240, file: !328, line: 64, baseType: !1775, size: 8, offset: 192)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2240, file: !328, line: 67, baseType: !2239, size: 64, offset: 256)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !2202, file: !328, line: 159, baseType: !2247, size: 64, offset: 1024)
!2247 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2248, size: 64)
!2248 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !328, line: 72, size: 256, elements: !2249)
!2249 = !{!2250, !2251, !2252, !2253}
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !2248, file: !328, line: 74, baseType: !1967, size: 64)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2248, file: !328, line: 77, baseType: !2247, size: 64, offset: 64)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2248, file: !328, line: 78, baseType: !2247, size: 64, offset: 128)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !2248, file: !328, line: 81, baseType: !2247, size: 64, offset: 192)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !2202, file: !328, line: 162, baseType: !1775, size: 8, offset: 1088)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !2202, file: !328, line: 166, baseType: !1655, size: 64, offset: 1152)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1951, file: !341, line: 229, baseType: !2257, size: 128, offset: 256)
!2257 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2258, size: 128, elements: !1903)
!2258 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2259, size: 64)
!2259 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !341, line: 229, flags: DIFlagFwdDecl)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1951, file: !341, line: 232, baseType: !1950, size: 64, offset: 384)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1951, file: !341, line: 233, baseType: !1950, size: 64, offset: 448)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1951, file: !341, line: 238, baseType: !2263, size: 64, offset: 512)
!2263 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !341, line: 235, size: 64, elements: !2264)
!2264 = !{!2265, !2271}
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2263, file: !341, line: 236, baseType: !2266, size: 64)
!2266 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2267, size: 64)
!2267 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !341, line: 273, size: 128, elements: !2268)
!2268 = !{!2269, !2270}
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2267, file: !341, line: 275, baseType: !1976, size: 64)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2267, file: !341, line: 278, baseType: !1976, size: 64, offset: 64)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2263, file: !341, line: 237, baseType: !2272, size: 64)
!2272 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2273, size: 64)
!2273 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !341, line: 259, size: 320, elements: !2274)
!2274 = !{!2275, !2276, !2277, !2278, !2279}
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2273, file: !341, line: 261, baseType: !1833, size: 64)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2273, file: !341, line: 262, baseType: !1833, size: 64, offset: 64)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2273, file: !341, line: 266, baseType: !1833, size: 64, offset: 128)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2273, file: !341, line: 267, baseType: !1833, size: 64, offset: 192)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2273, file: !341, line: 270, baseType: !1752, size: 32, offset: 256)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1951, file: !341, line: 241, baseType: !2197, size: 64, offset: 576)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1951, file: !341, line: 244, baseType: !1752, size: 32, offset: 640)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1951, file: !341, line: 247, baseType: !1752, size: 32, offset: 672)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1951, file: !341, line: 250, baseType: !1752, size: 32, offset: 704)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1951, file: !341, line: 253, baseType: !1752, size: 32, offset: 736)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1951, file: !341, line: 256, baseType: !1752, size: 32, offset: 768)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1854, file: !1836, line: 179, baseType: !2287, size: 64)
!2287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2288, size: 64)
!2288 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1836, line: 150, baseType: !2289)
!2289 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1836, line: 142, size: 320, elements: !2290)
!2290 = !{!2291, !2292, !2293, !2294, !2297, !2298}
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2289, file: !1836, line: 144, baseType: !1655, size: 64)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2289, file: !1836, line: 145, baseType: !1833, size: 64, offset: 64)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2289, file: !1836, line: 146, baseType: !1833, size: 64, offset: 128)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2289, file: !1836, line: 147, baseType: !2295, size: 32, offset: 192)
!2295 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2296, line: 31, baseType: !1752)
!2296 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2289, file: !1836, line: 148, baseType: !5, size: 32, offset: 224)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2289, file: !1836, line: 149, baseType: !1775, size: 8, offset: 256)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1854, file: !1836, line: 180, baseType: !2300, size: 64)
!2300 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2301, size: 64)
!2301 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1836, line: 162, baseType: !2302)
!2302 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1836, line: 159, size: 128, elements: !2303)
!2303 = !{!2304, !2305}
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2302, file: !1836, line: 160, baseType: !1655, size: 64)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2302, file: !1836, line: 161, baseType: !1711, size: 64, offset: 64)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1854, file: !1836, line: 181, baseType: !2307, size: 64)
!2307 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2308, size: 64)
!2308 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1836, line: 181, flags: DIFlagFwdDecl)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1849, file: !1836, line: 317, baseType: !2310, size: 64)
!2310 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1711, size: 64, elements: !1756)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1849, file: !1836, line: 318, baseType: !2312, size: 320)
!2312 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1836, line: 188, size: 320, elements: !2313)
!2313 = !{!2314, !2316, !2373}
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2312, file: !1836, line: 190, baseType: !2315, size: 192)
!2315 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1853, size: 192, elements: !1729)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2312, file: !1836, line: 193, baseType: !2317, size: 64, offset: 192)
!2317 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2318, size: 64)
!2318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1836, line: 206, size: 320, elements: !2319)
!2319 = !{!2320, !2358, !2359, !2360, !2372}
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2318, file: !1836, line: 208, baseType: !2321, size: 64)
!2321 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2322, size: 64)
!2322 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1656, line: 62, baseType: !2323)
!2323 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2324, line: 538, size: 256, elements: !2325)
!2324 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2325 = !{!2326, !2330, !2336, !2349}
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2323, file: !2324, line: 539, baseType: !2327, size: 32)
!2327 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !2324, line: 482, size: 32, elements: !2328)
!2328 = !{!2329}
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2327, file: !2324, line: 484, baseType: !5, size: 32)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !2323, file: !2324, line: 540, baseType: !2331, size: 192)
!2331 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !2324, line: 488, size: 192, elements: !2332)
!2332 = !{!2333, !2334, !2335}
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2331, file: !2324, line: 489, baseType: !2327, size: 32)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2331, file: !2324, line: 492, baseType: !1859, size: 64, offset: 64)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2331, file: !2324, line: 496, baseType: !1655, size: 64, offset: 128)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !2323, file: !2324, line: 541, baseType: !2337, size: 256)
!2337 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !2324, line: 504, size: 256, elements: !2338)
!2338 = !{!2339, !2340, !2347, !2348}
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2337, file: !2324, line: 505, baseType: !2327, size: 32)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2337, file: !2324, line: 509, baseType: !2341, size: 64, offset: 64)
!2341 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !2324, line: 501, baseType: !2342)
!2342 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2343, size: 64)
!2343 = !DISubroutineType(types: !2344)
!2344 = !{null, !2345}
!2345 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2346, size: 64)
!2346 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2337, file: !2324, line: 510, baseType: !2345, size: 64, offset: 128)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2337, file: !2324, line: 513, baseType: !2321, size: 64, offset: 192)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !2323, file: !2324, line: 542, baseType: !2350, size: 128)
!2350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !2324, line: 530, size: 128, elements: !2351)
!2351 = !{!2352, !2353}
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2350, file: !2324, line: 531, baseType: !2327, size: 32)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2350, file: !2324, line: 534, baseType: !2354, size: 64, offset: 64)
!2354 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !2324, line: 525, baseType: !2355)
!2355 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2356, size: 64)
!2356 = !DISubroutineType(types: !2357)
!2357 = !{!1775, !1655, !1859, !1709, !1709}
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2318, file: !1836, line: 211, baseType: !5, size: 32, offset: 64)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2318, file: !1836, line: 214, baseType: !1711, size: 64, offset: 128)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2318, file: !1836, line: 224, baseType: !2361, size: 64, offset: 192)
!2361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2362, size: 64)
!2362 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1836, line: 202, baseType: !2363)
!2363 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1836, line: 202, size: 128, elements: !2364)
!2364 = !{!2365}
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2363, file: !1836, line: 202, baseType: !2366, size: 128)
!2366 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1836, line: 200, baseType: !2367)
!2367 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1836, line: 200, size: 128, elements: !2368)
!2368 = !{!2369, !2370, !2371}
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2367, file: !1836, line: 200, baseType: !5, size: 32)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2367, file: !1836, line: 200, baseType: !5, size: 32, offset: 32)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2367, file: !1836, line: 200, baseType: !1869, size: 64, offset: 64)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2318, file: !1836, line: 234, baseType: !2361, size: 64, offset: 256)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2312, file: !1836, line: 197, baseType: !1711, size: 64, offset: 256)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1849, file: !1836, line: 319, baseType: !1718, size: 256)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1849, file: !1836, line: 320, baseType: !1737, size: 192)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1658, file: !133, line: 3384, baseType: !2377, size: 1472)
!2377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !133, line: 3114, size: 1472, elements: !2378)
!2378 = !{!2379, !2400, !2401, !2402, !2403}
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2377, file: !133, line: 3115, baseType: !2380, size: 1216)
!2380 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !133, line: 2984, size: 1216, elements: !2381)
!2381 = !{!2382, !2383, !2384, !2385, !2386, !2387, !2388, !2389, !2390, !2391, !2392, !2393, !2394, !2395, !2396, !2397, !2398, !2399}
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2380, file: !133, line: 2985, baseType: !1829, size: 960)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2380, file: !133, line: 2986, baseType: !1655, size: 64, offset: 960)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2380, file: !133, line: 2987, baseType: !1655, size: 64, offset: 1024)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2380, file: !133, line: 2988, baseType: !1655, size: 64, offset: 1088)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2380, file: !133, line: 2991, baseType: !5, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2380, file: !133, line: 2992, baseType: !5, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2380, file: !133, line: 2993, baseType: !5, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2380, file: !133, line: 2994, baseType: !5, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2380, file: !133, line: 2995, baseType: !5, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2380, file: !133, line: 2996, baseType: !5, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2380, file: !133, line: 2998, baseType: !5, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2380, file: !133, line: 3000, baseType: !5, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2380, file: !133, line: 3002, baseType: !5, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2380, file: !133, line: 3003, baseType: !5, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2380, file: !133, line: 3004, baseType: !5, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2380, file: !133, line: 3005, baseType: !5, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2380, file: !133, line: 3007, baseType: !5, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2380, file: !133, line: 3010, baseType: !5, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2377, file: !133, line: 3117, baseType: !1655, size: 64, offset: 1216)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2377, file: !133, line: 3119, baseType: !1655, size: 64, offset: 1280)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2377, file: !133, line: 3121, baseType: !1655, size: 64, offset: 1344)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2377, file: !133, line: 3123, baseType: !1655, size: 64, offset: 1408)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1658, file: !133, line: 3385, baseType: !2405, size: 1088)
!2405 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !133, line: 2874, size: 1088, elements: !2406)
!2406 = !{!2407, !2408, !2409}
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2405, file: !133, line: 2875, baseType: !1829, size: 960)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2405, file: !133, line: 2876, baseType: !1833, size: 64, offset: 960)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2405, file: !133, line: 2877, baseType: !2410, size: 64, offset: 1024)
!2410 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2411, size: 64)
!2411 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !2412, line: 172, size: 128, elements: !2413)
!2412 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2413 = !{!2414, !2415, !2416, !2417, !2418, !2419, !2420}
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !2411, file: !2412, line: 174, baseType: !5, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2411, file: !2412, line: 178, baseType: !5, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !2411, file: !2412, line: 183, baseType: !5, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !2411, file: !2412, line: 187, baseType: !5, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !2411, file: !2412, line: 192, baseType: !5, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !2411, file: !2412, line: 195, baseType: !5, size: 32, offset: 32)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !2411, file: !2412, line: 199, baseType: !1655, size: 64, offset: 64)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1658, file: !133, line: 3386, baseType: !2380, size: 1216)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1658, file: !133, line: 3387, baseType: !2423, size: 1280)
!2423 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !133, line: 3093, size: 1280, elements: !2424)
!2424 = !{!2425, !2426}
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2423, file: !133, line: 3094, baseType: !2380, size: 1216)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2423, file: !133, line: 3095, baseType: !2410, size: 64, offset: 1216)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1658, file: !133, line: 3388, baseType: !2428, size: 1216)
!2428 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !133, line: 2824, size: 1216, elements: !2429)
!2429 = !{!2430, !2431, !2432, !2433, !2434, !2435}
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2428, file: !133, line: 2825, baseType: !1791, size: 896)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2428, file: !133, line: 2827, baseType: !1655, size: 64, offset: 896)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2428, file: !133, line: 2828, baseType: !1655, size: 64, offset: 960)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2428, file: !133, line: 2829, baseType: !1655, size: 64, offset: 1024)
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2428, file: !133, line: 2830, baseType: !1655, size: 64, offset: 1088)
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2428, file: !133, line: 2831, baseType: !1655, size: 64, offset: 1152)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1658, file: !133, line: 3389, baseType: !2437, size: 1024)
!2437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !133, line: 2850, size: 1024, elements: !2438)
!2438 = !{!2439, !2440, !2441}
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2437, file: !133, line: 2851, baseType: !1829, size: 960)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2437, file: !133, line: 2852, baseType: !1752, size: 32, offset: 960)
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2437, file: !133, line: 2853, baseType: !1752, size: 32, offset: 992)
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1658, file: !133, line: 3390, baseType: !2443, size: 1024)
!2443 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !133, line: 2857, size: 1024, elements: !2444)
!2444 = !{!2445, !2446}
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2443, file: !133, line: 2858, baseType: !1829, size: 960)
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2443, file: !133, line: 2859, baseType: !2410, size: 64, offset: 960)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1658, file: !133, line: 3391, baseType: !2448, size: 960)
!2448 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !133, line: 2862, size: 960, elements: !2449)
!2449 = !{!2450}
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2448, file: !133, line: 2863, baseType: !1829, size: 960)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1658, file: !133, line: 3392, baseType: !2452, size: 1472)
!2452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !133, line: 3304, size: 1472, elements: !2453)
!2453 = !{!2454}
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2452, file: !133, line: 3305, baseType: !2377, size: 1472)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1658, file: !133, line: 3393, baseType: !2456, size: 1792)
!2456 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !133, line: 3248, size: 1792, elements: !2457)
!2457 = !{!2458, !2459, !2676, !2677, !2678, !2679, !2680, !2681, !2682, !2683, !2684, !2685, !2686, !2687, !2688, !2689, !2690, !2691, !2692, !2693, !2694, !2695, !2696}
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2456, file: !133, line: 3249, baseType: !2377, size: 1472)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2456, file: !133, line: 3251, baseType: !2460, size: 64, offset: 1472)
!2460 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2461, size: 64)
!2461 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2462, line: 463, size: 1152, elements: !2463)
!2462 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2463 = !{!2464, !2467, !2498, !2499, !2612, !2620, !2621, !2622, !2623, !2624, !2625, !2649, !2652, !2653, !2654, !2655, !2656, !2657, !2658, !2659, !2660, !2661, !2662, !2663, !2664, !2665, !2666, !2667, !2668, !2669, !2670, !2671, !2672, !2673, !2674, !2675}
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2461, file: !2462, line: 464, baseType: !2465, size: 64)
!2465 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2466, size: 64)
!2466 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !2462, line: 464, flags: DIFlagFwdDecl)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2461, file: !2462, line: 467, baseType: !2468, size: 64, offset: 64)
!2468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2469, size: 64)
!2469 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !341, line: 374, size: 640, elements: !2470)
!2470 = !{!2471, !2473, !2474, !2487, !2488, !2489, !2490, !2491, !2492, !2494, !2496, !2497}
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2469, file: !341, line: 377, baseType: !2472, size: 64)
!2472 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1656, line: 111, baseType: !1950)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2469, file: !341, line: 378, baseType: !2472, size: 64, offset: 64)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2469, file: !341, line: 381, baseType: !2475, size: 64, offset: 128)
!2475 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2476, size: 64)
!2476 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !341, line: 282, baseType: !2477)
!2477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !341, line: 282, size: 128, elements: !2478)
!2478 = !{!2479}
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2477, file: !341, line: 282, baseType: !2480, size: 128)
!2480 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !341, line: 281, baseType: !2481)
!2481 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !341, line: 281, size: 128, elements: !2482)
!2482 = !{!2483, !2484, !2485}
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2481, file: !341, line: 281, baseType: !5, size: 32)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2481, file: !341, line: 281, baseType: !5, size: 32, offset: 32)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2481, file: !341, line: 281, baseType: !2486, size: 64, offset: 64)
!2486 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2472, size: 64, elements: !1756)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2469, file: !341, line: 384, baseType: !1752, size: 32, offset: 192)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2469, file: !341, line: 387, baseType: !1752, size: 32, offset: 224)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2469, file: !341, line: 390, baseType: !1752, size: 32, offset: 256)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2469, file: !341, line: 394, baseType: !2475, size: 64, offset: 320)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2469, file: !341, line: 396, baseType: !340, size: 32, offset: 384)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2469, file: !341, line: 399, baseType: !2493, size: 64, offset: 416)
!2493 = !DICompositeType(tag: DW_TAG_array_type, baseType: !346, size: 64, elements: !1903)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2469, file: !341, line: 402, baseType: !2495, size: 64, offset: 480)
!2495 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5, size: 64, elements: !1903)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2469, file: !341, line: 406, baseType: !1752, size: 32, offset: 544)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2469, file: !341, line: 409, baseType: !1752, size: 32, offset: 576)
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2461, file: !2462, line: 470, baseType: !1977, size: 64, offset: 128)
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2461, file: !2462, line: 473, baseType: !2500, size: 64, offset: 192)
!2500 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2501, size: 64)
!2501 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !2412, line: 39, size: 1152, elements: !2502)
!2502 = !{!2503, !2551, !2564, !2576, !2577, !2589, !2590, !2594, !2595, !2596, !2597, !2598}
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2501, file: !2412, line: 41, baseType: !2504, size: 64)
!2504 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !2505, line: 144, baseType: !2506)
!2505 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2506 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2507, size: 64)
!2507 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !2505, line: 100, size: 896, elements: !2508)
!2508 = !{!2509, !2515, !2520, !2525, !2527, !2528, !2529, !2530, !2531, !2532, !2537, !2539, !2540, !2545, !2550}
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2507, file: !2505, line: 102, baseType: !2510, size: 64)
!2510 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !2505, line: 52, baseType: !2511)
!2511 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2512, size: 64)
!2512 = !DISubroutineType(types: !2513)
!2513 = !{!2514, !2345}
!2514 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !2505, line: 47, baseType: !5)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2507, file: !2505, line: 105, baseType: !2516, size: 64, offset: 64)
!2516 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !2505, line: 59, baseType: !2517)
!2517 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2518, size: 64)
!2518 = !DISubroutineType(types: !2519)
!2519 = !{!1752, !2345, !2345}
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2507, file: !2505, line: 108, baseType: !2521, size: 64, offset: 128)
!2521 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !2505, line: 63, baseType: !2522)
!2522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2523, size: 64)
!2523 = !DISubroutineType(types: !2524)
!2524 = !{null, !1939}
!2525 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2507, file: !2505, line: 111, baseType: !2526, size: 64, offset: 192)
!2526 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1939, size: 64)
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2507, file: !2505, line: 114, baseType: !2131, size: 64, offset: 256)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2507, file: !2505, line: 117, baseType: !2131, size: 64, offset: 320)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2507, file: !2505, line: 120, baseType: !2131, size: 64, offset: 384)
!2530 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2507, file: !2505, line: 124, baseType: !5, size: 32, offset: 448)
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2507, file: !2505, line: 128, baseType: !5, size: 32, offset: 480)
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2507, file: !2505, line: 131, baseType: !2533, size: 64, offset: 512)
!2533 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !2505, line: 75, baseType: !2534)
!2534 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2535, size: 64)
!2535 = !DISubroutineType(types: !2536)
!2536 = !{!1939, !2131, !2131}
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2507, file: !2505, line: 132, baseType: !2538, size: 64, offset: 576)
!2538 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !2505, line: 78, baseType: !2522)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2507, file: !2505, line: 135, baseType: !1939, size: 64, offset: 640)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2507, file: !2505, line: 136, baseType: !2541, size: 64, offset: 704)
!2541 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !2505, line: 82, baseType: !2542)
!2542 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2543, size: 64)
!2543 = !DISubroutineType(types: !2544)
!2544 = !{!1939, !1939, !2131, !2131}
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2507, file: !2505, line: 137, baseType: !2546, size: 64, offset: 768)
!2546 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !2505, line: 83, baseType: !2547)
!2547 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2548, size: 64)
!2548 = !DISubroutineType(types: !2549)
!2549 = !{null, !1939, !1939}
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2507, file: !2505, line: 141, baseType: !5, size: 32, offset: 832)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2501, file: !2412, line: 48, baseType: !2552, size: 64, offset: 64)
!2552 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2553, size: 64)
!2553 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !402, line: 35, baseType: !2554)
!2554 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !402, line: 35, size: 128, elements: !2555)
!2555 = !{!2556}
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2554, file: !402, line: 35, baseType: !2557, size: 128)
!2557 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !402, line: 33, baseType: !2558)
!2558 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !402, line: 33, size: 128, elements: !2559)
!2559 = !{!2560, !2561, !2562}
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2558, file: !402, line: 33, baseType: !5, size: 32)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2558, file: !402, line: 33, baseType: !5, size: 32, offset: 32)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2558, file: !402, line: 33, baseType: !2563, size: 64, offset: 64)
!2563 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1986, size: 64, elements: !1756)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2501, file: !2412, line: 51, baseType: !2565, size: 64, offset: 128)
!2565 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2566, size: 64)
!2566 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !133, line: 183, baseType: !2567)
!2567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !133, line: 183, size: 128, elements: !2568)
!2568 = !{!2569}
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2567, file: !133, line: 183, baseType: !2570, size: 128)
!2570 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !133, line: 182, baseType: !2571)
!2571 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !133, line: 182, size: 128, elements: !2572)
!2572 = !{!2573, !2574, !2575}
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2571, file: !133, line: 182, baseType: !5, size: 32)
!2574 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2571, file: !133, line: 182, baseType: !5, size: 32, offset: 32)
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2571, file: !133, line: 182, baseType: !2039, size: 64, offset: 64)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2501, file: !2412, line: 54, baseType: !1655, size: 64, offset: 192)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2501, file: !2412, line: 57, baseType: !2578, size: 128, offset: 256)
!2578 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2579, line: 31, size: 128, elements: !2580)
!2579 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2580 = !{!2581, !2582, !2583, !2584, !2585, !2586, !2587}
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2578, file: !2579, line: 35, baseType: !5, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2578, file: !2579, line: 39, baseType: !5, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2578, file: !2579, line: 42, baseType: !5, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2578, file: !2579, line: 46, baseType: !5, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2578, file: !2579, line: 50, baseType: !5, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2578, file: !2579, line: 53, baseType: !5, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2578, file: !2579, line: 56, baseType: !2588, size: 64, offset: 64)
!2588 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1656, line: 47, baseType: !1887)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2501, file: !2412, line: 60, baseType: !2578, size: 128, offset: 384)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2501, file: !2412, line: 64, baseType: !2591, size: 64, offset: 512)
!2591 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2592, size: 64)
!2592 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2593, line: 33, flags: DIFlagFwdDecl)
!2593 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2501, file: !2412, line: 67, baseType: !1655, size: 64, offset: 576)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2501, file: !2412, line: 73, baseType: !2504, size: 64, offset: 640)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2501, file: !2412, line: 77, baseType: !2588, size: 64, offset: 704)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2501, file: !2412, line: 80, baseType: !5, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2501, file: !2412, line: 82, baseType: !2599, size: 320, offset: 832)
!2599 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1643, line: 62, size: 320, elements: !2600)
!2600 = !{!2601, !2607, !2608, !2609, !2610, !2611}
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2599, file: !1643, line: 63, baseType: !2602, size: 64)
!2602 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2603, size: 64)
!2603 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1643, line: 56, size: 128, elements: !2604)
!2604 = !{!2605, !2606}
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2603, file: !1643, line: 57, baseType: !2602, size: 64)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2603, file: !1643, line: 58, baseType: !1754, size: 8, offset: 64)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2599, file: !1643, line: 64, baseType: !5, size: 32, offset: 64)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2599, file: !1643, line: 66, baseType: !5, size: 32, offset: 96)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2599, file: !1643, line: 68, baseType: !1775, size: 8, offset: 128)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2599, file: !1643, line: 70, baseType: !2015, size: 64, offset: 192)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2599, file: !1643, line: 71, baseType: !2022, size: 64, offset: 256)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2461, file: !2462, line: 476, baseType: !2613, size: 64, offset: 256)
!2613 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2614, size: 64)
!2614 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !328, line: 187, size: 256, elements: !2615)
!2615 = !{!2616, !2617, !2618, !2619}
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !2614, file: !328, line: 189, baseType: !1752, size: 32)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !2614, file: !328, line: 192, baseType: !2216, size: 64, offset: 64)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !2614, file: !328, line: 197, baseType: !2504, size: 64, offset: 128)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !2614, file: !328, line: 200, baseType: !2201, size: 64, offset: 192)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2461, file: !2462, line: 479, baseType: !2504, size: 64, offset: 320)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2461, file: !2462, line: 484, baseType: !1655, size: 64, offset: 384)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2461, file: !2462, line: 488, baseType: !1655, size: 64, offset: 448)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2461, file: !2462, line: 493, baseType: !1655, size: 64, offset: 512)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2461, file: !2462, line: 496, baseType: !1655, size: 64, offset: 576)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2461, file: !2462, line: 501, baseType: !2626, size: 64, offset: 640)
!2626 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2627, size: 64)
!2627 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !352, line: 2355, size: 576, elements: !2628)
!2628 = !{!2629, !2632, !2633, !2634, !2635, !2637, !2638, !2643, !2644, !2645, !2646, !2647, !2648}
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2627, file: !352, line: 2356, baseType: !2630, size: 64)
!2630 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2631, size: 64)
!2631 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !352, line: 2356, flags: DIFlagFwdDecl)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2627, file: !352, line: 2357, baseType: !1859, size: 64, offset: 64)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2627, file: !352, line: 2358, baseType: !1752, size: 32, offset: 128)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2627, file: !352, line: 2359, baseType: !1752, size: 32, offset: 160)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2627, file: !352, line: 2360, baseType: !2636, size: 128, offset: 192)
!2636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1752, size: 128, elements: !1928)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2627, file: !352, line: 2364, baseType: !1752, size: 32, offset: 320)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2627, file: !352, line: 2367, baseType: !2639, size: 128, offset: 384)
!2639 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !352, line: 2349, size: 128, elements: !2640)
!2640 = !{!2641, !2642}
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2639, file: !352, line: 2351, baseType: !1833, size: 64)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2639, file: !352, line: 2352, baseType: !1711, size: 64, offset: 64)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2627, file: !352, line: 2371, baseType: !351, size: 32, offset: 512)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2627, file: !352, line: 2374, baseType: !5, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2627, file: !352, line: 2377, baseType: !5, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2627, file: !352, line: 2381, baseType: !5, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2627, file: !352, line: 2392, baseType: !5, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2627, file: !352, line: 2396, baseType: !5, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2461, file: !2462, line: 504, baseType: !2650, size: 64, offset: 704)
!2650 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2651, size: 64)
!2651 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2462, line: 504, flags: DIFlagFwdDecl)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2461, file: !2462, line: 507, baseType: !2504, size: 64, offset: 768)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2461, file: !2462, line: 510, baseType: !1752, size: 32, offset: 832)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2461, file: !2462, line: 513, baseType: !1752, size: 32, offset: 864)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2461, file: !2462, line: 516, baseType: !1783, size: 32, offset: 896)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2461, file: !2462, line: 519, baseType: !1783, size: 32, offset: 928)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2461, file: !2462, line: 522, baseType: !5, size: 32, offset: 960)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2461, file: !2462, line: 523, baseType: !5, size: 32, offset: 992)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2461, file: !2462, line: 528, baseType: !1859, size: 64, offset: 1024)
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2461, file: !2462, line: 535, baseType: !5, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2461, file: !2462, line: 539, baseType: !5, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2461, file: !2462, line: 543, baseType: !5, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2461, file: !2462, line: 546, baseType: !5, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2461, file: !2462, line: 550, baseType: !5, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2461, file: !2462, line: 554, baseType: !5, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2461, file: !2462, line: 559, baseType: !5, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2461, file: !2462, line: 562, baseType: !5, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2461, file: !2462, line: 571, baseType: !5, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2461, file: !2462, line: 573, baseType: !5, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2461, file: !2462, line: 574, baseType: !5, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2461, file: !2462, line: 581, baseType: !5, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2461, file: !2462, line: 585, baseType: !5, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2461, file: !2462, line: 588, baseType: !5, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2461, file: !2462, line: 592, baseType: !5, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2461, file: !2462, line: 598, baseType: !5, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2456, file: !133, line: 3254, baseType: !1655, size: 64, offset: 1536)
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2456, file: !133, line: 3257, baseType: !1655, size: 64, offset: 1600)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2456, file: !133, line: 3258, baseType: !1655, size: 64, offset: 1664)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2456, file: !133, line: 3264, baseType: !5, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2456, file: !133, line: 3265, baseType: !5, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2456, file: !133, line: 3267, baseType: !5, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2456, file: !133, line: 3268, baseType: !5, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2456, file: !133, line: 3269, baseType: !5, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2456, file: !133, line: 3271, baseType: !5, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2456, file: !133, line: 3272, baseType: !5, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2456, file: !133, line: 3273, baseType: !5, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2456, file: !133, line: 3274, baseType: !5, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2456, file: !133, line: 3275, baseType: !5, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2456, file: !133, line: 3276, baseType: !5, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2456, file: !133, line: 3277, baseType: !5, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2456, file: !133, line: 3279, baseType: !5, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2456, file: !133, line: 3280, baseType: !5, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2456, file: !133, line: 3281, baseType: !5, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2456, file: !133, line: 3282, baseType: !5, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2456, file: !133, line: 3283, baseType: !5, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2456, file: !133, line: 3284, baseType: !5, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1658, file: !133, line: 3394, baseType: !2698, size: 1344)
!2698 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !133, line: 2279, size: 1344, elements: !2699)
!2699 = !{!2700, !2701, !2702, !2703, !2704, !2705, !2706, !2707, !2708, !2709, !2710, !2711, !2712, !2713, !2714, !2715, !2716, !2717, !2718, !2719, !2720, !2721, !2722, !2723, !2724, !2725, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2740, !2741}
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2698, file: !133, line: 2280, baseType: !1694, size: 192)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2698, file: !133, line: 2281, baseType: !1655, size: 64, offset: 192)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2698, file: !133, line: 2282, baseType: !1655, size: 64, offset: 256)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2698, file: !133, line: 2283, baseType: !1655, size: 64, offset: 320)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2698, file: !133, line: 2284, baseType: !1655, size: 64, offset: 384)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2698, file: !133, line: 2285, baseType: !5, size: 32, offset: 448)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2698, file: !133, line: 2287, baseType: !5, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2707 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2698, file: !133, line: 2288, baseType: !5, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2698, file: !133, line: 2289, baseType: !5, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2698, file: !133, line: 2290, baseType: !5, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2698, file: !133, line: 2291, baseType: !5, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2698, file: !133, line: 2292, baseType: !5, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2698, file: !133, line: 2294, baseType: !5, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2698, file: !133, line: 2296, baseType: !5, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2698, file: !133, line: 2297, baseType: !5, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2698, file: !133, line: 2298, baseType: !5, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2698, file: !133, line: 2299, baseType: !5, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2698, file: !133, line: 2300, baseType: !5, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2698, file: !133, line: 2301, baseType: !5, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2698, file: !133, line: 2302, baseType: !5, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2698, file: !133, line: 2303, baseType: !5, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2698, file: !133, line: 2305, baseType: !5, size: 32, offset: 512)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2698, file: !133, line: 2306, baseType: !2295, size: 32, offset: 544)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2698, file: !133, line: 2307, baseType: !1655, size: 64, offset: 576)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2698, file: !133, line: 2308, baseType: !1655, size: 64, offset: 640)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2698, file: !133, line: 2314, baseType: !2726, size: 64, offset: 704)
!2726 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !133, line: 2309, size: 64, elements: !2727)
!2727 = !{!2728, !2729, !2730}
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2726, file: !133, line: 2310, baseType: !1752, size: 32)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2726, file: !133, line: 2311, baseType: !1859, size: 64)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2726, file: !133, line: 2312, baseType: !2731, size: 64)
!2731 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2732, size: 64)
!2732 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !133, line: 2277, flags: DIFlagFwdDecl)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2698, file: !133, line: 2315, baseType: !1655, size: 64, offset: 768)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2698, file: !133, line: 2316, baseType: !1655, size: 64, offset: 832)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2698, file: !133, line: 2317, baseType: !1655, size: 64, offset: 896)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2698, file: !133, line: 2318, baseType: !1655, size: 64, offset: 960)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2698, file: !133, line: 2319, baseType: !1655, size: 64, offset: 1024)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2698, file: !133, line: 2320, baseType: !1655, size: 64, offset: 1088)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2698, file: !133, line: 2321, baseType: !1655, size: 64, offset: 1152)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2698, file: !133, line: 2322, baseType: !1655, size: 64, offset: 1216)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2698, file: !133, line: 2324, baseType: !2742, size: 64, offset: 1280)
!2742 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2743, size: 64)
!2743 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !133, line: 2324, flags: DIFlagFwdDecl)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1658, file: !133, line: 3395, baseType: !2745, size: 320)
!2745 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !133, line: 1469, size: 320, elements: !2746)
!2746 = !{!2747, !2748, !2749}
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2745, file: !133, line: 1470, baseType: !1694, size: 192)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2745, file: !133, line: 1471, baseType: !1655, size: 64, offset: 192)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2745, file: !133, line: 1472, baseType: !1655, size: 64, offset: 256)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1658, file: !133, line: 3396, baseType: !2751, size: 320)
!2751 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !133, line: 1482, size: 320, elements: !2752)
!2752 = !{!2753, !2754, !2755}
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2751, file: !133, line: 1483, baseType: !1694, size: 192)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2751, file: !133, line: 1484, baseType: !1752, size: 32, offset: 192)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2751, file: !133, line: 1485, baseType: !2039, size: 64, offset: 256)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1658, file: !133, line: 3397, baseType: !2757, size: 384)
!2757 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !133, line: 1829, size: 384, elements: !2758)
!2758 = !{!2759, !2760, !2761, !2762}
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2757, file: !133, line: 1830, baseType: !1694, size: 192)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2757, file: !133, line: 1831, baseType: !1783, size: 32, offset: 192)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2757, file: !133, line: 1832, baseType: !1655, size: 64, offset: 256)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2757, file: !133, line: 1835, baseType: !2039, size: 64, offset: 320)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1658, file: !133, line: 3398, baseType: !2764, size: 704)
!2764 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !133, line: 1898, size: 704, elements: !2765)
!2765 = !{!2766, !2767, !2768, !2769, !2770, !2775}
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2764, file: !133, line: 1899, baseType: !1694, size: 192)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2764, file: !133, line: 1902, baseType: !1655, size: 64, offset: 192)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2764, file: !133, line: 1905, baseType: !1986, size: 64, offset: 256)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2764, file: !133, line: 1908, baseType: !5, size: 32, offset: 320)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2764, file: !133, line: 1911, baseType: !2771, size: 64, offset: 384)
!2771 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2772, size: 64)
!2772 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !2412, line: 117, size: 128, elements: !2773)
!2773 = !{!2774}
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2772, file: !2412, line: 120, baseType: !2578, size: 128)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2764, file: !133, line: 1914, baseType: !2027, size: 256, offset: 448)
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1658, file: !133, line: 3399, baseType: !2777, size: 704)
!2777 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !133, line: 2008, size: 704, elements: !2778)
!2778 = !{!2779, !2780, !2781, !2782, !2783, !2784, !2785, !2786, !2787, !2788, !2789}
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2777, file: !133, line: 2009, baseType: !1694, size: 192)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2777, file: !133, line: 2011, baseType: !5, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2777, file: !133, line: 2012, baseType: !5, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2777, file: !133, line: 2014, baseType: !1783, size: 32, offset: 224)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2777, file: !133, line: 2016, baseType: !1655, size: 64, offset: 256)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2777, file: !133, line: 2017, baseType: !2565, size: 64, offset: 320)
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2777, file: !133, line: 2019, baseType: !1655, size: 64, offset: 384)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2777, file: !133, line: 2020, baseType: !1655, size: 64, offset: 448)
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2777, file: !133, line: 2021, baseType: !1655, size: 64, offset: 512)
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2777, file: !133, line: 2022, baseType: !1655, size: 64, offset: 576)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2777, file: !133, line: 2023, baseType: !1655, size: 64, offset: 640)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1658, file: !133, line: 3400, baseType: !2791, size: 832)
!2791 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !133, line: 2430, size: 832, elements: !2792)
!2792 = !{!2793, !2794, !2795, !2796, !2797, !2798, !2799, !2800, !2801, !2802}
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2791, file: !133, line: 2431, baseType: !1694, size: 192)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2791, file: !133, line: 2433, baseType: !1655, size: 64, offset: 192)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2791, file: !133, line: 2434, baseType: !1655, size: 64, offset: 256)
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2791, file: !133, line: 2435, baseType: !1655, size: 64, offset: 320)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2791, file: !133, line: 2436, baseType: !1655, size: 64, offset: 384)
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2791, file: !133, line: 2437, baseType: !2565, size: 64, offset: 448)
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2791, file: !133, line: 2438, baseType: !1655, size: 64, offset: 512)
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2791, file: !133, line: 2440, baseType: !1655, size: 64, offset: 576)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2791, file: !133, line: 2441, baseType: !1655, size: 64, offset: 640)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2791, file: !133, line: 2443, baseType: !2803, size: 128, offset: 704)
!2803 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !133, line: 182, baseType: !2804)
!2804 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !133, line: 182, size: 128, elements: !2805)
!2805 = !{!2806}
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2804, file: !133, line: 182, baseType: !2570, size: 128)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1658, file: !133, line: 3401, baseType: !2808, size: 320)
!2808 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !133, line: 3327, size: 320, elements: !2809)
!2809 = !{!2810, !2811, !2818}
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2808, file: !133, line: 3329, baseType: !1694, size: 192)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2808, file: !133, line: 3330, baseType: !2812, size: 64, offset: 192)
!2812 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2813, size: 64)
!2813 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !133, line: 3320, size: 192, elements: !2814)
!2814 = !{!2815, !2816, !2817}
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2813, file: !133, line: 3322, baseType: !2812, size: 64)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2813, file: !133, line: 3323, baseType: !2812, size: 64, offset: 64)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2813, file: !133, line: 3324, baseType: !1655, size: 64, offset: 128)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2808, file: !133, line: 3331, baseType: !2812, size: 64, offset: 256)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1658, file: !133, line: 3402, baseType: !2820, size: 256)
!2820 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !133, line: 1540, size: 256, elements: !2821)
!2821 = !{!2822, !2823}
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2820, file: !133, line: 1541, baseType: !1694, size: 192)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2820, file: !133, line: 1542, baseType: !2824, size: 64, offset: 192)
!2824 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2825, size: 64)
!2825 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !133, line: 1538, baseType: !2826)
!2826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !133, line: 1538, size: 192, elements: !2827)
!2827 = !{!2828}
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2826, file: !133, line: 1538, baseType: !2829, size: 192)
!2829 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !133, line: 1537, baseType: !2830)
!2830 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !133, line: 1537, size: 192, elements: !2831)
!2831 = !{!2832, !2833, !2834}
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2830, file: !133, line: 1537, baseType: !5, size: 32)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2830, file: !133, line: 1537, baseType: !5, size: 32, offset: 32)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2830, file: !133, line: 1537, baseType: !2835, size: 128, offset: 64)
!2835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2836, size: 128, elements: !1756)
!2836 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !133, line: 1535, baseType: !2837)
!2837 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !133, line: 1532, size: 128, elements: !2838)
!2838 = !{!2839, !2840}
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2837, file: !133, line: 1533, baseType: !1655, size: 64)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2837, file: !133, line: 1534, baseType: !1655, size: 64, offset: 64)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1658, file: !133, line: 3403, baseType: !2842, size: 512)
!2842 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !133, line: 1938, size: 512, elements: !2843)
!2843 = !{!2844, !2845, !2846, !2847, !2853, !2854, !2855}
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2842, file: !133, line: 1939, baseType: !1694, size: 192)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2842, file: !133, line: 1940, baseType: !1783, size: 32, offset: 192)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2842, file: !133, line: 1941, baseType: !356, size: 32, offset: 224)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2842, file: !133, line: 1946, baseType: !2848, size: 32, offset: 256)
!2848 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !133, line: 1942, size: 32, elements: !2849)
!2849 = !{!2850, !2851, !2852}
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2848, file: !133, line: 1943, baseType: !374, size: 32)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2848, file: !133, line: 1944, baseType: !381, size: 32)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2848, file: !133, line: 1945, baseType: !132, size: 32)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2842, file: !133, line: 1950, baseType: !1976, size: 64, offset: 320)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2842, file: !133, line: 1951, baseType: !1976, size: 64, offset: 384)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2842, file: !133, line: 1953, baseType: !2039, size: 64, offset: 448)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1658, file: !133, line: 3404, baseType: !2857, size: 1664)
!2857 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !133, line: 3337, size: 1664, elements: !2858)
!2858 = !{!2859, !2860}
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2857, file: !133, line: 3338, baseType: !1694, size: 192)
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2857, file: !133, line: 3341, baseType: !2861, size: 1472, offset: 192)
!2861 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !585, line: 410, size: 1472, elements: !2862)
!2862 = !{!2863, !2864, !2865, !2866, !2867, !2868, !2869, !2870, !2871, !2873, !2874, !2875, !2876, !2877, !2878, !2879, !2880, !2881, !2882, !2883, !2884, !2885, !2886, !2887, !2888, !2889, !2890, !2891, !2892, !2893, !2894, !2895, !2896, !2897, !2898, !2899, !2900, !2901, !2902, !2903, !2904, !2905, !2906, !2907, !2908, !2909, !2910, !2911, !2912, !2913, !2914, !2915, !2916, !2917, !2918, !2919, !2920, !2921, !2922, !2923, !2924, !2925, !2926, !2927, !2928, !2929, !2930, !2931, !2932, !2933, !2934, !2935, !2936, !2937, !2938, !2939, !2940, !2941, !2942, !2943, !2944, !2945, !2946, !2947, !2948, !2949, !2950, !2951, !2952, !2953, !2954, !2955, !2956, !2957, !2958, !2959, !2960, !2961, !2962, !2963, !2964, !2965, !2966, !2967, !2968, !2969, !2970, !2971, !2972, !2973, !2974, !2975, !2976, !2977, !2978, !2979, !2980, !2981, !2982, !2983, !2984, !2985, !2986, !2987, !2988, !2989, !2990, !2991, !2992, !2993, !2994, !2995, !2996, !2997, !2998, !2999, !3000, !3001, !3002, !3003, !3004, !3005, !3006, !3007, !3008, !3009, !3010, !3011, !3012, !3013, !3014, !3015, !3016, !3017, !3018, !3019, !3020, !3021, !3022, !3023, !3024, !3025, !3026}
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2861, file: !585, line: 412, baseType: !1752, size: 32)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2861, file: !585, line: 413, baseType: !1752, size: 32, offset: 32)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2861, file: !585, line: 414, baseType: !1752, size: 32, offset: 64)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2861, file: !585, line: 415, baseType: !1752, size: 32, offset: 96)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2861, file: !585, line: 416, baseType: !1752, size: 32, offset: 128)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2861, file: !585, line: 417, baseType: !1752, size: 32, offset: 160)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2861, file: !585, line: 418, baseType: !1775, size: 8, offset: 192)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2861, file: !585, line: 419, baseType: !1775, size: 8, offset: 200)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2861, file: !585, line: 420, baseType: !2872, size: 8, offset: 208)
!2872 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2861, file: !585, line: 421, baseType: !2872, size: 8, offset: 216)
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2861, file: !585, line: 422, baseType: !2872, size: 8, offset: 224)
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2861, file: !585, line: 423, baseType: !2872, size: 8, offset: 232)
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2861, file: !585, line: 424, baseType: !2872, size: 8, offset: 240)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2861, file: !585, line: 425, baseType: !2872, size: 8, offset: 248)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2861, file: !585, line: 426, baseType: !2872, size: 8, offset: 256)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2861, file: !585, line: 427, baseType: !2872, size: 8, offset: 264)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2861, file: !585, line: 428, baseType: !2872, size: 8, offset: 272)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2861, file: !585, line: 429, baseType: !2872, size: 8, offset: 280)
!2882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2861, file: !585, line: 430, baseType: !2872, size: 8, offset: 288)
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2861, file: !585, line: 431, baseType: !2872, size: 8, offset: 296)
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2861, file: !585, line: 432, baseType: !2872, size: 8, offset: 304)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2861, file: !585, line: 433, baseType: !2872, size: 8, offset: 312)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2861, file: !585, line: 434, baseType: !2872, size: 8, offset: 320)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2861, file: !585, line: 435, baseType: !2872, size: 8, offset: 328)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2861, file: !585, line: 436, baseType: !2872, size: 8, offset: 336)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2861, file: !585, line: 437, baseType: !2872, size: 8, offset: 344)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2861, file: !585, line: 438, baseType: !2872, size: 8, offset: 352)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2861, file: !585, line: 439, baseType: !2872, size: 8, offset: 360)
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2861, file: !585, line: 440, baseType: !2872, size: 8, offset: 368)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2861, file: !585, line: 441, baseType: !2872, size: 8, offset: 376)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2861, file: !585, line: 442, baseType: !2872, size: 8, offset: 384)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2861, file: !585, line: 443, baseType: !2872, size: 8, offset: 392)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2861, file: !585, line: 444, baseType: !2872, size: 8, offset: 400)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2861, file: !585, line: 445, baseType: !2872, size: 8, offset: 408)
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2861, file: !585, line: 446, baseType: !2872, size: 8, offset: 416)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2861, file: !585, line: 447, baseType: !2872, size: 8, offset: 424)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2861, file: !585, line: 448, baseType: !2872, size: 8, offset: 432)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2861, file: !585, line: 449, baseType: !2872, size: 8, offset: 440)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2861, file: !585, line: 450, baseType: !2872, size: 8, offset: 448)
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2861, file: !585, line: 451, baseType: !2872, size: 8, offset: 456)
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2861, file: !585, line: 452, baseType: !2872, size: 8, offset: 464)
!2905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2861, file: !585, line: 453, baseType: !2872, size: 8, offset: 472)
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2861, file: !585, line: 454, baseType: !2872, size: 8, offset: 480)
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2861, file: !585, line: 455, baseType: !2872, size: 8, offset: 488)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2861, file: !585, line: 456, baseType: !2872, size: 8, offset: 496)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2861, file: !585, line: 457, baseType: !2872, size: 8, offset: 504)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2861, file: !585, line: 458, baseType: !2872, size: 8, offset: 512)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2861, file: !585, line: 459, baseType: !2872, size: 8, offset: 520)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2861, file: !585, line: 460, baseType: !2872, size: 8, offset: 528)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2861, file: !585, line: 461, baseType: !2872, size: 8, offset: 536)
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2861, file: !585, line: 462, baseType: !2872, size: 8, offset: 544)
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2861, file: !585, line: 463, baseType: !2872, size: 8, offset: 552)
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2861, file: !585, line: 464, baseType: !2872, size: 8, offset: 560)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2861, file: !585, line: 465, baseType: !2872, size: 8, offset: 568)
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2861, file: !585, line: 466, baseType: !2872, size: 8, offset: 576)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2861, file: !585, line: 467, baseType: !2872, size: 8, offset: 584)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2861, file: !585, line: 468, baseType: !2872, size: 8, offset: 592)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2861, file: !585, line: 469, baseType: !2872, size: 8, offset: 600)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2861, file: !585, line: 470, baseType: !2872, size: 8, offset: 608)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2861, file: !585, line: 471, baseType: !2872, size: 8, offset: 616)
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2861, file: !585, line: 472, baseType: !2872, size: 8, offset: 624)
!2925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2861, file: !585, line: 473, baseType: !2872, size: 8, offset: 632)
!2926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2861, file: !585, line: 474, baseType: !2872, size: 8, offset: 640)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2861, file: !585, line: 475, baseType: !2872, size: 8, offset: 648)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2861, file: !585, line: 476, baseType: !2872, size: 8, offset: 656)
!2929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2861, file: !585, line: 477, baseType: !2872, size: 8, offset: 664)
!2930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2861, file: !585, line: 478, baseType: !2872, size: 8, offset: 672)
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2861, file: !585, line: 479, baseType: !2872, size: 8, offset: 680)
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2861, file: !585, line: 480, baseType: !2872, size: 8, offset: 688)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2861, file: !585, line: 481, baseType: !2872, size: 8, offset: 696)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2861, file: !585, line: 482, baseType: !2872, size: 8, offset: 704)
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2861, file: !585, line: 483, baseType: !2872, size: 8, offset: 712)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2861, file: !585, line: 484, baseType: !2872, size: 8, offset: 720)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2861, file: !585, line: 485, baseType: !2872, size: 8, offset: 728)
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2861, file: !585, line: 486, baseType: !2872, size: 8, offset: 736)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2861, file: !585, line: 487, baseType: !2872, size: 8, offset: 744)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2861, file: !585, line: 488, baseType: !2872, size: 8, offset: 752)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2861, file: !585, line: 489, baseType: !2872, size: 8, offset: 760)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2861, file: !585, line: 490, baseType: !2872, size: 8, offset: 768)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2861, file: !585, line: 491, baseType: !2872, size: 8, offset: 776)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2861, file: !585, line: 492, baseType: !2872, size: 8, offset: 784)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2861, file: !585, line: 493, baseType: !2872, size: 8, offset: 792)
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2861, file: !585, line: 494, baseType: !2872, size: 8, offset: 800)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2861, file: !585, line: 495, baseType: !2872, size: 8, offset: 808)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2861, file: !585, line: 496, baseType: !2872, size: 8, offset: 816)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2861, file: !585, line: 497, baseType: !2872, size: 8, offset: 824)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2861, file: !585, line: 498, baseType: !2872, size: 8, offset: 832)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2861, file: !585, line: 499, baseType: !2872, size: 8, offset: 840)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2861, file: !585, line: 500, baseType: !2872, size: 8, offset: 848)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2861, file: !585, line: 501, baseType: !2872, size: 8, offset: 856)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2861, file: !585, line: 502, baseType: !2872, size: 8, offset: 864)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2861, file: !585, line: 503, baseType: !2872, size: 8, offset: 872)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2861, file: !585, line: 504, baseType: !2872, size: 8, offset: 880)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2861, file: !585, line: 505, baseType: !2872, size: 8, offset: 888)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2861, file: !585, line: 506, baseType: !2872, size: 8, offset: 896)
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2861, file: !585, line: 507, baseType: !2872, size: 8, offset: 904)
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2861, file: !585, line: 508, baseType: !2872, size: 8, offset: 912)
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2861, file: !585, line: 509, baseType: !2872, size: 8, offset: 920)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2861, file: !585, line: 510, baseType: !2872, size: 8, offset: 928)
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2861, file: !585, line: 511, baseType: !2872, size: 8, offset: 936)
!2964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2861, file: !585, line: 512, baseType: !2872, size: 8, offset: 944)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2861, file: !585, line: 513, baseType: !2872, size: 8, offset: 952)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2861, file: !585, line: 514, baseType: !2872, size: 8, offset: 960)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2861, file: !585, line: 515, baseType: !2872, size: 8, offset: 968)
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2861, file: !585, line: 516, baseType: !2872, size: 8, offset: 976)
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2861, file: !585, line: 517, baseType: !2872, size: 8, offset: 984)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2861, file: !585, line: 518, baseType: !2872, size: 8, offset: 992)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2861, file: !585, line: 519, baseType: !2872, size: 8, offset: 1000)
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2861, file: !585, line: 520, baseType: !2872, size: 8, offset: 1008)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2861, file: !585, line: 521, baseType: !2872, size: 8, offset: 1016)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2861, file: !585, line: 522, baseType: !2872, size: 8, offset: 1024)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2861, file: !585, line: 523, baseType: !2872, size: 8, offset: 1032)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2861, file: !585, line: 524, baseType: !2872, size: 8, offset: 1040)
!2977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2861, file: !585, line: 525, baseType: !2872, size: 8, offset: 1048)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2861, file: !585, line: 526, baseType: !2872, size: 8, offset: 1056)
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2861, file: !585, line: 527, baseType: !2872, size: 8, offset: 1064)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2861, file: !585, line: 528, baseType: !2872, size: 8, offset: 1072)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2861, file: !585, line: 529, baseType: !2872, size: 8, offset: 1080)
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2861, file: !585, line: 530, baseType: !2872, size: 8, offset: 1088)
!2983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2861, file: !585, line: 531, baseType: !2872, size: 8, offset: 1096)
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2861, file: !585, line: 532, baseType: !2872, size: 8, offset: 1104)
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2861, file: !585, line: 533, baseType: !2872, size: 8, offset: 1112)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2861, file: !585, line: 534, baseType: !2872, size: 8, offset: 1120)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2861, file: !585, line: 535, baseType: !2872, size: 8, offset: 1128)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2861, file: !585, line: 536, baseType: !2872, size: 8, offset: 1136)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2861, file: !585, line: 537, baseType: !2872, size: 8, offset: 1144)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2861, file: !585, line: 538, baseType: !2872, size: 8, offset: 1152)
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2861, file: !585, line: 539, baseType: !2872, size: 8, offset: 1160)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2861, file: !585, line: 540, baseType: !2872, size: 8, offset: 1168)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2861, file: !585, line: 541, baseType: !2872, size: 8, offset: 1176)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2861, file: !585, line: 542, baseType: !2872, size: 8, offset: 1184)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2861, file: !585, line: 543, baseType: !2872, size: 8, offset: 1192)
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2861, file: !585, line: 544, baseType: !2872, size: 8, offset: 1200)
!2997 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2861, file: !585, line: 545, baseType: !2872, size: 8, offset: 1208)
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2861, file: !585, line: 546, baseType: !2872, size: 8, offset: 1216)
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2861, file: !585, line: 547, baseType: !2872, size: 8, offset: 1224)
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2861, file: !585, line: 548, baseType: !2872, size: 8, offset: 1232)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2861, file: !585, line: 549, baseType: !2872, size: 8, offset: 1240)
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2861, file: !585, line: 550, baseType: !2872, size: 8, offset: 1248)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2861, file: !585, line: 551, baseType: !2872, size: 8, offset: 1256)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2861, file: !585, line: 552, baseType: !2872, size: 8, offset: 1264)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2861, file: !585, line: 553, baseType: !2872, size: 8, offset: 1272)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2861, file: !585, line: 554, baseType: !2872, size: 8, offset: 1280)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2861, file: !585, line: 555, baseType: !2872, size: 8, offset: 1288)
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2861, file: !585, line: 556, baseType: !2872, size: 8, offset: 1296)
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2861, file: !585, line: 557, baseType: !2872, size: 8, offset: 1304)
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2861, file: !585, line: 558, baseType: !2872, size: 8, offset: 1312)
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2861, file: !585, line: 559, baseType: !2872, size: 8, offset: 1320)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2861, file: !585, line: 560, baseType: !2872, size: 8, offset: 1328)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2861, file: !585, line: 561, baseType: !2872, size: 8, offset: 1336)
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2861, file: !585, line: 562, baseType: !2872, size: 8, offset: 1344)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2861, file: !585, line: 563, baseType: !2872, size: 8, offset: 1352)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2861, file: !585, line: 564, baseType: !2872, size: 8, offset: 1360)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2861, file: !585, line: 565, baseType: !2872, size: 8, offset: 1368)
!3018 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2861, file: !585, line: 566, baseType: !2872, size: 8, offset: 1376)
!3019 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2861, file: !585, line: 567, baseType: !2872, size: 8, offset: 1384)
!3020 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2861, file: !585, line: 568, baseType: !2872, size: 8, offset: 1392)
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2861, file: !585, line: 569, baseType: !2872, size: 8, offset: 1400)
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2861, file: !585, line: 570, baseType: !2872, size: 8, offset: 1408)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2861, file: !585, line: 571, baseType: !2872, size: 8, offset: 1416)
!3024 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2861, file: !585, line: 572, baseType: !2872, size: 8, offset: 1424)
!3025 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2861, file: !585, line: 573, baseType: !2872, size: 8, offset: 1432)
!3026 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2861, file: !585, line: 574, baseType: !2872, size: 8, offset: 1440)
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1658, file: !133, line: 3405, baseType: !3028, size: 384)
!3028 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !133, line: 3352, size: 384, elements: !3029)
!3029 = !{!3030, !3031}
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3028, file: !133, line: 3353, baseType: !1694, size: 192)
!3031 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3028, file: !133, line: 3356, baseType: !3032, size: 192, offset: 192)
!3032 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !585, line: 578, size: 192, elements: !3033)
!3033 = !{!3034, !3035, !3036, !3037, !3038, !3039, !3040, !3041, !3042, !3043, !3044}
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !3032, file: !585, line: 580, baseType: !1752, size: 32)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !3032, file: !585, line: 581, baseType: !1752, size: 32, offset: 32)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !3032, file: !585, line: 582, baseType: !1752, size: 32, offset: 64)
!3037 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !3032, file: !585, line: 583, baseType: !1752, size: 32, offset: 96)
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !3032, file: !585, line: 584, baseType: !1775, size: 8, offset: 128)
!3039 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !3032, file: !585, line: 585, baseType: !1775, size: 8, offset: 136)
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !3032, file: !585, line: 586, baseType: !1775, size: 8, offset: 144)
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !3032, file: !585, line: 587, baseType: !1775, size: 8, offset: 152)
!3042 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !3032, file: !585, line: 588, baseType: !1775, size: 8, offset: 160)
!3043 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !3032, file: !585, line: 589, baseType: !1775, size: 8, offset: 168)
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !3032, file: !585, line: 590, baseType: !1775, size: 8, offset: 176)
!3045 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3046, size: 64)
!3046 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1988)
!3047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3048, size: 64)
!3048 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1658)
!3049 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3050, size: 64)
!3050 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ilb_data", file: !1, line: 2663, size: 192, elements: !3051)
!3051 = !{!3052, !3053, !3054}
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "loop", scope: !3050, file: !1, line: 2665, baseType: !2201, size: 64)
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3050, file: !1, line: 2666, baseType: !1986, size: 64, offset: 64)
!3054 = !DIDerivedType(tag: DW_TAG_member, name: "reliable", scope: !3050, file: !1, line: 2667, baseType: !1775, size: 8, offset: 128)
!3055 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3056, size: 64)
!3056 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !3057, line: 32, baseType: !3058)
!3057 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3058 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !3057, line: 32, size: 96, elements: !3059)
!3059 = !{!3060}
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3058, file: !3057, line: 32, baseType: !3061, size: 96)
!3061 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !3057, line: 31, baseType: !3062)
!3062 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !3057, line: 31, size: 96, elements: !3063)
!3063 = !{!3064, !3065, !3066}
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3062, file: !3057, line: 31, baseType: !5, size: 32)
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3062, file: !3057, line: 31, baseType: !5, size: 32, offset: 32)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3062, file: !3057, line: 31, baseType: !3067, size: 32, offset: 64)
!3067 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1752, size: 32, elements: !1756)
!3068 = !{i32 7, !"Dwarf Version", i32 4}
!3069 = !{i32 2, !"Debug Info Version", i32 3}
!3070 = !{i32 1, !"wchar_size", i32 4}
!3071 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3072 = distinct !DISubprogram(name: "expand_simple_operations", scope: !1, file: !1, line: 1406, type: !3073, scopeLine: 1407, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3073 = !DISubroutineType(types: !3074)
!3074 = !{!1655, !1655}
!3075 = !{}
!3076 = !DILocalVariable(name: "expr", arg: 1, scope: !3072, file: !1, line: 1406, type: !1655)
!3077 = !DILocation(line: 1406, column: 32, scope: !3072)
!3078 = !DILocalVariable(name: "i", scope: !3072, file: !1, line: 1408, type: !5)
!3079 = !DILocation(line: 1408, column: 12, scope: !3072)
!3080 = !DILocalVariable(name: "n", scope: !3072, file: !1, line: 1408, type: !5)
!3081 = !DILocation(line: 1408, column: 15, scope: !3072)
!3082 = !DILocalVariable(name: "ret", scope: !3072, file: !1, line: 1409, type: !1655)
!3083 = !DILocation(line: 1409, column: 8, scope: !3072)
!3084 = !DILocalVariable(name: "e", scope: !3072, file: !1, line: 1409, type: !1655)
!3085 = !DILocation(line: 1409, column: 25, scope: !3072)
!3086 = !DILocalVariable(name: "ee", scope: !3072, file: !1, line: 1409, type: !1655)
!3087 = !DILocation(line: 1409, column: 28, scope: !3072)
!3088 = !DILocalVariable(name: "e1", scope: !3072, file: !1, line: 1409, type: !1655)
!3089 = !DILocation(line: 1409, column: 32, scope: !3072)
!3090 = !DILocalVariable(name: "code", scope: !3072, file: !1, line: 1410, type: !132)
!3091 = !DILocation(line: 1410, column: 18, scope: !3072)
!3092 = !DILocalVariable(name: "stmt", scope: !3072, file: !1, line: 1411, type: !1986)
!3093 = !DILocation(line: 1411, column: 10, scope: !3072)
!3094 = !DILocation(line: 1413, column: 7, scope: !3095)
!3095 = distinct !DILexicalBlock(scope: !3072, file: !1, line: 1413, column: 7)
!3096 = !DILocation(line: 1413, column: 12, scope: !3095)
!3097 = !DILocation(line: 1413, column: 7, scope: !3072)
!3098 = !DILocation(line: 1414, column: 12, scope: !3095)
!3099 = !DILocation(line: 1414, column: 5, scope: !3095)
!3100 = !DILocation(line: 1416, column: 32, scope: !3101)
!3101 = distinct !DILexicalBlock(scope: !3072, file: !1, line: 1416, column: 7)
!3102 = !DILocation(line: 1416, column: 7, scope: !3101)
!3103 = !DILocation(line: 1416, column: 7, scope: !3072)
!3104 = !DILocation(line: 1417, column: 12, scope: !3101)
!3105 = !DILocation(line: 1417, column: 5, scope: !3101)
!3106 = !DILocation(line: 1419, column: 10, scope: !3072)
!3107 = !DILocation(line: 1419, column: 8, scope: !3072)
!3108 = !DILocation(line: 1420, column: 7, scope: !3109)
!3109 = distinct !DILexicalBlock(scope: !3072, file: !1, line: 1420, column: 7)
!3110 = !DILocation(line: 1420, column: 7, scope: !3072)
!3111 = !DILocation(line: 1422, column: 11, scope: !3112)
!3112 = distinct !DILexicalBlock(scope: !3109, file: !1, line: 1421, column: 5)
!3113 = !DILocation(line: 1422, column: 9, scope: !3112)
!3114 = !DILocation(line: 1423, column: 14, scope: !3115)
!3115 = distinct !DILexicalBlock(scope: !3112, file: !1, line: 1423, column: 7)
!3116 = !DILocation(line: 1423, column: 12, scope: !3115)
!3117 = !DILocation(line: 1423, column: 19, scope: !3118)
!3118 = distinct !DILexicalBlock(scope: !3115, file: !1, line: 1423, column: 7)
!3119 = !DILocation(line: 1423, column: 23, scope: !3118)
!3120 = !DILocation(line: 1423, column: 21, scope: !3118)
!3121 = !DILocation(line: 1423, column: 7, scope: !3115)
!3122 = !DILocation(line: 1425, column: 8, scope: !3123)
!3123 = distinct !DILexicalBlock(scope: !3118, file: !1, line: 1424, column: 2)
!3124 = !DILocation(line: 1425, column: 6, scope: !3123)
!3125 = !DILocation(line: 1426, column: 35, scope: !3123)
!3126 = !DILocation(line: 1426, column: 9, scope: !3123)
!3127 = !DILocation(line: 1426, column: 7, scope: !3123)
!3128 = !DILocation(line: 1427, column: 8, scope: !3129)
!3129 = distinct !DILexicalBlock(scope: !3123, file: !1, line: 1427, column: 8)
!3130 = !DILocation(line: 1427, column: 13, scope: !3129)
!3131 = !DILocation(line: 1427, column: 10, scope: !3129)
!3132 = !DILocation(line: 1427, column: 8, scope: !3123)
!3133 = !DILocation(line: 1428, column: 6, scope: !3129)
!3134 = !DILocation(line: 1430, column: 9, scope: !3135)
!3135 = distinct !DILexicalBlock(scope: !3123, file: !1, line: 1430, column: 8)
!3136 = !DILocation(line: 1430, column: 8, scope: !3123)
!3137 = !DILocation(line: 1431, column: 12, scope: !3135)
!3138 = !DILocation(line: 1431, column: 10, scope: !3135)
!3139 = !DILocation(line: 1431, column: 6, scope: !3135)
!3140 = !DILocation(line: 1433, column: 28, scope: !3123)
!3141 = !DILocation(line: 1433, column: 4, scope: !3123)
!3142 = !DILocation(line: 1433, column: 26, scope: !3123)
!3143 = !DILocation(line: 1434, column: 2, scope: !3123)
!3144 = !DILocation(line: 1423, column: 27, scope: !3118)
!3145 = !DILocation(line: 1423, column: 7, scope: !3118)
!3146 = distinct !{!3146, !3121, !3147}
!3147 = !DILocation(line: 1434, column: 2, scope: !3115)
!3148 = !DILocation(line: 1436, column: 12, scope: !3149)
!3149 = distinct !DILexicalBlock(scope: !3112, file: !1, line: 1436, column: 11)
!3150 = !DILocation(line: 1436, column: 11, scope: !3112)
!3151 = !DILocation(line: 1437, column: 9, scope: !3149)
!3152 = !DILocation(line: 1437, column: 2, scope: !3149)
!3153 = !DILocation(line: 1439, column: 7, scope: !3112)
!3154 = !DILocation(line: 1440, column: 19, scope: !3112)
!3155 = !DILocation(line: 1440, column: 13, scope: !3112)
!3156 = !DILocation(line: 1440, column: 11, scope: !3112)
!3157 = !DILocation(line: 1441, column: 7, scope: !3112)
!3158 = !DILocation(line: 1442, column: 14, scope: !3112)
!3159 = !DILocation(line: 1442, column: 7, scope: !3112)
!3160 = !DILocation(line: 1445, column: 7, scope: !3161)
!3161 = distinct !DILexicalBlock(scope: !3072, file: !1, line: 1445, column: 7)
!3162 = !DILocation(line: 1445, column: 24, scope: !3161)
!3163 = !DILocation(line: 1445, column: 7, scope: !3072)
!3164 = !DILocation(line: 1446, column: 12, scope: !3161)
!3165 = !DILocation(line: 1446, column: 5, scope: !3161)
!3166 = !DILocation(line: 1448, column: 10, scope: !3072)
!3167 = !DILocation(line: 1448, column: 8, scope: !3072)
!3168 = !DILocation(line: 1449, column: 20, scope: !3169)
!3169 = distinct !DILexicalBlock(scope: !3072, file: !1, line: 1449, column: 7)
!3170 = !DILocation(line: 1449, column: 7, scope: !3169)
!3171 = !DILocation(line: 1449, column: 26, scope: !3169)
!3172 = !DILocation(line: 1449, column: 7, scope: !3072)
!3173 = !DILocalVariable(name: "src", scope: !3174, file: !1, line: 1451, type: !2472)
!3174 = distinct !DILexicalBlock(scope: !3169, file: !1, line: 1450, column: 5)
!3175 = !DILocation(line: 1451, column: 19, scope: !3174)
!3176 = !DILocalVariable(name: "dest", scope: !3174, file: !1, line: 1451, type: !2472)
!3177 = !DILocation(line: 1451, column: 24, scope: !3174)
!3178 = !DILocation(line: 1453, column: 32, scope: !3179)
!3179 = distinct !DILexicalBlock(scope: !3174, file: !1, line: 1453, column: 11)
!3180 = !DILocation(line: 1453, column: 11, scope: !3179)
!3181 = !DILocation(line: 1453, column: 38, scope: !3179)
!3182 = !DILocation(line: 1453, column: 11, scope: !3174)
!3183 = !DILocation(line: 1454, column: 9, scope: !3179)
!3184 = !DILocation(line: 1454, column: 2, scope: !3179)
!3185 = !DILocation(line: 1455, column: 11, scope: !3174)
!3186 = !DILocation(line: 1455, column: 9, scope: !3174)
!3187 = !DILocation(line: 1459, column: 25, scope: !3174)
!3188 = !DILocation(line: 1459, column: 14, scope: !3174)
!3189 = !DILocation(line: 1459, column: 12, scope: !3174)
!3190 = !DILocation(line: 1460, column: 26, scope: !3174)
!3191 = !DILocation(line: 1460, column: 13, scope: !3174)
!3192 = !DILocation(line: 1460, column: 11, scope: !3174)
!3193 = !DILocation(line: 1461, column: 11, scope: !3194)
!3194 = distinct !DILexicalBlock(scope: !3174, file: !1, line: 1461, column: 11)
!3195 = !DILocation(line: 1461, column: 25, scope: !3194)
!3196 = !DILocation(line: 1462, column: 4, scope: !3194)
!3197 = !DILocation(line: 1462, column: 7, scope: !3194)
!3198 = !DILocation(line: 1462, column: 12, scope: !3194)
!3199 = !DILocation(line: 1462, column: 27, scope: !3194)
!3200 = !DILocation(line: 1462, column: 33, scope: !3194)
!3201 = !DILocation(line: 1462, column: 24, scope: !3194)
!3202 = !DILocation(line: 1461, column: 11, scope: !3174)
!3203 = !DILocation(line: 1463, column: 9, scope: !3194)
!3204 = !DILocation(line: 1463, column: 2, scope: !3194)
!3205 = !DILocation(line: 1465, column: 40, scope: !3174)
!3206 = !DILocation(line: 1465, column: 14, scope: !3174)
!3207 = !DILocation(line: 1465, column: 7, scope: !3174)
!3208 = !DILocation(line: 1467, column: 20, scope: !3209)
!3209 = distinct !DILexicalBlock(scope: !3072, file: !1, line: 1467, column: 7)
!3210 = !DILocation(line: 1467, column: 7, scope: !3209)
!3211 = !DILocation(line: 1467, column: 26, scope: !3209)
!3212 = !DILocation(line: 1467, column: 7, scope: !3072)
!3213 = !DILocation(line: 1468, column: 12, scope: !3209)
!3214 = !DILocation(line: 1468, column: 5, scope: !3209)
!3215 = !DILocation(line: 1470, column: 27, scope: !3072)
!3216 = !DILocation(line: 1470, column: 7, scope: !3072)
!3217 = !DILocation(line: 1470, column: 5, scope: !3072)
!3218 = !DILocation(line: 1471, column: 34, scope: !3072)
!3219 = !DILocation(line: 1471, column: 10, scope: !3072)
!3220 = !DILocation(line: 1471, column: 8, scope: !3072)
!3221 = !DILocation(line: 1472, column: 29, scope: !3222)
!3222 = distinct !DILexicalBlock(scope: !3072, file: !1, line: 1472, column: 7)
!3223 = !DILocation(line: 1472, column: 7, scope: !3222)
!3224 = !DILocation(line: 1472, column: 35, scope: !3222)
!3225 = !DILocation(line: 1472, column: 7, scope: !3072)
!3226 = !DILocation(line: 1474, column: 36, scope: !3227)
!3227 = distinct !DILexicalBlock(scope: !3228, file: !1, line: 1474, column: 11)
!3228 = distinct !DILexicalBlock(scope: !3222, file: !1, line: 1473, column: 5)
!3229 = !DILocation(line: 1474, column: 11, scope: !3227)
!3230 = !DILocation(line: 1474, column: 11, scope: !3228)
!3231 = !DILocation(line: 1475, column: 9, scope: !3227)
!3232 = !DILocation(line: 1475, column: 2, scope: !3227)
!3233 = !DILocation(line: 1477, column: 11, scope: !3234)
!3234 = distinct !DILexicalBlock(scope: !3228, file: !1, line: 1477, column: 11)
!3235 = !DILocation(line: 1477, column: 16, scope: !3234)
!3236 = !DILocation(line: 1477, column: 11, scope: !3228)
!3237 = !DILocation(line: 1478, column: 35, scope: !3234)
!3238 = !DILocation(line: 1478, column: 9, scope: !3234)
!3239 = !DILocation(line: 1478, column: 2, scope: !3234)
!3240 = !DILocation(line: 1480, column: 14, scope: !3228)
!3241 = !DILocation(line: 1480, column: 7, scope: !3228)
!3242 = !DILocation(line: 1483, column: 11, scope: !3072)
!3243 = !DILocation(line: 1483, column: 3, scope: !3072)
!3244 = !DILocation(line: 1487, column: 38, scope: !3245)
!3245 = distinct !DILexicalBlock(scope: !3072, file: !1, line: 1484, column: 5)
!3246 = !DILocation(line: 1487, column: 12, scope: !3245)
!3247 = !DILocation(line: 1487, column: 10, scope: !3245)
!3248 = !DILocation(line: 1488, column: 14, scope: !3245)
!3249 = !DILocation(line: 1488, column: 7, scope: !3245)
!3250 = !DILocation(line: 1494, column: 32, scope: !3245)
!3251 = !DILocation(line: 1494, column: 12, scope: !3245)
!3252 = !DILocation(line: 1494, column: 10, scope: !3245)
!3253 = !DILocation(line: 1495, column: 37, scope: !3254)
!3254 = distinct !DILexicalBlock(scope: !3245, file: !1, line: 1495, column: 11)
!3255 = !DILocation(line: 1495, column: 12, scope: !3254)
!3256 = !DILocation(line: 1495, column: 11, scope: !3245)
!3257 = !DILocation(line: 1496, column: 9, scope: !3254)
!3258 = !DILocation(line: 1496, column: 2, scope: !3254)
!3259 = !DILocation(line: 1498, column: 38, scope: !3245)
!3260 = !DILocation(line: 1498, column: 12, scope: !3245)
!3261 = !DILocation(line: 1498, column: 10, scope: !3245)
!3262 = !DILocation(line: 1499, column: 14, scope: !3245)
!3263 = !DILocation(line: 1499, column: 7, scope: !3245)
!3264 = !DILocation(line: 1502, column: 14, scope: !3245)
!3265 = !DILocation(line: 1502, column: 7, scope: !3245)
!3266 = !DILocation(line: 1504, column: 1, scope: !3072)
!3267 = distinct !DISubprogram(name: "tree_operand_length", scope: !133, file: !133, line: 5347, type: !3268, scopeLine: 5348, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3268 = !DISubroutineType(types: !3269)
!3269 = !{!1752, !3270}
!3270 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1656, line: 59, baseType: !3047)
!3271 = !DILocalVariable(name: "node", arg: 1, scope: !3267, file: !133, line: 5347, type: !3270)
!3272 = !DILocation(line: 5347, column: 33, scope: !3267)
!3273 = !DILocation(line: 5349, column: 7, scope: !3274)
!3274 = distinct !DILexicalBlock(scope: !3267, file: !133, line: 5349, column: 7)
!3275 = !DILocation(line: 5349, column: 7, scope: !3267)
!3276 = !DILocation(line: 5350, column: 12, scope: !3274)
!3277 = !DILocation(line: 5350, column: 5, scope: !3274)
!3278 = !DILocation(line: 5352, column: 12, scope: !3274)
!3279 = !DILocation(line: 5352, column: 5, scope: !3274)
!3280 = !DILocation(line: 5353, column: 1, scope: !3267)
!3281 = distinct !DISubprogram(name: "gimple_code", scope: !402, file: !402, line: 1052, type: !3282, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3282 = !DISubroutineType(types: !3283)
!3283 = !{!401, !3284}
!3284 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1656, line: 60, baseType: !3045)
!3285 = !DILocalVariable(name: "g", arg: 1, scope: !3281, file: !402, line: 1052, type: !3284)
!3286 = !DILocation(line: 1052, column: 27, scope: !3281)
!3287 = !DILocation(line: 1054, column: 10, scope: !3281)
!3288 = !DILocation(line: 1054, column: 13, scope: !3281)
!3289 = !DILocation(line: 1054, column: 20, scope: !3281)
!3290 = !DILocation(line: 1054, column: 3, scope: !3281)
!3291 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !402, file: !402, line: 3061, type: !3292, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3292 = !DISubroutineType(types: !3293)
!3293 = !{!5, !3284}
!3294 = !DILocalVariable(name: "gs", arg: 1, scope: !3291, file: !402, line: 3061, type: !3284)
!3295 = !DILocation(line: 3061, column: 35, scope: !3291)
!3296 = !DILocation(line: 3064, column: 10, scope: !3291)
!3297 = !DILocation(line: 3064, column: 14, scope: !3291)
!3298 = !DILocation(line: 3064, column: 25, scope: !3291)
!3299 = !DILocation(line: 3064, column: 3, scope: !3291)
!3300 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !3301, file: !3301, line: 427, type: !3302, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3301 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3302 = !DISubroutineType(types: !3303)
!3303 = !{!1655, !3304}
!3304 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !1643, line: 30, baseType: !3305)
!3305 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3306, size: 64)
!3306 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !133, line: 1893, baseType: !2027)
!3307 = !DILocalVariable(name: "use", arg: 1, scope: !3300, file: !3301, line: 427, type: !3304)
!3308 = !DILocation(line: 427, column: 33, scope: !3300)
!3309 = !DILocation(line: 429, column: 12, scope: !3300)
!3310 = !DILocation(line: 429, column: 17, scope: !3300)
!3311 = !DILocation(line: 429, column: 10, scope: !3300)
!3312 = !DILocation(line: 429, column: 3, scope: !3300)
!3313 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !3301, file: !3301, line: 442, type: !3314, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3314 = !DISubroutineType(types: !3315)
!3315 = !{!3304, !1986, !1752}
!3316 = !DILocalVariable(name: "gs", arg: 1, scope: !3313, file: !3301, line: 442, type: !1986)
!3317 = !DILocation(line: 442, column: 36, scope: !3313)
!3318 = !DILocalVariable(name: "i", arg: 2, scope: !3313, file: !3301, line: 442, type: !1752)
!3319 = !DILocation(line: 442, column: 44, scope: !3313)
!3320 = !DILocation(line: 444, column: 27, scope: !3313)
!3321 = !DILocation(line: 444, column: 31, scope: !3313)
!3322 = !DILocation(line: 444, column: 11, scope: !3313)
!3323 = !DILocation(line: 444, column: 35, scope: !3313)
!3324 = !DILocation(line: 444, column: 3, scope: !3313)
!3325 = distinct !DISubprogram(name: "gimple_bb", scope: !402, file: !402, line: 1112, type: !3326, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3326 = !DISubroutineType(types: !3327)
!3327 = !{!1950, !3284}
!3328 = !DILocalVariable(name: "g", arg: 1, scope: !3325, file: !402, line: 1112, type: !3284)
!3329 = !DILocation(line: 1112, column: 25, scope: !3325)
!3330 = !DILocation(line: 1114, column: 10, scope: !3325)
!3331 = !DILocation(line: 1114, column: 13, scope: !3325)
!3332 = !DILocation(line: 1114, column: 20, scope: !3325)
!3333 = !DILocation(line: 1114, column: 3, scope: !3325)
!3334 = distinct !DISubprogram(name: "single_pred", scope: !341, file: !341, line: 672, type: !3335, scopeLine: 673, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3335 = !DISubroutineType(types: !3336)
!3336 = !{!2472, !3337}
!3337 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1656, line: 112, baseType: !3338)
!3338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3339, size: 64)
!3339 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1951)
!3340 = !DILocalVariable(name: "bb", arg: 1, scope: !3334, file: !341, line: 672, type: !3337)
!3341 = !DILocation(line: 672, column: 32, scope: !3334)
!3342 = !DILocation(line: 674, column: 28, scope: !3334)
!3343 = !DILocation(line: 674, column: 10, scope: !3334)
!3344 = !DILocation(line: 674, column: 33, scope: !3334)
!3345 = !DILocation(line: 674, column: 3, scope: !3334)
!3346 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !402, file: !402, line: 1727, type: !3347, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3347 = !DISubroutineType(types: !3348)
!3348 = !{!1655, !3284}
!3349 = !DILocalVariable(name: "gs", arg: 1, scope: !3346, file: !402, line: 1727, type: !3284)
!3350 = !DILocation(line: 1727, column: 34, scope: !3346)
!3351 = !DILocation(line: 1730, column: 21, scope: !3346)
!3352 = !DILocation(line: 1730, column: 10, scope: !3346)
!3353 = !DILocation(line: 1730, column: 3, scope: !3346)
!3354 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !402, file: !402, line: 1815, type: !3355, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3355 = !DISubroutineType(types: !3356)
!3356 = !{!132, !3284}
!3357 = !DILocalVariable(name: "gs", arg: 1, scope: !3354, file: !402, line: 1815, type: !3284)
!3358 = !DILocation(line: 1815, column: 38, scope: !3354)
!3359 = !DILocalVariable(name: "code", scope: !3354, file: !402, line: 1817, type: !132)
!3360 = !DILocation(line: 1817, column: 18, scope: !3354)
!3361 = !DILocation(line: 1820, column: 28, scope: !3354)
!3362 = !DILocation(line: 1820, column: 10, scope: !3354)
!3363 = !DILocation(line: 1820, column: 8, scope: !3354)
!3364 = !DILocation(line: 1821, column: 29, scope: !3365)
!3365 = distinct !DILexicalBlock(scope: !3354, file: !402, line: 1821, column: 7)
!3366 = !DILocation(line: 1821, column: 7, scope: !3365)
!3367 = !DILocation(line: 1821, column: 35, scope: !3365)
!3368 = !DILocation(line: 1821, column: 7, scope: !3354)
!3369 = !DILocation(line: 1822, column: 12, scope: !3365)
!3370 = !DILocation(line: 1822, column: 10, scope: !3365)
!3371 = !DILocation(line: 1822, column: 5, scope: !3365)
!3372 = !DILocation(line: 1824, column: 10, scope: !3354)
!3373 = !DILocation(line: 1824, column: 3, scope: !3354)
!3374 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !402, file: !402, line: 1686, type: !3375, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3375 = !DISubroutineType(types: !3376)
!3376 = !{!440, !132}
!3377 = !DILocalVariable(name: "code", arg: 1, scope: !3374, file: !402, line: 1686, type: !132)
!3378 = !DILocation(line: 1686, column: 38, scope: !3374)
!3379 = !DILocation(line: 1688, column: 63, scope: !3374)
!3380 = !DILocation(line: 1688, column: 34, scope: !3374)
!3381 = !DILocation(line: 1688, column: 10, scope: !3374)
!3382 = !DILocation(line: 1688, column: 3, scope: !3374)
!3383 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !402, file: !402, line: 1759, type: !3347, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3384 = !DILocalVariable(name: "gs", arg: 1, scope: !3383, file: !402, line: 1759, type: !3284)
!3385 = !DILocation(line: 1759, column: 34, scope: !3383)
!3386 = !DILocation(line: 1763, column: 23, scope: !3387)
!3387 = distinct !DILexicalBlock(scope: !3383, file: !402, line: 1763, column: 7)
!3388 = !DILocation(line: 1763, column: 7, scope: !3387)
!3389 = !DILocation(line: 1763, column: 27, scope: !3387)
!3390 = !DILocation(line: 1763, column: 7, scope: !3383)
!3391 = !DILocation(line: 1764, column: 23, scope: !3387)
!3392 = !DILocation(line: 1764, column: 12, scope: !3387)
!3393 = !DILocation(line: 1764, column: 5, scope: !3387)
!3394 = !DILocation(line: 1766, column: 5, scope: !3387)
!3395 = !DILocation(line: 1767, column: 1, scope: !3383)
!3396 = distinct !DISubprogram(name: "loop_only_exit_p", scope: !1, file: !1, line: 1731, type: !3397, scopeLine: 1732, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3397 = !DISubroutineType(types: !3398)
!3398 = !{!1775, !3399, !3401}
!3399 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3400, size: 64)
!3400 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2202)
!3401 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_edge", file: !1656, line: 109, baseType: !3402)
!3402 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3403, size: 64)
!3403 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1968)
!3404 = !DILocalVariable(name: "loop", arg: 1, scope: !3396, file: !1, line: 1731, type: !3399)
!3405 = !DILocation(line: 1731, column: 38, scope: !3396)
!3406 = !DILocalVariable(name: "exit", arg: 2, scope: !3396, file: !1, line: 1731, type: !3401)
!3407 = !DILocation(line: 1731, column: 55, scope: !3396)
!3408 = !DILocalVariable(name: "body", scope: !3396, file: !1, line: 1733, type: !3409)
!3409 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2472, size: 64)
!3410 = !DILocation(line: 1733, column: 16, scope: !3396)
!3411 = !DILocalVariable(name: "bsi", scope: !3396, file: !1, line: 1734, type: !3412)
!3412 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !402, line: 265, baseType: !3413)
!3413 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !402, line: 254, size: 192, elements: !3414)
!3414 = !{!3415, !3416, !3417}
!3415 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3413, file: !402, line: 257, baseType: !1981, size: 64)
!3416 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3413, file: !402, line: 263, baseType: !1976, size: 64, offset: 64)
!3417 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3413, file: !402, line: 264, baseType: !2472, size: 64, offset: 128)
!3418 = !DILocation(line: 1734, column: 24, scope: !3396)
!3419 = !DILocalVariable(name: "i", scope: !3396, file: !1, line: 1735, type: !5)
!3420 = !DILocation(line: 1735, column: 12, scope: !3396)
!3421 = !DILocalVariable(name: "call", scope: !3396, file: !1, line: 1736, type: !1986)
!3422 = !DILocation(line: 1736, column: 10, scope: !3396)
!3423 = !DILocation(line: 1738, column: 7, scope: !3424)
!3424 = distinct !DILexicalBlock(scope: !3396, file: !1, line: 1738, column: 7)
!3425 = !DILocation(line: 1738, column: 28, scope: !3424)
!3426 = !DILocation(line: 1738, column: 15, scope: !3424)
!3427 = !DILocation(line: 1738, column: 12, scope: !3424)
!3428 = !DILocation(line: 1738, column: 7, scope: !3396)
!3429 = !DILocation(line: 1739, column: 5, scope: !3424)
!3430 = !DILocation(line: 1741, column: 25, scope: !3396)
!3431 = !DILocation(line: 1741, column: 10, scope: !3396)
!3432 = !DILocation(line: 1741, column: 8, scope: !3396)
!3433 = !DILocation(line: 1742, column: 10, scope: !3434)
!3434 = distinct !DILexicalBlock(scope: !3396, file: !1, line: 1742, column: 3)
!3435 = !DILocation(line: 1742, column: 8, scope: !3434)
!3436 = !DILocation(line: 1742, column: 15, scope: !3437)
!3437 = distinct !DILexicalBlock(scope: !3434, file: !1, line: 1742, column: 3)
!3438 = !DILocation(line: 1742, column: 19, scope: !3437)
!3439 = !DILocation(line: 1742, column: 25, scope: !3437)
!3440 = !DILocation(line: 1742, column: 17, scope: !3437)
!3441 = !DILocation(line: 1742, column: 3, scope: !3434)
!3442 = !DILocation(line: 1744, column: 32, scope: !3443)
!3443 = distinct !DILexicalBlock(scope: !3444, file: !1, line: 1744, column: 7)
!3444 = distinct !DILexicalBlock(scope: !3437, file: !1, line: 1743, column: 5)
!3445 = !DILocation(line: 1744, column: 37, scope: !3443)
!3446 = !DILocation(line: 1744, column: 18, scope: !3443)
!3447 = !DILocation(line: 1744, column: 12, scope: !3443)
!3448 = !DILocation(line: 1744, column: 43, scope: !3449)
!3449 = distinct !DILexicalBlock(scope: !3443, file: !1, line: 1744, column: 7)
!3450 = !DILocation(line: 1744, column: 42, scope: !3449)
!3451 = !DILocation(line: 1744, column: 7, scope: !3443)
!3452 = !DILocation(line: 1746, column: 11, scope: !3453)
!3453 = distinct !DILexicalBlock(scope: !3449, file: !1, line: 1745, column: 2)
!3454 = !DILocation(line: 1746, column: 9, scope: !3453)
!3455 = !DILocation(line: 1747, column: 21, scope: !3456)
!3456 = distinct !DILexicalBlock(scope: !3453, file: !1, line: 1747, column: 8)
!3457 = !DILocation(line: 1747, column: 8, scope: !3456)
!3458 = !DILocation(line: 1747, column: 27, scope: !3456)
!3459 = !DILocation(line: 1747, column: 8, scope: !3453)
!3460 = !DILocation(line: 1748, column: 6, scope: !3456)
!3461 = !DILocation(line: 1750, column: 33, scope: !3462)
!3462 = distinct !DILexicalBlock(scope: !3453, file: !1, line: 1750, column: 8)
!3463 = !DILocation(line: 1750, column: 8, scope: !3462)
!3464 = !DILocation(line: 1750, column: 8, scope: !3453)
!3465 = !DILocation(line: 1752, column: 14, scope: !3466)
!3466 = distinct !DILexicalBlock(scope: !3462, file: !1, line: 1751, column: 6)
!3467 = !DILocation(line: 1752, column: 8, scope: !3466)
!3468 = !DILocation(line: 1753, column: 8, scope: !3466)
!3469 = !DILocation(line: 1755, column: 2, scope: !3453)
!3470 = !DILocation(line: 1744, column: 60, scope: !3449)
!3471 = !DILocation(line: 1744, column: 7, scope: !3449)
!3472 = distinct !{!3472, !3451, !3473}
!3473 = !DILocation(line: 1755, column: 2, scope: !3443)
!3474 = !DILocation(line: 1756, column: 5, scope: !3444)
!3475 = !DILocation(line: 1742, column: 37, scope: !3437)
!3476 = !DILocation(line: 1742, column: 3, scope: !3437)
!3477 = distinct !{!3477, !3441, !3478}
!3478 = !DILocation(line: 1756, column: 5, scope: !3434)
!3479 = !DILocation(line: 1758, column: 9, scope: !3396)
!3480 = !DILocation(line: 1758, column: 3, scope: !3396)
!3481 = !DILocation(line: 1759, column: 3, scope: !3396)
!3482 = !DILocation(line: 1760, column: 1, scope: !3396)
!3483 = distinct !DISubprogram(name: "gsi_start_bb", scope: !402, file: !402, line: 4418, type: !3484, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3484 = !DISubroutineType(types: !3485)
!3485 = !{!3412, !2472}
!3486 = !DILocalVariable(name: "bb", arg: 1, scope: !3483, file: !402, line: 4418, type: !2472)
!3487 = !DILocation(line: 4418, column: 27, scope: !3483)
!3488 = !DILocalVariable(name: "i", scope: !3483, file: !402, line: 4420, type: !3412)
!3489 = !DILocation(line: 4420, column: 24, scope: !3483)
!3490 = !DILocalVariable(name: "seq", scope: !3483, file: !402, line: 4421, type: !1976)
!3491 = !DILocation(line: 4421, column: 14, scope: !3483)
!3492 = !DILocation(line: 4423, column: 17, scope: !3483)
!3493 = !DILocation(line: 4423, column: 9, scope: !3483)
!3494 = !DILocation(line: 4423, column: 7, scope: !3483)
!3495 = !DILocation(line: 4424, column: 29, scope: !3483)
!3496 = !DILocation(line: 4424, column: 11, scope: !3483)
!3497 = !DILocation(line: 4424, column: 5, scope: !3483)
!3498 = !DILocation(line: 4424, column: 9, scope: !3483)
!3499 = !DILocation(line: 4425, column: 11, scope: !3483)
!3500 = !DILocation(line: 4425, column: 5, scope: !3483)
!3501 = !DILocation(line: 4425, column: 9, scope: !3483)
!3502 = !DILocation(line: 4426, column: 10, scope: !3483)
!3503 = !DILocation(line: 4426, column: 5, scope: !3483)
!3504 = !DILocation(line: 4426, column: 8, scope: !3483)
!3505 = !DILocation(line: 4428, column: 3, scope: !3483)
!3506 = distinct !DISubprogram(name: "gsi_end_p", scope: !402, file: !402, line: 4467, type: !3507, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3507 = !DISubroutineType(types: !3508)
!3508 = !{!1775, !3412}
!3509 = !DILocalVariable(name: "i", arg: 1, scope: !3506, file: !402, line: 4467, type: !3412)
!3510 = !DILocation(line: 4467, column: 33, scope: !3506)
!3511 = !DILocation(line: 4469, column: 12, scope: !3506)
!3512 = !DILocation(line: 4469, column: 16, scope: !3506)
!3513 = !DILocation(line: 4469, column: 10, scope: !3506)
!3514 = !DILocation(line: 4469, column: 3, scope: !3506)
!3515 = distinct !DISubprogram(name: "gsi_stmt", scope: !402, file: !402, line: 4501, type: !3516, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3516 = !DISubroutineType(types: !3517)
!3517 = !{!1986, !3412}
!3518 = !DILocalVariable(name: "i", arg: 1, scope: !3515, file: !402, line: 4501, type: !3412)
!3519 = !DILocation(line: 4501, column: 32, scope: !3515)
!3520 = !DILocation(line: 4503, column: 12, scope: !3515)
!3521 = !DILocation(line: 4503, column: 17, scope: !3515)
!3522 = !DILocation(line: 4503, column: 3, scope: !3515)
!3523 = distinct !DISubprogram(name: "gsi_next", scope: !402, file: !402, line: 4485, type: !3524, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3524 = !DISubroutineType(types: !3525)
!3525 = !{null, !3526}
!3526 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3412, size: 64)
!3527 = !DILocalVariable(name: "i", arg: 1, scope: !3523, file: !402, line: 4485, type: !3526)
!3528 = !DILocation(line: 4485, column: 33, scope: !3523)
!3529 = !DILocation(line: 4487, column: 12, scope: !3523)
!3530 = !DILocation(line: 4487, column: 15, scope: !3523)
!3531 = !DILocation(line: 4487, column: 20, scope: !3523)
!3532 = !DILocation(line: 4487, column: 3, scope: !3523)
!3533 = !DILocation(line: 4487, column: 6, scope: !3523)
!3534 = !DILocation(line: 4487, column: 10, scope: !3523)
!3535 = !DILocation(line: 4488, column: 1, scope: !3523)
!3536 = distinct !DISubprogram(name: "number_of_iterations_exit", scope: !1, file: !1, line: 1771, type: !3537, scopeLine: 1774, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3537 = !DISubroutineType(types: !3538)
!3538 = !{!1775, !2201, !1966, !3539, !1775}
!3539 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3540, size: 64)
!3540 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_niter_desc", file: !2412, line: 657, size: 640, elements: !3541)
!3541 = !{!3542, !3543, !3544, !3545, !3546, !3553, !3554}
!3542 = !DIDerivedType(tag: DW_TAG_member, name: "assumptions", scope: !3540, file: !2412, line: 659, baseType: !1655, size: 64)
!3543 = !DIDerivedType(tag: DW_TAG_member, name: "may_be_zero", scope: !3540, file: !2412, line: 663, baseType: !1655, size: 64, offset: 64)
!3544 = !DIDerivedType(tag: DW_TAG_member, name: "niter", scope: !3540, file: !2412, line: 667, baseType: !1655, size: 64, offset: 128)
!3545 = !DIDerivedType(tag: DW_TAG_member, name: "max", scope: !3540, file: !2412, line: 671, baseType: !1704, size: 128, offset: 192)
!3546 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !3540, file: !2412, line: 679, baseType: !3547, size: 192, offset: 320)
!3547 = !DIDerivedType(tag: DW_TAG_typedef, name: "affine_iv", file: !2412, line: 651, baseType: !3548)
!3548 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2412, line: 644, size: 192, elements: !3549)
!3549 = !{!3550, !3551, !3552}
!3550 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3548, file: !2412, line: 647, baseType: !1655, size: 64)
!3551 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !3548, file: !2412, line: 647, baseType: !1655, size: 64, offset: 64)
!3552 = !DIDerivedType(tag: DW_TAG_member, name: "no_overflow", scope: !3548, file: !2412, line: 650, baseType: !1775, size: 8, offset: 128)
!3553 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !3540, file: !2412, line: 680, baseType: !1655, size: 64, offset: 512)
!3554 = !DIDerivedType(tag: DW_TAG_member, name: "cmp", scope: !3540, file: !2412, line: 681, baseType: !132, size: 32, offset: 576)
!3555 = !DILocalVariable(name: "loop", arg: 1, scope: !3536, file: !1, line: 1771, type: !2201)
!3556 = !DILocation(line: 1771, column: 41, scope: !3536)
!3557 = !DILocalVariable(name: "exit", arg: 2, scope: !3536, file: !1, line: 1771, type: !1966)
!3558 = !DILocation(line: 1771, column: 52, scope: !3536)
!3559 = !DILocalVariable(name: "niter", arg: 3, scope: !3536, file: !1, line: 1772, type: !3539)
!3560 = !DILocation(line: 1772, column: 31, scope: !3536)
!3561 = !DILocalVariable(name: "warn", arg: 4, scope: !3536, file: !1, line: 1773, type: !1775)
!3562 = !DILocation(line: 1773, column: 12, scope: !3536)
!3563 = !DILocalVariable(name: "stmt", scope: !3536, file: !1, line: 1775, type: !1986)
!3564 = !DILocation(line: 1775, column: 10, scope: !3536)
!3565 = !DILocalVariable(name: "type", scope: !3536, file: !1, line: 1776, type: !1655)
!3566 = !DILocation(line: 1776, column: 8, scope: !3536)
!3567 = !DILocalVariable(name: "op0", scope: !3536, file: !1, line: 1777, type: !1655)
!3568 = !DILocation(line: 1777, column: 8, scope: !3536)
!3569 = !DILocalVariable(name: "op1", scope: !3536, file: !1, line: 1777, type: !1655)
!3570 = !DILocation(line: 1777, column: 13, scope: !3536)
!3571 = !DILocalVariable(name: "code", scope: !3536, file: !1, line: 1778, type: !132)
!3572 = !DILocation(line: 1778, column: 18, scope: !3536)
!3573 = !DILocalVariable(name: "iv0", scope: !3536, file: !1, line: 1779, type: !3547)
!3574 = !DILocation(line: 1779, column: 13, scope: !3536)
!3575 = !DILocalVariable(name: "iv1", scope: !3536, file: !1, line: 1779, type: !3547)
!3576 = !DILocation(line: 1779, column: 18, scope: !3536)
!3577 = !DILocation(line: 1781, column: 40, scope: !3578)
!3578 = distinct !DILexicalBlock(scope: !3536, file: !1, line: 1781, column: 7)
!3579 = !DILocation(line: 1781, column: 46, scope: !3578)
!3580 = !DILocation(line: 1781, column: 53, scope: !3578)
!3581 = !DILocation(line: 1781, column: 59, scope: !3578)
!3582 = !DILocation(line: 1781, column: 8, scope: !3578)
!3583 = !DILocation(line: 1781, column: 7, scope: !3536)
!3584 = !DILocation(line: 1782, column: 5, scope: !3578)
!3585 = !DILocation(line: 1784, column: 24, scope: !3536)
!3586 = !DILocation(line: 1784, column: 3, scope: !3536)
!3587 = !DILocation(line: 1784, column: 10, scope: !3536)
!3588 = !DILocation(line: 1784, column: 22, scope: !3536)
!3589 = !DILocation(line: 1785, column: 21, scope: !3536)
!3590 = !DILocation(line: 1785, column: 27, scope: !3536)
!3591 = !DILocation(line: 1785, column: 10, scope: !3536)
!3592 = !DILocation(line: 1785, column: 8, scope: !3536)
!3593 = !DILocation(line: 1786, column: 8, scope: !3594)
!3594 = distinct !DILexicalBlock(scope: !3536, file: !1, line: 1786, column: 7)
!3595 = !DILocation(line: 1786, column: 13, scope: !3594)
!3596 = !DILocation(line: 1786, column: 29, scope: !3594)
!3597 = !DILocation(line: 1786, column: 16, scope: !3594)
!3598 = !DILocation(line: 1786, column: 35, scope: !3594)
!3599 = !DILocation(line: 1786, column: 7, scope: !3536)
!3600 = !DILocation(line: 1787, column: 5, scope: !3594)
!3601 = !DILocation(line: 1790, column: 28, scope: !3536)
!3602 = !DILocation(line: 1790, column: 10, scope: !3536)
!3603 = !DILocation(line: 1790, column: 8, scope: !3536)
!3604 = !DILocation(line: 1791, column: 7, scope: !3605)
!3605 = distinct !DILexicalBlock(scope: !3536, file: !1, line: 1791, column: 7)
!3606 = !DILocation(line: 1791, column: 13, scope: !3605)
!3607 = !DILocation(line: 1791, column: 19, scope: !3605)
!3608 = !DILocation(line: 1791, column: 7, scope: !3536)
!3609 = !DILocation(line: 1792, column: 36, scope: !3605)
!3610 = !DILocation(line: 1792, column: 12, scope: !3605)
!3611 = !DILocation(line: 1792, column: 10, scope: !3605)
!3612 = !DILocation(line: 1792, column: 5, scope: !3605)
!3613 = !DILocation(line: 1794, column: 11, scope: !3536)
!3614 = !DILocation(line: 1794, column: 3, scope: !3536)
!3615 = !DILocation(line: 1801, column: 7, scope: !3616)
!3616 = distinct !DILexicalBlock(scope: !3536, file: !1, line: 1795, column: 5)
!3617 = !DILocation(line: 1804, column: 7, scope: !3616)
!3618 = !DILocation(line: 1807, column: 26, scope: !3536)
!3619 = !DILocation(line: 1807, column: 9, scope: !3536)
!3620 = !DILocation(line: 1807, column: 7, scope: !3536)
!3621 = !DILocation(line: 1808, column: 26, scope: !3536)
!3622 = !DILocation(line: 1808, column: 9, scope: !3536)
!3623 = !DILocation(line: 1808, column: 7, scope: !3536)
!3624 = !DILocation(line: 1809, column: 10, scope: !3536)
!3625 = !DILocation(line: 1809, column: 8, scope: !3536)
!3626 = !DILocation(line: 1811, column: 7, scope: !3627)
!3627 = distinct !DILexicalBlock(scope: !3536, file: !1, line: 1811, column: 7)
!3628 = !DILocation(line: 1811, column: 24, scope: !3627)
!3629 = !DILocation(line: 1812, column: 7, scope: !3627)
!3630 = !DILocation(line: 1812, column: 11, scope: !3627)
!3631 = !DILocation(line: 1811, column: 7, scope: !3536)
!3632 = !DILocation(line: 1813, column: 5, scope: !3627)
!3633 = !DILocation(line: 1815, column: 19, scope: !3634)
!3634 = distinct !DILexicalBlock(scope: !3536, file: !1, line: 1815, column: 7)
!3635 = !DILocation(line: 1815, column: 47, scope: !3634)
!3636 = !DILocation(line: 1815, column: 25, scope: !3634)
!3637 = !DILocation(line: 1815, column: 54, scope: !3634)
!3638 = !DILocation(line: 1815, column: 8, scope: !3634)
!3639 = !DILocation(line: 1815, column: 7, scope: !3536)
!3640 = !DILocation(line: 1816, column: 5, scope: !3634)
!3641 = !DILocation(line: 1817, column: 19, scope: !3642)
!3642 = distinct !DILexicalBlock(scope: !3536, file: !1, line: 1817, column: 7)
!3643 = !DILocation(line: 1817, column: 47, scope: !3642)
!3644 = !DILocation(line: 1817, column: 25, scope: !3642)
!3645 = !DILocation(line: 1817, column: 54, scope: !3642)
!3646 = !DILocation(line: 1817, column: 8, scope: !3642)
!3647 = !DILocation(line: 1817, column: 7, scope: !3536)
!3648 = !DILocation(line: 1818, column: 5, scope: !3642)
!3649 = !DILocation(line: 1822, column: 3, scope: !3536)
!3650 = !DILocation(line: 1824, column: 44, scope: !3536)
!3651 = !DILocation(line: 1824, column: 14, scope: !3536)
!3652 = !DILocation(line: 1824, column: 7, scope: !3536)
!3653 = !DILocation(line: 1824, column: 12, scope: !3536)
!3654 = !DILocation(line: 1825, column: 44, scope: !3536)
!3655 = !DILocation(line: 1825, column: 14, scope: !3536)
!3656 = !DILocation(line: 1825, column: 7, scope: !3536)
!3657 = !DILocation(line: 1825, column: 12, scope: !3536)
!3658 = !DILocation(line: 1826, column: 35, scope: !3659)
!3659 = distinct !DILexicalBlock(scope: !3536, file: !1, line: 1826, column: 7)
!3660 = !DILocation(line: 1826, column: 41, scope: !3659)
!3661 = !DILocation(line: 1826, column: 53, scope: !3659)
!3662 = !DILocation(line: 1826, column: 65, scope: !3659)
!3663 = !DILocation(line: 1827, column: 25, scope: !3659)
!3664 = !DILocation(line: 1827, column: 31, scope: !3659)
!3665 = !DILocation(line: 1827, column: 7, scope: !3659)
!3666 = !DILocation(line: 1826, column: 8, scope: !3659)
!3667 = !DILocation(line: 1826, column: 7, scope: !3536)
!3668 = !DILocation(line: 1829, column: 7, scope: !3669)
!3669 = distinct !DILexicalBlock(scope: !3659, file: !1, line: 1828, column: 5)
!3670 = !DILocation(line: 1830, column: 7, scope: !3669)
!3671 = !DILocation(line: 1833, column: 7, scope: !3672)
!3672 = distinct !DILexicalBlock(scope: !3536, file: !1, line: 1833, column: 7)
!3673 = !DILocation(line: 1833, column: 16, scope: !3672)
!3674 = !DILocation(line: 1833, column: 7, scope: !3536)
!3675 = !DILocation(line: 1835, column: 61, scope: !3676)
!3676 = distinct !DILexicalBlock(scope: !3672, file: !1, line: 1834, column: 5)
!3677 = !DILocation(line: 1836, column: 12, scope: !3676)
!3678 = !DILocation(line: 1836, column: 19, scope: !3676)
!3679 = !DILocation(line: 1835, column: 28, scope: !3676)
!3680 = !DILocation(line: 1835, column: 7, scope: !3676)
!3681 = !DILocation(line: 1835, column: 14, scope: !3676)
!3682 = !DILocation(line: 1835, column: 26, scope: !3676)
!3683 = !DILocation(line: 1837, column: 61, scope: !3676)
!3684 = !DILocation(line: 1838, column: 12, scope: !3676)
!3685 = !DILocation(line: 1838, column: 19, scope: !3676)
!3686 = !DILocation(line: 1837, column: 28, scope: !3676)
!3687 = !DILocation(line: 1837, column: 7, scope: !3676)
!3688 = !DILocation(line: 1837, column: 14, scope: !3676)
!3689 = !DILocation(line: 1837, column: 26, scope: !3676)
!3690 = !DILocation(line: 1839, column: 55, scope: !3676)
!3691 = !DILocation(line: 1839, column: 61, scope: !3676)
!3692 = !DILocation(line: 1839, column: 68, scope: !3676)
!3693 = !DILocation(line: 1839, column: 22, scope: !3676)
!3694 = !DILocation(line: 1839, column: 7, scope: !3676)
!3695 = !DILocation(line: 1839, column: 14, scope: !3676)
!3696 = !DILocation(line: 1839, column: 20, scope: !3676)
!3697 = !DILocation(line: 1840, column: 5, scope: !3676)
!3698 = !DILocation(line: 1843, column: 41, scope: !3536)
!3699 = !DILocation(line: 1844, column: 13, scope: !3536)
!3700 = !DILocation(line: 1844, column: 20, scope: !3536)
!3701 = !DILocation(line: 1843, column: 6, scope: !3536)
!3702 = !DILocation(line: 1842, column: 3, scope: !3536)
!3703 = !DILocation(line: 1842, column: 10, scope: !3536)
!3704 = !DILocation(line: 1843, column: 4, scope: !3536)
!3705 = !DILocation(line: 1846, column: 41, scope: !3536)
!3706 = !DILocation(line: 1847, column: 13, scope: !3536)
!3707 = !DILocation(line: 1847, column: 20, scope: !3536)
!3708 = !DILocation(line: 1846, column: 6, scope: !3536)
!3709 = !DILocation(line: 1845, column: 3, scope: !3536)
!3710 = !DILocation(line: 1845, column: 10, scope: !3536)
!3711 = !DILocation(line: 1846, column: 4, scope: !3536)
!3712 = !DILocation(line: 1849, column: 3, scope: !3536)
!3713 = !DILocation(line: 1851, column: 21, scope: !3714)
!3714 = distinct !DILexicalBlock(scope: !3536, file: !1, line: 1851, column: 7)
!3715 = !DILocation(line: 1851, column: 28, scope: !3714)
!3716 = !DILocation(line: 1851, column: 7, scope: !3714)
!3717 = !DILocation(line: 1851, column: 7, scope: !3536)
!3718 = !DILocation(line: 1852, column: 5, scope: !3714)
!3719 = !DILocation(line: 1857, column: 22, scope: !3720)
!3720 = distinct !DILexicalBlock(scope: !3536, file: !1, line: 1857, column: 7)
!3721 = !DILocation(line: 1857, column: 29, scope: !3720)
!3722 = !DILocation(line: 1857, column: 7, scope: !3720)
!3723 = !DILocation(line: 1857, column: 7, scope: !3536)
!3724 = !DILocation(line: 1858, column: 5, scope: !3720)
!3725 = !DILocation(line: 1860, column: 7, scope: !3726)
!3726 = distinct !DILexicalBlock(scope: !3536, file: !1, line: 1860, column: 7)
!3727 = !DILocation(line: 1860, column: 7, scope: !3536)
!3728 = !DILocation(line: 1861, column: 26, scope: !3726)
!3729 = !DILocation(line: 1861, column: 5, scope: !3726)
!3730 = !DILocation(line: 1861, column: 12, scope: !3726)
!3731 = !DILocation(line: 1861, column: 24, scope: !3726)
!3732 = !DILocation(line: 1863, column: 7, scope: !3733)
!3733 = distinct !DILexicalBlock(scope: !3536, file: !1, line: 1863, column: 7)
!3734 = !DILocation(line: 1863, column: 7, scope: !3536)
!3735 = !DILocalVariable(name: "wording", scope: !3736, file: !1, line: 1865, type: !1859)
!3736 = distinct !DILexicalBlock(scope: !3733, file: !1, line: 1864, column: 5)
!3737 = !DILocation(line: 1865, column: 19, scope: !3736)
!3738 = !DILocalVariable(name: "loc", scope: !3736, file: !1, line: 1866, type: !1783)
!3739 = !DILocation(line: 1866, column: 18, scope: !3736)
!3740 = !DILocation(line: 1866, column: 41, scope: !3736)
!3741 = !DILocation(line: 1866, column: 24, scope: !3736)
!3742 = !DILocation(line: 1870, column: 31, scope: !3743)
!3743 = distinct !DILexicalBlock(scope: !3736, file: !1, line: 1870, column: 11)
!3744 = !DILocation(line: 1870, column: 12, scope: !3743)
!3745 = !DILocation(line: 1870, column: 11, scope: !3736)
!3746 = !DILocation(line: 1871, column: 26, scope: !3743)
!3747 = !DILocation(line: 1871, column: 7, scope: !3743)
!3748 = !DILocation(line: 1872, column: 7, scope: !3743)
!3749 = !DILocation(line: 1872, column: 29, scope: !3743)
!3750 = !DILocation(line: 1872, column: 11, scope: !3743)
!3751 = !DILocation(line: 1872, column: 35, scope: !3743)
!3752 = !DILocation(line: 1872, column: 61, scope: !3743)
!3753 = !DILocation(line: 1872, column: 38, scope: !3743)
!3754 = !DILocation(line: 1870, column: 11, scope: !3743)
!3755 = !DILocation(line: 1873, column: 25, scope: !3743)
!3756 = !DILocation(line: 1873, column: 7, scope: !3743)
!3757 = !DILocation(line: 1873, column: 31, scope: !3743)
!3758 = !DILocation(line: 1873, column: 57, scope: !3743)
!3759 = !DILocation(line: 1873, column: 34, scope: !3743)
!3760 = !DILocation(line: 1875, column: 11, scope: !3743)
!3761 = !DILocation(line: 1874, column: 17, scope: !3743)
!3762 = !DILocation(line: 1874, column: 9, scope: !3743)
!3763 = !DILocation(line: 1880, column: 4, scope: !3743)
!3764 = !DILocation(line: 1879, column: 10, scope: !3743)
!3765 = !DILocation(line: 1884, column: 20, scope: !3736)
!3766 = !DILocation(line: 1884, column: 40, scope: !3736)
!3767 = !DILocation(line: 1884, column: 19, scope: !3736)
!3768 = !DILocation(line: 1884, column: 47, scope: !3736)
!3769 = !DILocation(line: 1884, column: 53, scope: !3736)
!3770 = !DILocation(line: 1885, column: 43, scope: !3736)
!3771 = !DILocation(line: 1884, column: 7, scope: !3736)
!3772 = !DILocation(line: 1886, column: 5, scope: !3736)
!3773 = !DILocation(line: 1888, column: 10, scope: !3536)
!3774 = !DILocation(line: 1888, column: 3, scope: !3536)
!3775 = !DILocation(line: 1889, column: 1, scope: !3536)
!3776 = distinct !DISubprogram(name: "gimple_cond_code", scope: !402, file: !402, line: 2221, type: !3355, scopeLine: 2222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3777 = !DILocalVariable(name: "gs", arg: 1, scope: !3776, file: !402, line: 2221, type: !3284)
!3778 = !DILocation(line: 2221, column: 32, scope: !3776)
!3779 = !DILocation(line: 2224, column: 27, scope: !3776)
!3780 = !DILocation(line: 2224, column: 31, scope: !3776)
!3781 = !DILocation(line: 2224, column: 38, scope: !3776)
!3782 = !DILocation(line: 2224, column: 3, scope: !3776)
!3783 = distinct !DISubprogram(name: "gimple_cond_lhs", scope: !402, file: !402, line: 2241, type: !3347, scopeLine: 2242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3784 = !DILocalVariable(name: "gs", arg: 1, scope: !3783, file: !402, line: 2241, type: !3284)
!3785 = !DILocation(line: 2241, column: 31, scope: !3783)
!3786 = !DILocation(line: 2244, column: 21, scope: !3783)
!3787 = !DILocation(line: 2244, column: 10, scope: !3783)
!3788 = !DILocation(line: 2244, column: 3, scope: !3783)
!3789 = distinct !DISubprogram(name: "gimple_cond_rhs", scope: !402, file: !402, line: 2271, type: !3347, scopeLine: 2272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3790 = !DILocalVariable(name: "gs", arg: 1, scope: !3789, file: !402, line: 2271, type: !3284)
!3791 = !DILocation(line: 2271, column: 31, scope: !3789)
!3792 = !DILocation(line: 2274, column: 21, scope: !3789)
!3793 = !DILocation(line: 2274, column: 10, scope: !3789)
!3794 = !DILocation(line: 2274, column: 3, scope: !3789)
!3795 = distinct !DISubprogram(name: "loop_containing_stmt", scope: !3301, file: !3301, line: 617, type: !3796, scopeLine: 618, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3796 = !DISubroutineType(types: !3797)
!3797 = !{!2201, !1986}
!3798 = !DILocalVariable(name: "stmt", arg: 1, scope: !3795, file: !3301, line: 617, type: !1986)
!3799 = !DILocation(line: 617, column: 30, scope: !3795)
!3800 = !DILocalVariable(name: "bb", scope: !3795, file: !3301, line: 619, type: !2472)
!3801 = !DILocation(line: 619, column: 15, scope: !3795)
!3802 = !DILocation(line: 619, column: 31, scope: !3795)
!3803 = !DILocation(line: 619, column: 20, scope: !3795)
!3804 = !DILocation(line: 620, column: 8, scope: !3805)
!3805 = distinct !DILexicalBlock(scope: !3795, file: !3301, line: 620, column: 7)
!3806 = !DILocation(line: 620, column: 7, scope: !3795)
!3807 = !DILocation(line: 621, column: 5, scope: !3805)
!3808 = !DILocation(line: 623, column: 10, scope: !3795)
!3809 = !DILocation(line: 623, column: 14, scope: !3795)
!3810 = !DILocation(line: 623, column: 3, scope: !3795)
!3811 = !DILocation(line: 624, column: 1, scope: !3795)
!3812 = distinct !DISubprogram(name: "number_of_iterations_cond", scope: !1, file: !1, line: 1195, type: !3813, scopeLine: 1199, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!3813 = !DISubroutineType(types: !3814)
!3814 = !{!1775, !2201, !1655, !3815, !132, !3815, !3539, !1775}
!3815 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3547, size: 64)
!3816 = !DILocalVariable(name: "loop", arg: 1, scope: !3812, file: !1, line: 1195, type: !2201)
!3817 = !DILocation(line: 1195, column: 41, scope: !3812)
!3818 = !DILocalVariable(name: "type", arg: 2, scope: !3812, file: !1, line: 1196, type: !1655)
!3819 = !DILocation(line: 1196, column: 12, scope: !3812)
!3820 = !DILocalVariable(name: "iv0", arg: 3, scope: !3812, file: !1, line: 1196, type: !3815)
!3821 = !DILocation(line: 1196, column: 29, scope: !3812)
!3822 = !DILocalVariable(name: "code", arg: 4, scope: !3812, file: !1, line: 1196, type: !132)
!3823 = !DILocation(line: 1196, column: 49, scope: !3812)
!3824 = !DILocalVariable(name: "iv1", arg: 5, scope: !3812, file: !1, line: 1197, type: !3815)
!3825 = !DILocation(line: 1197, column: 18, scope: !3812)
!3826 = !DILocalVariable(name: "niter", arg: 6, scope: !3812, file: !1, line: 1197, type: !3539)
!3827 = !DILocation(line: 1197, column: 47, scope: !3812)
!3828 = !DILocalVariable(name: "only_exit", arg: 7, scope: !3812, file: !1, line: 1198, type: !1775)
!3829 = !DILocation(line: 1198, column: 12, scope: !3812)
!3830 = !DILocalVariable(name: "exit_must_be_taken", scope: !3812, file: !1, line: 1200, type: !1775)
!3831 = !DILocation(line: 1200, column: 8, scope: !3812)
!3832 = !DILocalVariable(name: "ret", scope: !3812, file: !1, line: 1200, type: !1775)
!3833 = !DILocation(line: 1200, column: 36, scope: !3812)
!3834 = !DILocalVariable(name: "bnds", scope: !3812, file: !1, line: 1201, type: !3835)
!3835 = !DIDerivedType(tag: DW_TAG_typedef, name: "bounds", file: !1, line: 65, baseType: !3836)
!3836 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1, line: 62, size: 256, elements: !3837)
!3837 = !{!3838, !3850}
!3838 = !DIDerivedType(tag: DW_TAG_member, name: "below", scope: !3836, file: !1, line: 64, baseType: !3839, size: 128)
!3839 = !DIDerivedType(tag: DW_TAG_typedef, name: "mpz_t", file: !3840, line: 73, baseType: !3841)
!3840 = !DIFile(filename: "./mini-gmp.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3841 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3842, size: 128, elements: !1756)
!3842 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mpz_struct", file: !3840, line: 71, baseType: !3843)
!3843 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3840, line: 63, size: 128, elements: !3844)
!3844 = !{!3845, !3846, !3847}
!3845 = !DIDerivedType(tag: DW_TAG_member, name: "_mp_alloc", scope: !3843, file: !3840, line: 65, baseType: !1752, size: 32)
!3846 = !DIDerivedType(tag: DW_TAG_member, name: "_mp_size", scope: !3843, file: !3840, line: 67, baseType: !1752, size: 32, offset: 32)
!3847 = !DIDerivedType(tag: DW_TAG_member, name: "_mp_d", scope: !3843, file: !3840, line: 70, baseType: !3848, size: 64, offset: 64)
!3848 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3849, size: 64)
!3849 = !DIDerivedType(tag: DW_TAG_typedef, name: "mp_limb_t", file: !3840, line: 56, baseType: !1709)
!3850 = !DIDerivedType(tag: DW_TAG_member, name: "up", scope: !3836, file: !1, line: 64, baseType: !3839, size: 128, offset: 128)
!3851 = !DILocation(line: 1201, column: 10, scope: !3812)
!3852 = !DILocation(line: 1208, column: 24, scope: !3812)
!3853 = !DILocation(line: 1208, column: 3, scope: !3812)
!3854 = !DILocation(line: 1208, column: 10, scope: !3812)
!3855 = !DILocation(line: 1208, column: 22, scope: !3812)
!3856 = !DILocation(line: 1209, column: 24, scope: !3812)
!3857 = !DILocation(line: 1209, column: 3, scope: !3812)
!3858 = !DILocation(line: 1209, column: 10, scope: !3812)
!3859 = !DILocation(line: 1209, column: 22, scope: !3812)
!3860 = !DILocation(line: 1210, column: 3, scope: !3812)
!3861 = !DILocation(line: 1210, column: 10, scope: !3812)
!3862 = !DILocation(line: 1210, column: 16, scope: !3812)
!3863 = !DILocation(line: 1211, column: 3, scope: !3812)
!3864 = !DILocation(line: 1211, column: 10, scope: !3812)
!3865 = !DILocation(line: 1211, column: 16, scope: !3812)
!3866 = !DILocation(line: 1213, column: 3, scope: !3812)
!3867 = !DILocation(line: 1213, column: 10, scope: !3812)
!3868 = !DILocation(line: 1213, column: 16, scope: !3812)
!3869 = !DILocation(line: 1214, column: 3, scope: !3812)
!3870 = !DILocation(line: 1214, column: 10, scope: !3812)
!3871 = !DILocation(line: 1214, column: 14, scope: !3812)
!3872 = !DILocation(line: 1218, column: 7, scope: !3873)
!3873 = distinct !DILexicalBlock(scope: !3812, file: !1, line: 1218, column: 7)
!3874 = !DILocation(line: 1218, column: 12, scope: !3873)
!3875 = !DILocation(line: 1218, column: 23, scope: !3873)
!3876 = !DILocation(line: 1218, column: 26, scope: !3873)
!3877 = !DILocation(line: 1218, column: 31, scope: !3873)
!3878 = !DILocation(line: 1219, column: 7, scope: !3873)
!3879 = !DILocation(line: 1219, column: 11, scope: !3873)
!3880 = !DILocation(line: 1219, column: 16, scope: !3873)
!3881 = !DILocation(line: 1219, column: 27, scope: !3873)
!3882 = !DILocation(line: 1219, column: 45, scope: !3873)
!3883 = !DILocation(line: 1219, column: 50, scope: !3873)
!3884 = !DILocation(line: 1219, column: 30, scope: !3873)
!3885 = !DILocation(line: 1218, column: 7, scope: !3812)
!3886 = !DILocation(line: 1221, column: 7, scope: !3887)
!3887 = distinct !DILexicalBlock(scope: !3873, file: !1, line: 1220, column: 5)
!3888 = !DILocalVariable(name: "tmp", scope: !3889, file: !1, line: 1221, type: !3815)
!3889 = distinct !DILexicalBlock(scope: !3887, file: !1, line: 1221, column: 7)
!3890 = !DILocation(line: 1221, column: 7, scope: !3889)
!3891 = !DILocation(line: 1222, column: 36, scope: !3887)
!3892 = !DILocation(line: 1222, column: 14, scope: !3887)
!3893 = !DILocation(line: 1222, column: 12, scope: !3887)
!3894 = !DILocation(line: 1223, column: 5, scope: !3887)
!3895 = !DILocation(line: 1225, column: 7, scope: !3896)
!3896 = distinct !DILexicalBlock(scope: !3812, file: !1, line: 1225, column: 7)
!3897 = !DILocation(line: 1225, column: 7, scope: !3812)
!3898 = !DILocation(line: 1232, column: 7, scope: !3899)
!3899 = distinct !DILexicalBlock(scope: !3896, file: !1, line: 1226, column: 5)
!3900 = !DILocation(line: 1232, column: 12, scope: !3899)
!3901 = !DILocation(line: 1232, column: 24, scope: !3899)
!3902 = !DILocation(line: 1233, column: 7, scope: !3899)
!3903 = !DILocation(line: 1233, column: 12, scope: !3899)
!3904 = !DILocation(line: 1233, column: 24, scope: !3899)
!3905 = !DILocation(line: 1234, column: 5, scope: !3899)
!3906 = !DILocation(line: 1239, column: 7, scope: !3907)
!3907 = distinct !DILexicalBlock(scope: !3812, file: !1, line: 1239, column: 7)
!3908 = !DILocation(line: 1239, column: 7, scope: !3812)
!3909 = !DILocation(line: 1241, column: 27, scope: !3910)
!3910 = distinct !DILexicalBlock(scope: !3911, file: !1, line: 1241, column: 11)
!3911 = distinct !DILexicalBlock(scope: !3907, file: !1, line: 1240, column: 5)
!3912 = !DILocation(line: 1241, column: 32, scope: !3910)
!3913 = !DILocation(line: 1241, column: 12, scope: !3910)
!3914 = !DILocation(line: 1241, column: 38, scope: !3910)
!3915 = !DILocation(line: 1241, column: 41, scope: !3910)
!3916 = !DILocation(line: 1241, column: 46, scope: !3910)
!3917 = !DILocation(line: 1241, column: 11, scope: !3911)
!3918 = !DILocation(line: 1242, column: 21, scope: !3910)
!3919 = !DILocation(line: 1242, column: 2, scope: !3910)
!3920 = !DILocation(line: 1243, column: 32, scope: !3921)
!3921 = distinct !DILexicalBlock(scope: !3910, file: !1, line: 1243, column: 16)
!3922 = !DILocation(line: 1243, column: 37, scope: !3921)
!3923 = !DILocation(line: 1243, column: 17, scope: !3921)
!3924 = !DILocation(line: 1243, column: 43, scope: !3921)
!3925 = !DILocation(line: 1243, column: 46, scope: !3921)
!3926 = !DILocation(line: 1243, column: 51, scope: !3921)
!3927 = !DILocation(line: 1243, column: 16, scope: !3910)
!3928 = !DILocation(line: 1244, column: 21, scope: !3921)
!3929 = !DILocation(line: 1244, column: 2, scope: !3921)
!3930 = !DILocation(line: 1245, column: 5, scope: !3911)
!3931 = !DILocation(line: 1250, column: 23, scope: !3932)
!3932 = distinct !DILexicalBlock(scope: !3812, file: !1, line: 1250, column: 7)
!3933 = !DILocation(line: 1250, column: 28, scope: !3932)
!3934 = !DILocation(line: 1250, column: 8, scope: !3932)
!3935 = !DILocation(line: 1250, column: 34, scope: !3932)
!3936 = !DILocation(line: 1250, column: 53, scope: !3932)
!3937 = !DILocation(line: 1250, column: 58, scope: !3932)
!3938 = !DILocation(line: 1250, column: 38, scope: !3932)
!3939 = !DILocation(line: 1250, column: 7, scope: !3812)
!3940 = !DILocation(line: 1252, column: 11, scope: !3941)
!3941 = distinct !DILexicalBlock(scope: !3942, file: !1, line: 1252, column: 11)
!3942 = distinct !DILexicalBlock(scope: !3932, file: !1, line: 1251, column: 5)
!3943 = !DILocation(line: 1252, column: 16, scope: !3941)
!3944 = !DILocation(line: 1252, column: 11, scope: !3942)
!3945 = !DILocation(line: 1253, column: 2, scope: !3941)
!3946 = !DILocation(line: 1255, column: 56, scope: !3942)
!3947 = !DILocation(line: 1256, column: 9, scope: !3942)
!3948 = !DILocation(line: 1256, column: 14, scope: !3942)
!3949 = !DILocation(line: 1256, column: 20, scope: !3942)
!3950 = !DILocation(line: 1256, column: 25, scope: !3942)
!3951 = !DILocation(line: 1255, column: 19, scope: !3942)
!3952 = !DILocation(line: 1255, column: 7, scope: !3942)
!3953 = !DILocation(line: 1255, column: 12, scope: !3942)
!3954 = !DILocation(line: 1255, column: 17, scope: !3942)
!3955 = !DILocation(line: 1257, column: 7, scope: !3942)
!3956 = !DILocation(line: 1257, column: 12, scope: !3942)
!3957 = !DILocation(line: 1257, column: 24, scope: !3942)
!3958 = !DILocation(line: 1258, column: 34, scope: !3942)
!3959 = !DILocation(line: 1258, column: 19, scope: !3942)
!3960 = !DILocation(line: 1258, column: 7, scope: !3942)
!3961 = !DILocation(line: 1258, column: 12, scope: !3942)
!3962 = !DILocation(line: 1258, column: 17, scope: !3942)
!3963 = !DILocation(line: 1259, column: 7, scope: !3942)
!3964 = !DILocation(line: 1259, column: 12, scope: !3942)
!3965 = !DILocation(line: 1259, column: 24, scope: !3942)
!3966 = !DILocation(line: 1260, column: 5, scope: !3942)
!3967 = !DILocation(line: 1265, column: 22, scope: !3968)
!3968 = distinct !DILexicalBlock(scope: !3812, file: !1, line: 1265, column: 7)
!3969 = !DILocation(line: 1265, column: 27, scope: !3968)
!3970 = !DILocation(line: 1265, column: 7, scope: !3968)
!3971 = !DILocation(line: 1265, column: 33, scope: !3968)
!3972 = !DILocation(line: 1265, column: 51, scope: !3968)
!3973 = !DILocation(line: 1265, column: 56, scope: !3968)
!3974 = !DILocation(line: 1265, column: 36, scope: !3968)
!3975 = !DILocation(line: 1265, column: 7, scope: !3812)
!3976 = !DILocation(line: 1266, column: 5, scope: !3968)
!3977 = !DILocation(line: 1269, column: 7, scope: !3978)
!3978 = distinct !DILexicalBlock(scope: !3812, file: !1, line: 1269, column: 7)
!3979 = !DILocation(line: 1269, column: 12, scope: !3978)
!3980 = !DILocation(line: 1269, column: 7, scope: !3812)
!3981 = !DILocation(line: 1271, column: 11, scope: !3982)
!3982 = distinct !DILexicalBlock(scope: !3983, file: !1, line: 1271, column: 11)
!3983 = distinct !DILexicalBlock(scope: !3978, file: !1, line: 1270, column: 5)
!3984 = !DILocation(line: 1271, column: 16, scope: !3982)
!3985 = !DILocation(line: 1271, column: 21, scope: !3982)
!3986 = !DILocation(line: 1271, column: 47, scope: !3982)
!3987 = !DILocation(line: 1271, column: 52, scope: !3982)
!3988 = !DILocation(line: 1271, column: 24, scope: !3982)
!3989 = !DILocation(line: 1271, column: 11, scope: !3983)
!3990 = !DILocation(line: 1272, column: 2, scope: !3982)
!3991 = !DILocation(line: 1274, column: 27, scope: !3992)
!3992 = distinct !DILexicalBlock(scope: !3983, file: !1, line: 1274, column: 11)
!3993 = !DILocation(line: 1274, column: 32, scope: !3992)
!3994 = !DILocation(line: 1274, column: 12, scope: !3992)
!3995 = !DILocation(line: 1274, column: 38, scope: !3992)
!3996 = !DILocation(line: 1274, column: 65, scope: !3992)
!3997 = !DILocation(line: 1274, column: 70, scope: !3992)
!3998 = !DILocation(line: 1274, column: 42, scope: !3992)
!3999 = !DILocation(line: 1274, column: 11, scope: !3983)
!4000 = !DILocation(line: 1275, column: 2, scope: !3992)
!4001 = !DILocation(line: 1276, column: 5, scope: !3983)
!4002 = !DILocation(line: 1279, column: 22, scope: !4003)
!4003 = distinct !DILexicalBlock(scope: !3812, file: !1, line: 1279, column: 7)
!4004 = !DILocation(line: 1279, column: 7, scope: !4003)
!4005 = !DILocation(line: 1279, column: 7, scope: !3812)
!4006 = !DILocation(line: 1281, column: 56, scope: !4007)
!4007 = distinct !DILexicalBlock(scope: !4003, file: !1, line: 1280, column: 5)
!4008 = !DILocation(line: 1281, column: 37, scope: !4007)
!4009 = !DILocation(line: 1281, column: 22, scope: !4007)
!4010 = !DILocation(line: 1281, column: 7, scope: !4007)
!4011 = !DILocation(line: 1281, column: 14, scope: !4007)
!4012 = !DILocation(line: 1281, column: 20, scope: !4007)
!4013 = !DILocation(line: 1282, column: 7, scope: !4007)
!4014 = !DILocation(line: 1282, column: 14, scope: !4007)
!4015 = !DILocation(line: 1282, column: 20, scope: !4007)
!4016 = !DILocation(line: 1283, column: 7, scope: !4007)
!4017 = !DILocation(line: 1288, column: 21, scope: !3812)
!4018 = !DILocation(line: 1288, column: 27, scope: !3812)
!4019 = !DILocation(line: 1288, column: 32, scope: !3812)
!4020 = !DILocation(line: 1288, column: 38, scope: !3812)
!4021 = !DILocation(line: 1288, column: 43, scope: !3812)
!4022 = !DILocation(line: 1288, column: 3, scope: !3812)
!4023 = !DILocation(line: 1290, column: 7, scope: !4024)
!4024 = distinct !DILexicalBlock(scope: !3812, file: !1, line: 1290, column: 7)
!4025 = !DILocation(line: 1290, column: 17, scope: !4024)
!4026 = !DILocation(line: 1290, column: 21, scope: !4024)
!4027 = !DILocation(line: 1290, column: 32, scope: !4024)
!4028 = !DILocation(line: 1290, column: 7, scope: !3812)
!4029 = !DILocation(line: 1292, column: 16, scope: !4030)
!4030 = distinct !DILexicalBlock(scope: !4024, file: !1, line: 1291, column: 5)
!4031 = !DILocation(line: 1293, column: 51, scope: !4030)
!4032 = !DILocation(line: 1293, column: 57, scope: !4030)
!4033 = !DILocation(line: 1292, column: 7, scope: !4030)
!4034 = !DILocation(line: 1295, column: 16, scope: !4030)
!4035 = !DILocation(line: 1295, column: 7, scope: !4030)
!4036 = !DILocation(line: 1296, column: 23, scope: !4030)
!4037 = !DILocation(line: 1296, column: 34, scope: !4030)
!4038 = !DILocation(line: 1296, column: 7, scope: !4030)
!4039 = !DILocation(line: 1297, column: 16, scope: !4030)
!4040 = !DILocation(line: 1298, column: 9, scope: !4030)
!4041 = !DILocation(line: 1298, column: 14, scope: !4030)
!4042 = !DILocation(line: 1299, column: 11, scope: !4030)
!4043 = !DILocation(line: 1299, column: 16, scope: !4030)
!4044 = !DILocation(line: 1297, column: 7, scope: !4030)
!4045 = !DILocation(line: 1301, column: 23, scope: !4030)
!4046 = !DILocation(line: 1301, column: 34, scope: !4030)
!4047 = !DILocation(line: 1301, column: 7, scope: !4030)
!4048 = !DILocation(line: 1302, column: 16, scope: !4030)
!4049 = !DILocation(line: 1302, column: 7, scope: !4030)
!4050 = !DILocation(line: 1304, column: 16, scope: !4030)
!4051 = !DILocation(line: 1304, column: 7, scope: !4030)
!4052 = !DILocation(line: 1305, column: 20, scope: !4030)
!4053 = !DILocation(line: 1305, column: 40, scope: !4030)
!4054 = !DILocation(line: 1305, column: 35, scope: !4030)
!4055 = !DILocation(line: 1305, column: 7, scope: !4030)
!4056 = !DILocation(line: 1306, column: 16, scope: !4030)
!4057 = !DILocation(line: 1306, column: 7, scope: !4030)
!4058 = !DILocation(line: 1307, column: 20, scope: !4030)
!4059 = !DILocation(line: 1307, column: 40, scope: !4030)
!4060 = !DILocation(line: 1307, column: 35, scope: !4030)
!4061 = !DILocation(line: 1307, column: 7, scope: !4030)
!4062 = !DILocation(line: 1308, column: 16, scope: !4030)
!4063 = !DILocation(line: 1308, column: 7, scope: !4030)
!4064 = !DILocation(line: 1309, column: 5, scope: !4030)
!4065 = !DILocation(line: 1311, column: 11, scope: !3812)
!4066 = !DILocation(line: 1311, column: 3, scope: !3812)
!4067 = !DILocation(line: 1314, column: 7, scope: !4068)
!4068 = distinct !DILexicalBlock(scope: !3812, file: !1, line: 1312, column: 5)
!4069 = !DILocation(line: 1315, column: 38, scope: !4068)
!4070 = !DILocation(line: 1315, column: 44, scope: !4068)
!4071 = !DILocation(line: 1315, column: 49, scope: !4068)
!4072 = !DILocation(line: 1315, column: 54, scope: !4068)
!4073 = !DILocation(line: 1315, column: 60, scope: !4068)
!4074 = !DILocation(line: 1316, column: 10, scope: !4068)
!4075 = !DILocation(line: 1315, column: 13, scope: !4068)
!4076 = !DILocation(line: 1315, column: 11, scope: !4068)
!4077 = !DILocation(line: 1317, column: 7, scope: !4068)
!4078 = !DILocation(line: 1320, column: 38, scope: !4068)
!4079 = !DILocation(line: 1320, column: 44, scope: !4068)
!4080 = !DILocation(line: 1320, column: 49, scope: !4068)
!4081 = !DILocation(line: 1320, column: 54, scope: !4068)
!4082 = !DILocation(line: 1320, column: 61, scope: !4068)
!4083 = !DILocation(line: 1320, column: 13, scope: !4068)
!4084 = !DILocation(line: 1320, column: 11, scope: !4068)
!4085 = !DILocation(line: 1322, column: 7, scope: !4068)
!4086 = !DILocation(line: 1325, column: 38, scope: !4068)
!4087 = !DILocation(line: 1325, column: 44, scope: !4068)
!4088 = !DILocation(line: 1325, column: 49, scope: !4068)
!4089 = !DILocation(line: 1325, column: 54, scope: !4068)
!4090 = !DILocation(line: 1325, column: 61, scope: !4068)
!4091 = !DILocation(line: 1325, column: 13, scope: !4068)
!4092 = !DILocation(line: 1325, column: 11, scope: !4068)
!4093 = !DILocation(line: 1327, column: 7, scope: !4068)
!4094 = !DILocation(line: 1330, column: 7, scope: !4068)
!4095 = !DILocation(line: 1331, column: 5, scope: !4068)
!4096 = !DILocation(line: 1333, column: 19, scope: !3812)
!4097 = !DILocation(line: 1333, column: 14, scope: !3812)
!4098 = !DILocation(line: 1333, column: 3, scope: !3812)
!4099 = !DILocation(line: 1334, column: 19, scope: !3812)
!4100 = !DILocation(line: 1334, column: 14, scope: !3812)
!4101 = !DILocation(line: 1334, column: 3, scope: !3812)
!4102 = !DILocation(line: 1336, column: 7, scope: !4103)
!4103 = distinct !DILexicalBlock(scope: !3812, file: !1, line: 1336, column: 7)
!4104 = !DILocation(line: 1336, column: 17, scope: !4103)
!4105 = !DILocation(line: 1336, column: 21, scope: !4103)
!4106 = !DILocation(line: 1336, column: 32, scope: !4103)
!4107 = !DILocation(line: 1336, column: 7, scope: !3812)
!4108 = !DILocation(line: 1338, column: 11, scope: !4109)
!4109 = distinct !DILexicalBlock(scope: !4110, file: !1, line: 1338, column: 11)
!4110 = distinct !DILexicalBlock(scope: !4103, file: !1, line: 1337, column: 5)
!4111 = !DILocation(line: 1338, column: 11, scope: !4110)
!4112 = !DILocation(line: 1340, column: 13, scope: !4113)
!4113 = distinct !DILexicalBlock(scope: !4109, file: !1, line: 1339, column: 2)
!4114 = !DILocation(line: 1340, column: 4, scope: !4113)
!4115 = !DILocation(line: 1341, column: 27, scope: !4116)
!4116 = distinct !DILexicalBlock(scope: !4113, file: !1, line: 1341, column: 8)
!4117 = !DILocation(line: 1341, column: 34, scope: !4116)
!4118 = !DILocation(line: 1341, column: 9, scope: !4116)
!4119 = !DILocation(line: 1341, column: 8, scope: !4113)
!4120 = !DILocation(line: 1343, column: 17, scope: !4121)
!4121 = distinct !DILexicalBlock(scope: !4116, file: !1, line: 1342, column: 6)
!4122 = !DILocation(line: 1343, column: 8, scope: !4121)
!4123 = !DILocation(line: 1344, column: 28, scope: !4121)
!4124 = !DILocation(line: 1344, column: 39, scope: !4121)
!4125 = !DILocation(line: 1344, column: 46, scope: !4121)
!4126 = !DILocation(line: 1344, column: 8, scope: !4121)
!4127 = !DILocation(line: 1345, column: 17, scope: !4121)
!4128 = !DILocation(line: 1345, column: 8, scope: !4121)
!4129 = !DILocation(line: 1346, column: 6, scope: !4121)
!4130 = !DILocation(line: 1348, column: 24, scope: !4131)
!4131 = distinct !DILexicalBlock(scope: !4113, file: !1, line: 1348, column: 8)
!4132 = !DILocation(line: 1348, column: 31, scope: !4131)
!4133 = !DILocation(line: 1348, column: 9, scope: !4131)
!4134 = !DILocation(line: 1348, column: 8, scope: !4113)
!4135 = !DILocation(line: 1350, column: 17, scope: !4136)
!4136 = distinct !DILexicalBlock(scope: !4131, file: !1, line: 1349, column: 6)
!4137 = !DILocation(line: 1350, column: 8, scope: !4136)
!4138 = !DILocation(line: 1351, column: 28, scope: !4136)
!4139 = !DILocation(line: 1351, column: 39, scope: !4136)
!4140 = !DILocation(line: 1351, column: 46, scope: !4136)
!4141 = !DILocation(line: 1351, column: 8, scope: !4136)
!4142 = !DILocation(line: 1352, column: 17, scope: !4136)
!4143 = !DILocation(line: 1352, column: 8, scope: !4136)
!4144 = !DILocation(line: 1353, column: 6, scope: !4136)
!4145 = !DILocation(line: 1355, column: 13, scope: !4113)
!4146 = !DILocation(line: 1355, column: 4, scope: !4113)
!4147 = !DILocation(line: 1356, column: 24, scope: !4113)
!4148 = !DILocation(line: 1356, column: 35, scope: !4113)
!4149 = !DILocation(line: 1356, column: 42, scope: !4113)
!4150 = !DILocation(line: 1356, column: 4, scope: !4113)
!4151 = !DILocation(line: 1357, column: 13, scope: !4113)
!4152 = !DILocation(line: 1357, column: 4, scope: !4113)
!4153 = !DILocation(line: 1358, column: 21, scope: !4113)
!4154 = !DILocation(line: 1358, column: 32, scope: !4113)
!4155 = !DILocation(line: 1358, column: 39, scope: !4113)
!4156 = !DILocation(line: 1358, column: 4, scope: !4113)
!4157 = !DILocation(line: 1359, column: 13, scope: !4113)
!4158 = !DILocation(line: 1359, column: 4, scope: !4113)
!4159 = !DILocation(line: 1360, column: 2, scope: !4113)
!4160 = !DILocation(line: 1362, column: 11, scope: !4109)
!4161 = !DILocation(line: 1362, column: 2, scope: !4109)
!4162 = !DILocation(line: 1363, column: 5, scope: !4110)
!4163 = !DILocation(line: 1364, column: 10, scope: !3812)
!4164 = !DILocation(line: 1364, column: 3, scope: !3812)
!4165 = !DILocation(line: 1365, column: 1, scope: !3812)
!4166 = distinct !DISubprogram(name: "simplify_using_outer_evolutions", scope: !1, file: !1, line: 1678, type: !4167, scopeLine: 1679, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!4167 = !DISubroutineType(types: !4168)
!4168 = !{!1655, !2201, !1655}
!4169 = !DILocalVariable(name: "loop", arg: 1, scope: !4166, file: !1, line: 1678, type: !2201)
!4170 = !DILocation(line: 1678, column: 47, scope: !4166)
!4171 = !DILocalVariable(name: "expr", arg: 2, scope: !4166, file: !1, line: 1678, type: !1655)
!4172 = !DILocation(line: 1678, column: 58, scope: !4166)
!4173 = !DILocalVariable(name: "code", scope: !4166, file: !1, line: 1680, type: !132)
!4174 = !DILocation(line: 1680, column: 18, scope: !4166)
!4175 = !DILocation(line: 1680, column: 25, scope: !4166)
!4176 = !DILocalVariable(name: "changed", scope: !4166, file: !1, line: 1681, type: !1775)
!4177 = !DILocation(line: 1681, column: 8, scope: !4166)
!4178 = !DILocalVariable(name: "e", scope: !4166, file: !1, line: 1682, type: !1655)
!4179 = !DILocation(line: 1682, column: 8, scope: !4166)
!4180 = !DILocalVariable(name: "e0", scope: !4166, file: !1, line: 1682, type: !1655)
!4181 = !DILocation(line: 1682, column: 11, scope: !4166)
!4182 = !DILocalVariable(name: "e1", scope: !4166, file: !1, line: 1682, type: !1655)
!4183 = !DILocation(line: 1682, column: 15, scope: !4166)
!4184 = !DILocalVariable(name: "e2", scope: !4166, file: !1, line: 1682, type: !1655)
!4185 = !DILocation(line: 1682, column: 19, scope: !4166)
!4186 = !DILocation(line: 1684, column: 32, scope: !4187)
!4187 = distinct !DILexicalBlock(scope: !4166, file: !1, line: 1684, column: 7)
!4188 = !DILocation(line: 1684, column: 7, scope: !4187)
!4189 = !DILocation(line: 1684, column: 7, scope: !4166)
!4190 = !DILocation(line: 1685, column: 12, scope: !4187)
!4191 = !DILocation(line: 1685, column: 5, scope: !4187)
!4192 = !DILocation(line: 1687, column: 7, scope: !4193)
!4193 = distinct !DILexicalBlock(scope: !4166, file: !1, line: 1687, column: 7)
!4194 = !DILocation(line: 1687, column: 12, scope: !4193)
!4195 = !DILocation(line: 1688, column: 7, scope: !4193)
!4196 = !DILocation(line: 1688, column: 10, scope: !4193)
!4197 = !DILocation(line: 1688, column: 15, scope: !4193)
!4198 = !DILocation(line: 1689, column: 7, scope: !4193)
!4199 = !DILocation(line: 1689, column: 10, scope: !4193)
!4200 = !DILocation(line: 1689, column: 15, scope: !4193)
!4201 = !DILocation(line: 1687, column: 7, scope: !4166)
!4202 = !DILocation(line: 1691, column: 15, scope: !4203)
!4203 = distinct !DILexicalBlock(scope: !4193, file: !1, line: 1690, column: 5)
!4204 = !DILocation(line: 1693, column: 45, scope: !4203)
!4205 = !DILocation(line: 1693, column: 51, scope: !4203)
!4206 = !DILocation(line: 1693, column: 12, scope: !4203)
!4207 = !DILocation(line: 1693, column: 10, scope: !4203)
!4208 = !DILocation(line: 1694, column: 11, scope: !4209)
!4209 = distinct !DILexicalBlock(scope: !4203, file: !1, line: 1694, column: 11)
!4210 = !DILocation(line: 1694, column: 37, scope: !4209)
!4211 = !DILocation(line: 1694, column: 34, scope: !4209)
!4212 = !DILocation(line: 1694, column: 11, scope: !4203)
!4213 = !DILocation(line: 1695, column: 10, scope: !4209)
!4214 = !DILocation(line: 1695, column: 2, scope: !4209)
!4215 = !DILocation(line: 1697, column: 45, scope: !4203)
!4216 = !DILocation(line: 1697, column: 51, scope: !4203)
!4217 = !DILocation(line: 1697, column: 12, scope: !4203)
!4218 = !DILocation(line: 1697, column: 10, scope: !4203)
!4219 = !DILocation(line: 1698, column: 11, scope: !4220)
!4220 = distinct !DILexicalBlock(scope: !4203, file: !1, line: 1698, column: 11)
!4221 = !DILocation(line: 1698, column: 37, scope: !4220)
!4222 = !DILocation(line: 1698, column: 34, scope: !4220)
!4223 = !DILocation(line: 1698, column: 11, scope: !4203)
!4224 = !DILocation(line: 1699, column: 10, scope: !4220)
!4225 = !DILocation(line: 1699, column: 2, scope: !4220)
!4226 = !DILocation(line: 1701, column: 11, scope: !4227)
!4227 = distinct !DILexicalBlock(scope: !4203, file: !1, line: 1701, column: 11)
!4228 = !DILocation(line: 1701, column: 16, scope: !4227)
!4229 = !DILocation(line: 1701, column: 11, scope: !4203)
!4230 = !DILocation(line: 1703, column: 42, scope: !4231)
!4231 = distinct !DILexicalBlock(scope: !4227, file: !1, line: 1702, column: 2)
!4232 = !DILocation(line: 1703, column: 48, scope: !4231)
!4233 = !DILocation(line: 1703, column: 9, scope: !4231)
!4234 = !DILocation(line: 1703, column: 7, scope: !4231)
!4235 = !DILocation(line: 1704, column: 8, scope: !4236)
!4236 = distinct !DILexicalBlock(scope: !4231, file: !1, line: 1704, column: 8)
!4237 = !DILocation(line: 1704, column: 34, scope: !4236)
!4238 = !DILocation(line: 1704, column: 31, scope: !4236)
!4239 = !DILocation(line: 1704, column: 8, scope: !4231)
!4240 = !DILocation(line: 1705, column: 14, scope: !4236)
!4241 = !DILocation(line: 1705, column: 6, scope: !4236)
!4242 = !DILocation(line: 1706, column: 2, scope: !4231)
!4243 = !DILocation(line: 1708, column: 5, scope: !4227)
!4244 = !DILocation(line: 1710, column: 11, scope: !4245)
!4245 = distinct !DILexicalBlock(scope: !4203, file: !1, line: 1710, column: 11)
!4246 = !DILocation(line: 1710, column: 11, scope: !4203)
!4247 = !DILocation(line: 1712, column: 8, scope: !4248)
!4248 = distinct !DILexicalBlock(scope: !4249, file: !1, line: 1712, column: 8)
!4249 = distinct !DILexicalBlock(scope: !4245, file: !1, line: 1711, column: 2)
!4250 = !DILocation(line: 1712, column: 13, scope: !4248)
!4251 = !DILocation(line: 1712, column: 8, scope: !4249)
!4252 = !DILocation(line: 1713, column: 13, scope: !4248)
!4253 = !DILocation(line: 1713, column: 11, scope: !4248)
!4254 = !DILocation(line: 1713, column: 6, scope: !4248)
!4255 = !DILocation(line: 1715, column: 13, scope: !4248)
!4256 = !DILocation(line: 1715, column: 11, scope: !4248)
!4257 = !DILocation(line: 1716, column: 2, scope: !4249)
!4258 = !DILocation(line: 1718, column: 14, scope: !4203)
!4259 = !DILocation(line: 1718, column: 7, scope: !4203)
!4260 = !DILocation(line: 1721, column: 31, scope: !4166)
!4261 = !DILocation(line: 1721, column: 37, scope: !4166)
!4262 = !DILocation(line: 1721, column: 7, scope: !4166)
!4263 = !DILocation(line: 1721, column: 5, scope: !4166)
!4264 = !DILocation(line: 1722, column: 32, scope: !4265)
!4265 = distinct !DILexicalBlock(scope: !4166, file: !1, line: 1722, column: 7)
!4266 = !DILocation(line: 1722, column: 7, scope: !4265)
!4267 = !DILocation(line: 1722, column: 7, scope: !4166)
!4268 = !DILocation(line: 1723, column: 12, scope: !4265)
!4269 = !DILocation(line: 1723, column: 5, scope: !4265)
!4270 = !DILocation(line: 1725, column: 10, scope: !4166)
!4271 = !DILocation(line: 1725, column: 3, scope: !4166)
!4272 = !DILocation(line: 1726, column: 1, scope: !4166)
!4273 = distinct !DISubprogram(name: "simplify_using_initial_conditions", scope: !1, file: !1, line: 1634, type: !4167, scopeLine: 1635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!4274 = !DILocalVariable(name: "loop", arg: 1, scope: !4273, file: !1, line: 1634, type: !2201)
!4275 = !DILocation(line: 1634, column: 49, scope: !4273)
!4276 = !DILocalVariable(name: "expr", arg: 2, scope: !4273, file: !1, line: 1634, type: !1655)
!4277 = !DILocation(line: 1634, column: 60, scope: !4273)
!4278 = !DILocalVariable(name: "e", scope: !4273, file: !1, line: 1636, type: !1966)
!4279 = !DILocation(line: 1636, column: 8, scope: !4273)
!4280 = !DILocalVariable(name: "bb", scope: !4273, file: !1, line: 1637, type: !2472)
!4281 = !DILocation(line: 1637, column: 15, scope: !4273)
!4282 = !DILocalVariable(name: "stmt", scope: !4273, file: !1, line: 1638, type: !1986)
!4283 = !DILocation(line: 1638, column: 10, scope: !4273)
!4284 = !DILocalVariable(name: "cond", scope: !4273, file: !1, line: 1639, type: !1655)
!4285 = !DILocation(line: 1639, column: 8, scope: !4273)
!4286 = !DILocalVariable(name: "cnt", scope: !4273, file: !1, line: 1640, type: !1752)
!4287 = !DILocation(line: 1640, column: 7, scope: !4273)
!4288 = !DILocation(line: 1642, column: 7, scope: !4289)
!4289 = distinct !DILexicalBlock(scope: !4273, file: !1, line: 1642, column: 7)
!4290 = !DILocation(line: 1642, column: 24, scope: !4289)
!4291 = !DILocation(line: 1642, column: 7, scope: !4273)
!4292 = !DILocation(line: 1643, column: 12, scope: !4289)
!4293 = !DILocation(line: 1643, column: 5, scope: !4289)
!4294 = !DILocation(line: 1648, column: 13, scope: !4295)
!4295 = distinct !DILexicalBlock(scope: !4273, file: !1, line: 1648, column: 3)
!4296 = !DILocation(line: 1648, column: 19, scope: !4295)
!4297 = !DILocation(line: 1648, column: 11, scope: !4295)
!4298 = !DILocation(line: 1648, column: 8, scope: !4295)
!4299 = !DILocation(line: 1649, column: 8, scope: !4300)
!4300 = distinct !DILexicalBlock(scope: !4295, file: !1, line: 1648, column: 3)
!4301 = !DILocation(line: 1649, column: 14, scope: !4300)
!4302 = !DILocation(line: 1649, column: 11, scope: !4300)
!4303 = !DILocation(line: 1649, column: 30, scope: !4300)
!4304 = !DILocation(line: 1649, column: 33, scope: !4300)
!4305 = !DILocation(line: 1649, column: 37, scope: !4300)
!4306 = !DILocation(line: 0, scope: !4300)
!4307 = !DILocation(line: 1648, column: 3, scope: !4295)
!4308 = !DILocation(line: 1652, column: 27, scope: !4309)
!4309 = distinct !DILexicalBlock(scope: !4310, file: !1, line: 1652, column: 11)
!4310 = distinct !DILexicalBlock(scope: !4300, file: !1, line: 1651, column: 5)
!4311 = !DILocation(line: 1652, column: 12, scope: !4309)
!4312 = !DILocation(line: 1652, column: 11, scope: !4310)
!4313 = !DILocation(line: 1653, column: 2, scope: !4309)
!4314 = !DILocation(line: 1654, column: 29, scope: !4310)
!4315 = !DILocation(line: 1654, column: 11, scope: !4310)
!4316 = !DILocation(line: 1654, column: 9, scope: !4310)
!4317 = !DILocation(line: 1656, column: 13, scope: !4318)
!4318 = distinct !DILexicalBlock(scope: !4310, file: !1, line: 1656, column: 11)
!4319 = !DILocation(line: 1656, column: 16, scope: !4318)
!4320 = !DILocation(line: 1656, column: 22, scope: !4318)
!4321 = !DILocation(line: 1656, column: 11, scope: !4310)
!4322 = !DILocation(line: 1657, column: 2, scope: !4318)
!4323 = !DILocation(line: 1659, column: 25, scope: !4310)
!4324 = !DILocation(line: 1659, column: 28, scope: !4310)
!4325 = !DILocation(line: 1659, column: 14, scope: !4310)
!4326 = !DILocation(line: 1659, column: 12, scope: !4310)
!4327 = !DILocation(line: 1660, column: 14, scope: !4310)
!4328 = !DILocation(line: 1660, column: 12, scope: !4310)
!4329 = !DILocation(line: 1664, column: 11, scope: !4330)
!4330 = distinct !DILexicalBlock(scope: !4310, file: !1, line: 1664, column: 11)
!4331 = !DILocation(line: 1664, column: 14, scope: !4330)
!4332 = !DILocation(line: 1664, column: 20, scope: !4330)
!4333 = !DILocation(line: 1664, column: 11, scope: !4310)
!4334 = !DILocation(line: 1665, column: 9, scope: !4330)
!4335 = !DILocation(line: 1665, column: 7, scope: !4330)
!4336 = !DILocation(line: 1665, column: 2, scope: !4330)
!4337 = !DILocation(line: 1666, column: 45, scope: !4310)
!4338 = !DILocation(line: 1666, column: 51, scope: !4310)
!4339 = !DILocation(line: 1666, column: 14, scope: !4310)
!4340 = !DILocation(line: 1666, column: 12, scope: !4310)
!4341 = !DILocation(line: 1667, column: 7, scope: !4310)
!4342 = !DILocation(line: 1668, column: 5, scope: !4310)
!4343 = !DILocation(line: 1650, column: 54, scope: !4300)
!4344 = !DILocation(line: 1650, column: 13, scope: !4300)
!4345 = !DILocation(line: 1650, column: 11, scope: !4300)
!4346 = !DILocation(line: 1648, column: 3, scope: !4300)
!4347 = distinct !{!4347, !4307, !4348}
!4348 = !DILocation(line: 1668, column: 5, scope: !4295)
!4349 = !DILocation(line: 1670, column: 10, scope: !4273)
!4350 = !DILocation(line: 1670, column: 3, scope: !4273)
!4351 = !DILocation(line: 1671, column: 1, scope: !4273)
!4352 = distinct !DISubprogram(name: "gimple_location", scope: !402, file: !402, line: 1139, type: !4353, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!4353 = !DISubroutineType(types: !4354)
!4354 = !{!1783, !3284}
!4355 = !DILocalVariable(name: "g", arg: 1, scope: !4352, file: !402, line: 1139, type: !3284)
!4356 = !DILocation(line: 1139, column: 31, scope: !4352)
!4357 = !DILocation(line: 1141, column: 10, scope: !4352)
!4358 = !DILocation(line: 1141, column: 13, scope: !4352)
!4359 = !DILocation(line: 1141, column: 20, scope: !4352)
!4360 = !DILocation(line: 1141, column: 3, scope: !4352)
!4361 = distinct !DISubprogram(name: "find_loop_niter", scope: !1, file: !1, line: 1897, type: !4362, scopeLine: 1898, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!4362 = !DISubroutineType(types: !4363)
!4363 = !{!1655, !2201, !4364}
!4364 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1966, size: 64)
!4365 = !DILocalVariable(name: "loop", arg: 1, scope: !4361, file: !1, line: 1897, type: !2201)
!4366 = !DILocation(line: 1897, column: 31, scope: !4361)
!4367 = !DILocalVariable(name: "exit", arg: 2, scope: !4361, file: !1, line: 1897, type: !4364)
!4368 = !DILocation(line: 1897, column: 43, scope: !4361)
!4369 = !DILocalVariable(name: "i", scope: !4361, file: !1, line: 1899, type: !5)
!4370 = !DILocation(line: 1899, column: 12, scope: !4361)
!4371 = !DILocalVariable(name: "exits", scope: !4361, file: !1, line: 1900, type: !4372)
!4372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4373, size: 64)
!4373 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_heap", file: !341, line: 152, baseType: !4374)
!4374 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_heap", file: !341, line: 152, size: 128, elements: !4375)
!4375 = !{!4376}
!4376 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4374, file: !341, line: 152, baseType: !1959, size: 128)
!4377 = !DILocation(line: 1900, column: 21, scope: !4361)
!4378 = !DILocation(line: 1900, column: 50, scope: !4361)
!4379 = !DILocation(line: 1900, column: 29, scope: !4361)
!4380 = !DILocalVariable(name: "ex", scope: !4361, file: !1, line: 1901, type: !1966)
!4381 = !DILocation(line: 1901, column: 8, scope: !4361)
!4382 = !DILocalVariable(name: "niter", scope: !4361, file: !1, line: 1902, type: !1655)
!4383 = !DILocation(line: 1902, column: 8, scope: !4361)
!4384 = !DILocalVariable(name: "aniter", scope: !4361, file: !1, line: 1902, type: !1655)
!4385 = !DILocation(line: 1902, column: 27, scope: !4361)
!4386 = !DILocalVariable(name: "desc", scope: !4361, file: !1, line: 1903, type: !3540)
!4387 = !DILocation(line: 1903, column: 26, scope: !4361)
!4388 = !DILocation(line: 1905, column: 4, scope: !4361)
!4389 = !DILocation(line: 1905, column: 9, scope: !4361)
!4390 = !DILocation(line: 1906, column: 10, scope: !4391)
!4391 = distinct !DILexicalBlock(scope: !4361, file: !1, line: 1906, column: 3)
!4392 = !DILocation(line: 1906, column: 8, scope: !4391)
!4393 = !DILocation(line: 1906, column: 15, scope: !4394)
!4394 = distinct !DILexicalBlock(scope: !4391, file: !1, line: 1906, column: 3)
!4395 = !DILocation(line: 1906, column: 3, scope: !4391)
!4396 = !DILocation(line: 1908, column: 40, scope: !4397)
!4397 = distinct !DILexicalBlock(scope: !4398, file: !1, line: 1908, column: 11)
!4398 = distinct !DILexicalBlock(scope: !4394, file: !1, line: 1907, column: 5)
!4399 = !DILocation(line: 1908, column: 46, scope: !4397)
!4400 = !DILocation(line: 1908, column: 50, scope: !4397)
!4401 = !DILocation(line: 1908, column: 12, scope: !4397)
!4402 = !DILocation(line: 1908, column: 11, scope: !4398)
!4403 = !DILocation(line: 1909, column: 2, scope: !4397)
!4404 = !DILocation(line: 1911, column: 39, scope: !4405)
!4405 = distinct !DILexicalBlock(scope: !4398, file: !1, line: 1911, column: 11)
!4406 = !DILocation(line: 1911, column: 45, scope: !4405)
!4407 = !DILocation(line: 1911, column: 12, scope: !4405)
!4408 = !DILocation(line: 1911, column: 11, scope: !4398)
!4409 = !DILocation(line: 1912, column: 2, scope: !4405)
!4410 = !DILocation(line: 1914, column: 34, scope: !4411)
!4411 = distinct !DILexicalBlock(scope: !4398, file: !1, line: 1914, column: 11)
!4412 = !DILocation(line: 1914, column: 11, scope: !4411)
!4413 = !DILocation(line: 1914, column: 11, scope: !4398)
!4414 = !DILocation(line: 1918, column: 27, scope: !4415)
!4415 = distinct !DILexicalBlock(scope: !4411, file: !1, line: 1915, column: 2)
!4416 = !DILocation(line: 1918, column: 12, scope: !4415)
!4417 = !DILocation(line: 1918, column: 10, scope: !4415)
!4418 = !DILocation(line: 1919, column: 12, scope: !4415)
!4419 = !DILocation(line: 1919, column: 5, scope: !4415)
!4420 = !DILocation(line: 1919, column: 10, scope: !4415)
!4421 = !DILocation(line: 1920, column: 4, scope: !4415)
!4422 = !DILocation(line: 1923, column: 32, scope: !4423)
!4423 = distinct !DILexicalBlock(scope: !4398, file: !1, line: 1923, column: 11)
!4424 = !DILocation(line: 1923, column: 12, scope: !4423)
!4425 = !DILocation(line: 1923, column: 11, scope: !4398)
!4426 = !DILocation(line: 1924, column: 2, scope: !4423)
!4427 = !DILocation(line: 1926, column: 21, scope: !4398)
!4428 = !DILocation(line: 1926, column: 14, scope: !4398)
!4429 = !DILocation(line: 1928, column: 12, scope: !4430)
!4430 = distinct !DILexicalBlock(scope: !4398, file: !1, line: 1928, column: 11)
!4431 = !DILocation(line: 1928, column: 11, scope: !4398)
!4432 = !DILocation(line: 1931, column: 12, scope: !4433)
!4433 = distinct !DILexicalBlock(scope: !4430, file: !1, line: 1929, column: 2)
!4434 = !DILocation(line: 1931, column: 10, scope: !4433)
!4435 = !DILocation(line: 1932, column: 12, scope: !4433)
!4436 = !DILocation(line: 1932, column: 5, scope: !4433)
!4437 = !DILocation(line: 1932, column: 10, scope: !4433)
!4438 = !DILocation(line: 1933, column: 4, scope: !4433)
!4439 = !DILocation(line: 1937, column: 11, scope: !4440)
!4440 = distinct !DILexicalBlock(scope: !4398, file: !1, line: 1937, column: 11)
!4441 = !DILocation(line: 1937, column: 30, scope: !4440)
!4442 = !DILocation(line: 1937, column: 11, scope: !4398)
!4443 = !DILocation(line: 1938, column: 2, scope: !4440)
!4444 = !DILocation(line: 1940, column: 11, scope: !4445)
!4445 = distinct !DILexicalBlock(scope: !4398, file: !1, line: 1940, column: 11)
!4446 = !DILocation(line: 1940, column: 29, scope: !4445)
!4447 = !DILocation(line: 1940, column: 11, scope: !4398)
!4448 = !DILocation(line: 1942, column: 12, scope: !4449)
!4449 = distinct !DILexicalBlock(scope: !4445, file: !1, line: 1941, column: 2)
!4450 = !DILocation(line: 1942, column: 10, scope: !4449)
!4451 = !DILocation(line: 1943, column: 12, scope: !4449)
!4452 = !DILocation(line: 1943, column: 5, scope: !4449)
!4453 = !DILocation(line: 1943, column: 10, scope: !4449)
!4454 = !DILocation(line: 1944, column: 4, scope: !4449)
!4455 = !DILocation(line: 1947, column: 28, scope: !4456)
!4456 = distinct !DILexicalBlock(scope: !4398, file: !1, line: 1947, column: 11)
!4457 = !DILocation(line: 1947, column: 36, scope: !4456)
!4458 = !DILocation(line: 1947, column: 11, scope: !4456)
!4459 = !DILocation(line: 1947, column: 11, scope: !4398)
!4460 = !DILocation(line: 1949, column: 12, scope: !4461)
!4461 = distinct !DILexicalBlock(scope: !4456, file: !1, line: 1948, column: 2)
!4462 = !DILocation(line: 1949, column: 10, scope: !4461)
!4463 = !DILocation(line: 1950, column: 12, scope: !4461)
!4464 = !DILocation(line: 1950, column: 5, scope: !4461)
!4465 = !DILocation(line: 1950, column: 10, scope: !4461)
!4466 = !DILocation(line: 1951, column: 4, scope: !4461)
!4467 = !DILocation(line: 1953, column: 5, scope: !4398)
!4468 = !DILocation(line: 1906, column: 50, scope: !4394)
!4469 = !DILocation(line: 1906, column: 3, scope: !4394)
!4470 = distinct !{!4470, !4395, !4471}
!4471 = !DILocation(line: 1953, column: 5, scope: !4391)
!4472 = !DILocation(line: 1954, column: 3, scope: !4361)
!4473 = !DILocation(line: 1956, column: 10, scope: !4361)
!4474 = !DILocation(line: 1956, column: 18, scope: !4361)
!4475 = !DILocation(line: 1956, column: 26, scope: !4361)
!4476 = !DILocation(line: 1956, column: 3, scope: !4361)
!4477 = distinct !DISubprogram(name: "VEC_edge_base_iterate", scope: !341, file: !341, line: 150, type: !4478, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!4478 = !DISubroutineType(types: !4479)
!4479 = !{!1752, !4480, !5, !4364}
!4480 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4481, size: 64)
!4481 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1959)
!4482 = !DILocalVariable(name: "vec_", arg: 1, scope: !4477, file: !341, line: 150, type: !4480)
!4483 = !DILocation(line: 150, column: 1, scope: !4477)
!4484 = !DILocalVariable(name: "ix_", arg: 2, scope: !4477, file: !341, line: 150, type: !5)
!4485 = !DILocalVariable(name: "ptr", arg: 3, scope: !4477, file: !341, line: 150, type: !4364)
!4486 = !DILocation(line: 150, column: 1, scope: !4487)
!4487 = distinct !DILexicalBlock(scope: !4477, file: !341, line: 150, column: 1)
!4488 = !DILocation(line: 150, column: 1, scope: !4489)
!4489 = distinct !DILexicalBlock(scope: !4487, file: !341, line: 150, column: 1)
!4490 = !DILocation(line: 150, column: 1, scope: !4491)
!4491 = distinct !DILexicalBlock(scope: !4487, file: !341, line: 150, column: 1)
!4492 = distinct !DISubprogram(name: "VEC_edge_heap_free", scope: !341, file: !341, line: 152, type: !4493, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!4493 = !DISubroutineType(types: !4494)
!4494 = !{null, !4495}
!4495 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4372, size: 64)
!4496 = !DILocalVariable(name: "vec_", arg: 1, scope: !4492, file: !341, line: 152, type: !4495)
!4497 = !DILocation(line: 152, column: 1, scope: !4492)
!4498 = !DILocation(line: 152, column: 1, scope: !4499)
!4499 = distinct !DILexicalBlock(scope: !4492, file: !341, line: 152, column: 1)
!4500 = distinct !DISubprogram(name: "finite_loop_p", scope: !1, file: !1, line: 1962, type: !4501, scopeLine: 1963, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!4501 = !DISubroutineType(types: !4502)
!4502 = !{!1775, !2201}
!4503 = !DILocalVariable(name: "loop", arg: 1, scope: !4500, file: !1, line: 1962, type: !2201)
!4504 = !DILocation(line: 1962, column: 29, scope: !4500)
!4505 = !DILocalVariable(name: "i", scope: !4500, file: !1, line: 1964, type: !5)
!4506 = !DILocation(line: 1964, column: 12, scope: !4500)
!4507 = !DILocalVariable(name: "exits", scope: !4500, file: !1, line: 1965, type: !4372)
!4508 = !DILocation(line: 1965, column: 21, scope: !4500)
!4509 = !DILocalVariable(name: "ex", scope: !4500, file: !1, line: 1966, type: !1966)
!4510 = !DILocation(line: 1966, column: 8, scope: !4500)
!4511 = !DILocalVariable(name: "desc", scope: !4500, file: !1, line: 1967, type: !3540)
!4512 = !DILocation(line: 1967, column: 26, scope: !4500)
!4513 = !DILocalVariable(name: "finite", scope: !4500, file: !1, line: 1968, type: !1775)
!4514 = !DILocation(line: 1968, column: 8, scope: !4500)
!4515 = !DILocation(line: 1970, column: 7, scope: !4516)
!4516 = distinct !DILexicalBlock(scope: !4500, file: !1, line: 1970, column: 7)
!4517 = !DILocation(line: 1970, column: 7, scope: !4500)
!4518 = !DILocation(line: 1971, column: 5, scope: !4516)
!4519 = !DILocation(line: 1972, column: 8, scope: !4520)
!4520 = distinct !DILexicalBlock(scope: !4500, file: !1, line: 1972, column: 7)
!4521 = !DILocation(line: 1973, column: 8, scope: !4520)
!4522 = !DILocation(line: 1973, column: 11, scope: !4520)
!4523 = !DILocation(line: 1974, column: 7, scope: !4520)
!4524 = !DILocation(line: 1974, column: 11, scope: !4520)
!4525 = !DILocation(line: 1972, column: 7, scope: !4500)
!4526 = !DILocation(line: 1976, column: 11, scope: !4527)
!4527 = distinct !DILexicalBlock(scope: !4528, file: !1, line: 1976, column: 11)
!4528 = distinct !DILexicalBlock(scope: !4520, file: !1, line: 1975, column: 5)
!4529 = !DILocation(line: 1976, column: 21, scope: !4527)
!4530 = !DILocation(line: 1976, column: 25, scope: !4527)
!4531 = !DILocation(line: 1976, column: 36, scope: !4527)
!4532 = !DILocation(line: 1976, column: 11, scope: !4528)
!4533 = !DILocation(line: 1977, column: 11, scope: !4527)
!4534 = !DILocation(line: 1978, column: 4, scope: !4527)
!4535 = !DILocation(line: 1978, column: 10, scope: !4527)
!4536 = !DILocation(line: 1977, column: 2, scope: !4527)
!4537 = !DILocation(line: 1979, column: 7, scope: !4528)
!4538 = !DILocation(line: 1982, column: 32, scope: !4500)
!4539 = !DILocation(line: 1982, column: 11, scope: !4500)
!4540 = !DILocation(line: 1982, column: 9, scope: !4500)
!4541 = !DILocation(line: 1983, column: 10, scope: !4542)
!4542 = distinct !DILexicalBlock(scope: !4500, file: !1, line: 1983, column: 3)
!4543 = !DILocation(line: 1983, column: 8, scope: !4542)
!4544 = !DILocation(line: 1983, column: 15, scope: !4545)
!4545 = distinct !DILexicalBlock(scope: !4542, file: !1, line: 1983, column: 3)
!4546 = !DILocation(line: 1983, column: 3, scope: !4542)
!4547 = !DILocation(line: 1985, column: 40, scope: !4548)
!4548 = distinct !DILexicalBlock(scope: !4549, file: !1, line: 1985, column: 11)
!4549 = distinct !DILexicalBlock(scope: !4545, file: !1, line: 1984, column: 5)
!4550 = !DILocation(line: 1985, column: 46, scope: !4548)
!4551 = !DILocation(line: 1985, column: 50, scope: !4548)
!4552 = !DILocation(line: 1985, column: 12, scope: !4548)
!4553 = !DILocation(line: 1985, column: 11, scope: !4549)
!4554 = !DILocation(line: 1986, column: 2, scope: !4548)
!4555 = !DILocation(line: 1988, column: 38, scope: !4556)
!4556 = distinct !DILexicalBlock(scope: !4549, file: !1, line: 1988, column: 11)
!4557 = !DILocation(line: 1988, column: 44, scope: !4556)
!4558 = !DILocation(line: 1988, column: 11, scope: !4556)
!4559 = !DILocation(line: 1988, column: 11, scope: !4549)
!4560 = !DILocation(line: 1990, column: 8, scope: !4561)
!4561 = distinct !DILexicalBlock(scope: !4562, file: !1, line: 1990, column: 8)
!4562 = distinct !DILexicalBlock(scope: !4556, file: !1, line: 1989, column: 9)
!4563 = !DILocation(line: 1990, column: 18, scope: !4561)
!4564 = !DILocation(line: 1990, column: 22, scope: !4561)
!4565 = !DILocation(line: 1990, column: 33, scope: !4561)
!4566 = !DILocation(line: 1990, column: 8, scope: !4562)
!4567 = !DILocation(line: 1992, column: 17, scope: !4568)
!4568 = distinct !DILexicalBlock(scope: !4561, file: !1, line: 1991, column: 6)
!4569 = !DILocation(line: 1992, column: 70, scope: !4568)
!4570 = !DILocation(line: 1992, column: 76, scope: !4568)
!4571 = !DILocation(line: 1992, column: 8, scope: !4568)
!4572 = !DILocation(line: 1993, column: 28, scope: !4568)
!4573 = !DILocation(line: 1993, column: 44, scope: !4568)
!4574 = !DILocation(line: 1993, column: 8, scope: !4568)
!4575 = !DILocation(line: 1994, column: 17, scope: !4568)
!4576 = !DILocation(line: 1994, column: 8, scope: !4568)
!4577 = !DILocation(line: 1995, column: 6, scope: !4568)
!4578 = !DILocation(line: 1996, column: 11, scope: !4562)
!4579 = !DILocation(line: 1997, column: 4, scope: !4562)
!4580 = !DILocation(line: 1999, column: 5, scope: !4549)
!4581 = !DILocation(line: 1983, column: 50, scope: !4545)
!4582 = !DILocation(line: 1983, column: 3, scope: !4545)
!4583 = distinct !{!4583, !4546, !4584}
!4584 = !DILocation(line: 1999, column: 5, scope: !4542)
!4585 = !DILocation(line: 2000, column: 3, scope: !4500)
!4586 = !DILocation(line: 2001, column: 10, scope: !4500)
!4587 = !DILocation(line: 2001, column: 3, scope: !4500)
!4588 = !DILocation(line: 2002, column: 1, scope: !4500)
!4589 = distinct !DISubprogram(name: "loop_niter_by_eval", scope: !1, file: !1, line: 2159, type: !4590, scopeLine: 2160, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!4590 = !DISubroutineType(types: !4591)
!4591 = !{!1655, !2201, !1966}
!4592 = !DILocalVariable(name: "loop", arg: 1, scope: !4589, file: !1, line: 2159, type: !2201)
!4593 = !DILocation(line: 2159, column: 34, scope: !4589)
!4594 = !DILocalVariable(name: "exit", arg: 2, scope: !4589, file: !1, line: 2159, type: !1966)
!4595 = !DILocation(line: 2159, column: 45, scope: !4589)
!4596 = !DILocalVariable(name: "acnd", scope: !4589, file: !1, line: 2161, type: !1655)
!4597 = !DILocation(line: 2161, column: 8, scope: !4589)
!4598 = !DILocalVariable(name: "op", scope: !4589, file: !1, line: 2162, type: !4599)
!4599 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1655, size: 128, elements: !1903)
!4600 = !DILocation(line: 2162, column: 8, scope: !4589)
!4601 = !DILocalVariable(name: "val", scope: !4589, file: !1, line: 2162, type: !4599)
!4602 = !DILocation(line: 2162, column: 15, scope: !4589)
!4603 = !DILocalVariable(name: "next", scope: !4589, file: !1, line: 2162, type: !4599)
!4604 = !DILocation(line: 2162, column: 23, scope: !4589)
!4605 = !DILocalVariable(name: "aval", scope: !4589, file: !1, line: 2162, type: !4599)
!4606 = !DILocation(line: 2162, column: 32, scope: !4589)
!4607 = !DILocalVariable(name: "phi", scope: !4589, file: !1, line: 2163, type: !1986)
!4608 = !DILocation(line: 2163, column: 10, scope: !4589)
!4609 = !DILocalVariable(name: "cond", scope: !4589, file: !1, line: 2163, type: !1986)
!4610 = !DILocation(line: 2163, column: 15, scope: !4589)
!4611 = !DILocalVariable(name: "i", scope: !4589, file: !1, line: 2164, type: !5)
!4612 = !DILocation(line: 2164, column: 12, scope: !4589)
!4613 = !DILocalVariable(name: "j", scope: !4589, file: !1, line: 2164, type: !5)
!4614 = !DILocation(line: 2164, column: 15, scope: !4589)
!4615 = !DILocalVariable(name: "cmp", scope: !4589, file: !1, line: 2165, type: !132)
!4616 = !DILocation(line: 2165, column: 18, scope: !4589)
!4617 = !DILocation(line: 2167, column: 21, scope: !4589)
!4618 = !DILocation(line: 2167, column: 27, scope: !4589)
!4619 = !DILocation(line: 2167, column: 10, scope: !4589)
!4620 = !DILocation(line: 2167, column: 8, scope: !4589)
!4621 = !DILocation(line: 2168, column: 8, scope: !4622)
!4622 = distinct !DILexicalBlock(scope: !4589, file: !1, line: 2168, column: 7)
!4623 = !DILocation(line: 2168, column: 13, scope: !4622)
!4624 = !DILocation(line: 2168, column: 29, scope: !4622)
!4625 = !DILocation(line: 2168, column: 16, scope: !4622)
!4626 = !DILocation(line: 2168, column: 35, scope: !4622)
!4627 = !DILocation(line: 2168, column: 7, scope: !4589)
!4628 = !DILocation(line: 2169, column: 12, scope: !4622)
!4629 = !DILocation(line: 2169, column: 5, scope: !4622)
!4630 = !DILocation(line: 2171, column: 27, scope: !4589)
!4631 = !DILocation(line: 2171, column: 9, scope: !4589)
!4632 = !DILocation(line: 2171, column: 7, scope: !4589)
!4633 = !DILocation(line: 2172, column: 7, scope: !4634)
!4634 = distinct !DILexicalBlock(scope: !4589, file: !1, line: 2172, column: 7)
!4635 = !DILocation(line: 2172, column: 13, scope: !4634)
!4636 = !DILocation(line: 2172, column: 19, scope: !4634)
!4637 = !DILocation(line: 2172, column: 7, scope: !4589)
!4638 = !DILocation(line: 2173, column: 35, scope: !4634)
!4639 = !DILocation(line: 2173, column: 11, scope: !4634)
!4640 = !DILocation(line: 2173, column: 9, scope: !4634)
!4641 = !DILocation(line: 2173, column: 5, scope: !4634)
!4642 = !DILocation(line: 2175, column: 11, scope: !4589)
!4643 = !DILocation(line: 2175, column: 3, scope: !4589)
!4644 = !DILocation(line: 2183, column: 32, scope: !4645)
!4645 = distinct !DILexicalBlock(scope: !4589, file: !1, line: 2176, column: 5)
!4646 = !DILocation(line: 2183, column: 15, scope: !4645)
!4647 = !DILocation(line: 2183, column: 7, scope: !4645)
!4648 = !DILocation(line: 2183, column: 13, scope: !4645)
!4649 = !DILocation(line: 2184, column: 32, scope: !4645)
!4650 = !DILocation(line: 2184, column: 15, scope: !4645)
!4651 = !DILocation(line: 2184, column: 7, scope: !4645)
!4652 = !DILocation(line: 2184, column: 13, scope: !4645)
!4653 = !DILocation(line: 2185, column: 7, scope: !4645)
!4654 = !DILocation(line: 2188, column: 14, scope: !4645)
!4655 = !DILocation(line: 2188, column: 7, scope: !4645)
!4656 = !DILocation(line: 2191, column: 10, scope: !4657)
!4657 = distinct !DILexicalBlock(scope: !4589, file: !1, line: 2191, column: 3)
!4658 = !DILocation(line: 2191, column: 8, scope: !4657)
!4659 = !DILocation(line: 2191, column: 15, scope: !4660)
!4660 = distinct !DILexicalBlock(scope: !4657, file: !1, line: 2191, column: 3)
!4661 = !DILocation(line: 2191, column: 17, scope: !4660)
!4662 = !DILocation(line: 2191, column: 3, scope: !4657)
!4663 = !DILocation(line: 2193, column: 39, scope: !4664)
!4664 = distinct !DILexicalBlock(scope: !4665, file: !1, line: 2193, column: 11)
!4665 = distinct !DILexicalBlock(scope: !4660, file: !1, line: 2192, column: 5)
!4666 = !DILocation(line: 2193, column: 36, scope: !4664)
!4667 = !DILocation(line: 2193, column: 11, scope: !4664)
!4668 = !DILocation(line: 2193, column: 11, scope: !4665)
!4669 = !DILocation(line: 2195, column: 16, scope: !4670)
!4670 = distinct !DILexicalBlock(scope: !4664, file: !1, line: 2194, column: 2)
!4671 = !DILocation(line: 2195, column: 13, scope: !4670)
!4672 = !DILocation(line: 2195, column: 8, scope: !4670)
!4673 = !DILocation(line: 2195, column: 4, scope: !4670)
!4674 = !DILocation(line: 2195, column: 11, scope: !4670)
!4675 = !DILocation(line: 2196, column: 9, scope: !4670)
!4676 = !DILocation(line: 2196, column: 4, scope: !4670)
!4677 = !DILocation(line: 2196, column: 12, scope: !4670)
!4678 = !DILocation(line: 2197, column: 7, scope: !4670)
!4679 = !DILocation(line: 2197, column: 4, scope: !4670)
!4680 = !DILocation(line: 2197, column: 10, scope: !4670)
!4681 = !DILocation(line: 2198, column: 2, scope: !4670)
!4682 = !DILocation(line: 2201, column: 24, scope: !4683)
!4683 = distinct !DILexicalBlock(scope: !4664, file: !1, line: 2200, column: 2)
!4684 = !DILocation(line: 2201, column: 33, scope: !4683)
!4685 = !DILocation(line: 2201, column: 30, scope: !4683)
!4686 = !DILocation(line: 2201, column: 10, scope: !4683)
!4687 = !DILocation(line: 2201, column: 8, scope: !4683)
!4688 = !DILocation(line: 2202, column: 9, scope: !4689)
!4689 = distinct !DILexicalBlock(scope: !4683, file: !1, line: 2202, column: 8)
!4690 = !DILocation(line: 2202, column: 8, scope: !4683)
!4691 = !DILocation(line: 2203, column: 13, scope: !4689)
!4692 = !DILocation(line: 2203, column: 6, scope: !4689)
!4693 = !DILocation(line: 2204, column: 13, scope: !4683)
!4694 = !DILocation(line: 2204, column: 8, scope: !4683)
!4695 = !DILocation(line: 2204, column: 4, scope: !4683)
!4696 = !DILocation(line: 2204, column: 11, scope: !4683)
!4697 = !DILocation(line: 2205, column: 14, scope: !4683)
!4698 = !DILocation(line: 2205, column: 9, scope: !4683)
!4699 = !DILocation(line: 2205, column: 4, scope: !4683)
!4700 = !DILocation(line: 2205, column: 12, scope: !4683)
!4701 = !DILocation(line: 2207, column: 5, scope: !4665)
!4702 = !DILocation(line: 2191, column: 23, scope: !4660)
!4703 = !DILocation(line: 2191, column: 3, scope: !4660)
!4704 = distinct !{!4704, !4662, !4705}
!4705 = !DILocation(line: 2207, column: 5, scope: !4657)
!4706 = !DILocation(line: 2210, column: 3, scope: !4589)
!4707 = !DILocation(line: 2212, column: 10, scope: !4708)
!4708 = distinct !DILexicalBlock(scope: !4589, file: !1, line: 2212, column: 3)
!4709 = !DILocation(line: 2212, column: 8, scope: !4708)
!4710 = !DILocation(line: 2212, column: 15, scope: !4711)
!4711 = distinct !DILexicalBlock(scope: !4708, file: !1, line: 2212, column: 3)
!4712 = !DILocation(line: 2212, column: 19, scope: !4711)
!4713 = !DILocation(line: 2212, column: 17, scope: !4711)
!4714 = !DILocation(line: 2212, column: 3, scope: !4708)
!4715 = !DILocation(line: 2214, column: 14, scope: !4716)
!4716 = distinct !DILexicalBlock(scope: !4717, file: !1, line: 2214, column: 7)
!4717 = distinct !DILexicalBlock(scope: !4711, file: !1, line: 2213, column: 5)
!4718 = !DILocation(line: 2214, column: 12, scope: !4716)
!4719 = !DILocation(line: 2214, column: 19, scope: !4720)
!4720 = distinct !DILexicalBlock(scope: !4716, file: !1, line: 2214, column: 7)
!4721 = !DILocation(line: 2214, column: 21, scope: !4720)
!4722 = !DILocation(line: 2214, column: 7, scope: !4716)
!4723 = !DILocation(line: 2215, column: 28, scope: !4720)
!4724 = !DILocation(line: 2215, column: 25, scope: !4720)
!4725 = !DILocation(line: 2215, column: 36, scope: !4720)
!4726 = !DILocation(line: 2215, column: 32, scope: !4720)
!4727 = !DILocation(line: 2215, column: 12, scope: !4720)
!4728 = !DILocation(line: 2215, column: 7, scope: !4720)
!4729 = !DILocation(line: 2215, column: 2, scope: !4720)
!4730 = !DILocation(line: 2215, column: 10, scope: !4720)
!4731 = !DILocation(line: 2214, column: 27, scope: !4720)
!4732 = !DILocation(line: 2214, column: 7, scope: !4720)
!4733 = distinct !{!4733, !4722, !4734}
!4734 = !DILocation(line: 2215, column: 38, scope: !4716)
!4735 = !DILocation(line: 2217, column: 14, scope: !4717)
!4736 = !DILocation(line: 2217, column: 12, scope: !4717)
!4737 = !DILocation(line: 2218, column: 11, scope: !4738)
!4738 = distinct !DILexicalBlock(scope: !4717, file: !1, line: 2218, column: 11)
!4739 = !DILocation(line: 2218, column: 16, scope: !4738)
!4740 = !DILocation(line: 2218, column: 34, scope: !4738)
!4741 = !DILocation(line: 2218, column: 19, scope: !4738)
!4742 = !DILocation(line: 2218, column: 11, scope: !4717)
!4743 = !DILocation(line: 2220, column: 4, scope: !4744)
!4744 = distinct !DILexicalBlock(scope: !4738, file: !1, line: 2219, column: 2)
!4745 = !DILocation(line: 2221, column: 8, scope: !4746)
!4746 = distinct !DILexicalBlock(scope: !4744, file: !1, line: 2221, column: 8)
!4747 = !DILocation(line: 2221, column: 18, scope: !4746)
!4748 = !DILocation(line: 2221, column: 22, scope: !4746)
!4749 = !DILocation(line: 2221, column: 33, scope: !4746)
!4750 = !DILocation(line: 2221, column: 8, scope: !4744)
!4751 = !DILocation(line: 2222, column: 15, scope: !4746)
!4752 = !DILocation(line: 2224, column: 8, scope: !4746)
!4753 = !DILocation(line: 2224, column: 14, scope: !4746)
!4754 = !DILocation(line: 2224, column: 19, scope: !4746)
!4755 = !DILocation(line: 2222, column: 6, scope: !4746)
!4756 = !DILocation(line: 2225, column: 26, scope: !4744)
!4757 = !DILocation(line: 2225, column: 46, scope: !4744)
!4758 = !DILocation(line: 2225, column: 11, scope: !4744)
!4759 = !DILocation(line: 2225, column: 4, scope: !4744)
!4760 = !DILocation(line: 2228, column: 14, scope: !4761)
!4761 = distinct !DILexicalBlock(scope: !4717, file: !1, line: 2228, column: 7)
!4762 = !DILocation(line: 2228, column: 12, scope: !4761)
!4763 = !DILocation(line: 2228, column: 19, scope: !4764)
!4764 = distinct !DILexicalBlock(scope: !4761, file: !1, line: 2228, column: 7)
!4765 = !DILocation(line: 2228, column: 21, scope: !4764)
!4766 = !DILocation(line: 2228, column: 7, scope: !4761)
!4767 = !DILocation(line: 2230, column: 31, scope: !4768)
!4768 = distinct !DILexicalBlock(scope: !4764, file: !1, line: 2229, column: 2)
!4769 = !DILocation(line: 2230, column: 26, scope: !4768)
!4770 = !DILocation(line: 2230, column: 39, scope: !4768)
!4771 = !DILocation(line: 2230, column: 35, scope: !4768)
!4772 = !DILocation(line: 2230, column: 13, scope: !4768)
!4773 = !DILocation(line: 2230, column: 8, scope: !4768)
!4774 = !DILocation(line: 2230, column: 4, scope: !4768)
!4775 = !DILocation(line: 2230, column: 11, scope: !4768)
!4776 = !DILocation(line: 2231, column: 38, scope: !4777)
!4777 = distinct !DILexicalBlock(scope: !4768, file: !1, line: 2231, column: 8)
!4778 = !DILocation(line: 2231, column: 34, scope: !4777)
!4779 = !DILocation(line: 2231, column: 9, scope: !4777)
!4780 = !DILocation(line: 2231, column: 8, scope: !4768)
!4781 = !DILocation(line: 2233, column: 8, scope: !4782)
!4782 = distinct !DILexicalBlock(scope: !4777, file: !1, line: 2232, column: 6)
!4783 = !DILocation(line: 2234, column: 15, scope: !4782)
!4784 = !DILocation(line: 2234, column: 8, scope: !4782)
!4785 = !DILocation(line: 2236, column: 2, scope: !4768)
!4786 = !DILocation(line: 2228, column: 27, scope: !4764)
!4787 = !DILocation(line: 2228, column: 7, scope: !4764)
!4788 = distinct !{!4788, !4766, !4789}
!4789 = !DILocation(line: 2236, column: 2, scope: !4761)
!4790 = !DILocation(line: 2237, column: 5, scope: !4717)
!4791 = !DILocation(line: 2212, column: 45, scope: !4711)
!4792 = !DILocation(line: 2212, column: 3, scope: !4711)
!4793 = distinct !{!4793, !4714, !4794}
!4794 = !DILocation(line: 2237, column: 5, scope: !4708)
!4795 = !DILocation(line: 2239, column: 3, scope: !4589)
!4796 = !DILocation(line: 2241, column: 10, scope: !4589)
!4797 = !DILocation(line: 2241, column: 3, scope: !4589)
!4798 = !DILocation(line: 2242, column: 1, scope: !4589)
!4799 = distinct !DISubprogram(name: "get_base_for", scope: !1, file: !1, line: 2067, type: !4800, scopeLine: 2068, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!4800 = !DISubroutineType(types: !4801)
!4801 = !{!1986, !2201, !1655}
!4802 = !DILocalVariable(name: "loop", arg: 1, scope: !4799, file: !1, line: 2067, type: !2201)
!4803 = !DILocation(line: 2067, column: 28, scope: !4799)
!4804 = !DILocalVariable(name: "x", arg: 2, scope: !4799, file: !1, line: 2067, type: !1655)
!4805 = !DILocation(line: 2067, column: 39, scope: !4799)
!4806 = !DILocalVariable(name: "phi", scope: !4799, file: !1, line: 2069, type: !1986)
!4807 = !DILocation(line: 2069, column: 10, scope: !4799)
!4808 = !DILocalVariable(name: "init", scope: !4799, file: !1, line: 2070, type: !1655)
!4809 = !DILocation(line: 2070, column: 8, scope: !4799)
!4810 = !DILocalVariable(name: "next", scope: !4799, file: !1, line: 2070, type: !1655)
!4811 = !DILocation(line: 2070, column: 14, scope: !4799)
!4812 = !DILocation(line: 2072, column: 32, scope: !4813)
!4813 = distinct !DILexicalBlock(scope: !4799, file: !1, line: 2072, column: 7)
!4814 = !DILocation(line: 2072, column: 7, scope: !4813)
!4815 = !DILocation(line: 2072, column: 7, scope: !4799)
!4816 = !DILocation(line: 2073, column: 5, scope: !4813)
!4817 = !DILocation(line: 2075, column: 30, scope: !4799)
!4818 = !DILocation(line: 2075, column: 36, scope: !4799)
!4819 = !DILocation(line: 2075, column: 9, scope: !4799)
!4820 = !DILocation(line: 2075, column: 7, scope: !4799)
!4821 = !DILocation(line: 2076, column: 8, scope: !4822)
!4822 = distinct !DILexicalBlock(scope: !4799, file: !1, line: 2076, column: 7)
!4823 = !DILocation(line: 2076, column: 7, scope: !4799)
!4824 = !DILocation(line: 2077, column: 5, scope: !4822)
!4825 = !DILocation(line: 2079, column: 10, scope: !4799)
!4826 = !DILocation(line: 2079, column: 8, scope: !4799)
!4827 = !DILocation(line: 2080, column: 10, scope: !4799)
!4828 = !DILocation(line: 2080, column: 8, scope: !4799)
!4829 = !DILocation(line: 2082, column: 7, scope: !4830)
!4830 = distinct !DILexicalBlock(scope: !4799, file: !1, line: 2082, column: 7)
!4831 = !DILocation(line: 2082, column: 24, scope: !4830)
!4832 = !DILocation(line: 2082, column: 7, scope: !4799)
!4833 = !DILocation(line: 2083, column: 5, scope: !4830)
!4834 = !DILocation(line: 2085, column: 33, scope: !4835)
!4835 = distinct !DILexicalBlock(scope: !4799, file: !1, line: 2085, column: 7)
!4836 = !DILocation(line: 2085, column: 8, scope: !4835)
!4837 = !DILocation(line: 2085, column: 7, scope: !4799)
!4838 = !DILocation(line: 2086, column: 5, scope: !4835)
!4839 = !DILocation(line: 2088, column: 28, scope: !4840)
!4840 = distinct !DILexicalBlock(scope: !4799, file: !1, line: 2088, column: 7)
!4841 = !DILocation(line: 2088, column: 34, scope: !4840)
!4842 = !DILocation(line: 2088, column: 7, scope: !4840)
!4843 = !DILocation(line: 2088, column: 43, scope: !4840)
!4844 = !DILocation(line: 2088, column: 40, scope: !4840)
!4845 = !DILocation(line: 2088, column: 7, scope: !4799)
!4846 = !DILocation(line: 2089, column: 5, scope: !4840)
!4847 = !DILocation(line: 2091, column: 10, scope: !4799)
!4848 = !DILocation(line: 2091, column: 3, scope: !4799)
!4849 = !DILocation(line: 2092, column: 1, scope: !4799)
!4850 = distinct !DISubprogram(name: "get_val_for", scope: !1, file: !1, line: 2103, type: !4851, scopeLine: 2104, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!4851 = !DISubroutineType(types: !4852)
!4852 = !{!1655, !1655, !1655}
!4853 = !DILocalVariable(name: "x", arg: 1, scope: !4850, file: !1, line: 2103, type: !1655)
!4854 = !DILocation(line: 2103, column: 19, scope: !4850)
!4855 = !DILocalVariable(name: "base", arg: 2, scope: !4850, file: !1, line: 2103, type: !1655)
!4856 = !DILocation(line: 2103, column: 27, scope: !4850)
!4857 = !DILocalVariable(name: "stmt", scope: !4850, file: !1, line: 2105, type: !1986)
!4858 = !DILocation(line: 2105, column: 10, scope: !4850)
!4859 = !DILocation(line: 2107, column: 3, scope: !4850)
!4860 = !DILocation(line: 2109, column: 8, scope: !4861)
!4861 = distinct !DILexicalBlock(scope: !4850, file: !1, line: 2109, column: 7)
!4862 = !DILocation(line: 2109, column: 7, scope: !4850)
!4863 = !DILocation(line: 2110, column: 12, scope: !4861)
!4864 = !DILocation(line: 2110, column: 5, scope: !4861)
!4865 = !DILocation(line: 2112, column: 10, scope: !4850)
!4866 = !DILocation(line: 2112, column: 8, scope: !4850)
!4867 = !DILocation(line: 2113, column: 20, scope: !4868)
!4868 = distinct !DILexicalBlock(scope: !4850, file: !1, line: 2113, column: 7)
!4869 = !DILocation(line: 2113, column: 7, scope: !4868)
!4870 = !DILocation(line: 2113, column: 26, scope: !4868)
!4871 = !DILocation(line: 2113, column: 7, scope: !4850)
!4872 = !DILocation(line: 2114, column: 12, scope: !4868)
!4873 = !DILocation(line: 2114, column: 5, scope: !4868)
!4874 = !DILocation(line: 2116, column: 3, scope: !4850)
!4875 = !DILocation(line: 2121, column: 38, scope: !4876)
!4876 = distinct !DILexicalBlock(scope: !4850, file: !1, line: 2121, column: 7)
!4877 = !DILocation(line: 2121, column: 7, scope: !4876)
!4878 = !DILocation(line: 2121, column: 7, scope: !4850)
!4879 = !DILocation(line: 2122, column: 45, scope: !4876)
!4880 = !DILocation(line: 2122, column: 25, scope: !4876)
!4881 = !DILocation(line: 2122, column: 52, scope: !4876)
!4882 = !DILocation(line: 2122, column: 12, scope: !4876)
!4883 = !DILocation(line: 2122, column: 5, scope: !4876)
!4884 = !DILocation(line: 2123, column: 37, scope: !4885)
!4885 = distinct !DILexicalBlock(scope: !4876, file: !1, line: 2123, column: 12)
!4886 = !DILocation(line: 2123, column: 12, scope: !4885)
!4887 = !DILocation(line: 2123, column: 43, scope: !4885)
!4888 = !DILocation(line: 2124, column: 5, scope: !4885)
!4889 = !DILocation(line: 2124, column: 8, scope: !4885)
!4890 = !DILocation(line: 2124, column: 46, scope: !4885)
!4891 = !DILocation(line: 2123, column: 12, scope: !4876)
!4892 = !DILocation(line: 2126, column: 14, scope: !4893)
!4893 = distinct !DILexicalBlock(scope: !4885, file: !1, line: 2125, column: 5)
!4894 = !DILocation(line: 2126, column: 7, scope: !4893)
!4895 = !DILocation(line: 2130, column: 37, scope: !4896)
!4896 = distinct !DILexicalBlock(scope: !4885, file: !1, line: 2130, column: 12)
!4897 = !DILocation(line: 2130, column: 12, scope: !4896)
!4898 = !DILocation(line: 2130, column: 43, scope: !4896)
!4899 = !DILocation(line: 2130, column: 12, scope: !4885)
!4900 = !DILocalVariable(name: "rhs1", scope: !4901, file: !1, line: 2132, type: !1655)
!4901 = distinct !DILexicalBlock(scope: !4896, file: !1, line: 2131, column: 5)
!4902 = !DILocation(line: 2132, column: 12, scope: !4901)
!4903 = !DILocation(line: 2132, column: 39, scope: !4901)
!4904 = !DILocation(line: 2132, column: 19, scope: !4901)
!4905 = !DILocalVariable(name: "rhs2", scope: !4901, file: !1, line: 2133, type: !1655)
!4906 = !DILocation(line: 2133, column: 12, scope: !4901)
!4907 = !DILocation(line: 2133, column: 39, scope: !4901)
!4908 = !DILocation(line: 2133, column: 19, scope: !4901)
!4909 = !DILocation(line: 2134, column: 11, scope: !4910)
!4910 = distinct !DILexicalBlock(scope: !4901, file: !1, line: 2134, column: 11)
!4911 = !DILocation(line: 2134, column: 28, scope: !4910)
!4912 = !DILocation(line: 2134, column: 11, scope: !4901)
!4913 = !DILocation(line: 2135, column: 22, scope: !4910)
!4914 = !DILocation(line: 2135, column: 28, scope: !4910)
!4915 = !DILocation(line: 2135, column: 9, scope: !4910)
!4916 = !DILocation(line: 2135, column: 7, scope: !4910)
!4917 = !DILocation(line: 2135, column: 2, scope: !4910)
!4918 = !DILocation(line: 2136, column: 16, scope: !4919)
!4919 = distinct !DILexicalBlock(scope: !4910, file: !1, line: 2136, column: 16)
!4920 = !DILocation(line: 2136, column: 33, scope: !4919)
!4921 = !DILocation(line: 2136, column: 16, scope: !4910)
!4922 = !DILocation(line: 2137, column: 22, scope: !4919)
!4923 = !DILocation(line: 2137, column: 28, scope: !4919)
!4924 = !DILocation(line: 2137, column: 9, scope: !4919)
!4925 = !DILocation(line: 2137, column: 7, scope: !4919)
!4926 = !DILocation(line: 2137, column: 2, scope: !4919)
!4927 = !DILocation(line: 2139, column: 2, scope: !4919)
!4928 = !DILocation(line: 2140, column: 14, scope: !4901)
!4929 = !DILocation(line: 2140, column: 7, scope: !4901)
!4930 = !DILocation(line: 2144, column: 5, scope: !4896)
!4931 = !DILocation(line: 2146, column: 5, scope: !4850)
!4932 = !DILocation(line: 2148, column: 1, scope: !4850)
!4933 = distinct !DISubprogram(name: "find_loop_niter_by_eval", scope: !1, file: !1, line: 2252, type: !4362, scopeLine: 2253, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!4934 = !DILocalVariable(name: "loop", arg: 1, scope: !4933, file: !1, line: 2252, type: !2201)
!4935 = !DILocation(line: 2252, column: 39, scope: !4933)
!4936 = !DILocalVariable(name: "exit", arg: 2, scope: !4933, file: !1, line: 2252, type: !4364)
!4937 = !DILocation(line: 2252, column: 51, scope: !4933)
!4938 = !DILocalVariable(name: "i", scope: !4933, file: !1, line: 2254, type: !5)
!4939 = !DILocation(line: 2254, column: 12, scope: !4933)
!4940 = !DILocalVariable(name: "exits", scope: !4933, file: !1, line: 2255, type: !4372)
!4941 = !DILocation(line: 2255, column: 21, scope: !4933)
!4942 = !DILocation(line: 2255, column: 50, scope: !4933)
!4943 = !DILocation(line: 2255, column: 29, scope: !4933)
!4944 = !DILocalVariable(name: "ex", scope: !4933, file: !1, line: 2256, type: !1966)
!4945 = !DILocation(line: 2256, column: 8, scope: !4933)
!4946 = !DILocalVariable(name: "niter", scope: !4933, file: !1, line: 2257, type: !1655)
!4947 = !DILocation(line: 2257, column: 8, scope: !4933)
!4948 = !DILocalVariable(name: "aniter", scope: !4933, file: !1, line: 2257, type: !1655)
!4949 = !DILocation(line: 2257, column: 27, scope: !4933)
!4950 = !DILocation(line: 2259, column: 4, scope: !4933)
!4951 = !DILocation(line: 2259, column: 9, scope: !4933)
!4952 = !DILocation(line: 2262, column: 8, scope: !4953)
!4953 = distinct !DILexicalBlock(scope: !4933, file: !1, line: 2262, column: 7)
!4954 = !DILocation(line: 2263, column: 7, scope: !4953)
!4955 = !DILocation(line: 2263, column: 10, scope: !4953)
!4956 = !DILocation(line: 2263, column: 35, scope: !4953)
!4957 = !DILocation(line: 2262, column: 7, scope: !4933)
!4958 = !DILocation(line: 2264, column: 12, scope: !4953)
!4959 = !DILocation(line: 2264, column: 5, scope: !4953)
!4960 = !DILocation(line: 2266, column: 10, scope: !4961)
!4961 = distinct !DILexicalBlock(scope: !4933, file: !1, line: 2266, column: 3)
!4962 = !DILocation(line: 2266, column: 8, scope: !4961)
!4963 = !DILocation(line: 2266, column: 15, scope: !4964)
!4964 = distinct !DILexicalBlock(scope: !4961, file: !1, line: 2266, column: 3)
!4965 = !DILocation(line: 2266, column: 3, scope: !4961)
!4966 = !DILocation(line: 2268, column: 40, scope: !4967)
!4967 = distinct !DILexicalBlock(scope: !4968, file: !1, line: 2268, column: 11)
!4968 = distinct !DILexicalBlock(scope: !4964, file: !1, line: 2267, column: 5)
!4969 = !DILocation(line: 2268, column: 46, scope: !4967)
!4970 = !DILocation(line: 2268, column: 50, scope: !4967)
!4971 = !DILocation(line: 2268, column: 12, scope: !4967)
!4972 = !DILocation(line: 2268, column: 11, scope: !4968)
!4973 = !DILocation(line: 2269, column: 2, scope: !4967)
!4974 = !DILocation(line: 2271, column: 36, scope: !4968)
!4975 = !DILocation(line: 2271, column: 42, scope: !4968)
!4976 = !DILocation(line: 2271, column: 16, scope: !4968)
!4977 = !DILocation(line: 2271, column: 14, scope: !4968)
!4978 = !DILocation(line: 2272, column: 40, scope: !4979)
!4979 = distinct !DILexicalBlock(scope: !4968, file: !1, line: 2272, column: 11)
!4980 = !DILocation(line: 2272, column: 11, scope: !4979)
!4981 = !DILocation(line: 2272, column: 11, scope: !4968)
!4982 = !DILocation(line: 2273, column: 2, scope: !4979)
!4983 = !DILocation(line: 2275, column: 11, scope: !4984)
!4984 = distinct !DILexicalBlock(scope: !4968, file: !1, line: 2275, column: 11)
!4985 = !DILocation(line: 2276, column: 4, scope: !4984)
!4986 = !DILocation(line: 2276, column: 25, scope: !4984)
!4987 = !DILocation(line: 2276, column: 33, scope: !4984)
!4988 = !DILocation(line: 2276, column: 8, scope: !4984)
!4989 = !DILocation(line: 2275, column: 11, scope: !4968)
!4990 = !DILocation(line: 2277, column: 2, scope: !4984)
!4991 = !DILocation(line: 2279, column: 15, scope: !4968)
!4992 = !DILocation(line: 2279, column: 13, scope: !4968)
!4993 = !DILocation(line: 2280, column: 15, scope: !4968)
!4994 = !DILocation(line: 2280, column: 8, scope: !4968)
!4995 = !DILocation(line: 2280, column: 13, scope: !4968)
!4996 = !DILocation(line: 2281, column: 5, scope: !4968)
!4997 = !DILocation(line: 2266, column: 50, scope: !4964)
!4998 = !DILocation(line: 2266, column: 3, scope: !4964)
!4999 = distinct !{!4999, !4965, !5000}
!5000 = !DILocation(line: 2281, column: 5, scope: !4961)
!5001 = !DILocation(line: 2282, column: 3, scope: !4933)
!5002 = !DILocation(line: 2284, column: 10, scope: !4933)
!5003 = !DILocation(line: 2284, column: 18, scope: !4933)
!5004 = !DILocation(line: 2284, column: 26, scope: !4933)
!5005 = !DILocation(line: 2284, column: 3, scope: !4933)
!5006 = !DILocation(line: 2285, column: 1, scope: !4933)
!5007 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !341, file: !341, line: 150, type: !5008, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!5008 = !DISubroutineType(types: !5009)
!5009 = !{!5, !4480}
!5010 = !DILocalVariable(name: "vec_", arg: 1, scope: !5007, file: !341, line: 150, type: !4480)
!5011 = !DILocation(line: 150, column: 1, scope: !5007)
!5012 = distinct !DISubprogram(name: "array_at_struct_end_p", scope: !1, file: !1, line: 2621, type: !5013, scopeLine: 2622, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!5013 = !DISubroutineType(types: !5014)
!5014 = !{!1775, !1655}
!5015 = !DILocalVariable(name: "ref", arg: 1, scope: !5012, file: !1, line: 2621, type: !1655)
!5016 = !DILocation(line: 2621, column: 29, scope: !5012)
!5017 = !DILocalVariable(name: "base", scope: !5012, file: !1, line: 2623, type: !1655)
!5018 = !DILocation(line: 2623, column: 8, scope: !5012)
!5019 = !DILocation(line: 2623, column: 33, scope: !5012)
!5020 = !DILocation(line: 2623, column: 15, scope: !5012)
!5021 = !DILocalVariable(name: "parent", scope: !5012, file: !1, line: 2624, type: !1655)
!5022 = !DILocation(line: 2624, column: 8, scope: !5012)
!5023 = !DILocalVariable(name: "field", scope: !5012, file: !1, line: 2624, type: !1655)
!5024 = !DILocation(line: 2624, column: 16, scope: !5012)
!5025 = !DILocation(line: 2628, column: 8, scope: !5026)
!5026 = distinct !DILexicalBlock(scope: !5012, file: !1, line: 2628, column: 7)
!5027 = !DILocation(line: 2628, column: 13, scope: !5026)
!5028 = !DILocation(line: 2628, column: 17, scope: !5026)
!5029 = !DILocation(line: 2628, column: 7, scope: !5012)
!5030 = !DILocation(line: 2629, column: 5, scope: !5026)
!5031 = !DILocation(line: 2631, column: 3, scope: !5012)
!5032 = !DILocation(line: 2631, column: 30, scope: !5033)
!5033 = distinct !DILexicalBlock(scope: !5034, file: !1, line: 2631, column: 3)
!5034 = distinct !DILexicalBlock(scope: !5012, file: !1, line: 2631, column: 3)
!5035 = !DILocation(line: 2631, column: 9, scope: !5033)
!5036 = !DILocation(line: 2631, column: 3, scope: !5034)
!5037 = !DILocation(line: 2633, column: 16, scope: !5038)
!5038 = distinct !DILexicalBlock(scope: !5033, file: !1, line: 2632, column: 5)
!5039 = !DILocation(line: 2633, column: 14, scope: !5038)
!5040 = !DILocation(line: 2635, column: 11, scope: !5041)
!5041 = distinct !DILexicalBlock(scope: !5038, file: !1, line: 2635, column: 11)
!5042 = !DILocation(line: 2635, column: 27, scope: !5041)
!5043 = !DILocation(line: 2635, column: 11, scope: !5038)
!5044 = !DILocation(line: 2638, column: 8, scope: !5045)
!5045 = distinct !DILexicalBlock(scope: !5046, file: !1, line: 2638, column: 8)
!5046 = distinct !DILexicalBlock(scope: !5041, file: !1, line: 2636, column: 2)
!5047 = !DILocation(line: 2638, column: 39, scope: !5045)
!5048 = !DILocation(line: 2638, column: 8, scope: !5046)
!5049 = !DILocation(line: 2639, column: 6, scope: !5045)
!5050 = !DILocation(line: 2642, column: 12, scope: !5046)
!5051 = !DILocation(line: 2642, column: 10, scope: !5046)
!5052 = !DILocation(line: 2643, column: 8, scope: !5053)
!5053 = distinct !DILexicalBlock(scope: !5046, file: !1, line: 2643, column: 8)
!5054 = !DILocation(line: 2643, column: 8, scope: !5046)
!5055 = !DILocation(line: 2644, column: 6, scope: !5053)
!5056 = !DILocation(line: 2645, column: 2, scope: !5046)
!5057 = !DILocation(line: 2652, column: 5, scope: !5038)
!5058 = !DILocation(line: 2631, column: 42, scope: !5033)
!5059 = !DILocation(line: 2631, column: 40, scope: !5033)
!5060 = !DILocation(line: 2631, column: 3, scope: !5033)
!5061 = distinct !{!5061, !5036, !5062}
!5062 = !DILocation(line: 2652, column: 5, scope: !5034)
!5063 = !DILocation(line: 2654, column: 3, scope: !5012)
!5064 = !DILocation(line: 2655, column: 3, scope: !5012)
!5065 = !DILocation(line: 2656, column: 1, scope: !5012)
!5066 = distinct !DISubprogram(name: "handled_component_p", scope: !133, file: !133, line: 4551, type: !5067, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!5067 = !DISubroutineType(types: !5068)
!5068 = !{!1775, !3270}
!5069 = !DILocalVariable(name: "t", arg: 1, scope: !5066, file: !133, line: 4551, type: !3270)
!5070 = !DILocation(line: 4551, column: 33, scope: !5066)
!5071 = !DILocation(line: 4553, column: 11, scope: !5066)
!5072 = !DILocation(line: 4553, column: 3, scope: !5066)
!5073 = !DILocation(line: 4562, column: 7, scope: !5074)
!5074 = distinct !DILexicalBlock(scope: !5066, file: !133, line: 4554, column: 5)
!5075 = !DILocation(line: 4565, column: 7, scope: !5074)
!5076 = !DILocation(line: 4567, column: 1, scope: !5066)
!5077 = distinct !DISubprogram(name: "estimate_numbers_of_iterations_loop", scope: !1, file: !1, line: 2906, type: !5078, scopeLine: 2907, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!5078 = !DISubroutineType(types: !5079)
!5079 = !{null, !2201}
!5080 = !DILocalVariable(name: "loop", arg: 1, scope: !5077, file: !1, line: 2906, type: !2201)
!5081 = !DILocation(line: 2906, column: 51, scope: !5077)
!5082 = !DILocalVariable(name: "exits", scope: !5077, file: !1, line: 2908, type: !4372)
!5083 = !DILocation(line: 2908, column: 21, scope: !5077)
!5084 = !DILocalVariable(name: "niter", scope: !5077, file: !1, line: 2909, type: !1655)
!5085 = !DILocation(line: 2909, column: 8, scope: !5077)
!5086 = !DILocalVariable(name: "type", scope: !5077, file: !1, line: 2909, type: !1655)
!5087 = !DILocation(line: 2909, column: 15, scope: !5077)
!5088 = !DILocalVariable(name: "i", scope: !5077, file: !1, line: 2910, type: !5)
!5089 = !DILocation(line: 2910, column: 12, scope: !5077)
!5090 = !DILocalVariable(name: "niter_desc", scope: !5077, file: !1, line: 2911, type: !3540)
!5091 = !DILocation(line: 2911, column: 26, scope: !5077)
!5092 = !DILocalVariable(name: "ex", scope: !5077, file: !1, line: 2912, type: !1966)
!5093 = !DILocation(line: 2912, column: 8, scope: !5077)
!5094 = !DILocalVariable(name: "bound", scope: !5077, file: !1, line: 2913, type: !1704)
!5095 = !DILocation(line: 2913, column: 14, scope: !5077)
!5096 = !DILocation(line: 2916, column: 7, scope: !5097)
!5097 = distinct !DILexicalBlock(scope: !5077, file: !1, line: 2916, column: 7)
!5098 = !DILocation(line: 2916, column: 13, scope: !5097)
!5099 = !DILocation(line: 2916, column: 28, scope: !5097)
!5100 = !DILocation(line: 2916, column: 7, scope: !5077)
!5101 = !DILocation(line: 2917, column: 5, scope: !5097)
!5102 = !DILocation(line: 2918, column: 3, scope: !5077)
!5103 = !DILocation(line: 2918, column: 9, scope: !5077)
!5104 = !DILocation(line: 2918, column: 24, scope: !5077)
!5105 = !DILocation(line: 2919, column: 3, scope: !5077)
!5106 = !DILocation(line: 2919, column: 9, scope: !5077)
!5107 = !DILocation(line: 2919, column: 25, scope: !5077)
!5108 = !DILocation(line: 2920, column: 3, scope: !5077)
!5109 = !DILocation(line: 2920, column: 9, scope: !5077)
!5110 = !DILocation(line: 2920, column: 22, scope: !5077)
!5111 = !DILocation(line: 2922, column: 32, scope: !5077)
!5112 = !DILocation(line: 2922, column: 11, scope: !5077)
!5113 = !DILocation(line: 2922, column: 9, scope: !5077)
!5114 = !DILocation(line: 2923, column: 10, scope: !5115)
!5115 = distinct !DILexicalBlock(scope: !5077, file: !1, line: 2923, column: 3)
!5116 = !DILocation(line: 2923, column: 8, scope: !5115)
!5117 = !DILocation(line: 2923, column: 15, scope: !5118)
!5118 = distinct !DILexicalBlock(scope: !5115, file: !1, line: 2923, column: 3)
!5119 = !DILocation(line: 2923, column: 3, scope: !5115)
!5120 = !DILocation(line: 2925, column: 39, scope: !5121)
!5121 = distinct !DILexicalBlock(scope: !5122, file: !1, line: 2925, column: 11)
!5122 = distinct !DILexicalBlock(scope: !5118, file: !1, line: 2924, column: 5)
!5123 = !DILocation(line: 2925, column: 45, scope: !5121)
!5124 = !DILocation(line: 2925, column: 12, scope: !5121)
!5125 = !DILocation(line: 2925, column: 11, scope: !5122)
!5126 = !DILocation(line: 2926, column: 2, scope: !5121)
!5127 = !DILocation(line: 2928, column: 26, scope: !5122)
!5128 = !DILocation(line: 2928, column: 13, scope: !5122)
!5129 = !DILocation(line: 2929, column: 14, scope: !5122)
!5130 = !DILocation(line: 2929, column: 12, scope: !5122)
!5131 = !DILocation(line: 2930, column: 11, scope: !5132)
!5132 = distinct !DILexicalBlock(scope: !5122, file: !1, line: 2930, column: 11)
!5133 = !DILocation(line: 2930, column: 46, scope: !5132)
!5134 = !DILocation(line: 2930, column: 11, scope: !5122)
!5135 = !DILocation(line: 2931, column: 10, scope: !5132)
!5136 = !DILocation(line: 2931, column: 8, scope: !5132)
!5137 = !DILocation(line: 2931, column: 2, scope: !5132)
!5138 = !DILocation(line: 2934, column: 24, scope: !5122)
!5139 = !DILocation(line: 2934, column: 30, scope: !5122)
!5140 = !DILocation(line: 2934, column: 48, scope: !5122)
!5141 = !DILocation(line: 2935, column: 21, scope: !5122)
!5142 = !DILocation(line: 2935, column: 25, scope: !5122)
!5143 = !DILocation(line: 2935, column: 10, scope: !5122)
!5144 = !DILocation(line: 2934, column: 7, scope: !5122)
!5145 = !DILocation(line: 2937, column: 5, scope: !5122)
!5146 = !DILocation(line: 2923, column: 50, scope: !5118)
!5147 = !DILocation(line: 2923, column: 3, scope: !5118)
!5148 = distinct !{!5148, !5119, !5149}
!5149 = !DILocation(line: 2937, column: 5, scope: !5115)
!5150 = !DILocation(line: 2938, column: 3, scope: !5077)
!5151 = !DILocation(line: 2940, column: 37, scope: !5077)
!5152 = !DILocation(line: 2940, column: 3, scope: !5077)
!5153 = !DILocation(line: 2944, column: 7, scope: !5154)
!5154 = distinct !DILexicalBlock(scope: !5077, file: !1, line: 2944, column: 7)
!5155 = !DILocation(line: 2944, column: 13, scope: !5154)
!5156 = !DILocation(line: 2944, column: 21, scope: !5154)
!5157 = !DILocation(line: 2944, column: 27, scope: !5154)
!5158 = !DILocation(line: 2944, column: 7, scope: !5077)
!5159 = !DILocalVariable(name: "nit", scope: !5160, file: !1, line: 2946, type: !2197)
!5160 = distinct !DILexicalBlock(scope: !5154, file: !1, line: 2945, column: 5)
!5161 = !DILocation(line: 2946, column: 17, scope: !5160)
!5162 = !DILocation(line: 2946, column: 59, scope: !5160)
!5163 = !DILocation(line: 2946, column: 23, scope: !5160)
!5164 = !DILocation(line: 2946, column: 65, scope: !5160)
!5165 = !DILocation(line: 2947, column: 40, scope: !5160)
!5166 = !DILocation(line: 2947, column: 15, scope: !5160)
!5167 = !DILocation(line: 2948, column: 27, scope: !5160)
!5168 = !DILocation(line: 2948, column: 7, scope: !5160)
!5169 = !DILocation(line: 2949, column: 5, scope: !5160)
!5170 = !DILocation(line: 2953, column: 7, scope: !5171)
!5171 = distinct !DILexicalBlock(scope: !5077, file: !1, line: 2953, column: 7)
!5172 = !DILocation(line: 2953, column: 13, scope: !5171)
!5173 = !DILocation(line: 2954, column: 7, scope: !5171)
!5174 = !DILocation(line: 2954, column: 10, scope: !5171)
!5175 = !DILocation(line: 2954, column: 16, scope: !5171)
!5176 = !DILocation(line: 2955, column: 7, scope: !5171)
!5177 = !DILocation(line: 2955, column: 27, scope: !5171)
!5178 = !DILocation(line: 2955, column: 33, scope: !5171)
!5179 = !DILocation(line: 2956, column: 6, scope: !5171)
!5180 = !DILocation(line: 2956, column: 12, scope: !5171)
!5181 = !DILocation(line: 2955, column: 10, scope: !5171)
!5182 = !DILocation(line: 2956, column: 36, scope: !5171)
!5183 = !DILocation(line: 2953, column: 7, scope: !5077)
!5184 = !DILocation(line: 2957, column: 5, scope: !5171)
!5185 = !DILocation(line: 2957, column: 11, scope: !5171)
!5186 = !DILocation(line: 2957, column: 36, scope: !5171)
!5187 = !DILocation(line: 2957, column: 42, scope: !5171)
!5188 = !DILocation(line: 2958, column: 1, scope: !5077)
!5189 = distinct !DISubprogram(name: "record_estimate", scope: !1, file: !1, line: 2499, type: !5190, scopeLine: 2501, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!5190 = !DISubroutineType(types: !5191)
!5191 = !{null, !2201, !1655, !1704, !1986, !1775, !1775, !1775}
!5192 = !DILocalVariable(name: "loop", arg: 1, scope: !5189, file: !1, line: 2499, type: !2201)
!5193 = !DILocation(line: 2499, column: 31, scope: !5189)
!5194 = !DILocalVariable(name: "bound", arg: 2, scope: !5189, file: !1, line: 2499, type: !1655)
!5195 = !DILocation(line: 2499, column: 42, scope: !5189)
!5196 = !DILocalVariable(name: "i_bound", arg: 3, scope: !5189, file: !1, line: 2499, type: !1704)
!5197 = !DILocation(line: 2499, column: 60, scope: !5189)
!5198 = !DILocalVariable(name: "at_stmt", arg: 4, scope: !5189, file: !1, line: 2500, type: !1986)
!5199 = !DILocation(line: 2500, column: 11, scope: !5189)
!5200 = !DILocalVariable(name: "is_exit", arg: 5, scope: !5189, file: !1, line: 2500, type: !1775)
!5201 = !DILocation(line: 2500, column: 25, scope: !5189)
!5202 = !DILocalVariable(name: "realistic", arg: 6, scope: !5189, file: !1, line: 2500, type: !1775)
!5203 = !DILocation(line: 2500, column: 39, scope: !5189)
!5204 = !DILocalVariable(name: "upper", arg: 7, scope: !5189, file: !1, line: 2500, type: !1775)
!5205 = !DILocation(line: 2500, column: 55, scope: !5189)
!5206 = !DILocalVariable(name: "delta", scope: !5189, file: !1, line: 2502, type: !1704)
!5207 = !DILocation(line: 2502, column: 14, scope: !5189)
!5208 = !DILocalVariable(name: "exit", scope: !5189, file: !1, line: 2503, type: !1966)
!5209 = !DILocation(line: 2503, column: 8, scope: !5189)
!5210 = !DILocation(line: 2505, column: 7, scope: !5211)
!5211 = distinct !DILexicalBlock(scope: !5189, file: !1, line: 2505, column: 7)
!5212 = !DILocation(line: 2505, column: 17, scope: !5211)
!5213 = !DILocation(line: 2505, column: 21, scope: !5211)
!5214 = !DILocation(line: 2505, column: 32, scope: !5211)
!5215 = !DILocation(line: 2505, column: 7, scope: !5189)
!5216 = !DILocation(line: 2507, column: 16, scope: !5217)
!5217 = distinct !DILexicalBlock(scope: !5211, file: !1, line: 2506, column: 5)
!5218 = !DILocation(line: 2507, column: 43, scope: !5217)
!5219 = !DILocation(line: 2507, column: 7, scope: !5217)
!5220 = !DILocation(line: 2508, column: 26, scope: !5217)
!5221 = !DILocation(line: 2508, column: 37, scope: !5217)
!5222 = !DILocation(line: 2508, column: 7, scope: !5217)
!5223 = !DILocation(line: 2509, column: 16, scope: !5217)
!5224 = !DILocation(line: 2510, column: 9, scope: !5217)
!5225 = !DILocation(line: 2509, column: 7, scope: !5217)
!5226 = !DILocation(line: 2511, column: 27, scope: !5217)
!5227 = !DILocation(line: 2511, column: 38, scope: !5217)
!5228 = !DILocation(line: 2511, column: 7, scope: !5217)
!5229 = !DILocation(line: 2512, column: 16, scope: !5217)
!5230 = !DILocation(line: 2512, column: 7, scope: !5217)
!5231 = !DILocation(line: 2513, column: 24, scope: !5217)
!5232 = !DILocation(line: 2513, column: 7, scope: !5217)
!5233 = !DILocation(line: 2514, column: 16, scope: !5217)
!5234 = !DILocation(line: 2514, column: 56, scope: !5217)
!5235 = !DILocation(line: 2514, column: 62, scope: !5217)
!5236 = !DILocation(line: 2514, column: 7, scope: !5217)
!5237 = !DILocation(line: 2515, column: 5, scope: !5217)
!5238 = !DILocation(line: 2519, column: 7, scope: !5239)
!5239 = distinct !DILexicalBlock(scope: !5189, file: !1, line: 2519, column: 7)
!5240 = !DILocation(line: 2519, column: 25, scope: !5239)
!5241 = !DILocation(line: 2519, column: 7, scope: !5189)
!5242 = !DILocation(line: 2520, column: 15, scope: !5239)
!5243 = !DILocation(line: 2520, column: 5, scope: !5239)
!5244 = !DILocation(line: 2521, column: 8, scope: !5245)
!5245 = distinct !DILexicalBlock(scope: !5189, file: !1, line: 2521, column: 7)
!5246 = !DILocation(line: 2521, column: 14, scope: !5245)
!5247 = !DILocation(line: 2521, column: 18, scope: !5245)
!5248 = !DILocation(line: 2521, column: 7, scope: !5189)
!5249 = !DILocation(line: 2522, column: 5, scope: !5245)
!5250 = !DILocation(line: 2526, column: 7, scope: !5251)
!5251 = distinct !DILexicalBlock(scope: !5189, file: !1, line: 2526, column: 7)
!5252 = !DILocation(line: 2526, column: 7, scope: !5189)
!5253 = !DILocalVariable(name: "elt", scope: !5254, file: !1, line: 2528, type: !2239)
!5254 = distinct !DILexicalBlock(scope: !5251, file: !1, line: 2527, column: 5)
!5255 = !DILocation(line: 2528, column: 29, scope: !5254)
!5256 = !DILocation(line: 2528, column: 35, scope: !5254)
!5257 = !DILocation(line: 2530, column: 7, scope: !5254)
!5258 = !DILocation(line: 2530, column: 12, scope: !5254)
!5259 = !DILocation(line: 2530, column: 20, scope: !5254)
!5260 = !DILocation(line: 2531, column: 19, scope: !5254)
!5261 = !DILocation(line: 2531, column: 7, scope: !5254)
!5262 = !DILocation(line: 2531, column: 12, scope: !5254)
!5263 = !DILocation(line: 2531, column: 17, scope: !5254)
!5264 = !DILocation(line: 2532, column: 22, scope: !5254)
!5265 = !DILocation(line: 2532, column: 7, scope: !5254)
!5266 = !DILocation(line: 2532, column: 12, scope: !5254)
!5267 = !DILocation(line: 2532, column: 20, scope: !5254)
!5268 = !DILocation(line: 2533, column: 19, scope: !5254)
!5269 = !DILocation(line: 2533, column: 25, scope: !5254)
!5270 = !DILocation(line: 2533, column: 7, scope: !5254)
!5271 = !DILocation(line: 2533, column: 12, scope: !5254)
!5272 = !DILocation(line: 2533, column: 17, scope: !5254)
!5273 = !DILocation(line: 2534, column: 22, scope: !5254)
!5274 = !DILocation(line: 2534, column: 7, scope: !5254)
!5275 = !DILocation(line: 2534, column: 13, scope: !5254)
!5276 = !DILocation(line: 2534, column: 20, scope: !5254)
!5277 = !DILocation(line: 2535, column: 5, scope: !5254)
!5278 = !DILocation(line: 2542, column: 23, scope: !5189)
!5279 = !DILocation(line: 2542, column: 10, scope: !5189)
!5280 = !DILocation(line: 2542, column: 8, scope: !5189)
!5281 = !DILocation(line: 2543, column: 7, scope: !5282)
!5282 = distinct !DILexicalBlock(scope: !5189, file: !1, line: 2543, column: 7)
!5283 = !DILocation(line: 2544, column: 7, scope: !5282)
!5284 = !DILocation(line: 2544, column: 11, scope: !5282)
!5285 = !DILocation(line: 2544, column: 16, scope: !5282)
!5286 = !DILocation(line: 2545, column: 4, scope: !5282)
!5287 = !DILocation(line: 2546, column: 9, scope: !5282)
!5288 = !DILocation(line: 2546, column: 15, scope: !5282)
!5289 = !DILocation(line: 2546, column: 31, scope: !5282)
!5290 = !DILocation(line: 2546, column: 20, scope: !5282)
!5291 = !DILocation(line: 2545, column: 7, scope: !5282)
!5292 = !DILocation(line: 2543, column: 7, scope: !5189)
!5293 = !DILocation(line: 2547, column: 13, scope: !5282)
!5294 = !DILocation(line: 2547, column: 5, scope: !5282)
!5295 = !DILocation(line: 2549, column: 13, scope: !5282)
!5296 = !DILocation(line: 2550, column: 13, scope: !5189)
!5297 = !DILocation(line: 2553, column: 7, scope: !5298)
!5298 = distinct !DILexicalBlock(scope: !5189, file: !1, line: 2553, column: 7)
!5299 = !DILocation(line: 2553, column: 40, scope: !5298)
!5300 = !DILocation(line: 2553, column: 7, scope: !5189)
!5301 = !DILocation(line: 2554, column: 5, scope: !5298)
!5302 = !DILocation(line: 2556, column: 23, scope: !5189)
!5303 = !DILocation(line: 2556, column: 38, scope: !5189)
!5304 = !DILocation(line: 2556, column: 49, scope: !5189)
!5305 = !DILocation(line: 2556, column: 3, scope: !5189)
!5306 = !DILocation(line: 2557, column: 1, scope: !5189)
!5307 = distinct !DISubprogram(name: "infer_loop_bounds_from_undefined", scope: !1, file: !1, line: 2852, type: !5078, scopeLine: 2853, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!5308 = !DILocalVariable(name: "loop", arg: 1, scope: !5307, file: !1, line: 2852, type: !2201)
!5309 = !DILocation(line: 2852, column: 48, scope: !5307)
!5310 = !DILocalVariable(name: "i", scope: !5307, file: !1, line: 2854, type: !5)
!5311 = !DILocation(line: 2854, column: 12, scope: !5307)
!5312 = !DILocalVariable(name: "bbs", scope: !5307, file: !1, line: 2855, type: !3409)
!5313 = !DILocation(line: 2855, column: 16, scope: !5307)
!5314 = !DILocalVariable(name: "bsi", scope: !5307, file: !1, line: 2856, type: !3412)
!5315 = !DILocation(line: 2856, column: 24, scope: !5307)
!5316 = !DILocalVariable(name: "bb", scope: !5307, file: !1, line: 2857, type: !2472)
!5317 = !DILocation(line: 2857, column: 15, scope: !5307)
!5318 = !DILocalVariable(name: "reliable", scope: !5307, file: !1, line: 2858, type: !1775)
!5319 = !DILocation(line: 2858, column: 8, scope: !5307)
!5320 = !DILocation(line: 2860, column: 24, scope: !5307)
!5321 = !DILocation(line: 2860, column: 9, scope: !5307)
!5322 = !DILocation(line: 2860, column: 7, scope: !5307)
!5323 = !DILocation(line: 2862, column: 10, scope: !5324)
!5324 = distinct !DILexicalBlock(scope: !5307, file: !1, line: 2862, column: 3)
!5325 = !DILocation(line: 2862, column: 8, scope: !5324)
!5326 = !DILocation(line: 2862, column: 15, scope: !5327)
!5327 = distinct !DILexicalBlock(scope: !5324, file: !1, line: 2862, column: 3)
!5328 = !DILocation(line: 2862, column: 19, scope: !5327)
!5329 = !DILocation(line: 2862, column: 25, scope: !5327)
!5330 = !DILocation(line: 2862, column: 17, scope: !5327)
!5331 = !DILocation(line: 2862, column: 3, scope: !5324)
!5332 = !DILocation(line: 2864, column: 12, scope: !5333)
!5333 = distinct !DILexicalBlock(scope: !5327, file: !1, line: 2863, column: 5)
!5334 = !DILocation(line: 2864, column: 16, scope: !5333)
!5335 = !DILocation(line: 2864, column: 10, scope: !5333)
!5336 = !DILocation(line: 2869, column: 50, scope: !5333)
!5337 = !DILocation(line: 2869, column: 56, scope: !5333)
!5338 = !DILocation(line: 2869, column: 63, scope: !5333)
!5339 = !DILocation(line: 2869, column: 18, scope: !5333)
!5340 = !DILocation(line: 2869, column: 16, scope: !5333)
!5341 = !DILocation(line: 2871, column: 32, scope: !5342)
!5342 = distinct !DILexicalBlock(scope: !5333, file: !1, line: 2871, column: 7)
!5343 = !DILocation(line: 2871, column: 18, scope: !5342)
!5344 = !DILocation(line: 2871, column: 12, scope: !5342)
!5345 = !DILocation(line: 2871, column: 38, scope: !5346)
!5346 = distinct !DILexicalBlock(scope: !5342, file: !1, line: 2871, column: 7)
!5347 = !DILocation(line: 2871, column: 37, scope: !5346)
!5348 = !DILocation(line: 2871, column: 7, scope: !5342)
!5349 = !DILocalVariable(name: "stmt", scope: !5350, file: !1, line: 2873, type: !1986)
!5350 = distinct !DILexicalBlock(scope: !5346, file: !1, line: 2872, column: 2)
!5351 = !DILocation(line: 2873, column: 11, scope: !5350)
!5352 = !DILocation(line: 2873, column: 18, scope: !5350)
!5353 = !DILocation(line: 2875, column: 34, scope: !5350)
!5354 = !DILocation(line: 2875, column: 40, scope: !5350)
!5355 = !DILocation(line: 2875, column: 46, scope: !5350)
!5356 = !DILocation(line: 2875, column: 4, scope: !5350)
!5357 = !DILocation(line: 2877, column: 8, scope: !5358)
!5358 = distinct !DILexicalBlock(scope: !5350, file: !1, line: 2877, column: 8)
!5359 = !DILocation(line: 2877, column: 8, scope: !5350)
!5360 = !DILocation(line: 2878, column: 41, scope: !5358)
!5361 = !DILocation(line: 2878, column: 47, scope: !5358)
!5362 = !DILocation(line: 2878, column: 6, scope: !5358)
!5363 = !DILocation(line: 2879, column: 4, scope: !5350)
!5364 = !DILocation(line: 2871, column: 55, scope: !5346)
!5365 = !DILocation(line: 2871, column: 7, scope: !5346)
!5366 = distinct !{!5366, !5348, !5367}
!5367 = !DILocation(line: 2879, column: 4, scope: !5342)
!5368 = !DILocation(line: 2881, column: 5, scope: !5333)
!5369 = !DILocation(line: 2862, column: 37, scope: !5327)
!5370 = !DILocation(line: 2862, column: 3, scope: !5327)
!5371 = distinct !{!5371, !5331, !5372}
!5372 = !DILocation(line: 2881, column: 5, scope: !5324)
!5373 = !DILocation(line: 2883, column: 9, scope: !5307)
!5374 = !DILocation(line: 2883, column: 3, scope: !5307)
!5375 = !DILocation(line: 2884, column: 1, scope: !5307)
!5376 = distinct !DISubprogram(name: "gcov_type_to_double_int", scope: !1, file: !1, line: 2889, type: !5377, scopeLine: 2890, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!5377 = !DISubroutineType(types: !5378)
!5378 = !{!1704, !2197}
!5379 = !DILocalVariable(name: "val", arg: 1, scope: !5376, file: !1, line: 2889, type: !2197)
!5380 = !DILocation(line: 2889, column: 36, scope: !5376)
!5381 = !DILocalVariable(name: "ret", scope: !5376, file: !1, line: 2891, type: !1704)
!5382 = !DILocation(line: 2891, column: 14, scope: !5376)
!5383 = !DILocation(line: 2893, column: 38, scope: !5376)
!5384 = !DILocation(line: 2893, column: 7, scope: !5376)
!5385 = !DILocation(line: 2893, column: 11, scope: !5376)
!5386 = !DILocation(line: 2896, column: 7, scope: !5376)
!5387 = !DILocation(line: 2897, column: 7, scope: !5376)
!5388 = !DILocation(line: 2898, column: 39, scope: !5376)
!5389 = !DILocation(line: 2898, column: 7, scope: !5376)
!5390 = !DILocation(line: 2898, column: 12, scope: !5376)
!5391 = !DILocation(line: 2900, column: 3, scope: !5376)
!5392 = distinct !DISubprogram(name: "record_niter_bound", scope: !1, file: !1, line: 2470, type: !5393, scopeLine: 2472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!5393 = !DISubroutineType(types: !5394)
!5394 = !{null, !2201, !1704, !1775, !1775}
!5395 = !DILocalVariable(name: "loop", arg: 1, scope: !5392, file: !1, line: 2470, type: !2201)
!5396 = !DILocation(line: 2470, column: 34, scope: !5392)
!5397 = !DILocalVariable(name: "i_bound", arg: 2, scope: !5392, file: !1, line: 2470, type: !1704)
!5398 = !DILocation(line: 2470, column: 51, scope: !5392)
!5399 = !DILocalVariable(name: "realistic", arg: 3, scope: !5392, file: !1, line: 2470, type: !1775)
!5400 = !DILocation(line: 2470, column: 65, scope: !5392)
!5401 = !DILocalVariable(name: "upper", arg: 4, scope: !5392, file: !1, line: 2471, type: !1775)
!5402 = !DILocation(line: 2471, column: 12, scope: !5392)
!5403 = !DILocation(line: 2475, column: 7, scope: !5404)
!5404 = distinct !DILexicalBlock(scope: !5392, file: !1, line: 2475, column: 7)
!5405 = !DILocation(line: 2476, column: 7, scope: !5404)
!5406 = !DILocation(line: 2476, column: 12, scope: !5404)
!5407 = !DILocation(line: 2476, column: 18, scope: !5404)
!5408 = !DILocation(line: 2477, column: 4, scope: !5404)
!5409 = !DILocation(line: 2477, column: 33, scope: !5404)
!5410 = !DILocation(line: 2477, column: 39, scope: !5404)
!5411 = !DILocation(line: 2477, column: 7, scope: !5404)
!5412 = !DILocation(line: 2477, column: 66, scope: !5404)
!5413 = !DILocation(line: 2475, column: 7, scope: !5392)
!5414 = !DILocation(line: 2479, column: 7, scope: !5415)
!5415 = distinct !DILexicalBlock(scope: !5404, file: !1, line: 2478, column: 5)
!5416 = !DILocation(line: 2479, column: 13, scope: !5415)
!5417 = !DILocation(line: 2479, column: 29, scope: !5415)
!5418 = !DILocation(line: 2480, column: 7, scope: !5415)
!5419 = !DILocation(line: 2480, column: 13, scope: !5415)
!5420 = !DILocation(line: 2480, column: 41, scope: !5415)
!5421 = !DILocation(line: 2481, column: 5, scope: !5415)
!5422 = !DILocation(line: 2482, column: 7, scope: !5423)
!5423 = distinct !DILexicalBlock(scope: !5392, file: !1, line: 2482, column: 7)
!5424 = !DILocation(line: 2483, column: 7, scope: !5423)
!5425 = !DILocation(line: 2483, column: 12, scope: !5423)
!5426 = !DILocation(line: 2483, column: 18, scope: !5423)
!5427 = !DILocation(line: 2484, column: 4, scope: !5423)
!5428 = !DILocation(line: 2484, column: 33, scope: !5423)
!5429 = !DILocation(line: 2484, column: 39, scope: !5423)
!5430 = !DILocation(line: 2484, column: 7, scope: !5423)
!5431 = !DILocation(line: 2484, column: 63, scope: !5423)
!5432 = !DILocation(line: 2482, column: 7, scope: !5392)
!5433 = !DILocation(line: 2486, column: 7, scope: !5434)
!5434 = distinct !DILexicalBlock(scope: !5423, file: !1, line: 2485, column: 5)
!5435 = !DILocation(line: 2486, column: 13, scope: !5434)
!5436 = !DILocation(line: 2486, column: 26, scope: !5434)
!5437 = !DILocation(line: 2487, column: 7, scope: !5434)
!5438 = !DILocation(line: 2487, column: 13, scope: !5434)
!5439 = !DILocation(line: 2487, column: 38, scope: !5434)
!5440 = !DILocation(line: 2488, column: 5, scope: !5434)
!5441 = !DILocation(line: 2489, column: 1, scope: !5392)
!5442 = distinct !DISubprogram(name: "estimate_numbers_of_iterations", scope: !1, file: !1, line: 2963, type: !5443, scopeLine: 2964, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!5443 = !DISubroutineType(types: !5444)
!5444 = !{null}
!5445 = !DILocalVariable(name: "li", scope: !5442, file: !1, line: 2965, type: !5446)
!5446 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_iterator", file: !328, line: 515, baseType: !5447)
!5447 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !328, line: 508, size: 128, elements: !5448)
!5448 = !{!5449, !5450}
!5449 = !DIDerivedType(tag: DW_TAG_member, name: "to_visit", scope: !5447, file: !328, line: 511, baseType: !3055, size: 64)
!5450 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !5447, file: !328, line: 514, baseType: !5, size: 32, offset: 64)
!5451 = !DILocation(line: 2965, column: 17, scope: !5442)
!5452 = !DILocalVariable(name: "loop", scope: !5442, file: !1, line: 2966, type: !2201)
!5453 = !DILocation(line: 2966, column: 16, scope: !5442)
!5454 = !DILocation(line: 2970, column: 3, scope: !5442)
!5455 = !DILocation(line: 2972, column: 3, scope: !5456)
!5456 = distinct !DILexicalBlock(scope: !5442, file: !1, line: 2972, column: 3)
!5457 = !DILocation(line: 2972, column: 3, scope: !5458)
!5458 = distinct !DILexicalBlock(scope: !5456, file: !1, line: 2972, column: 3)
!5459 = !DILocation(line: 2974, column: 44, scope: !5460)
!5460 = distinct !DILexicalBlock(scope: !5458, file: !1, line: 2973, column: 5)
!5461 = !DILocation(line: 2974, column: 7, scope: !5460)
!5462 = !DILocation(line: 2975, column: 5, scope: !5460)
!5463 = distinct !{!5463, !5455, !5464}
!5464 = !DILocation(line: 2975, column: 5, scope: !5456)
!5465 = !DILocation(line: 2977, column: 3, scope: !5442)
!5466 = !DILocation(line: 2978, column: 1, scope: !5442)
!5467 = distinct !DISubprogram(name: "fel_init", scope: !328, file: !328, line: 535, type: !5468, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!5468 = !DISubroutineType(types: !5469)
!5469 = !{null, !5470, !5471, !5}
!5470 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5446, size: 64)
!5471 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2228, size: 64)
!5472 = !DILocalVariable(name: "li", arg: 1, scope: !5467, file: !328, line: 535, type: !5470)
!5473 = !DILocation(line: 535, column: 26, scope: !5467)
!5474 = !DILocalVariable(name: "loop", arg: 2, scope: !5467, file: !328, line: 535, type: !5471)
!5475 = !DILocation(line: 535, column: 38, scope: !5467)
!5476 = !DILocalVariable(name: "flags", arg: 3, scope: !5467, file: !328, line: 535, type: !5)
!5477 = !DILocation(line: 535, column: 53, scope: !5467)
!5478 = !DILocalVariable(name: "aloop", scope: !5467, file: !328, line: 537, type: !2201)
!5479 = !DILocation(line: 537, column: 16, scope: !5467)
!5480 = !DILocalVariable(name: "i", scope: !5467, file: !328, line: 538, type: !5)
!5481 = !DILocation(line: 538, column: 12, scope: !5467)
!5482 = !DILocalVariable(name: "mn", scope: !5467, file: !328, line: 539, type: !1752)
!5483 = !DILocation(line: 539, column: 7, scope: !5467)
!5484 = !DILocation(line: 541, column: 3, scope: !5467)
!5485 = !DILocation(line: 541, column: 7, scope: !5467)
!5486 = !DILocation(line: 541, column: 11, scope: !5467)
!5487 = !DILocation(line: 542, column: 8, scope: !5488)
!5488 = distinct !DILexicalBlock(scope: !5467, file: !328, line: 542, column: 7)
!5489 = !DILocation(line: 542, column: 7, scope: !5467)
!5490 = !DILocation(line: 544, column: 7, scope: !5491)
!5491 = distinct !DILexicalBlock(scope: !5488, file: !328, line: 543, column: 5)
!5492 = !DILocation(line: 544, column: 11, scope: !5491)
!5493 = !DILocation(line: 544, column: 20, scope: !5491)
!5494 = !DILocation(line: 545, column: 8, scope: !5491)
!5495 = !DILocation(line: 545, column: 13, scope: !5491)
!5496 = !DILocation(line: 546, column: 7, scope: !5491)
!5497 = !DILocation(line: 549, column: 18, scope: !5467)
!5498 = !DILocation(line: 549, column: 3, scope: !5467)
!5499 = !DILocation(line: 549, column: 7, scope: !5467)
!5500 = !DILocation(line: 549, column: 16, scope: !5467)
!5501 = !DILocation(line: 550, column: 9, scope: !5467)
!5502 = !DILocation(line: 550, column: 15, scope: !5467)
!5503 = !DILocation(line: 550, column: 8, scope: !5467)
!5504 = !DILocation(line: 550, column: 6, scope: !5467)
!5505 = !DILocation(line: 552, column: 7, scope: !5506)
!5506 = distinct !DILexicalBlock(scope: !5467, file: !328, line: 552, column: 7)
!5507 = !DILocation(line: 552, column: 13, scope: !5506)
!5508 = !DILocation(line: 552, column: 7, scope: !5467)
!5509 = !DILocation(line: 554, column: 14, scope: !5510)
!5510 = distinct !DILexicalBlock(scope: !5511, file: !328, line: 554, column: 7)
!5511 = distinct !DILexicalBlock(scope: !5506, file: !328, line: 553, column: 5)
!5512 = !DILocation(line: 554, column: 12, scope: !5510)
!5513 = !DILocation(line: 554, column: 19, scope: !5514)
!5514 = distinct !DILexicalBlock(scope: !5510, file: !328, line: 554, column: 7)
!5515 = !DILocation(line: 554, column: 7, scope: !5510)
!5516 = !DILocation(line: 555, column: 6, scope: !5517)
!5517 = distinct !DILexicalBlock(scope: !5514, file: !328, line: 555, column: 6)
!5518 = !DILocation(line: 555, column: 12, scope: !5517)
!5519 = !DILocation(line: 556, column: 6, scope: !5517)
!5520 = !DILocation(line: 556, column: 9, scope: !5517)
!5521 = !DILocation(line: 556, column: 16, scope: !5517)
!5522 = !DILocation(line: 556, column: 22, scope: !5517)
!5523 = !DILocation(line: 557, column: 6, scope: !5517)
!5524 = !DILocation(line: 557, column: 9, scope: !5517)
!5525 = !DILocation(line: 557, column: 16, scope: !5517)
!5526 = !DILocation(line: 557, column: 23, scope: !5517)
!5527 = !DILocation(line: 557, column: 20, scope: !5517)
!5528 = !DILocation(line: 555, column: 6, scope: !5514)
!5529 = !DILocation(line: 558, column: 4, scope: !5517)
!5530 = !DILocation(line: 554, column: 75, scope: !5514)
!5531 = !DILocation(line: 554, column: 7, scope: !5514)
!5532 = distinct !{!5532, !5515, !5533}
!5533 = !DILocation(line: 558, column: 4, scope: !5510)
!5534 = !DILocation(line: 559, column: 5, scope: !5511)
!5535 = !DILocation(line: 560, column: 12, scope: !5536)
!5536 = distinct !DILexicalBlock(scope: !5506, file: !328, line: 560, column: 12)
!5537 = !DILocation(line: 560, column: 18, scope: !5536)
!5538 = !DILocation(line: 560, column: 12, scope: !5506)
!5539 = !DILocation(line: 563, column: 20, scope: !5540)
!5540 = distinct !DILexicalBlock(scope: !5541, file: !328, line: 563, column: 7)
!5541 = distinct !DILexicalBlock(scope: !5536, file: !328, line: 561, column: 5)
!5542 = !DILocation(line: 563, column: 35, scope: !5540)
!5543 = !DILocation(line: 563, column: 18, scope: !5540)
!5544 = !DILocation(line: 563, column: 12, scope: !5540)
!5545 = !DILocation(line: 564, column: 5, scope: !5546)
!5546 = distinct !DILexicalBlock(scope: !5540, file: !328, line: 563, column: 7)
!5547 = !DILocation(line: 564, column: 12, scope: !5546)
!5548 = !DILocation(line: 564, column: 18, scope: !5546)
!5549 = !DILocation(line: 563, column: 7, scope: !5540)
!5550 = !DILocation(line: 566, column: 2, scope: !5546)
!5551 = !DILocation(line: 565, column: 13, scope: !5546)
!5552 = !DILocation(line: 565, column: 20, scope: !5546)
!5553 = !DILocation(line: 565, column: 11, scope: !5546)
!5554 = !DILocation(line: 563, column: 7, scope: !5546)
!5555 = distinct !{!5555, !5549, !5556}
!5556 = !DILocation(line: 566, column: 2, scope: !5540)
!5557 = !DILocation(line: 568, column: 7, scope: !5541)
!5558 = !DILocation(line: 570, column: 8, scope: !5559)
!5559 = distinct !DILexicalBlock(scope: !5560, file: !328, line: 570, column: 8)
!5560 = distinct !DILexicalBlock(scope: !5541, file: !328, line: 569, column: 2)
!5561 = !DILocation(line: 570, column: 15, scope: !5559)
!5562 = !DILocation(line: 570, column: 22, scope: !5559)
!5563 = !DILocation(line: 570, column: 19, scope: !5559)
!5564 = !DILocation(line: 570, column: 8, scope: !5560)
!5565 = !DILocation(line: 571, column: 6, scope: !5559)
!5566 = !DILocation(line: 573, column: 8, scope: !5567)
!5567 = distinct !DILexicalBlock(scope: !5560, file: !328, line: 573, column: 8)
!5568 = !DILocation(line: 573, column: 15, scope: !5567)
!5569 = !DILocation(line: 573, column: 8, scope: !5560)
!5570 = !DILocation(line: 575, column: 21, scope: !5571)
!5571 = distinct !DILexicalBlock(scope: !5572, file: !328, line: 575, column: 8)
!5572 = distinct !DILexicalBlock(scope: !5567, file: !328, line: 574, column: 6)
!5573 = !DILocation(line: 575, column: 28, scope: !5571)
!5574 = !DILocation(line: 575, column: 19, scope: !5571)
!5575 = !DILocation(line: 575, column: 13, scope: !5571)
!5576 = !DILocation(line: 576, column: 6, scope: !5577)
!5577 = distinct !DILexicalBlock(scope: !5571, file: !328, line: 575, column: 8)
!5578 = !DILocation(line: 576, column: 13, scope: !5577)
!5579 = !DILocation(line: 576, column: 19, scope: !5577)
!5580 = !DILocation(line: 575, column: 8, scope: !5571)
!5581 = !DILocation(line: 578, column: 3, scope: !5577)
!5582 = !DILocation(line: 577, column: 14, scope: !5577)
!5583 = !DILocation(line: 577, column: 21, scope: !5577)
!5584 = !DILocation(line: 577, column: 12, scope: !5577)
!5585 = !DILocation(line: 575, column: 8, scope: !5577)
!5586 = distinct !{!5586, !5580, !5587}
!5587 = !DILocation(line: 578, column: 3, scope: !5571)
!5588 = !DILocation(line: 579, column: 6, scope: !5572)
!5589 = !DILocation(line: 580, column: 26, scope: !5590)
!5590 = distinct !DILexicalBlock(scope: !5567, file: !328, line: 580, column: 13)
!5591 = !DILocation(line: 580, column: 14, scope: !5590)
!5592 = !DILocation(line: 580, column: 13, scope: !5567)
!5593 = !DILocation(line: 581, column: 6, scope: !5590)
!5594 = !DILocation(line: 583, column: 26, scope: !5590)
!5595 = !DILocation(line: 583, column: 14, scope: !5590)
!5596 = !DILocation(line: 583, column: 12, scope: !5590)
!5597 = distinct !{!5597, !5557, !5598}
!5598 = !DILocation(line: 584, column: 2, scope: !5541)
!5599 = !DILocation(line: 585, column: 5, scope: !5541)
!5600 = !DILocation(line: 589, column: 15, scope: !5601)
!5601 = distinct !DILexicalBlock(scope: !5536, file: !328, line: 587, column: 5)
!5602 = !DILocation(line: 589, column: 30, scope: !5601)
!5603 = !DILocation(line: 589, column: 13, scope: !5601)
!5604 = !DILocation(line: 590, column: 7, scope: !5601)
!5605 = !DILocation(line: 592, column: 8, scope: !5606)
!5606 = distinct !DILexicalBlock(scope: !5607, file: !328, line: 592, column: 8)
!5607 = distinct !DILexicalBlock(scope: !5601, file: !328, line: 591, column: 2)
!5608 = !DILocation(line: 592, column: 15, scope: !5606)
!5609 = !DILocation(line: 592, column: 22, scope: !5606)
!5610 = !DILocation(line: 592, column: 19, scope: !5606)
!5611 = !DILocation(line: 592, column: 8, scope: !5607)
!5612 = !DILocation(line: 593, column: 6, scope: !5606)
!5613 = !DILocation(line: 595, column: 8, scope: !5614)
!5614 = distinct !DILexicalBlock(scope: !5607, file: !328, line: 595, column: 8)
!5615 = !DILocation(line: 595, column: 15, scope: !5614)
!5616 = !DILocation(line: 595, column: 21, scope: !5614)
!5617 = !DILocation(line: 595, column: 8, scope: !5607)
!5618 = !DILocation(line: 596, column: 14, scope: !5614)
!5619 = !DILocation(line: 596, column: 21, scope: !5614)
!5620 = !DILocation(line: 596, column: 12, scope: !5614)
!5621 = !DILocation(line: 596, column: 6, scope: !5614)
!5622 = !DILocation(line: 599, column: 8, scope: !5623)
!5623 = distinct !DILexicalBlock(scope: !5614, file: !328, line: 598, column: 6)
!5624 = !DILocation(line: 599, column: 15, scope: !5623)
!5625 = !DILocation(line: 599, column: 21, scope: !5623)
!5626 = !DILocation(line: 599, column: 29, scope: !5623)
!5627 = !DILocation(line: 599, column: 32, scope: !5623)
!5628 = !DILocation(line: 599, column: 39, scope: !5623)
!5629 = !DILocation(line: 599, column: 44, scope: !5623)
!5630 = !DILocation(line: 0, scope: !5623)
!5631 = !DILocation(line: 600, column: 23, scope: !5623)
!5632 = !DILocation(line: 600, column: 11, scope: !5623)
!5633 = !DILocation(line: 600, column: 9, scope: !5623)
!5634 = distinct !{!5634, !5622, !5635}
!5635 = !DILocation(line: 600, column: 28, scope: !5623)
!5636 = !DILocation(line: 601, column: 12, scope: !5637)
!5637 = distinct !DILexicalBlock(scope: !5623, file: !328, line: 601, column: 12)
!5638 = !DILocation(line: 601, column: 18, scope: !5637)
!5639 = !DILocation(line: 601, column: 12, scope: !5623)
!5640 = !DILocation(line: 602, column: 3, scope: !5637)
!5641 = !DILocation(line: 603, column: 16, scope: !5623)
!5642 = !DILocation(line: 603, column: 23, scope: !5623)
!5643 = !DILocation(line: 603, column: 14, scope: !5623)
!5644 = distinct !{!5644, !5604, !5645}
!5645 = !DILocation(line: 605, column: 2, scope: !5601)
!5646 = !DILocation(line: 608, column: 13, scope: !5467)
!5647 = !DILocation(line: 608, column: 17, scope: !5467)
!5648 = !DILocation(line: 608, column: 3, scope: !5467)
!5649 = !DILocation(line: 609, column: 1, scope: !5467)
!5650 = distinct !DISubprogram(name: "fel_next", scope: !328, file: !328, line: 518, type: !5651, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!5651 = !DISubroutineType(types: !5652)
!5652 = !{null, !5470, !5471}
!5653 = !DILocalVariable(name: "li", arg: 1, scope: !5650, file: !328, line: 518, type: !5470)
!5654 = !DILocation(line: 518, column: 26, scope: !5650)
!5655 = !DILocalVariable(name: "loop", arg: 2, scope: !5650, file: !328, line: 518, type: !5471)
!5656 = !DILocation(line: 518, column: 38, scope: !5650)
!5657 = !DILocalVariable(name: "anum", scope: !5650, file: !328, line: 520, type: !1752)
!5658 = !DILocation(line: 520, column: 7, scope: !5650)
!5659 = !DILocation(line: 522, column: 3, scope: !5650)
!5660 = !DILocation(line: 522, column: 10, scope: !5650)
!5661 = !DILocation(line: 524, column: 7, scope: !5662)
!5662 = distinct !DILexicalBlock(scope: !5650, file: !328, line: 523, column: 5)
!5663 = !DILocation(line: 524, column: 11, scope: !5662)
!5664 = !DILocation(line: 524, column: 14, scope: !5662)
!5665 = !DILocation(line: 525, column: 25, scope: !5662)
!5666 = !DILocation(line: 525, column: 15, scope: !5662)
!5667 = !DILocation(line: 525, column: 8, scope: !5662)
!5668 = !DILocation(line: 525, column: 13, scope: !5662)
!5669 = !DILocation(line: 526, column: 12, scope: !5670)
!5670 = distinct !DILexicalBlock(scope: !5662, file: !328, line: 526, column: 11)
!5671 = !DILocation(line: 526, column: 11, scope: !5670)
!5672 = !DILocation(line: 526, column: 11, scope: !5662)
!5673 = !DILocation(line: 527, column: 2, scope: !5670)
!5674 = distinct !{!5674, !5659, !5675}
!5675 = !DILocation(line: 528, column: 5, scope: !5650)
!5676 = !DILocation(line: 530, column: 3, scope: !5650)
!5677 = !DILocation(line: 531, column: 4, scope: !5650)
!5678 = !DILocation(line: 531, column: 9, scope: !5650)
!5679 = !DILocation(line: 532, column: 1, scope: !5650)
!5680 = distinct !DISubprogram(name: "stmt_dominates_stmt_p", scope: !1, file: !1, line: 2983, type: !5681, scopeLine: 2984, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!5681 = !DISubroutineType(types: !5682)
!5682 = !{!1775, !1986, !1986}
!5683 = !DILocalVariable(name: "s1", arg: 1, scope: !5680, file: !1, line: 2983, type: !1986)
!5684 = !DILocation(line: 2983, column: 31, scope: !5680)
!5685 = !DILocalVariable(name: "s2", arg: 2, scope: !5680, file: !1, line: 2983, type: !1986)
!5686 = !DILocation(line: 2983, column: 42, scope: !5680)
!5687 = !DILocalVariable(name: "bb1", scope: !5680, file: !1, line: 2985, type: !2472)
!5688 = !DILocation(line: 2985, column: 15, scope: !5680)
!5689 = !DILocation(line: 2985, column: 32, scope: !5680)
!5690 = !DILocation(line: 2985, column: 21, scope: !5680)
!5691 = !DILocalVariable(name: "bb2", scope: !5680, file: !1, line: 2985, type: !2472)
!5692 = !DILocation(line: 2985, column: 37, scope: !5680)
!5693 = !DILocation(line: 2985, column: 54, scope: !5680)
!5694 = !DILocation(line: 2985, column: 43, scope: !5680)
!5695 = !DILocation(line: 2987, column: 8, scope: !5696)
!5696 = distinct !DILexicalBlock(scope: !5680, file: !1, line: 2987, column: 7)
!5697 = !DILocation(line: 2988, column: 7, scope: !5696)
!5698 = !DILocation(line: 2988, column: 10, scope: !5696)
!5699 = !DILocation(line: 2988, column: 16, scope: !5696)
!5700 = !DILocation(line: 2988, column: 13, scope: !5696)
!5701 = !DILocation(line: 2987, column: 7, scope: !5680)
!5702 = !DILocation(line: 2989, column: 5, scope: !5696)
!5703 = !DILocation(line: 2991, column: 7, scope: !5704)
!5704 = distinct !DILexicalBlock(scope: !5680, file: !1, line: 2991, column: 7)
!5705 = !DILocation(line: 2991, column: 14, scope: !5704)
!5706 = !DILocation(line: 2991, column: 11, scope: !5704)
!5707 = !DILocation(line: 2991, column: 7, scope: !5680)
!5708 = !DILocalVariable(name: "bsi", scope: !5709, file: !1, line: 2993, type: !3412)
!5709 = distinct !DILexicalBlock(scope: !5704, file: !1, line: 2992, column: 5)
!5710 = !DILocation(line: 2993, column: 28, scope: !5709)
!5711 = !DILocation(line: 2995, column: 24, scope: !5712)
!5712 = distinct !DILexicalBlock(scope: !5709, file: !1, line: 2995, column: 11)
!5713 = !DILocation(line: 2995, column: 11, scope: !5712)
!5714 = !DILocation(line: 2995, column: 28, scope: !5712)
!5715 = !DILocation(line: 2995, column: 11, scope: !5709)
!5716 = !DILocation(line: 2996, column: 2, scope: !5712)
!5717 = !DILocation(line: 2998, column: 24, scope: !5718)
!5718 = distinct !DILexicalBlock(scope: !5709, file: !1, line: 2998, column: 11)
!5719 = !DILocation(line: 2998, column: 11, scope: !5718)
!5720 = !DILocation(line: 2998, column: 28, scope: !5718)
!5721 = !DILocation(line: 2998, column: 11, scope: !5709)
!5722 = !DILocation(line: 2999, column: 2, scope: !5718)
!5723 = !DILocation(line: 3001, column: 32, scope: !5724)
!5724 = distinct !DILexicalBlock(scope: !5709, file: !1, line: 3001, column: 7)
!5725 = !DILocation(line: 3001, column: 18, scope: !5724)
!5726 = !DILocation(line: 3001, column: 12, scope: !5724)
!5727 = !DILocation(line: 3001, column: 38, scope: !5728)
!5728 = distinct !DILexicalBlock(scope: !5724, file: !1, line: 3001, column: 7)
!5729 = !DILocation(line: 3001, column: 56, scope: !5728)
!5730 = !DILocation(line: 3001, column: 53, scope: !5728)
!5731 = !DILocation(line: 3001, column: 7, scope: !5724)
!5732 = !DILocation(line: 3002, column: 6, scope: !5733)
!5733 = distinct !DILexicalBlock(scope: !5728, file: !1, line: 3002, column: 6)
!5734 = !DILocation(line: 3002, column: 24, scope: !5733)
!5735 = !DILocation(line: 3002, column: 21, scope: !5733)
!5736 = !DILocation(line: 3002, column: 6, scope: !5728)
!5737 = !DILocation(line: 3003, column: 4, scope: !5733)
!5738 = !DILocation(line: 3001, column: 60, scope: !5728)
!5739 = !DILocation(line: 3001, column: 7, scope: !5728)
!5740 = distinct !{!5740, !5731, !5741}
!5741 = !DILocation(line: 3003, column: 11, scope: !5724)
!5742 = !DILocation(line: 3005, column: 7, scope: !5709)
!5743 = !DILocation(line: 3008, column: 42, scope: !5680)
!5744 = !DILocation(line: 3008, column: 47, scope: !5680)
!5745 = !DILocation(line: 3008, column: 10, scope: !5680)
!5746 = !DILocation(line: 3008, column: 3, scope: !5680)
!5747 = !DILocation(line: 3009, column: 1, scope: !5680)
!5748 = distinct !DISubprogram(name: "nowrap_type_p", scope: !1, file: !1, line: 3078, type: !5013, scopeLine: 3079, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!5749 = !DILocalVariable(name: "type", arg: 1, scope: !5748, file: !1, line: 3078, type: !1655)
!5750 = !DILocation(line: 3078, column: 21, scope: !5748)
!5751 = !DILocation(line: 3080, column: 7, scope: !5752)
!5752 = distinct !DILexicalBlock(scope: !5748, file: !1, line: 3080, column: 7)
!5753 = !DILocation(line: 3081, column: 7, scope: !5752)
!5754 = !DILocation(line: 3081, column: 10, scope: !5752)
!5755 = !DILocation(line: 3080, column: 7, scope: !5748)
!5756 = !DILocation(line: 3082, column: 5, scope: !5752)
!5757 = !DILocation(line: 3084, column: 7, scope: !5758)
!5758 = distinct !DILexicalBlock(scope: !5748, file: !1, line: 3084, column: 7)
!5759 = !DILocation(line: 3084, column: 7, scope: !5748)
!5760 = !DILocation(line: 3085, column: 5, scope: !5758)
!5761 = !DILocation(line: 3087, column: 3, scope: !5748)
!5762 = !DILocation(line: 3088, column: 1, scope: !5748)
!5763 = distinct !DISubprogram(name: "scev_probably_wraps_p", scope: !1, file: !1, line: 3101, type: !5764, scopeLine: 3104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!5764 = !DISubroutineType(types: !5765)
!5765 = !{!1775, !1655, !1655, !1986, !2201, !1775}
!5766 = !DILocalVariable(name: "base", arg: 1, scope: !5763, file: !1, line: 3101, type: !1655)
!5767 = !DILocation(line: 3101, column: 29, scope: !5763)
!5768 = !DILocalVariable(name: "step", arg: 2, scope: !5763, file: !1, line: 3101, type: !1655)
!5769 = !DILocation(line: 3101, column: 40, scope: !5763)
!5770 = !DILocalVariable(name: "at_stmt", arg: 3, scope: !5763, file: !1, line: 3102, type: !1986)
!5771 = !DILocation(line: 3102, column: 17, scope: !5763)
!5772 = !DILocalVariable(name: "loop", arg: 4, scope: !5763, file: !1, line: 3102, type: !2201)
!5773 = !DILocation(line: 3102, column: 39, scope: !5763)
!5774 = !DILocalVariable(name: "use_overflow_semantics", arg: 5, scope: !5763, file: !1, line: 3103, type: !1775)
!5775 = !DILocation(line: 3103, column: 15, scope: !5763)
!5776 = !DILocalVariable(name: "bound", scope: !5763, file: !1, line: 3105, type: !2239)
!5777 = !DILocation(line: 3105, column: 25, scope: !5763)
!5778 = !DILocalVariable(name: "delta", scope: !5763, file: !1, line: 3106, type: !1655)
!5779 = !DILocation(line: 3106, column: 8, scope: !5763)
!5780 = !DILocalVariable(name: "step_abs", scope: !5763, file: !1, line: 3106, type: !1655)
!5781 = !DILocation(line: 3106, column: 15, scope: !5763)
!5782 = !DILocalVariable(name: "unsigned_type", scope: !5763, file: !1, line: 3107, type: !1655)
!5783 = !DILocation(line: 3107, column: 8, scope: !5763)
!5784 = !DILocalVariable(name: "valid_niter", scope: !5763, file: !1, line: 3107, type: !1655)
!5785 = !DILocation(line: 3107, column: 23, scope: !5763)
!5786 = !DILocalVariable(name: "type", scope: !5763, file: !1, line: 3108, type: !1655)
!5787 = !DILocation(line: 3108, column: 8, scope: !5763)
!5788 = !DILocation(line: 3108, column: 15, scope: !5763)
!5789 = !DILocation(line: 3126, column: 36, scope: !5790)
!5790 = distinct !DILexicalBlock(scope: !5763, file: !1, line: 3126, column: 7)
!5791 = !DILocation(line: 3126, column: 7, scope: !5790)
!5792 = !DILocation(line: 3127, column: 7, scope: !5790)
!5793 = !DILocation(line: 3127, column: 39, scope: !5790)
!5794 = !DILocation(line: 3127, column: 10, scope: !5790)
!5795 = !DILocation(line: 3126, column: 7, scope: !5763)
!5796 = !DILocation(line: 3128, column: 5, scope: !5790)
!5797 = !DILocation(line: 3130, column: 22, scope: !5798)
!5798 = distinct !DILexicalBlock(scope: !5763, file: !1, line: 3130, column: 7)
!5799 = !DILocation(line: 3130, column: 7, scope: !5798)
!5800 = !DILocation(line: 3130, column: 7, scope: !5763)
!5801 = !DILocation(line: 3131, column: 5, scope: !5798)
!5802 = !DILocation(line: 3135, column: 7, scope: !5803)
!5803 = distinct !DILexicalBlock(scope: !5763, file: !1, line: 3135, column: 7)
!5804 = !DILocation(line: 3135, column: 30, scope: !5803)
!5805 = !DILocation(line: 3135, column: 48, scope: !5803)
!5806 = !DILocation(line: 3135, column: 33, scope: !5803)
!5807 = !DILocation(line: 3135, column: 7, scope: !5763)
!5808 = !DILocation(line: 3136, column: 5, scope: !5803)
!5809 = !DILocation(line: 3140, column: 7, scope: !5810)
!5810 = distinct !DILexicalBlock(scope: !5763, file: !1, line: 3140, column: 7)
!5811 = !DILocation(line: 3140, column: 24, scope: !5810)
!5812 = !DILocation(line: 3140, column: 7, scope: !5763)
!5813 = !DILocation(line: 3141, column: 5, scope: !5810)
!5814 = !DILocation(line: 3144, column: 3, scope: !5763)
!5815 = !DILocation(line: 3149, column: 38, scope: !5763)
!5816 = !DILocation(line: 3149, column: 19, scope: !5763)
!5817 = !DILocation(line: 3149, column: 17, scope: !5763)
!5818 = !DILocation(line: 3150, column: 10, scope: !5763)
!5819 = !DILocation(line: 3150, column: 8, scope: !5763)
!5820 = !DILocation(line: 3152, column: 30, scope: !5821)
!5821 = distinct !DILexicalBlock(scope: !5763, file: !1, line: 3152, column: 7)
!5822 = !DILocation(line: 3152, column: 7, scope: !5821)
!5823 = !DILocation(line: 3152, column: 7, scope: !5763)
!5824 = !DILocalVariable(name: "extreme", scope: !5825, file: !1, line: 3154, type: !1655)
!5825 = distinct !DILexicalBlock(scope: !5821, file: !1, line: 3153, column: 5)
!5826 = !DILocation(line: 3154, column: 12, scope: !5825)
!5827 = !DILocation(line: 3154, column: 22, scope: !5825)
!5828 = !DILocation(line: 3156, column: 15, scope: !5825)
!5829 = !DILocation(line: 3156, column: 13, scope: !5825)
!5830 = !DILocation(line: 3157, column: 18, scope: !5825)
!5831 = !DILocation(line: 3157, column: 16, scope: !5825)
!5832 = !DILocation(line: 3159, column: 5, scope: !5825)
!5833 = !DILocalVariable(name: "extreme", scope: !5834, file: !1, line: 3162, type: !1655)
!5834 = distinct !DILexicalBlock(scope: !5821, file: !1, line: 3161, column: 5)
!5835 = !DILocation(line: 3162, column: 12, scope: !5834)
!5836 = !DILocation(line: 3162, column: 22, scope: !5834)
!5837 = !DILocation(line: 3164, column: 15, scope: !5834)
!5838 = !DILocation(line: 3164, column: 13, scope: !5834)
!5839 = !DILocation(line: 3165, column: 18, scope: !5834)
!5840 = !DILocation(line: 3165, column: 16, scope: !5834)
!5841 = !DILocation(line: 3168, column: 17, scope: !5763)
!5842 = !DILocation(line: 3168, column: 15, scope: !5763)
!5843 = !DILocation(line: 3170, column: 40, scope: !5763)
!5844 = !DILocation(line: 3170, column: 3, scope: !5763)
!5845 = !DILocation(line: 3171, column: 16, scope: !5846)
!5846 = distinct !DILexicalBlock(scope: !5763, file: !1, line: 3171, column: 3)
!5847 = !DILocation(line: 3171, column: 22, scope: !5846)
!5848 = !DILocation(line: 3171, column: 14, scope: !5846)
!5849 = !DILocation(line: 3171, column: 8, scope: !5846)
!5850 = !DILocation(line: 3171, column: 30, scope: !5851)
!5851 = distinct !DILexicalBlock(scope: !5846, file: !1, line: 3171, column: 3)
!5852 = !DILocation(line: 3171, column: 3, scope: !5846)
!5853 = !DILocation(line: 3173, column: 36, scope: !5854)
!5854 = distinct !DILexicalBlock(scope: !5855, file: !1, line: 3173, column: 11)
!5855 = distinct !DILexicalBlock(scope: !5851, file: !1, line: 3172, column: 5)
!5856 = !DILocation(line: 3173, column: 45, scope: !5854)
!5857 = !DILocation(line: 3173, column: 52, scope: !5854)
!5858 = !DILocation(line: 3173, column: 11, scope: !5854)
!5859 = !DILocation(line: 3173, column: 11, scope: !5855)
!5860 = !DILocation(line: 3175, column: 4, scope: !5861)
!5861 = distinct !DILexicalBlock(scope: !5854, file: !1, line: 3174, column: 2)
!5862 = !DILocation(line: 3176, column: 4, scope: !5861)
!5863 = !DILocation(line: 3178, column: 5, scope: !5855)
!5864 = !DILocation(line: 3171, column: 45, scope: !5851)
!5865 = !DILocation(line: 3171, column: 52, scope: !5851)
!5866 = !DILocation(line: 3171, column: 43, scope: !5851)
!5867 = !DILocation(line: 3171, column: 3, scope: !5851)
!5868 = distinct !{!5868, !5852, !5869}
!5869 = !DILocation(line: 3178, column: 5, scope: !5846)
!5870 = !DILocation(line: 3180, column: 3, scope: !5763)
!5871 = !DILocation(line: 3184, column: 3, scope: !5763)
!5872 = !DILocation(line: 3185, column: 1, scope: !5763)
!5873 = distinct !DISubprogram(name: "n_of_executions_at_most", scope: !1, file: !1, line: 3018, type: !5874, scopeLine: 3021, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!5874 = !DISubroutineType(types: !5875)
!5875 = !{!1775, !1986, !2239, !1655}
!5876 = !DILocalVariable(name: "stmt", arg: 1, scope: !5873, file: !1, line: 3018, type: !1986)
!5877 = !DILocation(line: 3018, column: 33, scope: !5873)
!5878 = !DILocalVariable(name: "niter_bound", arg: 2, scope: !5873, file: !1, line: 3019, type: !2239)
!5879 = !DILocation(line: 3019, column: 27, scope: !5873)
!5880 = !DILocalVariable(name: "niter", arg: 3, scope: !5873, file: !1, line: 3020, type: !1655)
!5881 = !DILocation(line: 3020, column: 10, scope: !5873)
!5882 = !DILocalVariable(name: "bound", scope: !5873, file: !1, line: 3022, type: !1704)
!5883 = !DILocation(line: 3022, column: 14, scope: !5873)
!5884 = !DILocation(line: 3022, column: 22, scope: !5873)
!5885 = !DILocation(line: 3022, column: 35, scope: !5873)
!5886 = !DILocalVariable(name: "nit_type", scope: !5873, file: !1, line: 3023, type: !1655)
!5887 = !DILocation(line: 3023, column: 8, scope: !5873)
!5888 = !DILocation(line: 3023, column: 19, scope: !5873)
!5889 = !DILocalVariable(name: "e", scope: !5873, file: !1, line: 3023, type: !1655)
!5890 = !DILocation(line: 3023, column: 38, scope: !5873)
!5891 = !DILocalVariable(name: "cmp", scope: !5873, file: !1, line: 3024, type: !132)
!5892 = !DILocation(line: 3024, column: 18, scope: !5873)
!5893 = !DILocation(line: 3026, column: 3, scope: !5873)
!5894 = !DILocation(line: 3030, column: 35, scope: !5895)
!5895 = distinct !DILexicalBlock(scope: !5873, file: !1, line: 3030, column: 7)
!5896 = !DILocation(line: 3030, column: 8, scope: !5895)
!5897 = !DILocation(line: 3030, column: 7, scope: !5873)
!5898 = !DILocation(line: 3031, column: 5, scope: !5895)
!5899 = !DILocation(line: 3047, column: 7, scope: !5900)
!5900 = distinct !DILexicalBlock(scope: !5873, file: !1, line: 3047, column: 7)
!5901 = !DILocation(line: 3047, column: 20, scope: !5900)
!5902 = !DILocation(line: 3047, column: 7, scope: !5873)
!5903 = !DILocation(line: 3049, column: 11, scope: !5904)
!5904 = distinct !DILexicalBlock(scope: !5905, file: !1, line: 3049, column: 11)
!5905 = distinct !DILexicalBlock(scope: !5900, file: !1, line: 3048, column: 5)
!5906 = !DILocation(line: 3050, column: 4, scope: !5904)
!5907 = !DILocation(line: 3050, column: 7, scope: !5904)
!5908 = !DILocation(line: 3050, column: 15, scope: !5904)
!5909 = !DILocation(line: 3050, column: 28, scope: !5904)
!5910 = !DILocation(line: 3050, column: 12, scope: !5904)
!5911 = !DILocation(line: 3051, column: 4, scope: !5904)
!5912 = !DILocation(line: 3051, column: 30, scope: !5904)
!5913 = !DILocation(line: 3051, column: 43, scope: !5904)
!5914 = !DILocation(line: 3051, column: 49, scope: !5904)
!5915 = !DILocation(line: 3051, column: 7, scope: !5904)
!5916 = !DILocation(line: 3049, column: 11, scope: !5905)
!5917 = !DILocation(line: 3052, column: 6, scope: !5904)
!5918 = !DILocation(line: 3052, column: 2, scope: !5904)
!5919 = !DILocation(line: 3054, column: 6, scope: !5904)
!5920 = !DILocation(line: 3055, column: 5, scope: !5905)
!5921 = !DILocation(line: 3058, column: 12, scope: !5922)
!5922 = distinct !DILexicalBlock(scope: !5923, file: !1, line: 3058, column: 11)
!5923 = distinct !DILexicalBlock(scope: !5900, file: !1, line: 3057, column: 5)
!5924 = !DILocation(line: 3059, column: 4, scope: !5922)
!5925 = !DILocation(line: 3059, column: 19, scope: !5922)
!5926 = !DILocation(line: 3059, column: 8, scope: !5922)
!5927 = !DILocation(line: 3059, column: 39, scope: !5922)
!5928 = !DILocation(line: 3059, column: 52, scope: !5922)
!5929 = !DILocation(line: 3059, column: 28, scope: !5922)
!5930 = !DILocation(line: 3059, column: 25, scope: !5922)
!5931 = !DILocation(line: 3060, column: 8, scope: !5922)
!5932 = !DILocation(line: 3060, column: 35, scope: !5922)
!5933 = !DILocation(line: 3060, column: 48, scope: !5922)
!5934 = !DILocation(line: 3060, column: 54, scope: !5922)
!5935 = !DILocation(line: 3060, column: 12, scope: !5922)
!5936 = !DILocation(line: 3058, column: 11, scope: !5923)
!5937 = !DILocation(line: 3062, column: 35, scope: !5938)
!5938 = distinct !DILexicalBlock(scope: !5922, file: !1, line: 3061, column: 2)
!5939 = !DILocation(line: 3062, column: 12, scope: !5938)
!5940 = !DILocation(line: 3063, column: 8, scope: !5941)
!5941 = distinct !DILexicalBlock(scope: !5938, file: !1, line: 3063, column: 8)
!5942 = !DILocation(line: 3064, column: 8, scope: !5941)
!5943 = !DILocation(line: 3064, column: 39, scope: !5941)
!5944 = !DILocation(line: 3064, column: 12, scope: !5941)
!5945 = !DILocation(line: 3063, column: 8, scope: !5938)
!5946 = !DILocation(line: 3065, column: 6, scope: !5941)
!5947 = !DILocation(line: 3066, column: 2, scope: !5938)
!5948 = !DILocation(line: 3067, column: 11, scope: !5923)
!5949 = !DILocation(line: 3070, column: 7, scope: !5873)
!5950 = !DILocation(line: 3070, column: 5, scope: !5873)
!5951 = !DILocation(line: 3072, column: 10, scope: !5873)
!5952 = !DILocation(line: 3072, column: 12, scope: !5873)
!5953 = !DILocation(line: 3072, column: 33, scope: !5873)
!5954 = !DILocation(line: 3072, column: 15, scope: !5873)
!5955 = !DILocation(line: 0, scope: !5873)
!5956 = !DILocation(line: 3072, column: 3, scope: !5873)
!5957 = !DILocation(line: 3073, column: 1, scope: !5873)
!5958 = distinct !DISubprogram(name: "free_numbers_of_iterations_estimates_loop", scope: !1, file: !1, line: 3190, type: !5078, scopeLine: 3191, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!5959 = !DILocalVariable(name: "loop", arg: 1, scope: !5958, file: !1, line: 3190, type: !2201)
!5960 = !DILocation(line: 3190, column: 57, scope: !5958)
!5961 = !DILocalVariable(name: "bound", scope: !5958, file: !1, line: 3192, type: !2239)
!5962 = !DILocation(line: 3192, column: 25, scope: !5958)
!5963 = !DILocalVariable(name: "next", scope: !5958, file: !1, line: 3192, type: !2239)
!5964 = !DILocation(line: 3192, column: 33, scope: !5958)
!5965 = !DILocation(line: 3194, column: 3, scope: !5958)
!5966 = !DILocation(line: 3194, column: 9, scope: !5958)
!5967 = !DILocation(line: 3194, column: 23, scope: !5958)
!5968 = !DILocation(line: 3195, column: 3, scope: !5958)
!5969 = !DILocation(line: 3195, column: 9, scope: !5958)
!5970 = !DILocation(line: 3195, column: 24, scope: !5958)
!5971 = !DILocation(line: 3196, column: 16, scope: !5972)
!5972 = distinct !DILexicalBlock(scope: !5958, file: !1, line: 3196, column: 3)
!5973 = !DILocation(line: 3196, column: 22, scope: !5972)
!5974 = !DILocation(line: 3196, column: 14, scope: !5972)
!5975 = !DILocation(line: 3196, column: 8, scope: !5972)
!5976 = !DILocation(line: 3196, column: 30, scope: !5977)
!5977 = distinct !DILexicalBlock(scope: !5972, file: !1, line: 3196, column: 3)
!5978 = !DILocation(line: 3196, column: 3, scope: !5972)
!5979 = !DILocation(line: 3198, column: 14, scope: !5980)
!5980 = distinct !DILexicalBlock(scope: !5977, file: !1, line: 3197, column: 5)
!5981 = !DILocation(line: 3198, column: 21, scope: !5980)
!5982 = !DILocation(line: 3198, column: 12, scope: !5980)
!5983 = !DILocation(line: 3199, column: 17, scope: !5980)
!5984 = !DILocation(line: 3199, column: 7, scope: !5980)
!5985 = !DILocation(line: 3200, column: 5, scope: !5980)
!5986 = !DILocation(line: 3196, column: 45, scope: !5977)
!5987 = !DILocation(line: 3196, column: 43, scope: !5977)
!5988 = !DILocation(line: 3196, column: 3, scope: !5977)
!5989 = distinct !{!5989, !5978, !5990}
!5990 = !DILocation(line: 3200, column: 5, scope: !5972)
!5991 = !DILocation(line: 3202, column: 3, scope: !5958)
!5992 = !DILocation(line: 3202, column: 9, scope: !5958)
!5993 = !DILocation(line: 3202, column: 16, scope: !5958)
!5994 = !DILocation(line: 3203, column: 1, scope: !5958)
!5995 = distinct !DISubprogram(name: "free_numbers_of_iterations_estimates", scope: !1, file: !1, line: 3208, type: !5443, scopeLine: 3209, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!5996 = !DILocalVariable(name: "li", scope: !5995, file: !1, line: 3210, type: !5446)
!5997 = !DILocation(line: 3210, column: 17, scope: !5995)
!5998 = !DILocalVariable(name: "loop", scope: !5995, file: !1, line: 3211, type: !2201)
!5999 = !DILocation(line: 3211, column: 16, scope: !5995)
!6000 = !DILocation(line: 3213, column: 3, scope: !6001)
!6001 = distinct !DILexicalBlock(scope: !5995, file: !1, line: 3213, column: 3)
!6002 = !DILocation(line: 3213, column: 3, scope: !6003)
!6003 = distinct !DILexicalBlock(scope: !6001, file: !1, line: 3213, column: 3)
!6004 = !DILocation(line: 3215, column: 50, scope: !6005)
!6005 = distinct !DILexicalBlock(scope: !6003, file: !1, line: 3214, column: 5)
!6006 = !DILocation(line: 3215, column: 7, scope: !6005)
!6007 = !DILocation(line: 3216, column: 5, scope: !6005)
!6008 = distinct !{!6008, !6000, !6009}
!6009 = !DILocation(line: 3216, column: 5, scope: !6001)
!6010 = !DILocation(line: 3217, column: 1, scope: !5995)
!6011 = distinct !DISubprogram(name: "substitute_in_loop_info", scope: !1, file: !1, line: 3223, type: !6012, scopeLine: 3224, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6012 = !DISubroutineType(types: !6013)
!6013 = !{null, !2201, !1655, !1655}
!6014 = !DILocalVariable(name: "loop", arg: 1, scope: !6011, file: !1, line: 3223, type: !2201)
!6015 = !DILocation(line: 3223, column: 39, scope: !6011)
!6016 = !DILocalVariable(name: "name", arg: 2, scope: !6011, file: !1, line: 3223, type: !1655)
!6017 = !DILocation(line: 3223, column: 50, scope: !6011)
!6018 = !DILocalVariable(name: "val", arg: 3, scope: !6011, file: !1, line: 3223, type: !1655)
!6019 = !DILocation(line: 3223, column: 61, scope: !6011)
!6020 = !DILocation(line: 3225, column: 48, scope: !6011)
!6021 = !DILocation(line: 3225, column: 54, scope: !6011)
!6022 = !DILocation(line: 3225, column: 69, scope: !6011)
!6023 = !DILocation(line: 3225, column: 75, scope: !6011)
!6024 = !DILocation(line: 3225, column: 25, scope: !6011)
!6025 = !DILocation(line: 3225, column: 3, scope: !6011)
!6026 = !DILocation(line: 3225, column: 9, scope: !6011)
!6027 = !DILocation(line: 3225, column: 23, scope: !6011)
!6028 = !DILocation(line: 3226, column: 1, scope: !6011)
!6029 = distinct !DISubprogram(name: "simplify_replace_tree", scope: !1, file: !1, line: 1370, type: !6030, scopeLine: 1371, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6030 = !DISubroutineType(types: !6031)
!6031 = !{!1655, !1655, !1655, !1655}
!6032 = !DILocalVariable(name: "expr", arg: 1, scope: !6029, file: !1, line: 1370, type: !1655)
!6033 = !DILocation(line: 1370, column: 29, scope: !6029)
!6034 = !DILocalVariable(name: "old", arg: 2, scope: !6029, file: !1, line: 1370, type: !1655)
!6035 = !DILocation(line: 1370, column: 40, scope: !6029)
!6036 = !DILocalVariable(name: "new_tree", arg: 3, scope: !6029, file: !1, line: 1370, type: !1655)
!6037 = !DILocation(line: 1370, column: 50, scope: !6029)
!6038 = !DILocalVariable(name: "i", scope: !6029, file: !1, line: 1372, type: !5)
!6039 = !DILocation(line: 1372, column: 12, scope: !6029)
!6040 = !DILocalVariable(name: "n", scope: !6029, file: !1, line: 1372, type: !5)
!6041 = !DILocation(line: 1372, column: 15, scope: !6029)
!6042 = !DILocalVariable(name: "ret", scope: !6029, file: !1, line: 1373, type: !1655)
!6043 = !DILocation(line: 1373, column: 8, scope: !6029)
!6044 = !DILocalVariable(name: "e", scope: !6029, file: !1, line: 1373, type: !1655)
!6045 = !DILocation(line: 1373, column: 25, scope: !6029)
!6046 = !DILocalVariable(name: "se", scope: !6029, file: !1, line: 1373, type: !1655)
!6047 = !DILocation(line: 1373, column: 28, scope: !6029)
!6048 = !DILocation(line: 1375, column: 8, scope: !6049)
!6049 = distinct !DILexicalBlock(scope: !6029, file: !1, line: 1375, column: 7)
!6050 = !DILocation(line: 1375, column: 7, scope: !6029)
!6051 = !DILocation(line: 1376, column: 5, scope: !6049)
!6052 = !DILocation(line: 1378, column: 7, scope: !6053)
!6053 = distinct !DILexicalBlock(scope: !6029, file: !1, line: 1378, column: 7)
!6054 = !DILocation(line: 1378, column: 15, scope: !6053)
!6055 = !DILocation(line: 1378, column: 12, scope: !6053)
!6056 = !DILocation(line: 1379, column: 7, scope: !6053)
!6057 = !DILocation(line: 1379, column: 27, scope: !6053)
!6058 = !DILocation(line: 1379, column: 33, scope: !6053)
!6059 = !DILocation(line: 1379, column: 10, scope: !6053)
!6060 = !DILocation(line: 1378, column: 7, scope: !6029)
!6061 = !DILocation(line: 1380, column: 26, scope: !6053)
!6062 = !DILocation(line: 1380, column: 12, scope: !6053)
!6063 = !DILocation(line: 1380, column: 5, scope: !6053)
!6064 = !DILocation(line: 1382, column: 8, scope: !6065)
!6065 = distinct !DILexicalBlock(scope: !6029, file: !1, line: 1382, column: 7)
!6066 = !DILocation(line: 1382, column: 7, scope: !6029)
!6067 = !DILocation(line: 1383, column: 12, scope: !6065)
!6068 = !DILocation(line: 1383, column: 5, scope: !6065)
!6069 = !DILocation(line: 1385, column: 7, scope: !6029)
!6070 = !DILocation(line: 1385, column: 5, scope: !6029)
!6071 = !DILocation(line: 1386, column: 10, scope: !6072)
!6072 = distinct !DILexicalBlock(scope: !6029, file: !1, line: 1386, column: 3)
!6073 = !DILocation(line: 1386, column: 8, scope: !6072)
!6074 = !DILocation(line: 1386, column: 15, scope: !6075)
!6075 = distinct !DILexicalBlock(scope: !6072, file: !1, line: 1386, column: 3)
!6076 = !DILocation(line: 1386, column: 19, scope: !6075)
!6077 = !DILocation(line: 1386, column: 17, scope: !6075)
!6078 = !DILocation(line: 1386, column: 3, scope: !6072)
!6079 = !DILocation(line: 1388, column: 11, scope: !6080)
!6080 = distinct !DILexicalBlock(scope: !6075, file: !1, line: 1387, column: 5)
!6081 = !DILocation(line: 1388, column: 9, scope: !6080)
!6082 = !DILocation(line: 1389, column: 35, scope: !6080)
!6083 = !DILocation(line: 1389, column: 38, scope: !6080)
!6084 = !DILocation(line: 1389, column: 43, scope: !6080)
!6085 = !DILocation(line: 1389, column: 12, scope: !6080)
!6086 = !DILocation(line: 1389, column: 10, scope: !6080)
!6087 = !DILocation(line: 1390, column: 11, scope: !6088)
!6088 = distinct !DILexicalBlock(scope: !6080, file: !1, line: 1390, column: 11)
!6089 = !DILocation(line: 1390, column: 16, scope: !6088)
!6090 = !DILocation(line: 1390, column: 13, scope: !6088)
!6091 = !DILocation(line: 1390, column: 11, scope: !6080)
!6092 = !DILocation(line: 1391, column: 2, scope: !6088)
!6093 = !DILocation(line: 1393, column: 12, scope: !6094)
!6094 = distinct !DILexicalBlock(scope: !6080, file: !1, line: 1393, column: 11)
!6095 = !DILocation(line: 1393, column: 11, scope: !6080)
!6096 = !DILocation(line: 1394, column: 8, scope: !6094)
!6097 = !DILocation(line: 1394, column: 6, scope: !6094)
!6098 = !DILocation(line: 1394, column: 2, scope: !6094)
!6099 = !DILocation(line: 1396, column: 31, scope: !6080)
!6100 = !DILocation(line: 1396, column: 7, scope: !6080)
!6101 = !DILocation(line: 1396, column: 29, scope: !6080)
!6102 = !DILocation(line: 1397, column: 5, scope: !6080)
!6103 = !DILocation(line: 1386, column: 23, scope: !6075)
!6104 = !DILocation(line: 1386, column: 3, scope: !6075)
!6105 = distinct !{!6105, !6078, !6106}
!6106 = !DILocation(line: 1397, column: 5, scope: !6072)
!6107 = !DILocation(line: 1399, column: 11, scope: !6029)
!6108 = !DILocation(line: 1399, column: 23, scope: !6029)
!6109 = !DILocation(line: 1399, column: 17, scope: !6029)
!6110 = !DILocation(line: 1399, column: 30, scope: !6029)
!6111 = !DILocation(line: 1399, column: 3, scope: !6029)
!6112 = !DILocation(line: 1400, column: 1, scope: !6029)
!6113 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !402, file: !402, line: 3100, type: !6114, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6114 = !DISubroutineType(types: !6115)
!6115 = !{!6116, !1986, !5}
!6116 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2089, size: 64)
!6117 = !DILocalVariable(name: "gs", arg: 1, scope: !6113, file: !402, line: 3100, type: !1986)
!6118 = !DILocation(line: 3100, column: 24, scope: !6113)
!6119 = !DILocalVariable(name: "index", arg: 2, scope: !6113, file: !402, line: 3100, type: !5)
!6120 = !DILocation(line: 3100, column: 37, scope: !6113)
!6121 = !DILocation(line: 3103, column: 3, scope: !6113)
!6122 = !DILocation(line: 3104, column: 12, scope: !6113)
!6123 = !DILocation(line: 3104, column: 16, scope: !6113)
!6124 = !DILocation(line: 3104, column: 27, scope: !6113)
!6125 = !DILocation(line: 3104, column: 32, scope: !6113)
!6126 = !DILocation(line: 3104, column: 3, scope: !6113)
!6127 = distinct !DISubprogram(name: "single_pred_edge", scope: !341, file: !341, line: 653, type: !6128, scopeLine: 654, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6128 = !DISubroutineType(types: !6129)
!6129 = !{!1966, !3337}
!6130 = !DILocalVariable(name: "bb", arg: 1, scope: !6127, file: !341, line: 653, type: !3337)
!6131 = !DILocation(line: 653, column: 37, scope: !6127)
!6132 = !DILocation(line: 655, column: 3, scope: !6127)
!6133 = !DILocation(line: 656, column: 10, scope: !6127)
!6134 = !DILocation(line: 656, column: 3, scope: !6127)
!6135 = distinct !DISubprogram(name: "single_pred_p", scope: !341, file: !341, line: 634, type: !6136, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6136 = !DISubroutineType(types: !6137)
!6137 = !{!1775, !3337}
!6138 = !DILocalVariable(name: "bb", arg: 1, scope: !6135, file: !341, line: 634, type: !3337)
!6139 = !DILocation(line: 634, column: 34, scope: !6135)
!6140 = !DILocation(line: 636, column: 10, scope: !6135)
!6141 = !DILocation(line: 636, column: 33, scope: !6135)
!6142 = !DILocation(line: 636, column: 3, scope: !6135)
!6143 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !341, file: !341, line: 150, type: !6144, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6144 = !DISubroutineType(types: !6145)
!6145 = !{!1966, !4480, !5}
!6146 = !DILocalVariable(name: "vec_", arg: 1, scope: !6143, file: !341, line: 150, type: !4480)
!6147 = !DILocation(line: 150, column: 1, scope: !6143)
!6148 = !DILocalVariable(name: "ix_", arg: 2, scope: !6143, file: !341, line: 150, type: !5)
!6149 = !DILocation(line: 0, scope: !6143)
!6150 = distinct !DISubprogram(name: "gimple_op", scope: !402, file: !402, line: 1631, type: !6151, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6151 = !DISubroutineType(types: !6152)
!6152 = !{!1655, !3284, !5}
!6153 = !DILocalVariable(name: "gs", arg: 1, scope: !6150, file: !402, line: 1631, type: !3284)
!6154 = !DILocation(line: 1631, column: 25, scope: !6150)
!6155 = !DILocalVariable(name: "i", arg: 2, scope: !6150, file: !402, line: 1631, type: !5)
!6156 = !DILocation(line: 1631, column: 38, scope: !6150)
!6157 = !DILocation(line: 1633, column: 23, scope: !6158)
!6158 = distinct !DILexicalBlock(scope: !6150, file: !402, line: 1633, column: 7)
!6159 = !DILocation(line: 1633, column: 7, scope: !6158)
!6160 = !DILocation(line: 1633, column: 7, scope: !6150)
!6161 = !DILocation(line: 1638, column: 26, scope: !6162)
!6162 = distinct !DILexicalBlock(scope: !6158, file: !402, line: 1634, column: 5)
!6163 = !DILocation(line: 1638, column: 14, scope: !6162)
!6164 = !DILocation(line: 1638, column: 50, scope: !6162)
!6165 = !DILocation(line: 1638, column: 7, scope: !6162)
!6166 = !DILocation(line: 1641, column: 5, scope: !6158)
!6167 = !DILocation(line: 1642, column: 1, scope: !6150)
!6168 = distinct !DISubprogram(name: "gimple_has_ops", scope: !402, file: !402, line: 1274, type: !6169, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6169 = !DISubroutineType(types: !6170)
!6170 = !{!1775, !3284}
!6171 = !DILocalVariable(name: "g", arg: 1, scope: !6168, file: !402, line: 1274, type: !3284)
!6172 = !DILocation(line: 1274, column: 30, scope: !6168)
!6173 = !DILocation(line: 1276, column: 23, scope: !6168)
!6174 = !DILocation(line: 1276, column: 10, scope: !6168)
!6175 = !DILocation(line: 1276, column: 26, scope: !6168)
!6176 = !DILocation(line: 1276, column: 41, scope: !6168)
!6177 = !DILocation(line: 1276, column: 57, scope: !6168)
!6178 = !DILocation(line: 1276, column: 44, scope: !6168)
!6179 = !DILocation(line: 1276, column: 60, scope: !6168)
!6180 = !DILocation(line: 0, scope: !6168)
!6181 = !DILocation(line: 1276, column: 3, scope: !6168)
!6182 = distinct !DISubprogram(name: "gimple_ops", scope: !402, file: !402, line: 1614, type: !6183, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6183 = !DISubroutineType(types: !6184)
!6184 = !{!2020, !1986}
!6185 = !DILocalVariable(name: "gs", arg: 1, scope: !6182, file: !402, line: 1614, type: !1986)
!6186 = !DILocation(line: 1614, column: 20, scope: !6182)
!6187 = !DILocalVariable(name: "off", scope: !6182, file: !402, line: 1616, type: !2131)
!6188 = !DILocation(line: 1616, column: 10, scope: !6182)
!6189 = !DILocation(line: 1621, column: 56, scope: !6182)
!6190 = !DILocation(line: 1621, column: 28, scope: !6182)
!6191 = !DILocation(line: 1621, column: 9, scope: !6182)
!6192 = !DILocation(line: 1621, column: 7, scope: !6182)
!6193 = !DILocation(line: 1622, column: 3, scope: !6182)
!6194 = !DILocation(line: 1624, column: 29, scope: !6182)
!6195 = !DILocation(line: 1624, column: 20, scope: !6182)
!6196 = !DILocation(line: 1624, column: 34, scope: !6182)
!6197 = !DILocation(line: 1624, column: 32, scope: !6182)
!6198 = !DILocation(line: 1624, column: 10, scope: !6182)
!6199 = !DILocation(line: 1624, column: 3, scope: !6182)
!6200 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !402, file: !402, line: 1073, type: !6201, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6201 = !DISubroutineType(types: !6202)
!6202 = !{!1595, !1986}
!6203 = !DILocalVariable(name: "gs", arg: 1, scope: !6200, file: !402, line: 1073, type: !1986)
!6204 = !DILocation(line: 1073, column: 36, scope: !6200)
!6205 = !DILocation(line: 1075, column: 37, scope: !6200)
!6206 = !DILocation(line: 1075, column: 24, scope: !6200)
!6207 = !DILocation(line: 1075, column: 10, scope: !6200)
!6208 = !DILocation(line: 1075, column: 3, scope: !6200)
!6209 = distinct !DISubprogram(name: "gss_for_code", scope: !402, file: !402, line: 1061, type: !6210, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6210 = !DISubroutineType(types: !6211)
!6211 = !{!1595, !401}
!6212 = !DILocalVariable(name: "code", arg: 1, scope: !6209, file: !402, line: 1061, type: !401)
!6213 = !DILocation(line: 1061, column: 32, scope: !6209)
!6214 = !DILocation(line: 1066, column: 24, scope: !6209)
!6215 = !DILocation(line: 1066, column: 10, scope: !6209)
!6216 = !DILocation(line: 1066, column: 3, scope: !6209)
!6217 = distinct !DISubprogram(name: "gimple_expr_code", scope: !402, file: !402, line: 1438, type: !3355, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6218 = !DILocalVariable(name: "stmt", arg: 1, scope: !6217, file: !402, line: 1438, type: !3284)
!6219 = !DILocation(line: 1438, column: 32, scope: !6217)
!6220 = !DILocalVariable(name: "code", scope: !6217, file: !402, line: 1440, type: !401)
!6221 = !DILocation(line: 1440, column: 20, scope: !6217)
!6222 = !DILocation(line: 1440, column: 40, scope: !6217)
!6223 = !DILocation(line: 1440, column: 27, scope: !6217)
!6224 = !DILocation(line: 1441, column: 7, scope: !6225)
!6225 = distinct !DILexicalBlock(scope: !6217, file: !402, line: 1441, column: 7)
!6226 = !DILocation(line: 1441, column: 12, scope: !6225)
!6227 = !DILocation(line: 1441, column: 29, scope: !6225)
!6228 = !DILocation(line: 1441, column: 32, scope: !6225)
!6229 = !DILocation(line: 1441, column: 37, scope: !6225)
!6230 = !DILocation(line: 1441, column: 7, scope: !6217)
!6231 = !DILocation(line: 1442, column: 29, scope: !6225)
!6232 = !DILocation(line: 1442, column: 35, scope: !6225)
!6233 = !DILocation(line: 1442, column: 42, scope: !6225)
!6234 = !DILocation(line: 1442, column: 5, scope: !6225)
!6235 = !DILocation(line: 1443, column: 12, scope: !6236)
!6236 = distinct !DILexicalBlock(scope: !6225, file: !402, line: 1443, column: 12)
!6237 = !DILocation(line: 1443, column: 17, scope: !6236)
!6238 = !DILocation(line: 1443, column: 12, scope: !6225)
!6239 = !DILocation(line: 1444, column: 5, scope: !6236)
!6240 = !DILocation(line: 1446, column: 5, scope: !6236)
!6241 = !DILocation(line: 1448, column: 5, scope: !6217)
!6242 = !DILocation(line: 1450, column: 1, scope: !6217)
!6243 = distinct !DISubprogram(name: "gimple_num_ops", scope: !402, file: !402, line: 1596, type: !3292, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6244 = !DILocalVariable(name: "gs", arg: 1, scope: !6243, file: !402, line: 1596, type: !3284)
!6245 = !DILocation(line: 1596, column: 30, scope: !6243)
!6246 = !DILocation(line: 1598, column: 10, scope: !6243)
!6247 = !DILocation(line: 1598, column: 14, scope: !6243)
!6248 = !DILocation(line: 1598, column: 21, scope: !6243)
!6249 = !DILocation(line: 1598, column: 3, scope: !6243)
!6250 = distinct !DISubprogram(name: "bb_seq", scope: !402, file: !402, line: 237, type: !6251, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6251 = !DISubroutineType(types: !6252)
!6252 = !{!1976, !3337}
!6253 = !DILocalVariable(name: "bb", arg: 1, scope: !6250, file: !402, line: 237, type: !3337)
!6254 = !DILocation(line: 237, column: 27, scope: !6250)
!6255 = !DILocation(line: 239, column: 13, scope: !6250)
!6256 = !DILocation(line: 239, column: 17, scope: !6250)
!6257 = !DILocation(line: 239, column: 23, scope: !6250)
!6258 = !DILocation(line: 239, column: 33, scope: !6250)
!6259 = !DILocation(line: 239, column: 36, scope: !6250)
!6260 = !DILocation(line: 239, column: 40, scope: !6250)
!6261 = !DILocation(line: 239, column: 43, scope: !6250)
!6262 = !DILocation(line: 239, column: 10, scope: !6250)
!6263 = !DILocation(line: 239, column: 53, scope: !6250)
!6264 = !DILocation(line: 239, column: 57, scope: !6250)
!6265 = !DILocation(line: 239, column: 60, scope: !6250)
!6266 = !DILocation(line: 239, column: 68, scope: !6250)
!6267 = !DILocation(line: 239, column: 3, scope: !6250)
!6268 = distinct !DISubprogram(name: "gimple_seq_first", scope: !402, file: !402, line: 159, type: !6269, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6269 = !DISubroutineType(types: !6270)
!6270 = !{!1981, !6271}
!6271 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1656, line: 67, baseType: !6272)
!6272 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6273, size: 64)
!6273 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1978)
!6274 = !DILocalVariable(name: "s", arg: 1, scope: !6268, file: !402, line: 159, type: !6271)
!6275 = !DILocation(line: 159, column: 36, scope: !6268)
!6276 = !DILocation(line: 161, column: 10, scope: !6268)
!6277 = !DILocation(line: 161, column: 14, scope: !6268)
!6278 = !DILocation(line: 161, column: 17, scope: !6268)
!6279 = !DILocation(line: 161, column: 3, scope: !6268)
!6280 = distinct !DISubprogram(name: "shwi_to_double_int", scope: !1705, file: !1705, line: 72, type: !6281, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6281 = !DISubroutineType(types: !6282)
!6282 = !{!1704, !1711}
!6283 = !DILocalVariable(name: "cst", arg: 1, scope: !6280, file: !1705, line: 72, type: !1711)
!6284 = !DILocation(line: 72, column: 35, scope: !6280)
!6285 = !DILocalVariable(name: "r", scope: !6280, file: !1705, line: 74, type: !1704)
!6286 = !DILocation(line: 74, column: 14, scope: !6280)
!6287 = !DILocation(line: 76, column: 36, scope: !6280)
!6288 = !DILocation(line: 76, column: 5, scope: !6280)
!6289 = !DILocation(line: 76, column: 9, scope: !6280)
!6290 = !DILocation(line: 77, column: 12, scope: !6280)
!6291 = !DILocation(line: 77, column: 16, scope: !6280)
!6292 = !DILocation(line: 77, column: 5, scope: !6280)
!6293 = !DILocation(line: 77, column: 10, scope: !6280)
!6294 = !DILocation(line: 79, column: 3, scope: !6280)
!6295 = distinct !DISubprogram(name: "bound_difference", scope: !1, file: !1, line: 364, type: !6296, scopeLine: 365, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6296 = !DISubroutineType(types: !6297)
!6297 = !{null, !2201, !1655, !1655, !6298}
!6298 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3835, size: 64)
!6299 = !DILocalVariable(name: "loop", arg: 1, scope: !6295, file: !1, line: 364, type: !2201)
!6300 = !DILocation(line: 364, column: 32, scope: !6295)
!6301 = !DILocalVariable(name: "x", arg: 2, scope: !6295, file: !1, line: 364, type: !1655)
!6302 = !DILocation(line: 364, column: 43, scope: !6295)
!6303 = !DILocalVariable(name: "y", arg: 3, scope: !6295, file: !1, line: 364, type: !1655)
!6304 = !DILocation(line: 364, column: 51, scope: !6295)
!6305 = !DILocalVariable(name: "bnds", arg: 4, scope: !6295, file: !1, line: 364, type: !6298)
!6306 = !DILocation(line: 364, column: 62, scope: !6295)
!6307 = !DILocalVariable(name: "type", scope: !6295, file: !1, line: 366, type: !1655)
!6308 = !DILocation(line: 366, column: 8, scope: !6295)
!6309 = !DILocation(line: 366, column: 15, scope: !6295)
!6310 = !DILocalVariable(name: "varx", scope: !6295, file: !1, line: 367, type: !1655)
!6311 = !DILocation(line: 367, column: 8, scope: !6295)
!6312 = !DILocalVariable(name: "vary", scope: !6295, file: !1, line: 367, type: !1655)
!6313 = !DILocation(line: 367, column: 14, scope: !6295)
!6314 = !DILocalVariable(name: "offx", scope: !6295, file: !1, line: 368, type: !3839)
!6315 = !DILocation(line: 368, column: 9, scope: !6295)
!6316 = !DILocalVariable(name: "offy", scope: !6295, file: !1, line: 368, type: !3839)
!6317 = !DILocation(line: 368, column: 15, scope: !6295)
!6318 = !DILocalVariable(name: "minx", scope: !6295, file: !1, line: 369, type: !3839)
!6319 = !DILocation(line: 369, column: 9, scope: !6295)
!6320 = !DILocalVariable(name: "maxx", scope: !6295, file: !1, line: 369, type: !3839)
!6321 = !DILocation(line: 369, column: 15, scope: !6295)
!6322 = !DILocalVariable(name: "miny", scope: !6295, file: !1, line: 369, type: !3839)
!6323 = !DILocation(line: 369, column: 21, scope: !6295)
!6324 = !DILocalVariable(name: "maxy", scope: !6295, file: !1, line: 369, type: !3839)
!6325 = !DILocation(line: 369, column: 27, scope: !6295)
!6326 = !DILocalVariable(name: "cnt", scope: !6295, file: !1, line: 370, type: !1752)
!6327 = !DILocation(line: 370, column: 7, scope: !6295)
!6328 = !DILocalVariable(name: "e", scope: !6295, file: !1, line: 371, type: !1966)
!6329 = !DILocation(line: 371, column: 8, scope: !6295)
!6330 = !DILocalVariable(name: "bb", scope: !6295, file: !1, line: 372, type: !2472)
!6331 = !DILocation(line: 372, column: 15, scope: !6295)
!6332 = !DILocalVariable(name: "c0", scope: !6295, file: !1, line: 373, type: !1655)
!6333 = !DILocation(line: 373, column: 8, scope: !6295)
!6334 = !DILocalVariable(name: "c1", scope: !6295, file: !1, line: 373, type: !1655)
!6335 = !DILocation(line: 373, column: 12, scope: !6295)
!6336 = !DILocalVariable(name: "cond", scope: !6295, file: !1, line: 374, type: !1986)
!6337 = !DILocation(line: 374, column: 10, scope: !6295)
!6338 = !DILocalVariable(name: "cmp", scope: !6295, file: !1, line: 375, type: !132)
!6339 = !DILocation(line: 375, column: 18, scope: !6295)
!6340 = !DILocation(line: 379, column: 3, scope: !6295)
!6341 = !DILocation(line: 380, column: 3, scope: !6295)
!6342 = !DILocation(line: 382, column: 13, scope: !6295)
!6343 = !DILocation(line: 382, column: 19, scope: !6295)
!6344 = !DILocation(line: 382, column: 3, scope: !6295)
!6345 = !DILocation(line: 383, column: 13, scope: !6295)
!6346 = !DILocation(line: 383, column: 19, scope: !6295)
!6347 = !DILocation(line: 383, column: 3, scope: !6295)
!6348 = !DILocation(line: 384, column: 13, scope: !6295)
!6349 = !DILocation(line: 384, column: 3, scope: !6295)
!6350 = !DILocation(line: 385, column: 13, scope: !6295)
!6351 = !DILocation(line: 385, column: 3, scope: !6295)
!6352 = !DILocation(line: 386, column: 28, scope: !6295)
!6353 = !DILocation(line: 386, column: 38, scope: !6295)
!6354 = !DILocation(line: 386, column: 3, scope: !6295)
!6355 = !DILocation(line: 387, column: 28, scope: !6295)
!6356 = !DILocation(line: 387, column: 38, scope: !6295)
!6357 = !DILocation(line: 387, column: 3, scope: !6295)
!6358 = !DILocation(line: 389, column: 23, scope: !6359)
!6359 = distinct !DILexicalBlock(scope: !6295, file: !1, line: 389, column: 7)
!6360 = !DILocation(line: 389, column: 8, scope: !6359)
!6361 = !DILocation(line: 390, column: 7, scope: !6359)
!6362 = !DILocation(line: 390, column: 27, scope: !6359)
!6363 = !DILocation(line: 390, column: 33, scope: !6359)
!6364 = !DILocation(line: 390, column: 10, scope: !6359)
!6365 = !DILocation(line: 389, column: 7, scope: !6295)
!6366 = !DILocation(line: 395, column: 43, scope: !6367)
!6367 = distinct !DILexicalBlock(scope: !6359, file: !1, line: 391, column: 5)
!6368 = !DILocation(line: 395, column: 49, scope: !6367)
!6369 = !DILocation(line: 395, column: 55, scope: !6367)
!6370 = !DILocation(line: 395, column: 61, scope: !6367)
!6371 = !DILocation(line: 395, column: 7, scope: !6367)
!6372 = !DILocation(line: 396, column: 5, scope: !6367)
!6373 = !DILocation(line: 401, column: 17, scope: !6374)
!6374 = distinct !DILexicalBlock(scope: !6359, file: !1, line: 398, column: 5)
!6375 = !DILocation(line: 401, column: 7, scope: !6374)
!6376 = !DILocation(line: 402, column: 17, scope: !6374)
!6377 = !DILocation(line: 402, column: 7, scope: !6374)
!6378 = !DILocation(line: 403, column: 17, scope: !6374)
!6379 = !DILocation(line: 403, column: 7, scope: !6374)
!6380 = !DILocation(line: 404, column: 17, scope: !6374)
!6381 = !DILocation(line: 404, column: 7, scope: !6374)
!6382 = !DILocation(line: 405, column: 30, scope: !6374)
!6383 = !DILocation(line: 405, column: 36, scope: !6374)
!6384 = !DILocation(line: 405, column: 42, scope: !6374)
!6385 = !DILocation(line: 405, column: 48, scope: !6374)
!6386 = !DILocation(line: 405, column: 54, scope: !6374)
!6387 = !DILocation(line: 405, column: 7, scope: !6374)
!6388 = !DILocation(line: 406, column: 30, scope: !6374)
!6389 = !DILocation(line: 406, column: 36, scope: !6374)
!6390 = !DILocation(line: 406, column: 42, scope: !6374)
!6391 = !DILocation(line: 406, column: 48, scope: !6374)
!6392 = !DILocation(line: 406, column: 54, scope: !6374)
!6393 = !DILocation(line: 406, column: 7, scope: !6374)
!6394 = !DILocation(line: 408, column: 16, scope: !6374)
!6395 = !DILocation(line: 408, column: 22, scope: !6374)
!6396 = !DILocation(line: 408, column: 29, scope: !6374)
!6397 = !DILocation(line: 408, column: 35, scope: !6374)
!6398 = !DILocation(line: 408, column: 7, scope: !6374)
!6399 = !DILocation(line: 409, column: 16, scope: !6374)
!6400 = !DILocation(line: 409, column: 22, scope: !6374)
!6401 = !DILocation(line: 409, column: 26, scope: !6374)
!6402 = !DILocation(line: 409, column: 32, scope: !6374)
!6403 = !DILocation(line: 409, column: 7, scope: !6374)
!6404 = !DILocation(line: 410, column: 18, scope: !6374)
!6405 = !DILocation(line: 410, column: 7, scope: !6374)
!6406 = !DILocation(line: 411, column: 18, scope: !6374)
!6407 = !DILocation(line: 411, column: 7, scope: !6374)
!6408 = !DILocation(line: 412, column: 18, scope: !6374)
!6409 = !DILocation(line: 412, column: 7, scope: !6374)
!6410 = !DILocation(line: 413, column: 18, scope: !6374)
!6411 = !DILocation(line: 413, column: 7, scope: !6374)
!6412 = !DILocation(line: 417, column: 22, scope: !6413)
!6413 = distinct !DILexicalBlock(scope: !6295, file: !1, line: 417, column: 7)
!6414 = !DILocation(line: 417, column: 7, scope: !6413)
!6415 = !DILocation(line: 417, column: 28, scope: !6413)
!6416 = !DILocation(line: 417, column: 46, scope: !6413)
!6417 = !DILocation(line: 417, column: 31, scope: !6413)
!6418 = !DILocation(line: 417, column: 7, scope: !6295)
!6419 = !DILocation(line: 418, column: 5, scope: !6413)
!6420 = !DILocation(line: 422, column: 13, scope: !6421)
!6421 = distinct !DILexicalBlock(scope: !6295, file: !1, line: 422, column: 3)
!6422 = !DILocation(line: 422, column: 19, scope: !6421)
!6423 = !DILocation(line: 422, column: 11, scope: !6421)
!6424 = !DILocation(line: 422, column: 8, scope: !6421)
!6425 = !DILocation(line: 423, column: 8, scope: !6426)
!6426 = distinct !DILexicalBlock(scope: !6421, file: !1, line: 422, column: 3)
!6427 = !DILocation(line: 423, column: 14, scope: !6426)
!6428 = !DILocation(line: 423, column: 11, scope: !6426)
!6429 = !DILocation(line: 423, column: 30, scope: !6426)
!6430 = !DILocation(line: 423, column: 33, scope: !6426)
!6431 = !DILocation(line: 423, column: 37, scope: !6426)
!6432 = !DILocation(line: 0, scope: !6426)
!6433 = !DILocation(line: 422, column: 3, scope: !6421)
!6434 = !DILocation(line: 426, column: 27, scope: !6435)
!6435 = distinct !DILexicalBlock(scope: !6436, file: !1, line: 426, column: 11)
!6436 = distinct !DILexicalBlock(scope: !6426, file: !1, line: 425, column: 5)
!6437 = !DILocation(line: 426, column: 12, scope: !6435)
!6438 = !DILocation(line: 426, column: 11, scope: !6436)
!6439 = !DILocation(line: 427, column: 2, scope: !6435)
!6440 = !DILocation(line: 428, column: 29, scope: !6436)
!6441 = !DILocation(line: 428, column: 11, scope: !6436)
!6442 = !DILocation(line: 428, column: 9, scope: !6436)
!6443 = !DILocation(line: 430, column: 13, scope: !6444)
!6444 = distinct !DILexicalBlock(scope: !6436, file: !1, line: 430, column: 11)
!6445 = !DILocation(line: 430, column: 16, scope: !6444)
!6446 = !DILocation(line: 430, column: 22, scope: !6444)
!6447 = !DILocation(line: 430, column: 11, scope: !6436)
!6448 = !DILocation(line: 431, column: 2, scope: !6444)
!6449 = !DILocation(line: 433, column: 25, scope: !6436)
!6450 = !DILocation(line: 433, column: 28, scope: !6436)
!6451 = !DILocation(line: 433, column: 14, scope: !6436)
!6452 = !DILocation(line: 433, column: 12, scope: !6436)
!6453 = !DILocation(line: 434, column: 29, scope: !6436)
!6454 = !DILocation(line: 434, column: 12, scope: !6436)
!6455 = !DILocation(line: 434, column: 10, scope: !6436)
!6456 = !DILocation(line: 435, column: 31, scope: !6436)
!6457 = !DILocation(line: 435, column: 13, scope: !6436)
!6458 = !DILocation(line: 435, column: 11, scope: !6436)
!6459 = !DILocation(line: 436, column: 29, scope: !6436)
!6460 = !DILocation(line: 436, column: 12, scope: !6436)
!6461 = !DILocation(line: 436, column: 10, scope: !6436)
!6462 = !DILocation(line: 438, column: 11, scope: !6463)
!6463 = distinct !DILexicalBlock(scope: !6436, file: !1, line: 438, column: 11)
!6464 = !DILocation(line: 438, column: 14, scope: !6463)
!6465 = !DILocation(line: 438, column: 20, scope: !6463)
!6466 = !DILocation(line: 438, column: 11, scope: !6436)
!6467 = !DILocation(line: 439, column: 32, scope: !6463)
!6468 = !DILocation(line: 439, column: 8, scope: !6463)
!6469 = !DILocation(line: 439, column: 6, scope: !6463)
!6470 = !DILocation(line: 439, column: 2, scope: !6463)
!6471 = !DILocation(line: 441, column: 34, scope: !6436)
!6472 = !DILocation(line: 441, column: 40, scope: !6436)
!6473 = !DILocation(line: 441, column: 46, scope: !6436)
!6474 = !DILocation(line: 441, column: 52, scope: !6436)
!6475 = !DILocation(line: 441, column: 58, scope: !6436)
!6476 = !DILocation(line: 442, column: 6, scope: !6436)
!6477 = !DILocation(line: 442, column: 10, scope: !6436)
!6478 = !DILocation(line: 442, column: 15, scope: !6436)
!6479 = !DILocation(line: 442, column: 19, scope: !6436)
!6480 = !DILocation(line: 441, column: 7, scope: !6436)
!6481 = !DILocation(line: 443, column: 7, scope: !6436)
!6482 = !DILocation(line: 444, column: 5, scope: !6436)
!6483 = !DILocation(line: 424, column: 54, scope: !6426)
!6484 = !DILocation(line: 424, column: 13, scope: !6426)
!6485 = !DILocation(line: 424, column: 11, scope: !6426)
!6486 = !DILocation(line: 422, column: 3, scope: !6426)
!6487 = distinct !{!6487, !6433, !6488}
!6488 = !DILocation(line: 444, column: 5, scope: !6421)
!6489 = !DILabel(scope: !6295, name: "end", file: !1, line: 446)
!6490 = !DILocation(line: 446, column: 1, scope: !6295)
!6491 = !DILocation(line: 447, column: 14, scope: !6295)
!6492 = !DILocation(line: 447, column: 3, scope: !6295)
!6493 = !DILocation(line: 448, column: 14, scope: !6295)
!6494 = !DILocation(line: 448, column: 3, scope: !6295)
!6495 = !DILocation(line: 449, column: 1, scope: !6295)
!6496 = distinct !DISubprogram(name: "dump_affine_iv", scope: !1, file: !1, line: 1160, type: !6497, scopeLine: 1161, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6497 = !DISubroutineType(types: !6498)
!6498 = !{null, !6499, !3815}
!6499 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6500, size: 64)
!6500 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !6501, line: 7, baseType: !6502)
!6501 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!6502 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !6503, line: 49, size: 1728, elements: !6504)
!6503 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!6504 = !{!6505, !6506, !6507, !6508, !6509, !6510, !6511, !6512, !6513, !6514, !6515, !6516, !6517, !6520, !6522, !6523, !6524, !6527, !6529, !6530, !6531, !6534, !6536, !6539, !6542, !6543, !6544, !6545, !6546}
!6505 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !6502, file: !6503, line: 51, baseType: !1752, size: 32)
!6506 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !6502, file: !6503, line: 54, baseType: !1924, size: 64, offset: 64)
!6507 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !6502, file: !6503, line: 55, baseType: !1924, size: 64, offset: 128)
!6508 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !6502, file: !6503, line: 56, baseType: !1924, size: 64, offset: 192)
!6509 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !6502, file: !6503, line: 57, baseType: !1924, size: 64, offset: 256)
!6510 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !6502, file: !6503, line: 58, baseType: !1924, size: 64, offset: 320)
!6511 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !6502, file: !6503, line: 59, baseType: !1924, size: 64, offset: 384)
!6512 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !6502, file: !6503, line: 60, baseType: !1924, size: 64, offset: 448)
!6513 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !6502, file: !6503, line: 61, baseType: !1924, size: 64, offset: 512)
!6514 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !6502, file: !6503, line: 64, baseType: !1924, size: 64, offset: 576)
!6515 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !6502, file: !6503, line: 65, baseType: !1924, size: 64, offset: 640)
!6516 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !6502, file: !6503, line: 66, baseType: !1924, size: 64, offset: 704)
!6517 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !6502, file: !6503, line: 68, baseType: !6518, size: 64, offset: 768)
!6518 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6519, size: 64)
!6519 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !6503, line: 36, flags: DIFlagFwdDecl)
!6520 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !6502, file: !6503, line: 70, baseType: !6521, size: 64, offset: 832)
!6521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6502, size: 64)
!6522 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !6502, file: !6503, line: 72, baseType: !1752, size: 32, offset: 896)
!6523 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !6502, file: !6503, line: 73, baseType: !1752, size: 32, offset: 928)
!6524 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !6502, file: !6503, line: 74, baseType: !6525, size: 64, offset: 960)
!6525 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !6526, line: 152, baseType: !1711)
!6526 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!6527 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !6502, file: !6503, line: 77, baseType: !6528, size: 16, offset: 1024)
!6528 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!6529 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !6502, file: !6503, line: 78, baseType: !2872, size: 8, offset: 1040)
!6530 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !6502, file: !6503, line: 79, baseType: !1754, size: 8, offset: 1048)
!6531 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !6502, file: !6503, line: 81, baseType: !6532, size: 64, offset: 1088)
!6532 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6533, size: 64)
!6533 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !6503, line: 43, baseType: null)
!6534 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !6502, file: !6503, line: 89, baseType: !6535, size: 64, offset: 1152)
!6535 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !6526, line: 153, baseType: !1711)
!6536 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !6502, file: !6503, line: 91, baseType: !6537, size: 64, offset: 1216)
!6537 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6538, size: 64)
!6538 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !6503, line: 37, flags: DIFlagFwdDecl)
!6539 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !6502, file: !6503, line: 92, baseType: !6540, size: 64, offset: 1280)
!6540 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6541, size: 64)
!6541 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !6503, line: 38, flags: DIFlagFwdDecl)
!6542 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !6502, file: !6503, line: 93, baseType: !6521, size: 64, offset: 1344)
!6543 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !6502, file: !6503, line: 94, baseType: !1939, size: 64, offset: 1408)
!6544 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !6502, file: !6503, line: 95, baseType: !2131, size: 64, offset: 1472)
!6545 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !6502, file: !6503, line: 96, baseType: !1752, size: 32, offset: 1536)
!6546 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !6502, file: !6503, line: 98, baseType: !6547, size: 160, offset: 1568)
!6547 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1755, size: 160, elements: !6548)
!6548 = !{!6549}
!6549 = !DISubrange(count: 20)
!6550 = !DILocalVariable(name: "file", arg: 1, scope: !6496, file: !1, line: 1160, type: !6499)
!6551 = !DILocation(line: 1160, column: 23, scope: !6496)
!6552 = !DILocalVariable(name: "iv", arg: 2, scope: !6496, file: !1, line: 1160, type: !3815)
!6553 = !DILocation(line: 1160, column: 40, scope: !6496)
!6554 = !DILocation(line: 1162, column: 23, scope: !6555)
!6555 = distinct !DILexicalBlock(scope: !6496, file: !1, line: 1162, column: 7)
!6556 = !DILocation(line: 1162, column: 27, scope: !6555)
!6557 = !DILocation(line: 1162, column: 8, scope: !6555)
!6558 = !DILocation(line: 1162, column: 7, scope: !6496)
!6559 = !DILocation(line: 1163, column: 14, scope: !6555)
!6560 = !DILocation(line: 1163, column: 5, scope: !6555)
!6561 = !DILocation(line: 1165, column: 23, scope: !6496)
!6562 = !DILocation(line: 1165, column: 34, scope: !6496)
!6563 = !DILocation(line: 1165, column: 38, scope: !6496)
!6564 = !DILocation(line: 1165, column: 3, scope: !6496)
!6565 = !DILocation(line: 1167, column: 23, scope: !6566)
!6566 = distinct !DILexicalBlock(scope: !6496, file: !1, line: 1167, column: 7)
!6567 = !DILocation(line: 1167, column: 27, scope: !6566)
!6568 = !DILocation(line: 1167, column: 8, scope: !6566)
!6569 = !DILocation(line: 1167, column: 7, scope: !6496)
!6570 = !DILocation(line: 1169, column: 16, scope: !6571)
!6571 = distinct !DILexicalBlock(scope: !6566, file: !1, line: 1168, column: 5)
!6572 = !DILocation(line: 1169, column: 7, scope: !6571)
!6573 = !DILocation(line: 1170, column: 27, scope: !6571)
!6574 = !DILocation(line: 1170, column: 38, scope: !6571)
!6575 = !DILocation(line: 1170, column: 42, scope: !6571)
!6576 = !DILocation(line: 1170, column: 7, scope: !6571)
!6577 = !DILocation(line: 1171, column: 16, scope: !6571)
!6578 = !DILocation(line: 1171, column: 29, scope: !6571)
!6579 = !DILocation(line: 1171, column: 33, scope: !6571)
!6580 = !DILocation(line: 1171, column: 7, scope: !6571)
!6581 = !DILocation(line: 1172, column: 5, scope: !6571)
!6582 = !DILocation(line: 1173, column: 1, scope: !6496)
!6583 = distinct !DISubprogram(name: "number_of_iterations_ne", scope: !1, file: !1, line: 586, type: !6584, scopeLine: 589, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6584 = !DISubroutineType(types: !6585)
!6585 = !{!1775, !1655, !3815, !1655, !3539, !1775, !6298}
!6586 = !DILocalVariable(name: "type", arg: 1, scope: !6583, file: !1, line: 586, type: !1655)
!6587 = !DILocation(line: 586, column: 31, scope: !6583)
!6588 = !DILocalVariable(name: "iv", arg: 2, scope: !6583, file: !1, line: 586, type: !3815)
!6589 = !DILocation(line: 586, column: 48, scope: !6583)
!6590 = !DILocalVariable(name: "final", arg: 3, scope: !6583, file: !1, line: 586, type: !1655)
!6591 = !DILocation(line: 586, column: 57, scope: !6583)
!6592 = !DILocalVariable(name: "niter", arg: 4, scope: !6583, file: !1, line: 587, type: !3539)
!6593 = !DILocation(line: 587, column: 29, scope: !6583)
!6594 = !DILocalVariable(name: "exit_must_be_taken", arg: 5, scope: !6583, file: !1, line: 587, type: !1775)
!6595 = !DILocation(line: 587, column: 41, scope: !6583)
!6596 = !DILocalVariable(name: "bnds", arg: 6, scope: !6583, file: !1, line: 588, type: !6298)
!6597 = !DILocation(line: 588, column: 13, scope: !6583)
!6598 = !DILocalVariable(name: "niter_type", scope: !6583, file: !1, line: 590, type: !1655)
!6599 = !DILocation(line: 590, column: 8, scope: !6583)
!6600 = !DILocation(line: 590, column: 40, scope: !6583)
!6601 = !DILocation(line: 590, column: 21, scope: !6583)
!6602 = !DILocalVariable(name: "s", scope: !6583, file: !1, line: 591, type: !1655)
!6603 = !DILocation(line: 591, column: 8, scope: !6583)
!6604 = !DILocalVariable(name: "c", scope: !6583, file: !1, line: 591, type: !1655)
!6605 = !DILocation(line: 591, column: 11, scope: !6583)
!6606 = !DILocalVariable(name: "d", scope: !6583, file: !1, line: 591, type: !1655)
!6607 = !DILocation(line: 591, column: 14, scope: !6583)
!6608 = !DILocalVariable(name: "bits", scope: !6583, file: !1, line: 591, type: !1655)
!6609 = !DILocation(line: 591, column: 17, scope: !6583)
!6610 = !DILocalVariable(name: "assumption", scope: !6583, file: !1, line: 591, type: !1655)
!6611 = !DILocation(line: 591, column: 23, scope: !6583)
!6612 = !DILocalVariable(name: "tmp", scope: !6583, file: !1, line: 591, type: !1655)
!6613 = !DILocation(line: 591, column: 35, scope: !6583)
!6614 = !DILocalVariable(name: "bound", scope: !6583, file: !1, line: 591, type: !1655)
!6615 = !DILocation(line: 591, column: 40, scope: !6583)
!6616 = !DILocalVariable(name: "max", scope: !6583, file: !1, line: 592, type: !3839)
!6617 = !DILocation(line: 592, column: 9, scope: !6583)
!6618 = !DILocation(line: 594, column: 3, scope: !6583)
!6619 = !DILocation(line: 594, column: 10, scope: !6583)
!6620 = !DILocation(line: 594, column: 21, scope: !6583)
!6621 = !DILocation(line: 594, column: 20, scope: !6583)
!6622 = !DILocation(line: 595, column: 18, scope: !6583)
!6623 = !DILocation(line: 595, column: 3, scope: !6583)
!6624 = !DILocation(line: 595, column: 10, scope: !6583)
!6625 = !DILocation(line: 595, column: 16, scope: !6583)
!6626 = !DILocation(line: 596, column: 3, scope: !6583)
!6627 = !DILocation(line: 596, column: 10, scope: !6583)
!6628 = !DILocation(line: 596, column: 14, scope: !6583)
!6629 = !DILocation(line: 603, column: 30, scope: !6630)
!6630 = distinct !DILexicalBlock(scope: !6583, file: !1, line: 603, column: 7)
!6631 = !DILocation(line: 603, column: 34, scope: !6630)
!6632 = !DILocation(line: 603, column: 7, scope: !6630)
!6633 = !DILocation(line: 603, column: 7, scope: !6583)
!6634 = !DILocation(line: 605, column: 11, scope: !6635)
!6635 = distinct !DILexicalBlock(scope: !6630, file: !1, line: 604, column: 5)
!6636 = !DILocation(line: 605, column: 9, scope: !6635)
!6637 = !DILocation(line: 607, column: 11, scope: !6635)
!6638 = !DILocation(line: 607, column: 9, scope: !6635)
!6639 = !DILocation(line: 610, column: 22, scope: !6635)
!6640 = !DILocation(line: 610, column: 7, scope: !6635)
!6641 = !DILocation(line: 611, column: 5, scope: !6635)
!6642 = !DILocation(line: 614, column: 11, scope: !6643)
!6643 = distinct !DILexicalBlock(scope: !6630, file: !1, line: 613, column: 5)
!6644 = !DILocation(line: 614, column: 9, scope: !6643)
!6645 = !DILocation(line: 615, column: 11, scope: !6643)
!6646 = !DILocation(line: 615, column: 9, scope: !6643)
!6647 = !DILocation(line: 620, column: 13, scope: !6583)
!6648 = !DILocation(line: 620, column: 3, scope: !6583)
!6649 = !DILocation(line: 621, column: 32, scope: !6583)
!6650 = !DILocation(line: 621, column: 37, scope: !6583)
!6651 = !DILocation(line: 621, column: 41, scope: !6583)
!6652 = !DILocation(line: 621, column: 54, scope: !6583)
!6653 = !DILocation(line: 621, column: 57, scope: !6583)
!6654 = !DILocation(line: 621, column: 60, scope: !6583)
!6655 = !DILocation(line: 621, column: 3, scope: !6583)
!6656 = !DILocation(line: 622, column: 3, scope: !6583)
!6657 = !DILocation(line: 622, column: 10, scope: !6583)
!6658 = !DILocation(line: 622, column: 36, scope: !6583)
!6659 = !DILocation(line: 622, column: 48, scope: !6583)
!6660 = !DILocation(line: 622, column: 16, scope: !6583)
!6661 = !DILocation(line: 623, column: 14, scope: !6583)
!6662 = !DILocation(line: 623, column: 3, scope: !6583)
!6663 = !DILocation(line: 626, column: 21, scope: !6664)
!6664 = distinct !DILexicalBlock(scope: !6583, file: !1, line: 626, column: 7)
!6665 = !DILocation(line: 626, column: 7, scope: !6664)
!6666 = !DILocation(line: 626, column: 7, scope: !6583)
!6667 = !DILocation(line: 628, column: 22, scope: !6668)
!6668 = distinct !DILexicalBlock(scope: !6664, file: !1, line: 627, column: 5)
!6669 = !DILocation(line: 628, column: 7, scope: !6668)
!6670 = !DILocation(line: 628, column: 14, scope: !6668)
!6671 = !DILocation(line: 628, column: 20, scope: !6668)
!6672 = !DILocation(line: 629, column: 7, scope: !6668)
!6673 = !DILocation(line: 635, column: 28, scope: !6583)
!6674 = !DILocation(line: 635, column: 10, scope: !6583)
!6675 = !DILocation(line: 635, column: 8, scope: !6583)
!6676 = !DILocation(line: 636, column: 32, scope: !6583)
!6677 = !DILocation(line: 637, column: 12, scope: !6583)
!6678 = !DILocation(line: 638, column: 21, scope: !6583)
!6679 = !DILocation(line: 638, column: 7, scope: !6583)
!6680 = !DILocation(line: 638, column: 5, scope: !6583)
!6681 = !DILocation(line: 637, column: 11, scope: !6583)
!6682 = !DILocation(line: 636, column: 11, scope: !6583)
!6683 = !DILocation(line: 636, column: 9, scope: !6583)
!6684 = !DILocation(line: 640, column: 45, scope: !6583)
!6685 = !DILocation(line: 641, column: 26, scope: !6583)
!6686 = !DILocation(line: 641, column: 11, scope: !6583)
!6687 = !DILocation(line: 641, column: 42, scope: !6583)
!6688 = !DILocation(line: 640, column: 7, scope: !6583)
!6689 = !DILocation(line: 640, column: 5, scope: !6583)
!6690 = !DILocation(line: 642, column: 45, scope: !6583)
!6691 = !DILocation(line: 642, column: 57, scope: !6583)
!6692 = !DILocation(line: 642, column: 60, scope: !6583)
!6693 = !DILocation(line: 642, column: 7, scope: !6583)
!6694 = !DILocation(line: 642, column: 5, scope: !6583)
!6695 = !DILocation(line: 644, column: 8, scope: !6696)
!6696 = distinct !DILexicalBlock(scope: !6583, file: !1, line: 644, column: 7)
!6697 = !DILocation(line: 644, column: 7, scope: !6583)
!6698 = !DILocation(line: 648, column: 20, scope: !6699)
!6699 = distinct !DILexicalBlock(scope: !6696, file: !1, line: 645, column: 5)
!6700 = !DILocation(line: 648, column: 18, scope: !6699)
!6701 = !DILocation(line: 649, column: 20, scope: !6699)
!6702 = !DILocation(line: 649, column: 18, scope: !6699)
!6703 = !DILocation(line: 651, column: 30, scope: !6704)
!6704 = distinct !DILexicalBlock(scope: !6699, file: !1, line: 651, column: 11)
!6705 = !DILocation(line: 651, column: 12, scope: !6704)
!6706 = !DILocation(line: 651, column: 11, scope: !6699)
!6707 = !DILocation(line: 652, column: 23, scope: !6704)
!6708 = !DILocation(line: 652, column: 2, scope: !6704)
!6709 = !DILocation(line: 652, column: 9, scope: !6704)
!6710 = !DILocation(line: 652, column: 21, scope: !6704)
!6711 = !DILocation(line: 654, column: 5, scope: !6699)
!6712 = !DILocation(line: 656, column: 7, scope: !6583)
!6713 = !DILocation(line: 656, column: 5, scope: !6583)
!6714 = !DILocation(line: 657, column: 9, scope: !6583)
!6715 = !DILocation(line: 657, column: 7, scope: !6583)
!6716 = !DILocation(line: 658, column: 18, scope: !6583)
!6717 = !DILocation(line: 658, column: 3, scope: !6583)
!6718 = !DILocation(line: 658, column: 10, scope: !6583)
!6719 = !DILocation(line: 658, column: 16, scope: !6583)
!6720 = !DILocation(line: 659, column: 3, scope: !6583)
!6721 = !DILocation(line: 660, column: 1, scope: !6583)
!6722 = distinct !DISubprogram(name: "number_of_iterations_lt", scope: !1, file: !1, line: 991, type: !6723, scopeLine: 994, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6723 = !DISubroutineType(types: !6724)
!6724 = !{!1775, !1655, !3815, !3815, !3539, !1775, !6298}
!6725 = !DILocalVariable(name: "type", arg: 1, scope: !6722, file: !1, line: 991, type: !1655)
!6726 = !DILocation(line: 991, column: 31, scope: !6722)
!6727 = !DILocalVariable(name: "iv0", arg: 2, scope: !6722, file: !1, line: 991, type: !3815)
!6728 = !DILocation(line: 991, column: 48, scope: !6722)
!6729 = !DILocalVariable(name: "iv1", arg: 3, scope: !6722, file: !1, line: 991, type: !3815)
!6730 = !DILocation(line: 991, column: 64, scope: !6722)
!6731 = !DILocalVariable(name: "niter", arg: 4, scope: !6722, file: !1, line: 992, type: !3539)
!6732 = !DILocation(line: 992, column: 29, scope: !6722)
!6733 = !DILocalVariable(name: "exit_must_be_taken", arg: 5, scope: !6722, file: !1, line: 993, type: !1775)
!6734 = !DILocation(line: 993, column: 10, scope: !6722)
!6735 = !DILocalVariable(name: "bnds", arg: 6, scope: !6722, file: !1, line: 993, type: !6298)
!6736 = !DILocation(line: 993, column: 38, scope: !6722)
!6737 = !DILocalVariable(name: "niter_type", scope: !6722, file: !1, line: 995, type: !1655)
!6738 = !DILocation(line: 995, column: 8, scope: !6722)
!6739 = !DILocation(line: 995, column: 40, scope: !6722)
!6740 = !DILocation(line: 995, column: 21, scope: !6722)
!6741 = !DILocalVariable(name: "delta", scope: !6722, file: !1, line: 996, type: !1655)
!6742 = !DILocation(line: 996, column: 8, scope: !6722)
!6743 = !DILocalVariable(name: "step", scope: !6722, file: !1, line: 996, type: !1655)
!6744 = !DILocation(line: 996, column: 15, scope: !6722)
!6745 = !DILocalVariable(name: "s", scope: !6722, file: !1, line: 996, type: !1655)
!6746 = !DILocation(line: 996, column: 21, scope: !6722)
!6747 = !DILocalVariable(name: "mstep", scope: !6722, file: !1, line: 997, type: !3839)
!6748 = !DILocation(line: 997, column: 9, scope: !6722)
!6749 = !DILocalVariable(name: "tmp", scope: !6722, file: !1, line: 997, type: !3839)
!6750 = !DILocation(line: 997, column: 16, scope: !6722)
!6751 = !DILocation(line: 999, column: 25, scope: !6752)
!6752 = distinct !DILexicalBlock(scope: !6722, file: !1, line: 999, column: 7)
!6753 = !DILocation(line: 999, column: 30, scope: !6752)
!6754 = !DILocation(line: 999, column: 7, scope: !6752)
!6755 = !DILocation(line: 999, column: 7, scope: !6722)
!6756 = !DILocation(line: 1001, column: 7, scope: !6757)
!6757 = distinct !DILexicalBlock(scope: !6752, file: !1, line: 1000, column: 5)
!6758 = !DILocation(line: 1001, column: 14, scope: !6757)
!6759 = !DILocation(line: 1001, column: 25, scope: !6757)
!6760 = !DILocation(line: 1001, column: 24, scope: !6757)
!6761 = !DILocation(line: 1002, column: 7, scope: !6757)
!6762 = !DILocation(line: 1002, column: 14, scope: !6757)
!6763 = !DILocation(line: 1002, column: 18, scope: !6757)
!6764 = !DILocation(line: 1003, column: 22, scope: !6757)
!6765 = !DILocation(line: 1003, column: 27, scope: !6757)
!6766 = !DILocation(line: 1003, column: 7, scope: !6757)
!6767 = !DILocation(line: 1003, column: 14, scope: !6757)
!6768 = !DILocation(line: 1003, column: 20, scope: !6757)
!6769 = !DILocation(line: 1004, column: 5, scope: !6757)
!6770 = !DILocation(line: 1007, column: 7, scope: !6771)
!6771 = distinct !DILexicalBlock(scope: !6752, file: !1, line: 1006, column: 5)
!6772 = !DILocation(line: 1007, column: 14, scope: !6771)
!6773 = !DILocation(line: 1007, column: 25, scope: !6771)
!6774 = !DILocation(line: 1007, column: 24, scope: !6771)
!6775 = !DILocation(line: 1008, column: 7, scope: !6771)
!6776 = !DILocation(line: 1008, column: 14, scope: !6771)
!6777 = !DILocation(line: 1008, column: 18, scope: !6771)
!6778 = !DILocation(line: 1009, column: 22, scope: !6771)
!6779 = !DILocation(line: 1009, column: 27, scope: !6771)
!6780 = !DILocation(line: 1009, column: 7, scope: !6771)
!6781 = !DILocation(line: 1009, column: 14, scope: !6771)
!6782 = !DILocation(line: 1009, column: 20, scope: !6771)
!6783 = !DILocation(line: 1012, column: 11, scope: !6722)
!6784 = !DILocation(line: 1012, column: 9, scope: !6722)
!6785 = !DILocation(line: 1017, column: 22, scope: !6786)
!6786 = distinct !DILexicalBlock(scope: !6722, file: !1, line: 1017, column: 7)
!6787 = !DILocation(line: 1017, column: 27, scope: !6786)
!6788 = !DILocation(line: 1017, column: 8, scope: !6786)
!6789 = !DILocation(line: 1017, column: 33, scope: !6786)
!6790 = !DILocation(line: 1017, column: 51, scope: !6786)
!6791 = !DILocation(line: 1017, column: 56, scope: !6786)
!6792 = !DILocation(line: 1017, column: 36, scope: !6786)
!6793 = !DILocation(line: 1018, column: 7, scope: !6786)
!6794 = !DILocation(line: 1018, column: 30, scope: !6786)
!6795 = !DILocation(line: 1018, column: 35, scope: !6786)
!6796 = !DILocation(line: 1018, column: 11, scope: !6786)
!6797 = !DILocation(line: 1018, column: 41, scope: !6786)
!6798 = !DILocation(line: 1018, column: 59, scope: !6786)
!6799 = !DILocation(line: 1018, column: 64, scope: !6786)
!6800 = !DILocation(line: 1018, column: 44, scope: !6786)
!6801 = !DILocation(line: 1017, column: 7, scope: !6722)
!6802 = !DILocation(line: 1034, column: 20, scope: !6803)
!6803 = distinct !DILexicalBlock(scope: !6804, file: !1, line: 1034, column: 11)
!6804 = distinct !DILexicalBlock(scope: !6786, file: !1, line: 1019, column: 5)
!6805 = !DILocation(line: 1034, column: 26, scope: !6803)
!6806 = !DILocation(line: 1034, column: 11, scope: !6803)
!6807 = !DILocation(line: 1034, column: 33, scope: !6803)
!6808 = !DILocation(line: 1034, column: 11, scope: !6804)
!6809 = !DILocation(line: 1035, column: 23, scope: !6803)
!6810 = !DILocation(line: 1035, column: 2, scope: !6803)
!6811 = !DILocation(line: 1035, column: 9, scope: !6803)
!6812 = !DILocation(line: 1035, column: 21, scope: !6803)
!6813 = !DILocation(line: 1037, column: 22, scope: !6804)
!6814 = !DILocation(line: 1037, column: 7, scope: !6804)
!6815 = !DILocation(line: 1037, column: 14, scope: !6804)
!6816 = !DILocation(line: 1037, column: 20, scope: !6804)
!6817 = !DILocation(line: 1038, column: 7, scope: !6804)
!6818 = !DILocation(line: 1038, column: 14, scope: !6804)
!6819 = !DILocation(line: 1038, column: 40, scope: !6804)
!6820 = !DILocation(line: 1038, column: 52, scope: !6804)
!6821 = !DILocation(line: 1038, column: 58, scope: !6804)
!6822 = !DILocation(line: 1038, column: 20, scope: !6804)
!6823 = !DILocation(line: 1039, column: 7, scope: !6804)
!6824 = !DILocation(line: 1042, column: 25, scope: !6825)
!6825 = distinct !DILexicalBlock(scope: !6722, file: !1, line: 1042, column: 7)
!6826 = !DILocation(line: 1042, column: 30, scope: !6825)
!6827 = !DILocation(line: 1042, column: 7, scope: !6825)
!6828 = !DILocation(line: 1042, column: 7, scope: !6722)
!6829 = !DILocation(line: 1043, column: 12, scope: !6825)
!6830 = !DILocation(line: 1043, column: 10, scope: !6825)
!6831 = !DILocation(line: 1043, column: 5, scope: !6825)
!6832 = !DILocation(line: 1045, column: 12, scope: !6825)
!6833 = !DILocation(line: 1045, column: 10, scope: !6825)
!6834 = !DILocation(line: 1051, column: 38, scope: !6835)
!6835 = distinct !DILexicalBlock(scope: !6722, file: !1, line: 1051, column: 7)
!6836 = !DILocation(line: 1051, column: 44, scope: !6835)
!6837 = !DILocation(line: 1051, column: 49, scope: !6835)
!6838 = !DILocation(line: 1051, column: 54, scope: !6835)
!6839 = !DILocation(line: 1051, column: 69, scope: !6835)
!6840 = !DILocation(line: 1052, column: 10, scope: !6835)
!6841 = !DILocation(line: 1052, column: 30, scope: !6835)
!6842 = !DILocation(line: 1051, column: 7, scope: !6835)
!6843 = !DILocation(line: 1051, column: 7, scope: !6722)
!6844 = !DILocalVariable(name: "zps", scope: !6845, file: !1, line: 1054, type: !3547)
!6845 = distinct !DILexicalBlock(scope: !6835, file: !1, line: 1053, column: 5)
!6846 = !DILocation(line: 1054, column: 17, scope: !6845)
!6847 = !DILocation(line: 1056, column: 33, scope: !6845)
!6848 = !DILocation(line: 1056, column: 18, scope: !6845)
!6849 = !DILocation(line: 1056, column: 11, scope: !6845)
!6850 = !DILocation(line: 1056, column: 16, scope: !6845)
!6851 = !DILocation(line: 1057, column: 18, scope: !6845)
!6852 = !DILocation(line: 1057, column: 11, scope: !6845)
!6853 = !DILocation(line: 1057, column: 16, scope: !6845)
!6854 = !DILocation(line: 1060, column: 11, scope: !6845)
!6855 = !DILocation(line: 1060, column: 23, scope: !6845)
!6856 = !DILocation(line: 1062, column: 39, scope: !6845)
!6857 = !DILocation(line: 1062, column: 51, scope: !6845)
!6858 = !DILocation(line: 1062, column: 58, scope: !6845)
!6859 = !DILocation(line: 1062, column: 71, scope: !6845)
!6860 = !DILocation(line: 1062, column: 14, scope: !6845)
!6861 = !DILocation(line: 1062, column: 7, scope: !6845)
!6862 = !DILocation(line: 1066, column: 31, scope: !6863)
!6863 = distinct !DILexicalBlock(scope: !6722, file: !1, line: 1066, column: 7)
!6864 = !DILocation(line: 1066, column: 37, scope: !6863)
!6865 = !DILocation(line: 1066, column: 42, scope: !6863)
!6866 = !DILocation(line: 1066, column: 47, scope: !6863)
!6867 = !DILocation(line: 1066, column: 54, scope: !6863)
!6868 = !DILocation(line: 1066, column: 8, scope: !6863)
!6869 = !DILocation(line: 1066, column: 7, scope: !6722)
!6870 = !DILocation(line: 1067, column: 5, scope: !6863)
!6871 = !DILocation(line: 1072, column: 25, scope: !6722)
!6872 = !DILocation(line: 1072, column: 31, scope: !6722)
!6873 = !DILocation(line: 1072, column: 36, scope: !6722)
!6874 = !DILocation(line: 1072, column: 41, scope: !6722)
!6875 = !DILocation(line: 1072, column: 48, scope: !6722)
!6876 = !DILocation(line: 1072, column: 3, scope: !6722)
!6877 = !DILocation(line: 1074, column: 7, scope: !6722)
!6878 = !DILocation(line: 1074, column: 5, scope: !6722)
!6879 = !DILocation(line: 1076, column: 11, scope: !6722)
!6880 = !DILocation(line: 1076, column: 9, scope: !6722)
!6881 = !DILocation(line: 1077, column: 18, scope: !6722)
!6882 = !DILocation(line: 1077, column: 3, scope: !6722)
!6883 = !DILocation(line: 1077, column: 10, scope: !6722)
!6884 = !DILocation(line: 1077, column: 16, scope: !6722)
!6885 = !DILocation(line: 1079, column: 13, scope: !6722)
!6886 = !DILocation(line: 1079, column: 3, scope: !6722)
!6887 = !DILocation(line: 1080, column: 13, scope: !6722)
!6888 = !DILocation(line: 1080, column: 3, scope: !6722)
!6889 = !DILocation(line: 1081, column: 23, scope: !6722)
!6890 = !DILocation(line: 1081, column: 50, scope: !6722)
!6891 = !DILocation(line: 1081, column: 30, scope: !6722)
!6892 = !DILocation(line: 1081, column: 3, scope: !6722)
!6893 = !DILocation(line: 1082, column: 12, scope: !6722)
!6894 = !DILocation(line: 1082, column: 17, scope: !6722)
!6895 = !DILocation(line: 1082, column: 23, scope: !6722)
!6896 = !DILocation(line: 1082, column: 27, scope: !6722)
!6897 = !DILocation(line: 1082, column: 3, scope: !6722)
!6898 = !DILocation(line: 1083, column: 15, scope: !6722)
!6899 = !DILocation(line: 1083, column: 20, scope: !6722)
!6900 = !DILocation(line: 1083, column: 3, scope: !6722)
!6901 = !DILocation(line: 1084, column: 15, scope: !6722)
!6902 = !DILocation(line: 1084, column: 20, scope: !6722)
!6903 = !DILocation(line: 1084, column: 25, scope: !6722)
!6904 = !DILocation(line: 1084, column: 3, scope: !6722)
!6905 = !DILocation(line: 1085, column: 3, scope: !6722)
!6906 = !DILocation(line: 1085, column: 10, scope: !6722)
!6907 = !DILocation(line: 1085, column: 36, scope: !6722)
!6908 = !DILocation(line: 1085, column: 48, scope: !6722)
!6909 = !DILocation(line: 1085, column: 16, scope: !6722)
!6910 = !DILocation(line: 1086, column: 14, scope: !6722)
!6911 = !DILocation(line: 1086, column: 3, scope: !6722)
!6912 = !DILocation(line: 1087, column: 14, scope: !6722)
!6913 = !DILocation(line: 1087, column: 3, scope: !6722)
!6914 = !DILocation(line: 1089, column: 3, scope: !6722)
!6915 = !DILocation(line: 1090, column: 1, scope: !6722)
!6916 = distinct !DISubprogram(name: "number_of_iterations_le", scope: !1, file: !1, line: 1100, type: !6723, scopeLine: 1103, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!6917 = !DILocalVariable(name: "type", arg: 1, scope: !6916, file: !1, line: 1100, type: !1655)
!6918 = !DILocation(line: 1100, column: 31, scope: !6916)
!6919 = !DILocalVariable(name: "iv0", arg: 2, scope: !6916, file: !1, line: 1100, type: !3815)
!6920 = !DILocation(line: 1100, column: 48, scope: !6916)
!6921 = !DILocalVariable(name: "iv1", arg: 3, scope: !6916, file: !1, line: 1100, type: !3815)
!6922 = !DILocation(line: 1100, column: 64, scope: !6916)
!6923 = !DILocalVariable(name: "niter", arg: 4, scope: !6916, file: !1, line: 1101, type: !3539)
!6924 = !DILocation(line: 1101, column: 29, scope: !6916)
!6925 = !DILocalVariable(name: "exit_must_be_taken", arg: 5, scope: !6916, file: !1, line: 1101, type: !1775)
!6926 = !DILocation(line: 1101, column: 41, scope: !6916)
!6927 = !DILocalVariable(name: "bnds", arg: 6, scope: !6916, file: !1, line: 1102, type: !6298)
!6928 = !DILocation(line: 1102, column: 13, scope: !6916)
!6929 = !DILocalVariable(name: "assumption", scope: !6916, file: !1, line: 1104, type: !1655)
!6930 = !DILocation(line: 1104, column: 8, scope: !6916)
!6931 = !DILocalVariable(name: "type1", scope: !6916, file: !1, line: 1105, type: !1655)
!6932 = !DILocation(line: 1105, column: 8, scope: !6916)
!6933 = !DILocation(line: 1105, column: 16, scope: !6916)
!6934 = !DILocation(line: 1106, column: 7, scope: !6935)
!6935 = distinct !DILexicalBlock(scope: !6916, file: !1, line: 1106, column: 7)
!6936 = !DILocation(line: 1106, column: 7, scope: !6916)
!6937 = !DILocation(line: 1107, column: 13, scope: !6935)
!6938 = !DILocation(line: 1107, column: 11, scope: !6935)
!6939 = !DILocation(line: 1107, column: 5, scope: !6935)
!6940 = !DILocation(line: 1118, column: 8, scope: !6941)
!6941 = distinct !DILexicalBlock(scope: !6916, file: !1, line: 1118, column: 7)
!6942 = !DILocation(line: 1118, column: 27, scope: !6941)
!6943 = !DILocation(line: 1118, column: 31, scope: !6941)
!6944 = !DILocation(line: 1118, column: 7, scope: !6916)
!6945 = !DILocation(line: 1120, column: 29, scope: !6946)
!6946 = distinct !DILexicalBlock(scope: !6947, file: !1, line: 1120, column: 11)
!6947 = distinct !DILexicalBlock(scope: !6941, file: !1, line: 1119, column: 5)
!6948 = !DILocation(line: 1120, column: 34, scope: !6946)
!6949 = !DILocation(line: 1120, column: 11, scope: !6946)
!6950 = !DILocation(line: 1120, column: 11, scope: !6947)
!6951 = !DILocation(line: 1121, column: 15, scope: !6946)
!6952 = !DILocation(line: 1121, column: 13, scope: !6946)
!6953 = !DILocation(line: 1121, column: 2, scope: !6946)
!6954 = !DILocation(line: 1124, column: 15, scope: !6946)
!6955 = !DILocation(line: 1124, column: 13, scope: !6946)
!6956 = !DILocation(line: 1127, column: 26, scope: !6957)
!6957 = distinct !DILexicalBlock(scope: !6947, file: !1, line: 1127, column: 11)
!6958 = !DILocation(line: 1127, column: 11, scope: !6957)
!6959 = !DILocation(line: 1127, column: 11, scope: !6947)
!6960 = !DILocation(line: 1128, column: 2, scope: !6957)
!6961 = !DILocation(line: 1129, column: 30, scope: !6962)
!6962 = distinct !DILexicalBlock(scope: !6947, file: !1, line: 1129, column: 11)
!6963 = !DILocation(line: 1129, column: 12, scope: !6962)
!6964 = !DILocation(line: 1129, column: 11, scope: !6947)
!6965 = !DILocation(line: 1130, column: 23, scope: !6962)
!6966 = !DILocation(line: 1130, column: 2, scope: !6962)
!6967 = !DILocation(line: 1130, column: 9, scope: !6962)
!6968 = !DILocation(line: 1130, column: 21, scope: !6962)
!6969 = !DILocation(line: 1132, column: 5, scope: !6947)
!6970 = !DILocation(line: 1134, column: 25, scope: !6971)
!6971 = distinct !DILexicalBlock(scope: !6916, file: !1, line: 1134, column: 7)
!6972 = !DILocation(line: 1134, column: 30, scope: !6971)
!6973 = !DILocation(line: 1134, column: 7, scope: !6971)
!6974 = !DILocation(line: 1134, column: 7, scope: !6916)
!6975 = !DILocation(line: 1136, column: 11, scope: !6976)
!6976 = distinct !DILexicalBlock(scope: !6977, file: !1, line: 1136, column: 11)
!6977 = distinct !DILexicalBlock(scope: !6971, file: !1, line: 1135, column: 5)
!6978 = !DILocation(line: 1136, column: 11, scope: !6977)
!6979 = !DILocation(line: 1137, column: 14, scope: !6976)
!6980 = !DILocation(line: 1137, column: 2, scope: !6976)
!6981 = !DILocation(line: 1137, column: 7, scope: !6976)
!6982 = !DILocation(line: 1137, column: 12, scope: !6976)
!6983 = !DILocation(line: 1140, column: 14, scope: !6976)
!6984 = !DILocation(line: 1140, column: 2, scope: !6976)
!6985 = !DILocation(line: 1140, column: 7, scope: !6976)
!6986 = !DILocation(line: 1140, column: 12, scope: !6976)
!6987 = !DILocation(line: 1142, column: 5, scope: !6977)
!6988 = !DILocation(line: 1143, column: 12, scope: !6989)
!6989 = distinct !DILexicalBlock(scope: !6971, file: !1, line: 1143, column: 12)
!6990 = !DILocation(line: 1143, column: 12, scope: !6971)
!6991 = !DILocation(line: 1144, column: 17, scope: !6989)
!6992 = !DILocation(line: 1144, column: 5, scope: !6989)
!6993 = !DILocation(line: 1144, column: 10, scope: !6989)
!6994 = !DILocation(line: 1144, column: 15, scope: !6989)
!6995 = !DILocation(line: 1148, column: 17, scope: !6989)
!6996 = !DILocation(line: 1148, column: 5, scope: !6989)
!6997 = !DILocation(line: 1148, column: 10, scope: !6989)
!6998 = !DILocation(line: 1148, column: 15, scope: !6989)
!6999 = !DILocation(line: 1151, column: 15, scope: !6916)
!7000 = !DILocation(line: 1151, column: 21, scope: !6916)
!7001 = !DILocation(line: 1151, column: 37, scope: !6916)
!7002 = !DILocation(line: 1151, column: 3, scope: !6916)
!7003 = !DILocation(line: 1153, column: 35, scope: !6916)
!7004 = !DILocation(line: 1153, column: 41, scope: !6916)
!7005 = !DILocation(line: 1153, column: 46, scope: !6916)
!7006 = !DILocation(line: 1153, column: 51, scope: !6916)
!7007 = !DILocation(line: 1153, column: 58, scope: !6916)
!7008 = !DILocation(line: 1154, column: 7, scope: !6916)
!7009 = !DILocation(line: 1153, column: 10, scope: !6916)
!7010 = !DILocation(line: 1153, column: 3, scope: !6916)
!7011 = !DILocation(line: 1155, column: 1, scope: !6916)
!7012 = distinct !DISubprogram(name: "split_to_var_and_offset", scope: !1, file: !1, line: 71, type: !7013, scopeLine: 72, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!7013 = !DISubroutineType(types: !7014)
!7014 = !{null, !1655, !2020, !7015}
!7015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3842, size: 64)
!7016 = !DILocalVariable(name: "expr", arg: 1, scope: !7012, file: !1, line: 71, type: !1655)
!7017 = !DILocation(line: 71, column: 31, scope: !7012)
!7018 = !DILocalVariable(name: "var", arg: 2, scope: !7012, file: !1, line: 71, type: !2020)
!7019 = !DILocation(line: 71, column: 43, scope: !7012)
!7020 = !DILocalVariable(name: "offset", arg: 3, scope: !7012, file: !1, line: 71, type: !7015)
!7021 = !DILocation(line: 71, column: 54, scope: !7012)
!7022 = !DILocalVariable(name: "type", scope: !7012, file: !1, line: 73, type: !1655)
!7023 = !DILocation(line: 73, column: 8, scope: !7012)
!7024 = !DILocation(line: 73, column: 15, scope: !7012)
!7025 = !DILocalVariable(name: "op0", scope: !7012, file: !1, line: 74, type: !1655)
!7026 = !DILocation(line: 74, column: 8, scope: !7012)
!7027 = !DILocalVariable(name: "op1", scope: !7012, file: !1, line: 74, type: !1655)
!7028 = !DILocation(line: 74, column: 13, scope: !7012)
!7029 = !DILocalVariable(name: "off", scope: !7012, file: !1, line: 75, type: !1704)
!7030 = !DILocation(line: 75, column: 14, scope: !7012)
!7031 = !DILocalVariable(name: "negate", scope: !7012, file: !1, line: 76, type: !1775)
!7032 = !DILocation(line: 76, column: 8, scope: !7012)
!7033 = !DILocation(line: 78, column: 10, scope: !7012)
!7034 = !DILocation(line: 78, column: 4, scope: !7012)
!7035 = !DILocation(line: 78, column: 8, scope: !7012)
!7036 = !DILocation(line: 79, column: 15, scope: !7012)
!7037 = !DILocation(line: 79, column: 3, scope: !7012)
!7038 = !DILocation(line: 81, column: 11, scope: !7012)
!7039 = !DILocation(line: 81, column: 3, scope: !7012)
!7040 = !DILocation(line: 84, column: 14, scope: !7041)
!7041 = distinct !DILexicalBlock(scope: !7012, file: !1, line: 82, column: 5)
!7042 = !DILocation(line: 84, column: 7, scope: !7041)
!7043 = !DILocation(line: 89, column: 13, scope: !7041)
!7044 = !DILocation(line: 89, column: 11, scope: !7041)
!7045 = !DILocation(line: 90, column: 13, scope: !7041)
!7046 = !DILocation(line: 90, column: 11, scope: !7041)
!7047 = !DILocation(line: 92, column: 11, scope: !7048)
!7048 = distinct !DILexicalBlock(scope: !7041, file: !1, line: 92, column: 11)
!7049 = !DILocation(line: 92, column: 27, scope: !7048)
!7050 = !DILocation(line: 92, column: 11, scope: !7041)
!7051 = !DILocation(line: 93, column: 2, scope: !7048)
!7052 = !DILocation(line: 95, column: 14, scope: !7041)
!7053 = !DILocation(line: 95, column: 8, scope: !7041)
!7054 = !DILocation(line: 95, column: 12, scope: !7041)
!7055 = !DILocation(line: 97, column: 33, scope: !7041)
!7056 = !DILocation(line: 97, column: 13, scope: !7041)
!7057 = !DILocation(line: 98, column: 11, scope: !7058)
!7058 = distinct !DILexicalBlock(scope: !7041, file: !1, line: 98, column: 11)
!7059 = !DILocation(line: 98, column: 11, scope: !7041)
!7060 = !DILocation(line: 99, column: 8, scope: !7058)
!7061 = !DILocation(line: 99, column: 2, scope: !7058)
!7062 = !DILocation(line: 100, column: 35, scope: !7041)
!7063 = !DILocation(line: 100, column: 13, scope: !7041)
!7064 = !DILocation(line: 101, column: 27, scope: !7041)
!7065 = !DILocation(line: 101, column: 7, scope: !7041)
!7066 = !DILocation(line: 102, column: 7, scope: !7041)
!7067 = !DILocation(line: 105, column: 34, scope: !7041)
!7068 = !DILocation(line: 105, column: 14, scope: !7041)
!7069 = !DILocation(line: 105, column: 8, scope: !7041)
!7070 = !DILocation(line: 105, column: 12, scope: !7041)
!7071 = !DILocation(line: 106, column: 33, scope: !7041)
!7072 = !DILocation(line: 106, column: 13, scope: !7041)
!7073 = !DILocation(line: 107, column: 27, scope: !7041)
!7074 = !DILocation(line: 107, column: 40, scope: !7041)
!7075 = !DILocation(line: 107, column: 7, scope: !7041)
!7076 = !DILocation(line: 108, column: 7, scope: !7041)
!7077 = !DILocation(line: 111, column: 7, scope: !7041)
!7078 = !DILocation(line: 113, column: 1, scope: !7012)
!7079 = distinct !DISubprogram(name: "bound_difference_of_offsetted_base", scope: !1, file: !1, line: 148, type: !7080, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!7080 = !DISubroutineType(types: !7081)
!7081 = !{null, !1655, !7015, !7015, !6298}
!7082 = !DILocalVariable(name: "type", arg: 1, scope: !7079, file: !1, line: 148, type: !1655)
!7083 = !DILocation(line: 148, column: 42, scope: !7079)
!7084 = !DILocalVariable(name: "x", arg: 2, scope: !7079, file: !1, line: 148, type: !7015)
!7085 = !DILocation(line: 148, column: 54, scope: !7079)
!7086 = !DILocalVariable(name: "y", arg: 3, scope: !7079, file: !1, line: 148, type: !7015)
!7087 = !DILocation(line: 148, column: 63, scope: !7079)
!7088 = !DILocalVariable(name: "bnds", arg: 4, scope: !7079, file: !1, line: 149, type: !6298)
!7089 = !DILocation(line: 149, column: 17, scope: !7079)
!7090 = !DILocalVariable(name: "rel", scope: !7079, file: !1, line: 151, type: !1752)
!7091 = !DILocation(line: 151, column: 7, scope: !7079)
!7092 = !DILocation(line: 151, column: 22, scope: !7079)
!7093 = !DILocation(line: 151, column: 25, scope: !7079)
!7094 = !DILocation(line: 151, column: 13, scope: !7079)
!7095 = !DILocalVariable(name: "may_wrap", scope: !7079, file: !1, line: 152, type: !1775)
!7096 = !DILocation(line: 152, column: 8, scope: !7079)
!7097 = !DILocation(line: 152, column: 35, scope: !7079)
!7098 = !DILocation(line: 152, column: 20, scope: !7079)
!7099 = !DILocation(line: 152, column: 19, scope: !7079)
!7100 = !DILocalVariable(name: "m", scope: !7079, file: !1, line: 153, type: !3839)
!7101 = !DILocation(line: 153, column: 9, scope: !7079)
!7102 = !DILocation(line: 169, column: 7, scope: !7103)
!7103 = distinct !DILexicalBlock(scope: !7079, file: !1, line: 169, column: 7)
!7104 = !DILocation(line: 169, column: 11, scope: !7103)
!7105 = !DILocation(line: 169, column: 7, scope: !7079)
!7106 = !DILocation(line: 171, column: 19, scope: !7107)
!7107 = distinct !DILexicalBlock(scope: !7103, file: !1, line: 170, column: 5)
!7108 = !DILocation(line: 171, column: 25, scope: !7107)
!7109 = !DILocation(line: 171, column: 7, scope: !7107)
!7110 = !DILocation(line: 172, column: 19, scope: !7107)
!7111 = !DILocation(line: 172, column: 25, scope: !7107)
!7112 = !DILocation(line: 172, column: 7, scope: !7107)
!7113 = !DILocation(line: 173, column: 7, scope: !7107)
!7114 = !DILocation(line: 176, column: 13, scope: !7079)
!7115 = !DILocation(line: 176, column: 3, scope: !7079)
!7116 = !DILocation(line: 177, column: 23, scope: !7079)
!7117 = !DILocation(line: 177, column: 43, scope: !7079)
!7118 = !DILocation(line: 177, column: 26, scope: !7079)
!7119 = !DILocation(line: 177, column: 3, scope: !7079)
!7120 = !DILocation(line: 178, column: 15, scope: !7079)
!7121 = !DILocation(line: 178, column: 18, scope: !7079)
!7122 = !DILocation(line: 178, column: 3, scope: !7079)
!7123 = !DILocation(line: 179, column: 12, scope: !7079)
!7124 = !DILocation(line: 179, column: 18, scope: !7079)
!7125 = !DILocation(line: 179, column: 22, scope: !7079)
!7126 = !DILocation(line: 179, column: 25, scope: !7079)
!7127 = !DILocation(line: 179, column: 3, scope: !7079)
!7128 = !DILocation(line: 180, column: 12, scope: !7079)
!7129 = !DILocation(line: 180, column: 18, scope: !7079)
!7130 = !DILocation(line: 180, column: 25, scope: !7079)
!7131 = !DILocation(line: 180, column: 31, scope: !7079)
!7132 = !DILocation(line: 180, column: 3, scope: !7079)
!7133 = !DILocation(line: 182, column: 7, scope: !7134)
!7134 = distinct !DILexicalBlock(scope: !7079, file: !1, line: 182, column: 7)
!7135 = !DILocation(line: 182, column: 7, scope: !7079)
!7136 = !DILocation(line: 184, column: 11, scope: !7137)
!7137 = distinct !DILexicalBlock(scope: !7138, file: !1, line: 184, column: 11)
!7138 = distinct !DILexicalBlock(scope: !7134, file: !1, line: 183, column: 5)
!7139 = !DILocation(line: 184, column: 15, scope: !7137)
!7140 = !DILocation(line: 184, column: 11, scope: !7138)
!7141 = !DILocation(line: 185, column: 11, scope: !7137)
!7142 = !DILocation(line: 185, column: 17, scope: !7137)
!7143 = !DILocation(line: 185, column: 24, scope: !7137)
!7144 = !DILocation(line: 185, column: 30, scope: !7137)
!7145 = !DILocation(line: 185, column: 37, scope: !7137)
!7146 = !DILocation(line: 185, column: 2, scope: !7137)
!7147 = !DILocation(line: 187, column: 11, scope: !7137)
!7148 = !DILocation(line: 187, column: 17, scope: !7137)
!7149 = !DILocation(line: 187, column: 21, scope: !7137)
!7150 = !DILocation(line: 187, column: 27, scope: !7137)
!7151 = !DILocation(line: 187, column: 31, scope: !7137)
!7152 = !DILocation(line: 187, column: 2, scope: !7137)
!7153 = !DILocation(line: 188, column: 5, scope: !7138)
!7154 = !DILocation(line: 190, column: 14, scope: !7079)
!7155 = !DILocation(line: 190, column: 3, scope: !7079)
!7156 = !DILocation(line: 191, column: 1, scope: !7079)
!7157 = distinct !DISubprogram(name: "determine_value_range", scope: !1, file: !1, line: 119, type: !7158, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!7158 = !DISubroutineType(types: !7159)
!7159 = !{null, !1655, !1655, !7015, !7015, !7015}
!7160 = !DILocalVariable(name: "type", arg: 1, scope: !7157, file: !1, line: 119, type: !1655)
!7161 = !DILocation(line: 119, column: 29, scope: !7157)
!7162 = !DILocalVariable(name: "var", arg: 2, scope: !7157, file: !1, line: 119, type: !1655)
!7163 = !DILocation(line: 119, column: 40, scope: !7157)
!7164 = !DILocalVariable(name: "off", arg: 3, scope: !7157, file: !1, line: 119, type: !7015)
!7165 = !DILocation(line: 119, column: 51, scope: !7157)
!7166 = !DILocalVariable(name: "min", arg: 4, scope: !7157, file: !1, line: 120, type: !7015)
!7167 = !DILocation(line: 120, column: 16, scope: !7157)
!7168 = !DILocalVariable(name: "max", arg: 5, scope: !7157, file: !1, line: 120, type: !7015)
!7169 = !DILocation(line: 120, column: 27, scope: !7157)
!7170 = !DILocation(line: 123, column: 22, scope: !7171)
!7171 = distinct !DILexicalBlock(scope: !7157, file: !1, line: 123, column: 7)
!7172 = !DILocation(line: 123, column: 7, scope: !7171)
!7173 = !DILocation(line: 123, column: 7, scope: !7157)
!7174 = !DILocation(line: 125, column: 16, scope: !7175)
!7175 = distinct !DILexicalBlock(scope: !7171, file: !1, line: 124, column: 5)
!7176 = !DILocation(line: 125, column: 21, scope: !7175)
!7177 = !DILocation(line: 125, column: 7, scope: !7175)
!7178 = !DILocation(line: 126, column: 16, scope: !7175)
!7179 = !DILocation(line: 126, column: 21, scope: !7175)
!7180 = !DILocation(line: 126, column: 7, scope: !7175)
!7181 = !DILocation(line: 127, column: 7, scope: !7175)
!7182 = !DILocation(line: 132, column: 27, scope: !7157)
!7183 = !DILocation(line: 132, column: 33, scope: !7157)
!7184 = !DILocation(line: 132, column: 38, scope: !7157)
!7185 = !DILocation(line: 132, column: 3, scope: !7157)
!7186 = !DILocation(line: 133, column: 23, scope: !7187)
!7187 = distinct !DILexicalBlock(scope: !7157, file: !1, line: 133, column: 7)
!7188 = !DILocation(line: 133, column: 8, scope: !7187)
!7189 = !DILocation(line: 133, column: 7, scope: !7157)
!7190 = !DILocation(line: 134, column: 5, scope: !7187)
!7191 = !DILocation(line: 138, column: 16, scope: !7192)
!7192 = distinct !DILexicalBlock(scope: !7157, file: !1, line: 138, column: 7)
!7193 = !DILocation(line: 138, column: 7, scope: !7192)
!7194 = !DILocation(line: 138, column: 21, scope: !7192)
!7195 = !DILocation(line: 138, column: 7, scope: !7157)
!7196 = !DILocation(line: 139, column: 14, scope: !7192)
!7197 = !DILocation(line: 139, column: 19, scope: !7192)
!7198 = !DILocation(line: 139, column: 24, scope: !7192)
!7199 = !DILocation(line: 139, column: 5, scope: !7192)
!7200 = !DILocation(line: 141, column: 14, scope: !7192)
!7201 = !DILocation(line: 141, column: 19, scope: !7192)
!7202 = !DILocation(line: 141, column: 24, scope: !7192)
!7203 = !DILocation(line: 141, column: 5, scope: !7192)
!7204 = !DILocation(line: 142, column: 1, scope: !7157)
!7205 = distinct !DISubprogram(name: "refine_bounds_using_guard", scope: !1, file: !1, line: 198, type: !7206, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!7206 = !DISubroutineType(types: !7207)
!7207 = !{null, !1655, !1655, !7015, !1655, !7015, !1655, !132, !1655, !6298}
!7208 = !DILocalVariable(name: "type", arg: 1, scope: !7205, file: !1, line: 198, type: !1655)
!7209 = !DILocation(line: 198, column: 33, scope: !7205)
!7210 = !DILocalVariable(name: "varx", arg: 2, scope: !7205, file: !1, line: 198, type: !1655)
!7211 = !DILocation(line: 198, column: 44, scope: !7205)
!7212 = !DILocalVariable(name: "offx", arg: 3, scope: !7205, file: !1, line: 198, type: !7015)
!7213 = !DILocation(line: 198, column: 56, scope: !7205)
!7214 = !DILocalVariable(name: "vary", arg: 4, scope: !7205, file: !1, line: 199, type: !1655)
!7215 = !DILocation(line: 199, column: 12, scope: !7205)
!7216 = !DILocalVariable(name: "offy", arg: 5, scope: !7205, file: !1, line: 199, type: !7015)
!7217 = !DILocation(line: 199, column: 24, scope: !7205)
!7218 = !DILocalVariable(name: "c0", arg: 6, scope: !7205, file: !1, line: 200, type: !1655)
!7219 = !DILocation(line: 200, column: 12, scope: !7205)
!7220 = !DILocalVariable(name: "cmp", arg: 7, scope: !7205, file: !1, line: 200, type: !132)
!7221 = !DILocation(line: 200, column: 31, scope: !7205)
!7222 = !DILocalVariable(name: "c1", arg: 8, scope: !7205, file: !1, line: 200, type: !1655)
!7223 = !DILocation(line: 200, column: 41, scope: !7205)
!7224 = !DILocalVariable(name: "bnds", arg: 9, scope: !7205, file: !1, line: 201, type: !6298)
!7225 = !DILocation(line: 201, column: 15, scope: !7205)
!7226 = !DILocalVariable(name: "varc0", scope: !7205, file: !1, line: 203, type: !1655)
!7227 = !DILocation(line: 203, column: 8, scope: !7205)
!7228 = !DILocalVariable(name: "varc1", scope: !7205, file: !1, line: 203, type: !1655)
!7229 = !DILocation(line: 203, column: 15, scope: !7205)
!7230 = !DILocalVariable(name: "tmp", scope: !7205, file: !1, line: 203, type: !1655)
!7231 = !DILocation(line: 203, column: 22, scope: !7205)
!7232 = !DILocalVariable(name: "ctype", scope: !7205, file: !1, line: 203, type: !1655)
!7233 = !DILocation(line: 203, column: 27, scope: !7205)
!7234 = !DILocalVariable(name: "offc0", scope: !7205, file: !1, line: 204, type: !3839)
!7235 = !DILocation(line: 204, column: 9, scope: !7205)
!7236 = !DILocalVariable(name: "offc1", scope: !7205, file: !1, line: 204, type: !3839)
!7237 = !DILocation(line: 204, column: 16, scope: !7205)
!7238 = !DILocalVariable(name: "loffx", scope: !7205, file: !1, line: 204, type: !3839)
!7239 = !DILocation(line: 204, column: 23, scope: !7205)
!7240 = !DILocalVariable(name: "loffy", scope: !7205, file: !1, line: 204, type: !3839)
!7241 = !DILocation(line: 204, column: 30, scope: !7205)
!7242 = !DILocalVariable(name: "bnd", scope: !7205, file: !1, line: 204, type: !3839)
!7243 = !DILocation(line: 204, column: 37, scope: !7205)
!7244 = !DILocalVariable(name: "lbound", scope: !7205, file: !1, line: 205, type: !1775)
!7245 = !DILocation(line: 205, column: 8, scope: !7205)
!7246 = !DILocalVariable(name: "no_wrap", scope: !7205, file: !1, line: 206, type: !1775)
!7247 = !DILocation(line: 206, column: 8, scope: !7205)
!7248 = !DILocation(line: 206, column: 33, scope: !7205)
!7249 = !DILocation(line: 206, column: 18, scope: !7205)
!7250 = !DILocalVariable(name: "x_ok", scope: !7205, file: !1, line: 207, type: !1775)
!7251 = !DILocation(line: 207, column: 8, scope: !7205)
!7252 = !DILocalVariable(name: "y_ok", scope: !7205, file: !1, line: 207, type: !1775)
!7253 = !DILocation(line: 207, column: 14, scope: !7205)
!7254 = !DILocation(line: 209, column: 11, scope: !7205)
!7255 = !DILocation(line: 209, column: 3, scope: !7205)
!7256 = !DILocation(line: 215, column: 7, scope: !7257)
!7257 = distinct !DILexicalBlock(scope: !7205, file: !1, line: 210, column: 5)
!7258 = !DILocation(line: 216, column: 7, scope: !7257)
!7259 = !DILocation(line: 217, column: 15, scope: !7257)
!7260 = !DILocation(line: 217, column: 13, scope: !7257)
!7261 = !DILocation(line: 218, column: 39, scope: !7262)
!7262 = distinct !DILexicalBlock(scope: !7257, file: !1, line: 218, column: 11)
!7263 = !DILocation(line: 218, column: 46, scope: !7262)
!7264 = !DILocation(line: 218, column: 12, scope: !7262)
!7265 = !DILocation(line: 218, column: 11, scope: !7257)
!7266 = !DILocation(line: 219, column: 2, scope: !7262)
!7267 = !DILocation(line: 221, column: 7, scope: !7257)
!7268 = !DILocation(line: 227, column: 7, scope: !7257)
!7269 = !DILocation(line: 232, column: 11, scope: !7270)
!7270 = distinct !DILexicalBlock(scope: !7257, file: !1, line: 232, column: 11)
!7271 = !DILocation(line: 232, column: 26, scope: !7270)
!7272 = !DILocation(line: 233, column: 4, scope: !7270)
!7273 = !DILocation(line: 233, column: 8, scope: !7270)
!7274 = !DILocation(line: 232, column: 11, scope: !7257)
!7275 = !DILocation(line: 234, column: 2, scope: !7270)
!7276 = !DILocation(line: 238, column: 15, scope: !7257)
!7277 = !DILocation(line: 238, column: 13, scope: !7257)
!7278 = !DILocation(line: 239, column: 11, scope: !7279)
!7279 = distinct !DILexicalBlock(scope: !7257, file: !1, line: 239, column: 11)
!7280 = !DILocation(line: 239, column: 37, scope: !7279)
!7281 = !DILocation(line: 239, column: 34, scope: !7279)
!7282 = !DILocation(line: 239, column: 11, scope: !7257)
!7283 = !DILocation(line: 240, column: 2, scope: !7279)
!7284 = !DILocation(line: 241, column: 12, scope: !7257)
!7285 = !DILocation(line: 241, column: 10, scope: !7257)
!7286 = !DILocation(line: 242, column: 12, scope: !7257)
!7287 = !DILocation(line: 242, column: 10, scope: !7257)
!7288 = !DILocation(line: 244, column: 11, scope: !7289)
!7289 = distinct !DILexicalBlock(scope: !7257, file: !1, line: 244, column: 11)
!7290 = !DILocation(line: 245, column: 4, scope: !7289)
!7291 = !DILocation(line: 245, column: 24, scope: !7289)
!7292 = !DILocation(line: 245, column: 28, scope: !7289)
!7293 = !DILocation(line: 245, column: 7, scope: !7289)
!7294 = !DILocation(line: 244, column: 11, scope: !7257)
!7295 = !DILocation(line: 247, column: 8, scope: !7296)
!7296 = distinct !DILexicalBlock(scope: !7289, file: !1, line: 246, column: 2)
!7297 = !DILocation(line: 248, column: 4, scope: !7296)
!7298 = !DILocation(line: 250, column: 11, scope: !7299)
!7299 = distinct !DILexicalBlock(scope: !7257, file: !1, line: 250, column: 11)
!7300 = !DILocation(line: 251, column: 4, scope: !7299)
!7301 = !DILocation(line: 251, column: 24, scope: !7299)
!7302 = !DILocation(line: 251, column: 28, scope: !7299)
!7303 = !DILocation(line: 251, column: 7, scope: !7299)
!7304 = !DILocation(line: 250, column: 11, scope: !7257)
!7305 = !DILocation(line: 253, column: 8, scope: !7306)
!7306 = distinct !DILexicalBlock(scope: !7299, file: !1, line: 252, column: 2)
!7307 = !DILocation(line: 254, column: 4, scope: !7306)
!7308 = !DILocation(line: 257, column: 7, scope: !7257)
!7309 = !DILocation(line: 259, column: 7, scope: !7257)
!7310 = !DILocation(line: 262, column: 13, scope: !7205)
!7311 = !DILocation(line: 262, column: 3, scope: !7205)
!7312 = !DILocation(line: 263, column: 13, scope: !7205)
!7313 = !DILocation(line: 263, column: 3, scope: !7205)
!7314 = !DILocation(line: 264, column: 54, scope: !7205)
!7315 = !DILocation(line: 264, column: 28, scope: !7205)
!7316 = !DILocation(line: 264, column: 67, scope: !7205)
!7317 = !DILocation(line: 264, column: 3, scope: !7205)
!7318 = !DILocation(line: 265, column: 54, scope: !7205)
!7319 = !DILocation(line: 265, column: 28, scope: !7205)
!7320 = !DILocation(line: 265, column: 67, scope: !7205)
!7321 = !DILocation(line: 265, column: 3, scope: !7205)
!7322 = !DILocation(line: 271, column: 24, scope: !7323)
!7323 = distinct !DILexicalBlock(scope: !7205, file: !1, line: 271, column: 7)
!7324 = !DILocation(line: 271, column: 30, scope: !7323)
!7325 = !DILocation(line: 271, column: 7, scope: !7323)
!7326 = !DILocation(line: 271, column: 7, scope: !7205)
!7327 = !DILocation(line: 273, column: 13, scope: !7328)
!7328 = distinct !DILexicalBlock(scope: !7323, file: !1, line: 272, column: 5)
!7329 = !DILocation(line: 273, column: 11, scope: !7328)
!7330 = !DILocation(line: 273, column: 28, scope: !7328)
!7331 = !DILocation(line: 273, column: 26, scope: !7328)
!7332 = !DILocation(line: 273, column: 43, scope: !7328)
!7333 = !DILocation(line: 273, column: 41, scope: !7328)
!7334 = !DILocation(line: 274, column: 17, scope: !7328)
!7335 = !DILocation(line: 274, column: 24, scope: !7328)
!7336 = !DILocation(line: 274, column: 7, scope: !7328)
!7337 = !DILocation(line: 275, column: 35, scope: !7328)
!7338 = !DILocation(line: 275, column: 13, scope: !7328)
!7339 = !DILocation(line: 275, column: 11, scope: !7328)
!7340 = !DILocation(line: 276, column: 5, scope: !7328)
!7341 = !DILocation(line: 278, column: 25, scope: !7342)
!7342 = distinct !DILexicalBlock(scope: !7205, file: !1, line: 278, column: 7)
!7343 = !DILocation(line: 278, column: 31, scope: !7342)
!7344 = !DILocation(line: 278, column: 8, scope: !7342)
!7345 = !DILocation(line: 279, column: 7, scope: !7342)
!7346 = !DILocation(line: 279, column: 28, scope: !7342)
!7347 = !DILocation(line: 279, column: 34, scope: !7342)
!7348 = !DILocation(line: 279, column: 11, scope: !7342)
!7349 = !DILocation(line: 278, column: 7, scope: !7205)
!7350 = !DILocation(line: 280, column: 5, scope: !7342)
!7351 = !DILocation(line: 282, column: 17, scope: !7205)
!7352 = !DILocation(line: 282, column: 24, scope: !7205)
!7353 = !DILocation(line: 282, column: 3, scope: !7205)
!7354 = !DILocation(line: 283, column: 17, scope: !7205)
!7355 = !DILocation(line: 283, column: 24, scope: !7205)
!7356 = !DILocation(line: 283, column: 3, scope: !7205)
!7357 = !DILocation(line: 285, column: 7, scope: !7358)
!7358 = distinct !DILexicalBlock(scope: !7205, file: !1, line: 285, column: 7)
!7359 = !DILocation(line: 285, column: 11, scope: !7358)
!7360 = !DILocation(line: 285, column: 22, scope: !7358)
!7361 = !DILocation(line: 285, column: 25, scope: !7358)
!7362 = !DILocation(line: 285, column: 29, scope: !7358)
!7363 = !DILocation(line: 285, column: 7, scope: !7205)
!7364 = !DILocation(line: 287, column: 13, scope: !7365)
!7365 = distinct !DILexicalBlock(scope: !7358, file: !1, line: 286, column: 5)
!7366 = !DILocation(line: 287, column: 11, scope: !7365)
!7367 = !DILocation(line: 287, column: 26, scope: !7365)
!7368 = !DILocation(line: 287, column: 24, scope: !7365)
!7369 = !DILocation(line: 287, column: 39, scope: !7365)
!7370 = !DILocation(line: 287, column: 37, scope: !7365)
!7371 = !DILocation(line: 288, column: 17, scope: !7365)
!7372 = !DILocation(line: 288, column: 24, scope: !7365)
!7373 = !DILocation(line: 288, column: 7, scope: !7365)
!7374 = !DILocation(line: 289, column: 17, scope: !7365)
!7375 = !DILocation(line: 289, column: 24, scope: !7365)
!7376 = !DILocation(line: 289, column: 7, scope: !7365)
!7377 = !DILocation(line: 290, column: 35, scope: !7365)
!7378 = !DILocation(line: 290, column: 13, scope: !7365)
!7379 = !DILocation(line: 290, column: 11, scope: !7365)
!7380 = !DILocation(line: 291, column: 14, scope: !7365)
!7381 = !DILocation(line: 292, column: 5, scope: !7365)
!7382 = !DILocation(line: 310, column: 7, scope: !7383)
!7383 = distinct !DILexicalBlock(scope: !7205, file: !1, line: 310, column: 7)
!7384 = !DILocation(line: 310, column: 7, scope: !7205)
!7385 = !DILocation(line: 312, column: 12, scope: !7386)
!7386 = distinct !DILexicalBlock(scope: !7383, file: !1, line: 311, column: 5)
!7387 = !DILocation(line: 313, column: 12, scope: !7386)
!7388 = !DILocation(line: 314, column: 5, scope: !7386)
!7389 = !DILocation(line: 317, column: 30, scope: !7390)
!7390 = distinct !DILexicalBlock(scope: !7383, file: !1, line: 316, column: 5)
!7391 = !DILocation(line: 317, column: 15, scope: !7390)
!7392 = !DILocation(line: 318, column: 8, scope: !7390)
!7393 = !DILocation(line: 318, column: 20, scope: !7390)
!7394 = !DILocation(line: 318, column: 27, scope: !7390)
!7395 = !DILocation(line: 318, column: 11, scope: !7390)
!7396 = !DILocation(line: 318, column: 34, scope: !7390)
!7397 = !DILocation(line: 317, column: 14, scope: !7390)
!7398 = !DILocation(line: 317, column: 12, scope: !7390)
!7399 = !DILocation(line: 319, column: 30, scope: !7390)
!7400 = !DILocation(line: 319, column: 15, scope: !7390)
!7401 = !DILocation(line: 320, column: 8, scope: !7390)
!7402 = !DILocation(line: 320, column: 20, scope: !7390)
!7403 = !DILocation(line: 320, column: 27, scope: !7390)
!7404 = !DILocation(line: 320, column: 11, scope: !7390)
!7405 = !DILocation(line: 320, column: 34, scope: !7390)
!7406 = !DILocation(line: 319, column: 14, scope: !7390)
!7407 = !DILocation(line: 319, column: 12, scope: !7390)
!7408 = !DILocation(line: 323, column: 7, scope: !7409)
!7409 = distinct !DILexicalBlock(scope: !7205, file: !1, line: 323, column: 7)
!7410 = !DILocation(line: 323, column: 12, scope: !7409)
!7411 = !DILocation(line: 323, column: 15, scope: !7409)
!7412 = !DILocation(line: 323, column: 7, scope: !7205)
!7413 = !DILocation(line: 325, column: 17, scope: !7414)
!7414 = distinct !DILexicalBlock(scope: !7409, file: !1, line: 324, column: 5)
!7415 = !DILocation(line: 325, column: 7, scope: !7414)
!7416 = !DILocation(line: 326, column: 16, scope: !7414)
!7417 = !DILocation(line: 326, column: 21, scope: !7414)
!7418 = !DILocation(line: 326, column: 28, scope: !7414)
!7419 = !DILocation(line: 326, column: 7, scope: !7414)
!7420 = !DILocation(line: 327, column: 16, scope: !7414)
!7421 = !DILocation(line: 327, column: 21, scope: !7414)
!7422 = !DILocation(line: 327, column: 26, scope: !7414)
!7423 = !DILocation(line: 327, column: 7, scope: !7414)
!7424 = !DILocation(line: 328, column: 16, scope: !7414)
!7425 = !DILocation(line: 328, column: 21, scope: !7414)
!7426 = !DILocation(line: 328, column: 26, scope: !7414)
!7427 = !DILocation(line: 328, column: 7, scope: !7414)
!7428 = !DILocation(line: 330, column: 11, scope: !7429)
!7429 = distinct !DILexicalBlock(scope: !7414, file: !1, line: 330, column: 11)
!7430 = !DILocation(line: 330, column: 15, scope: !7429)
!7431 = !DILocation(line: 330, column: 11, scope: !7414)
!7432 = !DILocation(line: 331, column: 14, scope: !7429)
!7433 = !DILocation(line: 331, column: 19, scope: !7429)
!7434 = !DILocation(line: 331, column: 2, scope: !7429)
!7435 = !DILocation(line: 333, column: 11, scope: !7436)
!7436 = distinct !DILexicalBlock(scope: !7414, file: !1, line: 333, column: 11)
!7437 = !DILocation(line: 333, column: 11, scope: !7414)
!7438 = !DILocation(line: 335, column: 13, scope: !7439)
!7439 = distinct !DILexicalBlock(scope: !7436, file: !1, line: 334, column: 2)
!7440 = !DILocation(line: 335, column: 18, scope: !7439)
!7441 = !DILocation(line: 335, column: 4, scope: !7439)
!7442 = !DILocation(line: 336, column: 17, scope: !7443)
!7443 = distinct !DILexicalBlock(scope: !7439, file: !1, line: 336, column: 8)
!7444 = !DILocation(line: 336, column: 23, scope: !7443)
!7445 = !DILocation(line: 336, column: 30, scope: !7443)
!7446 = !DILocation(line: 336, column: 8, scope: !7443)
!7447 = !DILocation(line: 336, column: 35, scope: !7443)
!7448 = !DILocation(line: 336, column: 8, scope: !7439)
!7449 = !DILocation(line: 337, column: 15, scope: !7443)
!7450 = !DILocation(line: 337, column: 21, scope: !7443)
!7451 = !DILocation(line: 337, column: 28, scope: !7443)
!7452 = !DILocation(line: 337, column: 6, scope: !7443)
!7453 = !DILocation(line: 338, column: 2, scope: !7439)
!7454 = !DILocation(line: 341, column: 17, scope: !7455)
!7455 = distinct !DILexicalBlock(scope: !7456, file: !1, line: 341, column: 8)
!7456 = distinct !DILexicalBlock(scope: !7436, file: !1, line: 340, column: 2)
!7457 = !DILocation(line: 341, column: 22, scope: !7455)
!7458 = !DILocation(line: 341, column: 28, scope: !7455)
!7459 = !DILocation(line: 341, column: 8, scope: !7455)
!7460 = !DILocation(line: 341, column: 32, scope: !7455)
!7461 = !DILocation(line: 341, column: 8, scope: !7456)
!7462 = !DILocation(line: 342, column: 15, scope: !7455)
!7463 = !DILocation(line: 342, column: 21, scope: !7455)
!7464 = !DILocation(line: 342, column: 25, scope: !7455)
!7465 = !DILocation(line: 342, column: 6, scope: !7455)
!7466 = !DILocation(line: 344, column: 18, scope: !7414)
!7467 = !DILocation(line: 344, column: 7, scope: !7414)
!7468 = !DILocation(line: 345, column: 5, scope: !7414)
!7469 = !DILocation(line: 347, column: 14, scope: !7205)
!7470 = !DILocation(line: 347, column: 3, scope: !7205)
!7471 = !DILocation(line: 348, column: 14, scope: !7205)
!7472 = !DILocation(line: 348, column: 3, scope: !7205)
!7473 = !DILabel(scope: !7205, name: "end", file: !1, line: 349)
!7474 = !DILocation(line: 349, column: 1, scope: !7205)
!7475 = !DILocation(line: 350, column: 14, scope: !7205)
!7476 = !DILocation(line: 350, column: 3, scope: !7205)
!7477 = !DILocation(line: 351, column: 14, scope: !7205)
!7478 = !DILocation(line: 351, column: 3, scope: !7205)
!7479 = !DILocation(line: 352, column: 1, scope: !7205)
!7480 = distinct !DISubprogram(name: "bounds_negate", scope: !1, file: !1, line: 484, type: !7481, scopeLine: 485, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!7481 = !DISubroutineType(types: !7482)
!7482 = !{null, !6298}
!7483 = !DILocalVariable(name: "bnds", arg: 1, scope: !7480, file: !1, line: 484, type: !6298)
!7484 = !DILocation(line: 484, column: 24, scope: !7480)
!7485 = !DILocalVariable(name: "tmp", scope: !7480, file: !1, line: 486, type: !3839)
!7486 = !DILocation(line: 486, column: 9, scope: !7480)
!7487 = !DILocation(line: 488, column: 17, scope: !7480)
!7488 = !DILocation(line: 488, column: 22, scope: !7480)
!7489 = !DILocation(line: 488, column: 28, scope: !7480)
!7490 = !DILocation(line: 488, column: 3, scope: !7480)
!7491 = !DILocation(line: 489, column: 12, scope: !7480)
!7492 = !DILocation(line: 489, column: 18, scope: !7480)
!7493 = !DILocation(line: 489, column: 22, scope: !7480)
!7494 = !DILocation(line: 489, column: 28, scope: !7480)
!7495 = !DILocation(line: 489, column: 3, scope: !7480)
!7496 = !DILocation(line: 490, column: 12, scope: !7480)
!7497 = !DILocation(line: 490, column: 18, scope: !7480)
!7498 = !DILocation(line: 490, column: 25, scope: !7480)
!7499 = !DILocation(line: 490, column: 3, scope: !7480)
!7500 = !DILocation(line: 491, column: 14, scope: !7480)
!7501 = !DILocation(line: 491, column: 3, scope: !7480)
!7502 = !DILocation(line: 492, column: 1, scope: !7480)
!7503 = distinct !DISubprogram(name: "number_of_iterations_ne_max", scope: !1, file: !1, line: 545, type: !7504, scopeLine: 547, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!7504 = !DISubroutineType(types: !7505)
!7505 = !{null, !7015, !1775, !1655, !1655, !6298}
!7506 = !DILocalVariable(name: "bnd", arg: 1, scope: !7503, file: !1, line: 545, type: !7015)
!7507 = !DILocation(line: 545, column: 36, scope: !7503)
!7508 = !DILocalVariable(name: "no_overflow", arg: 2, scope: !7503, file: !1, line: 545, type: !1775)
!7509 = !DILocation(line: 545, column: 46, scope: !7503)
!7510 = !DILocalVariable(name: "c", arg: 3, scope: !7503, file: !1, line: 545, type: !1655)
!7511 = !DILocation(line: 545, column: 64, scope: !7503)
!7512 = !DILocalVariable(name: "s", arg: 4, scope: !7503, file: !1, line: 545, type: !1655)
!7513 = !DILocation(line: 545, column: 72, scope: !7503)
!7514 = !DILocalVariable(name: "bnds", arg: 5, scope: !7503, file: !1, line: 546, type: !6298)
!7515 = !DILocation(line: 546, column: 17, scope: !7503)
!7516 = !DILocalVariable(name: "max", scope: !7503, file: !1, line: 548, type: !1704)
!7517 = !DILocation(line: 548, column: 14, scope: !7503)
!7518 = !DILocalVariable(name: "d", scope: !7503, file: !1, line: 549, type: !3839)
!7519 = !DILocation(line: 549, column: 9, scope: !7503)
!7520 = !DILocation(line: 554, column: 8, scope: !7521)
!7521 = distinct !DILexicalBlock(scope: !7503, file: !1, line: 554, column: 7)
!7522 = !DILocation(line: 554, column: 20, scope: !7521)
!7523 = !DILocation(line: 554, column: 39, scope: !7521)
!7524 = !DILocation(line: 554, column: 54, scope: !7521)
!7525 = !DILocation(line: 554, column: 57, scope: !7521)
!7526 = !DILocation(line: 554, column: 24, scope: !7521)
!7527 = !DILocation(line: 554, column: 7, scope: !7503)
!7528 = !DILocation(line: 556, column: 30, scope: !7529)
!7529 = distinct !DILexicalBlock(scope: !7521, file: !1, line: 555, column: 5)
!7530 = !DILocation(line: 557, column: 43, scope: !7529)
!7531 = !DILocation(line: 557, column: 25, scope: !7529)
!7532 = !DILocation(line: 557, column: 11, scope: !7529)
!7533 = !DILocation(line: 557, column: 9, scope: !7529)
!7534 = !DILocation(line: 556, column: 13, scope: !7529)
!7535 = !DILocation(line: 558, column: 27, scope: !7529)
!7536 = !DILocation(line: 558, column: 7, scope: !7529)
!7537 = !DILocation(line: 559, column: 7, scope: !7529)
!7538 = !DILocation(line: 563, column: 7, scope: !7539)
!7539 = distinct !DILexicalBlock(scope: !7503, file: !1, line: 563, column: 7)
!7540 = !DILocation(line: 563, column: 19, scope: !7539)
!7541 = !DILocation(line: 563, column: 31, scope: !7539)
!7542 = !DILocation(line: 563, column: 37, scope: !7539)
!7543 = !DILocation(line: 563, column: 22, scope: !7539)
!7544 = !DILocation(line: 563, column: 44, scope: !7539)
!7545 = !DILocation(line: 563, column: 7, scope: !7503)
!7546 = !DILocation(line: 564, column: 14, scope: !7539)
!7547 = !DILocation(line: 564, column: 19, scope: !7539)
!7548 = !DILocation(line: 564, column: 25, scope: !7539)
!7549 = !DILocation(line: 564, column: 5, scope: !7539)
!7550 = !DILocation(line: 565, column: 12, scope: !7551)
!7551 = distinct !DILexicalBlock(scope: !7539, file: !1, line: 565, column: 12)
!7552 = !DILocation(line: 565, column: 26, scope: !7551)
!7553 = !DILocation(line: 565, column: 12, scope: !7539)
!7554 = !DILocation(line: 566, column: 25, scope: !7551)
!7555 = !DILocation(line: 566, column: 50, scope: !7551)
!7556 = !DILocation(line: 566, column: 30, scope: !7551)
!7557 = !DILocation(line: 566, column: 5, scope: !7551)
!7558 = !DILocation(line: 568, column: 25, scope: !7551)
!7559 = !DILocation(line: 568, column: 47, scope: !7551)
!7560 = !DILocation(line: 568, column: 30, scope: !7551)
!7561 = !DILocation(line: 568, column: 5, scope: !7551)
!7562 = !DILocation(line: 571, column: 13, scope: !7503)
!7563 = !DILocation(line: 571, column: 3, scope: !7503)
!7564 = !DILocation(line: 572, column: 23, scope: !7503)
!7565 = !DILocation(line: 572, column: 46, scope: !7503)
!7566 = !DILocation(line: 572, column: 26, scope: !7503)
!7567 = !DILocation(line: 572, column: 3, scope: !7503)
!7568 = !DILocation(line: 573, column: 15, scope: !7503)
!7569 = !DILocation(line: 573, column: 20, scope: !7503)
!7570 = !DILocation(line: 573, column: 25, scope: !7503)
!7571 = !DILocation(line: 573, column: 3, scope: !7503)
!7572 = !DILocation(line: 574, column: 14, scope: !7503)
!7573 = !DILocation(line: 574, column: 3, scope: !7503)
!7574 = !DILocation(line: 575, column: 1, scope: !7503)
!7575 = distinct !DISubprogram(name: "inverse", scope: !1, file: !1, line: 497, type: !4851, scopeLine: 498, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!7576 = !DILocalVariable(name: "x", arg: 1, scope: !7575, file: !1, line: 497, type: !1655)
!7577 = !DILocation(line: 497, column: 15, scope: !7575)
!7578 = !DILocalVariable(name: "mask", arg: 2, scope: !7575, file: !1, line: 497, type: !1655)
!7579 = !DILocation(line: 497, column: 23, scope: !7575)
!7580 = !DILocalVariable(name: "type", scope: !7575, file: !1, line: 499, type: !1655)
!7581 = !DILocation(line: 499, column: 8, scope: !7575)
!7582 = !DILocation(line: 499, column: 15, scope: !7575)
!7583 = !DILocalVariable(name: "rslt", scope: !7575, file: !1, line: 500, type: !1655)
!7584 = !DILocation(line: 500, column: 8, scope: !7575)
!7585 = !DILocalVariable(name: "ctr", scope: !7575, file: !1, line: 501, type: !5)
!7586 = !DILocation(line: 501, column: 12, scope: !7575)
!7587 = !DILocation(line: 501, column: 35, scope: !7575)
!7588 = !DILocation(line: 501, column: 18, scope: !7575)
!7589 = !DILocation(line: 503, column: 7, scope: !7590)
!7590 = distinct !DILexicalBlock(scope: !7575, file: !1, line: 503, column: 7)
!7591 = !DILocation(line: 503, column: 29, scope: !7590)
!7592 = !DILocation(line: 503, column: 7, scope: !7575)
!7593 = !DILocalVariable(name: "ix", scope: !7594, file: !1, line: 505, type: !1709)
!7594 = distinct !DILexicalBlock(scope: !7590, file: !1, line: 504, column: 5)
!7595 = !DILocation(line: 505, column: 30, scope: !7594)
!7596 = !DILocalVariable(name: "imask", scope: !7594, file: !1, line: 506, type: !1709)
!7597 = !DILocation(line: 506, column: 30, scope: !7594)
!7598 = !DILocalVariable(name: "irslt", scope: !7594, file: !1, line: 507, type: !1709)
!7599 = !DILocation(line: 507, column: 30, scope: !7594)
!7600 = !DILocation(line: 509, column: 7, scope: !7594)
!7601 = !DILocation(line: 510, column: 7, scope: !7594)
!7602 = !DILocation(line: 512, column: 27, scope: !7594)
!7603 = !DILocation(line: 512, column: 12, scope: !7594)
!7604 = !DILocation(line: 512, column: 10, scope: !7594)
!7605 = !DILocation(line: 513, column: 30, scope: !7594)
!7606 = !DILocation(line: 513, column: 15, scope: !7594)
!7607 = !DILocation(line: 513, column: 13, scope: !7594)
!7608 = !DILocation(line: 515, column: 7, scope: !7594)
!7609 = !DILocation(line: 515, column: 14, scope: !7610)
!7610 = distinct !DILexicalBlock(scope: !7611, file: !1, line: 515, column: 7)
!7611 = distinct !DILexicalBlock(scope: !7594, file: !1, line: 515, column: 7)
!7612 = !DILocation(line: 515, column: 7, scope: !7611)
!7613 = !DILocation(line: 517, column: 13, scope: !7614)
!7614 = distinct !DILexicalBlock(scope: !7610, file: !1, line: 516, column: 2)
!7615 = !DILocation(line: 517, column: 10, scope: !7614)
!7616 = !DILocation(line: 518, column: 10, scope: !7614)
!7617 = !DILocation(line: 518, column: 7, scope: !7614)
!7618 = !DILocation(line: 519, column: 2, scope: !7614)
!7619 = !DILocation(line: 515, column: 22, scope: !7610)
!7620 = !DILocation(line: 515, column: 7, scope: !7610)
!7621 = distinct !{!7621, !7612, !7622}
!7622 = !DILocation(line: 519, column: 2, scope: !7611)
!7623 = !DILocation(line: 520, column: 16, scope: !7594)
!7624 = !DILocation(line: 520, column: 13, scope: !7594)
!7625 = !DILocation(line: 522, column: 34, scope: !7594)
!7626 = !DILocation(line: 522, column: 40, scope: !7594)
!7627 = !DILocation(line: 522, column: 14, scope: !7594)
!7628 = !DILocation(line: 522, column: 12, scope: !7594)
!7629 = !DILocation(line: 523, column: 5, scope: !7594)
!7630 = !DILocation(line: 526, column: 29, scope: !7631)
!7631 = distinct !DILexicalBlock(scope: !7590, file: !1, line: 525, column: 5)
!7632 = !DILocation(line: 526, column: 14, scope: !7631)
!7633 = !DILocation(line: 526, column: 12, scope: !7631)
!7634 = !DILocation(line: 527, column: 7, scope: !7631)
!7635 = !DILocation(line: 527, column: 14, scope: !7636)
!7636 = distinct !DILexicalBlock(scope: !7637, file: !1, line: 527, column: 7)
!7637 = distinct !DILexicalBlock(scope: !7631, file: !1, line: 527, column: 7)
!7638 = !DILocation(line: 527, column: 7, scope: !7637)
!7639 = !DILocation(line: 529, column: 39, scope: !7640)
!7640 = distinct !DILexicalBlock(scope: !7636, file: !1, line: 528, column: 2)
!7641 = !DILocation(line: 529, column: 45, scope: !7640)
!7642 = !DILocation(line: 529, column: 11, scope: !7640)
!7643 = !DILocation(line: 529, column: 9, scope: !7640)
!7644 = !DILocation(line: 530, column: 36, scope: !7640)
!7645 = !DILocation(line: 530, column: 39, scope: !7640)
!7646 = !DILocation(line: 530, column: 8, scope: !7640)
!7647 = !DILocation(line: 530, column: 6, scope: !7640)
!7648 = !DILocation(line: 531, column: 2, scope: !7640)
!7649 = !DILocation(line: 527, column: 22, scope: !7636)
!7650 = !DILocation(line: 527, column: 7, scope: !7636)
!7651 = distinct !{!7651, !7638, !7652}
!7652 = !DILocation(line: 531, column: 2, scope: !7637)
!7653 = !DILocation(line: 532, column: 45, scope: !7631)
!7654 = !DILocation(line: 532, column: 51, scope: !7631)
!7655 = !DILocation(line: 532, column: 14, scope: !7631)
!7656 = !DILocation(line: 532, column: 12, scope: !7631)
!7657 = !DILocation(line: 535, column: 10, scope: !7575)
!7658 = !DILocation(line: 535, column: 3, scope: !7575)
!7659 = distinct !DISubprogram(name: "number_of_iterations_lt_to_ne", scope: !1, file: !1, line: 673, type: !7660, scopeLine: 677, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!7660 = !DISubroutineType(types: !7661)
!7661 = !{!1775, !1655, !3815, !3815, !3539, !2020, !1655, !1775, !6298}
!7662 = !DILocalVariable(name: "type", arg: 1, scope: !7659, file: !1, line: 673, type: !1655)
!7663 = !DILocation(line: 673, column: 37, scope: !7659)
!7664 = !DILocalVariable(name: "iv0", arg: 2, scope: !7659, file: !1, line: 673, type: !3815)
!7665 = !DILocation(line: 673, column: 54, scope: !7659)
!7666 = !DILocalVariable(name: "iv1", arg: 3, scope: !7659, file: !1, line: 673, type: !3815)
!7667 = !DILocation(line: 673, column: 70, scope: !7659)
!7668 = !DILocalVariable(name: "niter", arg: 4, scope: !7659, file: !1, line: 674, type: !3539)
!7669 = !DILocation(line: 674, column: 35, scope: !7659)
!7670 = !DILocalVariable(name: "delta", arg: 5, scope: !7659, file: !1, line: 675, type: !2020)
!7671 = !DILocation(line: 675, column: 17, scope: !7659)
!7672 = !DILocalVariable(name: "step", arg: 6, scope: !7659, file: !1, line: 675, type: !1655)
!7673 = !DILocation(line: 675, column: 29, scope: !7659)
!7674 = !DILocalVariable(name: "exit_must_be_taken", arg: 7, scope: !7659, file: !1, line: 676, type: !1775)
!7675 = !DILocation(line: 676, column: 16, scope: !7659)
!7676 = !DILocalVariable(name: "bnds", arg: 8, scope: !7659, file: !1, line: 676, type: !6298)
!7677 = !DILocation(line: 676, column: 44, scope: !7659)
!7678 = !DILocalVariable(name: "niter_type", scope: !7659, file: !1, line: 678, type: !1655)
!7679 = !DILocation(line: 678, column: 8, scope: !7659)
!7680 = !DILocation(line: 678, column: 21, scope: !7659)
!7681 = !DILocalVariable(name: "mod", scope: !7659, file: !1, line: 679, type: !1655)
!7682 = !DILocation(line: 679, column: 8, scope: !7659)
!7683 = !DILocation(line: 679, column: 14, scope: !7659)
!7684 = !DILocalVariable(name: "tmod", scope: !7659, file: !1, line: 680, type: !1655)
!7685 = !DILocation(line: 680, column: 8, scope: !7659)
!7686 = !DILocalVariable(name: "mmod", scope: !7659, file: !1, line: 681, type: !3839)
!7687 = !DILocation(line: 681, column: 9, scope: !7659)
!7688 = !DILocalVariable(name: "assumption", scope: !7659, file: !1, line: 682, type: !1655)
!7689 = !DILocation(line: 682, column: 8, scope: !7659)
!7690 = !DILocation(line: 682, column: 21, scope: !7659)
!7691 = !DILocalVariable(name: "bound", scope: !7659, file: !1, line: 682, type: !1655)
!7692 = !DILocation(line: 682, column: 40, scope: !7659)
!7693 = !DILocalVariable(name: "noloop", scope: !7659, file: !1, line: 682, type: !1655)
!7694 = !DILocation(line: 682, column: 47, scope: !7659)
!7695 = !DILocalVariable(name: "ret", scope: !7659, file: !1, line: 683, type: !1775)
!7696 = !DILocation(line: 683, column: 8, scope: !7659)
!7697 = !DILocalVariable(name: "fv_comp_no_overflow", scope: !7659, file: !1, line: 683, type: !1775)
!7698 = !DILocation(line: 683, column: 21, scope: !7659)
!7699 = !DILocalVariable(name: "type1", scope: !7659, file: !1, line: 684, type: !1655)
!7700 = !DILocation(line: 684, column: 8, scope: !7659)
!7701 = !DILocation(line: 684, column: 16, scope: !7659)
!7702 = !DILocation(line: 685, column: 7, scope: !7703)
!7703 = distinct !DILexicalBlock(scope: !7659, file: !1, line: 685, column: 7)
!7704 = !DILocation(line: 685, column: 7, scope: !7659)
!7705 = !DILocation(line: 686, column: 13, scope: !7703)
!7706 = !DILocation(line: 686, column: 11, scope: !7703)
!7707 = !DILocation(line: 686, column: 5, scope: !7703)
!7708 = !DILocation(line: 688, column: 7, scope: !7709)
!7709 = distinct !DILexicalBlock(scope: !7659, file: !1, line: 688, column: 7)
!7710 = !DILocation(line: 688, column: 23, scope: !7709)
!7711 = !DILocation(line: 688, column: 7, scope: !7659)
!7712 = !DILocation(line: 689, column: 5, scope: !7709)
!7713 = !DILocation(line: 690, column: 25, scope: !7714)
!7714 = distinct !DILexicalBlock(scope: !7659, file: !1, line: 690, column: 7)
!7715 = !DILocation(line: 690, column: 7, scope: !7714)
!7716 = !DILocation(line: 690, column: 7, scope: !7659)
!7717 = !DILocation(line: 691, column: 11, scope: !7714)
!7718 = !DILocation(line: 691, column: 9, scope: !7714)
!7719 = !DILocation(line: 691, column: 5, scope: !7714)
!7720 = !DILocation(line: 692, column: 10, scope: !7659)
!7721 = !DILocation(line: 692, column: 8, scope: !7659)
!7722 = !DILocation(line: 694, column: 13, scope: !7659)
!7723 = !DILocation(line: 694, column: 3, scope: !7659)
!7724 = !DILocation(line: 695, column: 23, scope: !7659)
!7725 = !DILocation(line: 695, column: 49, scope: !7659)
!7726 = !DILocation(line: 695, column: 29, scope: !7659)
!7727 = !DILocation(line: 695, column: 3, scope: !7659)
!7728 = !DILocation(line: 696, column: 12, scope: !7659)
!7729 = !DILocation(line: 696, column: 18, scope: !7659)
!7730 = !DILocation(line: 696, column: 3, scope: !7659)
!7731 = !DILocation(line: 705, column: 22, scope: !7732)
!7732 = distinct !DILexicalBlock(scope: !7659, file: !1, line: 705, column: 7)
!7733 = !DILocation(line: 705, column: 7, scope: !7732)
!7734 = !DILocation(line: 705, column: 27, scope: !7732)
!7735 = !DILocation(line: 705, column: 30, scope: !7732)
!7736 = !DILocation(line: 705, column: 7, scope: !7659)
!7737 = !DILocation(line: 706, column: 25, scope: !7732)
!7738 = !DILocation(line: 706, column: 5, scope: !7732)
!7739 = !DILocation(line: 707, column: 13, scope: !7740)
!7740 = distinct !DILexicalBlock(scope: !7732, file: !1, line: 707, column: 12)
!7741 = !DILocation(line: 707, column: 12, scope: !7732)
!7742 = !DILocation(line: 708, column: 25, scope: !7740)
!7743 = !DILocation(line: 708, column: 5, scope: !7740)
!7744 = !DILocation(line: 711, column: 7, scope: !7740)
!7745 = !DILocation(line: 711, column: 12, scope: !7740)
!7746 = !DILocation(line: 711, column: 24, scope: !7740)
!7747 = !DILocation(line: 711, column: 45, scope: !7740)
!7748 = !DILocation(line: 711, column: 50, scope: !7740)
!7749 = !DILocation(line: 711, column: 27, scope: !7740)
!7750 = !DILocation(line: 712, column: 6, scope: !7740)
!7751 = !DILocation(line: 712, column: 10, scope: !7740)
!7752 = !DILocation(line: 712, column: 15, scope: !7740)
!7753 = !DILocation(line: 712, column: 27, scope: !7740)
!7754 = !DILocation(line: 712, column: 48, scope: !7740)
!7755 = !DILocation(line: 712, column: 53, scope: !7740)
!7756 = !DILocation(line: 712, column: 30, scope: !7740)
!7757 = !DILocation(line: 0, scope: !7740)
!7758 = !DILocation(line: 711, column: 6, scope: !7740)
!7759 = !DILocation(line: 710, column: 25, scope: !7740)
!7760 = !DILocation(line: 714, column: 25, scope: !7761)
!7761 = distinct !DILexicalBlock(scope: !7659, file: !1, line: 714, column: 7)
!7762 = !DILocation(line: 714, column: 30, scope: !7761)
!7763 = !DILocation(line: 714, column: 7, scope: !7761)
!7764 = !DILocation(line: 714, column: 7, scope: !7659)
!7765 = !DILocation(line: 719, column: 12, scope: !7766)
!7766 = distinct !DILexicalBlock(scope: !7767, file: !1, line: 719, column: 11)
!7767 = distinct !DILexicalBlock(scope: !7761, file: !1, line: 715, column: 5)
!7768 = !DILocation(line: 719, column: 11, scope: !7767)
!7769 = !DILocation(line: 721, column: 12, scope: !7770)
!7770 = distinct !DILexicalBlock(scope: !7766, file: !1, line: 720, column: 2)
!7771 = !DILocation(line: 721, column: 10, scope: !7770)
!7772 = !DILocation(line: 723, column: 17, scope: !7770)
!7773 = !DILocation(line: 723, column: 15, scope: !7770)
!7774 = !DILocation(line: 725, column: 23, scope: !7775)
!7775 = distinct !DILexicalBlock(scope: !7770, file: !1, line: 725, column: 8)
!7776 = !DILocation(line: 725, column: 8, scope: !7775)
!7777 = !DILocation(line: 725, column: 8, scope: !7770)
!7778 = !DILocation(line: 726, column: 6, scope: !7775)
!7779 = !DILocation(line: 727, column: 2, scope: !7770)
!7780 = !DILocation(line: 728, column: 20, scope: !7781)
!7781 = distinct !DILexicalBlock(scope: !7767, file: !1, line: 728, column: 11)
!7782 = !DILocation(line: 728, column: 26, scope: !7781)
!7783 = !DILocation(line: 728, column: 32, scope: !7781)
!7784 = !DILocation(line: 728, column: 11, scope: !7781)
!7785 = !DILocation(line: 728, column: 39, scope: !7781)
!7786 = !DILocation(line: 728, column: 11, scope: !7767)
!7787 = !DILocation(line: 729, column: 11, scope: !7781)
!7788 = !DILocation(line: 729, column: 9, scope: !7781)
!7789 = !DILocation(line: 729, column: 2, scope: !7781)
!7790 = !DILocation(line: 730, column: 16, scope: !7791)
!7791 = distinct !DILexicalBlock(scope: !7781, file: !1, line: 730, column: 16)
!7792 = !DILocation(line: 730, column: 16, scope: !7781)
!7793 = !DILocation(line: 731, column: 11, scope: !7791)
!7794 = !DILocation(line: 731, column: 9, scope: !7791)
!7795 = !DILocation(line: 731, column: 2, scope: !7791)
!7796 = !DILocation(line: 736, column: 11, scope: !7791)
!7797 = !DILocation(line: 736, column: 9, scope: !7791)
!7798 = !DILocation(line: 740, column: 5, scope: !7767)
!7799 = !DILocation(line: 746, column: 12, scope: !7800)
!7800 = distinct !DILexicalBlock(scope: !7801, file: !1, line: 746, column: 11)
!7801 = distinct !DILexicalBlock(scope: !7761, file: !1, line: 742, column: 5)
!7802 = !DILocation(line: 746, column: 11, scope: !7801)
!7803 = !DILocation(line: 748, column: 12, scope: !7804)
!7804 = distinct !DILexicalBlock(scope: !7800, file: !1, line: 747, column: 2)
!7805 = !DILocation(line: 748, column: 10, scope: !7804)
!7806 = !DILocation(line: 750, column: 17, scope: !7804)
!7807 = !DILocation(line: 750, column: 15, scope: !7804)
!7808 = !DILocation(line: 752, column: 23, scope: !7809)
!7809 = distinct !DILexicalBlock(scope: !7804, file: !1, line: 752, column: 8)
!7810 = !DILocation(line: 752, column: 8, scope: !7809)
!7811 = !DILocation(line: 752, column: 8, scope: !7804)
!7812 = !DILocation(line: 753, column: 6, scope: !7809)
!7813 = !DILocation(line: 754, column: 2, scope: !7804)
!7814 = !DILocation(line: 755, column: 20, scope: !7815)
!7815 = distinct !DILexicalBlock(scope: !7801, file: !1, line: 755, column: 11)
!7816 = !DILocation(line: 755, column: 26, scope: !7815)
!7817 = !DILocation(line: 755, column: 32, scope: !7815)
!7818 = !DILocation(line: 755, column: 11, scope: !7815)
!7819 = !DILocation(line: 755, column: 39, scope: !7815)
!7820 = !DILocation(line: 755, column: 11, scope: !7801)
!7821 = !DILocation(line: 756, column: 11, scope: !7815)
!7822 = !DILocation(line: 756, column: 9, scope: !7815)
!7823 = !DILocation(line: 756, column: 2, scope: !7815)
!7824 = !DILocation(line: 757, column: 16, scope: !7825)
!7825 = distinct !DILexicalBlock(scope: !7815, file: !1, line: 757, column: 16)
!7826 = !DILocation(line: 757, column: 16, scope: !7815)
!7827 = !DILocation(line: 758, column: 11, scope: !7825)
!7828 = !DILocation(line: 758, column: 9, scope: !7825)
!7829 = !DILocation(line: 758, column: 2, scope: !7825)
!7830 = !DILocation(line: 765, column: 11, scope: !7825)
!7831 = !DILocation(line: 765, column: 9, scope: !7825)
!7832 = !DILocation(line: 771, column: 26, scope: !7833)
!7833 = distinct !DILexicalBlock(scope: !7659, file: !1, line: 771, column: 7)
!7834 = !DILocation(line: 771, column: 8, scope: !7833)
!7835 = !DILocation(line: 771, column: 7, scope: !7659)
!7836 = !DILocation(line: 772, column: 26, scope: !7833)
!7837 = !DILocation(line: 772, column: 5, scope: !7833)
!7838 = !DILocation(line: 772, column: 12, scope: !7833)
!7839 = !DILocation(line: 772, column: 24, scope: !7833)
!7840 = !DILocation(line: 775, column: 23, scope: !7841)
!7841 = distinct !DILexicalBlock(scope: !7659, file: !1, line: 775, column: 7)
!7842 = !DILocation(line: 775, column: 8, scope: !7841)
!7843 = !DILocation(line: 775, column: 7, scope: !7659)
!7844 = !DILocation(line: 776, column: 26, scope: !7841)
!7845 = !DILocation(line: 776, column: 5, scope: !7841)
!7846 = !DILocation(line: 776, column: 12, scope: !7841)
!7847 = !DILocation(line: 776, column: 24, scope: !7841)
!7848 = !DILocation(line: 779, column: 15, scope: !7659)
!7849 = !DILocation(line: 779, column: 41, scope: !7659)
!7850 = !DILocation(line: 779, column: 21, scope: !7659)
!7851 = !DILocation(line: 779, column: 47, scope: !7659)
!7852 = !DILocation(line: 779, column: 3, scope: !7659)
!7853 = !DILocation(line: 780, column: 12, scope: !7659)
!7854 = !DILocation(line: 780, column: 4, scope: !7659)
!7855 = !DILocation(line: 780, column: 10, scope: !7659)
!7856 = !DILocation(line: 782, column: 7, scope: !7659)
!7857 = !DILocation(line: 782, column: 3, scope: !7659)
!7858 = !DILabel(scope: !7659, name: "end", file: !1, line: 783)
!7859 = !DILocation(line: 783, column: 1, scope: !7659)
!7860 = !DILocation(line: 784, column: 14, scope: !7659)
!7861 = !DILocation(line: 784, column: 3, scope: !7659)
!7862 = !DILocation(line: 785, column: 10, scope: !7659)
!7863 = !DILocation(line: 785, column: 3, scope: !7659)
!7864 = !DILocation(line: 786, column: 1, scope: !7659)
!7865 = distinct !DISubprogram(name: "assert_no_overflow_lt", scope: !1, file: !1, line: 794, type: !7866, scopeLine: 796, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!7866 = !DISubroutineType(types: !7867)
!7867 = !{!1775, !1655, !3815, !3815, !3539, !1655}
!7868 = !DILocalVariable(name: "type", arg: 1, scope: !7865, file: !1, line: 794, type: !1655)
!7869 = !DILocation(line: 794, column: 29, scope: !7865)
!7870 = !DILocalVariable(name: "iv0", arg: 2, scope: !7865, file: !1, line: 794, type: !3815)
!7871 = !DILocation(line: 794, column: 46, scope: !7865)
!7872 = !DILocalVariable(name: "iv1", arg: 3, scope: !7865, file: !1, line: 794, type: !3815)
!7873 = !DILocation(line: 794, column: 62, scope: !7865)
!7874 = !DILocalVariable(name: "niter", arg: 4, scope: !7865, file: !1, line: 795, type: !3539)
!7875 = !DILocation(line: 795, column: 34, scope: !7865)
!7876 = !DILocalVariable(name: "step", arg: 5, scope: !7865, file: !1, line: 795, type: !1655)
!7877 = !DILocation(line: 795, column: 46, scope: !7865)
!7878 = !DILocalVariable(name: "bound", scope: !7865, file: !1, line: 797, type: !1655)
!7879 = !DILocation(line: 797, column: 8, scope: !7865)
!7880 = !DILocalVariable(name: "d", scope: !7865, file: !1, line: 797, type: !1655)
!7881 = !DILocation(line: 797, column: 15, scope: !7865)
!7882 = !DILocalVariable(name: "assumption", scope: !7865, file: !1, line: 797, type: !1655)
!7883 = !DILocation(line: 797, column: 18, scope: !7865)
!7884 = !DILocalVariable(name: "diff", scope: !7865, file: !1, line: 797, type: !1655)
!7885 = !DILocation(line: 797, column: 30, scope: !7865)
!7886 = !DILocalVariable(name: "niter_type", scope: !7865, file: !1, line: 798, type: !1655)
!7887 = !DILocation(line: 798, column: 8, scope: !7865)
!7888 = !DILocation(line: 798, column: 21, scope: !7865)
!7889 = !DILocation(line: 800, column: 25, scope: !7890)
!7890 = distinct !DILexicalBlock(scope: !7865, file: !1, line: 800, column: 7)
!7891 = !DILocation(line: 800, column: 30, scope: !7890)
!7892 = !DILocation(line: 800, column: 7, scope: !7890)
!7893 = !DILocation(line: 800, column: 7, scope: !7865)
!7894 = !DILocation(line: 803, column: 11, scope: !7895)
!7895 = distinct !DILexicalBlock(scope: !7896, file: !1, line: 803, column: 11)
!7896 = distinct !DILexicalBlock(scope: !7890, file: !1, line: 801, column: 5)
!7897 = !DILocation(line: 803, column: 16, scope: !7895)
!7898 = !DILocation(line: 803, column: 11, scope: !7896)
!7899 = !DILocation(line: 804, column: 2, scope: !7895)
!7900 = !DILocation(line: 810, column: 11, scope: !7901)
!7901 = distinct !DILexicalBlock(scope: !7896, file: !1, line: 810, column: 11)
!7902 = !DILocation(line: 810, column: 33, scope: !7901)
!7903 = !DILocation(line: 810, column: 11, scope: !7896)
!7904 = !DILocation(line: 812, column: 8, scope: !7905)
!7905 = distinct !DILexicalBlock(scope: !7901, file: !1, line: 811, column: 2)
!7906 = !DILocation(line: 812, column: 6, scope: !7905)
!7907 = !DILocation(line: 815, column: 11, scope: !7905)
!7908 = !DILocation(line: 815, column: 9, scope: !7905)
!7909 = !DILocation(line: 816, column: 2, scope: !7905)
!7910 = !DILocation(line: 818, column: 9, scope: !7901)
!7911 = !DILocation(line: 818, column: 7, scope: !7901)
!7912 = !DILocation(line: 820, column: 15, scope: !7896)
!7913 = !DILocation(line: 820, column: 13, scope: !7896)
!7914 = !DILocation(line: 822, column: 20, scope: !7896)
!7915 = !DILocation(line: 822, column: 18, scope: !7896)
!7916 = !DILocation(line: 824, column: 5, scope: !7896)
!7917 = !DILocation(line: 828, column: 11, scope: !7918)
!7918 = distinct !DILexicalBlock(scope: !7919, file: !1, line: 828, column: 11)
!7919 = distinct !DILexicalBlock(scope: !7890, file: !1, line: 826, column: 5)
!7920 = !DILocation(line: 828, column: 16, scope: !7918)
!7921 = !DILocation(line: 828, column: 11, scope: !7919)
!7922 = !DILocation(line: 829, column: 2, scope: !7918)
!7923 = !DILocation(line: 831, column: 11, scope: !7924)
!7924 = distinct !DILexicalBlock(scope: !7919, file: !1, line: 831, column: 11)
!7925 = !DILocation(line: 831, column: 33, scope: !7924)
!7926 = !DILocation(line: 831, column: 11, scope: !7919)
!7927 = !DILocation(line: 833, column: 8, scope: !7928)
!7928 = distinct !DILexicalBlock(scope: !7924, file: !1, line: 832, column: 2)
!7929 = !DILocation(line: 833, column: 6, scope: !7928)
!7930 = !DILocation(line: 836, column: 11, scope: !7928)
!7931 = !DILocation(line: 836, column: 9, scope: !7928)
!7932 = !DILocation(line: 837, column: 2, scope: !7928)
!7933 = !DILocation(line: 839, column: 9, scope: !7924)
!7934 = !DILocation(line: 839, column: 7, scope: !7924)
!7935 = !DILocation(line: 841, column: 15, scope: !7919)
!7936 = !DILocation(line: 841, column: 13, scope: !7919)
!7937 = !DILocation(line: 843, column: 20, scope: !7919)
!7938 = !DILocation(line: 843, column: 18, scope: !7919)
!7939 = !DILocation(line: 847, column: 22, scope: !7940)
!7940 = distinct !DILexicalBlock(scope: !7865, file: !1, line: 847, column: 7)
!7941 = !DILocation(line: 847, column: 7, scope: !7940)
!7942 = !DILocation(line: 847, column: 7, scope: !7865)
!7943 = !DILocation(line: 848, column: 5, scope: !7940)
!7944 = !DILocation(line: 849, column: 26, scope: !7945)
!7945 = distinct !DILexicalBlock(scope: !7865, file: !1, line: 849, column: 7)
!7946 = !DILocation(line: 849, column: 8, scope: !7945)
!7947 = !DILocation(line: 849, column: 7, scope: !7865)
!7948 = !DILocation(line: 850, column: 26, scope: !7945)
!7949 = !DILocation(line: 850, column: 5, scope: !7945)
!7950 = !DILocation(line: 850, column: 12, scope: !7945)
!7951 = !DILocation(line: 850, column: 24, scope: !7945)
!7952 = !DILocation(line: 853, column: 3, scope: !7865)
!7953 = !DILocation(line: 853, column: 8, scope: !7865)
!7954 = !DILocation(line: 853, column: 20, scope: !7865)
!7955 = !DILocation(line: 854, column: 3, scope: !7865)
!7956 = !DILocation(line: 854, column: 8, scope: !7865)
!7957 = !DILocation(line: 854, column: 20, scope: !7865)
!7958 = !DILocation(line: 855, column: 3, scope: !7865)
!7959 = !DILocation(line: 856, column: 1, scope: !7865)
!7960 = distinct !DISubprogram(name: "assert_loop_rolls_lt", scope: !1, file: !1, line: 863, type: !7961, scopeLine: 865, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!7961 = !DISubroutineType(types: !7962)
!7962 = !{null, !1655, !3815, !3815, !3539, !6298}
!7963 = !DILocalVariable(name: "type", arg: 1, scope: !7960, file: !1, line: 863, type: !1655)
!7964 = !DILocation(line: 863, column: 28, scope: !7960)
!7965 = !DILocalVariable(name: "iv0", arg: 2, scope: !7960, file: !1, line: 863, type: !3815)
!7966 = !DILocation(line: 863, column: 45, scope: !7960)
!7967 = !DILocalVariable(name: "iv1", arg: 3, scope: !7960, file: !1, line: 863, type: !3815)
!7968 = !DILocation(line: 863, column: 61, scope: !7960)
!7969 = !DILocalVariable(name: "niter", arg: 4, scope: !7960, file: !1, line: 864, type: !3539)
!7970 = !DILocation(line: 864, column: 33, scope: !7960)
!7971 = !DILocalVariable(name: "bnds", arg: 5, scope: !7960, file: !1, line: 864, type: !6298)
!7972 = !DILocation(line: 864, column: 48, scope: !7960)
!7973 = !DILocalVariable(name: "assumption", scope: !7960, file: !1, line: 866, type: !1655)
!7974 = !DILocation(line: 866, column: 8, scope: !7960)
!7975 = !DILocation(line: 866, column: 21, scope: !7960)
!7976 = !DILocalVariable(name: "bound", scope: !7960, file: !1, line: 866, type: !1655)
!7977 = !DILocation(line: 866, column: 40, scope: !7960)
!7978 = !DILocalVariable(name: "diff", scope: !7960, file: !1, line: 866, type: !1655)
!7979 = !DILocation(line: 866, column: 47, scope: !7960)
!7980 = !DILocalVariable(name: "mbz", scope: !7960, file: !1, line: 867, type: !1655)
!7981 = !DILocation(line: 867, column: 8, scope: !7960)
!7982 = !DILocalVariable(name: "mbzl", scope: !7960, file: !1, line: 867, type: !1655)
!7983 = !DILocation(line: 867, column: 13, scope: !7960)
!7984 = !DILocalVariable(name: "mbzr", scope: !7960, file: !1, line: 867, type: !1655)
!7985 = !DILocation(line: 867, column: 19, scope: !7960)
!7986 = !DILocalVariable(name: "type1", scope: !7960, file: !1, line: 867, type: !1655)
!7987 = !DILocation(line: 867, column: 25, scope: !7960)
!7988 = !DILocalVariable(name: "rolls_p", scope: !7960, file: !1, line: 868, type: !1775)
!7989 = !DILocation(line: 868, column: 8, scope: !7960)
!7990 = !DILocalVariable(name: "no_overflow_p", scope: !7960, file: !1, line: 868, type: !1775)
!7991 = !DILocation(line: 868, column: 17, scope: !7960)
!7992 = !DILocalVariable(name: "dstep", scope: !7960, file: !1, line: 869, type: !1704)
!7993 = !DILocation(line: 869, column: 14, scope: !7960)
!7994 = !DILocalVariable(name: "mstep", scope: !7960, file: !1, line: 870, type: !3839)
!7995 = !DILocation(line: 870, column: 9, scope: !7960)
!7996 = !DILocalVariable(name: "max", scope: !7960, file: !1, line: 870, type: !3839)
!7997 = !DILocation(line: 870, column: 16, scope: !7960)
!7998 = !DILocation(line: 894, column: 25, scope: !7999)
!7999 = distinct !DILexicalBlock(scope: !7960, file: !1, line: 894, column: 7)
!8000 = !DILocation(line: 894, column: 30, scope: !7999)
!8001 = !DILocation(line: 894, column: 7, scope: !7999)
!8002 = !DILocation(line: 894, column: 7, scope: !7960)
!8003 = !DILocation(line: 895, column: 33, scope: !7999)
!8004 = !DILocation(line: 895, column: 38, scope: !7999)
!8005 = !DILocation(line: 895, column: 13, scope: !7999)
!8006 = !DILocation(line: 895, column: 5, scope: !7999)
!8007 = !DILocation(line: 898, column: 52, scope: !8008)
!8008 = distinct !DILexicalBlock(scope: !7999, file: !1, line: 897, column: 5)
!8009 = !DILocation(line: 898, column: 57, scope: !8008)
!8010 = !DILocation(line: 898, column: 32, scope: !8008)
!8011 = !DILocation(line: 899, column: 11, scope: !8008)
!8012 = !DILocation(line: 898, column: 15, scope: !8008)
!8013 = !DILocation(line: 900, column: 15, scope: !8008)
!8014 = !DILocation(line: 903, column: 13, scope: !7960)
!8015 = !DILocation(line: 903, column: 3, scope: !7960)
!8016 = !DILocation(line: 904, column: 23, scope: !7960)
!8017 = !DILocation(line: 904, column: 3, scope: !7960)
!8018 = !DILocation(line: 905, column: 12, scope: !7960)
!8019 = !DILocation(line: 905, column: 19, scope: !7960)
!8020 = !DILocation(line: 905, column: 3, scope: !7960)
!8021 = !DILocation(line: 906, column: 15, scope: !7960)
!8022 = !DILocation(line: 906, column: 22, scope: !7960)
!8023 = !DILocation(line: 906, column: 3, scope: !7960)
!8024 = !DILocation(line: 908, column: 22, scope: !7960)
!8025 = !DILocation(line: 908, column: 29, scope: !7960)
!8026 = !DILocation(line: 908, column: 35, scope: !7960)
!8027 = !DILocation(line: 908, column: 13, scope: !7960)
!8028 = !DILocation(line: 908, column: 42, scope: !7960)
!8029 = !DILocation(line: 908, column: 11, scope: !7960)
!8030 = !DILocation(line: 910, column: 13, scope: !7960)
!8031 = !DILocation(line: 910, column: 3, scope: !7960)
!8032 = !DILocation(line: 911, column: 23, scope: !7960)
!8033 = !DILocation(line: 911, column: 45, scope: !7960)
!8034 = !DILocation(line: 911, column: 28, scope: !7960)
!8035 = !DILocation(line: 911, column: 3, scope: !7960)
!8036 = !DILocation(line: 912, column: 12, scope: !7960)
!8037 = !DILocation(line: 912, column: 17, scope: !7960)
!8038 = !DILocation(line: 912, column: 22, scope: !7960)
!8039 = !DILocation(line: 912, column: 3, scope: !7960)
!8040 = !DILocation(line: 913, column: 29, scope: !7960)
!8041 = !DILocation(line: 913, column: 35, scope: !7960)
!8042 = !DILocation(line: 913, column: 39, scope: !7960)
!8043 = !DILocation(line: 913, column: 20, scope: !7960)
!8044 = !DILocation(line: 913, column: 44, scope: !7960)
!8045 = !DILocation(line: 919, column: 6, scope: !7960)
!8046 = !DILocation(line: 919, column: 9, scope: !7960)
!8047 = !DILocation(line: 913, column: 19, scope: !7960)
!8048 = !DILocation(line: 913, column: 17, scope: !7960)
!8049 = !DILocation(line: 920, column: 14, scope: !7960)
!8050 = !DILocation(line: 920, column: 3, scope: !7960)
!8051 = !DILocation(line: 921, column: 14, scope: !7960)
!8052 = !DILocation(line: 921, column: 3, scope: !7960)
!8053 = !DILocation(line: 923, column: 7, scope: !8054)
!8054 = distinct !DILexicalBlock(scope: !7960, file: !1, line: 923, column: 7)
!8055 = !DILocation(line: 923, column: 15, scope: !8054)
!8056 = !DILocation(line: 923, column: 18, scope: !8054)
!8057 = !DILocation(line: 923, column: 7, scope: !7960)
!8058 = !DILocation(line: 924, column: 5, scope: !8054)
!8059 = !DILocation(line: 926, column: 11, scope: !7960)
!8060 = !DILocation(line: 926, column: 9, scope: !7960)
!8061 = !DILocation(line: 927, column: 7, scope: !8062)
!8062 = distinct !DILexicalBlock(scope: !7960, file: !1, line: 927, column: 7)
!8063 = !DILocation(line: 927, column: 7, scope: !7960)
!8064 = !DILocation(line: 928, column: 13, scope: !8062)
!8065 = !DILocation(line: 928, column: 11, scope: !8062)
!8066 = !DILocation(line: 928, column: 5, scope: !8062)
!8067 = !DILocation(line: 933, column: 25, scope: !8068)
!8068 = distinct !DILexicalBlock(scope: !7960, file: !1, line: 933, column: 7)
!8069 = !DILocation(line: 933, column: 30, scope: !8068)
!8070 = !DILocation(line: 933, column: 7, scope: !8068)
!8071 = !DILocation(line: 933, column: 7, scope: !7960)
!8072 = !DILocation(line: 935, column: 14, scope: !8073)
!8073 = distinct !DILexicalBlock(scope: !8068, file: !1, line: 934, column: 5)
!8074 = !DILocation(line: 935, column: 12, scope: !8073)
!8075 = !DILocation(line: 941, column: 12, scope: !8076)
!8076 = distinct !DILexicalBlock(scope: !8073, file: !1, line: 941, column: 11)
!8077 = !DILocation(line: 941, column: 11, scope: !8073)
!8078 = !DILocation(line: 943, column: 12, scope: !8079)
!8079 = distinct !DILexicalBlock(scope: !8076, file: !1, line: 942, column: 2)
!8080 = !DILocation(line: 943, column: 10, scope: !8079)
!8081 = !DILocation(line: 945, column: 17, scope: !8079)
!8082 = !DILocation(line: 945, column: 15, scope: !8079)
!8083 = !DILocation(line: 947, column: 2, scope: !8079)
!8084 = !DILocation(line: 951, column: 14, scope: !8073)
!8085 = !DILocation(line: 951, column: 12, scope: !8073)
!8086 = !DILocation(line: 953, column: 14, scope: !8073)
!8087 = !DILocation(line: 953, column: 12, scope: !8073)
!8088 = !DILocation(line: 954, column: 5, scope: !8073)
!8089 = !DILocation(line: 957, column: 14, scope: !8090)
!8090 = distinct !DILexicalBlock(scope: !8068, file: !1, line: 956, column: 5)
!8091 = !DILocation(line: 957, column: 12, scope: !8090)
!8092 = !DILocation(line: 960, column: 12, scope: !8093)
!8093 = distinct !DILexicalBlock(scope: !8090, file: !1, line: 960, column: 11)
!8094 = !DILocation(line: 960, column: 11, scope: !8090)
!8095 = !DILocation(line: 962, column: 12, scope: !8096)
!8096 = distinct !DILexicalBlock(scope: !8093, file: !1, line: 961, column: 2)
!8097 = !DILocation(line: 962, column: 10, scope: !8096)
!8098 = !DILocation(line: 964, column: 17, scope: !8096)
!8099 = !DILocation(line: 964, column: 15, scope: !8096)
!8100 = !DILocation(line: 966, column: 2, scope: !8096)
!8101 = !DILocation(line: 968, column: 14, scope: !8090)
!8102 = !DILocation(line: 968, column: 12, scope: !8090)
!8103 = !DILocation(line: 969, column: 14, scope: !8090)
!8104 = !DILocation(line: 969, column: 12, scope: !8090)
!8105 = !DILocation(line: 973, column: 26, scope: !8106)
!8106 = distinct !DILexicalBlock(scope: !7960, file: !1, line: 973, column: 7)
!8107 = !DILocation(line: 973, column: 8, scope: !8106)
!8108 = !DILocation(line: 973, column: 7, scope: !7960)
!8109 = !DILocation(line: 974, column: 26, scope: !8106)
!8110 = !DILocation(line: 974, column: 5, scope: !8106)
!8111 = !DILocation(line: 974, column: 12, scope: !8106)
!8112 = !DILocation(line: 974, column: 24, scope: !8106)
!8113 = !DILocation(line: 976, column: 8, scope: !8114)
!8114 = distinct !DILexicalBlock(scope: !7960, file: !1, line: 976, column: 7)
!8115 = !DILocation(line: 976, column: 7, scope: !7960)
!8116 = !DILocation(line: 978, column: 13, scope: !8117)
!8117 = distinct !DILexicalBlock(scope: !8114, file: !1, line: 977, column: 5)
!8118 = !DILocation(line: 978, column: 11, scope: !8117)
!8119 = !DILocation(line: 979, column: 28, scope: !8117)
!8120 = !DILocation(line: 979, column: 7, scope: !8117)
!8121 = !DILocation(line: 979, column: 14, scope: !8117)
!8122 = !DILocation(line: 979, column: 26, scope: !8117)
!8123 = !DILocation(line: 981, column: 5, scope: !8117)
!8124 = !DILocation(line: 982, column: 1, scope: !7960)
!8125 = distinct !DISubprogram(name: "bounds_add", scope: !1, file: !1, line: 456, type: !8126, scopeLine: 457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8126 = !DISubroutineType(types: !8127)
!8127 = !{null, !6298, !1704, !1655}
!8128 = !DILocalVariable(name: "bnds", arg: 1, scope: !8125, file: !1, line: 456, type: !6298)
!8129 = !DILocation(line: 456, column: 21, scope: !8125)
!8130 = !DILocalVariable(name: "delta", arg: 2, scope: !8125, file: !1, line: 456, type: !1704)
!8131 = !DILocation(line: 456, column: 38, scope: !8125)
!8132 = !DILocalVariable(name: "type", arg: 3, scope: !8125, file: !1, line: 456, type: !1655)
!8133 = !DILocation(line: 456, column: 50, scope: !8125)
!8134 = !DILocalVariable(name: "mdelta", scope: !8125, file: !1, line: 458, type: !3839)
!8135 = !DILocation(line: 458, column: 9, scope: !8125)
!8136 = !DILocalVariable(name: "max", scope: !8125, file: !1, line: 458, type: !3839)
!8137 = !DILocation(line: 458, column: 17, scope: !8125)
!8138 = !DILocation(line: 460, column: 13, scope: !8125)
!8139 = !DILocation(line: 460, column: 3, scope: !8125)
!8140 = !DILocation(line: 461, column: 23, scope: !8125)
!8141 = !DILocation(line: 461, column: 3, scope: !8125)
!8142 = !DILocation(line: 463, column: 13, scope: !8125)
!8143 = !DILocation(line: 463, column: 3, scope: !8125)
!8144 = !DILocation(line: 464, column: 23, scope: !8125)
!8145 = !DILocation(line: 464, column: 45, scope: !8125)
!8146 = !DILocation(line: 464, column: 28, scope: !8125)
!8147 = !DILocation(line: 464, column: 3, scope: !8125)
!8148 = !DILocation(line: 466, column: 12, scope: !8125)
!8149 = !DILocation(line: 466, column: 18, scope: !8125)
!8150 = !DILocation(line: 466, column: 22, scope: !8125)
!8151 = !DILocation(line: 466, column: 28, scope: !8125)
!8152 = !DILocation(line: 466, column: 32, scope: !8125)
!8153 = !DILocation(line: 466, column: 3, scope: !8125)
!8154 = !DILocation(line: 467, column: 12, scope: !8125)
!8155 = !DILocation(line: 467, column: 18, scope: !8125)
!8156 = !DILocation(line: 467, column: 25, scope: !8125)
!8157 = !DILocation(line: 467, column: 31, scope: !8125)
!8158 = !DILocation(line: 467, column: 38, scope: !8125)
!8159 = !DILocation(line: 467, column: 3, scope: !8125)
!8160 = !DILocation(line: 469, column: 16, scope: !8161)
!8161 = distinct !DILexicalBlock(scope: !8125, file: !1, line: 469, column: 7)
!8162 = !DILocation(line: 469, column: 22, scope: !8161)
!8163 = !DILocation(line: 469, column: 26, scope: !8161)
!8164 = !DILocation(line: 469, column: 7, scope: !8161)
!8165 = !DILocation(line: 469, column: 31, scope: !8161)
!8166 = !DILocation(line: 469, column: 7, scope: !8125)
!8167 = !DILocation(line: 470, column: 14, scope: !8161)
!8168 = !DILocation(line: 470, column: 20, scope: !8161)
!8169 = !DILocation(line: 470, column: 24, scope: !8161)
!8170 = !DILocation(line: 470, column: 5, scope: !8161)
!8171 = !DILocation(line: 472, column: 12, scope: !8125)
!8172 = !DILocation(line: 472, column: 17, scope: !8125)
!8173 = !DILocation(line: 472, column: 3, scope: !8125)
!8174 = !DILocation(line: 473, column: 16, scope: !8175)
!8175 = distinct !DILexicalBlock(scope: !8125, file: !1, line: 473, column: 7)
!8176 = !DILocation(line: 473, column: 22, scope: !8175)
!8177 = !DILocation(line: 473, column: 29, scope: !8175)
!8178 = !DILocation(line: 473, column: 7, scope: !8175)
!8179 = !DILocation(line: 473, column: 34, scope: !8175)
!8180 = !DILocation(line: 473, column: 7, scope: !8125)
!8181 = !DILocation(line: 474, column: 14, scope: !8175)
!8182 = !DILocation(line: 474, column: 20, scope: !8175)
!8183 = !DILocation(line: 474, column: 27, scope: !8175)
!8184 = !DILocation(line: 474, column: 5, scope: !8175)
!8185 = !DILocation(line: 476, column: 14, scope: !8125)
!8186 = !DILocation(line: 476, column: 3, scope: !8125)
!8187 = !DILocation(line: 477, column: 14, scope: !8125)
!8188 = !DILocation(line: 477, column: 3, scope: !8125)
!8189 = !DILocation(line: 478, column: 1, scope: !8125)
!8190 = distinct !DISubprogram(name: "instantiate_parameters", scope: !8191, file: !8191, line: 57, type: !4167, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8191 = !DIFile(filename: "./tree-scalar-evolution.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!8192 = !DILocalVariable(name: "loop", arg: 1, scope: !8190, file: !8191, line: 57, type: !2201)
!8193 = !DILocation(line: 57, column: 38, scope: !8190)
!8194 = !DILocalVariable(name: "chrec", arg: 2, scope: !8190, file: !8191, line: 57, type: !1655)
!8195 = !DILocation(line: 57, column: 49, scope: !8190)
!8196 = !DILocation(line: 59, column: 47, scope: !8190)
!8197 = !DILocation(line: 59, column: 28, scope: !8190)
!8198 = !DILocation(line: 59, column: 54, scope: !8190)
!8199 = !DILocation(line: 59, column: 60, scope: !8190)
!8200 = !DILocation(line: 59, column: 10, scope: !8190)
!8201 = !DILocation(line: 59, column: 3, scope: !8190)
!8202 = distinct !DISubprogram(name: "block_before_loop", scope: !8191, file: !8191, line: 46, type: !8203, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8203 = !DISubroutineType(types: !8204)
!8204 = !{!2472, !2228}
!8205 = !DILocalVariable(name: "loop", arg: 1, scope: !8202, file: !8191, line: 46, type: !2228)
!8206 = !DILocation(line: 46, column: 27, scope: !8202)
!8207 = !DILocalVariable(name: "preheader", scope: !8202, file: !8191, line: 48, type: !1966)
!8208 = !DILocation(line: 48, column: 8, scope: !8202)
!8209 = !DILocation(line: 48, column: 41, scope: !8202)
!8210 = !DILocation(line: 48, column: 20, scope: !8202)
!8211 = !DILocation(line: 49, column: 11, scope: !8202)
!8212 = !DILocation(line: 49, column: 23, scope: !8202)
!8213 = !DILocation(line: 49, column: 34, scope: !8202)
!8214 = !DILocation(line: 49, column: 40, scope: !8202)
!8215 = !DILocation(line: 49, column: 3, scope: !8202)
!8216 = distinct !DISubprogram(name: "tree_simplify_using_condition", scope: !1, file: !1, line: 1622, type: !4851, scopeLine: 1623, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8217 = !DILocalVariable(name: "cond", arg: 1, scope: !8216, file: !1, line: 1622, type: !1655)
!8218 = !DILocation(line: 1622, column: 37, scope: !8216)
!8219 = !DILocalVariable(name: "expr", arg: 2, scope: !8216, file: !1, line: 1622, type: !1655)
!8220 = !DILocation(line: 1622, column: 48, scope: !8216)
!8221 = !DILocation(line: 1624, column: 36, scope: !8216)
!8222 = !DILocation(line: 1624, column: 10, scope: !8216)
!8223 = !DILocation(line: 1624, column: 8, scope: !8216)
!8224 = !DILocation(line: 1626, column: 43, scope: !8216)
!8225 = !DILocation(line: 1626, column: 49, scope: !8216)
!8226 = !DILocation(line: 1626, column: 10, scope: !8216)
!8227 = !DILocation(line: 1626, column: 3, scope: !8216)
!8228 = distinct !DISubprogram(name: "tree_simplify_using_condition_1", scope: !1, file: !1, line: 1510, type: !4851, scopeLine: 1511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8229 = !DILocalVariable(name: "cond", arg: 1, scope: !8228, file: !1, line: 1510, type: !1655)
!8230 = !DILocation(line: 1510, column: 39, scope: !8228)
!8231 = !DILocalVariable(name: "expr", arg: 2, scope: !8228, file: !1, line: 1510, type: !1655)
!8232 = !DILocation(line: 1510, column: 50, scope: !8228)
!8233 = !DILocalVariable(name: "changed", scope: !8228, file: !1, line: 1512, type: !1775)
!8234 = !DILocation(line: 1512, column: 8, scope: !8228)
!8235 = !DILocalVariable(name: "e", scope: !8228, file: !1, line: 1513, type: !1655)
!8236 = !DILocation(line: 1513, column: 8, scope: !8228)
!8237 = !DILocalVariable(name: "te", scope: !8228, file: !1, line: 1513, type: !1655)
!8238 = !DILocation(line: 1513, column: 11, scope: !8228)
!8239 = !DILocalVariable(name: "e0", scope: !8228, file: !1, line: 1513, type: !1655)
!8240 = !DILocation(line: 1513, column: 15, scope: !8228)
!8241 = !DILocalVariable(name: "e1", scope: !8228, file: !1, line: 1513, type: !1655)
!8242 = !DILocation(line: 1513, column: 19, scope: !8228)
!8243 = !DILocalVariable(name: "e2", scope: !8228, file: !1, line: 1513, type: !1655)
!8244 = !DILocation(line: 1513, column: 23, scope: !8228)
!8245 = !DILocalVariable(name: "notcond", scope: !8228, file: !1, line: 1513, type: !1655)
!8246 = !DILocation(line: 1513, column: 27, scope: !8228)
!8247 = !DILocalVariable(name: "code", scope: !8228, file: !1, line: 1514, type: !132)
!8248 = !DILocation(line: 1514, column: 18, scope: !8228)
!8249 = !DILocation(line: 1514, column: 25, scope: !8228)
!8250 = !DILocation(line: 1516, column: 7, scope: !8251)
!8251 = distinct !DILexicalBlock(scope: !8228, file: !1, line: 1516, column: 7)
!8252 = !DILocation(line: 1516, column: 12, scope: !8251)
!8253 = !DILocation(line: 1516, column: 7, scope: !8228)
!8254 = !DILocation(line: 1517, column: 12, scope: !8251)
!8255 = !DILocation(line: 1517, column: 5, scope: !8251)
!8256 = !DILocation(line: 1519, column: 7, scope: !8257)
!8257 = distinct !DILexicalBlock(scope: !8228, file: !1, line: 1519, column: 7)
!8258 = !DILocation(line: 1519, column: 12, scope: !8257)
!8259 = !DILocation(line: 1520, column: 7, scope: !8257)
!8260 = !DILocation(line: 1520, column: 10, scope: !8257)
!8261 = !DILocation(line: 1520, column: 15, scope: !8257)
!8262 = !DILocation(line: 1521, column: 7, scope: !8257)
!8263 = !DILocation(line: 1521, column: 10, scope: !8257)
!8264 = !DILocation(line: 1521, column: 15, scope: !8257)
!8265 = !DILocation(line: 1519, column: 7, scope: !8228)
!8266 = !DILocation(line: 1523, column: 15, scope: !8267)
!8267 = distinct !DILexicalBlock(scope: !8257, file: !1, line: 1522, column: 5)
!8268 = !DILocation(line: 1525, column: 45, scope: !8267)
!8269 = !DILocation(line: 1525, column: 51, scope: !8267)
!8270 = !DILocation(line: 1525, column: 12, scope: !8267)
!8271 = !DILocation(line: 1525, column: 10, scope: !8267)
!8272 = !DILocation(line: 1526, column: 11, scope: !8273)
!8273 = distinct !DILexicalBlock(scope: !8267, file: !1, line: 1526, column: 11)
!8274 = !DILocation(line: 1526, column: 37, scope: !8273)
!8275 = !DILocation(line: 1526, column: 34, scope: !8273)
!8276 = !DILocation(line: 1526, column: 11, scope: !8267)
!8277 = !DILocation(line: 1527, column: 10, scope: !8273)
!8278 = !DILocation(line: 1527, column: 2, scope: !8273)
!8279 = !DILocation(line: 1529, column: 45, scope: !8267)
!8280 = !DILocation(line: 1529, column: 51, scope: !8267)
!8281 = !DILocation(line: 1529, column: 12, scope: !8267)
!8282 = !DILocation(line: 1529, column: 10, scope: !8267)
!8283 = !DILocation(line: 1530, column: 11, scope: !8284)
!8284 = distinct !DILexicalBlock(scope: !8267, file: !1, line: 1530, column: 11)
!8285 = !DILocation(line: 1530, column: 37, scope: !8284)
!8286 = !DILocation(line: 1530, column: 34, scope: !8284)
!8287 = !DILocation(line: 1530, column: 11, scope: !8267)
!8288 = !DILocation(line: 1531, column: 10, scope: !8284)
!8289 = !DILocation(line: 1531, column: 2, scope: !8284)
!8290 = !DILocation(line: 1533, column: 11, scope: !8291)
!8291 = distinct !DILexicalBlock(scope: !8267, file: !1, line: 1533, column: 11)
!8292 = !DILocation(line: 1533, column: 16, scope: !8291)
!8293 = !DILocation(line: 1533, column: 11, scope: !8267)
!8294 = !DILocation(line: 1535, column: 42, scope: !8295)
!8295 = distinct !DILexicalBlock(scope: !8291, file: !1, line: 1534, column: 2)
!8296 = !DILocation(line: 1535, column: 48, scope: !8295)
!8297 = !DILocation(line: 1535, column: 9, scope: !8295)
!8298 = !DILocation(line: 1535, column: 7, scope: !8295)
!8299 = !DILocation(line: 1536, column: 8, scope: !8300)
!8300 = distinct !DILexicalBlock(scope: !8295, file: !1, line: 1536, column: 8)
!8301 = !DILocation(line: 1536, column: 34, scope: !8300)
!8302 = !DILocation(line: 1536, column: 31, scope: !8300)
!8303 = !DILocation(line: 1536, column: 8, scope: !8295)
!8304 = !DILocation(line: 1537, column: 14, scope: !8300)
!8305 = !DILocation(line: 1537, column: 6, scope: !8300)
!8306 = !DILocation(line: 1538, column: 2, scope: !8295)
!8307 = !DILocation(line: 1540, column: 5, scope: !8291)
!8308 = !DILocation(line: 1542, column: 11, scope: !8309)
!8309 = distinct !DILexicalBlock(scope: !8267, file: !1, line: 1542, column: 11)
!8310 = !DILocation(line: 1542, column: 11, scope: !8267)
!8311 = !DILocation(line: 1544, column: 8, scope: !8312)
!8312 = distinct !DILexicalBlock(scope: !8313, file: !1, line: 1544, column: 8)
!8313 = distinct !DILexicalBlock(scope: !8309, file: !1, line: 1543, column: 2)
!8314 = !DILocation(line: 1544, column: 13, scope: !8312)
!8315 = !DILocation(line: 1544, column: 8, scope: !8313)
!8316 = !DILocation(line: 1545, column: 13, scope: !8312)
!8317 = !DILocation(line: 1545, column: 11, scope: !8312)
!8318 = !DILocation(line: 1545, column: 6, scope: !8312)
!8319 = !DILocation(line: 1547, column: 13, scope: !8312)
!8320 = !DILocation(line: 1547, column: 11, scope: !8312)
!8321 = !DILocation(line: 1548, column: 2, scope: !8313)
!8322 = !DILocation(line: 1550, column: 14, scope: !8267)
!8323 = !DILocation(line: 1550, column: 7, scope: !8267)
!8324 = !DILocation(line: 1556, column: 7, scope: !8325)
!8325 = distinct !DILexicalBlock(scope: !8228, file: !1, line: 1556, column: 7)
!8326 = !DILocation(line: 1556, column: 24, scope: !8325)
!8327 = !DILocation(line: 1556, column: 7, scope: !8228)
!8328 = !DILocation(line: 1558, column: 12, scope: !8329)
!8329 = distinct !DILexicalBlock(scope: !8325, file: !1, line: 1557, column: 5)
!8330 = !DILocation(line: 1558, column: 10, scope: !8329)
!8331 = !DILocation(line: 1559, column: 12, scope: !8329)
!8332 = !DILocation(line: 1559, column: 10, scope: !8329)
!8333 = !DILocation(line: 1563, column: 34, scope: !8329)
!8334 = !DILocation(line: 1563, column: 40, scope: !8329)
!8335 = !DILocation(line: 1563, column: 44, scope: !8329)
!8336 = !DILocation(line: 1563, column: 11, scope: !8329)
!8337 = !DILocation(line: 1563, column: 9, scope: !8329)
!8338 = !DILocation(line: 1564, column: 26, scope: !8339)
!8339 = distinct !DILexicalBlock(scope: !8329, file: !1, line: 1564, column: 11)
!8340 = !DILocation(line: 1564, column: 11, scope: !8339)
!8341 = !DILocation(line: 1564, column: 29, scope: !8339)
!8342 = !DILocation(line: 1564, column: 50, scope: !8339)
!8343 = !DILocation(line: 1564, column: 32, scope: !8339)
!8344 = !DILocation(line: 1564, column: 11, scope: !8329)
!8345 = !DILocation(line: 1565, column: 9, scope: !8339)
!8346 = !DILocation(line: 1565, column: 2, scope: !8339)
!8347 = !DILocation(line: 1567, column: 34, scope: !8329)
!8348 = !DILocation(line: 1567, column: 40, scope: !8329)
!8349 = !DILocation(line: 1567, column: 44, scope: !8329)
!8350 = !DILocation(line: 1567, column: 11, scope: !8329)
!8351 = !DILocation(line: 1567, column: 9, scope: !8329)
!8352 = !DILocation(line: 1568, column: 26, scope: !8353)
!8353 = distinct !DILexicalBlock(scope: !8329, file: !1, line: 1568, column: 11)
!8354 = !DILocation(line: 1568, column: 11, scope: !8353)
!8355 = !DILocation(line: 1568, column: 29, scope: !8353)
!8356 = !DILocation(line: 1568, column: 50, scope: !8353)
!8357 = !DILocation(line: 1568, column: 32, scope: !8353)
!8358 = !DILocation(line: 1568, column: 11, scope: !8329)
!8359 = !DILocation(line: 1569, column: 9, scope: !8353)
!8360 = !DILocation(line: 1569, column: 2, scope: !8353)
!8361 = !DILocation(line: 1570, column: 5, scope: !8329)
!8362 = !DILocation(line: 1571, column: 7, scope: !8363)
!8363 = distinct !DILexicalBlock(scope: !8228, file: !1, line: 1571, column: 7)
!8364 = !DILocation(line: 1571, column: 24, scope: !8363)
!8365 = !DILocation(line: 1571, column: 7, scope: !8228)
!8366 = !DILocation(line: 1573, column: 12, scope: !8367)
!8367 = distinct !DILexicalBlock(scope: !8363, file: !1, line: 1572, column: 5)
!8368 = !DILocation(line: 1573, column: 10, scope: !8367)
!8369 = !DILocation(line: 1574, column: 12, scope: !8367)
!8370 = !DILocation(line: 1574, column: 10, scope: !8367)
!8371 = !DILocation(line: 1577, column: 34, scope: !8367)
!8372 = !DILocation(line: 1577, column: 40, scope: !8367)
!8373 = !DILocation(line: 1577, column: 44, scope: !8367)
!8374 = !DILocation(line: 1577, column: 11, scope: !8367)
!8375 = !DILocation(line: 1577, column: 9, scope: !8367)
!8376 = !DILocation(line: 1578, column: 26, scope: !8377)
!8377 = distinct !DILexicalBlock(scope: !8367, file: !1, line: 1578, column: 11)
!8378 = !DILocation(line: 1578, column: 11, scope: !8377)
!8379 = !DILocation(line: 1578, column: 11, scope: !8367)
!8380 = !DILocation(line: 1579, column: 9, scope: !8377)
!8381 = !DILocation(line: 1579, column: 2, scope: !8377)
!8382 = !DILocation(line: 1580, column: 34, scope: !8367)
!8383 = !DILocation(line: 1580, column: 40, scope: !8367)
!8384 = !DILocation(line: 1580, column: 44, scope: !8367)
!8385 = !DILocation(line: 1580, column: 11, scope: !8367)
!8386 = !DILocation(line: 1580, column: 9, scope: !8367)
!8387 = !DILocation(line: 1581, column: 26, scope: !8388)
!8388 = distinct !DILexicalBlock(scope: !8367, file: !1, line: 1581, column: 11)
!8389 = !DILocation(line: 1581, column: 11, scope: !8388)
!8390 = !DILocation(line: 1581, column: 11, scope: !8367)
!8391 = !DILocation(line: 1582, column: 9, scope: !8388)
!8392 = !DILocation(line: 1582, column: 2, scope: !8388)
!8393 = !DILocation(line: 1583, column: 5, scope: !8367)
!8394 = !DILocation(line: 1584, column: 7, scope: !8395)
!8395 = distinct !DILexicalBlock(scope: !8228, file: !1, line: 1584, column: 7)
!8396 = !DILocation(line: 1584, column: 24, scope: !8395)
!8397 = !DILocation(line: 1584, column: 7, scope: !8228)
!8398 = !DILocation(line: 1586, column: 12, scope: !8399)
!8399 = distinct !DILexicalBlock(scope: !8395, file: !1, line: 1585, column: 5)
!8400 = !DILocation(line: 1586, column: 10, scope: !8399)
!8401 = !DILocation(line: 1587, column: 12, scope: !8399)
!8402 = !DILocation(line: 1587, column: 10, scope: !8399)
!8403 = !DILocation(line: 1590, column: 34, scope: !8399)
!8404 = !DILocation(line: 1590, column: 40, scope: !8399)
!8405 = !DILocation(line: 1590, column: 44, scope: !8399)
!8406 = !DILocation(line: 1590, column: 11, scope: !8399)
!8407 = !DILocation(line: 1590, column: 9, scope: !8399)
!8408 = !DILocation(line: 1591, column: 26, scope: !8409)
!8409 = distinct !DILexicalBlock(scope: !8399, file: !1, line: 1591, column: 11)
!8410 = !DILocation(line: 1591, column: 11, scope: !8409)
!8411 = !DILocation(line: 1591, column: 11, scope: !8399)
!8412 = !DILocation(line: 1592, column: 9, scope: !8409)
!8413 = !DILocation(line: 1592, column: 2, scope: !8409)
!8414 = !DILocation(line: 1593, column: 34, scope: !8399)
!8415 = !DILocation(line: 1593, column: 40, scope: !8399)
!8416 = !DILocation(line: 1593, column: 44, scope: !8399)
!8417 = !DILocation(line: 1593, column: 11, scope: !8399)
!8418 = !DILocation(line: 1593, column: 9, scope: !8399)
!8419 = !DILocation(line: 1594, column: 26, scope: !8420)
!8420 = distinct !DILexicalBlock(scope: !8399, file: !1, line: 1594, column: 11)
!8421 = !DILocation(line: 1594, column: 11, scope: !8420)
!8422 = !DILocation(line: 1594, column: 11, scope: !8399)
!8423 = !DILocation(line: 1595, column: 9, scope: !8420)
!8424 = !DILocation(line: 1595, column: 2, scope: !8420)
!8425 = !DILocation(line: 1596, column: 5, scope: !8399)
!8426 = !DILocation(line: 1598, column: 34, scope: !8228)
!8427 = !DILocation(line: 1598, column: 8, scope: !8228)
!8428 = !DILocation(line: 1598, column: 6, scope: !8228)
!8429 = !DILocation(line: 1601, column: 13, scope: !8228)
!8430 = !DILocation(line: 1601, column: 11, scope: !8228)
!8431 = !DILocation(line: 1602, column: 7, scope: !8228)
!8432 = !DILocation(line: 1602, column: 5, scope: !8228)
!8433 = !DILocation(line: 1603, column: 7, scope: !8434)
!8434 = distinct !DILexicalBlock(scope: !8228, file: !1, line: 1603, column: 7)
!8435 = !DILocation(line: 1603, column: 9, scope: !8434)
!8436 = !DILocation(line: 1603, column: 30, scope: !8434)
!8437 = !DILocation(line: 1603, column: 12, scope: !8434)
!8438 = !DILocation(line: 1603, column: 7, scope: !8228)
!8439 = !DILocation(line: 1604, column: 12, scope: !8434)
!8440 = !DILocation(line: 1604, column: 5, scope: !8434)
!8441 = !DILocation(line: 1607, column: 7, scope: !8228)
!8442 = !DILocation(line: 1607, column: 5, scope: !8228)
!8443 = !DILocation(line: 1608, column: 7, scope: !8444)
!8444 = distinct !DILexicalBlock(scope: !8228, file: !1, line: 1608, column: 7)
!8445 = !DILocation(line: 1608, column: 9, scope: !8444)
!8446 = !DILocation(line: 1608, column: 27, scope: !8444)
!8447 = !DILocation(line: 1608, column: 12, scope: !8444)
!8448 = !DILocation(line: 1608, column: 7, scope: !8228)
!8449 = !DILocation(line: 1609, column: 12, scope: !8444)
!8450 = !DILocation(line: 1609, column: 5, scope: !8444)
!8451 = !DILocation(line: 1611, column: 10, scope: !8228)
!8452 = !DILocation(line: 1611, column: 3, scope: !8228)
!8453 = !DILocation(line: 1612, column: 1, scope: !8228)
!8454 = distinct !DISubprogram(name: "chain_of_csts_start", scope: !1, file: !1, line: 2020, type: !4800, scopeLine: 2021, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8455 = !DILocalVariable(name: "loop", arg: 1, scope: !8454, file: !1, line: 2020, type: !2201)
!8456 = !DILocation(line: 2020, column: 35, scope: !8454)
!8457 = !DILocalVariable(name: "x", arg: 2, scope: !8454, file: !1, line: 2020, type: !1655)
!8458 = !DILocation(line: 2020, column: 46, scope: !8454)
!8459 = !DILocalVariable(name: "stmt", scope: !8454, file: !1, line: 2022, type: !1986)
!8460 = !DILocation(line: 2022, column: 10, scope: !8454)
!8461 = !DILocation(line: 2022, column: 17, scope: !8454)
!8462 = !DILocalVariable(name: "use", scope: !8454, file: !1, line: 2023, type: !1655)
!8463 = !DILocation(line: 2023, column: 8, scope: !8454)
!8464 = !DILocalVariable(name: "bb", scope: !8454, file: !1, line: 2024, type: !2472)
!8465 = !DILocation(line: 2024, column: 15, scope: !8454)
!8466 = !DILocation(line: 2024, column: 31, scope: !8454)
!8467 = !DILocation(line: 2024, column: 20, scope: !8454)
!8468 = !DILocalVariable(name: "code", scope: !8454, file: !1, line: 2025, type: !132)
!8469 = !DILocation(line: 2025, column: 18, scope: !8454)
!8470 = !DILocation(line: 2027, column: 8, scope: !8471)
!8471 = distinct !DILexicalBlock(scope: !8454, file: !1, line: 2027, column: 7)
!8472 = !DILocation(line: 2028, column: 7, scope: !8471)
!8473 = !DILocation(line: 2028, column: 34, scope: !8471)
!8474 = !DILocation(line: 2028, column: 40, scope: !8471)
!8475 = !DILocation(line: 2028, column: 11, scope: !8471)
!8476 = !DILocation(line: 2027, column: 7, scope: !8454)
!8477 = !DILocation(line: 2029, column: 5, scope: !8471)
!8478 = !DILocation(line: 2031, column: 20, scope: !8479)
!8479 = distinct !DILexicalBlock(scope: !8454, file: !1, line: 2031, column: 7)
!8480 = !DILocation(line: 2031, column: 7, scope: !8479)
!8481 = !DILocation(line: 2031, column: 26, scope: !8479)
!8482 = !DILocation(line: 2031, column: 7, scope: !8454)
!8483 = !DILocation(line: 2033, column: 11, scope: !8484)
!8484 = distinct !DILexicalBlock(scope: !8485, file: !1, line: 2033, column: 11)
!8485 = distinct !DILexicalBlock(scope: !8479, file: !1, line: 2032, column: 5)
!8486 = !DILocation(line: 2033, column: 17, scope: !8484)
!8487 = !DILocation(line: 2033, column: 23, scope: !8484)
!8488 = !DILocation(line: 2033, column: 14, scope: !8484)
!8489 = !DILocation(line: 2033, column: 11, scope: !8485)
!8490 = !DILocation(line: 2034, column: 9, scope: !8484)
!8491 = !DILocation(line: 2034, column: 2, scope: !8484)
!8492 = !DILocation(line: 2036, column: 7, scope: !8485)
!8493 = !DILocation(line: 2039, column: 20, scope: !8494)
!8494 = distinct !DILexicalBlock(scope: !8454, file: !1, line: 2039, column: 7)
!8495 = !DILocation(line: 2039, column: 7, scope: !8494)
!8496 = !DILocation(line: 2039, column: 26, scope: !8494)
!8497 = !DILocation(line: 2039, column: 7, scope: !8454)
!8498 = !DILocation(line: 2040, column: 5, scope: !8494)
!8499 = !DILocation(line: 2042, column: 34, scope: !8454)
!8500 = !DILocation(line: 2042, column: 10, scope: !8454)
!8501 = !DILocation(line: 2042, column: 8, scope: !8454)
!8502 = !DILocation(line: 2043, column: 35, scope: !8503)
!8503 = distinct !DILexicalBlock(scope: !8454, file: !1, line: 2043, column: 7)
!8504 = !DILocation(line: 2043, column: 7, scope: !8503)
!8505 = !DILocation(line: 2044, column: 7, scope: !8503)
!8506 = !DILocation(line: 2044, column: 10, scope: !8503)
!8507 = !DILocation(line: 2044, column: 33, scope: !8503)
!8508 = !DILocation(line: 2045, column: 7, scope: !8503)
!8509 = !DILocation(line: 2045, column: 11, scope: !8503)
!8510 = !DILocation(line: 2045, column: 16, scope: !8503)
!8511 = !DILocation(line: 2046, column: 4, scope: !8503)
!8512 = !DILocation(line: 2046, column: 53, scope: !8503)
!8513 = !DILocation(line: 2046, column: 33, scope: !8503)
!8514 = !DILocation(line: 2046, column: 8, scope: !8503)
!8515 = !DILocation(line: 2043, column: 7, scope: !8454)
!8516 = !DILocation(line: 2047, column: 5, scope: !8503)
!8517 = !DILocation(line: 2049, column: 9, scope: !8454)
!8518 = !DILocation(line: 2049, column: 7, scope: !8454)
!8519 = !DILocation(line: 2050, column: 7, scope: !8520)
!8520 = distinct !DILexicalBlock(scope: !8454, file: !1, line: 2050, column: 7)
!8521 = !DILocation(line: 2050, column: 11, scope: !8520)
!8522 = !DILocation(line: 2050, column: 7, scope: !8454)
!8523 = !DILocation(line: 2051, column: 5, scope: !8520)
!8524 = !DILocation(line: 2053, column: 31, scope: !8454)
!8525 = !DILocation(line: 2053, column: 37, scope: !8454)
!8526 = !DILocation(line: 2053, column: 10, scope: !8454)
!8527 = !DILocation(line: 2053, column: 3, scope: !8454)
!8528 = !DILocation(line: 2054, column: 1, scope: !8454)
!8529 = distinct !DISubprogram(name: "gimple_references_memory_p", scope: !402, file: !402, line: 1499, type: !8530, scopeLine: 1500, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8530 = !DISubroutineType(types: !8531)
!8531 = !{!1775, !1986}
!8532 = !DILocalVariable(name: "stmt", arg: 1, scope: !8529, file: !402, line: 1499, type: !1986)
!8533 = !DILocation(line: 1499, column: 36, scope: !8529)
!8534 = !DILocation(line: 1501, column: 30, scope: !8529)
!8535 = !DILocation(line: 1501, column: 10, scope: !8529)
!8536 = !DILocation(line: 1501, column: 36, scope: !8529)
!8537 = !DILocation(line: 1501, column: 52, scope: !8529)
!8538 = !DILocation(line: 1501, column: 39, scope: !8529)
!8539 = !DILocation(line: 0, scope: !8529)
!8540 = !DILocation(line: 1501, column: 3, scope: !8529)
!8541 = distinct !DISubprogram(name: "single_ssa_tree_operand", scope: !3301, file: !3301, line: 803, type: !8542, scopeLine: 804, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8542 = !DISubroutineType(types: !8543)
!8543 = !{!1655, !1986, !1752}
!8544 = !DILocalVariable(name: "stmt", arg: 1, scope: !8541, file: !3301, line: 803, type: !1986)
!8545 = !DILocation(line: 803, column: 33, scope: !8541)
!8546 = !DILocalVariable(name: "flags", arg: 2, scope: !8541, file: !3301, line: 803, type: !1752)
!8547 = !DILocation(line: 803, column: 43, scope: !8541)
!8548 = !DILocalVariable(name: "var", scope: !8541, file: !3301, line: 805, type: !1655)
!8549 = !DILocation(line: 805, column: 8, scope: !8541)
!8550 = !DILocalVariable(name: "iter", scope: !8541, file: !3301, line: 806, type: !8551)
!8551 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !1643, line: 140, baseType: !8552)
!8552 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !1643, line: 131, size: 320, elements: !8553)
!8553 = !{!8554, !8555, !8556, !8558, !8560, !8561, !8562}
!8554 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !8552, file: !1643, line: 133, baseType: !1775, size: 8)
!8555 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !8552, file: !1643, line: 134, baseType: !1642, size: 32, offset: 32)
!8556 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !8552, file: !1643, line: 135, baseType: !8557, size: 64, offset: 64)
!8557 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !1643, line: 42, baseType: !2015)
!8558 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !8552, file: !1643, line: 136, baseType: !8559, size: 64, offset: 128)
!8559 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !1643, line: 50, baseType: !2022)
!8560 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !8552, file: !1643, line: 137, baseType: !1752, size: 32, offset: 192)
!8561 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !8552, file: !1643, line: 138, baseType: !1752, size: 32, offset: 224)
!8562 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !8552, file: !1643, line: 139, baseType: !1986, size: 64, offset: 256)
!8563 = !DILocation(line: 806, column: 15, scope: !8541)
!8564 = !DILocation(line: 808, column: 35, scope: !8541)
!8565 = !DILocation(line: 808, column: 41, scope: !8541)
!8566 = !DILocation(line: 808, column: 9, scope: !8541)
!8567 = !DILocation(line: 808, column: 7, scope: !8541)
!8568 = !DILocation(line: 809, column: 7, scope: !8569)
!8569 = distinct !DILexicalBlock(scope: !8541, file: !3301, line: 809, column: 7)
!8570 = !DILocation(line: 809, column: 7, scope: !8541)
!8571 = !DILocation(line: 810, column: 5, scope: !8569)
!8572 = !DILocation(line: 811, column: 3, scope: !8541)
!8573 = !DILocation(line: 812, column: 7, scope: !8574)
!8574 = distinct !DILexicalBlock(scope: !8541, file: !3301, line: 812, column: 7)
!8575 = !DILocation(line: 812, column: 7, scope: !8541)
!8576 = !DILocation(line: 813, column: 12, scope: !8574)
!8577 = !DILocation(line: 813, column: 5, scope: !8574)
!8578 = !DILocation(line: 814, column: 3, scope: !8541)
!8579 = !DILocation(line: 815, column: 1, scope: !8541)
!8580 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !402, file: !402, line: 1283, type: !6169, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8581 = !DILocalVariable(name: "g", arg: 1, scope: !8580, file: !402, line: 1283, type: !3284)
!8582 = !DILocation(line: 1283, column: 34, scope: !8580)
!8583 = !DILocation(line: 1285, column: 23, scope: !8580)
!8584 = !DILocation(line: 1285, column: 10, scope: !8580)
!8585 = !DILocation(line: 1285, column: 26, scope: !8580)
!8586 = !DILocation(line: 1285, column: 43, scope: !8580)
!8587 = !DILocation(line: 1285, column: 59, scope: !8580)
!8588 = !DILocation(line: 1285, column: 46, scope: !8580)
!8589 = !DILocation(line: 1285, column: 62, scope: !8580)
!8590 = !DILocation(line: 0, scope: !8580)
!8591 = !DILocation(line: 1285, column: 3, scope: !8580)
!8592 = distinct !DISubprogram(name: "gimple_vuse", scope: !402, file: !402, line: 1365, type: !3347, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8593 = !DILocalVariable(name: "g", arg: 1, scope: !8592, file: !402, line: 1365, type: !3284)
!8594 = !DILocation(line: 1365, column: 27, scope: !8592)
!8595 = !DILocation(line: 1367, column: 28, scope: !8596)
!8596 = distinct !DILexicalBlock(scope: !8592, file: !402, line: 1367, column: 7)
!8597 = !DILocation(line: 1367, column: 8, scope: !8596)
!8598 = !DILocation(line: 1367, column: 7, scope: !8592)
!8599 = !DILocation(line: 1368, column: 5, scope: !8596)
!8600 = !DILocation(line: 1369, column: 10, scope: !8592)
!8601 = !DILocation(line: 1369, column: 13, scope: !8592)
!8602 = !DILocation(line: 1369, column: 23, scope: !8592)
!8603 = !DILocation(line: 1369, column: 3, scope: !8592)
!8604 = !DILocation(line: 1370, column: 1, scope: !8592)
!8605 = distinct !DISubprogram(name: "op_iter_init_tree", scope: !3301, file: !3301, line: 792, type: !8606, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8606 = !DISubroutineType(types: !8607)
!8607 = !{!1655, !8608, !1986, !1752}
!8608 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8551, size: 64)
!8609 = !DILocalVariable(name: "ptr", arg: 1, scope: !8605, file: !3301, line: 792, type: !8608)
!8610 = !DILocation(line: 792, column: 33, scope: !8605)
!8611 = !DILocalVariable(name: "stmt", arg: 2, scope: !8605, file: !3301, line: 792, type: !1986)
!8612 = !DILocation(line: 792, column: 45, scope: !8605)
!8613 = !DILocalVariable(name: "flags", arg: 3, scope: !8605, file: !3301, line: 792, type: !1752)
!8614 = !DILocation(line: 792, column: 55, scope: !8605)
!8615 = !DILocation(line: 794, column: 17, scope: !8605)
!8616 = !DILocation(line: 794, column: 22, scope: !8605)
!8617 = !DILocation(line: 794, column: 28, scope: !8605)
!8618 = !DILocation(line: 794, column: 3, scope: !8605)
!8619 = !DILocation(line: 795, column: 3, scope: !8605)
!8620 = !DILocation(line: 795, column: 8, scope: !8605)
!8621 = !DILocation(line: 795, column: 18, scope: !8605)
!8622 = !DILocation(line: 796, column: 29, scope: !8605)
!8623 = !DILocation(line: 796, column: 10, scope: !8605)
!8624 = !DILocation(line: 796, column: 3, scope: !8605)
!8625 = distinct !DISubprogram(name: "op_iter_done", scope: !3301, file: !3301, line: 652, type: !8626, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8626 = !DISubroutineType(types: !8627)
!8627 = !{!1775, !8628}
!8628 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8629, size: 64)
!8629 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8551)
!8630 = !DILocalVariable(name: "ptr", arg: 1, scope: !8625, file: !3301, line: 652, type: !8628)
!8631 = !DILocation(line: 652, column: 34, scope: !8625)
!8632 = !DILocation(line: 654, column: 10, scope: !8625)
!8633 = !DILocation(line: 654, column: 15, scope: !8625)
!8634 = !DILocation(line: 654, column: 3, scope: !8625)
!8635 = distinct !DISubprogram(name: "op_iter_next_tree", scope: !3301, file: !3301, line: 699, type: !8636, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8636 = !DISubroutineType(types: !8637)
!8637 = !{!1655, !8608}
!8638 = !DILocalVariable(name: "ptr", arg: 1, scope: !8635, file: !3301, line: 699, type: !8608)
!8639 = !DILocation(line: 699, column: 33, scope: !8635)
!8640 = !DILocalVariable(name: "val", scope: !8635, file: !3301, line: 701, type: !1655)
!8641 = !DILocation(line: 701, column: 8, scope: !8635)
!8642 = !DILocation(line: 705, column: 7, scope: !8643)
!8643 = distinct !DILexicalBlock(scope: !8635, file: !3301, line: 705, column: 7)
!8644 = !DILocation(line: 705, column: 12, scope: !8643)
!8645 = !DILocation(line: 705, column: 7, scope: !8635)
!8646 = !DILocation(line: 707, column: 13, scope: !8647)
!8647 = distinct !DILexicalBlock(scope: !8643, file: !3301, line: 706, column: 5)
!8648 = !DILocation(line: 707, column: 11, scope: !8647)
!8649 = !DILocation(line: 708, column: 19, scope: !8647)
!8650 = !DILocation(line: 708, column: 24, scope: !8647)
!8651 = !DILocation(line: 708, column: 30, scope: !8647)
!8652 = !DILocation(line: 708, column: 7, scope: !8647)
!8653 = !DILocation(line: 708, column: 12, scope: !8647)
!8654 = !DILocation(line: 708, column: 17, scope: !8647)
!8655 = !DILocation(line: 709, column: 14, scope: !8647)
!8656 = !DILocation(line: 709, column: 7, scope: !8647)
!8657 = !DILocation(line: 711, column: 7, scope: !8658)
!8658 = distinct !DILexicalBlock(scope: !8635, file: !3301, line: 711, column: 7)
!8659 = !DILocation(line: 711, column: 12, scope: !8658)
!8660 = !DILocation(line: 711, column: 7, scope: !8635)
!8661 = !DILocation(line: 713, column: 13, scope: !8662)
!8662 = distinct !DILexicalBlock(scope: !8658, file: !3301, line: 712, column: 5)
!8663 = !DILocation(line: 713, column: 11, scope: !8662)
!8664 = !DILocation(line: 714, column: 19, scope: !8662)
!8665 = !DILocation(line: 714, column: 24, scope: !8662)
!8666 = !DILocation(line: 714, column: 30, scope: !8662)
!8667 = !DILocation(line: 714, column: 7, scope: !8662)
!8668 = !DILocation(line: 714, column: 12, scope: !8662)
!8669 = !DILocation(line: 714, column: 17, scope: !8662)
!8670 = !DILocation(line: 715, column: 14, scope: !8662)
!8671 = !DILocation(line: 715, column: 7, scope: !8662)
!8672 = !DILocation(line: 718, column: 3, scope: !8635)
!8673 = !DILocation(line: 718, column: 8, scope: !8635)
!8674 = !DILocation(line: 718, column: 13, scope: !8635)
!8675 = !DILocation(line: 719, column: 3, scope: !8635)
!8676 = !DILocation(line: 721, column: 1, scope: !8635)
!8677 = distinct !DISubprogram(name: "op_iter_init", scope: !3301, file: !3301, line: 742, type: !8678, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8678 = !DISubroutineType(types: !8679)
!8679 = !{null, !8608, !1986, !1752}
!8680 = !DILocalVariable(name: "ptr", arg: 1, scope: !8677, file: !3301, line: 742, type: !8608)
!8681 = !DILocation(line: 742, column: 28, scope: !8677)
!8682 = !DILocalVariable(name: "stmt", arg: 2, scope: !8677, file: !3301, line: 742, type: !1986)
!8683 = !DILocation(line: 742, column: 40, scope: !8677)
!8684 = !DILocalVariable(name: "flags", arg: 3, scope: !8677, file: !3301, line: 742, type: !1752)
!8685 = !DILocation(line: 742, column: 50, scope: !8677)
!8686 = !DILocation(line: 746, column: 3, scope: !8677)
!8687 = !DILocation(line: 748, column: 16, scope: !8677)
!8688 = !DILocation(line: 748, column: 22, scope: !8677)
!8689 = !DILocation(line: 748, column: 15, scope: !8677)
!8690 = !DILocation(line: 748, column: 68, scope: !8677)
!8691 = !DILocation(line: 748, column: 52, scope: !8677)
!8692 = !DILocation(line: 748, column: 3, scope: !8677)
!8693 = !DILocation(line: 748, column: 8, scope: !8677)
!8694 = !DILocation(line: 748, column: 13, scope: !8677)
!8695 = !DILocation(line: 749, column: 9, scope: !8696)
!8696 = distinct !DILexicalBlock(scope: !8677, file: !3301, line: 749, column: 7)
!8697 = !DILocation(line: 749, column: 15, scope: !8696)
!8698 = !DILocation(line: 750, column: 7, scope: !8696)
!8699 = !DILocation(line: 750, column: 10, scope: !8696)
!8700 = !DILocation(line: 750, column: 15, scope: !8696)
!8701 = !DILocation(line: 751, column: 7, scope: !8696)
!8702 = !DILocation(line: 751, column: 23, scope: !8696)
!8703 = !DILocation(line: 751, column: 10, scope: !8696)
!8704 = !DILocation(line: 751, column: 29, scope: !8696)
!8705 = !DILocation(line: 749, column: 7, scope: !8677)
!8706 = !DILocation(line: 752, column: 17, scope: !8696)
!8707 = !DILocation(line: 752, column: 22, scope: !8696)
!8708 = !DILocation(line: 752, column: 28, scope: !8696)
!8709 = !DILocation(line: 752, column: 5, scope: !8696)
!8710 = !DILocation(line: 752, column: 10, scope: !8696)
!8711 = !DILocation(line: 752, column: 15, scope: !8696)
!8712 = !DILocation(line: 753, column: 16, scope: !8677)
!8713 = !DILocation(line: 753, column: 22, scope: !8677)
!8714 = !DILocation(line: 753, column: 15, scope: !8677)
!8715 = !DILocation(line: 753, column: 68, scope: !8677)
!8716 = !DILocation(line: 753, column: 52, scope: !8677)
!8717 = !DILocation(line: 753, column: 3, scope: !8677)
!8718 = !DILocation(line: 753, column: 8, scope: !8677)
!8719 = !DILocation(line: 753, column: 13, scope: !8677)
!8720 = !DILocation(line: 754, column: 9, scope: !8721)
!8721 = distinct !DILexicalBlock(scope: !8677, file: !3301, line: 754, column: 7)
!8722 = !DILocation(line: 754, column: 15, scope: !8721)
!8723 = !DILocation(line: 755, column: 7, scope: !8721)
!8724 = !DILocation(line: 755, column: 10, scope: !8721)
!8725 = !DILocation(line: 755, column: 15, scope: !8721)
!8726 = !DILocation(line: 756, column: 7, scope: !8721)
!8727 = !DILocation(line: 756, column: 23, scope: !8721)
!8728 = !DILocation(line: 756, column: 10, scope: !8721)
!8729 = !DILocation(line: 756, column: 29, scope: !8721)
!8730 = !DILocation(line: 754, column: 7, scope: !8677)
!8731 = !DILocation(line: 757, column: 17, scope: !8721)
!8732 = !DILocation(line: 757, column: 22, scope: !8721)
!8733 = !DILocation(line: 757, column: 28, scope: !8721)
!8734 = !DILocation(line: 757, column: 5, scope: !8721)
!8735 = !DILocation(line: 757, column: 10, scope: !8721)
!8736 = !DILocation(line: 757, column: 15, scope: !8721)
!8737 = !DILocation(line: 758, column: 3, scope: !8677)
!8738 = !DILocation(line: 758, column: 8, scope: !8677)
!8739 = !DILocation(line: 758, column: 13, scope: !8677)
!8740 = !DILocation(line: 760, column: 3, scope: !8677)
!8741 = !DILocation(line: 760, column: 8, scope: !8677)
!8742 = !DILocation(line: 760, column: 14, scope: !8677)
!8743 = !DILocation(line: 761, column: 3, scope: !8677)
!8744 = !DILocation(line: 761, column: 8, scope: !8677)
!8745 = !DILocation(line: 761, column: 16, scope: !8677)
!8746 = !DILocation(line: 762, column: 3, scope: !8677)
!8747 = !DILocation(line: 762, column: 8, scope: !8677)
!8748 = !DILocation(line: 762, column: 17, scope: !8677)
!8749 = !DILocation(line: 763, column: 1, scope: !8677)
!8750 = distinct !DISubprogram(name: "gimple_def_ops", scope: !402, file: !402, line: 1292, type: !8751, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8751 = !DISubroutineType(types: !8752)
!8752 = !{!2015, !3284}
!8753 = !DILocalVariable(name: "g", arg: 1, scope: !8750, file: !402, line: 1292, type: !3284)
!8754 = !DILocation(line: 1292, column: 30, scope: !8750)
!8755 = !DILocation(line: 1294, column: 24, scope: !8756)
!8756 = distinct !DILexicalBlock(scope: !8750, file: !402, line: 1294, column: 7)
!8757 = !DILocation(line: 1294, column: 8, scope: !8756)
!8758 = !DILocation(line: 1294, column: 7, scope: !8750)
!8759 = !DILocation(line: 1295, column: 5, scope: !8756)
!8760 = !DILocation(line: 1296, column: 10, scope: !8750)
!8761 = !DILocation(line: 1296, column: 13, scope: !8750)
!8762 = !DILocation(line: 1296, column: 19, scope: !8750)
!8763 = !DILocation(line: 1296, column: 26, scope: !8750)
!8764 = !DILocation(line: 1296, column: 3, scope: !8750)
!8765 = !DILocation(line: 1297, column: 1, scope: !8750)
!8766 = distinct !DISubprogram(name: "gimple_vdef", scope: !402, file: !402, line: 1375, type: !3347, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8767 = !DILocalVariable(name: "g", arg: 1, scope: !8766, file: !402, line: 1375, type: !3284)
!8768 = !DILocation(line: 1375, column: 27, scope: !8766)
!8769 = !DILocation(line: 1377, column: 28, scope: !8770)
!8770 = distinct !DILexicalBlock(scope: !8766, file: !402, line: 1377, column: 7)
!8771 = !DILocation(line: 1377, column: 8, scope: !8770)
!8772 = !DILocation(line: 1377, column: 7, scope: !8766)
!8773 = !DILocation(line: 1378, column: 5, scope: !8770)
!8774 = !DILocation(line: 1379, column: 10, scope: !8766)
!8775 = !DILocation(line: 1379, column: 13, scope: !8766)
!8776 = !DILocation(line: 1379, column: 23, scope: !8766)
!8777 = !DILocation(line: 1379, column: 3, scope: !8766)
!8778 = !DILocation(line: 1380, column: 1, scope: !8766)
!8779 = distinct !DISubprogram(name: "gimple_use_ops", scope: !402, file: !402, line: 1313, type: !8780, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8780 = !DISubroutineType(types: !8781)
!8781 = !{!2022, !3284}
!8782 = !DILocalVariable(name: "g", arg: 1, scope: !8779, file: !402, line: 1313, type: !3284)
!8783 = !DILocation(line: 1313, column: 30, scope: !8779)
!8784 = !DILocation(line: 1315, column: 24, scope: !8785)
!8785 = distinct !DILexicalBlock(scope: !8779, file: !402, line: 1315, column: 7)
!8786 = !DILocation(line: 1315, column: 8, scope: !8785)
!8787 = !DILocation(line: 1315, column: 7, scope: !8779)
!8788 = !DILocation(line: 1316, column: 5, scope: !8785)
!8789 = !DILocation(line: 1317, column: 10, scope: !8779)
!8790 = !DILocation(line: 1317, column: 13, scope: !8779)
!8791 = !DILocation(line: 1317, column: 19, scope: !8779)
!8792 = !DILocation(line: 1317, column: 26, scope: !8779)
!8793 = !DILocation(line: 1317, column: 3, scope: !8779)
!8794 = !DILocation(line: 1318, column: 1, scope: !8779)
!8795 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !3301, file: !3301, line: 434, type: !8796, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8796 = !DISubroutineType(types: !8797)
!8797 = !{!1655, !8798}
!8798 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !1643, line: 27, baseType: !2020)
!8799 = !DILocalVariable(name: "def", arg: 1, scope: !8795, file: !3301, line: 434, type: !8798)
!8800 = !DILocation(line: 434, column: 33, scope: !8795)
!8801 = !DILocation(line: 436, column: 11, scope: !8795)
!8802 = !DILocation(line: 436, column: 10, scope: !8795)
!8803 = !DILocation(line: 436, column: 3, scope: !8795)
!8804 = distinct !DISubprogram(name: "is_gimple_assign", scope: !402, file: !402, line: 1677, type: !6169, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8805 = !DILocalVariable(name: "gs", arg: 1, scope: !8804, file: !402, line: 1677, type: !3284)
!8806 = !DILocation(line: 1677, column: 32, scope: !8804)
!8807 = !DILocation(line: 1679, column: 23, scope: !8804)
!8808 = !DILocation(line: 1679, column: 10, scope: !8804)
!8809 = !DILocation(line: 1679, column: 27, scope: !8804)
!8810 = !DILocation(line: 1679, column: 3, scope: !8804)
!8811 = distinct !DISubprogram(name: "gimple_assign_rhs_class", scope: !402, file: !402, line: 1844, type: !8812, scopeLine: 1845, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8812 = !DISubroutineType(types: !8813)
!8813 = !{!440, !3284}
!8814 = !DILocalVariable(name: "gs", arg: 1, scope: !8811, file: !402, line: 1844, type: !3284)
!8815 = !DILocation(line: 1844, column: 39, scope: !8811)
!8816 = !DILocation(line: 1846, column: 56, scope: !8811)
!8817 = !DILocation(line: 1846, column: 32, scope: !8811)
!8818 = !DILocation(line: 1846, column: 10, scope: !8811)
!8819 = !DILocation(line: 1846, column: 3, scope: !8811)
!8820 = distinct !DISubprogram(name: "gimple_expr_type", scope: !402, file: !402, line: 4366, type: !3347, scopeLine: 4367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8821 = !DILocalVariable(name: "stmt", arg: 1, scope: !8820, file: !402, line: 4366, type: !3284)
!8822 = !DILocation(line: 4366, column: 32, scope: !8820)
!8823 = !DILocalVariable(name: "code", scope: !8820, file: !402, line: 4368, type: !401)
!8824 = !DILocation(line: 4368, column: 20, scope: !8820)
!8825 = !DILocation(line: 4368, column: 40, scope: !8820)
!8826 = !DILocation(line: 4368, column: 27, scope: !8820)
!8827 = !DILocation(line: 4370, column: 7, scope: !8828)
!8828 = distinct !DILexicalBlock(scope: !8820, file: !402, line: 4370, column: 7)
!8829 = !DILocation(line: 4370, column: 12, scope: !8828)
!8830 = !DILocation(line: 4370, column: 29, scope: !8828)
!8831 = !DILocation(line: 4370, column: 32, scope: !8828)
!8832 = !DILocation(line: 4370, column: 37, scope: !8828)
!8833 = !DILocation(line: 4370, column: 7, scope: !8820)
!8834 = !DILocalVariable(name: "type", scope: !8835, file: !402, line: 4372, type: !1655)
!8835 = distinct !DILexicalBlock(scope: !8828, file: !402, line: 4371, column: 5)
!8836 = !DILocation(line: 4372, column: 12, scope: !8835)
!8837 = !DILocation(line: 4377, column: 11, scope: !8838)
!8838 = distinct !DILexicalBlock(scope: !8835, file: !402, line: 4377, column: 11)
!8839 = !DILocation(line: 4377, column: 16, scope: !8838)
!8840 = !DILocation(line: 4377, column: 11, scope: !8835)
!8841 = !DILocation(line: 4378, column: 34, scope: !8838)
!8842 = !DILocation(line: 4378, column: 9, scope: !8838)
!8843 = !DILocation(line: 4378, column: 7, scope: !8838)
!8844 = !DILocation(line: 4378, column: 2, scope: !8838)
!8845 = !DILocation(line: 4380, column: 34, scope: !8838)
!8846 = !DILocation(line: 4380, column: 10, scope: !8838)
!8847 = !DILocation(line: 4380, column: 2, scope: !8838)
!8848 = !DILocation(line: 4383, column: 13, scope: !8849)
!8849 = distinct !DILexicalBlock(scope: !8838, file: !402, line: 4381, column: 4)
!8850 = !DILocation(line: 4383, column: 11, scope: !8849)
!8851 = !DILocation(line: 4384, column: 6, scope: !8849)
!8852 = !DILocation(line: 4388, column: 13, scope: !8849)
!8853 = !DILocation(line: 4388, column: 11, scope: !8849)
!8854 = !DILocation(line: 4389, column: 6, scope: !8849)
!8855 = !DILocation(line: 4391, column: 14, scope: !8835)
!8856 = !DILocation(line: 4391, column: 7, scope: !8835)
!8857 = !DILocation(line: 4393, column: 12, scope: !8858)
!8858 = distinct !DILexicalBlock(scope: !8828, file: !402, line: 4393, column: 12)
!8859 = !DILocation(line: 4393, column: 17, scope: !8858)
!8860 = !DILocation(line: 4393, column: 12, scope: !8828)
!8861 = !DILocation(line: 4394, column: 12, scope: !8858)
!8862 = !DILocation(line: 4394, column: 5, scope: !8858)
!8863 = !DILocation(line: 4396, column: 12, scope: !8858)
!8864 = !DILocation(line: 4396, column: 5, scope: !8858)
!8865 = !DILocation(line: 4397, column: 1, scope: !8820)
!8866 = distinct !DISubprogram(name: "gimple_call_return_type", scope: !402, file: !402, line: 1966, type: !3347, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8867 = !DILocalVariable(name: "gs", arg: 1, scope: !8866, file: !402, line: 1966, type: !3284)
!8868 = !DILocation(line: 1966, column: 39, scope: !8866)
!8869 = !DILocalVariable(name: "fn", scope: !8866, file: !402, line: 1968, type: !1655)
!8870 = !DILocation(line: 1968, column: 8, scope: !8866)
!8871 = !DILocation(line: 1968, column: 29, scope: !8866)
!8872 = !DILocation(line: 1968, column: 13, scope: !8866)
!8873 = !DILocalVariable(name: "type", scope: !8866, file: !402, line: 1969, type: !1655)
!8874 = !DILocation(line: 1969, column: 8, scope: !8866)
!8875 = !DILocation(line: 1969, column: 15, scope: !8866)
!8876 = !DILocation(line: 1972, column: 10, scope: !8866)
!8877 = !DILocation(line: 1972, column: 8, scope: !8866)
!8878 = !DILocation(line: 1976, column: 10, scope: !8866)
!8879 = !DILocation(line: 1976, column: 3, scope: !8866)
!8880 = distinct !DISubprogram(name: "gimple_call_fn", scope: !402, file: !402, line: 1911, type: !3347, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8881 = !DILocalVariable(name: "gs", arg: 1, scope: !8880, file: !402, line: 1911, type: !3284)
!8882 = !DILocation(line: 1911, column: 30, scope: !8880)
!8883 = !DILocation(line: 1914, column: 21, scope: !8880)
!8884 = !DILocation(line: 1914, column: 10, scope: !8880)
!8885 = !DILocation(line: 1914, column: 3, scope: !8880)
!8886 = distinct !DISubprogram(name: "infer_loop_bounds_from_array", scope: !1, file: !1, line: 2769, type: !8887, scopeLine: 2770, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8887 = !DISubroutineType(types: !8888)
!8888 = !{null, !2201, !1986, !1775}
!8889 = !DILocalVariable(name: "loop", arg: 1, scope: !8886, file: !1, line: 2769, type: !2201)
!8890 = !DILocation(line: 2769, column: 44, scope: !8886)
!8891 = !DILocalVariable(name: "stmt", arg: 2, scope: !8886, file: !1, line: 2769, type: !1986)
!8892 = !DILocation(line: 2769, column: 57, scope: !8886)
!8893 = !DILocalVariable(name: "reliable", arg: 3, scope: !8886, file: !1, line: 2769, type: !1775)
!8894 = !DILocation(line: 2769, column: 68, scope: !8886)
!8895 = !DILocation(line: 2771, column: 25, scope: !8896)
!8896 = distinct !DILexicalBlock(scope: !8886, file: !1, line: 2771, column: 7)
!8897 = !DILocation(line: 2771, column: 7, scope: !8896)
!8898 = !DILocation(line: 2771, column: 7, scope: !8886)
!8899 = !DILocalVariable(name: "op0", scope: !8900, file: !1, line: 2773, type: !1655)
!8900 = distinct !DILexicalBlock(scope: !8896, file: !1, line: 2772, column: 5)
!8901 = !DILocation(line: 2773, column: 12, scope: !8900)
!8902 = !DILocation(line: 2773, column: 37, scope: !8900)
!8903 = !DILocation(line: 2773, column: 18, scope: !8900)
!8904 = !DILocalVariable(name: "op1", scope: !8900, file: !1, line: 2774, type: !1655)
!8905 = !DILocation(line: 2774, column: 12, scope: !8900)
!8906 = !DILocation(line: 2774, column: 38, scope: !8900)
!8907 = !DILocation(line: 2774, column: 18, scope: !8900)
!8908 = !DILocation(line: 2778, column: 11, scope: !8909)
!8909 = distinct !DILexicalBlock(scope: !8900, file: !1, line: 2778, column: 11)
!8910 = !DILocation(line: 2778, column: 11, scope: !8900)
!8911 = !DILocation(line: 2779, column: 30, scope: !8909)
!8912 = !DILocation(line: 2779, column: 36, scope: !8909)
!8913 = !DILocation(line: 2779, column: 42, scope: !8909)
!8914 = !DILocation(line: 2779, column: 47, scope: !8909)
!8915 = !DILocation(line: 2779, column: 2, scope: !8909)
!8916 = !DILocation(line: 2781, column: 11, scope: !8917)
!8917 = distinct !DILexicalBlock(scope: !8900, file: !1, line: 2781, column: 11)
!8918 = !DILocation(line: 2781, column: 11, scope: !8900)
!8919 = !DILocation(line: 2782, column: 30, scope: !8917)
!8920 = !DILocation(line: 2782, column: 36, scope: !8917)
!8921 = !DILocation(line: 2782, column: 42, scope: !8917)
!8922 = !DILocation(line: 2782, column: 47, scope: !8917)
!8923 = !DILocation(line: 2782, column: 2, scope: !8917)
!8924 = !DILocation(line: 2783, column: 5, scope: !8900)
!8925 = !DILocation(line: 2784, column: 28, scope: !8926)
!8926 = distinct !DILexicalBlock(scope: !8896, file: !1, line: 2784, column: 12)
!8927 = !DILocation(line: 2784, column: 12, scope: !8926)
!8928 = !DILocation(line: 2784, column: 12, scope: !8896)
!8929 = !DILocalVariable(name: "arg", scope: !8930, file: !1, line: 2786, type: !1655)
!8930 = distinct !DILexicalBlock(scope: !8926, file: !1, line: 2785, column: 5)
!8931 = !DILocation(line: 2786, column: 12, scope: !8930)
!8932 = !DILocalVariable(name: "lhs", scope: !8930, file: !1, line: 2786, type: !1655)
!8933 = !DILocation(line: 2786, column: 17, scope: !8930)
!8934 = !DILocalVariable(name: "i", scope: !8930, file: !1, line: 2787, type: !5)
!8935 = !DILocation(line: 2787, column: 16, scope: !8930)
!8936 = !DILocalVariable(name: "n", scope: !8930, file: !1, line: 2787, type: !5)
!8937 = !DILocation(line: 2787, column: 19, scope: !8930)
!8938 = !DILocation(line: 2787, column: 45, scope: !8930)
!8939 = !DILocation(line: 2787, column: 23, scope: !8930)
!8940 = !DILocation(line: 2789, column: 30, scope: !8930)
!8941 = !DILocation(line: 2789, column: 13, scope: !8930)
!8942 = !DILocation(line: 2789, column: 11, scope: !8930)
!8943 = !DILocation(line: 2790, column: 11, scope: !8944)
!8944 = distinct !DILexicalBlock(scope: !8930, file: !1, line: 2790, column: 11)
!8945 = !DILocation(line: 2790, column: 15, scope: !8944)
!8946 = !DILocation(line: 2790, column: 18, scope: !8944)
!8947 = !DILocation(line: 2790, column: 11, scope: !8930)
!8948 = !DILocation(line: 2791, column: 30, scope: !8944)
!8949 = !DILocation(line: 2791, column: 36, scope: !8944)
!8950 = !DILocation(line: 2791, column: 42, scope: !8944)
!8951 = !DILocation(line: 2791, column: 47, scope: !8944)
!8952 = !DILocation(line: 2791, column: 2, scope: !8944)
!8953 = !DILocation(line: 2793, column: 14, scope: !8954)
!8954 = distinct !DILexicalBlock(scope: !8930, file: !1, line: 2793, column: 7)
!8955 = !DILocation(line: 2793, column: 12, scope: !8954)
!8956 = !DILocation(line: 2793, column: 19, scope: !8957)
!8957 = distinct !DILexicalBlock(scope: !8954, file: !1, line: 2793, column: 7)
!8958 = !DILocation(line: 2793, column: 23, scope: !8957)
!8959 = !DILocation(line: 2793, column: 21, scope: !8957)
!8960 = !DILocation(line: 2793, column: 7, scope: !8954)
!8961 = !DILocation(line: 2795, column: 27, scope: !8962)
!8962 = distinct !DILexicalBlock(scope: !8957, file: !1, line: 2794, column: 2)
!8963 = !DILocation(line: 2795, column: 33, scope: !8962)
!8964 = !DILocation(line: 2795, column: 10, scope: !8962)
!8965 = !DILocation(line: 2795, column: 8, scope: !8962)
!8966 = !DILocation(line: 2796, column: 8, scope: !8967)
!8967 = distinct !DILexicalBlock(scope: !8962, file: !1, line: 2796, column: 8)
!8968 = !DILocation(line: 2796, column: 8, scope: !8962)
!8969 = !DILocation(line: 2797, column: 34, scope: !8967)
!8970 = !DILocation(line: 2797, column: 40, scope: !8967)
!8971 = !DILocation(line: 2797, column: 46, scope: !8967)
!8972 = !DILocation(line: 2797, column: 51, scope: !8967)
!8973 = !DILocation(line: 2797, column: 6, scope: !8967)
!8974 = !DILocation(line: 2798, column: 2, scope: !8962)
!8975 = !DILocation(line: 2793, column: 27, scope: !8957)
!8976 = !DILocation(line: 2793, column: 7, scope: !8957)
!8977 = distinct !{!8977, !8960, !8978}
!8978 = !DILocation(line: 2798, column: 2, scope: !8954)
!8979 = !DILocation(line: 2799, column: 5, scope: !8930)
!8980 = !DILocation(line: 2800, column: 1, scope: !8886)
!8981 = distinct !DISubprogram(name: "infer_loop_bounds_from_signedness", scope: !1, file: !1, line: 2806, type: !8982, scopeLine: 2807, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!8982 = !DISubroutineType(types: !8983)
!8983 = !{null, !2201, !1986}
!8984 = !DILocalVariable(name: "loop", arg: 1, scope: !8981, file: !1, line: 2806, type: !2201)
!8985 = !DILocation(line: 2806, column: 49, scope: !8981)
!8986 = !DILocalVariable(name: "stmt", arg: 2, scope: !8981, file: !1, line: 2806, type: !1986)
!8987 = !DILocation(line: 2806, column: 62, scope: !8981)
!8988 = !DILocalVariable(name: "def", scope: !8981, file: !1, line: 2808, type: !1655)
!8989 = !DILocation(line: 2808, column: 8, scope: !8981)
!8990 = !DILocalVariable(name: "base", scope: !8981, file: !1, line: 2808, type: !1655)
!8991 = !DILocation(line: 2808, column: 13, scope: !8981)
!8992 = !DILocalVariable(name: "step", scope: !8981, file: !1, line: 2808, type: !1655)
!8993 = !DILocation(line: 2808, column: 19, scope: !8981)
!8994 = !DILocalVariable(name: "scev", scope: !8981, file: !1, line: 2808, type: !1655)
!8995 = !DILocation(line: 2808, column: 25, scope: !8981)
!8996 = !DILocalVariable(name: "type", scope: !8981, file: !1, line: 2808, type: !1655)
!8997 = !DILocation(line: 2808, column: 31, scope: !8981)
!8998 = !DILocalVariable(name: "low", scope: !8981, file: !1, line: 2808, type: !1655)
!8999 = !DILocation(line: 2808, column: 37, scope: !8981)
!9000 = !DILocalVariable(name: "high", scope: !8981, file: !1, line: 2808, type: !1655)
!9001 = !DILocation(line: 2808, column: 42, scope: !8981)
!9002 = !DILocation(line: 2810, column: 20, scope: !9003)
!9003 = distinct !DILexicalBlock(scope: !8981, file: !1, line: 2810, column: 7)
!9004 = !DILocation(line: 2810, column: 7, scope: !9003)
!9005 = !DILocation(line: 2810, column: 26, scope: !9003)
!9006 = !DILocation(line: 2810, column: 7, scope: !8981)
!9007 = !DILocation(line: 2811, column: 5, scope: !9003)
!9008 = !DILocation(line: 2813, column: 28, scope: !8981)
!9009 = !DILocation(line: 2813, column: 9, scope: !8981)
!9010 = !DILocation(line: 2813, column: 7, scope: !8981)
!9011 = !DILocation(line: 2815, column: 7, scope: !9012)
!9012 = distinct !DILexicalBlock(scope: !8981, file: !1, line: 2815, column: 7)
!9013 = !DILocation(line: 2815, column: 23, scope: !9012)
!9014 = !DILocation(line: 2815, column: 7, scope: !8981)
!9015 = !DILocation(line: 2816, column: 5, scope: !9012)
!9016 = !DILocation(line: 2818, column: 10, scope: !8981)
!9017 = !DILocation(line: 2818, column: 8, scope: !8981)
!9018 = !DILocation(line: 2819, column: 8, scope: !9019)
!9019 = distinct !DILexicalBlock(scope: !8981, file: !1, line: 2819, column: 7)
!9020 = !DILocation(line: 2820, column: 7, scope: !9019)
!9021 = !DILocation(line: 2820, column: 11, scope: !9019)
!9022 = !DILocation(line: 2819, column: 7, scope: !8981)
!9023 = !DILocation(line: 2821, column: 5, scope: !9019)
!9024 = !DILocation(line: 2823, column: 34, scope: !8981)
!9025 = !DILocation(line: 2823, column: 66, scope: !8981)
!9026 = !DILocation(line: 2823, column: 72, scope: !8981)
!9027 = !DILocation(line: 2823, column: 40, scope: !8981)
!9028 = !DILocation(line: 2823, column: 10, scope: !8981)
!9029 = !DILocation(line: 2823, column: 8, scope: !8981)
!9030 = !DILocation(line: 2824, column: 36, scope: !9031)
!9031 = distinct !DILexicalBlock(scope: !8981, file: !1, line: 2824, column: 7)
!9032 = !DILocation(line: 2824, column: 7, scope: !9031)
!9033 = !DILocation(line: 2824, column: 7, scope: !8981)
!9034 = !DILocation(line: 2825, column: 5, scope: !9031)
!9035 = !DILocation(line: 2827, column: 41, scope: !8981)
!9036 = !DILocation(line: 2827, column: 47, scope: !8981)
!9037 = !DILocation(line: 2827, column: 53, scope: !8981)
!9038 = !DILocation(line: 2827, column: 10, scope: !8981)
!9039 = !DILocation(line: 2827, column: 8, scope: !8981)
!9040 = !DILocation(line: 2828, column: 38, scope: !8981)
!9041 = !DILocation(line: 2828, column: 44, scope: !8981)
!9042 = !DILocation(line: 2828, column: 50, scope: !8981)
!9043 = !DILocation(line: 2828, column: 10, scope: !8981)
!9044 = !DILocation(line: 2828, column: 8, scope: !8981)
!9045 = !DILocation(line: 2830, column: 8, scope: !9046)
!9046 = distinct !DILexicalBlock(scope: !8981, file: !1, line: 2830, column: 7)
!9047 = !DILocation(line: 2830, column: 13, scope: !9046)
!9048 = !DILocation(line: 2830, column: 17, scope: !9046)
!9049 = !DILocation(line: 2831, column: 7, scope: !9046)
!9050 = !DILocation(line: 2831, column: 10, scope: !9046)
!9051 = !DILocation(line: 2831, column: 27, scope: !9046)
!9052 = !DILocation(line: 2832, column: 7, scope: !9046)
!9053 = !DILocation(line: 2832, column: 32, scope: !9046)
!9054 = !DILocation(line: 2832, column: 10, scope: !9046)
!9055 = !DILocation(line: 2833, column: 7, scope: !9046)
!9056 = !DILocation(line: 2833, column: 50, scope: !9046)
!9057 = !DILocation(line: 2833, column: 56, scope: !9046)
!9058 = !DILocation(line: 2833, column: 62, scope: !9046)
!9059 = !DILocation(line: 2833, column: 10, scope: !9046)
!9060 = !DILocation(line: 2830, column: 7, scope: !8981)
!9061 = !DILocation(line: 2834, column: 5, scope: !9046)
!9062 = !DILocation(line: 2836, column: 30, scope: !8981)
!9063 = !DILocation(line: 2836, column: 36, scope: !8981)
!9064 = !DILocation(line: 2836, column: 9, scope: !8981)
!9065 = !DILocation(line: 2836, column: 7, scope: !8981)
!9066 = !DILocation(line: 2837, column: 31, scope: !8981)
!9067 = !DILocation(line: 2837, column: 37, scope: !8981)
!9068 = !DILocation(line: 2837, column: 10, scope: !8981)
!9069 = !DILocation(line: 2837, column: 8, scope: !8981)
!9070 = !DILocation(line: 2839, column: 26, scope: !8981)
!9071 = !DILocation(line: 2839, column: 32, scope: !8981)
!9072 = !DILocation(line: 2839, column: 38, scope: !8981)
!9073 = !DILocation(line: 2839, column: 44, scope: !8981)
!9074 = !DILocation(line: 2839, column: 50, scope: !8981)
!9075 = !DILocation(line: 2839, column: 55, scope: !8981)
!9076 = !DILocation(line: 2839, column: 3, scope: !8981)
!9077 = !DILocation(line: 2840, column: 1, scope: !8981)
!9078 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !402, file: !402, line: 1694, type: !3347, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9079 = !DILocalVariable(name: "gs", arg: 1, scope: !9078, file: !402, line: 1694, type: !3284)
!9080 = !DILocation(line: 1694, column: 33, scope: !9078)
!9081 = !DILocation(line: 1697, column: 21, scope: !9078)
!9082 = !DILocation(line: 1697, column: 10, scope: !9078)
!9083 = !DILocation(line: 1697, column: 3, scope: !9078)
!9084 = distinct !DISubprogram(name: "infer_loop_bounds_from_ref", scope: !1, file: !1, line: 2753, type: !9085, scopeLine: 2755, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9085 = !DISubroutineType(types: !9086)
!9086 = !{null, !2201, !1986, !1655, !1775}
!9087 = !DILocalVariable(name: "loop", arg: 1, scope: !9084, file: !1, line: 2753, type: !2201)
!9088 = !DILocation(line: 2753, column: 42, scope: !9084)
!9089 = !DILocalVariable(name: "stmt", arg: 2, scope: !9084, file: !1, line: 2753, type: !1986)
!9090 = !DILocation(line: 2753, column: 55, scope: !9084)
!9091 = !DILocalVariable(name: "ref", arg: 3, scope: !9084, file: !1, line: 2753, type: !1655)
!9092 = !DILocation(line: 2753, column: 66, scope: !9084)
!9093 = !DILocalVariable(name: "reliable", arg: 4, scope: !9084, file: !1, line: 2754, type: !1775)
!9094 = !DILocation(line: 2754, column: 13, scope: !9084)
!9095 = !DILocalVariable(name: "data", scope: !9084, file: !1, line: 2756, type: !3050)
!9096 = !DILocation(line: 2756, column: 19, scope: !9084)
!9097 = !DILocation(line: 2758, column: 15, scope: !9084)
!9098 = !DILocation(line: 2758, column: 8, scope: !9084)
!9099 = !DILocation(line: 2758, column: 13, scope: !9084)
!9100 = !DILocation(line: 2759, column: 15, scope: !9084)
!9101 = !DILocation(line: 2759, column: 8, scope: !9084)
!9102 = !DILocation(line: 2759, column: 13, scope: !9084)
!9103 = !DILocation(line: 2760, column: 19, scope: !9084)
!9104 = !DILocation(line: 2760, column: 8, scope: !9084)
!9105 = !DILocation(line: 2760, column: 17, scope: !9084)
!9106 = !DILocation(line: 2761, column: 48, scope: !9084)
!9107 = !DILocation(line: 2761, column: 3, scope: !9084)
!9108 = !DILocation(line: 2762, column: 1, scope: !9084)
!9109 = distinct !DISubprogram(name: "is_gimple_call", scope: !402, file: !402, line: 1870, type: !6169, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9110 = !DILocalVariable(name: "gs", arg: 1, scope: !9109, file: !402, line: 1870, type: !3284)
!9111 = !DILocation(line: 1870, column: 30, scope: !9109)
!9112 = !DILocation(line: 1872, column: 23, scope: !9109)
!9113 = !DILocation(line: 1872, column: 10, scope: !9109)
!9114 = !DILocation(line: 1872, column: 27, scope: !9109)
!9115 = !DILocation(line: 1872, column: 3, scope: !9109)
!9116 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !402, file: !402, line: 2013, type: !3292, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9117 = !DILocalVariable(name: "gs", arg: 1, scope: !9116, file: !402, line: 2013, type: !3284)
!9118 = !DILocation(line: 2013, column: 36, scope: !9116)
!9119 = !DILocalVariable(name: "num_ops", scope: !9116, file: !402, line: 2015, type: !5)
!9120 = !DILocation(line: 2015, column: 12, scope: !9116)
!9121 = !DILocation(line: 2017, column: 29, scope: !9116)
!9122 = !DILocation(line: 2017, column: 13, scope: !9116)
!9123 = !DILocation(line: 2017, column: 11, scope: !9116)
!9124 = !DILocation(line: 2018, column: 10, scope: !9116)
!9125 = !DILocation(line: 2018, column: 18, scope: !9116)
!9126 = !DILocation(line: 2018, column: 3, scope: !9116)
!9127 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !402, file: !402, line: 1878, type: !3347, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9128 = !DILocalVariable(name: "gs", arg: 1, scope: !9127, file: !402, line: 1878, type: !3284)
!9129 = !DILocation(line: 1878, column: 31, scope: !9127)
!9130 = !DILocation(line: 1881, column: 21, scope: !9127)
!9131 = !DILocation(line: 1881, column: 10, scope: !9127)
!9132 = !DILocation(line: 1881, column: 3, scope: !9127)
!9133 = distinct !DISubprogram(name: "gimple_call_arg", scope: !402, file: !402, line: 2025, type: !6151, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9134 = !DILocalVariable(name: "gs", arg: 1, scope: !9133, file: !402, line: 2025, type: !3284)
!9135 = !DILocation(line: 2025, column: 31, scope: !9133)
!9136 = !DILocalVariable(name: "index", arg: 2, scope: !9133, file: !402, line: 2025, type: !5)
!9137 = !DILocation(line: 2025, column: 44, scope: !9133)
!9138 = !DILocation(line: 2028, column: 21, scope: !9133)
!9139 = !DILocation(line: 2028, column: 25, scope: !9133)
!9140 = !DILocation(line: 2028, column: 31, scope: !9133)
!9141 = !DILocation(line: 2028, column: 10, scope: !9133)
!9142 = !DILocation(line: 2028, column: 3, scope: !9133)
!9143 = distinct !DISubprogram(name: "idx_infer_loop_bounds", scope: !1, file: !1, line: 2671, type: !9144, scopeLine: 2672, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9144 = !DISubroutineType(types: !9145)
!9145 = !{!1775, !1655, !2020, !1939}
!9146 = !DILocalVariable(name: "base", arg: 1, scope: !9143, file: !1, line: 2671, type: !1655)
!9147 = !DILocation(line: 2671, column: 29, scope: !9143)
!9148 = !DILocalVariable(name: "idx", arg: 2, scope: !9143, file: !1, line: 2671, type: !2020)
!9149 = !DILocation(line: 2671, column: 41, scope: !9143)
!9150 = !DILocalVariable(name: "dta", arg: 3, scope: !9143, file: !1, line: 2671, type: !1939)
!9151 = !DILocation(line: 2671, column: 52, scope: !9143)
!9152 = !DILocalVariable(name: "data", scope: !9143, file: !1, line: 2673, type: !3049)
!9153 = !DILocation(line: 2673, column: 20, scope: !9143)
!9154 = !DILocation(line: 2673, column: 47, scope: !9143)
!9155 = !DILocation(line: 2673, column: 27, scope: !9143)
!9156 = !DILocalVariable(name: "ev", scope: !9143, file: !1, line: 2674, type: !1655)
!9157 = !DILocation(line: 2674, column: 8, scope: !9143)
!9158 = !DILocalVariable(name: "init", scope: !9143, file: !1, line: 2674, type: !1655)
!9159 = !DILocation(line: 2674, column: 12, scope: !9143)
!9160 = !DILocalVariable(name: "step", scope: !9143, file: !1, line: 2674, type: !1655)
!9161 = !DILocation(line: 2674, column: 18, scope: !9143)
!9162 = !DILocalVariable(name: "low", scope: !9143, file: !1, line: 2675, type: !1655)
!9163 = !DILocation(line: 2675, column: 8, scope: !9143)
!9164 = !DILocalVariable(name: "high", scope: !9143, file: !1, line: 2675, type: !1655)
!9165 = !DILocation(line: 2675, column: 13, scope: !9143)
!9166 = !DILocalVariable(name: "type", scope: !9143, file: !1, line: 2675, type: !1655)
!9167 = !DILocation(line: 2675, column: 19, scope: !9143)
!9168 = !DILocalVariable(name: "next", scope: !9143, file: !1, line: 2675, type: !1655)
!9169 = !DILocation(line: 2675, column: 25, scope: !9143)
!9170 = !DILocalVariable(name: "sign", scope: !9143, file: !1, line: 2676, type: !1775)
!9171 = !DILocation(line: 2676, column: 8, scope: !9143)
!9172 = !DILocalVariable(name: "upper", scope: !9143, file: !1, line: 2676, type: !1775)
!9173 = !DILocation(line: 2676, column: 14, scope: !9143)
!9174 = !DILocation(line: 2676, column: 22, scope: !9143)
!9175 = !DILocation(line: 2676, column: 28, scope: !9143)
!9176 = !DILocalVariable(name: "at_end", scope: !9143, file: !1, line: 2676, type: !1775)
!9177 = !DILocation(line: 2676, column: 38, scope: !9143)
!9178 = !DILocalVariable(name: "loop", scope: !9143, file: !1, line: 2677, type: !2201)
!9179 = !DILocation(line: 2677, column: 16, scope: !9143)
!9180 = !DILocation(line: 2677, column: 23, scope: !9143)
!9181 = !DILocation(line: 2677, column: 29, scope: !9143)
!9182 = !DILocation(line: 2679, column: 7, scope: !9183)
!9183 = distinct !DILexicalBlock(scope: !9143, file: !1, line: 2679, column: 7)
!9184 = !DILocation(line: 2679, column: 24, scope: !9183)
!9185 = !DILocation(line: 2679, column: 7, scope: !9143)
!9186 = !DILocation(line: 2680, column: 5, scope: !9183)
!9187 = !DILocation(line: 2685, column: 30, scope: !9188)
!9188 = distinct !DILexicalBlock(scope: !9143, file: !1, line: 2685, column: 7)
!9189 = !DILocation(line: 2685, column: 7, scope: !9188)
!9190 = !DILocation(line: 2685, column: 7, scope: !9143)
!9191 = !DILocation(line: 2687, column: 14, scope: !9192)
!9192 = distinct !DILexicalBlock(scope: !9188, file: !1, line: 2686, column: 5)
!9193 = !DILocation(line: 2688, column: 13, scope: !9192)
!9194 = !DILocation(line: 2689, column: 5, scope: !9192)
!9195 = !DILocation(line: 2691, column: 32, scope: !9143)
!9196 = !DILocation(line: 2691, column: 64, scope: !9143)
!9197 = !DILocation(line: 2691, column: 71, scope: !9143)
!9198 = !DILocation(line: 2691, column: 70, scope: !9143)
!9199 = !DILocation(line: 2691, column: 38, scope: !9143)
!9200 = !DILocation(line: 2691, column: 8, scope: !9143)
!9201 = !DILocation(line: 2691, column: 6, scope: !9143)
!9202 = !DILocation(line: 2692, column: 29, scope: !9143)
!9203 = !DILocation(line: 2692, column: 10, scope: !9143)
!9204 = !DILocation(line: 2692, column: 8, scope: !9143)
!9205 = !DILocation(line: 2693, column: 38, scope: !9143)
!9206 = !DILocation(line: 2693, column: 42, scope: !9143)
!9207 = !DILocation(line: 2693, column: 48, scope: !9143)
!9208 = !DILocation(line: 2693, column: 10, scope: !9143)
!9209 = !DILocation(line: 2693, column: 8, scope: !9143)
!9210 = !DILocation(line: 2695, column: 8, scope: !9211)
!9211 = distinct !DILexicalBlock(scope: !9143, file: !1, line: 2695, column: 7)
!9212 = !DILocation(line: 2696, column: 7, scope: !9211)
!9213 = !DILocation(line: 2696, column: 11, scope: !9211)
!9214 = !DILocation(line: 2697, column: 7, scope: !9211)
!9215 = !DILocation(line: 2697, column: 10, scope: !9211)
!9216 = !DILocation(line: 2697, column: 27, scope: !9211)
!9217 = !DILocation(line: 2698, column: 7, scope: !9211)
!9218 = !DILocation(line: 2698, column: 25, scope: !9211)
!9219 = !DILocation(line: 2698, column: 10, scope: !9211)
!9220 = !DILocation(line: 2699, column: 7, scope: !9211)
!9221 = !DILocation(line: 2699, column: 32, scope: !9211)
!9222 = !DILocation(line: 2699, column: 10, scope: !9211)
!9223 = !DILocation(line: 2700, column: 7, scope: !9211)
!9224 = !DILocation(line: 2700, column: 50, scope: !9211)
!9225 = !DILocation(line: 2700, column: 56, scope: !9211)
!9226 = !DILocation(line: 2700, column: 62, scope: !9211)
!9227 = !DILocation(line: 2700, column: 10, scope: !9211)
!9228 = !DILocation(line: 2695, column: 7, scope: !9143)
!9229 = !DILocation(line: 2701, column: 5, scope: !9211)
!9230 = !DILocation(line: 2703, column: 30, scope: !9143)
!9231 = !DILocation(line: 2703, column: 9, scope: !9143)
!9232 = !DILocation(line: 2703, column: 7, scope: !9143)
!9233 = !DILocation(line: 2704, column: 30, scope: !9143)
!9234 = !DILocation(line: 2704, column: 10, scope: !9143)
!9235 = !DILocation(line: 2704, column: 8, scope: !9143)
!9236 = !DILocation(line: 2708, column: 7, scope: !9237)
!9237 = distinct !DILexicalBlock(scope: !9143, file: !1, line: 2708, column: 7)
!9238 = !DILocation(line: 2708, column: 23, scope: !9237)
!9239 = !DILocation(line: 2709, column: 7, scope: !9237)
!9240 = !DILocation(line: 2709, column: 11, scope: !9237)
!9241 = !DILocation(line: 2710, column: 7, scope: !9237)
!9242 = !DILocation(line: 2710, column: 10, scope: !9237)
!9243 = !DILocation(line: 2710, column: 27, scope: !9237)
!9244 = !DILocation(line: 2708, column: 7, scope: !9143)
!9245 = !DILocation(line: 2711, column: 5, scope: !9237)
!9246 = !DILocation(line: 2712, column: 33, scope: !9143)
!9247 = !DILocation(line: 2712, column: 10, scope: !9143)
!9248 = !DILocation(line: 2712, column: 8, scope: !9143)
!9249 = !DILocation(line: 2713, column: 10, scope: !9143)
!9250 = !DILocation(line: 2713, column: 8, scope: !9143)
!9251 = !DILocation(line: 2717, column: 7, scope: !9252)
!9252 = distinct !DILexicalBlock(scope: !9143, file: !1, line: 2717, column: 7)
!9253 = !DILocation(line: 2718, column: 7, scope: !9252)
!9254 = !DILocation(line: 2718, column: 27, scope: !9252)
!9255 = !DILocation(line: 2718, column: 32, scope: !9252)
!9256 = !DILocation(line: 2718, column: 10, scope: !9252)
!9257 = !DILocation(line: 2717, column: 7, scope: !9143)
!9258 = !DILocation(line: 2719, column: 5, scope: !9252)
!9259 = !DILocation(line: 2729, column: 25, scope: !9260)
!9260 = distinct !DILexicalBlock(scope: !9143, file: !1, line: 2729, column: 7)
!9261 = !DILocation(line: 2729, column: 31, scope: !9260)
!9262 = !DILocation(line: 2729, column: 8, scope: !9260)
!9263 = !DILocation(line: 2730, column: 7, scope: !9260)
!9264 = !DILocation(line: 2730, column: 28, scope: !9260)
!9265 = !DILocation(line: 2730, column: 33, scope: !9260)
!9266 = !DILocation(line: 2730, column: 11, scope: !9260)
!9267 = !DILocation(line: 2729, column: 7, scope: !9143)
!9268 = !DILocation(line: 2731, column: 5, scope: !9260)
!9269 = !DILocation(line: 2732, column: 9, scope: !9143)
!9270 = !DILocation(line: 2732, column: 7, scope: !9143)
!9271 = !DILocation(line: 2733, column: 10, scope: !9143)
!9272 = !DILocation(line: 2733, column: 8, scope: !9143)
!9273 = !DILocation(line: 2735, column: 7, scope: !9274)
!9274 = distinct !DILexicalBlock(scope: !9143, file: !1, line: 2735, column: 7)
!9275 = !DILocation(line: 2735, column: 7, scope: !9143)
!9276 = !DILocation(line: 2736, column: 12, scope: !9274)
!9277 = !DILocation(line: 2736, column: 10, scope: !9274)
!9278 = !DILocation(line: 2736, column: 5, scope: !9274)
!9279 = !DILocation(line: 2738, column: 12, scope: !9274)
!9280 = !DILocation(line: 2738, column: 10, scope: !9274)
!9281 = !DILocation(line: 2740, column: 29, scope: !9282)
!9282 = distinct !DILexicalBlock(scope: !9143, file: !1, line: 2740, column: 7)
!9283 = !DILocation(line: 2740, column: 34, scope: !9282)
!9284 = !DILocation(line: 2740, column: 7, scope: !9282)
!9285 = !DILocation(line: 2740, column: 40, scope: !9282)
!9286 = !DILocation(line: 2741, column: 7, scope: !9282)
!9287 = !DILocation(line: 2741, column: 32, scope: !9282)
!9288 = !DILocation(line: 2741, column: 38, scope: !9282)
!9289 = !DILocation(line: 2741, column: 10, scope: !9282)
!9290 = !DILocation(line: 2741, column: 44, scope: !9282)
!9291 = !DILocation(line: 2740, column: 7, scope: !9143)
!9292 = !DILocation(line: 2742, column: 5, scope: !9282)
!9293 = !DILocation(line: 2744, column: 26, scope: !9143)
!9294 = !DILocation(line: 2744, column: 32, scope: !9143)
!9295 = !DILocation(line: 2744, column: 38, scope: !9143)
!9296 = !DILocation(line: 2744, column: 44, scope: !9143)
!9297 = !DILocation(line: 2744, column: 50, scope: !9143)
!9298 = !DILocation(line: 2744, column: 56, scope: !9143)
!9299 = !DILocation(line: 2744, column: 61, scope: !9143)
!9300 = !DILocation(line: 2744, column: 73, scope: !9143)
!9301 = !DILocation(line: 2744, column: 3, scope: !9143)
!9302 = !DILocation(line: 2745, column: 3, scope: !9143)
!9303 = !DILocation(line: 2746, column: 1, scope: !9143)
!9304 = distinct !DISubprogram(name: "record_nonwrapping_iv", scope: !1, file: !1, line: 2566, type: !9305, scopeLine: 2568, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9305 = !DISubroutineType(types: !9306)
!9306 = !{null, !2201, !1655, !1655, !1986, !1655, !1655, !1775, !1775}
!9307 = !DILocalVariable(name: "loop", arg: 1, scope: !9304, file: !1, line: 2566, type: !2201)
!9308 = !DILocation(line: 2566, column: 37, scope: !9304)
!9309 = !DILocalVariable(name: "base", arg: 2, scope: !9304, file: !1, line: 2566, type: !1655)
!9310 = !DILocation(line: 2566, column: 48, scope: !9304)
!9311 = !DILocalVariable(name: "step", arg: 3, scope: !9304, file: !1, line: 2566, type: !1655)
!9312 = !DILocation(line: 2566, column: 59, scope: !9304)
!9313 = !DILocalVariable(name: "stmt", arg: 4, scope: !9304, file: !1, line: 2566, type: !1986)
!9314 = !DILocation(line: 2566, column: 72, scope: !9304)
!9315 = !DILocalVariable(name: "low", arg: 5, scope: !9304, file: !1, line: 2567, type: !1655)
!9316 = !DILocation(line: 2567, column: 15, scope: !9304)
!9317 = !DILocalVariable(name: "high", arg: 6, scope: !9304, file: !1, line: 2567, type: !1655)
!9318 = !DILocation(line: 2567, column: 25, scope: !9304)
!9319 = !DILocalVariable(name: "realistic", arg: 7, scope: !9304, file: !1, line: 2567, type: !1775)
!9320 = !DILocation(line: 2567, column: 36, scope: !9304)
!9321 = !DILocalVariable(name: "upper", arg: 8, scope: !9304, file: !1, line: 2567, type: !1775)
!9322 = !DILocation(line: 2567, column: 52, scope: !9304)
!9323 = !DILocalVariable(name: "niter_bound", scope: !9304, file: !1, line: 2569, type: !1655)
!9324 = !DILocation(line: 2569, column: 8, scope: !9304)
!9325 = !DILocalVariable(name: "extreme", scope: !9304, file: !1, line: 2569, type: !1655)
!9326 = !DILocation(line: 2569, column: 21, scope: !9304)
!9327 = !DILocalVariable(name: "delta", scope: !9304, file: !1, line: 2569, type: !1655)
!9328 = !DILocation(line: 2569, column: 30, scope: !9304)
!9329 = !DILocalVariable(name: "type", scope: !9304, file: !1, line: 2570, type: !1655)
!9330 = !DILocation(line: 2570, column: 8, scope: !9304)
!9331 = !DILocation(line: 2570, column: 15, scope: !9304)
!9332 = !DILocalVariable(name: "unsigned_type", scope: !9304, file: !1, line: 2570, type: !1655)
!9333 = !DILocation(line: 2570, column: 33, scope: !9304)
!9334 = !DILocalVariable(name: "max", scope: !9304, file: !1, line: 2571, type: !1704)
!9335 = !DILocation(line: 2571, column: 14, scope: !9304)
!9336 = !DILocation(line: 2573, column: 7, scope: !9337)
!9337 = distinct !DILexicalBlock(scope: !9304, file: !1, line: 2573, column: 7)
!9338 = !DILocation(line: 2573, column: 24, scope: !9337)
!9339 = !DILocation(line: 2573, column: 39, scope: !9337)
!9340 = !DILocation(line: 2573, column: 57, scope: !9337)
!9341 = !DILocation(line: 2573, column: 42, scope: !9337)
!9342 = !DILocation(line: 2573, column: 7, scope: !9304)
!9343 = !DILocation(line: 2574, column: 5, scope: !9337)
!9344 = !DILocation(line: 2576, column: 7, scope: !9345)
!9345 = distinct !DILexicalBlock(scope: !9304, file: !1, line: 2576, column: 7)
!9346 = !DILocation(line: 2576, column: 17, scope: !9345)
!9347 = !DILocation(line: 2576, column: 21, scope: !9345)
!9348 = !DILocation(line: 2576, column: 32, scope: !9345)
!9349 = !DILocation(line: 2576, column: 7, scope: !9304)
!9350 = !DILocation(line: 2578, column: 16, scope: !9351)
!9351 = distinct !DILexicalBlock(scope: !9345, file: !1, line: 2577, column: 5)
!9352 = !DILocation(line: 2578, column: 7, scope: !9351)
!9353 = !DILocation(line: 2579, column: 27, scope: !9351)
!9354 = !DILocation(line: 2579, column: 38, scope: !9351)
!9355 = !DILocation(line: 2579, column: 7, scope: !9351)
!9356 = !DILocation(line: 2580, column: 16, scope: !9351)
!9357 = !DILocation(line: 2580, column: 7, scope: !9351)
!9358 = !DILocation(line: 2581, column: 27, scope: !9351)
!9359 = !DILocation(line: 2581, column: 38, scope: !9351)
!9360 = !DILocation(line: 2581, column: 7, scope: !9351)
!9361 = !DILocation(line: 2582, column: 16, scope: !9351)
!9362 = !DILocation(line: 2582, column: 7, scope: !9351)
!9363 = !DILocation(line: 2583, column: 27, scope: !9351)
!9364 = !DILocation(line: 2583, column: 38, scope: !9351)
!9365 = !DILocation(line: 2583, column: 7, scope: !9351)
!9366 = !DILocation(line: 2584, column: 16, scope: !9351)
!9367 = !DILocation(line: 2584, column: 7, scope: !9351)
!9368 = !DILocation(line: 2585, column: 26, scope: !9351)
!9369 = !DILocation(line: 2585, column: 37, scope: !9351)
!9370 = !DILocation(line: 2585, column: 7, scope: !9351)
!9371 = !DILocation(line: 2586, column: 16, scope: !9351)
!9372 = !DILocation(line: 2586, column: 45, scope: !9351)
!9373 = !DILocation(line: 2586, column: 51, scope: !9351)
!9374 = !DILocation(line: 2586, column: 7, scope: !9351)
!9375 = !DILocation(line: 2587, column: 5, scope: !9351)
!9376 = !DILocation(line: 2589, column: 38, scope: !9304)
!9377 = !DILocation(line: 2589, column: 19, scope: !9304)
!9378 = !DILocation(line: 2589, column: 17, scope: !9304)
!9379 = !DILocation(line: 2590, column: 10, scope: !9304)
!9380 = !DILocation(line: 2590, column: 8, scope: !9304)
!9381 = !DILocation(line: 2591, column: 10, scope: !9304)
!9382 = !DILocation(line: 2591, column: 8, scope: !9304)
!9383 = !DILocation(line: 2593, column: 30, scope: !9384)
!9384 = distinct !DILexicalBlock(scope: !9304, file: !1, line: 2593, column: 7)
!9385 = !DILocation(line: 2593, column: 7, scope: !9384)
!9386 = !DILocation(line: 2593, column: 7, scope: !9304)
!9387 = !DILocation(line: 2595, column: 17, scope: !9388)
!9388 = distinct !DILexicalBlock(scope: !9384, file: !1, line: 2594, column: 5)
!9389 = !DILocation(line: 2595, column: 15, scope: !9388)
!9390 = !DILocation(line: 2596, column: 11, scope: !9391)
!9391 = distinct !DILexicalBlock(scope: !9388, file: !1, line: 2596, column: 11)
!9392 = !DILocation(line: 2596, column: 28, scope: !9391)
!9393 = !DILocation(line: 2596, column: 11, scope: !9388)
!9394 = !DILocation(line: 2597, column: 9, scope: !9391)
!9395 = !DILocation(line: 2597, column: 7, scope: !9391)
!9396 = !DILocation(line: 2597, column: 2, scope: !9391)
!9397 = !DILocation(line: 2598, column: 15, scope: !9388)
!9398 = !DILocation(line: 2598, column: 13, scope: !9388)
!9399 = !DILocation(line: 2599, column: 14, scope: !9388)
!9400 = !DILocation(line: 2599, column: 12, scope: !9388)
!9401 = !DILocation(line: 2600, column: 5, scope: !9388)
!9402 = !DILocation(line: 2603, column: 17, scope: !9403)
!9403 = distinct !DILexicalBlock(scope: !9384, file: !1, line: 2602, column: 5)
!9404 = !DILocation(line: 2603, column: 15, scope: !9403)
!9405 = !DILocation(line: 2604, column: 11, scope: !9406)
!9406 = distinct !DILexicalBlock(scope: !9403, file: !1, line: 2604, column: 11)
!9407 = !DILocation(line: 2604, column: 28, scope: !9406)
!9408 = !DILocation(line: 2604, column: 11, scope: !9403)
!9409 = !DILocation(line: 2605, column: 9, scope: !9406)
!9410 = !DILocation(line: 2605, column: 7, scope: !9406)
!9411 = !DILocation(line: 2605, column: 2, scope: !9406)
!9412 = !DILocation(line: 2606, column: 15, scope: !9403)
!9413 = !DILocation(line: 2606, column: 13, scope: !9403)
!9414 = !DILocation(line: 2611, column: 17, scope: !9304)
!9415 = !DILocation(line: 2611, column: 15, scope: !9304)
!9416 = !DILocation(line: 2612, column: 38, scope: !9304)
!9417 = !DILocation(line: 2612, column: 9, scope: !9304)
!9418 = !DILocation(line: 2613, column: 20, scope: !9304)
!9419 = !DILocation(line: 2613, column: 26, scope: !9304)
!9420 = !DILocation(line: 2613, column: 44, scope: !9304)
!9421 = !DILocation(line: 2613, column: 57, scope: !9304)
!9422 = !DILocation(line: 2613, column: 68, scope: !9304)
!9423 = !DILocation(line: 2613, column: 3, scope: !9304)
!9424 = !DILocation(line: 2614, column: 1, scope: !9304)
!9425 = distinct !DISubprogram(name: "derive_constant_upper_bound", scope: !1, file: !1, line: 2315, type: !9426, scopeLine: 2316, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9426 = !DISubroutineType(types: !9427)
!9427 = !{!1704, !1655}
!9428 = !DILocalVariable(name: "val", arg: 1, scope: !9425, file: !1, line: 2315, type: !1655)
!9429 = !DILocation(line: 2315, column: 35, scope: !9425)
!9430 = !DILocalVariable(name: "code", scope: !9425, file: !1, line: 2317, type: !132)
!9431 = !DILocation(line: 2317, column: 18, scope: !9425)
!9432 = !DILocalVariable(name: "op0", scope: !9425, file: !1, line: 2318, type: !1655)
!9433 = !DILocation(line: 2318, column: 8, scope: !9425)
!9434 = !DILocalVariable(name: "op1", scope: !9425, file: !1, line: 2318, type: !1655)
!9435 = !DILocation(line: 2318, column: 13, scope: !9425)
!9436 = !DILocation(line: 2320, column: 26, scope: !9425)
!9437 = !DILocation(line: 2320, column: 3, scope: !9425)
!9438 = !DILocation(line: 2321, column: 43, scope: !9425)
!9439 = !DILocation(line: 2321, column: 60, scope: !9425)
!9440 = !DILocation(line: 2321, column: 65, scope: !9425)
!9441 = !DILocation(line: 2321, column: 71, scope: !9425)
!9442 = !DILocation(line: 2321, column: 10, scope: !9425)
!9443 = !DILocation(line: 2321, column: 3, scope: !9425)
!9444 = distinct !DISubprogram(name: "derive_constant_upper_bound_ops", scope: !1, file: !1, line: 2329, type: !9445, scopeLine: 2331, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9445 = !DISubroutineType(types: !9446)
!9446 = !{!1704, !1655, !1655, !132, !1655}
!9447 = !DILocalVariable(name: "type", arg: 1, scope: !9444, file: !1, line: 2329, type: !1655)
!9448 = !DILocation(line: 2329, column: 39, scope: !9444)
!9449 = !DILocalVariable(name: "op0", arg: 2, scope: !9444, file: !1, line: 2329, type: !1655)
!9450 = !DILocation(line: 2329, column: 50, scope: !9444)
!9451 = !DILocalVariable(name: "code", arg: 3, scope: !9444, file: !1, line: 2330, type: !132)
!9452 = !DILocation(line: 2330, column: 21, scope: !9444)
!9453 = !DILocalVariable(name: "op1", arg: 4, scope: !9444, file: !1, line: 2330, type: !1655)
!9454 = !DILocation(line: 2330, column: 32, scope: !9444)
!9455 = !DILocalVariable(name: "subtype", scope: !9444, file: !1, line: 2332, type: !1655)
!9456 = !DILocation(line: 2332, column: 8, scope: !9444)
!9457 = !DILocalVariable(name: "maxt", scope: !9444, file: !1, line: 2332, type: !1655)
!9458 = !DILocation(line: 2332, column: 17, scope: !9444)
!9459 = !DILocalVariable(name: "bnd", scope: !9444, file: !1, line: 2333, type: !1704)
!9460 = !DILocation(line: 2333, column: 14, scope: !9444)
!9461 = !DILocalVariable(name: "max", scope: !9444, file: !1, line: 2333, type: !1704)
!9462 = !DILocation(line: 2333, column: 19, scope: !9444)
!9463 = !DILocalVariable(name: "mmax", scope: !9444, file: !1, line: 2333, type: !1704)
!9464 = !DILocation(line: 2333, column: 24, scope: !9444)
!9465 = !DILocalVariable(name: "cst", scope: !9444, file: !1, line: 2333, type: !1704)
!9466 = !DILocation(line: 2333, column: 30, scope: !9444)
!9467 = !DILocalVariable(name: "stmt", scope: !9444, file: !1, line: 2334, type: !1986)
!9468 = !DILocation(line: 2334, column: 10, scope: !9444)
!9469 = !DILocation(line: 2336, column: 7, scope: !9470)
!9470 = distinct !DILexicalBlock(scope: !9444, file: !1, line: 2336, column: 7)
!9471 = !DILocation(line: 2336, column: 7, scope: !9444)
!9472 = !DILocation(line: 2337, column: 12, scope: !9470)
!9473 = !DILocation(line: 2337, column: 10, scope: !9470)
!9474 = !DILocation(line: 2337, column: 5, scope: !9470)
!9475 = !DILocation(line: 2339, column: 33, scope: !9470)
!9476 = !DILocation(line: 2339, column: 39, scope: !9470)
!9477 = !DILocation(line: 2339, column: 12, scope: !9470)
!9478 = !DILocation(line: 2339, column: 10, scope: !9470)
!9479 = !DILocation(line: 2341, column: 29, scope: !9444)
!9480 = !DILocation(line: 2341, column: 9, scope: !9444)
!9481 = !DILocation(line: 2343, column: 11, scope: !9444)
!9482 = !DILocation(line: 2343, column: 3, scope: !9444)
!9483 = !DILocation(line: 2346, column: 34, scope: !9484)
!9484 = distinct !DILexicalBlock(scope: !9444, file: !1, line: 2344, column: 5)
!9485 = !DILocation(line: 2346, column: 14, scope: !9484)
!9486 = !DILocation(line: 2346, column: 7, scope: !9484)
!9487 = !DILocation(line: 2349, column: 17, scope: !9484)
!9488 = !DILocation(line: 2349, column: 15, scope: !9484)
!9489 = !DILocation(line: 2350, column: 12, scope: !9490)
!9490 = distinct !DILexicalBlock(scope: !9484, file: !1, line: 2350, column: 11)
!9491 = !DILocation(line: 2353, column: 4, scope: !9490)
!9492 = !DILocation(line: 2353, column: 7, scope: !9490)
!9493 = !DILocation(line: 2354, column: 4, scope: !9490)
!9494 = !DILocation(line: 2354, column: 33, scope: !9490)
!9495 = !DILocation(line: 2354, column: 8, scope: !9490)
!9496 = !DILocation(line: 2350, column: 11, scope: !9484)
!9497 = !DILocation(line: 2359, column: 11, scope: !9498)
!9498 = distinct !DILexicalBlock(scope: !9490, file: !1, line: 2355, column: 2)
!9499 = !DILocation(line: 2359, column: 4, scope: !9498)
!9500 = !DILocation(line: 2364, column: 42, scope: !9484)
!9501 = !DILocation(line: 2364, column: 13, scope: !9484)
!9502 = !DILocation(line: 2368, column: 11, scope: !9503)
!9503 = distinct !DILexicalBlock(scope: !9484, file: !1, line: 2368, column: 11)
!9504 = !DILocation(line: 2368, column: 38, scope: !9503)
!9505 = !DILocation(line: 2368, column: 11, scope: !9484)
!9506 = !DILocation(line: 2369, column: 9, scope: !9503)
!9507 = !DILocation(line: 2369, column: 2, scope: !9503)
!9508 = !DILocation(line: 2371, column: 14, scope: !9484)
!9509 = !DILocation(line: 2371, column: 7, scope: !9484)
!9510 = !DILocation(line: 2376, column: 11, scope: !9511)
!9511 = distinct !DILexicalBlock(scope: !9484, file: !1, line: 2376, column: 11)
!9512 = !DILocation(line: 2376, column: 27, scope: !9511)
!9513 = !DILocation(line: 2377, column: 4, scope: !9511)
!9514 = !DILocation(line: 2377, column: 33, scope: !9511)
!9515 = !DILocation(line: 2377, column: 8, scope: !9511)
!9516 = !DILocation(line: 2376, column: 11, scope: !9484)
!9517 = !DILocation(line: 2378, column: 9, scope: !9511)
!9518 = !DILocation(line: 2378, column: 2, scope: !9511)
!9519 = !DILocation(line: 2383, column: 33, scope: !9484)
!9520 = !DILocation(line: 2383, column: 13, scope: !9484)
!9521 = !DILocation(line: 2384, column: 35, scope: !9484)
!9522 = !DILocation(line: 2384, column: 13, scope: !9484)
!9523 = !DILocation(line: 2385, column: 11, scope: !9524)
!9524 = distinct !DILexicalBlock(scope: !9484, file: !1, line: 2385, column: 11)
!9525 = !DILocation(line: 2385, column: 16, scope: !9524)
!9526 = !DILocation(line: 2385, column: 11, scope: !9484)
!9527 = !DILocation(line: 2386, column: 8, scope: !9524)
!9528 = !DILocation(line: 2386, column: 2, scope: !9524)
!9529 = !DILocation(line: 2388, column: 42, scope: !9484)
!9530 = !DILocation(line: 2388, column: 13, scope: !9484)
!9531 = !DILocation(line: 2390, column: 11, scope: !9532)
!9532 = distinct !DILexicalBlock(scope: !9484, file: !1, line: 2390, column: 11)
!9533 = !DILocation(line: 2390, column: 11, scope: !9484)
!9534 = !DILocation(line: 2392, column: 10, scope: !9535)
!9535 = distinct !DILexicalBlock(scope: !9532, file: !1, line: 2391, column: 2)
!9536 = !DILocation(line: 2394, column: 8, scope: !9537)
!9537 = distinct !DILexicalBlock(scope: !9535, file: !1, line: 2394, column: 8)
!9538 = !DILocation(line: 2394, column: 8, scope: !9535)
!9539 = !DILocation(line: 2395, column: 13, scope: !9537)
!9540 = !DILocation(line: 2395, column: 6, scope: !9537)
!9541 = !DILocation(line: 2400, column: 32, scope: !9535)
!9542 = !DILocation(line: 2400, column: 11, scope: !9535)
!9543 = !DILocation(line: 2401, column: 8, scope: !9544)
!9544 = distinct !DILexicalBlock(scope: !9535, file: !1, line: 2401, column: 8)
!9545 = !DILocation(line: 2401, column: 36, scope: !9544)
!9546 = !DILocation(line: 2401, column: 8, scope: !9535)
!9547 = !DILocation(line: 2402, column: 13, scope: !9544)
!9548 = !DILocation(line: 2402, column: 6, scope: !9544)
!9549 = !DILocation(line: 2404, column: 11, scope: !9535)
!9550 = !DILocation(line: 2404, column: 4, scope: !9535)
!9551 = !DILocation(line: 2421, column: 8, scope: !9552)
!9552 = distinct !DILexicalBlock(scope: !9553, file: !1, line: 2421, column: 8)
!9553 = distinct !DILexicalBlock(scope: !9532, file: !1, line: 2407, column: 2)
!9554 = !DILocation(line: 2421, column: 35, scope: !9552)
!9555 = !DILocation(line: 2421, column: 8, scope: !9553)
!9556 = !DILocation(line: 2422, column: 13, scope: !9552)
!9557 = !DILocation(line: 2422, column: 6, scope: !9552)
!9558 = !DILocation(line: 2424, column: 8, scope: !9559)
!9559 = distinct !DILexicalBlock(scope: !9553, file: !1, line: 2424, column: 8)
!9560 = !DILocation(line: 2424, column: 8, scope: !9553)
!9561 = !DILocalVariable(name: "tem", scope: !9562, file: !1, line: 2426, type: !1655)
!9562 = distinct !DILexicalBlock(scope: !9559, file: !1, line: 2425, column: 6)
!9563 = !DILocation(line: 2426, column: 13, scope: !9562)
!9564 = !DILocation(line: 2426, column: 19, scope: !9562)
!9565 = !DILocation(line: 2428, column: 13, scope: !9566)
!9566 = distinct !DILexicalBlock(scope: !9562, file: !1, line: 2428, column: 12)
!9567 = !DILocation(line: 2428, column: 17, scope: !9566)
!9568 = !DILocation(line: 2428, column: 38, scope: !9566)
!9569 = !DILocation(line: 2428, column: 20, scope: !9566)
!9570 = !DILocation(line: 2428, column: 12, scope: !9562)
!9571 = !DILocation(line: 2429, column: 10, scope: !9566)
!9572 = !DILocation(line: 2429, column: 3, scope: !9566)
!9573 = !DILocation(line: 2430, column: 6, scope: !9562)
!9574 = !DILocation(line: 2432, column: 31, scope: !9553)
!9575 = !DILocation(line: 2432, column: 10, scope: !9553)
!9576 = !DILocation(line: 2435, column: 14, scope: !9484)
!9577 = !DILocation(line: 2435, column: 7, scope: !9484)
!9578 = !DILocation(line: 2439, column: 11, scope: !9579)
!9579 = distinct !DILexicalBlock(scope: !9484, file: !1, line: 2439, column: 11)
!9580 = !DILocation(line: 2439, column: 27, scope: !9579)
!9581 = !DILocation(line: 2440, column: 4, scope: !9579)
!9582 = !DILocation(line: 2440, column: 30, scope: !9579)
!9583 = !DILocation(line: 2440, column: 7, scope: !9579)
!9584 = !DILocation(line: 2439, column: 11, scope: !9484)
!9585 = !DILocation(line: 2441, column: 9, scope: !9579)
!9586 = !DILocation(line: 2441, column: 2, scope: !9579)
!9587 = !DILocation(line: 2443, column: 42, scope: !9484)
!9588 = !DILocation(line: 2443, column: 13, scope: !9484)
!9589 = !DILocation(line: 2444, column: 56, scope: !9484)
!9590 = !DILocation(line: 2444, column: 36, scope: !9484)
!9591 = !DILocation(line: 2444, column: 14, scope: !9484)
!9592 = !DILocation(line: 2444, column: 7, scope: !9484)
!9593 = !DILocation(line: 2447, column: 11, scope: !9594)
!9594 = distinct !DILexicalBlock(scope: !9484, file: !1, line: 2447, column: 11)
!9595 = !DILocation(line: 2447, column: 27, scope: !9594)
!9596 = !DILocation(line: 2448, column: 4, scope: !9594)
!9597 = !DILocation(line: 2448, column: 30, scope: !9594)
!9598 = !DILocation(line: 2448, column: 7, scope: !9594)
!9599 = !DILocation(line: 2447, column: 11, scope: !9484)
!9600 = !DILocation(line: 2449, column: 9, scope: !9594)
!9601 = !DILocation(line: 2449, column: 2, scope: !9594)
!9602 = !DILocation(line: 2450, column: 34, scope: !9484)
!9603 = !DILocation(line: 2450, column: 14, scope: !9484)
!9604 = !DILocation(line: 2450, column: 7, scope: !9484)
!9605 = !DILocation(line: 2453, column: 14, scope: !9484)
!9606 = !DILocation(line: 2453, column: 12, scope: !9484)
!9607 = !DILocation(line: 2454, column: 24, scope: !9608)
!9608 = distinct !DILexicalBlock(scope: !9484, file: !1, line: 2454, column: 11)
!9609 = !DILocation(line: 2454, column: 11, scope: !9608)
!9610 = !DILocation(line: 2454, column: 30, scope: !9608)
!9611 = !DILocation(line: 2455, column: 4, scope: !9608)
!9612 = !DILocation(line: 2455, column: 26, scope: !9608)
!9613 = !DILocation(line: 2455, column: 7, scope: !9608)
!9614 = !DILocation(line: 2455, column: 35, scope: !9608)
!9615 = !DILocation(line: 2455, column: 32, scope: !9608)
!9616 = !DILocation(line: 2454, column: 11, scope: !9484)
!9617 = !DILocation(line: 2456, column: 9, scope: !9608)
!9618 = !DILocation(line: 2456, column: 2, scope: !9608)
!9619 = !DILocation(line: 2457, column: 50, scope: !9484)
!9620 = !DILocation(line: 2457, column: 14, scope: !9484)
!9621 = !DILocation(line: 2457, column: 7, scope: !9484)
!9622 = !DILocation(line: 2460, column: 14, scope: !9484)
!9623 = !DILocation(line: 2460, column: 7, scope: !9484)
!9624 = !DILocation(line: 2462, column: 1, scope: !9444)
!9625 = distinct !DISubprogram(name: "derive_constant_upper_bound_assign", scope: !1, file: !1, line: 2300, type: !9626, scopeLine: 2301, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9626 = !DISubroutineType(types: !9627)
!9627 = !{!1704, !1986}
!9628 = !DILocalVariable(name: "stmt", arg: 1, scope: !9625, file: !1, line: 2300, type: !1986)
!9629 = !DILocation(line: 2300, column: 44, scope: !9625)
!9630 = !DILocalVariable(name: "code", scope: !9625, file: !1, line: 2302, type: !132)
!9631 = !DILocation(line: 2302, column: 18, scope: !9625)
!9632 = !DILocation(line: 2302, column: 49, scope: !9625)
!9633 = !DILocation(line: 2302, column: 25, scope: !9625)
!9634 = !DILocalVariable(name: "op0", scope: !9625, file: !1, line: 2303, type: !1655)
!9635 = !DILocation(line: 2303, column: 8, scope: !9625)
!9636 = !DILocation(line: 2303, column: 34, scope: !9625)
!9637 = !DILocation(line: 2303, column: 14, scope: !9625)
!9638 = !DILocalVariable(name: "op1", scope: !9625, file: !1, line: 2304, type: !1655)
!9639 = !DILocation(line: 2304, column: 8, scope: !9625)
!9640 = !DILocation(line: 2304, column: 34, scope: !9625)
!9641 = !DILocation(line: 2304, column: 14, scope: !9625)
!9642 = !DILocation(line: 2306, column: 43, scope: !9625)
!9643 = !DILocation(line: 2307, column: 8, scope: !9625)
!9644 = !DILocation(line: 2307, column: 13, scope: !9625)
!9645 = !DILocation(line: 2307, column: 19, scope: !9625)
!9646 = !DILocation(line: 2306, column: 10, scope: !9625)
!9647 = !DILocation(line: 2306, column: 3, scope: !9625)
!9648 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !3057, file: !3057, line: 32, type: !9649, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9649 = !DISubroutineType(types: !9650)
!9650 = !{!3055, !1752}
!9651 = !DILocalVariable(name: "alloc_", arg: 1, scope: !9648, file: !3057, line: 32, type: !1752)
!9652 = !DILocation(line: 32, column: 1, scope: !9648)
!9653 = distinct !DISubprogram(name: "number_of_loops", scope: !328, file: !328, line: 459, type: !9654, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9654 = !DISubroutineType(types: !9655)
!9655 = !{!5}
!9656 = !DILocation(line: 461, column: 8, scope: !9657)
!9657 = distinct !DILexicalBlock(scope: !9653, file: !328, line: 461, column: 7)
!9658 = !DILocation(line: 461, column: 7, scope: !9653)
!9659 = !DILocation(line: 462, column: 5, scope: !9657)
!9660 = !DILocation(line: 464, column: 10, scope: !9653)
!9661 = !DILocation(line: 464, column: 3, scope: !9653)
!9662 = !DILocation(line: 465, column: 1, scope: !9653)
!9663 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !328, file: !328, line: 85, type: !9664, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9664 = !DISubroutineType(types: !9665)
!9665 = !{!1752, !9666, !5, !5471}
!9666 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9667, size: 64)
!9667 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2221)
!9668 = !DILocalVariable(name: "vec_", arg: 1, scope: !9663, file: !328, line: 85, type: !9666)
!9669 = !DILocation(line: 85, column: 1, scope: !9663)
!9670 = !DILocalVariable(name: "ix_", arg: 2, scope: !9663, file: !328, line: 85, type: !5)
!9671 = !DILocalVariable(name: "ptr", arg: 3, scope: !9663, file: !328, line: 85, type: !5471)
!9672 = !DILocation(line: 85, column: 1, scope: !9673)
!9673 = distinct !DILexicalBlock(scope: !9663, file: !328, line: 85, column: 1)
!9674 = !DILocation(line: 85, column: 1, scope: !9675)
!9675 = distinct !DILexicalBlock(scope: !9673, file: !328, line: 85, column: 1)
!9676 = !DILocation(line: 85, column: 1, scope: !9677)
!9677 = distinct !DILexicalBlock(scope: !9673, file: !328, line: 85, column: 1)
!9678 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !3057, file: !3057, line: 31, type: !9679, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9679 = !DISubroutineType(types: !9680)
!9680 = !{!9681, !9682, !1752}
!9681 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1752, size: 64)
!9682 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3061, size: 64)
!9683 = !DILocalVariable(name: "vec_", arg: 1, scope: !9678, file: !3057, line: 31, type: !9682)
!9684 = !DILocation(line: 31, column: 1, scope: !9678)
!9685 = !DILocalVariable(name: "obj_", arg: 2, scope: !9678, file: !3057, line: 31, type: !1752)
!9686 = !DILocalVariable(name: "slot_", scope: !9678, file: !3057, line: 31, type: !9681)
!9687 = distinct !DISubprogram(name: "loop_outer", scope: !328, file: !328, line: 434, type: !9688, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9688 = !DISubroutineType(types: !9689)
!9689 = !{!2201, !3399}
!9690 = !DILocalVariable(name: "loop", arg: 1, scope: !9687, file: !328, line: 434, type: !3399)
!9691 = !DILocation(line: 434, column: 32, scope: !9687)
!9692 = !DILocalVariable(name: "n", scope: !9687, file: !328, line: 436, type: !5)
!9693 = !DILocation(line: 436, column: 12, scope: !9687)
!9694 = !DILocation(line: 436, column: 16, scope: !9687)
!9695 = !DILocation(line: 438, column: 7, scope: !9696)
!9696 = distinct !DILexicalBlock(scope: !9687, file: !328, line: 438, column: 7)
!9697 = !DILocation(line: 438, column: 9, scope: !9696)
!9698 = !DILocation(line: 438, column: 7, scope: !9687)
!9699 = !DILocation(line: 439, column: 5, scope: !9696)
!9700 = !DILocation(line: 441, column: 10, scope: !9687)
!9701 = !DILocation(line: 441, column: 3, scope: !9687)
!9702 = !DILocation(line: 442, column: 1, scope: !9687)
!9703 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !328, file: !328, line: 85, type: !9704, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9704 = !DISubroutineType(types: !9705)
!9705 = !{!5, !9666}
!9706 = !DILocalVariable(name: "vec_", arg: 1, scope: !9703, file: !328, line: 85, type: !9666)
!9707 = !DILocation(line: 85, column: 1, scope: !9703)
!9708 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !328, file: !328, line: 85, type: !9709, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9709 = !DISubroutineType(types: !9710)
!9710 = !{!2228, !9666, !5}
!9711 = !DILocalVariable(name: "vec_", arg: 1, scope: !9708, file: !328, line: 85, type: !9666)
!9712 = !DILocation(line: 85, column: 1, scope: !9708)
!9713 = !DILocalVariable(name: "ix_", arg: 2, scope: !9708, file: !328, line: 85, type: !5)
!9714 = !DILocation(line: 0, scope: !9708)
!9715 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !3057, file: !3057, line: 31, type: !9716, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9716 = !DISubroutineType(types: !9717)
!9717 = !{!1752, !9718, !5, !9681}
!9718 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9719, size: 64)
!9719 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3061)
!9720 = !DILocalVariable(name: "vec_", arg: 1, scope: !9715, file: !3057, line: 31, type: !9718)
!9721 = !DILocation(line: 31, column: 1, scope: !9715)
!9722 = !DILocalVariable(name: "ix_", arg: 2, scope: !9715, file: !3057, line: 31, type: !5)
!9723 = !DILocalVariable(name: "ptr", arg: 3, scope: !9715, file: !3057, line: 31, type: !9681)
!9724 = !DILocation(line: 31, column: 1, scope: !9725)
!9725 = distinct !DILexicalBlock(scope: !9715, file: !3057, line: 31, column: 1)
!9726 = !DILocation(line: 31, column: 1, scope: !9727)
!9727 = distinct !DILexicalBlock(scope: !9725, file: !3057, line: 31, column: 1)
!9728 = !DILocation(line: 31, column: 1, scope: !9729)
!9729 = distinct !DILexicalBlock(scope: !9725, file: !3057, line: 31, column: 1)
!9730 = distinct !DISubprogram(name: "get_loop", scope: !328, file: !328, line: 417, type: !9731, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9731 = !DISubroutineType(types: !9732)
!9732 = !{!2201, !5}
!9733 = !DILocalVariable(name: "num", arg: 1, scope: !9730, file: !328, line: 417, type: !5)
!9734 = !DILocation(line: 417, column: 20, scope: !9730)
!9735 = !DILocation(line: 419, column: 10, scope: !9730)
!9736 = !DILocation(line: 419, column: 3, scope: !9730)
!9737 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !3057, file: !3057, line: 32, type: !9738, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9738 = !DISubroutineType(types: !9739)
!9739 = !{null, !9740}
!9740 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3055, size: 64)
!9741 = !DILocalVariable(name: "vec_", arg: 1, scope: !9737, file: !3057, line: 32, type: !9740)
!9742 = !DILocation(line: 32, column: 1, scope: !9737)
!9743 = !DILocation(line: 32, column: 1, scope: !9744)
!9744 = distinct !DILexicalBlock(scope: !9737, file: !3057, line: 32, column: 1)
!9745 = distinct !DISubprogram(name: "double_int_zero_p", scope: !1705, file: !1705, line: 152, type: !9746, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !3075)
!9746 = !DISubroutineType(types: !9747)
!9747 = !{!1775, !1704}
!9748 = !DILocalVariable(name: "cst", arg: 1, scope: !9745, file: !1705, line: 152, type: !1704)
!9749 = !DILocation(line: 152, column: 31, scope: !9745)
!9750 = !DILocation(line: 154, column: 14, scope: !9745)
!9751 = !DILocation(line: 154, column: 18, scope: !9745)
!9752 = !DILocation(line: 154, column: 23, scope: !9745)
!9753 = !DILocation(line: 154, column: 30, scope: !9745)
!9754 = !DILocation(line: 154, column: 35, scope: !9745)
!9755 = !DILocation(line: 0, scope: !9745)
!9756 = !DILocation(line: 154, column: 10, scope: !9745)
!9757 = !DILocation(line: 154, column: 3, scope: !9745)
