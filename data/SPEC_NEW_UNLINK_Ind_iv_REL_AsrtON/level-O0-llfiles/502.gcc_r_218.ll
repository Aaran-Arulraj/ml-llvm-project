; ModuleID = 'tree-eh.c'
source_filename = "tree-eh.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type opaque
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.diagnostic_info = type opaque
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.eni_weights_d = type { i32, i32, i32, i32, i8 }
%struct.throw_stmt_node = type { %union.gimple_statement_d*, i32 }
%struct.leh_state = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.leh_tf_state* }
%struct.leh_tf_state = type { %union.gimple_statement_d*, %union.gimple_statement_d*, %struct.gimple_seq_d*, %struct.leh_state*, %struct.eh_region_d*, %struct.goto_queue_node*, i64, i64, %struct.pointer_map_t*, %struct.VEC_tree_heap*, %union.tree_node*, i8, i8, i8 }
%struct.goto_queue_node = type { %union.treemple, %struct.gimple_seq_d*, %union.gimple_statement_d*, i32, i32 }
%union.treemple = type { %union.tree_node** }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.eh_catch_d = type { %struct.eh_catch_d*, %struct.eh_catch_d*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.eh_region_u_try = type { %struct.eh_catch_d*, %struct.eh_catch_d* }
%struct.gimple_statement_eh_ctrl = type { %struct.gimple_statement_base, i32 }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.tree_label_decl = type { %struct.tree_decl_with_rtl, i32, i32 }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.finally_tree_node = type { %union.treemple, %union.gimple_statement_d* }
%struct.gimple_statement_try = type { %struct.gimple_statement_base, %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.gimple_statement_catch = type { %struct.gimple_statement_base, %union.tree_node*, %struct.gimple_seq_d* }
%struct.gimple_statement_eh_filter = type { %struct.gimple_statement_base, %union.tree_node*, %struct.gimple_seq_d* }
%struct.eh_region_u_must_not_throw = type { %union.tree_node*, i32 }
%struct.labels_s = type { %struct.goto_queue_node*, %union.tree_node* }
%struct.gimple_statement_eh_mnt = type { %struct.gimple_statement_base, %union.tree_node* }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.pointer_set_t = type opaque
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }

@using_eh_for_cleanups_p = internal global i32 0, align 4, !dbg !0
@.str = private unnamed_addr constant [10 x i8] c"tree-eh.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@cfun = external dso_local global %struct.function*, align 8
@.str.2 = private unnamed_addr constant [3 x i8] c"eh\00", align 1
@pass_lower_eh = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0), i8 ()* null, i32 ()* @lower_eh_constructs, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 49, i32 2, i32 4, i32 0, i32 0, i32 1 } }, align 8, !dbg !3052
@flag_trapping_math = external dso_local global i32, align 4
@flag_finite_math_only = external dso_local global i32, align 4
@flag_signaling_nans = external dso_local global i32, align 4
@tree_code_type = external dso_local constant [0 x i32], align 4
@flag_trapv = external dso_local global i32, align 4
@flag_exceptions = external dso_local global i32, align 4
@flag_non_call_exceptions = external dso_local global i32, align 4
@.str.3 = private unnamed_addr constant [6 x i8] c"ehopt\00", align 1
@pass_refactor_eh = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0), i8 ()* @gate_refactor_eh, i32 ()* @refactor_eh, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 49, i32 2, i32 0, i32 0, i32 0, i32 1 } }, align 8, !dbg !3080
@.str.4 = private unnamed_addr constant [5 x i8] c"resx\00", align 1
@pass_lower_resx = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8 ()* @gate_lower_resx, i32 ()* @execute_lower_resx, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 49, i32 2, i32 0, i32 0, i32 0, i32 9 } }, align 8, !dbg !3082
@.str.5 = private unnamed_addr constant [7 x i8] c"ehdisp\00", align 1
@pass_lower_eh_dispatch = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i8 ()* @gate_lower_eh_dispatch, i32 ()* @execute_lower_eh_dispatch, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 49, i32 2, i32 0, i32 0, i32 0, i32 9 } }, align 8, !dbg !3084
@.str.6 = private unnamed_addr constant [10 x i8] c"ehcleanup\00", align 1
@pass_cleanup_eh = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), i8 ()* @gate_cleanup_eh, i32 ()* @execute_cleanup_eh, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 49, i32 2, i32 0, i32 0, i32 0, i32 1 } }, align 8, !dbg !3086
@.str.7 = private unnamed_addr constant [28 x i8] c"BB %i has multiple EH edges\00", align 1
@.str.8 = private unnamed_addr constant [39 x i8] c"BB %i can not throw but has an EH edge\00", align 1
@.str.9 = private unnamed_addr constant [44 x i8] c"BB %i last statement has incorrectly set lp\00", align 1
@.str.10 = private unnamed_addr constant [28 x i8] c"BB %i is missing an EH edge\00", align 1
@.str.11 = private unnamed_addr constant [25 x i8] c"Incorrect EH edge %i->%i\00", align 1
@.str.12 = private unnamed_addr constant [25 x i8] c"BB %i is missing an edge\00", align 1
@.str.13 = private unnamed_addr constant [30 x i8] c"BB %i too many fallthru edges\00", align 1
@.str.14 = private unnamed_addr constant [25 x i8] c"BB %i has incorrect edge\00", align 1
@.str.15 = private unnamed_addr constant [34 x i8] c"BB %i has incorrect fallthru edge\00", align 1
@current_function_decl = external dso_local global %union.tree_node*, align 8
@finally_tree = internal global %struct.htab* null, align 8, !dbg !3088
@eh_region_may_contain_throw_map = internal global %struct.bitmap_head_def* null, align 8, !dbg !3090
@eh_seq = internal global %struct.gimple_seq_d* null, align 8, !dbg !3092
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.16 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@lang_protect_cleanup_actions = external dso_local global %union.tree_node* ()*, align 8
@optimize = external dso_local global i32, align 4
@eni_size_weights = external dso_local global %struct.eni_weights_d, align 4
@integer_types = external dso_local global [11 x %union.tree_node*], align 16
@.str.17 = private unnamed_addr constant [12 x i8] c"finally_tmp\00", align 1
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@implicit_built_in_decls = external dso_local global [721 x %union.tree_node*], align 16
@.str.18 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.19 = private unnamed_addr constant [40 x i8] c"Before removal of unreachable regions:\0A\00", align 1
@.str.20 = private unnamed_addr constant [20 x i8] c"Reachable regions: \00", align 1
@.str.21 = private unnamed_addr constant [25 x i8] c"Reachable landing pads: \00", align 1
@.str.22 = private unnamed_addr constant [32 x i8] c"Removing unreachable region %d\0A\00", align 1
@.str.23 = private unnamed_addr constant [37 x i8] c"Removing unreachable landing pad %d\0A\00", align 1
@.str.24 = private unnamed_addr constant [41 x i8] c"\0A\0AAfter removal of unreachable regions:\0A\00", align 1
@.str.25 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@dump_flags = external dso_local global i32, align 4
@.str.26 = private unnamed_addr constant [40 x i8] c"Unsplit EH landing pad %d to block %i.\0A\00", align 1
@.str.27 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@.str.28 = private unnamed_addr constant [44 x i8] c"Empty EH handler %i moved to EH region %i.\0A\00", align 1
@.str.29 = private unnamed_addr constant [30 x i8] c"Empty EH handler %i removed.\0A\00", align 1
@.str.30 = private unnamed_addr constant [63 x i8] c"Unsplit EH landing pad %d to block %i (via cleanup_empty_eh).\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @using_eh_for_cleanups() #0 !dbg !3098 {
entry:
  store i32 1, i32* @using_eh_for_cleanups_p, align 4, !dbg !3101
  ret void, !dbg !3102
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @add_stmt_to_eh_lp_fn(%struct.function* %ifun, %union.gimple_statement_d* %t, i32 %num) #0 !dbg !3103 {
entry:
  %ifun.addr = alloca %struct.function*, align 8
  %t.addr = alloca %union.gimple_statement_d*, align 8
  %num.addr = alloca i32, align 4
  %n = alloca %struct.throw_stmt_node*, align 8
  %slot = alloca i8**, align 8
  store %struct.function* %ifun, %struct.function** %ifun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %ifun.addr, metadata !3106, metadata !DIExpression()), !dbg !3107
  store %union.gimple_statement_d* %t, %union.gimple_statement_d** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t.addr, metadata !3108, metadata !DIExpression()), !dbg !3109
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !3110, metadata !DIExpression()), !dbg !3111
  call void @llvm.dbg.declare(metadata %struct.throw_stmt_node** %n, metadata !3112, metadata !DIExpression()), !dbg !3113
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !3114, metadata !DIExpression()), !dbg !3115
  %0 = load i32, i32* %num.addr, align 4, !dbg !3116
  %cmp = icmp ne i32 %0, 0, !dbg !3116
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3116

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 99, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3116
  br label %cond.end, !dbg !3116

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3116

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3116
  %call = call i8* @ggc_alloc_stat(i64 16), !dbg !3117
  %1 = bitcast i8* %call to %struct.throw_stmt_node*, !dbg !3117
  store %struct.throw_stmt_node* %1, %struct.throw_stmt_node** %n, align 8, !dbg !3118
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !3119
  %3 = load %struct.throw_stmt_node*, %struct.throw_stmt_node** %n, align 8, !dbg !3120
  %stmt = getelementptr inbounds %struct.throw_stmt_node, %struct.throw_stmt_node* %3, i32 0, i32 0, !dbg !3121
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %stmt, align 8, !dbg !3122
  %4 = load i32, i32* %num.addr, align 4, !dbg !3123
  %5 = load %struct.throw_stmt_node*, %struct.throw_stmt_node** %n, align 8, !dbg !3124
  %lp_nr = getelementptr inbounds %struct.throw_stmt_node, %struct.throw_stmt_node* %5, i32 0, i32 1, !dbg !3125
  store i32 %4, i32* %lp_nr, align 8, !dbg !3126
  %6 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3127
  %call1 = call %struct.htab* @get_eh_throw_stmt_table(%struct.function* %6), !dbg !3129
  %tobool = icmp ne %struct.htab* %call1, null, !dbg !3129
  br i1 %tobool, label %if.end, label %if.then, !dbg !3130

if.then:                                          ; preds = %cond.end
  %7 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3131
  %call2 = call %struct.htab* @htab_create_alloc(i64 31, i32 (i8*)* @struct_ptr_hash, i32 (i8*, i8*)* @struct_ptr_eq, void (i8*)* @ggc_free, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !3132
  call void @set_eh_throw_stmt_table(%struct.function* %7, %struct.htab* %call2), !dbg !3133
  br label %if.end, !dbg !3133

if.end:                                           ; preds = %if.then, %cond.end
  %8 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3134
  %call3 = call %struct.htab* @get_eh_throw_stmt_table(%struct.function* %8), !dbg !3135
  %9 = load %struct.throw_stmt_node*, %struct.throw_stmt_node** %n, align 8, !dbg !3136
  %10 = bitcast %struct.throw_stmt_node* %9 to i8*, !dbg !3136
  %call4 = call i8** @htab_find_slot(%struct.htab* %call3, i8* %10, i32 1), !dbg !3137
  store i8** %call4, i8*** %slot, align 8, !dbg !3138
  %11 = load i8**, i8*** %slot, align 8, !dbg !3139
  %12 = load i8*, i8** %11, align 8, !dbg !3139
  %tobool5 = icmp ne i8* %12, null, !dbg !3139
  br i1 %tobool5, label %cond.true6, label %cond.false7, !dbg !3139

cond.true6:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 111, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3139
  br label %cond.end8, !dbg !3139

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !3139

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i32 [ 0, %cond.true6 ], [ 0, %cond.false7 ], !dbg !3139
  %13 = load %struct.throw_stmt_node*, %struct.throw_stmt_node** %n, align 8, !dbg !3140
  %14 = bitcast %struct.throw_stmt_node* %13 to i8*, !dbg !3140
  %15 = load i8**, i8*** %slot, align 8, !dbg !3141
  store i8* %14, i8** %15, align 8, !dbg !3142
  ret void, !dbg !3143
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local i8* @ggc_alloc_stat(i64) #2

declare dso_local %struct.htab* @get_eh_throw_stmt_table(%struct.function*) #2

declare dso_local void @set_eh_throw_stmt_table(%struct.function*, %struct.htab*) #2

declare dso_local %struct.htab* @htab_create_alloc(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8* (i64, i64)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @struct_ptr_hash(i8* %a) #0 !dbg !3144 {
entry:
  %a.addr = alloca i8*, align 8
  %x = alloca i8**, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !3145, metadata !DIExpression()), !dbg !3146
  call void @llvm.dbg.declare(metadata i8*** %x, metadata !3147, metadata !DIExpression()), !dbg !3148
  %0 = load i8*, i8** %a.addr, align 8, !dbg !3149
  %1 = bitcast i8* %0 to i8**, !dbg !3150
  store i8** %1, i8*** %x, align 8, !dbg !3148
  %2 = load i8**, i8*** %x, align 8, !dbg !3151
  %3 = load i8*, i8** %2, align 8, !dbg !3152
  %4 = ptrtoint i8* %3 to i64, !dbg !3153
  %shr = lshr i64 %4, 4, !dbg !3154
  %conv = trunc i64 %shr to i32, !dbg !3153
  ret i32 %conv, !dbg !3155
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @struct_ptr_eq(i8* %a, i8* %b) #0 !dbg !3156 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %x = alloca i8**, align 8
  %y = alloca i8**, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !3157, metadata !DIExpression()), !dbg !3158
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !3159, metadata !DIExpression()), !dbg !3160
  call void @llvm.dbg.declare(metadata i8*** %x, metadata !3161, metadata !DIExpression()), !dbg !3162
  %0 = load i8*, i8** %a.addr, align 8, !dbg !3163
  %1 = bitcast i8* %0 to i8**, !dbg !3164
  store i8** %1, i8*** %x, align 8, !dbg !3162
  call void @llvm.dbg.declare(metadata i8*** %y, metadata !3165, metadata !DIExpression()), !dbg !3166
  %2 = load i8*, i8** %b.addr, align 8, !dbg !3167
  %3 = bitcast i8* %2 to i8**, !dbg !3168
  store i8** %3, i8*** %y, align 8, !dbg !3166
  %4 = load i8**, i8*** %x, align 8, !dbg !3169
  %5 = load i8*, i8** %4, align 8, !dbg !3170
  %6 = load i8**, i8*** %y, align 8, !dbg !3171
  %7 = load i8*, i8** %6, align 8, !dbg !3172
  %cmp = icmp eq i8* %5, %7, !dbg !3173
  %conv = zext i1 %cmp to i32, !dbg !3173
  ret i32 %conv, !dbg !3174
}

declare dso_local void @ggc_free(i8*) #2

declare dso_local i8* @ggc_calloc(i64, i64) #2

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @add_stmt_to_eh_lp(%union.gimple_statement_d* %t, i32 %num) #0 !dbg !3175 {
entry:
  %t.addr = alloca %union.gimple_statement_d*, align 8
  %num.addr = alloca i32, align 4
  store %union.gimple_statement_d* %t, %union.gimple_statement_d** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t.addr, metadata !3178, metadata !DIExpression()), !dbg !3179
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !3180, metadata !DIExpression()), !dbg !3181
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3182
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3182
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !3183
  %2 = load i32, i32* %num.addr, align 4, !dbg !3184
  call void @add_stmt_to_eh_lp_fn(%struct.function* %add.ptr, %union.gimple_statement_d* %1, i32 %2), !dbg !3185
  ret void, !dbg !3186
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @remove_stmt_from_eh_lp_fn(%struct.function* %ifun, %union.gimple_statement_d* %t) #0 !dbg !3187 {
entry:
  %retval = alloca i8, align 1
  %ifun.addr = alloca %struct.function*, align 8
  %t.addr = alloca %union.gimple_statement_d*, align 8
  %dummy = alloca %struct.throw_stmt_node, align 8
  %slot = alloca i8**, align 8
  store %struct.function* %ifun, %struct.function** %ifun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %ifun.addr, metadata !3190, metadata !DIExpression()), !dbg !3191
  store %union.gimple_statement_d* %t, %union.gimple_statement_d** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t.addr, metadata !3192, metadata !DIExpression()), !dbg !3193
  call void @llvm.dbg.declare(metadata %struct.throw_stmt_node* %dummy, metadata !3194, metadata !DIExpression()), !dbg !3195
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !3196, metadata !DIExpression()), !dbg !3197
  %0 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3198
  %call = call %struct.htab* @get_eh_throw_stmt_table(%struct.function* %0), !dbg !3200
  %tobool = icmp ne %struct.htab* %call, null, !dbg !3200
  br i1 %tobool, label %if.end, label %if.then, !dbg !3201

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3202
  br label %return, !dbg !3202

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !3203
  %stmt = getelementptr inbounds %struct.throw_stmt_node, %struct.throw_stmt_node* %dummy, i32 0, i32 0, !dbg !3204
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %stmt, align 8, !dbg !3205
  %2 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3206
  %call1 = call %struct.htab* @get_eh_throw_stmt_table(%struct.function* %2), !dbg !3207
  %3 = bitcast %struct.throw_stmt_node* %dummy to i8*, !dbg !3208
  %call2 = call i8** @htab_find_slot(%struct.htab* %call1, i8* %3, i32 0), !dbg !3209
  store i8** %call2, i8*** %slot, align 8, !dbg !3210
  %4 = load i8**, i8*** %slot, align 8, !dbg !3211
  %tobool3 = icmp ne i8** %4, null, !dbg !3211
  br i1 %tobool3, label %if.then4, label %if.else, !dbg !3213

if.then4:                                         ; preds = %if.end
  %5 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3214
  %call5 = call %struct.htab* @get_eh_throw_stmt_table(%struct.function* %5), !dbg !3216
  %6 = load i8**, i8*** %slot, align 8, !dbg !3217
  call void @htab_clear_slot(%struct.htab* %call5, i8** %6), !dbg !3218
  store i8 1, i8* %retval, align 1, !dbg !3219
  br label %return, !dbg !3219

if.else:                                          ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !3220
  br label %return, !dbg !3220

return:                                           ; preds = %if.else, %if.then4, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !3221
  ret i8 %7, !dbg !3221
}

declare dso_local void @htab_clear_slot(%struct.htab*, i8**) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @remove_stmt_from_eh_lp(%union.gimple_statement_d* %t) #0 !dbg !3222 {
entry:
  %t.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %t, %union.gimple_statement_d** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t.addr, metadata !3225, metadata !DIExpression()), !dbg !3226
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3227
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3227
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !3228
  %call = call zeroext i8 @remove_stmt_from_eh_lp_fn(%struct.function* %add.ptr, %union.gimple_statement_d* %1), !dbg !3229
  ret i8 %call, !dbg !3230
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @lookup_stmt_eh_lp_fn(%struct.function* %ifun, %union.gimple_statement_d* %t) #0 !dbg !3231 {
entry:
  %retval = alloca i32, align 4
  %ifun.addr = alloca %struct.function*, align 8
  %t.addr = alloca %union.gimple_statement_d*, align 8
  %p = alloca %struct.throw_stmt_node*, align 8
  %n = alloca %struct.throw_stmt_node, align 8
  store %struct.function* %ifun, %struct.function** %ifun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %ifun.addr, metadata !3234, metadata !DIExpression()), !dbg !3235
  store %union.gimple_statement_d* %t, %union.gimple_statement_d** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t.addr, metadata !3236, metadata !DIExpression()), !dbg !3237
  call void @llvm.dbg.declare(metadata %struct.throw_stmt_node** %p, metadata !3238, metadata !DIExpression()), !dbg !3239
  call void @llvm.dbg.declare(metadata %struct.throw_stmt_node* %n, metadata !3240, metadata !DIExpression()), !dbg !3241
  %0 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3242
  %eh = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 0, !dbg !3244
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !3244
  %throw_stmt_table = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 3, !dbg !3245
  %2 = load %struct.htab*, %struct.htab** %throw_stmt_table, align 8, !dbg !3245
  %cmp = icmp eq %struct.htab* %2, null, !dbg !3246
  br i1 %cmp, label %if.then, label %if.end, !dbg !3247

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3248
  br label %return, !dbg !3248

if.end:                                           ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !3249
  %stmt = getelementptr inbounds %struct.throw_stmt_node, %struct.throw_stmt_node* %n, i32 0, i32 0, !dbg !3250
  store %union.gimple_statement_d* %3, %union.gimple_statement_d** %stmt, align 8, !dbg !3251
  %4 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !3252
  %eh1 = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 0, !dbg !3253
  %5 = load %struct.eh_status*, %struct.eh_status** %eh1, align 8, !dbg !3253
  %throw_stmt_table2 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %5, i32 0, i32 3, !dbg !3254
  %6 = load %struct.htab*, %struct.htab** %throw_stmt_table2, align 8, !dbg !3254
  %7 = bitcast %struct.throw_stmt_node* %n to i8*, !dbg !3255
  %call = call i8* @htab_find(%struct.htab* %6, i8* %7), !dbg !3256
  %8 = bitcast i8* %call to %struct.throw_stmt_node*, !dbg !3257
  store %struct.throw_stmt_node* %8, %struct.throw_stmt_node** %p, align 8, !dbg !3258
  %9 = load %struct.throw_stmt_node*, %struct.throw_stmt_node** %p, align 8, !dbg !3259
  %tobool = icmp ne %struct.throw_stmt_node* %9, null, !dbg !3259
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3259

cond.true:                                        ; preds = %if.end
  %10 = load %struct.throw_stmt_node*, %struct.throw_stmt_node** %p, align 8, !dbg !3260
  %lp_nr = getelementptr inbounds %struct.throw_stmt_node, %struct.throw_stmt_node* %10, i32 0, i32 1, !dbg !3261
  %11 = load i32, i32* %lp_nr, align 8, !dbg !3261
  br label %cond.end, !dbg !3259

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3259

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %11, %cond.true ], [ 0, %cond.false ], !dbg !3259
  store i32 %cond, i32* %retval, align 4, !dbg !3262
  br label %return, !dbg !3262

return:                                           ; preds = %cond.end, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !3263
  ret i32 %12, !dbg !3263
}

declare dso_local i8* @htab_find(%struct.htab*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @lookup_stmt_eh_lp(%union.gimple_statement_d* %t) #0 !dbg !3264 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %t, %union.gimple_statement_d** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t.addr, metadata !3267, metadata !DIExpression()), !dbg !3268
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3269
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3269
  %tobool = icmp ne %struct.function* %add.ptr, null, !dbg !3269
  br i1 %tobool, label %if.end, label %if.then, !dbg !3271

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3272
  br label %return, !dbg !3272

if.end:                                           ; preds = %entry
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3273
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3273
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !3274
  %call = call i32 @lookup_stmt_eh_lp_fn(%struct.function* %add.ptr1, %union.gimple_statement_d* %2), !dbg !3275
  store i32 %call, i32* %retval, align 4, !dbg !3276
  br label %return, !dbg !3276

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval, align 4, !dbg !3277
  ret i32 %3, !dbg !3277
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @lower_eh_constructs() #0 !dbg !3278 {
entry:
  %retval = alloca i32, align 4
  %null_state = alloca %struct.leh_state, align 8
  %bodyp = alloca %struct.gimple_seq_d*, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_state* %null_state, metadata !3279, metadata !DIExpression()), !dbg !3280
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %bodyp, metadata !3281, metadata !DIExpression()), !dbg !3282
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3283
  %call = call %struct.gimple_seq_d* @gimple_body(%union.tree_node* %0), !dbg !3284
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %bodyp, align 8, !dbg !3285
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %bodyp, align 8, !dbg !3286
  %cmp = icmp eq %struct.gimple_seq_d* %1, null, !dbg !3288
  br i1 %cmp, label %if.then, label %if.end, !dbg !3289

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3290
  br label %return, !dbg !3290

if.end:                                           ; preds = %entry
  %call1 = call %struct.htab* @htab_create(i64 31, i32 (i8*)* @struct_ptr_hash, i32 (i8*, i8*)* @struct_ptr_eq, void (i8*)* @free), !dbg !3291
  store %struct.htab* %call1, %struct.htab** @finally_tree, align 8, !dbg !3292
  %call2 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3293
  store %struct.bitmap_head_def* %call2, %struct.bitmap_head_def** @eh_region_may_contain_throw_map, align 8, !dbg !3294
  %2 = bitcast %struct.leh_state* %null_state to i8*, !dbg !3295
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false), !dbg !3295
  %3 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %bodyp, align 8, !dbg !3296
  call void @collect_finally_tree_1(%struct.gimple_seq_d* %3, %union.gimple_statement_d* null), !dbg !3297
  %4 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %bodyp, align 8, !dbg !3298
  call void @lower_eh_constructs_1(%struct.leh_state* %null_state, %struct.gimple_seq_d* %4), !dbg !3299
  %5 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %bodyp, align 8, !dbg !3300
  %call3 = call zeroext i8 @gimple_seq_may_fallthru(%struct.gimple_seq_d* %5), !dbg !3300
  %tobool = icmp ne i8 %call3, 0, !dbg !3300
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3300

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 2006, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3300
  br label %cond.end, !dbg !3300

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3300

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3300
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** @eh_seq, align 8, !dbg !3301
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %bodyp, %struct.gimple_seq_d* %6), !dbg !3302
  %7 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %bodyp, align 8, !dbg !3303
  %8 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3303
  %call4 = call %struct.gimple_seq_d* @gimple_body(%union.tree_node* %8), !dbg !3303
  %cmp5 = icmp eq %struct.gimple_seq_d* %7, %call4, !dbg !3303
  br i1 %cmp5, label %cond.false7, label %cond.true6, !dbg !3303

cond.true6:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 2011, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3303
  br label %cond.end8, !dbg !3303

cond.false7:                                      ; preds = %cond.end
  br label %cond.end8, !dbg !3303

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i32 [ 0, %cond.true6 ], [ 0, %cond.false7 ], !dbg !3303
  %9 = load %struct.htab*, %struct.htab** @finally_tree, align 8, !dbg !3304
  call void @htab_delete(%struct.htab* %9), !dbg !3305
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @eh_region_may_contain_throw_map, align 8, !dbg !3306
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %10), !dbg !3306
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @eh_region_may_contain_throw_map, align 8, !dbg !3306
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** @eh_seq, align 8, !dbg !3307
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3308
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !3308
  %call10 = call i32 @function_needs_eh_personality(%struct.function* %add.ptr), !dbg !3310
  %cmp11 = icmp eq i32 %call10, 2, !dbg !3311
  br i1 %cmp11, label %land.lhs.true, label %if.end17, !dbg !3312

land.lhs.true:                                    ; preds = %cond.end8
  %12 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3313
  %function_decl = bitcast %union.tree_node* %12 to %struct.tree_function_decl*, !dbg !3313
  %personality = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 2, !dbg !3313
  %13 = load %union.tree_node*, %union.tree_node** %personality, align 8, !dbg !3313
  %tobool12 = icmp ne %union.tree_node* %13, null, !dbg !3313
  br i1 %tobool12, label %if.end17, label %if.then13, !dbg !3314

if.then13:                                        ; preds = %land.lhs.true
  %14 = load %union.tree_node* ()*, %union.tree_node* ()** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 45), align 8, !dbg !3315
  %call14 = call %union.tree_node* %14(), !dbg !3316
  %15 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3317
  %function_decl15 = bitcast %union.tree_node* %15 to %struct.tree_function_decl*, !dbg !3317
  %personality16 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl15, i32 0, i32 2, !dbg !3317
  store %union.tree_node* %call14, %union.tree_node** %personality16, align 8, !dbg !3318
  br label %if.end17, !dbg !3317

if.end17:                                         ; preds = %if.then13, %land.lhs.true, %cond.end8
  store i32 0, i32* %retval, align 4, !dbg !3319
  br label %return, !dbg !3319

return:                                           ; preds = %if.end17, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !3320
  ret i32 %16, !dbg !3320
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @make_eh_dispatch_edges(%union.gimple_statement_d* %stmt) #0 !dbg !3321 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %r = alloca %struct.eh_region_d*, align 8
  %c = alloca %struct.eh_catch_d*, align 8
  %src = alloca %struct.basic_block_def*, align 8
  %dst = alloca %struct.basic_block_def*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3322, metadata !DIExpression()), !dbg !3323
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r, metadata !3324, metadata !DIExpression()), !dbg !3325
  call void @llvm.dbg.declare(metadata %struct.eh_catch_d** %c, metadata !3326, metadata !DIExpression()), !dbg !3328
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %src, metadata !3329, metadata !DIExpression()), !dbg !3330
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dst, metadata !3331, metadata !DIExpression()), !dbg !3332
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3333
  %call = call i32 @gimple_eh_dispatch_region(%union.gimple_statement_d* %0), !dbg !3334
  %call1 = call %struct.eh_region_d* @get_eh_region_from_number(i32 %call), !dbg !3335
  store %struct.eh_region_d* %call1, %struct.eh_region_d** %r, align 8, !dbg !3336
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3337
  %call2 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %1), !dbg !3338
  store %struct.basic_block_def* %call2, %struct.basic_block_def** %src, align 8, !dbg !3339
  %2 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !3340
  %type = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %2, i32 0, i32 4, !dbg !3341
  %3 = load i32, i32* %type, align 4, !dbg !3341
  switch i32 %3, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb5
  ], !dbg !3342

sw.bb:                                            ; preds = %entry
  %4 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !3343
  %u = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %4, i32 0, i32 5, !dbg !3346
  %eh_try = bitcast %union.eh_region_u* %u to %struct.eh_region_u_try*, !dbg !3347
  %first_catch = getelementptr inbounds %struct.eh_region_u_try, %struct.eh_region_u_try* %eh_try, i32 0, i32 0, !dbg !3348
  %5 = load %struct.eh_catch_d*, %struct.eh_catch_d** %first_catch, align 8, !dbg !3348
  store %struct.eh_catch_d* %5, %struct.eh_catch_d** %c, align 8, !dbg !3349
  br label %for.cond, !dbg !3350

for.cond:                                         ; preds = %for.inc, %sw.bb
  %6 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !3351
  %tobool = icmp ne %struct.eh_catch_d* %6, null, !dbg !3353
  br i1 %tobool, label %for.body, label %for.end, !dbg !3353

for.body:                                         ; preds = %for.cond
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3354
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !3354
  %8 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !3354
  %label = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %8, i32 0, i32 4, !dbg !3354
  %9 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !3354
  %call3 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr, %union.tree_node* %9), !dbg !3354
  store %struct.basic_block_def* %call3, %struct.basic_block_def** %dst, align 8, !dbg !3356
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3357
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %dst, align 8, !dbg !3358
  %call4 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %10, %struct.basic_block_def* %11, i32 0), !dbg !3359
  %12 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !3360
  %type_list = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %12, i32 0, i32 2, !dbg !3362
  %13 = load %union.tree_node*, %union.tree_node** %type_list, align 8, !dbg !3362
  %cmp = icmp eq %union.tree_node* %13, null, !dbg !3363
  br i1 %cmp, label %if.then, label %if.end, !dbg !3364

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !3365
  br label %return, !dbg !3365

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !3366

for.inc:                                          ; preds = %if.end
  %14 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !3367
  %next_catch = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %14, i32 0, i32 0, !dbg !3368
  %15 = load %struct.eh_catch_d*, %struct.eh_catch_d** %next_catch, align 8, !dbg !3368
  store %struct.eh_catch_d* %15, %struct.eh_catch_d** %c, align 8, !dbg !3369
  br label %for.cond, !dbg !3370, !llvm.loop !3371

for.end:                                          ; preds = %for.cond
  br label %sw.epilog, !dbg !3373

sw.bb5:                                           ; preds = %entry
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3374
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !3374
  %17 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !3374
  %u7 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %17, i32 0, i32 5, !dbg !3374
  %allowed = bitcast %union.eh_region_u* %u7 to %struct.eh_region_u_allowed*, !dbg !3374
  %label8 = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed, i32 0, i32 1, !dbg !3374
  %18 = load %union.tree_node*, %union.tree_node** %label8, align 8, !dbg !3374
  %call9 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr6, %union.tree_node* %18), !dbg !3374
  store %struct.basic_block_def* %call9, %struct.basic_block_def** %dst, align 8, !dbg !3375
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3376
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %dst, align 8, !dbg !3377
  %call10 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %19, %struct.basic_block_def* %20, i32 0), !dbg !3378
  br label %sw.epilog, !dbg !3379

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 2080, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3380
  br label %sw.epilog, !dbg !3381

sw.epilog:                                        ; preds = %sw.default, %sw.bb5, %for.end
  store i8 1, i8* %retval, align 1, !dbg !3382
  br label %return, !dbg !3382

return:                                           ; preds = %sw.epilog, %if.then
  %21 = load i8, i8* %retval, align 1, !dbg !3383
  ret i8 %21, !dbg !3383
}

declare dso_local %struct.eh_region_d* @get_eh_region_from_number(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_eh_dispatch_region(%union.gimple_statement_d* %gs) #0 !dbg !3384 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3388, metadata !DIExpression()), !dbg !3389
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3390
  %gimple_eh_ctrl = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_eh_ctrl*, !dbg !3391
  %region = getelementptr inbounds %struct.gimple_statement_eh_ctrl, %struct.gimple_statement_eh_ctrl* %gimple_eh_ctrl, i32 0, i32 1, !dbg !3392
  %1 = load i32, i32* %region, align 8, !dbg !3392
  ret i32 %1, !dbg !3393
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !3394 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3397, metadata !DIExpression()), !dbg !3398
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3399
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3400
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !3401
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3401
  ret %struct.basic_block_def* %1, !dbg !3402
}

declare dso_local %struct.basic_block_def* @label_to_block_fn(%struct.function*, %union.tree_node*) #2

declare dso_local %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @make_eh_edges(%union.gimple_statement_d* %stmt) #0 !dbg !3403 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %src = alloca %struct.basic_block_def*, align 8
  %dst = alloca %struct.basic_block_def*, align 8
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %lp_nr = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3406, metadata !DIExpression()), !dbg !3407
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %src, metadata !3408, metadata !DIExpression()), !dbg !3409
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dst, metadata !3410, metadata !DIExpression()), !dbg !3411
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !3412, metadata !DIExpression()), !dbg !3413
  call void @llvm.dbg.declare(metadata i32* %lp_nr, metadata !3414, metadata !DIExpression()), !dbg !3415
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3416
  %call = call i32 @lookup_stmt_eh_lp(%union.gimple_statement_d* %0), !dbg !3417
  store i32 %call, i32* %lp_nr, align 4, !dbg !3418
  %1 = load i32, i32* %lp_nr, align 4, !dbg !3419
  %cmp = icmp sle i32 %1, 0, !dbg !3421
  br i1 %cmp, label %if.then, label %if.end, !dbg !3422

if.then:                                          ; preds = %entry
  br label %return, !dbg !3423

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %lp_nr, align 4, !dbg !3424
  %call1 = call %struct.eh_landing_pad_d* @get_eh_landing_pad_from_number(i32 %2), !dbg !3425
  store %struct.eh_landing_pad_d* %call1, %struct.eh_landing_pad_d** %lp, align 8, !dbg !3426
  %3 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !3427
  %cmp2 = icmp ne %struct.eh_landing_pad_d* %3, null, !dbg !3427
  br i1 %cmp2, label %cond.false, label %cond.true, !dbg !3427

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 2101, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3427
  br label %cond.end, !dbg !3427

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3427

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3427
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3428
  %call3 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %4), !dbg !3429
  store %struct.basic_block_def* %call3, %struct.basic_block_def** %src, align 8, !dbg !3430
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3431
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3431
  %6 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !3431
  %post_landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %6, i32 0, i32 2, !dbg !3431
  %7 = load %union.tree_node*, %union.tree_node** %post_landing_pad, align 8, !dbg !3431
  %call4 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr, %union.tree_node* %7), !dbg !3431
  store %struct.basic_block_def* %call4, %struct.basic_block_def** %dst, align 8, !dbg !3432
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3433
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %dst, align 8, !dbg !3434
  %call5 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %8, %struct.basic_block_def* %9, i32 8), !dbg !3435
  br label %return, !dbg !3436

return:                                           ; preds = %cond.end, %if.then
  ret void, !dbg !3436
}

declare dso_local %struct.eh_landing_pad_d* @get_eh_landing_pad_from_number(i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.edge_def* @redirect_eh_edge(%struct.edge_def* %edge_in, %struct.basic_block_def* %new_bb) #0 !dbg !3437 {
entry:
  %edge_in.addr = alloca %struct.edge_def*, align 8
  %new_bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.edge_def* %edge_in, %struct.edge_def** %edge_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %edge_in.addr, metadata !3440, metadata !DIExpression()), !dbg !3441
  store %struct.basic_block_def* %new_bb, %struct.basic_block_def** %new_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb.addr, metadata !3442, metadata !DIExpression()), !dbg !3443
  %0 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !3444
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb.addr, align 8, !dbg !3445
  call void @redirect_eh_edge_1(%struct.edge_def* %0, %struct.basic_block_def* %1, i8 zeroext 0), !dbg !3446
  %2 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !3447
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb.addr, align 8, !dbg !3448
  %call = call %struct.edge_def* @ssa_redirect_edge(%struct.edge_def* %2, %struct.basic_block_def* %3), !dbg !3449
  ret %struct.edge_def* %call, !dbg !3450
}

; Function Attrs: noinline nounwind uwtable
define internal void @redirect_eh_edge_1(%struct.edge_def* %edge_in, %struct.basic_block_def* %new_bb, i8 zeroext %change_region) #0 !dbg !3451 {
entry:
  %edge_in.addr = alloca %struct.edge_def*, align 8
  %new_bb.addr = alloca %struct.basic_block_def*, align 8
  %change_region.addr = alloca i8, align 1
  %old_lp = alloca %struct.eh_landing_pad_d*, align 8
  %new_lp = alloca %struct.eh_landing_pad_d*, align 8
  %old_bb = alloca %struct.basic_block_def*, align 8
  %throw_stmt = alloca %union.gimple_statement_d*, align 8
  %old_lp_nr = alloca i32, align 4
  %new_lp_nr = alloca i32, align 4
  %old_label = alloca %union.tree_node*, align 8
  %new_label = alloca %union.tree_node*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.edge_def* %edge_in, %struct.edge_def** %edge_in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %edge_in.addr, metadata !3454, metadata !DIExpression()), !dbg !3455
  store %struct.basic_block_def* %new_bb, %struct.basic_block_def** %new_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb.addr, metadata !3456, metadata !DIExpression()), !dbg !3457
  store i8 %change_region, i8* %change_region.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %change_region.addr, metadata !3458, metadata !DIExpression()), !dbg !3459
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %old_lp, metadata !3460, metadata !DIExpression()), !dbg !3461
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %new_lp, metadata !3462, metadata !DIExpression()), !dbg !3463
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %old_bb, metadata !3464, metadata !DIExpression()), !dbg !3465
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %throw_stmt, metadata !3466, metadata !DIExpression()), !dbg !3467
  call void @llvm.dbg.declare(metadata i32* %old_lp_nr, metadata !3468, metadata !DIExpression()), !dbg !3469
  call void @llvm.dbg.declare(metadata i32* %new_lp_nr, metadata !3470, metadata !DIExpression()), !dbg !3471
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_label, metadata !3472, metadata !DIExpression()), !dbg !3473
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_label, metadata !3474, metadata !DIExpression()), !dbg !3475
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !3476, metadata !DIExpression()), !dbg !3483
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !3484, metadata !DIExpression()), !dbg !3485
  %0 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !3486
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 1, !dbg !3487
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3487
  store %struct.basic_block_def* %1, %struct.basic_block_def** %old_bb, align 8, !dbg !3488
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %old_bb, align 8, !dbg !3489
  %call = call %union.tree_node* @gimple_block_label(%struct.basic_block_def* %2), !dbg !3490
  store %union.tree_node* %call, %union.tree_node** %old_label, align 8, !dbg !3491
  %3 = load %union.tree_node*, %union.tree_node** %old_label, align 8, !dbg !3492
  %label_decl = bitcast %union.tree_node* %3 to %struct.tree_label_decl*, !dbg !3492
  %eh_landing_pad_nr = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl, i32 0, i32 2, !dbg !3492
  %4 = load i32, i32* %eh_landing_pad_nr, align 4, !dbg !3492
  store i32 %4, i32* %old_lp_nr, align 4, !dbg !3493
  %5 = load i32, i32* %old_lp_nr, align 4, !dbg !3494
  %cmp = icmp sgt i32 %5, 0, !dbg !3494
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3494

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 2131, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3494
  br label %cond.end, !dbg !3494

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3494

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3494
  %6 = load i32, i32* %old_lp_nr, align 4, !dbg !3495
  %call1 = call %struct.eh_landing_pad_d* @get_eh_landing_pad_from_number(i32 %6), !dbg !3496
  store %struct.eh_landing_pad_d* %call1, %struct.eh_landing_pad_d** %old_lp, align 8, !dbg !3497
  %7 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !3498
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %7, i32 0, i32 0, !dbg !3499
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3499
  %call2 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %8), !dbg !3500
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %throw_stmt, align 8, !dbg !3501
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %throw_stmt, align 8, !dbg !3502
  %call3 = call i32 @lookup_stmt_eh_lp(%union.gimple_statement_d* %9), !dbg !3502
  %10 = load i32, i32* %old_lp_nr, align 4, !dbg !3502
  %cmp4 = icmp eq i32 %call3, %10, !dbg !3502
  br i1 %cmp4, label %cond.false6, label %cond.true5, !dbg !3502

cond.true5:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 2135, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3502
  br label %cond.end7, !dbg !3502

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !3502

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !3502
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb.addr, align 8, !dbg !3503
  %call9 = call %union.tree_node* @gimple_block_label(%struct.basic_block_def* %11), !dbg !3504
  store %union.tree_node* %call9, %union.tree_node** %new_label, align 8, !dbg !3505
  %12 = load %union.tree_node*, %union.tree_node** %new_label, align 8, !dbg !3506
  %label_decl10 = bitcast %union.tree_node* %12 to %struct.tree_label_decl*, !dbg !3506
  %eh_landing_pad_nr11 = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl10, i32 0, i32 2, !dbg !3506
  %13 = load i32, i32* %eh_landing_pad_nr11, align 4, !dbg !3506
  store i32 %13, i32* %new_lp_nr, align 4, !dbg !3507
  %14 = load i32, i32* %new_lp_nr, align 4, !dbg !3508
  %tobool = icmp ne i32 %14, 0, !dbg !3508
  br i1 %tobool, label %if.then, label %if.else, !dbg !3510

if.then:                                          ; preds = %cond.end7
  %15 = load i32, i32* %new_lp_nr, align 4, !dbg !3511
  %call12 = call %struct.eh_landing_pad_d* @get_eh_landing_pad_from_number(i32 %15), !dbg !3513
  store %struct.eh_landing_pad_d* %call12, %struct.eh_landing_pad_d** %new_lp, align 8, !dbg !3514
  %16 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %new_lp, align 8, !dbg !3515
  %tobool13 = icmp ne %struct.eh_landing_pad_d* %16, null, !dbg !3515
  br i1 %tobool13, label %cond.false15, label %cond.true14, !dbg !3515

cond.true14:                                      ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 2144, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3515
  br label %cond.end16, !dbg !3515

cond.false15:                                     ; preds = %if.then
  br label %cond.end16, !dbg !3515

cond.end16:                                       ; preds = %cond.false15, %cond.true14
  %cond17 = phi i32 [ 0, %cond.true14 ], [ 0, %cond.false15 ], !dbg !3515
  %17 = load i8, i8* %change_region.addr, align 1, !dbg !3516
  %conv = zext i8 %17 to i32, !dbg !3516
  %tobool18 = icmp ne i32 %conv, 0, !dbg !3516
  br i1 %tobool18, label %cond.false23, label %lor.lhs.false, !dbg !3516

lor.lhs.false:                                    ; preds = %cond.end16
  %18 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %new_lp, align 8, !dbg !3516
  %region = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %18, i32 0, i32 1, !dbg !3516
  %19 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !3516
  %20 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %old_lp, align 8, !dbg !3516
  %region19 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %20, i32 0, i32 1, !dbg !3516
  %21 = load %struct.eh_region_d*, %struct.eh_region_d** %region19, align 8, !dbg !3516
  %cmp20 = icmp eq %struct.eh_region_d* %19, %21, !dbg !3516
  br i1 %cmp20, label %cond.false23, label %cond.true22, !dbg !3516

cond.true22:                                      ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 2148, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3516
  br label %cond.end24, !dbg !3516

cond.false23:                                     ; preds = %lor.lhs.false, %cond.end16
  br label %cond.end24, !dbg !3516

cond.end24:                                       ; preds = %cond.false23, %cond.true22
  %cond25 = phi i32 [ 0, %cond.true22 ], [ 0, %cond.false23 ], !dbg !3516
  br label %if.end, !dbg !3517

if.else:                                          ; preds = %cond.end7
  store %struct.eh_landing_pad_d* null, %struct.eh_landing_pad_d** %new_lp, align 8, !dbg !3518
  %22 = load i8, i8* %change_region.addr, align 1, !dbg !3520
  %tobool26 = icmp ne i8 %22, 0, !dbg !3520
  br i1 %tobool26, label %cond.true27, label %cond.false28, !dbg !3520

cond.true27:                                      ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 2153, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3520
  br label %cond.end29, !dbg !3520

cond.false28:                                     ; preds = %if.else
  br label %cond.end29, !dbg !3520

cond.end29:                                       ; preds = %cond.false28, %cond.true27
  %cond30 = phi i32 [ 0, %cond.true27 ], [ 0, %cond.false28 ], !dbg !3520
  br label %if.end

if.end:                                           ; preds = %cond.end29, %cond.end24
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %old_bb, align 8, !dbg !3521
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 0, !dbg !3521
  %call31 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !3521
  %24 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !3521
  %25 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %24, i32 0, i32 0, !dbg !3521
  %26 = extractvalue { i32, %struct.VEC_edge_gc** } %call31, 0, !dbg !3521
  store i32 %26, i32* %25, align 8, !dbg !3521
  %27 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %24, i32 0, i32 1, !dbg !3521
  %28 = extractvalue { i32, %struct.VEC_edge_gc** } %call31, 1, !dbg !3521
  store %struct.VEC_edge_gc** %28, %struct.VEC_edge_gc*** %27, align 8, !dbg !3521
  %29 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !3521
  %30 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !3521
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 16, i1 false), !dbg !3521
  br label %for.cond, !dbg !3521

for.cond:                                         ; preds = %for.inc, %if.end
  %31 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3523
  %32 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %31, i32 0, i32 0, !dbg !3523
  %33 = load i32, i32* %32, align 8, !dbg !3523
  %34 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %31, i32 0, i32 1, !dbg !3523
  %35 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %34, align 8, !dbg !3523
  %call32 = call zeroext i8 @ei_cond(i32 %33, %struct.VEC_edge_gc** %35, %struct.edge_def** %e), !dbg !3523
  %tobool33 = icmp ne i8 %call32, 0, !dbg !3521
  br i1 %tobool33, label %for.body, label %for.end, !dbg !3521

for.body:                                         ; preds = %for.cond
  %36 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3525
  %37 = load %struct.edge_def*, %struct.edge_def** %edge_in.addr, align 8, !dbg !3527
  %cmp34 = icmp ne %struct.edge_def* %36, %37, !dbg !3528
  br i1 %cmp34, label %land.lhs.true, label %if.end38, !dbg !3529

land.lhs.true:                                    ; preds = %for.body
  %38 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3530
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %38, i32 0, i32 7, !dbg !3531
  %39 = load i32, i32* %flags, align 8, !dbg !3531
  %and = and i32 %39, 8, !dbg !3532
  %tobool36 = icmp ne i32 %and, 0, !dbg !3532
  br i1 %tobool36, label %if.then37, label %if.end38, !dbg !3533

if.then37:                                        ; preds = %land.lhs.true
  br label %for.end, !dbg !3534

if.end38:                                         ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !3535

for.inc:                                          ; preds = %if.end38
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !3523
  br label %for.cond, !dbg !3523, !llvm.loop !3536

for.end:                                          ; preds = %if.then37, %for.cond
  %40 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %new_lp, align 8, !dbg !3538
  %tobool39 = icmp ne %struct.eh_landing_pad_d* %40, null, !dbg !3538
  br i1 %tobool39, label %if.then40, label %if.else47, !dbg !3540

if.then40:                                        ; preds = %for.end
  %41 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3541
  %cmp41 = icmp eq %struct.edge_def* %41, null, !dbg !3544
  br i1 %cmp41, label %land.lhs.true43, label %if.end46, !dbg !3545

land.lhs.true43:                                  ; preds = %if.then40
  %42 = load i8, i8* %change_region.addr, align 1, !dbg !3546
  %tobool44 = icmp ne i8 %42, 0, !dbg !3546
  br i1 %tobool44, label %if.end46, label %if.then45, !dbg !3547

if.then45:                                        ; preds = %land.lhs.true43
  %43 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %old_lp, align 8, !dbg !3548
  call void @remove_eh_landing_pad(%struct.eh_landing_pad_d* %43), !dbg !3549
  br label %if.end46, !dbg !3549

if.end46:                                         ; preds = %if.then45, %land.lhs.true43, %if.then40
  br label %if.end60, !dbg !3550

if.else47:                                        ; preds = %for.end
  %44 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3551
  %cmp48 = icmp eq %struct.edge_def* %44, null, !dbg !3554
  br i1 %cmp48, label %if.then50, label %if.else53, !dbg !3555

if.then50:                                        ; preds = %if.else47
  %45 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %old_lp, align 8, !dbg !3556
  %post_landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %45, i32 0, i32 2, !dbg !3556
  %46 = load %union.tree_node*, %union.tree_node** %post_landing_pad, align 8, !dbg !3556
  %label_decl51 = bitcast %union.tree_node* %46 to %struct.tree_label_decl*, !dbg !3556
  %eh_landing_pad_nr52 = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl51, i32 0, i32 2, !dbg !3556
  store i32 0, i32* %eh_landing_pad_nr52, align 4, !dbg !3558
  %47 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %old_lp, align 8, !dbg !3559
  store %struct.eh_landing_pad_d* %47, %struct.eh_landing_pad_d** %new_lp, align 8, !dbg !3560
  br label %if.end56, !dbg !3561

if.else53:                                        ; preds = %if.else47
  %48 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %old_lp, align 8, !dbg !3562
  %region54 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %48, i32 0, i32 1, !dbg !3563
  %49 = load %struct.eh_region_d*, %struct.eh_region_d** %region54, align 8, !dbg !3563
  %call55 = call %struct.eh_landing_pad_d* @gen_eh_landing_pad(%struct.eh_region_d* %49), !dbg !3564
  store %struct.eh_landing_pad_d* %call55, %struct.eh_landing_pad_d** %new_lp, align 8, !dbg !3565
  br label %if.end56

if.end56:                                         ; preds = %if.else53, %if.then50
  %50 = load %union.tree_node*, %union.tree_node** %new_label, align 8, !dbg !3566
  %51 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %new_lp, align 8, !dbg !3567
  %post_landing_pad57 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %51, i32 0, i32 2, !dbg !3568
  store %union.tree_node* %50, %union.tree_node** %post_landing_pad57, align 8, !dbg !3569
  %52 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %new_lp, align 8, !dbg !3570
  %index = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %52, i32 0, i32 4, !dbg !3571
  %53 = load i32, i32* %index, align 8, !dbg !3571
  %54 = load %union.tree_node*, %union.tree_node** %new_label, align 8, !dbg !3572
  %label_decl58 = bitcast %union.tree_node* %54 to %struct.tree_label_decl*, !dbg !3572
  %eh_landing_pad_nr59 = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl58, i32 0, i32 2, !dbg !3572
  store i32 %53, i32* %eh_landing_pad_nr59, align 4, !dbg !3573
  br label %if.end60

if.end60:                                         ; preds = %if.end56, %if.end46
  %55 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %old_lp, align 8, !dbg !3574
  %56 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %new_lp, align 8, !dbg !3576
  %cmp61 = icmp ne %struct.eh_landing_pad_d* %55, %56, !dbg !3577
  br i1 %cmp61, label %if.then63, label %if.end66, !dbg !3578

if.then63:                                        ; preds = %if.end60
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %throw_stmt, align 8, !dbg !3579
  %call64 = call zeroext i8 @remove_stmt_from_eh_lp(%union.gimple_statement_d* %57), !dbg !3581
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %throw_stmt, align 8, !dbg !3582
  %59 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %new_lp, align 8, !dbg !3583
  %index65 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %59, i32 0, i32 4, !dbg !3584
  %60 = load i32, i32* %index65, align 8, !dbg !3584
  call void @add_stmt_to_eh_lp(%union.gimple_statement_d* %58, i32 %60), !dbg !3585
  br label %if.end66, !dbg !3586

if.end66:                                         ; preds = %if.then63, %if.end60
  ret void, !dbg !3587
}

declare dso_local %struct.edge_def* @ssa_redirect_edge(%struct.edge_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @redirect_eh_dispatch_edge(%union.gimple_statement_d* %stmt, %struct.edge_def* %e, %struct.basic_block_def* %new_bb) #0 !dbg !3588 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %new_bb.addr = alloca %struct.basic_block_def*, align 8
  %new_lab = alloca %union.tree_node*, align 8
  %any_changed = alloca i8, align 1
  %old_bb = alloca %struct.basic_block_def*, align 8
  %r = alloca %struct.eh_region_d*, align 8
  %c = alloca %struct.eh_catch_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3591, metadata !DIExpression()), !dbg !3592
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3593, metadata !DIExpression()), !dbg !3594
  store %struct.basic_block_def* %new_bb, %struct.basic_block_def** %new_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb.addr, metadata !3595, metadata !DIExpression()), !dbg !3596
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_lab, metadata !3597, metadata !DIExpression()), !dbg !3598
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb.addr, align 8, !dbg !3599
  %call = call %union.tree_node* @gimple_block_label(%struct.basic_block_def* %0), !dbg !3600
  store %union.tree_node* %call, %union.tree_node** %new_lab, align 8, !dbg !3598
  call void @llvm.dbg.declare(metadata i8* %any_changed, metadata !3601, metadata !DIExpression()), !dbg !3602
  store i8 0, i8* %any_changed, align 1, !dbg !3602
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %old_bb, metadata !3603, metadata !DIExpression()), !dbg !3604
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r, metadata !3605, metadata !DIExpression()), !dbg !3606
  call void @llvm.dbg.declare(metadata %struct.eh_catch_d** %c, metadata !3607, metadata !DIExpression()), !dbg !3608
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3609
  %call1 = call i32 @gimple_eh_dispatch_region(%union.gimple_statement_d* %1), !dbg !3610
  %call2 = call %struct.eh_region_d* @get_eh_region_from_number(i32 %call1), !dbg !3611
  store %struct.eh_region_d* %call2, %struct.eh_region_d** %r, align 8, !dbg !3612
  %2 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !3613
  %type = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %2, i32 0, i32 4, !dbg !3614
  %3 = load i32, i32* %type, align 4, !dbg !3614
  switch i32 %3, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb5
  ], !dbg !3615

sw.bb:                                            ; preds = %entry
  %4 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !3616
  %u = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %4, i32 0, i32 5, !dbg !3619
  %eh_try = bitcast %union.eh_region_u* %u to %struct.eh_region_u_try*, !dbg !3620
  %first_catch = getelementptr inbounds %struct.eh_region_u_try, %struct.eh_region_u_try* %eh_try, i32 0, i32 0, !dbg !3621
  %5 = load %struct.eh_catch_d*, %struct.eh_catch_d** %first_catch, align 8, !dbg !3621
  store %struct.eh_catch_d* %5, %struct.eh_catch_d** %c, align 8, !dbg !3622
  br label %for.cond, !dbg !3623

for.cond:                                         ; preds = %for.inc, %sw.bb
  %6 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !3624
  %tobool = icmp ne %struct.eh_catch_d* %6, null, !dbg !3626
  br i1 %tobool, label %for.body, label %for.end, !dbg !3626

for.body:                                         ; preds = %for.cond
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3627
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !3627
  %8 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !3627
  %label = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %8, i32 0, i32 4, !dbg !3627
  %9 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !3627
  %call3 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr, %union.tree_node* %9), !dbg !3627
  store %struct.basic_block_def* %call3, %struct.basic_block_def** %old_bb, align 8, !dbg !3629
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %old_bb, align 8, !dbg !3630
  %11 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3632
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %11, i32 0, i32 1, !dbg !3633
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3633
  %cmp = icmp eq %struct.basic_block_def* %10, %12, !dbg !3634
  br i1 %cmp, label %if.then, label %if.end, !dbg !3635

if.then:                                          ; preds = %for.body
  %13 = load %union.tree_node*, %union.tree_node** %new_lab, align 8, !dbg !3636
  %14 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !3638
  %label4 = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %14, i32 0, i32 4, !dbg !3639
  store %union.tree_node* %13, %union.tree_node** %label4, align 8, !dbg !3640
  store i8 1, i8* %any_changed, align 1, !dbg !3641
  br label %if.end, !dbg !3642

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !3643

for.inc:                                          ; preds = %if.end
  %15 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !3644
  %next_catch = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %15, i32 0, i32 0, !dbg !3645
  %16 = load %struct.eh_catch_d*, %struct.eh_catch_d** %next_catch, align 8, !dbg !3645
  store %struct.eh_catch_d* %16, %struct.eh_catch_d** %c, align 8, !dbg !3646
  br label %for.cond, !dbg !3647, !llvm.loop !3648

for.end:                                          ; preds = %for.cond
  br label %sw.epilog, !dbg !3650

sw.bb5:                                           ; preds = %entry
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3651
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !3651
  %18 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !3651
  %u7 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %18, i32 0, i32 5, !dbg !3651
  %allowed = bitcast %union.eh_region_u* %u7 to %struct.eh_region_u_allowed*, !dbg !3651
  %label8 = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed, i32 0, i32 1, !dbg !3651
  %19 = load %union.tree_node*, %union.tree_node** %label8, align 8, !dbg !3651
  %call9 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr6, %union.tree_node* %19), !dbg !3651
  store %struct.basic_block_def* %call9, %struct.basic_block_def** %old_bb, align 8, !dbg !3652
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %old_bb, align 8, !dbg !3653
  %21 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3653
  %dest10 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i32 0, i32 1, !dbg !3653
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %dest10, align 8, !dbg !3653
  %cmp11 = icmp eq %struct.basic_block_def* %20, %22, !dbg !3653
  br i1 %cmp11, label %cond.false, label %cond.true, !dbg !3653

cond.true:                                        ; preds = %sw.bb5
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 2234, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3653
  br label %cond.end, !dbg !3653

cond.false:                                       ; preds = %sw.bb5
  br label %cond.end, !dbg !3653

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3653
  %23 = load %union.tree_node*, %union.tree_node** %new_lab, align 8, !dbg !3654
  %24 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !3655
  %u12 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %24, i32 0, i32 5, !dbg !3656
  %allowed13 = bitcast %union.eh_region_u* %u12 to %struct.eh_region_u_allowed*, !dbg !3657
  %label14 = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed13, i32 0, i32 1, !dbg !3658
  store %union.tree_node* %23, %union.tree_node** %label14, align 8, !dbg !3659
  store i8 1, i8* %any_changed, align 1, !dbg !3660
  br label %sw.epilog, !dbg !3661

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 2240, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3662
  br label %sw.epilog, !dbg !3663

sw.epilog:                                        ; preds = %sw.default, %cond.end, %for.end
  %25 = load i8, i8* %any_changed, align 1, !dbg !3664
  %tobool15 = icmp ne i8 %25, 0, !dbg !3664
  br i1 %tobool15, label %cond.false17, label %cond.true16, !dbg !3664

cond.true16:                                      ; preds = %sw.epilog
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 2243, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3664
  br label %cond.end18, !dbg !3664

cond.false17:                                     ; preds = %sw.epilog
  br label %cond.end18, !dbg !3664

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond19 = phi i32 [ 0, %cond.true16 ], [ 0, %cond.false17 ], !dbg !3664
  ret void, !dbg !3665
}

declare dso_local %union.tree_node* @gimple_block_label(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @operation_could_trap_helper_p(i32 %op, i8 zeroext %fp_operation, i8 zeroext %honor_trapv, i8 zeroext %honor_nans, i8 zeroext %honor_snans, %union.tree_node* %divisor, i8* %handled) #0 !dbg !3666 {
entry:
  %retval = alloca i8, align 1
  %op.addr = alloca i32, align 4
  %fp_operation.addr = alloca i8, align 1
  %honor_trapv.addr = alloca i8, align 1
  %honor_nans.addr = alloca i8, align 1
  %honor_snans.addr = alloca i8, align 1
  %divisor.addr = alloca %union.tree_node*, align 8
  %handled.addr = alloca i8*, align 8
  store i32 %op, i32* %op.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %op.addr, metadata !3670, metadata !DIExpression()), !dbg !3671
  store i8 %fp_operation, i8* %fp_operation.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %fp_operation.addr, metadata !3672, metadata !DIExpression()), !dbg !3673
  store i8 %honor_trapv, i8* %honor_trapv.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %honor_trapv.addr, metadata !3674, metadata !DIExpression()), !dbg !3675
  store i8 %honor_nans, i8* %honor_nans.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %honor_nans.addr, metadata !3676, metadata !DIExpression()), !dbg !3677
  store i8 %honor_snans, i8* %honor_snans.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %honor_snans.addr, metadata !3678, metadata !DIExpression()), !dbg !3679
  store %union.tree_node* %divisor, %union.tree_node** %divisor.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %divisor.addr, metadata !3680, metadata !DIExpression()), !dbg !3681
  store i8* %handled, i8** %handled.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %handled.addr, metadata !3682, metadata !DIExpression()), !dbg !3683
  %0 = load i8*, i8** %handled.addr, align 8, !dbg !3684
  store i8 1, i8* %0, align 1, !dbg !3685
  %1 = load i32, i32* %op.addr, align 4, !dbg !3686
  switch i32 %1, label %sw.default [
    i32 67, label %sw.bb
    i32 68, label %sw.bb
    i32 69, label %sw.bb
    i32 70, label %sw.bb
    i32 76, label %sw.bb
    i32 72, label %sw.bb
    i32 73, label %sw.bb
    i32 74, label %sw.bb
    i32 71, label %sw.bb
    i32 75, label %sw.bb
    i32 97, label %sw.bb12
    i32 98, label %sw.bb12
    i32 99, label %sw.bb12
    i32 100, label %sw.bb12
    i32 110, label %sw.bb12
    i32 101, label %sw.bb13
    i32 102, label %sw.bb13
    i32 103, label %sw.bb13
    i32 104, label %sw.bb13
    i32 105, label %sw.bb13
    i32 106, label %sw.bb13
    i32 107, label %sw.bb13
    i32 108, label %sw.bb13
    i32 109, label %sw.bb13
    i32 113, label %sw.bb14
    i32 77, label %sw.bb14
    i32 79, label %sw.bb15
    i32 82, label %sw.bb15
    i32 124, label %sw.bb15
    i32 63, label %sw.bb19
    i32 64, label %sw.bb19
    i32 65, label %sw.bb19
  ], !dbg !3687

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %2 = load i8, i8* %honor_snans.addr, align 1, !dbg !3688
  %conv = zext i8 %2 to i32, !dbg !3688
  %tobool = icmp ne i32 %conv, 0, !dbg !3688
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !3691

lor.lhs.false:                                    ; preds = %sw.bb
  %3 = load i8, i8* %honor_trapv.addr, align 1, !dbg !3692
  %conv1 = zext i8 %3 to i32, !dbg !3692
  %tobool2 = icmp ne i32 %conv1, 0, !dbg !3692
  br i1 %tobool2, label %if.then, label %if.end, !dbg !3693

if.then:                                          ; preds = %lor.lhs.false, %sw.bb
  store i8 1, i8* %retval, align 1, !dbg !3694
  br label %return, !dbg !3694

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i8, i8* %fp_operation.addr, align 1, !dbg !3695
  %tobool3 = icmp ne i8 %4, 0, !dbg !3695
  br i1 %tobool3, label %if.then4, label %if.end6, !dbg !3697

if.then4:                                         ; preds = %if.end
  %5 = load i32, i32* @flag_trapping_math, align 4, !dbg !3698
  %conv5 = trunc i32 %5 to i8, !dbg !3698
  store i8 %conv5, i8* %retval, align 1, !dbg !3699
  br label %return, !dbg !3699

if.end6:                                          ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %divisor.addr, align 8, !dbg !3700
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3700
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !3700
  %bf.load = load i64, i64* %7, align 8, !dbg !3700
  %bf.lshr = lshr i64 %bf.load, 17, !dbg !3700
  %bf.clear = and i64 %bf.lshr, 1, !dbg !3700
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3700
  %tobool7 = icmp ne i32 %bf.cast, 0, !dbg !3700
  br i1 %tobool7, label %lor.lhs.false8, label %if.then10, !dbg !3702

lor.lhs.false8:                                   ; preds = %if.end6
  %8 = load %union.tree_node*, %union.tree_node** %divisor.addr, align 8, !dbg !3703
  %call = call i32 @integer_zerop(%union.tree_node* %8), !dbg !3704
  %tobool9 = icmp ne i32 %call, 0, !dbg !3704
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !3705

if.then10:                                        ; preds = %lor.lhs.false8, %if.end6
  store i8 1, i8* %retval, align 1, !dbg !3706
  br label %return, !dbg !3706

if.end11:                                         ; preds = %lor.lhs.false8
  store i8 0, i8* %retval, align 1, !dbg !3707
  br label %return, !dbg !3707

sw.bb12:                                          ; preds = %entry, %entry, %entry, %entry, %entry
  %9 = load i8, i8* %honor_nans.addr, align 1, !dbg !3708
  store i8 %9, i8* %retval, align 1, !dbg !3709
  br label %return, !dbg !3709

sw.bb13:                                          ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %10 = load i8, i8* %honor_snans.addr, align 1, !dbg !3710
  store i8 %10, i8* %retval, align 1, !dbg !3711
  br label %return, !dbg !3711

sw.bb14:                                          ; preds = %entry, %entry
  %11 = load i8, i8* %honor_nans.addr, align 1, !dbg !3712
  store i8 %11, i8* %retval, align 1, !dbg !3713
  br label %return, !dbg !3713

sw.bb15:                                          ; preds = %entry, %entry, %entry
  %12 = load i8, i8* %honor_trapv.addr, align 1, !dbg !3714
  %tobool16 = icmp ne i8 %12, 0, !dbg !3714
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !3716

if.then17:                                        ; preds = %sw.bb15
  store i8 1, i8* %retval, align 1, !dbg !3717
  br label %return, !dbg !3717

if.end18:                                         ; preds = %sw.bb15
  store i8 0, i8* %retval, align 1, !dbg !3718
  br label %return, !dbg !3718

sw.bb19:                                          ; preds = %entry, %entry, %entry
  %13 = load i8, i8* %fp_operation.addr, align 1, !dbg !3719
  %conv20 = zext i8 %13 to i32, !dbg !3719
  %tobool21 = icmp ne i32 %conv20, 0, !dbg !3719
  br i1 %tobool21, label %land.lhs.true, label %if.end24, !dbg !3721

land.lhs.true:                                    ; preds = %sw.bb19
  %14 = load i32, i32* @flag_trapping_math, align 4, !dbg !3722
  %tobool22 = icmp ne i32 %14, 0, !dbg !3722
  br i1 %tobool22, label %if.then23, label %if.end24, !dbg !3723

if.then23:                                        ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !3724
  br label %return, !dbg !3724

if.end24:                                         ; preds = %land.lhs.true, %sw.bb19
  %15 = load i8, i8* %honor_trapv.addr, align 1, !dbg !3725
  %tobool25 = icmp ne i8 %15, 0, !dbg !3725
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !3727

if.then26:                                        ; preds = %if.end24
  store i8 1, i8* %retval, align 1, !dbg !3728
  br label %return, !dbg !3728

if.end27:                                         ; preds = %if.end24
  store i8 0, i8* %retval, align 1, !dbg !3729
  br label %return, !dbg !3729

sw.default:                                       ; preds = %entry
  %16 = load i8, i8* %fp_operation.addr, align 1, !dbg !3730
  %conv28 = zext i8 %16 to i32, !dbg !3730
  %tobool29 = icmp ne i32 %conv28, 0, !dbg !3730
  br i1 %tobool29, label %land.lhs.true30, label %if.end33, !dbg !3732

land.lhs.true30:                                  ; preds = %sw.default
  %17 = load i32, i32* @flag_trapping_math, align 4, !dbg !3733
  %tobool31 = icmp ne i32 %17, 0, !dbg !3733
  br i1 %tobool31, label %if.then32, label %if.end33, !dbg !3734

if.then32:                                        ; preds = %land.lhs.true30
  store i8 1, i8* %retval, align 1, !dbg !3735
  br label %return, !dbg !3735

if.end33:                                         ; preds = %land.lhs.true30, %sw.default
  %18 = load i8*, i8** %handled.addr, align 8, !dbg !3736
  store i8 0, i8* %18, align 1, !dbg !3737
  store i8 0, i8* %retval, align 1, !dbg !3738
  br label %return, !dbg !3738

return:                                           ; preds = %if.end33, %if.then32, %if.end27, %if.then26, %if.then23, %if.end18, %if.then17, %sw.bb14, %sw.bb13, %sw.bb12, %if.end11, %if.then10, %if.then4, %if.then
  %19 = load i8, i8* %retval, align 1, !dbg !3739
  ret i8 %19, !dbg !3739
}

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @operation_could_trap_p(i32 %op, i8 zeroext %fp_operation, i8 zeroext %honor_trapv, %union.tree_node* %divisor) #0 !dbg !3740 {
entry:
  %retval = alloca i8, align 1
  %op.addr = alloca i32, align 4
  %fp_operation.addr = alloca i8, align 1
  %honor_trapv.addr = alloca i8, align 1
  %divisor.addr = alloca %union.tree_node*, align 8
  %honor_nans = alloca i8, align 1
  %honor_snans = alloca i8, align 1
  %handled = alloca i8, align 1
  store i32 %op, i32* %op.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %op.addr, metadata !3743, metadata !DIExpression()), !dbg !3744
  store i8 %fp_operation, i8* %fp_operation.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %fp_operation.addr, metadata !3745, metadata !DIExpression()), !dbg !3746
  store i8 %honor_trapv, i8* %honor_trapv.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %honor_trapv.addr, metadata !3747, metadata !DIExpression()), !dbg !3748
  store %union.tree_node* %divisor, %union.tree_node** %divisor.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %divisor.addr, metadata !3749, metadata !DIExpression()), !dbg !3750
  call void @llvm.dbg.declare(metadata i8* %honor_nans, metadata !3751, metadata !DIExpression()), !dbg !3752
  %0 = load i8, i8* %fp_operation.addr, align 1, !dbg !3753
  %conv = zext i8 %0 to i32, !dbg !3753
  %tobool = icmp ne i32 %conv, 0, !dbg !3753
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !3754

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @flag_trapping_math, align 4, !dbg !3755
  %tobool1 = icmp ne i32 %1, 0, !dbg !3755
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !3756

land.rhs:                                         ; preds = %land.lhs.true
  %2 = load i32, i32* @flag_finite_math_only, align 4, !dbg !3757
  %tobool2 = icmp ne i32 %2, 0, !dbg !3758
  %lnot = xor i1 %tobool2, true, !dbg !3758
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %3 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %lnot, %land.rhs ], !dbg !3759
  %land.ext = zext i1 %3 to i32, !dbg !3756
  %conv3 = trunc i32 %land.ext to i8, !dbg !3760
  store i8 %conv3, i8* %honor_nans, align 1, !dbg !3752
  call void @llvm.dbg.declare(metadata i8* %honor_snans, metadata !3761, metadata !DIExpression()), !dbg !3762
  %4 = load i8, i8* %fp_operation.addr, align 1, !dbg !3763
  %conv4 = zext i8 %4 to i32, !dbg !3763
  %tobool5 = icmp ne i32 %conv4, 0, !dbg !3763
  br i1 %tobool5, label %land.rhs6, label %land.end8, !dbg !3764

land.rhs6:                                        ; preds = %land.end
  %5 = load i32, i32* @flag_signaling_nans, align 4, !dbg !3765
  %cmp = icmp ne i32 %5, 0, !dbg !3766
  br label %land.end8

land.end8:                                        ; preds = %land.rhs6, %land.end
  %6 = phi i1 [ false, %land.end ], [ %cmp, %land.rhs6 ], !dbg !3759
  %land.ext9 = zext i1 %6 to i32, !dbg !3764
  %conv10 = trunc i32 %land.ext9 to i8, !dbg !3763
  store i8 %conv10, i8* %honor_snans, align 1, !dbg !3762
  call void @llvm.dbg.declare(metadata i8* %handled, metadata !3767, metadata !DIExpression()), !dbg !3768
  %7 = load i32, i32* %op.addr, align 4, !dbg !3769
  %idxprom = sext i32 %7 to i64, !dbg !3769
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3769
  %8 = load i32, i32* %arrayidx, align 4, !dbg !3769
  %cmp11 = icmp ne i32 %8, 5, !dbg !3771
  br i1 %cmp11, label %land.lhs.true13, label %if.end, !dbg !3772

land.lhs.true13:                                  ; preds = %land.end8
  %9 = load i32, i32* %op.addr, align 4, !dbg !3773
  %idxprom14 = sext i32 %9 to i64, !dbg !3773
  %arrayidx15 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom14, !dbg !3773
  %10 = load i32, i32* %arrayidx15, align 4, !dbg !3773
  %cmp16 = icmp ne i32 %10, 6, !dbg !3774
  br i1 %cmp16, label %land.lhs.true18, label %if.end, !dbg !3775

land.lhs.true18:                                  ; preds = %land.lhs.true13
  %11 = load i32, i32* %op.addr, align 4, !dbg !3776
  %idxprom19 = sext i32 %11 to i64, !dbg !3776
  %arrayidx20 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom19, !dbg !3776
  %12 = load i32, i32* %arrayidx20, align 4, !dbg !3776
  %cmp21 = icmp ne i32 %12, 7, !dbg !3777
  br i1 %cmp21, label %if.then, label %if.end, !dbg !3778

if.then:                                          ; preds = %land.lhs.true18
  store i8 0, i8* %retval, align 1, !dbg !3779
  br label %return, !dbg !3779

if.end:                                           ; preds = %land.lhs.true18, %land.lhs.true13, %land.end8
  %13 = load i32, i32* %op.addr, align 4, !dbg !3780
  %14 = load i8, i8* %fp_operation.addr, align 1, !dbg !3781
  %15 = load i8, i8* %honor_trapv.addr, align 1, !dbg !3782
  %16 = load i8, i8* %honor_nans, align 1, !dbg !3783
  %17 = load i8, i8* %honor_snans, align 1, !dbg !3784
  %18 = load %union.tree_node*, %union.tree_node** %divisor.addr, align 8, !dbg !3785
  %call = call zeroext i8 @operation_could_trap_helper_p(i32 %13, i8 zeroext %14, i8 zeroext %15, i8 zeroext %16, i8 zeroext %17, %union.tree_node* %18, i8* %handled), !dbg !3786
  store i8 %call, i8* %retval, align 1, !dbg !3787
  br label %return, !dbg !3787

return:                                           ; preds = %if.end, %if.then
  %19 = load i8, i8* %retval, align 1, !dbg !3788
  ret i8 %19, !dbg !3788
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @tree_could_trap_p(%union.tree_node* %expr) #0 !dbg !3789 {
entry:
  %retval = alloca i8, align 1
  %expr.addr = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %fp_operation = alloca i8, align 1
  %honor_trapv = alloca i8, align 1
  %t = alloca %union.tree_node*, align 8
  %base = alloca %union.tree_node*, align 8
  %div = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !3792, metadata !DIExpression()), !dbg !3793
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3794, metadata !DIExpression()), !dbg !3795
  call void @llvm.dbg.declare(metadata i8* %fp_operation, metadata !3796, metadata !DIExpression()), !dbg !3797
  store i8 0, i8* %fp_operation, align 1, !dbg !3797
  call void @llvm.dbg.declare(metadata i8* %honor_trapv, metadata !3798, metadata !DIExpression()), !dbg !3799
  store i8 0, i8* %honor_trapv, align 1, !dbg !3799
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !3800, metadata !DIExpression()), !dbg !3801
  call void @llvm.dbg.declare(metadata %union.tree_node** %base, metadata !3802, metadata !DIExpression()), !dbg !3803
  call void @llvm.dbg.declare(metadata %union.tree_node** %div, metadata !3804, metadata !DIExpression()), !dbg !3805
  store %union.tree_node* null, %union.tree_node** %div, align 8, !dbg !3805
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3806
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !3806
  br i1 %tobool, label %if.end, label %if.then, !dbg !3808

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3809
  br label %return, !dbg !3809

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3810
  %base1 = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !3810
  %2 = bitcast %struct.tree_base* %base1 to i64*, !dbg !3810
  %bf.load = load i64, i64* %2, align 8, !dbg !3810
  %bf.clear = and i64 %bf.load, 65535, !dbg !3810
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3810
  store i32 %bf.cast, i32* %code, align 4, !dbg !3811
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3812
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !3812
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3812
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3812
  store %union.tree_node* %4, %union.tree_node** %t, align 8, !dbg !3813
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3814
  %tobool2 = icmp ne %union.tree_node* %5, null, !dbg !3814
  br i1 %tobool2, label %if.then3, label %if.end114, !dbg !3816

if.then3:                                         ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3817
  %base4 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !3817
  %7 = bitcast %struct.tree_base* %base4 to i64*, !dbg !3817
  %bf.load5 = load i64, i64* %7, align 8, !dbg !3817
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !3817
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !3817
  %idxprom = sext i32 %bf.cast7 to i64, !dbg !3817
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3817
  %8 = load i32, i32* %arrayidx, align 4, !dbg !3817
  %cmp = icmp eq i32 %8, 5, !dbg !3817
  br i1 %cmp, label %if.then8, label %if.else, !dbg !3820

if.then8:                                         ; preds = %if.then3
  %9 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3821
  %exp = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !3821
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3821
  %arrayidx9 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3821
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !3821
  %common10 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !3821
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2, !dbg !3821
  %11 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !3821
  %base12 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !3821
  %12 = bitcast %struct.tree_base* %base12 to i64*, !dbg !3821
  %bf.load13 = load i64, i64* %12, align 8, !dbg !3821
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !3821
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !3821
  %cmp16 = icmp eq i32 %bf.cast15, 9, !dbg !3821
  br i1 %cmp16, label %lor.end, label %lor.rhs, !dbg !3821

lor.rhs:                                          ; preds = %if.then8
  %13 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3821
  %exp17 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !3821
  %operands18 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp17, i32 0, i32 3, !dbg !3821
  %arrayidx19 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands18, i64 0, i64 0, !dbg !3821
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx19, align 8, !dbg !3821
  %common20 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !3821
  %type21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2, !dbg !3821
  %15 = load %union.tree_node*, %union.tree_node** %type21, align 8, !dbg !3821
  %base22 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !3821
  %16 = bitcast %struct.tree_base* %base22 to i64*, !dbg !3821
  %bf.load23 = load i64, i64* %16, align 8, !dbg !3821
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !3821
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !3821
  %cmp26 = icmp eq i32 %bf.cast25, 13, !dbg !3821
  br i1 %cmp26, label %land.rhs, label %lor.lhs.false, !dbg !3821

lor.lhs.false:                                    ; preds = %lor.rhs
  %17 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3821
  %exp27 = bitcast %union.tree_node* %17 to %struct.tree_exp*, !dbg !3821
  %operands28 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp27, i32 0, i32 3, !dbg !3821
  %arrayidx29 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands28, i64 0, i64 0, !dbg !3821
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx29, align 8, !dbg !3821
  %common30 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !3821
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !3821
  %19 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !3821
  %base32 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !3821
  %20 = bitcast %struct.tree_base* %base32 to i64*, !dbg !3821
  %bf.load33 = load i64, i64* %20, align 8, !dbg !3821
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !3821
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !3821
  %cmp36 = icmp eq i32 %bf.cast35, 14, !dbg !3821
  br i1 %cmp36, label %land.rhs, label %land.end, !dbg !3821

land.rhs:                                         ; preds = %lor.lhs.false, %lor.rhs
  %21 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3821
  %exp37 = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !3821
  %operands38 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp37, i32 0, i32 3, !dbg !3821
  %arrayidx39 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands38, i64 0, i64 0, !dbg !3821
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx39, align 8, !dbg !3821
  %common40 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !3821
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !3821
  %23 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !3821
  %common42 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !3821
  %type43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 2, !dbg !3821
  %24 = load %union.tree_node*, %union.tree_node** %type43, align 8, !dbg !3821
  %base44 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !3821
  %25 = bitcast %struct.tree_base* %base44 to i64*, !dbg !3821
  %bf.load45 = load i64, i64* %25, align 8, !dbg !3821
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !3821
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !3821
  %cmp48 = icmp eq i32 %bf.cast47, 9, !dbg !3821
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false
  %26 = phi i1 [ false, %lor.lhs.false ], [ %cmp48, %land.rhs ], !dbg !3822
  br label %lor.end, !dbg !3821

lor.end:                                          ; preds = %land.end, %if.then8
  %27 = phi i1 [ true, %if.then8 ], [ %26, %land.end ]
  %lor.ext = zext i1 %27 to i32, !dbg !3821
  %conv = trunc i32 %lor.ext to i8, !dbg !3821
  store i8 %conv, i8* %fp_operation, align 1, !dbg !3823
  br label %if.end82, !dbg !3824

if.else:                                          ; preds = %if.then3
  %28 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3825
  %base49 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !3825
  %29 = bitcast %struct.tree_base* %base49 to i64*, !dbg !3825
  %bf.load50 = load i64, i64* %29, align 8, !dbg !3825
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !3825
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !3825
  %cmp53 = icmp eq i32 %bf.cast52, 9, !dbg !3825
  br i1 %cmp53, label %lor.end79, label %lor.rhs55, !dbg !3825

lor.rhs55:                                        ; preds = %if.else
  %30 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3825
  %base56 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !3825
  %31 = bitcast %struct.tree_base* %base56 to i64*, !dbg !3825
  %bf.load57 = load i64, i64* %31, align 8, !dbg !3825
  %bf.clear58 = and i64 %bf.load57, 65535, !dbg !3825
  %bf.cast59 = trunc i64 %bf.clear58 to i32, !dbg !3825
  %cmp60 = icmp eq i32 %bf.cast59, 13, !dbg !3825
  br i1 %cmp60, label %land.rhs69, label %lor.lhs.false62, !dbg !3825

lor.lhs.false62:                                  ; preds = %lor.rhs55
  %32 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3825
  %base63 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !3825
  %33 = bitcast %struct.tree_base* %base63 to i64*, !dbg !3825
  %bf.load64 = load i64, i64* %33, align 8, !dbg !3825
  %bf.clear65 = and i64 %bf.load64, 65535, !dbg !3825
  %bf.cast66 = trunc i64 %bf.clear65 to i32, !dbg !3825
  %cmp67 = icmp eq i32 %bf.cast66, 14, !dbg !3825
  br i1 %cmp67, label %land.rhs69, label %land.end78, !dbg !3825

land.rhs69:                                       ; preds = %lor.lhs.false62, %lor.rhs55
  %34 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3825
  %common70 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !3825
  %type71 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common70, i32 0, i32 2, !dbg !3825
  %35 = load %union.tree_node*, %union.tree_node** %type71, align 8, !dbg !3825
  %base72 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !3825
  %36 = bitcast %struct.tree_base* %base72 to i64*, !dbg !3825
  %bf.load73 = load i64, i64* %36, align 8, !dbg !3825
  %bf.clear74 = and i64 %bf.load73, 65535, !dbg !3825
  %bf.cast75 = trunc i64 %bf.clear74 to i32, !dbg !3825
  %cmp76 = icmp eq i32 %bf.cast75, 9, !dbg !3825
  br label %land.end78

land.end78:                                       ; preds = %land.rhs69, %lor.lhs.false62
  %37 = phi i1 [ false, %lor.lhs.false62 ], [ %cmp76, %land.rhs69 ], !dbg !3822
  br label %lor.end79, !dbg !3825

lor.end79:                                        ; preds = %land.end78, %if.else
  %38 = phi i1 [ true, %if.else ], [ %37, %land.end78 ]
  %lor.ext80 = zext i1 %38 to i32, !dbg !3825
  %conv81 = trunc i32 %lor.ext80 to i8, !dbg !3825
  store i8 %conv81, i8* %fp_operation, align 1, !dbg !3826
  br label %if.end82

if.end82:                                         ; preds = %lor.end79, %lor.end
  %39 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3827
  %base83 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !3827
  %40 = bitcast %struct.tree_base* %base83 to i64*, !dbg !3827
  %bf.load84 = load i64, i64* %40, align 8, !dbg !3827
  %bf.clear85 = and i64 %bf.load84, 65535, !dbg !3827
  %bf.cast86 = trunc i64 %bf.clear85 to i32, !dbg !3827
  %cmp87 = icmp eq i32 %bf.cast86, 6, !dbg !3827
  br i1 %cmp87, label %land.rhs103, label %lor.lhs.false89, !dbg !3827

lor.lhs.false89:                                  ; preds = %if.end82
  %41 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3827
  %base90 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !3827
  %42 = bitcast %struct.tree_base* %base90 to i64*, !dbg !3827
  %bf.load91 = load i64, i64* %42, align 8, !dbg !3827
  %bf.clear92 = and i64 %bf.load91, 65535, !dbg !3827
  %bf.cast93 = trunc i64 %bf.clear92 to i32, !dbg !3827
  %cmp94 = icmp eq i32 %bf.cast93, 7, !dbg !3827
  br i1 %cmp94, label %land.rhs103, label %lor.lhs.false96, !dbg !3827

lor.lhs.false96:                                  ; preds = %lor.lhs.false89
  %43 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3827
  %base97 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !3827
  %44 = bitcast %struct.tree_base* %base97 to i64*, !dbg !3827
  %bf.load98 = load i64, i64* %44, align 8, !dbg !3827
  %bf.clear99 = and i64 %bf.load98, 65535, !dbg !3827
  %bf.cast100 = trunc i64 %bf.clear99 to i32, !dbg !3827
  %cmp101 = icmp eq i32 %bf.cast100, 8, !dbg !3827
  br i1 %cmp101, label %land.rhs103, label %land.end112, !dbg !3828

land.rhs103:                                      ; preds = %lor.lhs.false96, %lor.lhs.false89, %if.end82
  %45 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3829
  %base104 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !3829
  %46 = bitcast %struct.tree_base* %base104 to i64*, !dbg !3829
  %bf.load105 = load i64, i64* %46, align 8, !dbg !3829
  %bf.lshr = lshr i64 %bf.load105, 21, !dbg !3829
  %bf.clear106 = and i64 %bf.lshr, 1, !dbg !3829
  %bf.cast107 = trunc i64 %bf.clear106 to i32, !dbg !3829
  %tobool108 = icmp ne i32 %bf.cast107, 0, !dbg !3829
  br i1 %tobool108, label %land.end111, label %land.rhs109, !dbg !3829

land.rhs109:                                      ; preds = %land.rhs103
  %47 = load i32, i32* @flag_trapv, align 4, !dbg !3829
  %tobool110 = icmp ne i32 %47, 0, !dbg !3829
  br label %land.end111

land.end111:                                      ; preds = %land.rhs109, %land.rhs103
  %48 = phi i1 [ false, %land.rhs103 ], [ %tobool110, %land.rhs109 ], !dbg !3830
  br label %land.end112

land.end112:                                      ; preds = %land.end111, %lor.lhs.false96
  %49 = phi i1 [ false, %lor.lhs.false96 ], [ %48, %land.end111 ], !dbg !3830
  %land.ext = zext i1 %49 to i32, !dbg !3828
  %conv113 = trunc i32 %land.ext to i8, !dbg !3827
  store i8 %conv113, i8* %honor_trapv, align 1, !dbg !3831
  br label %if.end114, !dbg !3832

if.end114:                                        ; preds = %land.end112, %if.end
  %50 = load i32, i32* %code, align 4, !dbg !3833
  %idxprom115 = sext i32 %50 to i64, !dbg !3833
  %arrayidx116 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom115, !dbg !3833
  %51 = load i32, i32* %arrayidx116, align 4, !dbg !3833
  %cmp117 = icmp eq i32 %51, 7, !dbg !3835
  br i1 %cmp117, label %if.then119, label %if.end123, !dbg !3836

if.then119:                                       ; preds = %if.end114
  %52 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3837
  %exp120 = bitcast %union.tree_node* %52 to %struct.tree_exp*, !dbg !3837
  %operands121 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp120, i32 0, i32 3, !dbg !3837
  %arrayidx122 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands121, i64 0, i64 1, !dbg !3837
  %53 = load %union.tree_node*, %union.tree_node** %arrayidx122, align 8, !dbg !3837
  store %union.tree_node* %53, %union.tree_node** %div, align 8, !dbg !3838
  br label %if.end123, !dbg !3839

if.end123:                                        ; preds = %if.then119, %if.end114
  %54 = load i32, i32* %code, align 4, !dbg !3840
  %55 = load i8, i8* %fp_operation, align 1, !dbg !3842
  %56 = load i8, i8* %honor_trapv, align 1, !dbg !3843
  %57 = load %union.tree_node*, %union.tree_node** %div, align 8, !dbg !3844
  %call = call zeroext i8 @operation_could_trap_p(i32 %54, i8 zeroext %55, i8 zeroext %56, %union.tree_node* %57), !dbg !3845
  %tobool124 = icmp ne i8 %call, 0, !dbg !3845
  br i1 %tobool124, label %if.then125, label %if.end126, !dbg !3846

if.then125:                                       ; preds = %if.end123
  store i8 1, i8* %retval, align 1, !dbg !3847
  br label %return, !dbg !3847

if.end126:                                        ; preds = %if.end123
  br label %restart, !dbg !3848

restart:                                          ; preds = %sw.bb134, %sw.bb, %if.end126
  call void @llvm.dbg.label(metadata !3849), !dbg !3850
  %58 = load i32, i32* %code, align 4, !dbg !3851
  switch i32 %58, label %sw.default [
    i32 152, label %sw.bb
    i32 41, label %sw.bb134
    i32 43, label %sw.bb134
    i32 44, label %sw.bb134
    i32 42, label %sw.bb134
    i32 118, label %sw.bb134
    i32 150, label %sw.bb134
    i32 46, label %sw.bb142
    i32 45, label %sw.bb161
    i32 47, label %sw.bb182
    i32 48, label %sw.bb182
    i32 49, label %sw.bb182
    i32 140, label %sw.bb192
    i32 59, label %sw.bb199
  ], !dbg !3852

sw.bb:                                            ; preds = %restart
  %59 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3853
  %exp127 = bitcast %union.tree_node* %59 to %struct.tree_exp*, !dbg !3853
  %operands128 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp127, i32 0, i32 3, !dbg !3853
  %arrayidx129 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands128, i64 0, i64 5, !dbg !3853
  %60 = load %union.tree_node*, %union.tree_node** %arrayidx129, align 8, !dbg !3853
  store %union.tree_node* %60, %union.tree_node** %expr.addr, align 8, !dbg !3855
  %61 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3856
  %base130 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !3856
  %62 = bitcast %struct.tree_base* %base130 to i64*, !dbg !3856
  %bf.load131 = load i64, i64* %62, align 8, !dbg !3856
  %bf.clear132 = and i64 %bf.load131, 65535, !dbg !3856
  %bf.cast133 = trunc i64 %bf.clear132 to i32, !dbg !3856
  store i32 %bf.cast133, i32* %code, align 4, !dbg !3857
  br label %restart, !dbg !3858

sw.bb134:                                         ; preds = %restart, %restart, %restart, %restart, %restart, %restart
  %63 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3859
  %exp135 = bitcast %union.tree_node* %63 to %struct.tree_exp*, !dbg !3859
  %operands136 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp135, i32 0, i32 3, !dbg !3859
  %arrayidx137 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands136, i64 0, i64 0, !dbg !3859
  %64 = load %union.tree_node*, %union.tree_node** %arrayidx137, align 8, !dbg !3859
  store %union.tree_node* %64, %union.tree_node** %expr.addr, align 8, !dbg !3860
  %65 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3861
  %base138 = bitcast %union.tree_node* %65 to %struct.tree_base*, !dbg !3861
  %66 = bitcast %struct.tree_base* %base138 to i64*, !dbg !3861
  %bf.load139 = load i64, i64* %66, align 8, !dbg !3861
  %bf.clear140 = and i64 %bf.load139, 65535, !dbg !3861
  %bf.cast141 = trunc i64 %bf.clear140 to i32, !dbg !3861
  store i32 %bf.cast141, i32* %code, align 4, !dbg !3862
  br label %restart, !dbg !3863

sw.bb142:                                         ; preds = %restart
  %67 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3864
  %exp143 = bitcast %union.tree_node* %67 to %struct.tree_exp*, !dbg !3864
  %operands144 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp143, i32 0, i32 3, !dbg !3864
  %arrayidx145 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands144, i64 0, i64 0, !dbg !3864
  %68 = load %union.tree_node*, %union.tree_node** %arrayidx145, align 8, !dbg !3864
  store %union.tree_node* %68, %union.tree_node** %base, align 8, !dbg !3865
  %69 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3866
  %call146 = call zeroext i8 @tree_could_trap_p(%union.tree_node* %69), !dbg !3868
  %tobool147 = icmp ne i8 %call146, 0, !dbg !3868
  br i1 %tobool147, label %if.then148, label %if.end149, !dbg !3869

if.then148:                                       ; preds = %sw.bb142
  store i8 1, i8* %retval, align 1, !dbg !3870
  br label %return, !dbg !3870

if.end149:                                        ; preds = %sw.bb142
  %70 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3871
  %base150 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !3871
  %71 = bitcast %struct.tree_base* %base150 to i64*, !dbg !3871
  %bf.load151 = load i64, i64* %71, align 8, !dbg !3871
  %bf.lshr152 = lshr i64 %bf.load151, 25, !dbg !3871
  %bf.clear153 = and i64 %bf.lshr152, 1, !dbg !3871
  %bf.cast154 = trunc i64 %bf.clear153 to i32, !dbg !3871
  %tobool155 = icmp ne i32 %bf.cast154, 0, !dbg !3871
  br i1 %tobool155, label %if.then156, label %if.end157, !dbg !3873

if.then156:                                       ; preds = %if.end149
  store i8 0, i8* %retval, align 1, !dbg !3874
  br label %return, !dbg !3874

if.end157:                                        ; preds = %if.end149
  %72 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3875
  %call158 = call zeroext i8 @range_in_array_bounds_p(%union.tree_node* %72), !dbg !3876
  %tobool159 = icmp ne i8 %call158, 0, !dbg !3877
  %lnot = xor i1 %tobool159, true, !dbg !3877
  %lnot.ext = zext i1 %lnot to i32, !dbg !3877
  %conv160 = trunc i32 %lnot.ext to i8, !dbg !3877
  store i8 %conv160, i8* %retval, align 1, !dbg !3878
  br label %return, !dbg !3878

sw.bb161:                                         ; preds = %restart
  %73 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3879
  %exp162 = bitcast %union.tree_node* %73 to %struct.tree_exp*, !dbg !3879
  %operands163 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp162, i32 0, i32 3, !dbg !3879
  %arrayidx164 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands163, i64 0, i64 0, !dbg !3879
  %74 = load %union.tree_node*, %union.tree_node** %arrayidx164, align 8, !dbg !3879
  store %union.tree_node* %74, %union.tree_node** %base, align 8, !dbg !3880
  %75 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !3881
  %call165 = call zeroext i8 @tree_could_trap_p(%union.tree_node* %75), !dbg !3883
  %tobool166 = icmp ne i8 %call165, 0, !dbg !3883
  br i1 %tobool166, label %if.then167, label %if.end168, !dbg !3884

if.then167:                                       ; preds = %sw.bb161
  store i8 1, i8* %retval, align 1, !dbg !3885
  br label %return, !dbg !3885

if.end168:                                        ; preds = %sw.bb161
  %76 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3886
  %base169 = bitcast %union.tree_node* %76 to %struct.tree_base*, !dbg !3886
  %77 = bitcast %struct.tree_base* %base169 to i64*, !dbg !3886
  %bf.load170 = load i64, i64* %77, align 8, !dbg !3886
  %bf.lshr171 = lshr i64 %bf.load170, 25, !dbg !3886
  %bf.clear172 = and i64 %bf.lshr171, 1, !dbg !3886
  %bf.cast173 = trunc i64 %bf.clear172 to i32, !dbg !3886
  %tobool174 = icmp ne i32 %bf.cast173, 0, !dbg !3886
  br i1 %tobool174, label %if.then175, label %if.end176, !dbg !3888

if.then175:                                       ; preds = %if.end168
  store i8 0, i8* %retval, align 1, !dbg !3889
  br label %return, !dbg !3889

if.end176:                                        ; preds = %if.end168
  %78 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3890
  %call177 = call zeroext i8 @in_array_bounds_p(%union.tree_node* %78), !dbg !3891
  %tobool178 = icmp ne i8 %call177, 0, !dbg !3892
  %lnot179 = xor i1 %tobool178, true, !dbg !3892
  %lnot.ext180 = zext i1 %lnot179 to i32, !dbg !3892
  %conv181 = trunc i32 %lnot.ext180 to i8, !dbg !3892
  store i8 %conv181, i8* %retval, align 1, !dbg !3893
  br label %return, !dbg !3893

sw.bb182:                                         ; preds = %restart, %restart, %restart
  %79 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3894
  %base183 = bitcast %union.tree_node* %79 to %struct.tree_base*, !dbg !3894
  %80 = bitcast %struct.tree_base* %base183 to i64*, !dbg !3894
  %bf.load184 = load i64, i64* %80, align 8, !dbg !3894
  %bf.lshr185 = lshr i64 %bf.load184, 25, !dbg !3894
  %bf.clear186 = and i64 %bf.lshr185, 1, !dbg !3894
  %bf.cast187 = trunc i64 %bf.clear186 to i32, !dbg !3894
  %tobool188 = icmp ne i32 %bf.cast187, 0, !dbg !3895
  %lnot189 = xor i1 %tobool188, true, !dbg !3895
  %lnot.ext190 = zext i1 %lnot189 to i32, !dbg !3895
  %conv191 = trunc i32 %lnot.ext190 to i8, !dbg !3895
  store i8 %conv191, i8* %retval, align 1, !dbg !3896
  br label %return, !dbg !3896

sw.bb192:                                         ; preds = %restart
  %81 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3897
  %base193 = bitcast %union.tree_node* %81 to %struct.tree_base*, !dbg !3897
  %82 = bitcast %struct.tree_base* %base193 to i64*, !dbg !3897
  %bf.load194 = load i64, i64* %82, align 8, !dbg !3897
  %bf.lshr195 = lshr i64 %bf.load194, 19, !dbg !3897
  %bf.clear196 = and i64 %bf.lshr195, 1, !dbg !3897
  %bf.cast197 = trunc i64 %bf.clear196 to i32, !dbg !3897
  %conv198 = trunc i32 %bf.cast197 to i8, !dbg !3897
  store i8 %conv198, i8* %retval, align 1, !dbg !3898
  br label %return, !dbg !3898

sw.bb199:                                         ; preds = %restart
  %83 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3899
  %call200 = call %union.tree_node* @get_callee_fndecl(%union.tree_node* %83), !dbg !3900
  store %union.tree_node* %call200, %union.tree_node** %t, align 8, !dbg !3901
  %84 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3902
  %tobool201 = icmp ne %union.tree_node* %84, null, !dbg !3902
  br i1 %tobool201, label %lor.lhs.false202, label %if.then216, !dbg !3904

lor.lhs.false202:                                 ; preds = %sw.bb199
  %85 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3905
  %base203 = bitcast %union.tree_node* %85 to %struct.tree_base*, !dbg !3905
  %86 = bitcast %struct.tree_base* %base203 to i64*, !dbg !3905
  %bf.load204 = load i64, i64* %86, align 8, !dbg !3905
  %bf.clear205 = and i64 %bf.load204, 65535, !dbg !3905
  %bf.cast206 = trunc i64 %bf.clear205 to i32, !dbg !3905
  %idxprom207 = sext i32 %bf.cast206 to i64, !dbg !3905
  %arrayidx208 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom207, !dbg !3905
  %87 = load i32, i32* %arrayidx208, align 4, !dbg !3905
  %cmp209 = icmp eq i32 %87, 3, !dbg !3905
  br i1 %cmp209, label %lor.lhs.false211, label %if.then216, !dbg !3906

lor.lhs.false211:                                 ; preds = %lor.lhs.false202
  %88 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3907
  %decl_with_vis = bitcast %union.tree_node* %88 to %struct.tree_decl_with_vis*, !dbg !3907
  %weak_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !3907
  %89 = bitcast i24* %weak_flag to i32*, !dbg !3907
  %bf.load212 = load i32, i32* %89, align 8, !dbg !3907
  %bf.lshr213 = lshr i32 %bf.load212, 7, !dbg !3907
  %bf.clear214 = and i32 %bf.lshr213, 1, !dbg !3907
  %tobool215 = icmp ne i32 %bf.clear214, 0, !dbg !3907
  br i1 %tobool215, label %if.then216, label %if.end217, !dbg !3908

if.then216:                                       ; preds = %lor.lhs.false211, %lor.lhs.false202, %sw.bb199
  store i8 1, i8* %retval, align 1, !dbg !3909
  br label %return, !dbg !3909

if.end217:                                        ; preds = %lor.lhs.false211
  store i8 0, i8* %retval, align 1, !dbg !3910
  br label %return, !dbg !3910

sw.default:                                       ; preds = %restart
  store i8 0, i8* %retval, align 1, !dbg !3911
  br label %return, !dbg !3911

return:                                           ; preds = %sw.default, %if.end217, %if.then216, %sw.bb192, %sw.bb182, %if.end176, %if.then175, %if.then167, %if.end157, %if.then156, %if.then148, %if.then125, %if.then
  %90 = load i8, i8* %retval, align 1, !dbg !3912
  ret i8 %90, !dbg !3912
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local zeroext i8 @range_in_array_bounds_p(%union.tree_node*) #2

declare dso_local zeroext i8 @in_array_bounds_p(%union.tree_node*) #2

declare dso_local %union.tree_node* @get_callee_fndecl(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %stmt) #0 !dbg !3913 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3914, metadata !DIExpression()), !dbg !3915
  %0 = load i32, i32* @flag_exceptions, align 4, !dbg !3916
  %tobool = icmp ne i32 %0, 0, !dbg !3916
  br i1 %tobool, label %if.end, label %if.then, !dbg !3918

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3919
  br label %return, !dbg !3919

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3920
  %call = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !3921
  switch i32 %call, label %sw.default [
    i32 14, label %sw.bb
    i32 8, label %sw.bb1
    i32 6, label %sw.bb4
    i32 1, label %sw.bb4
    i32 7, label %sw.bb9
  ], !dbg !3922

sw.bb:                                            ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !3923
  br label %return, !dbg !3923

sw.bb1:                                           ; preds = %if.end
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3925
  %call2 = call zeroext i8 @gimple_call_nothrow_p(%union.gimple_statement_d* %2), !dbg !3926
  %tobool3 = icmp ne i8 %call2, 0, !dbg !3927
  %lnot = xor i1 %tobool3, true, !dbg !3927
  %lnot.ext = zext i1 %lnot to i32, !dbg !3927
  %conv = trunc i32 %lnot.ext to i8, !dbg !3927
  store i8 %conv, i8* %retval, align 1, !dbg !3928
  br label %return, !dbg !3928

sw.bb4:                                           ; preds = %if.end, %if.end
  %3 = load i32, i32* @flag_non_call_exceptions, align 4, !dbg !3929
  %tobool5 = icmp ne i32 %3, 0, !dbg !3929
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !3931

if.then6:                                         ; preds = %sw.bb4
  store i8 0, i8* %retval, align 1, !dbg !3932
  br label %return, !dbg !3932

if.end7:                                          ; preds = %sw.bb4
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3933
  %call8 = call zeroext i8 @stmt_could_throw_1_p(%union.gimple_statement_d* %4), !dbg !3934
  store i8 %call8, i8* %retval, align 1, !dbg !3935
  br label %return, !dbg !3935

sw.bb9:                                           ; preds = %if.end
  %5 = load i32, i32* @flag_non_call_exceptions, align 4, !dbg !3936
  %tobool10 = icmp ne i32 %5, 0, !dbg !3936
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !3938

if.then11:                                        ; preds = %sw.bb9
  store i8 0, i8* %retval, align 1, !dbg !3939
  br label %return, !dbg !3939

if.end12:                                         ; preds = %sw.bb9
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3940
  %call13 = call zeroext i8 @gimple_asm_volatile_p(%union.gimple_statement_d* %6), !dbg !3941
  store i8 %call13, i8* %retval, align 1, !dbg !3942
  br label %return, !dbg !3942

sw.default:                                       ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !3943
  br label %return, !dbg !3943

return:                                           ; preds = %sw.default, %if.end12, %if.then11, %if.end7, %if.then6, %sw.bb1, %sw.bb, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !3944
  ret i8 %7, !dbg !3944
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !3945 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3948, metadata !DIExpression()), !dbg !3949
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3950
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3951
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3952
  %bf.load = load i32, i32* %1, align 8, !dbg !3952
  %bf.clear = and i32 %bf.load, 255, !dbg !3952
  ret i32 %bf.clear, !dbg !3953
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_nothrow_p(%union.gimple_statement_d* %s) #0 !dbg !3954 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !3955, metadata !DIExpression()), !dbg !3956
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3957
  %call = call i32 @gimple_call_flags(%union.gimple_statement_d* %0), !dbg !3958
  %and = and i32 %call, 64, !dbg !3959
  %cmp = icmp ne i32 %and, 0, !dbg !3960
  %conv = zext i1 %cmp to i32, !dbg !3960
  %conv1 = trunc i32 %conv to i8, !dbg !3961
  ret i8 %conv1, !dbg !3962
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @stmt_could_throw_1_p(%union.gimple_statement_d* %stmt) #0 !dbg !3963 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %honor_nans = alloca i8, align 1
  %honor_snans = alloca i8, align 1
  %fp_operation = alloca i8, align 1
  %honor_trapv = alloca i8, align 1
  %t = alloca %union.tree_node*, align 8
  %i = alloca i64, align 8
  %handled = alloca i8, align 1
  %ret = alloca i8, align 1
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3964, metadata !DIExpression()), !dbg !3965
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3966, metadata !DIExpression()), !dbg !3967
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3968
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !3969
  store i32 %call, i32* %code, align 4, !dbg !3967
  call void @llvm.dbg.declare(metadata i8* %honor_nans, metadata !3970, metadata !DIExpression()), !dbg !3971
  store i8 0, i8* %honor_nans, align 1, !dbg !3971
  call void @llvm.dbg.declare(metadata i8* %honor_snans, metadata !3972, metadata !DIExpression()), !dbg !3973
  store i8 0, i8* %honor_snans, align 1, !dbg !3973
  call void @llvm.dbg.declare(metadata i8* %fp_operation, metadata !3974, metadata !DIExpression()), !dbg !3975
  store i8 0, i8* %fp_operation, align 1, !dbg !3975
  call void @llvm.dbg.declare(metadata i8* %honor_trapv, metadata !3976, metadata !DIExpression()), !dbg !3977
  store i8 0, i8* %honor_trapv, align 1, !dbg !3977
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !3978, metadata !DIExpression()), !dbg !3979
  call void @llvm.dbg.declare(metadata i64* %i, metadata !3980, metadata !DIExpression()), !dbg !3981
  call void @llvm.dbg.declare(metadata i8* %handled, metadata !3982, metadata !DIExpression()), !dbg !3983
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !3984, metadata !DIExpression()), !dbg !3985
  %1 = load i32, i32* %code, align 4, !dbg !3986
  %idxprom = sext i32 %1 to i64, !dbg !3986
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3986
  %2 = load i32, i32* %arrayidx, align 4, !dbg !3986
  %cmp = icmp eq i32 %2, 5, !dbg !3988
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3989

lor.lhs.false:                                    ; preds = %entry
  %3 = load i32, i32* %code, align 4, !dbg !3990
  %idxprom1 = sext i32 %3 to i64, !dbg !3990
  %arrayidx2 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom1, !dbg !3990
  %4 = load i32, i32* %arrayidx2, align 4, !dbg !3990
  %cmp3 = icmp eq i32 %4, 6, !dbg !3991
  br i1 %cmp3, label %if.then, label %lor.lhs.false4, !dbg !3992

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !3993
  %idxprom5 = sext i32 %5 to i64, !dbg !3993
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !3993
  %6 = load i32, i32* %arrayidx6, align 4, !dbg !3993
  %cmp7 = icmp eq i32 %6, 7, !dbg !3994
  br i1 %cmp7, label %if.then, label %if.end64, !dbg !3995

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false, %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3996
  %call8 = call %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %7), !dbg !3998
  store %union.tree_node* %call8, %union.tree_node** %t, align 8, !dbg !3999
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4000
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !4000
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !4000
  %bf.load = load i64, i64* %9, align 8, !dbg !4000
  %bf.clear = and i64 %bf.load, 65535, !dbg !4000
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4000
  %cmp9 = icmp eq i32 %bf.cast, 9, !dbg !4000
  br i1 %cmp9, label %lor.end, label %lor.rhs, !dbg !4000

lor.rhs:                                          ; preds = %if.then
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4000
  %base10 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !4000
  %11 = bitcast %struct.tree_base* %base10 to i64*, !dbg !4000
  %bf.load11 = load i64, i64* %11, align 8, !dbg !4000
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !4000
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !4000
  %cmp14 = icmp eq i32 %bf.cast13, 13, !dbg !4000
  br i1 %cmp14, label %land.rhs, label %lor.lhs.false15, !dbg !4000

lor.lhs.false15:                                  ; preds = %lor.rhs
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4000
  %base16 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !4000
  %13 = bitcast %struct.tree_base* %base16 to i64*, !dbg !4000
  %bf.load17 = load i64, i64* %13, align 8, !dbg !4000
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !4000
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !4000
  %cmp20 = icmp eq i32 %bf.cast19, 14, !dbg !4000
  br i1 %cmp20, label %land.rhs, label %land.end, !dbg !4000

land.rhs:                                         ; preds = %lor.lhs.false15, %lor.rhs
  %14 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4000
  %common = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !4000
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4000
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4000
  %base21 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !4000
  %16 = bitcast %struct.tree_base* %base21 to i64*, !dbg !4000
  %bf.load22 = load i64, i64* %16, align 8, !dbg !4000
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !4000
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !4000
  %cmp25 = icmp eq i32 %bf.cast24, 9, !dbg !4000
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false15
  %17 = phi i1 [ false, %lor.lhs.false15 ], [ %cmp25, %land.rhs ], !dbg !4001
  br label %lor.end, !dbg !4000

lor.end:                                          ; preds = %land.end, %if.then
  %18 = phi i1 [ true, %if.then ], [ %17, %land.end ]
  %lor.ext = zext i1 %18 to i32, !dbg !4000
  %conv = trunc i32 %lor.ext to i8, !dbg !4000
  store i8 %conv, i8* %fp_operation, align 1, !dbg !4002
  %19 = load i8, i8* %fp_operation, align 1, !dbg !4003
  %tobool = icmp ne i8 %19, 0, !dbg !4003
  br i1 %tobool, label %if.then26, label %if.else, !dbg !4005

if.then26:                                        ; preds = %lor.end
  %20 = load i32, i32* @flag_trapping_math, align 4, !dbg !4006
  %tobool27 = icmp ne i32 %20, 0, !dbg !4006
  br i1 %tobool27, label %land.rhs28, label %land.end30, !dbg !4008

land.rhs28:                                       ; preds = %if.then26
  %21 = load i32, i32* @flag_finite_math_only, align 4, !dbg !4009
  %tobool29 = icmp ne i32 %21, 0, !dbg !4010
  %lnot = xor i1 %tobool29, true, !dbg !4010
  br label %land.end30

land.end30:                                       ; preds = %land.rhs28, %if.then26
  %22 = phi i1 [ false, %if.then26 ], [ %lnot, %land.rhs28 ], !dbg !4011
  %land.ext = zext i1 %22 to i32, !dbg !4008
  %conv31 = trunc i32 %land.ext to i8, !dbg !4006
  store i8 %conv31, i8* %honor_nans, align 1, !dbg !4012
  %23 = load i32, i32* @flag_signaling_nans, align 4, !dbg !4013
  %cmp32 = icmp ne i32 %23, 0, !dbg !4014
  %conv33 = zext i1 %cmp32 to i32, !dbg !4014
  %conv34 = trunc i32 %conv33 to i8, !dbg !4013
  store i8 %conv34, i8* %honor_snans, align 1, !dbg !4015
  br label %if.end63, !dbg !4016

if.else:                                          ; preds = %lor.end
  %24 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4017
  %base35 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !4017
  %25 = bitcast %struct.tree_base* %base35 to i64*, !dbg !4017
  %bf.load36 = load i64, i64* %25, align 8, !dbg !4017
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !4017
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !4017
  %cmp39 = icmp eq i32 %bf.cast38, 6, !dbg !4017
  br i1 %cmp39, label %land.lhs.true, label %lor.lhs.false41, !dbg !4017

lor.lhs.false41:                                  ; preds = %if.else
  %26 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4017
  %base42 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !4017
  %27 = bitcast %struct.tree_base* %base42 to i64*, !dbg !4017
  %bf.load43 = load i64, i64* %27, align 8, !dbg !4017
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !4017
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !4017
  %cmp46 = icmp eq i32 %bf.cast45, 7, !dbg !4017
  br i1 %cmp46, label %land.lhs.true, label %lor.lhs.false48, !dbg !4017

lor.lhs.false48:                                  ; preds = %lor.lhs.false41
  %28 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4017
  %base49 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !4017
  %29 = bitcast %struct.tree_base* %base49 to i64*, !dbg !4017
  %bf.load50 = load i64, i64* %29, align 8, !dbg !4017
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !4017
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !4017
  %cmp53 = icmp eq i32 %bf.cast52, 8, !dbg !4017
  br i1 %cmp53, label %land.lhs.true, label %if.end, !dbg !4019

land.lhs.true:                                    ; preds = %lor.lhs.false48, %lor.lhs.false41, %if.else
  %30 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4020
  %base55 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !4020
  %31 = bitcast %struct.tree_base* %base55 to i64*, !dbg !4020
  %bf.load56 = load i64, i64* %31, align 8, !dbg !4020
  %bf.lshr = lshr i64 %bf.load56, 21, !dbg !4020
  %bf.clear57 = and i64 %bf.lshr, 1, !dbg !4020
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !4020
  %tobool59 = icmp ne i32 %bf.cast58, 0, !dbg !4020
  br i1 %tobool59, label %if.end, label %land.lhs.true60, !dbg !4020

land.lhs.true60:                                  ; preds = %land.lhs.true
  %32 = load i32, i32* @flag_trapv, align 4, !dbg !4020
  %tobool61 = icmp ne i32 %32, 0, !dbg !4020
  br i1 %tobool61, label %if.then62, label %if.end, !dbg !4021

if.then62:                                        ; preds = %land.lhs.true60
  store i8 1, i8* %honor_trapv, align 1, !dbg !4022
  br label %if.end, !dbg !4023

if.end:                                           ; preds = %if.then62, %land.lhs.true60, %land.lhs.true, %lor.lhs.false48
  br label %if.end63

if.end63:                                         ; preds = %if.end, %land.end30
  br label %if.end64, !dbg !4024

if.end64:                                         ; preds = %if.end63, %lor.lhs.false4
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4025
  %call65 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %33), !dbg !4026
  %conv66 = zext i8 %call65 to i32, !dbg !4026
  %tobool67 = icmp ne i32 %conv66, 0, !dbg !4026
  br i1 %tobool67, label %cond.true, label %cond.false, !dbg !4026

cond.true:                                        ; preds = %if.end64
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4027
  %call68 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %34), !dbg !4028
  br label %cond.end, !dbg !4026

cond.false:                                       ; preds = %if.end64
  br label %cond.end, !dbg !4026

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call68, %cond.true ], [ null, %cond.false ], !dbg !4026
  store %union.tree_node* %cond, %union.tree_node** %t, align 8, !dbg !4029
  %35 = load i32, i32* %code, align 4, !dbg !4030
  %36 = load i8, i8* %fp_operation, align 1, !dbg !4031
  %37 = load i8, i8* %honor_trapv, align 1, !dbg !4032
  %38 = load i8, i8* %honor_nans, align 1, !dbg !4033
  %39 = load i8, i8* %honor_snans, align 1, !dbg !4034
  %40 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4035
  %call69 = call zeroext i8 @operation_could_trap_helper_p(i32 %35, i8 zeroext %36, i8 zeroext %37, i8 zeroext %38, i8 zeroext %39, %union.tree_node* %40, i8* %handled), !dbg !4036
  store i8 %call69, i8* %ret, align 1, !dbg !4037
  %41 = load i8, i8* %handled, align 1, !dbg !4038
  %tobool70 = icmp ne i8 %41, 0, !dbg !4038
  br i1 %tobool70, label %if.then71, label %if.end72, !dbg !4040

if.then71:                                        ; preds = %cond.end
  %42 = load i8, i8* %ret, align 1, !dbg !4041
  store i8 %42, i8* %retval, align 1, !dbg !4042
  br label %return, !dbg !4042

if.end72:                                         ; preds = %cond.end
  store i64 0, i64* %i, align 8, !dbg !4043
  br label %for.cond, !dbg !4045

for.cond:                                         ; preds = %for.inc, %if.end72
  %43 = load i64, i64* %i, align 8, !dbg !4046
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4048
  %call73 = call i32 @gimple_num_ops(%union.gimple_statement_d* %44), !dbg !4049
  %conv74 = zext i32 %call73 to i64, !dbg !4049
  %cmp75 = icmp ult i64 %43, %conv74, !dbg !4050
  br i1 %cmp75, label %for.body, label %for.end, !dbg !4051

for.body:                                         ; preds = %for.cond
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4052
  %46 = load i64, i64* %i, align 8, !dbg !4054
  %conv77 = trunc i64 %46 to i32, !dbg !4054
  %call78 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %45, i32 %conv77), !dbg !4055
  %call79 = call zeroext i8 @tree_could_trap_p(%union.tree_node* %call78), !dbg !4056
  %tobool80 = icmp ne i8 %call79, 0, !dbg !4056
  br i1 %tobool80, label %if.then81, label %if.end82, !dbg !4057

if.then81:                                        ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !4058
  br label %return, !dbg !4058

if.end82:                                         ; preds = %for.body
  br label %for.inc, !dbg !4059

for.inc:                                          ; preds = %if.end82
  %47 = load i64, i64* %i, align 8, !dbg !4060
  %inc = add i64 %47, 1, !dbg !4060
  store i64 %inc, i64* %i, align 8, !dbg !4060
  br label %for.cond, !dbg !4061, !llvm.loop !4062

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !4064
  br label %return, !dbg !4064

return:                                           ; preds = %for.end, %if.then81, %if.then71
  %48 = load i8, i8* %retval, align 1, !dbg !4065
  ret i8 %48, !dbg !4065
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_asm_volatile_p(%union.gimple_statement_d* %gs) #0 !dbg !4066 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4069, metadata !DIExpression()), !dbg !4070
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4071
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4072
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4073
  %bf.load = load i32, i32* %1, align 8, !dbg !4073
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4073
  %and = and i32 %bf.lshr, 2, !dbg !4074
  %cmp = icmp ne i32 %and, 0, !dbg !4075
  %conv = zext i1 %cmp to i32, !dbg !4075
  %conv1 = trunc i32 %conv to i8, !dbg !4076
  ret i8 %conv1, !dbg !4077
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @tree_could_throw_p(%union.tree_node* %t) #0 !dbg !4078 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !4079, metadata !DIExpression()), !dbg !4080
  %0 = load i32, i32* @flag_exceptions, align 4, !dbg !4081
  %tobool = icmp ne i32 %0, 0, !dbg !4081
  br i1 %tobool, label %if.end, label %if.then, !dbg !4083

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4084
  br label %return, !dbg !4084

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4085
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !4085
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !4085
  %bf.load = load i64, i64* %2, align 8, !dbg !4085
  %bf.clear = and i64 %bf.load, 65535, !dbg !4085
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4085
  %cmp = icmp eq i32 %bf.cast, 53, !dbg !4087
  br i1 %cmp, label %if.then1, label %if.end9, !dbg !4088

if.then1:                                         ; preds = %if.end
  %3 = load i32, i32* @flag_non_call_exceptions, align 4, !dbg !4089
  %tobool2 = icmp ne i32 %3, 0, !dbg !4089
  br i1 %tobool2, label %land.lhs.true, label %if.end5, !dbg !4092

land.lhs.true:                                    ; preds = %if.then1
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4093
  %exp = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !4093
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !4093
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !4093
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4093
  %call = call zeroext i8 @tree_could_trap_p(%union.tree_node* %5), !dbg !4094
  %conv = zext i8 %call to i32, !dbg !4094
  %tobool3 = icmp ne i32 %conv, 0, !dbg !4094
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !4095

if.then4:                                         ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !4096
  br label %return, !dbg !4096

if.end5:                                          ; preds = %land.lhs.true, %if.then1
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4097
  %exp6 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !4097
  %operands7 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6, i32 0, i32 3, !dbg !4097
  %arrayidx8 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands7, i64 0, i64 1, !dbg !4097
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx8, align 8, !dbg !4097
  store %union.tree_node* %7, %union.tree_node** %t.addr, align 8, !dbg !4098
  br label %if.end9, !dbg !4099

if.end9:                                          ; preds = %if.end5, %if.end
  %8 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4100
  %base10 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !4100
  %9 = bitcast %struct.tree_base* %base10 to i64*, !dbg !4100
  %bf.load11 = load i64, i64* %9, align 8, !dbg !4100
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !4100
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !4100
  %cmp14 = icmp eq i32 %bf.cast13, 150, !dbg !4102
  br i1 %cmp14, label %if.then16, label %if.end20, !dbg !4103

if.then16:                                        ; preds = %if.end9
  %10 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4104
  %exp17 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !4104
  %operands18 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp17, i32 0, i32 3, !dbg !4104
  %arrayidx19 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands18, i64 0, i64 0, !dbg !4104
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx19, align 8, !dbg !4104
  store %union.tree_node* %11, %union.tree_node** %t.addr, align 8, !dbg !4105
  br label %if.end20, !dbg !4106

if.end20:                                         ; preds = %if.then16, %if.end9
  %12 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4107
  %base21 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !4107
  %13 = bitcast %struct.tree_base* %base21 to i64*, !dbg !4107
  %bf.load22 = load i64, i64* %13, align 8, !dbg !4107
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !4107
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !4107
  %cmp25 = icmp eq i32 %bf.cast24, 59, !dbg !4109
  br i1 %cmp25, label %if.then27, label %if.end32, !dbg !4110

if.then27:                                        ; preds = %if.end20
  %14 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4111
  %call28 = call i32 @call_expr_flags(%union.tree_node* %14), !dbg !4112
  %and = and i32 %call28, 64, !dbg !4113
  %cmp29 = icmp eq i32 %and, 0, !dbg !4114
  %conv30 = zext i1 %cmp29 to i32, !dbg !4114
  %conv31 = trunc i32 %conv30 to i8, !dbg !4115
  store i8 %conv31, i8* %retval, align 1, !dbg !4116
  br label %return, !dbg !4116

if.end32:                                         ; preds = %if.end20
  %15 = load i32, i32* @flag_non_call_exceptions, align 4, !dbg !4117
  %tobool33 = icmp ne i32 %15, 0, !dbg !4117
  br i1 %tobool33, label %if.then34, label %if.end36, !dbg !4119

if.then34:                                        ; preds = %if.end32
  %16 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4120
  %call35 = call zeroext i8 @tree_could_trap_p(%union.tree_node* %16), !dbg !4121
  store i8 %call35, i8* %retval, align 1, !dbg !4122
  br label %return, !dbg !4122

if.end36:                                         ; preds = %if.end32
  store i8 0, i8* %retval, align 1, !dbg !4123
  br label %return, !dbg !4123

return:                                           ; preds = %if.end36, %if.then34, %if.then27, %if.then4, %if.then
  %17 = load i8, i8* %retval, align 1, !dbg !4124
  ret i8 %17, !dbg !4124
}

declare dso_local i32 @call_expr_flags(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @stmt_can_throw_external(%union.gimple_statement_d* %stmt) #0 !dbg !4125 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %lp_nr = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4126, metadata !DIExpression()), !dbg !4127
  call void @llvm.dbg.declare(metadata i32* %lp_nr, metadata !4128, metadata !DIExpression()), !dbg !4129
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4130
  %call = call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %0), !dbg !4132
  %tobool = icmp ne i8 %call, 0, !dbg !4132
  br i1 %tobool, label %if.end, label %if.then, !dbg !4133

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4134
  br label %return, !dbg !4134

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4135
  %call1 = call i32 @lookup_stmt_eh_lp(%union.gimple_statement_d* %1), !dbg !4136
  store i32 %call1, i32* %lp_nr, align 4, !dbg !4137
  %2 = load i32, i32* %lp_nr, align 4, !dbg !4138
  %cmp = icmp eq i32 %2, 0, !dbg !4139
  %conv = zext i1 %cmp to i32, !dbg !4139
  %conv2 = trunc i32 %conv to i8, !dbg !4138
  store i8 %conv2, i8* %retval, align 1, !dbg !4140
  br label %return, !dbg !4140

return:                                           ; preds = %if.end, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !4141
  ret i8 %3, !dbg !4141
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @stmt_can_throw_internal(%union.gimple_statement_d* %stmt) #0 !dbg !4142 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %lp_nr = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4143, metadata !DIExpression()), !dbg !4144
  call void @llvm.dbg.declare(metadata i32* %lp_nr, metadata !4145, metadata !DIExpression()), !dbg !4146
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4147
  %call = call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %0), !dbg !4149
  %tobool = icmp ne i8 %call, 0, !dbg !4149
  br i1 %tobool, label %if.end, label %if.then, !dbg !4150

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4151
  br label %return, !dbg !4151

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4152
  %call1 = call i32 @lookup_stmt_eh_lp(%union.gimple_statement_d* %1), !dbg !4153
  store i32 %call1, i32* %lp_nr, align 4, !dbg !4154
  %2 = load i32, i32* %lp_nr, align 4, !dbg !4155
  %cmp = icmp sgt i32 %2, 0, !dbg !4156
  %conv = zext i1 %cmp to i32, !dbg !4156
  %conv2 = trunc i32 %conv to i8, !dbg !4155
  store i8 %conv2, i8* %retval, align 1, !dbg !4157
  br label %return, !dbg !4157

return:                                           ; preds = %if.end, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !4158
  ret i8 %3, !dbg !4158
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @maybe_clean_eh_stmt_fn(%struct.function* %ifun, %union.gimple_statement_d* %stmt) #0 !dbg !4159 {
entry:
  %retval = alloca i8, align 1
  %ifun.addr = alloca %struct.function*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %struct.function* %ifun, %struct.function** %ifun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %ifun.addr, metadata !4160, metadata !DIExpression()), !dbg !4161
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4162, metadata !DIExpression()), !dbg !4163
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4164
  %call = call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %0), !dbg !4166
  %tobool = icmp ne i8 %call, 0, !dbg !4166
  br i1 %tobool, label %if.then, label %if.end, !dbg !4167

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4168
  br label %return, !dbg !4168

if.end:                                           ; preds = %entry
  %1 = load %struct.function*, %struct.function** %ifun.addr, align 8, !dbg !4169
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4170
  %call1 = call zeroext i8 @remove_stmt_from_eh_lp_fn(%struct.function* %1, %union.gimple_statement_d* %2), !dbg !4171
  store i8 %call1, i8* %retval, align 1, !dbg !4172
  br label %return, !dbg !4172

return:                                           ; preds = %if.end, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !4173
  ret i8 %3, !dbg !4173
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @maybe_clean_eh_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !4174 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4175, metadata !DIExpression()), !dbg !4176
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4177
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4177
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4178
  %call = call zeroext i8 @maybe_clean_eh_stmt_fn(%struct.function* %add.ptr, %union.gimple_statement_d* %1), !dbg !4179
  ret i8 %call, !dbg !4180
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d* %old_stmt, %union.gimple_statement_d* %new_stmt) #0 !dbg !4181 {
entry:
  %retval = alloca i8, align 1
  %old_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %new_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %lp_nr = alloca i32, align 4
  %new_stmt_could_throw = alloca i8, align 1
  store %union.gimple_statement_d* %old_stmt, %union.gimple_statement_d** %old_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %old_stmt.addr, metadata !4184, metadata !DIExpression()), !dbg !4185
  store %union.gimple_statement_d* %new_stmt, %union.gimple_statement_d** %new_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt.addr, metadata !4186, metadata !DIExpression()), !dbg !4187
  call void @llvm.dbg.declare(metadata i32* %lp_nr, metadata !4188, metadata !DIExpression()), !dbg !4189
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt.addr, align 8, !dbg !4190
  %call = call i32 @lookup_stmt_eh_lp(%union.gimple_statement_d* %0), !dbg !4191
  store i32 %call, i32* %lp_nr, align 4, !dbg !4189
  %1 = load i32, i32* %lp_nr, align 4, !dbg !4192
  %cmp = icmp ne i32 %1, 0, !dbg !4194
  br i1 %cmp, label %if.then, label %if.end7, !dbg !4195

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %new_stmt_could_throw, metadata !4196, metadata !DIExpression()), !dbg !4198
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !4199
  %call1 = call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %2), !dbg !4200
  store i8 %call1, i8* %new_stmt_could_throw, align 1, !dbg !4198
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !4201
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt.addr, align 8, !dbg !4203
  %cmp2 = icmp eq %union.gimple_statement_d* %3, %4, !dbg !4204
  br i1 %cmp2, label %land.lhs.true, label %if.end, !dbg !4205

land.lhs.true:                                    ; preds = %if.then
  %5 = load i8, i8* %new_stmt_could_throw, align 1, !dbg !4206
  %conv = zext i8 %5 to i32, !dbg !4206
  %tobool = icmp ne i32 %conv, 0, !dbg !4206
  br i1 %tobool, label %if.then3, label %if.end, !dbg !4207

if.then3:                                         ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !4208
  br label %return, !dbg !4208

if.end:                                           ; preds = %land.lhs.true, %if.then
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt.addr, align 8, !dbg !4209
  %call4 = call zeroext i8 @remove_stmt_from_eh_lp(%union.gimple_statement_d* %6), !dbg !4210
  %7 = load i8, i8* %new_stmt_could_throw, align 1, !dbg !4211
  %tobool5 = icmp ne i8 %7, 0, !dbg !4211
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !4213

if.then6:                                         ; preds = %if.end
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !4214
  %9 = load i32, i32* %lp_nr, align 4, !dbg !4216
  call void @add_stmt_to_eh_lp(%union.gimple_statement_d* %8, i32 %9), !dbg !4217
  store i8 0, i8* %retval, align 1, !dbg !4218
  br label %return, !dbg !4218

if.else:                                          ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !4219
  br label %return, !dbg !4219

if.end7:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4220
  br label %return, !dbg !4220

return:                                           ; preds = %if.end7, %if.else, %if.then6, %if.then3
  %10 = load i8, i8* %retval, align 1, !dbg !4221
  ret i8 %10, !dbg !4221
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @maybe_duplicate_eh_stmt_fn(%struct.function* %new_fun, %union.gimple_statement_d* %new_stmt, %struct.function* %old_fun, %union.gimple_statement_d* %old_stmt, %struct.pointer_map_t* %map, i32 %default_lp_nr) #0 !dbg !4222 {
entry:
  %retval = alloca i8, align 1
  %new_fun.addr = alloca %struct.function*, align 8
  %new_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %old_fun.addr = alloca %struct.function*, align 8
  %old_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %map.addr = alloca %struct.pointer_map_t*, align 8
  %default_lp_nr.addr = alloca i32, align 4
  %old_lp_nr = alloca i32, align 4
  %new_lp_nr = alloca i32, align 4
  %slot = alloca i8**, align 8
  %old_lp = alloca %struct.eh_landing_pad_d*, align 8
  %new_lp = alloca %struct.eh_landing_pad_d*, align 8
  %old_r = alloca %struct.eh_region_d*, align 8
  %new_r = alloca %struct.eh_region_d*, align 8
  store %struct.function* %new_fun, %struct.function** %new_fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %new_fun.addr, metadata !4225, metadata !DIExpression()), !dbg !4226
  store %union.gimple_statement_d* %new_stmt, %union.gimple_statement_d** %new_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt.addr, metadata !4227, metadata !DIExpression()), !dbg !4228
  store %struct.function* %old_fun, %struct.function** %old_fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %old_fun.addr, metadata !4229, metadata !DIExpression()), !dbg !4230
  store %union.gimple_statement_d* %old_stmt, %union.gimple_statement_d** %old_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %old_stmt.addr, metadata !4231, metadata !DIExpression()), !dbg !4232
  store %struct.pointer_map_t* %map, %struct.pointer_map_t** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t** %map.addr, metadata !4233, metadata !DIExpression()), !dbg !4234
  store i32 %default_lp_nr, i32* %default_lp_nr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %default_lp_nr.addr, metadata !4235, metadata !DIExpression()), !dbg !4236
  call void @llvm.dbg.declare(metadata i32* %old_lp_nr, metadata !4237, metadata !DIExpression()), !dbg !4238
  call void @llvm.dbg.declare(metadata i32* %new_lp_nr, metadata !4239, metadata !DIExpression()), !dbg !4240
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !4241, metadata !DIExpression()), !dbg !4242
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !4243
  %call = call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %0), !dbg !4245
  %tobool = icmp ne i8 %call, 0, !dbg !4245
  br i1 %tobool, label %if.end, label %if.then, !dbg !4246

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4247
  br label %return, !dbg !4247

if.end:                                           ; preds = %entry
  %1 = load %struct.function*, %struct.function** %old_fun.addr, align 8, !dbg !4248
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt.addr, align 8, !dbg !4249
  %call1 = call i32 @lookup_stmt_eh_lp_fn(%struct.function* %1, %union.gimple_statement_d* %2), !dbg !4250
  store i32 %call1, i32* %old_lp_nr, align 4, !dbg !4251
  %3 = load i32, i32* %old_lp_nr, align 4, !dbg !4252
  %cmp = icmp eq i32 %3, 0, !dbg !4254
  br i1 %cmp, label %if.then2, label %if.else, !dbg !4255

if.then2:                                         ; preds = %if.end
  %4 = load i32, i32* %default_lp_nr.addr, align 4, !dbg !4256
  %cmp3 = icmp eq i32 %4, 0, !dbg !4259
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !4260

if.then4:                                         ; preds = %if.then2
  store i8 0, i8* %retval, align 1, !dbg !4261
  br label %return, !dbg !4261

if.end5:                                          ; preds = %if.then2
  %5 = load i32, i32* %default_lp_nr.addr, align 4, !dbg !4262
  store i32 %5, i32* %new_lp_nr, align 4, !dbg !4263
  br label %if.end28, !dbg !4264

if.else:                                          ; preds = %if.end
  %6 = load i32, i32* %old_lp_nr, align 4, !dbg !4265
  %cmp6 = icmp sgt i32 %6, 0, !dbg !4267
  br i1 %cmp6, label %if.then7, label %if.else13, !dbg !4268

if.then7:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %old_lp, metadata !4269, metadata !DIExpression()), !dbg !4271
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %new_lp, metadata !4272, metadata !DIExpression()), !dbg !4273
  %7 = load %struct.function*, %struct.function** %old_fun.addr, align 8, !dbg !4274
  %eh = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 0, !dbg !4274
  %8 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !4274
  %lp_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %8, i32 0, i32 2, !dbg !4274
  %9 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !4274
  %tobool8 = icmp ne %struct.VEC_eh_landing_pad_gc* %9, null, !dbg !4274
  br i1 %tobool8, label %cond.true, label %cond.false, !dbg !4274

cond.true:                                        ; preds = %if.then7
  %10 = load %struct.function*, %struct.function** %old_fun.addr, align 8, !dbg !4274
  %eh9 = getelementptr inbounds %struct.function, %struct.function* %10, i32 0, i32 0, !dbg !4274
  %11 = load %struct.eh_status*, %struct.eh_status** %eh9, align 8, !dbg !4274
  %lp_array10 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %11, i32 0, i32 2, !dbg !4274
  %12 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array10, align 8, !dbg !4274
  %base = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %12, i32 0, i32 0, !dbg !4274
  br label %cond.end, !dbg !4274

cond.false:                                       ; preds = %if.then7
  br label %cond.end, !dbg !4274

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_landing_pad_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4274
  %13 = load i32, i32* %old_lp_nr, align 4, !dbg !4274
  %call11 = call %struct.eh_landing_pad_d* @VEC_eh_landing_pad_base_index(%struct.VEC_eh_landing_pad_base* %cond, i32 %13), !dbg !4274
  store %struct.eh_landing_pad_d* %call11, %struct.eh_landing_pad_d** %old_lp, align 8, !dbg !4275
  %14 = load %struct.pointer_map_t*, %struct.pointer_map_t** %map.addr, align 8, !dbg !4276
  %15 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %old_lp, align 8, !dbg !4277
  %16 = bitcast %struct.eh_landing_pad_d* %15 to i8*, !dbg !4277
  %call12 = call i8** @pointer_map_contains(%struct.pointer_map_t* %14, i8* %16), !dbg !4278
  store i8** %call12, i8*** %slot, align 8, !dbg !4279
  %17 = load i8**, i8*** %slot, align 8, !dbg !4280
  %18 = load i8*, i8** %17, align 8, !dbg !4281
  %19 = bitcast i8* %18 to %struct.eh_landing_pad_d*, !dbg !4282
  store %struct.eh_landing_pad_d* %19, %struct.eh_landing_pad_d** %new_lp, align 8, !dbg !4283
  %20 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %new_lp, align 8, !dbg !4284
  %index = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %20, i32 0, i32 4, !dbg !4285
  %21 = load i32, i32* %index, align 8, !dbg !4285
  store i32 %21, i32* %new_lp_nr, align 4, !dbg !4286
  br label %if.end27, !dbg !4287

if.else13:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %old_r, metadata !4288, metadata !DIExpression()), !dbg !4290
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %new_r, metadata !4291, metadata !DIExpression()), !dbg !4292
  %22 = load %struct.function*, %struct.function** %old_fun.addr, align 8, !dbg !4293
  %eh14 = getelementptr inbounds %struct.function, %struct.function* %22, i32 0, i32 0, !dbg !4293
  %23 = load %struct.eh_status*, %struct.eh_status** %eh14, align 8, !dbg !4293
  %region_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %23, i32 0, i32 1, !dbg !4293
  %24 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array, align 8, !dbg !4293
  %tobool15 = icmp ne %struct.VEC_eh_region_gc* %24, null, !dbg !4293
  br i1 %tobool15, label %cond.true16, label %cond.false20, !dbg !4293

cond.true16:                                      ; preds = %if.else13
  %25 = load %struct.function*, %struct.function** %old_fun.addr, align 8, !dbg !4293
  %eh17 = getelementptr inbounds %struct.function, %struct.function* %25, i32 0, i32 0, !dbg !4293
  %26 = load %struct.eh_status*, %struct.eh_status** %eh17, align 8, !dbg !4293
  %region_array18 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %26, i32 0, i32 1, !dbg !4293
  %27 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array18, align 8, !dbg !4293
  %base19 = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %27, i32 0, i32 0, !dbg !4293
  br label %cond.end21, !dbg !4293

cond.false20:                                     ; preds = %if.else13
  br label %cond.end21, !dbg !4293

cond.end21:                                       ; preds = %cond.false20, %cond.true16
  %cond22 = phi %struct.VEC_eh_region_base* [ %base19, %cond.true16 ], [ null, %cond.false20 ], !dbg !4293
  %28 = load i32, i32* %old_lp_nr, align 4, !dbg !4293
  %sub = sub nsw i32 0, %28, !dbg !4293
  %call23 = call %struct.eh_region_d* @VEC_eh_region_base_index(%struct.VEC_eh_region_base* %cond22, i32 %sub), !dbg !4293
  store %struct.eh_region_d* %call23, %struct.eh_region_d** %old_r, align 8, !dbg !4294
  %29 = load %struct.pointer_map_t*, %struct.pointer_map_t** %map.addr, align 8, !dbg !4295
  %30 = load %struct.eh_region_d*, %struct.eh_region_d** %old_r, align 8, !dbg !4296
  %31 = bitcast %struct.eh_region_d* %30 to i8*, !dbg !4296
  %call24 = call i8** @pointer_map_contains(%struct.pointer_map_t* %29, i8* %31), !dbg !4297
  store i8** %call24, i8*** %slot, align 8, !dbg !4298
  %32 = load i8**, i8*** %slot, align 8, !dbg !4299
  %33 = load i8*, i8** %32, align 8, !dbg !4300
  %34 = bitcast i8* %33 to %struct.eh_region_d*, !dbg !4301
  store %struct.eh_region_d* %34, %struct.eh_region_d** %new_r, align 8, !dbg !4302
  %35 = load %struct.eh_region_d*, %struct.eh_region_d** %new_r, align 8, !dbg !4303
  %index25 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %35, i32 0, i32 3, !dbg !4304
  %36 = load i32, i32* %index25, align 8, !dbg !4304
  %sub26 = sub nsw i32 0, %36, !dbg !4305
  store i32 %sub26, i32* %new_lp_nr, align 4, !dbg !4306
  br label %if.end27

if.end27:                                         ; preds = %cond.end21, %cond.end
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.end5
  %37 = load %struct.function*, %struct.function** %new_fun.addr, align 8, !dbg !4307
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !4308
  %39 = load i32, i32* %new_lp_nr, align 4, !dbg !4309
  call void @add_stmt_to_eh_lp_fn(%struct.function* %37, %union.gimple_statement_d* %38, i32 %39), !dbg !4310
  store i8 1, i8* %retval, align 1, !dbg !4311
  br label %return, !dbg !4311

return:                                           ; preds = %if.end28, %if.then4, %if.then
  %40 = load i8, i8* %retval, align 1, !dbg !4312
  ret i8 %40, !dbg !4312
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_landing_pad_d* @VEC_eh_landing_pad_base_index(%struct.VEC_eh_landing_pad_base* %vec_, i32 %ix_) #0 !dbg !4313 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_eh_landing_pad_base* %vec_, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_base** %vec_.addr, metadata !4318, metadata !DIExpression()), !dbg !4319
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4320, metadata !DIExpression()), !dbg !4319
  %0 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !4319
  %tobool = icmp ne %struct.VEC_eh_landing_pad_base* %0, null, !dbg !4319
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4319

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4319
  %2 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !4319
  %num = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %2, i32 0, i32 0, !dbg !4319
  %3 = load i32, i32* %num, align 8, !dbg !4319
  %cmp = icmp ult i32 %1, %3, !dbg !4319
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4321
  %land.ext = zext i1 %4 to i32, !dbg !4319
  %5 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !4319
  %vec = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %5, i32 0, i32 2, !dbg !4319
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4319
  %idxprom = zext i32 %6 to i64, !dbg !4319
  %arrayidx = getelementptr inbounds [1 x %struct.eh_landing_pad_d*], [1 x %struct.eh_landing_pad_d*]* %vec, i64 0, i64 %idxprom, !dbg !4319
  %7 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %arrayidx, align 8, !dbg !4319
  ret %struct.eh_landing_pad_d* %7, !dbg !4319
}

declare dso_local i8** @pointer_map_contains(%struct.pointer_map_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.eh_region_d* @VEC_eh_region_base_index(%struct.VEC_eh_region_base* %vec_, i32 %ix_) #0 !dbg !4322 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_region_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_eh_region_base* %vec_, %struct.VEC_eh_region_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_base** %vec_.addr, metadata !4327, metadata !DIExpression()), !dbg !4328
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4329, metadata !DIExpression()), !dbg !4328
  %0 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !4328
  %tobool = icmp ne %struct.VEC_eh_region_base* %0, null, !dbg !4328
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4328

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4328
  %2 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !4328
  %num = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %2, i32 0, i32 0, !dbg !4328
  %3 = load i32, i32* %num, align 8, !dbg !4328
  %cmp = icmp ult i32 %1, %3, !dbg !4328
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4330
  %land.ext = zext i1 %4 to i32, !dbg !4328
  %5 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !4328
  %vec = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %5, i32 0, i32 2, !dbg !4328
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4328
  %idxprom = zext i32 %6 to i64, !dbg !4328
  %arrayidx = getelementptr inbounds [1 x %struct.eh_region_d*], [1 x %struct.eh_region_d*]* %vec, i64 0, i64 %idxprom, !dbg !4328
  %7 = load %struct.eh_region_d*, %struct.eh_region_d** %arrayidx, align 8, !dbg !4328
  ret %struct.eh_region_d* %7, !dbg !4328
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @maybe_duplicate_eh_stmt(%union.gimple_statement_d* %new_stmt, %union.gimple_statement_d* %old_stmt) #0 !dbg !4331 {
entry:
  %retval = alloca i8, align 1
  %new_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %old_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %lp_nr = alloca i32, align 4
  store %union.gimple_statement_d* %new_stmt, %union.gimple_statement_d** %new_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt.addr, metadata !4332, metadata !DIExpression()), !dbg !4333
  store %union.gimple_statement_d* %old_stmt, %union.gimple_statement_d** %old_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %old_stmt.addr, metadata !4334, metadata !DIExpression()), !dbg !4335
  call void @llvm.dbg.declare(metadata i32* %lp_nr, metadata !4336, metadata !DIExpression()), !dbg !4337
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !4338
  %call = call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %0), !dbg !4340
  %tobool = icmp ne i8 %call, 0, !dbg !4340
  br i1 %tobool, label %if.end, label %if.then, !dbg !4341

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4342
  br label %return, !dbg !4342

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt.addr, align 8, !dbg !4343
  %call1 = call i32 @lookup_stmt_eh_lp(%union.gimple_statement_d* %1), !dbg !4344
  store i32 %call1, i32* %lp_nr, align 4, !dbg !4345
  %2 = load i32, i32* %lp_nr, align 4, !dbg !4346
  %cmp = icmp eq i32 %2, 0, !dbg !4348
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !4349

if.then2:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !4350
  br label %return, !dbg !4350

if.end3:                                          ; preds = %if.end
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !4351
  %4 = load i32, i32* %lp_nr, align 4, !dbg !4352
  call void @add_stmt_to_eh_lp(%union.gimple_statement_d* %3, i32 %4), !dbg !4353
  store i8 1, i8* %retval, align 1, !dbg !4354
  br label %return, !dbg !4354

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %5 = load i8, i8* %retval, align 1, !dbg !4355
  ret i8 %5, !dbg !4355
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_refactor_eh() #0 !dbg !4356 {
entry:
  %0 = load i32, i32* @flag_exceptions, align 4, !dbg !4357
  %cmp = icmp ne i32 %0, 0, !dbg !4358
  %conv = zext i1 %cmp to i32, !dbg !4358
  %conv1 = trunc i32 %conv to i8, !dbg !4357
  ret i8 %conv1, !dbg !4359
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @refactor_eh() #0 !dbg !4360 {
entry:
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4361
  %call = call %struct.gimple_seq_d* @gimple_body(%union.tree_node* %0), !dbg !4362
  call void @refactor_eh_r(%struct.gimple_seq_d* %call), !dbg !4363
  ret i32 0, !dbg !4364
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_lower_resx() #0 !dbg !4365 {
entry:
  %0 = load i32, i32* @flag_exceptions, align 4, !dbg !4366
  %cmp = icmp ne i32 %0, 0, !dbg !4367
  %conv = zext i1 %cmp to i32, !dbg !4367
  %conv1 = trunc i32 %conv to i8, !dbg !4366
  ret i8 %conv1, !dbg !4368
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @execute_lower_resx() #0 !dbg !4369 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %mnt_map = alloca %struct.pointer_map_t*, align 8
  %dominance_invalidated = alloca i8, align 1
  %any_rewritten = alloca i8, align 1
  %last = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4370, metadata !DIExpression()), !dbg !4371
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t** %mnt_map, metadata !4372, metadata !DIExpression()), !dbg !4373
  call void @llvm.dbg.declare(metadata i8* %dominance_invalidated, metadata !4374, metadata !DIExpression()), !dbg !4375
  store i8 0, i8* %dominance_invalidated, align 1, !dbg !4375
  call void @llvm.dbg.declare(metadata i8* %any_rewritten, metadata !4376, metadata !DIExpression()), !dbg !4377
  store i8 0, i8* %any_rewritten, align 1, !dbg !4377
  %call = call %struct.pointer_map_t* @pointer_map_create(), !dbg !4378
  store %struct.pointer_map_t* %call, %struct.pointer_map_t** %mnt_map, align 8, !dbg !4379
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4380
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4380
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4380
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4380
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !4380
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4380
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !4380
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4380
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !4380
  br label %for.cond, !dbg !4380

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4382
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4382
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4382
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4382
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4382
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !4382
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4382
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !4382
  br i1 %cmp, label %for.body, label %for.end, !dbg !4380

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last, metadata !4384, metadata !DIExpression()), !dbg !4386
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4387
  %call3 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %8), !dbg !4388
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %last, align 8, !dbg !4386
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !4389
  %tobool = icmp ne %union.gimple_statement_d* %9, null, !dbg !4389
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4391

land.lhs.true:                                    ; preds = %for.body
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !4392
  %call4 = call zeroext i8 @is_gimple_resx(%union.gimple_statement_d* %10), !dbg !4393
  %conv = zext i8 %call4 to i32, !dbg !4393
  %tobool5 = icmp ne i32 %conv, 0, !dbg !4393
  br i1 %tobool5, label %if.then, label %if.end, !dbg !4394

if.then:                                          ; preds = %land.lhs.true
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4395
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !4397
  %13 = load %struct.pointer_map_t*, %struct.pointer_map_t** %mnt_map, align 8, !dbg !4398
  %call6 = call zeroext i8 @lower_resx(%struct.basic_block_def* %11, %union.gimple_statement_d* %12, %struct.pointer_map_t* %13), !dbg !4399
  %conv7 = zext i8 %call6 to i32, !dbg !4399
  %14 = load i8, i8* %dominance_invalidated, align 1, !dbg !4400
  %conv8 = zext i8 %14 to i32, !dbg !4400
  %or = or i32 %conv8, %conv7, !dbg !4400
  %conv9 = trunc i32 %or to i8, !dbg !4400
  store i8 %conv9, i8* %dominance_invalidated, align 1, !dbg !4400
  store i8 1, i8* %any_rewritten, align 1, !dbg !4401
  br label %if.end, !dbg !4402

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc, !dbg !4403

for.inc:                                          ; preds = %if.end
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4382
  %next_bb10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 6, !dbg !4382
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb10, align 8, !dbg !4382
  store %struct.basic_block_def* %16, %struct.basic_block_def** %bb, align 8, !dbg !4382
  br label %for.cond, !dbg !4382, !llvm.loop !4404

for.end:                                          ; preds = %for.cond
  %17 = load %struct.pointer_map_t*, %struct.pointer_map_t** %mnt_map, align 8, !dbg !4406
  call void @pointer_map_destroy(%struct.pointer_map_t* %17), !dbg !4407
  %18 = load i8, i8* %dominance_invalidated, align 1, !dbg !4408
  %tobool11 = icmp ne i8 %18, 0, !dbg !4408
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !4410

if.then12:                                        ; preds = %for.end
  call void @free_dominance_info(i32 1), !dbg !4411
  call void @free_dominance_info(i32 2), !dbg !4413
  br label %if.end13, !dbg !4414

if.end13:                                         ; preds = %if.then12, %for.end
  %19 = load i8, i8* %any_rewritten, align 1, !dbg !4415
  %conv14 = zext i8 %19 to i32, !dbg !4415
  %tobool15 = icmp ne i32 %conv14, 0, !dbg !4415
  %20 = zext i1 %tobool15 to i64, !dbg !4415
  %cond = select i1 %tobool15, i32 16384, i32 0, !dbg !4415
  ret i32 %cond, !dbg !4416
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_lower_eh_dispatch() #0 !dbg !4417 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4418
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4418
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !4419
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !4419
  %region_tree = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 0, !dbg !4420
  %2 = load %struct.eh_region_d*, %struct.eh_region_d** %region_tree, align 8, !dbg !4420
  %cmp = icmp ne %struct.eh_region_d* %2, null, !dbg !4421
  %conv = zext i1 %cmp to i32, !dbg !4421
  %conv1 = trunc i32 %conv to i8, !dbg !4418
  ret i8 %conv1, !dbg !4422
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @execute_lower_eh_dispatch() #0 !dbg !4423 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %any_rewritten = alloca i8, align 1
  %redirected = alloca i8, align 1
  %last = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4424, metadata !DIExpression()), !dbg !4425
  call void @llvm.dbg.declare(metadata i8* %any_rewritten, metadata !4426, metadata !DIExpression()), !dbg !4427
  store i8 0, i8* %any_rewritten, align 1, !dbg !4427
  call void @llvm.dbg.declare(metadata i8* %redirected, metadata !4428, metadata !DIExpression()), !dbg !4429
  store i8 0, i8* %redirected, align 1, !dbg !4429
  call void @assign_filter_values(), !dbg !4430
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4431
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4431
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4431
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4431
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !4431
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4431
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !4431
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4431
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !4431
  br label %for.cond, !dbg !4431

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4433
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4433
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4433
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4433
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4433
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !4433
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4433
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !4433
  br i1 %cmp, label %for.body, label %for.end, !dbg !4431

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last, metadata !4435, metadata !DIExpression()), !dbg !4437
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4438
  %call = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %8), !dbg !4439
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %last, align 8, !dbg !4437
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !4440
  %tobool = icmp ne %union.gimple_statement_d* %9, null, !dbg !4440
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4442

land.lhs.true:                                    ; preds = %for.body
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !4443
  %call3 = call i32 @gimple_code(%union.gimple_statement_d* %10), !dbg !4444
  %cmp4 = icmp eq i32 %call3, 15, !dbg !4445
  br i1 %cmp4, label %if.then, label %if.end, !dbg !4446

if.then:                                          ; preds = %land.lhs.true
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4447
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !4449
  %call5 = call zeroext i8 @lower_eh_dispatch(%struct.basic_block_def* %11, %union.gimple_statement_d* %12), !dbg !4450
  %conv = zext i8 %call5 to i32, !dbg !4450
  %13 = load i8, i8* %redirected, align 1, !dbg !4451
  %conv6 = zext i8 %13 to i32, !dbg !4451
  %or = or i32 %conv6, %conv, !dbg !4451
  %conv7 = trunc i32 %or to i8, !dbg !4451
  store i8 %conv7, i8* %redirected, align 1, !dbg !4451
  store i8 1, i8* %any_rewritten, align 1, !dbg !4452
  br label %if.end, !dbg !4453

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc, !dbg !4454

for.inc:                                          ; preds = %if.end
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4433
  %next_bb8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 6, !dbg !4433
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb8, align 8, !dbg !4433
  store %struct.basic_block_def* %15, %struct.basic_block_def** %bb, align 8, !dbg !4433
  br label %for.cond, !dbg !4433, !llvm.loop !4455

for.end:                                          ; preds = %for.cond
  %16 = load i8, i8* %redirected, align 1, !dbg !4457
  %tobool9 = icmp ne i8 %16, 0, !dbg !4457
  br i1 %tobool9, label %if.then10, label %if.end12, !dbg !4459

if.then10:                                        ; preds = %for.end
  %call11 = call zeroext i8 @delete_unreachable_blocks(), !dbg !4460
  br label %if.end12, !dbg !4460

if.end12:                                         ; preds = %if.then10, %for.end
  %17 = load i8, i8* %any_rewritten, align 1, !dbg !4461
  %conv13 = zext i8 %17 to i32, !dbg !4461
  %tobool14 = icmp ne i32 %conv13, 0, !dbg !4461
  %18 = zext i1 %tobool14 to i64, !dbg !4461
  %cond = select i1 %tobool14, i32 16384, i32 0, !dbg !4461
  ret i32 %cond, !dbg !4462
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_cleanup_eh() #0 !dbg !4463 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4464
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4464
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !4465
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !4465
  %cmp = icmp ne %struct.eh_status* %1, null, !dbg !4466
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4467

land.rhs:                                         ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4468
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !4468
  %eh2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 0, !dbg !4469
  %3 = load %struct.eh_status*, %struct.eh_status** %eh2, align 8, !dbg !4469
  %region_tree = getelementptr inbounds %struct.eh_status, %struct.eh_status* %3, i32 0, i32 0, !dbg !4470
  %4 = load %struct.eh_region_d*, %struct.eh_region_d** %region_tree, align 8, !dbg !4470
  %cmp3 = icmp ne %struct.eh_region_d* %4, null, !dbg !4471
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %5 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ], !dbg !4472
  %land.ext = zext i1 %5 to i32, !dbg !4467
  %conv = trunc i32 %land.ext to i8, !dbg !4464
  ret i8 %conv, !dbg !4473
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @execute_cleanup_eh() #0 !dbg !4474 {
entry:
  %retval = alloca i32, align 4
  %changed = alloca i8, align 1
  call void @remove_unreachable_handlers(), !dbg !4475
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4476
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4476
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !4478
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !4478
  %region_tree = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 0, !dbg !4479
  %2 = load %struct.eh_region_d*, %struct.eh_region_d** %region_tree, align 8, !dbg !4479
  %tobool = icmp ne %struct.eh_region_d* %2, null, !dbg !4476
  br i1 %tobool, label %land.lhs.true, label %if.end12, !dbg !4480

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* @optimize, align 4, !dbg !4481
  %tobool1 = icmp ne i32 %3, 0, !dbg !4481
  br i1 %tobool1, label %if.then, label %if.end12, !dbg !4482

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !4483, metadata !DIExpression()), !dbg !4485
  store i8 0, i8* %changed, align 1, !dbg !4485
  %call = call zeroext i8 @unsplit_all_eh(), !dbg !4486
  %conv = zext i8 %call to i32, !dbg !4486
  %4 = load i8, i8* %changed, align 1, !dbg !4487
  %conv2 = zext i8 %4 to i32, !dbg !4487
  %or = or i32 %conv2, %conv, !dbg !4487
  %conv3 = trunc i32 %or to i8, !dbg !4487
  store i8 %conv3, i8* %changed, align 1, !dbg !4487
  %call4 = call zeroext i8 @cleanup_all_empty_eh(), !dbg !4488
  %conv5 = zext i8 %call4 to i32, !dbg !4488
  %5 = load i8, i8* %changed, align 1, !dbg !4489
  %conv6 = zext i8 %5 to i32, !dbg !4489
  %or7 = or i32 %conv6, %conv5, !dbg !4489
  %conv8 = trunc i32 %or7 to i8, !dbg !4489
  store i8 %conv8, i8* %changed, align 1, !dbg !4489
  %6 = load i8, i8* %changed, align 1, !dbg !4490
  %tobool9 = icmp ne i8 %6, 0, !dbg !4490
  br i1 %tobool9, label %if.then10, label %if.end, !dbg !4492

if.then10:                                        ; preds = %if.then
  call void @free_dominance_info(i32 1), !dbg !4493
  call void @free_dominance_info(i32 2), !dbg !4495
  %call11 = call zeroext i8 @delete_unreachable_blocks(), !dbg !4496
  call void @remove_unreachable_handlers_no_lp(), !dbg !4497
  store i32 16416, i32* %retval, align 4, !dbg !4498
  br label %return, !dbg !4498

if.end:                                           ; preds = %if.then
  br label %if.end12, !dbg !4499

if.end12:                                         ; preds = %if.end, %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4, !dbg !4500
  br label %return, !dbg !4500

return:                                           ; preds = %if.end12, %if.then10
  %7 = load i32, i32* %retval, align 4, !dbg !4501
  ret i32 %7, !dbg !4501
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @verify_eh_edges(%union.gimple_statement_d* %stmt) #0 !dbg !4502 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %lp_nr = alloca i32, align 4
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %eh_edge = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4503, metadata !DIExpression()), !dbg !4504
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4505, metadata !DIExpression()), !dbg !4506
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4507
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !4508
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !4506
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !4509, metadata !DIExpression()), !dbg !4510
  store %struct.eh_landing_pad_d* null, %struct.eh_landing_pad_d** %lp, align 8, !dbg !4510
  call void @llvm.dbg.declare(metadata i32* %lp_nr, metadata !4511, metadata !DIExpression()), !dbg !4512
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4513, metadata !DIExpression()), !dbg !4514
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4515, metadata !DIExpression()), !dbg !4516
  call void @llvm.dbg.declare(metadata %struct.edge_def** %eh_edge, metadata !4517, metadata !DIExpression()), !dbg !4518
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4519
  %call1 = call i32 @lookup_stmt_eh_lp(%union.gimple_statement_d* %1), !dbg !4520
  store i32 %call1, i32* %lp_nr, align 4, !dbg !4521
  %2 = load i32, i32* %lp_nr, align 4, !dbg !4522
  %cmp = icmp sgt i32 %2, 0, !dbg !4524
  br i1 %cmp, label %if.then, label %if.end, !dbg !4525

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %lp_nr, align 4, !dbg !4526
  %call2 = call %struct.eh_landing_pad_d* @get_eh_landing_pad_from_number(i32 %3), !dbg !4527
  store %struct.eh_landing_pad_d* %call2, %struct.eh_landing_pad_d** %lp, align 8, !dbg !4528
  br label %if.end, !dbg !4529

if.end:                                           ; preds = %if.then, %entry
  store %struct.edge_def* null, %struct.edge_def** %eh_edge, align 8, !dbg !4530
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4531
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 1, !dbg !4531
  %call3 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !4531
  %5 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4531
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %5, i32 0, i32 0, !dbg !4531
  %7 = extractvalue { i32, %struct.VEC_edge_gc** } %call3, 0, !dbg !4531
  store i32 %7, i32* %6, align 8, !dbg !4531
  %8 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %5, i32 0, i32 1, !dbg !4531
  %9 = extractvalue { i32, %struct.VEC_edge_gc** } %call3, 1, !dbg !4531
  store %struct.VEC_edge_gc** %9, %struct.VEC_edge_gc*** %8, align 8, !dbg !4531
  %10 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4531
  %11 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4531
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false), !dbg !4531
  br label %for.cond, !dbg !4531

for.cond:                                         ; preds = %for.inc, %if.end
  %12 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4533
  %13 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %12, i32 0, i32 0, !dbg !4533
  %14 = load i32, i32* %13, align 8, !dbg !4533
  %15 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %12, i32 0, i32 1, !dbg !4533
  %16 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %15, align 8, !dbg !4533
  %call4 = call zeroext i8 @ei_cond(i32 %14, %struct.VEC_edge_gc** %16, %struct.edge_def** %e), !dbg !4533
  %tobool = icmp ne i8 %call4, 0, !dbg !4531
  br i1 %tobool, label %for.body, label %for.end, !dbg !4531

for.body:                                         ; preds = %for.cond
  %17 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4535
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %17, i32 0, i32 7, !dbg !4538
  %18 = load i32, i32* %flags, align 8, !dbg !4538
  %and = and i32 %18, 8, !dbg !4539
  %tobool5 = icmp ne i32 %and, 0, !dbg !4539
  br i1 %tobool5, label %if.then6, label %if.end10, !dbg !4540

if.then6:                                         ; preds = %for.body
  %19 = load %struct.edge_def*, %struct.edge_def** %eh_edge, align 8, !dbg !4541
  %tobool7 = icmp ne %struct.edge_def* %19, null, !dbg !4541
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !4544

if.then8:                                         ; preds = %if.then6
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4545
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 9, !dbg !4547
  %21 = load i32, i32* %index, align 8, !dbg !4547
  call void (i8*, ...) @error(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0), i32 %21), !dbg !4548
  store i8 1, i8* %retval, align 1, !dbg !4549
  br label %return, !dbg !4549

if.else:                                          ; preds = %if.then6
  %22 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4550
  store %struct.edge_def* %22, %struct.edge_def** %eh_edge, align 8, !dbg !4551
  br label %if.end9

if.end9:                                          ; preds = %if.else
  br label %if.end10, !dbg !4552

if.end10:                                         ; preds = %if.end9, %for.body
  br label %for.inc, !dbg !4553

for.inc:                                          ; preds = %if.end10
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4533
  br label %for.cond, !dbg !4533, !llvm.loop !4554

for.end:                                          ; preds = %for.cond
  %23 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !4556
  %cmp11 = icmp eq %struct.eh_landing_pad_d* %23, null, !dbg !4558
  br i1 %cmp11, label %if.then12, label %if.end17, !dbg !4559

if.then12:                                        ; preds = %for.end
  %24 = load %struct.edge_def*, %struct.edge_def** %eh_edge, align 8, !dbg !4560
  %tobool13 = icmp ne %struct.edge_def* %24, null, !dbg !4560
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !4563

if.then14:                                        ; preds = %if.then12
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4564
  %index15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 9, !dbg !4566
  %26 = load i32, i32* %index15, align 8, !dbg !4566
  call void (i8*, ...) @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0), i32 %26), !dbg !4567
  store i8 1, i8* %retval, align 1, !dbg !4568
  br label %return, !dbg !4568

if.end16:                                         ; preds = %if.then12
  store i8 0, i8* %retval, align 1, !dbg !4569
  br label %return, !dbg !4569

if.end17:                                         ; preds = %for.end
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4570
  %call18 = call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %27), !dbg !4572
  %tobool19 = icmp ne i8 %call18, 0, !dbg !4572
  br i1 %tobool19, label %if.end22, label %if.then20, !dbg !4573

if.then20:                                        ; preds = %if.end17
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4574
  %index21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 9, !dbg !4576
  %29 = load i32, i32* %index21, align 8, !dbg !4576
  call void (i8*, ...) @error(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.9, i64 0, i64 0), i32 %29), !dbg !4577
  store i8 1, i8* %retval, align 1, !dbg !4578
  br label %return, !dbg !4578

if.end22:                                         ; preds = %if.end17
  %30 = load %struct.edge_def*, %struct.edge_def** %eh_edge, align 8, !dbg !4579
  %cmp23 = icmp eq %struct.edge_def* %30, null, !dbg !4581
  br i1 %cmp23, label %if.then24, label %if.end26, !dbg !4582

if.then24:                                        ; preds = %if.end22
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4583
  %index25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %31, i32 0, i32 9, !dbg !4585
  %32 = load i32, i32* %index25, align 8, !dbg !4585
  call void (i8*, ...) @error(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.10, i64 0, i64 0), i32 %32), !dbg !4586
  store i8 1, i8* %retval, align 1, !dbg !4587
  br label %return, !dbg !4587

if.end26:                                         ; preds = %if.end22
  %33 = load %struct.edge_def*, %struct.edge_def** %eh_edge, align 8, !dbg !4588
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %33, i32 0, i32 1, !dbg !4590
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4590
  %35 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4591
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %35, i64 0, !dbg !4591
  %36 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !4591
  %post_landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %36, i32 0, i32 2, !dbg !4591
  %37 = load %union.tree_node*, %union.tree_node** %post_landing_pad, align 8, !dbg !4591
  %call27 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr, %union.tree_node* %37), !dbg !4591
  %cmp28 = icmp ne %struct.basic_block_def* %34, %call27, !dbg !4592
  br i1 %cmp28, label %if.then29, label %if.end33, !dbg !4593

if.then29:                                        ; preds = %if.end26
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4594
  %index30 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 9, !dbg !4596
  %39 = load i32, i32* %index30, align 8, !dbg !4596
  %40 = load %struct.edge_def*, %struct.edge_def** %eh_edge, align 8, !dbg !4597
  %dest31 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %40, i32 0, i32 1, !dbg !4598
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %dest31, align 8, !dbg !4598
  %index32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 9, !dbg !4599
  %42 = load i32, i32* %index32, align 8, !dbg !4599
  call void (i8*, ...) @error(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.11, i64 0, i64 0), i32 %39, i32 %42), !dbg !4600
  store i8 1, i8* %retval, align 1, !dbg !4601
  br label %return, !dbg !4601

if.end33:                                         ; preds = %if.end26
  store i8 0, i8* %retval, align 1, !dbg !4602
  br label %return, !dbg !4602

return:                                           ; preds = %if.end33, %if.then29, %if.then24, %if.then20, %if.end16, %if.then14, %if.then8
  %43 = load i8, i8* %retval, align 1, !dbg !4603
  ret i8 %43, !dbg !4603
}

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !4604 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !4607, metadata !DIExpression()), !dbg !4608
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !4609, metadata !DIExpression()), !dbg !4610
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !4611
  store i32 0, i32* %index, align 8, !dbg !4612
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !4613
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !4614
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !4615
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !4616
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !4616
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !4616
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !4617 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4621, metadata !DIExpression()), !dbg !4622
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !4623, metadata !DIExpression()), !dbg !4624
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4625
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !4625
  %5 = load i32, i32* %4, align 8, !dbg !4625
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !4625
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !4625
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !4625
  %tobool = icmp ne i8 %call, 0, !dbg !4625
  br i1 %tobool, label %if.else, label %if.then, !dbg !4627

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4628
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !4628
  %10 = load i32, i32* %9, align 8, !dbg !4628
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !4628
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !4628
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !4628
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !4630
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !4631
  store i8 1, i8* %retval, align 1, !dbg !4632
  br label %return, !dbg !4632

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !4633
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !4635
  store i8 0, i8* %retval, align 1, !dbg !4636
  br label %return, !dbg !4636

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !4637
  ret i8 %15, !dbg !4637
}

declare dso_local void @error(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !4638 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !4642, metadata !DIExpression()), !dbg !4643
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !4644
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !4644
  %1 = load i32, i32* %index, align 8, !dbg !4644
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !4644
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !4644
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !4644
  %5 = load i32, i32* %4, align 8, !dbg !4644
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !4644
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !4644
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !4644
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !4644
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4644

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !4644
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !4644
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !4644
  %11 = load i32, i32* %10, align 8, !dbg !4644
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !4644
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !4644
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !4644
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !4644
  br label %cond.end, !dbg !4644

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4644

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4644
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4644
  %cmp = icmp ult i32 %1, %call2, !dbg !4644
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !4644

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4644
  br label %cond.end5, !dbg !4644

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !4644

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !4644
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !4645
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !4646
  %15 = load i32, i32* %index7, align 8, !dbg !4647
  %inc = add i32 %15, 1, !dbg !4647
  store i32 %inc, i32* %index7, align 8, !dbg !4647
  ret void, !dbg !4648
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @verify_eh_dispatch_edge(%union.gimple_statement_d* %stmt) #0 !dbg !4649 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %r = alloca %struct.eh_region_d*, align 8
  %c = alloca %struct.eh_catch_d*, align 8
  %src = alloca %struct.basic_block_def*, align 8
  %dst = alloca %struct.basic_block_def*, align 8
  %want_fallthru = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %fall_edge = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp28 = alloca %struct.edge_iterator, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4650, metadata !DIExpression()), !dbg !4651
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r, metadata !4652, metadata !DIExpression()), !dbg !4653
  call void @llvm.dbg.declare(metadata %struct.eh_catch_d** %c, metadata !4654, metadata !DIExpression()), !dbg !4655
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %src, metadata !4656, metadata !DIExpression()), !dbg !4657
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dst, metadata !4658, metadata !DIExpression()), !dbg !4659
  call void @llvm.dbg.declare(metadata i8* %want_fallthru, metadata !4660, metadata !DIExpression()), !dbg !4661
  store i8 1, i8* %want_fallthru, align 1, !dbg !4661
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4662, metadata !DIExpression()), !dbg !4663
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4664, metadata !DIExpression()), !dbg !4665
  call void @llvm.dbg.declare(metadata %struct.edge_def** %fall_edge, metadata !4666, metadata !DIExpression()), !dbg !4667
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4668
  %call = call i32 @gimple_eh_dispatch_region(%union.gimple_statement_d* %0), !dbg !4669
  %call1 = call %struct.eh_region_d* @get_eh_region_from_number(i32 %call), !dbg !4670
  store %struct.eh_region_d* %call1, %struct.eh_region_d** %r, align 8, !dbg !4671
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4672
  %call2 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %1), !dbg !4673
  store %struct.basic_block_def* %call2, %struct.basic_block_def** %src, align 8, !dbg !4674
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4675
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !4675
  %call3 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !4675
  %3 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4675
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !4675
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call3, 0, !dbg !4675
  store i32 %5, i32* %4, align 8, !dbg !4675
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !4675
  %7 = extractvalue { i32, %struct.VEC_edge_gc** } %call3, 1, !dbg !4675
  store %struct.VEC_edge_gc** %7, %struct.VEC_edge_gc*** %6, align 8, !dbg !4675
  %8 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4675
  %9 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4675
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 16, i1 false), !dbg !4675
  br label %for.cond, !dbg !4675

for.cond:                                         ; preds = %for.inc, %entry
  %10 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4677
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %10, i32 0, i32 0, !dbg !4677
  %12 = load i32, i32* %11, align 8, !dbg !4677
  %13 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %10, i32 0, i32 1, !dbg !4677
  %14 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %13, align 8, !dbg !4677
  %call4 = call zeroext i8 @ei_cond(i32 %12, %struct.VEC_edge_gc** %14, %struct.edge_def** %e), !dbg !4677
  %tobool = icmp ne i8 %call4, 0, !dbg !4675
  br i1 %tobool, label %for.body, label %for.end, !dbg !4675

for.body:                                         ; preds = %for.cond
  %15 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4679
  %aux = getelementptr inbounds %struct.edge_def, %struct.edge_def* %15, i32 0, i32 3, !dbg !4679
  %16 = load i8*, i8** %aux, align 8, !dbg !4679
  %cmp = icmp eq i8* %16, null, !dbg !4679
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4679

cond.true:                                        ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 3978, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4679
  br label %cond.end, !dbg !4679

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !4679

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4679
  br label %for.inc, !dbg !4679

for.inc:                                          ; preds = %cond.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4677
  br label %for.cond, !dbg !4677, !llvm.loop !4680

for.end:                                          ; preds = %for.cond
  %17 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !4682
  %type = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %17, i32 0, i32 4, !dbg !4683
  %18 = load i32, i32* %type, align 4, !dbg !4683
  switch i32 %18, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb17
  ], !dbg !4684

sw.bb:                                            ; preds = %for.end
  %19 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !4685
  %u = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %19, i32 0, i32 5, !dbg !4688
  %eh_try = bitcast %union.eh_region_u* %u to %struct.eh_region_u_try*, !dbg !4689
  %first_catch = getelementptr inbounds %struct.eh_region_u_try, %struct.eh_region_u_try* %eh_try, i32 0, i32 0, !dbg !4690
  %20 = load %struct.eh_catch_d*, %struct.eh_catch_d** %first_catch, align 8, !dbg !4690
  store %struct.eh_catch_d* %20, %struct.eh_catch_d** %c, align 8, !dbg !4691
  br label %for.cond5, !dbg !4692

for.cond5:                                        ; preds = %for.inc15, %sw.bb
  %21 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !4693
  %tobool6 = icmp ne %struct.eh_catch_d* %21, null, !dbg !4695
  br i1 %tobool6, label %for.body7, label %for.end16, !dbg !4695

for.body7:                                        ; preds = %for.cond5
  %22 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4696
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %22, i64 0, !dbg !4696
  %23 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !4696
  %label = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %23, i32 0, i32 4, !dbg !4696
  %24 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !4696
  %call8 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr, %union.tree_node* %24), !dbg !4696
  store %struct.basic_block_def* %call8, %struct.basic_block_def** %dst, align 8, !dbg !4698
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4699
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %dst, align 8, !dbg !4700
  %call9 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %25, %struct.basic_block_def* %26), !dbg !4701
  store %struct.edge_def* %call9, %struct.edge_def** %e, align 8, !dbg !4702
  %27 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4703
  %cmp10 = icmp eq %struct.edge_def* %27, null, !dbg !4705
  br i1 %cmp10, label %if.then, label %if.end, !dbg !4706

if.then:                                          ; preds = %for.body7
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4707
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 9, !dbg !4709
  %29 = load i32, i32* %index, align 8, !dbg !4709
  call void (i8*, ...) @error(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.12, i64 0, i64 0), i32 %29), !dbg !4710
  store i8 1, i8* %retval, align 1, !dbg !4711
  br label %return, !dbg !4711

if.end:                                           ; preds = %for.body7
  %30 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4712
  %31 = bitcast %struct.edge_def* %30 to i8*, !dbg !4713
  %32 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4714
  %aux11 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %32, i32 0, i32 3, !dbg !4715
  store i8* %31, i8** %aux11, align 8, !dbg !4716
  %33 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !4717
  %type_list = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %33, i32 0, i32 2, !dbg !4719
  %34 = load %union.tree_node*, %union.tree_node** %type_list, align 8, !dbg !4719
  %cmp12 = icmp eq %union.tree_node* %34, null, !dbg !4720
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !4721

if.then13:                                        ; preds = %if.end
  store i8 0, i8* %want_fallthru, align 1, !dbg !4722
  br label %for.end16, !dbg !4724

if.end14:                                         ; preds = %if.end
  br label %for.inc15, !dbg !4725

for.inc15:                                        ; preds = %if.end14
  %35 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !4726
  %next_catch = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %35, i32 0, i32 0, !dbg !4727
  %36 = load %struct.eh_catch_d*, %struct.eh_catch_d** %next_catch, align 8, !dbg !4727
  store %struct.eh_catch_d* %36, %struct.eh_catch_d** %c, align 8, !dbg !4728
  br label %for.cond5, !dbg !4729, !llvm.loop !4730

for.end16:                                        ; preds = %if.then13, %for.cond5
  br label %sw.epilog, !dbg !4732

sw.bb17:                                          ; preds = %for.end
  %37 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4733
  %add.ptr18 = getelementptr inbounds %struct.function, %struct.function* %37, i64 0, !dbg !4733
  %38 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !4733
  %u19 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %38, i32 0, i32 5, !dbg !4733
  %allowed = bitcast %union.eh_region_u* %u19 to %struct.eh_region_u_allowed*, !dbg !4733
  %label20 = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed, i32 0, i32 1, !dbg !4733
  %39 = load %union.tree_node*, %union.tree_node** %label20, align 8, !dbg !4733
  %call21 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr18, %union.tree_node* %39), !dbg !4733
  store %struct.basic_block_def* %call21, %struct.basic_block_def** %dst, align 8, !dbg !4734
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4735
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %dst, align 8, !dbg !4736
  %call22 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %40, %struct.basic_block_def* %41), !dbg !4737
  store %struct.edge_def* %call22, %struct.edge_def** %e, align 8, !dbg !4738
  %42 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4739
  %cmp23 = icmp eq %struct.edge_def* %42, null, !dbg !4741
  br i1 %cmp23, label %if.then24, label %if.end26, !dbg !4742

if.then24:                                        ; preds = %sw.bb17
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4743
  %index25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %43, i32 0, i32 9, !dbg !4745
  %44 = load i32, i32* %index25, align 8, !dbg !4745
  call void (i8*, ...) @error(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.12, i64 0, i64 0), i32 %44), !dbg !4746
  store i8 1, i8* %retval, align 1, !dbg !4747
  br label %return, !dbg !4747

if.end26:                                         ; preds = %sw.bb17
  %45 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4748
  %46 = bitcast %struct.edge_def* %45 to i8*, !dbg !4749
  %47 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4750
  %aux27 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %47, i32 0, i32 3, !dbg !4751
  store i8* %46, i8** %aux27, align 8, !dbg !4752
  br label %sw.epilog, !dbg !4753

sw.default:                                       ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 4015, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4754
  br label %sw.epilog, !dbg !4755

sw.epilog:                                        ; preds = %sw.default, %if.end26, %for.end16
  store %struct.edge_def* null, %struct.edge_def** %fall_edge, align 8, !dbg !4756
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4757
  %succs29 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 1, !dbg !4757
  %call30 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs29), !dbg !4757
  %49 = bitcast %struct.edge_iterator* %tmp28 to { i32, %struct.VEC_edge_gc** }*, !dbg !4757
  %50 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %49, i32 0, i32 0, !dbg !4757
  %51 = extractvalue { i32, %struct.VEC_edge_gc** } %call30, 0, !dbg !4757
  store i32 %51, i32* %50, align 8, !dbg !4757
  %52 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %49, i32 0, i32 1, !dbg !4757
  %53 = extractvalue { i32, %struct.VEC_edge_gc** } %call30, 1, !dbg !4757
  store %struct.VEC_edge_gc** %53, %struct.VEC_edge_gc*** %52, align 8, !dbg !4757
  %54 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4757
  %55 = bitcast %struct.edge_iterator* %tmp28 to i8*, !dbg !4757
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 16, i1 false), !dbg !4757
  br label %for.cond31, !dbg !4757

for.cond31:                                       ; preds = %for.inc49, %sw.epilog
  %56 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4759
  %57 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %56, i32 0, i32 0, !dbg !4759
  %58 = load i32, i32* %57, align 8, !dbg !4759
  %59 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %56, i32 0, i32 1, !dbg !4759
  %60 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %59, align 8, !dbg !4759
  %call32 = call zeroext i8 @ei_cond(i32 %58, %struct.VEC_edge_gc** %60, %struct.edge_def** %e), !dbg !4759
  %tobool33 = icmp ne i8 %call32, 0, !dbg !4757
  br i1 %tobool33, label %for.body34, label %for.end50, !dbg !4757

for.body34:                                       ; preds = %for.cond31
  %61 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4761
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %61, i32 0, i32 7, !dbg !4764
  %62 = load i32, i32* %flags, align 8, !dbg !4764
  %and = and i32 %62, 1, !dbg !4765
  %tobool35 = icmp ne i32 %and, 0, !dbg !4765
  br i1 %tobool35, label %if.then36, label %if.else, !dbg !4766

if.then36:                                        ; preds = %for.body34
  %63 = load %struct.edge_def*, %struct.edge_def** %fall_edge, align 8, !dbg !4767
  %cmp37 = icmp ne %struct.edge_def* %63, null, !dbg !4770
  br i1 %cmp37, label %if.then38, label %if.end40, !dbg !4771

if.then38:                                        ; preds = %if.then36
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4772
  %index39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %64, i32 0, i32 9, !dbg !4774
  %65 = load i32, i32* %index39, align 8, !dbg !4774
  call void (i8*, ...) @error(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.13, i64 0, i64 0), i32 %65), !dbg !4775
  store i8 1, i8* %retval, align 1, !dbg !4776
  br label %return, !dbg !4776

if.end40:                                         ; preds = %if.then36
  %66 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4777
  store %struct.edge_def* %66, %struct.edge_def** %fall_edge, align 8, !dbg !4778
  br label %if.end48, !dbg !4779

if.else:                                          ; preds = %for.body34
  %67 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4780
  %aux41 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %67, i32 0, i32 3, !dbg !4782
  %68 = load i8*, i8** %aux41, align 8, !dbg !4782
  %tobool42 = icmp ne i8* %68, null, !dbg !4780
  br i1 %tobool42, label %if.then43, label %if.else45, !dbg !4783

if.then43:                                        ; preds = %if.else
  %69 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4784
  %aux44 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %69, i32 0, i32 3, !dbg !4785
  store i8* null, i8** %aux44, align 8, !dbg !4786
  br label %if.end47, !dbg !4784

if.else45:                                        ; preds = %if.else
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4787
  %index46 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %70, i32 0, i32 9, !dbg !4789
  %71 = load i32, i32* %index46, align 8, !dbg !4789
  call void (i8*, ...) @error(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.14, i64 0, i64 0), i32 %71), !dbg !4790
  store i8 1, i8* %retval, align 1, !dbg !4791
  br label %return, !dbg !4791

if.end47:                                         ; preds = %if.then43
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.end40
  br label %for.inc49, !dbg !4792

for.inc49:                                        ; preds = %if.end48
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4759
  br label %for.cond31, !dbg !4759, !llvm.loop !4793

for.end50:                                        ; preds = %for.cond31
  %72 = load %struct.edge_def*, %struct.edge_def** %fall_edge, align 8, !dbg !4795
  %cmp51 = icmp ne %struct.edge_def* %72, null, !dbg !4797
  %conv = zext i1 %cmp51 to i32, !dbg !4797
  %73 = load i8, i8* %want_fallthru, align 1, !dbg !4798
  %conv52 = zext i8 %73 to i32, !dbg !4798
  %xor = xor i32 %conv, %conv52, !dbg !4799
  %tobool53 = icmp ne i32 %xor, 0, !dbg !4799
  br i1 %tobool53, label %if.then54, label %if.end56, !dbg !4800

if.then54:                                        ; preds = %for.end50
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4801
  %index55 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %74, i32 0, i32 9, !dbg !4803
  %75 = load i32, i32* %index55, align 8, !dbg !4803
  call void (i8*, ...) @error(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.15, i64 0, i64 0), i32 %75), !dbg !4804
  store i8 1, i8* %retval, align 1, !dbg !4805
  br label %return, !dbg !4805

if.end56:                                         ; preds = %for.end50
  store i8 0, i8* %retval, align 1, !dbg !4806
  br label %return, !dbg !4806

return:                                           ; preds = %if.end56, %if.then54, %if.else45, %if.then38, %if.then24, %if.then
  %76 = load i8, i8* %retval, align 1, !dbg !4807
  ret i8 %76, !dbg !4807
}

declare dso_local %struct.edge_def* @find_edge(%struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local %struct.gimple_seq_d* @gimple_body(%union.tree_node*) #2

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

declare dso_local void @free(i8*) #2

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal void @collect_finally_tree_1(%struct.gimple_seq_d* %seq, %union.gimple_statement_d* %region) #0 !dbg !4808 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  %region.addr = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !4811, metadata !DIExpression()), !dbg !4812
  store %union.gimple_statement_d* %region, %union.gimple_statement_d** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %region.addr, metadata !4813, metadata !DIExpression()), !dbg !4814
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4815, metadata !DIExpression()), !dbg !4822
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !4823
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %0), !dbg !4825
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4825
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4825
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !4825
  br label %for.cond, !dbg !4826

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4827
  %tobool = icmp ne i8 %call, 0, !dbg !4829
  %lnot = xor i1 %tobool, true, !dbg !4829
  br i1 %lnot, label %for.body, label %for.end, !dbg !4830

for.body:                                         ; preds = %for.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4831
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %region.addr, align 8, !dbg !4832
  call void @collect_finally_tree(%union.gimple_statement_d* %call1, %union.gimple_statement_d* %3), !dbg !4833
  br label %for.inc, !dbg !4833

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4834
  br label %for.cond, !dbg !4835, !llvm.loop !4836

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4838
}

; Function Attrs: noinline nounwind uwtable
define internal void @lower_eh_constructs_1(%struct.leh_state* %state, %struct.gimple_seq_d* %seq) #0 !dbg !4839 {
entry:
  %state.addr = alloca %struct.leh_state*, align 8
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.leh_state* %state, %struct.leh_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_state** %state.addr, metadata !4842, metadata !DIExpression()), !dbg !4843
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !4844, metadata !DIExpression()), !dbg !4845
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4846, metadata !DIExpression()), !dbg !4847
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !4848
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %0), !dbg !4850
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4850
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4850
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !4850
  br label %for.cond, !dbg !4851

for.cond:                                         ; preds = %for.body, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4852
  %tobool = icmp ne i8 %call, 0, !dbg !4854
  %lnot = xor i1 %tobool, true, !dbg !4854
  br i1 %lnot, label %for.body, label %for.end, !dbg !4855

for.body:                                         ; preds = %for.cond
  %3 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !4856
  call void @lower_eh_constructs_2(%struct.leh_state* %3, %struct.gimple_stmt_iterator* %gsi), !dbg !4857
  br label %for.cond, !dbg !4858, !llvm.loop !4859

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4861
}

declare dso_local zeroext i8 @gimple_seq_may_fallthru(%struct.gimple_seq_d*) #2

declare dso_local void @gimple_seq_add_seq(%struct.gimple_seq_d**, %struct.gimple_seq_d*) #2

declare dso_local void @htab_delete(%struct.htab*) #2

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

declare dso_local i32 @function_needs_eh_personality(%struct.function*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.gimple_seq_d* %seq) #0 !dbg !4862 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !4865, metadata !DIExpression()), !dbg !4866
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !4867, metadata !DIExpression()), !dbg !4868
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !4869
  %call = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %0), !dbg !4870
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4871
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4872
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !4873
  %seq1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !4874
  store %struct.gimple_seq_d* %1, %struct.gimple_seq_d** %seq1, align 8, !dbg !4875
  %ptr2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4876
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr2, align 8, !dbg !4876
  %tobool = icmp ne %struct.gimple_seq_node_d* %2, null, !dbg !4877
  br i1 %tobool, label %land.lhs.true, label %cond.false, !dbg !4878

land.lhs.true:                                    ; preds = %entry
  %ptr3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4879
  %3 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr3, align 8, !dbg !4879
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %3, i32 0, i32 0, !dbg !4880
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4880
  %tobool4 = icmp ne %union.gimple_statement_d* %4, null, !dbg !4881
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !4882

cond.true:                                        ; preds = %land.lhs.true
  %ptr5 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !4883
  %5 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr5, align 8, !dbg !4883
  %stmt6 = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %5, i32 0, i32 0, !dbg !4884
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !4884
  %call7 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %6), !dbg !4885
  br label %cond.end, !dbg !4882

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !4882

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %call7, %cond.true ], [ null, %cond.false ], !dbg !4882
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !4886
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb, align 8, !dbg !4887
  ret void, !dbg !4888
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !4889 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4892, metadata !DIExpression()), !dbg !4893
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !4894
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4894
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !4895
  %conv = zext i1 %cmp to i32, !dbg !4895
  %conv1 = trunc i32 %conv to i8, !dbg !4896
  ret i8 %conv1, !dbg !4897
}

; Function Attrs: noinline nounwind uwtable
define internal void @collect_finally_tree(%union.gimple_statement_d* %stmt, %union.gimple_statement_d* %region) #0 !dbg !4898 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %region.addr = alloca %union.gimple_statement_d*, align 8
  %temp = alloca %union.treemple, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4901, metadata !DIExpression()), !dbg !4902
  store %union.gimple_statement_d* %region, %union.gimple_statement_d** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %region.addr, metadata !4903, metadata !DIExpression()), !dbg !4904
  call void @llvm.dbg.declare(metadata %union.treemple* %temp, metadata !4905, metadata !DIExpression()), !dbg !4906
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4907
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4908
  switch i32 %call, label %sw.default [
    i32 4, label %sw.bb
    i32 17, label %sw.bb2
    i32 11, label %sw.bb13
    i32 12, label %sw.bb15
  ], !dbg !4909

sw.bb:                                            ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4910
  %call1 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %1), !dbg !4912
  %t = bitcast %union.treemple* %temp to %union.tree_node**, !dbg !4913
  store %union.tree_node* %call1, %union.tree_node** %t, align 8, !dbg !4914
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %region.addr, align 8, !dbg !4915
  %coerce.dive = getelementptr inbounds %union.treemple, %union.treemple* %temp, i32 0, i32 0, !dbg !4916
  %3 = load %union.tree_node**, %union.tree_node*** %coerce.dive, align 8, !dbg !4916
  call void @record_in_finally_tree(%union.tree_node** %3, %union.gimple_statement_d* %2), !dbg !4916
  br label %sw.epilog, !dbg !4917

sw.bb2:                                           ; preds = %entry
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4918
  %call3 = call i32 @gimple_try_kind(%union.gimple_statement_d* %4), !dbg !4920
  %cmp = icmp eq i32 %call3, 2, !dbg !4921
  br i1 %cmp, label %if.then, label %if.else, !dbg !4922

if.then:                                          ; preds = %sw.bb2
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4923
  %g = bitcast %union.treemple* %temp to %union.gimple_statement_d**, !dbg !4925
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %g, align 8, !dbg !4926
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %region.addr, align 8, !dbg !4927
  %coerce.dive4 = getelementptr inbounds %union.treemple, %union.treemple* %temp, i32 0, i32 0, !dbg !4928
  %7 = load %union.tree_node**, %union.tree_node*** %coerce.dive4, align 8, !dbg !4928
  call void @record_in_finally_tree(%union.tree_node** %7, %union.gimple_statement_d* %6), !dbg !4928
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4929
  %call5 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %8), !dbg !4930
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4931
  call void @collect_finally_tree_1(%struct.gimple_seq_d* %call5, %union.gimple_statement_d* %9), !dbg !4932
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4933
  %call6 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %10), !dbg !4934
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %region.addr, align 8, !dbg !4935
  call void @collect_finally_tree_1(%struct.gimple_seq_d* %call6, %union.gimple_statement_d* %11), !dbg !4936
  br label %if.end12, !dbg !4937

if.else:                                          ; preds = %sw.bb2
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4938
  %call7 = call i32 @gimple_try_kind(%union.gimple_statement_d* %12), !dbg !4940
  %cmp8 = icmp eq i32 %call7, 1, !dbg !4941
  br i1 %cmp8, label %if.then9, label %if.end, !dbg !4942

if.then9:                                         ; preds = %if.else
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4943
  %call10 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %13), !dbg !4945
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %region.addr, align 8, !dbg !4946
  call void @collect_finally_tree_1(%struct.gimple_seq_d* %call10, %union.gimple_statement_d* %14), !dbg !4947
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4948
  %call11 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %15), !dbg !4949
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %region.addr, align 8, !dbg !4950
  call void @collect_finally_tree_1(%struct.gimple_seq_d* %call11, %union.gimple_statement_d* %16), !dbg !4951
  br label %if.end, !dbg !4952

if.end:                                           ; preds = %if.then9, %if.else
  br label %if.end12

if.end12:                                         ; preds = %if.end, %if.then
  br label %sw.epilog, !dbg !4953

sw.bb13:                                          ; preds = %entry
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4954
  %call14 = call %struct.gimple_seq_d* @gimple_catch_handler(%union.gimple_statement_d* %17), !dbg !4955
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %region.addr, align 8, !dbg !4956
  call void @collect_finally_tree_1(%struct.gimple_seq_d* %call14, %union.gimple_statement_d* %18), !dbg !4957
  br label %sw.epilog, !dbg !4958

sw.bb15:                                          ; preds = %entry
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4959
  %call16 = call %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %19), !dbg !4960
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %region.addr, align 8, !dbg !4961
  call void @collect_finally_tree_1(%struct.gimple_seq_d* %call16, %union.gimple_statement_d* %20), !dbg !4962
  br label %sw.epilog, !dbg !4963

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !4964

sw.epilog:                                        ; preds = %sw.default, %sw.bb15, %sw.bb13, %if.end12, %sw.bb
  ret void, !dbg !4965
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !4966 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4969, metadata !DIExpression()), !dbg !4970
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !4971
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4971
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !4972
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4972
  ret %union.gimple_statement_d* %1, !dbg !4973
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !4974 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !4978, metadata !DIExpression()), !dbg !4979
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !4980
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !4981
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4981
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !4982
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !4982
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !4983
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !4984
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !4985
  ret void, !dbg !4986
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !4987 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !4993, metadata !DIExpression()), !dbg !4994
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !4995
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !4995
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4995

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !4996
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !4997
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !4997
  br label %cond.end, !dbg !4995

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4995

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !4995
  ret %struct.gimple_seq_node_d* %cond, !dbg !4998
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %gs) #0 !dbg !4999 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5002, metadata !DIExpression()), !dbg !5003
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5004
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !5005
  ret %union.tree_node* %call, !dbg !5006
}

; Function Attrs: noinline nounwind uwtable
define internal void @record_in_finally_tree(%union.tree_node** %child.coerce, %union.gimple_statement_d* %parent) #0 !dbg !5007 {
entry:
  %child = alloca %union.treemple, align 8
  %parent.addr = alloca %union.gimple_statement_d*, align 8
  %n = alloca %struct.finally_tree_node*, align 8
  %slot = alloca i8**, align 8
  %coerce.dive = getelementptr inbounds %union.treemple, %union.treemple* %child, i32 0, i32 0
  store %union.tree_node** %child.coerce, %union.tree_node*** %coerce.dive, align 8
  call void @llvm.dbg.declare(metadata %union.treemple* %child, metadata !5010, metadata !DIExpression()), !dbg !5011
  store %union.gimple_statement_d* %parent, %union.gimple_statement_d** %parent.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %parent.addr, metadata !5012, metadata !DIExpression()), !dbg !5013
  call void @llvm.dbg.declare(metadata %struct.finally_tree_node** %n, metadata !5014, metadata !DIExpression()), !dbg !5015
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !5016, metadata !DIExpression()), !dbg !5017
  %call = call i8* @xmalloc(i64 16), !dbg !5018
  %0 = bitcast i8* %call to %struct.finally_tree_node*, !dbg !5018
  store %struct.finally_tree_node* %0, %struct.finally_tree_node** %n, align 8, !dbg !5019
  %1 = load %struct.finally_tree_node*, %struct.finally_tree_node** %n, align 8, !dbg !5020
  %child1 = getelementptr inbounds %struct.finally_tree_node, %struct.finally_tree_node* %1, i32 0, i32 0, !dbg !5021
  %2 = bitcast %union.treemple* %child1 to i8*, !dbg !5022
  %3 = bitcast %union.treemple* %child to i8*, !dbg !5022
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 8, i1 false), !dbg !5022
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %parent.addr, align 8, !dbg !5023
  %5 = load %struct.finally_tree_node*, %struct.finally_tree_node** %n, align 8, !dbg !5024
  %parent2 = getelementptr inbounds %struct.finally_tree_node, %struct.finally_tree_node* %5, i32 0, i32 1, !dbg !5025
  store %union.gimple_statement_d* %4, %union.gimple_statement_d** %parent2, align 8, !dbg !5026
  %6 = load %struct.htab*, %struct.htab** @finally_tree, align 8, !dbg !5027
  %7 = load %struct.finally_tree_node*, %struct.finally_tree_node** %n, align 8, !dbg !5028
  %8 = bitcast %struct.finally_tree_node* %7 to i8*, !dbg !5028
  %call3 = call i8** @htab_find_slot(%struct.htab* %6, i8* %8, i32 1), !dbg !5029
  store i8** %call3, i8*** %slot, align 8, !dbg !5030
  %9 = load i8**, i8*** %slot, align 8, !dbg !5031
  %10 = load i8*, i8** %9, align 8, !dbg !5031
  %tobool = icmp ne i8* %10, null, !dbg !5031
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5031

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 235, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5031
  br label %cond.end, !dbg !5031

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5031

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5031
  %11 = load %struct.finally_tree_node*, %struct.finally_tree_node** %n, align 8, !dbg !5032
  %12 = bitcast %struct.finally_tree_node* %11 to i8*, !dbg !5032
  %13 = load i8**, i8*** %slot, align 8, !dbg !5033
  store i8* %12, i8** %13, align 8, !dbg !5034
  ret void, !dbg !5035
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_try_kind(%union.gimple_statement_d* %gs) #0 !dbg !5036 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5039, metadata !DIExpression()), !dbg !5040
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5041
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5042
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5043
  %bf.load = load i32, i32* %1, align 8, !dbg !5043
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5043
  %and = and i32 %bf.lshr, 3, !dbg !5044
  ret i32 %and, !dbg !5045
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %gs) #0 !dbg !5046 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5049, metadata !DIExpression()), !dbg !5050
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5051
  %gimple_try = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_try*, !dbg !5052
  %eval = getelementptr inbounds %struct.gimple_statement_try, %struct.gimple_statement_try* %gimple_try, i32 0, i32 1, !dbg !5053
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %eval, align 8, !dbg !5053
  ret %struct.gimple_seq_d* %1, !dbg !5054
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %gs) #0 !dbg !5055 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5056, metadata !DIExpression()), !dbg !5057
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5058
  %gimple_try = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_try*, !dbg !5059
  %cleanup = getelementptr inbounds %struct.gimple_statement_try, %struct.gimple_statement_try* %gimple_try, i32 0, i32 2, !dbg !5060
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup, align 8, !dbg !5060
  ret %struct.gimple_seq_d* %1, !dbg !5061
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_catch_handler(%union.gimple_statement_d* %gs) #0 !dbg !5062 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5063, metadata !DIExpression()), !dbg !5064
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5065
  %gimple_catch = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_catch*, !dbg !5066
  %handler = getelementptr inbounds %struct.gimple_statement_catch, %struct.gimple_statement_catch* %gimple_catch, i32 0, i32 2, !dbg !5067
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %handler, align 8, !dbg !5067
  ret %struct.gimple_seq_d* %1, !dbg !5068
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %gs) #0 !dbg !5069 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5070, metadata !DIExpression()), !dbg !5071
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5072
  %gimple_eh_filter = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_eh_filter*, !dbg !5073
  %failure = getelementptr inbounds %struct.gimple_statement_eh_filter, %struct.gimple_statement_eh_filter* %gimple_eh_filter, i32 0, i32 2, !dbg !5074
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %failure, align 8, !dbg !5074
  ret %struct.gimple_seq_d* %1, !dbg !5075
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5076 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5079, metadata !DIExpression()), !dbg !5080
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5081, metadata !DIExpression()), !dbg !5082
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5083
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5085
  %tobool = icmp ne i8 %call, 0, !dbg !5085
  br i1 %tobool, label %if.then, label %if.else, !dbg !5086

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5087
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !5089
  %2 = load i32, i32* %i.addr, align 4, !dbg !5090
  %idxprom = zext i32 %2 to i64, !dbg !5089
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !5089
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5089
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !5091
  br label %return, !dbg !5091

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5092
  br label %return, !dbg !5092

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5093
  ret %union.tree_node* %4, !dbg !5093
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !5094 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5095, metadata !DIExpression()), !dbg !5096
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5097
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5098
  %cmp = icmp uge i32 %call, 1, !dbg !5099
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5100

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5101
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5102
  %cmp2 = icmp ule i32 %call1, 9, !dbg !5103
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !5104
  %land.ext = zext i1 %2 to i32, !dbg !5100
  %conv = trunc i32 %land.ext to i8, !dbg !5098
  ret i8 %conv, !dbg !5105
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !5106 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5109, metadata !DIExpression()), !dbg !5110
  call void @llvm.dbg.declare(metadata i64* %off, metadata !5111, metadata !DIExpression()), !dbg !5112
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5113
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !5114
  %idxprom = zext i32 %call to i64, !dbg !5115
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !5115
  %1 = load i64, i64* %arrayidx, align 8, !dbg !5115
  store i64 %1, i64* %off, align 8, !dbg !5116
  %2 = load i64, i64* %off, align 8, !dbg !5117
  %cmp = icmp ne i64 %2, 0, !dbg !5117
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5117

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5117
  br label %cond.end, !dbg !5117

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5117

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5117
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5118
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !5119
  %5 = load i64, i64* %off, align 8, !dbg !5120
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !5121
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !5122
  ret %union.tree_node** %6, !dbg !5123
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !5124 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5127, metadata !DIExpression()), !dbg !5128
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5129
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5130
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !5131
  ret i32 %call1, !dbg !5132
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !5133 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5136, metadata !DIExpression()), !dbg !5137
  %0 = load i32, i32* %code.addr, align 4, !dbg !5138
  %idxprom = zext i32 %0 to i64, !dbg !5139
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !5139
  %1 = load i32, i32* %arrayidx, align 4, !dbg !5139
  ret i32 %1, !dbg !5140
}

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @lower_eh_constructs_2(%struct.leh_state* %state, %struct.gimple_stmt_iterator* %gsi) #0 !dbg !5141 {
entry:
  %state.addr = alloca %struct.leh_state*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %replace = alloca %struct.gimple_seq_d*, align 8
  %x = alloca %union.gimple_statement_d*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %nr = alloca %union.tree_node*, align 8
  %lhs44 = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %s = alloca %union.gimple_statement_d*, align 8
  store %struct.leh_state* %state, %struct.leh_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_state** %state.addr, metadata !5144, metadata !DIExpression()), !dbg !5145
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !5146, metadata !DIExpression()), !dbg !5147
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %replace, metadata !5148, metadata !DIExpression()), !dbg !5149
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %x, metadata !5150, metadata !DIExpression()), !dbg !5151
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5152, metadata !DIExpression()), !dbg !5153
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5154
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !5155
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !5153
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5156
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5157
  switch i32 %call1, label %sw.default107 [
    i32 8, label %sw.bb
    i32 6, label %sw.bb20
    i32 1, label %sw.bb80
    i32 3, label %sw.bb80
    i32 9, label %sw.bb80
    i32 5, label %sw.bb81
    i32 17, label %sw.bb82
  ], !dbg !5158

sw.bb:                                            ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !5159, metadata !DIExpression()), !dbg !5162
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5163
  %call2 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %2), !dbg !5164
  store %union.tree_node* %call2, %union.tree_node** %fndecl, align 8, !dbg !5162
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !5165, metadata !DIExpression()), !dbg !5166
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !5167, metadata !DIExpression()), !dbg !5168
  %3 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5169
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !5169
  br i1 %tobool, label %land.lhs.true, label %if.end19, !dbg !5171

land.lhs.true:                                    ; preds = %sw.bb
  %4 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5172
  %function_decl = bitcast %union.tree_node* %4 to %struct.tree_function_decl*, !dbg !5172
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !5172
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !5172
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !5172
  %bf.clear = and i32 %bf.lshr, 3, !dbg !5172
  %cmp = icmp eq i32 %bf.clear, 3, !dbg !5173
  br i1 %cmp, label %if.then, label %if.end19, !dbg !5174

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5175
  %function_decl3 = bitcast %union.tree_node* %5 to %struct.tree_function_decl*, !dbg !5175
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl3, i32 0, i32 5, !dbg !5175
  %bf.load4 = load i32, i32* %function_code, align 8, !dbg !5175
  %bf.clear5 = and i32 %bf.load4, 2047, !dbg !5175
  switch i32 %bf.clear5, label %sw.default [
    i32 552, label %sw.bb6
    i32 553, label %sw.bb12
    i32 554, label %sw.bb18
  ], !dbg !5176

sw.bb6:                                           ; preds = %if.then
  %6 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5177
  %ehp_region = getelementptr inbounds %struct.leh_state, %struct.leh_state* %6, i32 0, i32 1, !dbg !5180
  %7 = load %struct.eh_region_d*, %struct.eh_region_d** %ehp_region, align 8, !dbg !5180
  %tobool7 = icmp ne %struct.eh_region_d* %7, null, !dbg !5177
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !5181

if.then8:                                         ; preds = %sw.bb6
  call void @llvm.dbg.declare(metadata %union.tree_node** %nr, metadata !5182, metadata !DIExpression()), !dbg !5184
  %8 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5185
  %ehp_region9 = getelementptr inbounds %struct.leh_state, %struct.leh_state* %8, i32 0, i32 1, !dbg !5186
  %9 = load %struct.eh_region_d*, %struct.eh_region_d** %ehp_region9, align 8, !dbg !5186
  %index = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %9, i32 0, i32 3, !dbg !5187
  %10 = load i32, i32* %index, align 8, !dbg !5187
  %conv = sext i32 %10 to i64, !dbg !5185
  %call10 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv), !dbg !5188
  store %union.tree_node* %call10, %union.tree_node** %nr, align 8, !dbg !5184
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5189
  %12 = load %union.tree_node*, %union.tree_node** %nr, align 8, !dbg !5190
  call void @gimple_call_set_arg(%union.gimple_statement_d* %11, i32 0, %union.tree_node* %12), !dbg !5191
  br label %if.end, !dbg !5192

if.else:                                          ; preds = %sw.bb6
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !5193
  %call11 = call %union.tree_node* @build_int_cst(%union.tree_node* %13, i64 0), !dbg !5195
  store %union.tree_node* %call11, %union.tree_node** %rhs, align 8, !dbg !5196
  br label %do_replace, !dbg !5197

if.end:                                           ; preds = %if.then8
  br label %sw.epilog, !dbg !5198

sw.bb12:                                          ; preds = %if.then
  %14 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5199
  %common = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !5199
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5199
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5199
  %common13 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !5199
  %type14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2, !dbg !5199
  %16 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !5199
  %call15 = call %union.tree_node* @build_int_cst(%union.tree_node* %16, i64 0), !dbg !5200
  store %union.tree_node* %call15, %union.tree_node** %rhs, align 8, !dbg !5201
  br label %do_replace, !dbg !5202

do_replace:                                       ; preds = %sw.bb12, %if.else
  call void @llvm.dbg.label(metadata !5203), !dbg !5204
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5205
  %call16 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %17), !dbg !5206
  store %union.tree_node* %call16, %union.tree_node** %lhs, align 8, !dbg !5207
  %18 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5208
  %19 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5208
  %call17 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %18, %union.tree_node* %19), !dbg !5208
  store %union.gimple_statement_d* %call17, %union.gimple_statement_d** %x, align 8, !dbg !5209
  %20 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5210
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !5211
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %20, %union.gimple_statement_d* %21, i32 1), !dbg !5212
  br label %sw.bb18, !dbg !5212

sw.bb18:                                          ; preds = %if.then, %do_replace
  %22 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5213
  call void @gsi_remove(%struct.gimple_stmt_iterator* %22, i8 zeroext 1), !dbg !5214
  br label %return, !dbg !5215

sw.default:                                       ; preds = %if.then
  br label %sw.epilog, !dbg !5216

sw.epilog:                                        ; preds = %sw.default, %if.end
  br label %if.end19, !dbg !5217

if.end19:                                         ; preds = %sw.epilog, %land.lhs.true, %sw.bb
  br label %sw.bb20, !dbg !5218

sw.bb20:                                          ; preds = %entry, %if.end19
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5219
  %call21 = call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %23), !dbg !5221
  %conv22 = zext i8 %call21 to i32, !dbg !5221
  %tobool23 = icmp ne i32 %conv22, 0, !dbg !5221
  br i1 %tobool23, label %land.lhs.true24, label %if.end70, !dbg !5222

land.lhs.true24:                                  ; preds = %sw.bb20
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5223
  %call25 = call zeroext i8 @gimple_has_lhs(%union.gimple_statement_d* %24), !dbg !5224
  %conv26 = zext i8 %call25 to i32, !dbg !5224
  %tobool27 = icmp ne i32 %conv26, 0, !dbg !5224
  br i1 %tobool27, label %land.lhs.true28, label %if.end70, !dbg !5225

land.lhs.true28:                                  ; preds = %land.lhs.true24
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5226
  %call29 = call zeroext i8 @gimple_stmt_may_fallthru(%union.gimple_statement_d* %25), !dbg !5227
  %conv30 = zext i8 %call29 to i32, !dbg !5227
  %tobool31 = icmp ne i32 %conv30, 0, !dbg !5227
  br i1 %tobool31, label %land.lhs.true32, label %if.end70, !dbg !5228

land.lhs.true32:                                  ; preds = %land.lhs.true28
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5229
  %call33 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %26), !dbg !5230
  %call34 = call zeroext i8 @tree_could_throw_p(%union.tree_node* %call33), !dbg !5231
  %tobool35 = icmp ne i8 %call34, 0, !dbg !5231
  br i1 %tobool35, label %if.end70, label %land.lhs.true36, !dbg !5232

land.lhs.true36:                                  ; preds = %land.lhs.true32
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5233
  %call37 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %27), !dbg !5233
  %common38 = bitcast %union.tree_node* %call37 to %struct.tree_common*, !dbg !5233
  %type39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 2, !dbg !5233
  %28 = load %union.tree_node*, %union.tree_node** %type39, align 8, !dbg !5233
  %call40 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %28), !dbg !5234
  %conv41 = zext i8 %call40 to i32, !dbg !5234
  %tobool42 = icmp ne i32 %conv41, 0, !dbg !5234
  br i1 %tobool42, label %if.then43, label %if.end70, !dbg !5235

if.then43:                                        ; preds = %land.lhs.true36
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs44, metadata !5236, metadata !DIExpression()), !dbg !5238
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5239
  %call45 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %29), !dbg !5240
  store %union.tree_node* %call45, %union.tree_node** %lhs44, align 8, !dbg !5238
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !5241, metadata !DIExpression()), !dbg !5242
  %30 = load %union.tree_node*, %union.tree_node** %lhs44, align 8, !dbg !5243
  %common46 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !5243
  %type47 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common46, i32 0, i32 2, !dbg !5243
  %31 = load %union.tree_node*, %union.tree_node** %type47, align 8, !dbg !5243
  %call48 = call %union.tree_node* @create_tmp_var(%union.tree_node* %31, i8* null), !dbg !5244
  store %union.tree_node* %call48, %union.tree_node** %tmp, align 8, !dbg !5242
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s, metadata !5245, metadata !DIExpression()), !dbg !5246
  %32 = load %union.tree_node*, %union.tree_node** %lhs44, align 8, !dbg !5247
  %33 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !5247
  %call49 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %32, %union.tree_node* %33), !dbg !5247
  store %union.gimple_statement_d* %call49, %union.gimple_statement_d** %s, align 8, !dbg !5246
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s, align 8, !dbg !5248
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5249
  %call50 = call i32 @gimple_location(%union.gimple_statement_d* %35), !dbg !5250
  call void @gimple_set_location(%union.gimple_statement_d* %34, i32 %call50), !dbg !5251
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s, align 8, !dbg !5252
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5253
  %call51 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %37), !dbg !5254
  call void @gimple_set_block(%union.gimple_statement_d* %36, %union.tree_node* %call51), !dbg !5255
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5256
  %39 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !5257
  call void @gimple_set_lhs(%union.gimple_statement_d* %38, %union.tree_node* %39), !dbg !5258
  %40 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !5259
  %common52 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !5259
  %type53 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common52, i32 0, i32 2, !dbg !5259
  %41 = load %union.tree_node*, %union.tree_node** %type53, align 8, !dbg !5259
  %base = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !5259
  %42 = bitcast %struct.tree_base* %base to i64*, !dbg !5259
  %bf.load54 = load i64, i64* %42, align 8, !dbg !5259
  %bf.clear55 = and i64 %bf.load54, 65535, !dbg !5259
  %bf.cast = trunc i64 %bf.clear55 to i32, !dbg !5259
  %cmp56 = icmp eq i32 %bf.cast, 13, !dbg !5261
  br i1 %cmp56, label %if.then66, label %lor.lhs.false, !dbg !5262

lor.lhs.false:                                    ; preds = %if.then43
  %43 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !5263
  %common58 = bitcast %union.tree_node* %43 to %struct.tree_common*, !dbg !5263
  %type59 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common58, i32 0, i32 2, !dbg !5263
  %44 = load %union.tree_node*, %union.tree_node** %type59, align 8, !dbg !5263
  %base60 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !5263
  %45 = bitcast %struct.tree_base* %base60 to i64*, !dbg !5263
  %bf.load61 = load i64, i64* %45, align 8, !dbg !5263
  %bf.clear62 = and i64 %bf.load61, 65535, !dbg !5263
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !5263
  %cmp64 = icmp eq i32 %bf.cast63, 14, !dbg !5264
  br i1 %cmp64, label %if.then66, label %if.end69, !dbg !5265

if.then66:                                        ; preds = %lor.lhs.false, %if.then43
  %46 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !5266
  %decl_common = bitcast %union.tree_node* %46 to %struct.tree_decl_common*, !dbg !5266
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !5266
  %47 = bitcast i40* %gimple_reg_flag to i64*, !dbg !5266
  %bf.load67 = load i64, i64* %47, align 8, !dbg !5267
  %bf.clear68 = and i64 %bf.load67, -134217729, !dbg !5267
  %bf.set = or i64 %bf.clear68, 134217728, !dbg !5267
  store i64 %bf.set, i64* %47, align 8, !dbg !5267
  br label %if.end69, !dbg !5266

if.end69:                                         ; preds = %if.then66, %lor.lhs.false
  %48 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5268
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s, align 8, !dbg !5269
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %48, %union.gimple_statement_d* %49, i32 1), !dbg !5270
  br label %if.end70, !dbg !5271

if.end70:                                         ; preds = %if.end69, %land.lhs.true36, %land.lhs.true32, %land.lhs.true28, %land.lhs.true24, %sw.bb20
  %50 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5272
  %cur_region = getelementptr inbounds %struct.leh_state, %struct.leh_state* %50, i32 0, i32 0, !dbg !5274
  %51 = load %struct.eh_region_d*, %struct.eh_region_d** %cur_region, align 8, !dbg !5274
  %tobool71 = icmp ne %struct.eh_region_d* %51, null, !dbg !5272
  br i1 %tobool71, label %land.lhs.true72, label %if.end79, !dbg !5275

land.lhs.true72:                                  ; preds = %if.end70
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5276
  %call73 = call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %52), !dbg !5277
  %conv74 = zext i8 %call73 to i32, !dbg !5277
  %tobool75 = icmp ne i32 %conv74, 0, !dbg !5277
  br i1 %tobool75, label %if.then76, label %if.end79, !dbg !5278

if.then76:                                        ; preds = %land.lhs.true72
  %53 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5279
  %cur_region77 = getelementptr inbounds %struct.leh_state, %struct.leh_state* %53, i32 0, i32 0, !dbg !5281
  %54 = load %struct.eh_region_d*, %struct.eh_region_d** %cur_region77, align 8, !dbg !5281
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5282
  call void @record_stmt_eh_region(%struct.eh_region_d* %54, %union.gimple_statement_d* %55), !dbg !5283
  %56 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5284
  %cur_region78 = getelementptr inbounds %struct.leh_state, %struct.leh_state* %56, i32 0, i32 0, !dbg !5285
  %57 = load %struct.eh_region_d*, %struct.eh_region_d** %cur_region78, align 8, !dbg !5285
  call void @note_eh_region_may_contain_throw(%struct.eh_region_d* %57), !dbg !5286
  br label %if.end79, !dbg !5287

if.end79:                                         ; preds = %if.then76, %land.lhs.true72, %if.end70
  br label %sw.epilog108, !dbg !5288

sw.bb80:                                          ; preds = %entry, %entry, %entry
  %58 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5289
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5290
  call void @maybe_record_in_goto_queue(%struct.leh_state* %58, %union.gimple_statement_d* %59), !dbg !5291
  br label %sw.epilog108, !dbg !5292

sw.bb81:                                          ; preds = %entry
  br label %sw.epilog108, !dbg !5293

sw.bb82:                                          ; preds = %entry
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5294
  %call83 = call i32 @gimple_try_kind(%union.gimple_statement_d* %60), !dbg !5296
  %cmp84 = icmp eq i32 %call83, 2, !dbg !5297
  br i1 %cmp84, label %if.then86, label %if.else88, !dbg !5298

if.then86:                                        ; preds = %sw.bb82
  %61 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5299
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5300
  %call87 = call %struct.gimple_seq_d* @lower_try_finally(%struct.leh_state* %61, %union.gimple_statement_d* %62), !dbg !5301
  store %struct.gimple_seq_d* %call87, %struct.gimple_seq_d** %replace, align 8, !dbg !5302
  br label %if.end106, !dbg !5303

if.else88:                                        ; preds = %sw.bb82
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5304
  %call89 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %63), !dbg !5306
  %call90 = call %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %call89), !dbg !5307
  store %union.gimple_statement_d* %call90, %union.gimple_statement_d** %x, align 8, !dbg !5308
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !5309
  %tobool91 = icmp ne %union.gimple_statement_d* %64, null, !dbg !5309
  br i1 %tobool91, label %if.else94, label %if.then92, !dbg !5311

if.then92:                                        ; preds = %if.else88
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5312
  %call93 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %65), !dbg !5314
  store %struct.gimple_seq_d* %call93, %struct.gimple_seq_d** %replace, align 8, !dbg !5315
  %66 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5316
  %67 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %replace, align 8, !dbg !5317
  call void @lower_eh_constructs_1(%struct.leh_state* %66, %struct.gimple_seq_d* %67), !dbg !5318
  br label %if.end105, !dbg !5319

if.else94:                                        ; preds = %if.else88
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !5320
  %call95 = call i32 @gimple_code(%union.gimple_statement_d* %68), !dbg !5321
  switch i32 %call95, label %sw.default102 [
    i32 11, label %sw.bb96
    i32 12, label %sw.bb98
    i32 13, label %sw.bb100
  ], !dbg !5322

sw.bb96:                                          ; preds = %if.else94
  %69 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5323
  %70 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5325
  %call97 = call %struct.gimple_seq_d* @lower_catch(%struct.leh_state* %69, %union.gimple_statement_d* %70), !dbg !5326
  store %struct.gimple_seq_d* %call97, %struct.gimple_seq_d** %replace, align 8, !dbg !5327
  br label %sw.epilog104, !dbg !5328

sw.bb98:                                          ; preds = %if.else94
  %71 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5329
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5330
  %call99 = call %struct.gimple_seq_d* @lower_eh_filter(%struct.leh_state* %71, %union.gimple_statement_d* %72), !dbg !5331
  store %struct.gimple_seq_d* %call99, %struct.gimple_seq_d** %replace, align 8, !dbg !5332
  br label %sw.epilog104, !dbg !5333

sw.bb100:                                         ; preds = %if.else94
  %73 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5334
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5335
  %call101 = call %struct.gimple_seq_d* @lower_eh_must_not_throw(%struct.leh_state* %73, %union.gimple_statement_d* %74), !dbg !5336
  store %struct.gimple_seq_d* %call101, %struct.gimple_seq_d** %replace, align 8, !dbg !5337
  br label %sw.epilog104, !dbg !5338

sw.default102:                                    ; preds = %if.else94
  %75 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5339
  %76 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5340
  %call103 = call %struct.gimple_seq_d* @lower_cleanup(%struct.leh_state* %75, %union.gimple_statement_d* %76), !dbg !5341
  store %struct.gimple_seq_d* %call103, %struct.gimple_seq_d** %replace, align 8, !dbg !5342
  br label %sw.epilog104, !dbg !5343

sw.epilog104:                                     ; preds = %sw.default102, %sw.bb100, %sw.bb98, %sw.bb96
  br label %if.end105

if.end105:                                        ; preds = %sw.epilog104, %if.then92
  br label %if.end106

if.end106:                                        ; preds = %if.end105, %if.then86
  %77 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5344
  %78 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %replace, align 8, !dbg !5345
  call void @gsi_insert_seq_before(%struct.gimple_stmt_iterator* %77, %struct.gimple_seq_d* %78, i32 1), !dbg !5346
  %79 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5347
  call void @gsi_remove(%struct.gimple_stmt_iterator* %79, i8 zeroext 1), !dbg !5348
  br label %return, !dbg !5349

sw.default107:                                    ; preds = %entry
  br label %sw.epilog108, !dbg !5350

sw.epilog108:                                     ; preds = %sw.default107, %sw.bb81, %sw.bb80, %if.end79
  %80 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !5351
  call void @gsi_next(%struct.gimple_stmt_iterator* %80), !dbg !5352
  br label %return, !dbg !5353

return:                                           ; preds = %sw.epilog108, %if.end106, %sw.bb18
  ret void, !dbg !5353
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !5354 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5355, metadata !DIExpression()), !dbg !5356
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !5357, metadata !DIExpression()), !dbg !5358
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5359
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !5360
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !5358
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !5361
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5361
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5361
  %bf.load = load i64, i64* %2, align 8, !dbg !5361
  %bf.clear = and i64 %bf.load, 65535, !dbg !5361
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5361
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !5363
  br i1 %cmp, label %if.then, label %if.end, !dbg !5364

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !5365
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !5365
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5365
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5365
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5365
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !5366
  br label %return, !dbg !5366

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5367
  br label %return, !dbg !5367

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5368
  ret %union.tree_node* %5, !dbg !5368
}

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_arg(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %arg) #0 !dbg !5369 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  %arg.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5372, metadata !DIExpression()), !dbg !5373
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !5374, metadata !DIExpression()), !dbg !5375
  store %union.tree_node* %arg, %union.tree_node** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg.addr, metadata !5376, metadata !DIExpression()), !dbg !5377
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5378
  %1 = load i32, i32* %index.addr, align 4, !dbg !5379
  %add = add i32 %1, 3, !dbg !5380
  %2 = load %union.tree_node*, %union.tree_node** %arg.addr, align 8, !dbg !5381
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 %add, %union.tree_node* %2), !dbg !5382
  ret void, !dbg !5383
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !5384 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5385, metadata !DIExpression()), !dbg !5386
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5387
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !5388
  ret %union.tree_node* %call, !dbg !5389
}

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_lhs(%union.gimple_statement_d* %stmt) #0 !dbg !5390 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5391, metadata !DIExpression()), !dbg !5392
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5393
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !5394
  %conv = zext i8 %call to i32, !dbg !5394
  %tobool = icmp ne i32 %conv, 0, !dbg !5394
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !5395

lor.rhs:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5396
  %call1 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %1), !dbg !5397
  %conv2 = zext i8 %call1 to i32, !dbg !5397
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !5397
  br i1 %tobool3, label %land.rhs, label %land.end, !dbg !5398

land.rhs:                                         ; preds = %lor.rhs
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5399
  %call4 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %2), !dbg !5400
  %cmp = icmp ne %union.tree_node* %call4, null, !dbg !5401
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %3 = phi i1 [ false, %lor.rhs ], [ %cmp, %land.rhs ], !dbg !5402
  br label %lor.end, !dbg !5395

lor.end:                                          ; preds = %land.end, %entry
  %4 = phi i1 [ true, %entry ], [ %3, %land.end ]
  %lor.ext = zext i1 %4 to i32, !dbg !5395
  %conv6 = trunc i32 %lor.ext to i8, !dbg !5403
  ret i8 %conv6, !dbg !5404
}

declare dso_local zeroext i8 @gimple_stmt_may_fallthru(%union.gimple_statement_d*) #2

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

declare dso_local zeroext i8 @is_gimple_reg_type(%union.tree_node*) #2

declare dso_local %union.tree_node* @create_tmp_var(%union.tree_node*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_location(%union.gimple_statement_d* %g, i32 %location) #0 !dbg !5405 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %location.addr = alloca i32, align 4
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5408, metadata !DIExpression()), !dbg !5409
  store i32 %location, i32* %location.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %location.addr, metadata !5410, metadata !DIExpression()), !dbg !5411
  %0 = load i32, i32* %location.addr, align 4, !dbg !5412
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5413
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !5414
  %location1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !5415
  store i32 %0, i32* %location1, align 8, !dbg !5416
  ret void, !dbg !5417
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !5418 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5421, metadata !DIExpression()), !dbg !5422
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5423
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5424
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !5425
  %1 = load i32, i32* %location, align 8, !dbg !5425
  ret i32 %1, !dbg !5426
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_block(%union.gimple_statement_d* %g, %union.tree_node* %block) #0 !dbg !5427 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %block.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5430, metadata !DIExpression()), !dbg !5431
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !5432, metadata !DIExpression()), !dbg !5433
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !5434
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5435
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !5436
  %block1 = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 5, !dbg !5437
  store %union.tree_node* %0, %union.tree_node** %block1, align 8, !dbg !5438
  ret void, !dbg !5439
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_block(%union.gimple_statement_d* %g) #0 !dbg !5440 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5441, metadata !DIExpression()), !dbg !5442
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5443
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5444
  %block = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 5, !dbg !5445
  %1 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !5445
  ret %union.tree_node* %1, !dbg !5446
}

declare dso_local void @gimple_set_lhs(%union.gimple_statement_d*, %union.tree_node*) #2

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @record_stmt_eh_region(%struct.eh_region_d* %region, %union.gimple_statement_d* %t) #0 !dbg !5447 {
entry:
  %region.addr = alloca %struct.eh_region_d*, align 8
  %t.addr = alloca %union.gimple_statement_d*, align 8
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  store %struct.eh_region_d* %region, %struct.eh_region_d** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %region.addr, metadata !5450, metadata !DIExpression()), !dbg !5451
  store %union.gimple_statement_d* %t, %union.gimple_statement_d** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %t.addr, metadata !5452, metadata !DIExpression()), !dbg !5453
  %0 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !5454
  %cmp = icmp eq %struct.eh_region_d* %0, null, !dbg !5456
  br i1 %cmp, label %if.then, label %if.end, !dbg !5457

if.then:                                          ; preds = %entry
  br label %if.end10, !dbg !5458

if.end:                                           ; preds = %entry
  %1 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !5459
  %type = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %1, i32 0, i32 4, !dbg !5461
  %2 = load i32, i32* %type, align 4, !dbg !5461
  %cmp1 = icmp eq i32 %2, 3, !dbg !5462
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !5463

if.then2:                                         ; preds = %if.end
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5464
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !5464
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !5465
  %5 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !5466
  %index = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %5, i32 0, i32 3, !dbg !5467
  %6 = load i32, i32* %index, align 8, !dbg !5467
  %sub = sub nsw i32 0, %6, !dbg !5468
  call void @add_stmt_to_eh_lp_fn(%struct.function* %add.ptr, %union.gimple_statement_d* %4, i32 %sub), !dbg !5469
  br label %if.end10, !dbg !5469

if.else:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !5470, metadata !DIExpression()), !dbg !5472
  %7 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !5473
  %landing_pads = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %7, i32 0, i32 6, !dbg !5474
  %8 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %landing_pads, align 8, !dbg !5474
  store %struct.eh_landing_pad_d* %8, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5472
  %9 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5475
  %cmp3 = icmp eq %struct.eh_landing_pad_d* %9, null, !dbg !5477
  br i1 %cmp3, label %if.then4, label %if.else5, !dbg !5478

if.then4:                                         ; preds = %if.else
  %10 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !5479
  %call = call %struct.eh_landing_pad_d* @gen_eh_landing_pad(%struct.eh_region_d* %10), !dbg !5480
  store %struct.eh_landing_pad_d* %call, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5481
  br label %if.end7, !dbg !5482

if.else5:                                         ; preds = %if.else
  %11 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5483
  %next_lp = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %11, i32 0, i32 0, !dbg !5483
  %12 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %next_lp, align 8, !dbg !5483
  %cmp6 = icmp eq %struct.eh_landing_pad_d* %12, null, !dbg !5483
  br i1 %cmp6, label %cond.false, label %cond.true, !dbg !5483

cond.true:                                        ; preds = %if.else5
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 138, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5483
  br label %cond.end, !dbg !5483

cond.false:                                       ; preds = %if.else5
  br label %cond.end, !dbg !5483

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5483
  br label %if.end7

if.end7:                                          ; preds = %cond.end, %if.then4
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5484
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !5484
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %t.addr, align 8, !dbg !5485
  %15 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !5486
  %index9 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %15, i32 0, i32 4, !dbg !5487
  %16 = load i32, i32* %index9, align 8, !dbg !5487
  call void @add_stmt_to_eh_lp_fn(%struct.function* %add.ptr8, %union.gimple_statement_d* %14, i32 %16), !dbg !5488
  br label %if.end10

if.end10:                                         ; preds = %if.then, %if.end7, %if.then2
  ret void, !dbg !5489
}

; Function Attrs: noinline nounwind uwtable
define internal void @note_eh_region_may_contain_throw(%struct.eh_region_d* %region) #0 !dbg !5490 {
entry:
  %region.addr = alloca %struct.eh_region_d*, align 8
  store %struct.eh_region_d* %region, %struct.eh_region_d** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %region.addr, metadata !5493, metadata !DIExpression()), !dbg !5494
  br label %while.cond, !dbg !5495

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @eh_region_may_contain_throw_map, align 8, !dbg !5496
  %1 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !5497
  %index = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %1, i32 0, i32 3, !dbg !5498
  %2 = load i32, i32* %index, align 8, !dbg !5498
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %0, i32 %2), !dbg !5499
  %tobool = icmp ne i32 %call, 0, !dbg !5500
  %lnot = xor i1 %tobool, true, !dbg !5500
  br i1 %lnot, label %while.body, label %while.end, !dbg !5495

while.body:                                       ; preds = %while.cond
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @eh_region_may_contain_throw_map, align 8, !dbg !5501
  %4 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !5503
  %index1 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %4, i32 0, i32 3, !dbg !5504
  %5 = load i32, i32* %index1, align 8, !dbg !5504
  %call2 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %3, i32 %5), !dbg !5505
  %6 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !5506
  %outer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %6, i32 0, i32 0, !dbg !5507
  %7 = load %struct.eh_region_d*, %struct.eh_region_d** %outer, align 8, !dbg !5507
  store %struct.eh_region_d* %7, %struct.eh_region_d** %region.addr, align 8, !dbg !5508
  %8 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !5509
  %cmp = icmp eq %struct.eh_region_d* %8, null, !dbg !5511
  br i1 %cmp, label %if.then, label %if.end, !dbg !5512

if.then:                                          ; preds = %while.body
  br label %while.end, !dbg !5513

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !5495, !llvm.loop !5514

while.end:                                        ; preds = %if.then, %while.cond
  ret void, !dbg !5516
}

; Function Attrs: noinline nounwind uwtable
define internal void @maybe_record_in_goto_queue(%struct.leh_state* %state, %union.gimple_statement_d* %stmt) #0 !dbg !5517 {
entry:
  %state.addr = alloca %struct.leh_state*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %tf = alloca %struct.leh_tf_state*, align 8
  %new_stmt = alloca %union.treemple, align 8
  store %struct.leh_state* %state, %struct.leh_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_state** %state.addr, metadata !5520, metadata !DIExpression()), !dbg !5521
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5522, metadata !DIExpression()), !dbg !5523
  call void @llvm.dbg.declare(metadata %struct.leh_tf_state** %tf, metadata !5524, metadata !DIExpression()), !dbg !5525
  %0 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5526
  %tf1 = getelementptr inbounds %struct.leh_state, %struct.leh_state* %0, i32 0, i32 2, !dbg !5527
  %1 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf1, align 8, !dbg !5527
  store %struct.leh_tf_state* %1, %struct.leh_tf_state** %tf, align 8, !dbg !5525
  call void @llvm.dbg.declare(metadata %union.treemple* %new_stmt, metadata !5528, metadata !DIExpression()), !dbg !5529
  %2 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf, align 8, !dbg !5530
  %tobool = icmp ne %struct.leh_tf_state* %2, null, !dbg !5530
  br i1 %tobool, label %if.end, label %if.then, !dbg !5532

if.then:                                          ; preds = %entry
  br label %sw.epilog, !dbg !5533

if.end:                                           ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5534
  %call = call i32 @gimple_code(%union.gimple_statement_d* %3), !dbg !5535
  switch i32 %call, label %sw.default [
    i32 1, label %sw.bb
    i32 3, label %sw.bb8
    i32 9, label %sw.bb11
  ], !dbg !5536

sw.bb:                                            ; preds = %if.end
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5537
  %call2 = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %4, i32 2), !dbg !5539
  %tp = bitcast %union.treemple* %new_stmt to %union.tree_node***, !dbg !5540
  store %union.tree_node** %call2, %union.tree_node*** %tp, align 8, !dbg !5541
  %5 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf, align 8, !dbg !5542
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5543
  %call3 = call %union.tree_node* @gimple_cond_true_label(%union.gimple_statement_d* %6), !dbg !5544
  %coerce.dive = getelementptr inbounds %union.treemple, %union.treemple* %new_stmt, i32 0, i32 0, !dbg !5545
  %7 = load %union.tree_node**, %union.tree_node*** %coerce.dive, align 8, !dbg !5545
  call void @record_in_goto_queue_label(%struct.leh_tf_state* %5, %union.tree_node** %7, %union.tree_node* %call3), !dbg !5545
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5546
  %call4 = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %8, i32 3), !dbg !5547
  %tp5 = bitcast %union.treemple* %new_stmt to %union.tree_node***, !dbg !5548
  store %union.tree_node** %call4, %union.tree_node*** %tp5, align 8, !dbg !5549
  %9 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf, align 8, !dbg !5550
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5551
  %call6 = call %union.tree_node* @gimple_cond_false_label(%union.gimple_statement_d* %10), !dbg !5552
  %coerce.dive7 = getelementptr inbounds %union.treemple, %union.treemple* %new_stmt, i32 0, i32 0, !dbg !5553
  %11 = load %union.tree_node**, %union.tree_node*** %coerce.dive7, align 8, !dbg !5553
  call void @record_in_goto_queue_label(%struct.leh_tf_state* %9, %union.tree_node** %11, %union.tree_node* %call6), !dbg !5553
  br label %sw.epilog, !dbg !5554

sw.bb8:                                           ; preds = %if.end
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5555
  %g = bitcast %union.treemple* %new_stmt to %union.gimple_statement_d**, !dbg !5556
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %g, align 8, !dbg !5557
  %13 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf, align 8, !dbg !5558
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5559
  %call9 = call %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %14), !dbg !5560
  %coerce.dive10 = getelementptr inbounds %union.treemple, %union.treemple* %new_stmt, i32 0, i32 0, !dbg !5561
  %15 = load %union.tree_node**, %union.tree_node*** %coerce.dive10, align 8, !dbg !5561
  call void @record_in_goto_queue_label(%struct.leh_tf_state* %13, %union.tree_node** %15, %union.tree_node* %call9), !dbg !5561
  br label %sw.epilog, !dbg !5562

sw.bb11:                                          ; preds = %if.end
  %16 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf, align 8, !dbg !5563
  %may_return = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %16, i32 0, i32 12, !dbg !5564
  store i8 1, i8* %may_return, align 1, !dbg !5565
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5566
  %g12 = bitcast %union.treemple* %new_stmt to %union.gimple_statement_d**, !dbg !5567
  store %union.gimple_statement_d* %17, %union.gimple_statement_d** %g12, align 8, !dbg !5568
  %18 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf, align 8, !dbg !5569
  %coerce.dive13 = getelementptr inbounds %union.treemple, %union.treemple* %new_stmt, i32 0, i32 0, !dbg !5570
  %19 = load %union.tree_node**, %union.tree_node*** %coerce.dive13, align 8, !dbg !5570
  call void @record_in_goto_queue(%struct.leh_tf_state* %18, %union.tree_node** %19, i32 -1, i8 zeroext 0), !dbg !5570
  br label %sw.epilog, !dbg !5571

sw.default:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 683, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5572
  br label %sw.epilog, !dbg !5573

sw.epilog:                                        ; preds = %if.then, %sw.default, %sw.bb11, %sw.bb8, %sw.bb
  ret void, !dbg !5574
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @lower_try_finally(%struct.leh_state* %state, %union.gimple_statement_d* %tp) #0 !dbg !5575 {
entry:
  %state.addr = alloca %struct.leh_state*, align 8
  %tp.addr = alloca %union.gimple_statement_d*, align 8
  %this_tf = alloca %struct.leh_tf_state, align 8
  %this_state = alloca %struct.leh_state, align 8
  %ndests = alloca i32, align 4
  %old_eh_seq = alloca %struct.gimple_seq_d*, align 8
  %x = alloca %union.gimple_statement_d*, align 8
  %new_eh_seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.leh_state* %state, %struct.leh_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_state** %state.addr, metadata !5578, metadata !DIExpression()), !dbg !5579
  store %union.gimple_statement_d* %tp, %union.gimple_statement_d** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %tp.addr, metadata !5580, metadata !DIExpression()), !dbg !5581
  call void @llvm.dbg.declare(metadata %struct.leh_tf_state* %this_tf, metadata !5582, metadata !DIExpression()), !dbg !5583
  call void @llvm.dbg.declare(metadata %struct.leh_state* %this_state, metadata !5584, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.declare(metadata i32* %ndests, metadata !5586, metadata !DIExpression()), !dbg !5587
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %old_eh_seq, metadata !5588, metadata !DIExpression()), !dbg !5589
  %0 = bitcast %struct.leh_tf_state* %this_tf to i8*, !dbg !5590
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 96, i1 false), !dbg !5590
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !5591
  %try_finally_expr = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 0, !dbg !5592
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %try_finally_expr, align 8, !dbg !5593
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !5594
  %top_p = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 1, !dbg !5595
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %top_p, align 8, !dbg !5596
  %3 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5597
  %outer = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 3, !dbg !5598
  store %struct.leh_state* %3, %struct.leh_state** %outer, align 8, !dbg !5599
  %4 = load i32, i32* @using_eh_for_cleanups_p, align 4, !dbg !5600
  %tobool = icmp ne i32 %4, 0, !dbg !5600
  br i1 %tobool, label %if.then, label %if.else, !dbg !5602

if.then:                                          ; preds = %entry
  %5 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5603
  %cur_region = getelementptr inbounds %struct.leh_state, %struct.leh_state* %5, i32 0, i32 0, !dbg !5604
  %6 = load %struct.eh_region_d*, %struct.eh_region_d** %cur_region, align 8, !dbg !5604
  %call = call %struct.eh_region_d* @gen_eh_region_cleanup(%struct.eh_region_d* %6), !dbg !5605
  %region = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 4, !dbg !5606
  store %struct.eh_region_d* %call, %struct.eh_region_d** %region, align 8, !dbg !5607
  br label %if.end, !dbg !5608

if.else:                                          ; preds = %entry
  %region1 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 4, !dbg !5609
  store %struct.eh_region_d* null, %struct.eh_region_d** %region1, align 8, !dbg !5610
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %region2 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 4, !dbg !5611
  %7 = load %struct.eh_region_d*, %struct.eh_region_d** %region2, align 8, !dbg !5611
  %cur_region3 = getelementptr inbounds %struct.leh_state, %struct.leh_state* %this_state, i32 0, i32 0, !dbg !5612
  store %struct.eh_region_d* %7, %struct.eh_region_d** %cur_region3, align 8, !dbg !5613
  %8 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5614
  %ehp_region = getelementptr inbounds %struct.leh_state, %struct.leh_state* %8, i32 0, i32 1, !dbg !5615
  %9 = load %struct.eh_region_d*, %struct.eh_region_d** %ehp_region, align 8, !dbg !5615
  %ehp_region4 = getelementptr inbounds %struct.leh_state, %struct.leh_state* %this_state, i32 0, i32 1, !dbg !5616
  store %struct.eh_region_d* %9, %struct.eh_region_d** %ehp_region4, align 8, !dbg !5617
  %tf = getelementptr inbounds %struct.leh_state, %struct.leh_state* %this_state, i32 0, i32 2, !dbg !5618
  store %struct.leh_tf_state* %this_tf, %struct.leh_tf_state** %tf, align 8, !dbg !5619
  %10 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** @eh_seq, align 8, !dbg !5620
  store %struct.gimple_seq_d* %10, %struct.gimple_seq_d** %old_eh_seq, align 8, !dbg !5621
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** @eh_seq, align 8, !dbg !5622
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !5623
  %call5 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %11), !dbg !5624
  call void @lower_eh_constructs_1(%struct.leh_state* %this_state, %struct.gimple_seq_d* %call5), !dbg !5625
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !5626
  %call6 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %12), !dbg !5627
  %call7 = call zeroext i8 @gimple_seq_may_fallthru(%struct.gimple_seq_d* %call6), !dbg !5628
  %may_fallthru = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 11, !dbg !5629
  store i8 %call7, i8* %may_fallthru, align 8, !dbg !5630
  %13 = load i32, i32* @using_eh_for_cleanups_p, align 4, !dbg !5631
  %tobool8 = icmp ne i32 %13, 0, !dbg !5631
  br i1 %tobool8, label %if.then9, label %if.end12, !dbg !5633

if.then9:                                         ; preds = %if.end
  %region10 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 4, !dbg !5634
  %14 = load %struct.eh_region_d*, %struct.eh_region_d** %region10, align 8, !dbg !5634
  %call11 = call zeroext i8 @eh_region_may_contain_throw(%struct.eh_region_d* %14), !dbg !5635
  %may_throw = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 13, !dbg !5636
  store i8 %call11, i8* %may_throw, align 2, !dbg !5637
  br label %if.end12, !dbg !5638

if.end12:                                         ; preds = %if.then9, %if.end
  %may_throw13 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 13, !dbg !5639
  %15 = load i8, i8* %may_throw13, align 2, !dbg !5639
  %tobool14 = icmp ne i8 %15, 0, !dbg !5641
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !5642

if.then15:                                        ; preds = %if.end12
  %16 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5643
  call void @honor_protect_cleanup_actions(%struct.leh_state* %16, %struct.leh_state* %this_state, %struct.leh_tf_state* %this_tf), !dbg !5644
  br label %if.end16, !dbg !5644

if.end16:                                         ; preds = %if.then15, %if.end12
  %dest_array = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 9, !dbg !5645
  %17 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dest_array, align 8, !dbg !5645
  %tobool17 = icmp ne %struct.VEC_tree_heap* %17, null, !dbg !5645
  br i1 %tobool17, label %cond.true, label %cond.false, !dbg !5645

cond.true:                                        ; preds = %if.end16
  %dest_array18 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 9, !dbg !5645
  %18 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dest_array18, align 8, !dbg !5645
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %18, i32 0, i32 0, !dbg !5645
  br label %cond.end, !dbg !5645

cond.false:                                       ; preds = %if.end16
  br label %cond.end, !dbg !5645

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5645
  %call19 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !5645
  store i32 %call19, i32* %ndests, align 4, !dbg !5646
  %may_fallthru20 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 11, !dbg !5647
  %19 = load i8, i8* %may_fallthru20, align 8, !dbg !5647
  %conv = zext i8 %19 to i32, !dbg !5648
  %20 = load i32, i32* %ndests, align 4, !dbg !5649
  %add = add nsw i32 %20, %conv, !dbg !5649
  store i32 %add, i32* %ndests, align 4, !dbg !5649
  %may_return = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 12, !dbg !5650
  %21 = load i8, i8* %may_return, align 1, !dbg !5650
  %conv21 = zext i8 %21 to i32, !dbg !5651
  %22 = load i32, i32* %ndests, align 4, !dbg !5652
  %add22 = add nsw i32 %22, %conv21, !dbg !5652
  store i32 %add22, i32* %ndests, align 4, !dbg !5652
  %may_throw23 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 13, !dbg !5653
  %23 = load i8, i8* %may_throw23, align 2, !dbg !5653
  %conv24 = zext i8 %23 to i32, !dbg !5654
  %24 = load i32, i32* %ndests, align 4, !dbg !5655
  %add25 = add nsw i32 %24, %conv24, !dbg !5655
  store i32 %add25, i32* %ndests, align 4, !dbg !5655
  %25 = load i32, i32* %ndests, align 4, !dbg !5656
  %cmp = icmp eq i32 %25, 0, !dbg !5658
  br i1 %cmp, label %if.then27, label %if.else29, !dbg !5659

if.then27:                                        ; preds = %cond.end
  %top_p_seq = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 2, !dbg !5660
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !5662
  %call28 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %26), !dbg !5663
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %top_p_seq, %struct.gimple_seq_d* %call28), !dbg !5664
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !5665
  call void @gimple_try_set_cleanup(%union.gimple_statement_d* %27, %struct.gimple_seq_d* null), !dbg !5666
  br label %if.end47, !dbg !5667

if.else29:                                        ; preds = %cond.end
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !5668
  %call30 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %28), !dbg !5670
  %call31 = call zeroext i8 @gimple_seq_may_fallthru(%struct.gimple_seq_d* %call30), !dbg !5671
  %tobool32 = icmp ne i8 %call31, 0, !dbg !5671
  br i1 %tobool32, label %if.else34, label %if.then33, !dbg !5672

if.then33:                                        ; preds = %if.else29
  %29 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5673
  call void @lower_try_finally_nofallthru(%struct.leh_state* %29, %struct.leh_tf_state* %this_tf), !dbg !5674
  br label %if.end46, !dbg !5674

if.else34:                                        ; preds = %if.else29
  %30 = load i32, i32* %ndests, align 4, !dbg !5675
  %cmp35 = icmp eq i32 %30, 1, !dbg !5677
  br i1 %cmp35, label %if.then37, label %if.else38, !dbg !5678

if.then37:                                        ; preds = %if.else34
  %31 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5679
  call void @lower_try_finally_onedest(%struct.leh_state* %31, %struct.leh_tf_state* %this_tf), !dbg !5680
  br label %if.end45, !dbg !5680

if.else38:                                        ; preds = %if.else34
  %32 = load i32, i32* %ndests, align 4, !dbg !5681
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !5683
  %call39 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %33), !dbg !5684
  %call40 = call zeroext i8 @decide_copy_try_finally(i32 %32, %struct.gimple_seq_d* %call39), !dbg !5685
  %tobool41 = icmp ne i8 %call40, 0, !dbg !5685
  br i1 %tobool41, label %if.then42, label %if.else43, !dbg !5686

if.then42:                                        ; preds = %if.else38
  %34 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5687
  call void @lower_try_finally_copy(%struct.leh_state* %34, %struct.leh_tf_state* %this_tf), !dbg !5688
  br label %if.end44, !dbg !5688

if.else43:                                        ; preds = %if.else38
  %35 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5689
  call void @lower_try_finally_switch(%struct.leh_state* %35, %struct.leh_tf_state* %this_tf), !dbg !5690
  br label %if.end44

if.end44:                                         ; preds = %if.else43, %if.then42
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.then37
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.then33
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.then27
  %fallthru_label = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 10, !dbg !5691
  %36 = load %union.tree_node*, %union.tree_node** %fallthru_label, align 8, !dbg !5691
  %tobool48 = icmp ne %union.tree_node* %36, null, !dbg !5693
  br i1 %tobool48, label %if.then49, label %if.end53, !dbg !5694

if.then49:                                        ; preds = %if.end47
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %x, metadata !5695, metadata !DIExpression()), !dbg !5697
  %fallthru_label50 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 10, !dbg !5698
  %37 = load %union.tree_node*, %union.tree_node** %fallthru_label50, align 8, !dbg !5698
  %call51 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %37), !dbg !5699
  store %union.gimple_statement_d* %call51, %union.gimple_statement_d** %x, align 8, !dbg !5697
  %top_p_seq52 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 2, !dbg !5700
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !5701
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %top_p_seq52, %union.gimple_statement_d* %38), !dbg !5702
  br label %if.end53, !dbg !5703

if.end53:                                         ; preds = %if.then49, %if.end47
  %dest_array54 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 9, !dbg !5704
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %dest_array54), !dbg !5704
  %goto_queue = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 5, !dbg !5705
  %39 = load %struct.goto_queue_node*, %struct.goto_queue_node** %goto_queue, align 8, !dbg !5705
  %tobool55 = icmp ne %struct.goto_queue_node* %39, null, !dbg !5707
  br i1 %tobool55, label %if.then56, label %if.end58, !dbg !5708

if.then56:                                        ; preds = %if.end53
  %goto_queue57 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 5, !dbg !5709
  %40 = load %struct.goto_queue_node*, %struct.goto_queue_node** %goto_queue57, align 8, !dbg !5709
  %41 = bitcast %struct.goto_queue_node* %40 to i8*, !dbg !5710
  call void @free(i8* %41), !dbg !5711
  br label %if.end58, !dbg !5711

if.end58:                                         ; preds = %if.then56, %if.end53
  %goto_queue_map = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 8, !dbg !5712
  %42 = load %struct.pointer_map_t*, %struct.pointer_map_t** %goto_queue_map, align 8, !dbg !5712
  %tobool59 = icmp ne %struct.pointer_map_t* %42, null, !dbg !5714
  br i1 %tobool59, label %if.then60, label %if.end62, !dbg !5715

if.then60:                                        ; preds = %if.end58
  %goto_queue_map61 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 8, !dbg !5716
  %43 = load %struct.pointer_map_t*, %struct.pointer_map_t** %goto_queue_map61, align 8, !dbg !5716
  call void @pointer_map_destroy(%struct.pointer_map_t* %43), !dbg !5717
  br label %if.end62, !dbg !5717

if.end62:                                         ; preds = %if.then60, %if.end58
  %44 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %old_eh_seq, align 8, !dbg !5718
  %tobool63 = icmp ne %struct.gimple_seq_d* %44, null, !dbg !5718
  br i1 %tobool63, label %if.then64, label %if.end70, !dbg !5720

if.then64:                                        ; preds = %if.end62
  %45 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** @eh_seq, align 8, !dbg !5721
  %cmp65 = icmp eq %struct.gimple_seq_d* %45, null, !dbg !5724
  br i1 %cmp65, label %if.then67, label %if.else68, !dbg !5725

if.then67:                                        ; preds = %if.then64
  %46 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %old_eh_seq, align 8, !dbg !5726
  store %struct.gimple_seq_d* %46, %struct.gimple_seq_d** @eh_seq, align 8, !dbg !5727
  br label %if.end69, !dbg !5728

if.else68:                                        ; preds = %if.then64
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %new_eh_seq, metadata !5729, metadata !DIExpression()), !dbg !5731
  %47 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** @eh_seq, align 8, !dbg !5732
  store %struct.gimple_seq_d* %47, %struct.gimple_seq_d** %new_eh_seq, align 8, !dbg !5731
  %48 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %old_eh_seq, align 8, !dbg !5733
  store %struct.gimple_seq_d* %48, %struct.gimple_seq_d** @eh_seq, align 8, !dbg !5734
  %49 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_eh_seq, align 8, !dbg !5735
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** @eh_seq, %struct.gimple_seq_d* %49), !dbg !5736
  br label %if.end69

if.end69:                                         ; preds = %if.else68, %if.then67
  br label %if.end70, !dbg !5737

if.end70:                                         ; preds = %if.end69, %if.end62
  %top_p_seq71 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %this_tf, i32 0, i32 2, !dbg !5738
  %50 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %top_p_seq71, align 8, !dbg !5738
  ret %struct.gimple_seq_d* %50, !dbg !5739
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %s) #0 !dbg !5740 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  %n = alloca %struct.gimple_seq_node_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !5743, metadata !DIExpression()), !dbg !5744
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_node_d** %n, metadata !5745, metadata !DIExpression()), !dbg !5746
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5747
  %call = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %0), !dbg !5748
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %n, align 8, !dbg !5746
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %n, align 8, !dbg !5749
  %tobool = icmp ne %struct.gimple_seq_node_d* %1, null, !dbg !5750
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5750

cond.true:                                        ; preds = %entry
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %n, align 8, !dbg !5751
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %2, i32 0, i32 0, !dbg !5752
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5752
  br label %cond.end, !dbg !5750

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5750

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.gimple_statement_d* [ %3, %cond.true ], [ null, %cond.false ], !dbg !5750
  ret %union.gimple_statement_d* %cond, !dbg !5753
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @lower_catch(%struct.leh_state* %state, %union.gimple_statement_d* %tp) #0 !dbg !5754 {
entry:
  %retval = alloca %struct.gimple_seq_d*, align 8
  %state.addr = alloca %struct.leh_state*, align 8
  %tp.addr = alloca %union.gimple_statement_d*, align 8
  %try_region = alloca %struct.eh_region_d*, align 8
  %this_state = alloca %struct.leh_state, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %out_label = alloca %union.tree_node*, align 8
  %new_seq = alloca %struct.gimple_seq_d*, align 8
  %x = alloca %union.gimple_statement_d*, align 8
  %try_catch_loc = alloca i32, align 4
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %c = alloca %struct.eh_catch_d*, align 8
  %gcatch = alloca %union.gimple_statement_d*, align 8
  %handler = alloca %struct.gimple_seq_d*, align 8
  store %struct.leh_state* %state, %struct.leh_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_state** %state.addr, metadata !5755, metadata !DIExpression()), !dbg !5756
  store %union.gimple_statement_d* %tp, %union.gimple_statement_d** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %tp.addr, metadata !5757, metadata !DIExpression()), !dbg !5758
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %try_region, metadata !5759, metadata !DIExpression()), !dbg !5760
  store %struct.eh_region_d* null, %struct.eh_region_d** %try_region, align 8, !dbg !5760
  call void @llvm.dbg.declare(metadata %struct.leh_state* %this_state, metadata !5761, metadata !DIExpression()), !dbg !5762
  %0 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5763
  %1 = bitcast %struct.leh_state* %this_state to i8*, !dbg !5764
  %2 = bitcast %struct.leh_state* %0 to i8*, !dbg !5764
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !5764
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5765, metadata !DIExpression()), !dbg !5766
  call void @llvm.dbg.declare(metadata %union.tree_node** %out_label, metadata !5767, metadata !DIExpression()), !dbg !5768
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %new_seq, metadata !5769, metadata !DIExpression()), !dbg !5770
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %x, metadata !5771, metadata !DIExpression()), !dbg !5772
  call void @llvm.dbg.declare(metadata i32* %try_catch_loc, metadata !5773, metadata !DIExpression()), !dbg !5774
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !5775
  %call = call i32 @gimple_location(%union.gimple_statement_d* %3), !dbg !5776
  store i32 %call, i32* %try_catch_loc, align 4, !dbg !5774
  %4 = load i32, i32* @flag_exceptions, align 4, !dbg !5777
  %tobool = icmp ne i32 %4, 0, !dbg !5777
  br i1 %tobool, label %if.then, label %if.end, !dbg !5779

if.then:                                          ; preds = %entry
  %5 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5780
  %cur_region = getelementptr inbounds %struct.leh_state, %struct.leh_state* %5, i32 0, i32 0, !dbg !5782
  %6 = load %struct.eh_region_d*, %struct.eh_region_d** %cur_region, align 8, !dbg !5782
  %call1 = call %struct.eh_region_d* @gen_eh_region_try(%struct.eh_region_d* %6), !dbg !5783
  store %struct.eh_region_d* %call1, %struct.eh_region_d** %try_region, align 8, !dbg !5784
  %7 = load %struct.eh_region_d*, %struct.eh_region_d** %try_region, align 8, !dbg !5785
  %cur_region2 = getelementptr inbounds %struct.leh_state, %struct.leh_state* %this_state, i32 0, i32 0, !dbg !5786
  store %struct.eh_region_d* %7, %struct.eh_region_d** %cur_region2, align 8, !dbg !5787
  br label %if.end, !dbg !5788

if.end:                                           ; preds = %if.then, %entry
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !5789
  %call3 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %8), !dbg !5790
  call void @lower_eh_constructs_1(%struct.leh_state* %this_state, %struct.gimple_seq_d* %call3), !dbg !5791
  %9 = load %struct.eh_region_d*, %struct.eh_region_d** %try_region, align 8, !dbg !5792
  %call4 = call zeroext i8 @eh_region_may_contain_throw(%struct.eh_region_d* %9), !dbg !5794
  %tobool5 = icmp ne i8 %call4, 0, !dbg !5794
  br i1 %tobool5, label %if.end8, label %if.then6, !dbg !5795

if.then6:                                         ; preds = %if.end
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !5796
  %call7 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %10), !dbg !5797
  store %struct.gimple_seq_d* %call7, %struct.gimple_seq_d** %retval, align 8, !dbg !5798
  br label %return, !dbg !5798

if.end8:                                          ; preds = %if.end
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %new_seq, align 8, !dbg !5799
  %11 = load %struct.eh_region_d*, %struct.eh_region_d** %try_region, align 8, !dbg !5800
  call void @emit_eh_dispatch(%struct.gimple_seq_d** %new_seq, %struct.eh_region_d* %11), !dbg !5801
  %12 = load %struct.eh_region_d*, %struct.eh_region_d** %try_region, align 8, !dbg !5802
  call void @emit_resx(%struct.gimple_seq_d** %new_seq, %struct.eh_region_d* %12), !dbg !5803
  %13 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5804
  %cur_region9 = getelementptr inbounds %struct.leh_state, %struct.leh_state* %13, i32 0, i32 0, !dbg !5805
  %14 = load %struct.eh_region_d*, %struct.eh_region_d** %cur_region9, align 8, !dbg !5805
  %cur_region10 = getelementptr inbounds %struct.leh_state, %struct.leh_state* %this_state, i32 0, i32 0, !dbg !5806
  store %struct.eh_region_d* %14, %struct.eh_region_d** %cur_region10, align 8, !dbg !5807
  %15 = load %struct.eh_region_d*, %struct.eh_region_d** %try_region, align 8, !dbg !5808
  %ehp_region = getelementptr inbounds %struct.leh_state, %struct.leh_state* %this_state, i32 0, i32 1, !dbg !5809
  store %struct.eh_region_d* %15, %struct.eh_region_d** %ehp_region, align 8, !dbg !5810
  store %union.tree_node* null, %union.tree_node** %out_label, align 8, !dbg !5811
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !5812
  %call11 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %16), !dbg !5814
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %call11), !dbg !5815
  %17 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5815
  %18 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5815
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 24, i1 false), !dbg !5815
  br label %for.cond, !dbg !5816

for.cond:                                         ; preds = %for.inc, %if.end8
  %call12 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5817
  %tobool13 = icmp ne i8 %call12, 0, !dbg !5819
  %lnot = xor i1 %tobool13, true, !dbg !5819
  br i1 %lnot, label %for.body, label %for.end, !dbg !5820

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.eh_catch_d** %c, metadata !5821, metadata !DIExpression()), !dbg !5823
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gcatch, metadata !5824, metadata !DIExpression()), !dbg !5825
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %handler, metadata !5826, metadata !DIExpression()), !dbg !5827
  %call14 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5828
  store %union.gimple_statement_d* %call14, %union.gimple_statement_d** %gcatch, align 8, !dbg !5829
  %19 = load %struct.eh_region_d*, %struct.eh_region_d** %try_region, align 8, !dbg !5830
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gcatch, align 8, !dbg !5831
  %call15 = call %union.tree_node* @gimple_catch_types(%union.gimple_statement_d* %20), !dbg !5832
  %call16 = call %struct.eh_catch_d* @gen_eh_region_catch(%struct.eh_region_d* %19, %union.tree_node* %call15), !dbg !5833
  store %struct.eh_catch_d* %call16, %struct.eh_catch_d** %c, align 8, !dbg !5834
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gcatch, align 8, !dbg !5835
  %call17 = call %struct.gimple_seq_d* @gimple_catch_handler(%union.gimple_statement_d* %21), !dbg !5836
  store %struct.gimple_seq_d* %call17, %struct.gimple_seq_d** %handler, align 8, !dbg !5837
  %22 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %handler, align 8, !dbg !5838
  call void @lower_eh_constructs_1(%struct.leh_state* %this_state, %struct.gimple_seq_d* %22), !dbg !5839
  %call18 = call %union.tree_node* @create_artificial_label(i32 0), !dbg !5840
  %23 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !5841
  %label = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %23, i32 0, i32 4, !dbg !5842
  store %union.tree_node* %call18, %union.tree_node** %label, align 8, !dbg !5843
  %24 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !5844
  %label19 = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %24, i32 0, i32 4, !dbg !5845
  %25 = load %union.tree_node*, %union.tree_node** %label19, align 8, !dbg !5845
  %call20 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %25), !dbg !5846
  store %union.gimple_statement_d* %call20, %union.gimple_statement_d** %x, align 8, !dbg !5847
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !5848
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %new_seq, %union.gimple_statement_d* %26), !dbg !5849
  %27 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %handler, align 8, !dbg !5850
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %new_seq, %struct.gimple_seq_d* %27), !dbg !5851
  %28 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_seq, align 8, !dbg !5852
  %call21 = call zeroext i8 @gimple_seq_may_fallthru(%struct.gimple_seq_d* %28), !dbg !5854
  %tobool22 = icmp ne i8 %call21, 0, !dbg !5854
  br i1 %tobool22, label %if.then23, label %if.end29, !dbg !5855

if.then23:                                        ; preds = %for.body
  %29 = load %union.tree_node*, %union.tree_node** %out_label, align 8, !dbg !5856
  %tobool24 = icmp ne %union.tree_node* %29, null, !dbg !5856
  br i1 %tobool24, label %if.end27, label %if.then25, !dbg !5859

if.then25:                                        ; preds = %if.then23
  %30 = load i32, i32* %try_catch_loc, align 4, !dbg !5860
  %call26 = call %union.tree_node* @create_artificial_label(i32 %30), !dbg !5861
  store %union.tree_node* %call26, %union.tree_node** %out_label, align 8, !dbg !5862
  br label %if.end27, !dbg !5863

if.end27:                                         ; preds = %if.then25, %if.then23
  %31 = load %union.tree_node*, %union.tree_node** %out_label, align 8, !dbg !5864
  %call28 = call %union.gimple_statement_d* @gimple_build_goto(%union.tree_node* %31), !dbg !5865
  store %union.gimple_statement_d* %call28, %union.gimple_statement_d** %x, align 8, !dbg !5866
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !5867
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %new_seq, %union.gimple_statement_d* %32), !dbg !5868
  br label %if.end29, !dbg !5869

if.end29:                                         ; preds = %if.end27, %for.body
  %33 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !5870
  %type_list = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %33, i32 0, i32 2, !dbg !5872
  %34 = load %union.tree_node*, %union.tree_node** %type_list, align 8, !dbg !5872
  %tobool30 = icmp ne %union.tree_node* %34, null, !dbg !5870
  br i1 %tobool30, label %if.end32, label %if.then31, !dbg !5873

if.then31:                                        ; preds = %if.end29
  br label %for.end, !dbg !5874

if.end32:                                         ; preds = %if.end29
  br label %for.inc, !dbg !5875

for.inc:                                          ; preds = %if.end32
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !5876
  br label %for.cond, !dbg !5877, !llvm.loop !5878

for.end:                                          ; preds = %if.then31, %for.cond
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !5880
  %36 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_seq, align 8, !dbg !5881
  call void @gimple_try_set_cleanup(%union.gimple_statement_d* %35, %struct.gimple_seq_d* %36), !dbg !5882
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !5883
  %38 = load %struct.eh_region_d*, %struct.eh_region_d** %try_region, align 8, !dbg !5884
  %39 = load %union.tree_node*, %union.tree_node** %out_label, align 8, !dbg !5885
  %call33 = call %struct.gimple_seq_d* @frob_into_branch_around(%union.gimple_statement_d* %37, %struct.eh_region_d* %38, %union.tree_node* %39), !dbg !5886
  store %struct.gimple_seq_d* %call33, %struct.gimple_seq_d** %retval, align 8, !dbg !5887
  br label %return, !dbg !5887

return:                                           ; preds = %for.end, %if.then6
  %40 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %retval, align 8, !dbg !5888
  ret %struct.gimple_seq_d* %40, !dbg !5888
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @lower_eh_filter(%struct.leh_state* %state, %union.gimple_statement_d* %tp) #0 !dbg !5889 {
entry:
  %retval = alloca %struct.gimple_seq_d*, align 8
  %state.addr = alloca %struct.leh_state*, align 8
  %tp.addr = alloca %union.gimple_statement_d*, align 8
  %this_state = alloca %struct.leh_state, align 8
  %this_region = alloca %struct.eh_region_d*, align 8
  %inner = alloca %union.gimple_statement_d*, align 8
  %x = alloca %union.gimple_statement_d*, align 8
  %new_seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.leh_state* %state, %struct.leh_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_state** %state.addr, metadata !5890, metadata !DIExpression()), !dbg !5891
  store %union.gimple_statement_d* %tp, %union.gimple_statement_d** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %tp.addr, metadata !5892, metadata !DIExpression()), !dbg !5893
  call void @llvm.dbg.declare(metadata %struct.leh_state* %this_state, metadata !5894, metadata !DIExpression()), !dbg !5895
  %0 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5896
  %1 = bitcast %struct.leh_state* %this_state to i8*, !dbg !5897
  %2 = bitcast %struct.leh_state* %0 to i8*, !dbg !5897
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !5897
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %this_region, metadata !5898, metadata !DIExpression()), !dbg !5899
  store %struct.eh_region_d* null, %struct.eh_region_d** %this_region, align 8, !dbg !5899
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %inner, metadata !5900, metadata !DIExpression()), !dbg !5901
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %x, metadata !5902, metadata !DIExpression()), !dbg !5903
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %new_seq, metadata !5904, metadata !DIExpression()), !dbg !5905
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !5906
  %call = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %3), !dbg !5907
  %call1 = call %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %call), !dbg !5908
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %inner, align 8, !dbg !5909
  %4 = load i32, i32* @flag_exceptions, align 4, !dbg !5910
  %tobool = icmp ne i32 %4, 0, !dbg !5910
  br i1 %tobool, label %if.then, label %if.end, !dbg !5912

if.then:                                          ; preds = %entry
  %5 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5913
  %cur_region = getelementptr inbounds %struct.leh_state, %struct.leh_state* %5, i32 0, i32 0, !dbg !5915
  %6 = load %struct.eh_region_d*, %struct.eh_region_d** %cur_region, align 8, !dbg !5915
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %inner, align 8, !dbg !5916
  %call2 = call %union.tree_node* @gimple_eh_filter_types(%union.gimple_statement_d* %7), !dbg !5917
  %call3 = call %struct.eh_region_d* @gen_eh_region_allowed(%struct.eh_region_d* %6, %union.tree_node* %call2), !dbg !5918
  store %struct.eh_region_d* %call3, %struct.eh_region_d** %this_region, align 8, !dbg !5919
  %8 = load %struct.eh_region_d*, %struct.eh_region_d** %this_region, align 8, !dbg !5920
  %cur_region4 = getelementptr inbounds %struct.leh_state, %struct.leh_state* %this_state, i32 0, i32 0, !dbg !5921
  store %struct.eh_region_d* %8, %struct.eh_region_d** %cur_region4, align 8, !dbg !5922
  br label %if.end, !dbg !5923

if.end:                                           ; preds = %if.then, %entry
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !5924
  %call5 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %9), !dbg !5925
  call void @lower_eh_constructs_1(%struct.leh_state* %this_state, %struct.gimple_seq_d* %call5), !dbg !5926
  %10 = load %struct.eh_region_d*, %struct.eh_region_d** %this_region, align 8, !dbg !5927
  %call6 = call zeroext i8 @eh_region_may_contain_throw(%struct.eh_region_d* %10), !dbg !5929
  %tobool7 = icmp ne i8 %call6, 0, !dbg !5929
  br i1 %tobool7, label %if.end10, label %if.then8, !dbg !5930

if.then8:                                         ; preds = %if.end
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !5931
  %call9 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %11), !dbg !5932
  store %struct.gimple_seq_d* %call9, %struct.gimple_seq_d** %retval, align 8, !dbg !5933
  br label %return, !dbg !5933

if.end10:                                         ; preds = %if.end
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %new_seq, align 8, !dbg !5934
  %12 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5935
  %cur_region11 = getelementptr inbounds %struct.leh_state, %struct.leh_state* %12, i32 0, i32 0, !dbg !5936
  %13 = load %struct.eh_region_d*, %struct.eh_region_d** %cur_region11, align 8, !dbg !5936
  %cur_region12 = getelementptr inbounds %struct.leh_state, %struct.leh_state* %this_state, i32 0, i32 0, !dbg !5937
  store %struct.eh_region_d* %13, %struct.eh_region_d** %cur_region12, align 8, !dbg !5938
  %14 = load %struct.eh_region_d*, %struct.eh_region_d** %this_region, align 8, !dbg !5939
  %ehp_region = getelementptr inbounds %struct.leh_state, %struct.leh_state* %this_state, i32 0, i32 1, !dbg !5940
  store %struct.eh_region_d* %14, %struct.eh_region_d** %ehp_region, align 8, !dbg !5941
  %15 = load %struct.eh_region_d*, %struct.eh_region_d** %this_region, align 8, !dbg !5942
  call void @emit_eh_dispatch(%struct.gimple_seq_d** %new_seq, %struct.eh_region_d* %15), !dbg !5943
  %16 = load %struct.eh_region_d*, %struct.eh_region_d** %this_region, align 8, !dbg !5944
  call void @emit_resx(%struct.gimple_seq_d** %new_seq, %struct.eh_region_d* %16), !dbg !5945
  %call13 = call %union.tree_node* @create_artificial_label(i32 0), !dbg !5946
  %17 = load %struct.eh_region_d*, %struct.eh_region_d** %this_region, align 8, !dbg !5947
  %u = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %17, i32 0, i32 5, !dbg !5948
  %allowed = bitcast %union.eh_region_u* %u to %struct.eh_region_u_allowed*, !dbg !5949
  %label = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed, i32 0, i32 1, !dbg !5950
  store %union.tree_node* %call13, %union.tree_node** %label, align 8, !dbg !5951
  %18 = load %struct.eh_region_d*, %struct.eh_region_d** %this_region, align 8, !dbg !5952
  %u14 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %18, i32 0, i32 5, !dbg !5953
  %allowed15 = bitcast %union.eh_region_u* %u14 to %struct.eh_region_u_allowed*, !dbg !5954
  %label16 = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed15, i32 0, i32 1, !dbg !5955
  %19 = load %union.tree_node*, %union.tree_node** %label16, align 8, !dbg !5955
  %call17 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %19), !dbg !5956
  store %union.gimple_statement_d* %call17, %union.gimple_statement_d** %x, align 8, !dbg !5957
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !5958
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %new_seq, %union.gimple_statement_d* %20), !dbg !5959
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %inner, align 8, !dbg !5960
  %call18 = call %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %21), !dbg !5961
  call void @lower_eh_constructs_1(%struct.leh_state* %this_state, %struct.gimple_seq_d* %call18), !dbg !5962
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %inner, align 8, !dbg !5963
  %call19 = call %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %22), !dbg !5964
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %new_seq, %struct.gimple_seq_d* %call19), !dbg !5965
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !5966
  %24 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_seq, align 8, !dbg !5967
  call void @gimple_try_set_cleanup(%union.gimple_statement_d* %23, %struct.gimple_seq_d* %24), !dbg !5968
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !5969
  %26 = load %struct.eh_region_d*, %struct.eh_region_d** %this_region, align 8, !dbg !5970
  %call20 = call %struct.gimple_seq_d* @frob_into_branch_around(%union.gimple_statement_d* %25, %struct.eh_region_d* %26, %union.tree_node* null), !dbg !5971
  store %struct.gimple_seq_d* %call20, %struct.gimple_seq_d** %retval, align 8, !dbg !5972
  br label %return, !dbg !5972

return:                                           ; preds = %if.end10, %if.then8
  %27 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %retval, align 8, !dbg !5973
  ret %struct.gimple_seq_d* %27, !dbg !5973
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @lower_eh_must_not_throw(%struct.leh_state* %state, %union.gimple_statement_d* %tp) #0 !dbg !5974 {
entry:
  %state.addr = alloca %struct.leh_state*, align 8
  %tp.addr = alloca %union.gimple_statement_d*, align 8
  %this_state = alloca %struct.leh_state, align 8
  %inner = alloca %union.gimple_statement_d*, align 8
  %this_region = alloca %struct.eh_region_d*, align 8
  store %struct.leh_state* %state, %struct.leh_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_state** %state.addr, metadata !5975, metadata !DIExpression()), !dbg !5976
  store %union.gimple_statement_d* %tp, %union.gimple_statement_d** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %tp.addr, metadata !5977, metadata !DIExpression()), !dbg !5978
  call void @llvm.dbg.declare(metadata %struct.leh_state* %this_state, metadata !5979, metadata !DIExpression()), !dbg !5980
  %0 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5981
  %1 = bitcast %struct.leh_state* %this_state to i8*, !dbg !5982
  %2 = bitcast %struct.leh_state* %0 to i8*, !dbg !5982
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !5982
  %3 = load i32, i32* @flag_exceptions, align 4, !dbg !5983
  %tobool = icmp ne i32 %3, 0, !dbg !5983
  br i1 %tobool, label %if.then, label %if.end, !dbg !5985

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %inner, metadata !5986, metadata !DIExpression()), !dbg !5988
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !5989
  %call = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %4), !dbg !5990
  %call1 = call %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %call), !dbg !5991
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %inner, align 8, !dbg !5988
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %this_region, metadata !5992, metadata !DIExpression()), !dbg !5993
  %5 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !5994
  %cur_region = getelementptr inbounds %struct.leh_state, %struct.leh_state* %5, i32 0, i32 0, !dbg !5995
  %6 = load %struct.eh_region_d*, %struct.eh_region_d** %cur_region, align 8, !dbg !5995
  %call2 = call %struct.eh_region_d* @gen_eh_region_must_not_throw(%struct.eh_region_d* %6), !dbg !5996
  store %struct.eh_region_d* %call2, %struct.eh_region_d** %this_region, align 8, !dbg !5997
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %inner, align 8, !dbg !5998
  %call3 = call %union.tree_node* @gimple_eh_must_not_throw_fndecl(%union.gimple_statement_d* %7), !dbg !5999
  %8 = load %struct.eh_region_d*, %struct.eh_region_d** %this_region, align 8, !dbg !6000
  %u = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %8, i32 0, i32 5, !dbg !6001
  %must_not_throw = bitcast %union.eh_region_u* %u to %struct.eh_region_u_must_not_throw*, !dbg !6002
  %failure_decl = getelementptr inbounds %struct.eh_region_u_must_not_throw, %struct.eh_region_u_must_not_throw* %must_not_throw, i32 0, i32 0, !dbg !6003
  store %union.tree_node* %call3, %union.tree_node** %failure_decl, align 8, !dbg !6004
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !6005
  %call4 = call i32 @gimple_location(%union.gimple_statement_d* %9), !dbg !6006
  %10 = load %struct.eh_region_d*, %struct.eh_region_d** %this_region, align 8, !dbg !6007
  %u5 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %10, i32 0, i32 5, !dbg !6008
  %must_not_throw6 = bitcast %union.eh_region_u* %u5 to %struct.eh_region_u_must_not_throw*, !dbg !6009
  %failure_loc = getelementptr inbounds %struct.eh_region_u_must_not_throw, %struct.eh_region_u_must_not_throw* %must_not_throw6, i32 0, i32 1, !dbg !6010
  store i32 %call4, i32* %failure_loc, align 8, !dbg !6011
  %11 = load %struct.eh_region_d*, %struct.eh_region_d** %this_region, align 8, !dbg !6012
  %u7 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %11, i32 0, i32 5, !dbg !6012
  %must_not_throw8 = bitcast %union.eh_region_u* %u7 to %struct.eh_region_u_must_not_throw*, !dbg !6012
  %failure_decl9 = getelementptr inbounds %struct.eh_region_u_must_not_throw, %struct.eh_region_u_must_not_throw* %must_not_throw8, i32 0, i32 0, !dbg !6012
  %12 = load %union.tree_node*, %union.tree_node** %failure_decl9, align 8, !dbg !6012
  %base = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !6012
  %13 = bitcast %struct.tree_base* %base to i64*, !dbg !6012
  %bf.load = load i64, i64* %13, align 8, !dbg !6013
  %bf.clear = and i64 %bf.load, -16777217, !dbg !6013
  %bf.set = or i64 %bf.clear, 16777216, !dbg !6013
  store i64 %bf.set, i64* %13, align 8, !dbg !6013
  %14 = load %struct.eh_region_d*, %struct.eh_region_d** %this_region, align 8, !dbg !6014
  %cur_region10 = getelementptr inbounds %struct.leh_state, %struct.leh_state* %this_state, i32 0, i32 0, !dbg !6015
  store %struct.eh_region_d* %14, %struct.eh_region_d** %cur_region10, align 8, !dbg !6016
  br label %if.end, !dbg !6017

if.end:                                           ; preds = %if.then, %entry
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !6018
  %call11 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %15), !dbg !6019
  call void @lower_eh_constructs_1(%struct.leh_state* %this_state, %struct.gimple_seq_d* %call11), !dbg !6020
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !6021
  %call12 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %16), !dbg !6022
  ret %struct.gimple_seq_d* %call12, !dbg !6023
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @lower_cleanup(%struct.leh_state* %state, %union.gimple_statement_d* %tp) #0 !dbg !6024 {
entry:
  %retval = alloca %struct.gimple_seq_d*, align 8
  %state.addr = alloca %struct.leh_state*, align 8
  %tp.addr = alloca %union.gimple_statement_d*, align 8
  %this_state = alloca %struct.leh_state, align 8
  %this_region = alloca %struct.eh_region_d*, align 8
  %fake_tf = alloca %struct.leh_tf_state, align 8
  %result = alloca %struct.gimple_seq_d*, align 8
  %x = alloca %union.gimple_statement_d*, align 8
  store %struct.leh_state* %state, %struct.leh_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_state** %state.addr, metadata !6025, metadata !DIExpression()), !dbg !6026
  store %union.gimple_statement_d* %tp, %union.gimple_statement_d** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %tp.addr, metadata !6027, metadata !DIExpression()), !dbg !6028
  call void @llvm.dbg.declare(metadata %struct.leh_state* %this_state, metadata !6029, metadata !DIExpression()), !dbg !6030
  %0 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !6031
  %1 = bitcast %struct.leh_state* %this_state to i8*, !dbg !6032
  %2 = bitcast %struct.leh_state* %0 to i8*, !dbg !6032
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !6032
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %this_region, metadata !6033, metadata !DIExpression()), !dbg !6034
  store %struct.eh_region_d* null, %struct.eh_region_d** %this_region, align 8, !dbg !6034
  call void @llvm.dbg.declare(metadata %struct.leh_tf_state* %fake_tf, metadata !6035, metadata !DIExpression()), !dbg !6036
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %result, metadata !6037, metadata !DIExpression()), !dbg !6038
  %3 = load i32, i32* @flag_exceptions, align 4, !dbg !6039
  %tobool = icmp ne i32 %3, 0, !dbg !6039
  br i1 %tobool, label %if.then, label %if.end, !dbg !6041

if.then:                                          ; preds = %entry
  %4 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !6042
  %cur_region = getelementptr inbounds %struct.leh_state, %struct.leh_state* %4, i32 0, i32 0, !dbg !6044
  %5 = load %struct.eh_region_d*, %struct.eh_region_d** %cur_region, align 8, !dbg !6044
  %call = call %struct.eh_region_d* @gen_eh_region_cleanup(%struct.eh_region_d* %5), !dbg !6045
  store %struct.eh_region_d* %call, %struct.eh_region_d** %this_region, align 8, !dbg !6046
  %6 = load %struct.eh_region_d*, %struct.eh_region_d** %this_region, align 8, !dbg !6047
  %cur_region1 = getelementptr inbounds %struct.leh_state, %struct.leh_state* %this_state, i32 0, i32 0, !dbg !6048
  store %struct.eh_region_d* %6, %struct.eh_region_d** %cur_region1, align 8, !dbg !6049
  br label %if.end, !dbg !6050

if.end:                                           ; preds = %if.then, %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !6051
  %call2 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %7), !dbg !6052
  call void @lower_eh_constructs_1(%struct.leh_state* %this_state, %struct.gimple_seq_d* %call2), !dbg !6053
  %8 = load %struct.eh_region_d*, %struct.eh_region_d** %this_region, align 8, !dbg !6054
  %call3 = call zeroext i8 @eh_region_may_contain_throw(%struct.eh_region_d* %8), !dbg !6056
  %tobool4 = icmp ne i8 %call3, 0, !dbg !6056
  br i1 %tobool4, label %if.end7, label %if.then5, !dbg !6057

if.then5:                                         ; preds = %if.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !6058
  %call6 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %9), !dbg !6059
  store %struct.gimple_seq_d* %call6, %struct.gimple_seq_d** %retval, align 8, !dbg !6060
  br label %return, !dbg !6060

if.end7:                                          ; preds = %if.end
  %10 = bitcast %struct.leh_tf_state* %fake_tf to i8*, !dbg !6061
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 96, i1 false), !dbg !6061
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !6062
  %try_finally_expr = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %fake_tf, i32 0, i32 0, !dbg !6063
  store %union.gimple_statement_d* %11, %union.gimple_statement_d** %try_finally_expr, align 8, !dbg !6064
  %top_p = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %fake_tf, i32 0, i32 1, !dbg !6065
  store %union.gimple_statement_d* %11, %union.gimple_statement_d** %top_p, align 8, !dbg !6066
  %12 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !6067
  %outer = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %fake_tf, i32 0, i32 3, !dbg !6068
  store %struct.leh_state* %12, %struct.leh_state** %outer, align 8, !dbg !6069
  %13 = load %struct.eh_region_d*, %struct.eh_region_d** %this_region, align 8, !dbg !6070
  %region = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %fake_tf, i32 0, i32 4, !dbg !6071
  store %struct.eh_region_d* %13, %struct.eh_region_d** %region, align 8, !dbg !6072
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !6073
  %call8 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %14), !dbg !6074
  %call9 = call zeroext i8 @gimple_seq_may_fallthru(%struct.gimple_seq_d* %call8), !dbg !6075
  %may_fallthru = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %fake_tf, i32 0, i32 11, !dbg !6076
  store i8 %call9, i8* %may_fallthru, align 8, !dbg !6077
  %may_throw = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %fake_tf, i32 0, i32 13, !dbg !6078
  store i8 1, i8* %may_throw, align 2, !dbg !6079
  %15 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !6080
  call void @honor_protect_cleanup_actions(%struct.leh_state* %15, %struct.leh_state* null, %struct.leh_tf_state* %fake_tf), !dbg !6081
  %may_throw10 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %fake_tf, i32 0, i32 13, !dbg !6082
  %16 = load i8, i8* %may_throw10, align 2, !dbg !6082
  %tobool11 = icmp ne i8 %16, 0, !dbg !6084
  br i1 %tobool11, label %if.then12, label %if.else, !dbg !6085

if.then12:                                        ; preds = %if.end7
  %17 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !6086
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !6088
  %call13 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %18), !dbg !6089
  call void @lower_eh_constructs_1(%struct.leh_state* %17, %struct.gimple_seq_d* %call13), !dbg !6090
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !6091
  %20 = load %struct.eh_region_d*, %struct.eh_region_d** %this_region, align 8, !dbg !6092
  %fallthru_label = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %fake_tf, i32 0, i32 10, !dbg !6093
  %21 = load %union.tree_node*, %union.tree_node** %fallthru_label, align 8, !dbg !6093
  %call14 = call %struct.gimple_seq_d* @frob_into_branch_around(%union.gimple_statement_d* %19, %struct.eh_region_d* %20, %union.tree_node* %21), !dbg !6094
  store %struct.gimple_seq_d* %call14, %struct.gimple_seq_d** %result, align 8, !dbg !6095
  br label %if.end22, !dbg !6096

if.else:                                          ; preds = %if.end7
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !6097
  %call15 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %22), !dbg !6099
  store %struct.gimple_seq_d* %call15, %struct.gimple_seq_d** %result, align 8, !dbg !6100
  %fallthru_label16 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %fake_tf, i32 0, i32 10, !dbg !6101
  %23 = load %union.tree_node*, %union.tree_node** %fallthru_label16, align 8, !dbg !6101
  %tobool17 = icmp ne %union.tree_node* %23, null, !dbg !6103
  br i1 %tobool17, label %if.then18, label %if.end21, !dbg !6104

if.then18:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %x, metadata !6105, metadata !DIExpression()), !dbg !6107
  %fallthru_label19 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %fake_tf, i32 0, i32 10, !dbg !6108
  %24 = load %union.tree_node*, %union.tree_node** %fallthru_label19, align 8, !dbg !6108
  %call20 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %24), !dbg !6109
  store %union.gimple_statement_d* %call20, %union.gimple_statement_d** %x, align 8, !dbg !6107
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !6110
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %result, %union.gimple_statement_d* %25), !dbg !6111
  br label %if.end21, !dbg !6112

if.end21:                                         ; preds = %if.then18, %if.else
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.then12
  %26 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %result, align 8, !dbg !6113
  store %struct.gimple_seq_d* %26, %struct.gimple_seq_d** %retval, align 8, !dbg !6114
  br label %return, !dbg !6114

return:                                           ; preds = %if.end22, %if.then5
  %27 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %retval, align 8, !dbg !6115
  ret %struct.gimple_seq_d* %27, !dbg !6115
}

declare dso_local void @gsi_insert_seq_before(%struct.gimple_stmt_iterator*, %struct.gimple_seq_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !6116 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6117, metadata !DIExpression()), !dbg !6118
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6119
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6120
  ret %union.tree_node* %call, !dbg !6121
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !6122 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6123, metadata !DIExpression()), !dbg !6124
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6125, metadata !DIExpression()), !dbg !6126
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !6127, metadata !DIExpression()), !dbg !6128
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6129
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6129
  %conv = zext i8 %call to i32, !dbg !6129
  %tobool = icmp ne i32 %conv, 0, !dbg !6129
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !6129

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !6129
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6129
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !6129
  %cmp = icmp ult i32 %1, %call1, !dbg !6129
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6129

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6129
  br label %cond.end, !dbg !6129

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6129

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6129
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6130
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6131
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !6132
  %5 = load i32, i32* %i.addr, align 4, !dbg !6133
  %idxprom = zext i32 %5 to i64, !dbg !6132
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !6132
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !6134
  ret void, !dbg !6135
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !6136 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6139, metadata !DIExpression()), !dbg !6140
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6141
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6142
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !6143
  %1 = load i32, i32* %num_ops, align 4, !dbg !6143
  ret i32 %1, !dbg !6144
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !6145 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6146, metadata !DIExpression()), !dbg !6147
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6148
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6149
  %cmp = icmp eq i32 %call, 6, !dbg !6150
  %conv = zext i1 %cmp to i32, !dbg !6150
  %conv1 = trunc i32 %conv to i8, !dbg !6149
  ret i8 %conv1, !dbg !6151
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !6152 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6153, metadata !DIExpression()), !dbg !6154
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6155
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6156
  %cmp = icmp eq i32 %call, 8, !dbg !6157
  %conv = zext i1 %cmp to i32, !dbg !6157
  %conv1 = trunc i32 %conv to i8, !dbg !6156
  ret i8 %conv1, !dbg !6158
}

declare dso_local %struct.eh_landing_pad_d* @gen_eh_landing_pad(%struct.eh_region_d*) #2

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !6159 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6162, metadata !DIExpression()), !dbg !6163
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6164, metadata !DIExpression()), !dbg !6165
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6166
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6168
  %tobool = icmp ne i8 %call, 0, !dbg !6168
  br i1 %tobool, label %if.then, label %if.else, !dbg !6169

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6170
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !6172
  %2 = load i32, i32* %i.addr, align 4, !dbg !6173
  %idx.ext = zext i32 %2 to i64, !dbg !6174
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idx.ext, !dbg !6174
  store %union.tree_node** %add.ptr, %union.tree_node*** %retval, align 8, !dbg !6175
  br label %return, !dbg !6175

if.else:                                          ; preds = %entry
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !6176
  br label %return, !dbg !6176

return:                                           ; preds = %if.else, %if.then
  %3 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !6177
  ret %union.tree_node** %3, !dbg !6177
}

; Function Attrs: noinline nounwind uwtable
define internal void @record_in_goto_queue_label(%struct.leh_tf_state* %tf, %union.tree_node** %stmt.coerce, %union.tree_node* %label) #0 !dbg !6178 {
entry:
  %stmt = alloca %union.treemple, align 8
  %tf.addr = alloca %struct.leh_tf_state*, align 8
  %label.addr = alloca %union.tree_node*, align 8
  %index = alloca i32, align 4
  %temp = alloca %union.treemple, align 8
  %new_stmt = alloca %union.treemple, align 8
  %n = alloca i32, align 4
  %coerce.dive = getelementptr inbounds %union.treemple, %union.treemple* %stmt, i32 0, i32 0
  store %union.tree_node** %stmt.coerce, %union.tree_node*** %coerce.dive, align 8
  store %struct.leh_tf_state* %tf, %struct.leh_tf_state** %tf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_tf_state** %tf.addr, metadata !6181, metadata !DIExpression()), !dbg !6182
  call void @llvm.dbg.declare(metadata %union.treemple* %stmt, metadata !6183, metadata !DIExpression()), !dbg !6184
  store %union.tree_node* %label, %union.tree_node** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %label.addr, metadata !6185, metadata !DIExpression()), !dbg !6186
  call void @llvm.dbg.declare(metadata i32* %index, metadata !6187, metadata !DIExpression()), !dbg !6188
  call void @llvm.dbg.declare(metadata %union.treemple* %temp, metadata !6189, metadata !DIExpression()), !dbg !6190
  call void @llvm.dbg.declare(metadata %union.treemple* %new_stmt, metadata !6191, metadata !DIExpression()), !dbg !6192
  %0 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !6193
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !6193
  br i1 %tobool, label %if.end, label %if.then, !dbg !6195

if.then:                                          ; preds = %entry
  br label %return, !dbg !6196

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !6197
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6197
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6197
  %bf.load = load i64, i64* %2, align 8, !dbg !6197
  %bf.clear = and i64 %bf.load, 65535, !dbg !6197
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6197
  %cmp = icmp ne i32 %bf.cast, 30, !dbg !6199
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !6200

if.then1:                                         ; preds = %if.end
  br label %return, !dbg !6201

if.end2:                                          ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !6202
  %t = bitcast %union.treemple* %temp to %union.tree_node**, !dbg !6203
  store %union.tree_node* %3, %union.tree_node** %t, align 8, !dbg !6204
  %4 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6205
  %try_finally_expr = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %4, i32 0, i32 0, !dbg !6207
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %try_finally_expr, align 8, !dbg !6207
  %coerce.dive3 = getelementptr inbounds %union.treemple, %union.treemple* %temp, i32 0, i32 0, !dbg !6208
  %6 = load %union.tree_node**, %union.tree_node*** %coerce.dive3, align 8, !dbg !6208
  %call = call zeroext i8 @outside_finally_tree(%union.tree_node** %6, %union.gimple_statement_d* %5), !dbg !6208
  %tobool4 = icmp ne i8 %call, 0, !dbg !6208
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !6209

if.then5:                                         ; preds = %if.end2
  br label %return, !dbg !6210

if.end6:                                          ; preds = %if.end2
  %7 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6211
  %dest_array = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %7, i32 0, i32 9, !dbg !6213
  %8 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dest_array, align 8, !dbg !6213
  %tobool7 = icmp ne %struct.VEC_tree_heap* %8, null, !dbg !6211
  br i1 %tobool7, label %if.else, label %if.then8, !dbg !6214

if.then8:                                         ; preds = %if.end6
  %call9 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 10), !dbg !6215
  %9 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6217
  %dest_array10 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %9, i32 0, i32 9, !dbg !6218
  store %struct.VEC_tree_heap* %call9, %struct.VEC_tree_heap** %dest_array10, align 8, !dbg !6219
  %10 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6220
  %dest_array11 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %10, i32 0, i32 9, !dbg !6220
  %11 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dest_array11, align 8, !dbg !6220
  %tobool12 = icmp ne %struct.VEC_tree_heap* %11, null, !dbg !6220
  br i1 %tobool12, label %cond.true, label %cond.false, !dbg !6220

cond.true:                                        ; preds = %if.then8
  %12 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6220
  %dest_array13 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %12, i32 0, i32 9, !dbg !6220
  %13 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dest_array13, align 8, !dbg !6220
  %base14 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %13, i32 0, i32 0, !dbg !6220
  br label %cond.end, !dbg !6220

cond.false:                                       ; preds = %if.then8
  br label %cond.end, !dbg !6220

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base14, %cond.true ], [ null, %cond.false ], !dbg !6220
  %14 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !6220
  %call15 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %14), !dbg !6220
  store i32 0, i32* %index, align 4, !dbg !6221
  br label %if.end43, !dbg !6222

if.else:                                          ; preds = %if.end6
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6223, metadata !DIExpression()), !dbg !6225
  %15 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6226
  %dest_array16 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %15, i32 0, i32 9, !dbg !6226
  %16 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dest_array16, align 8, !dbg !6226
  %tobool17 = icmp ne %struct.VEC_tree_heap* %16, null, !dbg !6226
  br i1 %tobool17, label %cond.true18, label %cond.false21, !dbg !6226

cond.true18:                                      ; preds = %if.else
  %17 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6226
  %dest_array19 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %17, i32 0, i32 9, !dbg !6226
  %18 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dest_array19, align 8, !dbg !6226
  %base20 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %18, i32 0, i32 0, !dbg !6226
  br label %cond.end22, !dbg !6226

cond.false21:                                     ; preds = %if.else
  br label %cond.end22, !dbg !6226

cond.end22:                                       ; preds = %cond.false21, %cond.true18
  %cond23 = phi %struct.VEC_tree_base* [ %base20, %cond.true18 ], [ null, %cond.false21 ], !dbg !6226
  %call24 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond23), !dbg !6226
  store i32 %call24, i32* %n, align 4, !dbg !6225
  store i32 0, i32* %index, align 4, !dbg !6227
  br label %for.cond, !dbg !6229

for.cond:                                         ; preds = %for.inc, %cond.end22
  %19 = load i32, i32* %index, align 4, !dbg !6230
  %20 = load i32, i32* %n, align 4, !dbg !6232
  %cmp25 = icmp slt i32 %19, %20, !dbg !6233
  br i1 %cmp25, label %for.body, label %for.end, !dbg !6234

for.body:                                         ; preds = %for.cond
  %21 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6235
  %dest_array26 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %21, i32 0, i32 9, !dbg !6235
  %22 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dest_array26, align 8, !dbg !6235
  %tobool27 = icmp ne %struct.VEC_tree_heap* %22, null, !dbg !6235
  br i1 %tobool27, label %cond.true28, label %cond.false31, !dbg !6235

cond.true28:                                      ; preds = %for.body
  %23 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6235
  %dest_array29 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %23, i32 0, i32 9, !dbg !6235
  %24 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dest_array29, align 8, !dbg !6235
  %base30 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %24, i32 0, i32 0, !dbg !6235
  br label %cond.end32, !dbg !6235

cond.false31:                                     ; preds = %for.body
  br label %cond.end32, !dbg !6235

cond.end32:                                       ; preds = %cond.false31, %cond.true28
  %cond33 = phi %struct.VEC_tree_base* [ %base30, %cond.true28 ], [ null, %cond.false31 ], !dbg !6235
  %25 = load i32, i32* %index, align 4, !dbg !6235
  %call34 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond33, i32 %25), !dbg !6235
  %26 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !6237
  %cmp35 = icmp eq %union.tree_node* %call34, %26, !dbg !6238
  br i1 %cmp35, label %if.then36, label %if.end37, !dbg !6239

if.then36:                                        ; preds = %cond.end32
  br label %for.end, !dbg !6240

if.end37:                                         ; preds = %cond.end32
  br label %for.inc, !dbg !6237

for.inc:                                          ; preds = %if.end37
  %27 = load i32, i32* %index, align 4, !dbg !6241
  %inc = add nsw i32 %27, 1, !dbg !6241
  store i32 %inc, i32* %index, align 4, !dbg !6241
  br label %for.cond, !dbg !6242, !llvm.loop !6243

for.end:                                          ; preds = %if.then36, %for.cond
  %28 = load i32, i32* %index, align 4, !dbg !6245
  %29 = load i32, i32* %n, align 4, !dbg !6247
  %cmp38 = icmp eq i32 %28, %29, !dbg !6248
  br i1 %cmp38, label %if.then39, label %if.end42, !dbg !6249

if.then39:                                        ; preds = %for.end
  %30 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6250
  %dest_array40 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %30, i32 0, i32 9, !dbg !6250
  %31 = load %union.tree_node*, %union.tree_node** %label.addr, align 8, !dbg !6250
  %call41 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %dest_array40, %union.tree_node* %31), !dbg !6250
  br label %if.end42, !dbg !6250

if.end42:                                         ; preds = %if.then39, %for.end
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %cond.end
  %32 = bitcast %union.treemple* %new_stmt to i8*, !dbg !6251
  %33 = bitcast %union.treemple* %stmt to i8*, !dbg !6251
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 8, i1 false), !dbg !6251
  %34 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6252
  %35 = load i32, i32* %index, align 4, !dbg !6253
  %coerce.dive44 = getelementptr inbounds %union.treemple, %union.treemple* %new_stmt, i32 0, i32 0, !dbg !6254
  %36 = load %union.tree_node**, %union.tree_node*** %coerce.dive44, align 8, !dbg !6254
  call void @record_in_goto_queue(%struct.leh_tf_state* %34, %union.tree_node** %36, i32 %35, i8 zeroext 1), !dbg !6254
  br label %return, !dbg !6255

return:                                           ; preds = %if.end43, %if.then5, %if.then1, %if.then
  ret void, !dbg !6255
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_true_label(%union.gimple_statement_d* %gs) #0 !dbg !6256 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6257, metadata !DIExpression()), !dbg !6258
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6259
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 2), !dbg !6260
  ret %union.tree_node* %call, !dbg !6261
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_false_label(%union.gimple_statement_d* %gs) #0 !dbg !6262 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6263, metadata !DIExpression()), !dbg !6264
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6265
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 3), !dbg !6266
  ret %union.tree_node* %call, !dbg !6267
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %gs) #0 !dbg !6268 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6269, metadata !DIExpression()), !dbg !6270
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6271
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6272
  ret %union.tree_node* %call, !dbg !6273
}

; Function Attrs: noinline nounwind uwtable
define internal void @record_in_goto_queue(%struct.leh_tf_state* %tf, %union.tree_node** %new_stmt.coerce, i32 %index, i8 zeroext %is_label) #0 !dbg !6274 {
entry:
  %new_stmt = alloca %union.treemple, align 8
  %tf.addr = alloca %struct.leh_tf_state*, align 8
  %index.addr = alloca i32, align 4
  %is_label.addr = alloca i8, align 1
  %active = alloca i64, align 8
  %size = alloca i64, align 8
  %q = alloca %struct.goto_queue_node*, align 8
  %coerce.dive = getelementptr inbounds %union.treemple, %union.treemple* %new_stmt, i32 0, i32 0
  store %union.tree_node** %new_stmt.coerce, %union.tree_node*** %coerce.dive, align 8
  store %struct.leh_tf_state* %tf, %struct.leh_tf_state** %tf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_tf_state** %tf.addr, metadata !6277, metadata !DIExpression()), !dbg !6278
  call void @llvm.dbg.declare(metadata %union.treemple* %new_stmt, metadata !6279, metadata !DIExpression()), !dbg !6280
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !6281, metadata !DIExpression()), !dbg !6282
  store i8 %is_label, i8* %is_label.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %is_label.addr, metadata !6283, metadata !DIExpression()), !dbg !6284
  call void @llvm.dbg.declare(metadata i64* %active, metadata !6285, metadata !DIExpression()), !dbg !6286
  call void @llvm.dbg.declare(metadata i64* %size, metadata !6287, metadata !DIExpression()), !dbg !6288
  call void @llvm.dbg.declare(metadata %struct.goto_queue_node** %q, metadata !6289, metadata !DIExpression()), !dbg !6290
  %0 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6291
  %goto_queue_map = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %0, i32 0, i32 8, !dbg !6291
  %1 = load %struct.pointer_map_t*, %struct.pointer_map_t** %goto_queue_map, align 8, !dbg !6291
  %tobool = icmp ne %struct.pointer_map_t* %1, null, !dbg !6291
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6291

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 583, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6291
  br label %cond.end, !dbg !6291

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6291

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6291
  %2 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6292
  %goto_queue_active = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %2, i32 0, i32 7, !dbg !6293
  %3 = load i64, i64* %goto_queue_active, align 8, !dbg !6293
  store i64 %3, i64* %active, align 8, !dbg !6294
  %4 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6295
  %goto_queue_size = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %4, i32 0, i32 6, !dbg !6296
  %5 = load i64, i64* %goto_queue_size, align 8, !dbg !6296
  store i64 %5, i64* %size, align 8, !dbg !6297
  %6 = load i64, i64* %active, align 8, !dbg !6298
  %7 = load i64, i64* %size, align 8, !dbg !6300
  %cmp = icmp uge i64 %6, %7, !dbg !6301
  br i1 %cmp, label %if.then, label %if.end, !dbg !6302

if.then:                                          ; preds = %cond.end
  %8 = load i64, i64* %size, align 8, !dbg !6303
  %tobool1 = icmp ne i64 %8, 0, !dbg !6303
  br i1 %tobool1, label %cond.true2, label %cond.false3, !dbg !6303

cond.true2:                                       ; preds = %if.then
  %9 = load i64, i64* %size, align 8, !dbg !6305
  %mul = mul i64 %9, 2, !dbg !6306
  br label %cond.end4, !dbg !6303

cond.false3:                                      ; preds = %if.then
  br label %cond.end4, !dbg !6303

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i64 [ %mul, %cond.true2 ], [ 32, %cond.false3 ], !dbg !6303
  store i64 %cond5, i64* %size, align 8, !dbg !6307
  %10 = load i64, i64* %size, align 8, !dbg !6308
  %11 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6309
  %goto_queue_size6 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %11, i32 0, i32 6, !dbg !6310
  store i64 %10, i64* %goto_queue_size6, align 8, !dbg !6311
  %12 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6312
  %goto_queue = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %12, i32 0, i32 5, !dbg !6312
  %13 = load %struct.goto_queue_node*, %struct.goto_queue_node** %goto_queue, align 8, !dbg !6312
  %14 = bitcast %struct.goto_queue_node* %13 to i8*, !dbg !6312
  %15 = load i64, i64* %size, align 8, !dbg !6312
  %mul7 = mul i64 32, %15, !dbg !6312
  %call = call i8* @xrealloc(i8* %14, i64 %mul7), !dbg !6312
  %16 = bitcast i8* %call to %struct.goto_queue_node*, !dbg !6312
  %17 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6313
  %goto_queue8 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %17, i32 0, i32 5, !dbg !6314
  store %struct.goto_queue_node* %16, %struct.goto_queue_node** %goto_queue8, align 8, !dbg !6315
  br label %if.end, !dbg !6316

if.end:                                           ; preds = %cond.end4, %cond.end
  %18 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6317
  %goto_queue9 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %18, i32 0, i32 5, !dbg !6318
  %19 = load %struct.goto_queue_node*, %struct.goto_queue_node** %goto_queue9, align 8, !dbg !6318
  %20 = load i64, i64* %active, align 8, !dbg !6319
  %arrayidx = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %19, i64 %20, !dbg !6317
  store %struct.goto_queue_node* %arrayidx, %struct.goto_queue_node** %q, align 8, !dbg !6320
  %21 = load i64, i64* %active, align 8, !dbg !6321
  %add = add i64 %21, 1, !dbg !6322
  %22 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6323
  %goto_queue_active10 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %22, i32 0, i32 7, !dbg !6324
  store i64 %add, i64* %goto_queue_active10, align 8, !dbg !6325
  %23 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6326
  %24 = bitcast %struct.goto_queue_node* %23 to i8*, !dbg !6327
  call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 32, i1 false), !dbg !6327
  %25 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6328
  %stmt = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %25, i32 0, i32 0, !dbg !6329
  %26 = bitcast %union.treemple* %stmt to i8*, !dbg !6330
  %27 = bitcast %union.treemple* %new_stmt to i8*, !dbg !6330
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 8, i1 false), !dbg !6330
  %28 = load i32, i32* %index.addr, align 4, !dbg !6331
  %29 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6332
  %index11 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %29, i32 0, i32 3, !dbg !6333
  store i32 %28, i32* %index11, align 8, !dbg !6334
  %30 = load i8, i8* %is_label.addr, align 1, !dbg !6335
  %conv = zext i8 %30 to i32, !dbg !6335
  %31 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6336
  %is_label12 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %31, i32 0, i32 4, !dbg !6337
  store i32 %conv, i32* %is_label12, align 4, !dbg !6338
  ret void, !dbg !6339
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @outside_finally_tree(%union.tree_node** %start.coerce, %union.gimple_statement_d* %target) #0 !dbg !6340 {
entry:
  %retval = alloca i8, align 1
  %start = alloca %union.treemple, align 8
  %target.addr = alloca %union.gimple_statement_d*, align 8
  %n = alloca %struct.finally_tree_node, align 8
  %p = alloca %struct.finally_tree_node*, align 8
  %coerce.dive = getelementptr inbounds %union.treemple, %union.treemple* %start, i32 0, i32 0
  store %union.tree_node** %start.coerce, %union.tree_node*** %coerce.dive, align 8
  call void @llvm.dbg.declare(metadata %union.treemple* %start, metadata !6343, metadata !DIExpression()), !dbg !6344
  store %union.gimple_statement_d* %target, %union.gimple_statement_d** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %target.addr, metadata !6345, metadata !DIExpression()), !dbg !6346
  call void @llvm.dbg.declare(metadata %struct.finally_tree_node* %n, metadata !6347, metadata !DIExpression()), !dbg !6348
  call void @llvm.dbg.declare(metadata %struct.finally_tree_node** %p, metadata !6349, metadata !DIExpression()), !dbg !6350
  br label %do.body, !dbg !6351

do.body:                                          ; preds = %do.cond, %entry
  %child = getelementptr inbounds %struct.finally_tree_node, %struct.finally_tree_node* %n, i32 0, i32 0, !dbg !6352
  %0 = bitcast %union.treemple* %child to i8*, !dbg !6354
  %1 = bitcast %union.treemple* %start to i8*, !dbg !6354
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 8 %1, i64 8, i1 false), !dbg !6354
  %2 = load %struct.htab*, %struct.htab** @finally_tree, align 8, !dbg !6355
  %3 = bitcast %struct.finally_tree_node* %n to i8*, !dbg !6356
  %call = call i8* @htab_find(%struct.htab* %2, i8* %3), !dbg !6357
  %4 = bitcast i8* %call to %struct.finally_tree_node*, !dbg !6358
  store %struct.finally_tree_node* %4, %struct.finally_tree_node** %p, align 8, !dbg !6359
  %5 = load %struct.finally_tree_node*, %struct.finally_tree_node** %p, align 8, !dbg !6360
  %tobool = icmp ne %struct.finally_tree_node* %5, null, !dbg !6360
  br i1 %tobool, label %if.end, label %if.then, !dbg !6362

if.then:                                          ; preds = %do.body
  store i8 1, i8* %retval, align 1, !dbg !6363
  br label %return, !dbg !6363

if.end:                                           ; preds = %do.body
  %6 = load %struct.finally_tree_node*, %struct.finally_tree_node** %p, align 8, !dbg !6364
  %parent = getelementptr inbounds %struct.finally_tree_node, %struct.finally_tree_node* %6, i32 0, i32 1, !dbg !6365
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %parent, align 8, !dbg !6365
  %g = bitcast %union.treemple* %start to %union.gimple_statement_d**, !dbg !6366
  store %union.gimple_statement_d* %7, %union.gimple_statement_d** %g, align 8, !dbg !6367
  br label %do.cond, !dbg !6368

do.cond:                                          ; preds = %if.end
  %g1 = bitcast %union.treemple* %start to %union.gimple_statement_d**, !dbg !6369
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g1, align 8, !dbg !6369
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %target.addr, align 8, !dbg !6370
  %cmp = icmp ne %union.gimple_statement_d* %8, %9, !dbg !6371
  br i1 %cmp, label %do.body, label %do.end, !dbg !6368, !llvm.loop !6372

do.end:                                           ; preds = %do.cond
  store i8 0, i8* %retval, align 1, !dbg !6374
  br label %return, !dbg !6374

return:                                           ; preds = %do.end, %if.then
  %10 = load i8, i8* %retval, align 1, !dbg !6375
  ret i8 %10, !dbg !6375
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) #0 !dbg !6376 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6379, metadata !DIExpression()), !dbg !6380
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6380
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !6380
  %1 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !6380
  ret %struct.VEC_tree_heap* %1, !dbg !6380
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !6381 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6385, metadata !DIExpression()), !dbg !6386
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !6387, metadata !DIExpression()), !dbg !6386
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !6388, metadata !DIExpression()), !dbg !6386
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6386
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !6386
  %1 = load i32, i32* %num, align 8, !dbg !6386
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6386
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !6386
  %3 = load i32, i32* %alloc, align 4, !dbg !6386
  %cmp = icmp ult i32 %1, %3, !dbg !6386
  %conv = zext i1 %cmp to i32, !dbg !6386
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6386
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !6386
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6386
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !6386
  %6 = load i32, i32* %num1, align 8, !dbg !6386
  %inc = add i32 %6, 1, !dbg !6386
  store i32 %inc, i32* %num1, align 8, !dbg !6386
  %idxprom = zext i32 %6 to i64, !dbg !6386
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !6386
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !6386
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !6386
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !6386
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !6386
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !6386
  ret %union.tree_node** %9, !dbg !6386
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !6389 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6394, metadata !DIExpression()), !dbg !6395
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6395
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !6395
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6395

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6395
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !6395
  %2 = load i32, i32* %num, align 8, !dbg !6395
  br label %cond.end, !dbg !6395

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6395

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6395
  ret i32 %cond, !dbg !6395
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !6396 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6399, metadata !DIExpression()), !dbg !6400
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6401, metadata !DIExpression()), !dbg !6400
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6400
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !6400
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6400

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6400
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6400
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !6400
  %3 = load i32, i32* %num, align 8, !dbg !6400
  %cmp = icmp ult i32 %1, %3, !dbg !6400
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6402
  %land.ext = zext i1 %4 to i32, !dbg !6400
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6400
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !6400
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6400
  %idxprom = zext i32 %6 to i64, !dbg !6400
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !6400
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6400
  ret %union.tree_node* %7, !dbg !6400
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %vec_, %union.tree_node* %obj_) #0 !dbg !6403 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !6407, metadata !DIExpression()), !dbg !6408
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !6409, metadata !DIExpression()), !dbg !6408
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !6408
  %call = call i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %0, i32 1), !dbg !6408
  %1 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !6408
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %1, align 8, !dbg !6408
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !6408
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6408

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !6408
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %3, align 8, !dbg !6408
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !6408
  br label %cond.end, !dbg !6408

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6408

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6408
  %5 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !6408
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !6408
  ret %union.tree_node** %call1, !dbg !6408
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %vec_, i32 %alloc_) #0 !dbg !6410 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !6413, metadata !DIExpression()), !dbg !6414
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6415, metadata !DIExpression()), !dbg !6414
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6416, metadata !DIExpression()), !dbg !6414
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !6414
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !6414
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !6414
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6414

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !6414
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !6414
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !6414
  br label %cond.end, !dbg !6414

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6414

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6414
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6414
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !6414
  %tobool1 = icmp ne i32 %call, 0, !dbg !6414
  %lnot = xor i1 %tobool1, true, !dbg !6414
  %lnot.ext = zext i1 %lnot to i32, !dbg !6414
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6414
  %5 = load i32, i32* %extend, align 4, !dbg !6417
  %tobool2 = icmp ne i32 %5, 0, !dbg !6417
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6414

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !6417
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %6, align 8, !dbg !6417
  %8 = bitcast %struct.VEC_tree_heap* %7 to i8*, !dbg !6417
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6417
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !6417
  %10 = bitcast i8* %call3 to %struct.VEC_tree_heap*, !dbg !6417
  %11 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !6417
  store %struct.VEC_tree_heap* %10, %struct.VEC_tree_heap** %11, align 8, !dbg !6417
  br label %if.end, !dbg !6417

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6414
  ret i32 %12, !dbg !6414
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) #0 !dbg !6419 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6422, metadata !DIExpression()), !dbg !6423
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6424, metadata !DIExpression()), !dbg !6423
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6423
  %cmp = icmp sge i32 %0, 0, !dbg !6423
  %conv = zext i1 %cmp to i32, !dbg !6423
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6423
  %tobool = icmp ne %struct.VEC_tree_base* %1, null, !dbg !6423
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6423

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6423
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !6423
  %3 = load i32, i32* %alloc, align 4, !dbg !6423
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6423
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 0, !dbg !6423
  %5 = load i32, i32* %num, align 8, !dbg !6423
  %sub = sub i32 %3, %5, !dbg !6423
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6423
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6423
  %conv2 = zext i1 %cmp1 to i32, !dbg !6423
  br label %cond.end, !dbg !6423

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6423
  %tobool3 = icmp ne i32 %7, 0, !dbg !6423
  %lnot = xor i1 %tobool3, true, !dbg !6423
  %lnot.ext = zext i1 %lnot to i32, !dbg !6423
  br label %cond.end, !dbg !6423

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6423
  ret i32 %cond, !dbg !6423
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

declare dso_local i8* @xrealloc(i8*, i64) #2

declare dso_local %struct.eh_region_d* @gen_eh_region_cleanup(%struct.eh_region_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @eh_region_may_contain_throw(%struct.eh_region_d* %r) #0 !dbg !6425 {
entry:
  %r.addr = alloca %struct.eh_region_d*, align 8
  store %struct.eh_region_d* %r, %struct.eh_region_d** %r.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r.addr, metadata !6428, metadata !DIExpression()), !dbg !6429
  %0 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6430
  %tobool = icmp ne %struct.eh_region_d* %0, null, !dbg !6430
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6431

land.rhs:                                         ; preds = %entry
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @eh_region_may_contain_throw_map, align 8, !dbg !6432
  %2 = load %struct.eh_region_d*, %struct.eh_region_d** %r.addr, align 8, !dbg !6433
  %index = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %2, i32 0, i32 3, !dbg !6434
  %3 = load i32, i32* %index, align 8, !dbg !6434
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %1, i32 %3), !dbg !6435
  %tobool1 = icmp ne i32 %call, 0, !dbg !6431
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %tobool1, %land.rhs ], !dbg !6436
  %land.ext = zext i1 %4 to i32, !dbg !6431
  %conv = trunc i32 %land.ext to i8, !dbg !6430
  ret i8 %conv, !dbg !6437
}

; Function Attrs: noinline nounwind uwtable
define internal void @honor_protect_cleanup_actions(%struct.leh_state* %outer_state, %struct.leh_state* %this_state, %struct.leh_tf_state* %tf) #0 !dbg !6438 {
entry:
  %outer_state.addr = alloca %struct.leh_state*, align 8
  %this_state.addr = alloca %struct.leh_state*, align 8
  %tf.addr = alloca %struct.leh_tf_state*, align 8
  %protect_cleanup_actions = alloca %union.tree_node*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %finally_may_fallthru = alloca i8, align 1
  %finally = alloca %struct.gimple_seq_d*, align 8
  %x = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.leh_state* %outer_state, %struct.leh_state** %outer_state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_state** %outer_state.addr, metadata !6441, metadata !DIExpression()), !dbg !6442
  store %struct.leh_state* %this_state, %struct.leh_state** %this_state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_state** %this_state.addr, metadata !6443, metadata !DIExpression()), !dbg !6444
  store %struct.leh_tf_state* %tf, %struct.leh_tf_state** %tf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_tf_state** %tf.addr, metadata !6445, metadata !DIExpression()), !dbg !6446
  call void @llvm.dbg.declare(metadata %union.tree_node** %protect_cleanup_actions, metadata !6447, metadata !DIExpression()), !dbg !6448
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6449, metadata !DIExpression()), !dbg !6450
  call void @llvm.dbg.declare(metadata i8* %finally_may_fallthru, metadata !6451, metadata !DIExpression()), !dbg !6452
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %finally, metadata !6453, metadata !DIExpression()), !dbg !6454
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %x, metadata !6455, metadata !DIExpression()), !dbg !6456
  %0 = load %union.tree_node* ()*, %union.tree_node* ()** @lang_protect_cleanup_actions, align 8, !dbg !6457
  %cmp = icmp eq %union.tree_node* ()* %0, null, !dbg !6459
  br i1 %cmp, label %if.then, label %if.end, !dbg !6460

if.then:                                          ; preds = %entry
  br label %return, !dbg !6461

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node* ()*, %union.tree_node* ()** @lang_protect_cleanup_actions, align 8, !dbg !6462
  %call = call %union.tree_node* %1(), !dbg !6462
  store %union.tree_node* %call, %union.tree_node** %protect_cleanup_actions, align 8, !dbg !6463
  %2 = load %union.tree_node*, %union.tree_node** %protect_cleanup_actions, align 8, !dbg !6464
  %cmp1 = icmp eq %union.tree_node* %2, null, !dbg !6466
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !6467

if.then2:                                         ; preds = %if.end
  br label %return, !dbg !6468

if.end3:                                          ; preds = %if.end
  %3 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6469
  %top_p = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %3, i32 0, i32 1, !dbg !6470
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %top_p, align 8, !dbg !6470
  %call4 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %4), !dbg !6471
  store %struct.gimple_seq_d* %call4, %struct.gimple_seq_d** %finally, align 8, !dbg !6472
  %5 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %finally, align 8, !dbg !6473
  %call5 = call zeroext i8 @gimple_seq_may_fallthru(%struct.gimple_seq_d* %5), !dbg !6474
  store i8 %call5, i8* %finally_may_fallthru, align 1, !dbg !6475
  %6 = load %struct.leh_state*, %struct.leh_state** %this_state.addr, align 8, !dbg !6476
  %tobool = icmp ne %struct.leh_state* %6, null, !dbg !6476
  br i1 %tobool, label %if.then6, label %if.end8, !dbg !6478

if.then6:                                         ; preds = %if.end3
  %7 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %finally, align 8, !dbg !6479
  %8 = load %struct.leh_state*, %struct.leh_state** %outer_state.addr, align 8, !dbg !6480
  %call7 = call %struct.gimple_seq_d* @lower_try_finally_dup_block(%struct.gimple_seq_d* %7, %struct.leh_state* %8), !dbg !6481
  store %struct.gimple_seq_d* %call7, %struct.gimple_seq_d** %finally, align 8, !dbg !6482
  br label %if.end8, !dbg !6483

if.end8:                                          ; preds = %if.then6, %if.end3
  %9 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %finally, align 8, !dbg !6484
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %9), !dbg !6485
  %10 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6485
  %11 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6485
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false), !dbg !6485
  %call9 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6486
  store %union.gimple_statement_d* %call9, %union.gimple_statement_d** %x, align 8, !dbg !6487
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !6488
  %call10 = call i32 @gimple_code(%union.gimple_statement_d* %12), !dbg !6490
  %cmp11 = icmp eq i32 %call10, 17, !dbg !6491
  br i1 %cmp11, label %land.lhs.true, label %if.end19, !dbg !6492

land.lhs.true:                                    ; preds = %if.end8
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !6493
  %call12 = call i32 @gimple_try_kind(%union.gimple_statement_d* %13), !dbg !6494
  %cmp13 = icmp eq i32 %call12, 1, !dbg !6495
  br i1 %cmp13, label %land.lhs.true14, label %if.end19, !dbg !6496

land.lhs.true14:                                  ; preds = %land.lhs.true
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !6497
  %call15 = call zeroext i8 @gimple_try_catch_is_cleanup(%union.gimple_statement_d* %14), !dbg !6498
  %conv = zext i8 %call15 to i32, !dbg !6498
  %tobool16 = icmp ne i32 %conv, 0, !dbg !6498
  br i1 %tobool16, label %if.then17, label %if.end19, !dbg !6499

if.then17:                                        ; preds = %land.lhs.true14
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !6500
  %call18 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %15), !dbg !6502
  call void @gsi_insert_seq_before(%struct.gimple_stmt_iterator* %gsi, %struct.gimple_seq_d* %call18, i32 1), !dbg !6503
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 0), !dbg !6504
  br label %if.end19, !dbg !6505

if.end19:                                         ; preds = %if.then17, %land.lhs.true14, %land.lhs.true, %if.end8
  %16 = load %union.tree_node*, %union.tree_node** %protect_cleanup_actions, align 8, !dbg !6506
  %call20 = call %union.gimple_statement_d* @gimple_build_eh_must_not_throw(%union.tree_node* %16), !dbg !6507
  store %union.gimple_statement_d* %call20, %union.gimple_statement_d** %x, align 8, !dbg !6508
  %17 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %finally, align 8, !dbg !6509
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !6510
  %call21 = call %struct.gimple_seq_d* @gimple_seq_alloc_with_stmt(%union.gimple_statement_d* %18), !dbg !6511
  %call22 = call %union.gimple_statement_d* @gimple_build_try(%struct.gimple_seq_d* %17, %struct.gimple_seq_d* %call21, i32 1), !dbg !6512
  store %union.gimple_statement_d* %call22, %union.gimple_statement_d** %x, align 8, !dbg !6513
  %19 = load %struct.leh_state*, %struct.leh_state** %outer_state.addr, align 8, !dbg !6514
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !6515
  %call23 = call %struct.gimple_seq_d* @lower_eh_must_not_throw(%struct.leh_state* %19, %union.gimple_statement_d* %20), !dbg !6516
  store %struct.gimple_seq_d* %call23, %struct.gimple_seq_d** %finally, align 8, !dbg !6517
  %21 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6518
  %region = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %21, i32 0, i32 4, !dbg !6519
  %22 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !6519
  call void @emit_post_landing_pad(%struct.gimple_seq_d** @eh_seq, %struct.eh_region_d* %22), !dbg !6520
  %23 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %finally, align 8, !dbg !6521
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** @eh_seq, %struct.gimple_seq_d* %23), !dbg !6522
  %24 = load i8, i8* %finally_may_fallthru, align 1, !dbg !6523
  %tobool24 = icmp ne i8 %24, 0, !dbg !6523
  br i1 %tobool24, label %if.then25, label %if.end27, !dbg !6525

if.then25:                                        ; preds = %if.end19
  %25 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6526
  %region26 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %25, i32 0, i32 4, !dbg !6527
  %26 = load %struct.eh_region_d*, %struct.eh_region_d** %region26, align 8, !dbg !6527
  call void @emit_resx(%struct.gimple_seq_d** @eh_seq, %struct.eh_region_d* %26), !dbg !6528
  br label %if.end27, !dbg !6528

if.end27:                                         ; preds = %if.then25, %if.end19
  %27 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6529
  %may_throw = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %27, i32 0, i32 13, !dbg !6530
  store i8 0, i8* %may_throw, align 2, !dbg !6531
  br label %return, !dbg !6532

return:                                           ; preds = %if.end27, %if.then2, %if.then
  ret void, !dbg !6532
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_try_set_cleanup(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %cleanup) #0 !dbg !6533 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %cleanup.addr = alloca %struct.gimple_seq_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6536, metadata !DIExpression()), !dbg !6537
  store %struct.gimple_seq_d* %cleanup, %struct.gimple_seq_d** %cleanup.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %cleanup.addr, metadata !6538, metadata !DIExpression()), !dbg !6539
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup.addr, align 8, !dbg !6540
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6541
  %gimple_try = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_try*, !dbg !6542
  %cleanup1 = getelementptr inbounds %struct.gimple_statement_try, %struct.gimple_statement_try* %gimple_try, i32 0, i32 2, !dbg !6543
  store %struct.gimple_seq_d* %0, %struct.gimple_seq_d** %cleanup1, align 8, !dbg !6544
  ret void, !dbg !6545
}

; Function Attrs: noinline nounwind uwtable
define internal void @lower_try_finally_nofallthru(%struct.leh_state* %state, %struct.leh_tf_state* %tf) #0 !dbg !6546 {
entry:
  %state.addr = alloca %struct.leh_state*, align 8
  %tf.addr = alloca %struct.leh_tf_state*, align 8
  %lab = alloca %union.tree_node*, align 8
  %return_val = alloca %union.tree_node*, align 8
  %x = alloca %union.gimple_statement_d*, align 8
  %finally = alloca %struct.gimple_seq_d*, align 8
  %q = alloca %struct.goto_queue_node*, align 8
  %qe = alloca %struct.goto_queue_node*, align 8
  store %struct.leh_state* %state, %struct.leh_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_state** %state.addr, metadata !6547, metadata !DIExpression()), !dbg !6548
  store %struct.leh_tf_state* %tf, %struct.leh_tf_state** %tf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_tf_state** %tf.addr, metadata !6549, metadata !DIExpression()), !dbg !6550
  call void @llvm.dbg.declare(metadata %union.tree_node** %lab, metadata !6551, metadata !DIExpression()), !dbg !6552
  call void @llvm.dbg.declare(metadata %union.tree_node** %return_val, metadata !6553, metadata !DIExpression()), !dbg !6554
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %x, metadata !6555, metadata !DIExpression()), !dbg !6556
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %finally, metadata !6557, metadata !DIExpression()), !dbg !6558
  call void @llvm.dbg.declare(metadata %struct.goto_queue_node** %q, metadata !6559, metadata !DIExpression()), !dbg !6560
  call void @llvm.dbg.declare(metadata %struct.goto_queue_node** %qe, metadata !6561, metadata !DIExpression()), !dbg !6562
  %0 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6563
  %try_finally_expr = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %0, i32 0, i32 0, !dbg !6564
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %try_finally_expr, align 8, !dbg !6564
  %call = call i32 @gimple_location(%union.gimple_statement_d* %1), !dbg !6565
  %call1 = call %union.tree_node* @create_artificial_label(i32 %call), !dbg !6566
  store %union.tree_node* %call1, %union.tree_node** %lab, align 8, !dbg !6567
  %2 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6568
  %top_p = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %2, i32 0, i32 1, !dbg !6569
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %top_p, align 8, !dbg !6569
  %call2 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %3), !dbg !6570
  store %struct.gimple_seq_d* %call2, %struct.gimple_seq_d** %finally, align 8, !dbg !6571
  %4 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6572
  %top_p3 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %4, i32 0, i32 1, !dbg !6573
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %top_p3, align 8, !dbg !6573
  %call4 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %5), !dbg !6574
  %6 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6575
  %top_p_seq = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %6, i32 0, i32 2, !dbg !6576
  store %struct.gimple_seq_d* %call4, %struct.gimple_seq_d** %top_p_seq, align 8, !dbg !6577
  %7 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !6578
  %call5 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %7), !dbg !6579
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %x, align 8, !dbg !6580
  %8 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6581
  %top_p_seq6 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %8, i32 0, i32 2, !dbg !6582
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !6583
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %top_p_seq6, %union.gimple_statement_d* %9), !dbg !6584
  store %union.tree_node* null, %union.tree_node** %return_val, align 8, !dbg !6585
  %10 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6586
  %goto_queue = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %10, i32 0, i32 5, !dbg !6587
  %11 = load %struct.goto_queue_node*, %struct.goto_queue_node** %goto_queue, align 8, !dbg !6587
  store %struct.goto_queue_node* %11, %struct.goto_queue_node** %q, align 8, !dbg !6588
  %12 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6589
  %13 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6590
  %goto_queue_active = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %13, i32 0, i32 7, !dbg !6591
  %14 = load i64, i64* %goto_queue_active, align 8, !dbg !6591
  %add.ptr = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %12, i64 %14, !dbg !6592
  store %struct.goto_queue_node* %add.ptr, %struct.goto_queue_node** %qe, align 8, !dbg !6593
  br label %for.cond, !dbg !6594

for.cond:                                         ; preds = %for.inc, %entry
  %15 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6595
  %16 = load %struct.goto_queue_node*, %struct.goto_queue_node** %qe, align 8, !dbg !6598
  %cmp = icmp ult %struct.goto_queue_node* %15, %16, !dbg !6599
  br i1 %cmp, label %for.body, label %for.end, !dbg !6600

for.body:                                         ; preds = %for.cond
  %17 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6601
  %index = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %17, i32 0, i32 3, !dbg !6603
  %18 = load i32, i32* %index, align 8, !dbg !6603
  %cmp7 = icmp slt i32 %18, 0, !dbg !6604
  br i1 %cmp7, label %if.then, label %if.else, !dbg !6605

if.then:                                          ; preds = %for.body
  %19 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6606
  %20 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !6607
  call void @do_return_redirection(%struct.goto_queue_node* %19, %union.tree_node* %20, %struct.gimple_seq_d* null, %union.tree_node** %return_val), !dbg !6608
  br label %if.end, !dbg !6608

if.else:                                          ; preds = %for.body
  %21 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6609
  %22 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !6610
  %23 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6611
  call void @do_goto_redirection(%struct.goto_queue_node* %21, %union.tree_node* %22, %struct.gimple_seq_d* null, %struct.leh_tf_state* %23), !dbg !6612
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !6613

for.inc:                                          ; preds = %if.end
  %24 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6614
  %incdec.ptr = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %24, i32 1, !dbg !6614
  store %struct.goto_queue_node* %incdec.ptr, %struct.goto_queue_node** %q, align 8, !dbg !6614
  br label %for.cond, !dbg !6615, !llvm.loop !6616

for.end:                                          ; preds = %for.cond
  %25 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6618
  call void @replace_goto_queue(%struct.leh_tf_state* %25), !dbg !6619
  %26 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !6620
  %27 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %finally, align 8, !dbg !6621
  call void @lower_eh_constructs_1(%struct.leh_state* %26, %struct.gimple_seq_d* %27), !dbg !6622
  %28 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6623
  %top_p_seq8 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %28, i32 0, i32 2, !dbg !6624
  %29 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %finally, align 8, !dbg !6625
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %top_p_seq8, %struct.gimple_seq_d* %29), !dbg !6626
  %30 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6627
  %may_throw = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %30, i32 0, i32 13, !dbg !6629
  %31 = load i8, i8* %may_throw, align 2, !dbg !6629
  %tobool = icmp ne i8 %31, 0, !dbg !6627
  br i1 %tobool, label %if.then9, label %if.end11, !dbg !6630

if.then9:                                         ; preds = %for.end
  %32 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6631
  %region = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %32, i32 0, i32 4, !dbg !6633
  %33 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !6633
  call void @emit_post_landing_pad(%struct.gimple_seq_d** @eh_seq, %struct.eh_region_d* %33), !dbg !6634
  %34 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !6635
  %call10 = call %union.gimple_statement_d* @gimple_build_goto(%union.tree_node* %34), !dbg !6636
  store %union.gimple_statement_d* %call10, %union.gimple_statement_d** %x, align 8, !dbg !6637
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !6638
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** @eh_seq, %union.gimple_statement_d* %35), !dbg !6639
  br label %if.end11, !dbg !6640

if.end11:                                         ; preds = %if.then9, %for.end
  ret void, !dbg !6641
}

; Function Attrs: noinline nounwind uwtable
define internal void @lower_try_finally_onedest(%struct.leh_state* %state, %struct.leh_tf_state* %tf) #0 !dbg !6642 {
entry:
  %state.addr = alloca %struct.leh_state*, align 8
  %tf.addr = alloca %struct.leh_tf_state*, align 8
  %q = alloca %struct.goto_queue_node*, align 8
  %qe = alloca %struct.goto_queue_node*, align 8
  %x = alloca %union.gimple_statement_d*, align 8
  %finally = alloca %struct.gimple_seq_d*, align 8
  %finally_label = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  %return_val = alloca %union.tree_node*, align 8
  store %struct.leh_state* %state, %struct.leh_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_state** %state.addr, metadata !6643, metadata !DIExpression()), !dbg !6644
  store %struct.leh_tf_state* %tf, %struct.leh_tf_state** %tf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_tf_state** %tf.addr, metadata !6645, metadata !DIExpression()), !dbg !6646
  call void @llvm.dbg.declare(metadata %struct.goto_queue_node** %q, metadata !6647, metadata !DIExpression()), !dbg !6648
  call void @llvm.dbg.declare(metadata %struct.goto_queue_node** %qe, metadata !6649, metadata !DIExpression()), !dbg !6650
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %x, metadata !6651, metadata !DIExpression()), !dbg !6652
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %finally, metadata !6653, metadata !DIExpression()), !dbg !6654
  call void @llvm.dbg.declare(metadata %union.tree_node** %finally_label, metadata !6655, metadata !DIExpression()), !dbg !6656
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !6657, metadata !DIExpression()), !dbg !6658
  %0 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6659
  %try_finally_expr = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %0, i32 0, i32 0, !dbg !6660
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %try_finally_expr, align 8, !dbg !6660
  %call = call i32 @gimple_location(%union.gimple_statement_d* %1), !dbg !6661
  store i32 %call, i32* %loc, align 4, !dbg !6658
  %2 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6662
  %top_p = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %2, i32 0, i32 1, !dbg !6663
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %top_p, align 8, !dbg !6663
  %call1 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %3), !dbg !6664
  store %struct.gimple_seq_d* %call1, %struct.gimple_seq_d** %finally, align 8, !dbg !6665
  %4 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6666
  %top_p2 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %4, i32 0, i32 1, !dbg !6667
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %top_p2, align 8, !dbg !6667
  %call3 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %5), !dbg !6668
  %6 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6669
  %top_p_seq = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %6, i32 0, i32 2, !dbg !6670
  store %struct.gimple_seq_d* %call3, %struct.gimple_seq_d** %top_p_seq, align 8, !dbg !6671
  %7 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !6672
  %8 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %finally, align 8, !dbg !6673
  call void @lower_eh_constructs_1(%struct.leh_state* %7, %struct.gimple_seq_d* %8), !dbg !6674
  %9 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6675
  %may_throw = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %9, i32 0, i32 13, !dbg !6677
  %10 = load i8, i8* %may_throw, align 2, !dbg !6677
  %tobool = icmp ne i8 %10, 0, !dbg !6675
  br i1 %tobool, label %if.then, label %if.end, !dbg !6678

if.then:                                          ; preds = %entry
  %11 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6679
  %region = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %11, i32 0, i32 4, !dbg !6681
  %12 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !6681
  call void @emit_post_landing_pad(%struct.gimple_seq_d** @eh_seq, %struct.eh_region_d* %12), !dbg !6682
  %13 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %finally, align 8, !dbg !6683
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** @eh_seq, %struct.gimple_seq_d* %13), !dbg !6684
  %14 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6685
  %region4 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %14, i32 0, i32 4, !dbg !6686
  %15 = load %struct.eh_region_d*, %struct.eh_region_d** %region4, align 8, !dbg !6686
  call void @emit_resx(%struct.gimple_seq_d** @eh_seq, %struct.eh_region_d* %15), !dbg !6687
  br label %return, !dbg !6688

if.end:                                           ; preds = %entry
  %16 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6689
  %may_fallthru = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %16, i32 0, i32 11, !dbg !6691
  %17 = load i8, i8* %may_fallthru, align 8, !dbg !6691
  %tobool5 = icmp ne i8 %17, 0, !dbg !6689
  br i1 %tobool5, label %if.then6, label %if.end8, !dbg !6692

if.then6:                                         ; preds = %if.end
  %18 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6693
  %top_p_seq7 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %18, i32 0, i32 2, !dbg !6695
  %19 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %finally, align 8, !dbg !6696
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %top_p_seq7, %struct.gimple_seq_d* %19), !dbg !6697
  br label %return, !dbg !6698

if.end8:                                          ; preds = %if.end
  %20 = load i32, i32* %loc, align 4, !dbg !6699
  %call9 = call %union.tree_node* @create_artificial_label(i32 %20), !dbg !6700
  store %union.tree_node* %call9, %union.tree_node** %finally_label, align 8, !dbg !6701
  %21 = load %union.tree_node*, %union.tree_node** %finally_label, align 8, !dbg !6702
  %call10 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %21), !dbg !6703
  store %union.gimple_statement_d* %call10, %union.gimple_statement_d** %x, align 8, !dbg !6704
  %22 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6705
  %top_p_seq11 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %22, i32 0, i32 2, !dbg !6706
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !6707
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %top_p_seq11, %union.gimple_statement_d* %23), !dbg !6708
  %24 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6709
  %top_p_seq12 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %24, i32 0, i32 2, !dbg !6710
  %25 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %finally, align 8, !dbg !6711
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %top_p_seq12, %struct.gimple_seq_d* %25), !dbg !6712
  %26 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6713
  %goto_queue = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %26, i32 0, i32 5, !dbg !6714
  %27 = load %struct.goto_queue_node*, %struct.goto_queue_node** %goto_queue, align 8, !dbg !6714
  store %struct.goto_queue_node* %27, %struct.goto_queue_node** %q, align 8, !dbg !6715
  %28 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6716
  %29 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6717
  %goto_queue_active = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %29, i32 0, i32 7, !dbg !6718
  %30 = load i64, i64* %goto_queue_active, align 8, !dbg !6718
  %add.ptr = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %28, i64 %30, !dbg !6719
  store %struct.goto_queue_node* %add.ptr, %struct.goto_queue_node** %qe, align 8, !dbg !6720
  %31 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6721
  %may_return = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %31, i32 0, i32 12, !dbg !6723
  %32 = load i8, i8* %may_return, align 1, !dbg !6723
  %tobool13 = icmp ne i8 %32, 0, !dbg !6721
  br i1 %tobool13, label %if.then14, label %if.else, !dbg !6724

if.then14:                                        ; preds = %if.end8
  call void @llvm.dbg.declare(metadata %union.tree_node** %return_val, metadata !6725, metadata !DIExpression()), !dbg !6727
  store %union.tree_node* null, %union.tree_node** %return_val, align 8, !dbg !6727
  br label %for.cond, !dbg !6728

for.cond:                                         ; preds = %for.inc, %if.then14
  %33 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6729
  %34 = load %struct.goto_queue_node*, %struct.goto_queue_node** %qe, align 8, !dbg !6732
  %cmp = icmp ult %struct.goto_queue_node* %33, %34, !dbg !6733
  br i1 %cmp, label %for.body, label %for.end, !dbg !6734

for.body:                                         ; preds = %for.cond
  %35 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6735
  %36 = load %union.tree_node*, %union.tree_node** %finally_label, align 8, !dbg !6736
  call void @do_return_redirection(%struct.goto_queue_node* %35, %union.tree_node* %36, %struct.gimple_seq_d* null, %union.tree_node** %return_val), !dbg !6737
  br label %for.inc, !dbg !6737

for.inc:                                          ; preds = %for.body
  %37 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6738
  %incdec.ptr = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %37, i32 1, !dbg !6738
  store %struct.goto_queue_node* %incdec.ptr, %struct.goto_queue_node** %q, align 8, !dbg !6738
  br label %for.cond, !dbg !6739, !llvm.loop !6740

for.end:                                          ; preds = %for.cond
  %38 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6742
  call void @replace_goto_queue(%struct.leh_tf_state* %38), !dbg !6743
  br label %if.end28, !dbg !6744

if.else:                                          ; preds = %if.end8
  br label %for.cond15, !dbg !6745

for.cond15:                                       ; preds = %for.inc18, %if.else
  %39 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6747
  %40 = load %struct.goto_queue_node*, %struct.goto_queue_node** %qe, align 8, !dbg !6750
  %cmp16 = icmp ult %struct.goto_queue_node* %39, %40, !dbg !6751
  br i1 %cmp16, label %for.body17, label %for.end20, !dbg !6752

for.body17:                                       ; preds = %for.cond15
  %41 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6753
  %42 = load %union.tree_node*, %union.tree_node** %finally_label, align 8, !dbg !6754
  %43 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6755
  call void @do_goto_redirection(%struct.goto_queue_node* %41, %union.tree_node* %42, %struct.gimple_seq_d* null, %struct.leh_tf_state* %43), !dbg !6756
  br label %for.inc18, !dbg !6756

for.inc18:                                        ; preds = %for.body17
  %44 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6757
  %incdec.ptr19 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %44, i32 1, !dbg !6757
  store %struct.goto_queue_node* %incdec.ptr19, %struct.goto_queue_node** %q, align 8, !dbg !6757
  br label %for.cond15, !dbg !6758, !llvm.loop !6759

for.end20:                                        ; preds = %for.cond15
  %45 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6761
  call void @replace_goto_queue(%struct.leh_tf_state* %45), !dbg !6762
  %46 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6763
  %dest_array = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %46, i32 0, i32 9, !dbg !6763
  %47 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dest_array, align 8, !dbg !6763
  %tobool21 = icmp ne %struct.VEC_tree_heap* %47, null, !dbg !6763
  br i1 %tobool21, label %cond.true, label %cond.false, !dbg !6763

cond.true:                                        ; preds = %for.end20
  %48 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6763
  %dest_array22 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %48, i32 0, i32 9, !dbg !6763
  %49 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dest_array22, align 8, !dbg !6763
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %49, i32 0, i32 0, !dbg !6763
  br label %cond.end, !dbg !6763

cond.false:                                       ; preds = %for.end20
  br label %cond.end, !dbg !6763

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6763
  %call23 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 0), !dbg !6763
  %50 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6765
  %fallthru_label = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %50, i32 0, i32 10, !dbg !6766
  %51 = load %union.tree_node*, %union.tree_node** %fallthru_label, align 8, !dbg !6766
  %cmp24 = icmp eq %union.tree_node* %call23, %51, !dbg !6767
  br i1 %cmp24, label %if.then25, label %if.end27, !dbg !6768

if.then25:                                        ; preds = %cond.end
  %52 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6769
  %fallthru_label26 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %52, i32 0, i32 10, !dbg !6771
  store %union.tree_node* null, %union.tree_node** %fallthru_label26, align 8, !dbg !6772
  br label %return, !dbg !6773

if.end27:                                         ; preds = %cond.end
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %for.end
  %53 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6774
  %goto_queue29 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %53, i32 0, i32 5, !dbg !6775
  %54 = load %struct.goto_queue_node*, %struct.goto_queue_node** %goto_queue29, align 8, !dbg !6775
  %arrayidx = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %54, i64 0, !dbg !6774
  %cont_stmt = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %arrayidx, i32 0, i32 2, !dbg !6776
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cont_stmt, align 8, !dbg !6776
  store %union.gimple_statement_d* %55, %union.gimple_statement_d** %x, align 8, !dbg !6777
  %56 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6778
  %top_p_seq30 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %56, i32 0, i32 2, !dbg !6779
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !6780
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %top_p_seq30, %union.gimple_statement_d* %57), !dbg !6781
  %58 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !6782
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !6783
  call void @maybe_record_in_goto_queue(%struct.leh_state* %58, %union.gimple_statement_d* %59), !dbg !6784
  br label %return, !dbg !6785

return:                                           ; preds = %if.end28, %if.then25, %if.then6, %if.then
  ret void, !dbg !6785
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @decide_copy_try_finally(i32 %ndests, %struct.gimple_seq_d* %finally) #0 !dbg !6786 {
entry:
  %retval = alloca i8, align 1
  %ndests.addr = alloca i32, align 4
  %finally.addr = alloca %struct.gimple_seq_d*, align 8
  %f_estimate = alloca i32, align 4
  %sw_estimate = alloca i32, align 4
  store i32 %ndests, i32* %ndests.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ndests.addr, metadata !6789, metadata !DIExpression()), !dbg !6790
  store %struct.gimple_seq_d* %finally, %struct.gimple_seq_d** %finally.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %finally.addr, metadata !6791, metadata !DIExpression()), !dbg !6792
  call void @llvm.dbg.declare(metadata i32* %f_estimate, metadata !6793, metadata !DIExpression()), !dbg !6794
  call void @llvm.dbg.declare(metadata i32* %sw_estimate, metadata !6795, metadata !DIExpression()), !dbg !6796
  %0 = load i32, i32* @optimize, align 4, !dbg !6797
  %tobool = icmp ne i32 %0, 0, !dbg !6797
  br i1 %tobool, label %if.end, label %if.then, !dbg !6799

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6800
  br label %return, !dbg !6800

if.end:                                           ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %finally.addr, align 8, !dbg !6801
  %call = call i32 @count_insns_seq(%struct.gimple_seq_d* %1, %struct.eni_weights_d* @eni_size_weights), !dbg !6802
  store i32 %call, i32* %f_estimate, align 4, !dbg !6803
  %2 = load i32, i32* %f_estimate, align 4, !dbg !6804
  %add = add nsw i32 %2, 1, !dbg !6805
  %3 = load i32, i32* %ndests.addr, align 4, !dbg !6806
  %mul = mul nsw i32 %add, %3, !dbg !6807
  store i32 %mul, i32* %f_estimate, align 4, !dbg !6808
  %4 = load i32, i32* %ndests.addr, align 4, !dbg !6809
  %mul1 = mul nsw i32 2, %4, !dbg !6810
  %add2 = add nsw i32 10, %mul1, !dbg !6811
  store i32 %add2, i32* %sw_estimate, align 4, !dbg !6812
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6813
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !6813
  %call3 = call zeroext i8 @optimize_function_for_size_p(%struct.function* %add.ptr), !dbg !6815
  %tobool4 = icmp ne i8 %call3, 0, !dbg !6815
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !6816

if.then5:                                         ; preds = %if.end
  %6 = load i32, i32* %f_estimate, align 4, !dbg !6817
  %7 = load i32, i32* %sw_estimate, align 4, !dbg !6818
  %cmp = icmp slt i32 %6, %7, !dbg !6819
  %conv = zext i1 %cmp to i32, !dbg !6819
  %conv6 = trunc i32 %conv to i8, !dbg !6817
  store i8 %conv6, i8* %retval, align 1, !dbg !6820
  br label %return, !dbg !6820

if.end7:                                          ; preds = %if.end
  %8 = load i32, i32* @optimize, align 4, !dbg !6821
  %cmp8 = icmp sgt i32 %8, 1, !dbg !6823
  br i1 %cmp8, label %if.then10, label %if.else, !dbg !6824

if.then10:                                        ; preds = %if.end7
  %9 = load i32, i32* %f_estimate, align 4, !dbg !6825
  %cmp11 = icmp slt i32 %9, 100, !dbg !6826
  br i1 %cmp11, label %lor.end, label %lor.rhs, !dbg !6827

lor.rhs:                                          ; preds = %if.then10
  %10 = load i32, i32* %f_estimate, align 4, !dbg !6828
  %11 = load i32, i32* %sw_estimate, align 4, !dbg !6829
  %mul13 = mul nsw i32 %11, 2, !dbg !6830
  %cmp14 = icmp slt i32 %10, %mul13, !dbg !6831
  br label %lor.end, !dbg !6827

lor.end:                                          ; preds = %lor.rhs, %if.then10
  %12 = phi i1 [ true, %if.then10 ], [ %cmp14, %lor.rhs ]
  %lor.ext = zext i1 %12 to i32, !dbg !6827
  %conv16 = trunc i32 %lor.ext to i8, !dbg !6825
  store i8 %conv16, i8* %retval, align 1, !dbg !6832
  br label %return, !dbg !6832

if.else:                                          ; preds = %if.end7
  %13 = load i32, i32* %f_estimate, align 4, !dbg !6833
  %cmp17 = icmp slt i32 %13, 40, !dbg !6834
  br i1 %cmp17, label %lor.end24, label %lor.rhs19, !dbg !6835

lor.rhs19:                                        ; preds = %if.else
  %14 = load i32, i32* %f_estimate, align 4, !dbg !6836
  %mul20 = mul nsw i32 %14, 2, !dbg !6837
  %15 = load i32, i32* %sw_estimate, align 4, !dbg !6838
  %mul21 = mul nsw i32 %15, 3, !dbg !6839
  %cmp22 = icmp slt i32 %mul20, %mul21, !dbg !6840
  br label %lor.end24, !dbg !6835

lor.end24:                                        ; preds = %lor.rhs19, %if.else
  %16 = phi i1 [ true, %if.else ], [ %cmp22, %lor.rhs19 ]
  %lor.ext25 = zext i1 %16 to i32, !dbg !6835
  %conv26 = trunc i32 %lor.ext25 to i8, !dbg !6833
  store i8 %conv26, i8* %retval, align 1, !dbg !6841
  br label %return, !dbg !6841

return:                                           ; preds = %lor.end24, %lor.end, %if.then5, %if.then
  %17 = load i8, i8* %retval, align 1, !dbg !6842
  ret i8 %17, !dbg !6842
}

; Function Attrs: noinline nounwind uwtable
define internal void @lower_try_finally_copy(%struct.leh_state* %state, %struct.leh_tf_state* %tf) #0 !dbg !3017 {
entry:
  %state.addr = alloca %struct.leh_state*, align 8
  %tf.addr = alloca %struct.leh_tf_state*, align 8
  %finally = alloca %struct.gimple_seq_d*, align 8
  %new_stmt = alloca %struct.gimple_seq_d*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  %x = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %tf_loc = alloca i32, align 4
  %q = alloca %struct.goto_queue_node*, align 8
  %qe = alloca %struct.goto_queue_node*, align 8
  %return_val = alloca %union.tree_node*, align 8
  %return_index = alloca i32, align 4
  %index = alloca i32, align 4
  %labels = alloca %struct.labels_s*, align 8
  %lab = alloca %union.tree_node*, align 8
  %lab63 = alloca %union.tree_node*, align 8
  store %struct.leh_state* %state, %struct.leh_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_state** %state.addr, metadata !6843, metadata !DIExpression()), !dbg !6844
  store %struct.leh_tf_state* %tf, %struct.leh_tf_state** %tf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_tf_state** %tf.addr, metadata !6845, metadata !DIExpression()), !dbg !6846
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %finally, metadata !6847, metadata !DIExpression()), !dbg !6848
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %new_stmt, metadata !6849, metadata !DIExpression()), !dbg !6850
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !6851, metadata !DIExpression()), !dbg !6852
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %x, metadata !6853, metadata !DIExpression()), !dbg !6854
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !6855, metadata !DIExpression()), !dbg !6856
  call void @llvm.dbg.declare(metadata i32* %tf_loc, metadata !6857, metadata !DIExpression()), !dbg !6858
  %0 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6859
  %try_finally_expr = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %0, i32 0, i32 0, !dbg !6860
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %try_finally_expr, align 8, !dbg !6860
  %call = call i32 @gimple_location(%union.gimple_statement_d* %1), !dbg !6861
  store i32 %call, i32* %tf_loc, align 4, !dbg !6858
  %2 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6862
  %top_p = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %2, i32 0, i32 1, !dbg !6863
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %top_p, align 8, !dbg !6863
  %call1 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %3), !dbg !6864
  store %struct.gimple_seq_d* %call1, %struct.gimple_seq_d** %finally, align 8, !dbg !6865
  %4 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6866
  %top_p2 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %4, i32 0, i32 1, !dbg !6867
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %top_p2, align 8, !dbg !6867
  %call3 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %5), !dbg !6868
  %6 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6869
  %top_p_seq = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %6, i32 0, i32 2, !dbg !6870
  store %struct.gimple_seq_d* %call3, %struct.gimple_seq_d** %top_p_seq, align 8, !dbg !6871
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %new_stmt, align 8, !dbg !6872
  %7 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6873
  %may_fallthru = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %7, i32 0, i32 11, !dbg !6875
  %8 = load i8, i8* %may_fallthru, align 8, !dbg !6875
  %tobool = icmp ne i8 %8, 0, !dbg !6873
  br i1 %tobool, label %if.then, label %if.end, !dbg !6876

if.then:                                          ; preds = %entry
  %9 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %finally, align 8, !dbg !6877
  %10 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !6879
  %call4 = call %struct.gimple_seq_d* @lower_try_finally_dup_block(%struct.gimple_seq_d* %9, %struct.leh_state* %10), !dbg !6880
  store %struct.gimple_seq_d* %call4, %struct.gimple_seq_d** %seq, align 8, !dbg !6881
  %11 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !6882
  %12 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6883
  call void @lower_eh_constructs_1(%struct.leh_state* %11, %struct.gimple_seq_d* %12), !dbg !6884
  %13 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6885
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %new_stmt, %struct.gimple_seq_d* %13), !dbg !6886
  %14 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6887
  %call5 = call %union.tree_node* @lower_try_finally_fallthru_label(%struct.leh_tf_state* %14), !dbg !6888
  store %union.tree_node* %call5, %union.tree_node** %tmp, align 8, !dbg !6889
  %15 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !6890
  %call6 = call %union.gimple_statement_d* @gimple_build_goto(%union.tree_node* %15), !dbg !6891
  store %union.gimple_statement_d* %call6, %union.gimple_statement_d** %x, align 8, !dbg !6892
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !6893
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %new_stmt, %union.gimple_statement_d* %16), !dbg !6894
  br label %if.end, !dbg !6895

if.end:                                           ; preds = %if.then, %entry
  %17 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6896
  %may_throw = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %17, i32 0, i32 13, !dbg !6898
  %18 = load i8, i8* %may_throw, align 2, !dbg !6898
  %tobool7 = icmp ne i8 %18, 0, !dbg !6896
  br i1 %tobool7, label %if.then8, label %if.end11, !dbg !6899

if.then8:                                         ; preds = %if.end
  %19 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %finally, align 8, !dbg !6900
  %20 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !6902
  %call9 = call %struct.gimple_seq_d* @lower_try_finally_dup_block(%struct.gimple_seq_d* %19, %struct.leh_state* %20), !dbg !6903
  store %struct.gimple_seq_d* %call9, %struct.gimple_seq_d** %seq, align 8, !dbg !6904
  %21 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !6905
  %22 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6906
  call void @lower_eh_constructs_1(%struct.leh_state* %21, %struct.gimple_seq_d* %22), !dbg !6907
  %23 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6908
  %region = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %23, i32 0, i32 4, !dbg !6909
  %24 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !6909
  call void @emit_post_landing_pad(%struct.gimple_seq_d** @eh_seq, %struct.eh_region_d* %24), !dbg !6910
  %25 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6911
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** @eh_seq, %struct.gimple_seq_d* %25), !dbg !6912
  %26 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6913
  %region10 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %26, i32 0, i32 4, !dbg !6914
  %27 = load %struct.eh_region_d*, %struct.eh_region_d** %region10, align 8, !dbg !6914
  call void @emit_resx(%struct.gimple_seq_d** @eh_seq, %struct.eh_region_d* %27), !dbg !6915
  br label %if.end11, !dbg !6916

if.end11:                                         ; preds = %if.then8, %if.end
  %28 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6917
  %goto_queue = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %28, i32 0, i32 5, !dbg !6919
  %29 = load %struct.goto_queue_node*, %struct.goto_queue_node** %goto_queue, align 8, !dbg !6919
  %tobool12 = icmp ne %struct.goto_queue_node* %29, null, !dbg !6917
  br i1 %tobool12, label %if.then13, label %if.end90, !dbg !6920

if.then13:                                        ; preds = %if.end11
  call void @llvm.dbg.declare(metadata %struct.goto_queue_node** %q, metadata !6921, metadata !DIExpression()), !dbg !6923
  call void @llvm.dbg.declare(metadata %struct.goto_queue_node** %qe, metadata !6924, metadata !DIExpression()), !dbg !6925
  call void @llvm.dbg.declare(metadata %union.tree_node** %return_val, metadata !6926, metadata !DIExpression()), !dbg !6927
  store %union.tree_node* null, %union.tree_node** %return_val, align 8, !dbg !6927
  call void @llvm.dbg.declare(metadata i32* %return_index, metadata !6928, metadata !DIExpression()), !dbg !6929
  call void @llvm.dbg.declare(metadata i32* %index, metadata !6930, metadata !DIExpression()), !dbg !6931
  call void @llvm.dbg.declare(metadata %struct.labels_s** %labels, metadata !6932, metadata !DIExpression()), !dbg !6933
  %30 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6934
  %dest_array = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %30, i32 0, i32 9, !dbg !6934
  %31 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dest_array, align 8, !dbg !6934
  %tobool14 = icmp ne %struct.VEC_tree_heap* %31, null, !dbg !6934
  br i1 %tobool14, label %cond.true, label %cond.false, !dbg !6934

cond.true:                                        ; preds = %if.then13
  %32 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6934
  %dest_array15 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %32, i32 0, i32 9, !dbg !6934
  %33 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dest_array15, align 8, !dbg !6934
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %33, i32 0, i32 0, !dbg !6934
  br label %cond.end, !dbg !6934

cond.false:                                       ; preds = %if.then13
  br label %cond.end, !dbg !6934

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6934
  %call16 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !6934
  store i32 %call16, i32* %return_index, align 4, !dbg !6935
  %34 = load i32, i32* %return_index, align 4, !dbg !6936
  %add = add nsw i32 %34, 1, !dbg !6936
  %conv = sext i32 %add to i64, !dbg !6936
  %call17 = call i8* @xcalloc(i64 %conv, i64 16), !dbg !6936
  %35 = bitcast i8* %call17 to %struct.labels_s*, !dbg !6936
  store %struct.labels_s* %35, %struct.labels_s** %labels, align 8, !dbg !6937
  %36 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6938
  %goto_queue18 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %36, i32 0, i32 5, !dbg !6939
  %37 = load %struct.goto_queue_node*, %struct.goto_queue_node** %goto_queue18, align 8, !dbg !6939
  store %struct.goto_queue_node* %37, %struct.goto_queue_node** %q, align 8, !dbg !6940
  %38 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6941
  %39 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !6942
  %goto_queue_active = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %39, i32 0, i32 7, !dbg !6943
  %40 = load i64, i64* %goto_queue_active, align 8, !dbg !6943
  %add.ptr = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %38, i64 %40, !dbg !6944
  store %struct.goto_queue_node* %add.ptr, %struct.goto_queue_node** %qe, align 8, !dbg !6945
  br label %for.cond, !dbg !6946

for.cond:                                         ; preds = %for.inc, %cond.end
  %41 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6947
  %42 = load %struct.goto_queue_node*, %struct.goto_queue_node** %qe, align 8, !dbg !6950
  %cmp = icmp ult %struct.goto_queue_node* %41, %42, !dbg !6951
  br i1 %cmp, label %for.body, label %for.end, !dbg !6952

for.body:                                         ; preds = %for.cond
  %43 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6953
  %index20 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %43, i32 0, i32 3, !dbg !6955
  %44 = load i32, i32* %index20, align 8, !dbg !6955
  %cmp21 = icmp slt i32 %44, 0, !dbg !6956
  br i1 %cmp21, label %cond.true23, label %cond.false24, !dbg !6953

cond.true23:                                      ; preds = %for.body
  %45 = load i32, i32* %return_index, align 4, !dbg !6957
  br label %cond.end26, !dbg !6953

cond.false24:                                     ; preds = %for.body
  %46 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6958
  %index25 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %46, i32 0, i32 3, !dbg !6959
  %47 = load i32, i32* %index25, align 8, !dbg !6959
  br label %cond.end26, !dbg !6953

cond.end26:                                       ; preds = %cond.false24, %cond.true23
  %cond27 = phi i32 [ %45, %cond.true23 ], [ %47, %cond.false24 ], !dbg !6953
  store i32 %cond27, i32* %index, align 4, !dbg !6960
  %48 = load %struct.labels_s*, %struct.labels_s** %labels, align 8, !dbg !6961
  %49 = load i32, i32* %index, align 4, !dbg !6963
  %idxprom = sext i32 %49 to i64, !dbg !6961
  %arrayidx = getelementptr inbounds %struct.labels_s, %struct.labels_s* %48, i64 %idxprom, !dbg !6961
  %q28 = getelementptr inbounds %struct.labels_s, %struct.labels_s* %arrayidx, i32 0, i32 0, !dbg !6964
  %50 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q28, align 8, !dbg !6964
  %tobool29 = icmp ne %struct.goto_queue_node* %50, null, !dbg !6961
  br i1 %tobool29, label %if.end34, label %if.then30, !dbg !6965

if.then30:                                        ; preds = %cond.end26
  %51 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6966
  %52 = load %struct.labels_s*, %struct.labels_s** %labels, align 8, !dbg !6967
  %53 = load i32, i32* %index, align 4, !dbg !6968
  %idxprom31 = sext i32 %53 to i64, !dbg !6967
  %arrayidx32 = getelementptr inbounds %struct.labels_s, %struct.labels_s* %52, i64 %idxprom31, !dbg !6967
  %q33 = getelementptr inbounds %struct.labels_s, %struct.labels_s* %arrayidx32, i32 0, i32 0, !dbg !6969
  store %struct.goto_queue_node* %51, %struct.goto_queue_node** %q33, align 8, !dbg !6970
  br label %if.end34, !dbg !6967

if.end34:                                         ; preds = %if.then30, %cond.end26
  br label %for.inc, !dbg !6971

for.inc:                                          ; preds = %if.end34
  %54 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6972
  %incdec.ptr = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %54, i32 1, !dbg !6972
  store %struct.goto_queue_node* %incdec.ptr, %struct.goto_queue_node** %q, align 8, !dbg !6972
  br label %for.cond, !dbg !6973, !llvm.loop !6974

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %index, align 4, !dbg !6976
  br label %for.cond35, !dbg !6978

for.cond35:                                       ; preds = %for.inc56, %for.end
  %55 = load i32, i32* %index, align 4, !dbg !6979
  %56 = load i32, i32* %return_index, align 4, !dbg !6981
  %add36 = add nsw i32 %56, 1, !dbg !6982
  %cmp37 = icmp slt i32 %55, %add36, !dbg !6983
  br i1 %cmp37, label %for.body39, label %for.end57, !dbg !6984

for.body39:                                       ; preds = %for.cond35
  call void @llvm.dbg.declare(metadata %union.tree_node** %lab, metadata !6985, metadata !DIExpression()), !dbg !6987
  %57 = load %struct.labels_s*, %struct.labels_s** %labels, align 8, !dbg !6988
  %58 = load i32, i32* %index, align 4, !dbg !6989
  %idxprom40 = sext i32 %58 to i64, !dbg !6988
  %arrayidx41 = getelementptr inbounds %struct.labels_s, %struct.labels_s* %57, i64 %idxprom40, !dbg !6988
  %q42 = getelementptr inbounds %struct.labels_s, %struct.labels_s* %arrayidx41, i32 0, i32 0, !dbg !6990
  %59 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q42, align 8, !dbg !6990
  store %struct.goto_queue_node* %59, %struct.goto_queue_node** %q, align 8, !dbg !6991
  %60 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !6992
  %tobool43 = icmp ne %struct.goto_queue_node* %60, null, !dbg !6992
  br i1 %tobool43, label %if.end45, label %if.then44, !dbg !6994

if.then44:                                        ; preds = %for.body39
  br label %for.inc56, !dbg !6995

if.end45:                                         ; preds = %for.body39
  %61 = load i32, i32* %tf_loc, align 4, !dbg !6996
  %call46 = call %union.tree_node* @create_artificial_label(i32 %61), !dbg !6997
  %62 = load %struct.labels_s*, %struct.labels_s** %labels, align 8, !dbg !6998
  %63 = load i32, i32* %index, align 4, !dbg !6999
  %idxprom47 = sext i32 %63 to i64, !dbg !6998
  %arrayidx48 = getelementptr inbounds %struct.labels_s, %struct.labels_s* %62, i64 %idxprom47, !dbg !6998
  %label = getelementptr inbounds %struct.labels_s, %struct.labels_s* %arrayidx48, i32 0, i32 1, !dbg !7000
  store %union.tree_node* %call46, %union.tree_node** %label, align 8, !dbg !7001
  store %union.tree_node* %call46, %union.tree_node** %lab, align 8, !dbg !7002
  %64 = load i32, i32* %index, align 4, !dbg !7003
  %65 = load i32, i32* %return_index, align 4, !dbg !7005
  %cmp49 = icmp eq i32 %64, %65, !dbg !7006
  br i1 %cmp49, label %if.then51, label %if.else, !dbg !7007

if.then51:                                        ; preds = %if.end45
  %66 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7008
  %67 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !7009
  call void @do_return_redirection(%struct.goto_queue_node* %66, %union.tree_node* %67, %struct.gimple_seq_d* null, %union.tree_node** %return_val), !dbg !7010
  br label %if.end52, !dbg !7010

if.else:                                          ; preds = %if.end45
  %68 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7011
  %69 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !7012
  %70 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7013
  call void @do_goto_redirection(%struct.goto_queue_node* %68, %union.tree_node* %69, %struct.gimple_seq_d* null, %struct.leh_tf_state* %70), !dbg !7014
  br label %if.end52

if.end52:                                         ; preds = %if.else, %if.then51
  %71 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !7015
  %call53 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %71), !dbg !7016
  store %union.gimple_statement_d* %call53, %union.gimple_statement_d** %x, align 8, !dbg !7017
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !7018
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %new_stmt, %union.gimple_statement_d* %72), !dbg !7019
  %73 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %finally, align 8, !dbg !7020
  %74 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !7021
  %call54 = call %struct.gimple_seq_d* @lower_try_finally_dup_block(%struct.gimple_seq_d* %73, %struct.leh_state* %74), !dbg !7022
  store %struct.gimple_seq_d* %call54, %struct.gimple_seq_d** %seq, align 8, !dbg !7023
  %75 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !7024
  %76 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !7025
  call void @lower_eh_constructs_1(%struct.leh_state* %75, %struct.gimple_seq_d* %76), !dbg !7026
  %77 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !7027
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %new_stmt, %struct.gimple_seq_d* %77), !dbg !7028
  %78 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7029
  %cont_stmt = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %78, i32 0, i32 2, !dbg !7030
  %79 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cont_stmt, align 8, !dbg !7030
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %new_stmt, %union.gimple_statement_d* %79), !dbg !7031
  %80 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !7032
  %81 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7033
  %cont_stmt55 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %81, i32 0, i32 2, !dbg !7034
  %82 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cont_stmt55, align 8, !dbg !7034
  call void @maybe_record_in_goto_queue(%struct.leh_state* %80, %union.gimple_statement_d* %82), !dbg !7035
  br label %for.inc56, !dbg !7036

for.inc56:                                        ; preds = %if.end52, %if.then44
  %83 = load i32, i32* %index, align 4, !dbg !7037
  %inc = add nsw i32 %83, 1, !dbg !7037
  store i32 %inc, i32* %index, align 4, !dbg !7037
  br label %for.cond35, !dbg !7038, !llvm.loop !7039

for.end57:                                        ; preds = %for.cond35
  %84 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7041
  %goto_queue58 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %84, i32 0, i32 5, !dbg !7043
  %85 = load %struct.goto_queue_node*, %struct.goto_queue_node** %goto_queue58, align 8, !dbg !7043
  store %struct.goto_queue_node* %85, %struct.goto_queue_node** %q, align 8, !dbg !7044
  br label %for.cond59, !dbg !7045

for.cond59:                                       ; preds = %for.inc87, %for.end57
  %86 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7046
  %87 = load %struct.goto_queue_node*, %struct.goto_queue_node** %qe, align 8, !dbg !7048
  %cmp60 = icmp ult %struct.goto_queue_node* %86, %87, !dbg !7049
  br i1 %cmp60, label %for.body62, label %for.end89, !dbg !7050

for.body62:                                       ; preds = %for.cond59
  call void @llvm.dbg.declare(metadata %union.tree_node** %lab63, metadata !7051, metadata !DIExpression()), !dbg !7053
  %88 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7054
  %index64 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %88, i32 0, i32 3, !dbg !7055
  %89 = load i32, i32* %index64, align 8, !dbg !7055
  %cmp65 = icmp slt i32 %89, 0, !dbg !7056
  br i1 %cmp65, label %cond.true67, label %cond.false68, !dbg !7054

cond.true67:                                      ; preds = %for.body62
  %90 = load i32, i32* %return_index, align 4, !dbg !7057
  br label %cond.end70, !dbg !7054

cond.false68:                                     ; preds = %for.body62
  %91 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7058
  %index69 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %91, i32 0, i32 3, !dbg !7059
  %92 = load i32, i32* %index69, align 8, !dbg !7059
  br label %cond.end70, !dbg !7054

cond.end70:                                       ; preds = %cond.false68, %cond.true67
  %cond71 = phi i32 [ %90, %cond.true67 ], [ %92, %cond.false68 ], !dbg !7054
  store i32 %cond71, i32* %index, align 4, !dbg !7060
  %93 = load %struct.labels_s*, %struct.labels_s** %labels, align 8, !dbg !7061
  %94 = load i32, i32* %index, align 4, !dbg !7063
  %idxprom72 = sext i32 %94 to i64, !dbg !7061
  %arrayidx73 = getelementptr inbounds %struct.labels_s, %struct.labels_s* %93, i64 %idxprom72, !dbg !7061
  %q74 = getelementptr inbounds %struct.labels_s, %struct.labels_s* %arrayidx73, i32 0, i32 0, !dbg !7064
  %95 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q74, align 8, !dbg !7064
  %96 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7065
  %cmp75 = icmp eq %struct.goto_queue_node* %95, %96, !dbg !7066
  br i1 %cmp75, label %if.then77, label %if.end78, !dbg !7067

if.then77:                                        ; preds = %cond.end70
  br label %for.inc87, !dbg !7068

if.end78:                                         ; preds = %cond.end70
  %97 = load %struct.labels_s*, %struct.labels_s** %labels, align 8, !dbg !7069
  %98 = load i32, i32* %index, align 4, !dbg !7070
  %idxprom79 = sext i32 %98 to i64, !dbg !7069
  %arrayidx80 = getelementptr inbounds %struct.labels_s, %struct.labels_s* %97, i64 %idxprom79, !dbg !7069
  %label81 = getelementptr inbounds %struct.labels_s, %struct.labels_s* %arrayidx80, i32 0, i32 1, !dbg !7071
  %99 = load %union.tree_node*, %union.tree_node** %label81, align 8, !dbg !7071
  store %union.tree_node* %99, %union.tree_node** %lab63, align 8, !dbg !7072
  %100 = load i32, i32* %index, align 4, !dbg !7073
  %101 = load i32, i32* %return_index, align 4, !dbg !7075
  %cmp82 = icmp eq i32 %100, %101, !dbg !7076
  br i1 %cmp82, label %if.then84, label %if.else85, !dbg !7077

if.then84:                                        ; preds = %if.end78
  %102 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7078
  %103 = load %union.tree_node*, %union.tree_node** %lab63, align 8, !dbg !7079
  call void @do_return_redirection(%struct.goto_queue_node* %102, %union.tree_node* %103, %struct.gimple_seq_d* null, %union.tree_node** %return_val), !dbg !7080
  br label %if.end86, !dbg !7080

if.else85:                                        ; preds = %if.end78
  %104 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7081
  %105 = load %union.tree_node*, %union.tree_node** %lab63, align 8, !dbg !7082
  %106 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7083
  call void @do_goto_redirection(%struct.goto_queue_node* %104, %union.tree_node* %105, %struct.gimple_seq_d* null, %struct.leh_tf_state* %106), !dbg !7084
  br label %if.end86

if.end86:                                         ; preds = %if.else85, %if.then84
  br label %for.inc87, !dbg !7085

for.inc87:                                        ; preds = %if.end86, %if.then77
  %107 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7086
  %incdec.ptr88 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %107, i32 1, !dbg !7086
  store %struct.goto_queue_node* %incdec.ptr88, %struct.goto_queue_node** %q, align 8, !dbg !7086
  br label %for.cond59, !dbg !7087, !llvm.loop !7088

for.end89:                                        ; preds = %for.cond59
  %108 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7090
  call void @replace_goto_queue(%struct.leh_tf_state* %108), !dbg !7091
  %109 = load %struct.labels_s*, %struct.labels_s** %labels, align 8, !dbg !7092
  %110 = bitcast %struct.labels_s* %109 to i8*, !dbg !7092
  call void @free(i8* %110), !dbg !7093
  br label %if.end90, !dbg !7094

if.end90:                                         ; preds = %for.end89, %if.end11
  %111 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7095
  %top_p_seq91 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %111, i32 0, i32 2, !dbg !7096
  %112 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_stmt, align 8, !dbg !7097
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %top_p_seq91, %struct.gimple_seq_d* %112), !dbg !7098
  ret void, !dbg !7099
}

; Function Attrs: noinline nounwind uwtable
define internal void @lower_try_finally_switch(%struct.leh_state* %state, %struct.leh_tf_state* %tf) #0 !dbg !7100 {
entry:
  %state.addr = alloca %struct.leh_state*, align 8
  %tf.addr = alloca %struct.leh_tf_state*, align 8
  %q = alloca %struct.goto_queue_node*, align 8
  %qe = alloca %struct.goto_queue_node*, align 8
  %return_val = alloca %union.tree_node*, align 8
  %finally_tmp = alloca %union.tree_node*, align 8
  %finally_label = alloca %union.tree_node*, align 8
  %return_index = alloca i32, align 4
  %eh_index = alloca i32, align 4
  %fallthru_index = alloca i32, align 4
  %nlabels = alloca i32, align 4
  %ndests = alloca i32, align 4
  %j = alloca i32, align 4
  %last_case_index = alloca i32, align 4
  %last_case = alloca %union.tree_node*, align 8
  %case_label_vec = alloca %struct.VEC_tree_heap*, align 8
  %switch_body = alloca %struct.gimple_seq_d*, align 8
  %x = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %union.tree_node*, align 8
  %switch_stmt = alloca %union.gimple_statement_d*, align 8
  %finally = alloca %struct.gimple_seq_d*, align 8
  %cont_map = alloca %struct.pointer_map_t*, align 8
  %tf_loc = alloca i32, align 4
  %finally_loc = alloca i32, align 4
  %mod = alloca %struct.gimple_seq_d*, align 8
  %switch_id = alloca i32, align 4
  %case_index = alloca i32, align 4
  %case_lab = alloca %union.tree_node*, align 8
  %slot = alloca i8**, align 8
  %label = alloca %union.tree_node*, align 8
  %cont_stmt130 = alloca %union.gimple_statement_d*, align 8
  %slot131 = alloca i8**, align 8
  store %struct.leh_state* %state, %struct.leh_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_state** %state.addr, metadata !7101, metadata !DIExpression()), !dbg !7102
  store %struct.leh_tf_state* %tf, %struct.leh_tf_state** %tf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_tf_state** %tf.addr, metadata !7103, metadata !DIExpression()), !dbg !7104
  call void @llvm.dbg.declare(metadata %struct.goto_queue_node** %q, metadata !7105, metadata !DIExpression()), !dbg !7106
  call void @llvm.dbg.declare(metadata %struct.goto_queue_node** %qe, metadata !7107, metadata !DIExpression()), !dbg !7108
  call void @llvm.dbg.declare(metadata %union.tree_node** %return_val, metadata !7109, metadata !DIExpression()), !dbg !7110
  store %union.tree_node* null, %union.tree_node** %return_val, align 8, !dbg !7110
  call void @llvm.dbg.declare(metadata %union.tree_node** %finally_tmp, metadata !7111, metadata !DIExpression()), !dbg !7112
  call void @llvm.dbg.declare(metadata %union.tree_node** %finally_label, metadata !7113, metadata !DIExpression()), !dbg !7114
  call void @llvm.dbg.declare(metadata i32* %return_index, metadata !7115, metadata !DIExpression()), !dbg !7116
  call void @llvm.dbg.declare(metadata i32* %eh_index, metadata !7117, metadata !DIExpression()), !dbg !7118
  call void @llvm.dbg.declare(metadata i32* %fallthru_index, metadata !7119, metadata !DIExpression()), !dbg !7120
  call void @llvm.dbg.declare(metadata i32* %nlabels, metadata !7121, metadata !DIExpression()), !dbg !7122
  call void @llvm.dbg.declare(metadata i32* %ndests, metadata !7123, metadata !DIExpression()), !dbg !7124
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7125, metadata !DIExpression()), !dbg !7126
  call void @llvm.dbg.declare(metadata i32* %last_case_index, metadata !7127, metadata !DIExpression()), !dbg !7128
  call void @llvm.dbg.declare(metadata %union.tree_node** %last_case, metadata !7129, metadata !DIExpression()), !dbg !7130
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %case_label_vec, metadata !7131, metadata !DIExpression()), !dbg !7132
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %switch_body, metadata !7133, metadata !DIExpression()), !dbg !7134
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %x, metadata !7135, metadata !DIExpression()), !dbg !7136
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !7137, metadata !DIExpression()), !dbg !7138
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %switch_stmt, metadata !7139, metadata !DIExpression()), !dbg !7140
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %finally, metadata !7141, metadata !DIExpression()), !dbg !7142
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t** %cont_map, metadata !7143, metadata !DIExpression()), !dbg !7144
  store %struct.pointer_map_t* null, %struct.pointer_map_t** %cont_map, align 8, !dbg !7144
  call void @llvm.dbg.declare(metadata i32* %tf_loc, metadata !7145, metadata !DIExpression()), !dbg !7146
  %0 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7147
  %try_finally_expr = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %0, i32 0, i32 0, !dbg !7148
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %try_finally_expr, align 8, !dbg !7148
  %call = call i32 @gimple_location(%union.gimple_statement_d* %1), !dbg !7149
  store i32 %call, i32* %tf_loc, align 4, !dbg !7146
  call void @llvm.dbg.declare(metadata i32* %finally_loc, metadata !7150, metadata !DIExpression()), !dbg !7151
  %call1 = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !7152
  store %struct.gimple_seq_d* %call1, %struct.gimple_seq_d** %switch_body, align 8, !dbg !7153
  %2 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7154
  %top_p = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %2, i32 0, i32 1, !dbg !7155
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %top_p, align 8, !dbg !7155
  %call2 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %3), !dbg !7156
  store %struct.gimple_seq_d* %call2, %struct.gimple_seq_d** %finally, align 8, !dbg !7157
  %4 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7158
  %top_p3 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %4, i32 0, i32 1, !dbg !7159
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %top_p3, align 8, !dbg !7159
  %call4 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %5), !dbg !7160
  %6 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7161
  %top_p_seq = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %6, i32 0, i32 2, !dbg !7162
  store %struct.gimple_seq_d* %call4, %struct.gimple_seq_d** %top_p_seq, align 8, !dbg !7163
  %7 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7164
  %top_p_seq5 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %7, i32 0, i32 2, !dbg !7165
  %8 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %top_p_seq5, align 8, !dbg !7165
  %call6 = call %union.gimple_statement_d* @gimple_seq_last_stmt(%struct.gimple_seq_d* %8), !dbg !7166
  %cmp = icmp ne %union.gimple_statement_d* %call6, null, !dbg !7167
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7166

cond.true:                                        ; preds = %entry
  %9 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7168
  %top_p_seq7 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %9, i32 0, i32 2, !dbg !7169
  %10 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %top_p_seq7, align 8, !dbg !7169
  %call8 = call %union.gimple_statement_d* @gimple_seq_last_stmt(%struct.gimple_seq_d* %10), !dbg !7170
  %call9 = call i32 @gimple_location(%union.gimple_statement_d* %call8), !dbg !7171
  br label %cond.end, !dbg !7166

cond.false:                                       ; preds = %entry
  %11 = load i32, i32* %tf_loc, align 4, !dbg !7172
  br label %cond.end, !dbg !7166

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call9, %cond.true ], [ %11, %cond.false ], !dbg !7166
  store i32 %cond, i32* %finally_loc, align 4, !dbg !7173
  %12 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !7174
  %13 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %finally, align 8, !dbg !7175
  call void @lower_eh_constructs_1(%struct.leh_state* %12, %struct.gimple_seq_d* %13), !dbg !7176
  %14 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7177
  %dest_array = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %14, i32 0, i32 9, !dbg !7177
  %15 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dest_array, align 8, !dbg !7177
  %tobool = icmp ne %struct.VEC_tree_heap* %15, null, !dbg !7177
  br i1 %tobool, label %cond.true10, label %cond.false12, !dbg !7177

cond.true10:                                      ; preds = %cond.end
  %16 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7177
  %dest_array11 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %16, i32 0, i32 9, !dbg !7177
  %17 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dest_array11, align 8, !dbg !7177
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %17, i32 0, i32 0, !dbg !7177
  br label %cond.end13, !dbg !7177

cond.false12:                                     ; preds = %cond.end
  br label %cond.end13, !dbg !7177

cond.end13:                                       ; preds = %cond.false12, %cond.true10
  %cond14 = phi %struct.VEC_tree_base* [ %base, %cond.true10 ], [ null, %cond.false12 ], !dbg !7177
  %call15 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond14), !dbg !7177
  store i32 %call15, i32* %nlabels, align 4, !dbg !7178
  %18 = load i32, i32* %nlabels, align 4, !dbg !7179
  store i32 %18, i32* %return_index, align 4, !dbg !7180
  %19 = load i32, i32* %return_index, align 4, !dbg !7181
  %20 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7182
  %may_return = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %20, i32 0, i32 12, !dbg !7183
  %21 = load i8, i8* %may_return, align 1, !dbg !7183
  %conv = zext i8 %21 to i32, !dbg !7182
  %add = add nsw i32 %19, %conv, !dbg !7184
  store i32 %add, i32* %eh_index, align 4, !dbg !7185
  %22 = load i32, i32* %eh_index, align 4, !dbg !7186
  %23 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7187
  %may_throw = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %23, i32 0, i32 13, !dbg !7188
  %24 = load i8, i8* %may_throw, align 2, !dbg !7188
  %conv16 = zext i8 %24 to i32, !dbg !7187
  %add17 = add nsw i32 %22, %conv16, !dbg !7189
  store i32 %add17, i32* %fallthru_index, align 4, !dbg !7190
  %25 = load i32, i32* %fallthru_index, align 4, !dbg !7191
  %26 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7192
  %may_fallthru = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %26, i32 0, i32 11, !dbg !7193
  %27 = load i8, i8* %may_fallthru, align 8, !dbg !7193
  %conv18 = zext i8 %27 to i32, !dbg !7192
  %add19 = add nsw i32 %25, %conv18, !dbg !7194
  store i32 %add19, i32* %ndests, align 4, !dbg !7195
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !7196
  %call20 = call %union.tree_node* @create_tmp_var(%union.tree_node* %28, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i64 0, i64 0)), !dbg !7197
  store %union.tree_node* %call20, %union.tree_node** %finally_tmp, align 8, !dbg !7198
  %29 = load i32, i32* %finally_loc, align 4, !dbg !7199
  %call21 = call %union.tree_node* @create_artificial_label(i32 %29), !dbg !7200
  store %union.tree_node* %call21, %union.tree_node** %finally_label, align 8, !dbg !7201
  %30 = load i32, i32* %ndests, align 4, !dbg !7202
  %call22 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %30), !dbg !7202
  store %struct.VEC_tree_heap* %call22, %struct.VEC_tree_heap** %case_label_vec, align 8, !dbg !7203
  store %union.tree_node* null, %union.tree_node** %last_case, align 8, !dbg !7204
  store i32 0, i32* %last_case_index, align 4, !dbg !7205
  %31 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7206
  %may_fallthru23 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %31, i32 0, i32 11, !dbg !7208
  %32 = load i8, i8* %may_fallthru23, align 8, !dbg !7208
  %tobool24 = icmp ne i8 %32, 0, !dbg !7206
  br i1 %tobool24, label %if.then, label %if.end, !dbg !7209

if.then:                                          ; preds = %cond.end13
  %33 = load %union.tree_node*, %union.tree_node** %finally_tmp, align 8, !dbg !7210
  %34 = load i32, i32* %fallthru_index, align 4, !dbg !7210
  %conv25 = sext i32 %34 to i64, !dbg !7210
  %call26 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv25), !dbg !7210
  %call27 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %33, %union.tree_node* %call26), !dbg !7210
  store %union.gimple_statement_d* %call27, %union.gimple_statement_d** %x, align 8, !dbg !7212
  %35 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7213
  %top_p_seq28 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %35, i32 0, i32 2, !dbg !7214
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !7215
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %top_p_seq28, %union.gimple_statement_d* %36), !dbg !7216
  %37 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !7217
  %38 = load i32, i32* %fallthru_index, align 4, !dbg !7217
  %conv29 = sext i32 %38 to i64, !dbg !7217
  %call30 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv29), !dbg !7217
  %39 = load i32, i32* %tf_loc, align 4, !dbg !7217
  %call31 = call %union.tree_node* @create_artificial_label(i32 %39), !dbg !7217
  %call32 = call %union.tree_node* @build3_stat(i32 139, %union.tree_node* %37, %union.tree_node* %call30, %union.tree_node* null, %union.tree_node* %call31), !dbg !7217
  store %union.tree_node* %call32, %union.tree_node** %last_case, align 8, !dbg !7218
  %40 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %case_label_vec, align 8, !dbg !7219
  %tobool33 = icmp ne %struct.VEC_tree_heap* %40, null, !dbg !7219
  br i1 %tobool33, label %cond.true34, label %cond.false36, !dbg !7219

cond.true34:                                      ; preds = %if.then
  %41 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %case_label_vec, align 8, !dbg !7219
  %base35 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %41, i32 0, i32 0, !dbg !7219
  br label %cond.end37, !dbg !7219

cond.false36:                                     ; preds = %if.then
  br label %cond.end37, !dbg !7219

cond.end37:                                       ; preds = %cond.false36, %cond.true34
  %cond38 = phi %struct.VEC_tree_base* [ %base35, %cond.true34 ], [ null, %cond.false36 ], !dbg !7219
  %42 = load %union.tree_node*, %union.tree_node** %last_case, align 8, !dbg !7219
  %call39 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond38, %union.tree_node* %42), !dbg !7219
  %43 = load i32, i32* %last_case_index, align 4, !dbg !7220
  %inc = add nsw i32 %43, 1, !dbg !7220
  store i32 %inc, i32* %last_case_index, align 4, !dbg !7220
  %44 = load %union.tree_node*, %union.tree_node** %last_case, align 8, !dbg !7221
  %exp = bitcast %union.tree_node* %44 to %struct.tree_exp*, !dbg !7221
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7221
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !7221
  %45 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7221
  %call40 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %45), !dbg !7222
  store %union.gimple_statement_d* %call40, %union.gimple_statement_d** %x, align 8, !dbg !7223
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !7224
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %switch_body, %union.gimple_statement_d* %46), !dbg !7225
  %47 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7226
  %call41 = call %union.tree_node* @lower_try_finally_fallthru_label(%struct.leh_tf_state* %47), !dbg !7227
  store %union.tree_node* %call41, %union.tree_node** %tmp, align 8, !dbg !7228
  %48 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !7229
  %call42 = call %union.gimple_statement_d* @gimple_build_goto(%union.tree_node* %48), !dbg !7230
  store %union.gimple_statement_d* %call42, %union.gimple_statement_d** %x, align 8, !dbg !7231
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !7232
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %switch_body, %union.gimple_statement_d* %49), !dbg !7233
  br label %if.end, !dbg !7234

if.end:                                           ; preds = %cond.end37, %cond.end13
  %50 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7235
  %may_throw43 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %50, i32 0, i32 13, !dbg !7237
  %51 = load i8, i8* %may_throw43, align 2, !dbg !7237
  %tobool44 = icmp ne i8 %51, 0, !dbg !7235
  br i1 %tobool44, label %if.then45, label %if.end67, !dbg !7238

if.then45:                                        ; preds = %if.end
  %52 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7239
  %region = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %52, i32 0, i32 4, !dbg !7241
  %53 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !7241
  call void @emit_post_landing_pad(%struct.gimple_seq_d** @eh_seq, %struct.eh_region_d* %53), !dbg !7242
  %54 = load %union.tree_node*, %union.tree_node** %finally_tmp, align 8, !dbg !7243
  %55 = load i32, i32* %eh_index, align 4, !dbg !7243
  %conv46 = sext i32 %55 to i64, !dbg !7243
  %call47 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv46), !dbg !7243
  %call48 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %54, %union.tree_node* %call47), !dbg !7243
  store %union.gimple_statement_d* %call48, %union.gimple_statement_d** %x, align 8, !dbg !7244
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !7245
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** @eh_seq, %union.gimple_statement_d* %56), !dbg !7246
  %57 = load %union.tree_node*, %union.tree_node** %finally_label, align 8, !dbg !7247
  %call49 = call %union.gimple_statement_d* @gimple_build_goto(%union.tree_node* %57), !dbg !7248
  store %union.gimple_statement_d* %call49, %union.gimple_statement_d** %x, align 8, !dbg !7249
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !7250
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** @eh_seq, %union.gimple_statement_d* %58), !dbg !7251
  %59 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !7252
  %60 = load i32, i32* %eh_index, align 4, !dbg !7252
  %conv50 = sext i32 %60 to i64, !dbg !7252
  %call51 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv50), !dbg !7252
  %61 = load i32, i32* %tf_loc, align 4, !dbg !7252
  %call52 = call %union.tree_node* @create_artificial_label(i32 %61), !dbg !7252
  %call53 = call %union.tree_node* @build3_stat(i32 139, %union.tree_node* %59, %union.tree_node* %call51, %union.tree_node* null, %union.tree_node* %call52), !dbg !7252
  store %union.tree_node* %call53, %union.tree_node** %last_case, align 8, !dbg !7253
  %62 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %case_label_vec, align 8, !dbg !7254
  %tobool54 = icmp ne %struct.VEC_tree_heap* %62, null, !dbg !7254
  br i1 %tobool54, label %cond.true55, label %cond.false57, !dbg !7254

cond.true55:                                      ; preds = %if.then45
  %63 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %case_label_vec, align 8, !dbg !7254
  %base56 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %63, i32 0, i32 0, !dbg !7254
  br label %cond.end58, !dbg !7254

cond.false57:                                     ; preds = %if.then45
  br label %cond.end58, !dbg !7254

cond.end58:                                       ; preds = %cond.false57, %cond.true55
  %cond59 = phi %struct.VEC_tree_base* [ %base56, %cond.true55 ], [ null, %cond.false57 ], !dbg !7254
  %64 = load %union.tree_node*, %union.tree_node** %last_case, align 8, !dbg !7254
  %call60 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond59, %union.tree_node* %64), !dbg !7254
  %65 = load i32, i32* %last_case_index, align 4, !dbg !7255
  %inc61 = add nsw i32 %65, 1, !dbg !7255
  store i32 %inc61, i32* %last_case_index, align 4, !dbg !7255
  %66 = load %union.tree_node*, %union.tree_node** %last_case, align 8, !dbg !7256
  %exp62 = bitcast %union.tree_node* %66 to %struct.tree_exp*, !dbg !7256
  %operands63 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp62, i32 0, i32 3, !dbg !7256
  %arrayidx64 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands63, i64 0, i64 2, !dbg !7256
  %67 = load %union.tree_node*, %union.tree_node** %arrayidx64, align 8, !dbg !7256
  %call65 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %67), !dbg !7257
  store %union.gimple_statement_d* %call65, %union.gimple_statement_d** %x, align 8, !dbg !7258
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !7259
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** @eh_seq, %union.gimple_statement_d* %68), !dbg !7260
  %69 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7261
  %region66 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %69, i32 0, i32 4, !dbg !7262
  %70 = load %struct.eh_region_d*, %struct.eh_region_d** %region66, align 8, !dbg !7262
  call void @emit_resx(%struct.gimple_seq_d** @eh_seq, %struct.eh_region_d* %70), !dbg !7263
  br label %if.end67, !dbg !7264

if.end67:                                         ; preds = %cond.end58, %if.end
  %71 = load %union.tree_node*, %union.tree_node** %finally_label, align 8, !dbg !7265
  %call68 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %71), !dbg !7266
  store %union.gimple_statement_d* %call68, %union.gimple_statement_d** %x, align 8, !dbg !7267
  %72 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7268
  %top_p_seq69 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %72, i32 0, i32 2, !dbg !7269
  %73 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !7270
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %top_p_seq69, %union.gimple_statement_d* %73), !dbg !7271
  %74 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7272
  %top_p_seq70 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %74, i32 0, i32 2, !dbg !7273
  %75 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %finally, align 8, !dbg !7274
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %top_p_seq70, %struct.gimple_seq_d* %75), !dbg !7275
  %76 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7276
  %goto_queue = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %76, i32 0, i32 5, !dbg !7277
  %77 = load %struct.goto_queue_node*, %struct.goto_queue_node** %goto_queue, align 8, !dbg !7277
  store %struct.goto_queue_node* %77, %struct.goto_queue_node** %q, align 8, !dbg !7278
  %78 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7279
  %79 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7280
  %goto_queue_active = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %79, i32 0, i32 7, !dbg !7281
  %80 = load i64, i64* %goto_queue_active, align 8, !dbg !7281
  %add.ptr = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %78, i64 %80, !dbg !7282
  store %struct.goto_queue_node* %add.ptr, %struct.goto_queue_node** %qe, align 8, !dbg !7283
  %81 = load i32, i32* %last_case_index, align 4, !dbg !7284
  %82 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7285
  %may_return71 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %82, i32 0, i32 12, !dbg !7286
  %83 = load i8, i8* %may_return71, align 1, !dbg !7286
  %conv72 = zext i8 %83 to i32, !dbg !7285
  %add73 = add nsw i32 %81, %conv72, !dbg !7287
  store i32 %add73, i32* %j, align 4, !dbg !7288
  br label %for.cond, !dbg !7289

for.cond:                                         ; preds = %for.inc, %if.end67
  %84 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7290
  %85 = load %struct.goto_queue_node*, %struct.goto_queue_node** %qe, align 8, !dbg !7293
  %cmp74 = icmp ult %struct.goto_queue_node* %84, %85, !dbg !7294
  br i1 %cmp74, label %for.body, label %for.end, !dbg !7295

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %mod, metadata !7296, metadata !DIExpression()), !dbg !7298
  call void @llvm.dbg.declare(metadata i32* %switch_id, metadata !7299, metadata !DIExpression()), !dbg !7300
  call void @llvm.dbg.declare(metadata i32* %case_index, metadata !7301, metadata !DIExpression()), !dbg !7302
  %call76 = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !7303
  store %struct.gimple_seq_d* %call76, %struct.gimple_seq_d** %mod, align 8, !dbg !7304
  %86 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7305
  %index = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %86, i32 0, i32 3, !dbg !7307
  %87 = load i32, i32* %index, align 8, !dbg !7307
  %cmp77 = icmp slt i32 %87, 0, !dbg !7308
  br i1 %cmp77, label %if.then79, label %if.else, !dbg !7309

if.then79:                                        ; preds = %for.body
  %88 = load %union.tree_node*, %union.tree_node** %finally_tmp, align 8, !dbg !7310
  %89 = load i32, i32* %return_index, align 4, !dbg !7310
  %conv80 = sext i32 %89 to i64, !dbg !7310
  %call81 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv80), !dbg !7310
  %call82 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %88, %union.tree_node* %call81), !dbg !7310
  store %union.gimple_statement_d* %call82, %union.gimple_statement_d** %x, align 8, !dbg !7312
  %90 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !7313
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %mod, %union.gimple_statement_d* %90), !dbg !7314
  %91 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7315
  %92 = load %union.tree_node*, %union.tree_node** %finally_label, align 8, !dbg !7316
  %93 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %mod, align 8, !dbg !7317
  call void @do_return_redirection(%struct.goto_queue_node* %91, %union.tree_node* %92, %struct.gimple_seq_d* %93, %union.tree_node** %return_val), !dbg !7318
  %94 = load i32, i32* %return_index, align 4, !dbg !7319
  store i32 %94, i32* %switch_id, align 4, !dbg !7320
  br label %if.end88, !dbg !7321

if.else:                                          ; preds = %for.body
  %95 = load %union.tree_node*, %union.tree_node** %finally_tmp, align 8, !dbg !7322
  %96 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7322
  %index83 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %96, i32 0, i32 3, !dbg !7322
  %97 = load i32, i32* %index83, align 8, !dbg !7322
  %conv84 = sext i32 %97 to i64, !dbg !7322
  %call85 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv84), !dbg !7322
  %call86 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %95, %union.tree_node* %call85), !dbg !7322
  store %union.gimple_statement_d* %call86, %union.gimple_statement_d** %x, align 8, !dbg !7324
  %98 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !7325
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %mod, %union.gimple_statement_d* %98), !dbg !7326
  %99 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7327
  %100 = load %union.tree_node*, %union.tree_node** %finally_label, align 8, !dbg !7328
  %101 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %mod, align 8, !dbg !7329
  %102 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7330
  call void @do_goto_redirection(%struct.goto_queue_node* %99, %union.tree_node* %100, %struct.gimple_seq_d* %101, %struct.leh_tf_state* %102), !dbg !7331
  %103 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7332
  %index87 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %103, i32 0, i32 3, !dbg !7333
  %104 = load i32, i32* %index87, align 8, !dbg !7333
  store i32 %104, i32* %switch_id, align 4, !dbg !7334
  br label %if.end88

if.end88:                                         ; preds = %if.else, %if.then79
  %105 = load i32, i32* %j, align 4, !dbg !7335
  %106 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7336
  %index89 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %106, i32 0, i32 3, !dbg !7337
  %107 = load i32, i32* %index89, align 8, !dbg !7337
  %add90 = add nsw i32 %105, %107, !dbg !7338
  store i32 %add90, i32* %case_index, align 4, !dbg !7339
  %108 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %case_label_vec, align 8, !dbg !7340
  %tobool91 = icmp ne %struct.VEC_tree_heap* %108, null, !dbg !7340
  br i1 %tobool91, label %cond.true92, label %cond.false94, !dbg !7340

cond.true92:                                      ; preds = %if.end88
  %109 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %case_label_vec, align 8, !dbg !7340
  %base93 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %109, i32 0, i32 0, !dbg !7340
  br label %cond.end95, !dbg !7340

cond.false94:                                     ; preds = %if.end88
  br label %cond.end95, !dbg !7340

cond.end95:                                       ; preds = %cond.false94, %cond.true92
  %cond96 = phi %struct.VEC_tree_base* [ %base93, %cond.true92 ], [ null, %cond.false94 ], !dbg !7340
  %call97 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond96), !dbg !7340
  %110 = load i32, i32* %case_index, align 4, !dbg !7342
  %cmp98 = icmp ule i32 %call97, %110, !dbg !7343
  br i1 %cmp98, label %if.then108, label %lor.lhs.false, !dbg !7344

lor.lhs.false:                                    ; preds = %cond.end95
  %111 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %case_label_vec, align 8, !dbg !7345
  %tobool100 = icmp ne %struct.VEC_tree_heap* %111, null, !dbg !7345
  br i1 %tobool100, label %cond.true101, label %cond.false103, !dbg !7345

cond.true101:                                     ; preds = %lor.lhs.false
  %112 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %case_label_vec, align 8, !dbg !7345
  %base102 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %112, i32 0, i32 0, !dbg !7345
  br label %cond.end104, !dbg !7345

cond.false103:                                    ; preds = %lor.lhs.false
  br label %cond.end104, !dbg !7345

cond.end104:                                      ; preds = %cond.false103, %cond.true101
  %cond105 = phi %struct.VEC_tree_base* [ %base102, %cond.true101 ], [ null, %cond.false103 ], !dbg !7345
  %113 = load i32, i32* %case_index, align 4, !dbg !7345
  %call106 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond105, i32 %113), !dbg !7345
  %tobool107 = icmp ne %union.tree_node* %call106, null, !dbg !7345
  br i1 %tobool107, label %if.end124, label %if.then108, !dbg !7346

if.then108:                                       ; preds = %cond.end104, %cond.end95
  call void @llvm.dbg.declare(metadata %union.tree_node** %case_lab, metadata !7347, metadata !DIExpression()), !dbg !7349
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !7350, metadata !DIExpression()), !dbg !7351
  %114 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !7352
  %115 = load i32, i32* %switch_id, align 4, !dbg !7352
  %conv109 = sext i32 %115 to i64, !dbg !7352
  %call110 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv109), !dbg !7352
  %call111 = call %union.tree_node* @build3_stat(i32 139, %union.tree_node* %114, %union.tree_node* %call110, %union.tree_node* null, %union.tree_node* null), !dbg !7352
  store %union.tree_node* %call111, %union.tree_node** %case_lab, align 8, !dbg !7353
  %116 = load %struct.pointer_map_t*, %struct.pointer_map_t** %cont_map, align 8, !dbg !7354
  %tobool112 = icmp ne %struct.pointer_map_t* %116, null, !dbg !7354
  br i1 %tobool112, label %if.end115, label %if.then113, !dbg !7356

if.then113:                                       ; preds = %if.then108
  %call114 = call %struct.pointer_map_t* @pointer_map_create(), !dbg !7357
  store %struct.pointer_map_t* %call114, %struct.pointer_map_t** %cont_map, align 8, !dbg !7358
  br label %if.end115, !dbg !7359

if.end115:                                        ; preds = %if.then113, %if.then108
  %117 = load %struct.pointer_map_t*, %struct.pointer_map_t** %cont_map, align 8, !dbg !7360
  %118 = load %union.tree_node*, %union.tree_node** %case_lab, align 8, !dbg !7361
  %119 = bitcast %union.tree_node* %118 to i8*, !dbg !7361
  %call116 = call i8** @pointer_map_insert(%struct.pointer_map_t* %117, i8* %119), !dbg !7362
  store i8** %call116, i8*** %slot, align 8, !dbg !7363
  %120 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7364
  %cont_stmt = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %120, i32 0, i32 2, !dbg !7365
  %121 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cont_stmt, align 8, !dbg !7365
  %122 = bitcast %union.gimple_statement_d* %121 to i8*, !dbg !7364
  %123 = load i8**, i8*** %slot, align 8, !dbg !7366
  store i8* %122, i8** %123, align 8, !dbg !7367
  %124 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %case_label_vec, align 8, !dbg !7368
  %tobool117 = icmp ne %struct.VEC_tree_heap* %124, null, !dbg !7368
  br i1 %tobool117, label %cond.true118, label %cond.false120, !dbg !7368

cond.true118:                                     ; preds = %if.end115
  %125 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %case_label_vec, align 8, !dbg !7368
  %base119 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %125, i32 0, i32 0, !dbg !7368
  br label %cond.end121, !dbg !7368

cond.false120:                                    ; preds = %if.end115
  br label %cond.end121, !dbg !7368

cond.end121:                                      ; preds = %cond.false120, %cond.true118
  %cond122 = phi %struct.VEC_tree_base* [ %base119, %cond.true118 ], [ null, %cond.false120 ], !dbg !7368
  %126 = load %union.tree_node*, %union.tree_node** %case_lab, align 8, !dbg !7368
  %call123 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond122, %union.tree_node* %126), !dbg !7368
  br label %if.end124, !dbg !7369

if.end124:                                        ; preds = %cond.end121, %cond.end104
  br label %for.inc, !dbg !7370

for.inc:                                          ; preds = %if.end124
  %127 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q, align 8, !dbg !7371
  %incdec.ptr = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %127, i32 1, !dbg !7371
  store %struct.goto_queue_node* %incdec.ptr, %struct.goto_queue_node** %q, align 8, !dbg !7371
  br label %for.cond, !dbg !7372, !llvm.loop !7373

for.end:                                          ; preds = %for.cond
  %128 = load i32, i32* %last_case_index, align 4, !dbg !7375
  store i32 %128, i32* %j, align 4, !dbg !7377
  br label %for.cond125, !dbg !7378

for.cond125:                                      ; preds = %for.inc160, %for.end
  %129 = load i32, i32* %j, align 4, !dbg !7379
  %130 = load i32, i32* %last_case_index, align 4, !dbg !7381
  %131 = load i32, i32* %nlabels, align 4, !dbg !7382
  %add126 = add nsw i32 %130, %131, !dbg !7383
  %cmp127 = icmp slt i32 %129, %add126, !dbg !7384
  br i1 %cmp127, label %for.body129, label %for.end162, !dbg !7385

for.body129:                                      ; preds = %for.cond125
  call void @llvm.dbg.declare(metadata %union.tree_node** %label, metadata !7386, metadata !DIExpression()), !dbg !7388
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cont_stmt130, metadata !7389, metadata !DIExpression()), !dbg !7390
  call void @llvm.dbg.declare(metadata i8*** %slot131, metadata !7391, metadata !DIExpression()), !dbg !7392
  %132 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %case_label_vec, align 8, !dbg !7393
  %tobool132 = icmp ne %struct.VEC_tree_heap* %132, null, !dbg !7393
  br i1 %tobool132, label %cond.true133, label %cond.false135, !dbg !7393

cond.true133:                                     ; preds = %for.body129
  %133 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %case_label_vec, align 8, !dbg !7393
  %base134 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %133, i32 0, i32 0, !dbg !7393
  br label %cond.end136, !dbg !7393

cond.false135:                                    ; preds = %for.body129
  br label %cond.end136, !dbg !7393

cond.end136:                                      ; preds = %cond.false135, %cond.true133
  %cond137 = phi %struct.VEC_tree_base* [ %base134, %cond.true133 ], [ null, %cond.false135 ], !dbg !7393
  %134 = load i32, i32* %j, align 4, !dbg !7393
  %call138 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond137, i32 %134), !dbg !7393
  store %union.tree_node* %call138, %union.tree_node** %last_case, align 8, !dbg !7394
  %135 = load %union.tree_node*, %union.tree_node** %last_case, align 8, !dbg !7395
  %tobool139 = icmp ne %union.tree_node* %135, null, !dbg !7395
  br i1 %tobool139, label %cond.false141, label %cond.true140, !dbg !7395

cond.true140:                                     ; preds = %cond.end136
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 1443, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7395
  br label %cond.end142, !dbg !7395

cond.false141:                                    ; preds = %cond.end136
  br label %cond.end142, !dbg !7395

cond.end142:                                      ; preds = %cond.false141, %cond.true140
  %cond143 = phi i32 [ 0, %cond.true140 ], [ 0, %cond.false141 ], !dbg !7395
  %136 = load %struct.pointer_map_t*, %struct.pointer_map_t** %cont_map, align 8, !dbg !7396
  %tobool144 = icmp ne %struct.pointer_map_t* %136, null, !dbg !7396
  br i1 %tobool144, label %cond.false146, label %cond.true145, !dbg !7396

cond.true145:                                     ; preds = %cond.end142
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 1444, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7396
  br label %cond.end147, !dbg !7396

cond.false146:                                    ; preds = %cond.end142
  br label %cond.end147, !dbg !7396

cond.end147:                                      ; preds = %cond.false146, %cond.true145
  %cond148 = phi i32 [ 0, %cond.true145 ], [ 0, %cond.false146 ], !dbg !7396
  %137 = load %struct.pointer_map_t*, %struct.pointer_map_t** %cont_map, align 8, !dbg !7397
  %138 = load %union.tree_node*, %union.tree_node** %last_case, align 8, !dbg !7398
  %139 = bitcast %union.tree_node* %138 to i8*, !dbg !7398
  %call149 = call i8** @pointer_map_contains(%struct.pointer_map_t* %137, i8* %139), !dbg !7399
  store i8** %call149, i8*** %slot131, align 8, !dbg !7400
  %140 = load i8**, i8*** %slot131, align 8, !dbg !7401
  %tobool150 = icmp ne i8** %140, null, !dbg !7401
  br i1 %tobool150, label %cond.false152, label %cond.true151, !dbg !7401

cond.true151:                                     ; preds = %cond.end147
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 1449, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7401
  br label %cond.end153, !dbg !7401

cond.false152:                                    ; preds = %cond.end147
  br label %cond.end153, !dbg !7401

cond.end153:                                      ; preds = %cond.false152, %cond.true151
  %cond154 = phi i32 [ 0, %cond.true151 ], [ 0, %cond.false152 ], !dbg !7401
  %141 = load i8**, i8*** %slot131, align 8, !dbg !7402
  %142 = bitcast i8** %141 to %union.gimple_statement_d**, !dbg !7403
  %143 = load %union.gimple_statement_d*, %union.gimple_statement_d** %142, align 8, !dbg !7403
  store %union.gimple_statement_d* %143, %union.gimple_statement_d** %cont_stmt130, align 8, !dbg !7404
  %144 = load i32, i32* %tf_loc, align 4, !dbg !7405
  %call155 = call %union.tree_node* @create_artificial_label(i32 %144), !dbg !7406
  store %union.tree_node* %call155, %union.tree_node** %label, align 8, !dbg !7407
  %145 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !7408
  %146 = load %union.tree_node*, %union.tree_node** %last_case, align 8, !dbg !7409
  %exp156 = bitcast %union.tree_node* %146 to %struct.tree_exp*, !dbg !7409
  %operands157 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp156, i32 0, i32 3, !dbg !7409
  %arrayidx158 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands157, i64 0, i64 2, !dbg !7409
  store %union.tree_node* %145, %union.tree_node** %arrayidx158, align 8, !dbg !7410
  %147 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !7411
  %call159 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %147), !dbg !7412
  store %union.gimple_statement_d* %call159, %union.gimple_statement_d** %x, align 8, !dbg !7413
  %148 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !7414
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %switch_body, %union.gimple_statement_d* %148), !dbg !7415
  %149 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cont_stmt130, align 8, !dbg !7416
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %switch_body, %union.gimple_statement_d* %149), !dbg !7417
  %150 = load %struct.leh_state*, %struct.leh_state** %state.addr, align 8, !dbg !7418
  %151 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cont_stmt130, align 8, !dbg !7419
  call void @maybe_record_in_goto_queue(%struct.leh_state* %150, %union.gimple_statement_d* %151), !dbg !7420
  br label %for.inc160, !dbg !7421

for.inc160:                                       ; preds = %cond.end153
  %152 = load i32, i32* %j, align 4, !dbg !7422
  %inc161 = add nsw i32 %152, 1, !dbg !7422
  store i32 %inc161, i32* %j, align 4, !dbg !7422
  br label %for.cond125, !dbg !7423, !llvm.loop !7424

for.end162:                                       ; preds = %for.cond125
  %153 = load %struct.pointer_map_t*, %struct.pointer_map_t** %cont_map, align 8, !dbg !7426
  %tobool163 = icmp ne %struct.pointer_map_t* %153, null, !dbg !7426
  br i1 %tobool163, label %if.then164, label %if.end165, !dbg !7428

if.then164:                                       ; preds = %for.end162
  %154 = load %struct.pointer_map_t*, %struct.pointer_map_t** %cont_map, align 8, !dbg !7429
  call void @pointer_map_destroy(%struct.pointer_map_t* %154), !dbg !7430
  br label %if.end165, !dbg !7430

if.end165:                                        ; preds = %if.then164, %for.end162
  %155 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7431
  call void @replace_goto_queue(%struct.leh_tf_state* %155), !dbg !7432
  %156 = load %union.tree_node*, %union.tree_node** %last_case, align 8, !dbg !7433
  %exp166 = bitcast %union.tree_node* %156 to %struct.tree_exp*, !dbg !7433
  %operands167 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp166, i32 0, i32 3, !dbg !7433
  %arrayidx168 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands167, i64 0, i64 0, !dbg !7433
  store %union.tree_node* null, %union.tree_node** %arrayidx168, align 8, !dbg !7434
  %157 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %case_label_vec, align 8, !dbg !7435
  call void @sort_case_labels(%struct.VEC_tree_heap* %157), !dbg !7436
  %158 = load %union.tree_node*, %union.tree_node** %finally_tmp, align 8, !dbg !7437
  %159 = load %union.tree_node*, %union.tree_node** %last_case, align 8, !dbg !7438
  %160 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %case_label_vec, align 8, !dbg !7439
  %call169 = call %union.gimple_statement_d* @gimple_build_switch_vec(%union.tree_node* %158, %union.tree_node* %159, %struct.VEC_tree_heap* %160), !dbg !7440
  store %union.gimple_statement_d* %call169, %union.gimple_statement_d** %switch_stmt, align 8, !dbg !7441
  %161 = load %union.gimple_statement_d*, %union.gimple_statement_d** %switch_stmt, align 8, !dbg !7442
  %162 = load i32, i32* %finally_loc, align 4, !dbg !7443
  call void @gimple_set_location(%union.gimple_statement_d* %161, i32 %162), !dbg !7444
  %163 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7445
  %top_p_seq170 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %163, i32 0, i32 2, !dbg !7446
  %164 = load %union.gimple_statement_d*, %union.gimple_statement_d** %switch_stmt, align 8, !dbg !7447
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %top_p_seq170, %union.gimple_statement_d* %164), !dbg !7448
  %165 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7449
  %top_p_seq171 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %165, i32 0, i32 2, !dbg !7450
  %166 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %switch_body, align 8, !dbg !7451
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %top_p_seq171, %struct.gimple_seq_d* %166), !dbg !7452
  ret void, !dbg !7453
}

declare dso_local %union.gimple_statement_d* @gimple_build_label(%union.tree_node*) #2

declare dso_local void @gimple_seq_add_stmt(%struct.gimple_seq_d**, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !7454 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !7457, metadata !DIExpression()), !dbg !7458
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7459
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !7459
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !7459
  br i1 %tobool, label %if.then, label %if.end, !dbg !7458

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7459
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !7459
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !7459
  call void @free(i8* %4), !dbg !7459
  br label %if.end, !dbg !7459

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7458
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !7458
  ret void, !dbg !7458
}

declare dso_local void @pointer_map_destroy(%struct.pointer_map_t*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @lower_try_finally_dup_block(%struct.gimple_seq_d* %seq, %struct.leh_state* %outer_state) #0 !dbg !7461 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  %outer_state.addr = alloca %struct.leh_state*, align 8
  %region = alloca %union.gimple_statement_d*, align 8
  %new_seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !7464, metadata !DIExpression()), !dbg !7465
  store %struct.leh_state* %outer_state, %struct.leh_state** %outer_state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_state** %outer_state.addr, metadata !7466, metadata !DIExpression()), !dbg !7467
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %region, metadata !7468, metadata !DIExpression()), !dbg !7469
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %region, align 8, !dbg !7469
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %new_seq, metadata !7470, metadata !DIExpression()), !dbg !7471
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !7472
  %call = call %struct.gimple_seq_d* @copy_gimple_seq_and_replace_locals(%struct.gimple_seq_d* %0), !dbg !7473
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %new_seq, align 8, !dbg !7474
  %1 = load %struct.leh_state*, %struct.leh_state** %outer_state.addr, align 8, !dbg !7475
  %tf = getelementptr inbounds %struct.leh_state, %struct.leh_state* %1, i32 0, i32 2, !dbg !7477
  %2 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf, align 8, !dbg !7477
  %tobool = icmp ne %struct.leh_tf_state* %2, null, !dbg !7475
  br i1 %tobool, label %if.then, label %if.end, !dbg !7478

if.then:                                          ; preds = %entry
  %3 = load %struct.leh_state*, %struct.leh_state** %outer_state.addr, align 8, !dbg !7479
  %tf1 = getelementptr inbounds %struct.leh_state, %struct.leh_state* %3, i32 0, i32 2, !dbg !7480
  %4 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf1, align 8, !dbg !7480
  %try_finally_expr = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %4, i32 0, i32 0, !dbg !7481
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %try_finally_expr, align 8, !dbg !7481
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %region, align 8, !dbg !7482
  br label %if.end, !dbg !7483

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_seq, align 8, !dbg !7484
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %region, align 8, !dbg !7485
  call void @collect_finally_tree_1(%struct.gimple_seq_d* %6, %union.gimple_statement_d* %7), !dbg !7486
  %8 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_seq, align 8, !dbg !7487
  ret %struct.gimple_seq_d* %8, !dbg !7488
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_try_catch_is_cleanup(%union.gimple_statement_d* %gs) #0 !dbg !7489 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7490, metadata !DIExpression()), !dbg !7491
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7492
  %call = call i32 @gimple_try_kind(%union.gimple_statement_d* %0), !dbg !7492
  %cmp = icmp eq i32 %call, 1, !dbg !7492
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7492

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 2945, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7492
  br label %cond.end, !dbg !7492

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7492

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7492
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7493
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !7494
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !7495
  %bf.load = load i32, i32* %2, align 8, !dbg !7495
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7495
  %and = and i32 %bf.lshr, 4, !dbg !7496
  %cmp1 = icmp ne i32 %and, 0, !dbg !7497
  %conv = zext i1 %cmp1 to i32, !dbg !7497
  %conv2 = trunc i32 %conv to i8, !dbg !7498
  ret i8 %conv2, !dbg !7499
}

declare dso_local %union.gimple_statement_d* @gimple_build_eh_must_not_throw(%union.tree_node*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_try(%struct.gimple_seq_d*, %struct.gimple_seq_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @gimple_seq_alloc_with_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !7500 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7501, metadata !DIExpression()), !dbg !7502
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !7503, metadata !DIExpression()), !dbg !7504
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %seq, align 8, !dbg !7504
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7505
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %seq, %union.gimple_statement_d* %0), !dbg !7506
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !7507
  ret %struct.gimple_seq_d* %1, !dbg !7508
}

; Function Attrs: noinline nounwind uwtable
define internal void @emit_post_landing_pad(%struct.gimple_seq_d** %seq, %struct.eh_region_d* %region) #0 !dbg !7509 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d**, align 8
  %region.addr = alloca %struct.eh_region_d*, align 8
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %x = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_seq_d** %seq, %struct.gimple_seq_d*** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %seq.addr, metadata !7513, metadata !DIExpression()), !dbg !7514
  store %struct.eh_region_d* %region, %struct.eh_region_d** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %region.addr, metadata !7515, metadata !DIExpression()), !dbg !7516
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !7517, metadata !DIExpression()), !dbg !7518
  %0 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !7519
  %landing_pads = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %0, i32 0, i32 6, !dbg !7520
  %1 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %landing_pads, align 8, !dbg !7520
  store %struct.eh_landing_pad_d* %1, %struct.eh_landing_pad_d** %lp, align 8, !dbg !7518
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %x, metadata !7521, metadata !DIExpression()), !dbg !7522
  %2 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !7523
  %cmp = icmp eq %struct.eh_landing_pad_d* %2, null, !dbg !7525
  br i1 %cmp, label %if.then, label %if.end, !dbg !7526

if.then:                                          ; preds = %entry
  %3 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !7527
  %call = call %struct.eh_landing_pad_d* @gen_eh_landing_pad(%struct.eh_region_d* %3), !dbg !7528
  store %struct.eh_landing_pad_d* %call, %struct.eh_landing_pad_d** %lp, align 8, !dbg !7529
  br label %if.end, !dbg !7530

if.end:                                           ; preds = %if.then, %entry
  %call1 = call %union.tree_node* @create_artificial_label(i32 0), !dbg !7531
  %4 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !7532
  %post_landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %4, i32 0, i32 2, !dbg !7533
  store %union.tree_node* %call1, %union.tree_node** %post_landing_pad, align 8, !dbg !7534
  %5 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !7535
  %index = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %5, i32 0, i32 4, !dbg !7536
  %6 = load i32, i32* %index, align 8, !dbg !7536
  %7 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !7537
  %post_landing_pad2 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %7, i32 0, i32 2, !dbg !7537
  %8 = load %union.tree_node*, %union.tree_node** %post_landing_pad2, align 8, !dbg !7537
  %label_decl = bitcast %union.tree_node* %8 to %struct.tree_label_decl*, !dbg !7537
  %eh_landing_pad_nr = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl, i32 0, i32 2, !dbg !7537
  store i32 %6, i32* %eh_landing_pad_nr, align 4, !dbg !7538
  %9 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !7539
  %post_landing_pad3 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %9, i32 0, i32 2, !dbg !7540
  %10 = load %union.tree_node*, %union.tree_node** %post_landing_pad3, align 8, !dbg !7540
  %call4 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %10), !dbg !7541
  store %union.gimple_statement_d* %call4, %union.gimple_statement_d** %x, align 8, !dbg !7542
  %11 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq.addr, align 8, !dbg !7543
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !7544
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %11, %union.gimple_statement_d* %12), !dbg !7545
  ret void, !dbg !7546
}

; Function Attrs: noinline nounwind uwtable
define internal void @emit_resx(%struct.gimple_seq_d** %seq, %struct.eh_region_d* %region) #0 !dbg !7547 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d**, align 8
  %region.addr = alloca %struct.eh_region_d*, align 8
  %x = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_seq_d** %seq, %struct.gimple_seq_d*** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %seq.addr, metadata !7548, metadata !DIExpression()), !dbg !7549
  store %struct.eh_region_d* %region, %struct.eh_region_d** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %region.addr, metadata !7550, metadata !DIExpression()), !dbg !7551
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %x, metadata !7552, metadata !DIExpression()), !dbg !7553
  %0 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !7554
  %index = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %0, i32 0, i32 3, !dbg !7555
  %1 = load i32, i32* %index, align 8, !dbg !7555
  %call = call %union.gimple_statement_d* @gimple_build_resx(i32 %1), !dbg !7556
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %x, align 8, !dbg !7553
  %2 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq.addr, align 8, !dbg !7557
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !7558
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %2, %union.gimple_statement_d* %3), !dbg !7559
  %4 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !7560
  %outer = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %4, i32 0, i32 0, !dbg !7562
  %5 = load %struct.eh_region_d*, %struct.eh_region_d** %outer, align 8, !dbg !7562
  %tobool = icmp ne %struct.eh_region_d* %5, null, !dbg !7560
  br i1 %tobool, label %if.then, label %if.end, !dbg !7563

if.then:                                          ; preds = %entry
  %6 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !7564
  %outer1 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %6, i32 0, i32 0, !dbg !7565
  %7 = load %struct.eh_region_d*, %struct.eh_region_d** %outer1, align 8, !dbg !7565
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !7566
  call void @record_stmt_eh_region(%struct.eh_region_d* %7, %union.gimple_statement_d* %8), !dbg !7567
  br label %if.end, !dbg !7567

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !7568
}

declare dso_local %struct.gimple_seq_d* @copy_gimple_seq_and_replace_locals(%struct.gimple_seq_d*) #2

declare dso_local %union.tree_node* @create_artificial_label(i32) #2

declare dso_local %union.gimple_statement_d* @gimple_build_resx(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @do_return_redirection(%struct.goto_queue_node* %q, %union.tree_node* %finlab, %struct.gimple_seq_d* %mod, %union.tree_node** %return_value_p) #0 !dbg !7569 {
entry:
  %q.addr = alloca %struct.goto_queue_node*, align 8
  %finlab.addr = alloca %union.tree_node*, align 8
  %mod.addr = alloca %struct.gimple_seq_d*, align 8
  %return_value_p.addr = alloca %union.tree_node**, align 8
  %ret_expr = alloca %union.tree_node*, align 8
  %x = alloca %union.gimple_statement_d*, align 8
  store %struct.goto_queue_node* %q, %struct.goto_queue_node** %q.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.goto_queue_node** %q.addr, metadata !7572, metadata !DIExpression()), !dbg !7573
  store %union.tree_node* %finlab, %union.tree_node** %finlab.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %finlab.addr, metadata !7574, metadata !DIExpression()), !dbg !7575
  store %struct.gimple_seq_d* %mod, %struct.gimple_seq_d** %mod.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %mod.addr, metadata !7576, metadata !DIExpression()), !dbg !7577
  store %union.tree_node** %return_value_p, %union.tree_node*** %return_value_p.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %return_value_p.addr, metadata !7578, metadata !DIExpression()), !dbg !7579
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret_expr, metadata !7580, metadata !DIExpression()), !dbg !7581
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %x, metadata !7582, metadata !DIExpression()), !dbg !7583
  %0 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q.addr, align 8, !dbg !7584
  %is_label = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %0, i32 0, i32 4, !dbg !7584
  %1 = load i32, i32* %is_label, align 4, !dbg !7584
  %tobool = icmp ne i32 %1, 0, !dbg !7584
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7584

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 729, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7584
  br label %cond.end, !dbg !7584

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7584

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7584
  %2 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q.addr, align 8, !dbg !7585
  %stmt = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %2, i32 0, i32 0, !dbg !7586
  %g = bitcast %union.treemple* %stmt to %union.gimple_statement_d**, !dbg !7587
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !7587
  %call = call %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %3), !dbg !7588
  store %union.tree_node* %call, %union.tree_node** %ret_expr, align 8, !dbg !7589
  %4 = load %union.tree_node*, %union.tree_node** %ret_expr, align 8, !dbg !7590
  %tobool1 = icmp ne %union.tree_node* %4, null, !dbg !7590
  br i1 %tobool1, label %if.then, label %if.else26, !dbg !7592

if.then:                                          ; preds = %cond.end
  %5 = load %union.tree_node**, %union.tree_node*** %return_value_p.addr, align 8, !dbg !7593
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !7596
  %tobool2 = icmp ne %union.tree_node* %6, null, !dbg !7596
  br i1 %tobool2, label %if.else, label %if.then3, !dbg !7597

if.then3:                                         ; preds = %if.then
  %7 = load %union.tree_node*, %union.tree_node** %ret_expr, align 8, !dbg !7598
  %8 = load %union.tree_node**, %union.tree_node*** %return_value_p.addr, align 8, !dbg !7599
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !7600
  br label %if.end, !dbg !7601

if.else:                                          ; preds = %if.then
  %9 = load %union.tree_node**, %union.tree_node*** %return_value_p.addr, align 8, !dbg !7602
  %10 = load %union.tree_node*, %union.tree_node** %9, align 8, !dbg !7602
  %11 = load %union.tree_node*, %union.tree_node** %ret_expr, align 8, !dbg !7602
  %cmp = icmp eq %union.tree_node* %10, %11, !dbg !7602
  br i1 %cmp, label %cond.false5, label %cond.true4, !dbg !7602

cond.true4:                                       ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7602
  br label %cond.end6, !dbg !7602

cond.false5:                                      ; preds = %if.else
  br label %cond.end6, !dbg !7602

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond7 = phi i32 [ 0, %cond.true4 ], [ 0, %cond.false5 ], !dbg !7602
  br label %if.end

if.end:                                           ; preds = %cond.end6, %if.then3
  %12 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q.addr, align 8, !dbg !7603
  %stmt8 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %12, i32 0, i32 0, !dbg !7604
  %g9 = bitcast %union.treemple* %stmt8 to %union.gimple_statement_d**, !dbg !7605
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g9, align 8, !dbg !7605
  %14 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q.addr, align 8, !dbg !7606
  %cont_stmt = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %14, i32 0, i32 2, !dbg !7607
  store %union.gimple_statement_d* %13, %union.gimple_statement_d** %cont_stmt, align 8, !dbg !7608
  %15 = load %union.tree_node*, %union.tree_node** %ret_expr, align 8, !dbg !7609
  %base = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !7609
  %16 = bitcast %struct.tree_base* %base to i64*, !dbg !7609
  %bf.load = load i64, i64* %16, align 8, !dbg !7609
  %bf.clear = and i64 %bf.load, 65535, !dbg !7609
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7609
  %cmp10 = icmp eq i32 %bf.cast, 36, !dbg !7611
  br i1 %cmp10, label %if.then11, label %if.else24, !dbg !7612

if.then11:                                        ; preds = %if.end
  %17 = load %union.tree_node**, %union.tree_node*** %return_value_p.addr, align 8, !dbg !7613
  %18 = load %union.tree_node*, %union.tree_node** %17, align 8, !dbg !7616
  %tobool12 = icmp ne %union.tree_node* %18, null, !dbg !7616
  br i1 %tobool12, label %if.else14, label %if.then13, !dbg !7617

if.then13:                                        ; preds = %if.then11
  %19 = load %union.tree_node*, %union.tree_node** %ret_expr, align 8, !dbg !7618
  %20 = load %union.tree_node**, %union.tree_node*** %return_value_p.addr, align 8, !dbg !7619
  store %union.tree_node* %19, %union.tree_node** %20, align 8, !dbg !7620
  br label %if.end20, !dbg !7621

if.else14:                                        ; preds = %if.then11
  %21 = load %union.tree_node**, %union.tree_node*** %return_value_p.addr, align 8, !dbg !7622
  %22 = load %union.tree_node*, %union.tree_node** %21, align 8, !dbg !7622
  %23 = load %union.tree_node*, %union.tree_node** %ret_expr, align 8, !dbg !7622
  %cmp15 = icmp eq %union.tree_node* %22, %23, !dbg !7622
  br i1 %cmp15, label %cond.false17, label %cond.true16, !dbg !7622

cond.true16:                                      ; preds = %if.else14
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 767, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7622
  br label %cond.end18, !dbg !7622

cond.false17:                                     ; preds = %if.else14
  br label %cond.end18, !dbg !7622

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond19 = phi i32 [ 0, %cond.true16 ], [ 0, %cond.false17 ], !dbg !7622
  br label %if.end20

if.end20:                                         ; preds = %cond.end18, %if.then13
  %24 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q.addr, align 8, !dbg !7623
  %stmt21 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %24, i32 0, i32 0, !dbg !7624
  %g22 = bitcast %union.treemple* %stmt21 to %union.gimple_statement_d**, !dbg !7625
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g22, align 8, !dbg !7625
  %26 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q.addr, align 8, !dbg !7626
  %cont_stmt23 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %26, i32 0, i32 2, !dbg !7627
  store %union.gimple_statement_d* %25, %union.gimple_statement_d** %cont_stmt23, align 8, !dbg !7628
  br label %if.end25, !dbg !7629

if.else24:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7630
  br label %if.end25

if.end25:                                         ; preds = %if.else24, %if.end20
  br label %if.end30, !dbg !7631

if.else26:                                        ; preds = %cond.end
  %27 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q.addr, align 8, !dbg !7632
  %stmt27 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %27, i32 0, i32 0, !dbg !7633
  %g28 = bitcast %union.treemple* %stmt27 to %union.gimple_statement_d**, !dbg !7634
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g28, align 8, !dbg !7634
  %29 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q.addr, align 8, !dbg !7635
  %cont_stmt29 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %29, i32 0, i32 2, !dbg !7636
  store %union.gimple_statement_d* %28, %union.gimple_statement_d** %cont_stmt29, align 8, !dbg !7637
  br label %if.end30

if.end30:                                         ; preds = %if.else26, %if.end25
  %30 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q.addr, align 8, !dbg !7638
  %repl_stmt = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %30, i32 0, i32 1, !dbg !7640
  %31 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %repl_stmt, align 8, !dbg !7640
  %tobool31 = icmp ne %struct.gimple_seq_d* %31, null, !dbg !7638
  br i1 %tobool31, label %if.end35, label %if.then32, !dbg !7641

if.then32:                                        ; preds = %if.end30
  %call33 = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !7642
  %32 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q.addr, align 8, !dbg !7643
  %repl_stmt34 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %32, i32 0, i32 1, !dbg !7644
  store %struct.gimple_seq_d* %call33, %struct.gimple_seq_d** %repl_stmt34, align 8, !dbg !7645
  br label %if.end35, !dbg !7643

if.end35:                                         ; preds = %if.then32, %if.end30
  %33 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %mod.addr, align 8, !dbg !7646
  %tobool36 = icmp ne %struct.gimple_seq_d* %33, null, !dbg !7646
  br i1 %tobool36, label %if.then37, label %if.end39, !dbg !7648

if.then37:                                        ; preds = %if.end35
  %34 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q.addr, align 8, !dbg !7649
  %repl_stmt38 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %34, i32 0, i32 1, !dbg !7650
  %35 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %mod.addr, align 8, !dbg !7651
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %repl_stmt38, %struct.gimple_seq_d* %35), !dbg !7652
  br label %if.end39, !dbg !7652

if.end39:                                         ; preds = %if.then37, %if.end35
  %36 = load %union.tree_node*, %union.tree_node** %finlab.addr, align 8, !dbg !7653
  %call40 = call %union.gimple_statement_d* @gimple_build_goto(%union.tree_node* %36), !dbg !7654
  store %union.gimple_statement_d* %call40, %union.gimple_statement_d** %x, align 8, !dbg !7655
  %37 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q.addr, align 8, !dbg !7656
  %repl_stmt41 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %37, i32 0, i32 1, !dbg !7657
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !7658
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %repl_stmt41, %union.gimple_statement_d* %38), !dbg !7659
  ret void, !dbg !7660
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_goto_redirection(%struct.goto_queue_node* %q, %union.tree_node* %finlab, %struct.gimple_seq_d* %mod, %struct.leh_tf_state* %tf) #0 !dbg !7661 {
entry:
  %q.addr = alloca %struct.goto_queue_node*, align 8
  %finlab.addr = alloca %union.tree_node*, align 8
  %mod.addr = alloca %struct.gimple_seq_d*, align 8
  %tf.addr = alloca %struct.leh_tf_state*, align 8
  %x = alloca %union.gimple_statement_d*, align 8
  store %struct.goto_queue_node* %q, %struct.goto_queue_node** %q.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.goto_queue_node** %q.addr, metadata !7664, metadata !DIExpression()), !dbg !7665
  store %union.tree_node* %finlab, %union.tree_node** %finlab.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %finlab.addr, metadata !7666, metadata !DIExpression()), !dbg !7667
  store %struct.gimple_seq_d* %mod, %struct.gimple_seq_d** %mod.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %mod.addr, metadata !7668, metadata !DIExpression()), !dbg !7669
  store %struct.leh_tf_state* %tf, %struct.leh_tf_state** %tf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_tf_state** %tf.addr, metadata !7670, metadata !DIExpression()), !dbg !7671
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %x, metadata !7672, metadata !DIExpression()), !dbg !7673
  %0 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q.addr, align 8, !dbg !7674
  %is_label = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %0, i32 0, i32 4, !dbg !7674
  %1 = load i32, i32* %is_label, align 4, !dbg !7674
  %tobool = icmp ne i32 %1, 0, !dbg !7674
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7674

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 795, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7674
  br label %cond.end, !dbg !7674

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7674

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7674
  %2 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q.addr, align 8, !dbg !7675
  %repl_stmt = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %2, i32 0, i32 1, !dbg !7677
  %3 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %repl_stmt, align 8, !dbg !7677
  %tobool1 = icmp ne %struct.gimple_seq_d* %3, null, !dbg !7675
  br i1 %tobool1, label %if.end, label %if.then, !dbg !7678

if.then:                                          ; preds = %cond.end
  %call = call %struct.gimple_seq_d* @gimple_seq_alloc(), !dbg !7679
  %4 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q.addr, align 8, !dbg !7680
  %repl_stmt2 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %4, i32 0, i32 1, !dbg !7681
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %repl_stmt2, align 8, !dbg !7682
  br label %if.end, !dbg !7680

if.end:                                           ; preds = %if.then, %cond.end
  %5 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7683
  %dest_array = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %5, i32 0, i32 9, !dbg !7683
  %6 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dest_array, align 8, !dbg !7683
  %tobool3 = icmp ne %struct.VEC_tree_heap* %6, null, !dbg !7683
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !7683

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7683
  %dest_array5 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %7, i32 0, i32 9, !dbg !7683
  %8 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %dest_array5, align 8, !dbg !7683
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %8, i32 0, i32 0, !dbg !7683
  br label %cond.end7, !dbg !7683

cond.false6:                                      ; preds = %if.end
  br label %cond.end7, !dbg !7683

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.VEC_tree_base* [ %base, %cond.true4 ], [ null, %cond.false6 ], !dbg !7683
  %9 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q.addr, align 8, !dbg !7683
  %index = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %9, i32 0, i32 3, !dbg !7683
  %10 = load i32, i32* %index, align 8, !dbg !7683
  %call9 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond8, i32 %10), !dbg !7683
  %call10 = call %union.gimple_statement_d* @gimple_build_goto(%union.tree_node* %call9), !dbg !7684
  %11 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q.addr, align 8, !dbg !7685
  %cont_stmt = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %11, i32 0, i32 2, !dbg !7686
  store %union.gimple_statement_d* %call10, %union.gimple_statement_d** %cont_stmt, align 8, !dbg !7687
  %12 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %mod.addr, align 8, !dbg !7688
  %tobool11 = icmp ne %struct.gimple_seq_d* %12, null, !dbg !7688
  br i1 %tobool11, label %if.then12, label %if.end14, !dbg !7690

if.then12:                                        ; preds = %cond.end7
  %13 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q.addr, align 8, !dbg !7691
  %repl_stmt13 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %13, i32 0, i32 1, !dbg !7692
  %14 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %mod.addr, align 8, !dbg !7693
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %repl_stmt13, %struct.gimple_seq_d* %14), !dbg !7694
  br label %if.end14, !dbg !7694

if.end14:                                         ; preds = %if.then12, %cond.end7
  %15 = load %union.tree_node*, %union.tree_node** %finlab.addr, align 8, !dbg !7695
  %call15 = call %union.gimple_statement_d* @gimple_build_goto(%union.tree_node* %15), !dbg !7696
  store %union.gimple_statement_d* %call15, %union.gimple_statement_d** %x, align 8, !dbg !7697
  %16 = load %struct.goto_queue_node*, %struct.goto_queue_node** %q.addr, align 8, !dbg !7698
  %repl_stmt16 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %16, i32 0, i32 1, !dbg !7699
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !7700
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %repl_stmt16, %union.gimple_statement_d* %17), !dbg !7701
  ret void, !dbg !7702
}

; Function Attrs: noinline nounwind uwtable
define internal void @replace_goto_queue(%struct.leh_tf_state* %tf) #0 !dbg !7703 {
entry:
  %tf.addr = alloca %struct.leh_tf_state*, align 8
  store %struct.leh_tf_state* %tf, %struct.leh_tf_state** %tf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_tf_state** %tf.addr, metadata !7706, metadata !DIExpression()), !dbg !7707
  %0 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7708
  %goto_queue_active = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %0, i32 0, i32 7, !dbg !7710
  %1 = load i64, i64* %goto_queue_active, align 8, !dbg !7710
  %cmp = icmp eq i64 %1, 0, !dbg !7711
  br i1 %cmp, label %if.then, label %if.end, !dbg !7712

if.then:                                          ; preds = %entry
  br label %return, !dbg !7713

if.end:                                           ; preds = %entry
  %2 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7714
  %top_p_seq = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %2, i32 0, i32 2, !dbg !7715
  %3 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %top_p_seq, align 8, !dbg !7715
  %4 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7716
  call void @replace_goto_queue_stmt_list(%struct.gimple_seq_d* %3, %struct.leh_tf_state* %4), !dbg !7717
  %5 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** @eh_seq, align 8, !dbg !7718
  %6 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7719
  call void @replace_goto_queue_stmt_list(%struct.gimple_seq_d* %5, %struct.leh_tf_state* %6), !dbg !7720
  br label %return, !dbg !7721

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !7721
}

declare dso_local %union.gimple_statement_d* @gimple_build_goto(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %gs) #0 !dbg !7722 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7723, metadata !DIExpression()), !dbg !7724
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7725
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !7726
  ret %union.tree_node* %call, !dbg !7727
}

declare dso_local %struct.gimple_seq_d* @gimple_seq_alloc() #2

; Function Attrs: noinline nounwind uwtable
define internal void @replace_goto_queue_stmt_list(%struct.gimple_seq_d* %seq, %struct.leh_tf_state* %tf) #0 !dbg !7728 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  %tf.addr = alloca %struct.leh_tf_state*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !7731, metadata !DIExpression()), !dbg !7732
  store %struct.leh_tf_state* %tf, %struct.leh_tf_state** %tf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_tf_state** %tf.addr, metadata !7733, metadata !DIExpression()), !dbg !7734
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !7735, metadata !DIExpression()), !dbg !7736
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !7737
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %gsi, %struct.gimple_seq_d* %0), !dbg !7738
  br label %while.cond, !dbg !7739

while.cond:                                       ; preds = %while.body, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7740
  %tobool = icmp ne i8 %call, 0, !dbg !7741
  %lnot = xor i1 %tobool, true, !dbg !7741
  br i1 %lnot, label %while.body, label %while.end, !dbg !7739

while.body:                                       ; preds = %while.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !7742
  %1 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7743
  call void @replace_goto_queue_1(%union.gimple_statement_d* %call1, %struct.leh_tf_state* %1, %struct.gimple_stmt_iterator* %gsi), !dbg !7744
  br label %while.cond, !dbg !7739, !llvm.loop !7745

while.end:                                        ; preds = %while.cond
  ret void, !dbg !7747
}

; Function Attrs: noinline nounwind uwtable
define internal void @replace_goto_queue_1(%union.gimple_statement_d* %stmt, %struct.leh_tf_state* %tf, %struct.gimple_stmt_iterator* %gsi) #0 !dbg !7748 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %tf.addr = alloca %struct.leh_tf_state*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  %temp = alloca %union.treemple, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7751, metadata !DIExpression()), !dbg !7752
  store %struct.leh_tf_state* %tf, %struct.leh_tf_state** %tf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_tf_state** %tf.addr, metadata !7753, metadata !DIExpression()), !dbg !7754
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !7755, metadata !DIExpression()), !dbg !7756
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !7757, metadata !DIExpression()), !dbg !7758
  call void @llvm.dbg.declare(metadata %union.treemple* %temp, metadata !7759, metadata !DIExpression()), !dbg !7760
  %g = bitcast %union.treemple* %temp to %union.gimple_statement_d**, !dbg !7761
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %g, align 8, !dbg !7762
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7763
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7764
  switch i32 %call, label %sw.default [
    i32 3, label %sw.bb
    i32 9, label %sw.bb
    i32 1, label %sw.bb4
    i32 17, label %sw.bb7
    i32 11, label %sw.bb10
    i32 12, label %sw.bb12
  ], !dbg !7765

sw.bb:                                            ; preds = %entry, %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7766
  %g1 = bitcast %union.treemple* %temp to %union.gimple_statement_d**, !dbg !7768
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %g1, align 8, !dbg !7769
  %2 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7770
  %coerce.dive = getelementptr inbounds %union.treemple, %union.treemple* %temp, i32 0, i32 0, !dbg !7771
  %3 = load %union.tree_node**, %union.tree_node*** %coerce.dive, align 8, !dbg !7771
  %call2 = call %struct.gimple_seq_d* @find_goto_replacement(%struct.leh_tf_state* %2, %union.tree_node** %3), !dbg !7771
  store %struct.gimple_seq_d* %call2, %struct.gimple_seq_d** %seq, align 8, !dbg !7772
  %4 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !7773
  %tobool = icmp ne %struct.gimple_seq_d* %4, null, !dbg !7773
  br i1 %tobool, label %if.then, label %if.end, !dbg !7775

if.then:                                          ; preds = %sw.bb
  %5 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7776
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !7778
  %call3 = call %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %6), !dbg !7779
  call void @gsi_insert_seq_before(%struct.gimple_stmt_iterator* %5, %struct.gimple_seq_d* %call3, i32 1), !dbg !7780
  %7 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7781
  call void @gsi_remove(%struct.gimple_stmt_iterator* %7, i8 zeroext 0), !dbg !7782
  br label %return, !dbg !7783

if.end:                                           ; preds = %sw.bb
  br label %sw.epilog, !dbg !7784

sw.bb4:                                           ; preds = %entry
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7785
  %call5 = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %8, i32 2), !dbg !7786
  %9 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7787
  %10 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7788
  call void @replace_goto_queue_cond_clause(%union.tree_node** %call5, %struct.leh_tf_state* %9, %struct.gimple_stmt_iterator* %10), !dbg !7789
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7790
  %call6 = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %11, i32 3), !dbg !7791
  %12 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7792
  %13 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7793
  call void @replace_goto_queue_cond_clause(%union.tree_node** %call6, %struct.leh_tf_state* %12, %struct.gimple_stmt_iterator* %13), !dbg !7794
  br label %sw.epilog, !dbg !7795

sw.bb7:                                           ; preds = %entry
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7796
  %call8 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %14), !dbg !7797
  %15 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7798
  call void @replace_goto_queue_stmt_list(%struct.gimple_seq_d* %call8, %struct.leh_tf_state* %15), !dbg !7799
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7800
  %call9 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %16), !dbg !7801
  %17 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7802
  call void @replace_goto_queue_stmt_list(%struct.gimple_seq_d* %call9, %struct.leh_tf_state* %17), !dbg !7803
  br label %sw.epilog, !dbg !7804

sw.bb10:                                          ; preds = %entry
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7805
  %call11 = call %struct.gimple_seq_d* @gimple_catch_handler(%union.gimple_statement_d* %18), !dbg !7806
  %19 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7807
  call void @replace_goto_queue_stmt_list(%struct.gimple_seq_d* %call11, %struct.leh_tf_state* %19), !dbg !7808
  br label %sw.epilog, !dbg !7809

sw.bb12:                                          ; preds = %entry
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7810
  %call13 = call %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %20), !dbg !7811
  %21 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7812
  call void @replace_goto_queue_stmt_list(%struct.gimple_seq_d* %call13, %struct.leh_tf_state* %21), !dbg !7813
  br label %sw.epilog, !dbg !7814

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !7815

sw.epilog:                                        ; preds = %sw.default, %sw.bb12, %sw.bb10, %sw.bb7, %sw.bb4, %if.end
  %22 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7816
  call void @gsi_next(%struct.gimple_stmt_iterator* %22), !dbg !7817
  br label %return, !dbg !7818

return:                                           ; preds = %sw.epilog, %if.then
  ret void, !dbg !7818
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @find_goto_replacement(%struct.leh_tf_state* %tf, %union.tree_node** %stmt.coerce) #0 !dbg !7819 {
entry:
  %retval = alloca %struct.gimple_seq_d*, align 8
  %stmt = alloca %union.treemple, align 8
  %tf.addr = alloca %struct.leh_tf_state*, align 8
  %i = alloca i32, align 4
  %slot = alloca i8**, align 8
  %coerce.dive = getelementptr inbounds %union.treemple, %union.treemple* %stmt, i32 0, i32 0
  store %union.tree_node** %stmt.coerce, %union.tree_node*** %coerce.dive, align 8
  store %struct.leh_tf_state* %tf, %struct.leh_tf_state** %tf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_tf_state** %tf.addr, metadata !7822, metadata !DIExpression()), !dbg !7823
  call void @llvm.dbg.declare(metadata %union.treemple* %stmt, metadata !7824, metadata !DIExpression()), !dbg !7825
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7826, metadata !DIExpression()), !dbg !7827
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !7828, metadata !DIExpression()), !dbg !7829
  %0 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7830
  %goto_queue_active = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %0, i32 0, i32 7, !dbg !7832
  %1 = load i64, i64* %goto_queue_active, align 8, !dbg !7832
  %cmp = icmp ult i64 %1, 20, !dbg !7833
  br i1 %cmp, label %if.then, label %if.end12, !dbg !7834

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !7835
  br label %for.cond, !dbg !7838

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4, !dbg !7839
  %conv = zext i32 %2 to i64, !dbg !7839
  %3 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7841
  %goto_queue_active1 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %3, i32 0, i32 7, !dbg !7842
  %4 = load i64, i64* %goto_queue_active1, align 8, !dbg !7842
  %cmp2 = icmp ult i64 %conv, %4, !dbg !7843
  br i1 %cmp2, label %for.body, label %for.end, !dbg !7844

for.body:                                         ; preds = %for.cond
  %5 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7845
  %goto_queue = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %5, i32 0, i32 5, !dbg !7847
  %6 = load %struct.goto_queue_node*, %struct.goto_queue_node** %goto_queue, align 8, !dbg !7847
  %7 = load i32, i32* %i, align 4, !dbg !7848
  %idxprom = zext i32 %7 to i64, !dbg !7845
  %arrayidx = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %6, i64 %idxprom, !dbg !7845
  %stmt4 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %arrayidx, i32 0, i32 0, !dbg !7849
  %g = bitcast %union.treemple* %stmt4 to %union.gimple_statement_d**, !dbg !7850
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !7850
  %g5 = bitcast %union.treemple* %stmt to %union.gimple_statement_d**, !dbg !7851
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g5, align 8, !dbg !7851
  %cmp6 = icmp eq %union.gimple_statement_d* %8, %9, !dbg !7852
  br i1 %cmp6, label %if.then8, label %if.end, !dbg !7853

if.then8:                                         ; preds = %for.body
  %10 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7854
  %goto_queue9 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %10, i32 0, i32 5, !dbg !7855
  %11 = load %struct.goto_queue_node*, %struct.goto_queue_node** %goto_queue9, align 8, !dbg !7855
  %12 = load i32, i32* %i, align 4, !dbg !7856
  %idxprom10 = zext i32 %12 to i64, !dbg !7854
  %arrayidx11 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %11, i64 %idxprom10, !dbg !7854
  %repl_stmt = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %arrayidx11, i32 0, i32 1, !dbg !7857
  %13 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %repl_stmt, align 8, !dbg !7857
  store %struct.gimple_seq_d* %13, %struct.gimple_seq_d** %retval, align 8, !dbg !7858
  br label %return, !dbg !7858

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !7851

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4, !dbg !7859
  %inc = add i32 %14, 1, !dbg !7859
  store i32 %inc, i32* %i, align 4, !dbg !7859
  br label %for.cond, !dbg !7860, !llvm.loop !7861

for.end:                                          ; preds = %for.cond
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %retval, align 8, !dbg !7863
  br label %return, !dbg !7863

if.end12:                                         ; preds = %entry
  %15 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7864
  %goto_queue_map = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %15, i32 0, i32 8, !dbg !7866
  %16 = load %struct.pointer_map_t*, %struct.pointer_map_t** %goto_queue_map, align 8, !dbg !7866
  %tobool = icmp ne %struct.pointer_map_t* %16, null, !dbg !7864
  br i1 %tobool, label %if.end36, label %if.then13, !dbg !7867

if.then13:                                        ; preds = %if.end12
  %call = call %struct.pointer_map_t* @pointer_map_create(), !dbg !7868
  %17 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7870
  %goto_queue_map14 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %17, i32 0, i32 8, !dbg !7871
  store %struct.pointer_map_t* %call, %struct.pointer_map_t** %goto_queue_map14, align 8, !dbg !7872
  store i32 0, i32* %i, align 4, !dbg !7873
  br label %for.cond15, !dbg !7875

for.cond15:                                       ; preds = %for.inc33, %if.then13
  %18 = load i32, i32* %i, align 4, !dbg !7876
  %conv16 = zext i32 %18 to i64, !dbg !7876
  %19 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7878
  %goto_queue_active17 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %19, i32 0, i32 7, !dbg !7879
  %20 = load i64, i64* %goto_queue_active17, align 8, !dbg !7879
  %cmp18 = icmp ult i64 %conv16, %20, !dbg !7880
  br i1 %cmp18, label %for.body20, label %for.end35, !dbg !7881

for.body20:                                       ; preds = %for.cond15
  %21 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7882
  %goto_queue_map21 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %21, i32 0, i32 8, !dbg !7884
  %22 = load %struct.pointer_map_t*, %struct.pointer_map_t** %goto_queue_map21, align 8, !dbg !7884
  %23 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7885
  %goto_queue22 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %23, i32 0, i32 5, !dbg !7886
  %24 = load %struct.goto_queue_node*, %struct.goto_queue_node** %goto_queue22, align 8, !dbg !7886
  %25 = load i32, i32* %i, align 4, !dbg !7887
  %idxprom23 = zext i32 %25 to i64, !dbg !7885
  %arrayidx24 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %24, i64 %idxprom23, !dbg !7885
  %stmt25 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %arrayidx24, i32 0, i32 0, !dbg !7888
  %g26 = bitcast %union.treemple* %stmt25 to %union.gimple_statement_d**, !dbg !7889
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g26, align 8, !dbg !7889
  %27 = bitcast %union.gimple_statement_d* %26 to i8*, !dbg !7885
  %call27 = call i8** @pointer_map_insert(%struct.pointer_map_t* %22, i8* %27), !dbg !7890
  store i8** %call27, i8*** %slot, align 8, !dbg !7891
  %28 = load i8**, i8*** %slot, align 8, !dbg !7892
  %29 = load i8*, i8** %28, align 8, !dbg !7892
  %cmp28 = icmp eq i8* %29, null, !dbg !7892
  br i1 %cmp28, label %cond.false, label %cond.true, !dbg !7892

cond.true:                                        ; preds = %for.body20
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 451, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7892
  br label %cond.end, !dbg !7892

cond.false:                                       ; preds = %for.body20
  br label %cond.end, !dbg !7892

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7892
  %30 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7893
  %goto_queue30 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %30, i32 0, i32 5, !dbg !7894
  %31 = load %struct.goto_queue_node*, %struct.goto_queue_node** %goto_queue30, align 8, !dbg !7894
  %32 = load i32, i32* %i, align 4, !dbg !7895
  %idxprom31 = zext i32 %32 to i64, !dbg !7893
  %arrayidx32 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %31, i64 %idxprom31, !dbg !7893
  %33 = bitcast %struct.goto_queue_node* %arrayidx32 to i8*, !dbg !7896
  %34 = load i8**, i8*** %slot, align 8, !dbg !7897
  store i8* %33, i8** %34, align 8, !dbg !7898
  br label %for.inc33, !dbg !7899

for.inc33:                                        ; preds = %cond.end
  %35 = load i32, i32* %i, align 4, !dbg !7900
  %inc34 = add i32 %35, 1, !dbg !7900
  store i32 %inc34, i32* %i, align 4, !dbg !7900
  br label %for.cond15, !dbg !7901, !llvm.loop !7902

for.end35:                                        ; preds = %for.cond15
  br label %if.end36, !dbg !7904

if.end36:                                         ; preds = %for.end35, %if.end12
  %36 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7905
  %goto_queue_map37 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %36, i32 0, i32 8, !dbg !7906
  %37 = load %struct.pointer_map_t*, %struct.pointer_map_t** %goto_queue_map37, align 8, !dbg !7906
  %g38 = bitcast %union.treemple* %stmt to %union.gimple_statement_d**, !dbg !7907
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g38, align 8, !dbg !7907
  %39 = bitcast %union.gimple_statement_d* %38 to i8*, !dbg !7908
  %call39 = call i8** @pointer_map_contains(%struct.pointer_map_t* %37, i8* %39), !dbg !7909
  store i8** %call39, i8*** %slot, align 8, !dbg !7910
  %40 = load i8**, i8*** %slot, align 8, !dbg !7911
  %cmp40 = icmp ne i8** %40, null, !dbg !7913
  br i1 %cmp40, label %if.then42, label %if.end44, !dbg !7914

if.then42:                                        ; preds = %if.end36
  %41 = load i8**, i8*** %slot, align 8, !dbg !7915
  %42 = load i8*, i8** %41, align 8, !dbg !7916
  %43 = bitcast i8* %42 to %struct.goto_queue_node*, !dbg !7917
  %repl_stmt43 = getelementptr inbounds %struct.goto_queue_node, %struct.goto_queue_node* %43, i32 0, i32 1, !dbg !7918
  %44 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %repl_stmt43, align 8, !dbg !7918
  store %struct.gimple_seq_d* %44, %struct.gimple_seq_d** %retval, align 8, !dbg !7919
  br label %return, !dbg !7919

if.end44:                                         ; preds = %if.end36
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %retval, align 8, !dbg !7920
  br label %return, !dbg !7920

return:                                           ; preds = %if.end44, %if.then42, %for.end, %if.then8
  %45 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %retval, align 8, !dbg !7921
  ret %struct.gimple_seq_d* %45, !dbg !7921
}

declare dso_local %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @replace_goto_queue_cond_clause(%union.tree_node** %tp, %struct.leh_tf_state* %tf, %struct.gimple_stmt_iterator* %gsi) #0 !dbg !7922 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %tf.addr = alloca %struct.leh_tf_state*, align 8
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %label = alloca %union.tree_node*, align 8
  %new_seq = alloca %struct.gimple_seq_d*, align 8
  %temp = alloca %union.treemple, align 8
  %loc = alloca i32, align 4
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !7925, metadata !DIExpression()), !dbg !7926
  store %struct.leh_tf_state* %tf, %struct.leh_tf_state** %tf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_tf_state** %tf.addr, metadata !7927, metadata !DIExpression()), !dbg !7928
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !7929, metadata !DIExpression()), !dbg !7930
  call void @llvm.dbg.declare(metadata %union.tree_node** %label, metadata !7931, metadata !DIExpression()), !dbg !7932
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %new_seq, metadata !7933, metadata !DIExpression()), !dbg !7934
  call void @llvm.dbg.declare(metadata %union.treemple* %temp, metadata !7935, metadata !DIExpression()), !dbg !7936
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !7937, metadata !DIExpression()), !dbg !7938
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7939
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !7940
  %call1 = call i32 @gimple_location(%union.gimple_statement_d* %call), !dbg !7941
  store i32 %call1, i32* %loc, align 4, !dbg !7938
  %1 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7942
  %tp2 = bitcast %union.treemple* %temp to %union.tree_node***, !dbg !7943
  store %union.tree_node** %1, %union.tree_node*** %tp2, align 8, !dbg !7944
  %2 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !7945
  %coerce.dive = getelementptr inbounds %union.treemple, %union.treemple* %temp, i32 0, i32 0, !dbg !7946
  %3 = load %union.tree_node**, %union.tree_node*** %coerce.dive, align 8, !dbg !7946
  %call3 = call %struct.gimple_seq_d* @find_goto_replacement(%struct.leh_tf_state* %2, %union.tree_node** %3), !dbg !7946
  store %struct.gimple_seq_d* %call3, %struct.gimple_seq_d** %new_seq, align 8, !dbg !7947
  %4 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_seq, align 8, !dbg !7948
  %tobool = icmp ne %struct.gimple_seq_d* %4, null, !dbg !7948
  br i1 %tobool, label %if.end, label %if.then, !dbg !7950

if.then:                                          ; preds = %entry
  br label %return, !dbg !7951

if.end:                                           ; preds = %entry
  %5 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_seq, align 8, !dbg !7952
  %call4 = call zeroext i8 @gimple_seq_singleton_p(%struct.gimple_seq_d* %5), !dbg !7954
  %conv = zext i8 %call4 to i32, !dbg !7954
  %tobool5 = icmp ne i32 %conv, 0, !dbg !7954
  br i1 %tobool5, label %land.lhs.true, label %if.end12, !dbg !7955

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_seq, align 8, !dbg !7956
  %call6 = call %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %6), !dbg !7957
  %call7 = call i32 @gimple_code(%union.gimple_statement_d* %call6), !dbg !7958
  %cmp = icmp eq i32 %call7, 3, !dbg !7959
  br i1 %cmp, label %if.then9, label %if.end12, !dbg !7960

if.then9:                                         ; preds = %land.lhs.true
  %7 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_seq, align 8, !dbg !7961
  %call10 = call %union.gimple_statement_d* @gimple_seq_first_stmt(%struct.gimple_seq_d* %7), !dbg !7963
  %call11 = call %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %call10), !dbg !7964
  %8 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7965
  store %union.tree_node* %call11, %union.tree_node** %8, align 8, !dbg !7966
  br label %return, !dbg !7967

if.end12:                                         ; preds = %land.lhs.true, %if.end
  %9 = load i32, i32* %loc, align 4, !dbg !7968
  %call13 = call %union.tree_node* @create_artificial_label(i32 %9), !dbg !7969
  store %union.tree_node* %call13, %union.tree_node** %label, align 8, !dbg !7970
  %10 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !7971
  %11 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7972
  store %union.tree_node* %10, %union.tree_node** %11, align 8, !dbg !7973
  %12 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7974
  %13 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !7975
  %call14 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %13), !dbg !7976
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %12, %union.gimple_statement_d* %call14, i32 2), !dbg !7977
  %14 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !7978
  %15 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_seq, align 8, !dbg !7979
  %call15 = call %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %15), !dbg !7980
  call void @gsi_insert_seq_after(%struct.gimple_stmt_iterator* %14, %struct.gimple_seq_d* %call15, i32 2), !dbg !7981
  br label %return, !dbg !7982

return:                                           ; preds = %if.end12, %if.then9, %if.then
  ret void, !dbg !7982
}

declare dso_local %struct.pointer_map_t* @pointer_map_create() #2

declare dso_local i8** @pointer_map_insert(%struct.pointer_map_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_seq_singleton_p(%struct.gimple_seq_d* %seq) #0 !dbg !7983 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !7986, metadata !DIExpression()), !dbg !7987
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !7988
  %call = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %0), !dbg !7989
  %cmp = icmp ne %struct.gimple_seq_node_d* %call, null, !dbg !7990
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7991

land.rhs:                                         ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !7992
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !7993
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !7994
  %call2 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %2), !dbg !7995
  %cmp3 = icmp eq %struct.gimple_seq_node_d* %call1, %call2, !dbg !7996
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ], !dbg !7997
  %land.ext = zext i1 %3 to i32, !dbg !7991
  %conv = trunc i32 %land.ext to i8, !dbg !7998
  ret i8 %conv, !dbg !7999
}

declare dso_local void @gsi_insert_seq_after(%struct.gimple_stmt_iterator*, %struct.gimple_seq_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !8000 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !8001, metadata !DIExpression()), !dbg !8002
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !8003
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !8003
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8003

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !8004
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !8005
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !8005
  br label %cond.end, !dbg !8003

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8003

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !8003
  ret %struct.gimple_seq_node_d* %cond, !dbg !8006
}

declare dso_local i32 @count_insns_seq(%struct.gimple_seq_d*, %struct.eni_weights_d*) #2

declare dso_local zeroext i8 @optimize_function_for_size_p(%struct.function*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lower_try_finally_fallthru_label(%struct.leh_tf_state* %tf) #0 !dbg !8007 {
entry:
  %tf.addr = alloca %struct.leh_tf_state*, align 8
  %label = alloca %union.tree_node*, align 8
  %temp = alloca %union.treemple, align 8
  store %struct.leh_tf_state* %tf, %struct.leh_tf_state** %tf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.leh_tf_state** %tf.addr, metadata !8010, metadata !DIExpression()), !dbg !8011
  call void @llvm.dbg.declare(metadata %union.tree_node** %label, metadata !8012, metadata !DIExpression()), !dbg !8013
  %0 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !8014
  %fallthru_label = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %0, i32 0, i32 10, !dbg !8015
  %1 = load %union.tree_node*, %union.tree_node** %fallthru_label, align 8, !dbg !8015
  store %union.tree_node* %1, %union.tree_node** %label, align 8, !dbg !8013
  call void @llvm.dbg.declare(metadata %union.treemple* %temp, metadata !8016, metadata !DIExpression()), !dbg !8017
  %2 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !8018
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !8018
  br i1 %tobool, label %if.end9, label %if.then, !dbg !8020

if.then:                                          ; preds = %entry
  %3 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !8021
  %try_finally_expr = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %3, i32 0, i32 0, !dbg !8023
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %try_finally_expr, align 8, !dbg !8023
  %call = call i32 @gimple_location(%union.gimple_statement_d* %4), !dbg !8024
  %call1 = call %union.tree_node* @create_artificial_label(i32 %call), !dbg !8025
  store %union.tree_node* %call1, %union.tree_node** %label, align 8, !dbg !8026
  %5 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !8027
  %6 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !8028
  %fallthru_label2 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %6, i32 0, i32 10, !dbg !8029
  store %union.tree_node* %5, %union.tree_node** %fallthru_label2, align 8, !dbg !8030
  %7 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !8031
  %outer = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %7, i32 0, i32 3, !dbg !8033
  %8 = load %struct.leh_state*, %struct.leh_state** %outer, align 8, !dbg !8033
  %tf3 = getelementptr inbounds %struct.leh_state, %struct.leh_state* %8, i32 0, i32 2, !dbg !8034
  %9 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf3, align 8, !dbg !8034
  %tobool4 = icmp ne %struct.leh_tf_state* %9, null, !dbg !8031
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !8035

if.then5:                                         ; preds = %if.then
  %10 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !8036
  %t = bitcast %union.treemple* %temp to %union.tree_node**, !dbg !8038
  store %union.tree_node* %10, %union.tree_node** %t, align 8, !dbg !8039
  %11 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf.addr, align 8, !dbg !8040
  %outer6 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %11, i32 0, i32 3, !dbg !8041
  %12 = load %struct.leh_state*, %struct.leh_state** %outer6, align 8, !dbg !8041
  %tf7 = getelementptr inbounds %struct.leh_state, %struct.leh_state* %12, i32 0, i32 2, !dbg !8042
  %13 = load %struct.leh_tf_state*, %struct.leh_tf_state** %tf7, align 8, !dbg !8042
  %try_finally_expr8 = getelementptr inbounds %struct.leh_tf_state, %struct.leh_tf_state* %13, i32 0, i32 0, !dbg !8043
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %try_finally_expr8, align 8, !dbg !8043
  %coerce.dive = getelementptr inbounds %union.treemple, %union.treemple* %temp, i32 0, i32 0, !dbg !8044
  %15 = load %union.tree_node**, %union.tree_node*** %coerce.dive, align 8, !dbg !8044
  call void @record_in_finally_tree(%union.tree_node** %15, %union.gimple_statement_d* %14), !dbg !8044
  br label %if.end, !dbg !8045

if.end:                                           ; preds = %if.then5, %if.then
  br label %if.end9, !dbg !8046

if.end9:                                          ; preds = %if.end, %entry
  %16 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !8047
  ret %union.tree_node* %16, !dbg !8048
}

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gimple_seq_last_stmt(%struct.gimple_seq_d* %s) #0 !dbg !8049 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  %n = alloca %struct.gimple_seq_node_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !8050, metadata !DIExpression()), !dbg !8051
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_node_d** %n, metadata !8052, metadata !DIExpression()), !dbg !8053
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !8054
  %call = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %0), !dbg !8055
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %n, align 8, !dbg !8053
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %n, align 8, !dbg !8056
  %tobool = icmp ne %struct.gimple_seq_node_d* %1, null, !dbg !8057
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8057

cond.true:                                        ; preds = %entry
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %n, align 8, !dbg !8058
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %2, i32 0, i32 0, !dbg !8059
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8059
  br label %cond.end, !dbg !8057

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8057

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.gimple_statement_d* [ %3, %cond.true ], [ null, %cond.false ], !dbg !8057
  ret %union.gimple_statement_d* %cond, !dbg !8060
}

declare dso_local %union.tree_node* @build3_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @sort_case_labels(%struct.VEC_tree_heap*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_switch_vec(%union.tree_node*, %union.tree_node*, %struct.VEC_tree_heap*) #2

declare dso_local %struct.eh_region_d* @gen_eh_region_try(%struct.eh_region_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @emit_eh_dispatch(%struct.gimple_seq_d** %seq, %struct.eh_region_d* %region) #0 !dbg !8061 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d**, align 8
  %region.addr = alloca %struct.eh_region_d*, align 8
  %x = alloca %union.gimple_statement_d*, align 8
  store %struct.gimple_seq_d** %seq, %struct.gimple_seq_d*** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %seq.addr, metadata !8062, metadata !DIExpression()), !dbg !8063
  store %struct.eh_region_d* %region, %struct.eh_region_d** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %region.addr, metadata !8064, metadata !DIExpression()), !dbg !8065
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %x, metadata !8066, metadata !DIExpression()), !dbg !8067
  %0 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !8068
  %index = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %0, i32 0, i32 3, !dbg !8069
  %1 = load i32, i32* %index, align 8, !dbg !8069
  %call = call %union.gimple_statement_d* @gimple_build_eh_dispatch(i32 %1), !dbg !8070
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %x, align 8, !dbg !8067
  %2 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %seq.addr, align 8, !dbg !8071
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !8072
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %2, %union.gimple_statement_d* %3), !dbg !8073
  ret void, !dbg !8074
}

declare dso_local %struct.eh_catch_d* @gen_eh_region_catch(%struct.eh_region_d*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_catch_types(%union.gimple_statement_d* %gs) #0 !dbg !8075 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8076, metadata !DIExpression()), !dbg !8077
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8078
  %gimple_catch = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_catch*, !dbg !8079
  %types = getelementptr inbounds %struct.gimple_statement_catch, %struct.gimple_statement_catch* %gimple_catch, i32 0, i32 1, !dbg !8080
  %1 = load %union.tree_node*, %union.tree_node** %types, align 8, !dbg !8080
  ret %union.tree_node* %1, !dbg !8081
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @frob_into_branch_around(%union.gimple_statement_d* %tp, %struct.eh_region_d* %region, %union.tree_node* %over) #0 !dbg !8082 {
entry:
  %tp.addr = alloca %union.gimple_statement_d*, align 8
  %region.addr = alloca %struct.eh_region_d*, align 8
  %over.addr = alloca %union.tree_node*, align 8
  %x = alloca %union.gimple_statement_d*, align 8
  %cleanup = alloca %struct.gimple_seq_d*, align 8
  %result = alloca %struct.gimple_seq_d*, align 8
  %loc = alloca i32, align 4
  store %union.gimple_statement_d* %tp, %union.gimple_statement_d** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %tp.addr, metadata !8085, metadata !DIExpression()), !dbg !8086
  store %struct.eh_region_d* %region, %struct.eh_region_d** %region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %region.addr, metadata !8087, metadata !DIExpression()), !dbg !8088
  store %union.tree_node* %over, %union.tree_node** %over.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %over.addr, metadata !8089, metadata !DIExpression()), !dbg !8090
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %x, metadata !8091, metadata !DIExpression()), !dbg !8092
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %cleanup, metadata !8093, metadata !DIExpression()), !dbg !8094
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %result, metadata !8095, metadata !DIExpression()), !dbg !8096
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !8097, metadata !DIExpression()), !dbg !8098
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !8099
  %call = call i32 @gimple_location(%union.gimple_statement_d* %0), !dbg !8100
  store i32 %call, i32* %loc, align 4, !dbg !8098
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !8101
  %call1 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %1), !dbg !8102
  store %struct.gimple_seq_d* %call1, %struct.gimple_seq_d** %cleanup, align 8, !dbg !8103
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tp.addr, align 8, !dbg !8104
  %call2 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %2), !dbg !8105
  store %struct.gimple_seq_d* %call2, %struct.gimple_seq_d** %result, align 8, !dbg !8106
  %3 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !8107
  %tobool = icmp ne %struct.eh_region_d* %3, null, !dbg !8107
  br i1 %tobool, label %if.then, label %if.end, !dbg !8109

if.then:                                          ; preds = %entry
  %4 = load %struct.eh_region_d*, %struct.eh_region_d** %region.addr, align 8, !dbg !8110
  call void @emit_post_landing_pad(%struct.gimple_seq_d** @eh_seq, %struct.eh_region_d* %4), !dbg !8111
  br label %if.end, !dbg !8111

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup, align 8, !dbg !8112
  %call3 = call zeroext i8 @gimple_seq_may_fallthru(%struct.gimple_seq_d* %5), !dbg !8114
  %tobool4 = icmp ne i8 %call3, 0, !dbg !8114
  br i1 %tobool4, label %if.then5, label %if.end11, !dbg !8115

if.then5:                                         ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %over.addr, align 8, !dbg !8116
  %tobool6 = icmp ne %union.tree_node* %6, null, !dbg !8116
  br i1 %tobool6, label %if.end9, label %if.then7, !dbg !8119

if.then7:                                         ; preds = %if.then5
  %7 = load i32, i32* %loc, align 4, !dbg !8120
  %call8 = call %union.tree_node* @create_artificial_label(i32 %7), !dbg !8121
  store %union.tree_node* %call8, %union.tree_node** %over.addr, align 8, !dbg !8122
  br label %if.end9, !dbg !8123

if.end9:                                          ; preds = %if.then7, %if.then5
  %8 = load %union.tree_node*, %union.tree_node** %over.addr, align 8, !dbg !8124
  %call10 = call %union.gimple_statement_d* @gimple_build_goto(%union.tree_node* %8), !dbg !8125
  store %union.gimple_statement_d* %call10, %union.gimple_statement_d** %x, align 8, !dbg !8126
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !8127
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %cleanup, %union.gimple_statement_d* %9), !dbg !8128
  br label %if.end11, !dbg !8129

if.end11:                                         ; preds = %if.end9, %if.end
  %10 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cleanup, align 8, !dbg !8130
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** @eh_seq, %struct.gimple_seq_d* %10), !dbg !8131
  %11 = load %union.tree_node*, %union.tree_node** %over.addr, align 8, !dbg !8132
  %tobool12 = icmp ne %union.tree_node* %11, null, !dbg !8132
  br i1 %tobool12, label %if.then13, label %if.end15, !dbg !8134

if.then13:                                        ; preds = %if.end11
  %12 = load %union.tree_node*, %union.tree_node** %over.addr, align 8, !dbg !8135
  %call14 = call %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %12), !dbg !8137
  store %union.gimple_statement_d* %call14, %union.gimple_statement_d** %x, align 8, !dbg !8138
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !8139
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %result, %union.gimple_statement_d* %13), !dbg !8140
  br label %if.end15, !dbg !8141

if.end15:                                         ; preds = %if.then13, %if.end11
  %14 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %result, align 8, !dbg !8142
  ret %struct.gimple_seq_d* %14, !dbg !8143
}

declare dso_local %union.gimple_statement_d* @gimple_build_eh_dispatch(i32) #2

declare dso_local %struct.eh_region_d* @gen_eh_region_allowed(%struct.eh_region_d*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_eh_filter_types(%union.gimple_statement_d* %gs) #0 !dbg !8144 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8145, metadata !DIExpression()), !dbg !8146
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8147
  %gimple_eh_filter = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_eh_filter*, !dbg !8148
  %types = getelementptr inbounds %struct.gimple_statement_eh_filter, %struct.gimple_statement_eh_filter* %gimple_eh_filter, i32 0, i32 1, !dbg !8149
  %1 = load %union.tree_node*, %union.tree_node** %types, align 8, !dbg !8149
  ret %union.tree_node* %1, !dbg !8150
}

declare dso_local %struct.eh_region_d* @gen_eh_region_must_not_throw(%struct.eh_region_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_eh_must_not_throw_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !8151 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8154, metadata !DIExpression()), !dbg !8155
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8156
  %gimple_eh_mnt = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_eh_mnt*, !dbg !8157
  %fndecl = getelementptr inbounds %struct.gimple_statement_eh_mnt, %struct.gimple_statement_eh_mnt* %gimple_eh_mnt, i32 0, i32 1, !dbg !8158
  %1 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !8158
  ret %union.tree_node* %1, !dbg !8159
}

declare dso_local %union.gimple_statement_d* @last_stmt(%struct.basic_block_def*) #2

declare dso_local void @remove_eh_landing_pad(%struct.eh_landing_pad_d*) #2

declare dso_local i32 @gimple_call_flags(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !8160 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8163, metadata !DIExpression()), !dbg !8164
  call void @llvm.dbg.declare(metadata i32* %code, metadata !8165, metadata !DIExpression()), !dbg !8166
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8167
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8168
  store i32 %call, i32* %code, align 4, !dbg !8166
  %1 = load i32, i32* %code, align 4, !dbg !8169
  %cmp = icmp eq i32 %1, 6, !dbg !8171
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8172

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !8173
  %cmp1 = icmp eq i32 %2, 1, !dbg !8174
  br i1 %cmp1, label %if.then, label %if.else, !dbg !8175

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8176
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !8177
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !8178
  %bf.load = load i32, i32* %4, align 8, !dbg !8178
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !8178
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !8179
  br label %return, !dbg !8179

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !8180
  %cmp2 = icmp eq i32 %5, 8, !dbg !8182
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !8183

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !8184
  br label %return, !dbg !8184

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8185
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !8186
  br label %return, !dbg !8186

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !8187
  ret i32 %6, !dbg !8187
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #0 !dbg !8188 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8189, metadata !DIExpression()), !dbg !8190
  call void @llvm.dbg.declare(metadata i32* %code, metadata !8191, metadata !DIExpression()), !dbg !8192
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8193
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8194
  store i32 %call, i32* %code, align 4, !dbg !8192
  %1 = load i32, i32* %code, align 4, !dbg !8195
  %cmp = icmp eq i32 %1, 6, !dbg !8197
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8198

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !8199
  %cmp1 = icmp eq i32 %2, 8, !dbg !8200
  br i1 %cmp1, label %if.then, label %if.else11, !dbg !8201

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !8202, metadata !DIExpression()), !dbg !8204
  %3 = load i32, i32* %code, align 4, !dbg !8205
  %cmp2 = icmp eq i32 %3, 8, !dbg !8207
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !8208

if.then3:                                         ; preds = %if.then
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8209
  %call4 = call %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %4), !dbg !8210
  store %union.tree_node* %call4, %union.tree_node** %type, align 8, !dbg !8211
  br label %if.end, !dbg !8212

if.else:                                          ; preds = %if.then
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8213
  %call5 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !8214
  switch i32 %call5, label %sw.default [
    i32 66, label %sw.bb
  ], !dbg !8215

sw.bb:                                            ; preds = %if.else
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8216
  %call6 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !8216
  %common = bitcast %union.tree_node* %call6 to %struct.tree_common*, !dbg !8216
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8216
  %7 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !8216
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !8218
  br label %sw.epilog, !dbg !8219

sw.default:                                       ; preds = %if.else
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8220
  %call8 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %8), !dbg !8220
  %common9 = bitcast %union.tree_node* %call8 to %struct.tree_common*, !dbg !8220
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !8220
  %9 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !8220
  store %union.tree_node* %9, %union.tree_node** %type, align 8, !dbg !8221
  br label %sw.epilog, !dbg !8222

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %if.then3
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8223
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !8224
  br label %return, !dbg !8224

if.else11:                                        ; preds = %lor.lhs.false
  %11 = load i32, i32* %code, align 4, !dbg !8225
  %cmp12 = icmp eq i32 %11, 1, !dbg !8227
  br i1 %cmp12, label %if.then13, label %if.else14, !dbg !8228

if.then13:                                        ; preds = %if.else11
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !8229
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !8230
  br label %return, !dbg !8230

if.else14:                                        ; preds = %if.else11
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !8231
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !8232
  br label %return, !dbg !8232

return:                                           ; preds = %if.else14, %if.then13, %if.end
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8233
  ret %union.tree_node* %14, !dbg !8233
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !8234 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8235, metadata !DIExpression()), !dbg !8236
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8237
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !8239
  %cmp = icmp uge i32 %call, 3, !dbg !8240
  br i1 %cmp, label %if.then, label %if.else, !dbg !8241

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8242
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !8243
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !8244
  br label %return, !dbg !8244

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8245
  br label %return, !dbg !8245

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8246
  ret %union.tree_node* %2, !dbg !8246
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %gs) #0 !dbg !8247 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %fn = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8248, metadata !DIExpression()), !dbg !8249
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !8250, metadata !DIExpression()), !dbg !8251
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8252
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !8253
  store %union.tree_node* %call, %union.tree_node** %fn, align 8, !dbg !8251
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !8254, metadata !DIExpression()), !dbg !8255
  %1 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !8256
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !8256
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8256
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !8256
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !8255
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8257
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !8257
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !8257
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !8257
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !8258
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8259
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !8259
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !8259
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !8259
  ret %union.tree_node* %6, !dbg !8260
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !8261 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8262, metadata !DIExpression()), !dbg !8263
  call void @llvm.dbg.declare(metadata i32* %code, metadata !8264, metadata !DIExpression()), !dbg !8265
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8266
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !8267
  store i32 %call, i32* %code, align 4, !dbg !8268
  %1 = load i32, i32* %code, align 4, !dbg !8269
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !8271
  %cmp = icmp eq i32 %call1, 3, !dbg !8272
  br i1 %cmp, label %if.then, label %if.end, !dbg !8273

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8274
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !8274
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !8274
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !8274
  %bf.load = load i64, i64* %3, align 8, !dbg !8274
  %bf.clear = and i64 %bf.load, 65535, !dbg !8274
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8274
  store i32 %bf.cast, i32* %code, align 4, !dbg !8275
  br label %if.end, !dbg !8276

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !8277
  ret i32 %4, !dbg !8278
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !8279 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8280, metadata !DIExpression()), !dbg !8281
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8282
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !8283
  ret %union.tree_node* %call, !dbg !8284
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !8285 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !8288, metadata !DIExpression()), !dbg !8289
  %0 = load i32, i32* %code.addr, align 4, !dbg !8290
  %idxprom = sext i32 %0 to i64, !dbg !8291
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !8291
  %1 = load i8, i8* %arrayidx, align 1, !dbg !8291
  %conv = zext i8 %1 to i32, !dbg !8292
  ret i32 %conv, !dbg !8293
}

; Function Attrs: noinline nounwind uwtable
define internal void @refactor_eh_r(%struct.gimple_seq_d* %seq) #0 !dbg !8294 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %one = alloca %union.gimple_statement_d*, align 8
  %two = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !8297, metadata !DIExpression()), !dbg !8298
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !8299, metadata !DIExpression()), !dbg !8300
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %one, metadata !8301, metadata !DIExpression()), !dbg !8302
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %two, metadata !8303, metadata !DIExpression()), !dbg !8304
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %one, align 8, !dbg !8305
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %two, align 8, !dbg !8306
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !8307
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %0), !dbg !8308
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !8308
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !8308
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !8308
  br label %while.body, !dbg !8309

while.body:                                       ; preds = %entry, %if.end30
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %two, align 8, !dbg !8310
  store %union.gimple_statement_d* %3, %union.gimple_statement_d** %one, align 8, !dbg !8312
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !8313
  %tobool = icmp ne i8 %call, 0, !dbg !8313
  br i1 %tobool, label %if.then, label %if.else, !dbg !8315

if.then:                                          ; preds = %while.body
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %two, align 8, !dbg !8316
  br label %if.end, !dbg !8317

if.else:                                          ; preds = %while.body
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !8318
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %two, align 8, !dbg !8319
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %one, align 8, !dbg !8320
  %tobool2 = icmp ne %union.gimple_statement_d* %4, null, !dbg !8320
  br i1 %tobool2, label %land.lhs.true, label %if.end16, !dbg !8322

land.lhs.true:                                    ; preds = %if.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %two, align 8, !dbg !8323
  %tobool3 = icmp ne %union.gimple_statement_d* %5, null, !dbg !8323
  br i1 %tobool3, label %land.lhs.true4, label %if.end16, !dbg !8324

land.lhs.true4:                                   ; preds = %land.lhs.true
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %one, align 8, !dbg !8325
  %call5 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !8326
  %cmp = icmp eq i32 %call5, 17, !dbg !8327
  br i1 %cmp, label %land.lhs.true6, label %if.end16, !dbg !8328

land.lhs.true6:                                   ; preds = %land.lhs.true4
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %two, align 8, !dbg !8329
  %call7 = call i32 @gimple_code(%union.gimple_statement_d* %7), !dbg !8330
  %cmp8 = icmp eq i32 %call7, 17, !dbg !8331
  br i1 %cmp8, label %land.lhs.true9, label %if.end16, !dbg !8332

land.lhs.true9:                                   ; preds = %land.lhs.true6
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %one, align 8, !dbg !8333
  %call10 = call i32 @gimple_try_kind(%union.gimple_statement_d* %8), !dbg !8334
  %cmp11 = icmp eq i32 %call10, 2, !dbg !8335
  br i1 %cmp11, label %land.lhs.true12, label %if.end16, !dbg !8336

land.lhs.true12:                                  ; preds = %land.lhs.true9
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %two, align 8, !dbg !8337
  %call13 = call i32 @gimple_try_kind(%union.gimple_statement_d* %9), !dbg !8338
  %cmp14 = icmp eq i32 %call13, 2, !dbg !8339
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !8340

if.then15:                                        ; preds = %land.lhs.true12
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %one, align 8, !dbg !8341
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %two, align 8, !dbg !8342
  call void @optimize_double_finally(%union.gimple_statement_d* %10, %union.gimple_statement_d* %11), !dbg !8343
  br label %if.end16, !dbg !8343

if.end16:                                         ; preds = %if.then15, %land.lhs.true12, %land.lhs.true9, %land.lhs.true6, %land.lhs.true4, %land.lhs.true, %if.end
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %one, align 8, !dbg !8344
  %tobool17 = icmp ne %union.gimple_statement_d* %12, null, !dbg !8344
  br i1 %tobool17, label %if.then18, label %if.end26, !dbg !8346

if.then18:                                        ; preds = %if.end16
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %one, align 8, !dbg !8347
  %call19 = call i32 @gimple_code(%union.gimple_statement_d* %13), !dbg !8348
  switch i32 %call19, label %sw.default [
    i32 17, label %sw.bb
    i32 11, label %sw.bb22
    i32 12, label %sw.bb24
  ], !dbg !8349

sw.bb:                                            ; preds = %if.then18
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %one, align 8, !dbg !8350
  %call20 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %14), !dbg !8352
  call void @refactor_eh_r(%struct.gimple_seq_d* %call20), !dbg !8353
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %one, align 8, !dbg !8354
  %call21 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %15), !dbg !8355
  call void @refactor_eh_r(%struct.gimple_seq_d* %call21), !dbg !8356
  br label %sw.epilog, !dbg !8357

sw.bb22:                                          ; preds = %if.then18
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %one, align 8, !dbg !8358
  %call23 = call %struct.gimple_seq_d* @gimple_catch_handler(%union.gimple_statement_d* %16), !dbg !8359
  call void @refactor_eh_r(%struct.gimple_seq_d* %call23), !dbg !8360
  br label %sw.epilog, !dbg !8361

sw.bb24:                                          ; preds = %if.then18
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %one, align 8, !dbg !8362
  %call25 = call %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %17), !dbg !8363
  call void @refactor_eh_r(%struct.gimple_seq_d* %call25), !dbg !8364
  br label %sw.epilog, !dbg !8365

sw.default:                                       ; preds = %if.then18
  br label %sw.epilog, !dbg !8366

sw.epilog:                                        ; preds = %sw.default, %sw.bb24, %sw.bb22, %sw.bb
  br label %if.end26, !dbg !8367

if.end26:                                         ; preds = %sw.epilog, %if.end16
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %two, align 8, !dbg !8368
  %tobool27 = icmp ne %union.gimple_statement_d* %18, null, !dbg !8368
  br i1 %tobool27, label %if.then28, label %if.else29, !dbg !8370

if.then28:                                        ; preds = %if.end26
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !8371
  br label %if.end30, !dbg !8371

if.else29:                                        ; preds = %if.end26
  br label %while.end, !dbg !8372

if.end30:                                         ; preds = %if.then28
  br label %while.body, !dbg !8309, !llvm.loop !8373

while.end:                                        ; preds = %if.else29
  ret void, !dbg !8375
}

; Function Attrs: noinline nounwind uwtable
define internal void @optimize_double_finally(%union.gimple_statement_d* %one, %union.gimple_statement_d* %two) #0 !dbg !8376 {
entry:
  %one.addr = alloca %union.gimple_statement_d*, align 8
  %two.addr = alloca %union.gimple_statement_d*, align 8
  %oneh = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %union.gimple_statement_d* %one, %union.gimple_statement_d** %one.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %one.addr, metadata !8377, metadata !DIExpression()), !dbg !8378
  store %union.gimple_statement_d* %two, %union.gimple_statement_d** %two.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %two.addr, metadata !8379, metadata !DIExpression()), !dbg !8380
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %oneh, metadata !8381, metadata !DIExpression()), !dbg !8382
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !8383, metadata !DIExpression()), !dbg !8384
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %one.addr, align 8, !dbg !8385
  %call = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %0), !dbg !8386
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %call), !dbg !8387
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !8387
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !8387
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !8387
  %call1 = call zeroext i8 @gsi_one_before_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !8388
  %tobool = icmp ne i8 %call1, 0, !dbg !8388
  br i1 %tobool, label %if.end, label %if.then, !dbg !8390

if.then:                                          ; preds = %entry
  br label %if.end16, !dbg !8391

if.end:                                           ; preds = %entry
  %call2 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !8392
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %oneh, align 8, !dbg !8393
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %oneh, align 8, !dbg !8394
  %call3 = call i32 @gimple_code(%union.gimple_statement_d* %3), !dbg !8396
  %cmp = icmp ne i32 %call3, 17, !dbg !8397
  br i1 %cmp, label %if.then6, label %lor.lhs.false, !dbg !8398

lor.lhs.false:                                    ; preds = %if.end
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %oneh, align 8, !dbg !8399
  %call4 = call i32 @gimple_try_kind(%union.gimple_statement_d* %4), !dbg !8400
  %cmp5 = icmp ne i32 %call4, 1, !dbg !8401
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !8402

if.then6:                                         ; preds = %lor.lhs.false, %if.end
  br label %if.end16, !dbg !8403

if.end7:                                          ; preds = %lor.lhs.false
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %oneh, align 8, !dbg !8404
  %call8 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %5), !dbg !8406
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %two.addr, align 8, !dbg !8407
  %call9 = call %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %6), !dbg !8408
  %call10 = call zeroext i8 @same_handler_p(%struct.gimple_seq_d* %call8, %struct.gimple_seq_d* %call9), !dbg !8409
  %tobool11 = icmp ne i8 %call10, 0, !dbg !8409
  br i1 %tobool11, label %if.then12, label %if.end16, !dbg !8410

if.then12:                                        ; preds = %if.end7
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !8411, metadata !DIExpression()), !dbg !8413
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %oneh, align 8, !dbg !8414
  %call13 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %7), !dbg !8415
  store %struct.gimple_seq_d* %call13, %struct.gimple_seq_d** %seq, align 8, !dbg !8413
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %one.addr, align 8, !dbg !8416
  %9 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !8417
  call void @gimple_try_set_cleanup(%union.gimple_statement_d* %8, %struct.gimple_seq_d* %9), !dbg !8418
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %one.addr, align 8, !dbg !8419
  call void @gimple_try_set_kind(%union.gimple_statement_d* %10, i32 1), !dbg !8420
  %11 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !8421
  %call14 = call %struct.gimple_seq_d* @copy_gimple_seq_and_replace_locals(%struct.gimple_seq_d* %11), !dbg !8422
  store %struct.gimple_seq_d* %call14, %struct.gimple_seq_d** %seq, align 8, !dbg !8423
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %two.addr, align 8, !dbg !8424
  %call15 = call %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %12), !dbg !8425
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %seq, %struct.gimple_seq_d* %call15), !dbg !8426
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %two.addr, align 8, !dbg !8427
  %14 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !8428
  call void @gimple_try_set_eval(%union.gimple_statement_d* %13, %struct.gimple_seq_d* %14), !dbg !8429
  br label %if.end16, !dbg !8430

if.end16:                                         ; preds = %if.then, %if.then6, %if.then12, %if.end7
  ret void, !dbg !8431
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_one_before_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !8432 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !8433, metadata !DIExpression()), !dbg !8434
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !8435
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !8435
  %cmp = icmp ne %struct.gimple_seq_node_d* %0, null, !dbg !8436
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !8437

land.rhs:                                         ; preds = %entry
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !8438
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !8438
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !8439
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !8439
  %cmp2 = icmp eq %struct.gimple_seq_node_d* %2, null, !dbg !8440
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !8441
  %land.ext = zext i1 %3 to i32, !dbg !8437
  %conv = trunc i32 %land.ext to i8, !dbg !8442
  ret i8 %conv, !dbg !8443
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @same_handler_p(%struct.gimple_seq_d* %oneh, %struct.gimple_seq_d* %twoh) #0 !dbg !8444 {
entry:
  %retval = alloca i8, align 1
  %oneh.addr = alloca %struct.gimple_seq_d*, align 8
  %twoh.addr = alloca %struct.gimple_seq_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %ones = alloca %union.gimple_statement_d*, align 8
  %twos = alloca %union.gimple_statement_d*, align 8
  %ai = alloca i32, align 4
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp2 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.gimple_seq_d* %oneh, %struct.gimple_seq_d** %oneh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %oneh.addr, metadata !8447, metadata !DIExpression()), !dbg !8448
  store %struct.gimple_seq_d* %twoh, %struct.gimple_seq_d** %twoh.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %twoh.addr, metadata !8449, metadata !DIExpression()), !dbg !8450
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !8451, metadata !DIExpression()), !dbg !8452
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %ones, metadata !8453, metadata !DIExpression()), !dbg !8454
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %twos, metadata !8455, metadata !DIExpression()), !dbg !8456
  call void @llvm.dbg.declare(metadata i32* %ai, metadata !8457, metadata !DIExpression()), !dbg !8458
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %oneh.addr, align 8, !dbg !8459
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %0), !dbg !8460
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !8460
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !8460
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !8460
  %call = call zeroext i8 @gsi_one_before_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !8461
  %tobool = icmp ne i8 %call, 0, !dbg !8461
  br i1 %tobool, label %if.end, label %if.then, !dbg !8463

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !8464
  br label %return, !dbg !8464

if.end:                                           ; preds = %entry
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !8465
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %ones, align 8, !dbg !8466
  %3 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %twoh.addr, align 8, !dbg !8467
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp2, %struct.gimple_seq_d* %3), !dbg !8468
  %4 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !8468
  %5 = bitcast %struct.gimple_stmt_iterator* %tmp2 to i8*, !dbg !8468
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !8468
  %call3 = call zeroext i8 @gsi_one_before_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !8469
  %tobool4 = icmp ne i8 %call3, 0, !dbg !8469
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !8471

if.then5:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !8472
  br label %return, !dbg !8472

if.end6:                                          ; preds = %if.end
  %call7 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !8473
  store %union.gimple_statement_d* %call7, %union.gimple_statement_d** %twos, align 8, !dbg !8474
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ones, align 8, !dbg !8475
  %call8 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %6), !dbg !8477
  %tobool9 = icmp ne i8 %call8, 0, !dbg !8477
  br i1 %tobool9, label %lor.lhs.false, label %if.then32, !dbg !8478

lor.lhs.false:                                    ; preds = %if.end6
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %twos, align 8, !dbg !8479
  %call10 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %7), !dbg !8480
  %tobool11 = icmp ne i8 %call10, 0, !dbg !8480
  br i1 %tobool11, label %lor.lhs.false12, label %if.then32, !dbg !8481

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ones, align 8, !dbg !8482
  %call13 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %8), !dbg !8483
  %tobool14 = icmp ne %union.tree_node* %call13, null, !dbg !8483
  br i1 %tobool14, label %if.then32, label %lor.lhs.false15, !dbg !8484

lor.lhs.false15:                                  ; preds = %lor.lhs.false12
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %twos, align 8, !dbg !8485
  %call16 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %9), !dbg !8486
  %tobool17 = icmp ne %union.tree_node* %call16, null, !dbg !8486
  br i1 %tobool17, label %if.then32, label %lor.lhs.false18, !dbg !8487

lor.lhs.false18:                                  ; preds = %lor.lhs.false15
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ones, align 8, !dbg !8488
  %call19 = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %10), !dbg !8489
  %tobool20 = icmp ne %union.tree_node* %call19, null, !dbg !8489
  br i1 %tobool20, label %if.then32, label %lor.lhs.false21, !dbg !8490

lor.lhs.false21:                                  ; preds = %lor.lhs.false18
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %twos, align 8, !dbg !8491
  %call22 = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %11), !dbg !8492
  %tobool23 = icmp ne %union.tree_node* %call22, null, !dbg !8492
  br i1 %tobool23, label %if.then32, label %lor.lhs.false24, !dbg !8493

lor.lhs.false24:                                  ; preds = %lor.lhs.false21
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ones, align 8, !dbg !8494
  %call25 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %12), !dbg !8495
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %twos, align 8, !dbg !8496
  %call26 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %13), !dbg !8497
  %call27 = call i32 @operand_equal_p(%union.tree_node* %call25, %union.tree_node* %call26, i32 0), !dbg !8498
  %tobool28 = icmp ne i32 %call27, 0, !dbg !8498
  br i1 %tobool28, label %lor.lhs.false29, label %if.then32, !dbg !8499

lor.lhs.false29:                                  ; preds = %lor.lhs.false24
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ones, align 8, !dbg !8500
  %call30 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %14), !dbg !8501
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %twos, align 8, !dbg !8502
  %call31 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %15), !dbg !8503
  %cmp = icmp ne i32 %call30, %call31, !dbg !8504
  br i1 %cmp, label %if.then32, label %if.end33, !dbg !8505

if.then32:                                        ; preds = %lor.lhs.false29, %lor.lhs.false24, %lor.lhs.false21, %lor.lhs.false18, %lor.lhs.false15, %lor.lhs.false12, %lor.lhs.false, %if.end6
  store i8 0, i8* %retval, align 1, !dbg !8506
  br label %return, !dbg !8506

if.end33:                                         ; preds = %lor.lhs.false29
  store i32 0, i32* %ai, align 4, !dbg !8507
  br label %for.cond, !dbg !8509

for.cond:                                         ; preds = %for.inc, %if.end33
  %16 = load i32, i32* %ai, align 4, !dbg !8510
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ones, align 8, !dbg !8512
  %call34 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %17), !dbg !8513
  %cmp35 = icmp ult i32 %16, %call34, !dbg !8514
  br i1 %cmp35, label %for.body, label %for.end, !dbg !8515

for.body:                                         ; preds = %for.cond
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ones, align 8, !dbg !8516
  %19 = load i32, i32* %ai, align 4, !dbg !8518
  %call36 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %18, i32 %19), !dbg !8519
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %twos, align 8, !dbg !8520
  %21 = load i32, i32* %ai, align 4, !dbg !8521
  %call37 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %20, i32 %21), !dbg !8522
  %call38 = call i32 @operand_equal_p(%union.tree_node* %call36, %union.tree_node* %call37, i32 0), !dbg !8523
  %tobool39 = icmp ne i32 %call38, 0, !dbg !8523
  br i1 %tobool39, label %if.end41, label %if.then40, !dbg !8524

if.then40:                                        ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !8525
  br label %return, !dbg !8525

if.end41:                                         ; preds = %for.body
  br label %for.inc, !dbg !8526

for.inc:                                          ; preds = %if.end41
  %22 = load i32, i32* %ai, align 4, !dbg !8527
  %inc = add i32 %22, 1, !dbg !8527
  store i32 %inc, i32* %ai, align 4, !dbg !8527
  br label %for.cond, !dbg !8528, !llvm.loop !8529

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !8531
  br label %return, !dbg !8531

return:                                           ; preds = %for.end, %if.then40, %if.then32, %if.then5, %if.then
  %23 = load i8, i8* %retval, align 1, !dbg !8532
  ret i8 %23, !dbg !8532
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_try_set_kind(%union.gimple_statement_d* %gs, i32 %kind) #0 !dbg !8533 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %kind.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8536, metadata !DIExpression()), !dbg !8537
  store i32 %kind, i32* %kind.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %kind.addr, metadata !8538, metadata !DIExpression()), !dbg !8539
  %0 = load i32, i32* %kind.addr, align 4, !dbg !8540
  %cmp = icmp eq i32 %0, 1, !dbg !8540
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !8540

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %kind.addr, align 4, !dbg !8540
  %cmp1 = icmp eq i32 %1, 2, !dbg !8540
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !8540

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 2934, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8540
  br label %cond.end, !dbg !8540

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !8540

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8540
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8541
  %call = call i32 @gimple_try_kind(%union.gimple_statement_d* %2), !dbg !8543
  %3 = load i32, i32* %kind.addr, align 4, !dbg !8544
  %cmp2 = icmp ne i32 %call, %3, !dbg !8545
  br i1 %cmp2, label %if.then, label %if.end, !dbg !8546

if.then:                                          ; preds = %cond.end
  %4 = load i32, i32* %kind.addr, align 4, !dbg !8547
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8548
  %gsbase = bitcast %union.gimple_statement_d* %5 to %struct.gimple_statement_base*, !dbg !8549
  %6 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !8550
  %bf.load = load i32, i32* %6, align 8, !dbg !8551
  %bf.value = and i32 %4, 65535, !dbg !8551
  %bf.shl = shl i32 %bf.value, 16, !dbg !8551
  %bf.clear = and i32 %bf.load, 65535, !dbg !8551
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !8551
  store i32 %bf.set, i32* %6, align 8, !dbg !8551
  br label %if.end, !dbg !8548

if.end:                                           ; preds = %if.then, %cond.end
  ret void, !dbg !8552
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_try_set_eval(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %eval) #0 !dbg !8553 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %eval.addr = alloca %struct.gimple_seq_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8554, metadata !DIExpression()), !dbg !8555
  store %struct.gimple_seq_d* %eval, %struct.gimple_seq_d** %eval.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %eval.addr, metadata !8556, metadata !DIExpression()), !dbg !8557
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %eval.addr, align 8, !dbg !8558
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8559
  %gimple_try = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_try*, !dbg !8560
  %eval1 = getelementptr inbounds %struct.gimple_statement_try, %struct.gimple_statement_try* %gimple_try, i32 0, i32 1, !dbg !8561
  store %struct.gimple_seq_d* %0, %struct.gimple_seq_d** %eval1, align 8, !dbg !8562
  ret void, !dbg !8563
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %gs) #0 !dbg !8564 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8565, metadata !DIExpression()), !dbg !8566
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8567
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 2), !dbg !8568
  ret %union.tree_node* %call, !dbg !8569
}

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !8570 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8571, metadata !DIExpression()), !dbg !8572
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !8573, metadata !DIExpression()), !dbg !8574
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8575
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !8576
  store i32 %call, i32* %num_ops, align 4, !dbg !8577
  %1 = load i32, i32* %num_ops, align 4, !dbg !8578
  %sub = sub i32 %1, 3, !dbg !8579
  ret i32 %sub, !dbg !8580
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !8581 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8582, metadata !DIExpression()), !dbg !8583
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !8584, metadata !DIExpression()), !dbg !8585
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8586
  %1 = load i32, i32* %index.addr, align 4, !dbg !8587
  %add = add i32 %1, 3, !dbg !8588
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !8589
  ret %union.tree_node* %call, !dbg !8590
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_resx(%union.gimple_statement_d* %gs) #0 !dbg !8591 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8592, metadata !DIExpression()), !dbg !8593
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8594
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8595
  %cmp = icmp eq i32 %call, 14, !dbg !8596
  %conv = zext i1 %cmp to i32, !dbg !8596
  %conv1 = trunc i32 %conv to i8, !dbg !8595
  ret i8 %conv1, !dbg !8597
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @lower_resx(%struct.basic_block_def* %bb, %union.gimple_statement_d* %stmt, %struct.pointer_map_t* %mnt_map) #0 !dbg !8598 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %mnt_map.addr = alloca %struct.pointer_map_t*, align 8
  %lp_nr = alloca i32, align 4
  %src_r = alloca %struct.eh_region_d*, align 8
  %dst_r = alloca %struct.eh_region_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %x = alloca %union.gimple_statement_d*, align 8
  %fn = alloca %union.tree_node*, align 8
  %src_nr = alloca %union.tree_node*, align 8
  %ret = alloca i8, align 1
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %slot = alloca i8**, align 8
  %lab = alloca %union.tree_node*, align 8
  %gsi2 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp34 = alloca %struct.gimple_stmt_iterator, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %dst_nr = alloca %union.tree_node*, align 8
  %tmp73 = alloca %struct.edge_iterator, align 8
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %var = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8601, metadata !DIExpression()), !dbg !8602
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8603, metadata !DIExpression()), !dbg !8604
  store %struct.pointer_map_t* %mnt_map, %struct.pointer_map_t** %mnt_map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t** %mnt_map.addr, metadata !8605, metadata !DIExpression()), !dbg !8606
  call void @llvm.dbg.declare(metadata i32* %lp_nr, metadata !8607, metadata !DIExpression()), !dbg !8608
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %src_r, metadata !8609, metadata !DIExpression()), !dbg !8610
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %dst_r, metadata !8611, metadata !DIExpression()), !dbg !8612
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !8613, metadata !DIExpression()), !dbg !8614
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %x, metadata !8615, metadata !DIExpression()), !dbg !8616
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !8617, metadata !DIExpression()), !dbg !8618
  call void @llvm.dbg.declare(metadata %union.tree_node** %src_nr, metadata !8619, metadata !DIExpression()), !dbg !8620
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !8621, metadata !DIExpression()), !dbg !8622
  store i8 0, i8* %ret, align 1, !dbg !8622
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8623
  %call = call i32 @lookup_stmt_eh_lp(%union.gimple_statement_d* %0), !dbg !8624
  store i32 %call, i32* %lp_nr, align 4, !dbg !8625
  %1 = load i32, i32* %lp_nr, align 4, !dbg !8626
  %cmp = icmp ne i32 %1, 0, !dbg !8628
  br i1 %cmp, label %if.then, label %if.else, !dbg !8629

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %lp_nr, align 4, !dbg !8630
  %call1 = call %struct.eh_region_d* @get_eh_region_from_lp_number(i32 %2), !dbg !8631
  store %struct.eh_region_d* %call1, %struct.eh_region_d** %dst_r, align 8, !dbg !8632
  br label %if.end, !dbg !8633

if.else:                                          ; preds = %entry
  store %struct.eh_region_d* null, %struct.eh_region_d** %dst_r, align 8, !dbg !8634
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8635
  %call2 = call i32 @gimple_resx_region(%union.gimple_statement_d* %3), !dbg !8636
  %call3 = call %struct.eh_region_d* @get_eh_region_from_number(i32 %call2), !dbg !8637
  store %struct.eh_region_d* %call3, %struct.eh_region_d** %src_r, align 8, !dbg !8638
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8639
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %4), !dbg !8640
  %5 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !8640
  %6 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !8640
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 24, i1 false), !dbg !8640
  %7 = load %struct.eh_region_d*, %struct.eh_region_d** %src_r, align 8, !dbg !8641
  %cmp4 = icmp eq %struct.eh_region_d* %7, null, !dbg !8643
  br i1 %cmp4, label %if.then5, label %if.else19, !dbg !8644

if.then5:                                         ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 509), align 8, !dbg !8645
  store %union.tree_node* %8, %union.tree_node** %fn, align 8, !dbg !8647
  %9 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !8648
  %call6 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %9, i32 0), !dbg !8649
  store %union.gimple_statement_d* %call6, %union.gimple_statement_d** %x, align 8, !dbg !8650
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !8651
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %10, i32 1), !dbg !8652
  br label %while.cond, !dbg !8653

while.cond:                                       ; preds = %cond.end16, %if.then5
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8654
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 1, !dbg !8654
  %12 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !8654
  %tobool = icmp ne %struct.VEC_edge_gc* %12, null, !dbg !8654
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8654

cond.true:                                        ; preds = %while.cond
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8654
  %succs7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 1, !dbg !8654
  %14 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs7, align 8, !dbg !8654
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %14, i32 0, i32 0, !dbg !8654
  br label %cond.end, !dbg !8654

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !8654

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8654
  %call8 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !8654
  %cmp9 = icmp ugt i32 %call8, 0, !dbg !8655
  br i1 %cmp9, label %while.body, label %while.end, !dbg !8653

while.body:                                       ; preds = %cond.end
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8656
  %succs10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 1, !dbg !8656
  %16 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs10, align 8, !dbg !8656
  %tobool11 = icmp ne %struct.VEC_edge_gc* %16, null, !dbg !8656
  br i1 %tobool11, label %cond.true12, label %cond.false15, !dbg !8656

cond.true12:                                      ; preds = %while.body
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8656
  %succs13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 1, !dbg !8656
  %18 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs13, align 8, !dbg !8656
  %base14 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %18, i32 0, i32 0, !dbg !8656
  br label %cond.end16, !dbg !8656

cond.false15:                                     ; preds = %while.body
  br label %cond.end16, !dbg !8656

cond.end16:                                       ; preds = %cond.false15, %cond.true12
  %cond17 = phi %struct.VEC_edge_base* [ %base14, %cond.true12 ], [ null, %cond.false15 ], !dbg !8656
  %call18 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond17, i32 0), !dbg !8656
  call void @remove_edge(%struct.edge_def* %call18), !dbg !8657
  br label %while.cond, !dbg !8653, !llvm.loop !8658

while.end:                                        ; preds = %cond.end
  br label %if.end117, !dbg !8660

if.else19:                                        ; preds = %if.end
  %19 = load %struct.eh_region_d*, %struct.eh_region_d** %dst_r, align 8, !dbg !8661
  %tobool20 = icmp ne %struct.eh_region_d* %19, null, !dbg !8661
  br i1 %tobool20, label %if.then21, label %if.else88, !dbg !8663

if.then21:                                        ; preds = %if.else19
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !8664, metadata !DIExpression()), !dbg !8666
  %20 = load i32, i32* %lp_nr, align 4, !dbg !8667
  %cmp22 = icmp slt i32 %20, 0, !dbg !8669
  br i1 %cmp22, label %if.then23, label %if.else58, !dbg !8670

if.then23:                                        ; preds = %if.then21
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !8671, metadata !DIExpression()), !dbg !8673
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !8674, metadata !DIExpression()), !dbg !8675
  call void @llvm.dbg.declare(metadata %union.tree_node** %lab, metadata !8676, metadata !DIExpression()), !dbg !8677
  %21 = load %struct.eh_region_d*, %struct.eh_region_d** %dst_r, align 8, !dbg !8678
  %type = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %21, i32 0, i32 4, !dbg !8678
  %22 = load i32, i32* %type, align 4, !dbg !8678
  %cmp24 = icmp eq i32 %22, 3, !dbg !8678
  br i1 %cmp24, label %cond.false26, label %cond.true25, !dbg !8678

cond.true25:                                      ; preds = %if.then23
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 2906, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8678
  br label %cond.end27, !dbg !8678

cond.false26:                                     ; preds = %if.then23
  br label %cond.end27, !dbg !8678

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond28 = phi i32 [ 0, %cond.true25 ], [ 0, %cond.false26 ], !dbg !8678
  %23 = load %struct.pointer_map_t*, %struct.pointer_map_t** %mnt_map.addr, align 8, !dbg !8679
  %24 = load %struct.eh_region_d*, %struct.eh_region_d** %dst_r, align 8, !dbg !8680
  %25 = bitcast %struct.eh_region_d* %24 to i8*, !dbg !8680
  %call29 = call i8** @pointer_map_contains(%struct.pointer_map_t* %23, i8* %25), !dbg !8681
  store i8** %call29, i8*** %slot, align 8, !dbg !8682
  %26 = load i8**, i8*** %slot, align 8, !dbg !8683
  %cmp30 = icmp eq i8** %26, null, !dbg !8685
  br i1 %cmp30, label %if.then31, label %if.else39, !dbg !8686

if.then31:                                        ; preds = %cond.end27
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi2, metadata !8687, metadata !DIExpression()), !dbg !8689
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8690
  %call32 = call %struct.basic_block_def* @create_empty_bb(%struct.basic_block_def* %27), !dbg !8691
  store %struct.basic_block_def* %call32, %struct.basic_block_def** %new_bb, align 8, !dbg !8692
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !8693
  %call33 = call %union.tree_node* @gimple_block_label(%struct.basic_block_def* %28), !dbg !8694
  store %union.tree_node* %call33, %union.tree_node** %lab, align 8, !dbg !8695
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !8696
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp34, %struct.basic_block_def* %29), !dbg !8697
  %30 = bitcast %struct.gimple_stmt_iterator* %gsi2 to i8*, !dbg !8697
  %31 = bitcast %struct.gimple_stmt_iterator* %tmp34 to i8*, !dbg !8697
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 24, i1 false), !dbg !8697
  %32 = load %struct.eh_region_d*, %struct.eh_region_d** %dst_r, align 8, !dbg !8698
  %u = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %32, i32 0, i32 5, !dbg !8699
  %must_not_throw = bitcast %union.eh_region_u* %u to %struct.eh_region_u_must_not_throw*, !dbg !8700
  %failure_decl = getelementptr inbounds %struct.eh_region_u_must_not_throw, %struct.eh_region_u_must_not_throw* %must_not_throw, i32 0, i32 0, !dbg !8701
  %33 = load %union.tree_node*, %union.tree_node** %failure_decl, align 8, !dbg !8701
  store %union.tree_node* %33, %union.tree_node** %fn, align 8, !dbg !8702
  %34 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !8703
  %call35 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %34, i32 0), !dbg !8704
  store %union.gimple_statement_d* %call35, %union.gimple_statement_d** %x, align 8, !dbg !8705
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !8706
  %36 = load %struct.eh_region_d*, %struct.eh_region_d** %dst_r, align 8, !dbg !8707
  %u36 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %36, i32 0, i32 5, !dbg !8708
  %must_not_throw37 = bitcast %union.eh_region_u* %u36 to %struct.eh_region_u_must_not_throw*, !dbg !8709
  %failure_loc = getelementptr inbounds %struct.eh_region_u_must_not_throw, %struct.eh_region_u_must_not_throw* %must_not_throw37, i32 0, i32 1, !dbg !8710
  %37 = load i32, i32* %failure_loc, align 8, !dbg !8710
  call void @gimple_set_location(%union.gimple_statement_d* %35, i32 %37), !dbg !8711
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !8712
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi2, %union.gimple_statement_d* %38, i32 2), !dbg !8713
  %39 = load %struct.pointer_map_t*, %struct.pointer_map_t** %mnt_map.addr, align 8, !dbg !8714
  %40 = load %struct.eh_region_d*, %struct.eh_region_d** %dst_r, align 8, !dbg !8715
  %41 = bitcast %struct.eh_region_d* %40 to i8*, !dbg !8715
  %call38 = call i8** @pointer_map_insert(%struct.pointer_map_t* %39, i8* %41), !dbg !8716
  store i8** %call38, i8*** %slot, align 8, !dbg !8717
  %42 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !8718
  %43 = bitcast %union.tree_node* %42 to i8*, !dbg !8718
  %44 = load i8**, i8*** %slot, align 8, !dbg !8719
  store i8* %43, i8** %44, align 8, !dbg !8720
  br label %if.end41, !dbg !8721

if.else39:                                        ; preds = %cond.end27
  %45 = load i8**, i8*** %slot, align 8, !dbg !8722
  %46 = load i8*, i8** %45, align 8, !dbg !8724
  %47 = bitcast i8* %46 to %union.tree_node*, !dbg !8725
  store %union.tree_node* %47, %union.tree_node** %lab, align 8, !dbg !8726
  %48 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8727
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %48, i64 0, !dbg !8727
  %49 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !8727
  %call40 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr, %union.tree_node* %49), !dbg !8727
  store %struct.basic_block_def* %call40, %struct.basic_block_def** %new_bb, align 8, !dbg !8728
  br label %if.end41

if.end41:                                         ; preds = %if.else39, %if.then31
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8729
  %succs42 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 1, !dbg !8729
  %51 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs42, align 8, !dbg !8729
  %tobool43 = icmp ne %struct.VEC_edge_gc* %51, null, !dbg !8729
  br i1 %tobool43, label %cond.true44, label %cond.false47, !dbg !8729

cond.true44:                                      ; preds = %if.end41
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8729
  %succs45 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %52, i32 0, i32 1, !dbg !8729
  %53 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs45, align 8, !dbg !8729
  %base46 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %53, i32 0, i32 0, !dbg !8729
  br label %cond.end48, !dbg !8729

cond.false47:                                     ; preds = %if.end41
  br label %cond.end48, !dbg !8729

cond.end48:                                       ; preds = %cond.false47, %cond.true44
  %cond49 = phi %struct.VEC_edge_base* [ %base46, %cond.true44 ], [ null, %cond.false47 ], !dbg !8729
  %call50 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond49), !dbg !8729
  %cmp51 = icmp eq i32 %call50, 0, !dbg !8729
  br i1 %cmp51, label %cond.false53, label %cond.true52, !dbg !8729

cond.true52:                                      ; preds = %cond.end48
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 2931, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8729
  br label %cond.end54, !dbg !8729

cond.false53:                                     ; preds = %cond.end48
  br label %cond.end54, !dbg !8729

cond.end54:                                       ; preds = %cond.false53, %cond.true52
  %cond55 = phi i32 [ 0, %cond.true52 ], [ 0, %cond.false53 ], !dbg !8729
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8730
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !8731
  %call56 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %54, %struct.basic_block_def* %55, i32 1), !dbg !8732
  store %struct.edge_def* %call56, %struct.edge_def** %e, align 8, !dbg !8733
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8734
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %56, i32 0, i32 8, !dbg !8735
  %57 = load i64, i64* %count, align 8, !dbg !8735
  %58 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8736
  %count57 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %58, i32 0, i32 9, !dbg !8737
  store i64 %57, i64* %count57, align 8, !dbg !8738
  %59 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8739
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %59, i32 0, i32 8, !dbg !8740
  store i32 10000, i32* %probability, align 4, !dbg !8741
  br label %if.end87, !dbg !8742

if.else58:                                        ; preds = %if.then21
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !8743, metadata !DIExpression()), !dbg !8745
  call void @llvm.dbg.declare(metadata %union.tree_node** %dst_nr, metadata !8746, metadata !DIExpression()), !dbg !8747
  %60 = load %struct.eh_region_d*, %struct.eh_region_d** %dst_r, align 8, !dbg !8748
  %index = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %60, i32 0, i32 3, !dbg !8749
  %61 = load i32, i32* %index, align 8, !dbg !8749
  %conv = sext i32 %61 to i64, !dbg !8748
  %call59 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv), !dbg !8750
  store %union.tree_node* %call59, %union.tree_node** %dst_nr, align 8, !dbg !8747
  %62 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 554), align 16, !dbg !8751
  store %union.tree_node* %62, %union.tree_node** %fn, align 8, !dbg !8752
  %63 = load %struct.eh_region_d*, %struct.eh_region_d** %src_r, align 8, !dbg !8753
  %index60 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %63, i32 0, i32 3, !dbg !8754
  %64 = load i32, i32* %index60, align 8, !dbg !8754
  %conv61 = sext i32 %64 to i64, !dbg !8753
  %call62 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv61), !dbg !8755
  store %union.tree_node* %call62, %union.tree_node** %src_nr, align 8, !dbg !8756
  %65 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !8757
  %66 = load %union.tree_node*, %union.tree_node** %dst_nr, align 8, !dbg !8758
  %67 = load %union.tree_node*, %union.tree_node** %src_nr, align 8, !dbg !8759
  %call63 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %65, i32 2, %union.tree_node* %66, %union.tree_node* %67), !dbg !8760
  store %union.gimple_statement_d* %call63, %union.gimple_statement_d** %x, align 8, !dbg !8761
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !8762
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %68, i32 1), !dbg !8763
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8764
  %call64 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %69), !dbg !8765
  store %struct.edge_def* %call64, %struct.edge_def** %e, align 8, !dbg !8766
  %70 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8767
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %70, i32 0, i32 7, !dbg !8767
  %71 = load i32, i32* %flags, align 8, !dbg !8767
  %and = and i32 %71, 8, !dbg !8767
  %tobool65 = icmp ne i32 %and, 0, !dbg !8767
  br i1 %tobool65, label %cond.false67, label %cond.true66, !dbg !8767

cond.true66:                                      ; preds = %if.else58
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 2948, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8767
  br label %cond.end68, !dbg !8767

cond.false67:                                     ; preds = %if.else58
  br label %cond.end68, !dbg !8767

cond.end68:                                       ; preds = %cond.false67, %cond.true66
  %cond69 = phi i32 [ 0, %cond.true66 ], [ 0, %cond.false67 ], !dbg !8767
  %72 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8768
  %flags70 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %72, i32 0, i32 7, !dbg !8769
  %73 = load i32, i32* %flags70, align 8, !dbg !8769
  %and71 = and i32 %73, -9, !dbg !8770
  %or = or i32 %and71, 1, !dbg !8771
  %74 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8772
  %flags72 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %74, i32 0, i32 7, !dbg !8773
  store i32 %or, i32* %flags72, align 8, !dbg !8774
  %75 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8775
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %75, i32 0, i32 1, !dbg !8775
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8775
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %76, i32 0, i32 0, !dbg !8775
  %call74 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !8775
  %77 = bitcast %struct.edge_iterator* %tmp73 to { i32, %struct.VEC_edge_gc** }*, !dbg !8775
  %78 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %77, i32 0, i32 0, !dbg !8775
  %79 = extractvalue { i32, %struct.VEC_edge_gc** } %call74, 0, !dbg !8775
  store i32 %79, i32* %78, align 8, !dbg !8775
  %80 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %77, i32 0, i32 1, !dbg !8775
  %81 = extractvalue { i32, %struct.VEC_edge_gc** } %call74, 1, !dbg !8775
  store %struct.VEC_edge_gc** %81, %struct.VEC_edge_gc*** %80, align 8, !dbg !8775
  %82 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !8775
  %83 = bitcast %struct.edge_iterator* %tmp73 to i8*, !dbg !8775
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 16, i1 false), !dbg !8775
  br label %for.cond, !dbg !8775

for.cond:                                         ; preds = %for.inc, %cond.end68
  %84 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !8777
  %85 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %84, i32 0, i32 0, !dbg !8777
  %86 = load i32, i32* %85, align 8, !dbg !8777
  %87 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %84, i32 0, i32 1, !dbg !8777
  %88 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %87, align 8, !dbg !8777
  %call75 = call zeroext i8 @ei_cond(i32 %86, %struct.VEC_edge_gc** %88, %struct.edge_def** %e), !dbg !8777
  %tobool76 = icmp ne i8 %call75, 0, !dbg !8775
  br i1 %tobool76, label %for.body, label %for.end, !dbg !8775

for.body:                                         ; preds = %for.cond
  %89 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8779
  %flags77 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %89, i32 0, i32 7, !dbg !8781
  %90 = load i32, i32* %flags77, align 8, !dbg !8781
  %and78 = and i32 %90, 8, !dbg !8782
  %tobool79 = icmp ne i32 %and78, 0, !dbg !8782
  br i1 %tobool79, label %if.then80, label %if.end81, !dbg !8783

if.then80:                                        ; preds = %for.body
  br label %for.end, !dbg !8784

if.end81:                                         ; preds = %for.body
  br label %for.inc, !dbg !8785

for.inc:                                          ; preds = %if.end81
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !8777
  br label %for.cond, !dbg !8777, !llvm.loop !8786

for.end:                                          ; preds = %if.then80, %for.cond
  %91 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8788
  %cmp82 = icmp eq %struct.edge_def* %91, null, !dbg !8790
  br i1 %cmp82, label %if.then84, label %if.end86, !dbg !8791

if.then84:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !8792, metadata !DIExpression()), !dbg !8794
  %92 = load i32, i32* %lp_nr, align 4, !dbg !8795
  %call85 = call %struct.eh_landing_pad_d* @get_eh_landing_pad_from_number(i32 %92), !dbg !8796
  store %struct.eh_landing_pad_d* %call85, %struct.eh_landing_pad_d** %lp, align 8, !dbg !8794
  %93 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !8797
  call void @remove_eh_landing_pad(%struct.eh_landing_pad_d* %93), !dbg !8798
  br label %if.end86, !dbg !8799

if.end86:                                         ; preds = %if.then84, %for.end
  br label %if.end87

if.end87:                                         ; preds = %if.end86, %cond.end54
  store i8 1, i8* %ret, align 1, !dbg !8800
  br label %if.end116, !dbg !8801

if.else88:                                        ; preds = %if.else19
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !8802, metadata !DIExpression()), !dbg !8804
  %94 = load %struct.eh_region_d*, %struct.eh_region_d** %src_r, align 8, !dbg !8805
  %use_cxa_end_cleanup = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %94, i32 0, i32 9, !dbg !8807
  %95 = load i8, i8* %use_cxa_end_cleanup, align 8, !dbg !8807
  %tobool89 = icmp ne i8 %95, 0, !dbg !8805
  br i1 %tobool89, label %if.then90, label %if.else92, !dbg !8808

if.then90:                                        ; preds = %if.else88
  %96 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 551), align 8, !dbg !8809
  store %union.tree_node* %96, %union.tree_node** %fn, align 8, !dbg !8811
  %97 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !8812
  %call91 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %97, i32 0), !dbg !8813
  store %union.gimple_statement_d* %call91, %union.gimple_statement_d** %x, align 8, !dbg !8814
  %98 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !8815
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %98, i32 1), !dbg !8816
  br label %if.end100, !dbg !8817

if.else92:                                        ; preds = %if.else88
  %99 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 552), align 16, !dbg !8818
  store %union.tree_node* %99, %union.tree_node** %fn, align 8, !dbg !8820
  %100 = load %struct.eh_region_d*, %struct.eh_region_d** %src_r, align 8, !dbg !8821
  %index93 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %100, i32 0, i32 3, !dbg !8822
  %101 = load i32, i32* %index93, align 8, !dbg !8822
  %conv94 = sext i32 %101 to i64, !dbg !8821
  %call95 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv94), !dbg !8823
  store %union.tree_node* %call95, %union.tree_node** %src_nr, align 8, !dbg !8824
  %102 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !8825
  %103 = load %union.tree_node*, %union.tree_node** %src_nr, align 8, !dbg !8826
  %call96 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %102, i32 1, %union.tree_node* %103), !dbg !8827
  store %union.gimple_statement_d* %call96, %union.gimple_statement_d** %x, align 8, !dbg !8828
  %104 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !8829
  %call97 = call %union.tree_node* @create_tmp_var(%union.tree_node* %104, i8* null), !dbg !8830
  store %union.tree_node* %call97, %union.tree_node** %var, align 8, !dbg !8831
  %105 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8832
  %106 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !8833
  %call98 = call %union.tree_node* @make_ssa_name(%union.tree_node* %105, %union.gimple_statement_d* %106), !dbg !8834
  store %union.tree_node* %call98, %union.tree_node** %var, align 8, !dbg !8835
  %107 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !8836
  %108 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8837
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %107, %union.tree_node* %108), !dbg !8838
  %109 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !8839
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %109, i32 1), !dbg !8840
  %110 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 550), align 16, !dbg !8841
  store %union.tree_node* %110, %union.tree_node** %fn, align 8, !dbg !8842
  %111 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !8843
  %112 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8844
  %call99 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %111, i32 1, %union.tree_node* %112), !dbg !8845
  store %union.gimple_statement_d* %call99, %union.gimple_statement_d** %x, align 8, !dbg !8846
  %113 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !8847
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %113, i32 1), !dbg !8848
  br label %if.end100

if.end100:                                        ; preds = %if.else92, %if.then90
  %114 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8849
  %succs101 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %114, i32 0, i32 1, !dbg !8849
  %115 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs101, align 8, !dbg !8849
  %tobool102 = icmp ne %struct.VEC_edge_gc* %115, null, !dbg !8849
  br i1 %tobool102, label %cond.true103, label %cond.false106, !dbg !8849

cond.true103:                                     ; preds = %if.end100
  %116 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8849
  %succs104 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %116, i32 0, i32 1, !dbg !8849
  %117 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs104, align 8, !dbg !8849
  %base105 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %117, i32 0, i32 0, !dbg !8849
  br label %cond.end107, !dbg !8849

cond.false106:                                    ; preds = %if.end100
  br label %cond.end107, !dbg !8849

cond.end107:                                      ; preds = %cond.false106, %cond.true103
  %cond108 = phi %struct.VEC_edge_base* [ %base105, %cond.true103 ], [ null, %cond.false106 ], !dbg !8849
  %call109 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond108), !dbg !8849
  %cmp110 = icmp eq i32 %call109, 0, !dbg !8849
  br i1 %cmp110, label %cond.false113, label %cond.true112, !dbg !8849

cond.true112:                                     ; preds = %cond.end107
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 2995, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8849
  br label %cond.end114, !dbg !8849

cond.false113:                                    ; preds = %cond.end107
  br label %cond.end114, !dbg !8849

cond.end114:                                      ; preds = %cond.false113, %cond.true112
  %cond115 = phi i32 [ 0, %cond.true112 ], [ 0, %cond.false113 ], !dbg !8849
  br label %if.end116

if.end116:                                        ; preds = %cond.end114, %if.end87
  br label %if.end117

if.end117:                                        ; preds = %if.end116, %while.end
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !8850
  %118 = load i8, i8* %ret, align 1, !dbg !8851
  ret i8 %118, !dbg !8852
}

declare dso_local void @free_dominance_info(i32) #2

declare dso_local %struct.eh_region_d* @get_eh_region_from_lp_number(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_resx_region(%union.gimple_statement_d* %gs) #0 !dbg !8853 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8854, metadata !DIExpression()), !dbg !8855
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8856
  %gimple_eh_ctrl = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_eh_ctrl*, !dbg !8857
  %region = getelementptr inbounds %struct.gimple_statement_eh_ctrl, %struct.gimple_statement_eh_ctrl* %gimple_eh_ctrl, i32 0, i32 1, !dbg !8858
  %1 = load i32, i32* %region, align 8, !dbg !8858
  ret i32 %1, !dbg !8859
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !8860 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8863, metadata !DIExpression()), !dbg !8864
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !8865, metadata !DIExpression()), !dbg !8866
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !8867, metadata !DIExpression()), !dbg !8868
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8869
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !8870
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !8871
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !8872
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %1), !dbg !8873
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !8874
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !8875
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !8876
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !8877
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !8878
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8879
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !8880
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !8881
  ret void, !dbg !8882
}

declare dso_local %union.gimple_statement_d* @gimple_build_call(%union.tree_node*, i32, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !8883 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !8888, metadata !DIExpression()), !dbg !8889
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8889
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !8889
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8889

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8889
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !8889
  %2 = load i32, i32* %num, align 8, !dbg !8889
  br label %cond.end, !dbg !8889

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8889

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8889
  ret i32 %cond, !dbg !8889
}

declare dso_local void @remove_edge(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !8890 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !8893, metadata !DIExpression()), !dbg !8894
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8895, metadata !DIExpression()), !dbg !8894
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8894
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !8894
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8894

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8894
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8894
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !8894
  %3 = load i32, i32* %num, align 8, !dbg !8894
  %cmp = icmp ult i32 %1, %3, !dbg !8894
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !8896
  %land.ext = zext i1 %4 to i32, !dbg !8894
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8894
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !8894
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !8894
  %idxprom = zext i32 %6 to i64, !dbg !8894
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !8894
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !8894
  ret %struct.edge_def* %7, !dbg !8894
}

declare dso_local %struct.basic_block_def* @create_empty_bb(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !8897 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8898, metadata !DIExpression()), !dbg !8899
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !8900, metadata !DIExpression()), !dbg !8901
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !8902, metadata !DIExpression()), !dbg !8903
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8904
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !8905
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !8906
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !8907
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !8908
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !8909
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !8910
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !8911
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !8912
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !8913
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8914
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !8915
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !8916
  ret void, !dbg !8917
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !8918 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8924, metadata !DIExpression()), !dbg !8925
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8926
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !8926
  %tobool = icmp ne i8 %call, 0, !dbg !8926
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8926

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8926
  br label %cond.end, !dbg !8926

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8926

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8926
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8927
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !8927
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !8927
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !8927
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !8927

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8927
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !8927
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !8927
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !8927
  br label %cond.end5, !dbg !8927

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !8927

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !8927
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !8927
  ret %struct.edge_def* %call7, !dbg !8928
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !8929 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !8933, metadata !DIExpression()), !dbg !8934
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8935, metadata !DIExpression()), !dbg !8936
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8937
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !8937
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8938
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8939
  %call = call %union.tree_node* @make_ssa_name_fn(%struct.function* %add.ptr, %union.tree_node* %1, %union.gimple_statement_d* %2), !dbg !8940
  ret %union.tree_node* %call, !dbg !8941
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_call_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !8942 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8943, metadata !DIExpression()), !dbg !8944
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !8945, metadata !DIExpression()), !dbg !8946
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8947
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8948
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !8949
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8950
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !8950
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !8952

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8953
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !8953
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !8953
  %bf.load = load i64, i64* %4, align 8, !dbg !8953
  %bf.clear = and i64 %bf.load, 65535, !dbg !8953
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8953
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !8954
  br i1 %cmp, label %if.then, label %if.end, !dbg !8955

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8956
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8957
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !8957
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !8957
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8958
  br label %if.end, !dbg !8957

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !8959
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !8960 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8963, metadata !DIExpression()), !dbg !8964
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8965
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !8966
  %1 = load i32, i32* %flags, align 8, !dbg !8966
  %and = and i32 %1, 512, !dbg !8967
  %tobool = icmp ne i32 %and, 0, !dbg !8967
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !8968

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8969
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !8970
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !8971
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !8971
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !8969
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !8972

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8973
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !8974
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !8975
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !8975
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !8976
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !8976
  br label %cond.end, !dbg !8972

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !8972

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !8972
  ret %struct.gimple_seq_d* %cond, !dbg !8977
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !8978 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8981, metadata !DIExpression()), !dbg !8982
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8983
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !8983
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !8983
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !8983
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8983

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8983
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !8983
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !8983
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !8983
  br label %cond.end, !dbg !8983

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8983

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8983
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !8983
  %cmp = icmp eq i32 %call, 1, !dbg !8984
  %conv = zext i1 %cmp to i32, !dbg !8984
  %conv2 = trunc i32 %conv to i8, !dbg !8983
  ret i8 %conv2, !dbg !8985
}

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #2

declare dso_local void @assign_filter_values() #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @lower_eh_dispatch(%struct.basic_block_def* %src, %union.gimple_statement_d* %stmt) #0 !dbg !8986 {
entry:
  %src.addr = alloca %struct.basic_block_def*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %region_nr = alloca i32, align 4
  %r = alloca %struct.eh_region_d*, align 8
  %filter = alloca %union.tree_node*, align 8
  %fn = alloca %union.tree_node*, align 8
  %x = alloca %union.gimple_statement_d*, align 8
  %redirected = alloca i8, align 1
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %labels = alloca %struct.VEC_tree_heap*, align 8
  %default_label = alloca %union.tree_node*, align 8
  %c = alloca %struct.eh_catch_d*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %seen_values = alloca %struct.pointer_set_t*, align 8
  %tp_node = alloca %union.tree_node*, align 8
  %flt_node = alloca %union.tree_node*, align 8
  %lab = alloca %union.tree_node*, align 8
  %have_label = alloca i8, align 1
  %t = alloca %union.tree_node*, align 8
  %tmp23 = alloca %struct.edge_iterator, align 8
  %b_e = alloca %struct.edge_def*, align 8
  %f_e = alloca %struct.edge_def*, align 8
  store %struct.basic_block_def* %src, %struct.basic_block_def** %src.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %src.addr, metadata !8989, metadata !DIExpression()), !dbg !8990
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8991, metadata !DIExpression()), !dbg !8992
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !8993, metadata !DIExpression()), !dbg !8994
  call void @llvm.dbg.declare(metadata i32* %region_nr, metadata !8995, metadata !DIExpression()), !dbg !8996
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r, metadata !8997, metadata !DIExpression()), !dbg !8998
  call void @llvm.dbg.declare(metadata %union.tree_node** %filter, metadata !8999, metadata !DIExpression()), !dbg !9000
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !9001, metadata !DIExpression()), !dbg !9002
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %x, metadata !9003, metadata !DIExpression()), !dbg !9004
  call void @llvm.dbg.declare(metadata i8* %redirected, metadata !9005, metadata !DIExpression()), !dbg !9006
  store i8 0, i8* %redirected, align 1, !dbg !9006
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9007
  %call = call i32 @gimple_eh_dispatch_region(%union.gimple_statement_d* %0), !dbg !9008
  store i32 %call, i32* %region_nr, align 4, !dbg !9009
  %1 = load i32, i32* %region_nr, align 4, !dbg !9010
  %call1 = call %struct.eh_region_d* @get_eh_region_from_number(i32 %1), !dbg !9011
  store %struct.eh_region_d* %call1, %struct.eh_region_d** %r, align 8, !dbg !9012
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %src.addr, align 8, !dbg !9013
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %2), !dbg !9014
  %3 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !9014
  %4 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !9014
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false), !dbg !9014
  %5 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !9015
  %type = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %5, i32 0, i32 4, !dbg !9016
  %6 = load i32, i32* %type, align 4, !dbg !9016
  switch i32 %6, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb56
  ], !dbg !9017

sw.bb:                                            ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %labels, metadata !9018, metadata !DIExpression()), !dbg !9021
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %labels, align 8, !dbg !9021
  call void @llvm.dbg.declare(metadata %union.tree_node** %default_label, metadata !9022, metadata !DIExpression()), !dbg !9023
  store %union.tree_node* null, %union.tree_node** %default_label, align 8, !dbg !9023
  call void @llvm.dbg.declare(metadata %struct.eh_catch_d** %c, metadata !9024, metadata !DIExpression()), !dbg !9025
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !9026, metadata !DIExpression()), !dbg !9027
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !9028, metadata !DIExpression()), !dbg !9029
  call void @llvm.dbg.declare(metadata %struct.pointer_set_t** %seen_values, metadata !9030, metadata !DIExpression()), !dbg !9033
  %call2 = call %struct.pointer_set_t* @pointer_set_create(), !dbg !9034
  store %struct.pointer_set_t* %call2, %struct.pointer_set_t** %seen_values, align 8, !dbg !9033
  %7 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !9035
  %u = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %7, i32 0, i32 5, !dbg !9037
  %eh_try = bitcast %union.eh_region_u* %u to %struct.eh_region_u_try*, !dbg !9038
  %first_catch = getelementptr inbounds %struct.eh_region_u_try, %struct.eh_region_u_try* %eh_try, i32 0, i32 0, !dbg !9039
  %8 = load %struct.eh_catch_d*, %struct.eh_catch_d** %first_catch, align 8, !dbg !9039
  store %struct.eh_catch_d* %8, %struct.eh_catch_d** %c, align 8, !dbg !9040
  br label %for.cond, !dbg !9041

for.cond:                                         ; preds = %for.inc, %sw.bb
  %9 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !9042
  %tobool = icmp ne %struct.eh_catch_d* %9, null, !dbg !9044
  br i1 %tobool, label %for.body, label %for.end, !dbg !9044

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %tp_node, metadata !9045, metadata !DIExpression()), !dbg !9047
  call void @llvm.dbg.declare(metadata %union.tree_node** %flt_node, metadata !9048, metadata !DIExpression()), !dbg !9049
  call void @llvm.dbg.declare(metadata %union.tree_node** %lab, metadata !9050, metadata !DIExpression()), !dbg !9051
  %10 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !9052
  %label = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %10, i32 0, i32 4, !dbg !9053
  %11 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !9053
  store %union.tree_node* %11, %union.tree_node** %lab, align 8, !dbg !9051
  call void @llvm.dbg.declare(metadata i8* %have_label, metadata !9054, metadata !DIExpression()), !dbg !9055
  store i8 0, i8* %have_label, align 1, !dbg !9055
  %12 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !9056
  %label3 = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %12, i32 0, i32 4, !dbg !9057
  store %union.tree_node* null, %union.tree_node** %label3, align 8, !dbg !9058
  %13 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !9059
  %type_list = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %13, i32 0, i32 2, !dbg !9060
  %14 = load %union.tree_node*, %union.tree_node** %type_list, align 8, !dbg !9060
  store %union.tree_node* %14, %union.tree_node** %tp_node, align 8, !dbg !9061
  %15 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !9062
  %filter_list = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %15, i32 0, i32 3, !dbg !9063
  %16 = load %union.tree_node*, %union.tree_node** %filter_list, align 8, !dbg !9063
  store %union.tree_node* %16, %union.tree_node** %flt_node, align 8, !dbg !9064
  %17 = load %union.tree_node*, %union.tree_node** %tp_node, align 8, !dbg !9065
  %cmp = icmp eq %union.tree_node* %17, null, !dbg !9067
  br i1 %cmp, label %if.then, label %if.end, !dbg !9068

if.then:                                          ; preds = %for.body
  %18 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !9069
  store %union.tree_node* %18, %union.tree_node** %default_label, align 8, !dbg !9071
  br label %for.end, !dbg !9072

if.end:                                           ; preds = %for.body
  br label %do.body, !dbg !9073

do.body:                                          ; preds = %do.cond, %if.end
  %19 = load %struct.pointer_set_t*, %struct.pointer_set_t** %seen_values, align 8, !dbg !9074
  %20 = load %union.tree_node*, %union.tree_node** %flt_node, align 8, !dbg !9077
  %list = bitcast %union.tree_node* %20 to %struct.tree_list*, !dbg !9077
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !9077
  %21 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !9077
  %22 = bitcast %union.tree_node* %21 to i8*, !dbg !9077
  %call4 = call i32 @pointer_set_contains(%struct.pointer_set_t* %19, i8* %22), !dbg !9078
  %tobool5 = icmp ne i32 %call4, 0, !dbg !9078
  br i1 %tobool5, label %if.end14, label %if.then6, !dbg !9079

if.then6:                                         ; preds = %do.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !9080, metadata !DIExpression()), !dbg !9082
  %23 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !9083
  %24 = load %union.tree_node*, %union.tree_node** %flt_node, align 8, !dbg !9083
  %list7 = bitcast %union.tree_node* %24 to %struct.tree_list*, !dbg !9083
  %value8 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list7, i32 0, i32 2, !dbg !9083
  %25 = load %union.tree_node*, %union.tree_node** %value8, align 8, !dbg !9083
  %26 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !9083
  %call9 = call %union.tree_node* @build3_stat(i32 139, %union.tree_node* %23, %union.tree_node* %25, %union.tree_node* null, %union.tree_node* %26), !dbg !9083
  store %union.tree_node* %call9, %union.tree_node** %t, align 8, !dbg !9082
  %27 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9084
  %call10 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %labels, %union.tree_node* %27), !dbg !9084
  %28 = load %struct.pointer_set_t*, %struct.pointer_set_t** %seen_values, align 8, !dbg !9085
  %29 = load %union.tree_node*, %union.tree_node** %flt_node, align 8, !dbg !9086
  %list11 = bitcast %union.tree_node* %29 to %struct.tree_list*, !dbg !9086
  %value12 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list11, i32 0, i32 2, !dbg !9086
  %30 = load %union.tree_node*, %union.tree_node** %value12, align 8, !dbg !9086
  %31 = bitcast %union.tree_node* %30 to i8*, !dbg !9086
  %call13 = call i32 @pointer_set_insert(%struct.pointer_set_t* %28, i8* %31), !dbg !9087
  store i8 1, i8* %have_label, align 1, !dbg !9088
  br label %if.end14, !dbg !9089

if.end14:                                         ; preds = %if.then6, %do.body
  %32 = load %union.tree_node*, %union.tree_node** %tp_node, align 8, !dbg !9090
  %common = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !9090
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !9090
  %33 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !9090
  store %union.tree_node* %33, %union.tree_node** %tp_node, align 8, !dbg !9091
  %34 = load %union.tree_node*, %union.tree_node** %flt_node, align 8, !dbg !9092
  %common15 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !9092
  %chain16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 1, !dbg !9092
  %35 = load %union.tree_node*, %union.tree_node** %chain16, align 8, !dbg !9092
  store %union.tree_node* %35, %union.tree_node** %flt_node, align 8, !dbg !9093
  br label %do.cond, !dbg !9094

do.cond:                                          ; preds = %if.end14
  %36 = load %union.tree_node*, %union.tree_node** %tp_node, align 8, !dbg !9095
  %tobool17 = icmp ne %union.tree_node* %36, null, !dbg !9094
  br i1 %tobool17, label %do.body, label %do.end, !dbg !9094, !llvm.loop !9096

do.end:                                           ; preds = %do.cond
  %37 = load i8, i8* %have_label, align 1, !dbg !9098
  %tobool18 = icmp ne i8 %37, 0, !dbg !9098
  br i1 %tobool18, label %if.end22, label %if.then19, !dbg !9100

if.then19:                                        ; preds = %do.end
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %src.addr, align 8, !dbg !9101
  %39 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9103
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %39, i64 0, !dbg !9103
  %40 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !9103
  %call20 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr, %union.tree_node* %40), !dbg !9103
  %call21 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %38, %struct.basic_block_def* %call20), !dbg !9104
  call void @remove_edge(%struct.edge_def* %call21), !dbg !9105
  store i8 1, i8* %redirected, align 1, !dbg !9106
  br label %if.end22, !dbg !9107

if.end22:                                         ; preds = %if.then19, %do.end
  br label %for.inc, !dbg !9108

for.inc:                                          ; preds = %if.end22
  %41 = load %struct.eh_catch_d*, %struct.eh_catch_d** %c, align 8, !dbg !9109
  %next_catch = getelementptr inbounds %struct.eh_catch_d, %struct.eh_catch_d* %41, i32 0, i32 0, !dbg !9110
  %42 = load %struct.eh_catch_d*, %struct.eh_catch_d** %next_catch, align 8, !dbg !9110
  store %struct.eh_catch_d* %42, %struct.eh_catch_d** %c, align 8, !dbg !9111
  br label %for.cond, !dbg !9112, !llvm.loop !9113

for.end:                                          ; preds = %if.then, %for.cond
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %src.addr, align 8, !dbg !9115
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %43, i32 0, i32 1, !dbg !9115
  %call24 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !9115
  %44 = bitcast %struct.edge_iterator* %tmp23 to { i32, %struct.VEC_edge_gc** }*, !dbg !9115
  %45 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %44, i32 0, i32 0, !dbg !9115
  %46 = extractvalue { i32, %struct.VEC_edge_gc** } %call24, 0, !dbg !9115
  store i32 %46, i32* %45, align 8, !dbg !9115
  %47 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %44, i32 0, i32 1, !dbg !9115
  %48 = extractvalue { i32, %struct.VEC_edge_gc** } %call24, 1, !dbg !9115
  store %struct.VEC_edge_gc** %48, %struct.VEC_edge_gc*** %47, align 8, !dbg !9115
  %49 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !9115
  %50 = bitcast %struct.edge_iterator* %tmp23 to i8*, !dbg !9115
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %49, i8* align 8 %50, i64 16, i1 false), !dbg !9115
  br label %for.cond25, !dbg !9115

for.cond25:                                       ; preds = %for.inc38, %for.end
  %51 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !9117
  %52 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %51, i32 0, i32 0, !dbg !9117
  %53 = load i32, i32* %52, align 8, !dbg !9117
  %54 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %51, i32 0, i32 1, !dbg !9117
  %55 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %54, align 8, !dbg !9117
  %call26 = call zeroext i8 @ei_cond(i32 %53, %struct.VEC_edge_gc** %55, %struct.edge_def** %e), !dbg !9117
  %tobool27 = icmp ne i8 %call26, 0, !dbg !9115
  br i1 %tobool27, label %for.body28, label %for.end39, !dbg !9115

for.body28:                                       ; preds = %for.cond25
  %56 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9119
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %56, i32 0, i32 7, !dbg !9122
  %57 = load i32, i32* %flags, align 8, !dbg !9122
  %and = and i32 %57, 1, !dbg !9123
  %tobool29 = icmp ne i32 %and, 0, !dbg !9123
  br i1 %tobool29, label %if.then30, label %if.end37, !dbg !9124

if.then30:                                        ; preds = %for.body28
  %58 = load %union.tree_node*, %union.tree_node** %default_label, align 8, !dbg !9125
  %cmp31 = icmp eq %union.tree_node* %58, null, !dbg !9128
  br i1 %cmp31, label %if.then32, label %if.end34, !dbg !9129

if.then32:                                        ; preds = %if.then30
  %59 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9130
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %59, i32 0, i32 1, !dbg !9131
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !9131
  %call33 = call %union.tree_node* @gimple_block_label(%struct.basic_block_def* %60), !dbg !9132
  store %union.tree_node* %call33, %union.tree_node** %default_label, align 8, !dbg !9133
  br label %if.end34, !dbg !9134

if.end34:                                         ; preds = %if.then32, %if.then30
  %61 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9135
  %flags35 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %61, i32 0, i32 7, !dbg !9136
  %62 = load i32, i32* %flags35, align 8, !dbg !9137
  %and36 = and i32 %62, -2, !dbg !9137
  store i32 %and36, i32* %flags35, align 8, !dbg !9137
  br label %if.end37, !dbg !9138

if.end37:                                         ; preds = %if.end34, %for.body28
  br label %for.inc38, !dbg !9139

for.inc38:                                        ; preds = %if.end37
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !9117
  br label %for.cond25, !dbg !9117, !llvm.loop !9140

for.end39:                                        ; preds = %for.cond25
  %63 = load %union.tree_node*, %union.tree_node** %default_label, align 8, !dbg !9142
  %cmp40 = icmp ne %union.tree_node* %63, null, !dbg !9142
  br i1 %cmp40, label %cond.false, label %cond.true, !dbg !9142

cond.true:                                        ; preds = %for.end39
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 3145, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9142
  br label %cond.end, !dbg !9142

cond.false:                                       ; preds = %for.end39
  br label %cond.end, !dbg !9142

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9142
  %64 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !9143
  %cmp41 = icmp eq %struct.VEC_tree_heap* %64, null, !dbg !9145
  br i1 %cmp41, label %if.then42, label %if.else, !dbg !9146

if.then42:                                        ; preds = %cond.end
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %src.addr, align 8, !dbg !9147
  %call43 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %65), !dbg !9149
  store %struct.edge_def* %call43, %struct.edge_def** %e, align 8, !dbg !9150
  %66 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9151
  %flags44 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %66, i32 0, i32 7, !dbg !9152
  %67 = load i32, i32* %flags44, align 8, !dbg !9153
  %or = or i32 %67, 1, !dbg !9153
  store i32 %or, i32* %flags44, align 8, !dbg !9153
  br label %if.end55, !dbg !9154

if.else:                                          ; preds = %cond.end
  %68 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 553), align 8, !dbg !9155
  store %union.tree_node* %68, %union.tree_node** %fn, align 8, !dbg !9157
  %69 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !9158
  %70 = load i32, i32* %region_nr, align 4, !dbg !9159
  %conv = sext i32 %70 to i64, !dbg !9159
  %call45 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv), !dbg !9160
  %call46 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %69, i32 1, %union.tree_node* %call45), !dbg !9161
  store %union.gimple_statement_d* %call46, %union.gimple_statement_d** %x, align 8, !dbg !9162
  %71 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !9163
  %common47 = bitcast %union.tree_node* %71 to %struct.tree_common*, !dbg !9163
  %type48 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common47, i32 0, i32 2, !dbg !9163
  %72 = load %union.tree_node*, %union.tree_node** %type48, align 8, !dbg !9163
  %common49 = bitcast %union.tree_node* %72 to %struct.tree_common*, !dbg !9163
  %type50 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common49, i32 0, i32 2, !dbg !9163
  %73 = load %union.tree_node*, %union.tree_node** %type50, align 8, !dbg !9163
  %call51 = call %union.tree_node* @create_tmp_var(%union.tree_node* %73, i8* null), !dbg !9164
  store %union.tree_node* %call51, %union.tree_node** %filter, align 8, !dbg !9165
  %74 = load %union.tree_node*, %union.tree_node** %filter, align 8, !dbg !9166
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !9167
  %call52 = call %union.tree_node* @make_ssa_name(%union.tree_node* %74, %union.gimple_statement_d* %75), !dbg !9168
  store %union.tree_node* %call52, %union.tree_node** %filter, align 8, !dbg !9169
  %76 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !9170
  %77 = load %union.tree_node*, %union.tree_node** %filter, align 8, !dbg !9171
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %76, %union.tree_node* %77), !dbg !9172
  %78 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !9173
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %78, i32 1), !dbg !9174
  %79 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !9175
  %80 = load %union.tree_node*, %union.tree_node** %default_label, align 8, !dbg !9175
  %call53 = call %union.tree_node* @build3_stat(i32 139, %union.tree_node* %79, %union.tree_node* null, %union.tree_node* null, %union.tree_node* %80), !dbg !9175
  store %union.tree_node* %call53, %union.tree_node** %default_label, align 8, !dbg !9176
  %81 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !9177
  call void @sort_case_labels(%struct.VEC_tree_heap* %81), !dbg !9178
  %82 = load %union.tree_node*, %union.tree_node** %filter, align 8, !dbg !9179
  %83 = load %union.tree_node*, %union.tree_node** %default_label, align 8, !dbg !9180
  %84 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %labels, align 8, !dbg !9181
  %call54 = call %union.gimple_statement_d* @gimple_build_switch_vec(%union.tree_node* %82, %union.tree_node* %83, %struct.VEC_tree_heap* %84), !dbg !9182
  store %union.gimple_statement_d* %call54, %union.gimple_statement_d** %x, align 8, !dbg !9183
  %85 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !9184
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %85, i32 1), !dbg !9185
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %labels), !dbg !9186
  br label %if.end55

if.end55:                                         ; preds = %if.else, %if.then42
  %86 = load %struct.pointer_set_t*, %struct.pointer_set_t** %seen_values, align 8, !dbg !9187
  call void @pointer_set_destroy(%struct.pointer_set_t* %86), !dbg !9188
  br label %sw.epilog, !dbg !9189

sw.bb56:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.edge_def** %b_e, metadata !9190, metadata !DIExpression()), !dbg !9192
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %src.addr, align 8, !dbg !9193
  %succs57 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %87, i32 0, i32 1, !dbg !9193
  %88 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs57, align 8, !dbg !9193
  %tobool58 = icmp ne %struct.VEC_edge_gc* %88, null, !dbg !9193
  br i1 %tobool58, label %cond.true59, label %cond.false61, !dbg !9193

cond.true59:                                      ; preds = %sw.bb56
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %src.addr, align 8, !dbg !9193
  %succs60 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %89, i32 0, i32 1, !dbg !9193
  %90 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs60, align 8, !dbg !9193
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %90, i32 0, i32 0, !dbg !9193
  br label %cond.end62, !dbg !9193

cond.false61:                                     ; preds = %sw.bb56
  br label %cond.end62, !dbg !9193

cond.end62:                                       ; preds = %cond.false61, %cond.true59
  %cond63 = phi %struct.VEC_edge_base* [ %base, %cond.true59 ], [ null, %cond.false61 ], !dbg !9193
  %call64 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond63, i32 0), !dbg !9193
  %flags65 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call64, i32 0, i32 7, !dbg !9193
  %91 = load i32, i32* %flags65, align 8, !dbg !9193
  %and66 = and i32 %91, 1, !dbg !9193
  %tobool67 = icmp ne i32 %and66, 0, !dbg !9193
  br i1 %tobool67, label %cond.true68, label %cond.false78, !dbg !9193

cond.true68:                                      ; preds = %cond.end62
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %src.addr, align 8, !dbg !9193
  %succs69 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %92, i32 0, i32 1, !dbg !9193
  %93 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs69, align 8, !dbg !9193
  %tobool70 = icmp ne %struct.VEC_edge_gc* %93, null, !dbg !9193
  br i1 %tobool70, label %cond.true71, label %cond.false74, !dbg !9193

cond.true71:                                      ; preds = %cond.true68
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %src.addr, align 8, !dbg !9193
  %succs72 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %94, i32 0, i32 1, !dbg !9193
  %95 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs72, align 8, !dbg !9193
  %base73 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %95, i32 0, i32 0, !dbg !9193
  br label %cond.end75, !dbg !9193

cond.false74:                                     ; preds = %cond.true68
  br label %cond.end75, !dbg !9193

cond.end75:                                       ; preds = %cond.false74, %cond.true71
  %cond76 = phi %struct.VEC_edge_base* [ %base73, %cond.true71 ], [ null, %cond.false74 ], !dbg !9193
  %call77 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond76, i32 1), !dbg !9193
  br label %cond.end88, !dbg !9193

cond.false78:                                     ; preds = %cond.end62
  %96 = load %struct.basic_block_def*, %struct.basic_block_def** %src.addr, align 8, !dbg !9193
  %succs79 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %96, i32 0, i32 1, !dbg !9193
  %97 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs79, align 8, !dbg !9193
  %tobool80 = icmp ne %struct.VEC_edge_gc* %97, null, !dbg !9193
  br i1 %tobool80, label %cond.true81, label %cond.false84, !dbg !9193

cond.true81:                                      ; preds = %cond.false78
  %98 = load %struct.basic_block_def*, %struct.basic_block_def** %src.addr, align 8, !dbg !9193
  %succs82 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %98, i32 0, i32 1, !dbg !9193
  %99 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs82, align 8, !dbg !9193
  %base83 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %99, i32 0, i32 0, !dbg !9193
  br label %cond.end85, !dbg !9193

cond.false84:                                     ; preds = %cond.false78
  br label %cond.end85, !dbg !9193

cond.end85:                                       ; preds = %cond.false84, %cond.true81
  %cond86 = phi %struct.VEC_edge_base* [ %base83, %cond.true81 ], [ null, %cond.false84 ], !dbg !9193
  %call87 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond86, i32 0), !dbg !9193
  br label %cond.end88, !dbg !9193

cond.end88:                                       ; preds = %cond.end85, %cond.end75
  %cond89 = phi %struct.edge_def* [ %call77, %cond.end75 ], [ %call87, %cond.end85 ], !dbg !9193
  store %struct.edge_def* %cond89, %struct.edge_def** %b_e, align 8, !dbg !9192
  call void @llvm.dbg.declare(metadata %struct.edge_def** %f_e, metadata !9194, metadata !DIExpression()), !dbg !9195
  %100 = load %struct.basic_block_def*, %struct.basic_block_def** %src.addr, align 8, !dbg !9196
  %succs90 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %100, i32 0, i32 1, !dbg !9196
  %101 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs90, align 8, !dbg !9196
  %tobool91 = icmp ne %struct.VEC_edge_gc* %101, null, !dbg !9196
  br i1 %tobool91, label %cond.true92, label %cond.false95, !dbg !9196

cond.true92:                                      ; preds = %cond.end88
  %102 = load %struct.basic_block_def*, %struct.basic_block_def** %src.addr, align 8, !dbg !9196
  %succs93 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %102, i32 0, i32 1, !dbg !9196
  %103 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs93, align 8, !dbg !9196
  %base94 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %103, i32 0, i32 0, !dbg !9196
  br label %cond.end96, !dbg !9196

cond.false95:                                     ; preds = %cond.end88
  br label %cond.end96, !dbg !9196

cond.end96:                                       ; preds = %cond.false95, %cond.true92
  %cond97 = phi %struct.VEC_edge_base* [ %base94, %cond.true92 ], [ null, %cond.false95 ], !dbg !9196
  %call98 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond97, i32 0), !dbg !9196
  %flags99 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call98, i32 0, i32 7, !dbg !9196
  %104 = load i32, i32* %flags99, align 8, !dbg !9196
  %and100 = and i32 %104, 1, !dbg !9196
  %tobool101 = icmp ne i32 %and100, 0, !dbg !9196
  br i1 %tobool101, label %cond.true102, label %cond.false112, !dbg !9196

cond.true102:                                     ; preds = %cond.end96
  %105 = load %struct.basic_block_def*, %struct.basic_block_def** %src.addr, align 8, !dbg !9196
  %succs103 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %105, i32 0, i32 1, !dbg !9196
  %106 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs103, align 8, !dbg !9196
  %tobool104 = icmp ne %struct.VEC_edge_gc* %106, null, !dbg !9196
  br i1 %tobool104, label %cond.true105, label %cond.false108, !dbg !9196

cond.true105:                                     ; preds = %cond.true102
  %107 = load %struct.basic_block_def*, %struct.basic_block_def** %src.addr, align 8, !dbg !9196
  %succs106 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %107, i32 0, i32 1, !dbg !9196
  %108 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs106, align 8, !dbg !9196
  %base107 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %108, i32 0, i32 0, !dbg !9196
  br label %cond.end109, !dbg !9196

cond.false108:                                    ; preds = %cond.true102
  br label %cond.end109, !dbg !9196

cond.end109:                                      ; preds = %cond.false108, %cond.true105
  %cond110 = phi %struct.VEC_edge_base* [ %base107, %cond.true105 ], [ null, %cond.false108 ], !dbg !9196
  %call111 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond110, i32 0), !dbg !9196
  br label %cond.end122, !dbg !9196

cond.false112:                                    ; preds = %cond.end96
  %109 = load %struct.basic_block_def*, %struct.basic_block_def** %src.addr, align 8, !dbg !9196
  %succs113 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %109, i32 0, i32 1, !dbg !9196
  %110 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs113, align 8, !dbg !9196
  %tobool114 = icmp ne %struct.VEC_edge_gc* %110, null, !dbg !9196
  br i1 %tobool114, label %cond.true115, label %cond.false118, !dbg !9196

cond.true115:                                     ; preds = %cond.false112
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %src.addr, align 8, !dbg !9196
  %succs116 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %111, i32 0, i32 1, !dbg !9196
  %112 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs116, align 8, !dbg !9196
  %base117 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %112, i32 0, i32 0, !dbg !9196
  br label %cond.end119, !dbg !9196

cond.false118:                                    ; preds = %cond.false112
  br label %cond.end119, !dbg !9196

cond.end119:                                      ; preds = %cond.false118, %cond.true115
  %cond120 = phi %struct.VEC_edge_base* [ %base117, %cond.true115 ], [ null, %cond.false118 ], !dbg !9196
  %call121 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond120, i32 1), !dbg !9196
  br label %cond.end122, !dbg !9196

cond.end122:                                      ; preds = %cond.end119, %cond.end109
  %cond123 = phi %struct.edge_def* [ %call111, %cond.end109 ], [ %call121, %cond.end119 ], !dbg !9196
  store %struct.edge_def* %cond123, %struct.edge_def** %f_e, align 8, !dbg !9195
  %113 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @implicit_built_in_decls, i64 0, i64 553), align 8, !dbg !9197
  store %union.tree_node* %113, %union.tree_node** %fn, align 8, !dbg !9198
  %114 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !9199
  %115 = load i32, i32* %region_nr, align 4, !dbg !9200
  %conv124 = sext i32 %115 to i64, !dbg !9200
  %call125 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv124), !dbg !9201
  %call126 = call %union.gimple_statement_d* (%union.tree_node*, i32, ...) @gimple_build_call(%union.tree_node* %114, i32 1, %union.tree_node* %call125), !dbg !9202
  store %union.gimple_statement_d* %call126, %union.gimple_statement_d** %x, align 8, !dbg !9203
  %116 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !9204
  %common127 = bitcast %union.tree_node* %116 to %struct.tree_common*, !dbg !9204
  %type128 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common127, i32 0, i32 2, !dbg !9204
  %117 = load %union.tree_node*, %union.tree_node** %type128, align 8, !dbg !9204
  %common129 = bitcast %union.tree_node* %117 to %struct.tree_common*, !dbg !9204
  %type130 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common129, i32 0, i32 2, !dbg !9204
  %118 = load %union.tree_node*, %union.tree_node** %type130, align 8, !dbg !9204
  %call131 = call %union.tree_node* @create_tmp_var(%union.tree_node* %118, i8* null), !dbg !9205
  store %union.tree_node* %call131, %union.tree_node** %filter, align 8, !dbg !9206
  %119 = load %union.tree_node*, %union.tree_node** %filter, align 8, !dbg !9207
  %120 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !9208
  %call132 = call %union.tree_node* @make_ssa_name(%union.tree_node* %119, %union.gimple_statement_d* %120), !dbg !9209
  store %union.tree_node* %call132, %union.tree_node** %filter, align 8, !dbg !9210
  %121 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !9211
  %122 = load %union.tree_node*, %union.tree_node** %filter, align 8, !dbg !9212
  call void @gimple_call_set_lhs(%union.gimple_statement_d* %121, %union.tree_node* %122), !dbg !9213
  %123 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !9214
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %123, i32 1), !dbg !9215
  %124 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !9216
  %u133 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %124, i32 0, i32 5, !dbg !9217
  %allowed = bitcast %union.eh_region_u* %u133 to %struct.eh_region_u_allowed*, !dbg !9218
  %label134 = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed, i32 0, i32 1, !dbg !9219
  store %union.tree_node* null, %union.tree_node** %label134, align 8, !dbg !9220
  %125 = load %union.tree_node*, %union.tree_node** %filter, align 8, !dbg !9221
  %126 = load %union.tree_node*, %union.tree_node** %filter, align 8, !dbg !9222
  %common135 = bitcast %union.tree_node* %126 to %struct.tree_common*, !dbg !9222
  %type136 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common135, i32 0, i32 2, !dbg !9222
  %127 = load %union.tree_node*, %union.tree_node** %type136, align 8, !dbg !9222
  %128 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !9223
  %u137 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %128, i32 0, i32 5, !dbg !9224
  %allowed138 = bitcast %union.eh_region_u* %u137 to %struct.eh_region_u_allowed*, !dbg !9225
  %filter139 = getelementptr inbounds %struct.eh_region_u_allowed, %struct.eh_region_u_allowed* %allowed138, i32 0, i32 2, !dbg !9226
  %129 = load i32, i32* %filter139, align 8, !dbg !9226
  %conv140 = sext i32 %129 to i64, !dbg !9223
  %call141 = call %union.tree_node* @build_int_cst(%union.tree_node* %127, i64 %conv140), !dbg !9227
  %call142 = call %union.gimple_statement_d* @gimple_build_cond(i32 101, %union.tree_node* %125, %union.tree_node* %call141, %union.tree_node* null, %union.tree_node* null), !dbg !9228
  store %union.gimple_statement_d* %call142, %union.gimple_statement_d** %x, align 8, !dbg !9229
  %130 = load %union.gimple_statement_d*, %union.gimple_statement_d** %x, align 8, !dbg !9230
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %130, i32 1), !dbg !9231
  %131 = load %struct.edge_def*, %struct.edge_def** %b_e, align 8, !dbg !9232
  %flags143 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %131, i32 0, i32 7, !dbg !9233
  %132 = load i32, i32* %flags143, align 8, !dbg !9233
  %or144 = or i32 %132, 1024, !dbg !9234
  %133 = load %struct.edge_def*, %struct.edge_def** %b_e, align 8, !dbg !9235
  %flags145 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %133, i32 0, i32 7, !dbg !9236
  store i32 %or144, i32* %flags145, align 8, !dbg !9237
  %134 = load %struct.edge_def*, %struct.edge_def** %f_e, align 8, !dbg !9238
  %flags146 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %134, i32 0, i32 7, !dbg !9239
  %135 = load i32, i32* %flags146, align 8, !dbg !9239
  %and147 = and i32 %135, -2, !dbg !9240
  %or148 = or i32 %and147, 2048, !dbg !9241
  %136 = load %struct.edge_def*, %struct.edge_def** %f_e, align 8, !dbg !9242
  %flags149 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %136, i32 0, i32 7, !dbg !9243
  store i32 %or148, i32* %flags149, align 8, !dbg !9244
  br label %sw.epilog, !dbg !9245

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 3202, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9246
  br label %sw.epilog, !dbg !9247

sw.epilog:                                        ; preds = %sw.default, %cond.end122, %if.end55
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !9248
  %137 = load i8, i8* %redirected, align 1, !dbg !9249
  ret i8 %137, !dbg !9250
}

declare dso_local zeroext i8 @delete_unreachable_blocks() #2

declare dso_local %struct.pointer_set_t* @pointer_set_create() #2

declare dso_local i32 @pointer_set_contains(%struct.pointer_set_t*, i8*) #2

declare dso_local i32 @pointer_set_insert(%struct.pointer_set_t*, i8*) #2

declare dso_local void @pointer_set_destroy(%struct.pointer_set_t*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_cond(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @remove_unreachable_handlers() #0 !dbg !9251 {
entry:
  %r_reachable = alloca %struct.simple_bitmap_def*, align 8
  %lp_reachable = alloca %struct.simple_bitmap_def*, align 8
  %region = alloca %struct.eh_region_d*, align 8
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %lp_nr = alloca i32, align 4
  %r_nr = alloca i32, align 4
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %r_reachable, metadata !9252, metadata !DIExpression()), !dbg !9263
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %lp_reachable, metadata !9264, metadata !DIExpression()), !dbg !9265
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %region, metadata !9266, metadata !DIExpression()), !dbg !9267
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !9268, metadata !DIExpression()), !dbg !9269
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !9270, metadata !DIExpression()), !dbg !9271
  call void @llvm.dbg.declare(metadata i32* %lp_nr, metadata !9272, metadata !DIExpression()), !dbg !9273
  call void @llvm.dbg.declare(metadata i32* %r_nr, metadata !9274, metadata !DIExpression()), !dbg !9275
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9276
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !9276
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !9276
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !9276
  %region_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 1, !dbg !9276
  %2 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array, align 8, !dbg !9276
  %tobool = icmp ne %struct.VEC_eh_region_gc* %2, null, !dbg !9276
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9276

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9276
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !9276
  %eh2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 0, !dbg !9276
  %4 = load %struct.eh_status*, %struct.eh_status** %eh2, align 8, !dbg !9276
  %region_array3 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %4, i32 0, i32 1, !dbg !9276
  %5 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array3, align 8, !dbg !9276
  %base = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %5, i32 0, i32 0, !dbg !9276
  br label %cond.end, !dbg !9276

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9276

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_region_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9276
  %call = call i32 @VEC_eh_region_base_length(%struct.VEC_eh_region_base* %cond), !dbg !9276
  %call4 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %call), !dbg !9277
  store %struct.simple_bitmap_def* %call4, %struct.simple_bitmap_def** %r_reachable, align 8, !dbg !9278
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9279
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !9279
  %eh6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 0, !dbg !9279
  %7 = load %struct.eh_status*, %struct.eh_status** %eh6, align 8, !dbg !9279
  %lp_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %7, i32 0, i32 2, !dbg !9279
  %8 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !9279
  %tobool7 = icmp ne %struct.VEC_eh_landing_pad_gc* %8, null, !dbg !9279
  br i1 %tobool7, label %cond.true8, label %cond.false13, !dbg !9279

cond.true8:                                       ; preds = %cond.end
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9279
  %add.ptr9 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !9279
  %eh10 = getelementptr inbounds %struct.function, %struct.function* %add.ptr9, i32 0, i32 0, !dbg !9279
  %10 = load %struct.eh_status*, %struct.eh_status** %eh10, align 8, !dbg !9279
  %lp_array11 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %10, i32 0, i32 2, !dbg !9279
  %11 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array11, align 8, !dbg !9279
  %base12 = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %11, i32 0, i32 0, !dbg !9279
  br label %cond.end14, !dbg !9279

cond.false13:                                     ; preds = %cond.end
  br label %cond.end14, !dbg !9279

cond.end14:                                       ; preds = %cond.false13, %cond.true8
  %cond15 = phi %struct.VEC_eh_landing_pad_base* [ %base12, %cond.true8 ], [ null, %cond.false13 ], !dbg !9279
  %call16 = call i32 @VEC_eh_landing_pad_base_length(%struct.VEC_eh_landing_pad_base* %cond15), !dbg !9279
  %call17 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %call16), !dbg !9280
  store %struct.simple_bitmap_def* %call17, %struct.simple_bitmap_def** %lp_reachable, align 8, !dbg !9281
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %r_reachable, align 8, !dbg !9282
  call void @sbitmap_zero(%struct.simple_bitmap_def* %12), !dbg !9283
  %13 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %lp_reachable, align 8, !dbg !9284
  call void @sbitmap_zero(%struct.simple_bitmap_def* %13), !dbg !9285
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9286
  %add.ptr18 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !9286
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr18, i32 0, i32 1, !dbg !9286
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9286
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 0, !dbg !9286
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !9286
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 6, !dbg !9286
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !9286
  store %struct.basic_block_def* %17, %struct.basic_block_def** %bb, align 8, !dbg !9286
  br label %for.cond, !dbg !9286

for.cond:                                         ; preds = %for.inc38, %cond.end14
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9288
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9288
  %add.ptr19 = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !9288
  %cfg20 = getelementptr inbounds %struct.function, %struct.function* %add.ptr19, i32 0, i32 1, !dbg !9288
  %20 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg20, align 8, !dbg !9288
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %20, i32 0, i32 1, !dbg !9288
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !9288
  %cmp = icmp ne %struct.basic_block_def* %18, %21, !dbg !9288
  br i1 %cmp, label %for.body, label %for.end40, !dbg !9286

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !9290, metadata !DIExpression()), !dbg !9292
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9293
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %gsi, %struct.basic_block_def* %22), !dbg !9294
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9295
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %23), !dbg !9297
  %24 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !9297
  %25 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !9297
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 24, i1 false), !dbg !9297
  br label %for.cond21, !dbg !9298

for.cond21:                                       ; preds = %for.inc, %for.body
  %call22 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !9299
  %tobool23 = icmp ne i8 %call22, 0, !dbg !9301
  %lnot = xor i1 %tobool23, true, !dbg !9301
  br i1 %lnot, label %for.body24, label %for.end, !dbg !9302

for.body24:                                       ; preds = %for.cond21
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !9303, metadata !DIExpression()), !dbg !9305
  %call25 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !9306
  store %union.gimple_statement_d* %call25, %union.gimple_statement_d** %stmt, align 8, !dbg !9305
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9307
  %call26 = call i32 @lookup_stmt_eh_lp(%union.gimple_statement_d* %26), !dbg !9308
  store i32 %call26, i32* %lp_nr, align 4, !dbg !9309
  %27 = load i32, i32* %lp_nr, align 4, !dbg !9310
  %cmp27 = icmp slt i32 %27, 0, !dbg !9312
  br i1 %cmp27, label %if.then, label %if.else, !dbg !9313

if.then:                                          ; preds = %for.body24
  %28 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %r_reachable, align 8, !dbg !9314
  %29 = load i32, i32* %lp_nr, align 4, !dbg !9315
  %sub = sub nsw i32 0, %29, !dbg !9316
  call void @SET_BIT(%struct.simple_bitmap_def* %28, i32 %sub), !dbg !9317
  br label %if.end37, !dbg !9317

if.else:                                          ; preds = %for.body24
  %30 = load i32, i32* %lp_nr, align 4, !dbg !9318
  %cmp28 = icmp sgt i32 %30, 0, !dbg !9320
  br i1 %cmp28, label %if.then29, label %if.end, !dbg !9321

if.then29:                                        ; preds = %if.else
  %call30 = call zeroext i8 @gsi_one_before_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !9322
  %tobool31 = icmp ne i8 %call30, 0, !dbg !9322
  br i1 %tobool31, label %cond.false33, label %cond.true32, !dbg !9322

cond.true32:                                      ; preds = %if.then29
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 3294, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9322
  br label %cond.end34, !dbg !9322

cond.false33:                                     ; preds = %if.then29
  br label %cond.end34, !dbg !9322

cond.end34:                                       ; preds = %cond.false33, %cond.true32
  %cond35 = phi i32 [ 0, %cond.true32 ], [ 0, %cond.false33 ], !dbg !9322
  %31 = load i32, i32* %lp_nr, align 4, !dbg !9324
  %call36 = call %struct.eh_region_d* @get_eh_region_from_lp_number(i32 %31), !dbg !9325
  store %struct.eh_region_d* %call36, %struct.eh_region_d** %region, align 8, !dbg !9326
  %32 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %r_reachable, align 8, !dbg !9327
  %33 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !9328
  %index = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %33, i32 0, i32 3, !dbg !9329
  %34 = load i32, i32* %index, align 8, !dbg !9329
  call void @SET_BIT(%struct.simple_bitmap_def* %32, i32 %34), !dbg !9330
  %35 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %lp_reachable, align 8, !dbg !9331
  %36 = load i32, i32* %lp_nr, align 4, !dbg !9332
  call void @SET_BIT(%struct.simple_bitmap_def* %35, i32 %36), !dbg !9333
  br label %if.end, !dbg !9334

if.end:                                           ; preds = %cond.end34, %if.else
  br label %if.end37

if.end37:                                         ; preds = %if.end, %if.then
  br label %for.inc, !dbg !9335

for.inc:                                          ; preds = %if.end37
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !9336
  br label %for.cond21, !dbg !9337, !llvm.loop !9338

for.end:                                          ; preds = %for.cond21
  br label %for.inc38, !dbg !9340

for.inc38:                                        ; preds = %for.end
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9288
  %next_bb39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 6, !dbg !9288
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb39, align 8, !dbg !9288
  store %struct.basic_block_def* %38, %struct.basic_block_def** %bb, align 8, !dbg !9288
  br label %for.cond, !dbg !9288, !llvm.loop !9341

for.end40:                                        ; preds = %for.cond
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9343
  %tobool41 = icmp ne %struct._IO_FILE* %39, null, !dbg !9343
  br i1 %tobool41, label %if.then42, label %if.end47, !dbg !9345

if.then42:                                        ; preds = %for.end40
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9346
  %call43 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.19, i64 0, i64 0)), !dbg !9348
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9349
  %42 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9350
  %add.ptr44 = getelementptr inbounds %struct.function, %struct.function* %42, i64 0, !dbg !9350
  call void @dump_eh_tree(%struct._IO_FILE* %41, %struct.function* %add.ptr44), !dbg !9351
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9352
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.20, i64 0, i64 0)), !dbg !9353
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9354
  %45 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %r_reachable, align 8, !dbg !9355
  call void @dump_sbitmap_file(%struct._IO_FILE* %44, %struct.simple_bitmap_def* %45), !dbg !9356
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9357
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.21, i64 0, i64 0)), !dbg !9358
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9359
  %48 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %lp_reachable, align 8, !dbg !9360
  call void @dump_sbitmap_file(%struct._IO_FILE* %47, %struct.simple_bitmap_def* %48), !dbg !9361
  br label %if.end47, !dbg !9362

if.end47:                                         ; preds = %if.then42, %for.end40
  store i32 1, i32* %r_nr, align 4, !dbg !9363
  br label %for.cond48, !dbg !9365

for.cond48:                                       ; preds = %for.inc72, %if.end47
  %49 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9366
  %add.ptr49 = getelementptr inbounds %struct.function, %struct.function* %49, i64 0, !dbg !9366
  %eh50 = getelementptr inbounds %struct.function, %struct.function* %add.ptr49, i32 0, i32 0, !dbg !9366
  %50 = load %struct.eh_status*, %struct.eh_status** %eh50, align 8, !dbg !9366
  %region_array51 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %50, i32 0, i32 1, !dbg !9366
  %51 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array51, align 8, !dbg !9366
  %tobool52 = icmp ne %struct.VEC_eh_region_gc* %51, null, !dbg !9366
  br i1 %tobool52, label %cond.true53, label %cond.false58, !dbg !9366

cond.true53:                                      ; preds = %for.cond48
  %52 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9366
  %add.ptr54 = getelementptr inbounds %struct.function, %struct.function* %52, i64 0, !dbg !9366
  %eh55 = getelementptr inbounds %struct.function, %struct.function* %add.ptr54, i32 0, i32 0, !dbg !9366
  %53 = load %struct.eh_status*, %struct.eh_status** %eh55, align 8, !dbg !9366
  %region_array56 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %53, i32 0, i32 1, !dbg !9366
  %54 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array56, align 8, !dbg !9366
  %base57 = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %54, i32 0, i32 0, !dbg !9366
  br label %cond.end59, !dbg !9366

cond.false58:                                     ; preds = %for.cond48
  br label %cond.end59, !dbg !9366

cond.end59:                                       ; preds = %cond.false58, %cond.true53
  %cond60 = phi %struct.VEC_eh_region_base* [ %base57, %cond.true53 ], [ null, %cond.false58 ], !dbg !9366
  %55 = load i32, i32* %r_nr, align 4, !dbg !9366
  %call61 = call i32 @VEC_eh_region_base_iterate(%struct.VEC_eh_region_base* %cond60, i32 %55, %struct.eh_region_d** %region), !dbg !9366
  %tobool62 = icmp ne i32 %call61, 0, !dbg !9368
  br i1 %tobool62, label %for.body63, label %for.end73, !dbg !9368

for.body63:                                       ; preds = %cond.end59
  %56 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !9369
  %tobool64 = icmp ne %struct.eh_region_d* %56, null, !dbg !9369
  br i1 %tobool64, label %land.lhs.true, label %if.end71, !dbg !9371

land.lhs.true:                                    ; preds = %for.body63
  %57 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %r_reachable, align 8, !dbg !9372
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %57, i32 0, i32 3, !dbg !9372
  %58 = load i32, i32* %r_nr, align 4, !dbg !9372
  %div = udiv i32 %58, 64, !dbg !9372
  %idxprom = zext i32 %div to i64, !dbg !9372
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !9372
  %59 = load i64, i64* %arrayidx, align 8, !dbg !9372
  %60 = load i32, i32* %r_nr, align 4, !dbg !9372
  %rem = urem i32 %60, 64, !dbg !9372
  %sh_prom = zext i32 %rem to i64, !dbg !9372
  %shr = lshr i64 %59, %sh_prom, !dbg !9372
  %and = and i64 %shr, 1, !dbg !9372
  %tobool65 = icmp ne i64 %and, 0, !dbg !9372
  br i1 %tobool65, label %if.end71, label %if.then66, !dbg !9373

if.then66:                                        ; preds = %land.lhs.true
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9374
  %tobool67 = icmp ne %struct._IO_FILE* %61, null, !dbg !9374
  br i1 %tobool67, label %if.then68, label %if.end70, !dbg !9377

if.then68:                                        ; preds = %if.then66
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9378
  %63 = load i32, i32* %r_nr, align 4, !dbg !9379
  %call69 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.22, i64 0, i64 0), i32 %63), !dbg !9380
  br label %if.end70, !dbg !9380

if.end70:                                         ; preds = %if.then68, %if.then66
  %64 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !9381
  call void @remove_eh_handler(%struct.eh_region_d* %64), !dbg !9382
  br label %if.end71, !dbg !9383

if.end71:                                         ; preds = %if.end70, %land.lhs.true, %for.body63
  br label %for.inc72, !dbg !9372

for.inc72:                                        ; preds = %if.end71
  %65 = load i32, i32* %r_nr, align 4, !dbg !9384
  %inc = add nsw i32 %65, 1, !dbg !9384
  store i32 %inc, i32* %r_nr, align 4, !dbg !9384
  br label %for.cond48, !dbg !9385, !llvm.loop !9386

for.end73:                                        ; preds = %cond.end59
  store i32 1, i32* %lp_nr, align 4, !dbg !9388
  br label %for.cond74, !dbg !9390

for.cond74:                                       ; preds = %for.inc107, %for.end73
  %66 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9391
  %add.ptr75 = getelementptr inbounds %struct.function, %struct.function* %66, i64 0, !dbg !9391
  %eh76 = getelementptr inbounds %struct.function, %struct.function* %add.ptr75, i32 0, i32 0, !dbg !9391
  %67 = load %struct.eh_status*, %struct.eh_status** %eh76, align 8, !dbg !9391
  %lp_array77 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %67, i32 0, i32 2, !dbg !9391
  %68 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array77, align 8, !dbg !9391
  %tobool78 = icmp ne %struct.VEC_eh_landing_pad_gc* %68, null, !dbg !9391
  br i1 %tobool78, label %cond.true79, label %cond.false84, !dbg !9391

cond.true79:                                      ; preds = %for.cond74
  %69 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9391
  %add.ptr80 = getelementptr inbounds %struct.function, %struct.function* %69, i64 0, !dbg !9391
  %eh81 = getelementptr inbounds %struct.function, %struct.function* %add.ptr80, i32 0, i32 0, !dbg !9391
  %70 = load %struct.eh_status*, %struct.eh_status** %eh81, align 8, !dbg !9391
  %lp_array82 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %70, i32 0, i32 2, !dbg !9391
  %71 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array82, align 8, !dbg !9391
  %base83 = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %71, i32 0, i32 0, !dbg !9391
  br label %cond.end85, !dbg !9391

cond.false84:                                     ; preds = %for.cond74
  br label %cond.end85, !dbg !9391

cond.end85:                                       ; preds = %cond.false84, %cond.true79
  %cond86 = phi %struct.VEC_eh_landing_pad_base* [ %base83, %cond.true79 ], [ null, %cond.false84 ], !dbg !9391
  %72 = load i32, i32* %lp_nr, align 4, !dbg !9391
  %call87 = call i32 @VEC_eh_landing_pad_base_iterate(%struct.VEC_eh_landing_pad_base* %cond86, i32 %72, %struct.eh_landing_pad_d** %lp), !dbg !9391
  %tobool88 = icmp ne i32 %call87, 0, !dbg !9393
  br i1 %tobool88, label %for.body89, label %for.end109, !dbg !9393

for.body89:                                       ; preds = %cond.end85
  %73 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !9394
  %tobool90 = icmp ne %struct.eh_landing_pad_d* %73, null, !dbg !9394
  br i1 %tobool90, label %land.lhs.true91, label %if.end106, !dbg !9396

land.lhs.true91:                                  ; preds = %for.body89
  %74 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %lp_reachable, align 8, !dbg !9397
  %elms92 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %74, i32 0, i32 3, !dbg !9397
  %75 = load i32, i32* %lp_nr, align 4, !dbg !9397
  %div93 = udiv i32 %75, 64, !dbg !9397
  %idxprom94 = zext i32 %div93 to i64, !dbg !9397
  %arrayidx95 = getelementptr inbounds [1 x i64], [1 x i64]* %elms92, i64 0, i64 %idxprom94, !dbg !9397
  %76 = load i64, i64* %arrayidx95, align 8, !dbg !9397
  %77 = load i32, i32* %lp_nr, align 4, !dbg !9397
  %rem96 = urem i32 %77, 64, !dbg !9397
  %sh_prom97 = zext i32 %rem96 to i64, !dbg !9397
  %shr98 = lshr i64 %76, %sh_prom97, !dbg !9397
  %and99 = and i64 %shr98, 1, !dbg !9397
  %tobool100 = icmp ne i64 %and99, 0, !dbg !9397
  br i1 %tobool100, label %if.end106, label %if.then101, !dbg !9398

if.then101:                                       ; preds = %land.lhs.true91
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9399
  %tobool102 = icmp ne %struct._IO_FILE* %78, null, !dbg !9399
  br i1 %tobool102, label %if.then103, label %if.end105, !dbg !9402

if.then103:                                       ; preds = %if.then101
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9403
  %80 = load i32, i32* %lp_nr, align 4, !dbg !9404
  %call104 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %79, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.23, i64 0, i64 0), i32 %80), !dbg !9405
  br label %if.end105, !dbg !9405

if.end105:                                        ; preds = %if.then103, %if.then101
  %81 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !9406
  call void @remove_eh_landing_pad(%struct.eh_landing_pad_d* %81), !dbg !9407
  br label %if.end106, !dbg !9408

if.end106:                                        ; preds = %if.end105, %land.lhs.true91, %for.body89
  br label %for.inc107, !dbg !9397

for.inc107:                                       ; preds = %if.end106
  %82 = load i32, i32* %lp_nr, align 4, !dbg !9409
  %inc108 = add nsw i32 %82, 1, !dbg !9409
  store i32 %inc108, i32* %lp_nr, align 4, !dbg !9409
  br label %for.cond74, !dbg !9410, !llvm.loop !9411

for.end109:                                       ; preds = %cond.end85
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9413
  %tobool110 = icmp ne %struct._IO_FILE* %83, null, !dbg !9413
  br i1 %tobool110, label %if.then111, label %if.end115, !dbg !9415

if.then111:                                       ; preds = %for.end109
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9416
  %call112 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %84, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.24, i64 0, i64 0)), !dbg !9418
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9419
  %86 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9420
  %add.ptr113 = getelementptr inbounds %struct.function, %struct.function* %86, i64 0, !dbg !9420
  call void @dump_eh_tree(%struct._IO_FILE* %85, %struct.function* %add.ptr113), !dbg !9421
  %87 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9422
  %call114 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %87, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i64 0, i64 0)), !dbg !9423
  br label %if.end115, !dbg !9424

if.end115:                                        ; preds = %if.then111, %for.end109
  %88 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %r_reachable, align 8, !dbg !9425
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %88, i32 0, i32 0, !dbg !9425
  %89 = load i8*, i8** %popcount, align 8, !dbg !9425
  call void @free(i8* %89), !dbg !9425
  %90 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %r_reachable, align 8, !dbg !9425
  %91 = bitcast %struct.simple_bitmap_def* %90 to i8*, !dbg !9425
  call void @free(i8* %91), !dbg !9425
  %92 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %lp_reachable, align 8, !dbg !9426
  %popcount116 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %92, i32 0, i32 0, !dbg !9426
  %93 = load i8*, i8** %popcount116, align 8, !dbg !9426
  call void @free(i8* %93), !dbg !9426
  %94 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %lp_reachable, align 8, !dbg !9426
  %95 = bitcast %struct.simple_bitmap_def* %94 to i8*, !dbg !9426
  call void @free(i8* %95), !dbg !9426
  ret void, !dbg !9427
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @unsplit_all_eh() #0 !dbg !9428 {
entry:
  %changed = alloca i8, align 1
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !9429, metadata !DIExpression()), !dbg !9430
  store i8 0, i8* %changed, align 1, !dbg !9430
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !9431, metadata !DIExpression()), !dbg !9432
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9433, metadata !DIExpression()), !dbg !9434
  store i32 1, i32* %i, align 4, !dbg !9435
  br label %for.cond, !dbg !9437

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9438
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !9438
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !9438
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !9438
  %lp_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 2, !dbg !9438
  %2 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !9438
  %tobool = icmp ne %struct.VEC_eh_landing_pad_gc* %2, null, !dbg !9438
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9438

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9438
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !9438
  %eh2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 0, !dbg !9438
  %4 = load %struct.eh_status*, %struct.eh_status** %eh2, align 8, !dbg !9438
  %lp_array3 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %4, i32 0, i32 2, !dbg !9438
  %5 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array3, align 8, !dbg !9438
  %base = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %5, i32 0, i32 0, !dbg !9438
  br label %cond.end, !dbg !9438

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !9438

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_landing_pad_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9438
  %6 = load i32, i32* %i, align 4, !dbg !9438
  %call = call i32 @VEC_eh_landing_pad_base_iterate(%struct.VEC_eh_landing_pad_base* %cond, i32 %6, %struct.eh_landing_pad_d** %lp), !dbg !9438
  %tobool4 = icmp ne i32 %call, 0, !dbg !9440
  br i1 %tobool4, label %for.body, label %for.end, !dbg !9440

for.body:                                         ; preds = %cond.end
  %7 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !9441
  %tobool5 = icmp ne %struct.eh_landing_pad_d* %7, null, !dbg !9441
  br i1 %tobool5, label %if.then, label %if.end, !dbg !9443

if.then:                                          ; preds = %for.body
  %8 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !9444
  %call6 = call zeroext i8 @unsplit_eh(%struct.eh_landing_pad_d* %8), !dbg !9445
  %conv = zext i8 %call6 to i32, !dbg !9445
  %9 = load i8, i8* %changed, align 1, !dbg !9446
  %conv7 = zext i8 %9 to i32, !dbg !9446
  %or = or i32 %conv7, %conv, !dbg !9446
  %conv8 = trunc i32 %or to i8, !dbg !9446
  store i8 %conv8, i8* %changed, align 1, !dbg !9446
  br label %if.end, !dbg !9447

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !9441

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %i, align 4, !dbg !9448
  %inc = add nsw i32 %10, 1, !dbg !9448
  store i32 %inc, i32* %i, align 4, !dbg !9448
  br label %for.cond, !dbg !9449, !llvm.loop !9450

for.end:                                          ; preds = %cond.end
  %11 = load i8, i8* %changed, align 1, !dbg !9452
  ret i8 %11, !dbg !9453
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cleanup_all_empty_eh() #0 !dbg !9454 {
entry:
  %changed = alloca i8, align 1
  %lp = alloca %struct.eh_landing_pad_d*, align 8
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !9455, metadata !DIExpression()), !dbg !9456
  store i8 0, i8* %changed, align 1, !dbg !9456
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp, metadata !9457, metadata !DIExpression()), !dbg !9458
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9459, metadata !DIExpression()), !dbg !9460
  store i32 1, i32* %i, align 4, !dbg !9461
  br label %for.cond, !dbg !9463

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9464
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !9464
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !9464
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !9464
  %lp_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 2, !dbg !9464
  %2 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array, align 8, !dbg !9464
  %tobool = icmp ne %struct.VEC_eh_landing_pad_gc* %2, null, !dbg !9464
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9464

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9464
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !9464
  %eh2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 0, !dbg !9464
  %4 = load %struct.eh_status*, %struct.eh_status** %eh2, align 8, !dbg !9464
  %lp_array3 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %4, i32 0, i32 2, !dbg !9464
  %5 = load %struct.VEC_eh_landing_pad_gc*, %struct.VEC_eh_landing_pad_gc** %lp_array3, align 8, !dbg !9464
  %base = getelementptr inbounds %struct.VEC_eh_landing_pad_gc, %struct.VEC_eh_landing_pad_gc* %5, i32 0, i32 0, !dbg !9464
  br label %cond.end, !dbg !9464

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !9464

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_landing_pad_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9464
  %6 = load i32, i32* %i, align 4, !dbg !9464
  %call = call i32 @VEC_eh_landing_pad_base_iterate(%struct.VEC_eh_landing_pad_base* %cond, i32 %6, %struct.eh_landing_pad_d** %lp), !dbg !9464
  %tobool4 = icmp ne i32 %call, 0, !dbg !9466
  br i1 %tobool4, label %for.body, label %for.end, !dbg !9466

for.body:                                         ; preds = %cond.end
  %7 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !9467
  %tobool5 = icmp ne %struct.eh_landing_pad_d* %7, null, !dbg !9467
  br i1 %tobool5, label %if.then, label %if.end, !dbg !9469

if.then:                                          ; preds = %for.body
  %8 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp, align 8, !dbg !9470
  %call6 = call zeroext i8 @cleanup_empty_eh(%struct.eh_landing_pad_d* %8), !dbg !9471
  %conv = zext i8 %call6 to i32, !dbg !9471
  %9 = load i8, i8* %changed, align 1, !dbg !9472
  %conv7 = zext i8 %9 to i32, !dbg !9472
  %or = or i32 %conv7, %conv, !dbg !9472
  %conv8 = trunc i32 %or to i8, !dbg !9472
  store i8 %conv8, i8* %changed, align 1, !dbg !9472
  br label %if.end, !dbg !9473

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !9467

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %i, align 4, !dbg !9474
  %inc = add nsw i32 %10, 1, !dbg !9474
  store i32 %inc, i32* %i, align 4, !dbg !9474
  br label %for.cond, !dbg !9475, !llvm.loop !9476

for.end:                                          ; preds = %cond.end
  %11 = load i8, i8* %changed, align 1, !dbg !9478
  ret i8 %11, !dbg !9479
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_unreachable_handlers_no_lp() #0 !dbg !9480 {
entry:
  %r = alloca %struct.eh_region_d*, align 8
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %r, metadata !9481, metadata !DIExpression()), !dbg !9482
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9483, metadata !DIExpression()), !dbg !9484
  store i32 1, i32* %i, align 4, !dbg !9485
  br label %for.cond, !dbg !9487

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9488
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !9488
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 0, !dbg !9488
  %1 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !9488
  %region_array = getelementptr inbounds %struct.eh_status, %struct.eh_status* %1, i32 0, i32 1, !dbg !9488
  %2 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array, align 8, !dbg !9488
  %tobool = icmp ne %struct.VEC_eh_region_gc* %2, null, !dbg !9488
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9488

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9488
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !9488
  %eh2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 0, !dbg !9488
  %4 = load %struct.eh_status*, %struct.eh_status** %eh2, align 8, !dbg !9488
  %region_array3 = getelementptr inbounds %struct.eh_status, %struct.eh_status* %4, i32 0, i32 1, !dbg !9488
  %5 = load %struct.VEC_eh_region_gc*, %struct.VEC_eh_region_gc** %region_array3, align 8, !dbg !9488
  %base = getelementptr inbounds %struct.VEC_eh_region_gc, %struct.VEC_eh_region_gc* %5, i32 0, i32 0, !dbg !9488
  br label %cond.end, !dbg !9488

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !9488

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_eh_region_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9488
  %6 = load i32, i32* %i, align 4, !dbg !9488
  %call = call i32 @VEC_eh_region_base_iterate(%struct.VEC_eh_region_base* %cond, i32 %6, %struct.eh_region_d** %r), !dbg !9488
  %tobool4 = icmp ne i32 %call, 0, !dbg !9490
  br i1 %tobool4, label %for.body, label %for.end, !dbg !9490

for.body:                                         ; preds = %cond.end
  %7 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !9491
  %tobool5 = icmp ne %struct.eh_region_d* %7, null, !dbg !9491
  br i1 %tobool5, label %land.lhs.true, label %if.end11, !dbg !9493

land.lhs.true:                                    ; preds = %for.body
  %8 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !9494
  %landing_pads = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %8, i32 0, i32 6, !dbg !9495
  %9 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %landing_pads, align 8, !dbg !9495
  %cmp = icmp eq %struct.eh_landing_pad_d* %9, null, !dbg !9496
  br i1 %cmp, label %land.lhs.true6, label %if.end11, !dbg !9497

land.lhs.true6:                                   ; preds = %land.lhs.true
  %10 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !9498
  %type = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %10, i32 0, i32 4, !dbg !9499
  %11 = load i32, i32* %type, align 4, !dbg !9499
  %cmp7 = icmp ne i32 %11, 3, !dbg !9500
  br i1 %cmp7, label %if.then, label %if.end11, !dbg !9501

if.then:                                          ; preds = %land.lhs.true6
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9502
  %tobool8 = icmp ne %struct._IO_FILE* %12, null, !dbg !9502
  br i1 %tobool8, label %if.then9, label %if.end, !dbg !9505

if.then9:                                         ; preds = %if.then
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9506
  %14 = load i32, i32* %i, align 4, !dbg !9507
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.22, i64 0, i64 0), i32 %14), !dbg !9508
  br label %if.end, !dbg !9508

if.end:                                           ; preds = %if.then9, %if.then
  %15 = load %struct.eh_region_d*, %struct.eh_region_d** %r, align 8, !dbg !9509
  call void @remove_eh_handler(%struct.eh_region_d* %15), !dbg !9510
  br label %if.end11, !dbg !9511

if.end11:                                         ; preds = %if.end, %land.lhs.true6, %land.lhs.true, %for.body
  br label %for.inc, !dbg !9512

for.inc:                                          ; preds = %if.end11
  %16 = load i32, i32* %i, align 4, !dbg !9513
  %inc = add nsw i32 %16, 1, !dbg !9513
  store i32 %inc, i32* %i, align 4, !dbg !9513
  br label %for.cond, !dbg !9514, !llvm.loop !9515

for.end:                                          ; preds = %cond.end
  ret void, !dbg !9517
}

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_region_base_length(%struct.VEC_eh_region_base* %vec_) #0 !dbg !9518 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_region_base*, align 8
  store %struct.VEC_eh_region_base* %vec_, %struct.VEC_eh_region_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_base** %vec_.addr, metadata !9521, metadata !DIExpression()), !dbg !9522
  %0 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !9522
  %tobool = icmp ne %struct.VEC_eh_region_base* %0, null, !dbg !9522
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9522

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !9522
  %num = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %1, i32 0, i32 0, !dbg !9522
  %2 = load i32, i32* %num, align 8, !dbg !9522
  br label %cond.end, !dbg !9522

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9522

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !9522
  ret i32 %cond, !dbg !9522
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_landing_pad_base_length(%struct.VEC_eh_landing_pad_base* %vec_) #0 !dbg !9523 {
entry:
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_base*, align 8
  store %struct.VEC_eh_landing_pad_base* %vec_, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_base** %vec_.addr, metadata !9526, metadata !DIExpression()), !dbg !9527
  %0 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !9527
  %tobool = icmp ne %struct.VEC_eh_landing_pad_base* %0, null, !dbg !9527
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9527

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !9527
  %num = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %1, i32 0, i32 0, !dbg !9527
  %2 = load i32, i32* %num, align 8, !dbg !9527
  br label %cond.end, !dbg !9527

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9527

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !9527
  ret i32 %cond, !dbg !9527
}

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !9528 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !9531, metadata !DIExpression()), !dbg !9532
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !9533, metadata !DIExpression()), !dbg !9534
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !9535
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !9537
  %1 = load i8*, i8** %popcount, align 8, !dbg !9537
  %tobool = icmp ne i8* %1, null, !dbg !9535
  br i1 %tobool, label %if.then, label %if.end7, !dbg !9538

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !9539, metadata !DIExpression()), !dbg !9541
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !9542
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !9542
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !9542
  %div = udiv i32 %3, 64, !dbg !9542
  %idxprom = zext i32 %div to i64, !dbg !9542
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !9542
  %4 = load i64, i64* %arrayidx, align 8, !dbg !9542
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !9542
  %rem = urem i32 %5, 64, !dbg !9542
  %sh_prom = zext i32 %rem to i64, !dbg !9542
  %shr = lshr i64 %4, %sh_prom, !dbg !9542
  %and = and i64 %shr, 1, !dbg !9542
  %conv = trunc i64 %and to i8, !dbg !9542
  store i8 %conv, i8* %oldbit, align 1, !dbg !9543
  %6 = load i8, i8* %oldbit, align 1, !dbg !9544
  %tobool1 = icmp ne i8 %6, 0, !dbg !9544
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !9546

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !9547
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !9548
  %8 = load i8*, i8** %popcount3, align 8, !dbg !9548
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !9549
  %div4 = udiv i32 %9, 64, !dbg !9550
  %idxprom5 = zext i32 %div4 to i64, !dbg !9547
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !9547
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !9551
  %inc = add i8 %10, 1, !dbg !9551
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !9551
  br label %if.end, !dbg !9547

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !9552

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !9553
  %rem8 = urem i32 %11, 64, !dbg !9554
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !9555
  %shl = shl i64 1, %sh_prom9, !dbg !9555
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !9556
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !9557
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !9558
  %div11 = udiv i32 %13, 64, !dbg !9559
  %idxprom12 = zext i32 %div11 to i64, !dbg !9556
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !9556
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !9560
  %or = or i64 %14, %shl, !dbg !9560
  store i64 %or, i64* %arrayidx13, align 8, !dbg !9560
  ret void, !dbg !9561
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @dump_eh_tree(%struct._IO_FILE*, %struct.function*) #2

declare dso_local void @dump_sbitmap_file(%struct._IO_FILE*, %struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_region_base_iterate(%struct.VEC_eh_region_base* %vec_, i32 %ix_, %struct.eh_region_d** %ptr) #0 !dbg !9562 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_eh_region_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.eh_region_d**, align 8
  store %struct.VEC_eh_region_base* %vec_, %struct.VEC_eh_region_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_region_base** %vec_.addr, metadata !9566, metadata !DIExpression()), !dbg !9567
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !9568, metadata !DIExpression()), !dbg !9567
  store %struct.eh_region_d** %ptr, %struct.eh_region_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d*** %ptr.addr, metadata !9569, metadata !DIExpression()), !dbg !9567
  %0 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !9570
  %tobool = icmp ne %struct.VEC_eh_region_base* %0, null, !dbg !9570
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !9570

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !9570
  %2 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !9570
  %num = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %2, i32 0, i32 0, !dbg !9570
  %3 = load i32, i32* %num, align 8, !dbg !9570
  %cmp = icmp ult i32 %1, %3, !dbg !9570
  br i1 %cmp, label %if.then, label %if.else, !dbg !9567

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_eh_region_base*, %struct.VEC_eh_region_base** %vec_.addr, align 8, !dbg !9572
  %vec = getelementptr inbounds %struct.VEC_eh_region_base, %struct.VEC_eh_region_base* %4, i32 0, i32 2, !dbg !9572
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !9572
  %idxprom = zext i32 %5 to i64, !dbg !9572
  %arrayidx = getelementptr inbounds [1 x %struct.eh_region_d*], [1 x %struct.eh_region_d*]* %vec, i64 0, i64 %idxprom, !dbg !9572
  %6 = load %struct.eh_region_d*, %struct.eh_region_d** %arrayidx, align 8, !dbg !9572
  %7 = load %struct.eh_region_d**, %struct.eh_region_d*** %ptr.addr, align 8, !dbg !9572
  store %struct.eh_region_d* %6, %struct.eh_region_d** %7, align 8, !dbg !9572
  store i32 1, i32* %retval, align 4, !dbg !9572
  br label %return, !dbg !9572

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.eh_region_d**, %struct.eh_region_d*** %ptr.addr, align 8, !dbg !9574
  store %struct.eh_region_d* null, %struct.eh_region_d** %8, align 8, !dbg !9574
  store i32 0, i32* %retval, align 4, !dbg !9574
  br label %return, !dbg !9574

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !9567
  ret i32 %9, !dbg !9567
}

declare dso_local void @remove_eh_handler(%struct.eh_region_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_eh_landing_pad_base_iterate(%struct.VEC_eh_landing_pad_base* %vec_, i32 %ix_, %struct.eh_landing_pad_d** %ptr) #0 !dbg !9576 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_eh_landing_pad_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.eh_landing_pad_d**, align 8
  store %struct.VEC_eh_landing_pad_base* %vec_, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_eh_landing_pad_base** %vec_.addr, metadata !9580, metadata !DIExpression()), !dbg !9581
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !9582, metadata !DIExpression()), !dbg !9581
  store %struct.eh_landing_pad_d** %ptr, %struct.eh_landing_pad_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d*** %ptr.addr, metadata !9583, metadata !DIExpression()), !dbg !9581
  %0 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !9584
  %tobool = icmp ne %struct.VEC_eh_landing_pad_base* %0, null, !dbg !9584
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !9584

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !9584
  %2 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !9584
  %num = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %2, i32 0, i32 0, !dbg !9584
  %3 = load i32, i32* %num, align 8, !dbg !9584
  %cmp = icmp ult i32 %1, %3, !dbg !9584
  br i1 %cmp, label %if.then, label %if.else, !dbg !9581

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_eh_landing_pad_base*, %struct.VEC_eh_landing_pad_base** %vec_.addr, align 8, !dbg !9586
  %vec = getelementptr inbounds %struct.VEC_eh_landing_pad_base, %struct.VEC_eh_landing_pad_base* %4, i32 0, i32 2, !dbg !9586
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !9586
  %idxprom = zext i32 %5 to i64, !dbg !9586
  %arrayidx = getelementptr inbounds [1 x %struct.eh_landing_pad_d*], [1 x %struct.eh_landing_pad_d*]* %vec, i64 0, i64 %idxprom, !dbg !9586
  %6 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %arrayidx, align 8, !dbg !9586
  %7 = load %struct.eh_landing_pad_d**, %struct.eh_landing_pad_d*** %ptr.addr, align 8, !dbg !9586
  store %struct.eh_landing_pad_d* %6, %struct.eh_landing_pad_d** %7, align 8, !dbg !9586
  store i32 1, i32* %retval, align 4, !dbg !9586
  br label %return, !dbg !9586

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.eh_landing_pad_d**, %struct.eh_landing_pad_d*** %ptr.addr, align 8, !dbg !9588
  store %struct.eh_landing_pad_d* null, %struct.eh_landing_pad_d** %8, align 8, !dbg !9588
  store i32 0, i32* %retval, align 4, !dbg !9588
  br label %return, !dbg !9588

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !9581
  ret i32 %9, !dbg !9581
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @unsplit_eh(%struct.eh_landing_pad_d* %lp) #0 !dbg !9590 {
entry:
  %retval = alloca i8, align 1
  %lp.addr = alloca %struct.eh_landing_pad_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %e_in = alloca %struct.edge_def*, align 8
  %e_out = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp48 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %lab = alloca %union.tree_node*, align 8
  %lp_nr = alloca i32, align 4
  %tmp74 = alloca %struct.gimple_stmt_iterator, align 8
  %use_stmt = alloca %union.gimple_statement_d*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %iter = alloca %struct.immediate_use_iterator_d, align 8
  store %struct.eh_landing_pad_d* %lp, %struct.eh_landing_pad_d** %lp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp.addr, metadata !9593, metadata !DIExpression()), !dbg !9594
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !9595, metadata !DIExpression()), !dbg !9596
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9597
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !9597
  %1 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !9597
  %post_landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %1, i32 0, i32 2, !dbg !9597
  %2 = load %union.tree_node*, %union.tree_node** %post_landing_pad, align 8, !dbg !9597
  %call = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr, %union.tree_node* %2), !dbg !9597
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !9596
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !9598, metadata !DIExpression()), !dbg !9599
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_in, metadata !9600, metadata !DIExpression()), !dbg !9601
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_out, metadata !9602, metadata !DIExpression()), !dbg !9603
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9604
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 0, !dbg !9604
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !9604
  %tobool = icmp ne %struct.VEC_edge_gc* %4, null, !dbg !9604
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9604

cond.true:                                        ; preds = %entry
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9604
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 0, !dbg !9604
  %6 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !9604
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %6, i32 0, i32 0, !dbg !9604
  br label %cond.end, !dbg !9604

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9604

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9604
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !9604
  %cmp = icmp ne i32 %call2, 1, !dbg !9606
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !9607

lor.lhs.false:                                    ; preds = %cond.end
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9608
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 1, !dbg !9608
  %8 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !9608
  %tobool3 = icmp ne %struct.VEC_edge_gc* %8, null, !dbg !9608
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !9608

cond.true4:                                       ; preds = %lor.lhs.false
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9608
  %succs5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 1, !dbg !9608
  %10 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs5, align 8, !dbg !9608
  %base6 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %10, i32 0, i32 0, !dbg !9608
  br label %cond.end8, !dbg !9608

cond.false7:                                      ; preds = %lor.lhs.false
  br label %cond.end8, !dbg !9608

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_edge_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !9608
  %call10 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond9), !dbg !9608
  %cmp11 = icmp ne i32 %call10, 1, !dbg !9609
  br i1 %cmp11, label %if.then, label %if.end, !dbg !9610

if.then:                                          ; preds = %cond.end8, %cond.end
  store i8 0, i8* %retval, align 1, !dbg !9611
  br label %return, !dbg !9611

if.end:                                           ; preds = %cond.end8
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9612
  %preds12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 0, !dbg !9612
  %12 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds12, align 8, !dbg !9612
  %tobool13 = icmp ne %struct.VEC_edge_gc* %12, null, !dbg !9612
  br i1 %tobool13, label %cond.true14, label %cond.false17, !dbg !9612

cond.true14:                                      ; preds = %if.end
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9612
  %preds15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 0, !dbg !9612
  %14 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds15, align 8, !dbg !9612
  %base16 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %14, i32 0, i32 0, !dbg !9612
  br label %cond.end18, !dbg !9612

cond.false17:                                     ; preds = %if.end
  br label %cond.end18, !dbg !9612

cond.end18:                                       ; preds = %cond.false17, %cond.true14
  %cond19 = phi %struct.VEC_edge_base* [ %base16, %cond.true14 ], [ null, %cond.false17 ], !dbg !9612
  %call20 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond19, i32 0), !dbg !9612
  store %struct.edge_def* %call20, %struct.edge_def** %e_in, align 8, !dbg !9613
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9614
  %succs21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 1, !dbg !9614
  %16 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs21, align 8, !dbg !9614
  %tobool22 = icmp ne %struct.VEC_edge_gc* %16, null, !dbg !9614
  br i1 %tobool22, label %cond.true23, label %cond.false26, !dbg !9614

cond.true23:                                      ; preds = %cond.end18
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9614
  %succs24 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 1, !dbg !9614
  %18 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs24, align 8, !dbg !9614
  %base25 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %18, i32 0, i32 0, !dbg !9614
  br label %cond.end27, !dbg !9614

cond.false26:                                     ; preds = %cond.end18
  br label %cond.end27, !dbg !9614

cond.end27:                                       ; preds = %cond.false26, %cond.true23
  %cond28 = phi %struct.VEC_edge_base* [ %base25, %cond.true23 ], [ null, %cond.false26 ], !dbg !9614
  %call29 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond28, i32 0), !dbg !9614
  store %struct.edge_def* %call29, %struct.edge_def** %e_out, align 8, !dbg !9615
  %19 = load %struct.edge_def*, %struct.edge_def** %e_in, align 8, !dbg !9616
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %19, i32 0, i32 7, !dbg !9618
  %20 = load i32, i32* %flags, align 8, !dbg !9618
  %and = and i32 %20, 8, !dbg !9619
  %cmp30 = icmp eq i32 %and, 0, !dbg !9620
  br i1 %cmp30, label %if.then35, label %lor.lhs.false31, !dbg !9621

lor.lhs.false31:                                  ; preds = %cond.end27
  %21 = load %struct.edge_def*, %struct.edge_def** %e_out, align 8, !dbg !9622
  %flags32 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i32 0, i32 7, !dbg !9623
  %22 = load i32, i32* %flags32, align 8, !dbg !9623
  %and33 = and i32 %22, 8, !dbg !9624
  %cmp34 = icmp ne i32 %and33, 0, !dbg !9625
  br i1 %cmp34, label %if.then35, label %if.end36, !dbg !9626

if.then35:                                        ; preds = %lor.lhs.false31, %cond.end27
  store i8 0, i8* %retval, align 1, !dbg !9627
  br label %return, !dbg !9627

if.end36:                                         ; preds = %lor.lhs.false31
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9628
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %23), !dbg !9629
  %24 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !9629
  %25 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !9629
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 24, i1 false), !dbg !9629
  %call37 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !9630
  %tobool38 = icmp ne i8 %call37, 0, !dbg !9630
  br i1 %tobool38, label %if.end43, label %land.lhs.true, !dbg !9632

land.lhs.true:                                    ; preds = %if.end36
  %call39 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !9633
  %call40 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %call39), !dbg !9634
  %conv = zext i8 %call40 to i32, !dbg !9634
  %tobool41 = icmp ne i32 %conv, 0, !dbg !9634
  br i1 %tobool41, label %if.then42, label %if.end43, !dbg !9635

if.then42:                                        ; preds = %land.lhs.true
  call void @gsi_next_nondebug(%struct.gimple_stmt_iterator* %gsi), !dbg !9636
  br label %if.end43, !dbg !9636

if.end43:                                         ; preds = %if.then42, %land.lhs.true, %if.end36
  %call44 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !9637
  %tobool45 = icmp ne i8 %call44, 0, !dbg !9637
  br i1 %tobool45, label %if.end47, label %if.then46, !dbg !9639

if.then46:                                        ; preds = %if.end43
  store i8 0, i8* %retval, align 1, !dbg !9640
  br label %return, !dbg !9640

if.end47:                                         ; preds = %if.end43
  %26 = load %struct.edge_def*, %struct.edge_def** %e_out, align 8, !dbg !9641
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %26, i32 0, i32 1, !dbg !9643
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !9643
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp48, %struct.basic_block_def* %27), !dbg !9644
  %28 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !9644
  %29 = bitcast %struct.gimple_stmt_iterator* %tmp48 to i8*, !dbg !9644
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 24, i1 false), !dbg !9644
  br label %for.cond, !dbg !9645

for.cond:                                         ; preds = %for.inc, %if.end47
  %call49 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !9646
  %tobool50 = icmp ne i8 %call49, 0, !dbg !9648
  %lnot = xor i1 %tobool50, true, !dbg !9648
  br i1 %lnot, label %for.body, label %for.end, !dbg !9649

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !9650, metadata !DIExpression()), !dbg !9652
  %call51 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !9653
  store %union.gimple_statement_d* %call51, %union.gimple_statement_d** %stmt, align 8, !dbg !9652
  call void @llvm.dbg.declare(metadata %union.tree_node** %lab, metadata !9654, metadata !DIExpression()), !dbg !9655
  call void @llvm.dbg.declare(metadata i32* %lp_nr, metadata !9656, metadata !DIExpression()), !dbg !9657
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9658
  %call52 = call i32 @gimple_code(%union.gimple_statement_d* %30), !dbg !9660
  %cmp53 = icmp ne i32 %call52, 4, !dbg !9661
  br i1 %cmp53, label %if.then55, label %if.end56, !dbg !9662

if.then55:                                        ; preds = %for.body
  br label %for.end, !dbg !9663

if.end56:                                         ; preds = %for.body
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9664
  %call57 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %31), !dbg !9665
  store %union.tree_node* %call57, %union.tree_node** %lab, align 8, !dbg !9666
  %32 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !9667
  %label_decl = bitcast %union.tree_node* %32 to %struct.tree_label_decl*, !dbg !9667
  %eh_landing_pad_nr = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl, i32 0, i32 2, !dbg !9667
  %33 = load i32, i32* %eh_landing_pad_nr, align 4, !dbg !9667
  store i32 %33, i32* %lp_nr, align 4, !dbg !9668
  %34 = load i32, i32* %lp_nr, align 4, !dbg !9669
  %tobool58 = icmp ne i32 %34, 0, !dbg !9669
  br i1 %tobool58, label %land.lhs.true59, label %if.end64, !dbg !9671

land.lhs.true59:                                  ; preds = %if.end56
  %35 = load i32, i32* %lp_nr, align 4, !dbg !9672
  %call60 = call %struct.eh_region_d* @get_eh_region_from_lp_number(i32 %35), !dbg !9673
  %36 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !9674
  %region = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %36, i32 0, i32 1, !dbg !9675
  %37 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !9675
  %cmp61 = icmp ne %struct.eh_region_d* %call60, %37, !dbg !9676
  br i1 %cmp61, label %if.then63, label %if.end64, !dbg !9677

if.then63:                                        ; preds = %land.lhs.true59
  store i8 0, i8* %retval, align 1, !dbg !9678
  br label %return, !dbg !9678

if.end64:                                         ; preds = %land.lhs.true59, %if.end56
  br label %for.inc, !dbg !9679

for.inc:                                          ; preds = %if.end64
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !9680
  br label %for.cond, !dbg !9681, !llvm.loop !9682

for.end:                                          ; preds = %if.then55, %for.cond
  %38 = load %struct.edge_def*, %struct.edge_def** %e_in, align 8, !dbg !9684
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %38, i32 0, i32 0, !dbg !9686
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !9686
  %40 = load %struct.edge_def*, %struct.edge_def** %e_out, align 8, !dbg !9687
  %dest65 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %40, i32 0, i32 1, !dbg !9688
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %dest65, align 8, !dbg !9688
  %call66 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %39, %struct.basic_block_def* %41), !dbg !9689
  %tobool67 = icmp ne %struct.edge_def* %call66, null, !dbg !9689
  br i1 %tobool67, label %if.then68, label %if.end69, !dbg !9690

if.then68:                                        ; preds = %for.end
  store i8 0, i8* %retval, align 1, !dbg !9691
  br label %return, !dbg !9691

if.end69:                                         ; preds = %for.end
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9692
  %call70 = call %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %42), !dbg !9694
  %call71 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %call70), !dbg !9695
  %tobool72 = icmp ne i8 %call71, 0, !dbg !9695
  br i1 %tobool72, label %if.end109, label %if.then73, !dbg !9696

if.then73:                                        ; preds = %if.end69
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9697
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp74, %struct.basic_block_def* %43), !dbg !9700
  %44 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !9700
  %45 = bitcast %struct.gimple_stmt_iterator* %tmp74 to i8*, !dbg !9700
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %44, i8* align 8 %45, i64 24, i1 false), !dbg !9700
  br label %for.cond75, !dbg !9701

for.cond75:                                       ; preds = %if.end107, %if.then73
  %call76 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !9702
  %tobool77 = icmp ne i8 %call76, 0, !dbg !9704
  %lnot78 = xor i1 %tobool77, true, !dbg !9704
  br i1 %lnot78, label %for.body79, label %for.end108, !dbg !9705

for.body79:                                       ; preds = %for.cond75
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt, metadata !9706, metadata !DIExpression()), !dbg !9708
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !9709, metadata !DIExpression()), !dbg !9710
  %call80 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !9711
  store %union.gimple_statement_d* %call80, %union.gimple_statement_d** %phi, align 8, !dbg !9710
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !9712, metadata !DIExpression()), !dbg !9713
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !9714
  %call81 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %46), !dbg !9715
  store %union.tree_node* %call81, %union.tree_node** %lhs, align 8, !dbg !9713
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !9716, metadata !DIExpression()), !dbg !9717
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !9718
  %call82 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %47, i64 0), !dbg !9719
  store %union.tree_node* %call82, %union.tree_node** %rhs, align 8, !dbg !9717
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !9720, metadata !DIExpression()), !dbg !9721
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %iter, metadata !9722, metadata !DIExpression()), !dbg !9730
  %48 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9731
  %call83 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %iter, %union.tree_node* %48), !dbg !9731
  store %union.gimple_statement_d* %call83, %union.gimple_statement_d** %use_stmt, align 8, !dbg !9731
  br label %for.cond84, !dbg !9731

for.cond84:                                       ; preds = %for.inc98, %for.body79
  %call85 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %iter), !dbg !9733
  %tobool86 = icmp ne i8 %call85, 0, !dbg !9733
  %lnot87 = xor i1 %tobool86, true, !dbg !9733
  br i1 %lnot87, label %for.body88, label %for.end100, !dbg !9731

for.body88:                                       ; preds = %for.cond84
  %call89 = call %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !9735
  store %struct.ssa_use_operand_d* %call89, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9735
  br label %for.cond90, !dbg !9735

for.cond90:                                       ; preds = %for.inc95, %for.body88
  %call91 = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %iter), !dbg !9738
  %tobool92 = icmp ne i8 %call91, 0, !dbg !9738
  %lnot93 = xor i1 %tobool92, true, !dbg !9738
  br i1 %lnot93, label %for.body94, label %for.end97, !dbg !9735

for.body94:                                       ; preds = %for.cond90
  %49 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9740
  %50 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9740
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %49, %union.tree_node* %50), !dbg !9740
  br label %for.inc95, !dbg !9740

for.inc95:                                        ; preds = %for.body94
  %call96 = call %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !9738
  store %struct.ssa_use_operand_d* %call96, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9738
  br label %for.cond90, !dbg !9738, !llvm.loop !9741

for.end97:                                        ; preds = %for.cond90
  br label %for.inc98, !dbg !9743

for.inc98:                                        ; preds = %for.end97
  %call99 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !9733
  store %union.gimple_statement_d* %call99, %union.gimple_statement_d** %use_stmt, align 8, !dbg !9733
  br label %for.cond84, !dbg !9733, !llvm.loop !9744

for.end100:                                       ; preds = %for.cond84
  %51 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9746
  %base101 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !9746
  %52 = bitcast %struct.tree_base* %base101 to i64*, !dbg !9746
  %bf.load = load i64, i64* %52, align 8, !dbg !9746
  %bf.lshr = lshr i64 %bf.load, 22, !dbg !9746
  %bf.clear = and i64 %bf.lshr, 1, !dbg !9746
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9746
  %tobool102 = icmp ne i32 %bf.cast, 0, !dbg !9746
  br i1 %tobool102, label %if.then103, label %if.end107, !dbg !9748

if.then103:                                       ; preds = %for.end100
  %53 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9749
  %base104 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !9749
  %54 = bitcast %struct.tree_base* %base104 to i64*, !dbg !9749
  %bf.load105 = load i64, i64* %54, align 8, !dbg !9750
  %bf.clear106 = and i64 %bf.load105, -4194305, !dbg !9750
  %bf.set = or i64 %bf.clear106, 4194304, !dbg !9750
  store i64 %bf.set, i64* %54, align 8, !dbg !9750
  br label %if.end107, !dbg !9749

if.end107:                                        ; preds = %if.then103, %for.end100
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !9751
  br label %for.cond75, !dbg !9752, !llvm.loop !9753

for.end108:                                       ; preds = %for.cond75
  br label %if.end109, !dbg !9755

if.end109:                                        ; preds = %for.end108, %if.end69
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9756
  %tobool110 = icmp ne %struct._IO_FILE* %55, null, !dbg !9756
  br i1 %tobool110, label %land.lhs.true111, label %if.end118, !dbg !9758

land.lhs.true111:                                 ; preds = %if.end109
  %56 = load i32, i32* @dump_flags, align 4, !dbg !9759
  %and112 = and i32 %56, 8, !dbg !9760
  %tobool113 = icmp ne i32 %and112, 0, !dbg !9760
  br i1 %tobool113, label %if.then114, label %if.end118, !dbg !9761

if.then114:                                       ; preds = %land.lhs.true111
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9762
  %58 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !9763
  %index = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %58, i32 0, i32 4, !dbg !9764
  %59 = load i32, i32* %index, align 8, !dbg !9764
  %60 = load %struct.edge_def*, %struct.edge_def** %e_out, align 8, !dbg !9765
  %dest115 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %60, i32 0, i32 1, !dbg !9766
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %dest115, align 8, !dbg !9766
  %index116 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %61, i32 0, i32 9, !dbg !9767
  %62 = load i32, i32* %index116, align 8, !dbg !9767
  %call117 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %57, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i64 0, i64 0), i32 %59, i32 %62), !dbg !9768
  br label %if.end118, !dbg !9768

if.end118:                                        ; preds = %if.then114, %land.lhs.true111, %if.end109
  %63 = load %struct.edge_def*, %struct.edge_def** %e_in, align 8, !dbg !9769
  %64 = load %struct.edge_def*, %struct.edge_def** %e_out, align 8, !dbg !9770
  %dest119 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %64, i32 0, i32 1, !dbg !9771
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %dest119, align 8, !dbg !9771
  call void @redirect_eh_edge_1(%struct.edge_def* %63, %struct.basic_block_def* %65, i8 zeroext 0), !dbg !9772
  %66 = load %struct.edge_def*, %struct.edge_def** %e_out, align 8, !dbg !9773
  %67 = load %struct.edge_def*, %struct.edge_def** %e_in, align 8, !dbg !9774
  %src120 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %67, i32 0, i32 0, !dbg !9775
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %src120, align 8, !dbg !9775
  call void @redirect_edge_pred(%struct.edge_def* %66, %struct.basic_block_def* %68), !dbg !9776
  %69 = load %struct.edge_def*, %struct.edge_def** %e_in, align 8, !dbg !9777
  %flags121 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %69, i32 0, i32 7, !dbg !9778
  %70 = load i32, i32* %flags121, align 8, !dbg !9778
  %71 = load %struct.edge_def*, %struct.edge_def** %e_out, align 8, !dbg !9779
  %flags122 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %71, i32 0, i32 7, !dbg !9780
  store i32 %70, i32* %flags122, align 8, !dbg !9781
  %72 = load %struct.edge_def*, %struct.edge_def** %e_in, align 8, !dbg !9782
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %72, i32 0, i32 8, !dbg !9783
  %73 = load i32, i32* %probability, align 4, !dbg !9783
  %74 = load %struct.edge_def*, %struct.edge_def** %e_out, align 8, !dbg !9784
  %probability123 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %74, i32 0, i32 8, !dbg !9785
  store i32 %73, i32* %probability123, align 4, !dbg !9786
  %75 = load %struct.edge_def*, %struct.edge_def** %e_in, align 8, !dbg !9787
  %count = getelementptr inbounds %struct.edge_def, %struct.edge_def* %75, i32 0, i32 9, !dbg !9788
  %76 = load i64, i64* %count, align 8, !dbg !9788
  %77 = load %struct.edge_def*, %struct.edge_def** %e_out, align 8, !dbg !9789
  %count124 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %77, i32 0, i32 9, !dbg !9790
  store i64 %76, i64* %count124, align 8, !dbg !9791
  %78 = load %struct.edge_def*, %struct.edge_def** %e_in, align 8, !dbg !9792
  call void @remove_edge(%struct.edge_def* %78), !dbg !9793
  store i8 1, i8* %retval, align 1, !dbg !9794
  br label %return, !dbg !9794

return:                                           ; preds = %if.end118, %if.then68, %if.then63, %if.then46, %if.then35, %if.then
  %79 = load i8, i8* %retval, align 1, !dbg !9795
  ret i8 %79, !dbg !9795
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_after_labels(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !9796 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9797, metadata !DIExpression()), !dbg !9798
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !9799, metadata !DIExpression()), !dbg !9800
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9801
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %agg.result, %struct.basic_block_def* %0), !dbg !9802
  br label %while.cond, !dbg !9803

while.cond:                                       ; preds = %while.body, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !9804
  %tobool = icmp ne i8 %call, 0, !dbg !9804
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !9805

land.rhs:                                         ; preds = %while.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !9806
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %call1), !dbg !9807
  %cmp = icmp eq i32 %call2, 4, !dbg !9808
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %1 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !9809
  br i1 %1, label %while.body, label %while.end, !dbg !9803

while.body:                                       ; preds = %land.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %agg.result), !dbg !9810
  br label %while.cond, !dbg !9803, !llvm.loop !9811

while.end:                                        ; preds = %land.end
  ret void, !dbg !9813
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !9814 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9815, metadata !DIExpression()), !dbg !9816
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9817
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !9818
  %cmp = icmp eq i32 %call, 2, !dbg !9819
  %conv = zext i1 %cmp to i32, !dbg !9819
  %conv1 = trunc i32 %conv to i8, !dbg !9818
  ret i8 %conv1, !dbg !9820
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next_nondebug(%struct.gimple_stmt_iterator* %i) #0 !dbg !9821 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !9822, metadata !DIExpression()), !dbg !9823
  br label %do.body, !dbg !9824

do.body:                                          ; preds = %land.end, %entry
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !9825
  call void @gsi_next(%struct.gimple_stmt_iterator* %0), !dbg !9827
  br label %do.cond, !dbg !9828

do.cond:                                          ; preds = %do.body
  %1 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !9829
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %1), !dbg !9830
  %tobool = icmp ne i8 %call, 0, !dbg !9830
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !9831

land.rhs:                                         ; preds = %do.cond
  %2 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !9832
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %2), !dbg !9833
  %call2 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %call1), !dbg !9834
  %conv = zext i8 %call2 to i32, !dbg !9834
  %tobool3 = icmp ne i32 %conv, 0, !dbg !9831
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %3 = phi i1 [ false, %do.cond ], [ %tobool3, %land.rhs ], !dbg !9835
  br i1 %3, label %do.body, label %do.end, !dbg !9828, !llvm.loop !9836

do.end:                                           ; preds = %land.end
  ret void, !dbg !9838
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %s) #0 !dbg !9839 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !9842, metadata !DIExpression()), !dbg !9843
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !9844
  %cmp = icmp eq %struct.gimple_seq_d* %0, null, !dbg !9845
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !9846

lor.rhs:                                          ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !9847
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !9848
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !9848
  %cmp1 = icmp eq %struct.gimple_seq_node_d* %2, null, !dbg !9849
  br label %lor.end, !dbg !9846

lor.end:                                          ; preds = %lor.rhs, %entry
  %3 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %3 to i32, !dbg !9846
  %conv = trunc i32 %lor.ext to i8, !dbg !9844
  ret i8 %conv, !dbg !9850
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %bb) #0 !dbg !9851 {
entry:
  %retval = alloca %struct.gimple_seq_d*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9852, metadata !DIExpression()), !dbg !9853
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9854
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !9854
  %1 = load i32, i32* %flags, align 8, !dbg !9854
  %and = and i32 %1, 512, !dbg !9854
  %tobool = icmp ne i32 %and, 0, !dbg !9854
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9854

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.27, i64 0, i64 0), i32 510, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9854
  br label %cond.end, !dbg !9854

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9854

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9854
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9855
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !9857
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !9858
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !9858
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !9855
  br i1 %tobool1, label %if.end, label %if.then, !dbg !9859

if.then:                                          ; preds = %cond.end
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %retval, align 8, !dbg !9860
  br label %return, !dbg !9860

if.end:                                           ; preds = %cond.end
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9861
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !9862
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !9863
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !9863
  %phi_nodes = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 1, !dbg !9864
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %phi_nodes, align 8, !dbg !9864
  store %struct.gimple_seq_d* %6, %struct.gimple_seq_d** %retval, align 8, !dbg !9865
  br label %return, !dbg !9865

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %retval, align 8, !dbg !9866
  ret %struct.gimple_seq_d* %7, !dbg !9866
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !9867 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9868, metadata !DIExpression()), !dbg !9869
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9870
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !9871
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !9872
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9872
  ret %union.tree_node* %1, !dbg !9873
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %gs, i64 %index) #0 !dbg !9874 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i64, align 8
  %pd = alloca %struct.phi_arg_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9877, metadata !DIExpression()), !dbg !9878
  store i64 %index, i64* %index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %index.addr, metadata !9879, metadata !DIExpression()), !dbg !9880
  call void @llvm.dbg.declare(metadata %struct.phi_arg_d** %pd, metadata !9881, metadata !DIExpression()), !dbg !9883
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9884
  %1 = load i64, i64* %index.addr, align 8, !dbg !9885
  %conv = trunc i64 %1 to i32, !dbg !9885
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %conv), !dbg !9886
  store %struct.phi_arg_d* %call, %struct.phi_arg_d** %pd, align 8, !dbg !9883
  %2 = load %struct.phi_arg_d*, %struct.phi_arg_d** %pd, align 8, !dbg !9887
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %2, i32 0, i32 0, !dbg !9888
  %call1 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %imm_use), !dbg !9889
  ret %union.tree_node* %call1, !dbg !9890
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !9891 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !9895, metadata !DIExpression()), !dbg !9896
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !9897, metadata !DIExpression()), !dbg !9898
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !9899
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !9899
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !9899
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9900
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !9901
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !9902
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9903
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !9904
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !9904
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !9905
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !9905
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9906
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !9907
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !9908
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9909
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 3, !dbg !9910
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !9911
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9912
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 2, !dbg !9913
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !9914
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !9915
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9916
  %iter_node2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 2, !dbg !9917
  %next3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node2, i32 0, i32 1, !dbg !9918
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next3, align 8, !dbg !9919
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9920
  %iter_node4 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %9, i32 0, i32 2, !dbg !9921
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node4, i32 0, i32 2, !dbg !9922
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !9923
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !9924
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9925
  %iter_node5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 2, !dbg !9926
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node5, i32 0, i32 3, !dbg !9927
  store %union.tree_node** null, %union.tree_node*** %use, align 8, !dbg !9928
  %11 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9929
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %11), !dbg !9931
  %tobool = icmp ne i8 %call, 0, !dbg !9931
  br i1 %tobool, label %if.then, label %if.end, !dbg !9932

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !9933
  br label %return, !dbg !9933

if.end:                                           ; preds = %entry
  %12 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9934
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %12, i32 0, i32 0, !dbg !9935
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !9935
  %14 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9936
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %13, %struct.immediate_use_iterator_d* %14), !dbg !9937
  %15 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9938
  %imm_use7 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %15, i32 0, i32 0, !dbg !9938
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use7, align 8, !dbg !9938
  %loc8 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %16, i32 0, i32 2, !dbg !9938
  %stmt9 = bitcast %union.anon* %loc8 to %union.gimple_statement_d**, !dbg !9938
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt9, align 8, !dbg !9938
  store %union.gimple_statement_d* %17, %union.gimple_statement_d** %retval, align 8, !dbg !9939
  br label %return, !dbg !9939

return:                                           ; preds = %if.end, %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !9940
  ret %union.gimple_statement_d* %18, !dbg !9940
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !9941 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !9946, metadata !DIExpression()), !dbg !9947
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9948
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !9949
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !9949
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9950
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !9951
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !9951
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !9952
  %conv = zext i1 %cmp to i32, !dbg !9952
  %conv1 = trunc i32 %conv to i8, !dbg !9953
  ret i8 %conv1, !dbg !9954
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !9955 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !9958, metadata !DIExpression()), !dbg !9959
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9960
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !9961
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !9961
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 1, !dbg !9962
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !9962
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9963
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %3, i32 0, i32 3, !dbg !9964
  store %struct.ssa_use_operand_d* %2, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !9965
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9966
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !9967
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !9967
  ret %struct.ssa_use_operand_d* %5, !dbg !9968
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !9969 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !9970, metadata !DIExpression()), !dbg !9971
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9972
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !9973
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !9973
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9974
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 2, !dbg !9975
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %iter_node, !dbg !9976
  %conv = zext i1 %cmp to i32, !dbg !9976
  %conv1 = trunc i32 %conv to i8, !dbg !9977
  ret i8 %conv1, !dbg !9978
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #0 !dbg !9979 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !9982, metadata !DIExpression()), !dbg !9983
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !9984, metadata !DIExpression()), !dbg !9985
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !9986
  call void @delink_imm_use(%struct.ssa_use_operand_d* %0), !dbg !9987
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !9988
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !9989
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 3, !dbg !9990
  %3 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !9990
  store %union.tree_node* %1, %union.tree_node** %3, align 8, !dbg !9991
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !9992
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !9993
  call void @link_imm_use(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !9994
  ret void, !dbg !9995
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !9996 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !9997, metadata !DIExpression()), !dbg !9998
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9999
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 3, !dbg !10000
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !10000
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !10001
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !10002
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !10003
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !10004
  %call = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !10006
  %tobool = icmp ne i8 %call, 0, !dbg !10006
  br i1 %tobool, label %if.then, label %if.else, !dbg !10007

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10008
  br label %return, !dbg !10008

if.else:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !10009
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !10011
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !10011
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !10012
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !10012
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !10013
  %next_imm_name2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 3, !dbg !10014
  store %struct.ssa_use_operand_d* %6, %struct.ssa_use_operand_d** %next_imm_name2, align 8, !dbg !10015
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !10016
  %imm_use3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 0, !dbg !10017
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use3, align 8, !dbg !10017
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10018
  br label %return, !dbg !10018

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10019
  ret %struct.ssa_use_operand_d* %10, !dbg !10019
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !10020 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !10023, metadata !DIExpression()), !dbg !10024
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !10025
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 2, !dbg !10026
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 1, !dbg !10027
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !10027
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !10028
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !10029
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !10030
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !10031
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !10033
  %tobool = icmp ne i8 %call, 0, !dbg !10033
  br i1 %tobool, label %if.then, label %if.end4, !dbg !10034

if.then:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !10035
  %iter_node1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 2, !dbg !10038
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node1, i32 0, i32 0, !dbg !10039
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !10039
  %cmp = icmp ne %struct.ssa_use_operand_d* %5, null, !dbg !10040
  br i1 %cmp, label %if.then2, label %if.end, !dbg !10041

if.then2:                                         ; preds = %if.then
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !10042
  %iter_node3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 2, !dbg !10043
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node3), !dbg !10044
  br label %if.end, !dbg !10044

if.end:                                           ; preds = %if.then2, %if.then
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !10045
  br label %return, !dbg !10045

if.end4:                                          ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !10046
  %imm_use5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !10047
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use5, align 8, !dbg !10047
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !10048
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %8, %struct.immediate_use_iterator_d* %9), !dbg !10049
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !10050
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 0, !dbg !10050
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !10050
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 2, !dbg !10050
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !10050
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10050
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %retval, align 8, !dbg !10051
  br label %return, !dbg !10051

return:                                           ; preds = %if.end4, %if.end
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !10052
  ret %union.gimple_statement_d* %13, !dbg !10052
}

declare dso_local void @remove_phi_node(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local void @redirect_edge_pred(%struct.edge_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !10053 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10056, metadata !DIExpression()), !dbg !10057
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !10058, metadata !DIExpression()), !dbg !10059
  %0 = load i32, i32* %index.addr, align 4, !dbg !10060
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10060
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !10060
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !10060
  %2 = load i32, i32* %capacity, align 8, !dbg !10060
  %cmp = icmp ule i32 %0, %2, !dbg !10060
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10060

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10060
  br label %cond.end, !dbg !10060

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10060

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10060
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10061
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !10062
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !10063
  %4 = load i32, i32* %index.addr, align 4, !dbg !10064
  %idxprom = zext i32 %4 to i64, !dbg !10061
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !10061
  ret %struct.phi_arg_d* %arrayidx, !dbg !10065
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !10066 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !10069, metadata !DIExpression()), !dbg !10070
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !10071
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !10072
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !10072
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !10073
  ret %union.tree_node* %2, !dbg !10074
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_use_stmts_after(%struct.ssa_use_operand_d* %head, %struct.immediate_use_iterator_d* %imm) #0 !dbg !10075 {
entry:
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %last_p = alloca %struct.ssa_use_operand_d*, align 8
  %head_stmt = alloca %union.gimple_statement_d*, align 8
  %use = alloca %union.tree_node*, align 8
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  %flag = alloca i32, align 4
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !10078, metadata !DIExpression()), !dbg !10079
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !10080, metadata !DIExpression()), !dbg !10081
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !10082, metadata !DIExpression()), !dbg !10083
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p, metadata !10084, metadata !DIExpression()), !dbg !10085
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !10086
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !10085
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %head_stmt, metadata !10087, metadata !DIExpression()), !dbg !10088
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !10089
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 2, !dbg !10089
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !10089
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10089
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %head_stmt, align 8, !dbg !10088
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !10090, metadata !DIExpression()), !dbg !10091
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !10092
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %3), !dbg !10092
  store %union.tree_node* %call, %union.tree_node** %use, align 8, !dbg !10091
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !10093, metadata !DIExpression()), !dbg !10106
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !10107, metadata !DIExpression()), !dbg !10108
  %4 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !10109
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !10110
  %conv = zext i8 %call1 to i32, !dbg !10110
  %tobool = icmp ne i32 %conv, 0, !dbg !10110
  %5 = zext i1 %tobool to i64, !dbg !10110
  %cond = select i1 %tobool, i32 1, i32 4, !dbg !10110
  store i32 %cond, i32* %flag, align 4, !dbg !10111
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !10112
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !10114
  %cmp = icmp eq i32 %call2, 16, !dbg !10115
  br i1 %cmp, label %if.then, label %if.else, !dbg !10116

if.then:                                          ; preds = %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !10117
  %8 = load i32, i32* %flag, align 4, !dbg !10117
  %call4 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %7, i32 %8), !dbg !10117
  store %struct.ssa_use_operand_d* %call4, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10117
  br label %for.cond, !dbg !10117

for.cond:                                         ; preds = %for.inc, %if.then
  %call5 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !10120
  %tobool6 = icmp ne i8 %call5, 0, !dbg !10120
  %lnot = xor i1 %tobool6, true, !dbg !10120
  br i1 %lnot, label %for.body, label %for.end, !dbg !10117

for.body:                                         ; preds = %for.cond
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10122
  %call7 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %9), !dbg !10122
  %10 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !10124
  %cmp8 = icmp eq %union.tree_node* %call7, %10, !dbg !10125
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !10126

if.then10:                                        ; preds = %for.body
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10127
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !10128
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !10129
  %call11 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %11, %struct.ssa_use_operand_d* %12, %struct.ssa_use_operand_d* %13), !dbg !10130
  store %struct.ssa_use_operand_d* %call11, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !10131
  br label %if.end, !dbg !10132

if.end:                                           ; preds = %if.then10, %for.body
  br label %for.inc, !dbg !10124

for.inc:                                          ; preds = %if.end
  %call12 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !10120
  store %struct.ssa_use_operand_d* %call12, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10120
  br label %for.cond, !dbg !10120, !llvm.loop !10133

for.end:                                          ; preds = %for.cond
  br label %if.end44, !dbg !10135

if.else:                                          ; preds = %entry
  %14 = load i32, i32* %flag, align 4, !dbg !10136
  %cmp13 = icmp eq i32 %14, 1, !dbg !10139
  br i1 %cmp13, label %if.then15, label %if.else31, !dbg !10140

if.then15:                                        ; preds = %if.else
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !10141
  %16 = load i32, i32* %flag, align 4, !dbg !10141
  %call16 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %15, i32 %16), !dbg !10141
  store %struct.ssa_use_operand_d* %call16, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10141
  br label %for.cond17, !dbg !10141

for.cond17:                                       ; preds = %for.inc28, %if.then15
  %call18 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !10144
  %tobool19 = icmp ne i8 %call18, 0, !dbg !10144
  %lnot20 = xor i1 %tobool19, true, !dbg !10144
  br i1 %lnot20, label %for.body21, label %for.end30, !dbg !10141

for.body21:                                       ; preds = %for.cond17
  %17 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10146
  %call22 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %17), !dbg !10146
  %18 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !10148
  %cmp23 = icmp eq %union.tree_node* %call22, %18, !dbg !10149
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !10150

if.then25:                                        ; preds = %for.body21
  %19 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10151
  %20 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !10152
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !10153
  %call26 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %19, %struct.ssa_use_operand_d* %20, %struct.ssa_use_operand_d* %21), !dbg !10154
  store %struct.ssa_use_operand_d* %call26, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !10155
  br label %if.end27, !dbg !10156

if.end27:                                         ; preds = %if.then25, %for.body21
  br label %for.inc28, !dbg !10148

for.inc28:                                        ; preds = %if.end27
  %call29 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !10144
  store %struct.ssa_use_operand_d* %call29, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10144
  br label %for.cond17, !dbg !10144, !llvm.loop !10157

for.end30:                                        ; preds = %for.cond17
  br label %if.end43, !dbg !10159

if.else31:                                        ; preds = %if.else
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !10160
  %call32 = call %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %22), !dbg !10162
  store %struct.ssa_use_operand_d* %call32, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10163
  %cmp33 = icmp ne %struct.ssa_use_operand_d* %call32, null, !dbg !10164
  br i1 %cmp33, label %if.then35, label %if.end42, !dbg !10165

if.then35:                                        ; preds = %if.else31
  %23 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10166
  %call36 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %23), !dbg !10166
  %24 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !10169
  %cmp37 = icmp eq %union.tree_node* %call36, %24, !dbg !10170
  br i1 %cmp37, label %if.then39, label %if.end41, !dbg !10171

if.then39:                                        ; preds = %if.then35
  %25 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10172
  %26 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !10173
  %27 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !10174
  %call40 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %25, %struct.ssa_use_operand_d* %26, %struct.ssa_use_operand_d* %27), !dbg !10175
  store %struct.ssa_use_operand_d* %call40, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !10176
  br label %if.end41, !dbg !10177

if.end41:                                         ; preds = %if.then39, %if.then35
  br label %if.end42, !dbg !10178

if.end42:                                         ; preds = %if.end41, %if.else31
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %for.end30
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %for.end
  %28 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !10179
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %28, i32 0, i32 2, !dbg !10181
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !10182
  %29 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !10182
  %cmp45 = icmp ne %struct.ssa_use_operand_d* %29, null, !dbg !10183
  br i1 %cmp45, label %if.then47, label %if.end49, !dbg !10184

if.then47:                                        ; preds = %if.end44
  %30 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !10185
  %iter_node48 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %30, i32 0, i32 2, !dbg !10186
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node48), !dbg !10187
  br label %if.end49, !dbg !10187

if.end49:                                         ; preds = %if.then47, %if.end44
  %31 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !10188
  %iter_node50 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %31, i32 0, i32 2, !dbg !10189
  %32 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !10190
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %iter_node50, %struct.ssa_use_operand_d* %32), !dbg !10191
  ret void, !dbg !10192
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !10193 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !10197, metadata !DIExpression()), !dbg !10198
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !10199, metadata !DIExpression()), !dbg !10200
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !10201, metadata !DIExpression()), !dbg !10202
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !10203, metadata !DIExpression()), !dbg !10204
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !10205
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !10206
  store %union.tree_node* %call, %union.tree_node** %phi_def, align 8, !dbg !10204
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !10207, metadata !DIExpression()), !dbg !10208
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10209
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !10210
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10211
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !10212
  store i8 0, i8* %done, align 8, !dbg !10213
  %3 = load i32, i32* %flags.addr, align 4, !dbg !10214
  %and = and i32 %3, 5, !dbg !10214
  %cmp = icmp ne i32 %and, 0, !dbg !10214
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10214

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.27, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10214
  br label %cond.end, !dbg !10214

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10214

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10214
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !10215
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !10216
  %conv = zext i8 %call1 to i32, !dbg !10216
  %tobool = icmp ne i32 %conv, 0, !dbg !10216
  %5 = zext i1 %tobool to i64, !dbg !10216
  %cond2 = select i1 %tobool, i32 1, i32 4, !dbg !10216
  store i32 %cond2, i32* %comp, align 4, !dbg !10217
  %6 = load i32, i32* %flags.addr, align 4, !dbg !10218
  %7 = load i32, i32* %comp, align 4, !dbg !10220
  %and3 = and i32 %6, %7, !dbg !10221
  %cmp4 = icmp eq i32 %and3, 0, !dbg !10222
  br i1 %cmp4, label %if.then, label %if.end, !dbg !10223

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10224
  %done6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !10226
  store i8 1, i8* %done6, align 8, !dbg !10227
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10228
  br label %return, !dbg !10228

if.end:                                           ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !10229
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10230
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 6, !dbg !10231
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !10232
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !10233
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %11), !dbg !10234
  %12 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10235
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %12, i32 0, i32 5, !dbg !10236
  store i32 %call7, i32* %num_phi, align 4, !dbg !10237
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10238
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 1, !dbg !10239
  store i32 2, i32* %iter_type, align 4, !dbg !10240
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10241
  %call8 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %14), !dbg !10242
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10243
  br label %return, !dbg !10243

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10244
  ret %struct.ssa_use_operand_d* %15, !dbg !10244
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !10245 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !10250, metadata !DIExpression()), !dbg !10251
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10252
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !10253
  %1 = load i8, i8* %done, align 8, !dbg !10253
  ret i8 %1, !dbg !10254
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p) #0 !dbg !10255 {
entry:
  %use_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %last_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p.addr, metadata !10258, metadata !DIExpression()), !dbg !10259
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !10260, metadata !DIExpression()), !dbg !10261
  store %struct.ssa_use_operand_d* %last_p, %struct.ssa_use_operand_d** %last_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p.addr, metadata !10262, metadata !DIExpression()), !dbg !10263
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !10264
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !10266
  %cmp = icmp ne %struct.ssa_use_operand_d* %0, %1, !dbg !10267
  br i1 %cmp, label %if.then, label %if.end3, !dbg !10268

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !10269
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !10272
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !10272
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !10273
  %cmp1 = icmp eq %struct.ssa_use_operand_d* %3, %4, !dbg !10274
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !10275

if.then2:                                         ; preds = %if.then
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !10276
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !10277
  br label %if.end, !dbg !10278

if.else:                                          ; preds = %if.then
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !10279
  call void @delink_imm_use(%struct.ssa_use_operand_d* %6), !dbg !10281
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !10282
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !10283
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d* %8), !dbg !10284
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !10285
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !10286
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end3, !dbg !10287

if.end3:                                          ; preds = %if.end, %entry
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !10288
  ret %struct.ssa_use_operand_d* %10, !dbg !10289
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !10290 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !10293, metadata !DIExpression()), !dbg !10294
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !10295, metadata !DIExpression()), !dbg !10296
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10297
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !10299
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !10299
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !10297
  br i1 %tobool, label %if.then, label %if.end, !dbg !10300

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10301
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !10301
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !10301
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !10301
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10303
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10304
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !10305
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !10305
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !10306
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !10306
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10307
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !10308
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !10309
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10310
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10311
  br label %return, !dbg !10311

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10312
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !10314
  %10 = load i32, i32* %phi_i, align 8, !dbg !10314
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10315
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !10316
  %12 = load i32, i32* %num_phi, align 4, !dbg !10316
  %cmp = icmp slt i32 %10, %12, !dbg !10317
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !10318

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10319
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !10319
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !10319
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10319
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !10319
  %16 = load i32, i32* %phi_i5, align 8, !dbg !10319
  %inc = add nsw i32 %16, 1, !dbg !10319
  store i32 %inc, i32* %phi_i5, align 8, !dbg !10319
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !10319
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10321
  br label %return, !dbg !10321

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10322
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !10323
  store i8 1, i8* %done, align 8, !dbg !10324
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10325
  br label %return, !dbg !10325

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10326
  ret %struct.ssa_use_operand_d* %18, !dbg !10326
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !10327 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !10328, metadata !DIExpression()), !dbg !10329
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !10330, metadata !DIExpression()), !dbg !10331
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !10332, metadata !DIExpression()), !dbg !10333
  %0 = load i32, i32* %flags.addr, align 4, !dbg !10334
  %and = and i32 %0, 10, !dbg !10334
  %cmp = icmp eq i32 %and, 0, !dbg !10334
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !10334

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !10334
  %and1 = and i32 %1, 1, !dbg !10334
  %tobool = icmp ne i32 %and1, 0, !dbg !10334
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !10334

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.27, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10334
  br label %cond.end, !dbg !10334

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !10334

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10334
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10335
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10336
  %4 = load i32, i32* %flags.addr, align 4, !dbg !10337
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !10338
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10339
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !10340
  store i32 2, i32* %iter_type, align 4, !dbg !10341
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10342
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !10343
  ret %struct.ssa_use_operand_d* %call, !dbg !10344
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %g) #0 !dbg !10345 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %ops = alloca %struct.use_optype_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10348, metadata !DIExpression()), !dbg !10349
  call void @llvm.dbg.declare(metadata %struct.use_optype_d** %ops, metadata !10350, metadata !DIExpression()), !dbg !10351
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10352
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !10354
  %tobool = icmp ne i8 %call, 0, !dbg !10354
  br i1 %tobool, label %if.end, label %if.then, !dbg !10355

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10356
  br label %return, !dbg !10356

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10357
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !10358
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !10359
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !10360
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !10360
  store %struct.use_optype_d* %2, %struct.use_optype_d** %ops, align 8, !dbg !10361
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !10362
  %tobool1 = icmp ne %struct.use_optype_d* %3, null, !dbg !10362
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !10364

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !10365
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %4, i32 0, i32 1, !dbg !10365
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use_ptr, i32 0, i32 3, !dbg !10366
  %5 = load %union.tree_node**, %union.tree_node*** %use, align 8, !dbg !10366
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10367
  %gsmembase = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_with_memory_ops_base*, !dbg !10368
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !10369
  %cmp = icmp eq %union.tree_node** %5, %vuse, !dbg !10370
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !10371

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !10372
  %use_ptr3 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %7, i32 0, i32 1, !dbg !10372
  store %struct.ssa_use_operand_d* %use_ptr3, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10373
  br label %return, !dbg !10373

if.end4:                                          ; preds = %land.lhs.true, %if.end
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10374
  br label %return, !dbg !10374

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10375
  ret %struct.ssa_use_operand_d* %8, !dbg !10375
}

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !10376 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !10379, metadata !DIExpression()), !dbg !10380
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10381
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !10383
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !10383
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !10384
  br i1 %cmp, label %if.then, label %if.end, !dbg !10385

if.then:                                          ; preds = %entry
  br label %return, !dbg !10386

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10387
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !10388
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !10388
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10389
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !10390
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !10390
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !10391
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !10392
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10393
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !10394
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !10394
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10395
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !10396
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !10396
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !10397
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !10398
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10399
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !10400
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !10401
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10402
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !10403
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !10404
  br label %return, !dbg !10405

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !10405
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !10406 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !10409, metadata !DIExpression()), !dbg !10410
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !10411, metadata !DIExpression()), !dbg !10412
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !10413
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10414
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !10415
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !10416
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !10417
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !10418
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !10418
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10419
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !10420
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !10421
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10422
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !10423
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !10424
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !10424
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !10425
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !10426
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10427
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !10428
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !10429
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !10430
  ret void, !dbg !10431
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !10432 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !10435, metadata !DIExpression()), !dbg !10436
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10437
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !10438
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !10439
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10440
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %1, i32 0, i32 3, !dbg !10441
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !10442
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10443
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 1, !dbg !10444
  store i32 0, i32* %iter_type, align 4, !dbg !10445
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10446
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 4, !dbg !10447
  store i32 0, i32* %phi_i, align 8, !dbg !10448
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10449
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 5, !dbg !10450
  store i32 0, i32* %num_phi, align 4, !dbg !10451
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10452
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 6, !dbg !10453
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !10454
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10455
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 0, !dbg !10456
  store i8 1, i8* %done, align 8, !dbg !10457
  ret void, !dbg !10458
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !10459 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10460, metadata !DIExpression()), !dbg !10461
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10462
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !10463
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !10464
  %1 = load i32, i32* %nargs, align 4, !dbg !10464
  ret i32 %1, !dbg !10465
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !10466 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10469, metadata !DIExpression()), !dbg !10470
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !10471, metadata !DIExpression()), !dbg !10472
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10473
  %1 = load i32, i32* %i.addr, align 4, !dbg !10474
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !10475
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !10476
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !10477
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !10478 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !10481, metadata !DIExpression()), !dbg !10482
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !10483, metadata !DIExpression()), !dbg !10484
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !10485, metadata !DIExpression()), !dbg !10486
  %0 = load i32, i32* %flags.addr, align 4, !dbg !10487
  %and = and i32 %0, 8, !dbg !10487
  %tobool = icmp ne i32 %and, 0, !dbg !10487
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !10487

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !10487
  %and1 = and i32 %1, 2, !dbg !10487
  %tobool2 = icmp ne i32 %and1, 0, !dbg !10487
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !10487

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !10487
  %and3 = and i32 %2, 4, !dbg !10487
  %tobool4 = icmp ne i32 %and3, 0, !dbg !10487
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !10487

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !10487
  %and6 = and i32 %3, 1, !dbg !10487
  %tobool7 = icmp ne i32 %and6, 0, !dbg !10487
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !10487

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.27, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10487
  br label %cond.end, !dbg !10487

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !10487

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10487
  %4 = load i32, i32* %flags.addr, align 4, !dbg !10488
  %and8 = and i32 %4, 10, !dbg !10489
  %tobool9 = icmp ne i32 %and8, 0, !dbg !10489
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !10490

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10491
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !10492
  br label %cond.end12, !dbg !10490

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !10490

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !10490
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10493
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !10494
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !10495
  %7 = load i32, i32* %flags.addr, align 4, !dbg !10496
  %and14 = and i32 %7, 8, !dbg !10498
  %tobool15 = icmp ne i32 %and14, 0, !dbg !10498
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !10499

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10500
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !10501
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !10501
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !10500
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !10502

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10503
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !10504
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !10505
  br i1 %cmp, label %if.then, label %if.end, !dbg !10506

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10507
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !10508
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !10508
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !10509
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !10509
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10510
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !10511
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !10512
  br label %if.end, !dbg !10510

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !10513
  %and23 = and i32 %15, 5, !dbg !10514
  %tobool24 = icmp ne i32 %and23, 0, !dbg !10514
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !10515

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10516
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !10517
  br label %cond.end28, !dbg !10515

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !10515

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !10515
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10518
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !10519
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !10520
  %18 = load i32, i32* %flags.addr, align 4, !dbg !10521
  %and30 = and i32 %18, 4, !dbg !10523
  %tobool31 = icmp ne i32 %and30, 0, !dbg !10523
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !10524

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10525
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !10526
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !10526
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !10525
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !10527

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10528
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !10529
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !10530
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !10531

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10532
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !10533
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !10533
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !10534
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !10534
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10535
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !10536
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !10537
  br label %if.end42, !dbg !10535

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10538
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !10539
  store i8 0, i8* %done, align 8, !dbg !10540
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10541
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !10542
  store i32 0, i32* %phi_i, align 8, !dbg !10543
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10544
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !10545
  store i32 0, i32* %num_phi, align 4, !dbg !10546
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10547
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !10548
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !10549
  ret void, !dbg !10550
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !10551 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10554, metadata !DIExpression()), !dbg !10555
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10556
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !10558
  %tobool = icmp ne i8 %call, 0, !dbg !10558
  br i1 %tobool, label %if.end, label %if.then, !dbg !10559

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !10560
  br label %return, !dbg !10560

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10561
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !10562
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !10563
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !10564
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !10564
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !10565
  br label %return, !dbg !10565

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !10566
  ret %struct.def_optype_d* %3, !dbg !10566
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !10567 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10568, metadata !DIExpression()), !dbg !10569
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10570
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !10572
  %tobool = icmp ne i8 %call, 0, !dbg !10572
  br i1 %tobool, label %if.end, label %if.then, !dbg !10573

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10574
  br label %return, !dbg !10574

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10575
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !10576
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !10577
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !10577
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !10578
  br label %return, !dbg !10578

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10579
  ret %union.tree_node* %3, !dbg !10579
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !10580 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10583, metadata !DIExpression()), !dbg !10584
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10585
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !10587
  %tobool = icmp ne i8 %call, 0, !dbg !10587
  br i1 %tobool, label %if.end, label %if.then, !dbg !10588

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !10589
  br label %return, !dbg !10589

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10590
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !10591
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !10592
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !10593
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !10593
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !10594
  br label %return, !dbg !10594

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !10595
  ret %struct.use_optype_d* %3, !dbg !10595
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !10596 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10597, metadata !DIExpression()), !dbg !10598
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10599
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !10601
  %tobool = icmp ne i8 %call, 0, !dbg !10601
  br i1 %tobool, label %if.end, label %if.then, !dbg !10602

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10603
  br label %return, !dbg !10603

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10604
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !10605
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !10606
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !10606
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !10607
  br label %return, !dbg !10607

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10608
  ret %union.tree_node* %3, !dbg !10608
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !10609 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10610, metadata !DIExpression()), !dbg !10611
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10612
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !10613
  %cmp = icmp uge i32 %call, 6, !dbg !10614
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !10615

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10616
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !10617
  %cmp2 = icmp ule i32 %call1, 9, !dbg !10618
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !10619
  %land.ext = zext i1 %2 to i32, !dbg !10615
  %conv = trunc i32 %land.ext to i8, !dbg !10613
  ret i8 %conv, !dbg !10620
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) #0 !dbg !10621 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %root = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !10624, metadata !DIExpression()), !dbg !10625
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !10626, metadata !DIExpression()), !dbg !10627
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %root, metadata !10628, metadata !DIExpression()), !dbg !10629
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !10630
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !10630
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !10632

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !10633
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !10633
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !10633
  %bf.load = load i64, i64* %2, align 8, !dbg !10633
  %bf.clear = and i64 %bf.load, 65535, !dbg !10633
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10633
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !10634
  br i1 %cmp, label %if.then, label %if.else, !dbg !10635

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10636
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 0, !dbg !10637
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !10638
  br label %if.end, !dbg !10636

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !10639
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !10639
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !10639
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %root, align 8, !dbg !10641
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10642
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %root, align 8, !dbg !10643
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d* %6), !dbg !10644
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !10645
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cleanup_empty_eh(%struct.eh_landing_pad_d* %lp) #0 !dbg !10646 {
entry:
  %retval = alloca i8, align 1
  %lp.addr = alloca %struct.eh_landing_pad_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %resx = alloca %union.gimple_statement_d*, align 8
  %new_region = alloca %struct.eh_region_d*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %e_out = alloca %struct.edge_def*, align 8
  %has_non_eh_pred = alloca i8, align 1
  %new_lp_nr = alloca i32, align 4
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp34 = alloca %struct.edge_iterator, align 8
  %tmp51 = alloca %struct.edge_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %tmp70 = alloca %struct.edge_iterator, align 8
  %stmt81 = alloca %union.gimple_statement_d*, align 8
  store %struct.eh_landing_pad_d* %lp, %struct.eh_landing_pad_d** %lp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp.addr, metadata !10647, metadata !DIExpression()), !dbg !10648
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !10649, metadata !DIExpression()), !dbg !10650
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10651
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !10651
  %1 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !10651
  %post_landing_pad = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %1, i32 0, i32 2, !dbg !10651
  %2 = load %union.tree_node*, %union.tree_node** %post_landing_pad, align 8, !dbg !10651
  %call = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr, %union.tree_node* %2), !dbg !10651
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb, align 8, !dbg !10650
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !10652, metadata !DIExpression()), !dbg !10653
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %resx, metadata !10654, metadata !DIExpression()), !dbg !10655
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %new_region, metadata !10656, metadata !DIExpression()), !dbg !10657
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !10658, metadata !DIExpression()), !dbg !10659
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !10660, metadata !DIExpression()), !dbg !10661
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_out, metadata !10662, metadata !DIExpression()), !dbg !10663
  call void @llvm.dbg.declare(metadata i8* %has_non_eh_pred, metadata !10664, metadata !DIExpression()), !dbg !10665
  call void @llvm.dbg.declare(metadata i32* %new_lp_nr, metadata !10666, metadata !DIExpression()), !dbg !10667
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10668
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !10668
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !10668
  %tobool = icmp ne %struct.VEC_edge_gc* %4, null, !dbg !10668
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10668

cond.true:                                        ; preds = %entry
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10668
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 1, !dbg !10668
  %6 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !10668
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %6, i32 0, i32 0, !dbg !10668
  br label %cond.end, !dbg !10668

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10668

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10668
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !10668
  switch i32 %call2, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
  ], !dbg !10669

sw.bb:                                            ; preds = %cond.end
  store %struct.edge_def* null, %struct.edge_def** %e_out, align 8, !dbg !10670
  br label %sw.epilog, !dbg !10672

sw.bb3:                                           ; preds = %cond.end
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10673
  %succs4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 1, !dbg !10673
  %8 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs4, align 8, !dbg !10673
  %tobool5 = icmp ne %struct.VEC_edge_gc* %8, null, !dbg !10673
  br i1 %tobool5, label %cond.true6, label %cond.false9, !dbg !10673

cond.true6:                                       ; preds = %sw.bb3
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10673
  %succs7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 1, !dbg !10673
  %10 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs7, align 8, !dbg !10673
  %base8 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %10, i32 0, i32 0, !dbg !10673
  br label %cond.end10, !dbg !10673

cond.false9:                                      ; preds = %sw.bb3
  br label %cond.end10, !dbg !10673

cond.end10:                                       ; preds = %cond.false9, %cond.true6
  %cond11 = phi %struct.VEC_edge_base* [ %base8, %cond.true6 ], [ null, %cond.false9 ], !dbg !10673
  %call12 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond11, i32 0), !dbg !10673
  store %struct.edge_def* %call12, %struct.edge_def** %e_out, align 8, !dbg !10674
  br label %sw.epilog, !dbg !10675

sw.default:                                       ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !10676
  br label %return, !dbg !10676

sw.epilog:                                        ; preds = %cond.end10, %sw.bb
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10677
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %11), !dbg !10678
  %12 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !10678
  %13 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !10678
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 24, i1 false), !dbg !10678
  %call13 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !10679
  %tobool14 = icmp ne i8 %call13, 0, !dbg !10679
  br i1 %tobool14, label %if.end, label %land.lhs.true, !dbg !10681

land.lhs.true:                                    ; preds = %sw.epilog
  %call15 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !10682
  %call16 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %call15), !dbg !10683
  %conv = zext i8 %call16 to i32, !dbg !10683
  %tobool17 = icmp ne i32 %conv, 0, !dbg !10683
  br i1 %tobool17, label %if.then, label %if.end, !dbg !10684

if.then:                                          ; preds = %land.lhs.true
  call void @gsi_next_nondebug(%struct.gimple_stmt_iterator* %gsi), !dbg !10685
  br label %if.end, !dbg !10685

if.end:                                           ; preds = %if.then, %land.lhs.true, %sw.epilog
  %call18 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !10686
  %tobool19 = icmp ne i8 %call18, 0, !dbg !10686
  br i1 %tobool19, label %if.then20, label %if.end22, !dbg !10688

if.then20:                                        ; preds = %if.end
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10689
  %15 = load %struct.edge_def*, %struct.edge_def** %e_out, align 8, !dbg !10690
  %16 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !10691
  %call21 = call zeroext i8 @cleanup_empty_eh_unsplit(%struct.basic_block_def* %14, %struct.edge_def* %15, %struct.eh_landing_pad_d* %16), !dbg !10692
  store i8 %call21, i8* %retval, align 1, !dbg !10693
  br label %return, !dbg !10693

if.end22:                                         ; preds = %if.end
  %call23 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !10694
  store %union.gimple_statement_d* %call23, %union.gimple_statement_d** %resx, align 8, !dbg !10695
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %resx, align 8, !dbg !10696
  %call24 = call zeroext i8 @is_gimple_resx(%union.gimple_statement_d* %17), !dbg !10698
  %tobool25 = icmp ne i8 %call24, 0, !dbg !10698
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !10699

if.then26:                                        ; preds = %if.end22
  store i8 0, i8* %retval, align 1, !dbg !10700
  br label %return, !dbg !10700

if.end27:                                         ; preds = %if.end22
  %call28 = call zeroext i8 @gsi_one_before_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !10701
  %tobool29 = icmp ne i8 %call28, 0, !dbg !10701
  br i1 %tobool29, label %cond.false31, label %cond.true30, !dbg !10701

cond.true30:                                      ; preds = %if.end27
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 3729, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10701
  br label %cond.end32, !dbg !10701

cond.false31:                                     ; preds = %if.end27
  br label %cond.end32, !dbg !10701

cond.end32:                                       ; preds = %cond.false31, %cond.true30
  %cond33 = phi i32 [ 0, %cond.true30 ], [ 0, %cond.false31 ], !dbg !10701
  store i8 0, i8* %has_non_eh_pred, align 1, !dbg !10702
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10703
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 0, !dbg !10703
  %call35 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !10703
  %19 = bitcast %struct.edge_iterator* %tmp34 to { i32, %struct.VEC_edge_gc** }*, !dbg !10703
  %20 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %19, i32 0, i32 0, !dbg !10703
  %21 = extractvalue { i32, %struct.VEC_edge_gc** } %call35, 0, !dbg !10703
  store i32 %21, i32* %20, align 8, !dbg !10703
  %22 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %19, i32 0, i32 1, !dbg !10703
  %23 = extractvalue { i32, %struct.VEC_edge_gc** } %call35, 1, !dbg !10703
  store %struct.VEC_edge_gc** %23, %struct.VEC_edge_gc*** %22, align 8, !dbg !10703
  %24 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !10703
  %25 = bitcast %struct.edge_iterator* %tmp34 to i8*, !dbg !10703
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 16, i1 false), !dbg !10703
  br label %for.cond, !dbg !10703

for.cond:                                         ; preds = %for.inc, %cond.end32
  %26 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !10705
  %27 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %26, i32 0, i32 0, !dbg !10705
  %28 = load i32, i32* %27, align 8, !dbg !10705
  %29 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %26, i32 0, i32 1, !dbg !10705
  %30 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %29, align 8, !dbg !10705
  %call36 = call zeroext i8 @ei_cond(i32 %28, %struct.VEC_edge_gc** %30, %struct.edge_def** %e), !dbg !10705
  %tobool37 = icmp ne i8 %call36, 0, !dbg !10703
  br i1 %tobool37, label %for.body, label %for.end, !dbg !10703

for.body:                                         ; preds = %for.cond
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10707
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %31, i32 0, i32 7, !dbg !10709
  %32 = load i32, i32* %flags, align 8, !dbg !10709
  %and = and i32 %32, 8, !dbg !10710
  %tobool38 = icmp ne i32 %and, 0, !dbg !10710
  br i1 %tobool38, label %if.end40, label %if.then39, !dbg !10711

if.then39:                                        ; preds = %for.body
  store i8 1, i8* %has_non_eh_pred, align 1, !dbg !10712
  br label %if.end40, !dbg !10713

if.end40:                                         ; preds = %if.then39, %for.body
  br label %for.inc, !dbg !10714

for.inc:                                          ; preds = %if.end40
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !10705
  br label %for.cond, !dbg !10705, !llvm.loop !10715

for.end:                                          ; preds = %for.cond
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %resx, align 8, !dbg !10717
  %call41 = call i32 @lookup_stmt_eh_lp(%union.gimple_statement_d* %33), !dbg !10718
  store i32 %call41, i32* %new_lp_nr, align 4, !dbg !10719
  %34 = load i32, i32* %new_lp_nr, align 4, !dbg !10720
  %call42 = call %struct.eh_region_d* @get_eh_region_from_lp_number(i32 %34), !dbg !10721
  store %struct.eh_region_d* %call42, %struct.eh_region_d** %new_region, align 8, !dbg !10722
  %35 = load %struct.eh_region_d*, %struct.eh_region_d** %new_region, align 8, !dbg !10723
  %cmp = icmp eq %struct.eh_region_d* %35, null, !dbg !10725
  br i1 %cmp, label %if.then44, label %if.end66, !dbg !10726

if.then44:                                        ; preds = %for.end
  %36 = load %struct.edge_def*, %struct.edge_def** %e_out, align 8, !dbg !10727
  %cmp45 = icmp eq %struct.edge_def* %36, null, !dbg !10727
  br i1 %cmp45, label %cond.false48, label %cond.true47, !dbg !10727

cond.true47:                                      ; preds = %if.then44
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 3748, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10727
  br label %cond.end49, !dbg !10727

cond.false48:                                     ; preds = %if.then44
  br label %cond.end49, !dbg !10727

cond.end49:                                       ; preds = %cond.false48, %cond.true47
  %cond50 = phi i32 [ 0, %cond.true47 ], [ 0, %cond.false48 ], !dbg !10727
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10729
  %preds52 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 0, !dbg !10729
  %call53 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds52), !dbg !10729
  %38 = bitcast %struct.edge_iterator* %tmp51 to { i32, %struct.VEC_edge_gc** }*, !dbg !10729
  %39 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %38, i32 0, i32 0, !dbg !10729
  %40 = extractvalue { i32, %struct.VEC_edge_gc** } %call53, 0, !dbg !10729
  store i32 %40, i32* %39, align 8, !dbg !10729
  %41 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %38, i32 0, i32 1, !dbg !10729
  %42 = extractvalue { i32, %struct.VEC_edge_gc** } %call53, 1, !dbg !10729
  store %struct.VEC_edge_gc** %42, %struct.VEC_edge_gc*** %41, align 8, !dbg !10729
  %43 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !10729
  %44 = bitcast %struct.edge_iterator* %tmp51 to i8*, !dbg !10729
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %44, i64 16, i1 false), !dbg !10729
  br label %for.cond54, !dbg !10731

for.cond54:                                       ; preds = %if.end64, %cond.end49
  %45 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !10732
  %46 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %45, i32 0, i32 0, !dbg !10732
  %47 = load i32, i32* %46, align 8, !dbg !10732
  %48 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %45, i32 0, i32 1, !dbg !10732
  %49 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %48, align 8, !dbg !10732
  %call55 = call %struct.edge_def* @ei_safe_edge(i32 %47, %struct.VEC_edge_gc** %49), !dbg !10732
  store %struct.edge_def* %call55, %struct.edge_def** %e, align 8, !dbg !10734
  %tobool56 = icmp ne %struct.edge_def* %call55, null, !dbg !10735
  br i1 %tobool56, label %for.body57, label %for.end65, !dbg !10735

for.body57:                                       ; preds = %for.cond54
  %50 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10736
  %flags58 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %50, i32 0, i32 7, !dbg !10738
  %51 = load i32, i32* %flags58, align 8, !dbg !10738
  %and59 = and i32 %51, 8, !dbg !10739
  %tobool60 = icmp ne i32 %and59, 0, !dbg !10739
  br i1 %tobool60, label %if.then61, label %if.else, !dbg !10740

if.then61:                                        ; preds = %for.body57
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !10741, metadata !DIExpression()), !dbg !10743
  %52 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10744
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %52, i32 0, i32 0, !dbg !10745
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !10745
  %call62 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %53), !dbg !10746
  store %union.gimple_statement_d* %call62, %union.gimple_statement_d** %stmt, align 8, !dbg !10743
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10747
  %call63 = call zeroext i8 @remove_stmt_from_eh_lp(%union.gimple_statement_d* %54), !dbg !10748
  %55 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10749
  call void @remove_edge(%struct.edge_def* %55), !dbg !10750
  br label %if.end64, !dbg !10751

if.else:                                          ; preds = %for.body57
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !10752
  br label %if.end64

if.end64:                                         ; preds = %if.else, %if.then61
  br label %for.cond54, !dbg !10753, !llvm.loop !10754

for.end65:                                        ; preds = %for.cond54
  br label %succeed, !dbg !10756

if.end66:                                         ; preds = %for.end
  %56 = load %struct.eh_region_d*, %struct.eh_region_d** %new_region, align 8, !dbg !10757
  %type = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %56, i32 0, i32 4, !dbg !10759
  %57 = load i32, i32* %type, align 4, !dbg !10759
  %cmp67 = icmp eq i32 %57, 3, !dbg !10760
  br i1 %cmp67, label %if.then69, label %if.end88, !dbg !10761

if.then69:                                        ; preds = %if.end66
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10762
  %preds71 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 0, !dbg !10762
  %call72 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds71), !dbg !10762
  %59 = bitcast %struct.edge_iterator* %tmp70 to { i32, %struct.VEC_edge_gc** }*, !dbg !10762
  %60 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %59, i32 0, i32 0, !dbg !10762
  %61 = extractvalue { i32, %struct.VEC_edge_gc** } %call72, 0, !dbg !10762
  store i32 %61, i32* %60, align 8, !dbg !10762
  %62 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %59, i32 0, i32 1, !dbg !10762
  %63 = extractvalue { i32, %struct.VEC_edge_gc** } %call72, 1, !dbg !10762
  store %struct.VEC_edge_gc** %63, %struct.VEC_edge_gc*** %62, align 8, !dbg !10762
  %64 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !10762
  %65 = bitcast %struct.edge_iterator* %tmp70 to i8*, !dbg !10762
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 16, i1 false), !dbg !10762
  br label %for.cond73, !dbg !10765

for.cond73:                                       ; preds = %if.end86, %if.then69
  %66 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !10766
  %67 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %66, i32 0, i32 0, !dbg !10766
  %68 = load i32, i32* %67, align 8, !dbg !10766
  %69 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %66, i32 0, i32 1, !dbg !10766
  %70 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %69, align 8, !dbg !10766
  %call74 = call %struct.edge_def* @ei_safe_edge(i32 %68, %struct.VEC_edge_gc** %70), !dbg !10766
  store %struct.edge_def* %call74, %struct.edge_def** %e, align 8, !dbg !10768
  %tobool75 = icmp ne %struct.edge_def* %call74, null, !dbg !10769
  br i1 %tobool75, label %for.body76, label %for.end87, !dbg !10769

for.body76:                                       ; preds = %for.cond73
  %71 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10770
  %flags77 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %71, i32 0, i32 7, !dbg !10772
  %72 = load i32, i32* %flags77, align 8, !dbg !10772
  %and78 = and i32 %72, 8, !dbg !10773
  %tobool79 = icmp ne i32 %and78, 0, !dbg !10773
  br i1 %tobool79, label %if.then80, label %if.else85, !dbg !10774

if.then80:                                        ; preds = %for.body76
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt81, metadata !10775, metadata !DIExpression()), !dbg !10777
  %73 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10778
  %src82 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %73, i32 0, i32 0, !dbg !10779
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %src82, align 8, !dbg !10779
  %call83 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %74), !dbg !10780
  store %union.gimple_statement_d* %call83, %union.gimple_statement_d** %stmt81, align 8, !dbg !10777
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt81, align 8, !dbg !10781
  %call84 = call zeroext i8 @remove_stmt_from_eh_lp(%union.gimple_statement_d* %75), !dbg !10782
  %76 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt81, align 8, !dbg !10783
  %77 = load i32, i32* %new_lp_nr, align 4, !dbg !10784
  call void @add_stmt_to_eh_lp(%union.gimple_statement_d* %76, i32 %77), !dbg !10785
  %78 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10786
  call void @remove_edge(%struct.edge_def* %78), !dbg !10787
  br label %if.end86, !dbg !10788

if.else85:                                        ; preds = %for.body76
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !10789
  br label %if.end86

if.end86:                                         ; preds = %if.else85, %if.then80
  br label %for.cond73, !dbg !10790, !llvm.loop !10791

for.end87:                                        ; preds = %for.cond73
  br label %succeed, !dbg !10793

if.end88:                                         ; preds = %if.end66
  %79 = load %struct.edge_def*, %struct.edge_def** %e_out, align 8, !dbg !10794
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %79, i32 0, i32 1, !dbg !10796
  %80 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !10796
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10797
  %82 = load %struct.edge_def*, %struct.edge_def** %e_out, align 8, !dbg !10798
  %call89 = call zeroext i8 @cleanup_empty_eh_merge_phis(%struct.basic_block_def* %80, %struct.basic_block_def* %81, %struct.edge_def* %82, i8 zeroext 1), !dbg !10799
  %tobool90 = icmp ne i8 %call89, 0, !dbg !10799
  br i1 %tobool90, label %if.then91, label %if.end92, !dbg !10800

if.then91:                                        ; preds = %if.end88
  br label %succeed, !dbg !10801

if.end92:                                         ; preds = %if.end88
  %83 = load i8, i8* %has_non_eh_pred, align 1, !dbg !10802
  %tobool93 = icmp ne i8 %83, 0, !dbg !10802
  br i1 %tobool93, label %if.end103, label %if.then94, !dbg !10804

if.then94:                                        ; preds = %if.end92
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10805
  %85 = load %struct.edge_def*, %struct.edge_def** %e_out, align 8, !dbg !10807
  %86 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !10808
  %87 = load %struct.eh_region_d*, %struct.eh_region_d** %new_region, align 8, !dbg !10809
  call void @cleanup_empty_eh_move_lp(%struct.basic_block_def* %84, %struct.edge_def* %85, %struct.eh_landing_pad_d* %86, %struct.eh_region_d* %87), !dbg !10810
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10811
  %tobool95 = icmp ne %struct._IO_FILE* %88, null, !dbg !10811
  br i1 %tobool95, label %land.lhs.true96, label %if.end102, !dbg !10813

land.lhs.true96:                                  ; preds = %if.then94
  %89 = load i32, i32* @dump_flags, align 4, !dbg !10814
  %and97 = and i32 %89, 8, !dbg !10815
  %tobool98 = icmp ne i32 %and97, 0, !dbg !10815
  br i1 %tobool98, label %if.then99, label %if.end102, !dbg !10816

if.then99:                                        ; preds = %land.lhs.true96
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10817
  %91 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !10818
  %index = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %91, i32 0, i32 4, !dbg !10819
  %92 = load i32, i32* %index, align 8, !dbg !10819
  %93 = load %struct.eh_region_d*, %struct.eh_region_d** %new_region, align 8, !dbg !10820
  %index100 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %93, i32 0, i32 3, !dbg !10821
  %94 = load i32, i32* %index100, align 8, !dbg !10821
  %call101 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %90, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.28, i64 0, i64 0), i32 %92, i32 %94), !dbg !10822
  br label %if.end102, !dbg !10822

if.end102:                                        ; preds = %if.then99, %land.lhs.true96, %if.then94
  store i8 1, i8* %retval, align 1, !dbg !10823
  br label %return, !dbg !10823

if.end103:                                        ; preds = %if.end92
  store i8 0, i8* %retval, align 1, !dbg !10824
  br label %return, !dbg !10824

succeed:                                          ; preds = %if.then91, %for.end87, %for.end65
  call void @llvm.dbg.label(metadata !10825), !dbg !10826
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10827
  %tobool104 = icmp ne %struct._IO_FILE* %95, null, !dbg !10827
  br i1 %tobool104, label %land.lhs.true105, label %if.end111, !dbg !10829

land.lhs.true105:                                 ; preds = %succeed
  %96 = load i32, i32* @dump_flags, align 4, !dbg !10830
  %and106 = and i32 %96, 8, !dbg !10831
  %tobool107 = icmp ne i32 %and106, 0, !dbg !10831
  br i1 %tobool107, label %if.then108, label %if.end111, !dbg !10832

if.then108:                                       ; preds = %land.lhs.true105
  %97 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10833
  %98 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !10834
  %index109 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %98, i32 0, i32 4, !dbg !10835
  %99 = load i32, i32* %index109, align 8, !dbg !10835
  %call110 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %97, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.29, i64 0, i64 0), i32 %99), !dbg !10836
  br label %if.end111, !dbg !10836

if.end111:                                        ; preds = %if.then108, %land.lhs.true105, %succeed
  %100 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !10837
  call void @remove_eh_landing_pad(%struct.eh_landing_pad_d* %100), !dbg !10838
  store i8 1, i8* %retval, align 1, !dbg !10839
  br label %return, !dbg !10839

return:                                           ; preds = %if.end111, %if.end103, %if.end102, %if.then26, %if.then20, %sw.default
  %101 = load i8, i8* %retval, align 1, !dbg !10840
  ret i8 %101, !dbg !10840
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cleanup_empty_eh_unsplit(%struct.basic_block_def* %bb, %struct.edge_def* %e_out, %struct.eh_landing_pad_d* %lp) #0 !dbg !10841 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e_out.addr = alloca %struct.edge_def*, align 8
  %lp.addr = alloca %struct.eh_landing_pad_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %lab = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %lp_nr = alloca i32, align 4
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !10844, metadata !DIExpression()), !dbg !10845
  store %struct.edge_def* %e_out, %struct.edge_def** %e_out.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_out.addr, metadata !10846, metadata !DIExpression()), !dbg !10847
  store %struct.eh_landing_pad_d* %lp, %struct.eh_landing_pad_d** %lp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp.addr, metadata !10848, metadata !DIExpression()), !dbg !10849
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !10850, metadata !DIExpression()), !dbg !10851
  call void @llvm.dbg.declare(metadata %union.tree_node** %lab, metadata !10852, metadata !DIExpression()), !dbg !10853
  %0 = load %struct.edge_def*, %struct.edge_def** %e_out.addr, align 8, !dbg !10854
  %cmp = icmp ne %struct.edge_def* %0, null, !dbg !10854
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10854

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 3654, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10854
  br label %cond.end, !dbg !10854

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10854

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10854
  store %union.tree_node* null, %union.tree_node** %lab, align 8, !dbg !10855
  %1 = load %struct.edge_def*, %struct.edge_def** %e_out.addr, align 8, !dbg !10856
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1, i32 0, i32 1, !dbg !10858
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !10858
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %2), !dbg !10859
  %3 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !10859
  %4 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !10859
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false), !dbg !10859
  br label %for.cond, !dbg !10860

for.cond:                                         ; preds = %for.inc, %cond.end
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !10861
  %tobool = icmp ne i8 %call, 0, !dbg !10863
  %lnot = xor i1 %tobool, true, !dbg !10863
  br i1 %lnot, label %for.body, label %for.end, !dbg !10864

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !10865, metadata !DIExpression()), !dbg !10867
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !10868
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !10867
  call void @llvm.dbg.declare(metadata i32* %lp_nr, metadata !10869, metadata !DIExpression()), !dbg !10870
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10871
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %5), !dbg !10873
  %cmp3 = icmp ne i32 %call2, 4, !dbg !10874
  br i1 %cmp3, label %if.then, label %if.end, !dbg !10875

if.then:                                          ; preds = %for.body
  br label %for.end, !dbg !10876

if.end:                                           ; preds = %for.body
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10877
  %call4 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %6), !dbg !10878
  store %union.tree_node* %call4, %union.tree_node** %lab, align 8, !dbg !10879
  %7 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !10880
  %label_decl = bitcast %union.tree_node* %7 to %struct.tree_label_decl*, !dbg !10880
  %eh_landing_pad_nr = getelementptr inbounds %struct.tree_label_decl, %struct.tree_label_decl* %label_decl, i32 0, i32 2, !dbg !10880
  %8 = load i32, i32* %eh_landing_pad_nr, align 4, !dbg !10880
  store i32 %8, i32* %lp_nr, align 4, !dbg !10881
  %9 = load i32, i32* %lp_nr, align 4, !dbg !10882
  %tobool5 = icmp ne i32 %9, 0, !dbg !10882
  br i1 %tobool5, label %land.lhs.true, label %if.end9, !dbg !10884

land.lhs.true:                                    ; preds = %if.end
  %10 = load i32, i32* %lp_nr, align 4, !dbg !10885
  %call6 = call %struct.eh_region_d* @get_eh_region_from_lp_number(i32 %10), !dbg !10886
  %11 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !10887
  %region = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %11, i32 0, i32 1, !dbg !10888
  %12 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !10888
  %cmp7 = icmp ne %struct.eh_region_d* %call6, %12, !dbg !10889
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !10890

if.then8:                                         ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !10891
  br label %return, !dbg !10891

if.end9:                                          ; preds = %land.lhs.true, %if.end
  br label %for.inc, !dbg !10892

for.inc:                                          ; preds = %if.end9
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !10893
  br label %for.cond, !dbg !10894, !llvm.loop !10895

for.end:                                          ; preds = %if.then, %for.cond
  %13 = load %struct.edge_def*, %struct.edge_def** %e_out.addr, align 8, !dbg !10897
  %dest10 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 1, !dbg !10899
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %dest10, align 8, !dbg !10899
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10900
  %16 = load %struct.edge_def*, %struct.edge_def** %e_out.addr, align 8, !dbg !10901
  %call11 = call zeroext i8 @cleanup_empty_eh_merge_phis(%struct.basic_block_def* %14, %struct.basic_block_def* %15, %struct.edge_def* %16, i8 zeroext 0), !dbg !10902
  %tobool12 = icmp ne i8 %call11, 0, !dbg !10902
  br i1 %tobool12, label %if.then13, label %if.end22, !dbg !10903

if.then13:                                        ; preds = %for.end
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10904
  %tobool14 = icmp ne %struct._IO_FILE* %17, null, !dbg !10904
  br i1 %tobool14, label %land.lhs.true15, label %if.end21, !dbg !10907

land.lhs.true15:                                  ; preds = %if.then13
  %18 = load i32, i32* @dump_flags, align 4, !dbg !10908
  %and = and i32 %18, 8, !dbg !10909
  %tobool16 = icmp ne i32 %and, 0, !dbg !10909
  br i1 %tobool16, label %if.then17, label %if.end21, !dbg !10910

if.then17:                                        ; preds = %land.lhs.true15
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10911
  %20 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !10912
  %index = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %20, i32 0, i32 4, !dbg !10913
  %21 = load i32, i32* %index, align 8, !dbg !10913
  %22 = load %struct.edge_def*, %struct.edge_def** %e_out.addr, align 8, !dbg !10914
  %dest18 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 1, !dbg !10915
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %dest18, align 8, !dbg !10915
  %index19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 9, !dbg !10916
  %24 = load i32, i32* %index19, align 8, !dbg !10916
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.30, i64 0, i64 0), i32 %21, i32 %24), !dbg !10917
  br label %if.end21, !dbg !10917

if.end21:                                         ; preds = %if.then17, %land.lhs.true15, %if.then13
  store i8 1, i8* %retval, align 1, !dbg !10918
  br label %return, !dbg !10918

if.end22:                                         ; preds = %for.end
  store i8 0, i8* %retval, align 1, !dbg !10919
  br label %return, !dbg !10919

return:                                           ; preds = %if.end22, %if.end21, %if.then8
  %25 = load i8, i8* %retval, align 1, !dbg !10920
  ret i8 %25, !dbg !10920
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_safe_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !10921 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !10924, metadata !DIExpression()), !dbg !10925
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !10926
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !10926
  %5 = load i32, i32* %4, align 8, !dbg !10926
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !10926
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !10926
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !10926
  %tobool = icmp ne i8 %call, 0, !dbg !10926
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !10927

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !10928
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !10928
  %10 = load i32, i32* %9, align 8, !dbg !10928
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !10928
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !10928
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !10928
  br label %cond.end, !dbg !10927

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10927

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.edge_def* [ %call1, %cond.true ], [ null, %cond.false ], !dbg !10927
  ret %struct.edge_def* %cond, !dbg !10929
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cleanup_empty_eh_merge_phis(%struct.basic_block_def* %new_bb, %struct.basic_block_def* %old_bb, %struct.edge_def* %old_bb_out, i8 zeroext %change_region) #0 !dbg !10930 {
entry:
  %retval = alloca i8, align 1
  %new_bb.addr = alloca %struct.basic_block_def*, align 8
  %old_bb.addr = alloca %struct.basic_block_def*, align 8
  %old_bb_out.addr = alloca %struct.edge_def*, align 8
  %change_region.addr = alloca i8, align 1
  %ngsi = alloca %struct.gimple_stmt_iterator, align 8
  %ogsi = alloca %struct.gimple_stmt_iterator, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %rename_virts = alloca %struct.bitmap_head_def*, align 8
  %ophi_handled = alloca %struct.bitmap_head_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp4 = alloca %struct.gimple_stmt_iterator, align 8
  %ophi = alloca %union.gimple_statement_d*, align 8
  %nphi = alloca %union.gimple_statement_d*, align 8
  %nresult = alloca %union.tree_node*, align 8
  %nop = alloca %union.tree_node*, align 8
  %tmp12 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp26 = alloca %struct.edge_iterator, align 8
  %oloc = alloca i32, align 4
  %oop = alloca %union.tree_node*, align 8
  %nloc = alloca i32, align 4
  %tmp55 = alloca %struct.edge_iterator, align 8
  %tmp68 = alloca %struct.gimple_stmt_iterator, align 8
  %ophi74 = alloca %union.gimple_statement_d*, align 8
  %oresult = alloca %union.tree_node*, align 8
  %tmp87 = alloca %struct.gimple_stmt_iterator, align 8
  %nphi93 = alloca %union.gimple_statement_d*, align 8
  %nresult95 = alloca %union.tree_node*, align 8
  %tmp106 = alloca %struct.edge_iterator, align 8
  %tmp120 = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %new_bb, %struct.basic_block_def** %new_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb.addr, metadata !10933, metadata !DIExpression()), !dbg !10934
  store %struct.basic_block_def* %old_bb, %struct.basic_block_def** %old_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %old_bb.addr, metadata !10935, metadata !DIExpression()), !dbg !10936
  store %struct.edge_def* %old_bb_out, %struct.edge_def** %old_bb_out.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %old_bb_out.addr, metadata !10937, metadata !DIExpression()), !dbg !10938
  store i8 %change_region, i8* %change_region.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %change_region.addr, metadata !10939, metadata !DIExpression()), !dbg !10940
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %ngsi, metadata !10941, metadata !DIExpression()), !dbg !10942
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %ogsi, metadata !10943, metadata !DIExpression()), !dbg !10944
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !10945, metadata !DIExpression()), !dbg !10946
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !10947, metadata !DIExpression()), !dbg !10948
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %rename_virts, metadata !10949, metadata !DIExpression()), !dbg !10950
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %ophi_handled, metadata !10951, metadata !DIExpression()), !dbg !10952
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %old_bb.addr, align 8, !dbg !10953
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !10953
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !10953
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !10953
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !10953
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !10953
  store i32 %3, i32* %2, align 8, !dbg !10953
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !10953
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !10953
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !10953
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !10953
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !10953
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !10953
  br label %for.cond, !dbg !10953

for.cond:                                         ; preds = %for.inc, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !10955
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !10955
  %10 = load i32, i32* %9, align 8, !dbg !10955
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !10955
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !10955
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e), !dbg !10955
  %tobool = icmp ne i8 %call1, 0, !dbg !10953
  br i1 %tobool, label %for.body, label %for.end, !dbg !10953

for.body:                                         ; preds = %for.cond
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10957
  call void @redirect_edge_var_map_clear(%struct.edge_def* %13), !dbg !10958
  br label %for.inc, !dbg !10958

for.inc:                                          ; preds = %for.body
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !10955
  br label %for.cond, !dbg !10955, !llvm.loop !10959

for.end:                                          ; preds = %for.cond
  %call2 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !10961
  store %struct.bitmap_head_def* %call2, %struct.bitmap_head_def** %ophi_handled, align 8, !dbg !10962
  %call3 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !10963
  store %struct.bitmap_head_def* %call3, %struct.bitmap_head_def** %rename_virts, align 8, !dbg !10964
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb.addr, align 8, !dbg !10965
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp4, %struct.basic_block_def* %14), !dbg !10967
  %15 = bitcast %struct.gimple_stmt_iterator* %ngsi to i8*, !dbg !10967
  %16 = bitcast %struct.gimple_stmt_iterator* %tmp4 to i8*, !dbg !10967
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false), !dbg !10967
  br label %for.cond5, !dbg !10968

for.cond5:                                        ; preds = %for.inc66, %for.end
  %call6 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %ngsi), !dbg !10969
  %tobool7 = icmp ne i8 %call6, 0, !dbg !10971
  %lnot = xor i1 %tobool7, true, !dbg !10971
  br i1 %lnot, label %for.body8, label %for.end67, !dbg !10972

for.body8:                                        ; preds = %for.cond5
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %ophi, metadata !10973, metadata !DIExpression()), !dbg !10975
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %nphi, metadata !10976, metadata !DIExpression()), !dbg !10977
  %call9 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %ngsi), !dbg !10978
  store %union.gimple_statement_d* %call9, %union.gimple_statement_d** %nphi, align 8, !dbg !10977
  call void @llvm.dbg.declare(metadata %union.tree_node** %nresult, metadata !10979, metadata !DIExpression()), !dbg !10980
  call void @llvm.dbg.declare(metadata %union.tree_node** %nop, metadata !10981, metadata !DIExpression()), !dbg !10982
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %nphi, align 8, !dbg !10983
  %call10 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %17), !dbg !10984
  store %union.tree_node* %call10, %union.tree_node** %nresult, align 8, !dbg !10985
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %nphi, align 8, !dbg !10986
  %19 = load %struct.edge_def*, %struct.edge_def** %old_bb_out.addr, align 8, !dbg !10987
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %19, i32 0, i32 6, !dbg !10988
  %20 = load i32, i32* %dest_idx, align 4, !dbg !10988
  %conv = zext i32 %20 to i64, !dbg !10987
  %call11 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %18, i64 %conv), !dbg !10989
  store %union.tree_node* %call11, %union.tree_node** %nop, align 8, !dbg !10990
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %ophi, align 8, !dbg !10991
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %old_bb.addr, align 8, !dbg !10992
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp12, %struct.basic_block_def* %21), !dbg !10994
  %22 = bitcast %struct.gimple_stmt_iterator* %ogsi to i8*, !dbg !10994
  %23 = bitcast %struct.gimple_stmt_iterator* %tmp12 to i8*, !dbg !10994
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 %23, i64 24, i1 false), !dbg !10994
  br label %for.cond13, !dbg !10995

for.cond13:                                       ; preds = %for.inc21, %for.body8
  %call14 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %ogsi), !dbg !10996
  %tobool15 = icmp ne i8 %call14, 0, !dbg !10998
  %lnot16 = xor i1 %tobool15, true, !dbg !10998
  br i1 %lnot16, label %for.body17, label %for.end22, !dbg !10999

for.body17:                                       ; preds = %for.cond13
  %call18 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %ogsi), !dbg !11000
  store %union.gimple_statement_d* %call18, %union.gimple_statement_d** %ophi, align 8, !dbg !11002
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ophi, align 8, !dbg !11003
  %call19 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %24), !dbg !11005
  %25 = load %union.tree_node*, %union.tree_node** %nop, align 8, !dbg !11006
  %cmp = icmp eq %union.tree_node* %call19, %25, !dbg !11007
  br i1 %cmp, label %if.then, label %if.end, !dbg !11008

if.then:                                          ; preds = %for.body17
  br label %for.end22, !dbg !11009

if.end:                                           ; preds = %for.body17
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %ophi, align 8, !dbg !11010
  br label %for.inc21, !dbg !11011

for.inc21:                                        ; preds = %if.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %ogsi), !dbg !11012
  br label %for.cond13, !dbg !11013, !llvm.loop !11014

for.end22:                                        ; preds = %if.then, %for.cond13
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ophi, align 8, !dbg !11016
  %tobool23 = icmp ne %union.gimple_statement_d* %26, null, !dbg !11016
  br i1 %tobool23, label %if.then24, label %if.else, !dbg !11018

if.then24:                                        ; preds = %for.end22
  %27 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %ophi_handled, align 8, !dbg !11019
  %28 = load %union.tree_node*, %union.tree_node** %nop, align 8, !dbg !11021
  %ssa_name = bitcast %union.tree_node* %28 to %struct.tree_ssa_name*, !dbg !11021
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !11021
  %29 = load i32, i32* %version, align 8, !dbg !11021
  %call25 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %27, i32 %29), !dbg !11022
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %old_bb.addr, align 8, !dbg !11023
  %preds27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 0, !dbg !11023
  %call28 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds27), !dbg !11023
  %31 = bitcast %struct.edge_iterator* %tmp26 to { i32, %struct.VEC_edge_gc** }*, !dbg !11023
  %32 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %31, i32 0, i32 0, !dbg !11023
  %33 = extractvalue { i32, %struct.VEC_edge_gc** } %call28, 0, !dbg !11023
  store i32 %33, i32* %32, align 8, !dbg !11023
  %34 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %31, i32 0, i32 1, !dbg !11023
  %35 = extractvalue { i32, %struct.VEC_edge_gc** } %call28, 1, !dbg !11023
  store %struct.VEC_edge_gc** %35, %struct.VEC_edge_gc*** %34, align 8, !dbg !11023
  %36 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !11023
  %37 = bitcast %struct.edge_iterator* %tmp26 to i8*, !dbg !11023
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 16, i1 false), !dbg !11023
  br label %for.cond29, !dbg !11023

for.cond29:                                       ; preds = %for.inc43, %if.then24
  %38 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !11025
  %39 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %38, i32 0, i32 0, !dbg !11025
  %40 = load i32, i32* %39, align 8, !dbg !11025
  %41 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %38, i32 0, i32 1, !dbg !11025
  %42 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %41, align 8, !dbg !11025
  %call30 = call zeroext i8 @ei_cond(i32 %40, %struct.VEC_edge_gc** %42, %struct.edge_def** %e), !dbg !11025
  %tobool31 = icmp ne i8 %call30, 0, !dbg !11023
  br i1 %tobool31, label %for.body32, label %for.end44, !dbg !11023

for.body32:                                       ; preds = %for.cond29
  call void @llvm.dbg.declare(metadata i32* %oloc, metadata !11027, metadata !DIExpression()), !dbg !11029
  call void @llvm.dbg.declare(metadata %union.tree_node** %oop, metadata !11030, metadata !DIExpression()), !dbg !11031
  %43 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11032
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %43, i32 0, i32 7, !dbg !11034
  %44 = load i32, i32* %flags, align 8, !dbg !11034
  %and = and i32 %44, 8, !dbg !11035
  %cmp33 = icmp eq i32 %and, 0, !dbg !11036
  br i1 %cmp33, label %if.then35, label %if.end36, !dbg !11037

if.then35:                                        ; preds = %for.body32
  br label %for.inc43, !dbg !11038

if.end36:                                         ; preds = %for.body32
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ophi, align 8, !dbg !11039
  %46 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11040
  %dest_idx37 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %46, i32 0, i32 6, !dbg !11041
  %47 = load i32, i32* %dest_idx37, align 4, !dbg !11041
  %conv38 = zext i32 %47 to i64, !dbg !11040
  %call39 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %45, i64 %conv38), !dbg !11042
  store %union.tree_node* %call39, %union.tree_node** %oop, align 8, !dbg !11043
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ophi, align 8, !dbg !11044
  %49 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11045
  %dest_idx40 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %49, i32 0, i32 6, !dbg !11046
  %50 = load i32, i32* %dest_idx40, align 4, !dbg !11046
  %conv41 = zext i32 %50 to i64, !dbg !11045
  %call42 = call i32 @gimple_phi_arg_location(%union.gimple_statement_d* %48, i64 %conv41), !dbg !11047
  store i32 %call42, i32* %oloc, align 4, !dbg !11048
  %51 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11049
  %52 = load %union.tree_node*, %union.tree_node** %nresult, align 8, !dbg !11050
  %53 = load %union.tree_node*, %union.tree_node** %oop, align 8, !dbg !11051
  %54 = load i32, i32* %oloc, align 4, !dbg !11052
  call void @redirect_edge_var_map_add(%struct.edge_def* %51, %union.tree_node* %52, %union.tree_node* %53, i32 %54), !dbg !11053
  br label %for.inc43, !dbg !11054

for.inc43:                                        ; preds = %if.end36, %if.then35
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !11025
  br label %for.cond29, !dbg !11025, !llvm.loop !11055

for.end44:                                        ; preds = %for.cond29
  br label %if.end65, !dbg !11057

if.else:                                          ; preds = %for.end22
  %55 = load %union.tree_node*, %union.tree_node** %nresult, align 8, !dbg !11058
  %call45 = call zeroext i8 @is_gimple_reg(%union.tree_node* %55), !dbg !11060
  %tobool46 = icmp ne i8 %call45, 0, !dbg !11060
  br i1 %tobool46, label %if.else51, label %if.then47, !dbg !11061

if.then47:                                        ; preds = %if.else
  %56 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %rename_virts, align 8, !dbg !11062
  %57 = load %union.tree_node*, %union.tree_node** %nresult, align 8, !dbg !11063
  %ssa_name48 = bitcast %union.tree_node* %57 to %struct.tree_ssa_name*, !dbg !11063
  %version49 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name48, i32 0, i32 3, !dbg !11063
  %58 = load i32, i32* %version49, align 8, !dbg !11063
  %call50 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %56, i32 %58), !dbg !11064
  br label %if.end64, !dbg !11064

if.else51:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %nloc, metadata !11065, metadata !DIExpression()), !dbg !11067
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %nphi, align 8, !dbg !11068
  %60 = load %struct.edge_def*, %struct.edge_def** %old_bb_out.addr, align 8, !dbg !11069
  %dest_idx52 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %60, i32 0, i32 6, !dbg !11070
  %61 = load i32, i32* %dest_idx52, align 4, !dbg !11070
  %conv53 = zext i32 %61 to i64, !dbg !11069
  %call54 = call i32 @gimple_phi_arg_location(%union.gimple_statement_d* %59, i64 %conv53), !dbg !11071
  store i32 %call54, i32* %nloc, align 4, !dbg !11067
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %old_bb.addr, align 8, !dbg !11072
  %preds56 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %62, i32 0, i32 0, !dbg !11072
  %call57 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds56), !dbg !11072
  %63 = bitcast %struct.edge_iterator* %tmp55 to { i32, %struct.VEC_edge_gc** }*, !dbg !11072
  %64 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %63, i32 0, i32 0, !dbg !11072
  %65 = extractvalue { i32, %struct.VEC_edge_gc** } %call57, 0, !dbg !11072
  store i32 %65, i32* %64, align 8, !dbg !11072
  %66 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %63, i32 0, i32 1, !dbg !11072
  %67 = extractvalue { i32, %struct.VEC_edge_gc** } %call57, 1, !dbg !11072
  store %struct.VEC_edge_gc** %67, %struct.VEC_edge_gc*** %66, align 8, !dbg !11072
  %68 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !11072
  %69 = bitcast %struct.edge_iterator* %tmp55 to i8*, !dbg !11072
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 16, i1 false), !dbg !11072
  br label %for.cond58, !dbg !11072

for.cond58:                                       ; preds = %for.inc62, %if.else51
  %70 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !11074
  %71 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %70, i32 0, i32 0, !dbg !11074
  %72 = load i32, i32* %71, align 8, !dbg !11074
  %73 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %70, i32 0, i32 1, !dbg !11074
  %74 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %73, align 8, !dbg !11074
  %call59 = call zeroext i8 @ei_cond(i32 %72, %struct.VEC_edge_gc** %74, %struct.edge_def** %e), !dbg !11074
  %tobool60 = icmp ne i8 %call59, 0, !dbg !11072
  br i1 %tobool60, label %for.body61, label %for.end63, !dbg !11072

for.body61:                                       ; preds = %for.cond58
  %75 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11076
  %76 = load %union.tree_node*, %union.tree_node** %nresult, align 8, !dbg !11077
  %77 = load %union.tree_node*, %union.tree_node** %nop, align 8, !dbg !11078
  %78 = load i32, i32* %nloc, align 4, !dbg !11079
  call void @redirect_edge_var_map_add(%struct.edge_def* %75, %union.tree_node* %76, %union.tree_node* %77, i32 %78), !dbg !11080
  br label %for.inc62, !dbg !11080

for.inc62:                                        ; preds = %for.body61
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !11074
  br label %for.cond58, !dbg !11074, !llvm.loop !11081

for.end63:                                        ; preds = %for.cond58
  br label %if.end64

if.end64:                                         ; preds = %for.end63, %if.then47
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %for.end44
  br label %for.inc66, !dbg !11083

for.inc66:                                        ; preds = %if.end65
  call void @gsi_next(%struct.gimple_stmt_iterator* %ngsi), !dbg !11084
  br label %for.cond5, !dbg !11085, !llvm.loop !11086

for.end67:                                        ; preds = %for.cond5
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %old_bb.addr, align 8, !dbg !11088
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp68, %struct.basic_block_def* %79), !dbg !11090
  %80 = bitcast %struct.gimple_stmt_iterator* %ogsi to i8*, !dbg !11090
  %81 = bitcast %struct.gimple_stmt_iterator* %tmp68 to i8*, !dbg !11090
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 24, i1 false), !dbg !11090
  br label %for.cond69, !dbg !11091

for.cond69:                                       ; preds = %for.inc83, %for.end67
  %call70 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %ogsi), !dbg !11092
  %tobool71 = icmp ne i8 %call70, 0, !dbg !11094
  %lnot72 = xor i1 %tobool71, true, !dbg !11094
  br i1 %lnot72, label %for.body73, label %for.end84, !dbg !11095

for.body73:                                       ; preds = %for.cond69
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %ophi74, metadata !11096, metadata !DIExpression()), !dbg !11098
  %call75 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %ogsi), !dbg !11099
  store %union.gimple_statement_d* %call75, %union.gimple_statement_d** %ophi74, align 8, !dbg !11098
  call void @llvm.dbg.declare(metadata %union.tree_node** %oresult, metadata !11100, metadata !DIExpression()), !dbg !11101
  %82 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ophi74, align 8, !dbg !11102
  %call76 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %82), !dbg !11103
  store %union.tree_node* %call76, %union.tree_node** %oresult, align 8, !dbg !11101
  %83 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %ophi_handled, align 8, !dbg !11104
  %84 = load %union.tree_node*, %union.tree_node** %oresult, align 8, !dbg !11106
  %ssa_name77 = bitcast %union.tree_node* %84 to %struct.tree_ssa_name*, !dbg !11106
  %version78 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name77, i32 0, i32 3, !dbg !11106
  %85 = load i32, i32* %version78, align 8, !dbg !11106
  %call79 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %83, i32 %85), !dbg !11107
  %tobool80 = icmp ne i32 %call79, 0, !dbg !11107
  br i1 %tobool80, label %if.end82, label %if.then81, !dbg !11108

if.then81:                                        ; preds = %for.body73
  br label %fail, !dbg !11109

if.end82:                                         ; preds = %for.body73
  br label %for.inc83, !dbg !11110

for.inc83:                                        ; preds = %if.end82
  call void @gsi_next(%struct.gimple_stmt_iterator* %ogsi), !dbg !11111
  br label %for.cond69, !dbg !11112, !llvm.loop !11113

for.end84:                                        ; preds = %for.cond69
  %86 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %rename_virts, align 8, !dbg !11115
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %86, i32 0, i32 0, !dbg !11115
  %87 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !11115
  %tobool85 = icmp ne %struct.bitmap_element_def* %87, null, !dbg !11115
  br i1 %tobool85, label %if.then86, label %if.end105, !dbg !11117

if.then86:                                        ; preds = %for.end84
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb.addr, align 8, !dbg !11118
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp87, %struct.basic_block_def* %88), !dbg !11121
  %89 = bitcast %struct.gimple_stmt_iterator* %ngsi to i8*, !dbg !11121
  %90 = bitcast %struct.gimple_stmt_iterator* %tmp87 to i8*, !dbg !11121
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %89, i8* align 8 %90, i64 24, i1 false), !dbg !11121
  br label %for.cond88, !dbg !11122

for.cond88:                                       ; preds = %if.end103, %if.then86
  %call89 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %ngsi), !dbg !11123
  %tobool90 = icmp ne i8 %call89, 0, !dbg !11125
  %lnot91 = xor i1 %tobool90, true, !dbg !11125
  br i1 %lnot91, label %for.body92, label %for.end104, !dbg !11126

for.body92:                                       ; preds = %for.cond88
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %nphi93, metadata !11127, metadata !DIExpression()), !dbg !11129
  %call94 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %ngsi), !dbg !11130
  store %union.gimple_statement_d* %call94, %union.gimple_statement_d** %nphi93, align 8, !dbg !11129
  call void @llvm.dbg.declare(metadata %union.tree_node** %nresult95, metadata !11131, metadata !DIExpression()), !dbg !11132
  %91 = load %union.gimple_statement_d*, %union.gimple_statement_d** %nphi93, align 8, !dbg !11133
  %call96 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %91), !dbg !11134
  store %union.tree_node* %call96, %union.tree_node** %nresult95, align 8, !dbg !11132
  %92 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %rename_virts, align 8, !dbg !11135
  %93 = load %union.tree_node*, %union.tree_node** %nresult95, align 8, !dbg !11137
  %ssa_name97 = bitcast %union.tree_node* %93 to %struct.tree_ssa_name*, !dbg !11137
  %version98 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name97, i32 0, i32 3, !dbg !11137
  %94 = load i32, i32* %version98, align 8, !dbg !11137
  %call99 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %92, i32 %94), !dbg !11138
  %tobool100 = icmp ne i32 %call99, 0, !dbg !11138
  br i1 %tobool100, label %if.then101, label %if.else102, !dbg !11139

if.then101:                                       ; preds = %for.body92
  %95 = load %union.gimple_statement_d*, %union.gimple_statement_d** %nphi93, align 8, !dbg !11140
  call void @mark_virtual_phi_result_for_renaming(%union.gimple_statement_d* %95), !dbg !11142
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %ngsi, i8 zeroext 1), !dbg !11143
  br label %if.end103, !dbg !11144

if.else102:                                       ; preds = %for.body92
  call void @gsi_next(%struct.gimple_stmt_iterator* %ngsi), !dbg !11145
  br label %if.end103

if.end103:                                        ; preds = %if.else102, %if.then101
  br label %for.cond88, !dbg !11146, !llvm.loop !11147

for.end104:                                       ; preds = %for.cond88
  br label %if.end105, !dbg !11149

if.end105:                                        ; preds = %for.end104, %for.end84
  %96 = load %struct.basic_block_def*, %struct.basic_block_def** %old_bb.addr, align 8, !dbg !11150
  %preds107 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %96, i32 0, i32 0, !dbg !11150
  %call108 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds107), !dbg !11150
  %97 = bitcast %struct.edge_iterator* %tmp106 to { i32, %struct.VEC_edge_gc** }*, !dbg !11150
  %98 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %97, i32 0, i32 0, !dbg !11150
  %99 = extractvalue { i32, %struct.VEC_edge_gc** } %call108, 0, !dbg !11150
  store i32 %99, i32* %98, align 8, !dbg !11150
  %100 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %97, i32 0, i32 1, !dbg !11150
  %101 = extractvalue { i32, %struct.VEC_edge_gc** } %call108, 1, !dbg !11150
  store %struct.VEC_edge_gc** %101, %struct.VEC_edge_gc*** %100, align 8, !dbg !11150
  %102 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !11150
  %103 = bitcast %struct.edge_iterator* %tmp106 to i8*, !dbg !11150
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %102, i8* align 8 %103, i64 16, i1 false), !dbg !11150
  br label %for.cond109, !dbg !11152

for.cond109:                                      ; preds = %if.end118, %if.end105
  %104 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !11153
  %105 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %104, i32 0, i32 0, !dbg !11153
  %106 = load i32, i32* %105, align 8, !dbg !11153
  %107 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %104, i32 0, i32 1, !dbg !11153
  %108 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %107, align 8, !dbg !11153
  %call110 = call %struct.edge_def* @ei_safe_edge(i32 %106, %struct.VEC_edge_gc** %108), !dbg !11153
  store %struct.edge_def* %call110, %struct.edge_def** %e, align 8, !dbg !11155
  %tobool111 = icmp ne %struct.edge_def* %call110, null, !dbg !11156
  br i1 %tobool111, label %for.body112, label %for.end119, !dbg !11156

for.body112:                                      ; preds = %for.cond109
  %109 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11157
  %flags113 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %109, i32 0, i32 7, !dbg !11159
  %110 = load i32, i32* %flags113, align 8, !dbg !11159
  %and114 = and i32 %110, 8, !dbg !11160
  %tobool115 = icmp ne i32 %and114, 0, !dbg !11160
  br i1 %tobool115, label %if.then116, label %if.else117, !dbg !11161

if.then116:                                       ; preds = %for.body112
  %111 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11162
  %112 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb.addr, align 8, !dbg !11164
  %113 = load i8, i8* %change_region.addr, align 1, !dbg !11165
  call void @redirect_eh_edge_1(%struct.edge_def* %111, %struct.basic_block_def* %112, i8 zeroext %113), !dbg !11166
  %114 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11167
  %115 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb.addr, align 8, !dbg !11168
  call void @redirect_edge_succ(%struct.edge_def* %114, %struct.basic_block_def* %115), !dbg !11169
  %116 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11170
  call void @flush_pending_stmts(%struct.edge_def* %116), !dbg !11171
  br label %if.end118, !dbg !11172

if.else117:                                       ; preds = %for.body112
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !11173
  br label %if.end118

if.end118:                                        ; preds = %if.else117, %if.then116
  br label %for.cond109, !dbg !11174, !llvm.loop !11175

for.end119:                                       ; preds = %for.cond109
  %117 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %ophi_handled, align 8, !dbg !11177
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %117), !dbg !11177
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %ophi_handled, align 8, !dbg !11177
  %118 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %rename_virts, align 8, !dbg !11178
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %118), !dbg !11178
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %rename_virts, align 8, !dbg !11178
  store i8 1, i8* %retval, align 1, !dbg !11179
  br label %return, !dbg !11179

fail:                                             ; preds = %if.then81
  call void @llvm.dbg.label(metadata !11180), !dbg !11181
  %119 = load %struct.basic_block_def*, %struct.basic_block_def** %old_bb.addr, align 8, !dbg !11182
  %preds121 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %119, i32 0, i32 0, !dbg !11182
  %call122 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds121), !dbg !11182
  %120 = bitcast %struct.edge_iterator* %tmp120 to { i32, %struct.VEC_edge_gc** }*, !dbg !11182
  %121 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %120, i32 0, i32 0, !dbg !11182
  %122 = extractvalue { i32, %struct.VEC_edge_gc** } %call122, 0, !dbg !11182
  store i32 %122, i32* %121, align 8, !dbg !11182
  %123 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %120, i32 0, i32 1, !dbg !11182
  %124 = extractvalue { i32, %struct.VEC_edge_gc** } %call122, 1, !dbg !11182
  store %struct.VEC_edge_gc** %124, %struct.VEC_edge_gc*** %123, align 8, !dbg !11182
  %125 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !11182
  %126 = bitcast %struct.edge_iterator* %tmp120 to i8*, !dbg !11182
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* align 8 %126, i64 16, i1 false), !dbg !11182
  br label %for.cond123, !dbg !11182

for.cond123:                                      ; preds = %for.inc127, %fail
  %127 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !11184
  %128 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %127, i32 0, i32 0, !dbg !11184
  %129 = load i32, i32* %128, align 8, !dbg !11184
  %130 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %127, i32 0, i32 1, !dbg !11184
  %131 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %130, align 8, !dbg !11184
  %call124 = call zeroext i8 @ei_cond(i32 %129, %struct.VEC_edge_gc** %131, %struct.edge_def** %e), !dbg !11184
  %tobool125 = icmp ne i8 %call124, 0, !dbg !11182
  br i1 %tobool125, label %for.body126, label %for.end128, !dbg !11182

for.body126:                                      ; preds = %for.cond123
  %132 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11186
  call void @redirect_edge_var_map_clear(%struct.edge_def* %132), !dbg !11187
  br label %for.inc127, !dbg !11187

for.inc127:                                       ; preds = %for.body126
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !11184
  br label %for.cond123, !dbg !11184, !llvm.loop !11188

for.end128:                                       ; preds = %for.cond123
  %133 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %ophi_handled, align 8, !dbg !11190
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %133), !dbg !11190
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %ophi_handled, align 8, !dbg !11190
  %134 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %rename_virts, align 8, !dbg !11191
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %134), !dbg !11191
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %rename_virts, align 8, !dbg !11191
  store i8 0, i8* %retval, align 1, !dbg !11192
  br label %return, !dbg !11192

return:                                           ; preds = %for.end128, %for.end119
  %135 = load i8, i8* %retval, align 1, !dbg !11193
  ret i8 %135, !dbg !11193
}

; Function Attrs: noinline nounwind uwtable
define internal void @cleanup_empty_eh_move_lp(%struct.basic_block_def* %bb, %struct.edge_def* %e_out, %struct.eh_landing_pad_d* %lp, %struct.eh_region_d* %new_region) #0 !dbg !11194 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e_out.addr = alloca %struct.edge_def*, align 8
  %lp.addr = alloca %struct.eh_landing_pad_d*, align 8
  %new_region.addr = alloca %struct.eh_region_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %pp = alloca %struct.eh_landing_pad_d**, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !11197, metadata !DIExpression()), !dbg !11198
  store %struct.edge_def* %e_out, %struct.edge_def** %e_out.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_out.addr, metadata !11199, metadata !DIExpression()), !dbg !11200
  store %struct.eh_landing_pad_d* %lp, %struct.eh_landing_pad_d** %lp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d** %lp.addr, metadata !11201, metadata !DIExpression()), !dbg !11202
  store %struct.eh_region_d* %new_region, %struct.eh_region_d** %new_region.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.eh_region_d** %new_region.addr, metadata !11203, metadata !DIExpression()), !dbg !11204
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !11205, metadata !DIExpression()), !dbg !11206
  call void @llvm.dbg.declare(metadata %struct.eh_landing_pad_d*** %pp, metadata !11207, metadata !DIExpression()), !dbg !11208
  %0 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !11209
  %region = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %0, i32 0, i32 1, !dbg !11211
  %1 = load %struct.eh_region_d*, %struct.eh_region_d** %region, align 8, !dbg !11211
  %landing_pads = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %1, i32 0, i32 6, !dbg !11212
  store %struct.eh_landing_pad_d** %landing_pads, %struct.eh_landing_pad_d*** %pp, align 8, !dbg !11213
  br label %for.cond, !dbg !11214

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.eh_landing_pad_d**, %struct.eh_landing_pad_d*** %pp, align 8, !dbg !11215
  %3 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %2, align 8, !dbg !11217
  %4 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !11218
  %cmp = icmp ne %struct.eh_landing_pad_d* %3, %4, !dbg !11219
  br i1 %cmp, label %for.body, label %for.end, !dbg !11220

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !11221

for.inc:                                          ; preds = %for.body
  %5 = load %struct.eh_landing_pad_d**, %struct.eh_landing_pad_d*** %pp, align 8, !dbg !11222
  %6 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %5, align 8, !dbg !11223
  %next_lp = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %6, i32 0, i32 0, !dbg !11224
  store %struct.eh_landing_pad_d** %next_lp, %struct.eh_landing_pad_d*** %pp, align 8, !dbg !11225
  br label %for.cond, !dbg !11226, !llvm.loop !11227

for.end:                                          ; preds = %for.cond
  %7 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !11229
  %next_lp1 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %7, i32 0, i32 0, !dbg !11230
  %8 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %next_lp1, align 8, !dbg !11230
  %9 = load %struct.eh_landing_pad_d**, %struct.eh_landing_pad_d*** %pp, align 8, !dbg !11231
  store %struct.eh_landing_pad_d* %8, %struct.eh_landing_pad_d** %9, align 8, !dbg !11232
  %10 = load %struct.eh_region_d*, %struct.eh_region_d** %new_region.addr, align 8, !dbg !11233
  %11 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !11234
  %region2 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %11, i32 0, i32 1, !dbg !11235
  store %struct.eh_region_d* %10, %struct.eh_region_d** %region2, align 8, !dbg !11236
  %12 = load %struct.eh_region_d*, %struct.eh_region_d** %new_region.addr, align 8, !dbg !11237
  %landing_pads3 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %12, i32 0, i32 6, !dbg !11238
  %13 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %landing_pads3, align 8, !dbg !11238
  %14 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !11239
  %next_lp4 = getelementptr inbounds %struct.eh_landing_pad_d, %struct.eh_landing_pad_d* %14, i32 0, i32 0, !dbg !11240
  store %struct.eh_landing_pad_d* %13, %struct.eh_landing_pad_d** %next_lp4, align 8, !dbg !11241
  %15 = load %struct.eh_landing_pad_d*, %struct.eh_landing_pad_d** %lp.addr, align 8, !dbg !11242
  %16 = load %struct.eh_region_d*, %struct.eh_region_d** %new_region.addr, align 8, !dbg !11243
  %landing_pads5 = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %16, i32 0, i32 6, !dbg !11244
  store %struct.eh_landing_pad_d* %15, %struct.eh_landing_pad_d** %landing_pads5, align 8, !dbg !11245
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11246
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %17), !dbg !11247
  %18 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !11247
  %19 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !11247
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 24, i1 false), !dbg !11247
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !11248
  call void @mark_virtual_ops_for_renaming(%union.gimple_statement_d* %call), !dbg !11249
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !11250
  %20 = load %struct.edge_def*, %struct.edge_def** %e_out.addr, align 8, !dbg !11251
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i32 0, i32 7, !dbg !11252
  %21 = load i32, i32* %flags, align 8, !dbg !11252
  %and = and i32 %21, -9, !dbg !11253
  %or = or i32 %and, 1, !dbg !11254
  %22 = load %struct.edge_def*, %struct.edge_def** %e_out.addr, align 8, !dbg !11255
  %flags6 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 7, !dbg !11256
  store i32 %or, i32* %flags6, align 8, !dbg !11257
  %23 = load %struct.edge_def*, %struct.edge_def** %e_out.addr, align 8, !dbg !11258
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %23, i32 0, i32 8, !dbg !11259
  store i32 10000, i32* %probability, align 4, !dbg !11260
  ret void, !dbg !11261
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !11262 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !11265, metadata !DIExpression()), !dbg !11266
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !11267
  %3 = load i32, i32* %index, align 8, !dbg !11267
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !11268
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !11268
  %6 = load i32, i32* %5, align 8, !dbg !11268
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !11268
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !11268
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !11268
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !11268
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11268

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !11268
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !11268
  %11 = load i32, i32* %10, align 8, !dbg !11268
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !11268
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !11268
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !11268
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !11268
  br label %cond.end, !dbg !11268

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11268

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11268
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !11268
  %cmp = icmp eq i32 %3, %call2, !dbg !11269
  %conv = zext i1 %cmp to i32, !dbg !11269
  %conv3 = trunc i32 %conv to i8, !dbg !11270
  ret i8 %conv3, !dbg !11271
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !11272 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !11273, metadata !DIExpression()), !dbg !11274
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !11275
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !11275
  %5 = load i32, i32* %4, align 8, !dbg !11275
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !11275
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !11275
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !11275
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !11275
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11275

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !11275
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !11275
  %10 = load i32, i32* %9, align 8, !dbg !11275
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !11275
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !11275
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !11275
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !11275
  br label %cond.end, !dbg !11275

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11275

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11275
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !11275
  %13 = load i32, i32* %index, align 8, !dbg !11275
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !11275
  ret %struct.edge_def* %call2, !dbg !11276
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !11277 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !11280, metadata !DIExpression()), !dbg !11281
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !11282
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !11282
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !11282
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !11282

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11282
  br label %cond.end, !dbg !11282

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11282

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11282
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !11283
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !11283
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !11284
  ret %struct.VEC_edge_gc* %5, !dbg !11285
}

declare dso_local void @redirect_edge_var_map_clear(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_arg_location(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !11286 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !11289, metadata !DIExpression()), !dbg !11290
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !11291, metadata !DIExpression()), !dbg !11292
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !11293
  %1 = load i64, i64* %i.addr, align 8, !dbg !11294
  %conv = trunc i64 %1 to i32, !dbg !11294
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %conv), !dbg !11295
  %locus = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 2, !dbg !11296
  %2 = load i32, i32* %locus, align 8, !dbg !11296
  ret i32 %2, !dbg !11297
}

declare dso_local void @redirect_edge_var_map_add(%struct.edge_def*, %union.tree_node*, %union.tree_node*, i32) #2

declare dso_local void @mark_virtual_phi_result_for_renaming(%union.gimple_statement_d*) #2

declare dso_local void @redirect_edge_succ(%struct.edge_def*, %struct.basic_block_def*) #2

declare dso_local void @flush_pending_stmts(%struct.edge_def*) #2

declare dso_local void @mark_virtual_ops_for_renaming(%union.gimple_statement_d*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3094, !3095, !3096}
!llvm.ident = !{!3097}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "using_eh_for_cleanups_p", scope: !2, file: !3, line: 49, type: !1679, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1584, globals: !3051, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-eh.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !13, !141, !336, !354, !361, !368, !374, !379, !384, !389, !396, !572, !585, !590, !597, !635, !661, !667, !801, !806, !820, !826, !839, !843, !1563, !1577}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !6, line: 30, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12}
!9 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!13 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !14, line: 7, baseType: !7, size: 32, elements: !15)
!14 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!15 = !{!16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140}
!16 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!17 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!18 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!19 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!20 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!21 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!22 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!23 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!24 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!25 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!26 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!27 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!28 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!29 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!30 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!31 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!32 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!33 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!34 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!35 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!36 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!37 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!38 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!39 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!40 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!41 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!42 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!43 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!44 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!45 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!46 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!47 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!48 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!49 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!50 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!51 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!52 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!53 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!54 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!55 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!56 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!57 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!58 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!59 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!60 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!61 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!62 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!63 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!64 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!65 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!66 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!67 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!68 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!69 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!70 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!71 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!72 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!73 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!74 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!75 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!76 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!77 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!78 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!79 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!80 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!81 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!82 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!83 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!84 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!85 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!86 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!87 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!88 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!89 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!90 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!91 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!92 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!93 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!94 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!95 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!96 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!97 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!98 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!99 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!100 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!101 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!102 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!103 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!104 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!106 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!107 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!108 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!109 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!110 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!111 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!112 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!113 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!114 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!115 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!116 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!117 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!118 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!119 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!120 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!121 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!122 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!123 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!124 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!125 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!126 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!127 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!128 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!129 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!130 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!132 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!133 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!134 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!135 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!136 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!137 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!139 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!140 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!141 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !142, line: 39, baseType: !7, size: 32, elements: !143)
!142 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!143 = !{!144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335}
!144 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!145 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!146 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!147 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!148 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!149 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!150 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!151 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!152 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!153 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!154 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!155 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!156 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!157 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!158 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!159 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!160 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!161 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!162 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!163 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!164 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!165 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!166 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!167 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!168 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!169 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!170 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!171 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!172 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!173 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!174 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!175 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!176 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!177 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!178 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!179 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!180 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!181 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!182 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!183 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!184 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!185 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!186 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!187 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!188 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!189 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!190 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!191 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!192 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!193 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!194 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!195 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!196 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!197 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!198 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!199 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!200 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!201 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!202 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!203 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!204 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!205 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!206 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!207 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!208 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!209 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!210 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!211 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!212 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!213 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!214 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!215 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!216 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!217 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!218 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!219 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!220 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!221 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!222 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!223 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!224 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!225 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!226 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!227 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!228 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!229 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!230 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!231 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!232 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!233 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!234 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!235 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!236 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!237 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!238 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!239 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!240 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!241 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!242 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!243 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!244 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!245 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!246 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!247 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!248 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!249 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!250 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!251 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!252 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!253 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!254 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!255 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!256 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!257 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!259 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!260 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!261 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!262 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!263 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!264 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!265 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!266 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!267 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!268 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!269 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!270 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!271 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!272 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!273 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!274 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!275 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!276 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!277 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!278 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!279 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!280 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!281 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!282 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!283 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!284 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!285 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!286 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!287 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!288 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!289 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!290 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!291 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!292 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!293 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!294 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!295 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!296 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!301 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!302 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!303 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!304 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!305 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!306 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!307 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!308 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!309 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!310 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!311 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!312 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!313 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!322 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!323 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!324 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!325 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!326 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!327 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!328 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!329 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!330 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!331 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!332 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!333 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!334 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!335 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!336 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !142, line: 280, baseType: !7, size: 32, elements: !337)
!337 = !{!338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353}
!338 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!339 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!340 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!341 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!342 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!343 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!344 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!345 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!346 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!347 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!349 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!350 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!354 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !142, line: 1817, baseType: !7, size: 32, elements: !355)
!355 = !{!356, !357, !358, !359, !360}
!356 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!361 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !142, line: 1805, baseType: !7, size: 32, elements: !362)
!362 = !{!363, !364, !365, !366, !367}
!363 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!368 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !369, line: 363, baseType: !7, size: 32, elements: !370)
!369 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!370 = !{!371, !372, !373}
!371 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!372 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!373 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!374 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !369, line: 355, baseType: !7, size: 32, elements: !375)
!375 = !{!376, !377, !378}
!376 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!377 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!378 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!379 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !380, line: 474, baseType: !7, size: 32, elements: !381)
!380 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!381 = !{!382, !383}
!382 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!383 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!384 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !385, line: 147, baseType: !7, size: 32, elements: !386)
!385 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!386 = !{!387, !388}
!387 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!388 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!389 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !390, line: 104, baseType: !7, size: 32, elements: !391)
!390 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!391 = !{!392, !393, !394, !395}
!392 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!393 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!394 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!395 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!396 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !397, line: 74, baseType: !7, size: 32, elements: !398)
!397 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!398 = !{!399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571}
!399 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!400 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!401 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!402 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!403 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!404 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!405 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!406 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!407 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!408 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!409 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!410 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!411 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!412 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!413 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!414 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!415 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!416 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!417 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!571 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!572 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !142, line: 58, baseType: !7, size: 32, elements: !573)
!573 = !{!574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584}
!574 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!575 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!576 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!577 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!578 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!579 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!580 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!581 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!582 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!583 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!584 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!585 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_personality_kind", file: !6, line: 352, baseType: !7, size: 32, elements: !586)
!586 = !{!587, !588, !589}
!587 = !DIEnumerator(name: "eh_personality_none", value: 0, isUnsigned: true)
!588 = !DIEnumerator(name: "eh_personality_any", value: 1, isUnsigned: true)
!589 = !DIEnumerator(name: "eh_personality_lang", value: 2, isUnsigned: true)
!590 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_try_flags", file: !591, line: 514, baseType: !7, size: 32, elements: !592)
!591 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!592 = !{!593, !594, !595, !596}
!593 = !DIEnumerator(name: "GIMPLE_TRY_CATCH", value: 1, isUnsigned: true)
!594 = !DIEnumerator(name: "GIMPLE_TRY_FINALLY", value: 2, isUnsigned: true)
!595 = !DIEnumerator(name: "GIMPLE_TRY_KIND", value: 3, isUnsigned: true)
!596 = !DIEnumerator(name: "GIMPLE_TRY_CATCH_IS_CLEANUP", value: 4, isUnsigned: true)
!597 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !591, line: 51, baseType: !7, size: 32, elements: !598)
!598 = !{!599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634}
!599 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!600 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!601 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!602 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!603 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!604 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!605 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!606 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!607 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!608 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!609 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!610 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!611 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!612 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!613 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!614 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!615 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!616 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!617 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!618 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!619 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!620 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!621 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!622 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!623 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!624 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!625 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!626 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!627 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!628 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!629 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!630 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!631 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!632 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!633 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!634 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!635 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !591, line: 727, baseType: !7, size: 32, elements: !636)
!636 = !{!637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660}
!637 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!638 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!639 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!640 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!641 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!642 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!643 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!644 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!645 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!646 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!647 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!648 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!649 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!650 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!651 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!652 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!653 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!654 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!655 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!656 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!657 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!658 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!659 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!660 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!661 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !142, line: 205, baseType: !7, size: 32, elements: !662)
!662 = !{!663, !664, !665, !666}
!663 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!664 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!665 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!666 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!667 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !142, line: 3410, baseType: !7, size: 32, elements: !668)
!668 = !{!669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800}
!669 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!670 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!671 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!672 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!673 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!674 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!675 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!676 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!677 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!678 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!679 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!680 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!681 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!682 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!683 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!684 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!685 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!686 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!687 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!688 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!689 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!690 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!691 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!692 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!693 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!694 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!695 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!696 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!697 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!698 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!699 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!700 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!701 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!702 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!703 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!704 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!705 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!706 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!707 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!708 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!709 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!710 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!711 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!712 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!713 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!714 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!715 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!716 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!717 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!718 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!719 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!720 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!721 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!722 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!723 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!724 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!725 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!726 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!727 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!728 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!729 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!730 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!731 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!732 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!733 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!734 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!735 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!736 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!737 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!738 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!739 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!740 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!741 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!742 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!743 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!744 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!745 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!746 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!747 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!748 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!749 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!750 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!751 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!752 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!753 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!754 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!755 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!756 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!757 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!758 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!759 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!760 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!761 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!762 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!763 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!764 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!765 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!766 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!767 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!768 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!769 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!770 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!771 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!772 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!773 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!774 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!775 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!776 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!777 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!778 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!779 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!780 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!781 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!782 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!783 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!784 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!785 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!786 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!787 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!788 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!789 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!790 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!791 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!792 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!793 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!794 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!795 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!796 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!797 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!798 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!799 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!800 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!801 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !591, line: 4603, baseType: !7, size: 32, elements: !802)
!802 = !{!803, !804, !805}
!803 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!804 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!805 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!806 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "integer_type_kind", file: !142, line: 3745, baseType: !7, size: 32, elements: !807)
!807 = !{!808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819}
!808 = !DIEnumerator(name: "itk_char", value: 0, isUnsigned: true)
!809 = !DIEnumerator(name: "itk_signed_char", value: 1, isUnsigned: true)
!810 = !DIEnumerator(name: "itk_unsigned_char", value: 2, isUnsigned: true)
!811 = !DIEnumerator(name: "itk_short", value: 3, isUnsigned: true)
!812 = !DIEnumerator(name: "itk_unsigned_short", value: 4, isUnsigned: true)
!813 = !DIEnumerator(name: "itk_int", value: 5, isUnsigned: true)
!814 = !DIEnumerator(name: "itk_unsigned_int", value: 6, isUnsigned: true)
!815 = !DIEnumerator(name: "itk_long", value: 7, isUnsigned: true)
!816 = !DIEnumerator(name: "itk_unsigned_long", value: 8, isUnsigned: true)
!817 = !DIEnumerator(name: "itk_long_long", value: 9, isUnsigned: true)
!818 = !DIEnumerator(name: "itk_unsigned_long_long", value: 10, isUnsigned: true)
!819 = !DIEnumerator(name: "itk_none", value: 11, isUnsigned: true)
!820 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !591, line: 80, baseType: !7, size: 32, elements: !821)
!821 = !{!822, !823, !824, !825}
!822 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!823 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!824 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!825 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!826 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gf_mask", file: !591, line: 100, baseType: !7, size: 32, elements: !827)
!827 = !{!828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838}
!828 = !DIEnumerator(name: "GF_ASM_INPUT", value: 1, isUnsigned: true)
!829 = !DIEnumerator(name: "GF_ASM_VOLATILE", value: 2, isUnsigned: true)
!830 = !DIEnumerator(name: "GF_CALL_CANNOT_INLINE", value: 1, isUnsigned: true)
!831 = !DIEnumerator(name: "GF_CALL_FROM_THUNK", value: 2, isUnsigned: true)
!832 = !DIEnumerator(name: "GF_CALL_RETURN_SLOT_OPT", value: 4, isUnsigned: true)
!833 = !DIEnumerator(name: "GF_CALL_TAILCALL", value: 8, isUnsigned: true)
!834 = !DIEnumerator(name: "GF_CALL_VA_ARG_PACK", value: 16, isUnsigned: true)
!835 = !DIEnumerator(name: "GF_OMP_PARALLEL_COMBINED", value: 1, isUnsigned: true)
!836 = !DIEnumerator(name: "GF_OMP_RETURN_NOWAIT", value: 1, isUnsigned: true)
!837 = !DIEnumerator(name: "GF_OMP_SECTION_LAST", value: 1, isUnsigned: true)
!838 = !DIEnumerator(name: "GF_PREDICT_TAKEN", value: 32768, isUnsigned: true)
!839 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !369, line: 912, baseType: !7, size: 32, elements: !840)
!840 = !{!841, !842}
!841 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!842 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!843 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !142, line: 220, baseType: !7, size: 32, elements: !844)
!844 = !{!845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562}
!845 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!846 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!847 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!848 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!849 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!850 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!851 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!852 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!853 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!854 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!855 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!856 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!857 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!858 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!859 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!860 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!861 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!862 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!863 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!864 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!865 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!866 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!867 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!868 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!869 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!870 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!871 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!872 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!873 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!874 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!875 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!876 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!877 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!878 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!879 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!880 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!881 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!882 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!883 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!884 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!885 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!886 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!887 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!888 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!889 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!890 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!891 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!892 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!893 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!894 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!895 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!896 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!897 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!898 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!899 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!900 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!901 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!902 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!903 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!904 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!905 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!906 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!907 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!908 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!909 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!910 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!911 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!912 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!913 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!914 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!915 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!916 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!917 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!918 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!919 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!920 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!921 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!922 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!923 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!924 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!925 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!926 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!927 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!928 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!929 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!930 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!931 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!932 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!933 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!934 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!935 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!936 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!937 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!938 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!939 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!940 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!941 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!942 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!943 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!944 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!945 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!946 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!947 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!948 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!949 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!950 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!951 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!952 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!953 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!954 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!955 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!956 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!957 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!958 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!959 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!960 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!961 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!962 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!963 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!964 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!965 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!966 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!967 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!968 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!969 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!970 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!971 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!972 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!973 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!974 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!975 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!976 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!977 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!978 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!979 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!980 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!981 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!982 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!983 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!984 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!985 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!986 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!987 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!988 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!989 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!990 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!991 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!992 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!993 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!994 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!995 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!996 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!997 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!998 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!999 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!1000 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!1001 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!1002 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!1003 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!1004 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!1005 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!1006 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!1007 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!1008 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!1009 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!1010 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!1011 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!1012 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!1013 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!1014 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!1015 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!1016 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!1017 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!1018 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!1019 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!1020 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!1021 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!1022 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!1023 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!1024 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!1025 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!1026 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!1027 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!1028 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!1029 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!1030 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!1031 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!1032 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!1033 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!1034 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!1035 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!1036 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!1037 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!1038 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!1039 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!1040 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!1041 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!1042 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!1043 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!1044 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!1045 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!1046 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!1047 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!1048 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!1049 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!1050 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!1051 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!1052 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!1053 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!1054 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!1055 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!1056 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!1057 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!1058 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!1059 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!1060 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!1061 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!1062 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!1063 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!1064 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!1065 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!1066 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!1067 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!1068 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!1069 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!1070 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!1071 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!1072 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!1073 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!1074 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!1075 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!1076 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!1077 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!1078 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!1079 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!1080 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!1081 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!1082 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!1083 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!1084 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!1085 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!1086 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!1087 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!1088 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!1089 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!1090 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!1091 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!1092 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!1093 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!1094 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!1095 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!1096 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!1097 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!1098 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!1099 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!1100 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!1101 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!1102 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!1103 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!1104 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!1105 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!1106 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!1107 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!1108 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!1109 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!1110 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!1111 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!1112 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!1113 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!1114 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!1115 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!1116 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!1117 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!1118 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!1119 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!1120 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!1121 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!1122 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!1123 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!1124 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!1125 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!1126 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!1127 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!1128 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!1129 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!1130 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!1131 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!1132 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!1133 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!1134 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!1135 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!1136 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!1137 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!1138 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!1139 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!1140 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!1141 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!1142 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!1143 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!1144 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!1145 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!1146 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!1147 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!1148 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!1149 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!1150 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!1151 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!1152 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!1153 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!1154 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!1155 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!1156 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!1157 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!1158 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!1159 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!1160 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!1161 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!1162 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!1163 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!1164 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!1165 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!1166 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!1167 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!1168 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!1169 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!1170 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!1171 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!1172 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!1173 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!1174 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!1175 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!1176 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!1177 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!1178 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!1179 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!1180 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!1181 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!1182 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!1183 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!1184 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!1185 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!1186 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!1187 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!1188 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!1189 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!1190 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!1191 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!1192 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!1193 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!1194 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!1195 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!1196 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!1197 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!1198 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!1199 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!1200 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!1201 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!1202 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!1203 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!1204 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!1205 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!1206 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!1207 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!1208 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!1209 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!1210 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!1211 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!1212 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!1213 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!1214 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!1215 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!1216 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!1217 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!1218 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!1219 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!1220 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!1221 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!1222 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!1223 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!1224 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!1225 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!1226 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!1227 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!1228 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!1229 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!1230 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!1231 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!1232 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!1233 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!1234 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!1235 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!1236 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!1237 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!1238 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!1239 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!1240 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!1241 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!1242 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!1243 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!1244 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!1245 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!1246 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!1247 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!1248 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!1249 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!1250 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!1251 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!1252 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!1253 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!1254 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!1255 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!1256 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!1257 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!1258 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!1259 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!1260 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!1261 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!1262 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!1263 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!1264 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!1265 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!1266 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!1267 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!1268 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!1269 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!1270 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!1271 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!1272 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!1273 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!1274 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!1275 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!1276 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!1277 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!1278 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!1279 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!1280 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!1281 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!1282 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!1283 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!1284 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!1285 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!1286 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!1287 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!1288 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!1289 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!1290 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!1291 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!1292 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!1293 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!1294 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!1295 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!1296 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!1297 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!1298 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!1299 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!1300 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!1301 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!1302 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!1303 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!1304 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!1305 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!1306 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!1307 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!1308 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!1309 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!1310 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!1311 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!1312 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!1313 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!1314 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!1315 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!1316 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!1317 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!1318 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!1319 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!1320 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!1321 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!1322 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!1323 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!1324 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!1325 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!1326 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!1327 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!1328 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!1329 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!1330 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!1331 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!1332 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!1333 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!1334 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!1335 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!1336 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!1337 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!1338 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!1339 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!1340 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!1341 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!1342 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!1343 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!1344 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!1345 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!1346 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!1347 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!1348 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!1349 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!1350 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!1351 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!1352 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!1353 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!1354 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!1355 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!1356 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!1357 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!1358 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!1359 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1360 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1361 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1362 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1363 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1364 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1365 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1366 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1367 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1368 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1369 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1370 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1371 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1372 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1373 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1374 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1375 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1376 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1377 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1378 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1379 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1380 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1381 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1382 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1383 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1384 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1385 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1386 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1387 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1388 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1389 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1390 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1391 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1392 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1393 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1394 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1395 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1396 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1397 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1398 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1399 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1400 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1401 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1402 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1403 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1404 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1405 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1406 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1407 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1408 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1409 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1410 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1411 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1412 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1413 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1414 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1415 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1416 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1417 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1418 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1419 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1420 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1421 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1422 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1423 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1424 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1425 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1426 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1427 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1428 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1429 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1430 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1431 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1432 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1433 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1434 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1435 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1436 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1437 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1438 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1439 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1440 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1441 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1442 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1443 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1444 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1445 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1446 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1447 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1448 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1449 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1450 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1451 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1452 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1453 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1454 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1455 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1456 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1457 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1458 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1459 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1460 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1461 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1462 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1463 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1464 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1465 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1466 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1467 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1468 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1469 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1470 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1471 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1472 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1473 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1474 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1475 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1476 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1477 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1478 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1479 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1480 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1481 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1482 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1483 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1484 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1485 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1486 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1487 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1488 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1489 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1490 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1491 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1492 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1493 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1494 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1495 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1496 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1497 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1498 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1499 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1500 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1501 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1502 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1503 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1504 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1505 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1506 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1507 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1508 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1509 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1510 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1511 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1512 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1513 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1514 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1515 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1516 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1517 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1518 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1519 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1520 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1521 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1522 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1523 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1524 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1525 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1526 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1527 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1528 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1529 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1530 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1531 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1532 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1533 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1534 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1535 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1536 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1537 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1538 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1539 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1540 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1541 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1542 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1543 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1544 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1545 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1546 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1547 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1548 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1549 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1550 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1551 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1552 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1553 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1554 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1555 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1556 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1557 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1558 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1559 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1560 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1561 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1562 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1563 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !369, line: 295, baseType: !7, size: 32, elements: !1564)
!1564 = !{!1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576}
!1565 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!1566 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!1567 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!1568 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!1569 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!1570 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!1571 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!1572 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!1573 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!1574 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!1575 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!1576 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!1577 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !1578, line: 119, baseType: !7, size: 32, elements: !1579)
!1578 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1579 = !{!1580, !1581, !1582, !1583}
!1580 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!1581 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!1582 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!1583 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!1584 = !{!1585, !1767, !1679, !1777, !141, !2111, !2037, !2987, !2138, !2258, !1591, !2989, !2285, !1752, !2991, !590, !3002, !7, !3007, !1610, !3015, !3047, !820, !1729, !3048}
!1585 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1586, size: 64)
!1586 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "throw_stmt_node", file: !6, line: 344, size: 128, elements: !1587)
!1587 = !{!1588, !2986}
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1586, file: !6, line: 345, baseType: !1589, size: 64)
!1589 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1590, line: 58, baseType: !1591)
!1590 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1591 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1592, size: 64)
!1592 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !591, line: 737, size: 768, elements: !1593)
!1593 = !{!1594, !2833, !2843, !2849, !2854, !2859, !2866, !2872, !2878, !2883, !2897, !2902, !2908, !2913, !2923, !2928, !2944, !2951, !2958, !2964, !2969, !2975, !2981}
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1592, file: !591, line: 738, baseType: !1595, size: 256)
!1595 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !591, line: 271, size: 256, elements: !1596)
!1596 = !{!1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1612, !1613, !2832}
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1595, file: !591, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1595, file: !591, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1595, file: !591, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1595, file: !591, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1595, file: !591, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1595, file: !591, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1595, file: !591, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1595, file: !591, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1595, file: !591, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1595, file: !591, line: 312, baseType: !7, size: 32, offset: 32)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1595, file: !591, line: 316, baseType: !1608, size: 32, offset: 64)
!1608 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1609, line: 58, baseType: !1610)
!1609 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1610 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1611, line: 44, baseType: !7)
!1611 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1595, file: !591, line: 319, baseType: !7, size: 32, offset: 96)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1595, file: !591, line: 323, baseType: !1614, size: 64, offset: 128)
!1614 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1615, size: 64)
!1615 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !369, line: 217, size: 832, elements: !1616)
!1616 = !{!1617, !2797, !2798, !2799, !2802, !2806, !2807, !2808, !2826, !2827, !2828, !2829, !2830, !2831}
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1615, file: !369, line: 219, baseType: !1618, size: 64)
!1618 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1619, size: 64)
!1619 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !369, line: 151, baseType: !1620)
!1620 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !369, line: 151, size: 128, elements: !1621)
!1621 = !{!1622}
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1620, file: !369, line: 151, baseType: !1623, size: 128)
!1623 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !369, line: 150, baseType: !1624)
!1624 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !369, line: 150, size: 128, elements: !1625)
!1625 = !{!1626, !1627, !1628}
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1624, file: !369, line: 150, baseType: !7, size: 32)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1624, file: !369, line: 150, baseType: !7, size: 32, offset: 32)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1624, file: !369, line: 150, baseType: !1629, size: 64, offset: 64)
!1629 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1630, size: 64, elements: !1694)
!1630 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1590, line: 108, baseType: !1631)
!1631 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1632, size: 64)
!1632 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !369, line: 122, size: 512, elements: !1633)
!1633 = !{!1634, !1635, !1636, !2789, !2790, !2791, !2792, !2793, !2794, !2795}
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1632, file: !369, line: 124, baseType: !1614, size: 64)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1632, file: !369, line: 125, baseType: !1614, size: 64, offset: 64)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1632, file: !369, line: 131, baseType: !1637, size: 64, offset: 128)
!1637 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !369, line: 128, size: 64, elements: !1638)
!1638 = !{!1639, !1654}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1637, file: !369, line: 129, baseType: !1640, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1590, line: 66, baseType: !1641)
!1641 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1642, size: 64)
!1642 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !591, line: 143, size: 192, elements: !1643)
!1643 = !{!1644, !1652, !1653}
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1642, file: !591, line: 145, baseType: !1645, size: 64)
!1645 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1590, line: 69, baseType: !1646)
!1646 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1647, size: 64)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !591, line: 136, size: 192, elements: !1648)
!1648 = !{!1649, !1650, !1651}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1647, file: !591, line: 137, baseType: !1589, size: 64)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1647, file: !591, line: 138, baseType: !1646, size: 64, offset: 64)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1647, file: !591, line: 139, baseType: !1646, size: 64, offset: 128)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1642, file: !591, line: 146, baseType: !1645, size: 64, offset: 64)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1642, file: !591, line: 152, baseType: !1640, size: 64, offset: 128)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1637, file: !369, line: 130, baseType: !1655, size: 64)
!1655 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1590, line: 50, baseType: !1656)
!1656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1657, size: 64)
!1657 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1658, line: 240, size: 384, elements: !1659)
!1658 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1659 = !{!1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670}
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1657, file: !1658, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1657, file: !1658, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1657, file: !1658, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1657, file: !1658, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1657, file: !1658, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1657, file: !1658, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1657, file: !1658, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1657, file: !1658, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1657, file: !1658, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1657, file: !1658, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1657, file: !1658, line: 321, baseType: !1671, size: 320, offset: 64)
!1671 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1658, line: 315, size: 320, elements: !1672)
!1672 = !{!1673, !2756, !2758, !2787, !2788}
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1671, file: !1658, line: 316, baseType: !1674, size: 64)
!1674 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1675, size: 64, elements: !1694)
!1675 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1658, line: 183, baseType: !1676)
!1676 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1658, line: 166, size: 64, elements: !1677)
!1677 = !{!1678, !1680, !1681, !1685, !1686, !1696, !1697, !1709, !1712, !1776, !2734, !2735, !2746, !2753}
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1676, file: !1658, line: 168, baseType: !1679, size: 32)
!1679 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1676, file: !1658, line: 169, baseType: !7, size: 32)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1676, file: !1658, line: 170, baseType: !1682, size: 64)
!1682 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1683, size: 64)
!1683 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1684)
!1684 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1676, file: !1658, line: 171, baseType: !1655, size: 64)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1676, file: !1658, line: 172, baseType: !1687, size: 64)
!1687 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1590, line: 53, baseType: !1688)
!1688 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1689, size: 64)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1658, line: 359, size: 128, elements: !1690)
!1690 = !{!1691, !1692}
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1689, file: !1658, line: 360, baseType: !1679, size: 32)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1689, file: !1658, line: 361, baseType: !1693, size: 64, offset: 64)
!1693 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1655, size: 64, elements: !1694)
!1694 = !{!1695}
!1695 = !DISubrange(count: 1)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1676, file: !1658, line: 173, baseType: !13, size: 32)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1676, file: !1658, line: 174, baseType: !1698, size: 32)
!1698 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1658, line: 133, baseType: !1699)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1658, line: 115, size: 32, elements: !1700)
!1700 = !{!1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1699, file: !1658, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1699, file: !1658, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1699, file: !1658, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1699, file: !1658, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1699, file: !1658, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1699, file: !1658, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1699, file: !1658, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1699, file: !1658, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1676, file: !1658, line: 175, baseType: !1710, size: 64)
!1710 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1711, size: 64)
!1711 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1658, line: 175, flags: DIFlagFwdDecl)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1676, file: !1658, line: 176, baseType: !1713, size: 64)
!1713 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1714, size: 64)
!1714 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1715, line: 75, size: 256, elements: !1716)
!1715 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1716 = !{!1717, !1732, !1733, !1734}
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1714, file: !1715, line: 76, baseType: !1718, size: 64)
!1718 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1719, size: 64)
!1719 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1715, line: 68, baseType: !1720)
!1720 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1715, line: 63, size: 320, elements: !1721)
!1721 = !{!1722, !1724, !1725, !1726}
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1720, file: !1715, line: 64, baseType: !1723, size: 64)
!1723 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1720, size: 64)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1720, file: !1715, line: 65, baseType: !1723, size: 64, offset: 64)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1720, file: !1715, line: 66, baseType: !7, size: 32, offset: 128)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1720, file: !1715, line: 67, baseType: !1727, size: 128, offset: 192)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1728, size: 128, elements: !1730)
!1728 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1715, line: 29, baseType: !1729)
!1729 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1730 = !{!1731}
!1731 = !DISubrange(count: 2)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1714, file: !1715, line: 77, baseType: !1718, size: 64, offset: 64)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1714, file: !1715, line: 78, baseType: !7, size: 32, offset: 128)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1714, file: !1715, line: 79, baseType: !1735, size: 64, offset: 192)
!1735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1736, size: 64)
!1736 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1715, line: 49, baseType: !1737)
!1737 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1715, line: 45, size: 832, elements: !1738)
!1738 = !{!1739, !1740, !1741}
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1737, file: !1715, line: 46, baseType: !1723, size: 64)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1737, file: !1715, line: 47, baseType: !1713, size: 64, offset: 64)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1737, file: !1715, line: 48, baseType: !1742, size: 704, offset: 128)
!1742 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1743, line: 164, size: 704, elements: !1744)
!1743 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1744 = !{!1745, !1747, !1758, !1759, !1760, !1761, !1762, !1763, !1768, !1772, !1773, !1774, !1775}
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1742, file: !1743, line: 166, baseType: !1746, size: 64)
!1746 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1742, file: !1743, line: 167, baseType: !1748, size: 64, offset: 64)
!1748 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1749, size: 64)
!1749 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1743, line: 157, size: 192, elements: !1750)
!1750 = !{!1751, !1753, !1754}
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1749, file: !1743, line: 159, baseType: !1752, size: 64)
!1752 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1684, size: 64)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1749, file: !1743, line: 160, baseType: !1748, size: 64, offset: 64)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1749, file: !1743, line: 161, baseType: !1755, size: 32, offset: 128)
!1755 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1684, size: 32, elements: !1756)
!1756 = !{!1757}
!1757 = !DISubrange(count: 4)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1742, file: !1743, line: 168, baseType: !1752, size: 64, offset: 128)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1742, file: !1743, line: 169, baseType: !1752, size: 64, offset: 192)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1742, file: !1743, line: 170, baseType: !1752, size: 64, offset: 256)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1742, file: !1743, line: 171, baseType: !1746, size: 64, offset: 320)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1742, file: !1743, line: 172, baseType: !1679, size: 32, offset: 384)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1742, file: !1743, line: 176, baseType: !1764, size: 64, offset: 448)
!1764 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1765, size: 64)
!1765 = !DISubroutineType(types: !1766)
!1766 = !{!1748, !1767, !1746}
!1767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1742, file: !1743, line: 177, baseType: !1769, size: 64, offset: 512)
!1769 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1770, size: 64)
!1770 = !DISubroutineType(types: !1771)
!1771 = !{null, !1767, !1748}
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1742, file: !1743, line: 178, baseType: !1767, size: 64, offset: 576)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1742, file: !1743, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1742, file: !1743, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1742, file: !1743, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1676, file: !1658, line: 177, baseType: !1777, size: 64)
!1777 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1590, line: 56, baseType: !1778)
!1778 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1779, size: 64)
!1779 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !142, line: 3371, size: 1792, elements: !1780)
!1780 = !{!1781, !1814, !1820, !1831, !1850, !1861, !1866, !1873, !1879, !1893, !1901, !1939, !1944, !1972, !1989, !1990, !1995, !2004, !2010, !2015, !2019, !2023, !2383, !2432, !2438, !2444, !2451, !2464, !2478, !2495, !2507, !2529, !2544, !2716}
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1779, file: !142, line: 3372, baseType: !1782, size: 64)
!1782 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !142, line: 360, size: 64, elements: !1783)
!1783 = !{!1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813}
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1782, file: !142, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1782, file: !142, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1782, file: !142, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1782, file: !142, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1782, file: !142, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1782, file: !142, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1782, file: !142, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1782, file: !142, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1782, file: !142, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1782, file: !142, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1782, file: !142, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1782, file: !142, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1782, file: !142, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1782, file: !142, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1782, file: !142, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1782, file: !142, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1782, file: !142, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1782, file: !142, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1782, file: !142, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1782, file: !142, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1782, file: !142, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1782, file: !142, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1782, file: !142, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1782, file: !142, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1782, file: !142, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1782, file: !142, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1782, file: !142, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1782, file: !142, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1782, file: !142, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1782, file: !142, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1779, file: !142, line: 3373, baseType: !1815, size: 192)
!1815 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !142, line: 402, size: 192, elements: !1816)
!1816 = !{!1817, !1818, !1819}
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1815, file: !142, line: 403, baseType: !1782, size: 64)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1815, file: !142, line: 404, baseType: !1777, size: 64, offset: 64)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1815, file: !142, line: 405, baseType: !1777, size: 64, offset: 128)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1779, file: !142, line: 3374, baseType: !1821, size: 320)
!1821 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !142, line: 1384, size: 320, elements: !1822)
!1822 = !{!1823, !1824}
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1821, file: !142, line: 1385, baseType: !1815, size: 192)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1821, file: !142, line: 1386, baseType: !1825, size: 128, offset: 192)
!1825 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1826, line: 58, baseType: !1827)
!1826 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1827 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1826, line: 54, size: 128, elements: !1828)
!1828 = !{!1829, !1830}
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1827, file: !1826, line: 56, baseType: !1729, size: 64)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1827, file: !1826, line: 57, baseType: !1746, size: 64, offset: 64)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1779, file: !142, line: 3375, baseType: !1832, size: 256)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !142, line: 1397, size: 256, elements: !1833)
!1833 = !{!1834, !1835}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1832, file: !142, line: 1398, baseType: !1815, size: 192)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1832, file: !142, line: 1399, baseType: !1836, size: 64, offset: 192)
!1836 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1837, size: 64)
!1837 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1838, line: 52, size: 256, elements: !1839)
!1838 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1839 = !{!1840, !1841, !1842, !1843, !1844, !1845, !1846}
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1837, file: !1838, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1837, file: !1838, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1837, file: !1838, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1837, file: !1838, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1837, file: !1838, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1837, file: !1838, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1837, file: !1838, line: 62, baseType: !1847, size: 192, offset: 64)
!1847 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1729, size: 192, elements: !1848)
!1848 = !{!1849}
!1849 = !DISubrange(count: 3)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1779, file: !142, line: 3376, baseType: !1851, size: 256)
!1851 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !142, line: 1408, size: 256, elements: !1852)
!1852 = !{!1853, !1854}
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1851, file: !142, line: 1409, baseType: !1815, size: 192)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1851, file: !142, line: 1410, baseType: !1855, size: 64, offset: 192)
!1855 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1856, size: 64)
!1856 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1857, line: 27, size: 192, elements: !1858)
!1857 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1858 = !{!1859, !1860}
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1856, file: !1857, line: 29, baseType: !1825, size: 128)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1856, file: !1857, line: 30, baseType: !13, size: 32, offset: 128)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1779, file: !142, line: 3377, baseType: !1862, size: 256)
!1862 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !142, line: 1437, size: 256, elements: !1863)
!1863 = !{!1864, !1865}
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1862, file: !142, line: 1438, baseType: !1815, size: 192)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1862, file: !142, line: 1439, baseType: !1777, size: 64, offset: 192)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1779, file: !142, line: 3378, baseType: !1867, size: 256)
!1867 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !142, line: 1418, size: 256, elements: !1868)
!1868 = !{!1869, !1870, !1871}
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1867, file: !142, line: 1419, baseType: !1815, size: 192)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1867, file: !142, line: 1420, baseType: !1679, size: 32, offset: 192)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1867, file: !142, line: 1421, baseType: !1872, size: 8, offset: 224)
!1872 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1684, size: 8, elements: !1694)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1779, file: !142, line: 3379, baseType: !1874, size: 320)
!1874 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !142, line: 1428, size: 320, elements: !1875)
!1875 = !{!1876, !1877, !1878}
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1874, file: !142, line: 1429, baseType: !1815, size: 192)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1874, file: !142, line: 1430, baseType: !1777, size: 64, offset: 192)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1874, file: !142, line: 1431, baseType: !1777, size: 64, offset: 256)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1779, file: !142, line: 3380, baseType: !1880, size: 320)
!1880 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !142, line: 1460, size: 320, elements: !1881)
!1881 = !{!1882, !1883}
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1880, file: !142, line: 1461, baseType: !1815, size: 192)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1880, file: !142, line: 1462, baseType: !1884, size: 128, offset: 192)
!1884 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1885, line: 31, size: 128, elements: !1886)
!1885 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1886 = !{!1887, !1891, !1892}
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1884, file: !1885, line: 32, baseType: !1888, size: 64)
!1888 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1889, size: 64)
!1889 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1890)
!1890 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1884, file: !1885, line: 33, baseType: !7, size: 32, offset: 64)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1884, file: !1885, line: 34, baseType: !7, size: 32, offset: 96)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1779, file: !142, line: 3381, baseType: !1894, size: 384)
!1894 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !142, line: 2507, size: 384, elements: !1895)
!1895 = !{!1896, !1897, !1898, !1899, !1900}
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1894, file: !142, line: 2508, baseType: !1815, size: 192)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1894, file: !142, line: 2509, baseType: !1608, size: 32, offset: 192)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1894, file: !142, line: 2510, baseType: !7, size: 32, offset: 224)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1894, file: !142, line: 2511, baseType: !1777, size: 64, offset: 256)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1894, file: !142, line: 2512, baseType: !1777, size: 64, offset: 320)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1779, file: !142, line: 3382, baseType: !1902, size: 896)
!1902 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !142, line: 2652, size: 896, elements: !1903)
!1903 = !{!1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936}
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1902, file: !142, line: 2653, baseType: !1894, size: 384)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1902, file: !142, line: 2654, baseType: !1777, size: 64, offset: 384)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1902, file: !142, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1902, file: !142, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1902, file: !142, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1902, file: !142, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1902, file: !142, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1902, file: !142, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1902, file: !142, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1902, file: !142, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1902, file: !142, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1902, file: !142, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1902, file: !142, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1902, file: !142, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1902, file: !142, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1902, file: !142, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1902, file: !142, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1902, file: !142, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1902, file: !142, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1902, file: !142, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1902, file: !142, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1902, file: !142, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1902, file: !142, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1902, file: !142, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1902, file: !142, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1902, file: !142, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1902, file: !142, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1902, file: !142, line: 2703, baseType: !7, size: 32, offset: 512)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1902, file: !142, line: 2705, baseType: !1777, size: 64, offset: 576)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1902, file: !142, line: 2706, baseType: !1777, size: 64, offset: 640)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1902, file: !142, line: 2707, baseType: !1777, size: 64, offset: 704)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1902, file: !142, line: 2708, baseType: !1777, size: 64, offset: 768)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1902, file: !142, line: 2711, baseType: !1937, size: 64, offset: 832)
!1937 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1938, size: 64)
!1938 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !142, line: 2711, flags: DIFlagFwdDecl)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1779, file: !142, line: 3383, baseType: !1940, size: 960)
!1940 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !142, line: 2756, size: 960, elements: !1941)
!1941 = !{!1942, !1943}
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1940, file: !142, line: 2757, baseType: !1902, size: 896)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1940, file: !142, line: 2758, baseType: !1655, size: 64, offset: 896)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1779, file: !142, line: 3384, baseType: !1945, size: 1472)
!1945 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !142, line: 3114, size: 1472, elements: !1946)
!1946 = !{!1947, !1968, !1969, !1970, !1971}
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1945, file: !142, line: 3115, baseType: !1948, size: 1216)
!1948 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !142, line: 2984, size: 1216, elements: !1949)
!1949 = !{!1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967}
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1948, file: !142, line: 2985, baseType: !1940, size: 960)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1948, file: !142, line: 2986, baseType: !1777, size: 64, offset: 960)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1948, file: !142, line: 2987, baseType: !1777, size: 64, offset: 1024)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1948, file: !142, line: 2988, baseType: !1777, size: 64, offset: 1088)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1948, file: !142, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1948, file: !142, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1948, file: !142, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1948, file: !142, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1948, file: !142, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1948, file: !142, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1948, file: !142, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1948, file: !142, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1948, file: !142, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1948, file: !142, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1948, file: !142, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1948, file: !142, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1948, file: !142, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1948, file: !142, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1945, file: !142, line: 3117, baseType: !1777, size: 64, offset: 1216)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1945, file: !142, line: 3119, baseType: !1777, size: 64, offset: 1280)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1945, file: !142, line: 3121, baseType: !1777, size: 64, offset: 1344)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1945, file: !142, line: 3123, baseType: !1777, size: 64, offset: 1408)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1779, file: !142, line: 3385, baseType: !1973, size: 1088)
!1973 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !142, line: 2874, size: 1088, elements: !1974)
!1974 = !{!1975, !1976, !1977}
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1973, file: !142, line: 2875, baseType: !1940, size: 960)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1973, file: !142, line: 2876, baseType: !1655, size: 64, offset: 960)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1973, file: !142, line: 2877, baseType: !1978, size: 64, offset: 1024)
!1978 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1979, size: 64)
!1979 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1980, line: 172, size: 128, elements: !1981)
!1980 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1981 = !{!1982, !1983, !1984, !1985, !1986, !1987, !1988}
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1979, file: !1980, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1979, file: !1980, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1979, file: !1980, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1979, file: !1980, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1979, file: !1980, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1979, file: !1980, line: 195, baseType: !7, size: 32, offset: 32)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1979, file: !1980, line: 199, baseType: !1777, size: 64, offset: 64)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1779, file: !142, line: 3386, baseType: !1948, size: 1216)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1779, file: !142, line: 3387, baseType: !1991, size: 1280)
!1991 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !142, line: 3093, size: 1280, elements: !1992)
!1992 = !{!1993, !1994}
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1991, file: !142, line: 3094, baseType: !1948, size: 1216)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1991, file: !142, line: 3095, baseType: !1978, size: 64, offset: 1216)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1779, file: !142, line: 3388, baseType: !1996, size: 1216)
!1996 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !142, line: 2824, size: 1216, elements: !1997)
!1997 = !{!1998, !1999, !2000, !2001, !2002, !2003}
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1996, file: !142, line: 2825, baseType: !1902, size: 896)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1996, file: !142, line: 2827, baseType: !1777, size: 64, offset: 896)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1996, file: !142, line: 2828, baseType: !1777, size: 64, offset: 960)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1996, file: !142, line: 2829, baseType: !1777, size: 64, offset: 1024)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1996, file: !142, line: 2830, baseType: !1777, size: 64, offset: 1088)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1996, file: !142, line: 2831, baseType: !1777, size: 64, offset: 1152)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1779, file: !142, line: 3389, baseType: !2005, size: 1024)
!2005 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !142, line: 2850, size: 1024, elements: !2006)
!2006 = !{!2007, !2008, !2009}
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2005, file: !142, line: 2851, baseType: !1940, size: 960)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2005, file: !142, line: 2852, baseType: !1679, size: 32, offset: 960)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2005, file: !142, line: 2853, baseType: !1679, size: 32, offset: 992)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1779, file: !142, line: 3390, baseType: !2011, size: 1024)
!2011 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !142, line: 2857, size: 1024, elements: !2012)
!2012 = !{!2013, !2014}
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2011, file: !142, line: 2858, baseType: !1940, size: 960)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2011, file: !142, line: 2859, baseType: !1978, size: 64, offset: 960)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1779, file: !142, line: 3391, baseType: !2016, size: 960)
!2016 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !142, line: 2862, size: 960, elements: !2017)
!2017 = !{!2018}
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2016, file: !142, line: 2863, baseType: !1940, size: 960)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1779, file: !142, line: 3392, baseType: !2020, size: 1472)
!2020 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !142, line: 3304, size: 1472, elements: !2021)
!2021 = !{!2022}
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2020, file: !142, line: 3305, baseType: !1945, size: 1472)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1779, file: !142, line: 3393, baseType: !2024, size: 1792)
!2024 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !142, line: 3248, size: 1792, elements: !2025)
!2025 = !{!2026, !2027, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382}
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2024, file: !142, line: 3249, baseType: !1945, size: 1472)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2024, file: !142, line: 3251, baseType: !2028, size: 64, offset: 1472)
!2028 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2029, size: 64)
!2029 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2030, line: 463, size: 1152, elements: !2031)
!2030 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2031 = !{!2032, !2195, !2226, !2227, !2303, !2306, !2307, !2308, !2309, !2310, !2311, !2335, !2338, !2339, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359, !2360, !2361}
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2029, file: !2030, line: 464, baseType: !2033, size: 64)
!2033 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2034, size: 64)
!2034 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !6, line: 194, size: 384, elements: !2035)
!2035 = !{!2036, !2085, !2098, !2112, !2163, !2176}
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !2034, file: !6, line: 197, baseType: !2037, size: 64)
!2037 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !6, line: 182, baseType: !2038)
!2038 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2039, size: 64)
!2039 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !6, line: 116, size: 704, elements: !2040)
!2040 = !{!2041, !2042, !2043, !2044, !2045, !2046, !2073, !2082, !2083, !2084}
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !2039, file: !6, line: 119, baseType: !2038, size: 64)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !2039, file: !6, line: 122, baseType: !2038, size: 64, offset: 64)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !2039, file: !6, line: 123, baseType: !2038, size: 64, offset: 128)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2039, file: !6, line: 126, baseType: !1679, size: 32, offset: 192)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2039, file: !6, line: 129, baseType: !5, size: 32, offset: 224)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2039, file: !6, line: 165, baseType: !2047, size: 192, offset: 256)
!2047 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !6, line: 132, size: 192, elements: !2048)
!2048 = !{!2049, !2062, !2068}
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !2047, file: !6, line: 137, baseType: !2050, size: 128)
!2050 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !6, line: 133, size: 128, elements: !2051)
!2051 = !{!2052, !2061}
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !2050, file: !6, line: 135, baseType: !2053, size: 64)
!2053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2054, size: 64)
!2054 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !6, line: 93, size: 320, elements: !2055)
!2055 = !{!2056, !2057, !2058, !2059, !2060}
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !2054, file: !6, line: 96, baseType: !2053, size: 64)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !2054, file: !6, line: 97, baseType: !2053, size: 64, offset: 64)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !2054, file: !6, line: 101, baseType: !1777, size: 64, offset: 128)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !2054, file: !6, line: 106, baseType: !1777, size: 64, offset: 192)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !2054, file: !6, line: 111, baseType: !1777, size: 64, offset: 256)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !2050, file: !6, line: 136, baseType: !2053, size: 64, offset: 64)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !2047, file: !6, line: 151, baseType: !2063, size: 192)
!2063 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !6, line: 139, size: 192, elements: !2064)
!2064 = !{!2065, !2066, !2067}
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !2063, file: !6, line: 141, baseType: !1777, size: 64)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !2063, file: !6, line: 145, baseType: !1777, size: 64, offset: 64)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !2063, file: !6, line: 150, baseType: !1679, size: 32, offset: 128)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !2047, file: !6, line: 164, baseType: !2069, size: 128)
!2069 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !6, line: 153, size: 128, elements: !2070)
!2070 = !{!2071, !2072}
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !2069, file: !6, line: 161, baseType: !1777, size: 64)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !2069, file: !6, line: 163, baseType: !1608, size: 32, offset: 64)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !2039, file: !6, line: 168, baseType: !2074, size: 64, offset: 448)
!2074 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2075, size: 64)
!2075 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !6, line: 67, size: 320, elements: !2076)
!2076 = !{!2077, !2078, !2079, !2080, !2081}
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !2075, file: !6, line: 70, baseType: !2074, size: 64)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2075, file: !6, line: 73, baseType: !2038, size: 64, offset: 64)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !2075, file: !6, line: 78, baseType: !1777, size: 64, offset: 128)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !2075, file: !6, line: 85, baseType: !1655, size: 64, offset: 192)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2075, file: !6, line: 88, baseType: !1679, size: 32, offset: 256)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !2039, file: !6, line: 173, baseType: !1655, size: 64, offset: 512)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !2039, file: !6, line: 173, baseType: !1655, size: 64, offset: 576)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !2039, file: !6, line: 177, baseType: !1890, size: 8, offset: 640)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !2034, file: !6, line: 200, baseType: !2086, size: 64, offset: 64)
!2086 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2087, size: 64)
!2087 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !6, line: 185, baseType: !2088)
!2088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !6, line: 185, size: 128, elements: !2089)
!2089 = !{!2090}
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2088, file: !6, line: 185, baseType: !2091, size: 128)
!2091 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !6, line: 184, baseType: !2092)
!2092 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !6, line: 184, size: 128, elements: !2093)
!2093 = !{!2094, !2095, !2096}
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2092, file: !6, line: 184, baseType: !7, size: 32)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2092, file: !6, line: 184, baseType: !7, size: 32, offset: 32)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2092, file: !6, line: 184, baseType: !2097, size: 64, offset: 64)
!2097 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2037, size: 64, elements: !1694)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !2034, file: !6, line: 203, baseType: !2099, size: 64, offset: 128)
!2099 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2100, size: 64)
!2100 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !6, line: 189, baseType: !2101)
!2101 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !6, line: 189, size: 128, elements: !2102)
!2102 = !{!2103}
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2101, file: !6, line: 189, baseType: !2104, size: 128)
!2104 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !6, line: 188, baseType: !2105)
!2105 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !6, line: 188, size: 128, elements: !2106)
!2106 = !{!2107, !2108, !2109}
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2105, file: !6, line: 188, baseType: !7, size: 32)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2105, file: !6, line: 188, baseType: !7, size: 32, offset: 32)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2105, file: !6, line: 188, baseType: !2110, size: 64, offset: 64)
!2110 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2111, size: 64, elements: !1694)
!2111 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !6, line: 180, baseType: !2074)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !2034, file: !6, line: 207, baseType: !2113, size: 64, offset: 192)
!2113 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !385, line: 144, baseType: !2114)
!2114 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2115, size: 64)
!2115 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !385, line: 100, size: 896, elements: !2116)
!2116 = !{!2117, !2125, !2130, !2135, !2137, !2140, !2141, !2142, !2143, !2144, !2149, !2151, !2152, !2157, !2162}
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2115, file: !385, line: 102, baseType: !2118, size: 64)
!2118 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !385, line: 52, baseType: !2119)
!2119 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2120, size: 64)
!2120 = !DISubroutineType(types: !2121)
!2121 = !{!2122, !2123}
!2122 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !385, line: 47, baseType: !7)
!2123 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2124, size: 64)
!2124 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2115, file: !385, line: 105, baseType: !2126, size: 64, offset: 64)
!2126 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !385, line: 59, baseType: !2127)
!2127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2128, size: 64)
!2128 = !DISubroutineType(types: !2129)
!2129 = !{!1679, !2123, !2123}
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2115, file: !385, line: 108, baseType: !2131, size: 64, offset: 128)
!2131 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !385, line: 63, baseType: !2132)
!2132 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2133, size: 64)
!2133 = !DISubroutineType(types: !2134)
!2134 = !{null, !1767}
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2115, file: !385, line: 111, baseType: !2136, size: 64, offset: 192)
!2136 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1767, size: 64)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2115, file: !385, line: 114, baseType: !2138, size: 64, offset: 256)
!2138 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2139, line: 46, baseType: !1729)
!2139 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2115, file: !385, line: 117, baseType: !2138, size: 64, offset: 320)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2115, file: !385, line: 120, baseType: !2138, size: 64, offset: 384)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2115, file: !385, line: 124, baseType: !7, size: 32, offset: 448)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2115, file: !385, line: 128, baseType: !7, size: 32, offset: 480)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2115, file: !385, line: 131, baseType: !2145, size: 64, offset: 512)
!2145 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !385, line: 75, baseType: !2146)
!2146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2147, size: 64)
!2147 = !DISubroutineType(types: !2148)
!2148 = !{!1767, !2138, !2138}
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2115, file: !385, line: 132, baseType: !2150, size: 64, offset: 576)
!2150 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !385, line: 78, baseType: !2132)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2115, file: !385, line: 135, baseType: !1767, size: 64, offset: 640)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2115, file: !385, line: 136, baseType: !2153, size: 64, offset: 704)
!2153 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !385, line: 82, baseType: !2154)
!2154 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2155, size: 64)
!2155 = !DISubroutineType(types: !2156)
!2156 = !{!1767, !1767, !2138, !2138}
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2115, file: !385, line: 137, baseType: !2158, size: 64, offset: 768)
!2158 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !385, line: 83, baseType: !2159)
!2159 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2160, size: 64)
!2160 = !DISubroutineType(types: !2161)
!2161 = !{null, !1767, !1767}
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2115, file: !385, line: 141, baseType: !7, size: 32, offset: 832)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !2034, file: !6, line: 211, baseType: !2164, size: 64, offset: 256)
!2164 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2165, size: 64)
!2165 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !142, line: 183, baseType: !2166)
!2166 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !142, line: 183, size: 128, elements: !2167)
!2167 = !{!2168}
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2166, file: !142, line: 183, baseType: !2169, size: 128)
!2169 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !142, line: 182, baseType: !2170)
!2170 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !142, line: 182, size: 128, elements: !2171)
!2171 = !{!2172, !2173, !2174}
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2170, file: !142, line: 182, baseType: !7, size: 32)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2170, file: !142, line: 182, baseType: !7, size: 32, offset: 32)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2170, file: !142, line: 182, baseType: !2175, size: 64, offset: 64)
!2175 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1777, size: 64, elements: !1694)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !2034, file: !6, line: 220, baseType: !2177, size: 64, offset: 320)
!2177 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !6, line: 217, size: 64, elements: !2178)
!2178 = !{!2179, !2180}
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !2177, file: !6, line: 218, baseType: !2164, size: 64)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !2177, file: !6, line: 219, baseType: !2181, size: 64)
!2181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2182, size: 64)
!2182 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !2183, line: 29, baseType: !2184)
!2183 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2184 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !2183, line: 29, size: 96, elements: !2185)
!2185 = !{!2186}
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2184, file: !2183, line: 29, baseType: !2187, size: 96)
!2187 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !2183, line: 27, baseType: !2188)
!2188 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !2183, line: 27, size: 96, elements: !2189)
!2189 = !{!2190, !2191, !2192}
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2188, file: !2183, line: 27, baseType: !7, size: 32)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2188, file: !2183, line: 27, baseType: !7, size: 32, offset: 32)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2188, file: !2183, line: 27, baseType: !2193, size: 8, offset: 64)
!2193 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2194, size: 8, elements: !1694)
!2194 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !2183, line: 26, baseType: !1890)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2029, file: !2030, line: 467, baseType: !2196, size: 64, offset: 64)
!2196 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2197, size: 64)
!2197 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !369, line: 374, size: 640, elements: !2198)
!2198 = !{!2199, !2201, !2202, !2215, !2216, !2217, !2218, !2219, !2220, !2222, !2224, !2225}
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2197, file: !369, line: 377, baseType: !2200, size: 64)
!2200 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1590, line: 111, baseType: !1614)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2197, file: !369, line: 378, baseType: !2200, size: 64, offset: 64)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2197, file: !369, line: 381, baseType: !2203, size: 64, offset: 128)
!2203 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2204, size: 64)
!2204 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !369, line: 282, baseType: !2205)
!2205 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !369, line: 282, size: 128, elements: !2206)
!2206 = !{!2207}
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2205, file: !369, line: 282, baseType: !2208, size: 128)
!2208 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !369, line: 281, baseType: !2209)
!2209 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !369, line: 281, size: 128, elements: !2210)
!2210 = !{!2211, !2212, !2213}
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2209, file: !369, line: 281, baseType: !7, size: 32)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2209, file: !369, line: 281, baseType: !7, size: 32, offset: 32)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2209, file: !369, line: 281, baseType: !2214, size: 64, offset: 64)
!2214 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2200, size: 64, elements: !1694)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2197, file: !369, line: 384, baseType: !1679, size: 32, offset: 192)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2197, file: !369, line: 387, baseType: !1679, size: 32, offset: 224)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2197, file: !369, line: 390, baseType: !1679, size: 32, offset: 256)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2197, file: !369, line: 394, baseType: !2203, size: 64, offset: 320)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2197, file: !369, line: 396, baseType: !368, size: 32, offset: 384)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2197, file: !369, line: 399, baseType: !2221, size: 64, offset: 416)
!2221 = !DICompositeType(tag: DW_TAG_array_type, baseType: !374, size: 64, elements: !1730)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2197, file: !369, line: 402, baseType: !2223, size: 64, offset: 480)
!2223 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1730)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2197, file: !369, line: 406, baseType: !1679, size: 32, offset: 544)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2197, file: !369, line: 409, baseType: !1679, size: 32, offset: 576)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2029, file: !2030, line: 470, baseType: !1641, size: 64, offset: 128)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2029, file: !2030, line: 473, baseType: !2228, size: 64, offset: 192)
!2228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2229, size: 64)
!2229 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1980, line: 39, size: 1152, elements: !2230)
!2230 = !{!2231, !2232, !2245, !2246, !2247, !2259, !2260, !2263, !2264, !2265, !2266, !2267}
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2229, file: !1980, line: 41, baseType: !2113, size: 64)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2229, file: !1980, line: 48, baseType: !2233, size: 64, offset: 64)
!2233 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2234, size: 64)
!2234 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !591, line: 35, baseType: !2235)
!2235 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !591, line: 35, size: 128, elements: !2236)
!2236 = !{!2237}
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2235, file: !591, line: 35, baseType: !2238, size: 128)
!2238 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !591, line: 33, baseType: !2239)
!2239 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !591, line: 33, size: 128, elements: !2240)
!2240 = !{!2241, !2242, !2243}
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2239, file: !591, line: 33, baseType: !7, size: 32)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2239, file: !591, line: 33, baseType: !7, size: 32, offset: 32)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2239, file: !591, line: 33, baseType: !2244, size: 64, offset: 64)
!2244 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1589, size: 64, elements: !1694)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2229, file: !1980, line: 51, baseType: !2164, size: 64, offset: 128)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2229, file: !1980, line: 54, baseType: !1777, size: 64, offset: 192)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2229, file: !1980, line: 57, baseType: !2248, size: 128, offset: 256)
!2248 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2249, line: 31, size: 128, elements: !2250)
!2249 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2250 = !{!2251, !2252, !2253, !2254, !2255, !2256, !2257}
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2248, file: !2249, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2248, file: !2249, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2248, file: !2249, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2248, file: !2249, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2248, file: !2249, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2248, file: !2249, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2248, file: !2249, line: 56, baseType: !2258, size: 64, offset: 64)
!2258 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1590, line: 47, baseType: !1713)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2229, file: !1980, line: 60, baseType: !2248, size: 128, offset: 384)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2229, file: !1980, line: 64, baseType: !2261, size: 64, offset: 512)
!2261 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2262, size: 64)
!2262 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !6, line: 27, flags: DIFlagFwdDecl)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2229, file: !1980, line: 67, baseType: !1777, size: 64, offset: 576)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2229, file: !1980, line: 73, baseType: !2113, size: 64, offset: 640)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2229, file: !1980, line: 77, baseType: !2258, size: 64, offset: 704)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2229, file: !1980, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2229, file: !1980, line: 82, baseType: !2268, size: 320, offset: 832)
!2268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1578, line: 62, size: 320, elements: !2269)
!2269 = !{!2270, !2276, !2277, !2278, !2279, !2286}
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2268, file: !1578, line: 63, baseType: !2271, size: 64)
!2271 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2272, size: 64)
!2272 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1578, line: 56, size: 128, elements: !2273)
!2273 = !{!2274, !2275}
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2272, file: !1578, line: 57, baseType: !2271, size: 64)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2272, file: !1578, line: 58, baseType: !1872, size: 8, offset: 64)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2268, file: !1578, line: 64, baseType: !7, size: 32, offset: 64)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2268, file: !1578, line: 66, baseType: !7, size: 32, offset: 96)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2268, file: !1578, line: 68, baseType: !1890, size: 8, offset: 128)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2268, file: !1578, line: 70, baseType: !2280, size: 64, offset: 192)
!2280 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2281, size: 64)
!2281 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1578, line: 37, size: 128, elements: !2282)
!2282 = !{!2283, !2284}
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2281, file: !1578, line: 39, baseType: !2280, size: 64)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !2281, file: !1578, line: 40, baseType: !2285, size: 64, offset: 64)
!2285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1777, size: 64)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2268, file: !1578, line: 71, baseType: !2287, size: 64, offset: 256)
!2287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2288, size: 64)
!2288 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1578, line: 45, size: 320, elements: !2289)
!2289 = !{!2290, !2291}
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2288, file: !1578, line: 47, baseType: !2287, size: 64)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !2288, file: !1578, line: 48, baseType: !2292, size: 256, offset: 64)
!2292 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !142, line: 1883, size: 256, elements: !2293)
!2293 = !{!2294, !2296, !2297, !2302}
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2292, file: !142, line: 1884, baseType: !2295, size: 64)
!2295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2292, size: 64)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2292, file: !142, line: 1885, baseType: !2295, size: 64, offset: 64)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !2292, file: !142, line: 1891, baseType: !2298, size: 64, offset: 128)
!2298 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2292, file: !142, line: 1891, size: 64, elements: !2299)
!2299 = !{!2300, !2301}
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2298, file: !142, line: 1891, baseType: !1589, size: 64)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2298, file: !142, line: 1891, baseType: !1777, size: 64)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2292, file: !142, line: 1892, baseType: !2285, size: 64, offset: 192)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2029, file: !2030, line: 476, baseType: !2304, size: 64, offset: 256)
!2304 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2305, size: 64)
!2305 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !2030, line: 476, flags: DIFlagFwdDecl)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2029, file: !2030, line: 479, baseType: !2113, size: 64, offset: 320)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2029, file: !2030, line: 484, baseType: !1777, size: 64, offset: 384)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2029, file: !2030, line: 488, baseType: !1777, size: 64, offset: 448)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2029, file: !2030, line: 493, baseType: !1777, size: 64, offset: 512)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2029, file: !2030, line: 496, baseType: !1777, size: 64, offset: 576)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2029, file: !2030, line: 501, baseType: !2312, size: 64, offset: 640)
!2312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2313, size: 64)
!2313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !380, line: 2355, size: 576, elements: !2314)
!2314 = !{!2315, !2318, !2319, !2320, !2321, !2323, !2324, !2329, !2330, !2331, !2332, !2333, !2334}
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2313, file: !380, line: 2356, baseType: !2316, size: 64)
!2316 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2317, size: 64)
!2317 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !380, line: 2356, flags: DIFlagFwdDecl)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2313, file: !380, line: 2357, baseType: !1682, size: 64, offset: 64)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2313, file: !380, line: 2358, baseType: !1679, size: 32, offset: 128)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2313, file: !380, line: 2359, baseType: !1679, size: 32, offset: 160)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2313, file: !380, line: 2360, baseType: !2322, size: 128, offset: 192)
!2322 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1679, size: 128, elements: !1756)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2313, file: !380, line: 2364, baseType: !1679, size: 32, offset: 320)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2313, file: !380, line: 2367, baseType: !2325, size: 128, offset: 384)
!2325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !380, line: 2349, size: 128, elements: !2326)
!2326 = !{!2327, !2328}
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2325, file: !380, line: 2351, baseType: !1655, size: 64)
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2325, file: !380, line: 2352, baseType: !1746, size: 64, offset: 64)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2313, file: !380, line: 2371, baseType: !379, size: 32, offset: 512)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2313, file: !380, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2313, file: !380, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2313, file: !380, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2313, file: !380, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2313, file: !380, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2029, file: !2030, line: 504, baseType: !2336, size: 64, offset: 704)
!2336 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2337, size: 64)
!2337 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2030, line: 504, flags: DIFlagFwdDecl)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2029, file: !2030, line: 507, baseType: !2113, size: 64, offset: 768)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2029, file: !2030, line: 510, baseType: !1679, size: 32, offset: 832)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2029, file: !2030, line: 513, baseType: !1679, size: 32, offset: 864)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2029, file: !2030, line: 516, baseType: !1608, size: 32, offset: 896)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2029, file: !2030, line: 519, baseType: !1608, size: 32, offset: 928)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2029, file: !2030, line: 522, baseType: !7, size: 32, offset: 960)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2029, file: !2030, line: 523, baseType: !7, size: 32, offset: 992)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2029, file: !2030, line: 528, baseType: !1682, size: 64, offset: 1024)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2029, file: !2030, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2029, file: !2030, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2029, file: !2030, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2029, file: !2030, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2029, file: !2030, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2029, file: !2030, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2029, file: !2030, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2029, file: !2030, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2029, file: !2030, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2029, file: !2030, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2029, file: !2030, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2029, file: !2030, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2029, file: !2030, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2029, file: !2030, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2029, file: !2030, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2029, file: !2030, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2024, file: !142, line: 3254, baseType: !1777, size: 64, offset: 1536)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2024, file: !142, line: 3257, baseType: !1777, size: 64, offset: 1600)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2024, file: !142, line: 3258, baseType: !1777, size: 64, offset: 1664)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2024, file: !142, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2024, file: !142, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2024, file: !142, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2024, file: !142, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2024, file: !142, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2024, file: !142, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2024, file: !142, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2024, file: !142, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2024, file: !142, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2024, file: !142, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2024, file: !142, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2024, file: !142, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2024, file: !142, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2024, file: !142, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2024, file: !142, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2024, file: !142, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2024, file: !142, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2024, file: !142, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1779, file: !142, line: 3394, baseType: !2384, size: 1344)
!2384 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !142, line: 2279, size: 1344, elements: !2385)
!2385 = !{!2386, !2387, !2388, !2389, !2390, !2391, !2392, !2393, !2394, !2395, !2396, !2397, !2398, !2399, !2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2411, !2412, !2413, !2421, !2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429}
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2384, file: !142, line: 2280, baseType: !1815, size: 192)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2384, file: !142, line: 2281, baseType: !1777, size: 64, offset: 192)
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2384, file: !142, line: 2282, baseType: !1777, size: 64, offset: 256)
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2384, file: !142, line: 2283, baseType: !1777, size: 64, offset: 320)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2384, file: !142, line: 2284, baseType: !1777, size: 64, offset: 384)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2384, file: !142, line: 2285, baseType: !7, size: 32, offset: 448)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2384, file: !142, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2384, file: !142, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2384, file: !142, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2384, file: !142, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2384, file: !142, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2384, file: !142, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2384, file: !142, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2384, file: !142, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2384, file: !142, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2384, file: !142, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2384, file: !142, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2384, file: !142, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2384, file: !142, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2384, file: !142, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2384, file: !142, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2384, file: !142, line: 2305, baseType: !7, size: 32, offset: 512)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2384, file: !142, line: 2306, baseType: !2409, size: 32, offset: 544)
!2409 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2410, line: 31, baseType: !1679)
!2410 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2384, file: !142, line: 2307, baseType: !1777, size: 64, offset: 576)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2384, file: !142, line: 2308, baseType: !1777, size: 64, offset: 640)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2384, file: !142, line: 2314, baseType: !2414, size: 64, offset: 704)
!2414 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !142, line: 2309, size: 64, elements: !2415)
!2415 = !{!2416, !2417, !2418}
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2414, file: !142, line: 2310, baseType: !1679, size: 32)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2414, file: !142, line: 2311, baseType: !1682, size: 64)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2414, file: !142, line: 2312, baseType: !2419, size: 64)
!2419 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2420, size: 64)
!2420 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !142, line: 2277, flags: DIFlagFwdDecl)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2384, file: !142, line: 2315, baseType: !1777, size: 64, offset: 768)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2384, file: !142, line: 2316, baseType: !1777, size: 64, offset: 832)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2384, file: !142, line: 2317, baseType: !1777, size: 64, offset: 896)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2384, file: !142, line: 2318, baseType: !1777, size: 64, offset: 960)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2384, file: !142, line: 2319, baseType: !1777, size: 64, offset: 1024)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2384, file: !142, line: 2320, baseType: !1777, size: 64, offset: 1088)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2384, file: !142, line: 2321, baseType: !1777, size: 64, offset: 1152)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2384, file: !142, line: 2322, baseType: !1777, size: 64, offset: 1216)
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2384, file: !142, line: 2324, baseType: !2430, size: 64, offset: 1280)
!2430 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2431, size: 64)
!2431 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !142, line: 2324, flags: DIFlagFwdDecl)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1779, file: !142, line: 3395, baseType: !2433, size: 320)
!2433 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !142, line: 1469, size: 320, elements: !2434)
!2434 = !{!2435, !2436, !2437}
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2433, file: !142, line: 1470, baseType: !1815, size: 192)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2433, file: !142, line: 1471, baseType: !1777, size: 64, offset: 192)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2433, file: !142, line: 1472, baseType: !1777, size: 64, offset: 256)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1779, file: !142, line: 3396, baseType: !2439, size: 320)
!2439 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !142, line: 1482, size: 320, elements: !2440)
!2440 = !{!2441, !2442, !2443}
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2439, file: !142, line: 1483, baseType: !1815, size: 192)
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2439, file: !142, line: 1484, baseType: !1679, size: 32, offset: 192)
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2439, file: !142, line: 1485, baseType: !2175, size: 64, offset: 256)
!2444 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1779, file: !142, line: 3397, baseType: !2445, size: 384)
!2445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !142, line: 1829, size: 384, elements: !2446)
!2446 = !{!2447, !2448, !2449, !2450}
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2445, file: !142, line: 1830, baseType: !1815, size: 192)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2445, file: !142, line: 1831, baseType: !1608, size: 32, offset: 192)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2445, file: !142, line: 1832, baseType: !1777, size: 64, offset: 256)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2445, file: !142, line: 1835, baseType: !2175, size: 64, offset: 320)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1779, file: !142, line: 3398, baseType: !2452, size: 704)
!2452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !142, line: 1898, size: 704, elements: !2453)
!2453 = !{!2454, !2455, !2456, !2457, !2458, !2463}
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2452, file: !142, line: 1899, baseType: !1815, size: 192)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2452, file: !142, line: 1902, baseType: !1777, size: 64, offset: 192)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2452, file: !142, line: 1905, baseType: !1589, size: 64, offset: 256)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2452, file: !142, line: 1908, baseType: !7, size: 32, offset: 320)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2452, file: !142, line: 1911, baseType: !2459, size: 64, offset: 384)
!2459 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2460, size: 64)
!2460 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1980, line: 117, size: 128, elements: !2461)
!2461 = !{!2462}
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2460, file: !1980, line: 120, baseType: !2248, size: 128)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2452, file: !142, line: 1914, baseType: !2292, size: 256, offset: 448)
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1779, file: !142, line: 3399, baseType: !2465, size: 704)
!2465 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !142, line: 2008, size: 704, elements: !2466)
!2466 = !{!2467, !2468, !2469, !2470, !2471, !2472, !2473, !2474, !2475, !2476, !2477}
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2465, file: !142, line: 2009, baseType: !1815, size: 192)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2465, file: !142, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2465, file: !142, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2465, file: !142, line: 2014, baseType: !1608, size: 32, offset: 224)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2465, file: !142, line: 2016, baseType: !1777, size: 64, offset: 256)
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2465, file: !142, line: 2017, baseType: !2164, size: 64, offset: 320)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2465, file: !142, line: 2019, baseType: !1777, size: 64, offset: 384)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2465, file: !142, line: 2020, baseType: !1777, size: 64, offset: 448)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2465, file: !142, line: 2021, baseType: !1777, size: 64, offset: 512)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2465, file: !142, line: 2022, baseType: !1777, size: 64, offset: 576)
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2465, file: !142, line: 2023, baseType: !1777, size: 64, offset: 640)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1779, file: !142, line: 3400, baseType: !2479, size: 832)
!2479 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !142, line: 2430, size: 832, elements: !2480)
!2480 = !{!2481, !2482, !2483, !2484, !2485, !2486, !2487, !2488, !2489, !2490}
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2479, file: !142, line: 2431, baseType: !1815, size: 192)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2479, file: !142, line: 2433, baseType: !1777, size: 64, offset: 192)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2479, file: !142, line: 2434, baseType: !1777, size: 64, offset: 256)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2479, file: !142, line: 2435, baseType: !1777, size: 64, offset: 320)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2479, file: !142, line: 2436, baseType: !1777, size: 64, offset: 384)
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2479, file: !142, line: 2437, baseType: !2164, size: 64, offset: 448)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2479, file: !142, line: 2438, baseType: !1777, size: 64, offset: 512)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2479, file: !142, line: 2440, baseType: !1777, size: 64, offset: 576)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2479, file: !142, line: 2441, baseType: !1777, size: 64, offset: 640)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2479, file: !142, line: 2443, baseType: !2491, size: 128, offset: 704)
!2491 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !142, line: 182, baseType: !2492)
!2492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !142, line: 182, size: 128, elements: !2493)
!2493 = !{!2494}
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2492, file: !142, line: 182, baseType: !2169, size: 128)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1779, file: !142, line: 3401, baseType: !2496, size: 320)
!2496 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !142, line: 3327, size: 320, elements: !2497)
!2497 = !{!2498, !2499, !2506}
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2496, file: !142, line: 3329, baseType: !1815, size: 192)
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2496, file: !142, line: 3330, baseType: !2500, size: 64, offset: 192)
!2500 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2501, size: 64)
!2501 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !142, line: 3320, size: 192, elements: !2502)
!2502 = !{!2503, !2504, !2505}
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2501, file: !142, line: 3322, baseType: !2500, size: 64)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2501, file: !142, line: 3323, baseType: !2500, size: 64, offset: 64)
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2501, file: !142, line: 3324, baseType: !1777, size: 64, offset: 128)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2496, file: !142, line: 3331, baseType: !2500, size: 64, offset: 256)
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1779, file: !142, line: 3402, baseType: !2508, size: 256)
!2508 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !142, line: 1540, size: 256, elements: !2509)
!2509 = !{!2510, !2511}
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2508, file: !142, line: 1541, baseType: !1815, size: 192)
!2511 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2508, file: !142, line: 1542, baseType: !2512, size: 64, offset: 192)
!2512 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2513, size: 64)
!2513 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !142, line: 1538, baseType: !2514)
!2514 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !142, line: 1538, size: 192, elements: !2515)
!2515 = !{!2516}
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2514, file: !142, line: 1538, baseType: !2517, size: 192)
!2517 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !142, line: 1537, baseType: !2518)
!2518 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !142, line: 1537, size: 192, elements: !2519)
!2519 = !{!2520, !2521, !2522}
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2518, file: !142, line: 1537, baseType: !7, size: 32)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2518, file: !142, line: 1537, baseType: !7, size: 32, offset: 32)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2518, file: !142, line: 1537, baseType: !2523, size: 128, offset: 64)
!2523 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2524, size: 128, elements: !1694)
!2524 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !142, line: 1535, baseType: !2525)
!2525 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !142, line: 1532, size: 128, elements: !2526)
!2526 = !{!2527, !2528}
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2525, file: !142, line: 1533, baseType: !1777, size: 64)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2525, file: !142, line: 1534, baseType: !1777, size: 64, offset: 64)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1779, file: !142, line: 3403, baseType: !2530, size: 512)
!2530 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !142, line: 1938, size: 512, elements: !2531)
!2531 = !{!2532, !2533, !2534, !2535, !2541, !2542, !2543}
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2530, file: !142, line: 1939, baseType: !1815, size: 192)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2530, file: !142, line: 1940, baseType: !1608, size: 32, offset: 192)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2530, file: !142, line: 1941, baseType: !336, size: 32, offset: 224)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2530, file: !142, line: 1946, baseType: !2536, size: 32, offset: 256)
!2536 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !142, line: 1942, size: 32, elements: !2537)
!2537 = !{!2538, !2539, !2540}
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2536, file: !142, line: 1943, baseType: !354, size: 32)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2536, file: !142, line: 1944, baseType: !361, size: 32)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2536, file: !142, line: 1945, baseType: !141, size: 32)
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2530, file: !142, line: 1950, baseType: !1640, size: 64, offset: 320)
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2530, file: !142, line: 1951, baseType: !1640, size: 64, offset: 384)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2530, file: !142, line: 1953, baseType: !2175, size: 64, offset: 448)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1779, file: !142, line: 3404, baseType: !2545, size: 1664)
!2545 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !142, line: 3337, size: 1664, elements: !2546)
!2546 = !{!2547, !2548}
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2545, file: !142, line: 3338, baseType: !1815, size: 192)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2545, file: !142, line: 3341, baseType: !2549, size: 1472, offset: 192)
!2549 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2550, line: 410, size: 1472, elements: !2551)
!2550 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2551 = !{!2552, !2553, !2554, !2555, !2556, !2557, !2558, !2559, !2560, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575, !2576, !2577, !2578, !2579, !2580, !2581, !2582, !2583, !2584, !2585, !2586, !2587, !2588, !2589, !2590, !2591, !2592, !2593, !2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612, !2613, !2614, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2623, !2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636, !2637, !2638, !2639, !2640, !2641, !2642, !2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656, !2657, !2658, !2659, !2660, !2661, !2662, !2663, !2664, !2665, !2666, !2667, !2668, !2669, !2670, !2671, !2672, !2673, !2674, !2675, !2676, !2677, !2678, !2679, !2680, !2681, !2682, !2683, !2684, !2685, !2686, !2687, !2688, !2689, !2690, !2691, !2692, !2693, !2694, !2695, !2696, !2697, !2698, !2699, !2700, !2701, !2702, !2703, !2704, !2705, !2706, !2707, !2708, !2709, !2710, !2711, !2712, !2713, !2714, !2715}
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2549, file: !2550, line: 412, baseType: !1679, size: 32)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2549, file: !2550, line: 413, baseType: !1679, size: 32, offset: 32)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2549, file: !2550, line: 414, baseType: !1679, size: 32, offset: 64)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2549, file: !2550, line: 415, baseType: !1679, size: 32, offset: 96)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2549, file: !2550, line: 416, baseType: !1679, size: 32, offset: 128)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2549, file: !2550, line: 417, baseType: !1679, size: 32, offset: 160)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2549, file: !2550, line: 418, baseType: !1890, size: 8, offset: 192)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2549, file: !2550, line: 419, baseType: !1890, size: 8, offset: 200)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2549, file: !2550, line: 420, baseType: !2561, size: 8, offset: 208)
!2561 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2549, file: !2550, line: 421, baseType: !2561, size: 8, offset: 216)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2549, file: !2550, line: 422, baseType: !2561, size: 8, offset: 224)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2549, file: !2550, line: 423, baseType: !2561, size: 8, offset: 232)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2549, file: !2550, line: 424, baseType: !2561, size: 8, offset: 240)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2549, file: !2550, line: 425, baseType: !2561, size: 8, offset: 248)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2549, file: !2550, line: 426, baseType: !2561, size: 8, offset: 256)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2549, file: !2550, line: 427, baseType: !2561, size: 8, offset: 264)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2549, file: !2550, line: 428, baseType: !2561, size: 8, offset: 272)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2549, file: !2550, line: 429, baseType: !2561, size: 8, offset: 280)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2549, file: !2550, line: 430, baseType: !2561, size: 8, offset: 288)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2549, file: !2550, line: 431, baseType: !2561, size: 8, offset: 296)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2549, file: !2550, line: 432, baseType: !2561, size: 8, offset: 304)
!2574 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2549, file: !2550, line: 433, baseType: !2561, size: 8, offset: 312)
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2549, file: !2550, line: 434, baseType: !2561, size: 8, offset: 320)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2549, file: !2550, line: 435, baseType: !2561, size: 8, offset: 328)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2549, file: !2550, line: 436, baseType: !2561, size: 8, offset: 336)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2549, file: !2550, line: 437, baseType: !2561, size: 8, offset: 344)
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2549, file: !2550, line: 438, baseType: !2561, size: 8, offset: 352)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2549, file: !2550, line: 439, baseType: !2561, size: 8, offset: 360)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2549, file: !2550, line: 440, baseType: !2561, size: 8, offset: 368)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2549, file: !2550, line: 441, baseType: !2561, size: 8, offset: 376)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2549, file: !2550, line: 442, baseType: !2561, size: 8, offset: 384)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2549, file: !2550, line: 443, baseType: !2561, size: 8, offset: 392)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2549, file: !2550, line: 444, baseType: !2561, size: 8, offset: 400)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2549, file: !2550, line: 445, baseType: !2561, size: 8, offset: 408)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2549, file: !2550, line: 446, baseType: !2561, size: 8, offset: 416)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2549, file: !2550, line: 447, baseType: !2561, size: 8, offset: 424)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2549, file: !2550, line: 448, baseType: !2561, size: 8, offset: 432)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2549, file: !2550, line: 449, baseType: !2561, size: 8, offset: 440)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2549, file: !2550, line: 450, baseType: !2561, size: 8, offset: 448)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2549, file: !2550, line: 451, baseType: !2561, size: 8, offset: 456)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2549, file: !2550, line: 452, baseType: !2561, size: 8, offset: 464)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2549, file: !2550, line: 453, baseType: !2561, size: 8, offset: 472)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2549, file: !2550, line: 454, baseType: !2561, size: 8, offset: 480)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2549, file: !2550, line: 455, baseType: !2561, size: 8, offset: 488)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2549, file: !2550, line: 456, baseType: !2561, size: 8, offset: 496)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2549, file: !2550, line: 457, baseType: !2561, size: 8, offset: 504)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2549, file: !2550, line: 458, baseType: !2561, size: 8, offset: 512)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2549, file: !2550, line: 459, baseType: !2561, size: 8, offset: 520)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2549, file: !2550, line: 460, baseType: !2561, size: 8, offset: 528)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2549, file: !2550, line: 461, baseType: !2561, size: 8, offset: 536)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2549, file: !2550, line: 462, baseType: !2561, size: 8, offset: 544)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2549, file: !2550, line: 463, baseType: !2561, size: 8, offset: 552)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2549, file: !2550, line: 464, baseType: !2561, size: 8, offset: 560)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2549, file: !2550, line: 465, baseType: !2561, size: 8, offset: 568)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2549, file: !2550, line: 466, baseType: !2561, size: 8, offset: 576)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2549, file: !2550, line: 467, baseType: !2561, size: 8, offset: 584)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2549, file: !2550, line: 468, baseType: !2561, size: 8, offset: 592)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2549, file: !2550, line: 469, baseType: !2561, size: 8, offset: 600)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2549, file: !2550, line: 470, baseType: !2561, size: 8, offset: 608)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2549, file: !2550, line: 471, baseType: !2561, size: 8, offset: 616)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2549, file: !2550, line: 472, baseType: !2561, size: 8, offset: 624)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2549, file: !2550, line: 473, baseType: !2561, size: 8, offset: 632)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2549, file: !2550, line: 474, baseType: !2561, size: 8, offset: 640)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2549, file: !2550, line: 475, baseType: !2561, size: 8, offset: 648)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2549, file: !2550, line: 476, baseType: !2561, size: 8, offset: 656)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2549, file: !2550, line: 477, baseType: !2561, size: 8, offset: 664)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2549, file: !2550, line: 478, baseType: !2561, size: 8, offset: 672)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2549, file: !2550, line: 479, baseType: !2561, size: 8, offset: 680)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2549, file: !2550, line: 480, baseType: !2561, size: 8, offset: 688)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2549, file: !2550, line: 481, baseType: !2561, size: 8, offset: 696)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2549, file: !2550, line: 482, baseType: !2561, size: 8, offset: 704)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2549, file: !2550, line: 483, baseType: !2561, size: 8, offset: 712)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2549, file: !2550, line: 484, baseType: !2561, size: 8, offset: 720)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2549, file: !2550, line: 485, baseType: !2561, size: 8, offset: 728)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2549, file: !2550, line: 486, baseType: !2561, size: 8, offset: 736)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2549, file: !2550, line: 487, baseType: !2561, size: 8, offset: 744)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2549, file: !2550, line: 488, baseType: !2561, size: 8, offset: 752)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2549, file: !2550, line: 489, baseType: !2561, size: 8, offset: 760)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2549, file: !2550, line: 490, baseType: !2561, size: 8, offset: 768)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2549, file: !2550, line: 491, baseType: !2561, size: 8, offset: 776)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2549, file: !2550, line: 492, baseType: !2561, size: 8, offset: 784)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2549, file: !2550, line: 493, baseType: !2561, size: 8, offset: 792)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2549, file: !2550, line: 494, baseType: !2561, size: 8, offset: 800)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2549, file: !2550, line: 495, baseType: !2561, size: 8, offset: 808)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2549, file: !2550, line: 496, baseType: !2561, size: 8, offset: 816)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2549, file: !2550, line: 497, baseType: !2561, size: 8, offset: 824)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2549, file: !2550, line: 498, baseType: !2561, size: 8, offset: 832)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2549, file: !2550, line: 499, baseType: !2561, size: 8, offset: 840)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2549, file: !2550, line: 500, baseType: !2561, size: 8, offset: 848)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2549, file: !2550, line: 501, baseType: !2561, size: 8, offset: 856)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2549, file: !2550, line: 502, baseType: !2561, size: 8, offset: 864)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2549, file: !2550, line: 503, baseType: !2561, size: 8, offset: 872)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2549, file: !2550, line: 504, baseType: !2561, size: 8, offset: 880)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2549, file: !2550, line: 505, baseType: !2561, size: 8, offset: 888)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2549, file: !2550, line: 506, baseType: !2561, size: 8, offset: 896)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2549, file: !2550, line: 507, baseType: !2561, size: 8, offset: 904)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2549, file: !2550, line: 508, baseType: !2561, size: 8, offset: 912)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2549, file: !2550, line: 509, baseType: !2561, size: 8, offset: 920)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2549, file: !2550, line: 510, baseType: !2561, size: 8, offset: 928)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2549, file: !2550, line: 511, baseType: !2561, size: 8, offset: 936)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2549, file: !2550, line: 512, baseType: !2561, size: 8, offset: 944)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2549, file: !2550, line: 513, baseType: !2561, size: 8, offset: 952)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2549, file: !2550, line: 514, baseType: !2561, size: 8, offset: 960)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2549, file: !2550, line: 515, baseType: !2561, size: 8, offset: 968)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2549, file: !2550, line: 516, baseType: !2561, size: 8, offset: 976)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2549, file: !2550, line: 517, baseType: !2561, size: 8, offset: 984)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2549, file: !2550, line: 518, baseType: !2561, size: 8, offset: 992)
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2549, file: !2550, line: 519, baseType: !2561, size: 8, offset: 1000)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2549, file: !2550, line: 520, baseType: !2561, size: 8, offset: 1008)
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2549, file: !2550, line: 521, baseType: !2561, size: 8, offset: 1016)
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2549, file: !2550, line: 522, baseType: !2561, size: 8, offset: 1024)
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2549, file: !2550, line: 523, baseType: !2561, size: 8, offset: 1032)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2549, file: !2550, line: 524, baseType: !2561, size: 8, offset: 1040)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2549, file: !2550, line: 525, baseType: !2561, size: 8, offset: 1048)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2549, file: !2550, line: 526, baseType: !2561, size: 8, offset: 1056)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2549, file: !2550, line: 527, baseType: !2561, size: 8, offset: 1064)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2549, file: !2550, line: 528, baseType: !2561, size: 8, offset: 1072)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2549, file: !2550, line: 529, baseType: !2561, size: 8, offset: 1080)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2549, file: !2550, line: 530, baseType: !2561, size: 8, offset: 1088)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2549, file: !2550, line: 531, baseType: !2561, size: 8, offset: 1096)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2549, file: !2550, line: 532, baseType: !2561, size: 8, offset: 1104)
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2549, file: !2550, line: 533, baseType: !2561, size: 8, offset: 1112)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2549, file: !2550, line: 534, baseType: !2561, size: 8, offset: 1120)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2549, file: !2550, line: 535, baseType: !2561, size: 8, offset: 1128)
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2549, file: !2550, line: 536, baseType: !2561, size: 8, offset: 1136)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2549, file: !2550, line: 537, baseType: !2561, size: 8, offset: 1144)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2549, file: !2550, line: 538, baseType: !2561, size: 8, offset: 1152)
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2549, file: !2550, line: 539, baseType: !2561, size: 8, offset: 1160)
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2549, file: !2550, line: 540, baseType: !2561, size: 8, offset: 1168)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2549, file: !2550, line: 541, baseType: !2561, size: 8, offset: 1176)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2549, file: !2550, line: 542, baseType: !2561, size: 8, offset: 1184)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2549, file: !2550, line: 543, baseType: !2561, size: 8, offset: 1192)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2549, file: !2550, line: 544, baseType: !2561, size: 8, offset: 1200)
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2549, file: !2550, line: 545, baseType: !2561, size: 8, offset: 1208)
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2549, file: !2550, line: 546, baseType: !2561, size: 8, offset: 1216)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2549, file: !2550, line: 547, baseType: !2561, size: 8, offset: 1224)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2549, file: !2550, line: 548, baseType: !2561, size: 8, offset: 1232)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2549, file: !2550, line: 549, baseType: !2561, size: 8, offset: 1240)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2549, file: !2550, line: 550, baseType: !2561, size: 8, offset: 1248)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2549, file: !2550, line: 551, baseType: !2561, size: 8, offset: 1256)
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2549, file: !2550, line: 552, baseType: !2561, size: 8, offset: 1264)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2549, file: !2550, line: 553, baseType: !2561, size: 8, offset: 1272)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2549, file: !2550, line: 554, baseType: !2561, size: 8, offset: 1280)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2549, file: !2550, line: 555, baseType: !2561, size: 8, offset: 1288)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2549, file: !2550, line: 556, baseType: !2561, size: 8, offset: 1296)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2549, file: !2550, line: 557, baseType: !2561, size: 8, offset: 1304)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2549, file: !2550, line: 558, baseType: !2561, size: 8, offset: 1312)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2549, file: !2550, line: 559, baseType: !2561, size: 8, offset: 1320)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2549, file: !2550, line: 560, baseType: !2561, size: 8, offset: 1328)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2549, file: !2550, line: 561, baseType: !2561, size: 8, offset: 1336)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2549, file: !2550, line: 562, baseType: !2561, size: 8, offset: 1344)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2549, file: !2550, line: 563, baseType: !2561, size: 8, offset: 1352)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2549, file: !2550, line: 564, baseType: !2561, size: 8, offset: 1360)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2549, file: !2550, line: 565, baseType: !2561, size: 8, offset: 1368)
!2707 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2549, file: !2550, line: 566, baseType: !2561, size: 8, offset: 1376)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2549, file: !2550, line: 567, baseType: !2561, size: 8, offset: 1384)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2549, file: !2550, line: 568, baseType: !2561, size: 8, offset: 1392)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2549, file: !2550, line: 569, baseType: !2561, size: 8, offset: 1400)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2549, file: !2550, line: 570, baseType: !2561, size: 8, offset: 1408)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2549, file: !2550, line: 571, baseType: !2561, size: 8, offset: 1416)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2549, file: !2550, line: 572, baseType: !2561, size: 8, offset: 1424)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2549, file: !2550, line: 573, baseType: !2561, size: 8, offset: 1432)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2549, file: !2550, line: 574, baseType: !2561, size: 8, offset: 1440)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1779, file: !142, line: 3405, baseType: !2717, size: 384)
!2717 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !142, line: 3352, size: 384, elements: !2718)
!2718 = !{!2719, !2720}
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2717, file: !142, line: 3353, baseType: !1815, size: 192)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2717, file: !142, line: 3356, baseType: !2721, size: 192, offset: 192)
!2721 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2550, line: 578, size: 192, elements: !2722)
!2722 = !{!2723, !2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732, !2733}
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2721, file: !2550, line: 580, baseType: !1679, size: 32)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2721, file: !2550, line: 581, baseType: !1679, size: 32, offset: 32)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2721, file: !2550, line: 582, baseType: !1679, size: 32, offset: 64)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2721, file: !2550, line: 583, baseType: !1679, size: 32, offset: 96)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2721, file: !2550, line: 584, baseType: !1890, size: 8, offset: 128)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2721, file: !2550, line: 585, baseType: !1890, size: 8, offset: 136)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2721, file: !2550, line: 586, baseType: !1890, size: 8, offset: 144)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2721, file: !2550, line: 587, baseType: !1890, size: 8, offset: 152)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2721, file: !2550, line: 588, baseType: !1890, size: 8, offset: 160)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2721, file: !2550, line: 589, baseType: !1890, size: 8, offset: 168)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2721, file: !2550, line: 590, baseType: !1890, size: 8, offset: 176)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1676, file: !1658, line: 178, baseType: !1614, size: 64)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1676, file: !1658, line: 179, baseType: !2736, size: 64)
!2736 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2737, size: 64)
!2737 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1658, line: 150, baseType: !2738)
!2738 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1658, line: 142, size: 320, elements: !2739)
!2739 = !{!2740, !2741, !2742, !2743, !2744, !2745}
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2738, file: !1658, line: 144, baseType: !1777, size: 64)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2738, file: !1658, line: 145, baseType: !1655, size: 64, offset: 64)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2738, file: !1658, line: 146, baseType: !1655, size: 64, offset: 128)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2738, file: !1658, line: 147, baseType: !2409, size: 32, offset: 192)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2738, file: !1658, line: 148, baseType: !7, size: 32, offset: 224)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2738, file: !1658, line: 149, baseType: !1890, size: 8, offset: 256)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1676, file: !1658, line: 180, baseType: !2747, size: 64)
!2747 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2748, size: 64)
!2748 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1658, line: 162, baseType: !2749)
!2749 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1658, line: 159, size: 128, elements: !2750)
!2750 = !{!2751, !2752}
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2749, file: !1658, line: 160, baseType: !1777, size: 64)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2749, file: !1658, line: 161, baseType: !1746, size: 64, offset: 64)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1676, file: !1658, line: 181, baseType: !2754, size: 64)
!2754 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2755, size: 64)
!2755 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1658, line: 181, flags: DIFlagFwdDecl)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1671, file: !1658, line: 317, baseType: !2757, size: 64)
!2757 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1746, size: 64, elements: !1694)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1671, file: !1658, line: 318, baseType: !2759, size: 320)
!2759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1658, line: 188, size: 320, elements: !2760)
!2760 = !{!2761, !2763, !2786}
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2759, file: !1658, line: 190, baseType: !2762, size: 192)
!2762 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1675, size: 192, elements: !1848)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2759, file: !1658, line: 193, baseType: !2764, size: 64, offset: 192)
!2764 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2765, size: 64)
!2765 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1658, line: 206, size: 320, elements: !2766)
!2766 = !{!2767, !2771, !2772, !2773, !2785}
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2765, file: !1658, line: 208, baseType: !2768, size: 64)
!2768 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2769, size: 64)
!2769 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1590, line: 62, baseType: !2770)
!2770 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1590, line: 61, flags: DIFlagFwdDecl)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2765, file: !1658, line: 211, baseType: !7, size: 32, offset: 64)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2765, file: !1658, line: 214, baseType: !1746, size: 64, offset: 128)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2765, file: !1658, line: 224, baseType: !2774, size: 64, offset: 192)
!2774 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2775, size: 64)
!2775 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1658, line: 202, baseType: !2776)
!2776 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1658, line: 202, size: 128, elements: !2777)
!2777 = !{!2778}
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2776, file: !1658, line: 202, baseType: !2779, size: 128)
!2779 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1658, line: 200, baseType: !2780)
!2780 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1658, line: 200, size: 128, elements: !2781)
!2781 = !{!2782, !2783, !2784}
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2780, file: !1658, line: 200, baseType: !7, size: 32)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2780, file: !1658, line: 200, baseType: !7, size: 32, offset: 32)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2780, file: !1658, line: 200, baseType: !1693, size: 64, offset: 64)
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2765, file: !1658, line: 234, baseType: !2774, size: 64, offset: 256)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2759, file: !1658, line: 197, baseType: !1746, size: 64, offset: 256)
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1671, file: !1658, line: 319, baseType: !1837, size: 256)
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1671, file: !1658, line: 320, baseType: !1856, size: 192)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1632, file: !369, line: 134, baseType: !1767, size: 64, offset: 192)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1632, file: !369, line: 137, baseType: !1777, size: 64, offset: 256)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1632, file: !369, line: 138, baseType: !1608, size: 32, offset: 320)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1632, file: !369, line: 142, baseType: !7, size: 32, offset: 352)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1632, file: !369, line: 144, baseType: !1679, size: 32, offset: 384)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1632, file: !369, line: 145, baseType: !1679, size: 32, offset: 416)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1632, file: !369, line: 146, baseType: !2796, size: 64, offset: 448)
!2796 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !369, line: 119, baseType: !1746)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1615, file: !369, line: 220, baseType: !1618, size: 64, offset: 64)
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1615, file: !369, line: 223, baseType: !1767, size: 64, offset: 128)
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1615, file: !369, line: 226, baseType: !2800, size: 64, offset: 192)
!2800 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2801, size: 64)
!2801 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !369, line: 185, flags: DIFlagFwdDecl)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1615, file: !369, line: 229, baseType: !2803, size: 128, offset: 256)
!2803 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2804, size: 128, elements: !1730)
!2804 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2805, size: 64)
!2805 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !369, line: 229, flags: DIFlagFwdDecl)
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1615, file: !369, line: 232, baseType: !1614, size: 64, offset: 384)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1615, file: !369, line: 233, baseType: !1614, size: 64, offset: 448)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1615, file: !369, line: 238, baseType: !2809, size: 64, offset: 512)
!2809 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !369, line: 235, size: 64, elements: !2810)
!2810 = !{!2811, !2817}
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2809, file: !369, line: 236, baseType: !2812, size: 64)
!2812 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2813, size: 64)
!2813 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !369, line: 273, size: 128, elements: !2814)
!2814 = !{!2815, !2816}
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2813, file: !369, line: 275, baseType: !1640, size: 64)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2813, file: !369, line: 278, baseType: !1640, size: 64, offset: 64)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2809, file: !369, line: 237, baseType: !2818, size: 64)
!2818 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2819, size: 64)
!2819 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !369, line: 259, size: 320, elements: !2820)
!2820 = !{!2821, !2822, !2823, !2824, !2825}
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2819, file: !369, line: 261, baseType: !1655, size: 64)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2819, file: !369, line: 262, baseType: !1655, size: 64, offset: 64)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2819, file: !369, line: 266, baseType: !1655, size: 64, offset: 128)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2819, file: !369, line: 267, baseType: !1655, size: 64, offset: 192)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2819, file: !369, line: 270, baseType: !1679, size: 32, offset: 256)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1615, file: !369, line: 241, baseType: !2796, size: 64, offset: 576)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1615, file: !369, line: 244, baseType: !1679, size: 32, offset: 640)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1615, file: !369, line: 247, baseType: !1679, size: 32, offset: 672)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1615, file: !369, line: 250, baseType: !1679, size: 32, offset: 704)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1615, file: !369, line: 253, baseType: !1679, size: 32, offset: 736)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1615, file: !369, line: 256, baseType: !1679, size: 32, offset: 768)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1595, file: !591, line: 327, baseType: !1777, size: 64, offset: 192)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1592, file: !591, line: 739, baseType: !2834, size: 448)
!2834 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !591, line: 350, size: 448, elements: !2835)
!2835 = !{!2836, !2842}
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2834, file: !591, line: 353, baseType: !2837, size: 384)
!2837 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !591, line: 333, size: 384, elements: !2838)
!2838 = !{!2839, !2840, !2841}
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2837, file: !591, line: 336, baseType: !1595, size: 256)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !2837, file: !591, line: 343, baseType: !2280, size: 64, offset: 256)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !2837, file: !591, line: 344, baseType: !2287, size: 64, offset: 320)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2834, file: !591, line: 359, baseType: !2175, size: 64, offset: 384)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1592, file: !591, line: 740, baseType: !2844, size: 512)
!2844 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !591, line: 365, size: 512, elements: !2845)
!2845 = !{!2846, !2847, !2848}
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2844, file: !591, line: 368, baseType: !2837, size: 384)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !2844, file: !591, line: 373, baseType: !1777, size: 64, offset: 384)
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !2844, file: !591, line: 374, baseType: !1777, size: 64, offset: 448)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1592, file: !591, line: 741, baseType: !2850, size: 576)
!2850 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !591, line: 380, size: 576, elements: !2851)
!2851 = !{!2852, !2853}
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2850, file: !591, line: 383, baseType: !2844, size: 512)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2850, file: !591, line: 389, baseType: !2175, size: 64, offset: 512)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1592, file: !591, line: 742, baseType: !2855, size: 320)
!2855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !591, line: 395, size: 320, elements: !2856)
!2856 = !{!2857, !2858}
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2855, file: !591, line: 397, baseType: !1595, size: 256)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2855, file: !591, line: 400, baseType: !1640, size: 64, offset: 256)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1592, file: !591, line: 743, baseType: !2860, size: 448)
!2860 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !591, line: 406, size: 448, elements: !2861)
!2861 = !{!2862, !2863, !2864, !2865}
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2860, file: !591, line: 408, baseType: !1595, size: 256)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2860, file: !591, line: 412, baseType: !1777, size: 64, offset: 256)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2860, file: !591, line: 420, baseType: !1777, size: 64, offset: 320)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2860, file: !591, line: 423, baseType: !1640, size: 64, offset: 384)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1592, file: !591, line: 744, baseType: !2867, size: 384)
!2867 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !591, line: 429, size: 384, elements: !2868)
!2868 = !{!2869, !2870, !2871}
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2867, file: !591, line: 431, baseType: !1595, size: 256)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2867, file: !591, line: 434, baseType: !1777, size: 64, offset: 256)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !2867, file: !591, line: 437, baseType: !1640, size: 64, offset: 320)
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1592, file: !591, line: 745, baseType: !2873, size: 384)
!2873 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !591, line: 443, size: 384, elements: !2874)
!2874 = !{!2875, !2876, !2877}
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2873, file: !591, line: 445, baseType: !1595, size: 256)
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2873, file: !591, line: 449, baseType: !1777, size: 64, offset: 256)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !2873, file: !591, line: 453, baseType: !1640, size: 64, offset: 320)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1592, file: !591, line: 746, baseType: !2879, size: 320)
!2879 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !591, line: 459, size: 320, elements: !2880)
!2880 = !{!2881, !2882}
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2879, file: !591, line: 461, baseType: !1595, size: 256)
!2882 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !2879, file: !591, line: 464, baseType: !1777, size: 64, offset: 256)
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1592, file: !591, line: 747, baseType: !2884, size: 768)
!2884 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !591, line: 469, size: 768, elements: !2885)
!2885 = !{!2886, !2887, !2888, !2889, !2890}
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2884, file: !591, line: 471, baseType: !1595, size: 256)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2884, file: !591, line: 474, baseType: !7, size: 32, offset: 256)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !2884, file: !591, line: 475, baseType: !7, size: 32, offset: 288)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2884, file: !591, line: 478, baseType: !1777, size: 64, offset: 320)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !2884, file: !591, line: 481, baseType: !2891, size: 384, offset: 384)
!2891 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2892, size: 384, elements: !1694)
!2892 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !142, line: 1917, size: 384, elements: !2893)
!2893 = !{!2894, !2895, !2896}
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2892, file: !142, line: 1920, baseType: !2292, size: 256)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2892, file: !142, line: 1921, baseType: !1777, size: 64, offset: 256)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2892, file: !142, line: 1922, baseType: !1608, size: 32, offset: 320)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1592, file: !591, line: 748, baseType: !2898, size: 320)
!2898 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !591, line: 487, size: 320, elements: !2899)
!2899 = !{!2900, !2901}
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2898, file: !591, line: 490, baseType: !1595, size: 256)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2898, file: !591, line: 494, baseType: !1679, size: 32, offset: 256)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1592, file: !591, line: 749, baseType: !2903, size: 384)
!2903 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !591, line: 500, size: 384, elements: !2904)
!2904 = !{!2905, !2906, !2907}
!2905 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2903, file: !591, line: 502, baseType: !1595, size: 256)
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2903, file: !591, line: 506, baseType: !1640, size: 64, offset: 256)
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2903, file: !591, line: 510, baseType: !1640, size: 64, offset: 320)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1592, file: !591, line: 750, baseType: !2909, size: 320)
!2909 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !591, line: 529, size: 320, elements: !2910)
!2910 = !{!2911, !2912}
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2909, file: !591, line: 531, baseType: !1595, size: 256)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2909, file: !591, line: 540, baseType: !1640, size: 64, offset: 256)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1592, file: !591, line: 751, baseType: !2914, size: 704)
!2914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !591, line: 546, size: 704, elements: !2915)
!2915 = !{!2916, !2917, !2918, !2919, !2920, !2921, !2922}
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2914, file: !591, line: 549, baseType: !2844, size: 512)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2914, file: !591, line: 553, baseType: !1682, size: 64, offset: 512)
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2914, file: !591, line: 557, baseType: !1890, size: 8, offset: 576)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2914, file: !591, line: 558, baseType: !1890, size: 8, offset: 584)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2914, file: !591, line: 559, baseType: !1890, size: 8, offset: 592)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2914, file: !591, line: 560, baseType: !1890, size: 8, offset: 600)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2914, file: !591, line: 566, baseType: !2175, size: 64, offset: 640)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1592, file: !591, line: 752, baseType: !2924, size: 384)
!2924 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !591, line: 571, size: 384, elements: !2925)
!2925 = !{!2926, !2927}
!2926 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2924, file: !591, line: 573, baseType: !2855, size: 320)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2924, file: !591, line: 577, baseType: !1777, size: 64, offset: 320)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1592, file: !591, line: 753, baseType: !2929, size: 576)
!2929 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !591, line: 600, size: 576, elements: !2930)
!2930 = !{!2931, !2932, !2933, !2934, !2943}
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2929, file: !591, line: 602, baseType: !2855, size: 320)
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2929, file: !591, line: 605, baseType: !1777, size: 64, offset: 320)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2929, file: !591, line: 609, baseType: !2138, size: 64, offset: 384)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2929, file: !591, line: 612, baseType: !2935, size: 64, offset: 448)
!2935 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2936, size: 64)
!2936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !591, line: 581, size: 320, elements: !2937)
!2937 = !{!2938, !2939, !2940, !2941, !2942}
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2936, file: !591, line: 583, baseType: !141, size: 32)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2936, file: !591, line: 586, baseType: !1777, size: 64, offset: 64)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2936, file: !591, line: 589, baseType: !1777, size: 64, offset: 128)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2936, file: !591, line: 592, baseType: !1777, size: 64, offset: 192)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2936, file: !591, line: 595, baseType: !1777, size: 64, offset: 256)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2929, file: !591, line: 616, baseType: !1640, size: 64, offset: 512)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1592, file: !591, line: 754, baseType: !2945, size: 512)
!2945 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !591, line: 622, size: 512, elements: !2946)
!2946 = !{!2947, !2948, !2949, !2950}
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2945, file: !591, line: 624, baseType: !2855, size: 320)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2945, file: !591, line: 628, baseType: !1777, size: 64, offset: 320)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2945, file: !591, line: 632, baseType: !1777, size: 64, offset: 384)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2945, file: !591, line: 636, baseType: !1777, size: 64, offset: 448)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1592, file: !591, line: 755, baseType: !2952, size: 704)
!2952 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !591, line: 642, size: 704, elements: !2953)
!2953 = !{!2954, !2955, !2956, !2957}
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2952, file: !591, line: 644, baseType: !2945, size: 512)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2952, file: !591, line: 648, baseType: !1777, size: 64, offset: 512)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2952, file: !591, line: 652, baseType: !1777, size: 64, offset: 576)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2952, file: !591, line: 653, baseType: !1777, size: 64, offset: 640)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1592, file: !591, line: 756, baseType: !2959, size: 448)
!2959 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !591, line: 663, size: 448, elements: !2960)
!2960 = !{!2961, !2962, !2963}
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2959, file: !591, line: 665, baseType: !2855, size: 320)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2959, file: !591, line: 668, baseType: !1777, size: 64, offset: 320)
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2959, file: !591, line: 673, baseType: !1777, size: 64, offset: 384)
!2964 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1592, file: !591, line: 757, baseType: !2965, size: 384)
!2965 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !591, line: 694, size: 384, elements: !2966)
!2966 = !{!2967, !2968}
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2965, file: !591, line: 696, baseType: !2855, size: 320)
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2965, file: !591, line: 699, baseType: !1777, size: 64, offset: 320)
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1592, file: !591, line: 758, baseType: !2970, size: 384)
!2970 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !591, line: 681, size: 384, elements: !2971)
!2971 = !{!2972, !2973, !2974}
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2970, file: !591, line: 683, baseType: !1595, size: 256)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2970, file: !591, line: 686, baseType: !1777, size: 64, offset: 256)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2970, file: !591, line: 689, baseType: !1777, size: 64, offset: 320)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1592, file: !591, line: 759, baseType: !2976, size: 384)
!2976 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !591, line: 707, size: 384, elements: !2977)
!2977 = !{!2978, !2979, !2980}
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2976, file: !591, line: 709, baseType: !1595, size: 256)
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2976, file: !591, line: 712, baseType: !1777, size: 64, offset: 256)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2976, file: !591, line: 712, baseType: !1777, size: 64, offset: 320)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1592, file: !591, line: 760, baseType: !2982, size: 320)
!2982 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !591, line: 718, size: 320, elements: !2983)
!2983 = !{!2984, !2985}
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2982, file: !591, line: 720, baseType: !1595, size: 256)
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2982, file: !591, line: 723, baseType: !1777, size: 64, offset: 256)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "lp_nr", scope: !1586, file: !6, line: 346, baseType: !1679, size: 32, offset: 64)
!2987 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2988, size: 64)
!2988 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2123)
!2989 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2990, size: 64)
!2990 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1592)
!2991 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2992, size: 64)
!2992 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "finally_tree_node", file: !3, line: 211, size: 128, elements: !2993)
!2993 = !{!2994, !3001}
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "child", scope: !2992, file: !3, line: 217, baseType: !2995, size: 64)
!2995 = !DIDerivedType(tag: DW_TAG_typedef, name: "treemple", file: !3, line: 46, baseType: !2996)
!2996 = distinct !DICompositeType(tag: DW_TAG_union_type, file: !3, line: 46, size: 64, elements: !2997)
!2997 = !{!2998, !2999, !3000}
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "tp", scope: !2996, file: !3, line: 46, baseType: !2285, size: 64)
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "t", scope: !2996, file: !3, line: 46, baseType: !1777, size: 64)
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !2996, file: !3, line: 46, baseType: !1589, size: 64)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !2992, file: !3, line: 218, baseType: !1589, size: 64, offset: 64)
!3002 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3003, size: 64)
!3003 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !142, line: 184, baseType: !3004)
!3004 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !142, line: 184, size: 128, elements: !3005)
!3005 = !{!3006}
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3004, file: !142, line: 184, baseType: !2169, size: 128)
!3007 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3008, size: 64)
!3008 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "goto_queue_node", file: !3, line: 340, size: 256, elements: !3009)
!3009 = !{!3010, !3011, !3012, !3013, !3014}
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3008, file: !3, line: 342, baseType: !2995, size: 64)
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "repl_stmt", scope: !3008, file: !3, line: 343, baseType: !1640, size: 64, offset: 64)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "cont_stmt", scope: !3008, file: !3, line: 344, baseType: !1589, size: 64, offset: 128)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3008, file: !3, line: 345, baseType: !1679, size: 32, offset: 192)
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "is_label", scope: !3008, file: !3, line: 348, baseType: !1679, size: 32, offset: 224)
!3015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3016, size: 64)
!3016 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "labels_s", scope: !3017, file: !3, line: 1203, size: 128, elements: !3044)
!3017 = distinct !DISubprogram(name: "lower_try_finally_copy", scope: !3, file: !3, line: 1164, type: !3018, scopeLine: 1165, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3018 = !DISubroutineType(types: !3019)
!3019 = !{null, !3020, !3026}
!3020 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3021, size: 64)
!3021 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "leh_state", file: !3, line: 353, size: 192, elements: !3022)
!3022 = !{!3023, !3024, !3025}
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "cur_region", scope: !3021, file: !3, line: 358, baseType: !2037, size: 64)
!3024 = !DIDerivedType(tag: DW_TAG_member, name: "ehp_region", scope: !3021, file: !3, line: 363, baseType: !2037, size: 64, offset: 64)
!3025 = !DIDerivedType(tag: DW_TAG_member, name: "tf", scope: !3021, file: !3, line: 368, baseType: !3026, size: 64, offset: 128)
!3026 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3027, size: 64)
!3027 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "leh_tf_state", file: !3, line: 371, size: 768, elements: !3028)
!3028 = !{!3029, !3030, !3031, !3032, !3033, !3034, !3035, !3036, !3037, !3038, !3039, !3040, !3041, !3042}
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "try_finally_expr", scope: !3027, file: !3, line: 377, baseType: !1589, size: 64)
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "top_p", scope: !3027, file: !3, line: 378, baseType: !1589, size: 64, offset: 64)
!3031 = !DIDerivedType(tag: DW_TAG_member, name: "top_p_seq", scope: !3027, file: !3, line: 382, baseType: !1640, size: 64, offset: 128)
!3032 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !3027, file: !3, line: 385, baseType: !3020, size: 64, offset: 192)
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !3027, file: !3, line: 388, baseType: !2037, size: 64, offset: 256)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "goto_queue", scope: !3027, file: !3, line: 391, baseType: !3007, size: 64, offset: 320)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "goto_queue_size", scope: !3027, file: !3, line: 392, baseType: !2138, size: 64, offset: 384)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "goto_queue_active", scope: !3027, file: !3, line: 393, baseType: !2138, size: 64, offset: 448)
!3037 = !DIDerivedType(tag: DW_TAG_member, name: "goto_queue_map", scope: !3027, file: !3, line: 396, baseType: !2261, size: 64, offset: 512)
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "dest_array", scope: !3027, file: !3, line: 399, baseType: !3002, size: 64, offset: 576)
!3039 = !DIDerivedType(tag: DW_TAG_member, name: "fallthru_label", scope: !3027, file: !3, line: 404, baseType: !1777, size: 64, offset: 640)
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "may_fallthru", scope: !3027, file: !3, line: 408, baseType: !1890, size: 8, offset: 704)
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "may_return", scope: !3027, file: !3, line: 411, baseType: !1890, size: 8, offset: 712)
!3042 = !DIDerivedType(tag: DW_TAG_member, name: "may_throw", scope: !3027, file: !3, line: 415, baseType: !1890, size: 8, offset: 720)
!3043 = !{}
!3044 = !{!3045, !3046}
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "q", scope: !3016, file: !3, line: 1205, baseType: !3007, size: 64)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !3016, file: !3, line: 1206, baseType: !1777, size: 64, offset: 64)
!3047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1589, size: 64)
!3048 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !1578, line: 30, baseType: !3049)
!3049 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3050, size: 64)
!3050 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !142, line: 1893, baseType: !2292)
!3051 = !{!3052, !3080, !3082, !3084, !3086, !0, !3088, !3090, !3092}
!3052 = !DIGlobalVariableExpression(var: !3053, expr: !DIExpression())
!3053 = distinct !DIGlobalVariable(name: "pass_lower_eh", scope: !2, file: !3, line: 2027, type: !3054, isLocal: false, isDefinition: true)
!3054 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_opt_pass", file: !390, line: 156, size: 640, elements: !3055)
!3055 = !{!3056}
!3056 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !3054, file: !390, line: 158, baseType: !3057, size: 640)
!3057 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !390, line: 114, size: 640, elements: !3058)
!3058 = !{!3059, !3060, !3061, !3065, !3069, !3071, !3072, !3073, !3075, !3076, !3077, !3078, !3079}
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3057, file: !390, line: 117, baseType: !389, size: 32)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3057, file: !390, line: 121, baseType: !1682, size: 64, offset: 64)
!3061 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !3057, file: !390, line: 125, baseType: !3062, size: 64, offset: 128)
!3062 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3063, size: 64)
!3063 = !DISubroutineType(types: !3064)
!3064 = !{!1890}
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !3057, file: !390, line: 130, baseType: !3066, size: 64, offset: 192)
!3066 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3067, size: 64)
!3067 = !DISubroutineType(types: !3068)
!3068 = !{!7}
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !3057, file: !390, line: 133, baseType: !3070, size: 64, offset: 256)
!3070 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3057, size: 64)
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3057, file: !390, line: 136, baseType: !3070, size: 64, offset: 320)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !3057, file: !390, line: 139, baseType: !1679, size: 32, offset: 384)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !3057, file: !390, line: 143, baseType: !3074, size: 32, offset: 416)
!3074 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !397, line: 80, baseType: !396)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !3057, file: !390, line: 146, baseType: !7, size: 32, offset: 448)
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !3057, file: !390, line: 147, baseType: !7, size: 32, offset: 480)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !3057, file: !390, line: 148, baseType: !7, size: 32, offset: 512)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !3057, file: !390, line: 151, baseType: !7, size: 32, offset: 544)
!3079 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !3057, file: !390, line: 152, baseType: !7, size: 32, offset: 576)
!3080 = !DIGlobalVariableExpression(var: !3081, expr: !DIExpression())
!3081 = distinct !DIGlobalVariable(name: "pass_refactor_eh", scope: !2, file: !3, line: 2834, type: !3054, isLocal: false, isDefinition: true)
!3082 = !DIGlobalVariableExpression(var: !3083, expr: !DIExpression())
!3083 = distinct !DIGlobalVariable(name: "pass_lower_resx", scope: !2, file: !3, line: 3040, type: !3054, isLocal: false, isDefinition: true)
!3084 = !DIGlobalVariableExpression(var: !3085, expr: !DIExpression())
!3085 = distinct !DIGlobalVariable(name: "pass_lower_eh_dispatch", scope: !2, file: !3, line: 3240, type: !3054, isLocal: false, isDefinition: true)
!3086 = !DIGlobalVariableExpression(var: !3087, expr: !DIExpression())
!3087 = distinct !DIGlobalVariable(name: "pass_cleanup_eh", scope: !2, file: !3, line: 3882, type: !3054, isLocal: false, isDefinition: true)
!3088 = !DIGlobalVariableExpression(var: !3089, expr: !DIExpression())
!3089 = distinct !DIGlobalVariable(name: "finally_tree", scope: !2, file: !3, line: 222, type: !2113, isLocal: true, isDefinition: true)
!3090 = !DIGlobalVariableExpression(var: !3091, expr: !DIExpression())
!3091 = distinct !DIGlobalVariable(name: "eh_region_may_contain_throw_map", scope: !2, file: !3, line: 329, type: !2258, isLocal: true, isDefinition: true)
!3092 = !DIGlobalVariableExpression(var: !3093, expr: !DIExpression())
!3093 = distinct !DIGlobalVariable(name: "eh_seq", scope: !2, file: !3, line: 325, type: !1640, isLocal: true, isDefinition: true)
!3094 = !{i32 7, !"Dwarf Version", i32 4}
!3095 = !{i32 2, !"Debug Info Version", i32 3}
!3096 = !{i32 1, !"wchar_size", i32 4}
!3097 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3098 = distinct !DISubprogram(name: "using_eh_for_cleanups", scope: !3, file: !3, line: 52, type: !3099, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3099 = !DISubroutineType(types: !3100)
!3100 = !{null}
!3101 = !DILocation(line: 54, column: 27, scope: !3098)
!3102 = !DILocation(line: 55, column: 1, scope: !3098)
!3103 = distinct !DISubprogram(name: "add_stmt_to_eh_lp_fn", scope: !3, file: !3, line: 94, type: !3104, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3104 = !DISubroutineType(types: !3105)
!3105 = !{null, !2028, !1589, !1679}
!3106 = !DILocalVariable(name: "ifun", arg: 1, scope: !3103, file: !3, line: 94, type: !2028)
!3107 = !DILocation(line: 94, column: 40, scope: !3103)
!3108 = !DILocalVariable(name: "t", arg: 2, scope: !3103, file: !3, line: 94, type: !1589)
!3109 = !DILocation(line: 94, column: 53, scope: !3103)
!3110 = !DILocalVariable(name: "num", arg: 3, scope: !3103, file: !3, line: 94, type: !1679)
!3111 = !DILocation(line: 94, column: 60, scope: !3103)
!3112 = !DILocalVariable(name: "n", scope: !3103, file: !3, line: 96, type: !1585)
!3113 = !DILocation(line: 96, column: 27, scope: !3103)
!3114 = !DILocalVariable(name: "slot", scope: !3103, file: !3, line: 97, type: !2136)
!3115 = !DILocation(line: 97, column: 10, scope: !3103)
!3116 = !DILocation(line: 99, column: 3, scope: !3103)
!3117 = !DILocation(line: 101, column: 7, scope: !3103)
!3118 = !DILocation(line: 101, column: 5, scope: !3103)
!3119 = !DILocation(line: 102, column: 13, scope: !3103)
!3120 = !DILocation(line: 102, column: 3, scope: !3103)
!3121 = !DILocation(line: 102, column: 6, scope: !3103)
!3122 = !DILocation(line: 102, column: 11, scope: !3103)
!3123 = !DILocation(line: 103, column: 14, scope: !3103)
!3124 = !DILocation(line: 103, column: 3, scope: !3103)
!3125 = !DILocation(line: 103, column: 6, scope: !3103)
!3126 = !DILocation(line: 103, column: 12, scope: !3103)
!3127 = !DILocation(line: 105, column: 33, scope: !3128)
!3128 = distinct !DILexicalBlock(scope: !3103, file: !3, line: 105, column: 7)
!3129 = !DILocation(line: 105, column: 8, scope: !3128)
!3130 = !DILocation(line: 105, column: 7, scope: !3103)
!3131 = !DILocation(line: 106, column: 30, scope: !3128)
!3132 = !DILocation(line: 106, column: 36, scope: !3128)
!3133 = !DILocation(line: 106, column: 5, scope: !3128)
!3134 = !DILocation(line: 110, column: 51, scope: !3103)
!3135 = !DILocation(line: 110, column: 26, scope: !3103)
!3136 = !DILocation(line: 110, column: 58, scope: !3103)
!3137 = !DILocation(line: 110, column: 10, scope: !3103)
!3138 = !DILocation(line: 110, column: 8, scope: !3103)
!3139 = !DILocation(line: 111, column: 3, scope: !3103)
!3140 = !DILocation(line: 112, column: 11, scope: !3103)
!3141 = !DILocation(line: 112, column: 4, scope: !3103)
!3142 = !DILocation(line: 112, column: 9, scope: !3103)
!3143 = !DILocation(line: 113, column: 1, scope: !3103)
!3144 = distinct !DISubprogram(name: "struct_ptr_hash", scope: !3, file: !3, line: 72, type: !2120, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3145 = !DILocalVariable(name: "a", arg: 1, scope: !3144, file: !3, line: 72, type: !2123)
!3146 = !DILocation(line: 72, column: 30, scope: !3144)
!3147 = !DILocalVariable(name: "x", scope: !3144, file: !3, line: 74, type: !2987)
!3148 = !DILocation(line: 74, column: 24, scope: !3144)
!3149 = !DILocation(line: 74, column: 51, scope: !3144)
!3150 = !DILocation(line: 74, column: 28, scope: !3144)
!3151 = !DILocation(line: 75, column: 19, scope: !3144)
!3152 = !DILocation(line: 75, column: 18, scope: !3144)
!3153 = !DILocation(line: 75, column: 10, scope: !3144)
!3154 = !DILocation(line: 75, column: 21, scope: !3144)
!3155 = !DILocation(line: 75, column: 3, scope: !3144)
!3156 = distinct !DISubprogram(name: "struct_ptr_eq", scope: !3, file: !3, line: 64, type: !2128, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3157 = !DILocalVariable(name: "a", arg: 1, scope: !3156, file: !3, line: 64, type: !2123)
!3158 = !DILocation(line: 64, column: 28, scope: !3156)
!3159 = !DILocalVariable(name: "b", arg: 2, scope: !3156, file: !3, line: 64, type: !2123)
!3160 = !DILocation(line: 64, column: 43, scope: !3156)
!3161 = !DILocalVariable(name: "x", scope: !3156, file: !3, line: 66, type: !2987)
!3162 = !DILocation(line: 66, column: 24, scope: !3156)
!3163 = !DILocation(line: 66, column: 51, scope: !3156)
!3164 = !DILocation(line: 66, column: 28, scope: !3156)
!3165 = !DILocalVariable(name: "y", scope: !3156, file: !3, line: 67, type: !2987)
!3166 = !DILocation(line: 67, column: 24, scope: !3156)
!3167 = !DILocation(line: 67, column: 51, scope: !3156)
!3168 = !DILocation(line: 67, column: 28, scope: !3156)
!3169 = !DILocation(line: 68, column: 11, scope: !3156)
!3170 = !DILocation(line: 68, column: 10, scope: !3156)
!3171 = !DILocation(line: 68, column: 17, scope: !3156)
!3172 = !DILocation(line: 68, column: 16, scope: !3156)
!3173 = !DILocation(line: 68, column: 13, scope: !3156)
!3174 = !DILocation(line: 68, column: 3, scope: !3156)
!3175 = distinct !DISubprogram(name: "add_stmt_to_eh_lp", scope: !3, file: !3, line: 118, type: !3176, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3176 = !DISubroutineType(types: !3177)
!3177 = !{null, !1589, !1679}
!3178 = !DILocalVariable(name: "t", arg: 1, scope: !3175, file: !3, line: 118, type: !1589)
!3179 = !DILocation(line: 118, column: 27, scope: !3175)
!3180 = !DILocalVariable(name: "num", arg: 2, scope: !3175, file: !3, line: 118, type: !1679)
!3181 = !DILocation(line: 118, column: 34, scope: !3175)
!3182 = !DILocation(line: 120, column: 25, scope: !3175)
!3183 = !DILocation(line: 120, column: 31, scope: !3175)
!3184 = !DILocation(line: 120, column: 34, scope: !3175)
!3185 = !DILocation(line: 120, column: 3, scope: !3175)
!3186 = !DILocation(line: 121, column: 1, scope: !3175)
!3187 = distinct !DISubprogram(name: "remove_stmt_from_eh_lp_fn", scope: !3, file: !3, line: 147, type: !3188, scopeLine: 148, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3188 = !DISubroutineType(types: !3189)
!3189 = !{!1890, !2028, !1589}
!3190 = !DILocalVariable(name: "ifun", arg: 1, scope: !3187, file: !3, line: 147, type: !2028)
!3191 = !DILocation(line: 147, column: 45, scope: !3187)
!3192 = !DILocalVariable(name: "t", arg: 2, scope: !3187, file: !3, line: 147, type: !1589)
!3193 = !DILocation(line: 147, column: 58, scope: !3187)
!3194 = !DILocalVariable(name: "dummy", scope: !3187, file: !3, line: 149, type: !1586)
!3195 = !DILocation(line: 149, column: 26, scope: !3187)
!3196 = !DILocalVariable(name: "slot", scope: !3187, file: !3, line: 150, type: !2136)
!3197 = !DILocation(line: 150, column: 10, scope: !3187)
!3198 = !DILocation(line: 152, column: 33, scope: !3199)
!3199 = distinct !DILexicalBlock(scope: !3187, file: !3, line: 152, column: 7)
!3200 = !DILocation(line: 152, column: 8, scope: !3199)
!3201 = !DILocation(line: 152, column: 7, scope: !3187)
!3202 = !DILocation(line: 153, column: 5, scope: !3199)
!3203 = !DILocation(line: 155, column: 16, scope: !3187)
!3204 = !DILocation(line: 155, column: 9, scope: !3187)
!3205 = !DILocation(line: 155, column: 14, scope: !3187)
!3206 = !DILocation(line: 156, column: 51, scope: !3187)
!3207 = !DILocation(line: 156, column: 26, scope: !3187)
!3208 = !DILocation(line: 156, column: 58, scope: !3187)
!3209 = !DILocation(line: 156, column: 10, scope: !3187)
!3210 = !DILocation(line: 156, column: 8, scope: !3187)
!3211 = !DILocation(line: 158, column: 7, scope: !3212)
!3212 = distinct !DILexicalBlock(scope: !3187, file: !3, line: 158, column: 7)
!3213 = !DILocation(line: 158, column: 7, scope: !3187)
!3214 = !DILocation(line: 160, column: 49, scope: !3215)
!3215 = distinct !DILexicalBlock(scope: !3212, file: !3, line: 159, column: 5)
!3216 = !DILocation(line: 160, column: 24, scope: !3215)
!3217 = !DILocation(line: 160, column: 56, scope: !3215)
!3218 = !DILocation(line: 160, column: 7, scope: !3215)
!3219 = !DILocation(line: 161, column: 7, scope: !3215)
!3220 = !DILocation(line: 164, column: 5, scope: !3212)
!3221 = !DILocation(line: 165, column: 1, scope: !3187)
!3222 = distinct !DISubprogram(name: "remove_stmt_from_eh_lp", scope: !3, file: !3, line: 172, type: !3223, scopeLine: 173, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3223 = !DISubroutineType(types: !3224)
!3224 = !{!1890, !1589}
!3225 = !DILocalVariable(name: "t", arg: 1, scope: !3222, file: !3, line: 172, type: !1589)
!3226 = !DILocation(line: 172, column: 32, scope: !3222)
!3227 = !DILocation(line: 174, column: 37, scope: !3222)
!3228 = !DILocation(line: 174, column: 43, scope: !3222)
!3229 = !DILocation(line: 174, column: 10, scope: !3222)
!3230 = !DILocation(line: 174, column: 3, scope: !3222)
!3231 = distinct !DISubprogram(name: "lookup_stmt_eh_lp_fn", scope: !3, file: !3, line: 183, type: !3232, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3232 = !DISubroutineType(types: !3233)
!3233 = !{!1679, !2028, !1589}
!3234 = !DILocalVariable(name: "ifun", arg: 1, scope: !3231, file: !3, line: 183, type: !2028)
!3235 = !DILocation(line: 183, column: 40, scope: !3231)
!3236 = !DILocalVariable(name: "t", arg: 2, scope: !3231, file: !3, line: 183, type: !1589)
!3237 = !DILocation(line: 183, column: 53, scope: !3231)
!3238 = !DILocalVariable(name: "p", scope: !3231, file: !3, line: 185, type: !1585)
!3239 = !DILocation(line: 185, column: 27, scope: !3231)
!3240 = !DILocalVariable(name: "n", scope: !3231, file: !3, line: 185, type: !1586)
!3241 = !DILocation(line: 185, column: 30, scope: !3231)
!3242 = !DILocation(line: 187, column: 7, scope: !3243)
!3243 = distinct !DILexicalBlock(scope: !3231, file: !3, line: 187, column: 7)
!3244 = !DILocation(line: 187, column: 13, scope: !3243)
!3245 = !DILocation(line: 187, column: 17, scope: !3243)
!3246 = !DILocation(line: 187, column: 34, scope: !3243)
!3247 = !DILocation(line: 187, column: 7, scope: !3231)
!3248 = !DILocation(line: 188, column: 5, scope: !3243)
!3249 = !DILocation(line: 190, column: 12, scope: !3231)
!3250 = !DILocation(line: 190, column: 5, scope: !3231)
!3251 = !DILocation(line: 190, column: 10, scope: !3231)
!3252 = !DILocation(line: 191, column: 45, scope: !3231)
!3253 = !DILocation(line: 191, column: 51, scope: !3231)
!3254 = !DILocation(line: 191, column: 55, scope: !3231)
!3255 = !DILocation(line: 191, column: 73, scope: !3231)
!3256 = !DILocation(line: 191, column: 34, scope: !3231)
!3257 = !DILocation(line: 191, column: 7, scope: !3231)
!3258 = !DILocation(line: 191, column: 5, scope: !3231)
!3259 = !DILocation(line: 192, column: 10, scope: !3231)
!3260 = !DILocation(line: 192, column: 14, scope: !3231)
!3261 = !DILocation(line: 192, column: 17, scope: !3231)
!3262 = !DILocation(line: 192, column: 3, scope: !3231)
!3263 = !DILocation(line: 193, column: 1, scope: !3231)
!3264 = distinct !DISubprogram(name: "lookup_stmt_eh_lp", scope: !3, file: !3, line: 198, type: !3265, scopeLine: 199, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3265 = !DISubroutineType(types: !3266)
!3266 = !{!1679, !1589}
!3267 = !DILocalVariable(name: "t", arg: 1, scope: !3264, file: !3, line: 198, type: !1589)
!3268 = !DILocation(line: 198, column: 27, scope: !3264)
!3269 = !DILocation(line: 202, column: 8, scope: !3270)
!3270 = distinct !DILexicalBlock(scope: !3264, file: !3, line: 202, column: 7)
!3271 = !DILocation(line: 202, column: 7, scope: !3264)
!3272 = !DILocation(line: 203, column: 5, scope: !3270)
!3273 = !DILocation(line: 204, column: 32, scope: !3264)
!3274 = !DILocation(line: 204, column: 38, scope: !3264)
!3275 = !DILocation(line: 204, column: 10, scope: !3264)
!3276 = !DILocation(line: 204, column: 3, scope: !3264)
!3277 = !DILocation(line: 205, column: 1, scope: !3264)
!3278 = distinct !DISubprogram(name: "lower_eh_constructs", scope: !3, file: !3, line: 1987, type: !3067, scopeLine: 1988, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3279 = !DILocalVariable(name: "null_state", scope: !3278, file: !3, line: 1989, type: !3021)
!3280 = !DILocation(line: 1989, column: 20, scope: !3278)
!3281 = !DILocalVariable(name: "bodyp", scope: !3278, file: !3, line: 1990, type: !1640)
!3282 = !DILocation(line: 1990, column: 14, scope: !3278)
!3283 = !DILocation(line: 1992, column: 24, scope: !3278)
!3284 = !DILocation(line: 1992, column: 11, scope: !3278)
!3285 = !DILocation(line: 1992, column: 9, scope: !3278)
!3286 = !DILocation(line: 1993, column: 7, scope: !3287)
!3287 = distinct !DILexicalBlock(scope: !3278, file: !3, line: 1993, column: 7)
!3288 = !DILocation(line: 1993, column: 13, scope: !3287)
!3289 = !DILocation(line: 1993, column: 7, scope: !3278)
!3290 = !DILocation(line: 1994, column: 5, scope: !3287)
!3291 = !DILocation(line: 1996, column: 18, scope: !3278)
!3292 = !DILocation(line: 1996, column: 16, scope: !3278)
!3293 = !DILocation(line: 1997, column: 37, scope: !3278)
!3294 = !DILocation(line: 1997, column: 35, scope: !3278)
!3295 = !DILocation(line: 1998, column: 3, scope: !3278)
!3296 = !DILocation(line: 2000, column: 27, scope: !3278)
!3297 = !DILocation(line: 2000, column: 3, scope: !3278)
!3298 = !DILocation(line: 2001, column: 39, scope: !3278)
!3299 = !DILocation(line: 2001, column: 3, scope: !3278)
!3300 = !DILocation(line: 2006, column: 3, scope: !3278)
!3301 = !DILocation(line: 2007, column: 31, scope: !3278)
!3302 = !DILocation(line: 2007, column: 3, scope: !3278)
!3303 = !DILocation(line: 2011, column: 3, scope: !3278)
!3304 = !DILocation(line: 2013, column: 16, scope: !3278)
!3305 = !DILocation(line: 2013, column: 3, scope: !3278)
!3306 = !DILocation(line: 2014, column: 3, scope: !3278)
!3307 = !DILocation(line: 2015, column: 10, scope: !3278)
!3308 = !DILocation(line: 2019, column: 38, scope: !3309)
!3309 = distinct !DILexicalBlock(scope: !3278, file: !3, line: 2019, column: 7)
!3310 = !DILocation(line: 2019, column: 7, scope: !3309)
!3311 = !DILocation(line: 2019, column: 44, scope: !3309)
!3312 = !DILocation(line: 2020, column: 7, scope: !3309)
!3313 = !DILocation(line: 2020, column: 11, scope: !3309)
!3314 = !DILocation(line: 2019, column: 7, scope: !3278)
!3315 = !DILocation(line: 2022, column: 20, scope: !3309)
!3316 = !DILocation(line: 2022, column: 9, scope: !3309)
!3317 = !DILocation(line: 2021, column: 5, scope: !3309)
!3318 = !DILocation(line: 2022, column: 7, scope: !3309)
!3319 = !DILocation(line: 2024, column: 3, scope: !3278)
!3320 = !DILocation(line: 2025, column: 1, scope: !3278)
!3321 = distinct !DISubprogram(name: "make_eh_dispatch_edges", scope: !3, file: !3, line: 2051, type: !3223, scopeLine: 2052, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3322 = !DILocalVariable(name: "stmt", arg: 1, scope: !3321, file: !3, line: 2051, type: !1589)
!3323 = !DILocation(line: 2051, column: 32, scope: !3321)
!3324 = !DILocalVariable(name: "r", scope: !3321, file: !3, line: 2053, type: !2037)
!3325 = !DILocation(line: 2053, column: 13, scope: !3321)
!3326 = !DILocalVariable(name: "c", scope: !3321, file: !3, line: 2054, type: !3327)
!3327 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_catch", file: !6, line: 181, baseType: !2053)
!3328 = !DILocation(line: 2054, column: 12, scope: !3321)
!3329 = !DILocalVariable(name: "src", scope: !3321, file: !3, line: 2055, type: !2200)
!3330 = !DILocation(line: 2055, column: 15, scope: !3321)
!3331 = !DILocalVariable(name: "dst", scope: !3321, file: !3, line: 2055, type: !2200)
!3332 = !DILocation(line: 2055, column: 20, scope: !3321)
!3333 = !DILocation(line: 2057, column: 61, scope: !3321)
!3334 = !DILocation(line: 2057, column: 34, scope: !3321)
!3335 = !DILocation(line: 2057, column: 7, scope: !3321)
!3336 = !DILocation(line: 2057, column: 5, scope: !3321)
!3337 = !DILocation(line: 2058, column: 20, scope: !3321)
!3338 = !DILocation(line: 2058, column: 9, scope: !3321)
!3339 = !DILocation(line: 2058, column: 7, scope: !3321)
!3340 = !DILocation(line: 2060, column: 11, scope: !3321)
!3341 = !DILocation(line: 2060, column: 14, scope: !3321)
!3342 = !DILocation(line: 2060, column: 3, scope: !3321)
!3343 = !DILocation(line: 2063, column: 16, scope: !3344)
!3344 = distinct !DILexicalBlock(scope: !3345, file: !3, line: 2063, column: 7)
!3345 = distinct !DILexicalBlock(scope: !3321, file: !3, line: 2061, column: 5)
!3346 = !DILocation(line: 2063, column: 19, scope: !3344)
!3347 = !DILocation(line: 2063, column: 21, scope: !3344)
!3348 = !DILocation(line: 2063, column: 28, scope: !3344)
!3349 = !DILocation(line: 2063, column: 14, scope: !3344)
!3350 = !DILocation(line: 2063, column: 12, scope: !3344)
!3351 = !DILocation(line: 2063, column: 41, scope: !3352)
!3352 = distinct !DILexicalBlock(scope: !3344, file: !3, line: 2063, column: 7)
!3353 = !DILocation(line: 2063, column: 7, scope: !3344)
!3354 = !DILocation(line: 2065, column: 10, scope: !3355)
!3355 = distinct !DILexicalBlock(scope: !3352, file: !3, line: 2064, column: 2)
!3356 = !DILocation(line: 2065, column: 8, scope: !3355)
!3357 = !DILocation(line: 2066, column: 15, scope: !3355)
!3358 = !DILocation(line: 2066, column: 20, scope: !3355)
!3359 = !DILocation(line: 2066, column: 4, scope: !3355)
!3360 = !DILocation(line: 2069, column: 8, scope: !3361)
!3361 = distinct !DILexicalBlock(scope: !3355, file: !3, line: 2069, column: 8)
!3362 = !DILocation(line: 2069, column: 11, scope: !3361)
!3363 = !DILocation(line: 2069, column: 21, scope: !3361)
!3364 = !DILocation(line: 2069, column: 8, scope: !3355)
!3365 = !DILocation(line: 2070, column: 6, scope: !3361)
!3366 = !DILocation(line: 2071, column: 2, scope: !3355)
!3367 = !DILocation(line: 2063, column: 49, scope: !3352)
!3368 = !DILocation(line: 2063, column: 52, scope: !3352)
!3369 = !DILocation(line: 2063, column: 47, scope: !3352)
!3370 = !DILocation(line: 2063, column: 7, scope: !3352)
!3371 = distinct !{!3371, !3353, !3372}
!3372 = !DILocation(line: 2071, column: 2, scope: !3344)
!3373 = !DILocation(line: 2072, column: 7, scope: !3345)
!3374 = !DILocation(line: 2075, column: 13, scope: !3345)
!3375 = !DILocation(line: 2075, column: 11, scope: !3345)
!3376 = !DILocation(line: 2076, column: 18, scope: !3345)
!3377 = !DILocation(line: 2076, column: 23, scope: !3345)
!3378 = !DILocation(line: 2076, column: 7, scope: !3345)
!3379 = !DILocation(line: 2077, column: 7, scope: !3345)
!3380 = !DILocation(line: 2080, column: 7, scope: !3345)
!3381 = !DILocation(line: 2081, column: 5, scope: !3345)
!3382 = !DILocation(line: 2083, column: 3, scope: !3321)
!3383 = !DILocation(line: 2084, column: 1, scope: !3321)
!3384 = distinct !DISubprogram(name: "gimple_eh_dispatch_region", scope: !591, file: !591, line: 3139, type: !3385, scopeLine: 3140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3385 = !DISubroutineType(types: !3386)
!3386 = !{!1679, !3387}
!3387 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1590, line: 60, baseType: !2989)
!3388 = !DILocalVariable(name: "gs", arg: 1, scope: !3384, file: !591, line: 3139, type: !3387)
!3389 = !DILocation(line: 3139, column: 41, scope: !3384)
!3390 = !DILocation(line: 3142, column: 10, scope: !3384)
!3391 = !DILocation(line: 3142, column: 14, scope: !3384)
!3392 = !DILocation(line: 3142, column: 29, scope: !3384)
!3393 = !DILocation(line: 3142, column: 3, scope: !3384)
!3394 = distinct !DISubprogram(name: "gimple_bb", scope: !591, file: !591, line: 1112, type: !3395, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3395 = !DISubroutineType(types: !3396)
!3396 = !{!1614, !3387}
!3397 = !DILocalVariable(name: "g", arg: 1, scope: !3394, file: !591, line: 1112, type: !3387)
!3398 = !DILocation(line: 1112, column: 25, scope: !3394)
!3399 = !DILocation(line: 1114, column: 10, scope: !3394)
!3400 = !DILocation(line: 1114, column: 13, scope: !3394)
!3401 = !DILocation(line: 1114, column: 20, scope: !3394)
!3402 = !DILocation(line: 1114, column: 3, scope: !3394)
!3403 = distinct !DISubprogram(name: "make_eh_edges", scope: !3, file: !3, line: 2090, type: !3404, scopeLine: 2091, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3404 = !DISubroutineType(types: !3405)
!3405 = !{null, !1589}
!3406 = !DILocalVariable(name: "stmt", arg: 1, scope: !3403, file: !3, line: 2090, type: !1589)
!3407 = !DILocation(line: 2090, column: 23, scope: !3403)
!3408 = !DILocalVariable(name: "src", scope: !3403, file: !3, line: 2092, type: !2200)
!3409 = !DILocation(line: 2092, column: 15, scope: !3403)
!3410 = !DILocalVariable(name: "dst", scope: !3403, file: !3, line: 2092, type: !2200)
!3411 = !DILocation(line: 2092, column: 20, scope: !3403)
!3412 = !DILocalVariable(name: "lp", scope: !3403, file: !3, line: 2093, type: !2111)
!3413 = !DILocation(line: 2093, column: 18, scope: !3403)
!3414 = !DILocalVariable(name: "lp_nr", scope: !3403, file: !3, line: 2094, type: !1679)
!3415 = !DILocation(line: 2094, column: 7, scope: !3403)
!3416 = !DILocation(line: 2096, column: 30, scope: !3403)
!3417 = !DILocation(line: 2096, column: 11, scope: !3403)
!3418 = !DILocation(line: 2096, column: 9, scope: !3403)
!3419 = !DILocation(line: 2097, column: 7, scope: !3420)
!3420 = distinct !DILexicalBlock(scope: !3403, file: !3, line: 2097, column: 7)
!3421 = !DILocation(line: 2097, column: 13, scope: !3420)
!3422 = !DILocation(line: 2097, column: 7, scope: !3403)
!3423 = !DILocation(line: 2098, column: 5, scope: !3420)
!3424 = !DILocation(line: 2100, column: 40, scope: !3403)
!3425 = !DILocation(line: 2100, column: 8, scope: !3403)
!3426 = !DILocation(line: 2100, column: 6, scope: !3403)
!3427 = !DILocation(line: 2101, column: 3, scope: !3403)
!3428 = !DILocation(line: 2103, column: 20, scope: !3403)
!3429 = !DILocation(line: 2103, column: 9, scope: !3403)
!3430 = !DILocation(line: 2103, column: 7, scope: !3403)
!3431 = !DILocation(line: 2104, column: 9, scope: !3403)
!3432 = !DILocation(line: 2104, column: 7, scope: !3403)
!3433 = !DILocation(line: 2105, column: 14, scope: !3403)
!3434 = !DILocation(line: 2105, column: 19, scope: !3403)
!3435 = !DILocation(line: 2105, column: 3, scope: !3403)
!3436 = !DILocation(line: 2106, column: 1, scope: !3403)
!3437 = distinct !DISubprogram(name: "redirect_eh_edge", scope: !3, file: !3, line: 2198, type: !3438, scopeLine: 2199, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3438 = !DISubroutineType(types: !3439)
!3439 = !{!1630, !1630, !2200}
!3440 = !DILocalVariable(name: "edge_in", arg: 1, scope: !3437, file: !3, line: 2198, type: !1630)
!3441 = !DILocation(line: 2198, column: 24, scope: !3437)
!3442 = !DILocalVariable(name: "new_bb", arg: 2, scope: !3437, file: !3, line: 2198, type: !2200)
!3443 = !DILocation(line: 2198, column: 45, scope: !3437)
!3444 = !DILocation(line: 2200, column: 23, scope: !3437)
!3445 = !DILocation(line: 2200, column: 32, scope: !3437)
!3446 = !DILocation(line: 2200, column: 3, scope: !3437)
!3447 = !DILocation(line: 2201, column: 29, scope: !3437)
!3448 = !DILocation(line: 2201, column: 38, scope: !3437)
!3449 = !DILocation(line: 2201, column: 10, scope: !3437)
!3450 = !DILocation(line: 2201, column: 3, scope: !3437)
!3451 = distinct !DISubprogram(name: "redirect_eh_edge_1", scope: !3, file: !3, line: 2118, type: !3452, scopeLine: 2119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3452 = !DISubroutineType(types: !3453)
!3453 = !{null, !1630, !2200, !1890}
!3454 = !DILocalVariable(name: "edge_in", arg: 1, scope: !3451, file: !3, line: 2118, type: !1630)
!3455 = !DILocation(line: 2118, column: 26, scope: !3451)
!3456 = !DILocalVariable(name: "new_bb", arg: 2, scope: !3451, file: !3, line: 2118, type: !2200)
!3457 = !DILocation(line: 2118, column: 47, scope: !3451)
!3458 = !DILocalVariable(name: "change_region", arg: 3, scope: !3451, file: !3, line: 2118, type: !1890)
!3459 = !DILocation(line: 2118, column: 60, scope: !3451)
!3460 = !DILocalVariable(name: "old_lp", scope: !3451, file: !3, line: 2120, type: !2111)
!3461 = !DILocation(line: 2120, column: 18, scope: !3451)
!3462 = !DILocalVariable(name: "new_lp", scope: !3451, file: !3, line: 2120, type: !2111)
!3463 = !DILocation(line: 2120, column: 26, scope: !3451)
!3464 = !DILocalVariable(name: "old_bb", scope: !3451, file: !3, line: 2121, type: !2200)
!3465 = !DILocation(line: 2121, column: 15, scope: !3451)
!3466 = !DILocalVariable(name: "throw_stmt", scope: !3451, file: !3, line: 2122, type: !1589)
!3467 = !DILocation(line: 2122, column: 10, scope: !3451)
!3468 = !DILocalVariable(name: "old_lp_nr", scope: !3451, file: !3, line: 2123, type: !1679)
!3469 = !DILocation(line: 2123, column: 7, scope: !3451)
!3470 = !DILocalVariable(name: "new_lp_nr", scope: !3451, file: !3, line: 2123, type: !1679)
!3471 = !DILocation(line: 2123, column: 18, scope: !3451)
!3472 = !DILocalVariable(name: "old_label", scope: !3451, file: !3, line: 2124, type: !1777)
!3473 = !DILocation(line: 2124, column: 8, scope: !3451)
!3474 = !DILocalVariable(name: "new_label", scope: !3451, file: !3, line: 2124, type: !1777)
!3475 = !DILocation(line: 2124, column: 19, scope: !3451)
!3476 = !DILocalVariable(name: "ei", scope: !3451, file: !3, line: 2125, type: !3477)
!3477 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !369, line: 682, baseType: !3478)
!3478 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !369, line: 679, size: 128, elements: !3479)
!3479 = !{!3480, !3481}
!3480 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3478, file: !369, line: 680, baseType: !7, size: 32)
!3481 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !3478, file: !369, line: 681, baseType: !3482, size: 64, offset: 64)
!3482 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1618, size: 64)
!3483 = !DILocation(line: 2125, column: 17, scope: !3451)
!3484 = !DILocalVariable(name: "e", scope: !3451, file: !3, line: 2126, type: !1630)
!3485 = !DILocation(line: 2126, column: 8, scope: !3451)
!3486 = !DILocation(line: 2128, column: 12, scope: !3451)
!3487 = !DILocation(line: 2128, column: 21, scope: !3451)
!3488 = !DILocation(line: 2128, column: 10, scope: !3451)
!3489 = !DILocation(line: 2129, column: 35, scope: !3451)
!3490 = !DILocation(line: 2129, column: 15, scope: !3451)
!3491 = !DILocation(line: 2129, column: 13, scope: !3451)
!3492 = !DILocation(line: 2130, column: 15, scope: !3451)
!3493 = !DILocation(line: 2130, column: 13, scope: !3451)
!3494 = !DILocation(line: 2131, column: 3, scope: !3451)
!3495 = !DILocation(line: 2132, column: 44, scope: !3451)
!3496 = !DILocation(line: 2132, column: 12, scope: !3451)
!3497 = !DILocation(line: 2132, column: 10, scope: !3451)
!3498 = !DILocation(line: 2134, column: 27, scope: !3451)
!3499 = !DILocation(line: 2134, column: 36, scope: !3451)
!3500 = !DILocation(line: 2134, column: 16, scope: !3451)
!3501 = !DILocation(line: 2134, column: 14, scope: !3451)
!3502 = !DILocation(line: 2135, column: 3, scope: !3451)
!3503 = !DILocation(line: 2137, column: 35, scope: !3451)
!3504 = !DILocation(line: 2137, column: 15, scope: !3451)
!3505 = !DILocation(line: 2137, column: 13, scope: !3451)
!3506 = !DILocation(line: 2140, column: 15, scope: !3451)
!3507 = !DILocation(line: 2140, column: 13, scope: !3451)
!3508 = !DILocation(line: 2141, column: 7, scope: !3509)
!3509 = distinct !DILexicalBlock(scope: !3451, file: !3, line: 2141, column: 7)
!3510 = !DILocation(line: 2141, column: 7, scope: !3451)
!3511 = !DILocation(line: 2143, column: 48, scope: !3512)
!3512 = distinct !DILexicalBlock(scope: !3509, file: !3, line: 2142, column: 5)
!3513 = !DILocation(line: 2143, column: 16, scope: !3512)
!3514 = !DILocation(line: 2143, column: 14, scope: !3512)
!3515 = !DILocation(line: 2144, column: 7, scope: !3512)
!3516 = !DILocation(line: 2148, column: 7, scope: !3512)
!3517 = !DILocation(line: 2149, column: 5, scope: !3512)
!3518 = !DILocation(line: 2152, column: 14, scope: !3519)
!3519 = distinct !DILexicalBlock(scope: !3509, file: !3, line: 2151, column: 5)
!3520 = !DILocation(line: 2153, column: 7, scope: !3519)
!3521 = !DILocation(line: 2157, column: 3, scope: !3522)
!3522 = distinct !DILexicalBlock(scope: !3451, file: !3, line: 2157, column: 3)
!3523 = !DILocation(line: 2157, column: 3, scope: !3524)
!3524 = distinct !DILexicalBlock(scope: !3522, file: !3, line: 2157, column: 3)
!3525 = !DILocation(line: 2158, column: 9, scope: !3526)
!3526 = distinct !DILexicalBlock(scope: !3524, file: !3, line: 2158, column: 9)
!3527 = !DILocation(line: 2158, column: 14, scope: !3526)
!3528 = !DILocation(line: 2158, column: 11, scope: !3526)
!3529 = !DILocation(line: 2158, column: 22, scope: !3526)
!3530 = !DILocation(line: 2158, column: 26, scope: !3526)
!3531 = !DILocation(line: 2158, column: 29, scope: !3526)
!3532 = !DILocation(line: 2158, column: 35, scope: !3526)
!3533 = !DILocation(line: 2158, column: 9, scope: !3524)
!3534 = !DILocation(line: 2159, column: 7, scope: !3526)
!3535 = !DILocation(line: 2158, column: 44, scope: !3526)
!3536 = distinct !{!3536, !3521, !3537}
!3537 = !DILocation(line: 2159, column: 7, scope: !3522)
!3538 = !DILocation(line: 2161, column: 7, scope: !3539)
!3539 = distinct !DILexicalBlock(scope: !3451, file: !3, line: 2161, column: 7)
!3540 = !DILocation(line: 2161, column: 7, scope: !3451)
!3541 = !DILocation(line: 2168, column: 11, scope: !3542)
!3542 = distinct !DILexicalBlock(scope: !3543, file: !3, line: 2168, column: 11)
!3543 = distinct !DILexicalBlock(scope: !3539, file: !3, line: 2162, column: 5)
!3544 = !DILocation(line: 2168, column: 13, scope: !3542)
!3545 = !DILocation(line: 2168, column: 21, scope: !3542)
!3546 = !DILocation(line: 2168, column: 25, scope: !3542)
!3547 = !DILocation(line: 2168, column: 11, scope: !3543)
!3548 = !DILocation(line: 2169, column: 25, scope: !3542)
!3549 = !DILocation(line: 2169, column: 2, scope: !3542)
!3550 = !DILocation(line: 2170, column: 5, scope: !3543)
!3551 = !DILocation(line: 2176, column: 11, scope: !3552)
!3552 = distinct !DILexicalBlock(scope: !3553, file: !3, line: 2176, column: 11)
!3553 = distinct !DILexicalBlock(scope: !3539, file: !3, line: 2172, column: 5)
!3554 = !DILocation(line: 2176, column: 13, scope: !3552)
!3555 = !DILocation(line: 2176, column: 11, scope: !3553)
!3556 = !DILocation(line: 2178, column: 4, scope: !3557)
!3557 = distinct !DILexicalBlock(scope: !3552, file: !3, line: 2177, column: 2)
!3558 = !DILocation(line: 2178, column: 49, scope: !3557)
!3559 = !DILocation(line: 2179, column: 13, scope: !3557)
!3560 = !DILocation(line: 2179, column: 11, scope: !3557)
!3561 = !DILocation(line: 2180, column: 2, scope: !3557)
!3562 = !DILocation(line: 2182, column: 31, scope: !3552)
!3563 = !DILocation(line: 2182, column: 39, scope: !3552)
!3564 = !DILocation(line: 2182, column: 11, scope: !3552)
!3565 = !DILocation(line: 2182, column: 9, scope: !3552)
!3566 = !DILocation(line: 2183, column: 34, scope: !3553)
!3567 = !DILocation(line: 2183, column: 7, scope: !3553)
!3568 = !DILocation(line: 2183, column: 15, scope: !3553)
!3569 = !DILocation(line: 2183, column: 32, scope: !3553)
!3570 = !DILocation(line: 2184, column: 39, scope: !3553)
!3571 = !DILocation(line: 2184, column: 47, scope: !3553)
!3572 = !DILocation(line: 2184, column: 7, scope: !3553)
!3573 = !DILocation(line: 2184, column: 37, scope: !3553)
!3574 = !DILocation(line: 2188, column: 7, scope: !3575)
!3575 = distinct !DILexicalBlock(scope: !3451, file: !3, line: 2188, column: 7)
!3576 = !DILocation(line: 2188, column: 17, scope: !3575)
!3577 = !DILocation(line: 2188, column: 14, scope: !3575)
!3578 = !DILocation(line: 2188, column: 7, scope: !3451)
!3579 = !DILocation(line: 2190, column: 31, scope: !3580)
!3580 = distinct !DILexicalBlock(scope: !3575, file: !3, line: 2189, column: 5)
!3581 = !DILocation(line: 2190, column: 7, scope: !3580)
!3582 = !DILocation(line: 2191, column: 26, scope: !3580)
!3583 = !DILocation(line: 2191, column: 38, scope: !3580)
!3584 = !DILocation(line: 2191, column: 46, scope: !3580)
!3585 = !DILocation(line: 2191, column: 7, scope: !3580)
!3586 = !DILocation(line: 2192, column: 5, scope: !3580)
!3587 = !DILocation(line: 2193, column: 1, scope: !3451)
!3588 = distinct !DISubprogram(name: "redirect_eh_dispatch_edge", scope: !3, file: !3, line: 2209, type: !3589, scopeLine: 2210, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3589 = !DISubroutineType(types: !3590)
!3590 = !{null, !1589, !1630, !2200}
!3591 = !DILocalVariable(name: "stmt", arg: 1, scope: !3588, file: !3, line: 2209, type: !1589)
!3592 = !DILocation(line: 2209, column: 35, scope: !3588)
!3593 = !DILocalVariable(name: "e", arg: 2, scope: !3588, file: !3, line: 2209, type: !1630)
!3594 = !DILocation(line: 2209, column: 46, scope: !3588)
!3595 = !DILocalVariable(name: "new_bb", arg: 3, scope: !3588, file: !3, line: 2209, type: !2200)
!3596 = !DILocation(line: 2209, column: 61, scope: !3588)
!3597 = !DILocalVariable(name: "new_lab", scope: !3588, file: !3, line: 2211, type: !1777)
!3598 = !DILocation(line: 2211, column: 8, scope: !3588)
!3599 = !DILocation(line: 2211, column: 38, scope: !3588)
!3600 = !DILocation(line: 2211, column: 18, scope: !3588)
!3601 = !DILocalVariable(name: "any_changed", scope: !3588, file: !3, line: 2212, type: !1890)
!3602 = !DILocation(line: 2212, column: 8, scope: !3588)
!3603 = !DILocalVariable(name: "old_bb", scope: !3588, file: !3, line: 2213, type: !2200)
!3604 = !DILocation(line: 2213, column: 15, scope: !3588)
!3605 = !DILocalVariable(name: "r", scope: !3588, file: !3, line: 2214, type: !2037)
!3606 = !DILocation(line: 2214, column: 13, scope: !3588)
!3607 = !DILocalVariable(name: "c", scope: !3588, file: !3, line: 2215, type: !3327)
!3608 = !DILocation(line: 2215, column: 12, scope: !3588)
!3609 = !DILocation(line: 2217, column: 61, scope: !3588)
!3610 = !DILocation(line: 2217, column: 34, scope: !3588)
!3611 = !DILocation(line: 2217, column: 7, scope: !3588)
!3612 = !DILocation(line: 2217, column: 5, scope: !3588)
!3613 = !DILocation(line: 2218, column: 11, scope: !3588)
!3614 = !DILocation(line: 2218, column: 14, scope: !3588)
!3615 = !DILocation(line: 2218, column: 3, scope: !3588)
!3616 = !DILocation(line: 2221, column: 16, scope: !3617)
!3617 = distinct !DILexicalBlock(scope: !3618, file: !3, line: 2221, column: 7)
!3618 = distinct !DILexicalBlock(scope: !3588, file: !3, line: 2219, column: 5)
!3619 = !DILocation(line: 2221, column: 19, scope: !3617)
!3620 = !DILocation(line: 2221, column: 21, scope: !3617)
!3621 = !DILocation(line: 2221, column: 28, scope: !3617)
!3622 = !DILocation(line: 2221, column: 14, scope: !3617)
!3623 = !DILocation(line: 2221, column: 12, scope: !3617)
!3624 = !DILocation(line: 2221, column: 41, scope: !3625)
!3625 = distinct !DILexicalBlock(scope: !3617, file: !3, line: 2221, column: 7)
!3626 = !DILocation(line: 2221, column: 7, scope: !3617)
!3627 = !DILocation(line: 2223, column: 13, scope: !3628)
!3628 = distinct !DILexicalBlock(scope: !3625, file: !3, line: 2222, column: 2)
!3629 = !DILocation(line: 2223, column: 11, scope: !3628)
!3630 = !DILocation(line: 2224, column: 8, scope: !3631)
!3631 = distinct !DILexicalBlock(scope: !3628, file: !3, line: 2224, column: 8)
!3632 = !DILocation(line: 2224, column: 18, scope: !3631)
!3633 = !DILocation(line: 2224, column: 21, scope: !3631)
!3634 = !DILocation(line: 2224, column: 15, scope: !3631)
!3635 = !DILocation(line: 2224, column: 8, scope: !3628)
!3636 = !DILocation(line: 2226, column: 19, scope: !3637)
!3637 = distinct !DILexicalBlock(scope: !3631, file: !3, line: 2225, column: 6)
!3638 = !DILocation(line: 2226, column: 8, scope: !3637)
!3639 = !DILocation(line: 2226, column: 11, scope: !3637)
!3640 = !DILocation(line: 2226, column: 17, scope: !3637)
!3641 = !DILocation(line: 2227, column: 20, scope: !3637)
!3642 = !DILocation(line: 2228, column: 6, scope: !3637)
!3643 = !DILocation(line: 2229, column: 2, scope: !3628)
!3644 = !DILocation(line: 2221, column: 49, scope: !3625)
!3645 = !DILocation(line: 2221, column: 52, scope: !3625)
!3646 = !DILocation(line: 2221, column: 47, scope: !3625)
!3647 = !DILocation(line: 2221, column: 7, scope: !3625)
!3648 = distinct !{!3648, !3626, !3649}
!3649 = !DILocation(line: 2229, column: 2, scope: !3617)
!3650 = !DILocation(line: 2230, column: 7, scope: !3618)
!3651 = !DILocation(line: 2233, column: 16, scope: !3618)
!3652 = !DILocation(line: 2233, column: 14, scope: !3618)
!3653 = !DILocation(line: 2234, column: 7, scope: !3618)
!3654 = !DILocation(line: 2235, column: 28, scope: !3618)
!3655 = !DILocation(line: 2235, column: 7, scope: !3618)
!3656 = !DILocation(line: 2235, column: 10, scope: !3618)
!3657 = !DILocation(line: 2235, column: 12, scope: !3618)
!3658 = !DILocation(line: 2235, column: 20, scope: !3618)
!3659 = !DILocation(line: 2235, column: 26, scope: !3618)
!3660 = !DILocation(line: 2236, column: 19, scope: !3618)
!3661 = !DILocation(line: 2237, column: 7, scope: !3618)
!3662 = !DILocation(line: 2240, column: 7, scope: !3618)
!3663 = !DILocation(line: 2241, column: 5, scope: !3618)
!3664 = !DILocation(line: 2243, column: 3, scope: !3588)
!3665 = !DILocation(line: 2244, column: 1, scope: !3588)
!3666 = distinct !DISubprogram(name: "operation_could_trap_helper_p", scope: !3, file: !3, line: 2249, type: !3667, scopeLine: 2256, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3667 = !DISubroutineType(types: !3668)
!3668 = !{!1890, !141, !1890, !1890, !1890, !1890, !1777, !3669}
!3669 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1890, size: 64)
!3670 = !DILocalVariable(name: "op", arg: 1, scope: !3666, file: !3, line: 2249, type: !141)
!3671 = !DILocation(line: 2249, column: 47, scope: !3666)
!3672 = !DILocalVariable(name: "fp_operation", arg: 2, scope: !3666, file: !3, line: 2250, type: !1890)
!3673 = !DILocation(line: 2250, column: 16, scope: !3666)
!3674 = !DILocalVariable(name: "honor_trapv", arg: 3, scope: !3666, file: !3, line: 2251, type: !1890)
!3675 = !DILocation(line: 2251, column: 16, scope: !3666)
!3676 = !DILocalVariable(name: "honor_nans", arg: 4, scope: !3666, file: !3, line: 2252, type: !1890)
!3677 = !DILocation(line: 2252, column: 16, scope: !3666)
!3678 = !DILocalVariable(name: "honor_snans", arg: 5, scope: !3666, file: !3, line: 2253, type: !1890)
!3679 = !DILocation(line: 2253, column: 16, scope: !3666)
!3680 = !DILocalVariable(name: "divisor", arg: 6, scope: !3666, file: !3, line: 2254, type: !1777)
!3681 = !DILocation(line: 2254, column: 16, scope: !3666)
!3682 = !DILocalVariable(name: "handled", arg: 7, scope: !3666, file: !3, line: 2255, type: !3669)
!3683 = !DILocation(line: 2255, column: 17, scope: !3666)
!3684 = !DILocation(line: 2257, column: 4, scope: !3666)
!3685 = !DILocation(line: 2257, column: 12, scope: !3666)
!3686 = !DILocation(line: 2258, column: 11, scope: !3666)
!3687 = !DILocation(line: 2258, column: 3, scope: !3666)
!3688 = !DILocation(line: 2270, column: 11, scope: !3689)
!3689 = distinct !DILexicalBlock(scope: !3690, file: !3, line: 2270, column: 11)
!3690 = distinct !DILexicalBlock(scope: !3666, file: !3, line: 2259, column: 5)
!3691 = !DILocation(line: 2270, column: 23, scope: !3689)
!3692 = !DILocation(line: 2270, column: 26, scope: !3689)
!3693 = !DILocation(line: 2270, column: 11, scope: !3690)
!3694 = !DILocation(line: 2271, column: 2, scope: !3689)
!3695 = !DILocation(line: 2272, column: 11, scope: !3696)
!3696 = distinct !DILexicalBlock(scope: !3690, file: !3, line: 2272, column: 11)
!3697 = !DILocation(line: 2272, column: 11, scope: !3690)
!3698 = !DILocation(line: 2273, column: 9, scope: !3696)
!3699 = !DILocation(line: 2273, column: 2, scope: !3696)
!3700 = !DILocation(line: 2274, column: 12, scope: !3701)
!3701 = distinct !DILexicalBlock(scope: !3690, file: !3, line: 2274, column: 11)
!3702 = !DILocation(line: 2274, column: 36, scope: !3701)
!3703 = !DILocation(line: 2274, column: 54, scope: !3701)
!3704 = !DILocation(line: 2274, column: 39, scope: !3701)
!3705 = !DILocation(line: 2274, column: 11, scope: !3690)
!3706 = !DILocation(line: 2275, column: 9, scope: !3701)
!3707 = !DILocation(line: 2276, column: 7, scope: !3690)
!3708 = !DILocation(line: 2284, column: 14, scope: !3690)
!3709 = !DILocation(line: 2284, column: 7, scope: !3690)
!3710 = !DILocation(line: 2295, column: 14, scope: !3690)
!3711 = !DILocation(line: 2295, column: 7, scope: !3690)
!3712 = !DILocation(line: 2300, column: 14, scope: !3690)
!3713 = !DILocation(line: 2300, column: 7, scope: !3690)
!3714 = !DILocation(line: 2306, column: 11, scope: !3715)
!3715 = distinct !DILexicalBlock(scope: !3690, file: !3, line: 2306, column: 11)
!3716 = !DILocation(line: 2306, column: 11, scope: !3690)
!3717 = !DILocation(line: 2307, column: 2, scope: !3715)
!3718 = !DILocation(line: 2308, column: 7, scope: !3690)
!3719 = !DILocation(line: 2314, column: 11, scope: !3720)
!3720 = distinct !DILexicalBlock(scope: !3690, file: !3, line: 2314, column: 11)
!3721 = !DILocation(line: 2314, column: 24, scope: !3720)
!3722 = !DILocation(line: 2314, column: 27, scope: !3720)
!3723 = !DILocation(line: 2314, column: 11, scope: !3690)
!3724 = !DILocation(line: 2315, column: 2, scope: !3720)
!3725 = !DILocation(line: 2316, column: 11, scope: !3726)
!3726 = distinct !DILexicalBlock(scope: !3690, file: !3, line: 2316, column: 11)
!3727 = !DILocation(line: 2316, column: 11, scope: !3690)
!3728 = !DILocation(line: 2317, column: 2, scope: !3726)
!3729 = !DILocation(line: 2318, column: 7, scope: !3690)
!3730 = !DILocation(line: 2322, column: 11, scope: !3731)
!3731 = distinct !DILexicalBlock(scope: !3690, file: !3, line: 2322, column: 11)
!3732 = !DILocation(line: 2322, column: 24, scope: !3731)
!3733 = !DILocation(line: 2322, column: 27, scope: !3731)
!3734 = !DILocation(line: 2322, column: 11, scope: !3690)
!3735 = !DILocation(line: 2323, column: 2, scope: !3731)
!3736 = !DILocation(line: 2325, column: 8, scope: !3690)
!3737 = !DILocation(line: 2325, column: 16, scope: !3690)
!3738 = !DILocation(line: 2326, column: 7, scope: !3690)
!3739 = !DILocation(line: 2328, column: 1, scope: !3666)
!3740 = distinct !DISubprogram(name: "operation_could_trap_p", scope: !3, file: !3, line: 2336, type: !3741, scopeLine: 2338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3741 = !DISubroutineType(types: !3742)
!3742 = !{!1890, !141, !1890, !1890, !1777}
!3743 = !DILocalVariable(name: "op", arg: 1, scope: !3740, file: !3, line: 2336, type: !141)
!3744 = !DILocation(line: 2336, column: 40, scope: !3740)
!3745 = !DILocalVariable(name: "fp_operation", arg: 2, scope: !3740, file: !3, line: 2336, type: !1890)
!3746 = !DILocation(line: 2336, column: 49, scope: !3740)
!3747 = !DILocalVariable(name: "honor_trapv", arg: 3, scope: !3740, file: !3, line: 2336, type: !1890)
!3748 = !DILocation(line: 2336, column: 68, scope: !3740)
!3749 = !DILocalVariable(name: "divisor", arg: 4, scope: !3740, file: !3, line: 2337, type: !1777)
!3750 = !DILocation(line: 2337, column: 9, scope: !3740)
!3751 = !DILocalVariable(name: "honor_nans", scope: !3740, file: !3, line: 2339, type: !1890)
!3752 = !DILocation(line: 2339, column: 8, scope: !3740)
!3753 = !DILocation(line: 2339, column: 22, scope: !3740)
!3754 = !DILocation(line: 2339, column: 35, scope: !3740)
!3755 = !DILocation(line: 2339, column: 38, scope: !3740)
!3756 = !DILocation(line: 2340, column: 8, scope: !3740)
!3757 = !DILocation(line: 2340, column: 12, scope: !3740)
!3758 = !DILocation(line: 2340, column: 11, scope: !3740)
!3759 = !DILocation(line: 0, scope: !3740)
!3760 = !DILocation(line: 2339, column: 21, scope: !3740)
!3761 = !DILocalVariable(name: "honor_snans", scope: !3740, file: !3, line: 2341, type: !1890)
!3762 = !DILocation(line: 2341, column: 8, scope: !3740)
!3763 = !DILocation(line: 2341, column: 22, scope: !3740)
!3764 = !DILocation(line: 2341, column: 35, scope: !3740)
!3765 = !DILocation(line: 2341, column: 38, scope: !3740)
!3766 = !DILocation(line: 2341, column: 58, scope: !3740)
!3767 = !DILocalVariable(name: "handled", scope: !3740, file: !3, line: 2342, type: !1890)
!3768 = !DILocation(line: 2342, column: 8, scope: !3740)
!3769 = !DILocation(line: 2344, column: 7, scope: !3770)
!3770 = distinct !DILexicalBlock(scope: !3740, file: !3, line: 2344, column: 7)
!3771 = !DILocation(line: 2344, column: 28, scope: !3770)
!3772 = !DILocation(line: 2345, column: 7, scope: !3770)
!3773 = !DILocation(line: 2345, column: 10, scope: !3770)
!3774 = !DILocation(line: 2345, column: 31, scope: !3770)
!3775 = !DILocation(line: 2346, column: 7, scope: !3770)
!3776 = !DILocation(line: 2346, column: 10, scope: !3770)
!3777 = !DILocation(line: 2346, column: 31, scope: !3770)
!3778 = !DILocation(line: 2344, column: 7, scope: !3740)
!3779 = !DILocation(line: 2347, column: 5, scope: !3770)
!3780 = !DILocation(line: 2349, column: 41, scope: !3740)
!3781 = !DILocation(line: 2349, column: 45, scope: !3740)
!3782 = !DILocation(line: 2349, column: 59, scope: !3740)
!3783 = !DILocation(line: 2350, column: 6, scope: !3740)
!3784 = !DILocation(line: 2350, column: 18, scope: !3740)
!3785 = !DILocation(line: 2350, column: 31, scope: !3740)
!3786 = !DILocation(line: 2349, column: 10, scope: !3740)
!3787 = !DILocation(line: 2349, column: 3, scope: !3740)
!3788 = !DILocation(line: 2352, column: 1, scope: !3740)
!3789 = distinct !DISubprogram(name: "tree_could_trap_p", scope: !3, file: !3, line: 2359, type: !3790, scopeLine: 2360, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3790 = !DISubroutineType(types: !3791)
!3791 = !{!1890, !1777}
!3792 = !DILocalVariable(name: "expr", arg: 1, scope: !3789, file: !3, line: 2359, type: !1777)
!3793 = !DILocation(line: 2359, column: 25, scope: !3789)
!3794 = !DILocalVariable(name: "code", scope: !3789, file: !3, line: 2361, type: !141)
!3795 = !DILocation(line: 2361, column: 18, scope: !3789)
!3796 = !DILocalVariable(name: "fp_operation", scope: !3789, file: !3, line: 2362, type: !1890)
!3797 = !DILocation(line: 2362, column: 8, scope: !3789)
!3798 = !DILocalVariable(name: "honor_trapv", scope: !3789, file: !3, line: 2363, type: !1890)
!3799 = !DILocation(line: 2363, column: 8, scope: !3789)
!3800 = !DILocalVariable(name: "t", scope: !3789, file: !3, line: 2364, type: !1777)
!3801 = !DILocation(line: 2364, column: 8, scope: !3789)
!3802 = !DILocalVariable(name: "base", scope: !3789, file: !3, line: 2364, type: !1777)
!3803 = !DILocation(line: 2364, column: 11, scope: !3789)
!3804 = !DILocalVariable(name: "div", scope: !3789, file: !3, line: 2364, type: !1777)
!3805 = !DILocation(line: 2364, column: 17, scope: !3789)
!3806 = !DILocation(line: 2366, column: 8, scope: !3807)
!3807 = distinct !DILexicalBlock(scope: !3789, file: !3, line: 2366, column: 7)
!3808 = !DILocation(line: 2366, column: 7, scope: !3789)
!3809 = !DILocation(line: 2367, column: 5, scope: !3807)
!3810 = !DILocation(line: 2369, column: 10, scope: !3789)
!3811 = !DILocation(line: 2369, column: 8, scope: !3789)
!3812 = !DILocation(line: 2370, column: 7, scope: !3789)
!3813 = !DILocation(line: 2370, column: 5, scope: !3789)
!3814 = !DILocation(line: 2372, column: 7, scope: !3815)
!3815 = distinct !DILexicalBlock(scope: !3789, file: !3, line: 2372, column: 7)
!3816 = !DILocation(line: 2372, column: 7, scope: !3789)
!3817 = !DILocation(line: 2374, column: 11, scope: !3818)
!3818 = distinct !DILexicalBlock(scope: !3819, file: !3, line: 2374, column: 11)
!3819 = distinct !DILexicalBlock(scope: !3815, file: !3, line: 2373, column: 5)
!3820 = !DILocation(line: 2374, column: 11, scope: !3819)
!3821 = !DILocation(line: 2375, column: 17, scope: !3818)
!3822 = !DILocation(line: 0, scope: !3818)
!3823 = !DILocation(line: 2375, column: 15, scope: !3818)
!3824 = !DILocation(line: 2375, column: 2, scope: !3818)
!3825 = !DILocation(line: 2377, column: 17, scope: !3818)
!3826 = !DILocation(line: 2377, column: 15, scope: !3818)
!3827 = !DILocation(line: 2378, column: 21, scope: !3819)
!3828 = !DILocation(line: 2378, column: 41, scope: !3819)
!3829 = !DILocation(line: 2378, column: 44, scope: !3819)
!3830 = !DILocation(line: 0, scope: !3819)
!3831 = !DILocation(line: 2378, column: 19, scope: !3819)
!3832 = !DILocation(line: 2379, column: 5, scope: !3819)
!3833 = !DILocation(line: 2381, column: 7, scope: !3834)
!3834 = distinct !DILexicalBlock(scope: !3789, file: !3, line: 2381, column: 7)
!3835 = !DILocation(line: 2381, column: 30, scope: !3834)
!3836 = !DILocation(line: 2381, column: 7, scope: !3789)
!3837 = !DILocation(line: 2382, column: 11, scope: !3834)
!3838 = !DILocation(line: 2382, column: 9, scope: !3834)
!3839 = !DILocation(line: 2382, column: 5, scope: !3834)
!3840 = !DILocation(line: 2383, column: 31, scope: !3841)
!3841 = distinct !DILexicalBlock(scope: !3789, file: !3, line: 2383, column: 7)
!3842 = !DILocation(line: 2383, column: 37, scope: !3841)
!3843 = !DILocation(line: 2383, column: 51, scope: !3841)
!3844 = !DILocation(line: 2383, column: 64, scope: !3841)
!3845 = !DILocation(line: 2383, column: 7, scope: !3841)
!3846 = !DILocation(line: 2383, column: 7, scope: !3789)
!3847 = !DILocation(line: 2384, column: 5, scope: !3841)
!3848 = !DILocation(line: 2383, column: 67, scope: !3841)
!3849 = !DILabel(scope: !3789, name: "restart", file: !3, line: 2386)
!3850 = !DILocation(line: 2386, column: 2, scope: !3789)
!3851 = !DILocation(line: 2387, column: 11, scope: !3789)
!3852 = !DILocation(line: 2387, column: 3, scope: !3789)
!3853 = !DILocation(line: 2392, column: 14, scope: !3854)
!3854 = distinct !DILexicalBlock(scope: !3789, file: !3, line: 2388, column: 5)
!3855 = !DILocation(line: 2392, column: 12, scope: !3854)
!3856 = !DILocation(line: 2393, column: 14, scope: !3854)
!3857 = !DILocation(line: 2393, column: 12, scope: !3854)
!3858 = !DILocation(line: 2394, column: 7, scope: !3854)
!3859 = !DILocation(line: 2402, column: 14, scope: !3854)
!3860 = !DILocation(line: 2402, column: 12, scope: !3854)
!3861 = !DILocation(line: 2403, column: 14, scope: !3854)
!3862 = !DILocation(line: 2403, column: 12, scope: !3854)
!3863 = !DILocation(line: 2404, column: 7, scope: !3854)
!3864 = !DILocation(line: 2407, column: 14, scope: !3854)
!3865 = !DILocation(line: 2407, column: 12, scope: !3854)
!3866 = !DILocation(line: 2408, column: 30, scope: !3867)
!3867 = distinct !DILexicalBlock(scope: !3854, file: !3, line: 2408, column: 11)
!3868 = !DILocation(line: 2408, column: 11, scope: !3867)
!3869 = !DILocation(line: 2408, column: 11, scope: !3854)
!3870 = !DILocation(line: 2409, column: 2, scope: !3867)
!3871 = !DILocation(line: 2410, column: 11, scope: !3872)
!3872 = distinct !DILexicalBlock(scope: !3854, file: !3, line: 2410, column: 11)
!3873 = !DILocation(line: 2410, column: 11, scope: !3854)
!3874 = !DILocation(line: 2411, column: 2, scope: !3872)
!3875 = !DILocation(line: 2412, column: 40, scope: !3854)
!3876 = !DILocation(line: 2412, column: 15, scope: !3854)
!3877 = !DILocation(line: 2412, column: 14, scope: !3854)
!3878 = !DILocation(line: 2412, column: 7, scope: !3854)
!3879 = !DILocation(line: 2415, column: 14, scope: !3854)
!3880 = !DILocation(line: 2415, column: 12, scope: !3854)
!3881 = !DILocation(line: 2416, column: 30, scope: !3882)
!3882 = distinct !DILexicalBlock(scope: !3854, file: !3, line: 2416, column: 11)
!3883 = !DILocation(line: 2416, column: 11, scope: !3882)
!3884 = !DILocation(line: 2416, column: 11, scope: !3854)
!3885 = !DILocation(line: 2417, column: 2, scope: !3882)
!3886 = !DILocation(line: 2418, column: 11, scope: !3887)
!3887 = distinct !DILexicalBlock(scope: !3854, file: !3, line: 2418, column: 11)
!3888 = !DILocation(line: 2418, column: 11, scope: !3854)
!3889 = !DILocation(line: 2419, column: 2, scope: !3887)
!3890 = !DILocation(line: 2420, column: 34, scope: !3854)
!3891 = !DILocation(line: 2420, column: 15, scope: !3854)
!3892 = !DILocation(line: 2420, column: 14, scope: !3854)
!3893 = !DILocation(line: 2420, column: 7, scope: !3854)
!3894 = !DILocation(line: 2425, column: 15, scope: !3854)
!3895 = !DILocation(line: 2425, column: 14, scope: !3854)
!3896 = !DILocation(line: 2425, column: 7, scope: !3854)
!3897 = !DILocation(line: 2428, column: 14, scope: !3854)
!3898 = !DILocation(line: 2428, column: 7, scope: !3854)
!3899 = !DILocation(line: 2431, column: 30, scope: !3854)
!3900 = !DILocation(line: 2431, column: 11, scope: !3854)
!3901 = !DILocation(line: 2431, column: 9, scope: !3854)
!3902 = !DILocation(line: 2433, column: 12, scope: !3903)
!3903 = distinct !DILexicalBlock(scope: !3854, file: !3, line: 2433, column: 11)
!3904 = !DILocation(line: 2433, column: 14, scope: !3903)
!3905 = !DILocation(line: 2433, column: 18, scope: !3903)
!3906 = !DILocation(line: 2433, column: 29, scope: !3903)
!3907 = !DILocation(line: 2433, column: 32, scope: !3903)
!3908 = !DILocation(line: 2433, column: 11, scope: !3854)
!3909 = !DILocation(line: 2434, column: 2, scope: !3903)
!3910 = !DILocation(line: 2435, column: 7, scope: !3854)
!3911 = !DILocation(line: 2438, column: 7, scope: !3854)
!3912 = !DILocation(line: 2440, column: 1, scope: !3789)
!3913 = distinct !DISubprogram(name: "stmt_could_throw_p", scope: !3, file: !3, line: 2494, type: !3223, scopeLine: 2495, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3914 = !DILocalVariable(name: "stmt", arg: 1, scope: !3913, file: !3, line: 2494, type: !1589)
!3915 = !DILocation(line: 2494, column: 28, scope: !3913)
!3916 = !DILocation(line: 2496, column: 8, scope: !3917)
!3917 = distinct !DILexicalBlock(scope: !3913, file: !3, line: 2496, column: 7)
!3918 = !DILocation(line: 2496, column: 7, scope: !3913)
!3919 = !DILocation(line: 2497, column: 5, scope: !3917)
!3920 = !DILocation(line: 2501, column: 24, scope: !3913)
!3921 = !DILocation(line: 2501, column: 11, scope: !3913)
!3922 = !DILocation(line: 2501, column: 3, scope: !3913)
!3923 = !DILocation(line: 2504, column: 7, scope: !3924)
!3924 = distinct !DILexicalBlock(scope: !3913, file: !3, line: 2502, column: 5)
!3925 = !DILocation(line: 2507, column: 38, scope: !3924)
!3926 = !DILocation(line: 2507, column: 15, scope: !3924)
!3927 = !DILocation(line: 2507, column: 14, scope: !3924)
!3928 = !DILocation(line: 2507, column: 7, scope: !3924)
!3929 = !DILocation(line: 2511, column: 12, scope: !3930)
!3930 = distinct !DILexicalBlock(scope: !3924, file: !3, line: 2511, column: 11)
!3931 = !DILocation(line: 2511, column: 11, scope: !3924)
!3932 = !DILocation(line: 2512, column: 9, scope: !3930)
!3933 = !DILocation(line: 2513, column: 36, scope: !3924)
!3934 = !DILocation(line: 2513, column: 14, scope: !3924)
!3935 = !DILocation(line: 2513, column: 7, scope: !3924)
!3936 = !DILocation(line: 2516, column: 12, scope: !3937)
!3937 = distinct !DILexicalBlock(scope: !3924, file: !3, line: 2516, column: 11)
!3938 = !DILocation(line: 2516, column: 11, scope: !3924)
!3939 = !DILocation(line: 2517, column: 9, scope: !3937)
!3940 = !DILocation(line: 2518, column: 37, scope: !3924)
!3941 = !DILocation(line: 2518, column: 14, scope: !3924)
!3942 = !DILocation(line: 2518, column: 7, scope: !3924)
!3943 = !DILocation(line: 2521, column: 7, scope: !3924)
!3944 = !DILocation(line: 2523, column: 1, scope: !3913)
!3945 = distinct !DISubprogram(name: "gimple_code", scope: !591, file: !591, line: 1052, type: !3946, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3946 = !DISubroutineType(types: !3947)
!3947 = !{!597, !3387}
!3948 = !DILocalVariable(name: "g", arg: 1, scope: !3945, file: !591, line: 1052, type: !3387)
!3949 = !DILocation(line: 1052, column: 27, scope: !3945)
!3950 = !DILocation(line: 1054, column: 10, scope: !3945)
!3951 = !DILocation(line: 1054, column: 13, scope: !3945)
!3952 = !DILocation(line: 1054, column: 20, scope: !3945)
!3953 = !DILocation(line: 1054, column: 3, scope: !3945)
!3954 = distinct !DISubprogram(name: "gimple_call_nothrow_p", scope: !591, file: !591, line: 2188, type: !3223, scopeLine: 2189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3955 = !DILocalVariable(name: "s", arg: 1, scope: !3954, file: !591, line: 2188, type: !1589)
!3956 = !DILocation(line: 2188, column: 31, scope: !3954)
!3957 = !DILocation(line: 2191, column: 30, scope: !3954)
!3958 = !DILocation(line: 2191, column: 11, scope: !3954)
!3959 = !DILocation(line: 2191, column: 33, scope: !3954)
!3960 = !DILocation(line: 2191, column: 48, scope: !3954)
!3961 = !DILocation(line: 2191, column: 10, scope: !3954)
!3962 = !DILocation(line: 2191, column: 3, scope: !3954)
!3963 = distinct !DISubprogram(name: "stmt_could_throw_1_p", scope: !3, file: !3, line: 2447, type: !3223, scopeLine: 2448, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!3964 = !DILocalVariable(name: "stmt", arg: 1, scope: !3963, file: !3, line: 2447, type: !1589)
!3965 = !DILocation(line: 2447, column: 30, scope: !3963)
!3966 = !DILocalVariable(name: "code", scope: !3963, file: !3, line: 2449, type: !141)
!3967 = !DILocation(line: 2449, column: 18, scope: !3963)
!3968 = !DILocation(line: 2449, column: 43, scope: !3963)
!3969 = !DILocation(line: 2449, column: 25, scope: !3963)
!3970 = !DILocalVariable(name: "honor_nans", scope: !3963, file: !3, line: 2450, type: !1890)
!3971 = !DILocation(line: 2450, column: 8, scope: !3963)
!3972 = !DILocalVariable(name: "honor_snans", scope: !3963, file: !3, line: 2451, type: !1890)
!3973 = !DILocation(line: 2451, column: 8, scope: !3963)
!3974 = !DILocalVariable(name: "fp_operation", scope: !3963, file: !3, line: 2452, type: !1890)
!3975 = !DILocation(line: 2452, column: 8, scope: !3963)
!3976 = !DILocalVariable(name: "honor_trapv", scope: !3963, file: !3, line: 2453, type: !1890)
!3977 = !DILocation(line: 2453, column: 8, scope: !3963)
!3978 = !DILocalVariable(name: "t", scope: !3963, file: !3, line: 2454, type: !1777)
!3979 = !DILocation(line: 2454, column: 8, scope: !3963)
!3980 = !DILocalVariable(name: "i", scope: !3963, file: !3, line: 2455, type: !2138)
!3981 = !DILocation(line: 2455, column: 10, scope: !3963)
!3982 = !DILocalVariable(name: "handled", scope: !3963, file: !3, line: 2456, type: !1890)
!3983 = !DILocation(line: 2456, column: 8, scope: !3963)
!3984 = !DILocalVariable(name: "ret", scope: !3963, file: !3, line: 2456, type: !1890)
!3985 = !DILocation(line: 2456, column: 17, scope: !3963)
!3986 = !DILocation(line: 2458, column: 7, scope: !3987)
!3987 = distinct !DILexicalBlock(scope: !3963, file: !3, line: 2458, column: 7)
!3988 = !DILocation(line: 2458, column: 30, scope: !3987)
!3989 = !DILocation(line: 2459, column: 7, scope: !3987)
!3990 = !DILocation(line: 2459, column: 10, scope: !3987)
!3991 = !DILocation(line: 2459, column: 33, scope: !3987)
!3992 = !DILocation(line: 2460, column: 7, scope: !3987)
!3993 = !DILocation(line: 2460, column: 10, scope: !3987)
!3994 = !DILocation(line: 2460, column: 33, scope: !3987)
!3995 = !DILocation(line: 2458, column: 7, scope: !3963)
!3996 = !DILocation(line: 2462, column: 29, scope: !3997)
!3997 = distinct !DILexicalBlock(scope: !3987, file: !3, line: 2461, column: 5)
!3998 = !DILocation(line: 2462, column: 11, scope: !3997)
!3999 = !DILocation(line: 2462, column: 9, scope: !3997)
!4000 = !DILocation(line: 2463, column: 22, scope: !3997)
!4001 = !DILocation(line: 0, scope: !3997)
!4002 = !DILocation(line: 2463, column: 20, scope: !3997)
!4003 = !DILocation(line: 2464, column: 11, scope: !4004)
!4004 = distinct !DILexicalBlock(scope: !3997, file: !3, line: 2464, column: 11)
!4005 = !DILocation(line: 2464, column: 11, scope: !3997)
!4006 = !DILocation(line: 2466, column: 17, scope: !4007)
!4007 = distinct !DILexicalBlock(scope: !4004, file: !3, line: 2465, column: 2)
!4008 = !DILocation(line: 2466, column: 36, scope: !4007)
!4009 = !DILocation(line: 2466, column: 40, scope: !4007)
!4010 = !DILocation(line: 2466, column: 39, scope: !4007)
!4011 = !DILocation(line: 0, scope: !4007)
!4012 = !DILocation(line: 2466, column: 15, scope: !4007)
!4013 = !DILocation(line: 2467, column: 18, scope: !4007)
!4014 = !DILocation(line: 2467, column: 38, scope: !4007)
!4015 = !DILocation(line: 2467, column: 16, scope: !4007)
!4016 = !DILocation(line: 2468, column: 2, scope: !4007)
!4017 = !DILocation(line: 2469, column: 16, scope: !4018)
!4018 = distinct !DILexicalBlock(scope: !4004, file: !3, line: 2469, column: 16)
!4019 = !DILocation(line: 2469, column: 36, scope: !4018)
!4020 = !DILocation(line: 2469, column: 39, scope: !4018)
!4021 = !DILocation(line: 2469, column: 16, scope: !4004)
!4022 = !DILocation(line: 2470, column: 14, scope: !4018)
!4023 = !DILocation(line: 2470, column: 2, scope: !4018)
!4024 = !DILocation(line: 2471, column: 5, scope: !3997)
!4025 = !DILocation(line: 2474, column: 25, scope: !3963)
!4026 = !DILocation(line: 2474, column: 7, scope: !3963)
!4027 = !DILocation(line: 2474, column: 53, scope: !3963)
!4028 = !DILocation(line: 2474, column: 33, scope: !3963)
!4029 = !DILocation(line: 2474, column: 5, scope: !3963)
!4030 = !DILocation(line: 2475, column: 40, scope: !3963)
!4031 = !DILocation(line: 2475, column: 46, scope: !3963)
!4032 = !DILocation(line: 2475, column: 60, scope: !3963)
!4033 = !DILocation(line: 2476, column: 12, scope: !3963)
!4034 = !DILocation(line: 2476, column: 24, scope: !3963)
!4035 = !DILocation(line: 2476, column: 37, scope: !3963)
!4036 = !DILocation(line: 2475, column: 9, scope: !3963)
!4037 = !DILocation(line: 2475, column: 7, scope: !3963)
!4038 = !DILocation(line: 2478, column: 7, scope: !4039)
!4039 = distinct !DILexicalBlock(scope: !3963, file: !3, line: 2478, column: 7)
!4040 = !DILocation(line: 2478, column: 7, scope: !3963)
!4041 = !DILocation(line: 2479, column: 12, scope: !4039)
!4042 = !DILocation(line: 2479, column: 5, scope: !4039)
!4043 = !DILocation(line: 2483, column: 10, scope: !4044)
!4044 = distinct !DILexicalBlock(scope: !3963, file: !3, line: 2483, column: 3)
!4045 = !DILocation(line: 2483, column: 8, scope: !4044)
!4046 = !DILocation(line: 2483, column: 15, scope: !4047)
!4047 = distinct !DILexicalBlock(scope: !4044, file: !3, line: 2483, column: 3)
!4048 = !DILocation(line: 2483, column: 35, scope: !4047)
!4049 = !DILocation(line: 2483, column: 19, scope: !4047)
!4050 = !DILocation(line: 2483, column: 17, scope: !4047)
!4051 = !DILocation(line: 2483, column: 3, scope: !4044)
!4052 = !DILocation(line: 2484, column: 39, scope: !4053)
!4053 = distinct !DILexicalBlock(scope: !4047, file: !3, line: 2484, column: 9)
!4054 = !DILocation(line: 2484, column: 45, scope: !4053)
!4055 = !DILocation(line: 2484, column: 28, scope: !4053)
!4056 = !DILocation(line: 2484, column: 9, scope: !4053)
!4057 = !DILocation(line: 2484, column: 9, scope: !4047)
!4058 = !DILocation(line: 2485, column: 7, scope: !4053)
!4059 = !DILocation(line: 2484, column: 47, scope: !4053)
!4060 = !DILocation(line: 2483, column: 43, scope: !4047)
!4061 = !DILocation(line: 2483, column: 3, scope: !4047)
!4062 = distinct !{!4062, !4051, !4063}
!4063 = !DILocation(line: 2485, column: 14, scope: !4044)
!4064 = !DILocation(line: 2487, column: 3, scope: !3963)
!4065 = !DILocation(line: 2488, column: 1, scope: !3963)
!4066 = distinct !DISubprogram(name: "gimple_asm_volatile_p", scope: !591, file: !591, line: 2739, type: !4067, scopeLine: 2740, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4067 = !DISubroutineType(types: !4068)
!4068 = !{!1890, !3387}
!4069 = !DILocalVariable(name: "gs", arg: 1, scope: !4066, file: !591, line: 2739, type: !3387)
!4070 = !DILocation(line: 2739, column: 37, scope: !4066)
!4071 = !DILocation(line: 2742, column: 11, scope: !4066)
!4072 = !DILocation(line: 2742, column: 15, scope: !4066)
!4073 = !DILocation(line: 2742, column: 22, scope: !4066)
!4074 = !DILocation(line: 2742, column: 30, scope: !4066)
!4075 = !DILocation(line: 2742, column: 49, scope: !4066)
!4076 = !DILocation(line: 2742, column: 10, scope: !4066)
!4077 = !DILocation(line: 2742, column: 3, scope: !4066)
!4078 = distinct !DISubprogram(name: "tree_could_throw_p", scope: !3, file: !3, line: 2529, type: !3790, scopeLine: 2530, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4079 = !DILocalVariable(name: "t", arg: 1, scope: !4078, file: !3, line: 2529, type: !1777)
!4080 = !DILocation(line: 2529, column: 26, scope: !4078)
!4081 = !DILocation(line: 2531, column: 8, scope: !4082)
!4082 = distinct !DILexicalBlock(scope: !4078, file: !3, line: 2531, column: 7)
!4083 = !DILocation(line: 2531, column: 7, scope: !4078)
!4084 = !DILocation(line: 2532, column: 5, scope: !4082)
!4085 = !DILocation(line: 2533, column: 7, scope: !4086)
!4086 = distinct !DILexicalBlock(scope: !4078, file: !3, line: 2533, column: 7)
!4087 = !DILocation(line: 2533, column: 21, scope: !4086)
!4088 = !DILocation(line: 2533, column: 7, scope: !4078)
!4089 = !DILocation(line: 2535, column: 11, scope: !4090)
!4090 = distinct !DILexicalBlock(scope: !4091, file: !3, line: 2535, column: 11)
!4091 = distinct !DILexicalBlock(scope: !4086, file: !3, line: 2534, column: 5)
!4092 = !DILocation(line: 2536, column: 11, scope: !4090)
!4093 = !DILocation(line: 2536, column: 33, scope: !4090)
!4094 = !DILocation(line: 2536, column: 14, scope: !4090)
!4095 = !DILocation(line: 2535, column: 11, scope: !4091)
!4096 = !DILocation(line: 2537, column: 9, scope: !4090)
!4097 = !DILocation(line: 2538, column: 11, scope: !4091)
!4098 = !DILocation(line: 2538, column: 9, scope: !4091)
!4099 = !DILocation(line: 2539, column: 5, scope: !4091)
!4100 = !DILocation(line: 2541, column: 7, scope: !4101)
!4101 = distinct !DILexicalBlock(scope: !4078, file: !3, line: 2541, column: 7)
!4102 = !DILocation(line: 2541, column: 21, scope: !4101)
!4103 = !DILocation(line: 2541, column: 7, scope: !4078)
!4104 = !DILocation(line: 2542, column: 9, scope: !4101)
!4105 = !DILocation(line: 2542, column: 7, scope: !4101)
!4106 = !DILocation(line: 2542, column: 5, scope: !4101)
!4107 = !DILocation(line: 2543, column: 7, scope: !4108)
!4108 = distinct !DILexicalBlock(scope: !4078, file: !3, line: 2543, column: 7)
!4109 = !DILocation(line: 2543, column: 21, scope: !4108)
!4110 = !DILocation(line: 2543, column: 7, scope: !4078)
!4111 = !DILocation(line: 2544, column: 30, scope: !4108)
!4112 = !DILocation(line: 2544, column: 13, scope: !4108)
!4113 = !DILocation(line: 2544, column: 33, scope: !4108)
!4114 = !DILocation(line: 2544, column: 48, scope: !4108)
!4115 = !DILocation(line: 2544, column: 12, scope: !4108)
!4116 = !DILocation(line: 2544, column: 5, scope: !4108)
!4117 = !DILocation(line: 2545, column: 7, scope: !4118)
!4118 = distinct !DILexicalBlock(scope: !4078, file: !3, line: 2545, column: 7)
!4119 = !DILocation(line: 2545, column: 7, scope: !4078)
!4120 = !DILocation(line: 2546, column: 31, scope: !4118)
!4121 = !DILocation(line: 2546, column: 12, scope: !4118)
!4122 = !DILocation(line: 2546, column: 5, scope: !4118)
!4123 = !DILocation(line: 2547, column: 3, scope: !4078)
!4124 = !DILocation(line: 2548, column: 1, scope: !4078)
!4125 = distinct !DISubprogram(name: "stmt_can_throw_external", scope: !3, file: !3, line: 2554, type: !3223, scopeLine: 2555, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4126 = !DILocalVariable(name: "stmt", arg: 1, scope: !4125, file: !3, line: 2554, type: !1589)
!4127 = !DILocation(line: 2554, column: 33, scope: !4125)
!4128 = !DILocalVariable(name: "lp_nr", scope: !4125, file: !3, line: 2556, type: !1679)
!4129 = !DILocation(line: 2556, column: 7, scope: !4125)
!4130 = !DILocation(line: 2558, column: 28, scope: !4131)
!4131 = distinct !DILexicalBlock(scope: !4125, file: !3, line: 2558, column: 7)
!4132 = !DILocation(line: 2558, column: 8, scope: !4131)
!4133 = !DILocation(line: 2558, column: 7, scope: !4125)
!4134 = !DILocation(line: 2559, column: 5, scope: !4131)
!4135 = !DILocation(line: 2561, column: 30, scope: !4125)
!4136 = !DILocation(line: 2561, column: 11, scope: !4125)
!4137 = !DILocation(line: 2561, column: 9, scope: !4125)
!4138 = !DILocation(line: 2562, column: 10, scope: !4125)
!4139 = !DILocation(line: 2562, column: 16, scope: !4125)
!4140 = !DILocation(line: 2562, column: 3, scope: !4125)
!4141 = !DILocation(line: 2563, column: 1, scope: !4125)
!4142 = distinct !DISubprogram(name: "stmt_can_throw_internal", scope: !3, file: !3, line: 2569, type: !3223, scopeLine: 2570, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4143 = !DILocalVariable(name: "stmt", arg: 1, scope: !4142, file: !3, line: 2569, type: !1589)
!4144 = !DILocation(line: 2569, column: 33, scope: !4142)
!4145 = !DILocalVariable(name: "lp_nr", scope: !4142, file: !3, line: 2571, type: !1679)
!4146 = !DILocation(line: 2571, column: 7, scope: !4142)
!4147 = !DILocation(line: 2573, column: 28, scope: !4148)
!4148 = distinct !DILexicalBlock(scope: !4142, file: !3, line: 2573, column: 7)
!4149 = !DILocation(line: 2573, column: 8, scope: !4148)
!4150 = !DILocation(line: 2573, column: 7, scope: !4142)
!4151 = !DILocation(line: 2574, column: 5, scope: !4148)
!4152 = !DILocation(line: 2576, column: 30, scope: !4142)
!4153 = !DILocation(line: 2576, column: 11, scope: !4142)
!4154 = !DILocation(line: 2576, column: 9, scope: !4142)
!4155 = !DILocation(line: 2577, column: 10, scope: !4142)
!4156 = !DILocation(line: 2577, column: 16, scope: !4142)
!4157 = !DILocation(line: 2577, column: 3, scope: !4142)
!4158 = !DILocation(line: 2578, column: 1, scope: !4142)
!4159 = distinct !DISubprogram(name: "maybe_clean_eh_stmt_fn", scope: !3, file: !3, line: 2585, type: !3188, scopeLine: 2586, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4160 = !DILocalVariable(name: "ifun", arg: 1, scope: !4159, file: !3, line: 2585, type: !2028)
!4161 = !DILocation(line: 2585, column: 42, scope: !4159)
!4162 = !DILocalVariable(name: "stmt", arg: 2, scope: !4159, file: !3, line: 2585, type: !1589)
!4163 = !DILocation(line: 2585, column: 55, scope: !4159)
!4164 = !DILocation(line: 2587, column: 27, scope: !4165)
!4165 = distinct !DILexicalBlock(scope: !4159, file: !3, line: 2587, column: 7)
!4166 = !DILocation(line: 2587, column: 7, scope: !4165)
!4167 = !DILocation(line: 2587, column: 7, scope: !4159)
!4168 = !DILocation(line: 2588, column: 5, scope: !4165)
!4169 = !DILocation(line: 2589, column: 37, scope: !4159)
!4170 = !DILocation(line: 2589, column: 43, scope: !4159)
!4171 = !DILocation(line: 2589, column: 10, scope: !4159)
!4172 = !DILocation(line: 2589, column: 3, scope: !4159)
!4173 = !DILocation(line: 2590, column: 1, scope: !4159)
!4174 = distinct !DISubprogram(name: "maybe_clean_eh_stmt", scope: !3, file: !3, line: 2595, type: !3223, scopeLine: 2596, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4175 = !DILocalVariable(name: "stmt", arg: 1, scope: !4174, file: !3, line: 2595, type: !1589)
!4176 = !DILocation(line: 2595, column: 29, scope: !4174)
!4177 = !DILocation(line: 2597, column: 34, scope: !4174)
!4178 = !DILocation(line: 2597, column: 40, scope: !4174)
!4179 = !DILocation(line: 2597, column: 10, scope: !4174)
!4180 = !DILocation(line: 2597, column: 3, scope: !4174)
!4181 = distinct !DISubprogram(name: "maybe_clean_or_replace_eh_stmt", scope: !3, file: !3, line: 2606, type: !4182, scopeLine: 2607, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4182 = !DISubroutineType(types: !4183)
!4183 = !{!1890, !1589, !1589}
!4184 = !DILocalVariable(name: "old_stmt", arg: 1, scope: !4181, file: !3, line: 2606, type: !1589)
!4185 = !DILocation(line: 2606, column: 40, scope: !4181)
!4186 = !DILocalVariable(name: "new_stmt", arg: 2, scope: !4181, file: !3, line: 2606, type: !1589)
!4187 = !DILocation(line: 2606, column: 57, scope: !4181)
!4188 = !DILocalVariable(name: "lp_nr", scope: !4181, file: !3, line: 2608, type: !1679)
!4189 = !DILocation(line: 2608, column: 7, scope: !4181)
!4190 = !DILocation(line: 2608, column: 34, scope: !4181)
!4191 = !DILocation(line: 2608, column: 15, scope: !4181)
!4192 = !DILocation(line: 2610, column: 7, scope: !4193)
!4193 = distinct !DILexicalBlock(scope: !4181, file: !3, line: 2610, column: 7)
!4194 = !DILocation(line: 2610, column: 13, scope: !4193)
!4195 = !DILocation(line: 2610, column: 7, scope: !4181)
!4196 = !DILocalVariable(name: "new_stmt_could_throw", scope: !4197, file: !3, line: 2612, type: !1890)
!4197 = distinct !DILexicalBlock(scope: !4193, file: !3, line: 2611, column: 5)
!4198 = !DILocation(line: 2612, column: 12, scope: !4197)
!4199 = !DILocation(line: 2612, column: 55, scope: !4197)
!4200 = !DILocation(line: 2612, column: 35, scope: !4197)
!4201 = !DILocation(line: 2614, column: 11, scope: !4202)
!4202 = distinct !DILexicalBlock(scope: !4197, file: !3, line: 2614, column: 11)
!4203 = !DILocation(line: 2614, column: 23, scope: !4202)
!4204 = !DILocation(line: 2614, column: 20, scope: !4202)
!4205 = !DILocation(line: 2614, column: 32, scope: !4202)
!4206 = !DILocation(line: 2614, column: 35, scope: !4202)
!4207 = !DILocation(line: 2614, column: 11, scope: !4197)
!4208 = !DILocation(line: 2615, column: 2, scope: !4202)
!4209 = !DILocation(line: 2617, column: 31, scope: !4197)
!4210 = !DILocation(line: 2617, column: 7, scope: !4197)
!4211 = !DILocation(line: 2618, column: 11, scope: !4212)
!4212 = distinct !DILexicalBlock(scope: !4197, file: !3, line: 2618, column: 11)
!4213 = !DILocation(line: 2618, column: 11, scope: !4197)
!4214 = !DILocation(line: 2620, column: 23, scope: !4215)
!4215 = distinct !DILexicalBlock(scope: !4212, file: !3, line: 2619, column: 2)
!4216 = !DILocation(line: 2620, column: 33, scope: !4215)
!4217 = !DILocation(line: 2620, column: 4, scope: !4215)
!4218 = !DILocation(line: 2621, column: 4, scope: !4215)
!4219 = !DILocation(line: 2624, column: 2, scope: !4212)
!4220 = !DILocation(line: 2627, column: 3, scope: !4181)
!4221 = !DILocation(line: 2628, column: 1, scope: !4181)
!4222 = distinct !DISubprogram(name: "maybe_duplicate_eh_stmt_fn", scope: !3, file: !3, line: 2635, type: !4223, scopeLine: 2638, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4223 = !DISubroutineType(types: !4224)
!4224 = !{!1890, !2028, !1589, !2028, !1589, !2261, !1679}
!4225 = !DILocalVariable(name: "new_fun", arg: 1, scope: !4222, file: !3, line: 2635, type: !2028)
!4226 = !DILocation(line: 2635, column: 46, scope: !4222)
!4227 = !DILocalVariable(name: "new_stmt", arg: 2, scope: !4222, file: !3, line: 2635, type: !1589)
!4228 = !DILocation(line: 2635, column: 62, scope: !4222)
!4229 = !DILocalVariable(name: "old_fun", arg: 3, scope: !4222, file: !3, line: 2636, type: !2028)
!4230 = !DILocation(line: 2636, column: 25, scope: !4222)
!4231 = !DILocalVariable(name: "old_stmt", arg: 4, scope: !4222, file: !3, line: 2636, type: !1589)
!4232 = !DILocation(line: 2636, column: 41, scope: !4222)
!4233 = !DILocalVariable(name: "map", arg: 5, scope: !4222, file: !3, line: 2637, type: !2261)
!4234 = !DILocation(line: 2637, column: 30, scope: !4222)
!4235 = !DILocalVariable(name: "default_lp_nr", arg: 6, scope: !4222, file: !3, line: 2637, type: !1679)
!4236 = !DILocation(line: 2637, column: 39, scope: !4222)
!4237 = !DILocalVariable(name: "old_lp_nr", scope: !4222, file: !3, line: 2639, type: !1679)
!4238 = !DILocation(line: 2639, column: 7, scope: !4222)
!4239 = !DILocalVariable(name: "new_lp_nr", scope: !4222, file: !3, line: 2639, type: !1679)
!4240 = !DILocation(line: 2639, column: 18, scope: !4222)
!4241 = !DILocalVariable(name: "slot", scope: !4222, file: !3, line: 2640, type: !2136)
!4242 = !DILocation(line: 2640, column: 10, scope: !4222)
!4243 = !DILocation(line: 2642, column: 28, scope: !4244)
!4244 = distinct !DILexicalBlock(scope: !4222, file: !3, line: 2642, column: 7)
!4245 = !DILocation(line: 2642, column: 8, scope: !4244)
!4246 = !DILocation(line: 2642, column: 7, scope: !4222)
!4247 = !DILocation(line: 2643, column: 5, scope: !4244)
!4248 = !DILocation(line: 2645, column: 37, scope: !4222)
!4249 = !DILocation(line: 2645, column: 46, scope: !4222)
!4250 = !DILocation(line: 2645, column: 15, scope: !4222)
!4251 = !DILocation(line: 2645, column: 13, scope: !4222)
!4252 = !DILocation(line: 2646, column: 7, scope: !4253)
!4253 = distinct !DILexicalBlock(scope: !4222, file: !3, line: 2646, column: 7)
!4254 = !DILocation(line: 2646, column: 17, scope: !4253)
!4255 = !DILocation(line: 2646, column: 7, scope: !4222)
!4256 = !DILocation(line: 2648, column: 11, scope: !4257)
!4257 = distinct !DILexicalBlock(scope: !4258, file: !3, line: 2648, column: 11)
!4258 = distinct !DILexicalBlock(scope: !4253, file: !3, line: 2647, column: 5)
!4259 = !DILocation(line: 2648, column: 25, scope: !4257)
!4260 = !DILocation(line: 2648, column: 11, scope: !4258)
!4261 = !DILocation(line: 2649, column: 2, scope: !4257)
!4262 = !DILocation(line: 2650, column: 19, scope: !4258)
!4263 = !DILocation(line: 2650, column: 17, scope: !4258)
!4264 = !DILocation(line: 2651, column: 5, scope: !4258)
!4265 = !DILocation(line: 2652, column: 12, scope: !4266)
!4266 = distinct !DILexicalBlock(scope: !4253, file: !3, line: 2652, column: 12)
!4267 = !DILocation(line: 2652, column: 22, scope: !4266)
!4268 = !DILocation(line: 2652, column: 12, scope: !4253)
!4269 = !DILocalVariable(name: "old_lp", scope: !4270, file: !3, line: 2654, type: !2111)
!4270 = distinct !DILexicalBlock(scope: !4266, file: !3, line: 2653, column: 5)
!4271 = !DILocation(line: 2654, column: 22, scope: !4270)
!4272 = !DILocalVariable(name: "new_lp", scope: !4270, file: !3, line: 2654, type: !2111)
!4273 = !DILocation(line: 2654, column: 30, scope: !4270)
!4274 = !DILocation(line: 2656, column: 16, scope: !4270)
!4275 = !DILocation(line: 2656, column: 14, scope: !4270)
!4276 = !DILocation(line: 2657, column: 36, scope: !4270)
!4277 = !DILocation(line: 2657, column: 41, scope: !4270)
!4278 = !DILocation(line: 2657, column: 14, scope: !4270)
!4279 = !DILocation(line: 2657, column: 12, scope: !4270)
!4280 = !DILocation(line: 2658, column: 34, scope: !4270)
!4281 = !DILocation(line: 2658, column: 33, scope: !4270)
!4282 = !DILocation(line: 2658, column: 16, scope: !4270)
!4283 = !DILocation(line: 2658, column: 14, scope: !4270)
!4284 = !DILocation(line: 2659, column: 19, scope: !4270)
!4285 = !DILocation(line: 2659, column: 27, scope: !4270)
!4286 = !DILocation(line: 2659, column: 17, scope: !4270)
!4287 = !DILocation(line: 2660, column: 5, scope: !4270)
!4288 = !DILocalVariable(name: "old_r", scope: !4289, file: !3, line: 2663, type: !2037)
!4289 = distinct !DILexicalBlock(scope: !4266, file: !3, line: 2662, column: 5)
!4290 = !DILocation(line: 2663, column: 17, scope: !4289)
!4291 = !DILocalVariable(name: "new_r", scope: !4289, file: !3, line: 2663, type: !2037)
!4292 = !DILocation(line: 2663, column: 24, scope: !4289)
!4293 = !DILocation(line: 2665, column: 15, scope: !4289)
!4294 = !DILocation(line: 2665, column: 13, scope: !4289)
!4295 = !DILocation(line: 2666, column: 36, scope: !4289)
!4296 = !DILocation(line: 2666, column: 41, scope: !4289)
!4297 = !DILocation(line: 2666, column: 14, scope: !4289)
!4298 = !DILocation(line: 2666, column: 12, scope: !4289)
!4299 = !DILocation(line: 2667, column: 28, scope: !4289)
!4300 = !DILocation(line: 2667, column: 27, scope: !4289)
!4301 = !DILocation(line: 2667, column: 15, scope: !4289)
!4302 = !DILocation(line: 2667, column: 13, scope: !4289)
!4303 = !DILocation(line: 2668, column: 20, scope: !4289)
!4304 = !DILocation(line: 2668, column: 27, scope: !4289)
!4305 = !DILocation(line: 2668, column: 19, scope: !4289)
!4306 = !DILocation(line: 2668, column: 17, scope: !4289)
!4307 = !DILocation(line: 2671, column: 25, scope: !4222)
!4308 = !DILocation(line: 2671, column: 34, scope: !4222)
!4309 = !DILocation(line: 2671, column: 44, scope: !4222)
!4310 = !DILocation(line: 2671, column: 3, scope: !4222)
!4311 = !DILocation(line: 2672, column: 3, scope: !4222)
!4312 = !DILocation(line: 2673, column: 1, scope: !4222)
!4313 = distinct !DISubprogram(name: "VEC_eh_landing_pad_base_index", scope: !6, file: !6, line: 188, type: !4314, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4314 = !DISubroutineType(types: !4315)
!4315 = !{!2111, !4316, !7}
!4316 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4317, size: 64)
!4317 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2104)
!4318 = !DILocalVariable(name: "vec_", arg: 1, scope: !4313, file: !6, line: 188, type: !4316)
!4319 = !DILocation(line: 188, column: 1, scope: !4313)
!4320 = !DILocalVariable(name: "ix_", arg: 2, scope: !4313, file: !6, line: 188, type: !7)
!4321 = !DILocation(line: 0, scope: !4313)
!4322 = distinct !DISubprogram(name: "VEC_eh_region_base_index", scope: !6, file: !6, line: 184, type: !4323, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4323 = !DISubroutineType(types: !4324)
!4324 = !{!2037, !4325, !7}
!4325 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4326, size: 64)
!4326 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2091)
!4327 = !DILocalVariable(name: "vec_", arg: 1, scope: !4322, file: !6, line: 184, type: !4325)
!4328 = !DILocation(line: 184, column: 1, scope: !4322)
!4329 = !DILocalVariable(name: "ix_", arg: 2, scope: !4322, file: !6, line: 184, type: !7)
!4330 = !DILocation(line: 0, scope: !4322)
!4331 = distinct !DISubprogram(name: "maybe_duplicate_eh_stmt", scope: !3, file: !3, line: 2679, type: !4182, scopeLine: 2680, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4332 = !DILocalVariable(name: "new_stmt", arg: 1, scope: !4331, file: !3, line: 2679, type: !1589)
!4333 = !DILocation(line: 2679, column: 33, scope: !4331)
!4334 = !DILocalVariable(name: "old_stmt", arg: 2, scope: !4331, file: !3, line: 2679, type: !1589)
!4335 = !DILocation(line: 2679, column: 50, scope: !4331)
!4336 = !DILocalVariable(name: "lp_nr", scope: !4331, file: !3, line: 2681, type: !1679)
!4337 = !DILocation(line: 2681, column: 7, scope: !4331)
!4338 = !DILocation(line: 2683, column: 28, scope: !4339)
!4339 = distinct !DILexicalBlock(scope: !4331, file: !3, line: 2683, column: 7)
!4340 = !DILocation(line: 2683, column: 8, scope: !4339)
!4341 = !DILocation(line: 2683, column: 7, scope: !4331)
!4342 = !DILocation(line: 2684, column: 5, scope: !4339)
!4343 = !DILocation(line: 2686, column: 30, scope: !4331)
!4344 = !DILocation(line: 2686, column: 11, scope: !4331)
!4345 = !DILocation(line: 2686, column: 9, scope: !4331)
!4346 = !DILocation(line: 2687, column: 7, scope: !4347)
!4347 = distinct !DILexicalBlock(scope: !4331, file: !3, line: 2687, column: 7)
!4348 = !DILocation(line: 2687, column: 13, scope: !4347)
!4349 = !DILocation(line: 2687, column: 7, scope: !4331)
!4350 = !DILocation(line: 2688, column: 5, scope: !4347)
!4351 = !DILocation(line: 2690, column: 22, scope: !4331)
!4352 = !DILocation(line: 2690, column: 32, scope: !4331)
!4353 = !DILocation(line: 2690, column: 3, scope: !4331)
!4354 = !DILocation(line: 2691, column: 3, scope: !4331)
!4355 = !DILocation(line: 2692, column: 1, scope: !4331)
!4356 = distinct !DISubprogram(name: "gate_refactor_eh", scope: !3, file: !3, line: 2829, type: !3063, scopeLine: 2830, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4357 = !DILocation(line: 2831, column: 10, scope: !4356)
!4358 = !DILocation(line: 2831, column: 26, scope: !4356)
!4359 = !DILocation(line: 2831, column: 3, scope: !4356)
!4360 = distinct !DISubprogram(name: "refactor_eh", scope: !3, file: !3, line: 2822, type: !3067, scopeLine: 2823, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4361 = !DILocation(line: 2824, column: 31, scope: !4360)
!4362 = !DILocation(line: 2824, column: 18, scope: !4360)
!4363 = !DILocation(line: 2824, column: 3, scope: !4360)
!4364 = !DILocation(line: 2825, column: 3, scope: !4360)
!4365 = distinct !DISubprogram(name: "gate_lower_resx", scope: !3, file: !3, line: 3035, type: !3063, scopeLine: 3036, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4366 = !DILocation(line: 3037, column: 10, scope: !4365)
!4367 = !DILocation(line: 3037, column: 26, scope: !4365)
!4368 = !DILocation(line: 3037, column: 3, scope: !4365)
!4369 = distinct !DISubprogram(name: "execute_lower_resx", scope: !3, file: !3, line: 3004, type: !3067, scopeLine: 3005, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4370 = !DILocalVariable(name: "bb", scope: !4369, file: !3, line: 3006, type: !2200)
!4371 = !DILocation(line: 3006, column: 15, scope: !4369)
!4372 = !DILocalVariable(name: "mnt_map", scope: !4369, file: !3, line: 3007, type: !2261)
!4373 = !DILocation(line: 3007, column: 25, scope: !4369)
!4374 = !DILocalVariable(name: "dominance_invalidated", scope: !4369, file: !3, line: 3008, type: !1890)
!4375 = !DILocation(line: 3008, column: 8, scope: !4369)
!4376 = !DILocalVariable(name: "any_rewritten", scope: !4369, file: !3, line: 3009, type: !1890)
!4377 = !DILocation(line: 3009, column: 8, scope: !4369)
!4378 = !DILocation(line: 3011, column: 13, scope: !4369)
!4379 = !DILocation(line: 3011, column: 11, scope: !4369)
!4380 = !DILocation(line: 3013, column: 3, scope: !4381)
!4381 = distinct !DILexicalBlock(scope: !4369, file: !3, line: 3013, column: 3)
!4382 = !DILocation(line: 3013, column: 3, scope: !4383)
!4383 = distinct !DILexicalBlock(scope: !4381, file: !3, line: 3013, column: 3)
!4384 = !DILocalVariable(name: "last", scope: !4385, file: !3, line: 3015, type: !1589)
!4385 = distinct !DILexicalBlock(scope: !4383, file: !3, line: 3014, column: 5)
!4386 = !DILocation(line: 3015, column: 14, scope: !4385)
!4387 = !DILocation(line: 3015, column: 32, scope: !4385)
!4388 = !DILocation(line: 3015, column: 21, scope: !4385)
!4389 = !DILocation(line: 3016, column: 11, scope: !4390)
!4390 = distinct !DILexicalBlock(scope: !4385, file: !3, line: 3016, column: 11)
!4391 = !DILocation(line: 3016, column: 16, scope: !4390)
!4392 = !DILocation(line: 3016, column: 35, scope: !4390)
!4393 = !DILocation(line: 3016, column: 19, scope: !4390)
!4394 = !DILocation(line: 3016, column: 11, scope: !4385)
!4395 = !DILocation(line: 3018, column: 41, scope: !4396)
!4396 = distinct !DILexicalBlock(scope: !4390, file: !3, line: 3017, column: 2)
!4397 = !DILocation(line: 3018, column: 45, scope: !4396)
!4398 = !DILocation(line: 3018, column: 51, scope: !4396)
!4399 = !DILocation(line: 3018, column: 29, scope: !4396)
!4400 = !DILocation(line: 3018, column: 26, scope: !4396)
!4401 = !DILocation(line: 3019, column: 18, scope: !4396)
!4402 = !DILocation(line: 3020, column: 2, scope: !4396)
!4403 = !DILocation(line: 3021, column: 5, scope: !4385)
!4404 = distinct !{!4404, !4380, !4405}
!4405 = !DILocation(line: 3021, column: 5, scope: !4381)
!4406 = !DILocation(line: 3023, column: 24, scope: !4369)
!4407 = !DILocation(line: 3023, column: 3, scope: !4369)
!4408 = !DILocation(line: 3025, column: 7, scope: !4409)
!4409 = distinct !DILexicalBlock(scope: !4369, file: !3, line: 3025, column: 7)
!4410 = !DILocation(line: 3025, column: 7, scope: !4369)
!4411 = !DILocation(line: 3027, column: 7, scope: !4412)
!4412 = distinct !DILexicalBlock(scope: !4409, file: !3, line: 3026, column: 5)
!4413 = !DILocation(line: 3028, column: 7, scope: !4412)
!4414 = !DILocation(line: 3029, column: 5, scope: !4412)
!4415 = !DILocation(line: 3031, column: 10, scope: !4369)
!4416 = !DILocation(line: 3031, column: 3, scope: !4369)
!4417 = distinct !DISubprogram(name: "gate_lower_eh_dispatch", scope: !3, file: !3, line: 3235, type: !3063, scopeLine: 3236, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4418 = !DILocation(line: 3237, column: 10, scope: !4417)
!4419 = !DILocation(line: 3237, column: 16, scope: !4417)
!4420 = !DILocation(line: 3237, column: 20, scope: !4417)
!4421 = !DILocation(line: 3237, column: 32, scope: !4417)
!4422 = !DILocation(line: 3237, column: 3, scope: !4417)
!4423 = distinct !DISubprogram(name: "execute_lower_eh_dispatch", scope: !3, file: !3, line: 3211, type: !3067, scopeLine: 3212, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4424 = !DILocalVariable(name: "bb", scope: !4423, file: !3, line: 3213, type: !2200)
!4425 = !DILocation(line: 3213, column: 15, scope: !4423)
!4426 = !DILocalVariable(name: "any_rewritten", scope: !4423, file: !3, line: 3214, type: !1890)
!4427 = !DILocation(line: 3214, column: 8, scope: !4423)
!4428 = !DILocalVariable(name: "redirected", scope: !4423, file: !3, line: 3215, type: !1890)
!4429 = !DILocation(line: 3215, column: 8, scope: !4423)
!4430 = !DILocation(line: 3217, column: 3, scope: !4423)
!4431 = !DILocation(line: 3219, column: 3, scope: !4432)
!4432 = distinct !DILexicalBlock(scope: !4423, file: !3, line: 3219, column: 3)
!4433 = !DILocation(line: 3219, column: 3, scope: !4434)
!4434 = distinct !DILexicalBlock(scope: !4432, file: !3, line: 3219, column: 3)
!4435 = !DILocalVariable(name: "last", scope: !4436, file: !3, line: 3221, type: !1589)
!4436 = distinct !DILexicalBlock(scope: !4434, file: !3, line: 3220, column: 5)
!4437 = !DILocation(line: 3221, column: 14, scope: !4436)
!4438 = !DILocation(line: 3221, column: 32, scope: !4436)
!4439 = !DILocation(line: 3221, column: 21, scope: !4436)
!4440 = !DILocation(line: 3222, column: 11, scope: !4441)
!4441 = distinct !DILexicalBlock(scope: !4436, file: !3, line: 3222, column: 11)
!4442 = !DILocation(line: 3222, column: 16, scope: !4441)
!4443 = !DILocation(line: 3222, column: 32, scope: !4441)
!4444 = !DILocation(line: 3222, column: 19, scope: !4441)
!4445 = !DILocation(line: 3222, column: 38, scope: !4441)
!4446 = !DILocation(line: 3222, column: 11, scope: !4436)
!4447 = !DILocation(line: 3224, column: 37, scope: !4448)
!4448 = distinct !DILexicalBlock(scope: !4441, file: !3, line: 3223, column: 2)
!4449 = !DILocation(line: 3224, column: 41, scope: !4448)
!4450 = !DILocation(line: 3224, column: 18, scope: !4448)
!4451 = !DILocation(line: 3224, column: 15, scope: !4448)
!4452 = !DILocation(line: 3225, column: 18, scope: !4448)
!4453 = !DILocation(line: 3226, column: 2, scope: !4448)
!4454 = !DILocation(line: 3227, column: 5, scope: !4436)
!4455 = distinct !{!4455, !4431, !4456}
!4456 = !DILocation(line: 3227, column: 5, scope: !4432)
!4457 = !DILocation(line: 3229, column: 7, scope: !4458)
!4458 = distinct !DILexicalBlock(scope: !4423, file: !3, line: 3229, column: 7)
!4459 = !DILocation(line: 3229, column: 7, scope: !4423)
!4460 = !DILocation(line: 3230, column: 5, scope: !4458)
!4461 = !DILocation(line: 3231, column: 10, scope: !4423)
!4462 = !DILocation(line: 3231, column: 3, scope: !4423)
!4463 = distinct !DISubprogram(name: "gate_cleanup_eh", scope: !3, file: !3, line: 3877, type: !3063, scopeLine: 3878, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4464 = !DILocation(line: 3879, column: 10, scope: !4463)
!4465 = !DILocation(line: 3879, column: 16, scope: !4463)
!4466 = !DILocation(line: 3879, column: 19, scope: !4463)
!4467 = !DILocation(line: 3879, column: 27, scope: !4463)
!4468 = !DILocation(line: 3879, column: 30, scope: !4463)
!4469 = !DILocation(line: 3879, column: 36, scope: !4463)
!4470 = !DILocation(line: 3879, column: 40, scope: !4463)
!4471 = !DILocation(line: 3879, column: 52, scope: !4463)
!4472 = !DILocation(line: 0, scope: !4463)
!4473 = !DILocation(line: 3879, column: 3, scope: !4463)
!4474 = distinct !DISubprogram(name: "execute_cleanup_eh", scope: !3, file: !3, line: 3842, type: !3067, scopeLine: 3843, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4475 = !DILocation(line: 3846, column: 3, scope: !4474)
!4476 = !DILocation(line: 3849, column: 7, scope: !4477)
!4477 = distinct !DILexicalBlock(scope: !4474, file: !3, line: 3849, column: 7)
!4478 = !DILocation(line: 3849, column: 13, scope: !4477)
!4479 = !DILocation(line: 3849, column: 17, scope: !4477)
!4480 = !DILocation(line: 3849, column: 29, scope: !4477)
!4481 = !DILocation(line: 3849, column: 32, scope: !4477)
!4482 = !DILocation(line: 3849, column: 7, scope: !4474)
!4483 = !DILocalVariable(name: "changed", scope: !4484, file: !3, line: 3851, type: !1890)
!4484 = distinct !DILexicalBlock(scope: !4477, file: !3, line: 3850, column: 5)
!4485 = !DILocation(line: 3851, column: 12, scope: !4484)
!4486 = !DILocation(line: 3853, column: 18, scope: !4484)
!4487 = !DILocation(line: 3853, column: 15, scope: !4484)
!4488 = !DILocation(line: 3854, column: 18, scope: !4484)
!4489 = !DILocation(line: 3854, column: 15, scope: !4484)
!4490 = !DILocation(line: 3856, column: 11, scope: !4491)
!4491 = distinct !DILexicalBlock(scope: !4484, file: !3, line: 3856, column: 11)
!4492 = !DILocation(line: 3856, column: 11, scope: !4484)
!4493 = !DILocation(line: 3858, column: 4, scope: !4494)
!4494 = distinct !DILexicalBlock(scope: !4491, file: !3, line: 3857, column: 2)
!4495 = !DILocation(line: 3859, column: 4, scope: !4494)
!4496 = !DILocation(line: 3863, column: 4, scope: !4494)
!4497 = !DILocation(line: 3867, column: 4, scope: !4494)
!4498 = !DILocation(line: 3869, column: 4, scope: !4494)
!4499 = !DILocation(line: 3871, column: 5, scope: !4484)
!4500 = !DILocation(line: 3873, column: 3, scope: !4474)
!4501 = !DILocation(line: 3874, column: 1, scope: !4474)
!4502 = distinct !DISubprogram(name: "verify_eh_edges", scope: !3, file: !3, line: 3904, type: !3223, scopeLine: 3905, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4503 = !DILocalVariable(name: "stmt", arg: 1, scope: !4502, file: !3, line: 3904, type: !1589)
!4504 = !DILocation(line: 3904, column: 25, scope: !4502)
!4505 = !DILocalVariable(name: "bb", scope: !4502, file: !3, line: 3906, type: !2200)
!4506 = !DILocation(line: 3906, column: 15, scope: !4502)
!4507 = !DILocation(line: 3906, column: 31, scope: !4502)
!4508 = !DILocation(line: 3906, column: 20, scope: !4502)
!4509 = !DILocalVariable(name: "lp", scope: !4502, file: !3, line: 3907, type: !2111)
!4510 = !DILocation(line: 3907, column: 18, scope: !4502)
!4511 = !DILocalVariable(name: "lp_nr", scope: !4502, file: !3, line: 3908, type: !1679)
!4512 = !DILocation(line: 3908, column: 7, scope: !4502)
!4513 = !DILocalVariable(name: "ei", scope: !4502, file: !3, line: 3909, type: !3477)
!4514 = !DILocation(line: 3909, column: 17, scope: !4502)
!4515 = !DILocalVariable(name: "e", scope: !4502, file: !3, line: 3910, type: !1630)
!4516 = !DILocation(line: 3910, column: 8, scope: !4502)
!4517 = !DILocalVariable(name: "eh_edge", scope: !4502, file: !3, line: 3910, type: !1630)
!4518 = !DILocation(line: 3910, column: 11, scope: !4502)
!4519 = !DILocation(line: 3912, column: 30, scope: !4502)
!4520 = !DILocation(line: 3912, column: 11, scope: !4502)
!4521 = !DILocation(line: 3912, column: 9, scope: !4502)
!4522 = !DILocation(line: 3913, column: 7, scope: !4523)
!4523 = distinct !DILexicalBlock(scope: !4502, file: !3, line: 3913, column: 7)
!4524 = !DILocation(line: 3913, column: 13, scope: !4523)
!4525 = !DILocation(line: 3913, column: 7, scope: !4502)
!4526 = !DILocation(line: 3914, column: 42, scope: !4523)
!4527 = !DILocation(line: 3914, column: 10, scope: !4523)
!4528 = !DILocation(line: 3914, column: 8, scope: !4523)
!4529 = !DILocation(line: 3914, column: 5, scope: !4523)
!4530 = !DILocation(line: 3916, column: 11, scope: !4502)
!4531 = !DILocation(line: 3917, column: 3, scope: !4532)
!4532 = distinct !DILexicalBlock(scope: !4502, file: !3, line: 3917, column: 3)
!4533 = !DILocation(line: 3917, column: 3, scope: !4534)
!4534 = distinct !DILexicalBlock(scope: !4532, file: !3, line: 3917, column: 3)
!4535 = !DILocation(line: 3919, column: 11, scope: !4536)
!4536 = distinct !DILexicalBlock(scope: !4537, file: !3, line: 3919, column: 11)
!4537 = distinct !DILexicalBlock(scope: !4534, file: !3, line: 3918, column: 5)
!4538 = !DILocation(line: 3919, column: 14, scope: !4536)
!4539 = !DILocation(line: 3919, column: 20, scope: !4536)
!4540 = !DILocation(line: 3919, column: 11, scope: !4537)
!4541 = !DILocation(line: 3921, column: 8, scope: !4542)
!4542 = distinct !DILexicalBlock(scope: !4543, file: !3, line: 3921, column: 8)
!4543 = distinct !DILexicalBlock(scope: !4536, file: !3, line: 3920, column: 2)
!4544 = !DILocation(line: 3921, column: 8, scope: !4543)
!4545 = !DILocation(line: 3923, column: 46, scope: !4546)
!4546 = distinct !DILexicalBlock(scope: !4542, file: !3, line: 3922, column: 6)
!4547 = !DILocation(line: 3923, column: 50, scope: !4546)
!4548 = !DILocation(line: 3923, column: 8, scope: !4546)
!4549 = !DILocation(line: 3924, column: 8, scope: !4546)
!4550 = !DILocation(line: 3927, column: 16, scope: !4542)
!4551 = !DILocation(line: 3927, column: 14, scope: !4542)
!4552 = !DILocation(line: 3928, column: 2, scope: !4543)
!4553 = !DILocation(line: 3929, column: 5, scope: !4537)
!4554 = distinct !{!4554, !4531, !4555}
!4555 = !DILocation(line: 3929, column: 5, scope: !4532)
!4556 = !DILocation(line: 3931, column: 7, scope: !4557)
!4557 = distinct !DILexicalBlock(scope: !4502, file: !3, line: 3931, column: 7)
!4558 = !DILocation(line: 3931, column: 10, scope: !4557)
!4559 = !DILocation(line: 3931, column: 7, scope: !4502)
!4560 = !DILocation(line: 3933, column: 11, scope: !4561)
!4561 = distinct !DILexicalBlock(scope: !4562, file: !3, line: 3933, column: 11)
!4562 = distinct !DILexicalBlock(scope: !4557, file: !3, line: 3932, column: 5)
!4563 = !DILocation(line: 3933, column: 11, scope: !4562)
!4564 = !DILocation(line: 3935, column: 53, scope: !4565)
!4565 = distinct !DILexicalBlock(scope: !4561, file: !3, line: 3934, column: 2)
!4566 = !DILocation(line: 3935, column: 57, scope: !4565)
!4567 = !DILocation(line: 3935, column: 4, scope: !4565)
!4568 = !DILocation(line: 3936, column: 4, scope: !4565)
!4569 = !DILocation(line: 3938, column: 7, scope: !4562)
!4570 = !DILocation(line: 3941, column: 28, scope: !4571)
!4571 = distinct !DILexicalBlock(scope: !4502, file: !3, line: 3941, column: 7)
!4572 = !DILocation(line: 3941, column: 8, scope: !4571)
!4573 = !DILocation(line: 3941, column: 7, scope: !4502)
!4574 = !DILocation(line: 3943, column: 61, scope: !4575)
!4575 = distinct !DILexicalBlock(scope: !4571, file: !3, line: 3942, column: 5)
!4576 = !DILocation(line: 3943, column: 65, scope: !4575)
!4577 = !DILocation(line: 3943, column: 7, scope: !4575)
!4578 = !DILocation(line: 3944, column: 7, scope: !4575)
!4579 = !DILocation(line: 3947, column: 7, scope: !4580)
!4580 = distinct !DILexicalBlock(scope: !4502, file: !3, line: 3947, column: 7)
!4581 = !DILocation(line: 3947, column: 15, scope: !4580)
!4582 = !DILocation(line: 3947, column: 7, scope: !4502)
!4583 = !DILocation(line: 3949, column: 45, scope: !4584)
!4584 = distinct !DILexicalBlock(scope: !4580, file: !3, line: 3948, column: 5)
!4585 = !DILocation(line: 3949, column: 49, scope: !4584)
!4586 = !DILocation(line: 3949, column: 7, scope: !4584)
!4587 = !DILocation(line: 3950, column: 7, scope: !4584)
!4588 = !DILocation(line: 3953, column: 7, scope: !4589)
!4589 = distinct !DILexicalBlock(scope: !4502, file: !3, line: 3953, column: 7)
!4590 = !DILocation(line: 3953, column: 16, scope: !4589)
!4591 = !DILocation(line: 3953, column: 24, scope: !4589)
!4592 = !DILocation(line: 3953, column: 21, scope: !4589)
!4593 = !DILocation(line: 3953, column: 7, scope: !4502)
!4594 = !DILocation(line: 3955, column: 42, scope: !4595)
!4595 = distinct !DILexicalBlock(scope: !4589, file: !3, line: 3954, column: 5)
!4596 = !DILocation(line: 3955, column: 46, scope: !4595)
!4597 = !DILocation(line: 3955, column: 53, scope: !4595)
!4598 = !DILocation(line: 3955, column: 62, scope: !4595)
!4599 = !DILocation(line: 3955, column: 68, scope: !4595)
!4600 = !DILocation(line: 3955, column: 7, scope: !4595)
!4601 = !DILocation(line: 3956, column: 7, scope: !4595)
!4602 = !DILocation(line: 3959, column: 3, scope: !4502)
!4603 = !DILocation(line: 3960, column: 1, scope: !4502)
!4604 = distinct !DISubprogram(name: "ei_start_1", scope: !369, file: !369, line: 696, type: !4605, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4605 = !DISubroutineType(types: !4606)
!4606 = !{!3477, !3482}
!4607 = !DILocalVariable(name: "ev", arg: 1, scope: !4604, file: !369, line: 696, type: !3482)
!4608 = !DILocation(line: 696, column: 28, scope: !4604)
!4609 = !DILocalVariable(name: "i", scope: !4604, file: !369, line: 698, type: !3477)
!4610 = !DILocation(line: 698, column: 17, scope: !4604)
!4611 = !DILocation(line: 700, column: 5, scope: !4604)
!4612 = !DILocation(line: 700, column: 11, scope: !4604)
!4613 = !DILocation(line: 701, column: 17, scope: !4604)
!4614 = !DILocation(line: 701, column: 5, scope: !4604)
!4615 = !DILocation(line: 701, column: 15, scope: !4604)
!4616 = !DILocation(line: 703, column: 3, scope: !4604)
!4617 = distinct !DISubprogram(name: "ei_cond", scope: !369, file: !369, line: 771, type: !4618, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4618 = !DISubroutineType(types: !4619)
!4619 = !{!1890, !3477, !4620}
!4620 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1630, size: 64)
!4621 = !DILocalVariable(name: "ei", arg: 1, scope: !4617, file: !369, line: 771, type: !3477)
!4622 = !DILocation(line: 771, column: 24, scope: !4617)
!4623 = !DILocalVariable(name: "p", arg: 2, scope: !4617, file: !369, line: 771, type: !4620)
!4624 = !DILocation(line: 771, column: 34, scope: !4617)
!4625 = !DILocation(line: 773, column: 8, scope: !4626)
!4626 = distinct !DILexicalBlock(scope: !4617, file: !369, line: 773, column: 7)
!4627 = !DILocation(line: 773, column: 7, scope: !4617)
!4628 = !DILocation(line: 775, column: 12, scope: !4629)
!4629 = distinct !DILexicalBlock(scope: !4626, file: !369, line: 774, column: 5)
!4630 = !DILocation(line: 775, column: 8, scope: !4629)
!4631 = !DILocation(line: 775, column: 10, scope: !4629)
!4632 = !DILocation(line: 776, column: 7, scope: !4629)
!4633 = !DILocation(line: 780, column: 8, scope: !4634)
!4634 = distinct !DILexicalBlock(scope: !4626, file: !369, line: 779, column: 5)
!4635 = !DILocation(line: 780, column: 10, scope: !4634)
!4636 = !DILocation(line: 781, column: 7, scope: !4634)
!4637 = !DILocation(line: 783, column: 1, scope: !4617)
!4638 = distinct !DISubprogram(name: "ei_next", scope: !369, file: !369, line: 736, type: !4639, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4639 = !DISubroutineType(types: !4640)
!4640 = !{null, !4641}
!4641 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3477, size: 64)
!4642 = !DILocalVariable(name: "i", arg: 1, scope: !4638, file: !369, line: 736, type: !4641)
!4643 = !DILocation(line: 736, column: 25, scope: !4638)
!4644 = !DILocation(line: 738, column: 3, scope: !4638)
!4645 = !DILocation(line: 739, column: 3, scope: !4638)
!4646 = !DILocation(line: 739, column: 6, scope: !4638)
!4647 = !DILocation(line: 739, column: 11, scope: !4638)
!4648 = !DILocation(line: 740, column: 1, scope: !4638)
!4649 = distinct !DISubprogram(name: "verify_eh_dispatch_edge", scope: !3, file: !3, line: 3965, type: !3223, scopeLine: 3966, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4650 = !DILocalVariable(name: "stmt", arg: 1, scope: !4649, file: !3, line: 3965, type: !1589)
!4651 = !DILocation(line: 3965, column: 33, scope: !4649)
!4652 = !DILocalVariable(name: "r", scope: !4649, file: !3, line: 3967, type: !2037)
!4653 = !DILocation(line: 3967, column: 13, scope: !4649)
!4654 = !DILocalVariable(name: "c", scope: !4649, file: !3, line: 3968, type: !3327)
!4655 = !DILocation(line: 3968, column: 12, scope: !4649)
!4656 = !DILocalVariable(name: "src", scope: !4649, file: !3, line: 3969, type: !2200)
!4657 = !DILocation(line: 3969, column: 15, scope: !4649)
!4658 = !DILocalVariable(name: "dst", scope: !4649, file: !3, line: 3969, type: !2200)
!4659 = !DILocation(line: 3969, column: 20, scope: !4649)
!4660 = !DILocalVariable(name: "want_fallthru", scope: !4649, file: !3, line: 3970, type: !1890)
!4661 = !DILocation(line: 3970, column: 8, scope: !4649)
!4662 = !DILocalVariable(name: "ei", scope: !4649, file: !3, line: 3971, type: !3477)
!4663 = !DILocation(line: 3971, column: 17, scope: !4649)
!4664 = !DILocalVariable(name: "e", scope: !4649, file: !3, line: 3972, type: !1630)
!4665 = !DILocation(line: 3972, column: 8, scope: !4649)
!4666 = !DILocalVariable(name: "fall_edge", scope: !4649, file: !3, line: 3972, type: !1630)
!4667 = !DILocation(line: 3972, column: 11, scope: !4649)
!4668 = !DILocation(line: 3974, column: 61, scope: !4649)
!4669 = !DILocation(line: 3974, column: 34, scope: !4649)
!4670 = !DILocation(line: 3974, column: 7, scope: !4649)
!4671 = !DILocation(line: 3974, column: 5, scope: !4649)
!4672 = !DILocation(line: 3975, column: 20, scope: !4649)
!4673 = !DILocation(line: 3975, column: 9, scope: !4649)
!4674 = !DILocation(line: 3975, column: 7, scope: !4649)
!4675 = !DILocation(line: 3977, column: 3, scope: !4676)
!4676 = distinct !DILexicalBlock(scope: !4649, file: !3, line: 3977, column: 3)
!4677 = !DILocation(line: 3977, column: 3, scope: !4678)
!4678 = distinct !DILexicalBlock(scope: !4676, file: !3, line: 3977, column: 3)
!4679 = !DILocation(line: 3978, column: 5, scope: !4678)
!4680 = distinct !{!4680, !4675, !4681}
!4681 = !DILocation(line: 3978, column: 5, scope: !4676)
!4682 = !DILocation(line: 3980, column: 11, scope: !4649)
!4683 = !DILocation(line: 3980, column: 14, scope: !4649)
!4684 = !DILocation(line: 3980, column: 3, scope: !4649)
!4685 = !DILocation(line: 3983, column: 16, scope: !4686)
!4686 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 3983, column: 7)
!4687 = distinct !DILexicalBlock(scope: !4649, file: !3, line: 3981, column: 5)
!4688 = !DILocation(line: 3983, column: 19, scope: !4686)
!4689 = !DILocation(line: 3983, column: 21, scope: !4686)
!4690 = !DILocation(line: 3983, column: 28, scope: !4686)
!4691 = !DILocation(line: 3983, column: 14, scope: !4686)
!4692 = !DILocation(line: 3983, column: 12, scope: !4686)
!4693 = !DILocation(line: 3983, column: 41, scope: !4694)
!4694 = distinct !DILexicalBlock(scope: !4686, file: !3, line: 3983, column: 7)
!4695 = !DILocation(line: 3983, column: 7, scope: !4686)
!4696 = !DILocation(line: 3985, column: 10, scope: !4697)
!4697 = distinct !DILexicalBlock(scope: !4694, file: !3, line: 3984, column: 2)
!4698 = !DILocation(line: 3985, column: 8, scope: !4697)
!4699 = !DILocation(line: 3986, column: 19, scope: !4697)
!4700 = !DILocation(line: 3986, column: 24, scope: !4697)
!4701 = !DILocation(line: 3986, column: 8, scope: !4697)
!4702 = !DILocation(line: 3986, column: 6, scope: !4697)
!4703 = !DILocation(line: 3987, column: 8, scope: !4704)
!4704 = distinct !DILexicalBlock(scope: !4697, file: !3, line: 3987, column: 8)
!4705 = !DILocation(line: 3987, column: 10, scope: !4704)
!4706 = !DILocation(line: 3987, column: 8, scope: !4697)
!4707 = !DILocation(line: 3989, column: 43, scope: !4708)
!4708 = distinct !DILexicalBlock(scope: !4704, file: !3, line: 3988, column: 6)
!4709 = !DILocation(line: 3989, column: 48, scope: !4708)
!4710 = !DILocation(line: 3989, column: 8, scope: !4708)
!4711 = !DILocation(line: 3990, column: 8, scope: !4708)
!4712 = !DILocation(line: 3992, column: 21, scope: !4697)
!4713 = !DILocation(line: 3992, column: 13, scope: !4697)
!4714 = !DILocation(line: 3992, column: 4, scope: !4697)
!4715 = !DILocation(line: 3992, column: 7, scope: !4697)
!4716 = !DILocation(line: 3992, column: 11, scope: !4697)
!4717 = !DILocation(line: 3995, column: 8, scope: !4718)
!4718 = distinct !DILexicalBlock(scope: !4697, file: !3, line: 3995, column: 8)
!4719 = !DILocation(line: 3995, column: 11, scope: !4718)
!4720 = !DILocation(line: 3995, column: 21, scope: !4718)
!4721 = !DILocation(line: 3995, column: 8, scope: !4697)
!4722 = !DILocation(line: 3997, column: 22, scope: !4723)
!4723 = distinct !DILexicalBlock(scope: !4718, file: !3, line: 3996, column: 6)
!4724 = !DILocation(line: 3998, column: 8, scope: !4723)
!4725 = !DILocation(line: 4000, column: 2, scope: !4697)
!4726 = !DILocation(line: 3983, column: 49, scope: !4694)
!4727 = !DILocation(line: 3983, column: 52, scope: !4694)
!4728 = !DILocation(line: 3983, column: 47, scope: !4694)
!4729 = !DILocation(line: 3983, column: 7, scope: !4694)
!4730 = distinct !{!4730, !4695, !4731}
!4731 = !DILocation(line: 4000, column: 2, scope: !4686)
!4732 = !DILocation(line: 4001, column: 7, scope: !4687)
!4733 = !DILocation(line: 4004, column: 13, scope: !4687)
!4734 = !DILocation(line: 4004, column: 11, scope: !4687)
!4735 = !DILocation(line: 4005, column: 22, scope: !4687)
!4736 = !DILocation(line: 4005, column: 27, scope: !4687)
!4737 = !DILocation(line: 4005, column: 11, scope: !4687)
!4738 = !DILocation(line: 4005, column: 9, scope: !4687)
!4739 = !DILocation(line: 4006, column: 11, scope: !4740)
!4740 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 4006, column: 11)
!4741 = !DILocation(line: 4006, column: 13, scope: !4740)
!4742 = !DILocation(line: 4006, column: 11, scope: !4687)
!4743 = !DILocation(line: 4008, column: 39, scope: !4744)
!4744 = distinct !DILexicalBlock(scope: !4740, file: !3, line: 4007, column: 2)
!4745 = !DILocation(line: 4008, column: 44, scope: !4744)
!4746 = !DILocation(line: 4008, column: 4, scope: !4744)
!4747 = !DILocation(line: 4009, column: 4, scope: !4744)
!4748 = !DILocation(line: 4011, column: 24, scope: !4687)
!4749 = !DILocation(line: 4011, column: 16, scope: !4687)
!4750 = !DILocation(line: 4011, column: 7, scope: !4687)
!4751 = !DILocation(line: 4011, column: 10, scope: !4687)
!4752 = !DILocation(line: 4011, column: 14, scope: !4687)
!4753 = !DILocation(line: 4012, column: 7, scope: !4687)
!4754 = !DILocation(line: 4015, column: 7, scope: !4687)
!4755 = !DILocation(line: 4016, column: 5, scope: !4687)
!4756 = !DILocation(line: 4018, column: 13, scope: !4649)
!4757 = !DILocation(line: 4019, column: 3, scope: !4758)
!4758 = distinct !DILexicalBlock(scope: !4649, file: !3, line: 4019, column: 3)
!4759 = !DILocation(line: 4019, column: 3, scope: !4760)
!4760 = distinct !DILexicalBlock(scope: !4758, file: !3, line: 4019, column: 3)
!4761 = !DILocation(line: 4021, column: 11, scope: !4762)
!4762 = distinct !DILexicalBlock(scope: !4763, file: !3, line: 4021, column: 11)
!4763 = distinct !DILexicalBlock(scope: !4760, file: !3, line: 4020, column: 5)
!4764 = !DILocation(line: 4021, column: 14, scope: !4762)
!4765 = !DILocation(line: 4021, column: 20, scope: !4762)
!4766 = !DILocation(line: 4021, column: 11, scope: !4763)
!4767 = !DILocation(line: 4023, column: 8, scope: !4768)
!4768 = distinct !DILexicalBlock(scope: !4769, file: !3, line: 4023, column: 8)
!4769 = distinct !DILexicalBlock(scope: !4762, file: !3, line: 4022, column: 2)
!4770 = !DILocation(line: 4023, column: 18, scope: !4768)
!4771 = !DILocation(line: 4023, column: 8, scope: !4769)
!4772 = !DILocation(line: 4025, column: 48, scope: !4773)
!4773 = distinct !DILexicalBlock(scope: !4768, file: !3, line: 4024, column: 6)
!4774 = !DILocation(line: 4025, column: 53, scope: !4773)
!4775 = !DILocation(line: 4025, column: 8, scope: !4773)
!4776 = !DILocation(line: 4026, column: 8, scope: !4773)
!4777 = !DILocation(line: 4028, column: 16, scope: !4769)
!4778 = !DILocation(line: 4028, column: 14, scope: !4769)
!4779 = !DILocation(line: 4029, column: 2, scope: !4769)
!4780 = !DILocation(line: 4030, column: 16, scope: !4781)
!4781 = distinct !DILexicalBlock(scope: !4762, file: !3, line: 4030, column: 16)
!4782 = !DILocation(line: 4030, column: 19, scope: !4781)
!4783 = !DILocation(line: 4030, column: 16, scope: !4762)
!4784 = !DILocation(line: 4031, column: 2, scope: !4781)
!4785 = !DILocation(line: 4031, column: 5, scope: !4781)
!4786 = !DILocation(line: 4031, column: 9, scope: !4781)
!4787 = !DILocation(line: 4034, column: 39, scope: !4788)
!4788 = distinct !DILexicalBlock(scope: !4781, file: !3, line: 4033, column: 2)
!4789 = !DILocation(line: 4034, column: 44, scope: !4788)
!4790 = !DILocation(line: 4034, column: 4, scope: !4788)
!4791 = !DILocation(line: 4035, column: 4, scope: !4788)
!4792 = !DILocation(line: 4037, column: 5, scope: !4763)
!4793 = distinct !{!4793, !4757, !4794}
!4794 = !DILocation(line: 4037, column: 5, scope: !4758)
!4795 = !DILocation(line: 4038, column: 8, scope: !4796)
!4796 = distinct !DILexicalBlock(scope: !4649, file: !3, line: 4038, column: 7)
!4797 = !DILocation(line: 4038, column: 18, scope: !4796)
!4798 = !DILocation(line: 4038, column: 29, scope: !4796)
!4799 = !DILocation(line: 4038, column: 27, scope: !4796)
!4800 = !DILocation(line: 4038, column: 7, scope: !4649)
!4801 = !DILocation(line: 4040, column: 51, scope: !4802)
!4802 = distinct !DILexicalBlock(scope: !4796, file: !3, line: 4039, column: 5)
!4803 = !DILocation(line: 4040, column: 56, scope: !4802)
!4804 = !DILocation(line: 4040, column: 7, scope: !4802)
!4805 = !DILocation(line: 4041, column: 7, scope: !4802)
!4806 = !DILocation(line: 4044, column: 3, scope: !4649)
!4807 = !DILocation(line: 4045, column: 1, scope: !4649)
!4808 = distinct !DISubprogram(name: "collect_finally_tree_1", scope: !3, file: !3, line: 246, type: !4809, scopeLine: 247, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4809 = !DISubroutineType(types: !4810)
!4810 = !{null, !1640, !1589}
!4811 = !DILocalVariable(name: "seq", arg: 1, scope: !4808, file: !3, line: 246, type: !1640)
!4812 = !DILocation(line: 246, column: 36, scope: !4808)
!4813 = !DILocalVariable(name: "region", arg: 2, scope: !4808, file: !3, line: 246, type: !1589)
!4814 = !DILocation(line: 246, column: 48, scope: !4808)
!4815 = !DILocalVariable(name: "gsi", scope: !4808, file: !3, line: 248, type: !4816)
!4816 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !591, line: 265, baseType: !4817)
!4817 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !591, line: 254, size: 192, elements: !4818)
!4818 = !{!4819, !4820, !4821}
!4819 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4817, file: !591, line: 257, baseType: !1645, size: 64)
!4820 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !4817, file: !591, line: 263, baseType: !1640, size: 64, offset: 64)
!4821 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !4817, file: !591, line: 264, baseType: !2200, size: 64, offset: 128)
!4822 = !DILocation(line: 248, column: 24, scope: !4808)
!4823 = !DILocation(line: 250, column: 25, scope: !4824)
!4824 = distinct !DILexicalBlock(scope: !4808, file: !3, line: 250, column: 3)
!4825 = !DILocation(line: 250, column: 14, scope: !4824)
!4826 = !DILocation(line: 250, column: 8, scope: !4824)
!4827 = !DILocation(line: 250, column: 32, scope: !4828)
!4828 = distinct !DILexicalBlock(scope: !4824, file: !3, line: 250, column: 3)
!4829 = !DILocation(line: 250, column: 31, scope: !4828)
!4830 = !DILocation(line: 250, column: 3, scope: !4824)
!4831 = !DILocation(line: 251, column: 27, scope: !4828)
!4832 = !DILocation(line: 251, column: 43, scope: !4828)
!4833 = !DILocation(line: 251, column: 5, scope: !4828)
!4834 = !DILocation(line: 250, column: 49, scope: !4828)
!4835 = !DILocation(line: 250, column: 3, scope: !4828)
!4836 = distinct !{!4836, !4830, !4837}
!4837 = !DILocation(line: 251, column: 49, scope: !4824)
!4838 = !DILocation(line: 252, column: 1, scope: !4808)
!4839 = distinct !DISubprogram(name: "lower_eh_constructs_1", scope: !3, file: !3, line: 1979, type: !4840, scopeLine: 1980, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4840 = !DISubroutineType(types: !4841)
!4841 = !{null, !3020, !1640}
!4842 = !DILocalVariable(name: "state", arg: 1, scope: !4839, file: !3, line: 1979, type: !3020)
!4843 = !DILocation(line: 1979, column: 42, scope: !4839)
!4844 = !DILocalVariable(name: "seq", arg: 2, scope: !4839, file: !3, line: 1979, type: !1640)
!4845 = !DILocation(line: 1979, column: 60, scope: !4839)
!4846 = !DILocalVariable(name: "gsi", scope: !4839, file: !3, line: 1981, type: !4816)
!4847 = !DILocation(line: 1981, column: 24, scope: !4839)
!4848 = !DILocation(line: 1982, column: 25, scope: !4849)
!4849 = distinct !DILexicalBlock(scope: !4839, file: !3, line: 1982, column: 3)
!4850 = !DILocation(line: 1982, column: 14, scope: !4849)
!4851 = !DILocation(line: 1982, column: 8, scope: !4849)
!4852 = !DILocation(line: 1982, column: 32, scope: !4853)
!4853 = distinct !DILexicalBlock(scope: !4849, file: !3, line: 1982, column: 3)
!4854 = !DILocation(line: 1982, column: 31, scope: !4853)
!4855 = !DILocation(line: 1982, column: 3, scope: !4849)
!4856 = !DILocation(line: 1983, column: 28, scope: !4853)
!4857 = !DILocation(line: 1983, column: 5, scope: !4853)
!4858 = !DILocation(line: 1982, column: 3, scope: !4853)
!4859 = distinct !{!4859, !4855, !4860}
!4860 = !DILocation(line: 1983, column: 39, scope: !4849)
!4861 = !DILocation(line: 1984, column: 1, scope: !4839)
!4862 = distinct !DISubprogram(name: "gsi_start", scope: !591, file: !591, line: 4403, type: !4863, scopeLine: 4404, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4863 = !DISubroutineType(types: !4864)
!4864 = !{!4816, !1640}
!4865 = !DILocalVariable(name: "seq", arg: 1, scope: !4862, file: !591, line: 4403, type: !1640)
!4866 = !DILocation(line: 4403, column: 23, scope: !4862)
!4867 = !DILocalVariable(name: "i", scope: !4862, file: !591, line: 4405, type: !4816)
!4868 = !DILocation(line: 4405, column: 24, scope: !4862)
!4869 = !DILocation(line: 4407, column: 29, scope: !4862)
!4870 = !DILocation(line: 4407, column: 11, scope: !4862)
!4871 = !DILocation(line: 4407, column: 5, scope: !4862)
!4872 = !DILocation(line: 4407, column: 9, scope: !4862)
!4873 = !DILocation(line: 4408, column: 11, scope: !4862)
!4874 = !DILocation(line: 4408, column: 5, scope: !4862)
!4875 = !DILocation(line: 4408, column: 9, scope: !4862)
!4876 = !DILocation(line: 4409, column: 13, scope: !4862)
!4877 = !DILocation(line: 4409, column: 11, scope: !4862)
!4878 = !DILocation(line: 4409, column: 17, scope: !4862)
!4879 = !DILocation(line: 4409, column: 22, scope: !4862)
!4880 = !DILocation(line: 4409, column: 27, scope: !4862)
!4881 = !DILocation(line: 4409, column: 20, scope: !4862)
!4882 = !DILocation(line: 4409, column: 10, scope: !4862)
!4883 = !DILocation(line: 4409, column: 48, scope: !4862)
!4884 = !DILocation(line: 4409, column: 53, scope: !4862)
!4885 = !DILocation(line: 4409, column: 35, scope: !4862)
!4886 = !DILocation(line: 4409, column: 5, scope: !4862)
!4887 = !DILocation(line: 4409, column: 8, scope: !4862)
!4888 = !DILocation(line: 4411, column: 3, scope: !4862)
!4889 = distinct !DISubprogram(name: "gsi_end_p", scope: !591, file: !591, line: 4467, type: !4890, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4890 = !DISubroutineType(types: !4891)
!4891 = !{!1890, !4816}
!4892 = !DILocalVariable(name: "i", arg: 1, scope: !4889, file: !591, line: 4467, type: !4816)
!4893 = !DILocation(line: 4467, column: 33, scope: !4889)
!4894 = !DILocation(line: 4469, column: 12, scope: !4889)
!4895 = !DILocation(line: 4469, column: 16, scope: !4889)
!4896 = !DILocation(line: 4469, column: 10, scope: !4889)
!4897 = !DILocation(line: 4469, column: 3, scope: !4889)
!4898 = distinct !DISubprogram(name: "collect_finally_tree", scope: !3, file: !3, line: 255, type: !4899, scopeLine: 256, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4899 = !DISubroutineType(types: !4900)
!4900 = !{null, !1589, !1589}
!4901 = !DILocalVariable(name: "stmt", arg: 1, scope: !4898, file: !3, line: 255, type: !1589)
!4902 = !DILocation(line: 255, column: 30, scope: !4898)
!4903 = !DILocalVariable(name: "region", arg: 2, scope: !4898, file: !3, line: 255, type: !1589)
!4904 = !DILocation(line: 255, column: 43, scope: !4898)
!4905 = !DILocalVariable(name: "temp", scope: !4898, file: !3, line: 257, type: !2995)
!4906 = !DILocation(line: 257, column: 12, scope: !4898)
!4907 = !DILocation(line: 259, column: 24, scope: !4898)
!4908 = !DILocation(line: 259, column: 11, scope: !4898)
!4909 = !DILocation(line: 259, column: 3, scope: !4898)
!4910 = !DILocation(line: 262, column: 36, scope: !4911)
!4911 = distinct !DILexicalBlock(scope: !4898, file: !3, line: 260, column: 5)
!4912 = !DILocation(line: 262, column: 16, scope: !4911)
!4913 = !DILocation(line: 262, column: 12, scope: !4911)
!4914 = !DILocation(line: 262, column: 14, scope: !4911)
!4915 = !DILocation(line: 263, column: 37, scope: !4911)
!4916 = !DILocation(line: 263, column: 7, scope: !4911)
!4917 = !DILocation(line: 264, column: 7, scope: !4911)
!4918 = !DILocation(line: 267, column: 28, scope: !4919)
!4919 = distinct !DILexicalBlock(scope: !4911, file: !3, line: 267, column: 11)
!4920 = !DILocation(line: 267, column: 11, scope: !4919)
!4921 = !DILocation(line: 267, column: 34, scope: !4919)
!4922 = !DILocation(line: 267, column: 11, scope: !4911)
!4923 = !DILocation(line: 269, column: 20, scope: !4924)
!4924 = distinct !DILexicalBlock(scope: !4919, file: !3, line: 268, column: 9)
!4925 = !DILocation(line: 269, column: 16, scope: !4924)
!4926 = !DILocation(line: 269, column: 18, scope: !4924)
!4927 = !DILocation(line: 270, column: 41, scope: !4924)
!4928 = !DILocation(line: 270, column: 11, scope: !4924)
!4929 = !DILocation(line: 271, column: 52, scope: !4924)
!4930 = !DILocation(line: 271, column: 35, scope: !4924)
!4931 = !DILocation(line: 271, column: 59, scope: !4924)
!4932 = !DILocation(line: 271, column: 11, scope: !4924)
!4933 = !DILocation(line: 272, column: 48, scope: !4924)
!4934 = !DILocation(line: 272, column: 28, scope: !4924)
!4935 = !DILocation(line: 272, column: 55, scope: !4924)
!4936 = !DILocation(line: 272, column: 4, scope: !4924)
!4937 = !DILocation(line: 273, column: 9, scope: !4924)
!4938 = !DILocation(line: 274, column: 33, scope: !4939)
!4939 = distinct !DILexicalBlock(scope: !4919, file: !3, line: 274, column: 16)
!4940 = !DILocation(line: 274, column: 16, scope: !4939)
!4941 = !DILocation(line: 274, column: 39, scope: !4939)
!4942 = !DILocation(line: 274, column: 16, scope: !4919)
!4943 = !DILocation(line: 276, column: 52, scope: !4944)
!4944 = distinct !DILexicalBlock(scope: !4939, file: !3, line: 275, column: 9)
!4945 = !DILocation(line: 276, column: 35, scope: !4944)
!4946 = !DILocation(line: 276, column: 59, scope: !4944)
!4947 = !DILocation(line: 276, column: 11, scope: !4944)
!4948 = !DILocation(line: 277, column: 55, scope: !4944)
!4949 = !DILocation(line: 277, column: 35, scope: !4944)
!4950 = !DILocation(line: 277, column: 62, scope: !4944)
!4951 = !DILocation(line: 277, column: 11, scope: !4944)
!4952 = !DILocation(line: 278, column: 9, scope: !4944)
!4953 = !DILocation(line: 279, column: 7, scope: !4911)
!4954 = !DILocation(line: 282, column: 53, scope: !4911)
!4955 = !DILocation(line: 282, column: 31, scope: !4911)
!4956 = !DILocation(line: 282, column: 60, scope: !4911)
!4957 = !DILocation(line: 282, column: 7, scope: !4911)
!4958 = !DILocation(line: 283, column: 7, scope: !4911)
!4959 = !DILocation(line: 286, column: 57, scope: !4911)
!4960 = !DILocation(line: 286, column: 31, scope: !4911)
!4961 = !DILocation(line: 286, column: 64, scope: !4911)
!4962 = !DILocation(line: 286, column: 7, scope: !4911)
!4963 = !DILocation(line: 287, column: 7, scope: !4911)
!4964 = !DILocation(line: 292, column: 7, scope: !4911)
!4965 = !DILocation(line: 294, column: 1, scope: !4898)
!4966 = distinct !DISubprogram(name: "gsi_stmt", scope: !591, file: !591, line: 4501, type: !4967, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4967 = !DISubroutineType(types: !4968)
!4968 = !{!1589, !4816}
!4969 = !DILocalVariable(name: "i", arg: 1, scope: !4966, file: !591, line: 4501, type: !4816)
!4970 = !DILocation(line: 4501, column: 32, scope: !4966)
!4971 = !DILocation(line: 4503, column: 12, scope: !4966)
!4972 = !DILocation(line: 4503, column: 17, scope: !4966)
!4973 = !DILocation(line: 4503, column: 3, scope: !4966)
!4974 = distinct !DISubprogram(name: "gsi_next", scope: !591, file: !591, line: 4485, type: !4975, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4975 = !DISubroutineType(types: !4976)
!4976 = !{null, !4977}
!4977 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4816, size: 64)
!4978 = !DILocalVariable(name: "i", arg: 1, scope: !4974, file: !591, line: 4485, type: !4977)
!4979 = !DILocation(line: 4485, column: 33, scope: !4974)
!4980 = !DILocation(line: 4487, column: 12, scope: !4974)
!4981 = !DILocation(line: 4487, column: 15, scope: !4974)
!4982 = !DILocation(line: 4487, column: 20, scope: !4974)
!4983 = !DILocation(line: 4487, column: 3, scope: !4974)
!4984 = !DILocation(line: 4487, column: 6, scope: !4974)
!4985 = !DILocation(line: 4487, column: 10, scope: !4974)
!4986 = !DILocation(line: 4488, column: 1, scope: !4974)
!4987 = distinct !DISubprogram(name: "gimple_seq_first", scope: !591, file: !591, line: 159, type: !4988, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!4988 = !DISubroutineType(types: !4989)
!4989 = !{!1645, !4990}
!4990 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1590, line: 67, baseType: !4991)
!4991 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4992, size: 64)
!4992 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1642)
!4993 = !DILocalVariable(name: "s", arg: 1, scope: !4987, file: !591, line: 159, type: !4990)
!4994 = !DILocation(line: 159, column: 36, scope: !4987)
!4995 = !DILocation(line: 161, column: 10, scope: !4987)
!4996 = !DILocation(line: 161, column: 14, scope: !4987)
!4997 = !DILocation(line: 161, column: 17, scope: !4987)
!4998 = !DILocation(line: 161, column: 3, scope: !4987)
!4999 = distinct !DISubprogram(name: "gimple_label_label", scope: !591, file: !591, line: 2444, type: !5000, scopeLine: 2445, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5000 = !DISubroutineType(types: !5001)
!5001 = !{!1777, !3387}
!5002 = !DILocalVariable(name: "gs", arg: 1, scope: !4999, file: !591, line: 2444, type: !3387)
!5003 = !DILocation(line: 2444, column: 34, scope: !4999)
!5004 = !DILocation(line: 2447, column: 21, scope: !4999)
!5005 = !DILocation(line: 2447, column: 10, scope: !4999)
!5006 = !DILocation(line: 2447, column: 3, scope: !4999)
!5007 = distinct !DISubprogram(name: "record_in_finally_tree", scope: !3, file: !3, line: 225, type: !5008, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5008 = !DISubroutineType(types: !5009)
!5009 = !{null, !2995, !1589}
!5010 = !DILocalVariable(name: "child", arg: 1, scope: !5007, file: !3, line: 225, type: !2995)
!5011 = !DILocation(line: 225, column: 34, scope: !5007)
!5012 = !DILocalVariable(name: "parent", arg: 2, scope: !5007, file: !3, line: 225, type: !1589)
!5013 = !DILocation(line: 225, column: 48, scope: !5007)
!5014 = !DILocalVariable(name: "n", scope: !5007, file: !3, line: 227, type: !2991)
!5015 = !DILocation(line: 227, column: 29, scope: !5007)
!5016 = !DILocalVariable(name: "slot", scope: !5007, file: !3, line: 228, type: !2136)
!5017 = !DILocation(line: 228, column: 10, scope: !5007)
!5018 = !DILocation(line: 230, column: 7, scope: !5007)
!5019 = !DILocation(line: 230, column: 5, scope: !5007)
!5020 = !DILocation(line: 231, column: 3, scope: !5007)
!5021 = !DILocation(line: 231, column: 6, scope: !5007)
!5022 = !DILocation(line: 231, column: 14, scope: !5007)
!5023 = !DILocation(line: 232, column: 15, scope: !5007)
!5024 = !DILocation(line: 232, column: 3, scope: !5007)
!5025 = !DILocation(line: 232, column: 6, scope: !5007)
!5026 = !DILocation(line: 232, column: 13, scope: !5007)
!5027 = !DILocation(line: 234, column: 26, scope: !5007)
!5028 = !DILocation(line: 234, column: 40, scope: !5007)
!5029 = !DILocation(line: 234, column: 10, scope: !5007)
!5030 = !DILocation(line: 234, column: 8, scope: !5007)
!5031 = !DILocation(line: 235, column: 3, scope: !5007)
!5032 = !DILocation(line: 236, column: 11, scope: !5007)
!5033 = !DILocation(line: 236, column: 4, scope: !5007)
!5034 = !DILocation(line: 236, column: 9, scope: !5007)
!5035 = !DILocation(line: 237, column: 1, scope: !5007)
!5036 = distinct !DISubprogram(name: "gimple_try_kind", scope: !591, file: !591, line: 2921, type: !5037, scopeLine: 2922, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5037 = !DISubroutineType(types: !5038)
!5038 = !{!590, !3387}
!5039 = !DILocalVariable(name: "gs", arg: 1, scope: !5036, file: !591, line: 2921, type: !3387)
!5040 = !DILocation(line: 2921, column: 31, scope: !5036)
!5041 = !DILocation(line: 2924, column: 35, scope: !5036)
!5042 = !DILocation(line: 2924, column: 39, scope: !5036)
!5043 = !DILocation(line: 2924, column: 46, scope: !5036)
!5044 = !DILocation(line: 2924, column: 54, scope: !5036)
!5045 = !DILocation(line: 2924, column: 3, scope: !5036)
!5046 = distinct !DISubprogram(name: "gimple_try_eval", scope: !591, file: !591, line: 2953, type: !5047, scopeLine: 2954, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5047 = !DISubroutineType(types: !5048)
!5048 = !{!1640, !1589}
!5049 = !DILocalVariable(name: "gs", arg: 1, scope: !5046, file: !591, line: 2953, type: !1589)
!5050 = !DILocation(line: 2953, column: 25, scope: !5046)
!5051 = !DILocation(line: 2956, column: 10, scope: !5046)
!5052 = !DILocation(line: 2956, column: 14, scope: !5046)
!5053 = !DILocation(line: 2956, column: 25, scope: !5046)
!5054 = !DILocation(line: 2956, column: 3, scope: !5046)
!5055 = distinct !DISubprogram(name: "gimple_try_cleanup", scope: !591, file: !591, line: 2964, type: !5047, scopeLine: 2965, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5056 = !DILocalVariable(name: "gs", arg: 1, scope: !5055, file: !591, line: 2964, type: !1589)
!5057 = !DILocation(line: 2964, column: 28, scope: !5055)
!5058 = !DILocation(line: 2967, column: 10, scope: !5055)
!5059 = !DILocation(line: 2967, column: 14, scope: !5055)
!5060 = !DILocation(line: 2967, column: 25, scope: !5055)
!5061 = !DILocation(line: 2967, column: 3, scope: !5055)
!5062 = distinct !DISubprogram(name: "gimple_catch_handler", scope: !591, file: !591, line: 2806, type: !5047, scopeLine: 2807, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5063 = !DILocalVariable(name: "gs", arg: 1, scope: !5062, file: !591, line: 2806, type: !1589)
!5064 = !DILocation(line: 2806, column: 30, scope: !5062)
!5065 = !DILocation(line: 2809, column: 10, scope: !5062)
!5066 = !DILocation(line: 2809, column: 14, scope: !5062)
!5067 = !DILocation(line: 2809, column: 27, scope: !5062)
!5068 = !DILocation(line: 2809, column: 3, scope: !5062)
!5069 = distinct !DISubprogram(name: "gimple_eh_filter_failure", scope: !591, file: !591, line: 2869, type: !5047, scopeLine: 2870, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5070 = !DILocalVariable(name: "gs", arg: 1, scope: !5069, file: !591, line: 2869, type: !1589)
!5071 = !DILocation(line: 2869, column: 34, scope: !5069)
!5072 = !DILocation(line: 2872, column: 10, scope: !5069)
!5073 = !DILocation(line: 2872, column: 14, scope: !5069)
!5074 = !DILocation(line: 2872, column: 31, scope: !5069)
!5075 = !DILocation(line: 2872, column: 3, scope: !5069)
!5076 = distinct !DISubprogram(name: "gimple_op", scope: !591, file: !591, line: 1631, type: !5077, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5077 = !DISubroutineType(types: !5078)
!5078 = !{!1777, !3387, !7}
!5079 = !DILocalVariable(name: "gs", arg: 1, scope: !5076, file: !591, line: 1631, type: !3387)
!5080 = !DILocation(line: 1631, column: 25, scope: !5076)
!5081 = !DILocalVariable(name: "i", arg: 2, scope: !5076, file: !591, line: 1631, type: !7)
!5082 = !DILocation(line: 1631, column: 38, scope: !5076)
!5083 = !DILocation(line: 1633, column: 23, scope: !5084)
!5084 = distinct !DILexicalBlock(scope: !5076, file: !591, line: 1633, column: 7)
!5085 = !DILocation(line: 1633, column: 7, scope: !5084)
!5086 = !DILocation(line: 1633, column: 7, scope: !5076)
!5087 = !DILocation(line: 1638, column: 26, scope: !5088)
!5088 = distinct !DILexicalBlock(scope: !5084, file: !591, line: 1634, column: 5)
!5089 = !DILocation(line: 1638, column: 14, scope: !5088)
!5090 = !DILocation(line: 1638, column: 50, scope: !5088)
!5091 = !DILocation(line: 1638, column: 7, scope: !5088)
!5092 = !DILocation(line: 1641, column: 5, scope: !5084)
!5093 = !DILocation(line: 1642, column: 1, scope: !5076)
!5094 = distinct !DISubprogram(name: "gimple_has_ops", scope: !591, file: !591, line: 1274, type: !4067, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5095 = !DILocalVariable(name: "g", arg: 1, scope: !5094, file: !591, line: 1274, type: !3387)
!5096 = !DILocation(line: 1274, column: 30, scope: !5094)
!5097 = !DILocation(line: 1276, column: 23, scope: !5094)
!5098 = !DILocation(line: 1276, column: 10, scope: !5094)
!5099 = !DILocation(line: 1276, column: 26, scope: !5094)
!5100 = !DILocation(line: 1276, column: 41, scope: !5094)
!5101 = !DILocation(line: 1276, column: 57, scope: !5094)
!5102 = !DILocation(line: 1276, column: 44, scope: !5094)
!5103 = !DILocation(line: 1276, column: 60, scope: !5094)
!5104 = !DILocation(line: 0, scope: !5094)
!5105 = !DILocation(line: 1276, column: 3, scope: !5094)
!5106 = distinct !DISubprogram(name: "gimple_ops", scope: !591, file: !591, line: 1614, type: !5107, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5107 = !DISubroutineType(types: !5108)
!5108 = !{!2285, !1589}
!5109 = !DILocalVariable(name: "gs", arg: 1, scope: !5106, file: !591, line: 1614, type: !1589)
!5110 = !DILocation(line: 1614, column: 20, scope: !5106)
!5111 = !DILocalVariable(name: "off", scope: !5106, file: !591, line: 1616, type: !2138)
!5112 = !DILocation(line: 1616, column: 10, scope: !5106)
!5113 = !DILocation(line: 1621, column: 56, scope: !5106)
!5114 = !DILocation(line: 1621, column: 28, scope: !5106)
!5115 = !DILocation(line: 1621, column: 9, scope: !5106)
!5116 = !DILocation(line: 1621, column: 7, scope: !5106)
!5117 = !DILocation(line: 1622, column: 3, scope: !5106)
!5118 = !DILocation(line: 1624, column: 29, scope: !5106)
!5119 = !DILocation(line: 1624, column: 20, scope: !5106)
!5120 = !DILocation(line: 1624, column: 34, scope: !5106)
!5121 = !DILocation(line: 1624, column: 32, scope: !5106)
!5122 = !DILocation(line: 1624, column: 10, scope: !5106)
!5123 = !DILocation(line: 1624, column: 3, scope: !5106)
!5124 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !591, file: !591, line: 1073, type: !5125, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5125 = !DISubroutineType(types: !5126)
!5126 = !{!635, !1589}
!5127 = !DILocalVariable(name: "gs", arg: 1, scope: !5124, file: !591, line: 1073, type: !1589)
!5128 = !DILocation(line: 1073, column: 36, scope: !5124)
!5129 = !DILocation(line: 1075, column: 37, scope: !5124)
!5130 = !DILocation(line: 1075, column: 24, scope: !5124)
!5131 = !DILocation(line: 1075, column: 10, scope: !5124)
!5132 = !DILocation(line: 1075, column: 3, scope: !5124)
!5133 = distinct !DISubprogram(name: "gss_for_code", scope: !591, file: !591, line: 1061, type: !5134, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5134 = !DISubroutineType(types: !5135)
!5135 = !{!635, !597}
!5136 = !DILocalVariable(name: "code", arg: 1, scope: !5133, file: !591, line: 1061, type: !597)
!5137 = !DILocation(line: 1061, column: 32, scope: !5133)
!5138 = !DILocation(line: 1066, column: 24, scope: !5133)
!5139 = !DILocation(line: 1066, column: 10, scope: !5133)
!5140 = !DILocation(line: 1066, column: 3, scope: !5133)
!5141 = distinct !DISubprogram(name: "lower_eh_constructs_2", scope: !3, file: !3, line: 1834, type: !5142, scopeLine: 1835, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5142 = !DISubroutineType(types: !5143)
!5143 = !{null, !3020, !4977}
!5144 = !DILocalVariable(name: "state", arg: 1, scope: !5141, file: !3, line: 1834, type: !3020)
!5145 = !DILocation(line: 1834, column: 42, scope: !5141)
!5146 = !DILocalVariable(name: "gsi", arg: 2, scope: !5141, file: !3, line: 1834, type: !4977)
!5147 = !DILocation(line: 1834, column: 71, scope: !5141)
!5148 = !DILocalVariable(name: "replace", scope: !5141, file: !3, line: 1836, type: !1640)
!5149 = !DILocation(line: 1836, column: 14, scope: !5141)
!5150 = !DILocalVariable(name: "x", scope: !5141, file: !3, line: 1837, type: !1589)
!5151 = !DILocation(line: 1837, column: 10, scope: !5141)
!5152 = !DILocalVariable(name: "stmt", scope: !5141, file: !3, line: 1838, type: !1589)
!5153 = !DILocation(line: 1838, column: 10, scope: !5141)
!5154 = !DILocation(line: 1838, column: 28, scope: !5141)
!5155 = !DILocation(line: 1838, column: 17, scope: !5141)
!5156 = !DILocation(line: 1840, column: 24, scope: !5141)
!5157 = !DILocation(line: 1840, column: 11, scope: !5141)
!5158 = !DILocation(line: 1840, column: 3, scope: !5141)
!5159 = !DILocalVariable(name: "fndecl", scope: !5160, file: !3, line: 1844, type: !1777)
!5160 = distinct !DILexicalBlock(scope: !5161, file: !3, line: 1843, column: 7)
!5161 = distinct !DILexicalBlock(scope: !5141, file: !3, line: 1841, column: 5)
!5162 = !DILocation(line: 1844, column: 7, scope: !5160)
!5163 = !DILocation(line: 1844, column: 36, scope: !5160)
!5164 = !DILocation(line: 1844, column: 16, scope: !5160)
!5165 = !DILocalVariable(name: "rhs", scope: !5160, file: !3, line: 1845, type: !1777)
!5166 = !DILocation(line: 1845, column: 7, scope: !5160)
!5167 = !DILocalVariable(name: "lhs", scope: !5160, file: !3, line: 1845, type: !1777)
!5168 = !DILocation(line: 1845, column: 12, scope: !5160)
!5169 = !DILocation(line: 1847, column: 6, scope: !5170)
!5170 = distinct !DILexicalBlock(scope: !5160, file: !3, line: 1847, column: 6)
!5171 = !DILocation(line: 1847, column: 13, scope: !5170)
!5172 = !DILocation(line: 1847, column: 16, scope: !5170)
!5173 = !DILocation(line: 1847, column: 45, scope: !5170)
!5174 = !DILocation(line: 1847, column: 6, scope: !5160)
!5175 = !DILocation(line: 1848, column: 12, scope: !5170)
!5176 = !DILocation(line: 1848, column: 4, scope: !5170)
!5177 = !DILocation(line: 1854, column: 12, scope: !5178)
!5178 = distinct !DILexicalBlock(scope: !5179, file: !3, line: 1854, column: 12)
!5179 = distinct !DILexicalBlock(scope: !5170, file: !3, line: 1849, column: 6)
!5180 = !DILocation(line: 1854, column: 19, scope: !5178)
!5181 = !DILocation(line: 1854, column: 12, scope: !5179)
!5182 = !DILocalVariable(name: "nr", scope: !5183, file: !3, line: 1856, type: !1777)
!5183 = distinct !DILexicalBlock(scope: !5178, file: !3, line: 1855, column: 3)
!5184 = !DILocation(line: 1856, column: 10, scope: !5183)
!5185 = !DILocation(line: 1856, column: 36, scope: !5183)
!5186 = !DILocation(line: 1856, column: 43, scope: !5183)
!5187 = !DILocation(line: 1856, column: 55, scope: !5183)
!5188 = !DILocation(line: 1856, column: 15, scope: !5183)
!5189 = !DILocation(line: 1857, column: 26, scope: !5183)
!5190 = !DILocation(line: 1857, column: 35, scope: !5183)
!5191 = !DILocation(line: 1857, column: 5, scope: !5183)
!5192 = !DILocation(line: 1858, column: 3, scope: !5183)
!5193 = !DILocation(line: 1862, column: 26, scope: !5194)
!5194 = distinct !DILexicalBlock(scope: !5178, file: !3, line: 1860, column: 3)
!5195 = !DILocation(line: 1862, column: 11, scope: !5194)
!5196 = !DILocation(line: 1862, column: 9, scope: !5194)
!5197 = !DILocation(line: 1863, column: 5, scope: !5194)
!5198 = !DILocation(line: 1865, column: 8, scope: !5179)
!5199 = !DILocation(line: 1871, column: 29, scope: !5179)
!5200 = !DILocation(line: 1871, column: 14, scope: !5179)
!5201 = !DILocation(line: 1871, column: 12, scope: !5179)
!5202 = !DILocation(line: 1871, column: 8, scope: !5179)
!5203 = !DILabel(scope: !5179, name: "do_replace", file: !3, line: 1872)
!5204 = !DILocation(line: 1872, column: 6, scope: !5179)
!5205 = !DILocation(line: 1873, column: 31, scope: !5179)
!5206 = !DILocation(line: 1873, column: 14, scope: !5179)
!5207 = !DILocation(line: 1873, column: 12, scope: !5179)
!5208 = !DILocation(line: 1874, column: 12, scope: !5179)
!5209 = !DILocation(line: 1874, column: 10, scope: !5179)
!5210 = !DILocation(line: 1875, column: 27, scope: !5179)
!5211 = !DILocation(line: 1875, column: 32, scope: !5179)
!5212 = !DILocation(line: 1875, column: 8, scope: !5179)
!5213 = !DILocation(line: 1880, column: 20, scope: !5179)
!5214 = !DILocation(line: 1880, column: 8, scope: !5179)
!5215 = !DILocation(line: 1881, column: 8, scope: !5179)
!5216 = !DILocation(line: 1884, column: 8, scope: !5179)
!5217 = !DILocation(line: 1885, column: 6, scope: !5179)
!5218 = !DILocation(line: 1886, column: 7, scope: !5160)
!5219 = !DILocation(line: 1895, column: 31, scope: !5220)
!5220 = distinct !DILexicalBlock(scope: !5161, file: !3, line: 1895, column: 11)
!5221 = !DILocation(line: 1895, column: 11, scope: !5220)
!5222 = !DILocation(line: 1896, column: 4, scope: !5220)
!5223 = !DILocation(line: 1896, column: 23, scope: !5220)
!5224 = !DILocation(line: 1896, column: 7, scope: !5220)
!5225 = !DILocation(line: 1897, column: 4, scope: !5220)
!5226 = !DILocation(line: 1897, column: 33, scope: !5220)
!5227 = !DILocation(line: 1897, column: 7, scope: !5220)
!5228 = !DILocation(line: 1898, column: 4, scope: !5220)
!5229 = !DILocation(line: 1898, column: 44, scope: !5220)
!5230 = !DILocation(line: 1898, column: 28, scope: !5220)
!5231 = !DILocation(line: 1898, column: 8, scope: !5220)
!5232 = !DILocation(line: 1899, column: 4, scope: !5220)
!5233 = !DILocation(line: 1899, column: 27, scope: !5220)
!5234 = !DILocation(line: 1899, column: 7, scope: !5220)
!5235 = !DILocation(line: 1895, column: 11, scope: !5161)
!5236 = !DILocalVariable(name: "lhs", scope: !5237, file: !3, line: 1901, type: !1777)
!5237 = distinct !DILexicalBlock(scope: !5220, file: !3, line: 1900, column: 2)
!5238 = !DILocation(line: 1901, column: 9, scope: !5237)
!5239 = !DILocation(line: 1901, column: 31, scope: !5237)
!5240 = !DILocation(line: 1901, column: 15, scope: !5237)
!5241 = !DILocalVariable(name: "tmp", scope: !5237, file: !3, line: 1902, type: !1777)
!5242 = !DILocation(line: 1902, column: 9, scope: !5237)
!5243 = !DILocation(line: 1902, column: 31, scope: !5237)
!5244 = !DILocation(line: 1902, column: 15, scope: !5237)
!5245 = !DILocalVariable(name: "s", scope: !5237, file: !3, line: 1903, type: !1589)
!5246 = !DILocation(line: 1903, column: 11, scope: !5237)
!5247 = !DILocation(line: 1903, column: 15, scope: !5237)
!5248 = !DILocation(line: 1904, column: 25, scope: !5237)
!5249 = !DILocation(line: 1904, column: 45, scope: !5237)
!5250 = !DILocation(line: 1904, column: 28, scope: !5237)
!5251 = !DILocation(line: 1904, column: 4, scope: !5237)
!5252 = !DILocation(line: 1905, column: 22, scope: !5237)
!5253 = !DILocation(line: 1905, column: 39, scope: !5237)
!5254 = !DILocation(line: 1905, column: 25, scope: !5237)
!5255 = !DILocation(line: 1905, column: 4, scope: !5237)
!5256 = !DILocation(line: 1906, column: 20, scope: !5237)
!5257 = !DILocation(line: 1906, column: 26, scope: !5237)
!5258 = !DILocation(line: 1906, column: 4, scope: !5237)
!5259 = !DILocation(line: 1907, column: 8, scope: !5260)
!5260 = distinct !DILexicalBlock(scope: !5237, file: !3, line: 1907, column: 8)
!5261 = !DILocation(line: 1907, column: 36, scope: !5260)
!5262 = !DILocation(line: 1908, column: 8, scope: !5260)
!5263 = !DILocation(line: 1908, column: 11, scope: !5260)
!5264 = !DILocation(line: 1908, column: 39, scope: !5260)
!5265 = !DILocation(line: 1907, column: 8, scope: !5237)
!5266 = !DILocation(line: 1909, column: 6, scope: !5260)
!5267 = !DILocation(line: 1909, column: 30, scope: !5260)
!5268 = !DILocation(line: 1910, column: 22, scope: !5237)
!5269 = !DILocation(line: 1910, column: 27, scope: !5237)
!5270 = !DILocation(line: 1910, column: 4, scope: !5237)
!5271 = !DILocation(line: 1911, column: 2, scope: !5237)
!5272 = !DILocation(line: 1913, column: 11, scope: !5273)
!5273 = distinct !DILexicalBlock(scope: !5161, file: !3, line: 1913, column: 11)
!5274 = !DILocation(line: 1913, column: 18, scope: !5273)
!5275 = !DILocation(line: 1913, column: 29, scope: !5273)
!5276 = !DILocation(line: 1913, column: 52, scope: !5273)
!5277 = !DILocation(line: 1913, column: 32, scope: !5273)
!5278 = !DILocation(line: 1913, column: 11, scope: !5161)
!5279 = !DILocation(line: 1915, column: 27, scope: !5280)
!5280 = distinct !DILexicalBlock(scope: !5273, file: !3, line: 1914, column: 2)
!5281 = !DILocation(line: 1915, column: 34, scope: !5280)
!5282 = !DILocation(line: 1915, column: 46, scope: !5280)
!5283 = !DILocation(line: 1915, column: 4, scope: !5280)
!5284 = !DILocation(line: 1916, column: 38, scope: !5280)
!5285 = !DILocation(line: 1916, column: 45, scope: !5280)
!5286 = !DILocation(line: 1916, column: 4, scope: !5280)
!5287 = !DILocation(line: 1917, column: 2, scope: !5280)
!5288 = !DILocation(line: 1918, column: 7, scope: !5161)
!5289 = !DILocation(line: 1923, column: 35, scope: !5161)
!5290 = !DILocation(line: 1923, column: 42, scope: !5161)
!5291 = !DILocation(line: 1923, column: 7, scope: !5161)
!5292 = !DILocation(line: 1924, column: 7, scope: !5161)
!5293 = !DILocation(line: 1928, column: 7, scope: !5161)
!5294 = !DILocation(line: 1931, column: 28, scope: !5295)
!5295 = distinct !DILexicalBlock(scope: !5161, file: !3, line: 1931, column: 11)
!5296 = !DILocation(line: 1931, column: 11, scope: !5295)
!5297 = !DILocation(line: 1931, column: 34, scope: !5295)
!5298 = !DILocation(line: 1931, column: 11, scope: !5161)
!5299 = !DILocation(line: 1932, column: 31, scope: !5295)
!5300 = !DILocation(line: 1932, column: 38, scope: !5295)
!5301 = !DILocation(line: 1932, column: 12, scope: !5295)
!5302 = !DILocation(line: 1932, column: 10, scope: !5295)
!5303 = !DILocation(line: 1932, column: 2, scope: !5295)
!5304 = !DILocation(line: 1935, column: 51, scope: !5305)
!5305 = distinct !DILexicalBlock(scope: !5295, file: !3, line: 1934, column: 2)
!5306 = !DILocation(line: 1935, column: 31, scope: !5305)
!5307 = !DILocation(line: 1935, column: 8, scope: !5305)
!5308 = !DILocation(line: 1935, column: 6, scope: !5305)
!5309 = !DILocation(line: 1936, column: 9, scope: !5310)
!5310 = distinct !DILexicalBlock(scope: !5305, file: !3, line: 1936, column: 8)
!5311 = !DILocation(line: 1936, column: 8, scope: !5305)
!5312 = !DILocation(line: 1938, column: 35, scope: !5313)
!5313 = distinct !DILexicalBlock(scope: !5310, file: !3, line: 1937, column: 6)
!5314 = !DILocation(line: 1938, column: 18, scope: !5313)
!5315 = !DILocation(line: 1938, column: 16, scope: !5313)
!5316 = !DILocation(line: 1939, column: 31, scope: !5313)
!5317 = !DILocation(line: 1939, column: 38, scope: !5313)
!5318 = !DILocation(line: 1939, column: 8, scope: !5313)
!5319 = !DILocation(line: 1940, column: 6, scope: !5313)
!5320 = !DILocation(line: 1942, column: 27, scope: !5310)
!5321 = !DILocation(line: 1942, column: 14, scope: !5310)
!5322 = !DILocation(line: 1942, column: 6, scope: !5310)
!5323 = !DILocation(line: 1945, column: 30, scope: !5324)
!5324 = distinct !DILexicalBlock(scope: !5310, file: !3, line: 1943, column: 8)
!5325 = !DILocation(line: 1945, column: 37, scope: !5324)
!5326 = !DILocation(line: 1945, column: 17, scope: !5324)
!5327 = !DILocation(line: 1945, column: 15, scope: !5324)
!5328 = !DILocation(line: 1946, column: 7, scope: !5324)
!5329 = !DILocation(line: 1948, column: 34, scope: !5324)
!5330 = !DILocation(line: 1948, column: 41, scope: !5324)
!5331 = !DILocation(line: 1948, column: 17, scope: !5324)
!5332 = !DILocation(line: 1948, column: 15, scope: !5324)
!5333 = !DILocation(line: 1949, column: 7, scope: !5324)
!5334 = !DILocation(line: 1951, column: 42, scope: !5324)
!5335 = !DILocation(line: 1951, column: 49, scope: !5324)
!5336 = !DILocation(line: 1951, column: 17, scope: !5324)
!5337 = !DILocation(line: 1951, column: 15, scope: !5324)
!5338 = !DILocation(line: 1952, column: 7, scope: !5324)
!5339 = !DILocation(line: 1954, column: 32, scope: !5324)
!5340 = !DILocation(line: 1954, column: 39, scope: !5324)
!5341 = !DILocation(line: 1954, column: 17, scope: !5324)
!5342 = !DILocation(line: 1954, column: 15, scope: !5324)
!5343 = !DILocation(line: 1955, column: 7, scope: !5324)
!5344 = !DILocation(line: 1961, column: 30, scope: !5161)
!5345 = !DILocation(line: 1961, column: 35, scope: !5161)
!5346 = !DILocation(line: 1961, column: 7, scope: !5161)
!5347 = !DILocation(line: 1962, column: 19, scope: !5161)
!5348 = !DILocation(line: 1962, column: 7, scope: !5161)
!5349 = !DILocation(line: 1965, column: 7, scope: !5161)
!5350 = !DILocation(line: 1970, column: 7, scope: !5161)
!5351 = !DILocation(line: 1973, column: 13, scope: !5141)
!5352 = !DILocation(line: 1973, column: 3, scope: !5141)
!5353 = !DILocation(line: 1974, column: 1, scope: !5141)
!5354 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !591, file: !591, line: 1954, type: !5000, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5355 = !DILocalVariable(name: "gs", arg: 1, scope: !5354, file: !591, line: 1954, type: !3387)
!5356 = !DILocation(line: 1954, column: 34, scope: !5354)
!5357 = !DILocalVariable(name: "addr", scope: !5354, file: !591, line: 1956, type: !1777)
!5358 = !DILocation(line: 1956, column: 8, scope: !5354)
!5359 = !DILocation(line: 1956, column: 31, scope: !5354)
!5360 = !DILocation(line: 1956, column: 15, scope: !5354)
!5361 = !DILocation(line: 1957, column: 7, scope: !5362)
!5362 = distinct !DILexicalBlock(scope: !5354, file: !591, line: 1957, column: 7)
!5363 = !DILocation(line: 1957, column: 24, scope: !5362)
!5364 = !DILocation(line: 1957, column: 7, scope: !5354)
!5365 = !DILocation(line: 1958, column: 12, scope: !5362)
!5366 = !DILocation(line: 1958, column: 5, scope: !5362)
!5367 = !DILocation(line: 1959, column: 3, scope: !5354)
!5368 = !DILocation(line: 1960, column: 1, scope: !5354)
!5369 = distinct !DISubprogram(name: "gimple_call_set_arg", scope: !591, file: !591, line: 2046, type: !5370, scopeLine: 2047, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5370 = !DISubroutineType(types: !5371)
!5371 = !{null, !1589, !7, !1777}
!5372 = !DILocalVariable(name: "gs", arg: 1, scope: !5369, file: !591, line: 2046, type: !1589)
!5373 = !DILocation(line: 2046, column: 29, scope: !5369)
!5374 = !DILocalVariable(name: "index", arg: 2, scope: !5369, file: !591, line: 2046, type: !7)
!5375 = !DILocation(line: 2046, column: 42, scope: !5369)
!5376 = !DILocalVariable(name: "arg", arg: 3, scope: !5369, file: !591, line: 2046, type: !1777)
!5377 = !DILocation(line: 2046, column: 54, scope: !5369)
!5378 = !DILocation(line: 2049, column: 18, scope: !5369)
!5379 = !DILocation(line: 2049, column: 22, scope: !5369)
!5380 = !DILocation(line: 2049, column: 28, scope: !5369)
!5381 = !DILocation(line: 2049, column: 33, scope: !5369)
!5382 = !DILocation(line: 2049, column: 3, scope: !5369)
!5383 = !DILocation(line: 2050, column: 1, scope: !5369)
!5384 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !591, file: !591, line: 1878, type: !5000, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5385 = !DILocalVariable(name: "gs", arg: 1, scope: !5384, file: !591, line: 1878, type: !3387)
!5386 = !DILocation(line: 1878, column: 31, scope: !5384)
!5387 = !DILocation(line: 1881, column: 21, scope: !5384)
!5388 = !DILocation(line: 1881, column: 10, scope: !5384)
!5389 = !DILocation(line: 1881, column: 3, scope: !5384)
!5390 = distinct !DISubprogram(name: "gimple_has_lhs", scope: !591, file: !591, line: 2210, type: !3223, scopeLine: 2211, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5391 = !DILocalVariable(name: "stmt", arg: 1, scope: !5390, file: !591, line: 2210, type: !1589)
!5392 = !DILocation(line: 2210, column: 24, scope: !5390)
!5393 = !DILocation(line: 2212, column: 29, scope: !5390)
!5394 = !DILocation(line: 2212, column: 11, scope: !5390)
!5395 = !DILocation(line: 2213, column: 4, scope: !5390)
!5396 = !DILocation(line: 2213, column: 24, scope: !5390)
!5397 = !DILocation(line: 2213, column: 8, scope: !5390)
!5398 = !DILocation(line: 2214, column: 8, scope: !5390)
!5399 = !DILocation(line: 2214, column: 28, scope: !5390)
!5400 = !DILocation(line: 2214, column: 11, scope: !5390)
!5401 = !DILocation(line: 2214, column: 34, scope: !5390)
!5402 = !DILocation(line: 0, scope: !5390)
!5403 = !DILocation(line: 2212, column: 10, scope: !5390)
!5404 = !DILocation(line: 2212, column: 3, scope: !5390)
!5405 = distinct !DISubprogram(name: "gimple_set_location", scope: !591, file: !591, line: 1156, type: !5406, scopeLine: 1157, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5406 = !DISubroutineType(types: !5407)
!5407 = !{null, !1589, !1608}
!5408 = !DILocalVariable(name: "g", arg: 1, scope: !5405, file: !591, line: 1156, type: !1589)
!5409 = !DILocation(line: 1156, column: 29, scope: !5405)
!5410 = !DILocalVariable(name: "location", arg: 2, scope: !5405, file: !591, line: 1156, type: !1608)
!5411 = !DILocation(line: 1156, column: 43, scope: !5405)
!5412 = !DILocation(line: 1158, column: 24, scope: !5405)
!5413 = !DILocation(line: 1158, column: 3, scope: !5405)
!5414 = !DILocation(line: 1158, column: 6, scope: !5405)
!5415 = !DILocation(line: 1158, column: 13, scope: !5405)
!5416 = !DILocation(line: 1158, column: 22, scope: !5405)
!5417 = !DILocation(line: 1159, column: 1, scope: !5405)
!5418 = distinct !DISubprogram(name: "gimple_location", scope: !591, file: !591, line: 1139, type: !5419, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5419 = !DISubroutineType(types: !5420)
!5420 = !{!1608, !3387}
!5421 = !DILocalVariable(name: "g", arg: 1, scope: !5418, file: !591, line: 1139, type: !3387)
!5422 = !DILocation(line: 1139, column: 31, scope: !5418)
!5423 = !DILocation(line: 1141, column: 10, scope: !5418)
!5424 = !DILocation(line: 1141, column: 13, scope: !5418)
!5425 = !DILocation(line: 1141, column: 20, scope: !5418)
!5426 = !DILocation(line: 1141, column: 3, scope: !5418)
!5427 = distinct !DISubprogram(name: "gimple_set_block", scope: !591, file: !591, line: 1130, type: !5428, scopeLine: 1131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5428 = !DISubroutineType(types: !5429)
!5429 = !{null, !1589, !1777}
!5430 = !DILocalVariable(name: "g", arg: 1, scope: !5427, file: !591, line: 1130, type: !1589)
!5431 = !DILocation(line: 1130, column: 26, scope: !5427)
!5432 = !DILocalVariable(name: "block", arg: 2, scope: !5427, file: !591, line: 1130, type: !1777)
!5433 = !DILocation(line: 1130, column: 34, scope: !5427)
!5434 = !DILocation(line: 1132, column: 21, scope: !5427)
!5435 = !DILocation(line: 1132, column: 3, scope: !5427)
!5436 = !DILocation(line: 1132, column: 6, scope: !5427)
!5437 = !DILocation(line: 1132, column: 13, scope: !5427)
!5438 = !DILocation(line: 1132, column: 19, scope: !5427)
!5439 = !DILocation(line: 1133, column: 1, scope: !5427)
!5440 = distinct !DISubprogram(name: "gimple_block", scope: !591, file: !591, line: 1121, type: !5000, scopeLine: 1122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5441 = !DILocalVariable(name: "g", arg: 1, scope: !5440, file: !591, line: 1121, type: !3387)
!5442 = !DILocation(line: 1121, column: 28, scope: !5440)
!5443 = !DILocation(line: 1123, column: 10, scope: !5440)
!5444 = !DILocation(line: 1123, column: 13, scope: !5440)
!5445 = !DILocation(line: 1123, column: 20, scope: !5440)
!5446 = !DILocation(line: 1123, column: 3, scope: !5440)
!5447 = distinct !DISubprogram(name: "record_stmt_eh_region", scope: !3, file: !3, line: 126, type: !5448, scopeLine: 127, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5448 = !DISubroutineType(types: !5449)
!5449 = !{null, !2037, !1589}
!5450 = !DILocalVariable(name: "region", arg: 1, scope: !5447, file: !3, line: 126, type: !2037)
!5451 = !DILocation(line: 126, column: 34, scope: !5447)
!5452 = !DILocalVariable(name: "t", arg: 2, scope: !5447, file: !3, line: 126, type: !1589)
!5453 = !DILocation(line: 126, column: 49, scope: !5447)
!5454 = !DILocation(line: 128, column: 7, scope: !5455)
!5455 = distinct !DILexicalBlock(scope: !5447, file: !3, line: 128, column: 7)
!5456 = !DILocation(line: 128, column: 14, scope: !5455)
!5457 = !DILocation(line: 128, column: 7, scope: !5447)
!5458 = !DILocation(line: 129, column: 5, scope: !5455)
!5459 = !DILocation(line: 130, column: 7, scope: !5460)
!5460 = distinct !DILexicalBlock(scope: !5447, file: !3, line: 130, column: 7)
!5461 = !DILocation(line: 130, column: 15, scope: !5460)
!5462 = !DILocation(line: 130, column: 20, scope: !5460)
!5463 = !DILocation(line: 130, column: 7, scope: !5447)
!5464 = !DILocation(line: 131, column: 27, scope: !5460)
!5465 = !DILocation(line: 131, column: 33, scope: !5460)
!5466 = !DILocation(line: 131, column: 37, scope: !5460)
!5467 = !DILocation(line: 131, column: 45, scope: !5460)
!5468 = !DILocation(line: 131, column: 36, scope: !5460)
!5469 = !DILocation(line: 131, column: 5, scope: !5460)
!5470 = !DILocalVariable(name: "lp", scope: !5471, file: !3, line: 134, type: !2111)
!5471 = distinct !DILexicalBlock(scope: !5460, file: !3, line: 133, column: 5)
!5472 = !DILocation(line: 134, column: 22, scope: !5471)
!5473 = !DILocation(line: 134, column: 27, scope: !5471)
!5474 = !DILocation(line: 134, column: 35, scope: !5471)
!5475 = !DILocation(line: 135, column: 11, scope: !5476)
!5476 = distinct !DILexicalBlock(scope: !5471, file: !3, line: 135, column: 11)
!5477 = !DILocation(line: 135, column: 14, scope: !5476)
!5478 = !DILocation(line: 135, column: 11, scope: !5471)
!5479 = !DILocation(line: 136, column: 27, scope: !5476)
!5480 = !DILocation(line: 136, column: 7, scope: !5476)
!5481 = !DILocation(line: 136, column: 5, scope: !5476)
!5482 = !DILocation(line: 136, column: 2, scope: !5476)
!5483 = !DILocation(line: 138, column: 2, scope: !5476)
!5484 = !DILocation(line: 139, column: 29, scope: !5471)
!5485 = !DILocation(line: 139, column: 35, scope: !5471)
!5486 = !DILocation(line: 139, column: 38, scope: !5471)
!5487 = !DILocation(line: 139, column: 42, scope: !5471)
!5488 = !DILocation(line: 139, column: 7, scope: !5471)
!5489 = !DILocation(line: 141, column: 1, scope: !5447)
!5490 = distinct !DISubprogram(name: "note_eh_region_may_contain_throw", scope: !3, file: !3, line: 850, type: !5491, scopeLine: 851, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5491 = !DISubroutineType(types: !5492)
!5492 = !{null, !2037}
!5493 = !DILocalVariable(name: "region", arg: 1, scope: !5490, file: !3, line: 850, type: !2037)
!5494 = !DILocation(line: 850, column: 45, scope: !5490)
!5495 = !DILocation(line: 852, column: 3, scope: !5490)
!5496 = !DILocation(line: 852, column: 25, scope: !5490)
!5497 = !DILocation(line: 852, column: 58, scope: !5490)
!5498 = !DILocation(line: 852, column: 66, scope: !5490)
!5499 = !DILocation(line: 852, column: 11, scope: !5490)
!5500 = !DILocation(line: 852, column: 10, scope: !5490)
!5501 = !DILocation(line: 854, column: 23, scope: !5502)
!5502 = distinct !DILexicalBlock(scope: !5490, file: !3, line: 853, column: 5)
!5503 = !DILocation(line: 854, column: 56, scope: !5502)
!5504 = !DILocation(line: 854, column: 64, scope: !5502)
!5505 = !DILocation(line: 854, column: 7, scope: !5502)
!5506 = !DILocation(line: 855, column: 16, scope: !5502)
!5507 = !DILocation(line: 855, column: 24, scope: !5502)
!5508 = !DILocation(line: 855, column: 14, scope: !5502)
!5509 = !DILocation(line: 856, column: 11, scope: !5510)
!5510 = distinct !DILexicalBlock(scope: !5502, file: !3, line: 856, column: 11)
!5511 = !DILocation(line: 856, column: 18, scope: !5510)
!5512 = !DILocation(line: 856, column: 11, scope: !5502)
!5513 = !DILocation(line: 857, column: 2, scope: !5510)
!5514 = distinct !{!5514, !5495, !5515}
!5515 = !DILocation(line: 858, column: 5, scope: !5490)
!5516 = !DILocation(line: 859, column: 1, scope: !5490)
!5517 = distinct !DISubprogram(name: "maybe_record_in_goto_queue", scope: !3, file: !3, line: 655, type: !5518, scopeLine: 656, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5518 = !DISubroutineType(types: !5519)
!5519 = !{null, !3020, !1589}
!5520 = !DILocalVariable(name: "state", arg: 1, scope: !5517, file: !3, line: 655, type: !3020)
!5521 = !DILocation(line: 655, column: 47, scope: !5517)
!5522 = !DILocalVariable(name: "stmt", arg: 2, scope: !5517, file: !3, line: 655, type: !1589)
!5523 = !DILocation(line: 655, column: 61, scope: !5517)
!5524 = !DILocalVariable(name: "tf", scope: !5517, file: !3, line: 657, type: !3026)
!5525 = !DILocation(line: 657, column: 24, scope: !5517)
!5526 = !DILocation(line: 657, column: 29, scope: !5517)
!5527 = !DILocation(line: 657, column: 36, scope: !5517)
!5528 = !DILocalVariable(name: "new_stmt", scope: !5517, file: !3, line: 658, type: !2995)
!5529 = !DILocation(line: 658, column: 12, scope: !5517)
!5530 = !DILocation(line: 660, column: 8, scope: !5531)
!5531 = distinct !DILexicalBlock(scope: !5517, file: !3, line: 660, column: 7)
!5532 = !DILocation(line: 660, column: 7, scope: !5517)
!5533 = !DILocation(line: 661, column: 5, scope: !5531)
!5534 = !DILocation(line: 663, column: 24, scope: !5517)
!5535 = !DILocation(line: 663, column: 11, scope: !5517)
!5536 = !DILocation(line: 663, column: 3, scope: !5517)
!5537 = !DILocation(line: 666, column: 36, scope: !5538)
!5538 = distinct !DILexicalBlock(scope: !5517, file: !3, line: 664, column: 5)
!5539 = !DILocation(line: 666, column: 21, scope: !5538)
!5540 = !DILocation(line: 666, column: 16, scope: !5538)
!5541 = !DILocation(line: 666, column: 19, scope: !5538)
!5542 = !DILocation(line: 667, column: 35, scope: !5538)
!5543 = !DILocation(line: 667, column: 73, scope: !5538)
!5544 = !DILocation(line: 667, column: 49, scope: !5538)
!5545 = !DILocation(line: 667, column: 7, scope: !5538)
!5546 = !DILocation(line: 668, column: 36, scope: !5538)
!5547 = !DILocation(line: 668, column: 21, scope: !5538)
!5548 = !DILocation(line: 668, column: 16, scope: !5538)
!5549 = !DILocation(line: 668, column: 19, scope: !5538)
!5550 = !DILocation(line: 669, column: 35, scope: !5538)
!5551 = !DILocation(line: 669, column: 74, scope: !5538)
!5552 = !DILocation(line: 669, column: 49, scope: !5538)
!5553 = !DILocation(line: 669, column: 7, scope: !5538)
!5554 = !DILocation(line: 670, column: 7, scope: !5538)
!5555 = !DILocation(line: 672, column: 20, scope: !5538)
!5556 = !DILocation(line: 672, column: 16, scope: !5538)
!5557 = !DILocation(line: 672, column: 18, scope: !5538)
!5558 = !DILocation(line: 673, column: 35, scope: !5538)
!5559 = !DILocation(line: 673, column: 67, scope: !5538)
!5560 = !DILocation(line: 673, column: 49, scope: !5538)
!5561 = !DILocation(line: 673, column: 7, scope: !5538)
!5562 = !DILocation(line: 674, column: 7, scope: !5538)
!5563 = !DILocation(line: 677, column: 7, scope: !5538)
!5564 = !DILocation(line: 677, column: 11, scope: !5538)
!5565 = !DILocation(line: 677, column: 22, scope: !5538)
!5566 = !DILocation(line: 678, column: 20, scope: !5538)
!5567 = !DILocation(line: 678, column: 16, scope: !5538)
!5568 = !DILocation(line: 678, column: 18, scope: !5538)
!5569 = !DILocation(line: 679, column: 29, scope: !5538)
!5570 = !DILocation(line: 679, column: 7, scope: !5538)
!5571 = !DILocation(line: 680, column: 7, scope: !5538)
!5572 = !DILocation(line: 683, column: 7, scope: !5538)
!5573 = !DILocation(line: 684, column: 5, scope: !5538)
!5574 = !DILocation(line: 685, column: 1, scope: !5517)
!5575 = distinct !DISubprogram(name: "lower_try_finally", scope: !3, file: !3, line: 1529, type: !5576, scopeLine: 1530, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5576 = !DISubroutineType(types: !5577)
!5577 = !{!1640, !3020, !1589}
!5578 = !DILocalVariable(name: "state", arg: 1, scope: !5575, file: !3, line: 1529, type: !3020)
!5579 = !DILocation(line: 1529, column: 38, scope: !5575)
!5580 = !DILocalVariable(name: "tp", arg: 2, scope: !5575, file: !3, line: 1529, type: !1589)
!5581 = !DILocation(line: 1529, column: 52, scope: !5575)
!5582 = !DILocalVariable(name: "this_tf", scope: !5575, file: !3, line: 1531, type: !3027)
!5583 = !DILocation(line: 1531, column: 23, scope: !5575)
!5584 = !DILocalVariable(name: "this_state", scope: !5575, file: !3, line: 1532, type: !3021)
!5585 = !DILocation(line: 1532, column: 20, scope: !5575)
!5586 = !DILocalVariable(name: "ndests", scope: !5575, file: !3, line: 1533, type: !1679)
!5587 = !DILocation(line: 1533, column: 7, scope: !5575)
!5588 = !DILocalVariable(name: "old_eh_seq", scope: !5575, file: !3, line: 1534, type: !1640)
!5589 = !DILocation(line: 1534, column: 14, scope: !5575)
!5590 = !DILocation(line: 1538, column: 3, scope: !5575)
!5591 = !DILocation(line: 1539, column: 30, scope: !5575)
!5592 = !DILocation(line: 1539, column: 11, scope: !5575)
!5593 = !DILocation(line: 1539, column: 28, scope: !5575)
!5594 = !DILocation(line: 1540, column: 19, scope: !5575)
!5595 = !DILocation(line: 1540, column: 11, scope: !5575)
!5596 = !DILocation(line: 1540, column: 17, scope: !5575)
!5597 = !DILocation(line: 1541, column: 19, scope: !5575)
!5598 = !DILocation(line: 1541, column: 11, scope: !5575)
!5599 = !DILocation(line: 1541, column: 17, scope: !5575)
!5600 = !DILocation(line: 1542, column: 7, scope: !5601)
!5601 = distinct !DILexicalBlock(scope: !5575, file: !3, line: 1542, column: 7)
!5602 = !DILocation(line: 1542, column: 7, scope: !5575)
!5603 = !DILocation(line: 1543, column: 45, scope: !5601)
!5604 = !DILocation(line: 1543, column: 52, scope: !5601)
!5605 = !DILocation(line: 1543, column: 22, scope: !5601)
!5606 = !DILocation(line: 1543, column: 13, scope: !5601)
!5607 = !DILocation(line: 1543, column: 20, scope: !5601)
!5608 = !DILocation(line: 1543, column: 5, scope: !5601)
!5609 = !DILocation(line: 1545, column: 13, scope: !5601)
!5610 = !DILocation(line: 1545, column: 20, scope: !5601)
!5611 = !DILocation(line: 1547, column: 35, scope: !5575)
!5612 = !DILocation(line: 1547, column: 14, scope: !5575)
!5613 = !DILocation(line: 1547, column: 25, scope: !5575)
!5614 = !DILocation(line: 1548, column: 27, scope: !5575)
!5615 = !DILocation(line: 1548, column: 34, scope: !5575)
!5616 = !DILocation(line: 1548, column: 14, scope: !5575)
!5617 = !DILocation(line: 1548, column: 25, scope: !5575)
!5618 = !DILocation(line: 1549, column: 14, scope: !5575)
!5619 = !DILocation(line: 1549, column: 17, scope: !5575)
!5620 = !DILocation(line: 1551, column: 16, scope: !5575)
!5621 = !DILocation(line: 1551, column: 14, scope: !5575)
!5622 = !DILocation(line: 1552, column: 10, scope: !5575)
!5623 = !DILocation(line: 1554, column: 55, scope: !5575)
!5624 = !DILocation(line: 1554, column: 39, scope: !5575)
!5625 = !DILocation(line: 1554, column: 3, scope: !5575)
!5626 = !DILocation(line: 1557, column: 68, scope: !5575)
!5627 = !DILocation(line: 1557, column: 51, scope: !5575)
!5628 = !DILocation(line: 1557, column: 26, scope: !5575)
!5629 = !DILocation(line: 1557, column: 11, scope: !5575)
!5630 = !DILocation(line: 1557, column: 24, scope: !5575)
!5631 = !DILocation(line: 1560, column: 7, scope: !5632)
!5632 = distinct !DILexicalBlock(scope: !5575, file: !3, line: 1560, column: 7)
!5633 = !DILocation(line: 1560, column: 7, scope: !5575)
!5634 = !DILocation(line: 1561, column: 62, scope: !5632)
!5635 = !DILocation(line: 1561, column: 25, scope: !5632)
!5636 = !DILocation(line: 1561, column: 13, scope: !5632)
!5637 = !DILocation(line: 1561, column: 23, scope: !5632)
!5638 = !DILocation(line: 1561, column: 5, scope: !5632)
!5639 = !DILocation(line: 1562, column: 15, scope: !5640)
!5640 = distinct !DILexicalBlock(scope: !5575, file: !3, line: 1562, column: 7)
!5641 = !DILocation(line: 1562, column: 7, scope: !5640)
!5642 = !DILocation(line: 1562, column: 7, scope: !5575)
!5643 = !DILocation(line: 1563, column: 36, scope: !5640)
!5644 = !DILocation(line: 1563, column: 5, scope: !5640)
!5645 = !DILocation(line: 1569, column: 12, scope: !5575)
!5646 = !DILocation(line: 1569, column: 10, scope: !5575)
!5647 = !DILocation(line: 1570, column: 21, scope: !5575)
!5648 = !DILocation(line: 1570, column: 13, scope: !5575)
!5649 = !DILocation(line: 1570, column: 10, scope: !5575)
!5650 = !DILocation(line: 1571, column: 21, scope: !5575)
!5651 = !DILocation(line: 1571, column: 13, scope: !5575)
!5652 = !DILocation(line: 1571, column: 10, scope: !5575)
!5653 = !DILocation(line: 1572, column: 21, scope: !5575)
!5654 = !DILocation(line: 1572, column: 13, scope: !5575)
!5655 = !DILocation(line: 1572, column: 10, scope: !5575)
!5656 = !DILocation(line: 1575, column: 7, scope: !5657)
!5657 = distinct !DILexicalBlock(scope: !5575, file: !3, line: 1575, column: 7)
!5658 = !DILocation(line: 1575, column: 14, scope: !5657)
!5659 = !DILocation(line: 1575, column: 7, scope: !5575)
!5660 = !DILocation(line: 1577, column: 36, scope: !5661)
!5661 = distinct !DILexicalBlock(scope: !5657, file: !3, line: 1576, column: 5)
!5662 = !DILocation(line: 1577, column: 64, scope: !5661)
!5663 = !DILocation(line: 1577, column: 47, scope: !5661)
!5664 = !DILocation(line: 1577, column: 7, scope: !5661)
!5665 = !DILocation(line: 1578, column: 31, scope: !5661)
!5666 = !DILocation(line: 1578, column: 7, scope: !5661)
!5667 = !DILocation(line: 1579, column: 5, scope: !5661)
!5668 = !DILocation(line: 1583, column: 58, scope: !5669)
!5669 = distinct !DILexicalBlock(scope: !5657, file: !3, line: 1583, column: 12)
!5670 = !DILocation(line: 1583, column: 38, scope: !5669)
!5671 = !DILocation(line: 1583, column: 13, scope: !5669)
!5672 = !DILocation(line: 1583, column: 12, scope: !5657)
!5673 = !DILocation(line: 1584, column: 35, scope: !5669)
!5674 = !DILocation(line: 1584, column: 5, scope: !5669)
!5675 = !DILocation(line: 1587, column: 12, scope: !5676)
!5676 = distinct !DILexicalBlock(scope: !5669, file: !3, line: 1587, column: 12)
!5677 = !DILocation(line: 1587, column: 19, scope: !5676)
!5678 = !DILocation(line: 1587, column: 12, scope: !5669)
!5679 = !DILocation(line: 1588, column: 32, scope: !5676)
!5680 = !DILocation(line: 1588, column: 5, scope: !5676)
!5681 = !DILocation(line: 1589, column: 37, scope: !5682)
!5682 = distinct !DILexicalBlock(scope: !5676, file: !3, line: 1589, column: 12)
!5683 = !DILocation(line: 1589, column: 65, scope: !5682)
!5684 = !DILocation(line: 1589, column: 45, scope: !5682)
!5685 = !DILocation(line: 1589, column: 12, scope: !5682)
!5686 = !DILocation(line: 1589, column: 12, scope: !5676)
!5687 = !DILocation(line: 1590, column: 29, scope: !5682)
!5688 = !DILocation(line: 1590, column: 5, scope: !5682)
!5689 = !DILocation(line: 1592, column: 31, scope: !5682)
!5690 = !DILocation(line: 1592, column: 5, scope: !5682)
!5691 = !DILocation(line: 1596, column: 15, scope: !5692)
!5692 = distinct !DILexicalBlock(scope: !5575, file: !3, line: 1596, column: 7)
!5693 = !DILocation(line: 1596, column: 7, scope: !5692)
!5694 = !DILocation(line: 1596, column: 7, scope: !5575)
!5695 = !DILocalVariable(name: "x", scope: !5696, file: !3, line: 1599, type: !1589)
!5696 = distinct !DILexicalBlock(scope: !5692, file: !3, line: 1597, column: 5)
!5697 = !DILocation(line: 1599, column: 14, scope: !5696)
!5698 = !DILocation(line: 1599, column: 46, scope: !5696)
!5699 = !DILocation(line: 1599, column: 18, scope: !5696)
!5700 = !DILocation(line: 1600, column: 37, scope: !5696)
!5701 = !DILocation(line: 1600, column: 48, scope: !5696)
!5702 = !DILocation(line: 1600, column: 7, scope: !5696)
!5703 = !DILocation(line: 1601, column: 5, scope: !5696)
!5704 = !DILocation(line: 1603, column: 3, scope: !5575)
!5705 = !DILocation(line: 1604, column: 15, scope: !5706)
!5706 = distinct !DILexicalBlock(scope: !5575, file: !3, line: 1604, column: 7)
!5707 = !DILocation(line: 1604, column: 7, scope: !5706)
!5708 = !DILocation(line: 1604, column: 7, scope: !5575)
!5709 = !DILocation(line: 1605, column: 19, scope: !5706)
!5710 = !DILocation(line: 1605, column: 11, scope: !5706)
!5711 = !DILocation(line: 1605, column: 5, scope: !5706)
!5712 = !DILocation(line: 1606, column: 15, scope: !5713)
!5713 = distinct !DILexicalBlock(scope: !5575, file: !3, line: 1606, column: 7)
!5714 = !DILocation(line: 1606, column: 7, scope: !5713)
!5715 = !DILocation(line: 1606, column: 7, scope: !5575)
!5716 = !DILocation(line: 1607, column: 34, scope: !5713)
!5717 = !DILocation(line: 1607, column: 5, scope: !5713)
!5718 = !DILocation(line: 1611, column: 7, scope: !5719)
!5719 = distinct !DILexicalBlock(scope: !5575, file: !3, line: 1611, column: 7)
!5720 = !DILocation(line: 1611, column: 7, scope: !5575)
!5721 = !DILocation(line: 1613, column: 11, scope: !5722)
!5722 = distinct !DILexicalBlock(scope: !5723, file: !3, line: 1613, column: 11)
!5723 = distinct !DILexicalBlock(scope: !5719, file: !3, line: 1612, column: 5)
!5724 = !DILocation(line: 1613, column: 18, scope: !5722)
!5725 = !DILocation(line: 1613, column: 11, scope: !5723)
!5726 = !DILocation(line: 1614, column: 11, scope: !5722)
!5727 = !DILocation(line: 1614, column: 9, scope: !5722)
!5728 = !DILocation(line: 1614, column: 2, scope: !5722)
!5729 = !DILocalVariable(name: "new_eh_seq", scope: !5730, file: !3, line: 1617, type: !1640)
!5730 = distinct !DILexicalBlock(scope: !5722, file: !3, line: 1616, column: 2)
!5731 = !DILocation(line: 1617, column: 15, scope: !5730)
!5732 = !DILocation(line: 1617, column: 28, scope: !5730)
!5733 = !DILocation(line: 1618, column: 13, scope: !5730)
!5734 = !DILocation(line: 1618, column: 11, scope: !5730)
!5735 = !DILocation(line: 1619, column: 32, scope: !5730)
!5736 = !DILocation(line: 1619, column: 4, scope: !5730)
!5737 = !DILocation(line: 1621, column: 5, scope: !5723)
!5738 = !DILocation(line: 1623, column: 18, scope: !5575)
!5739 = !DILocation(line: 1623, column: 3, scope: !5575)
!5740 = distinct !DISubprogram(name: "gimple_seq_first_stmt", scope: !591, file: !591, line: 168, type: !5741, scopeLine: 169, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5741 = !DISubroutineType(types: !5742)
!5742 = !{!1589, !4990}
!5743 = !DILocalVariable(name: "s", arg: 1, scope: !5740, file: !591, line: 168, type: !4990)
!5744 = !DILocation(line: 168, column: 41, scope: !5740)
!5745 = !DILocalVariable(name: "n", scope: !5740, file: !591, line: 170, type: !1645)
!5746 = !DILocation(line: 170, column: 19, scope: !5740)
!5747 = !DILocation(line: 170, column: 41, scope: !5740)
!5748 = !DILocation(line: 170, column: 23, scope: !5740)
!5749 = !DILocation(line: 171, column: 11, scope: !5740)
!5750 = !DILocation(line: 171, column: 10, scope: !5740)
!5751 = !DILocation(line: 171, column: 16, scope: !5740)
!5752 = !DILocation(line: 171, column: 19, scope: !5740)
!5753 = !DILocation(line: 171, column: 3, scope: !5740)
!5754 = distinct !DISubprogram(name: "lower_catch", scope: !3, file: !3, line: 1631, type: !5576, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5755 = !DILocalVariable(name: "state", arg: 1, scope: !5754, file: !3, line: 1631, type: !3020)
!5756 = !DILocation(line: 1631, column: 32, scope: !5754)
!5757 = !DILocalVariable(name: "tp", arg: 2, scope: !5754, file: !3, line: 1631, type: !1589)
!5758 = !DILocation(line: 1631, column: 46, scope: !5754)
!5759 = !DILocalVariable(name: "try_region", scope: !5754, file: !3, line: 1633, type: !2037)
!5760 = !DILocation(line: 1633, column: 13, scope: !5754)
!5761 = !DILocalVariable(name: "this_state", scope: !5754, file: !3, line: 1634, type: !3021)
!5762 = !DILocation(line: 1634, column: 20, scope: !5754)
!5763 = !DILocation(line: 1634, column: 34, scope: !5754)
!5764 = !DILocation(line: 1634, column: 33, scope: !5754)
!5765 = !DILocalVariable(name: "gsi", scope: !5754, file: !3, line: 1635, type: !4816)
!5766 = !DILocation(line: 1635, column: 24, scope: !5754)
!5767 = !DILocalVariable(name: "out_label", scope: !5754, file: !3, line: 1636, type: !1777)
!5768 = !DILocation(line: 1636, column: 8, scope: !5754)
!5769 = !DILocalVariable(name: "new_seq", scope: !5754, file: !3, line: 1637, type: !1640)
!5770 = !DILocation(line: 1637, column: 14, scope: !5754)
!5771 = !DILocalVariable(name: "x", scope: !5754, file: !3, line: 1638, type: !1589)
!5772 = !DILocation(line: 1638, column: 10, scope: !5754)
!5773 = !DILocalVariable(name: "try_catch_loc", scope: !5754, file: !3, line: 1639, type: !1608)
!5774 = !DILocation(line: 1639, column: 14, scope: !5754)
!5775 = !DILocation(line: 1639, column: 47, scope: !5754)
!5776 = !DILocation(line: 1639, column: 30, scope: !5754)
!5777 = !DILocation(line: 1641, column: 7, scope: !5778)
!5778 = distinct !DILexicalBlock(scope: !5754, file: !3, line: 1641, column: 7)
!5779 = !DILocation(line: 1641, column: 7, scope: !5754)
!5780 = !DILocation(line: 1643, column: 39, scope: !5781)
!5781 = distinct !DILexicalBlock(scope: !5778, file: !3, line: 1642, column: 5)
!5782 = !DILocation(line: 1643, column: 46, scope: !5781)
!5783 = !DILocation(line: 1643, column: 20, scope: !5781)
!5784 = !DILocation(line: 1643, column: 18, scope: !5781)
!5785 = !DILocation(line: 1644, column: 31, scope: !5781)
!5786 = !DILocation(line: 1644, column: 18, scope: !5781)
!5787 = !DILocation(line: 1644, column: 29, scope: !5781)
!5788 = !DILocation(line: 1645, column: 5, scope: !5781)
!5789 = !DILocation(line: 1647, column: 56, scope: !5754)
!5790 = !DILocation(line: 1647, column: 39, scope: !5754)
!5791 = !DILocation(line: 1647, column: 3, scope: !5754)
!5792 = !DILocation(line: 1649, column: 37, scope: !5793)
!5793 = distinct !DILexicalBlock(scope: !5754, file: !3, line: 1649, column: 7)
!5794 = !DILocation(line: 1649, column: 8, scope: !5793)
!5795 = !DILocation(line: 1649, column: 7, scope: !5754)
!5796 = !DILocation(line: 1650, column: 29, scope: !5793)
!5797 = !DILocation(line: 1650, column: 12, scope: !5793)
!5798 = !DILocation(line: 1650, column: 5, scope: !5793)
!5799 = !DILocation(line: 1652, column: 11, scope: !5754)
!5800 = !DILocation(line: 1653, column: 31, scope: !5754)
!5801 = !DILocation(line: 1653, column: 3, scope: !5754)
!5802 = !DILocation(line: 1654, column: 24, scope: !5754)
!5803 = !DILocation(line: 1654, column: 3, scope: !5754)
!5804 = !DILocation(line: 1656, column: 27, scope: !5754)
!5805 = !DILocation(line: 1656, column: 34, scope: !5754)
!5806 = !DILocation(line: 1656, column: 14, scope: !5754)
!5807 = !DILocation(line: 1656, column: 25, scope: !5754)
!5808 = !DILocation(line: 1657, column: 27, scope: !5754)
!5809 = !DILocation(line: 1657, column: 14, scope: !5754)
!5810 = !DILocation(line: 1657, column: 25, scope: !5754)
!5811 = !DILocation(line: 1659, column: 13, scope: !5754)
!5812 = !DILocation(line: 1660, column: 45, scope: !5813)
!5813 = distinct !DILexicalBlock(scope: !5754, file: !3, line: 1660, column: 3)
!5814 = !DILocation(line: 1660, column: 25, scope: !5813)
!5815 = !DILocation(line: 1660, column: 14, scope: !5813)
!5816 = !DILocation(line: 1660, column: 8, scope: !5813)
!5817 = !DILocation(line: 1661, column: 9, scope: !5818)
!5818 = distinct !DILexicalBlock(scope: !5813, file: !3, line: 1660, column: 3)
!5819 = !DILocation(line: 1661, column: 8, scope: !5818)
!5820 = !DILocation(line: 1660, column: 3, scope: !5813)
!5821 = !DILocalVariable(name: "c", scope: !5822, file: !3, line: 1664, type: !3327)
!5822 = distinct !DILexicalBlock(scope: !5818, file: !3, line: 1663, column: 5)
!5823 = !DILocation(line: 1664, column: 16, scope: !5822)
!5824 = !DILocalVariable(name: "gcatch", scope: !5822, file: !3, line: 1665, type: !1589)
!5825 = !DILocation(line: 1665, column: 14, scope: !5822)
!5826 = !DILocalVariable(name: "handler", scope: !5822, file: !3, line: 1666, type: !1640)
!5827 = !DILocation(line: 1666, column: 18, scope: !5822)
!5828 = !DILocation(line: 1668, column: 16, scope: !5822)
!5829 = !DILocation(line: 1668, column: 14, scope: !5822)
!5830 = !DILocation(line: 1669, column: 32, scope: !5822)
!5831 = !DILocation(line: 1669, column: 64, scope: !5822)
!5832 = !DILocation(line: 1669, column: 44, scope: !5822)
!5833 = !DILocation(line: 1669, column: 11, scope: !5822)
!5834 = !DILocation(line: 1669, column: 9, scope: !5822)
!5835 = !DILocation(line: 1671, column: 39, scope: !5822)
!5836 = !DILocation(line: 1671, column: 17, scope: !5822)
!5837 = !DILocation(line: 1671, column: 15, scope: !5822)
!5838 = !DILocation(line: 1672, column: 43, scope: !5822)
!5839 = !DILocation(line: 1672, column: 7, scope: !5822)
!5840 = !DILocation(line: 1674, column: 18, scope: !5822)
!5841 = !DILocation(line: 1674, column: 7, scope: !5822)
!5842 = !DILocation(line: 1674, column: 10, scope: !5822)
!5843 = !DILocation(line: 1674, column: 16, scope: !5822)
!5844 = !DILocation(line: 1675, column: 31, scope: !5822)
!5845 = !DILocation(line: 1675, column: 34, scope: !5822)
!5846 = !DILocation(line: 1675, column: 11, scope: !5822)
!5847 = !DILocation(line: 1675, column: 9, scope: !5822)
!5848 = !DILocation(line: 1676, column: 38, scope: !5822)
!5849 = !DILocation(line: 1676, column: 7, scope: !5822)
!5850 = !DILocation(line: 1678, column: 37, scope: !5822)
!5851 = !DILocation(line: 1678, column: 7, scope: !5822)
!5852 = !DILocation(line: 1680, column: 36, scope: !5853)
!5853 = distinct !DILexicalBlock(scope: !5822, file: !3, line: 1680, column: 11)
!5854 = !DILocation(line: 1680, column: 11, scope: !5853)
!5855 = !DILocation(line: 1680, column: 11, scope: !5822)
!5856 = !DILocation(line: 1682, column: 9, scope: !5857)
!5857 = distinct !DILexicalBlock(scope: !5858, file: !3, line: 1682, column: 8)
!5858 = distinct !DILexicalBlock(scope: !5853, file: !3, line: 1681, column: 2)
!5859 = !DILocation(line: 1682, column: 8, scope: !5858)
!5860 = !DILocation(line: 1683, column: 43, scope: !5857)
!5861 = !DILocation(line: 1683, column: 18, scope: !5857)
!5862 = !DILocation(line: 1683, column: 16, scope: !5857)
!5863 = !DILocation(line: 1683, column: 6, scope: !5857)
!5864 = !DILocation(line: 1685, column: 27, scope: !5858)
!5865 = !DILocation(line: 1685, column: 8, scope: !5858)
!5866 = !DILocation(line: 1685, column: 6, scope: !5858)
!5867 = !DILocation(line: 1686, column: 35, scope: !5858)
!5868 = !DILocation(line: 1686, column: 4, scope: !5858)
!5869 = !DILocation(line: 1687, column: 2, scope: !5858)
!5870 = !DILocation(line: 1688, column: 12, scope: !5871)
!5871 = distinct !DILexicalBlock(scope: !5822, file: !3, line: 1688, column: 11)
!5872 = !DILocation(line: 1688, column: 15, scope: !5871)
!5873 = !DILocation(line: 1688, column: 11, scope: !5822)
!5874 = !DILocation(line: 1689, column: 2, scope: !5871)
!5875 = !DILocation(line: 1690, column: 5, scope: !5822)
!5876 = !DILocation(line: 1662, column: 8, scope: !5818)
!5877 = !DILocation(line: 1660, column: 3, scope: !5818)
!5878 = distinct !{!5878, !5820, !5879}
!5879 = !DILocation(line: 1690, column: 5, scope: !5813)
!5880 = !DILocation(line: 1692, column: 27, scope: !5754)
!5881 = !DILocation(line: 1692, column: 31, scope: !5754)
!5882 = !DILocation(line: 1692, column: 3, scope: !5754)
!5883 = !DILocation(line: 1694, column: 35, scope: !5754)
!5884 = !DILocation(line: 1694, column: 39, scope: !5754)
!5885 = !DILocation(line: 1694, column: 51, scope: !5754)
!5886 = !DILocation(line: 1694, column: 10, scope: !5754)
!5887 = !DILocation(line: 1694, column: 3, scope: !5754)
!5888 = !DILocation(line: 1695, column: 1, scope: !5754)
!5889 = distinct !DISubprogram(name: "lower_eh_filter", scope: !3, file: !3, line: 1702, type: !5576, scopeLine: 1703, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5890 = !DILocalVariable(name: "state", arg: 1, scope: !5889, file: !3, line: 1702, type: !3020)
!5891 = !DILocation(line: 1702, column: 36, scope: !5889)
!5892 = !DILocalVariable(name: "tp", arg: 2, scope: !5889, file: !3, line: 1702, type: !1589)
!5893 = !DILocation(line: 1702, column: 50, scope: !5889)
!5894 = !DILocalVariable(name: "this_state", scope: !5889, file: !3, line: 1704, type: !3021)
!5895 = !DILocation(line: 1704, column: 20, scope: !5889)
!5896 = !DILocation(line: 1704, column: 34, scope: !5889)
!5897 = !DILocation(line: 1704, column: 33, scope: !5889)
!5898 = !DILocalVariable(name: "this_region", scope: !5889, file: !3, line: 1705, type: !2037)
!5899 = !DILocation(line: 1705, column: 13, scope: !5889)
!5900 = !DILocalVariable(name: "inner", scope: !5889, file: !3, line: 1706, type: !1589)
!5901 = !DILocation(line: 1706, column: 10, scope: !5889)
!5902 = !DILocalVariable(name: "x", scope: !5889, file: !3, line: 1706, type: !1589)
!5903 = !DILocation(line: 1706, column: 17, scope: !5889)
!5904 = !DILocalVariable(name: "new_seq", scope: !5889, file: !3, line: 1707, type: !1640)
!5905 = !DILocation(line: 1707, column: 14, scope: !5889)
!5906 = !DILocation(line: 1709, column: 54, scope: !5889)
!5907 = !DILocation(line: 1709, column: 34, scope: !5889)
!5908 = !DILocation(line: 1709, column: 11, scope: !5889)
!5909 = !DILocation(line: 1709, column: 9, scope: !5889)
!5910 = !DILocation(line: 1711, column: 7, scope: !5911)
!5911 = distinct !DILexicalBlock(scope: !5889, file: !3, line: 1711, column: 7)
!5912 = !DILocation(line: 1711, column: 7, scope: !5889)
!5913 = !DILocation(line: 1713, column: 44, scope: !5914)
!5914 = distinct !DILexicalBlock(scope: !5911, file: !3, line: 1712, column: 5)
!5915 = !DILocation(line: 1713, column: 51, scope: !5914)
!5916 = !DILocation(line: 1714, column: 40, scope: !5914)
!5917 = !DILocation(line: 1714, column: 16, scope: !5914)
!5918 = !DILocation(line: 1713, column: 21, scope: !5914)
!5919 = !DILocation(line: 1713, column: 19, scope: !5914)
!5920 = !DILocation(line: 1715, column: 31, scope: !5914)
!5921 = !DILocation(line: 1715, column: 18, scope: !5914)
!5922 = !DILocation(line: 1715, column: 29, scope: !5914)
!5923 = !DILocation(line: 1716, column: 5, scope: !5914)
!5924 = !DILocation(line: 1718, column: 56, scope: !5889)
!5925 = !DILocation(line: 1718, column: 39, scope: !5889)
!5926 = !DILocation(line: 1718, column: 3, scope: !5889)
!5927 = !DILocation(line: 1720, column: 37, scope: !5928)
!5928 = distinct !DILexicalBlock(scope: !5889, file: !3, line: 1720, column: 7)
!5929 = !DILocation(line: 1720, column: 8, scope: !5928)
!5930 = !DILocation(line: 1720, column: 7, scope: !5889)
!5931 = !DILocation(line: 1721, column: 29, scope: !5928)
!5932 = !DILocation(line: 1721, column: 12, scope: !5928)
!5933 = !DILocation(line: 1721, column: 5, scope: !5928)
!5934 = !DILocation(line: 1723, column: 11, scope: !5889)
!5935 = !DILocation(line: 1724, column: 27, scope: !5889)
!5936 = !DILocation(line: 1724, column: 34, scope: !5889)
!5937 = !DILocation(line: 1724, column: 14, scope: !5889)
!5938 = !DILocation(line: 1724, column: 25, scope: !5889)
!5939 = !DILocation(line: 1725, column: 27, scope: !5889)
!5940 = !DILocation(line: 1725, column: 14, scope: !5889)
!5941 = !DILocation(line: 1725, column: 25, scope: !5889)
!5942 = !DILocation(line: 1727, column: 31, scope: !5889)
!5943 = !DILocation(line: 1727, column: 3, scope: !5889)
!5944 = !DILocation(line: 1728, column: 24, scope: !5889)
!5945 = !DILocation(line: 1728, column: 3, scope: !5889)
!5946 = !DILocation(line: 1730, column: 34, scope: !5889)
!5947 = !DILocation(line: 1730, column: 3, scope: !5889)
!5948 = !DILocation(line: 1730, column: 16, scope: !5889)
!5949 = !DILocation(line: 1730, column: 18, scope: !5889)
!5950 = !DILocation(line: 1730, column: 26, scope: !5889)
!5951 = !DILocation(line: 1730, column: 32, scope: !5889)
!5952 = !DILocation(line: 1731, column: 27, scope: !5889)
!5953 = !DILocation(line: 1731, column: 40, scope: !5889)
!5954 = !DILocation(line: 1731, column: 42, scope: !5889)
!5955 = !DILocation(line: 1731, column: 50, scope: !5889)
!5956 = !DILocation(line: 1731, column: 7, scope: !5889)
!5957 = !DILocation(line: 1731, column: 5, scope: !5889)
!5958 = !DILocation(line: 1732, column: 34, scope: !5889)
!5959 = !DILocation(line: 1732, column: 3, scope: !5889)
!5960 = !DILocation(line: 1734, column: 65, scope: !5889)
!5961 = !DILocation(line: 1734, column: 39, scope: !5889)
!5962 = !DILocation(line: 1734, column: 3, scope: !5889)
!5963 = !DILocation(line: 1735, column: 59, scope: !5889)
!5964 = !DILocation(line: 1735, column: 33, scope: !5889)
!5965 = !DILocation(line: 1735, column: 3, scope: !5889)
!5966 = !DILocation(line: 1737, column: 27, scope: !5889)
!5967 = !DILocation(line: 1737, column: 31, scope: !5889)
!5968 = !DILocation(line: 1737, column: 3, scope: !5889)
!5969 = !DILocation(line: 1739, column: 35, scope: !5889)
!5970 = !DILocation(line: 1739, column: 39, scope: !5889)
!5971 = !DILocation(line: 1739, column: 10, scope: !5889)
!5972 = !DILocation(line: 1739, column: 3, scope: !5889)
!5973 = !DILocation(line: 1740, column: 1, scope: !5889)
!5974 = distinct !DISubprogram(name: "lower_eh_must_not_throw", scope: !3, file: !3, line: 1747, type: !5576, scopeLine: 1748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!5975 = !DILocalVariable(name: "state", arg: 1, scope: !5974, file: !3, line: 1747, type: !3020)
!5976 = !DILocation(line: 1747, column: 44, scope: !5974)
!5977 = !DILocalVariable(name: "tp", arg: 2, scope: !5974, file: !3, line: 1747, type: !1589)
!5978 = !DILocation(line: 1747, column: 58, scope: !5974)
!5979 = !DILocalVariable(name: "this_state", scope: !5974, file: !3, line: 1749, type: !3021)
!5980 = !DILocation(line: 1749, column: 20, scope: !5974)
!5981 = !DILocation(line: 1749, column: 34, scope: !5974)
!5982 = !DILocation(line: 1749, column: 33, scope: !5974)
!5983 = !DILocation(line: 1751, column: 7, scope: !5984)
!5984 = distinct !DILexicalBlock(scope: !5974, file: !3, line: 1751, column: 7)
!5985 = !DILocation(line: 1751, column: 7, scope: !5974)
!5986 = !DILocalVariable(name: "inner", scope: !5987, file: !3, line: 1753, type: !1589)
!5987 = distinct !DILexicalBlock(scope: !5984, file: !3, line: 1752, column: 5)
!5988 = !DILocation(line: 1753, column: 14, scope: !5987)
!5989 = !DILocation(line: 1753, column: 65, scope: !5987)
!5990 = !DILocation(line: 1753, column: 45, scope: !5987)
!5991 = !DILocation(line: 1753, column: 22, scope: !5987)
!5992 = !DILocalVariable(name: "this_region", scope: !5987, file: !3, line: 1754, type: !2037)
!5993 = !DILocation(line: 1754, column: 17, scope: !5987)
!5994 = !DILocation(line: 1756, column: 51, scope: !5987)
!5995 = !DILocation(line: 1756, column: 58, scope: !5987)
!5996 = !DILocation(line: 1756, column: 21, scope: !5987)
!5997 = !DILocation(line: 1756, column: 19, scope: !5987)
!5998 = !DILocation(line: 1758, column: 37, scope: !5987)
!5999 = !DILocation(line: 1758, column: 4, scope: !5987)
!6000 = !DILocation(line: 1757, column: 7, scope: !5987)
!6001 = !DILocation(line: 1757, column: 20, scope: !5987)
!6002 = !DILocation(line: 1757, column: 22, scope: !5987)
!6003 = !DILocation(line: 1757, column: 37, scope: !5987)
!6004 = !DILocation(line: 1758, column: 2, scope: !5987)
!6005 = !DILocation(line: 1759, column: 68, scope: !5987)
!6006 = !DILocation(line: 1759, column: 51, scope: !5987)
!6007 = !DILocation(line: 1759, column: 7, scope: !5987)
!6008 = !DILocation(line: 1759, column: 20, scope: !5987)
!6009 = !DILocation(line: 1759, column: 22, scope: !5987)
!6010 = !DILocation(line: 1759, column: 37, scope: !5987)
!6011 = !DILocation(line: 1759, column: 49, scope: !5987)
!6012 = !DILocation(line: 1764, column: 7, scope: !5987)
!6013 = !DILocation(line: 1764, column: 62, scope: !5987)
!6014 = !DILocation(line: 1766, column: 31, scope: !5987)
!6015 = !DILocation(line: 1766, column: 18, scope: !5987)
!6016 = !DILocation(line: 1766, column: 29, scope: !5987)
!6017 = !DILocation(line: 1767, column: 5, scope: !5987)
!6018 = !DILocation(line: 1769, column: 56, scope: !5974)
!6019 = !DILocation(line: 1769, column: 39, scope: !5974)
!6020 = !DILocation(line: 1769, column: 3, scope: !5974)
!6021 = !DILocation(line: 1771, column: 27, scope: !5974)
!6022 = !DILocation(line: 1771, column: 10, scope: !5974)
!6023 = !DILocation(line: 1771, column: 3, scope: !5974)
!6024 = distinct !DISubprogram(name: "lower_cleanup", scope: !3, file: !3, line: 1778, type: !5576, scopeLine: 1779, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6025 = !DILocalVariable(name: "state", arg: 1, scope: !6024, file: !3, line: 1778, type: !3020)
!6026 = !DILocation(line: 1778, column: 34, scope: !6024)
!6027 = !DILocalVariable(name: "tp", arg: 2, scope: !6024, file: !3, line: 1778, type: !1589)
!6028 = !DILocation(line: 1778, column: 48, scope: !6024)
!6029 = !DILocalVariable(name: "this_state", scope: !6024, file: !3, line: 1780, type: !3021)
!6030 = !DILocation(line: 1780, column: 20, scope: !6024)
!6031 = !DILocation(line: 1780, column: 34, scope: !6024)
!6032 = !DILocation(line: 1780, column: 33, scope: !6024)
!6033 = !DILocalVariable(name: "this_region", scope: !6024, file: !3, line: 1781, type: !2037)
!6034 = !DILocation(line: 1781, column: 13, scope: !6024)
!6035 = !DILocalVariable(name: "fake_tf", scope: !6024, file: !3, line: 1782, type: !3027)
!6036 = !DILocation(line: 1782, column: 23, scope: !6024)
!6037 = !DILocalVariable(name: "result", scope: !6024, file: !3, line: 1783, type: !1640)
!6038 = !DILocation(line: 1783, column: 14, scope: !6024)
!6039 = !DILocation(line: 1785, column: 7, scope: !6040)
!6040 = distinct !DILexicalBlock(scope: !6024, file: !3, line: 1785, column: 7)
!6041 = !DILocation(line: 1785, column: 7, scope: !6024)
!6042 = !DILocation(line: 1787, column: 44, scope: !6043)
!6043 = distinct !DILexicalBlock(scope: !6040, file: !3, line: 1786, column: 5)
!6044 = !DILocation(line: 1787, column: 51, scope: !6043)
!6045 = !DILocation(line: 1787, column: 21, scope: !6043)
!6046 = !DILocation(line: 1787, column: 19, scope: !6043)
!6047 = !DILocation(line: 1788, column: 31, scope: !6043)
!6048 = !DILocation(line: 1788, column: 18, scope: !6043)
!6049 = !DILocation(line: 1788, column: 29, scope: !6043)
!6050 = !DILocation(line: 1789, column: 5, scope: !6043)
!6051 = !DILocation(line: 1791, column: 56, scope: !6024)
!6052 = !DILocation(line: 1791, column: 39, scope: !6024)
!6053 = !DILocation(line: 1791, column: 3, scope: !6024)
!6054 = !DILocation(line: 1793, column: 37, scope: !6055)
!6055 = distinct !DILexicalBlock(scope: !6024, file: !3, line: 1793, column: 7)
!6056 = !DILocation(line: 1793, column: 8, scope: !6055)
!6057 = !DILocation(line: 1793, column: 7, scope: !6024)
!6058 = !DILocation(line: 1794, column: 29, scope: !6055)
!6059 = !DILocation(line: 1794, column: 12, scope: !6055)
!6060 = !DILocation(line: 1794, column: 5, scope: !6055)
!6061 = !DILocation(line: 1798, column: 3, scope: !6024)
!6062 = !DILocation(line: 1799, column: 46, scope: !6024)
!6063 = !DILocation(line: 1799, column: 27, scope: !6024)
!6064 = !DILocation(line: 1799, column: 44, scope: !6024)
!6065 = !DILocation(line: 1799, column: 11, scope: !6024)
!6066 = !DILocation(line: 1799, column: 17, scope: !6024)
!6067 = !DILocation(line: 1800, column: 19, scope: !6024)
!6068 = !DILocation(line: 1800, column: 11, scope: !6024)
!6069 = !DILocation(line: 1800, column: 17, scope: !6024)
!6070 = !DILocation(line: 1801, column: 20, scope: !6024)
!6071 = !DILocation(line: 1801, column: 11, scope: !6024)
!6072 = !DILocation(line: 1801, column: 18, scope: !6024)
!6073 = !DILocation(line: 1802, column: 68, scope: !6024)
!6074 = !DILocation(line: 1802, column: 51, scope: !6024)
!6075 = !DILocation(line: 1802, column: 26, scope: !6024)
!6076 = !DILocation(line: 1802, column: 11, scope: !6024)
!6077 = !DILocation(line: 1802, column: 24, scope: !6024)
!6078 = !DILocation(line: 1803, column: 11, scope: !6024)
!6079 = !DILocation(line: 1803, column: 21, scope: !6024)
!6080 = !DILocation(line: 1805, column: 34, scope: !6024)
!6081 = !DILocation(line: 1805, column: 3, scope: !6024)
!6082 = !DILocation(line: 1807, column: 15, scope: !6083)
!6083 = distinct !DILexicalBlock(scope: !6024, file: !3, line: 1807, column: 7)
!6084 = !DILocation(line: 1807, column: 7, scope: !6083)
!6085 = !DILocation(line: 1807, column: 7, scope: !6024)
!6086 = !DILocation(line: 1811, column: 30, scope: !6087)
!6087 = distinct !DILexicalBlock(scope: !6083, file: !3, line: 1808, column: 5)
!6088 = !DILocation(line: 1811, column: 57, scope: !6087)
!6089 = !DILocation(line: 1811, column: 37, scope: !6087)
!6090 = !DILocation(line: 1811, column: 7, scope: !6087)
!6091 = !DILocation(line: 1812, column: 41, scope: !6087)
!6092 = !DILocation(line: 1812, column: 45, scope: !6087)
!6093 = !DILocation(line: 1813, column: 49, scope: !6087)
!6094 = !DILocation(line: 1812, column: 16, scope: !6087)
!6095 = !DILocation(line: 1812, column: 14, scope: !6087)
!6096 = !DILocation(line: 1814, column: 5, scope: !6087)
!6097 = !DILocation(line: 1820, column: 33, scope: !6098)
!6098 = distinct !DILexicalBlock(scope: !6083, file: !3, line: 1816, column: 5)
!6099 = !DILocation(line: 1820, column: 16, scope: !6098)
!6100 = !DILocation(line: 1820, column: 14, scope: !6098)
!6101 = !DILocation(line: 1821, column: 19, scope: !6102)
!6102 = distinct !DILexicalBlock(scope: !6098, file: !3, line: 1821, column: 11)
!6103 = !DILocation(line: 1821, column: 11, scope: !6102)
!6104 = !DILocation(line: 1821, column: 11, scope: !6098)
!6105 = !DILocalVariable(name: "x", scope: !6106, file: !3, line: 1823, type: !1589)
!6106 = distinct !DILexicalBlock(scope: !6102, file: !3, line: 1822, column: 2)
!6107 = !DILocation(line: 1823, column: 11, scope: !6106)
!6108 = !DILocation(line: 1823, column: 43, scope: !6106)
!6109 = !DILocation(line: 1823, column: 15, scope: !6106)
!6110 = !DILocation(line: 1824, column: 34, scope: !6106)
!6111 = !DILocation(line: 1824, column: 4, scope: !6106)
!6112 = !DILocation(line: 1825, column: 2, scope: !6106)
!6113 = !DILocation(line: 1827, column: 10, scope: !6024)
!6114 = !DILocation(line: 1827, column: 3, scope: !6024)
!6115 = !DILocation(line: 1828, column: 1, scope: !6024)
!6116 = distinct !DISubprogram(name: "gimple_call_fn", scope: !591, file: !591, line: 1911, type: !5000, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6117 = !DILocalVariable(name: "gs", arg: 1, scope: !6116, file: !591, line: 1911, type: !3387)
!6118 = !DILocation(line: 1911, column: 30, scope: !6116)
!6119 = !DILocation(line: 1914, column: 21, scope: !6116)
!6120 = !DILocation(line: 1914, column: 10, scope: !6116)
!6121 = !DILocation(line: 1914, column: 3, scope: !6116)
!6122 = distinct !DISubprogram(name: "gimple_set_op", scope: !591, file: !591, line: 1663, type: !5370, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6123 = !DILocalVariable(name: "gs", arg: 1, scope: !6122, file: !591, line: 1663, type: !1589)
!6124 = !DILocation(line: 1663, column: 23, scope: !6122)
!6125 = !DILocalVariable(name: "i", arg: 2, scope: !6122, file: !591, line: 1663, type: !7)
!6126 = !DILocation(line: 1663, column: 36, scope: !6122)
!6127 = !DILocalVariable(name: "op", arg: 3, scope: !6122, file: !591, line: 1663, type: !1777)
!6128 = !DILocation(line: 1663, column: 44, scope: !6122)
!6129 = !DILocation(line: 1665, column: 3, scope: !6122)
!6130 = !DILocation(line: 1671, column: 24, scope: !6122)
!6131 = !DILocation(line: 1671, column: 15, scope: !6122)
!6132 = !DILocation(line: 1671, column: 3, scope: !6122)
!6133 = !DILocation(line: 1671, column: 19, scope: !6122)
!6134 = !DILocation(line: 1671, column: 22, scope: !6122)
!6135 = !DILocation(line: 1672, column: 1, scope: !6122)
!6136 = distinct !DISubprogram(name: "gimple_num_ops", scope: !591, file: !591, line: 1596, type: !6137, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6137 = !DISubroutineType(types: !6138)
!6138 = !{!7, !3387}
!6139 = !DILocalVariable(name: "gs", arg: 1, scope: !6136, file: !591, line: 1596, type: !3387)
!6140 = !DILocation(line: 1596, column: 30, scope: !6136)
!6141 = !DILocation(line: 1598, column: 10, scope: !6136)
!6142 = !DILocation(line: 1598, column: 14, scope: !6136)
!6143 = !DILocation(line: 1598, column: 21, scope: !6136)
!6144 = !DILocation(line: 1598, column: 3, scope: !6136)
!6145 = distinct !DISubprogram(name: "is_gimple_assign", scope: !591, file: !591, line: 1677, type: !4067, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6146 = !DILocalVariable(name: "gs", arg: 1, scope: !6145, file: !591, line: 1677, type: !3387)
!6147 = !DILocation(line: 1677, column: 32, scope: !6145)
!6148 = !DILocation(line: 1679, column: 23, scope: !6145)
!6149 = !DILocation(line: 1679, column: 10, scope: !6145)
!6150 = !DILocation(line: 1679, column: 27, scope: !6145)
!6151 = !DILocation(line: 1679, column: 3, scope: !6145)
!6152 = distinct !DISubprogram(name: "is_gimple_call", scope: !591, file: !591, line: 1870, type: !4067, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6153 = !DILocalVariable(name: "gs", arg: 1, scope: !6152, file: !591, line: 1870, type: !3387)
!6154 = !DILocation(line: 1870, column: 30, scope: !6152)
!6155 = !DILocation(line: 1872, column: 23, scope: !6152)
!6156 = !DILocation(line: 1872, column: 10, scope: !6152)
!6157 = !DILocation(line: 1872, column: 27, scope: !6152)
!6158 = !DILocation(line: 1872, column: 3, scope: !6152)
!6159 = distinct !DISubprogram(name: "gimple_op_ptr", scope: !591, file: !591, line: 1647, type: !6160, scopeLine: 1648, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6160 = !DISubroutineType(types: !6161)
!6161 = !{!2285, !3387, !7}
!6162 = !DILocalVariable(name: "gs", arg: 1, scope: !6159, file: !591, line: 1647, type: !3387)
!6163 = !DILocation(line: 1647, column: 29, scope: !6159)
!6164 = !DILocalVariable(name: "i", arg: 2, scope: !6159, file: !591, line: 1647, type: !7)
!6165 = !DILocation(line: 1647, column: 42, scope: !6159)
!6166 = !DILocation(line: 1649, column: 23, scope: !6167)
!6167 = distinct !DILexicalBlock(scope: !6159, file: !591, line: 1649, column: 7)
!6168 = !DILocation(line: 1649, column: 7, scope: !6167)
!6169 = !DILocation(line: 1649, column: 7, scope: !6159)
!6170 = !DILocation(line: 1654, column: 26, scope: !6171)
!6171 = distinct !DILexicalBlock(scope: !6167, file: !591, line: 1650, column: 5)
!6172 = !DILocation(line: 1654, column: 14, scope: !6171)
!6173 = !DILocation(line: 1654, column: 52, scope: !6171)
!6174 = !DILocation(line: 1654, column: 50, scope: !6171)
!6175 = !DILocation(line: 1654, column: 7, scope: !6171)
!6176 = !DILocation(line: 1657, column: 5, scope: !6167)
!6177 = !DILocation(line: 1658, column: 1, scope: !6159)
!6178 = distinct !DISubprogram(name: "record_in_goto_queue_label", scope: !3, file: !3, line: 608, type: !6179, scopeLine: 609, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6179 = !DISubroutineType(types: !6180)
!6180 = !{null, !3026, !2995, !1777}
!6181 = !DILocalVariable(name: "tf", arg: 1, scope: !6178, file: !3, line: 608, type: !3026)
!6182 = !DILocation(line: 608, column: 50, scope: !6178)
!6183 = !DILocalVariable(name: "stmt", arg: 2, scope: !6178, file: !3, line: 608, type: !2995)
!6184 = !DILocation(line: 608, column: 63, scope: !6178)
!6185 = !DILocalVariable(name: "label", arg: 3, scope: !6178, file: !3, line: 608, type: !1777)
!6186 = !DILocation(line: 608, column: 74, scope: !6178)
!6187 = !DILocalVariable(name: "index", scope: !6178, file: !3, line: 610, type: !1679)
!6188 = !DILocation(line: 610, column: 7, scope: !6178)
!6189 = !DILocalVariable(name: "temp", scope: !6178, file: !3, line: 611, type: !2995)
!6190 = !DILocation(line: 611, column: 12, scope: !6178)
!6191 = !DILocalVariable(name: "new_stmt", scope: !6178, file: !3, line: 611, type: !2995)
!6192 = !DILocation(line: 611, column: 18, scope: !6178)
!6193 = !DILocation(line: 613, column: 8, scope: !6194)
!6194 = distinct !DILexicalBlock(scope: !6178, file: !3, line: 613, column: 7)
!6195 = !DILocation(line: 613, column: 7, scope: !6178)
!6196 = !DILocation(line: 614, column: 5, scope: !6194)
!6197 = !DILocation(line: 619, column: 7, scope: !6198)
!6198 = distinct !DILexicalBlock(scope: !6178, file: !3, line: 619, column: 7)
!6199 = !DILocation(line: 619, column: 25, scope: !6198)
!6200 = !DILocation(line: 619, column: 7, scope: !6178)
!6201 = !DILocation(line: 620, column: 5, scope: !6198)
!6202 = !DILocation(line: 623, column: 12, scope: !6178)
!6203 = !DILocation(line: 623, column: 8, scope: !6178)
!6204 = !DILocation(line: 623, column: 10, scope: !6178)
!6205 = !DILocation(line: 624, column: 36, scope: !6206)
!6206 = distinct !DILexicalBlock(scope: !6178, file: !3, line: 624, column: 7)
!6207 = !DILocation(line: 624, column: 40, scope: !6206)
!6208 = !DILocation(line: 624, column: 8, scope: !6206)
!6209 = !DILocation(line: 624, column: 7, scope: !6178)
!6210 = !DILocation(line: 625, column: 5, scope: !6206)
!6211 = !DILocation(line: 627, column: 9, scope: !6212)
!6212 = distinct !DILexicalBlock(scope: !6178, file: !3, line: 627, column: 7)
!6213 = !DILocation(line: 627, column: 13, scope: !6212)
!6214 = !DILocation(line: 627, column: 7, scope: !6178)
!6215 = !DILocation(line: 629, column: 24, scope: !6216)
!6216 = distinct !DILexicalBlock(scope: !6212, file: !3, line: 628, column: 5)
!6217 = !DILocation(line: 629, column: 7, scope: !6216)
!6218 = !DILocation(line: 629, column: 11, scope: !6216)
!6219 = !DILocation(line: 629, column: 22, scope: !6216)
!6220 = !DILocation(line: 630, column: 7, scope: !6216)
!6221 = !DILocation(line: 631, column: 13, scope: !6216)
!6222 = !DILocation(line: 632, column: 5, scope: !6216)
!6223 = !DILocalVariable(name: "n", scope: !6224, file: !3, line: 635, type: !1679)
!6224 = distinct !DILexicalBlock(scope: !6212, file: !3, line: 634, column: 5)
!6225 = !DILocation(line: 635, column: 11, scope: !6224)
!6226 = !DILocation(line: 635, column: 15, scope: !6224)
!6227 = !DILocation(line: 636, column: 18, scope: !6228)
!6228 = distinct !DILexicalBlock(scope: !6224, file: !3, line: 636, column: 7)
!6229 = !DILocation(line: 636, column: 12, scope: !6228)
!6230 = !DILocation(line: 636, column: 23, scope: !6231)
!6231 = distinct !DILexicalBlock(scope: !6228, file: !3, line: 636, column: 7)
!6232 = !DILocation(line: 636, column: 31, scope: !6231)
!6233 = !DILocation(line: 636, column: 29, scope: !6231)
!6234 = !DILocation(line: 636, column: 7, scope: !6228)
!6235 = !DILocation(line: 637, column: 13, scope: !6236)
!6236 = distinct !DILexicalBlock(scope: !6231, file: !3, line: 637, column: 13)
!6237 = !DILocation(line: 637, column: 56, scope: !6236)
!6238 = !DILocation(line: 637, column: 53, scope: !6236)
!6239 = !DILocation(line: 637, column: 13, scope: !6231)
!6240 = !DILocation(line: 638, column: 11, scope: !6236)
!6241 = !DILocation(line: 636, column: 34, scope: !6231)
!6242 = !DILocation(line: 636, column: 7, scope: !6231)
!6243 = distinct !{!6243, !6234, !6244}
!6244 = !DILocation(line: 638, column: 11, scope: !6228)
!6245 = !DILocation(line: 639, column: 11, scope: !6246)
!6246 = distinct !DILexicalBlock(scope: !6224, file: !3, line: 639, column: 11)
!6247 = !DILocation(line: 639, column: 20, scope: !6246)
!6248 = !DILocation(line: 639, column: 17, scope: !6246)
!6249 = !DILocation(line: 639, column: 11, scope: !6224)
!6250 = !DILocation(line: 640, column: 9, scope: !6246)
!6251 = !DILocation(line: 646, column: 14, scope: !6178)
!6252 = !DILocation(line: 647, column: 25, scope: !6178)
!6253 = !DILocation(line: 647, column: 39, scope: !6178)
!6254 = !DILocation(line: 647, column: 3, scope: !6178)
!6255 = !DILocation(line: 648, column: 1, scope: !6178)
!6256 = distinct !DISubprogram(name: "gimple_cond_true_label", scope: !591, file: !591, line: 2303, type: !5000, scopeLine: 2304, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6257 = !DILocalVariable(name: "gs", arg: 1, scope: !6256, file: !591, line: 2303, type: !3387)
!6258 = !DILocation(line: 2303, column: 38, scope: !6256)
!6259 = !DILocation(line: 2306, column: 21, scope: !6256)
!6260 = !DILocation(line: 2306, column: 10, scope: !6256)
!6261 = !DILocation(line: 2306, column: 3, scope: !6256)
!6262 = distinct !DISubprogram(name: "gimple_cond_false_label", scope: !591, file: !591, line: 2336, type: !5000, scopeLine: 2337, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6263 = !DILocalVariable(name: "gs", arg: 1, scope: !6262, file: !591, line: 2336, type: !3387)
!6264 = !DILocation(line: 2336, column: 39, scope: !6262)
!6265 = !DILocation(line: 2339, column: 21, scope: !6262)
!6266 = !DILocation(line: 2339, column: 10, scope: !6262)
!6267 = !DILocation(line: 2339, column: 3, scope: !6262)
!6268 = distinct !DISubprogram(name: "gimple_goto_dest", scope: !591, file: !591, line: 2465, type: !5000, scopeLine: 2466, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6269 = !DILocalVariable(name: "gs", arg: 1, scope: !6268, file: !591, line: 2465, type: !3387)
!6270 = !DILocation(line: 2465, column: 32, scope: !6268)
!6271 = !DILocation(line: 2468, column: 21, scope: !6268)
!6272 = !DILocation(line: 2468, column: 10, scope: !6268)
!6273 = !DILocation(line: 2468, column: 3, scope: !6268)
!6274 = distinct !DISubprogram(name: "record_in_goto_queue", scope: !3, file: !3, line: 575, type: !6275, scopeLine: 579, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6275 = !DISubroutineType(types: !6276)
!6276 = !{null, !3026, !2995, !1679, !1890}
!6277 = !DILocalVariable(name: "tf", arg: 1, scope: !6274, file: !3, line: 575, type: !3026)
!6278 = !DILocation(line: 575, column: 44, scope: !6274)
!6279 = !DILocalVariable(name: "new_stmt", arg: 2, scope: !6274, file: !3, line: 576, type: !2995)
!6280 = !DILocation(line: 576, column: 32, scope: !6274)
!6281 = !DILocalVariable(name: "index", arg: 3, scope: !6274, file: !3, line: 577, type: !1679)
!6282 = !DILocation(line: 577, column: 27, scope: !6274)
!6283 = !DILocalVariable(name: "is_label", arg: 4, scope: !6274, file: !3, line: 578, type: !1890)
!6284 = !DILocation(line: 578, column: 28, scope: !6274)
!6285 = !DILocalVariable(name: "active", scope: !6274, file: !3, line: 580, type: !2138)
!6286 = !DILocation(line: 580, column: 10, scope: !6274)
!6287 = !DILocalVariable(name: "size", scope: !6274, file: !3, line: 580, type: !2138)
!6288 = !DILocation(line: 580, column: 18, scope: !6274)
!6289 = !DILocalVariable(name: "q", scope: !6274, file: !3, line: 581, type: !3007)
!6290 = !DILocation(line: 581, column: 27, scope: !6274)
!6291 = !DILocation(line: 583, column: 3, scope: !6274)
!6292 = !DILocation(line: 585, column: 12, scope: !6274)
!6293 = !DILocation(line: 585, column: 16, scope: !6274)
!6294 = !DILocation(line: 585, column: 10, scope: !6274)
!6295 = !DILocation(line: 586, column: 10, scope: !6274)
!6296 = !DILocation(line: 586, column: 14, scope: !6274)
!6297 = !DILocation(line: 586, column: 8, scope: !6274)
!6298 = !DILocation(line: 587, column: 7, scope: !6299)
!6299 = distinct !DILexicalBlock(scope: !6274, file: !3, line: 587, column: 7)
!6300 = !DILocation(line: 587, column: 17, scope: !6299)
!6301 = !DILocation(line: 587, column: 14, scope: !6299)
!6302 = !DILocation(line: 587, column: 7, scope: !6274)
!6303 = !DILocation(line: 589, column: 15, scope: !6304)
!6304 = distinct !DILexicalBlock(scope: !6299, file: !3, line: 588, column: 5)
!6305 = !DILocation(line: 589, column: 22, scope: !6304)
!6306 = !DILocation(line: 589, column: 27, scope: !6304)
!6307 = !DILocation(line: 589, column: 12, scope: !6304)
!6308 = !DILocation(line: 590, column: 29, scope: !6304)
!6309 = !DILocation(line: 590, column: 7, scope: !6304)
!6310 = !DILocation(line: 590, column: 11, scope: !6304)
!6311 = !DILocation(line: 590, column: 27, scope: !6304)
!6312 = !DILocation(line: 592, column: 12, scope: !6304)
!6313 = !DILocation(line: 591, column: 7, scope: !6304)
!6314 = !DILocation(line: 591, column: 11, scope: !6304)
!6315 = !DILocation(line: 592, column: 10, scope: !6304)
!6316 = !DILocation(line: 593, column: 5, scope: !6304)
!6317 = !DILocation(line: 595, column: 8, scope: !6274)
!6318 = !DILocation(line: 595, column: 12, scope: !6274)
!6319 = !DILocation(line: 595, column: 23, scope: !6274)
!6320 = !DILocation(line: 595, column: 5, scope: !6274)
!6321 = !DILocation(line: 596, column: 27, scope: !6274)
!6322 = !DILocation(line: 596, column: 34, scope: !6274)
!6323 = !DILocation(line: 596, column: 3, scope: !6274)
!6324 = !DILocation(line: 596, column: 7, scope: !6274)
!6325 = !DILocation(line: 596, column: 25, scope: !6274)
!6326 = !DILocation(line: 598, column: 11, scope: !6274)
!6327 = !DILocation(line: 598, column: 3, scope: !6274)
!6328 = !DILocation(line: 599, column: 3, scope: !6274)
!6329 = !DILocation(line: 599, column: 6, scope: !6274)
!6330 = !DILocation(line: 599, column: 13, scope: !6274)
!6331 = !DILocation(line: 600, column: 14, scope: !6274)
!6332 = !DILocation(line: 600, column: 3, scope: !6274)
!6333 = !DILocation(line: 600, column: 6, scope: !6274)
!6334 = !DILocation(line: 600, column: 12, scope: !6274)
!6335 = !DILocation(line: 601, column: 17, scope: !6274)
!6336 = !DILocation(line: 601, column: 3, scope: !6274)
!6337 = !DILocation(line: 601, column: 6, scope: !6274)
!6338 = !DILocation(line: 601, column: 15, scope: !6274)
!6339 = !DILocation(line: 602, column: 1, scope: !6274)
!6340 = distinct !DISubprogram(name: "outside_finally_tree", scope: !3, file: !3, line: 301, type: !6341, scopeLine: 302, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6341 = !DISubroutineType(types: !6342)
!6342 = !{!1890, !2995, !1589}
!6343 = !DILocalVariable(name: "start", arg: 1, scope: !6340, file: !3, line: 301, type: !2995)
!6344 = !DILocation(line: 301, column: 32, scope: !6340)
!6345 = !DILocalVariable(name: "target", arg: 2, scope: !6340, file: !3, line: 301, type: !1589)
!6346 = !DILocation(line: 301, column: 46, scope: !6340)
!6347 = !DILocalVariable(name: "n", scope: !6340, file: !3, line: 303, type: !2992)
!6348 = !DILocation(line: 303, column: 28, scope: !6340)
!6349 = !DILocalVariable(name: "p", scope: !6340, file: !3, line: 303, type: !2991)
!6350 = !DILocation(line: 303, column: 32, scope: !6340)
!6351 = !DILocation(line: 305, column: 3, scope: !6340)
!6352 = !DILocation(line: 307, column: 9, scope: !6353)
!6353 = distinct !DILexicalBlock(scope: !6340, file: !3, line: 306, column: 5)
!6354 = !DILocation(line: 307, column: 17, scope: !6353)
!6355 = !DILocation(line: 308, column: 51, scope: !6353)
!6356 = !DILocation(line: 308, column: 65, scope: !6353)
!6357 = !DILocation(line: 308, column: 40, scope: !6353)
!6358 = !DILocation(line: 308, column: 11, scope: !6353)
!6359 = !DILocation(line: 308, column: 9, scope: !6353)
!6360 = !DILocation(line: 309, column: 12, scope: !6361)
!6361 = distinct !DILexicalBlock(scope: !6353, file: !3, line: 309, column: 11)
!6362 = !DILocation(line: 309, column: 11, scope: !6353)
!6363 = !DILocation(line: 310, column: 2, scope: !6361)
!6364 = !DILocation(line: 311, column: 17, scope: !6353)
!6365 = !DILocation(line: 311, column: 20, scope: !6353)
!6366 = !DILocation(line: 311, column: 13, scope: !6353)
!6367 = !DILocation(line: 311, column: 15, scope: !6353)
!6368 = !DILocation(line: 312, column: 5, scope: !6353)
!6369 = !DILocation(line: 313, column: 16, scope: !6340)
!6370 = !DILocation(line: 313, column: 21, scope: !6340)
!6371 = !DILocation(line: 313, column: 18, scope: !6340)
!6372 = distinct !{!6372, !6351, !6373}
!6373 = !DILocation(line: 313, column: 27, scope: !6340)
!6374 = !DILocation(line: 315, column: 3, scope: !6340)
!6375 = !DILocation(line: 316, column: 1, scope: !6340)
!6376 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !142, file: !142, line: 184, type: !6377, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6377 = !DISubroutineType(types: !6378)
!6378 = !{!3002, !1679}
!6379 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6376, file: !142, line: 184, type: !1679)
!6380 = !DILocation(line: 184, column: 1, scope: !6376)
!6381 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !142, file: !142, line: 182, type: !6382, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6382 = !DISubroutineType(types: !6383)
!6383 = !{!2285, !6384, !1777}
!6384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2169, size: 64)
!6385 = !DILocalVariable(name: "vec_", arg: 1, scope: !6381, file: !142, line: 182, type: !6384)
!6386 = !DILocation(line: 182, column: 1, scope: !6381)
!6387 = !DILocalVariable(name: "obj_", arg: 2, scope: !6381, file: !142, line: 182, type: !1777)
!6388 = !DILocalVariable(name: "slot_", scope: !6381, file: !142, line: 182, type: !2285)
!6389 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !142, file: !142, line: 182, type: !6390, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6390 = !DISubroutineType(types: !6391)
!6391 = !{!7, !6392}
!6392 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6393, size: 64)
!6393 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2169)
!6394 = !DILocalVariable(name: "vec_", arg: 1, scope: !6389, file: !142, line: 182, type: !6392)
!6395 = !DILocation(line: 182, column: 1, scope: !6389)
!6396 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !142, file: !142, line: 182, type: !6397, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6397 = !DISubroutineType(types: !6398)
!6398 = !{!1777, !6392, !7}
!6399 = !DILocalVariable(name: "vec_", arg: 1, scope: !6396, file: !142, line: 182, type: !6392)
!6400 = !DILocation(line: 182, column: 1, scope: !6396)
!6401 = !DILocalVariable(name: "ix_", arg: 2, scope: !6396, file: !142, line: 182, type: !7)
!6402 = !DILocation(line: 0, scope: !6396)
!6403 = distinct !DISubprogram(name: "VEC_tree_heap_safe_push", scope: !142, file: !142, line: 184, type: !6404, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6404 = !DISubroutineType(types: !6405)
!6405 = !{!2285, !6406, !1777}
!6406 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3002, size: 64)
!6407 = !DILocalVariable(name: "vec_", arg: 1, scope: !6403, file: !142, line: 184, type: !6406)
!6408 = !DILocation(line: 184, column: 1, scope: !6403)
!6409 = !DILocalVariable(name: "obj_", arg: 2, scope: !6403, file: !142, line: 184, type: !1777)
!6410 = distinct !DISubprogram(name: "VEC_tree_heap_reserve", scope: !142, file: !142, line: 184, type: !6411, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6411 = !DISubroutineType(types: !6412)
!6412 = !{!1679, !6406, !1679}
!6413 = !DILocalVariable(name: "vec_", arg: 1, scope: !6410, file: !142, line: 184, type: !6406)
!6414 = !DILocation(line: 184, column: 1, scope: !6410)
!6415 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6410, file: !142, line: 184, type: !1679)
!6416 = !DILocalVariable(name: "extend", scope: !6410, file: !142, line: 184, type: !1679)
!6417 = !DILocation(line: 184, column: 1, scope: !6418)
!6418 = distinct !DILexicalBlock(scope: !6410, file: !142, line: 184, column: 1)
!6419 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !142, file: !142, line: 182, type: !6420, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6420 = !DISubroutineType(types: !6421)
!6421 = !{!1679, !6384, !1679}
!6422 = !DILocalVariable(name: "vec_", arg: 1, scope: !6419, file: !142, line: 182, type: !6384)
!6423 = !DILocation(line: 182, column: 1, scope: !6419)
!6424 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6419, file: !142, line: 182, type: !1679)
!6425 = distinct !DISubprogram(name: "eh_region_may_contain_throw", scope: !3, file: !3, line: 865, type: !6426, scopeLine: 866, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6426 = !DISubroutineType(types: !6427)
!6427 = !{!1890, !2037}
!6428 = !DILocalVariable(name: "r", arg: 1, scope: !6425, file: !3, line: 865, type: !2037)
!6429 = !DILocation(line: 865, column: 40, scope: !6425)
!6430 = !DILocation(line: 867, column: 10, scope: !6425)
!6431 = !DILocation(line: 867, column: 12, scope: !6425)
!6432 = !DILocation(line: 867, column: 29, scope: !6425)
!6433 = !DILocation(line: 867, column: 62, scope: !6425)
!6434 = !DILocation(line: 867, column: 65, scope: !6425)
!6435 = !DILocation(line: 867, column: 15, scope: !6425)
!6436 = !DILocation(line: 0, scope: !6425)
!6437 = !DILocation(line: 867, column: 3, scope: !6425)
!6438 = distinct !DISubprogram(name: "honor_protect_cleanup_actions", scope: !3, file: !3, line: 977, type: !6439, scopeLine: 980, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6439 = !DISubroutineType(types: !6440)
!6440 = !{null, !3020, !3020, !3026}
!6441 = !DILocalVariable(name: "outer_state", arg: 1, scope: !6438, file: !3, line: 977, type: !3020)
!6442 = !DILocation(line: 977, column: 50, scope: !6438)
!6443 = !DILocalVariable(name: "this_state", arg: 2, scope: !6438, file: !3, line: 978, type: !3020)
!6444 = !DILocation(line: 978, column: 29, scope: !6438)
!6445 = !DILocalVariable(name: "tf", arg: 3, scope: !6438, file: !3, line: 979, type: !3026)
!6446 = !DILocation(line: 979, column: 32, scope: !6438)
!6447 = !DILocalVariable(name: "protect_cleanup_actions", scope: !6438, file: !3, line: 981, type: !1777)
!6448 = !DILocation(line: 981, column: 8, scope: !6438)
!6449 = !DILocalVariable(name: "gsi", scope: !6438, file: !3, line: 982, type: !4816)
!6450 = !DILocation(line: 982, column: 24, scope: !6438)
!6451 = !DILocalVariable(name: "finally_may_fallthru", scope: !6438, file: !3, line: 983, type: !1890)
!6452 = !DILocation(line: 983, column: 8, scope: !6438)
!6453 = !DILocalVariable(name: "finally", scope: !6438, file: !3, line: 984, type: !1640)
!6454 = !DILocation(line: 984, column: 14, scope: !6438)
!6455 = !DILocalVariable(name: "x", scope: !6438, file: !3, line: 985, type: !1589)
!6456 = !DILocation(line: 985, column: 10, scope: !6438)
!6457 = !DILocation(line: 988, column: 7, scope: !6458)
!6458 = distinct !DILexicalBlock(scope: !6438, file: !3, line: 988, column: 7)
!6459 = !DILocation(line: 988, column: 36, scope: !6458)
!6460 = !DILocation(line: 988, column: 7, scope: !6438)
!6461 = !DILocation(line: 989, column: 5, scope: !6458)
!6462 = !DILocation(line: 990, column: 29, scope: !6438)
!6463 = !DILocation(line: 990, column: 27, scope: !6438)
!6464 = !DILocation(line: 991, column: 7, scope: !6465)
!6465 = distinct !DILexicalBlock(scope: !6438, file: !3, line: 991, column: 7)
!6466 = !DILocation(line: 991, column: 31, scope: !6465)
!6467 = !DILocation(line: 991, column: 7, scope: !6438)
!6468 = !DILocation(line: 992, column: 5, scope: !6465)
!6469 = !DILocation(line: 994, column: 33, scope: !6438)
!6470 = !DILocation(line: 994, column: 37, scope: !6438)
!6471 = !DILocation(line: 994, column: 13, scope: !6438)
!6472 = !DILocation(line: 994, column: 11, scope: !6438)
!6473 = !DILocation(line: 995, column: 51, scope: !6438)
!6474 = !DILocation(line: 995, column: 26, scope: !6438)
!6475 = !DILocation(line: 995, column: 24, scope: !6438)
!6476 = !DILocation(line: 999, column: 7, scope: !6477)
!6477 = distinct !DILexicalBlock(scope: !6438, file: !3, line: 999, column: 7)
!6478 = !DILocation(line: 999, column: 7, scope: !6438)
!6479 = !DILocation(line: 1000, column: 44, scope: !6477)
!6480 = !DILocation(line: 1000, column: 53, scope: !6477)
!6481 = !DILocation(line: 1000, column: 15, scope: !6477)
!6482 = !DILocation(line: 1000, column: 13, scope: !6477)
!6483 = !DILocation(line: 1000, column: 5, scope: !6477)
!6484 = !DILocation(line: 1009, column: 20, scope: !6438)
!6485 = !DILocation(line: 1009, column: 9, scope: !6438)
!6486 = !DILocation(line: 1010, column: 7, scope: !6438)
!6487 = !DILocation(line: 1010, column: 5, scope: !6438)
!6488 = !DILocation(line: 1011, column: 20, scope: !6489)
!6489 = distinct !DILexicalBlock(scope: !6438, file: !3, line: 1011, column: 7)
!6490 = !DILocation(line: 1011, column: 7, scope: !6489)
!6491 = !DILocation(line: 1011, column: 23, scope: !6489)
!6492 = !DILocation(line: 1012, column: 7, scope: !6489)
!6493 = !DILocation(line: 1012, column: 27, scope: !6489)
!6494 = !DILocation(line: 1012, column: 10, scope: !6489)
!6495 = !DILocation(line: 1012, column: 30, scope: !6489)
!6496 = !DILocation(line: 1013, column: 7, scope: !6489)
!6497 = !DILocation(line: 1013, column: 39, scope: !6489)
!6498 = !DILocation(line: 1013, column: 10, scope: !6489)
!6499 = !DILocation(line: 1011, column: 7, scope: !6438)
!6500 = !DILocation(line: 1015, column: 53, scope: !6501)
!6501 = distinct !DILexicalBlock(scope: !6489, file: !3, line: 1014, column: 5)
!6502 = !DILocation(line: 1015, column: 36, scope: !6501)
!6503 = !DILocation(line: 1015, column: 7, scope: !6501)
!6504 = !DILocation(line: 1016, column: 7, scope: !6501)
!6505 = !DILocation(line: 1017, column: 5, scope: !6501)
!6506 = !DILocation(line: 1020, column: 39, scope: !6438)
!6507 = !DILocation(line: 1020, column: 7, scope: !6438)
!6508 = !DILocation(line: 1020, column: 5, scope: !6438)
!6509 = !DILocation(line: 1021, column: 25, scope: !6438)
!6510 = !DILocation(line: 1021, column: 62, scope: !6438)
!6511 = !DILocation(line: 1021, column: 34, scope: !6438)
!6512 = !DILocation(line: 1021, column: 7, scope: !6438)
!6513 = !DILocation(line: 1021, column: 5, scope: !6438)
!6514 = !DILocation(line: 1023, column: 38, scope: !6438)
!6515 = !DILocation(line: 1023, column: 51, scope: !6438)
!6516 = !DILocation(line: 1023, column: 13, scope: !6438)
!6517 = !DILocation(line: 1023, column: 11, scope: !6438)
!6518 = !DILocation(line: 1026, column: 35, scope: !6438)
!6519 = !DILocation(line: 1026, column: 39, scope: !6438)
!6520 = !DILocation(line: 1026, column: 3, scope: !6438)
!6521 = !DILocation(line: 1027, column: 32, scope: !6438)
!6522 = !DILocation(line: 1027, column: 3, scope: !6438)
!6523 = !DILocation(line: 1028, column: 7, scope: !6524)
!6524 = distinct !DILexicalBlock(scope: !6438, file: !3, line: 1028, column: 7)
!6525 = !DILocation(line: 1028, column: 7, scope: !6438)
!6526 = !DILocation(line: 1029, column: 25, scope: !6524)
!6527 = !DILocation(line: 1029, column: 29, scope: !6524)
!6528 = !DILocation(line: 1029, column: 5, scope: !6524)
!6529 = !DILocation(line: 1033, column: 3, scope: !6438)
!6530 = !DILocation(line: 1033, column: 7, scope: !6438)
!6531 = !DILocation(line: 1033, column: 17, scope: !6438)
!6532 = !DILocation(line: 1034, column: 1, scope: !6438)
!6533 = distinct !DISubprogram(name: "gimple_try_set_cleanup", scope: !591, file: !591, line: 2999, type: !6534, scopeLine: 3000, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6534 = !DISubroutineType(types: !6535)
!6535 = !{null, !1589, !1640}
!6536 = !DILocalVariable(name: "gs", arg: 1, scope: !6533, file: !591, line: 2999, type: !1589)
!6537 = !DILocation(line: 2999, column: 32, scope: !6533)
!6538 = !DILocalVariable(name: "cleanup", arg: 2, scope: !6533, file: !591, line: 2999, type: !1640)
!6539 = !DILocation(line: 2999, column: 47, scope: !6533)
!6540 = !DILocation(line: 3002, column: 28, scope: !6533)
!6541 = !DILocation(line: 3002, column: 3, scope: !6533)
!6542 = !DILocation(line: 3002, column: 7, scope: !6533)
!6543 = !DILocation(line: 3002, column: 18, scope: !6533)
!6544 = !DILocation(line: 3002, column: 26, scope: !6533)
!6545 = !DILocation(line: 3003, column: 1, scope: !6533)
!6546 = distinct !DISubprogram(name: "lower_try_finally_nofallthru", scope: !3, file: !3, line: 1042, type: !3018, scopeLine: 1044, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6547 = !DILocalVariable(name: "state", arg: 1, scope: !6546, file: !3, line: 1042, type: !3020)
!6548 = !DILocation(line: 1042, column: 49, scope: !6546)
!6549 = !DILocalVariable(name: "tf", arg: 2, scope: !6546, file: !3, line: 1043, type: !3026)
!6550 = !DILocation(line: 1043, column: 31, scope: !6546)
!6551 = !DILocalVariable(name: "lab", scope: !6546, file: !3, line: 1045, type: !1777)
!6552 = !DILocation(line: 1045, column: 8, scope: !6546)
!6553 = !DILocalVariable(name: "return_val", scope: !6546, file: !3, line: 1045, type: !1777)
!6554 = !DILocation(line: 1045, column: 13, scope: !6546)
!6555 = !DILocalVariable(name: "x", scope: !6546, file: !3, line: 1046, type: !1589)
!6556 = !DILocation(line: 1046, column: 10, scope: !6546)
!6557 = !DILocalVariable(name: "finally", scope: !6546, file: !3, line: 1047, type: !1640)
!6558 = !DILocation(line: 1047, column: 14, scope: !6546)
!6559 = !DILocalVariable(name: "q", scope: !6546, file: !3, line: 1048, type: !3007)
!6560 = !DILocation(line: 1048, column: 27, scope: !6546)
!6561 = !DILocalVariable(name: "qe", scope: !6546, file: !3, line: 1048, type: !3007)
!6562 = !DILocation(line: 1048, column: 31, scope: !6546)
!6563 = !DILocation(line: 1050, column: 51, scope: !6546)
!6564 = !DILocation(line: 1050, column: 55, scope: !6546)
!6565 = !DILocation(line: 1050, column: 34, scope: !6546)
!6566 = !DILocation(line: 1050, column: 9, scope: !6546)
!6567 = !DILocation(line: 1050, column: 7, scope: !6546)
!6568 = !DILocation(line: 1053, column: 33, scope: !6546)
!6569 = !DILocation(line: 1053, column: 37, scope: !6546)
!6570 = !DILocation(line: 1053, column: 13, scope: !6546)
!6571 = !DILocation(line: 1053, column: 11, scope: !6546)
!6572 = !DILocation(line: 1054, column: 36, scope: !6546)
!6573 = !DILocation(line: 1054, column: 40, scope: !6546)
!6574 = !DILocation(line: 1054, column: 19, scope: !6546)
!6575 = !DILocation(line: 1054, column: 3, scope: !6546)
!6576 = !DILocation(line: 1054, column: 7, scope: !6546)
!6577 = !DILocation(line: 1054, column: 17, scope: !6546)
!6578 = !DILocation(line: 1056, column: 27, scope: !6546)
!6579 = !DILocation(line: 1056, column: 7, scope: !6546)
!6580 = !DILocation(line: 1056, column: 5, scope: !6546)
!6581 = !DILocation(line: 1057, column: 25, scope: !6546)
!6582 = !DILocation(line: 1057, column: 29, scope: !6546)
!6583 = !DILocation(line: 1057, column: 40, scope: !6546)
!6584 = !DILocation(line: 1057, column: 3, scope: !6546)
!6585 = !DILocation(line: 1059, column: 14, scope: !6546)
!6586 = !DILocation(line: 1060, column: 7, scope: !6546)
!6587 = !DILocation(line: 1060, column: 11, scope: !6546)
!6588 = !DILocation(line: 1060, column: 5, scope: !6546)
!6589 = !DILocation(line: 1061, column: 8, scope: !6546)
!6590 = !DILocation(line: 1061, column: 12, scope: !6546)
!6591 = !DILocation(line: 1061, column: 16, scope: !6546)
!6592 = !DILocation(line: 1061, column: 10, scope: !6546)
!6593 = !DILocation(line: 1061, column: 6, scope: !6546)
!6594 = !DILocation(line: 1062, column: 3, scope: !6546)
!6595 = !DILocation(line: 1062, column: 10, scope: !6596)
!6596 = distinct !DILexicalBlock(scope: !6597, file: !3, line: 1062, column: 3)
!6597 = distinct !DILexicalBlock(scope: !6546, file: !3, line: 1062, column: 3)
!6598 = !DILocation(line: 1062, column: 14, scope: !6596)
!6599 = !DILocation(line: 1062, column: 12, scope: !6596)
!6600 = !DILocation(line: 1062, column: 3, scope: !6597)
!6601 = !DILocation(line: 1063, column: 9, scope: !6602)
!6602 = distinct !DILexicalBlock(scope: !6596, file: !3, line: 1063, column: 9)
!6603 = !DILocation(line: 1063, column: 12, scope: !6602)
!6604 = !DILocation(line: 1063, column: 18, scope: !6602)
!6605 = !DILocation(line: 1063, column: 9, scope: !6596)
!6606 = !DILocation(line: 1064, column: 30, scope: !6602)
!6607 = !DILocation(line: 1064, column: 33, scope: !6602)
!6608 = !DILocation(line: 1064, column: 7, scope: !6602)
!6609 = !DILocation(line: 1066, column: 28, scope: !6602)
!6610 = !DILocation(line: 1066, column: 31, scope: !6602)
!6611 = !DILocation(line: 1066, column: 42, scope: !6602)
!6612 = !DILocation(line: 1066, column: 7, scope: !6602)
!6613 = !DILocation(line: 1063, column: 20, scope: !6602)
!6614 = !DILocation(line: 1062, column: 18, scope: !6596)
!6615 = !DILocation(line: 1062, column: 3, scope: !6596)
!6616 = distinct !{!6616, !6600, !6617}
!6617 = !DILocation(line: 1066, column: 44, scope: !6597)
!6618 = !DILocation(line: 1068, column: 23, scope: !6546)
!6619 = !DILocation(line: 1068, column: 3, scope: !6546)
!6620 = !DILocation(line: 1070, column: 26, scope: !6546)
!6621 = !DILocation(line: 1070, column: 33, scope: !6546)
!6622 = !DILocation(line: 1070, column: 3, scope: !6546)
!6623 = !DILocation(line: 1071, column: 24, scope: !6546)
!6624 = !DILocation(line: 1071, column: 28, scope: !6546)
!6625 = !DILocation(line: 1071, column: 39, scope: !6546)
!6626 = !DILocation(line: 1071, column: 3, scope: !6546)
!6627 = !DILocation(line: 1073, column: 7, scope: !6628)
!6628 = distinct !DILexicalBlock(scope: !6546, file: !3, line: 1073, column: 7)
!6629 = !DILocation(line: 1073, column: 11, scope: !6628)
!6630 = !DILocation(line: 1073, column: 7, scope: !6546)
!6631 = !DILocation(line: 1075, column: 39, scope: !6632)
!6632 = distinct !DILexicalBlock(scope: !6628, file: !3, line: 1074, column: 5)
!6633 = !DILocation(line: 1075, column: 43, scope: !6632)
!6634 = !DILocation(line: 1075, column: 7, scope: !6632)
!6635 = !DILocation(line: 1077, column: 30, scope: !6632)
!6636 = !DILocation(line: 1077, column: 11, scope: !6632)
!6637 = !DILocation(line: 1077, column: 9, scope: !6632)
!6638 = !DILocation(line: 1078, column: 37, scope: !6632)
!6639 = !DILocation(line: 1078, column: 7, scope: !6632)
!6640 = !DILocation(line: 1079, column: 5, scope: !6632)
!6641 = !DILocation(line: 1080, column: 1, scope: !6546)
!6642 = distinct !DISubprogram(name: "lower_try_finally_onedest", scope: !3, file: !3, line: 1087, type: !3018, scopeLine: 1088, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6643 = !DILocalVariable(name: "state", arg: 1, scope: !6642, file: !3, line: 1087, type: !3020)
!6644 = !DILocation(line: 1087, column: 46, scope: !6642)
!6645 = !DILocalVariable(name: "tf", arg: 2, scope: !6642, file: !3, line: 1087, type: !3026)
!6646 = !DILocation(line: 1087, column: 74, scope: !6642)
!6647 = !DILocalVariable(name: "q", scope: !6642, file: !3, line: 1089, type: !3007)
!6648 = !DILocation(line: 1089, column: 27, scope: !6642)
!6649 = !DILocalVariable(name: "qe", scope: !6642, file: !3, line: 1089, type: !3007)
!6650 = !DILocation(line: 1089, column: 31, scope: !6642)
!6651 = !DILocalVariable(name: "x", scope: !6642, file: !3, line: 1090, type: !1589)
!6652 = !DILocation(line: 1090, column: 10, scope: !6642)
!6653 = !DILocalVariable(name: "finally", scope: !6642, file: !3, line: 1091, type: !1640)
!6654 = !DILocation(line: 1091, column: 14, scope: !6642)
!6655 = !DILocalVariable(name: "finally_label", scope: !6642, file: !3, line: 1092, type: !1777)
!6656 = !DILocation(line: 1092, column: 8, scope: !6642)
!6657 = !DILocalVariable(name: "loc", scope: !6642, file: !3, line: 1093, type: !1608)
!6658 = !DILocation(line: 1093, column: 14, scope: !6642)
!6659 = !DILocation(line: 1093, column: 37, scope: !6642)
!6660 = !DILocation(line: 1093, column: 41, scope: !6642)
!6661 = !DILocation(line: 1093, column: 20, scope: !6642)
!6662 = !DILocation(line: 1095, column: 33, scope: !6642)
!6663 = !DILocation(line: 1095, column: 37, scope: !6642)
!6664 = !DILocation(line: 1095, column: 13, scope: !6642)
!6665 = !DILocation(line: 1095, column: 11, scope: !6642)
!6666 = !DILocation(line: 1096, column: 36, scope: !6642)
!6667 = !DILocation(line: 1096, column: 40, scope: !6642)
!6668 = !DILocation(line: 1096, column: 19, scope: !6642)
!6669 = !DILocation(line: 1096, column: 3, scope: !6642)
!6670 = !DILocation(line: 1096, column: 7, scope: !6642)
!6671 = !DILocation(line: 1096, column: 17, scope: !6642)
!6672 = !DILocation(line: 1098, column: 26, scope: !6642)
!6673 = !DILocation(line: 1098, column: 33, scope: !6642)
!6674 = !DILocation(line: 1098, column: 3, scope: !6642)
!6675 = !DILocation(line: 1100, column: 7, scope: !6676)
!6676 = distinct !DILexicalBlock(scope: !6642, file: !3, line: 1100, column: 7)
!6677 = !DILocation(line: 1100, column: 11, scope: !6676)
!6678 = !DILocation(line: 1100, column: 7, scope: !6642)
!6679 = !DILocation(line: 1104, column: 39, scope: !6680)
!6680 = distinct !DILexicalBlock(scope: !6676, file: !3, line: 1101, column: 5)
!6681 = !DILocation(line: 1104, column: 43, scope: !6680)
!6682 = !DILocation(line: 1104, column: 7, scope: !6680)
!6683 = !DILocation(line: 1105, column: 36, scope: !6680)
!6684 = !DILocation(line: 1105, column: 7, scope: !6680)
!6685 = !DILocation(line: 1106, column: 27, scope: !6680)
!6686 = !DILocation(line: 1106, column: 31, scope: !6680)
!6687 = !DILocation(line: 1106, column: 7, scope: !6680)
!6688 = !DILocation(line: 1107, column: 7, scope: !6680)
!6689 = !DILocation(line: 1110, column: 7, scope: !6690)
!6690 = distinct !DILexicalBlock(scope: !6642, file: !3, line: 1110, column: 7)
!6691 = !DILocation(line: 1110, column: 11, scope: !6690)
!6692 = !DILocation(line: 1110, column: 7, scope: !6642)
!6693 = !DILocation(line: 1114, column: 28, scope: !6694)
!6694 = distinct !DILexicalBlock(scope: !6690, file: !3, line: 1111, column: 5)
!6695 = !DILocation(line: 1114, column: 32, scope: !6694)
!6696 = !DILocation(line: 1114, column: 43, scope: !6694)
!6697 = !DILocation(line: 1114, column: 7, scope: !6694)
!6698 = !DILocation(line: 1115, column: 7, scope: !6694)
!6699 = !DILocation(line: 1118, column: 44, scope: !6642)
!6700 = !DILocation(line: 1118, column: 19, scope: !6642)
!6701 = !DILocation(line: 1118, column: 17, scope: !6642)
!6702 = !DILocation(line: 1119, column: 27, scope: !6642)
!6703 = !DILocation(line: 1119, column: 7, scope: !6642)
!6704 = !DILocation(line: 1119, column: 5, scope: !6642)
!6705 = !DILocation(line: 1120, column: 25, scope: !6642)
!6706 = !DILocation(line: 1120, column: 29, scope: !6642)
!6707 = !DILocation(line: 1120, column: 40, scope: !6642)
!6708 = !DILocation(line: 1120, column: 3, scope: !6642)
!6709 = !DILocation(line: 1122, column: 24, scope: !6642)
!6710 = !DILocation(line: 1122, column: 28, scope: !6642)
!6711 = !DILocation(line: 1122, column: 39, scope: !6642)
!6712 = !DILocation(line: 1122, column: 3, scope: !6642)
!6713 = !DILocation(line: 1124, column: 7, scope: !6642)
!6714 = !DILocation(line: 1124, column: 11, scope: !6642)
!6715 = !DILocation(line: 1124, column: 5, scope: !6642)
!6716 = !DILocation(line: 1125, column: 8, scope: !6642)
!6717 = !DILocation(line: 1125, column: 12, scope: !6642)
!6718 = !DILocation(line: 1125, column: 16, scope: !6642)
!6719 = !DILocation(line: 1125, column: 10, scope: !6642)
!6720 = !DILocation(line: 1125, column: 6, scope: !6642)
!6721 = !DILocation(line: 1127, column: 7, scope: !6722)
!6722 = distinct !DILexicalBlock(scope: !6642, file: !3, line: 1127, column: 7)
!6723 = !DILocation(line: 1127, column: 11, scope: !6722)
!6724 = !DILocation(line: 1127, column: 7, scope: !6642)
!6725 = !DILocalVariable(name: "return_val", scope: !6726, file: !3, line: 1130, type: !1777)
!6726 = distinct !DILexicalBlock(scope: !6722, file: !3, line: 1128, column: 5)
!6727 = !DILocation(line: 1130, column: 12, scope: !6726)
!6728 = !DILocation(line: 1131, column: 7, scope: !6726)
!6729 = !DILocation(line: 1131, column: 14, scope: !6730)
!6730 = distinct !DILexicalBlock(scope: !6731, file: !3, line: 1131, column: 7)
!6731 = distinct !DILexicalBlock(scope: !6726, file: !3, line: 1131, column: 7)
!6732 = !DILocation(line: 1131, column: 18, scope: !6730)
!6733 = !DILocation(line: 1131, column: 16, scope: !6730)
!6734 = !DILocation(line: 1131, column: 7, scope: !6731)
!6735 = !DILocation(line: 1132, column: 25, scope: !6730)
!6736 = !DILocation(line: 1132, column: 28, scope: !6730)
!6737 = !DILocation(line: 1132, column: 2, scope: !6730)
!6738 = !DILocation(line: 1131, column: 22, scope: !6730)
!6739 = !DILocation(line: 1131, column: 7, scope: !6730)
!6740 = distinct !{!6740, !6734, !6741}
!6741 = !DILocation(line: 1132, column: 60, scope: !6731)
!6742 = !DILocation(line: 1133, column: 27, scope: !6726)
!6743 = !DILocation(line: 1133, column: 7, scope: !6726)
!6744 = !DILocation(line: 1134, column: 5, scope: !6726)
!6745 = !DILocation(line: 1138, column: 7, scope: !6746)
!6746 = distinct !DILexicalBlock(scope: !6722, file: !3, line: 1136, column: 5)
!6747 = !DILocation(line: 1138, column: 14, scope: !6748)
!6748 = distinct !DILexicalBlock(scope: !6749, file: !3, line: 1138, column: 7)
!6749 = distinct !DILexicalBlock(scope: !6746, file: !3, line: 1138, column: 7)
!6750 = !DILocation(line: 1138, column: 18, scope: !6748)
!6751 = !DILocation(line: 1138, column: 16, scope: !6748)
!6752 = !DILocation(line: 1138, column: 7, scope: !6749)
!6753 = !DILocation(line: 1139, column: 23, scope: !6748)
!6754 = !DILocation(line: 1139, column: 26, scope: !6748)
!6755 = !DILocation(line: 1139, column: 47, scope: !6748)
!6756 = !DILocation(line: 1139, column: 2, scope: !6748)
!6757 = !DILocation(line: 1138, column: 22, scope: !6748)
!6758 = !DILocation(line: 1138, column: 7, scope: !6748)
!6759 = distinct !{!6759, !6752, !6760}
!6760 = !DILocation(line: 1139, column: 49, scope: !6749)
!6761 = !DILocation(line: 1140, column: 27, scope: !6746)
!6762 = !DILocation(line: 1140, column: 7, scope: !6746)
!6763 = !DILocation(line: 1142, column: 11, scope: !6764)
!6764 = distinct !DILexicalBlock(scope: !6746, file: !3, line: 1142, column: 11)
!6765 = !DILocation(line: 1142, column: 50, scope: !6764)
!6766 = !DILocation(line: 1142, column: 54, scope: !6764)
!6767 = !DILocation(line: 1142, column: 47, scope: !6764)
!6768 = !DILocation(line: 1142, column: 11, scope: !6746)
!6769 = !DILocation(line: 1147, column: 4, scope: !6770)
!6770 = distinct !DILexicalBlock(scope: !6764, file: !3, line: 1143, column: 2)
!6771 = !DILocation(line: 1147, column: 8, scope: !6770)
!6772 = !DILocation(line: 1147, column: 23, scope: !6770)
!6773 = !DILocation(line: 1148, column: 4, scope: !6770)
!6774 = !DILocation(line: 1154, column: 7, scope: !6642)
!6775 = !DILocation(line: 1154, column: 11, scope: !6642)
!6776 = !DILocation(line: 1154, column: 25, scope: !6642)
!6777 = !DILocation(line: 1154, column: 5, scope: !6642)
!6778 = !DILocation(line: 1155, column: 25, scope: !6642)
!6779 = !DILocation(line: 1155, column: 29, scope: !6642)
!6780 = !DILocation(line: 1155, column: 40, scope: !6642)
!6781 = !DILocation(line: 1155, column: 3, scope: !6642)
!6782 = !DILocation(line: 1156, column: 31, scope: !6642)
!6783 = !DILocation(line: 1156, column: 38, scope: !6642)
!6784 = !DILocation(line: 1156, column: 3, scope: !6642)
!6785 = !DILocation(line: 1157, column: 1, scope: !6642)
!6786 = distinct !DISubprogram(name: "decide_copy_try_finally", scope: !3, file: !3, line: 1497, type: !6787, scopeLine: 1498, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!6787 = !DISubroutineType(types: !6788)
!6788 = !{!1890, !1679, !1640}
!6789 = !DILocalVariable(name: "ndests", arg: 1, scope: !6786, file: !3, line: 1497, type: !1679)
!6790 = !DILocation(line: 1497, column: 30, scope: !6786)
!6791 = !DILocalVariable(name: "finally", arg: 2, scope: !6786, file: !3, line: 1497, type: !1640)
!6792 = !DILocation(line: 1497, column: 49, scope: !6786)
!6793 = !DILocalVariable(name: "f_estimate", scope: !6786, file: !3, line: 1499, type: !1679)
!6794 = !DILocation(line: 1499, column: 7, scope: !6786)
!6795 = !DILocalVariable(name: "sw_estimate", scope: !6786, file: !3, line: 1499, type: !1679)
!6796 = !DILocation(line: 1499, column: 19, scope: !6786)
!6797 = !DILocation(line: 1501, column: 8, scope: !6798)
!6798 = distinct !DILexicalBlock(scope: !6786, file: !3, line: 1501, column: 7)
!6799 = !DILocation(line: 1501, column: 7, scope: !6786)
!6800 = !DILocation(line: 1502, column: 5, scope: !6798)
!6801 = !DILocation(line: 1505, column: 33, scope: !6786)
!6802 = !DILocation(line: 1505, column: 16, scope: !6786)
!6803 = !DILocation(line: 1505, column: 14, scope: !6786)
!6804 = !DILocation(line: 1506, column: 17, scope: !6786)
!6805 = !DILocation(line: 1506, column: 28, scope: !6786)
!6806 = !DILocation(line: 1506, column: 35, scope: !6786)
!6807 = !DILocation(line: 1506, column: 33, scope: !6786)
!6808 = !DILocation(line: 1506, column: 14, scope: !6786)
!6809 = !DILocation(line: 1509, column: 26, scope: !6786)
!6810 = !DILocation(line: 1509, column: 24, scope: !6786)
!6811 = !DILocation(line: 1509, column: 20, scope: !6786)
!6812 = !DILocation(line: 1509, column: 15, scope: !6786)
!6813 = !DILocation(line: 1512, column: 37, scope: !6814)
!6814 = distinct !DILexicalBlock(scope: !6786, file: !3, line: 1512, column: 7)
!6815 = !DILocation(line: 1512, column: 7, scope: !6814)
!6816 = !DILocation(line: 1512, column: 7, scope: !6786)
!6817 = !DILocation(line: 1513, column: 12, scope: !6814)
!6818 = !DILocation(line: 1513, column: 25, scope: !6814)
!6819 = !DILocation(line: 1513, column: 23, scope: !6814)
!6820 = !DILocation(line: 1513, column: 5, scope: !6814)
!6821 = !DILocation(line: 1516, column: 7, scope: !6822)
!6822 = distinct !DILexicalBlock(scope: !6786, file: !3, line: 1516, column: 7)
!6823 = !DILocation(line: 1516, column: 16, scope: !6822)
!6824 = !DILocation(line: 1516, column: 7, scope: !6786)
!6825 = !DILocation(line: 1517, column: 12, scope: !6822)
!6826 = !DILocation(line: 1517, column: 23, scope: !6822)
!6827 = !DILocation(line: 1517, column: 29, scope: !6822)
!6828 = !DILocation(line: 1517, column: 32, scope: !6822)
!6829 = !DILocation(line: 1517, column: 45, scope: !6822)
!6830 = !DILocation(line: 1517, column: 57, scope: !6822)
!6831 = !DILocation(line: 1517, column: 43, scope: !6822)
!6832 = !DILocation(line: 1517, column: 5, scope: !6822)
!6833 = !DILocation(line: 1519, column: 12, scope: !6822)
!6834 = !DILocation(line: 1519, column: 23, scope: !6822)
!6835 = !DILocation(line: 1519, column: 28, scope: !6822)
!6836 = !DILocation(line: 1519, column: 31, scope: !6822)
!6837 = !DILocation(line: 1519, column: 42, scope: !6822)
!6838 = !DILocation(line: 1519, column: 48, scope: !6822)
!6839 = !DILocation(line: 1519, column: 60, scope: !6822)
!6840 = !DILocation(line: 1519, column: 46, scope: !6822)
!6841 = !DILocation(line: 1519, column: 5, scope: !6822)
!6842 = !DILocation(line: 1520, column: 1, scope: !6786)
!6843 = !DILocalVariable(name: "state", arg: 1, scope: !3017, file: !3, line: 1164, type: !3020)
!6844 = !DILocation(line: 1164, column: 43, scope: !3017)
!6845 = !DILocalVariable(name: "tf", arg: 2, scope: !3017, file: !3, line: 1164, type: !3026)
!6846 = !DILocation(line: 1164, column: 71, scope: !3017)
!6847 = !DILocalVariable(name: "finally", scope: !3017, file: !3, line: 1166, type: !1640)
!6848 = !DILocation(line: 1166, column: 14, scope: !3017)
!6849 = !DILocalVariable(name: "new_stmt", scope: !3017, file: !3, line: 1167, type: !1640)
!6850 = !DILocation(line: 1167, column: 14, scope: !3017)
!6851 = !DILocalVariable(name: "seq", scope: !3017, file: !3, line: 1168, type: !1640)
!6852 = !DILocation(line: 1168, column: 14, scope: !3017)
!6853 = !DILocalVariable(name: "x", scope: !3017, file: !3, line: 1169, type: !1589)
!6854 = !DILocation(line: 1169, column: 10, scope: !3017)
!6855 = !DILocalVariable(name: "tmp", scope: !3017, file: !3, line: 1170, type: !1777)
!6856 = !DILocation(line: 1170, column: 8, scope: !3017)
!6857 = !DILocalVariable(name: "tf_loc", scope: !3017, file: !3, line: 1171, type: !1608)
!6858 = !DILocation(line: 1171, column: 14, scope: !3017)
!6859 = !DILocation(line: 1171, column: 40, scope: !3017)
!6860 = !DILocation(line: 1171, column: 44, scope: !3017)
!6861 = !DILocation(line: 1171, column: 23, scope: !3017)
!6862 = !DILocation(line: 1173, column: 33, scope: !3017)
!6863 = !DILocation(line: 1173, column: 37, scope: !3017)
!6864 = !DILocation(line: 1173, column: 13, scope: !3017)
!6865 = !DILocation(line: 1173, column: 11, scope: !3017)
!6866 = !DILocation(line: 1174, column: 36, scope: !3017)
!6867 = !DILocation(line: 1174, column: 40, scope: !3017)
!6868 = !DILocation(line: 1174, column: 19, scope: !3017)
!6869 = !DILocation(line: 1174, column: 3, scope: !3017)
!6870 = !DILocation(line: 1174, column: 7, scope: !3017)
!6871 = !DILocation(line: 1174, column: 17, scope: !3017)
!6872 = !DILocation(line: 1175, column: 12, scope: !3017)
!6873 = !DILocation(line: 1177, column: 7, scope: !6874)
!6874 = distinct !DILexicalBlock(scope: !3017, file: !3, line: 1177, column: 7)
!6875 = !DILocation(line: 1177, column: 11, scope: !6874)
!6876 = !DILocation(line: 1177, column: 7, scope: !3017)
!6877 = !DILocation(line: 1179, column: 42, scope: !6878)
!6878 = distinct !DILexicalBlock(scope: !6874, file: !3, line: 1178, column: 5)
!6879 = !DILocation(line: 1179, column: 51, scope: !6878)
!6880 = !DILocation(line: 1179, column: 13, scope: !6878)
!6881 = !DILocation(line: 1179, column: 11, scope: !6878)
!6882 = !DILocation(line: 1180, column: 30, scope: !6878)
!6883 = !DILocation(line: 1180, column: 37, scope: !6878)
!6884 = !DILocation(line: 1180, column: 7, scope: !6878)
!6885 = !DILocation(line: 1181, column: 38, scope: !6878)
!6886 = !DILocation(line: 1181, column: 7, scope: !6878)
!6887 = !DILocation(line: 1183, column: 47, scope: !6878)
!6888 = !DILocation(line: 1183, column: 13, scope: !6878)
!6889 = !DILocation(line: 1183, column: 11, scope: !6878)
!6890 = !DILocation(line: 1184, column: 30, scope: !6878)
!6891 = !DILocation(line: 1184, column: 11, scope: !6878)
!6892 = !DILocation(line: 1184, column: 9, scope: !6878)
!6893 = !DILocation(line: 1185, column: 39, scope: !6878)
!6894 = !DILocation(line: 1185, column: 7, scope: !6878)
!6895 = !DILocation(line: 1186, column: 5, scope: !6878)
!6896 = !DILocation(line: 1188, column: 7, scope: !6897)
!6897 = distinct !DILexicalBlock(scope: !3017, file: !3, line: 1188, column: 7)
!6898 = !DILocation(line: 1188, column: 11, scope: !6897)
!6899 = !DILocation(line: 1188, column: 7, scope: !3017)
!6900 = !DILocation(line: 1190, column: 42, scope: !6901)
!6901 = distinct !DILexicalBlock(scope: !6897, file: !3, line: 1189, column: 5)
!6902 = !DILocation(line: 1190, column: 51, scope: !6901)
!6903 = !DILocation(line: 1190, column: 13, scope: !6901)
!6904 = !DILocation(line: 1190, column: 11, scope: !6901)
!6905 = !DILocation(line: 1191, column: 30, scope: !6901)
!6906 = !DILocation(line: 1191, column: 37, scope: !6901)
!6907 = !DILocation(line: 1191, column: 7, scope: !6901)
!6908 = !DILocation(line: 1193, column: 39, scope: !6901)
!6909 = !DILocation(line: 1193, column: 43, scope: !6901)
!6910 = !DILocation(line: 1193, column: 7, scope: !6901)
!6911 = !DILocation(line: 1194, column: 36, scope: !6901)
!6912 = !DILocation(line: 1194, column: 7, scope: !6901)
!6913 = !DILocation(line: 1195, column: 27, scope: !6901)
!6914 = !DILocation(line: 1195, column: 31, scope: !6901)
!6915 = !DILocation(line: 1195, column: 7, scope: !6901)
!6916 = !DILocation(line: 1196, column: 5, scope: !6901)
!6917 = !DILocation(line: 1198, column: 7, scope: !6918)
!6918 = distinct !DILexicalBlock(scope: !3017, file: !3, line: 1198, column: 7)
!6919 = !DILocation(line: 1198, column: 11, scope: !6918)
!6920 = !DILocation(line: 1198, column: 7, scope: !3017)
!6921 = !DILocalVariable(name: "q", scope: !6922, file: !3, line: 1200, type: !3007)
!6922 = distinct !DILexicalBlock(scope: !6918, file: !3, line: 1199, column: 5)
!6923 = !DILocation(line: 1200, column: 31, scope: !6922)
!6924 = !DILocalVariable(name: "qe", scope: !6922, file: !3, line: 1200, type: !3007)
!6925 = !DILocation(line: 1200, column: 35, scope: !6922)
!6926 = !DILocalVariable(name: "return_val", scope: !6922, file: !3, line: 1201, type: !1777)
!6927 = !DILocation(line: 1201, column: 12, scope: !6922)
!6928 = !DILocalVariable(name: "return_index", scope: !6922, file: !3, line: 1202, type: !1679)
!6929 = !DILocation(line: 1202, column: 11, scope: !6922)
!6930 = !DILocalVariable(name: "index", scope: !6922, file: !3, line: 1202, type: !1679)
!6931 = !DILocation(line: 1202, column: 25, scope: !6922)
!6932 = !DILocalVariable(name: "labels", scope: !6922, file: !3, line: 1207, type: !3015)
!6933 = !DILocation(line: 1207, column: 10, scope: !6922)
!6934 = !DILocation(line: 1209, column: 22, scope: !6922)
!6935 = !DILocation(line: 1209, column: 20, scope: !6922)
!6936 = !DILocation(line: 1210, column: 16, scope: !6922)
!6937 = !DILocation(line: 1210, column: 14, scope: !6922)
!6938 = !DILocation(line: 1212, column: 11, scope: !6922)
!6939 = !DILocation(line: 1212, column: 15, scope: !6922)
!6940 = !DILocation(line: 1212, column: 9, scope: !6922)
!6941 = !DILocation(line: 1213, column: 12, scope: !6922)
!6942 = !DILocation(line: 1213, column: 16, scope: !6922)
!6943 = !DILocation(line: 1213, column: 20, scope: !6922)
!6944 = !DILocation(line: 1213, column: 14, scope: !6922)
!6945 = !DILocation(line: 1213, column: 10, scope: !6922)
!6946 = !DILocation(line: 1214, column: 7, scope: !6922)
!6947 = !DILocation(line: 1214, column: 14, scope: !6948)
!6948 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 1214, column: 7)
!6949 = distinct !DILexicalBlock(scope: !6922, file: !3, line: 1214, column: 7)
!6950 = !DILocation(line: 1214, column: 18, scope: !6948)
!6951 = !DILocation(line: 1214, column: 16, scope: !6948)
!6952 = !DILocation(line: 1214, column: 7, scope: !6949)
!6953 = !DILocation(line: 1216, column: 12, scope: !6954)
!6954 = distinct !DILexicalBlock(scope: !6948, file: !3, line: 1215, column: 2)
!6955 = !DILocation(line: 1216, column: 15, scope: !6954)
!6956 = !DILocation(line: 1216, column: 21, scope: !6954)
!6957 = !DILocation(line: 1216, column: 27, scope: !6954)
!6958 = !DILocation(line: 1216, column: 42, scope: !6954)
!6959 = !DILocation(line: 1216, column: 45, scope: !6954)
!6960 = !DILocation(line: 1216, column: 10, scope: !6954)
!6961 = !DILocation(line: 1218, column: 9, scope: !6962)
!6962 = distinct !DILexicalBlock(scope: !6954, file: !3, line: 1218, column: 8)
!6963 = !DILocation(line: 1218, column: 16, scope: !6962)
!6964 = !DILocation(line: 1218, column: 23, scope: !6962)
!6965 = !DILocation(line: 1218, column: 8, scope: !6954)
!6966 = !DILocation(line: 1219, column: 24, scope: !6962)
!6967 = !DILocation(line: 1219, column: 6, scope: !6962)
!6968 = !DILocation(line: 1219, column: 13, scope: !6962)
!6969 = !DILocation(line: 1219, column: 20, scope: !6962)
!6970 = !DILocation(line: 1219, column: 22, scope: !6962)
!6971 = !DILocation(line: 1220, column: 2, scope: !6954)
!6972 = !DILocation(line: 1214, column: 23, scope: !6948)
!6973 = !DILocation(line: 1214, column: 7, scope: !6948)
!6974 = distinct !{!6974, !6952, !6975}
!6975 = !DILocation(line: 1220, column: 2, scope: !6949)
!6976 = !DILocation(line: 1222, column: 18, scope: !6977)
!6977 = distinct !DILexicalBlock(scope: !6922, file: !3, line: 1222, column: 7)
!6978 = !DILocation(line: 1222, column: 12, scope: !6977)
!6979 = !DILocation(line: 1222, column: 23, scope: !6980)
!6980 = distinct !DILexicalBlock(scope: !6977, file: !3, line: 1222, column: 7)
!6981 = !DILocation(line: 1222, column: 31, scope: !6980)
!6982 = !DILocation(line: 1222, column: 44, scope: !6980)
!6983 = !DILocation(line: 1222, column: 29, scope: !6980)
!6984 = !DILocation(line: 1222, column: 7, scope: !6977)
!6985 = !DILocalVariable(name: "lab", scope: !6986, file: !3, line: 1224, type: !1777)
!6986 = distinct !DILexicalBlock(scope: !6980, file: !3, line: 1223, column: 2)
!6987 = !DILocation(line: 1224, column: 9, scope: !6986)
!6988 = !DILocation(line: 1226, column: 8, scope: !6986)
!6989 = !DILocation(line: 1226, column: 15, scope: !6986)
!6990 = !DILocation(line: 1226, column: 22, scope: !6986)
!6991 = !DILocation(line: 1226, column: 6, scope: !6986)
!6992 = !DILocation(line: 1227, column: 10, scope: !6993)
!6993 = distinct !DILexicalBlock(scope: !6986, file: !3, line: 1227, column: 8)
!6994 = !DILocation(line: 1227, column: 8, scope: !6986)
!6995 = !DILocation(line: 1228, column: 6, scope: !6993)
!6996 = !DILocation(line: 1231, column: 33, scope: !6986)
!6997 = !DILocation(line: 1231, column: 8, scope: !6986)
!6998 = !DILocation(line: 1230, column: 10, scope: !6986)
!6999 = !DILocation(line: 1230, column: 17, scope: !6986)
!7000 = !DILocation(line: 1230, column: 24, scope: !6986)
!7001 = !DILocation(line: 1231, column: 6, scope: !6986)
!7002 = !DILocation(line: 1230, column: 8, scope: !6986)
!7003 = !DILocation(line: 1233, column: 8, scope: !7004)
!7004 = distinct !DILexicalBlock(scope: !6986, file: !3, line: 1233, column: 8)
!7005 = !DILocation(line: 1233, column: 17, scope: !7004)
!7006 = !DILocation(line: 1233, column: 14, scope: !7004)
!7007 = !DILocation(line: 1233, column: 8, scope: !6986)
!7008 = !DILocation(line: 1234, column: 29, scope: !7004)
!7009 = !DILocation(line: 1234, column: 32, scope: !7004)
!7010 = !DILocation(line: 1234, column: 6, scope: !7004)
!7011 = !DILocation(line: 1236, column: 27, scope: !7004)
!7012 = !DILocation(line: 1236, column: 30, scope: !7004)
!7013 = !DILocation(line: 1236, column: 41, scope: !7004)
!7014 = !DILocation(line: 1236, column: 6, scope: !7004)
!7015 = !DILocation(line: 1238, column: 28, scope: !6986)
!7016 = !DILocation(line: 1238, column: 8, scope: !6986)
!7017 = !DILocation(line: 1238, column: 6, scope: !6986)
!7018 = !DILocation(line: 1239, column: 43, scope: !6986)
!7019 = !DILocation(line: 1239, column: 11, scope: !6986)
!7020 = !DILocation(line: 1241, column: 39, scope: !6986)
!7021 = !DILocation(line: 1241, column: 48, scope: !6986)
!7022 = !DILocation(line: 1241, column: 10, scope: !6986)
!7023 = !DILocation(line: 1241, column: 8, scope: !6986)
!7024 = !DILocation(line: 1242, column: 27, scope: !6986)
!7025 = !DILocation(line: 1242, column: 34, scope: !6986)
!7026 = !DILocation(line: 1242, column: 4, scope: !6986)
!7027 = !DILocation(line: 1243, column: 42, scope: !6986)
!7028 = !DILocation(line: 1243, column: 11, scope: !6986)
!7029 = !DILocation(line: 1245, column: 43, scope: !6986)
!7030 = !DILocation(line: 1245, column: 46, scope: !6986)
!7031 = !DILocation(line: 1245, column: 11, scope: !6986)
!7032 = !DILocation(line: 1246, column: 32, scope: !6986)
!7033 = !DILocation(line: 1246, column: 39, scope: !6986)
!7034 = !DILocation(line: 1246, column: 42, scope: !6986)
!7035 = !DILocation(line: 1246, column: 4, scope: !6986)
!7036 = !DILocation(line: 1247, column: 2, scope: !6986)
!7037 = !DILocation(line: 1222, column: 54, scope: !6980)
!7038 = !DILocation(line: 1222, column: 7, scope: !6980)
!7039 = distinct !{!7039, !6984, !7040}
!7040 = !DILocation(line: 1247, column: 2, scope: !6977)
!7041 = !DILocation(line: 1249, column: 16, scope: !7042)
!7042 = distinct !DILexicalBlock(scope: !6922, file: !3, line: 1249, column: 7)
!7043 = !DILocation(line: 1249, column: 20, scope: !7042)
!7044 = !DILocation(line: 1249, column: 14, scope: !7042)
!7045 = !DILocation(line: 1249, column: 12, scope: !7042)
!7046 = !DILocation(line: 1249, column: 32, scope: !7047)
!7047 = distinct !DILexicalBlock(scope: !7042, file: !3, line: 1249, column: 7)
!7048 = !DILocation(line: 1249, column: 36, scope: !7047)
!7049 = !DILocation(line: 1249, column: 34, scope: !7047)
!7050 = !DILocation(line: 1249, column: 7, scope: !7042)
!7051 = !DILocalVariable(name: "lab", scope: !7052, file: !3, line: 1251, type: !1777)
!7052 = distinct !DILexicalBlock(scope: !7047, file: !3, line: 1250, column: 2)
!7053 = !DILocation(line: 1251, column: 9, scope: !7052)
!7054 = !DILocation(line: 1253, column: 12, scope: !7052)
!7055 = !DILocation(line: 1253, column: 15, scope: !7052)
!7056 = !DILocation(line: 1253, column: 21, scope: !7052)
!7057 = !DILocation(line: 1253, column: 27, scope: !7052)
!7058 = !DILocation(line: 1253, column: 42, scope: !7052)
!7059 = !DILocation(line: 1253, column: 45, scope: !7052)
!7060 = !DILocation(line: 1253, column: 10, scope: !7052)
!7061 = !DILocation(line: 1255, column: 8, scope: !7062)
!7062 = distinct !DILexicalBlock(scope: !7052, file: !3, line: 1255, column: 8)
!7063 = !DILocation(line: 1255, column: 15, scope: !7062)
!7064 = !DILocation(line: 1255, column: 22, scope: !7062)
!7065 = !DILocation(line: 1255, column: 27, scope: !7062)
!7066 = !DILocation(line: 1255, column: 24, scope: !7062)
!7067 = !DILocation(line: 1255, column: 8, scope: !7052)
!7068 = !DILocation(line: 1256, column: 6, scope: !7062)
!7069 = !DILocation(line: 1258, column: 10, scope: !7052)
!7070 = !DILocation(line: 1258, column: 17, scope: !7052)
!7071 = !DILocation(line: 1258, column: 24, scope: !7052)
!7072 = !DILocation(line: 1258, column: 8, scope: !7052)
!7073 = !DILocation(line: 1260, column: 8, scope: !7074)
!7074 = distinct !DILexicalBlock(scope: !7052, file: !3, line: 1260, column: 8)
!7075 = !DILocation(line: 1260, column: 17, scope: !7074)
!7076 = !DILocation(line: 1260, column: 14, scope: !7074)
!7077 = !DILocation(line: 1260, column: 8, scope: !7052)
!7078 = !DILocation(line: 1261, column: 29, scope: !7074)
!7079 = !DILocation(line: 1261, column: 32, scope: !7074)
!7080 = !DILocation(line: 1261, column: 6, scope: !7074)
!7081 = !DILocation(line: 1263, column: 27, scope: !7074)
!7082 = !DILocation(line: 1263, column: 30, scope: !7074)
!7083 = !DILocation(line: 1263, column: 41, scope: !7074)
!7084 = !DILocation(line: 1263, column: 6, scope: !7074)
!7085 = !DILocation(line: 1264, column: 2, scope: !7052)
!7086 = !DILocation(line: 1249, column: 41, scope: !7047)
!7087 = !DILocation(line: 1249, column: 7, scope: !7047)
!7088 = distinct !{!7088, !7050, !7089}
!7089 = !DILocation(line: 1264, column: 2, scope: !7042)
!7090 = !DILocation(line: 1266, column: 27, scope: !6922)
!7091 = !DILocation(line: 1266, column: 7, scope: !6922)
!7092 = !DILocation(line: 1267, column: 13, scope: !6922)
!7093 = !DILocation(line: 1267, column: 7, scope: !6922)
!7094 = !DILocation(line: 1268, column: 5, scope: !6922)
!7095 = !DILocation(line: 1272, column: 24, scope: !3017)
!7096 = !DILocation(line: 1272, column: 28, scope: !3017)
!7097 = !DILocation(line: 1272, column: 39, scope: !3017)
!7098 = !DILocation(line: 1272, column: 3, scope: !3017)
!7099 = !DILocation(line: 1273, column: 1, scope: !3017)
!7100 = distinct !DISubprogram(name: "lower_try_finally_switch", scope: !3, file: !3, line: 1281, type: !3018, scopeLine: 1282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!7101 = !DILocalVariable(name: "state", arg: 1, scope: !7100, file: !3, line: 1281, type: !3020)
!7102 = !DILocation(line: 1281, column: 45, scope: !7100)
!7103 = !DILocalVariable(name: "tf", arg: 2, scope: !7100, file: !3, line: 1281, type: !3026)
!7104 = !DILocation(line: 1281, column: 73, scope: !7100)
!7105 = !DILocalVariable(name: "q", scope: !7100, file: !3, line: 1283, type: !3007)
!7106 = !DILocation(line: 1283, column: 27, scope: !7100)
!7107 = !DILocalVariable(name: "qe", scope: !7100, file: !3, line: 1283, type: !3007)
!7108 = !DILocation(line: 1283, column: 31, scope: !7100)
!7109 = !DILocalVariable(name: "return_val", scope: !7100, file: !3, line: 1284, type: !1777)
!7110 = !DILocation(line: 1284, column: 8, scope: !7100)
!7111 = !DILocalVariable(name: "finally_tmp", scope: !7100, file: !3, line: 1285, type: !1777)
!7112 = !DILocation(line: 1285, column: 8, scope: !7100)
!7113 = !DILocalVariable(name: "finally_label", scope: !7100, file: !3, line: 1285, type: !1777)
!7114 = !DILocation(line: 1285, column: 21, scope: !7100)
!7115 = !DILocalVariable(name: "return_index", scope: !7100, file: !3, line: 1286, type: !1679)
!7116 = !DILocation(line: 1286, column: 7, scope: !7100)
!7117 = !DILocalVariable(name: "eh_index", scope: !7100, file: !3, line: 1286, type: !1679)
!7118 = !DILocation(line: 1286, column: 21, scope: !7100)
!7119 = !DILocalVariable(name: "fallthru_index", scope: !7100, file: !3, line: 1286, type: !1679)
!7120 = !DILocation(line: 1286, column: 31, scope: !7100)
!7121 = !DILocalVariable(name: "nlabels", scope: !7100, file: !3, line: 1287, type: !1679)
!7122 = !DILocation(line: 1287, column: 7, scope: !7100)
!7123 = !DILocalVariable(name: "ndests", scope: !7100, file: !3, line: 1287, type: !1679)
!7124 = !DILocation(line: 1287, column: 16, scope: !7100)
!7125 = !DILocalVariable(name: "j", scope: !7100, file: !3, line: 1287, type: !1679)
!7126 = !DILocation(line: 1287, column: 24, scope: !7100)
!7127 = !DILocalVariable(name: "last_case_index", scope: !7100, file: !3, line: 1287, type: !1679)
!7128 = !DILocation(line: 1287, column: 27, scope: !7100)
!7129 = !DILocalVariable(name: "last_case", scope: !7100, file: !3, line: 1288, type: !1777)
!7130 = !DILocation(line: 1288, column: 8, scope: !7100)
!7131 = !DILocalVariable(name: "case_label_vec", scope: !7100, file: !3, line: 1289, type: !3002)
!7132 = !DILocation(line: 1289, column: 20, scope: !7100)
!7133 = !DILocalVariable(name: "switch_body", scope: !7100, file: !3, line: 1290, type: !1640)
!7134 = !DILocation(line: 1290, column: 14, scope: !7100)
!7135 = !DILocalVariable(name: "x", scope: !7100, file: !3, line: 1291, type: !1589)
!7136 = !DILocation(line: 1291, column: 10, scope: !7100)
!7137 = !DILocalVariable(name: "tmp", scope: !7100, file: !3, line: 1292, type: !1777)
!7138 = !DILocation(line: 1292, column: 8, scope: !7100)
!7139 = !DILocalVariable(name: "switch_stmt", scope: !7100, file: !3, line: 1293, type: !1589)
!7140 = !DILocation(line: 1293, column: 10, scope: !7100)
!7141 = !DILocalVariable(name: "finally", scope: !7100, file: !3, line: 1294, type: !1640)
!7142 = !DILocation(line: 1294, column: 14, scope: !7100)
!7143 = !DILocalVariable(name: "cont_map", scope: !7100, file: !3, line: 1295, type: !2261)
!7144 = !DILocation(line: 1295, column: 25, scope: !7100)
!7145 = !DILocalVariable(name: "tf_loc", scope: !7100, file: !3, line: 1297, type: !1608)
!7146 = !DILocation(line: 1297, column: 14, scope: !7100)
!7147 = !DILocation(line: 1297, column: 40, scope: !7100)
!7148 = !DILocation(line: 1297, column: 44, scope: !7100)
!7149 = !DILocation(line: 1297, column: 23, scope: !7100)
!7150 = !DILocalVariable(name: "finally_loc", scope: !7100, file: !3, line: 1299, type: !1608)
!7151 = !DILocation(line: 1299, column: 14, scope: !7100)
!7152 = !DILocation(line: 1301, column: 17, scope: !7100)
!7153 = !DILocation(line: 1301, column: 15, scope: !7100)
!7154 = !DILocation(line: 1304, column: 33, scope: !7100)
!7155 = !DILocation(line: 1304, column: 37, scope: !7100)
!7156 = !DILocation(line: 1304, column: 13, scope: !7100)
!7157 = !DILocation(line: 1304, column: 11, scope: !7100)
!7158 = !DILocation(line: 1305, column: 36, scope: !7100)
!7159 = !DILocation(line: 1305, column: 40, scope: !7100)
!7160 = !DILocation(line: 1305, column: 19, scope: !7100)
!7161 = !DILocation(line: 1305, column: 3, scope: !7100)
!7162 = !DILocation(line: 1305, column: 7, scope: !7100)
!7163 = !DILocation(line: 1305, column: 17, scope: !7100)
!7164 = !DILocation(line: 1309, column: 39, scope: !7100)
!7165 = !DILocation(line: 1309, column: 43, scope: !7100)
!7166 = !DILocation(line: 1309, column: 17, scope: !7100)
!7167 = !DILocation(line: 1309, column: 54, scope: !7100)
!7168 = !DILocation(line: 1310, column: 44, scope: !7100)
!7169 = !DILocation(line: 1310, column: 48, scope: !7100)
!7170 = !DILocation(line: 1310, column: 22, scope: !7100)
!7171 = !DILocation(line: 1310, column: 5, scope: !7100)
!7172 = !DILocation(line: 1311, column: 7, scope: !7100)
!7173 = !DILocation(line: 1309, column: 15, scope: !7100)
!7174 = !DILocation(line: 1314, column: 26, scope: !7100)
!7175 = !DILocation(line: 1314, column: 33, scope: !7100)
!7176 = !DILocation(line: 1314, column: 3, scope: !7100)
!7177 = !DILocation(line: 1317, column: 13, scope: !7100)
!7178 = !DILocation(line: 1317, column: 11, scope: !7100)
!7179 = !DILocation(line: 1318, column: 18, scope: !7100)
!7180 = !DILocation(line: 1318, column: 16, scope: !7100)
!7181 = !DILocation(line: 1319, column: 14, scope: !7100)
!7182 = !DILocation(line: 1319, column: 29, scope: !7100)
!7183 = !DILocation(line: 1319, column: 33, scope: !7100)
!7184 = !DILocation(line: 1319, column: 27, scope: !7100)
!7185 = !DILocation(line: 1319, column: 12, scope: !7100)
!7186 = !DILocation(line: 1320, column: 20, scope: !7100)
!7187 = !DILocation(line: 1320, column: 31, scope: !7100)
!7188 = !DILocation(line: 1320, column: 35, scope: !7100)
!7189 = !DILocation(line: 1320, column: 29, scope: !7100)
!7190 = !DILocation(line: 1320, column: 18, scope: !7100)
!7191 = !DILocation(line: 1321, column: 12, scope: !7100)
!7192 = !DILocation(line: 1321, column: 29, scope: !7100)
!7193 = !DILocation(line: 1321, column: 33, scope: !7100)
!7194 = !DILocation(line: 1321, column: 27, scope: !7100)
!7195 = !DILocation(line: 1321, column: 10, scope: !7100)
!7196 = !DILocation(line: 1323, column: 33, scope: !7100)
!7197 = !DILocation(line: 1323, column: 17, scope: !7100)
!7198 = !DILocation(line: 1323, column: 15, scope: !7100)
!7199 = !DILocation(line: 1324, column: 44, scope: !7100)
!7200 = !DILocation(line: 1324, column: 19, scope: !7100)
!7201 = !DILocation(line: 1324, column: 17, scope: !7100)
!7202 = !DILocation(line: 1329, column: 20, scope: !7100)
!7203 = !DILocation(line: 1329, column: 18, scope: !7100)
!7204 = !DILocation(line: 1330, column: 13, scope: !7100)
!7205 = !DILocation(line: 1331, column: 19, scope: !7100)
!7206 = !DILocation(line: 1337, column: 7, scope: !7207)
!7207 = distinct !DILexicalBlock(scope: !7100, file: !3, line: 1337, column: 7)
!7208 = !DILocation(line: 1337, column: 11, scope: !7207)
!7209 = !DILocation(line: 1337, column: 7, scope: !7100)
!7210 = !DILocation(line: 1339, column: 11, scope: !7211)
!7211 = distinct !DILexicalBlock(scope: !7207, file: !3, line: 1338, column: 5)
!7212 = !DILocation(line: 1339, column: 9, scope: !7211)
!7213 = !DILocation(line: 1341, column: 29, scope: !7211)
!7214 = !DILocation(line: 1341, column: 33, scope: !7211)
!7215 = !DILocation(line: 1341, column: 44, scope: !7211)
!7216 = !DILocation(line: 1341, column: 7, scope: !7211)
!7217 = !DILocation(line: 1343, column: 19, scope: !7211)
!7218 = !DILocation(line: 1343, column: 17, scope: !7211)
!7219 = !DILocation(line: 1346, column: 7, scope: !7211)
!7220 = !DILocation(line: 1347, column: 22, scope: !7211)
!7221 = !DILocation(line: 1349, column: 31, scope: !7211)
!7222 = !DILocation(line: 1349, column: 11, scope: !7211)
!7223 = !DILocation(line: 1349, column: 9, scope: !7211)
!7224 = !DILocation(line: 1350, column: 42, scope: !7211)
!7225 = !DILocation(line: 1350, column: 7, scope: !7211)
!7226 = !DILocation(line: 1352, column: 47, scope: !7211)
!7227 = !DILocation(line: 1352, column: 13, scope: !7211)
!7228 = !DILocation(line: 1352, column: 11, scope: !7211)
!7229 = !DILocation(line: 1353, column: 30, scope: !7211)
!7230 = !DILocation(line: 1353, column: 11, scope: !7211)
!7231 = !DILocation(line: 1353, column: 9, scope: !7211)
!7232 = !DILocation(line: 1354, column: 42, scope: !7211)
!7233 = !DILocation(line: 1354, column: 7, scope: !7211)
!7234 = !DILocation(line: 1355, column: 5, scope: !7211)
!7235 = !DILocation(line: 1357, column: 7, scope: !7236)
!7236 = distinct !DILexicalBlock(scope: !7100, file: !3, line: 1357, column: 7)
!7237 = !DILocation(line: 1357, column: 11, scope: !7236)
!7238 = !DILocation(line: 1357, column: 7, scope: !7100)
!7239 = !DILocation(line: 1359, column: 39, scope: !7240)
!7240 = distinct !DILexicalBlock(scope: !7236, file: !3, line: 1358, column: 5)
!7241 = !DILocation(line: 1359, column: 43, scope: !7240)
!7242 = !DILocation(line: 1359, column: 7, scope: !7240)
!7243 = !DILocation(line: 1361, column: 11, scope: !7240)
!7244 = !DILocation(line: 1361, column: 9, scope: !7240)
!7245 = !DILocation(line: 1363, column: 37, scope: !7240)
!7246 = !DILocation(line: 1363, column: 7, scope: !7240)
!7247 = !DILocation(line: 1365, column: 30, scope: !7240)
!7248 = !DILocation(line: 1365, column: 11, scope: !7240)
!7249 = !DILocation(line: 1365, column: 9, scope: !7240)
!7250 = !DILocation(line: 1366, column: 37, scope: !7240)
!7251 = !DILocation(line: 1366, column: 7, scope: !7240)
!7252 = !DILocation(line: 1368, column: 19, scope: !7240)
!7253 = !DILocation(line: 1368, column: 17, scope: !7240)
!7254 = !DILocation(line: 1371, column: 7, scope: !7240)
!7255 = !DILocation(line: 1372, column: 22, scope: !7240)
!7256 = !DILocation(line: 1374, column: 31, scope: !7240)
!7257 = !DILocation(line: 1374, column: 11, scope: !7240)
!7258 = !DILocation(line: 1374, column: 9, scope: !7240)
!7259 = !DILocation(line: 1375, column: 37, scope: !7240)
!7260 = !DILocation(line: 1375, column: 7, scope: !7240)
!7261 = !DILocation(line: 1376, column: 27, scope: !7240)
!7262 = !DILocation(line: 1376, column: 31, scope: !7240)
!7263 = !DILocation(line: 1376, column: 7, scope: !7240)
!7264 = !DILocation(line: 1377, column: 5, scope: !7240)
!7265 = !DILocation(line: 1379, column: 27, scope: !7100)
!7266 = !DILocation(line: 1379, column: 7, scope: !7100)
!7267 = !DILocation(line: 1379, column: 5, scope: !7100)
!7268 = !DILocation(line: 1380, column: 25, scope: !7100)
!7269 = !DILocation(line: 1380, column: 29, scope: !7100)
!7270 = !DILocation(line: 1380, column: 40, scope: !7100)
!7271 = !DILocation(line: 1380, column: 3, scope: !7100)
!7272 = !DILocation(line: 1382, column: 24, scope: !7100)
!7273 = !DILocation(line: 1382, column: 28, scope: !7100)
!7274 = !DILocation(line: 1382, column: 39, scope: !7100)
!7275 = !DILocation(line: 1382, column: 3, scope: !7100)
!7276 = !DILocation(line: 1385, column: 7, scope: !7100)
!7277 = !DILocation(line: 1385, column: 11, scope: !7100)
!7278 = !DILocation(line: 1385, column: 5, scope: !7100)
!7279 = !DILocation(line: 1386, column: 8, scope: !7100)
!7280 = !DILocation(line: 1386, column: 12, scope: !7100)
!7281 = !DILocation(line: 1386, column: 16, scope: !7100)
!7282 = !DILocation(line: 1386, column: 10, scope: !7100)
!7283 = !DILocation(line: 1386, column: 6, scope: !7100)
!7284 = !DILocation(line: 1387, column: 7, scope: !7100)
!7285 = !DILocation(line: 1387, column: 25, scope: !7100)
!7286 = !DILocation(line: 1387, column: 29, scope: !7100)
!7287 = !DILocation(line: 1387, column: 23, scope: !7100)
!7288 = !DILocation(line: 1387, column: 5, scope: !7100)
!7289 = !DILocation(line: 1390, column: 3, scope: !7100)
!7290 = !DILocation(line: 1390, column: 10, scope: !7291)
!7291 = distinct !DILexicalBlock(scope: !7292, file: !3, line: 1390, column: 3)
!7292 = distinct !DILexicalBlock(scope: !7100, file: !3, line: 1390, column: 3)
!7293 = !DILocation(line: 1390, column: 14, scope: !7291)
!7294 = !DILocation(line: 1390, column: 12, scope: !7291)
!7295 = !DILocation(line: 1390, column: 3, scope: !7292)
!7296 = !DILocalVariable(name: "mod", scope: !7297, file: !3, line: 1392, type: !1640)
!7297 = distinct !DILexicalBlock(scope: !7291, file: !3, line: 1391, column: 5)
!7298 = !DILocation(line: 1392, column: 18, scope: !7297)
!7299 = !DILocalVariable(name: "switch_id", scope: !7297, file: !3, line: 1393, type: !1679)
!7300 = !DILocation(line: 1393, column: 11, scope: !7297)
!7301 = !DILocalVariable(name: "case_index", scope: !7297, file: !3, line: 1394, type: !7)
!7302 = !DILocation(line: 1394, column: 20, scope: !7297)
!7303 = !DILocation(line: 1396, column: 13, scope: !7297)
!7304 = !DILocation(line: 1396, column: 11, scope: !7297)
!7305 = !DILocation(line: 1398, column: 11, scope: !7306)
!7306 = distinct !DILexicalBlock(scope: !7297, file: !3, line: 1398, column: 11)
!7307 = !DILocation(line: 1398, column: 14, scope: !7306)
!7308 = !DILocation(line: 1398, column: 20, scope: !7306)
!7309 = !DILocation(line: 1398, column: 11, scope: !7297)
!7310 = !DILocation(line: 1400, column: 8, scope: !7311)
!7311 = distinct !DILexicalBlock(scope: !7306, file: !3, line: 1399, column: 2)
!7312 = !DILocation(line: 1400, column: 6, scope: !7311)
!7313 = !DILocation(line: 1402, column: 31, scope: !7311)
!7314 = !DILocation(line: 1402, column: 4, scope: !7311)
!7315 = !DILocation(line: 1403, column: 27, scope: !7311)
!7316 = !DILocation(line: 1403, column: 30, scope: !7311)
!7317 = !DILocation(line: 1403, column: 45, scope: !7311)
!7318 = !DILocation(line: 1403, column: 4, scope: !7311)
!7319 = !DILocation(line: 1404, column: 16, scope: !7311)
!7320 = !DILocation(line: 1404, column: 14, scope: !7311)
!7321 = !DILocation(line: 1405, column: 2, scope: !7311)
!7322 = !DILocation(line: 1408, column: 8, scope: !7323)
!7323 = distinct !DILexicalBlock(scope: !7306, file: !3, line: 1407, column: 2)
!7324 = !DILocation(line: 1408, column: 6, scope: !7323)
!7325 = !DILocation(line: 1410, column: 31, scope: !7323)
!7326 = !DILocation(line: 1410, column: 4, scope: !7323)
!7327 = !DILocation(line: 1411, column: 25, scope: !7323)
!7328 = !DILocation(line: 1411, column: 28, scope: !7323)
!7329 = !DILocation(line: 1411, column: 43, scope: !7323)
!7330 = !DILocation(line: 1411, column: 48, scope: !7323)
!7331 = !DILocation(line: 1411, column: 4, scope: !7323)
!7332 = !DILocation(line: 1412, column: 16, scope: !7323)
!7333 = !DILocation(line: 1412, column: 19, scope: !7323)
!7334 = !DILocation(line: 1412, column: 14, scope: !7323)
!7335 = !DILocation(line: 1415, column: 20, scope: !7297)
!7336 = !DILocation(line: 1415, column: 24, scope: !7297)
!7337 = !DILocation(line: 1415, column: 27, scope: !7297)
!7338 = !DILocation(line: 1415, column: 22, scope: !7297)
!7339 = !DILocation(line: 1415, column: 18, scope: !7297)
!7340 = !DILocation(line: 1416, column: 11, scope: !7341)
!7341 = distinct !DILexicalBlock(scope: !7297, file: !3, line: 1416, column: 11)
!7342 = !DILocation(line: 1416, column: 48, scope: !7341)
!7343 = !DILocation(line: 1416, column: 45, scope: !7341)
!7344 = !DILocation(line: 1417, column: 11, scope: !7341)
!7345 = !DILocation(line: 1417, column: 15, scope: !7341)
!7346 = !DILocation(line: 1416, column: 11, scope: !7297)
!7347 = !DILocalVariable(name: "case_lab", scope: !7348, file: !3, line: 1419, type: !1777)
!7348 = distinct !DILexicalBlock(scope: !7341, file: !3, line: 1418, column: 9)
!7349 = !DILocation(line: 1419, column: 16, scope: !7348)
!7350 = !DILocalVariable(name: "slot", scope: !7348, file: !3, line: 1420, type: !2136)
!7351 = !DILocation(line: 1420, column: 18, scope: !7348)
!7352 = !DILocation(line: 1421, column: 22, scope: !7348)
!7353 = !DILocation(line: 1421, column: 20, scope: !7348)
!7354 = !DILocation(line: 1428, column: 16, scope: !7355)
!7355 = distinct !DILexicalBlock(scope: !7348, file: !3, line: 1428, column: 15)
!7356 = !DILocation(line: 1428, column: 15, scope: !7348)
!7357 = !DILocation(line: 1429, column: 24, scope: !7355)
!7358 = !DILocation(line: 1429, column: 22, scope: !7355)
!7359 = !DILocation(line: 1429, column: 13, scope: !7355)
!7360 = !DILocation(line: 1430, column: 38, scope: !7348)
!7361 = !DILocation(line: 1430, column: 48, scope: !7348)
!7362 = !DILocation(line: 1430, column: 18, scope: !7348)
!7363 = !DILocation(line: 1430, column: 16, scope: !7348)
!7364 = !DILocation(line: 1431, column: 19, scope: !7348)
!7365 = !DILocation(line: 1431, column: 22, scope: !7348)
!7366 = !DILocation(line: 1431, column: 12, scope: !7348)
!7367 = !DILocation(line: 1431, column: 17, scope: !7348)
!7368 = !DILocation(line: 1432, column: 11, scope: !7348)
!7369 = !DILocation(line: 1433, column: 9, scope: !7348)
!7370 = !DILocation(line: 1434, column: 5, scope: !7297)
!7371 = !DILocation(line: 1390, column: 18, scope: !7291)
!7372 = !DILocation(line: 1390, column: 3, scope: !7291)
!7373 = distinct !{!7373, !7295, !7374}
!7374 = !DILocation(line: 1434, column: 5, scope: !7292)
!7375 = !DILocation(line: 1435, column: 12, scope: !7376)
!7376 = distinct !DILexicalBlock(scope: !7100, file: !3, line: 1435, column: 3)
!7377 = !DILocation(line: 1435, column: 10, scope: !7376)
!7378 = !DILocation(line: 1435, column: 8, scope: !7376)
!7379 = !DILocation(line: 1435, column: 29, scope: !7380)
!7380 = distinct !DILexicalBlock(scope: !7376, file: !3, line: 1435, column: 3)
!7381 = !DILocation(line: 1435, column: 33, scope: !7380)
!7382 = !DILocation(line: 1435, column: 51, scope: !7380)
!7383 = !DILocation(line: 1435, column: 49, scope: !7380)
!7384 = !DILocation(line: 1435, column: 31, scope: !7380)
!7385 = !DILocation(line: 1435, column: 3, scope: !7376)
!7386 = !DILocalVariable(name: "label", scope: !7387, file: !3, line: 1437, type: !1777)
!7387 = distinct !DILexicalBlock(scope: !7380, file: !3, line: 1436, column: 5)
!7388 = !DILocation(line: 1437, column: 12, scope: !7387)
!7389 = !DILocalVariable(name: "cont_stmt", scope: !7387, file: !3, line: 1438, type: !1589)
!7390 = !DILocation(line: 1438, column: 14, scope: !7387)
!7391 = !DILocalVariable(name: "slot", scope: !7387, file: !3, line: 1439, type: !2136)
!7392 = !DILocation(line: 1439, column: 14, scope: !7387)
!7393 = !DILocation(line: 1441, column: 19, scope: !7387)
!7394 = !DILocation(line: 1441, column: 17, scope: !7387)
!7395 = !DILocation(line: 1443, column: 7, scope: !7387)
!7396 = !DILocation(line: 1444, column: 7, scope: !7387)
!7397 = !DILocation(line: 1446, column: 36, scope: !7387)
!7398 = !DILocation(line: 1446, column: 46, scope: !7387)
!7399 = !DILocation(line: 1446, column: 14, scope: !7387)
!7400 = !DILocation(line: 1446, column: 12, scope: !7387)
!7401 = !DILocation(line: 1449, column: 7, scope: !7387)
!7402 = !DILocation(line: 1450, column: 31, scope: !7387)
!7403 = !DILocation(line: 1450, column: 19, scope: !7387)
!7404 = !DILocation(line: 1450, column: 17, scope: !7387)
!7405 = !DILocation(line: 1452, column: 40, scope: !7387)
!7406 = !DILocation(line: 1452, column: 15, scope: !7387)
!7407 = !DILocation(line: 1452, column: 13, scope: !7387)
!7408 = !DILocation(line: 1453, column: 32, scope: !7387)
!7409 = !DILocation(line: 1453, column: 7, scope: !7387)
!7410 = !DILocation(line: 1453, column: 30, scope: !7387)
!7411 = !DILocation(line: 1455, column: 31, scope: !7387)
!7412 = !DILocation(line: 1455, column: 11, scope: !7387)
!7413 = !DILocation(line: 1455, column: 9, scope: !7387)
!7414 = !DILocation(line: 1456, column: 42, scope: !7387)
!7415 = !DILocation(line: 1456, column: 7, scope: !7387)
!7416 = !DILocation(line: 1457, column: 42, scope: !7387)
!7417 = !DILocation(line: 1457, column: 7, scope: !7387)
!7418 = !DILocation(line: 1458, column: 35, scope: !7387)
!7419 = !DILocation(line: 1458, column: 42, scope: !7387)
!7420 = !DILocation(line: 1458, column: 7, scope: !7387)
!7421 = !DILocation(line: 1459, column: 5, scope: !7387)
!7422 = !DILocation(line: 1435, column: 61, scope: !7380)
!7423 = !DILocation(line: 1435, column: 3, scope: !7380)
!7424 = distinct !{!7424, !7385, !7425}
!7425 = !DILocation(line: 1459, column: 5, scope: !7376)
!7426 = !DILocation(line: 1460, column: 7, scope: !7427)
!7427 = distinct !DILexicalBlock(scope: !7100, file: !3, line: 1460, column: 7)
!7428 = !DILocation(line: 1460, column: 7, scope: !7100)
!7429 = !DILocation(line: 1461, column: 26, scope: !7427)
!7430 = !DILocation(line: 1461, column: 5, scope: !7427)
!7431 = !DILocation(line: 1463, column: 23, scope: !7100)
!7432 = !DILocation(line: 1463, column: 3, scope: !7100)
!7433 = !DILocation(line: 1467, column: 3, scope: !7100)
!7434 = !DILocation(line: 1467, column: 24, scope: !7100)
!7435 = !DILocation(line: 1468, column: 21, scope: !7100)
!7436 = !DILocation(line: 1468, column: 3, scope: !7100)
!7437 = !DILocation(line: 1472, column: 42, scope: !7100)
!7438 = !DILocation(line: 1472, column: 55, scope: !7100)
!7439 = !DILocation(line: 1473, column: 42, scope: !7100)
!7440 = !DILocation(line: 1472, column: 17, scope: !7100)
!7441 = !DILocation(line: 1472, column: 15, scope: !7100)
!7442 = !DILocation(line: 1474, column: 24, scope: !7100)
!7443 = !DILocation(line: 1474, column: 37, scope: !7100)
!7444 = !DILocation(line: 1474, column: 3, scope: !7100)
!7445 = !DILocation(line: 1478, column: 25, scope: !7100)
!7446 = !DILocation(line: 1478, column: 29, scope: !7100)
!7447 = !DILocation(line: 1478, column: 40, scope: !7100)
!7448 = !DILocation(line: 1478, column: 3, scope: !7100)
!7449 = !DILocation(line: 1479, column: 24, scope: !7100)
!7450 = !DILocation(line: 1479, column: 28, scope: !7100)
!7451 = !DILocation(line: 1479, column: 39, scope: !7100)
!7452 = !DILocation(line: 1479, column: 3, scope: !7100)
!7453 = !DILocation(line: 1480, column: 1, scope: !7100)
!7454 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !142, file: !142, line: 184, type: !7455, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!7455 = !DISubroutineType(types: !7456)
!7456 = !{null, !6406}
!7457 = !DILocalVariable(name: "vec_", arg: 1, scope: !7454, file: !142, line: 184, type: !6406)
!7458 = !DILocation(line: 184, column: 1, scope: !7454)
!7459 = !DILocation(line: 184, column: 1, scope: !7460)
!7460 = distinct !DILexicalBlock(scope: !7454, file: !142, line: 184, column: 1)
!7461 = distinct !DISubprogram(name: "lower_try_finally_dup_block", scope: !3, file: !3, line: 919, type: !7462, scopeLine: 920, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!7462 = !DISubroutineType(types: !7463)
!7463 = !{!1640, !1640, !3020}
!7464 = !DILocalVariable(name: "seq", arg: 1, scope: !7461, file: !3, line: 919, type: !1640)
!7465 = !DILocation(line: 919, column: 41, scope: !7461)
!7466 = !DILocalVariable(name: "outer_state", arg: 2, scope: !7461, file: !3, line: 919, type: !3020)
!7467 = !DILocation(line: 919, column: 64, scope: !7461)
!7468 = !DILocalVariable(name: "region", scope: !7461, file: !3, line: 921, type: !1589)
!7469 = !DILocation(line: 921, column: 10, scope: !7461)
!7470 = !DILocalVariable(name: "new_seq", scope: !7461, file: !3, line: 922, type: !1640)
!7471 = !DILocation(line: 922, column: 14, scope: !7461)
!7472 = !DILocation(line: 924, column: 49, scope: !7461)
!7473 = !DILocation(line: 924, column: 13, scope: !7461)
!7474 = !DILocation(line: 924, column: 11, scope: !7461)
!7475 = !DILocation(line: 926, column: 7, scope: !7476)
!7476 = distinct !DILexicalBlock(scope: !7461, file: !3, line: 926, column: 7)
!7477 = !DILocation(line: 926, column: 20, scope: !7476)
!7478 = !DILocation(line: 926, column: 7, scope: !7461)
!7479 = !DILocation(line: 927, column: 14, scope: !7476)
!7480 = !DILocation(line: 927, column: 27, scope: !7476)
!7481 = !DILocation(line: 927, column: 31, scope: !7476)
!7482 = !DILocation(line: 927, column: 12, scope: !7476)
!7483 = !DILocation(line: 927, column: 5, scope: !7476)
!7484 = !DILocation(line: 928, column: 27, scope: !7461)
!7485 = !DILocation(line: 928, column: 36, scope: !7461)
!7486 = !DILocation(line: 928, column: 3, scope: !7461)
!7487 = !DILocation(line: 930, column: 10, scope: !7461)
!7488 = !DILocation(line: 930, column: 3, scope: !7461)
!7489 = distinct !DISubprogram(name: "gimple_try_catch_is_cleanup", scope: !591, file: !591, line: 2943, type: !4067, scopeLine: 2944, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!7490 = !DILocalVariable(name: "gs", arg: 1, scope: !7489, file: !591, line: 2943, type: !3387)
!7491 = !DILocation(line: 2943, column: 43, scope: !7489)
!7492 = !DILocation(line: 2945, column: 3, scope: !7489)
!7493 = !DILocation(line: 2946, column: 11, scope: !7489)
!7494 = !DILocation(line: 2946, column: 15, scope: !7489)
!7495 = !DILocation(line: 2946, column: 22, scope: !7489)
!7496 = !DILocation(line: 2946, column: 30, scope: !7489)
!7497 = !DILocation(line: 2946, column: 61, scope: !7489)
!7498 = !DILocation(line: 2946, column: 10, scope: !7489)
!7499 = !DILocation(line: 2946, column: 3, scope: !7489)
!7500 = distinct !DISubprogram(name: "gimple_seq_alloc_with_stmt", scope: !591, file: !591, line: 226, type: !5047, scopeLine: 227, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!7501 = !DILocalVariable(name: "stmt", arg: 1, scope: !7500, file: !591, line: 226, type: !1589)
!7502 = !DILocation(line: 226, column: 36, scope: !7500)
!7503 = !DILocalVariable(name: "seq", scope: !7500, file: !591, line: 228, type: !1640)
!7504 = !DILocation(line: 228, column: 14, scope: !7500)
!7505 = !DILocation(line: 229, column: 30, scope: !7500)
!7506 = !DILocation(line: 229, column: 3, scope: !7500)
!7507 = !DILocation(line: 230, column: 10, scope: !7500)
!7508 = !DILocation(line: 230, column: 3, scope: !7500)
!7509 = distinct !DISubprogram(name: "emit_post_landing_pad", scope: !3, file: !3, line: 811, type: !7510, scopeLine: 812, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!7510 = !DISubroutineType(types: !7511)
!7511 = !{null, !7512, !2037}
!7512 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1640, size: 64)
!7513 = !DILocalVariable(name: "seq", arg: 1, scope: !7509, file: !3, line: 811, type: !7512)
!7514 = !DILocation(line: 811, column: 36, scope: !7509)
!7515 = !DILocalVariable(name: "region", arg: 2, scope: !7509, file: !3, line: 811, type: !2037)
!7516 = !DILocation(line: 811, column: 51, scope: !7509)
!7517 = !DILocalVariable(name: "lp", scope: !7509, file: !3, line: 813, type: !2111)
!7518 = !DILocation(line: 813, column: 18, scope: !7509)
!7519 = !DILocation(line: 813, column: 23, scope: !7509)
!7520 = !DILocation(line: 813, column: 31, scope: !7509)
!7521 = !DILocalVariable(name: "x", scope: !7509, file: !3, line: 814, type: !1589)
!7522 = !DILocation(line: 814, column: 10, scope: !7509)
!7523 = !DILocation(line: 816, column: 7, scope: !7524)
!7524 = distinct !DILexicalBlock(scope: !7509, file: !3, line: 816, column: 7)
!7525 = !DILocation(line: 816, column: 10, scope: !7524)
!7526 = !DILocation(line: 816, column: 7, scope: !7509)
!7527 = !DILocation(line: 817, column: 30, scope: !7524)
!7528 = !DILocation(line: 817, column: 10, scope: !7524)
!7529 = !DILocation(line: 817, column: 8, scope: !7524)
!7530 = !DILocation(line: 817, column: 5, scope: !7524)
!7531 = !DILocation(line: 819, column: 26, scope: !7509)
!7532 = !DILocation(line: 819, column: 3, scope: !7509)
!7533 = !DILocation(line: 819, column: 7, scope: !7509)
!7534 = !DILocation(line: 819, column: 24, scope: !7509)
!7535 = !DILocation(line: 820, column: 46, scope: !7509)
!7536 = !DILocation(line: 820, column: 50, scope: !7509)
!7537 = !DILocation(line: 820, column: 3, scope: !7509)
!7538 = !DILocation(line: 820, column: 44, scope: !7509)
!7539 = !DILocation(line: 822, column: 27, scope: !7509)
!7540 = !DILocation(line: 822, column: 31, scope: !7509)
!7541 = !DILocation(line: 822, column: 7, scope: !7509)
!7542 = !DILocation(line: 822, column: 5, scope: !7509)
!7543 = !DILocation(line: 823, column: 24, scope: !7509)
!7544 = !DILocation(line: 823, column: 29, scope: !7509)
!7545 = !DILocation(line: 823, column: 3, scope: !7509)
!7546 = !DILocation(line: 824, column: 1, scope: !7509)
!7547 = distinct !DISubprogram(name: "emit_resx", scope: !3, file: !3, line: 829, type: !7510, scopeLine: 830, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!7548 = !DILocalVariable(name: "seq", arg: 1, scope: !7547, file: !3, line: 829, type: !7512)
!7549 = !DILocation(line: 829, column: 24, scope: !7547)
!7550 = !DILocalVariable(name: "region", arg: 2, scope: !7547, file: !3, line: 829, type: !2037)
!7551 = !DILocation(line: 829, column: 39, scope: !7547)
!7552 = !DILocalVariable(name: "x", scope: !7547, file: !3, line: 831, type: !1589)
!7553 = !DILocation(line: 831, column: 10, scope: !7547)
!7554 = !DILocation(line: 831, column: 33, scope: !7547)
!7555 = !DILocation(line: 831, column: 41, scope: !7547)
!7556 = !DILocation(line: 831, column: 14, scope: !7547)
!7557 = !DILocation(line: 832, column: 24, scope: !7547)
!7558 = !DILocation(line: 832, column: 29, scope: !7547)
!7559 = !DILocation(line: 832, column: 3, scope: !7547)
!7560 = !DILocation(line: 833, column: 7, scope: !7561)
!7561 = distinct !DILexicalBlock(scope: !7547, file: !3, line: 833, column: 7)
!7562 = !DILocation(line: 833, column: 15, scope: !7561)
!7563 = !DILocation(line: 833, column: 7, scope: !7547)
!7564 = !DILocation(line: 834, column: 28, scope: !7561)
!7565 = !DILocation(line: 834, column: 36, scope: !7561)
!7566 = !DILocation(line: 834, column: 43, scope: !7561)
!7567 = !DILocation(line: 834, column: 5, scope: !7561)
!7568 = !DILocation(line: 835, column: 1, scope: !7547)
!7569 = distinct !DISubprogram(name: "do_return_redirection", scope: !3, file: !3, line: 722, type: !7570, scopeLine: 724, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!7570 = !DISubroutineType(types: !7571)
!7571 = !{null, !3007, !1777, !1640, !2285}
!7572 = !DILocalVariable(name: "q", arg: 1, scope: !7569, file: !3, line: 722, type: !3007)
!7573 = !DILocation(line: 722, column: 48, scope: !7569)
!7574 = !DILocalVariable(name: "finlab", arg: 2, scope: !7569, file: !3, line: 722, type: !1777)
!7575 = !DILocation(line: 722, column: 56, scope: !7569)
!7576 = !DILocalVariable(name: "mod", arg: 3, scope: !7569, file: !3, line: 722, type: !1640)
!7577 = !DILocation(line: 722, column: 75, scope: !7569)
!7578 = !DILocalVariable(name: "return_value_p", arg: 4, scope: !7569, file: !3, line: 723, type: !2285)
!7579 = !DILocation(line: 723, column: 16, scope: !7569)
!7580 = !DILocalVariable(name: "ret_expr", scope: !7569, file: !3, line: 725, type: !1777)
!7581 = !DILocation(line: 725, column: 8, scope: !7569)
!7582 = !DILocalVariable(name: "x", scope: !7569, file: !3, line: 726, type: !1589)
!7583 = !DILocation(line: 726, column: 10, scope: !7569)
!7584 = !DILocation(line: 729, column: 3, scope: !7569)
!7585 = !DILocation(line: 731, column: 36, scope: !7569)
!7586 = !DILocation(line: 731, column: 39, scope: !7569)
!7587 = !DILocation(line: 731, column: 44, scope: !7569)
!7588 = !DILocation(line: 731, column: 14, scope: !7569)
!7589 = !DILocation(line: 731, column: 12, scope: !7569)
!7590 = !DILocation(line: 733, column: 7, scope: !7591)
!7591 = distinct !DILexicalBlock(scope: !7569, file: !3, line: 733, column: 7)
!7592 = !DILocation(line: 733, column: 7, scope: !7569)
!7593 = !DILocation(line: 735, column: 13, scope: !7594)
!7594 = distinct !DILexicalBlock(scope: !7595, file: !3, line: 735, column: 11)
!7595 = distinct !DILexicalBlock(scope: !7591, file: !3, line: 734, column: 5)
!7596 = !DILocation(line: 735, column: 12, scope: !7594)
!7597 = !DILocation(line: 735, column: 11, scope: !7595)
!7598 = !DILocation(line: 736, column: 27, scope: !7594)
!7599 = !DILocation(line: 736, column: 10, scope: !7594)
!7600 = !DILocation(line: 736, column: 25, scope: !7594)
!7601 = !DILocation(line: 736, column: 9, scope: !7594)
!7602 = !DILocation(line: 738, column: 9, scope: !7594)
!7603 = !DILocation(line: 739, column: 22, scope: !7595)
!7604 = !DILocation(line: 739, column: 25, scope: !7595)
!7605 = !DILocation(line: 739, column: 30, scope: !7595)
!7606 = !DILocation(line: 739, column: 7, scope: !7595)
!7607 = !DILocation(line: 739, column: 10, scope: !7595)
!7608 = !DILocation(line: 739, column: 20, scope: !7595)
!7609 = !DILocation(line: 762, column: 11, scope: !7610)
!7610 = distinct !DILexicalBlock(scope: !7595, file: !3, line: 762, column: 11)
!7611 = !DILocation(line: 762, column: 32, scope: !7610)
!7612 = !DILocation(line: 762, column: 11, scope: !7595)
!7613 = !DILocation(line: 764, column: 10, scope: !7614)
!7614 = distinct !DILexicalBlock(scope: !7615, file: !3, line: 764, column: 8)
!7615 = distinct !DILexicalBlock(scope: !7610, file: !3, line: 763, column: 2)
!7616 = !DILocation(line: 764, column: 9, scope: !7614)
!7617 = !DILocation(line: 764, column: 8, scope: !7615)
!7618 = !DILocation(line: 765, column: 24, scope: !7614)
!7619 = !DILocation(line: 765, column: 7, scope: !7614)
!7620 = !DILocation(line: 765, column: 22, scope: !7614)
!7621 = !DILocation(line: 765, column: 6, scope: !7614)
!7622 = !DILocation(line: 767, column: 6, scope: !7614)
!7623 = !DILocation(line: 768, column: 19, scope: !7615)
!7624 = !DILocation(line: 768, column: 22, scope: !7615)
!7625 = !DILocation(line: 768, column: 27, scope: !7615)
!7626 = !DILocation(line: 768, column: 4, scope: !7615)
!7627 = !DILocation(line: 768, column: 7, scope: !7615)
!7628 = !DILocation(line: 768, column: 17, scope: !7615)
!7629 = !DILocation(line: 769, column: 2, scope: !7615)
!7630 = !DILocation(line: 771, column: 4, scope: !7610)
!7631 = !DILocation(line: 772, column: 5, scope: !7595)
!7632 = !DILocation(line: 775, column: 22, scope: !7591)
!7633 = !DILocation(line: 775, column: 25, scope: !7591)
!7634 = !DILocation(line: 775, column: 30, scope: !7591)
!7635 = !DILocation(line: 775, column: 7, scope: !7591)
!7636 = !DILocation(line: 775, column: 10, scope: !7591)
!7637 = !DILocation(line: 775, column: 20, scope: !7591)
!7638 = !DILocation(line: 777, column: 8, scope: !7639)
!7639 = distinct !DILexicalBlock(scope: !7569, file: !3, line: 777, column: 7)
!7640 = !DILocation(line: 777, column: 11, scope: !7639)
!7641 = !DILocation(line: 777, column: 7, scope: !7569)
!7642 = !DILocation(line: 778, column: 20, scope: !7639)
!7643 = !DILocation(line: 778, column: 5, scope: !7639)
!7644 = !DILocation(line: 778, column: 8, scope: !7639)
!7645 = !DILocation(line: 778, column: 18, scope: !7639)
!7646 = !DILocation(line: 780, column: 7, scope: !7647)
!7647 = distinct !DILexicalBlock(scope: !7569, file: !3, line: 780, column: 7)
!7648 = !DILocation(line: 780, column: 7, scope: !7569)
!7649 = !DILocation(line: 781, column: 26, scope: !7647)
!7650 = !DILocation(line: 781, column: 29, scope: !7647)
!7651 = !DILocation(line: 781, column: 40, scope: !7647)
!7652 = !DILocation(line: 781, column: 5, scope: !7647)
!7653 = !DILocation(line: 783, column: 26, scope: !7569)
!7654 = !DILocation(line: 783, column: 7, scope: !7569)
!7655 = !DILocation(line: 783, column: 5, scope: !7569)
!7656 = !DILocation(line: 784, column: 25, scope: !7569)
!7657 = !DILocation(line: 784, column: 28, scope: !7569)
!7658 = !DILocation(line: 784, column: 39, scope: !7569)
!7659 = !DILocation(line: 784, column: 3, scope: !7569)
!7660 = !DILocation(line: 785, column: 1, scope: !7569)
!7661 = distinct !DISubprogram(name: "do_goto_redirection", scope: !3, file: !3, line: 790, type: !7662, scopeLine: 792, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!7662 = !DISubroutineType(types: !7663)
!7663 = !{null, !3007, !1777, !1640, !3026}
!7664 = !DILocalVariable(name: "q", arg: 1, scope: !7661, file: !3, line: 790, type: !3007)
!7665 = !DILocation(line: 790, column: 46, scope: !7661)
!7666 = !DILocalVariable(name: "finlab", arg: 2, scope: !7661, file: !3, line: 790, type: !1777)
!7667 = !DILocation(line: 790, column: 54, scope: !7661)
!7668 = !DILocalVariable(name: "mod", arg: 3, scope: !7661, file: !3, line: 790, type: !1640)
!7669 = !DILocation(line: 790, column: 73, scope: !7661)
!7670 = !DILocalVariable(name: "tf", arg: 4, scope: !7661, file: !3, line: 791, type: !3026)
!7671 = !DILocation(line: 791, column: 29, scope: !7661)
!7672 = !DILocalVariable(name: "x", scope: !7661, file: !3, line: 793, type: !1589)
!7673 = !DILocation(line: 793, column: 10, scope: !7661)
!7674 = !DILocation(line: 795, column: 3, scope: !7661)
!7675 = !DILocation(line: 796, column: 8, scope: !7676)
!7676 = distinct !DILexicalBlock(scope: !7661, file: !3, line: 796, column: 7)
!7677 = !DILocation(line: 796, column: 11, scope: !7676)
!7678 = !DILocation(line: 796, column: 7, scope: !7661)
!7679 = !DILocation(line: 797, column: 20, scope: !7676)
!7680 = !DILocation(line: 797, column: 5, scope: !7676)
!7681 = !DILocation(line: 797, column: 8, scope: !7676)
!7682 = !DILocation(line: 797, column: 18, scope: !7676)
!7683 = !DILocation(line: 799, column: 37, scope: !7661)
!7684 = !DILocation(line: 799, column: 18, scope: !7661)
!7685 = !DILocation(line: 799, column: 3, scope: !7661)
!7686 = !DILocation(line: 799, column: 6, scope: !7661)
!7687 = !DILocation(line: 799, column: 16, scope: !7661)
!7688 = !DILocation(line: 801, column: 7, scope: !7689)
!7689 = distinct !DILexicalBlock(scope: !7661, file: !3, line: 801, column: 7)
!7690 = !DILocation(line: 801, column: 7, scope: !7661)
!7691 = !DILocation(line: 802, column: 26, scope: !7689)
!7692 = !DILocation(line: 802, column: 29, scope: !7689)
!7693 = !DILocation(line: 802, column: 40, scope: !7689)
!7694 = !DILocation(line: 802, column: 5, scope: !7689)
!7695 = !DILocation(line: 804, column: 26, scope: !7661)
!7696 = !DILocation(line: 804, column: 7, scope: !7661)
!7697 = !DILocation(line: 804, column: 5, scope: !7661)
!7698 = !DILocation(line: 805, column: 25, scope: !7661)
!7699 = !DILocation(line: 805, column: 28, scope: !7661)
!7700 = !DILocation(line: 805, column: 39, scope: !7661)
!7701 = !DILocation(line: 805, column: 3, scope: !7661)
!7702 = !DILocation(line: 806, column: 1, scope: !7661)
!7703 = distinct !DISubprogram(name: "replace_goto_queue", scope: !3, file: !3, line: 562, type: !7704, scopeLine: 563, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!7704 = !DISubroutineType(types: !7705)
!7705 = !{null, !3026}
!7706 = !DILocalVariable(name: "tf", arg: 1, scope: !7703, file: !3, line: 562, type: !3026)
!7707 = !DILocation(line: 562, column: 42, scope: !7703)
!7708 = !DILocation(line: 564, column: 7, scope: !7709)
!7709 = distinct !DILexicalBlock(scope: !7703, file: !3, line: 564, column: 7)
!7710 = !DILocation(line: 564, column: 11, scope: !7709)
!7711 = !DILocation(line: 564, column: 29, scope: !7709)
!7712 = !DILocation(line: 564, column: 7, scope: !7703)
!7713 = !DILocation(line: 565, column: 5, scope: !7709)
!7714 = !DILocation(line: 566, column: 33, scope: !7703)
!7715 = !DILocation(line: 566, column: 37, scope: !7703)
!7716 = !DILocation(line: 566, column: 48, scope: !7703)
!7717 = !DILocation(line: 566, column: 3, scope: !7703)
!7718 = !DILocation(line: 567, column: 33, scope: !7703)
!7719 = !DILocation(line: 567, column: 41, scope: !7703)
!7720 = !DILocation(line: 567, column: 3, scope: !7703)
!7721 = !DILocation(line: 568, column: 1, scope: !7703)
!7722 = distinct !DISubprogram(name: "gimple_return_retval", scope: !591, file: !591, line: 4253, type: !5000, scopeLine: 4254, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!7723 = !DILocalVariable(name: "gs", arg: 1, scope: !7722, file: !591, line: 4253, type: !3387)
!7724 = !DILocation(line: 4253, column: 36, scope: !7722)
!7725 = !DILocation(line: 4256, column: 21, scope: !7722)
!7726 = !DILocation(line: 4256, column: 10, scope: !7722)
!7727 = !DILocation(line: 4256, column: 3, scope: !7722)
!7728 = distinct !DISubprogram(name: "replace_goto_queue_stmt_list", scope: !3, file: !3, line: 551, type: !7729, scopeLine: 552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!7729 = !DISubroutineType(types: !7730)
!7730 = !{null, !1640, !3026}
!7731 = !DILocalVariable(name: "seq", arg: 1, scope: !7728, file: !3, line: 551, type: !1640)
!7732 = !DILocation(line: 551, column: 42, scope: !7728)
!7733 = !DILocalVariable(name: "tf", arg: 2, scope: !7728, file: !3, line: 551, type: !3026)
!7734 = !DILocation(line: 551, column: 68, scope: !7728)
!7735 = !DILocalVariable(name: "gsi", scope: !7728, file: !3, line: 553, type: !4816)
!7736 = !DILocation(line: 553, column: 24, scope: !7728)
!7737 = !DILocation(line: 553, column: 41, scope: !7728)
!7738 = !DILocation(line: 553, column: 30, scope: !7728)
!7739 = !DILocation(line: 555, column: 3, scope: !7728)
!7740 = !DILocation(line: 555, column: 11, scope: !7728)
!7741 = !DILocation(line: 555, column: 10, scope: !7728)
!7742 = !DILocation(line: 556, column: 27, scope: !7728)
!7743 = !DILocation(line: 556, column: 43, scope: !7728)
!7744 = !DILocation(line: 556, column: 5, scope: !7728)
!7745 = distinct !{!7745, !7739, !7746}
!7746 = !DILocation(line: 556, column: 51, scope: !7728)
!7747 = !DILocation(line: 557, column: 1, scope: !7728)
!7748 = distinct !DISubprogram(name: "replace_goto_queue_1", scope: !3, file: !3, line: 503, type: !7749, scopeLine: 505, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!7749 = !DISubroutineType(types: !7750)
!7750 = !{null, !1589, !3026, !4977}
!7751 = !DILocalVariable(name: "stmt", arg: 1, scope: !7748, file: !3, line: 503, type: !1589)
!7752 = !DILocation(line: 503, column: 30, scope: !7748)
!7753 = !DILocalVariable(name: "tf", arg: 2, scope: !7748, file: !3, line: 503, type: !3026)
!7754 = !DILocation(line: 503, column: 57, scope: !7748)
!7755 = !DILocalVariable(name: "gsi", arg: 3, scope: !7748, file: !3, line: 504, type: !4977)
!7756 = !DILocation(line: 504, column: 31, scope: !7748)
!7757 = !DILocalVariable(name: "seq", scope: !7748, file: !3, line: 506, type: !1640)
!7758 = !DILocation(line: 506, column: 14, scope: !7748)
!7759 = !DILocalVariable(name: "temp", scope: !7748, file: !3, line: 507, type: !2995)
!7760 = !DILocation(line: 507, column: 12, scope: !7748)
!7761 = !DILocation(line: 508, column: 8, scope: !7748)
!7762 = !DILocation(line: 508, column: 10, scope: !7748)
!7763 = !DILocation(line: 510, column: 24, scope: !7748)
!7764 = !DILocation(line: 510, column: 11, scope: !7748)
!7765 = !DILocation(line: 510, column: 3, scope: !7748)
!7766 = !DILocation(line: 514, column: 16, scope: !7767)
!7767 = distinct !DILexicalBlock(scope: !7748, file: !3, line: 511, column: 5)
!7768 = !DILocation(line: 514, column: 12, scope: !7767)
!7769 = !DILocation(line: 514, column: 14, scope: !7767)
!7770 = !DILocation(line: 515, column: 36, scope: !7767)
!7771 = !DILocation(line: 515, column: 13, scope: !7767)
!7772 = !DILocation(line: 515, column: 11, scope: !7767)
!7773 = !DILocation(line: 516, column: 11, scope: !7774)
!7774 = distinct !DILexicalBlock(scope: !7767, file: !3, line: 516, column: 11)
!7775 = !DILocation(line: 516, column: 11, scope: !7767)
!7776 = !DILocation(line: 518, column: 27, scope: !7777)
!7777 = distinct !DILexicalBlock(scope: !7774, file: !3, line: 517, column: 2)
!7778 = !DILocation(line: 518, column: 49, scope: !7777)
!7779 = !DILocation(line: 518, column: 32, scope: !7777)
!7780 = !DILocation(line: 518, column: 4, scope: !7777)
!7781 = !DILocation(line: 519, column: 16, scope: !7777)
!7782 = !DILocation(line: 519, column: 4, scope: !7777)
!7783 = !DILocation(line: 520, column: 4, scope: !7777)
!7784 = !DILocation(line: 522, column: 7, scope: !7767)
!7785 = !DILocation(line: 525, column: 54, scope: !7767)
!7786 = !DILocation(line: 525, column: 39, scope: !7767)
!7787 = !DILocation(line: 525, column: 64, scope: !7767)
!7788 = !DILocation(line: 525, column: 68, scope: !7767)
!7789 = !DILocation(line: 525, column: 7, scope: !7767)
!7790 = !DILocation(line: 526, column: 54, scope: !7767)
!7791 = !DILocation(line: 526, column: 39, scope: !7767)
!7792 = !DILocation(line: 526, column: 64, scope: !7767)
!7793 = !DILocation(line: 526, column: 68, scope: !7767)
!7794 = !DILocation(line: 526, column: 7, scope: !7767)
!7795 = !DILocation(line: 527, column: 7, scope: !7767)
!7796 = !DILocation(line: 530, column: 54, scope: !7767)
!7797 = !DILocation(line: 530, column: 37, scope: !7767)
!7798 = !DILocation(line: 530, column: 61, scope: !7767)
!7799 = !DILocation(line: 530, column: 7, scope: !7767)
!7800 = !DILocation(line: 531, column: 57, scope: !7767)
!7801 = !DILocation(line: 531, column: 37, scope: !7767)
!7802 = !DILocation(line: 531, column: 64, scope: !7767)
!7803 = !DILocation(line: 531, column: 7, scope: !7767)
!7804 = !DILocation(line: 532, column: 7, scope: !7767)
!7805 = !DILocation(line: 534, column: 59, scope: !7767)
!7806 = !DILocation(line: 534, column: 37, scope: !7767)
!7807 = !DILocation(line: 534, column: 66, scope: !7767)
!7808 = !DILocation(line: 534, column: 7, scope: !7767)
!7809 = !DILocation(line: 535, column: 7, scope: !7767)
!7810 = !DILocation(line: 537, column: 63, scope: !7767)
!7811 = !DILocation(line: 537, column: 37, scope: !7767)
!7812 = !DILocation(line: 537, column: 70, scope: !7767)
!7813 = !DILocation(line: 537, column: 7, scope: !7767)
!7814 = !DILocation(line: 538, column: 7, scope: !7767)
!7815 = !DILocation(line: 542, column: 7, scope: !7767)
!7816 = !DILocation(line: 545, column: 13, scope: !7748)
!7817 = !DILocation(line: 545, column: 3, scope: !7748)
!7818 = !DILocation(line: 546, column: 1, scope: !7748)
!7819 = distinct !DISubprogram(name: "find_goto_replacement", scope: !3, file: !3, line: 428, type: !7820, scopeLine: 429, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!7820 = !DISubroutineType(types: !7821)
!7821 = !{!1640, !3026, !2995}
!7822 = !DILocalVariable(name: "tf", arg: 1, scope: !7819, file: !3, line: 428, type: !3026)
!7823 = !DILocation(line: 428, column: 45, scope: !7819)
!7824 = !DILocalVariable(name: "stmt", arg: 2, scope: !7819, file: !3, line: 428, type: !2995)
!7825 = !DILocation(line: 428, column: 58, scope: !7819)
!7826 = !DILocalVariable(name: "i", scope: !7819, file: !3, line: 430, type: !7)
!7827 = !DILocation(line: 430, column: 16, scope: !7819)
!7828 = !DILocalVariable(name: "slot", scope: !7819, file: !3, line: 431, type: !2136)
!7829 = !DILocation(line: 431, column: 10, scope: !7819)
!7830 = !DILocation(line: 433, column: 7, scope: !7831)
!7831 = distinct !DILexicalBlock(scope: !7819, file: !3, line: 433, column: 7)
!7832 = !DILocation(line: 433, column: 11, scope: !7831)
!7833 = !DILocation(line: 433, column: 29, scope: !7831)
!7834 = !DILocation(line: 433, column: 7, scope: !7819)
!7835 = !DILocation(line: 435, column: 14, scope: !7836)
!7836 = distinct !DILexicalBlock(scope: !7837, file: !3, line: 435, column: 7)
!7837 = distinct !DILexicalBlock(scope: !7831, file: !3, line: 434, column: 5)
!7838 = !DILocation(line: 435, column: 12, scope: !7836)
!7839 = !DILocation(line: 435, column: 19, scope: !7840)
!7840 = distinct !DILexicalBlock(scope: !7836, file: !3, line: 435, column: 7)
!7841 = !DILocation(line: 435, column: 23, scope: !7840)
!7842 = !DILocation(line: 435, column: 27, scope: !7840)
!7843 = !DILocation(line: 435, column: 21, scope: !7840)
!7844 = !DILocation(line: 435, column: 7, scope: !7836)
!7845 = !DILocation(line: 436, column: 7, scope: !7846)
!7846 = distinct !DILexicalBlock(scope: !7840, file: !3, line: 436, column: 7)
!7847 = !DILocation(line: 436, column: 11, scope: !7846)
!7848 = !DILocation(line: 436, column: 22, scope: !7846)
!7849 = !DILocation(line: 436, column: 25, scope: !7846)
!7850 = !DILocation(line: 436, column: 30, scope: !7846)
!7851 = !DILocation(line: 436, column: 40, scope: !7846)
!7852 = !DILocation(line: 436, column: 32, scope: !7846)
!7853 = !DILocation(line: 436, column: 7, scope: !7840)
!7854 = !DILocation(line: 437, column: 11, scope: !7846)
!7855 = !DILocation(line: 437, column: 15, scope: !7846)
!7856 = !DILocation(line: 437, column: 26, scope: !7846)
!7857 = !DILocation(line: 437, column: 29, scope: !7846)
!7858 = !DILocation(line: 437, column: 4, scope: !7846)
!7859 = !DILocation(line: 435, column: 47, scope: !7840)
!7860 = !DILocation(line: 435, column: 7, scope: !7840)
!7861 = distinct !{!7861, !7844, !7862}
!7862 = !DILocation(line: 437, column: 29, scope: !7836)
!7863 = !DILocation(line: 438, column: 7, scope: !7837)
!7864 = !DILocation(line: 444, column: 8, scope: !7865)
!7865 = distinct !DILexicalBlock(scope: !7819, file: !3, line: 444, column: 7)
!7866 = !DILocation(line: 444, column: 12, scope: !7865)
!7867 = !DILocation(line: 444, column: 7, scope: !7819)
!7868 = !DILocation(line: 446, column: 28, scope: !7869)
!7869 = distinct !DILexicalBlock(scope: !7865, file: !3, line: 445, column: 5)
!7870 = !DILocation(line: 446, column: 7, scope: !7869)
!7871 = !DILocation(line: 446, column: 11, scope: !7869)
!7872 = !DILocation(line: 446, column: 26, scope: !7869)
!7873 = !DILocation(line: 447, column: 14, scope: !7874)
!7874 = distinct !DILexicalBlock(scope: !7869, file: !3, line: 447, column: 7)
!7875 = !DILocation(line: 447, column: 12, scope: !7874)
!7876 = !DILocation(line: 447, column: 19, scope: !7877)
!7877 = distinct !DILexicalBlock(scope: !7874, file: !3, line: 447, column: 7)
!7878 = !DILocation(line: 447, column: 23, scope: !7877)
!7879 = !DILocation(line: 447, column: 27, scope: !7877)
!7880 = !DILocation(line: 447, column: 21, scope: !7877)
!7881 = !DILocation(line: 447, column: 7, scope: !7874)
!7882 = !DILocation(line: 449, column: 31, scope: !7883)
!7883 = distinct !DILexicalBlock(scope: !7877, file: !3, line: 448, column: 2)
!7884 = !DILocation(line: 449, column: 35, scope: !7883)
!7885 = !DILocation(line: 450, column: 38, scope: !7883)
!7886 = !DILocation(line: 450, column: 42, scope: !7883)
!7887 = !DILocation(line: 450, column: 53, scope: !7883)
!7888 = !DILocation(line: 450, column: 56, scope: !7883)
!7889 = !DILocation(line: 450, column: 61, scope: !7883)
!7890 = !DILocation(line: 449, column: 11, scope: !7883)
!7891 = !DILocation(line: 449, column: 9, scope: !7883)
!7892 = !DILocation(line: 451, column: 11, scope: !7883)
!7893 = !DILocation(line: 452, column: 13, scope: !7883)
!7894 = !DILocation(line: 452, column: 17, scope: !7883)
!7895 = !DILocation(line: 452, column: 28, scope: !7883)
!7896 = !DILocation(line: 452, column: 12, scope: !7883)
!7897 = !DILocation(line: 452, column: 5, scope: !7883)
!7898 = !DILocation(line: 452, column: 10, scope: !7883)
!7899 = !DILocation(line: 453, column: 2, scope: !7883)
!7900 = !DILocation(line: 447, column: 47, scope: !7877)
!7901 = !DILocation(line: 447, column: 7, scope: !7877)
!7902 = distinct !{!7902, !7881, !7903}
!7903 = !DILocation(line: 453, column: 2, scope: !7874)
!7904 = !DILocation(line: 454, column: 5, scope: !7869)
!7905 = !DILocation(line: 456, column: 32, scope: !7819)
!7906 = !DILocation(line: 456, column: 36, scope: !7819)
!7907 = !DILocation(line: 456, column: 57, scope: !7819)
!7908 = !DILocation(line: 456, column: 52, scope: !7819)
!7909 = !DILocation(line: 456, column: 10, scope: !7819)
!7910 = !DILocation(line: 456, column: 8, scope: !7819)
!7911 = !DILocation(line: 457, column: 7, scope: !7912)
!7912 = distinct !DILexicalBlock(scope: !7819, file: !3, line: 457, column: 7)
!7913 = !DILocation(line: 457, column: 12, scope: !7912)
!7914 = !DILocation(line: 457, column: 7, scope: !7819)
!7915 = !DILocation(line: 458, column: 42, scope: !7912)
!7916 = !DILocation(line: 458, column: 41, scope: !7912)
!7917 = !DILocation(line: 458, column: 14, scope: !7912)
!7918 = !DILocation(line: 458, column: 49, scope: !7912)
!7919 = !DILocation(line: 458, column: 5, scope: !7912)
!7920 = !DILocation(line: 460, column: 3, scope: !7819)
!7921 = !DILocation(line: 461, column: 1, scope: !7819)
!7922 = distinct !DISubprogram(name: "replace_goto_queue_cond_clause", scope: !3, file: !3, line: 469, type: !7923, scopeLine: 471, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!7923 = !DISubroutineType(types: !7924)
!7924 = !{null, !2285, !3026, !4977}
!7925 = !DILocalVariable(name: "tp", arg: 1, scope: !7922, file: !3, line: 469, type: !2285)
!7926 = !DILocation(line: 469, column: 39, scope: !7922)
!7927 = !DILocalVariable(name: "tf", arg: 2, scope: !7922, file: !3, line: 469, type: !3026)
!7928 = !DILocation(line: 469, column: 64, scope: !7922)
!7929 = !DILocalVariable(name: "gsi", arg: 3, scope: !7922, file: !3, line: 470, type: !4977)
!7930 = !DILocation(line: 470, column: 27, scope: !7922)
!7931 = !DILocalVariable(name: "label", scope: !7922, file: !3, line: 472, type: !1777)
!7932 = !DILocation(line: 472, column: 8, scope: !7922)
!7933 = !DILocalVariable(name: "new_seq", scope: !7922, file: !3, line: 473, type: !1640)
!7934 = !DILocation(line: 473, column: 14, scope: !7922)
!7935 = !DILocalVariable(name: "temp", scope: !7922, file: !3, line: 474, type: !2995)
!7936 = !DILocation(line: 474, column: 12, scope: !7922)
!7937 = !DILocalVariable(name: "loc", scope: !7922, file: !3, line: 475, type: !1608)
!7938 = !DILocation(line: 475, column: 14, scope: !7922)
!7939 = !DILocation(line: 475, column: 48, scope: !7922)
!7940 = !DILocation(line: 475, column: 37, scope: !7922)
!7941 = !DILocation(line: 475, column: 20, scope: !7922)
!7942 = !DILocation(line: 477, column: 13, scope: !7922)
!7943 = !DILocation(line: 477, column: 8, scope: !7922)
!7944 = !DILocation(line: 477, column: 11, scope: !7922)
!7945 = !DILocation(line: 478, column: 36, scope: !7922)
!7946 = !DILocation(line: 478, column: 13, scope: !7922)
!7947 = !DILocation(line: 478, column: 11, scope: !7922)
!7948 = !DILocation(line: 479, column: 8, scope: !7949)
!7949 = distinct !DILexicalBlock(scope: !7922, file: !3, line: 479, column: 7)
!7950 = !DILocation(line: 479, column: 7, scope: !7922)
!7951 = !DILocation(line: 480, column: 5, scope: !7949)
!7952 = !DILocation(line: 482, column: 31, scope: !7953)
!7953 = distinct !DILexicalBlock(scope: !7922, file: !3, line: 482, column: 7)
!7954 = !DILocation(line: 482, column: 7, scope: !7953)
!7955 = !DILocation(line: 483, column: 7, scope: !7953)
!7956 = !DILocation(line: 483, column: 46, scope: !7953)
!7957 = !DILocation(line: 483, column: 23, scope: !7953)
!7958 = !DILocation(line: 483, column: 10, scope: !7953)
!7959 = !DILocation(line: 483, column: 56, scope: !7953)
!7960 = !DILocation(line: 482, column: 7, scope: !7922)
!7961 = !DILocation(line: 485, column: 54, scope: !7962)
!7962 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 484, column: 5)
!7963 = !DILocation(line: 485, column: 31, scope: !7962)
!7964 = !DILocation(line: 485, column: 13, scope: !7962)
!7965 = !DILocation(line: 485, column: 8, scope: !7962)
!7966 = !DILocation(line: 485, column: 11, scope: !7962)
!7967 = !DILocation(line: 486, column: 7, scope: !7962)
!7968 = !DILocation(line: 489, column: 36, scope: !7922)
!7969 = !DILocation(line: 489, column: 11, scope: !7922)
!7970 = !DILocation(line: 489, column: 9, scope: !7922)
!7971 = !DILocation(line: 491, column: 9, scope: !7922)
!7972 = !DILocation(line: 491, column: 4, scope: !7922)
!7973 = !DILocation(line: 491, column: 7, scope: !7922)
!7974 = !DILocation(line: 493, column: 21, scope: !7922)
!7975 = !DILocation(line: 493, column: 46, scope: !7922)
!7976 = !DILocation(line: 493, column: 26, scope: !7922)
!7977 = !DILocation(line: 493, column: 3, scope: !7922)
!7978 = !DILocation(line: 494, column: 25, scope: !7922)
!7979 = !DILocation(line: 494, column: 47, scope: !7922)
!7980 = !DILocation(line: 494, column: 30, scope: !7922)
!7981 = !DILocation(line: 494, column: 3, scope: !7922)
!7982 = !DILocation(line: 495, column: 1, scope: !7922)
!7983 = distinct !DISubprogram(name: "gimple_seq_singleton_p", scope: !591, file: !591, line: 1192, type: !7984, scopeLine: 1193, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!7984 = !DISubroutineType(types: !7985)
!7985 = !{!1890, !1640}
!7986 = !DILocalVariable(name: "seq", arg: 1, scope: !7983, file: !591, line: 1192, type: !1640)
!7987 = !DILocation(line: 1192, column: 36, scope: !7983)
!7988 = !DILocation(line: 1194, column: 30, scope: !7983)
!7989 = !DILocation(line: 1194, column: 12, scope: !7983)
!7990 = !DILocation(line: 1194, column: 35, scope: !7983)
!7991 = !DILocation(line: 1195, column: 4, scope: !7983)
!7992 = !DILocation(line: 1195, column: 26, scope: !7983)
!7993 = !DILocation(line: 1195, column: 8, scope: !7983)
!7994 = !DILocation(line: 1195, column: 51, scope: !7983)
!7995 = !DILocation(line: 1195, column: 34, scope: !7983)
!7996 = !DILocation(line: 1195, column: 31, scope: !7983)
!7997 = !DILocation(line: 0, scope: !7983)
!7998 = !DILocation(line: 1194, column: 10, scope: !7983)
!7999 = !DILocation(line: 1194, column: 3, scope: !7983)
!8000 = distinct !DISubprogram(name: "gimple_seq_last", scope: !591, file: !591, line: 178, type: !4988, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8001 = !DILocalVariable(name: "s", arg: 1, scope: !8000, file: !591, line: 178, type: !4990)
!8002 = !DILocation(line: 178, column: 35, scope: !8000)
!8003 = !DILocation(line: 180, column: 10, scope: !8000)
!8004 = !DILocation(line: 180, column: 14, scope: !8000)
!8005 = !DILocation(line: 180, column: 17, scope: !8000)
!8006 = !DILocation(line: 180, column: 3, scope: !8000)
!8007 = distinct !DISubprogram(name: "lower_try_finally_fallthru_label", scope: !3, file: !3, line: 938, type: !8008, scopeLine: 939, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8008 = !DISubroutineType(types: !8009)
!8009 = !{!1777, !3026}
!8010 = !DILocalVariable(name: "tf", arg: 1, scope: !8007, file: !3, line: 938, type: !3026)
!8011 = !DILocation(line: 938, column: 56, scope: !8007)
!8012 = !DILocalVariable(name: "label", scope: !8007, file: !3, line: 940, type: !1777)
!8013 = !DILocation(line: 940, column: 8, scope: !8007)
!8014 = !DILocation(line: 940, column: 16, scope: !8007)
!8015 = !DILocation(line: 940, column: 20, scope: !8007)
!8016 = !DILocalVariable(name: "temp", scope: !8007, file: !3, line: 941, type: !2995)
!8017 = !DILocation(line: 941, column: 12, scope: !8007)
!8018 = !DILocation(line: 943, column: 8, scope: !8019)
!8019 = distinct !DILexicalBlock(scope: !8007, file: !3, line: 943, column: 7)
!8020 = !DILocation(line: 943, column: 7, scope: !8007)
!8021 = !DILocation(line: 945, column: 57, scope: !8022)
!8022 = distinct !DILexicalBlock(scope: !8019, file: !3, line: 944, column: 5)
!8023 = !DILocation(line: 945, column: 61, scope: !8022)
!8024 = !DILocation(line: 945, column: 40, scope: !8022)
!8025 = !DILocation(line: 945, column: 15, scope: !8022)
!8026 = !DILocation(line: 945, column: 13, scope: !8022)
!8027 = !DILocation(line: 946, column: 28, scope: !8022)
!8028 = !DILocation(line: 946, column: 7, scope: !8022)
!8029 = !DILocation(line: 946, column: 11, scope: !8022)
!8030 = !DILocation(line: 946, column: 26, scope: !8022)
!8031 = !DILocation(line: 947, column: 11, scope: !8032)
!8032 = distinct !DILexicalBlock(scope: !8022, file: !3, line: 947, column: 11)
!8033 = !DILocation(line: 947, column: 15, scope: !8032)
!8034 = !DILocation(line: 947, column: 22, scope: !8032)
!8035 = !DILocation(line: 947, column: 11, scope: !8022)
!8036 = !DILocation(line: 949, column: 20, scope: !8037)
!8037 = distinct !DILexicalBlock(scope: !8032, file: !3, line: 948, column: 9)
!8038 = !DILocation(line: 949, column: 16, scope: !8037)
!8039 = !DILocation(line: 949, column: 18, scope: !8037)
!8040 = !DILocation(line: 950, column: 41, scope: !8037)
!8041 = !DILocation(line: 950, column: 45, scope: !8037)
!8042 = !DILocation(line: 950, column: 52, scope: !8037)
!8043 = !DILocation(line: 950, column: 56, scope: !8037)
!8044 = !DILocation(line: 950, column: 11, scope: !8037)
!8045 = !DILocation(line: 951, column: 9, scope: !8037)
!8046 = !DILocation(line: 952, column: 5, scope: !8022)
!8047 = !DILocation(line: 953, column: 10, scope: !8007)
!8048 = !DILocation(line: 953, column: 3, scope: !8007)
!8049 = distinct !DISubprogram(name: "gimple_seq_last_stmt", scope: !591, file: !591, line: 187, type: !5741, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8050 = !DILocalVariable(name: "s", arg: 1, scope: !8049, file: !591, line: 187, type: !4990)
!8051 = !DILocation(line: 187, column: 40, scope: !8049)
!8052 = !DILocalVariable(name: "n", scope: !8049, file: !591, line: 189, type: !1645)
!8053 = !DILocation(line: 189, column: 19, scope: !8049)
!8054 = !DILocation(line: 189, column: 40, scope: !8049)
!8055 = !DILocation(line: 189, column: 23, scope: !8049)
!8056 = !DILocation(line: 190, column: 11, scope: !8049)
!8057 = !DILocation(line: 190, column: 10, scope: !8049)
!8058 = !DILocation(line: 190, column: 16, scope: !8049)
!8059 = !DILocation(line: 190, column: 19, scope: !8049)
!8060 = !DILocation(line: 190, column: 3, scope: !8049)
!8061 = distinct !DISubprogram(name: "emit_eh_dispatch", scope: !3, file: !3, line: 840, type: !7510, scopeLine: 841, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8062 = !DILocalVariable(name: "seq", arg: 1, scope: !8061, file: !3, line: 840, type: !7512)
!8063 = !DILocation(line: 840, column: 31, scope: !8061)
!8064 = !DILocalVariable(name: "region", arg: 2, scope: !8061, file: !3, line: 840, type: !2037)
!8065 = !DILocation(line: 840, column: 46, scope: !8061)
!8066 = !DILocalVariable(name: "x", scope: !8061, file: !3, line: 842, type: !1589)
!8067 = !DILocation(line: 842, column: 10, scope: !8061)
!8068 = !DILocation(line: 842, column: 40, scope: !8061)
!8069 = !DILocation(line: 842, column: 48, scope: !8061)
!8070 = !DILocation(line: 842, column: 14, scope: !8061)
!8071 = !DILocation(line: 843, column: 24, scope: !8061)
!8072 = !DILocation(line: 843, column: 29, scope: !8061)
!8073 = !DILocation(line: 843, column: 3, scope: !8061)
!8074 = !DILocation(line: 844, column: 1, scope: !8061)
!8075 = distinct !DISubprogram(name: "gimple_catch_types", scope: !591, file: !591, line: 2785, type: !5000, scopeLine: 2786, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8076 = !DILocalVariable(name: "gs", arg: 1, scope: !8075, file: !591, line: 2785, type: !3387)
!8077 = !DILocation(line: 2785, column: 34, scope: !8075)
!8078 = !DILocation(line: 2788, column: 10, scope: !8075)
!8079 = !DILocation(line: 2788, column: 14, scope: !8075)
!8080 = !DILocation(line: 2788, column: 27, scope: !8075)
!8081 = !DILocation(line: 2788, column: 3, scope: !8075)
!8082 = distinct !DISubprogram(name: "frob_into_branch_around", scope: !3, file: !3, line: 886, type: !8083, scopeLine: 887, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8083 = !DISubroutineType(types: !8084)
!8084 = !{!1640, !1589, !2037, !1777}
!8085 = !DILocalVariable(name: "tp", arg: 1, scope: !8082, file: !3, line: 886, type: !1589)
!8086 = !DILocation(line: 886, column: 33, scope: !8082)
!8087 = !DILocalVariable(name: "region", arg: 2, scope: !8082, file: !3, line: 886, type: !2037)
!8088 = !DILocation(line: 886, column: 47, scope: !8082)
!8089 = !DILocalVariable(name: "over", arg: 3, scope: !8082, file: !3, line: 886, type: !1777)
!8090 = !DILocation(line: 886, column: 60, scope: !8082)
!8091 = !DILocalVariable(name: "x", scope: !8082, file: !3, line: 888, type: !1589)
!8092 = !DILocation(line: 888, column: 10, scope: !8082)
!8093 = !DILocalVariable(name: "cleanup", scope: !8082, file: !3, line: 889, type: !1640)
!8094 = !DILocation(line: 889, column: 14, scope: !8082)
!8095 = !DILocalVariable(name: "result", scope: !8082, file: !3, line: 889, type: !1640)
!8096 = !DILocation(line: 889, column: 23, scope: !8082)
!8097 = !DILocalVariable(name: "loc", scope: !8082, file: !3, line: 890, type: !1608)
!8098 = !DILocation(line: 890, column: 14, scope: !8082)
!8099 = !DILocation(line: 890, column: 37, scope: !8082)
!8100 = !DILocation(line: 890, column: 20, scope: !8082)
!8101 = !DILocation(line: 892, column: 33, scope: !8082)
!8102 = !DILocation(line: 892, column: 13, scope: !8082)
!8103 = !DILocation(line: 892, column: 11, scope: !8082)
!8104 = !DILocation(line: 893, column: 29, scope: !8082)
!8105 = !DILocation(line: 893, column: 12, scope: !8082)
!8106 = !DILocation(line: 893, column: 10, scope: !8082)
!8107 = !DILocation(line: 895, column: 7, scope: !8108)
!8108 = distinct !DILexicalBlock(scope: !8082, file: !3, line: 895, column: 7)
!8109 = !DILocation(line: 895, column: 7, scope: !8082)
!8110 = !DILocation(line: 896, column: 37, scope: !8108)
!8111 = !DILocation(line: 896, column: 5, scope: !8108)
!8112 = !DILocation(line: 898, column: 32, scope: !8113)
!8113 = distinct !DILexicalBlock(scope: !8082, file: !3, line: 898, column: 7)
!8114 = !DILocation(line: 898, column: 7, scope: !8113)
!8115 = !DILocation(line: 898, column: 7, scope: !8082)
!8116 = !DILocation(line: 900, column: 12, scope: !8117)
!8117 = distinct !DILexicalBlock(scope: !8118, file: !3, line: 900, column: 11)
!8118 = distinct !DILexicalBlock(scope: !8113, file: !3, line: 899, column: 5)
!8119 = !DILocation(line: 900, column: 11, scope: !8118)
!8120 = !DILocation(line: 901, column: 34, scope: !8117)
!8121 = !DILocation(line: 901, column: 9, scope: !8117)
!8122 = !DILocation(line: 901, column: 7, scope: !8117)
!8123 = !DILocation(line: 901, column: 2, scope: !8117)
!8124 = !DILocation(line: 902, column: 30, scope: !8118)
!8125 = !DILocation(line: 902, column: 11, scope: !8118)
!8126 = !DILocation(line: 902, column: 9, scope: !8118)
!8127 = !DILocation(line: 903, column: 38, scope: !8118)
!8128 = !DILocation(line: 903, column: 7, scope: !8118)
!8129 = !DILocation(line: 904, column: 5, scope: !8118)
!8130 = !DILocation(line: 905, column: 32, scope: !8082)
!8131 = !DILocation(line: 905, column: 3, scope: !8082)
!8132 = !DILocation(line: 907, column: 7, scope: !8133)
!8133 = distinct !DILexicalBlock(scope: !8082, file: !3, line: 907, column: 7)
!8134 = !DILocation(line: 907, column: 7, scope: !8082)
!8135 = !DILocation(line: 909, column: 31, scope: !8136)
!8136 = distinct !DILexicalBlock(scope: !8133, file: !3, line: 908, column: 5)
!8137 = !DILocation(line: 909, column: 11, scope: !8136)
!8138 = !DILocation(line: 909, column: 9, scope: !8136)
!8139 = !DILocation(line: 910, column: 37, scope: !8136)
!8140 = !DILocation(line: 910, column: 7, scope: !8136)
!8141 = !DILocation(line: 911, column: 5, scope: !8136)
!8142 = !DILocation(line: 912, column: 10, scope: !8082)
!8143 = !DILocation(line: 912, column: 3, scope: !8082)
!8144 = distinct !DISubprogram(name: "gimple_eh_filter_types", scope: !591, file: !591, line: 2847, type: !5000, scopeLine: 2848, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8145 = !DILocalVariable(name: "gs", arg: 1, scope: !8144, file: !591, line: 2847, type: !3387)
!8146 = !DILocation(line: 2847, column: 38, scope: !8144)
!8147 = !DILocation(line: 2850, column: 10, scope: !8144)
!8148 = !DILocation(line: 2850, column: 14, scope: !8144)
!8149 = !DILocation(line: 2850, column: 31, scope: !8144)
!8150 = !DILocation(line: 2850, column: 3, scope: !8144)
!8151 = distinct !DISubprogram(name: "gimple_eh_must_not_throw_fndecl", scope: !591, file: !591, line: 2899, type: !8152, scopeLine: 2900, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8152 = !DISubroutineType(types: !8153)
!8153 = !{!1777, !1589}
!8154 = !DILocalVariable(name: "gs", arg: 1, scope: !8151, file: !591, line: 2899, type: !1589)
!8155 = !DILocation(line: 2899, column: 41, scope: !8151)
!8156 = !DILocation(line: 2902, column: 10, scope: !8151)
!8157 = !DILocation(line: 2902, column: 14, scope: !8151)
!8158 = !DILocation(line: 2902, column: 28, scope: !8151)
!8159 = !DILocation(line: 2902, column: 3, scope: !8151)
!8160 = distinct !DISubprogram(name: "gimple_expr_code", scope: !591, file: !591, line: 1438, type: !8161, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8161 = !DISubroutineType(types: !8162)
!8162 = !{!141, !3387}
!8163 = !DILocalVariable(name: "stmt", arg: 1, scope: !8160, file: !591, line: 1438, type: !3387)
!8164 = !DILocation(line: 1438, column: 32, scope: !8160)
!8165 = !DILocalVariable(name: "code", scope: !8160, file: !591, line: 1440, type: !597)
!8166 = !DILocation(line: 1440, column: 20, scope: !8160)
!8167 = !DILocation(line: 1440, column: 40, scope: !8160)
!8168 = !DILocation(line: 1440, column: 27, scope: !8160)
!8169 = !DILocation(line: 1441, column: 7, scope: !8170)
!8170 = distinct !DILexicalBlock(scope: !8160, file: !591, line: 1441, column: 7)
!8171 = !DILocation(line: 1441, column: 12, scope: !8170)
!8172 = !DILocation(line: 1441, column: 29, scope: !8170)
!8173 = !DILocation(line: 1441, column: 32, scope: !8170)
!8174 = !DILocation(line: 1441, column: 37, scope: !8170)
!8175 = !DILocation(line: 1441, column: 7, scope: !8160)
!8176 = !DILocation(line: 1442, column: 29, scope: !8170)
!8177 = !DILocation(line: 1442, column: 35, scope: !8170)
!8178 = !DILocation(line: 1442, column: 42, scope: !8170)
!8179 = !DILocation(line: 1442, column: 5, scope: !8170)
!8180 = !DILocation(line: 1443, column: 12, scope: !8181)
!8181 = distinct !DILexicalBlock(scope: !8170, file: !591, line: 1443, column: 12)
!8182 = !DILocation(line: 1443, column: 17, scope: !8181)
!8183 = !DILocation(line: 1443, column: 12, scope: !8170)
!8184 = !DILocation(line: 1444, column: 5, scope: !8181)
!8185 = !DILocation(line: 1446, column: 5, scope: !8181)
!8186 = !DILocation(line: 1448, column: 5, scope: !8160)
!8187 = !DILocation(line: 1450, column: 1, scope: !8160)
!8188 = distinct !DISubprogram(name: "gimple_expr_type", scope: !591, file: !591, line: 4366, type: !5000, scopeLine: 4367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8189 = !DILocalVariable(name: "stmt", arg: 1, scope: !8188, file: !591, line: 4366, type: !3387)
!8190 = !DILocation(line: 4366, column: 32, scope: !8188)
!8191 = !DILocalVariable(name: "code", scope: !8188, file: !591, line: 4368, type: !597)
!8192 = !DILocation(line: 4368, column: 20, scope: !8188)
!8193 = !DILocation(line: 4368, column: 40, scope: !8188)
!8194 = !DILocation(line: 4368, column: 27, scope: !8188)
!8195 = !DILocation(line: 4370, column: 7, scope: !8196)
!8196 = distinct !DILexicalBlock(scope: !8188, file: !591, line: 4370, column: 7)
!8197 = !DILocation(line: 4370, column: 12, scope: !8196)
!8198 = !DILocation(line: 4370, column: 29, scope: !8196)
!8199 = !DILocation(line: 4370, column: 32, scope: !8196)
!8200 = !DILocation(line: 4370, column: 37, scope: !8196)
!8201 = !DILocation(line: 4370, column: 7, scope: !8188)
!8202 = !DILocalVariable(name: "type", scope: !8203, file: !591, line: 4372, type: !1777)
!8203 = distinct !DILexicalBlock(scope: !8196, file: !591, line: 4371, column: 5)
!8204 = !DILocation(line: 4372, column: 12, scope: !8203)
!8205 = !DILocation(line: 4377, column: 11, scope: !8206)
!8206 = distinct !DILexicalBlock(scope: !8203, file: !591, line: 4377, column: 11)
!8207 = !DILocation(line: 4377, column: 16, scope: !8206)
!8208 = !DILocation(line: 4377, column: 11, scope: !8203)
!8209 = !DILocation(line: 4378, column: 34, scope: !8206)
!8210 = !DILocation(line: 4378, column: 9, scope: !8206)
!8211 = !DILocation(line: 4378, column: 7, scope: !8206)
!8212 = !DILocation(line: 4378, column: 2, scope: !8206)
!8213 = !DILocation(line: 4380, column: 34, scope: !8206)
!8214 = !DILocation(line: 4380, column: 10, scope: !8206)
!8215 = !DILocation(line: 4380, column: 2, scope: !8206)
!8216 = !DILocation(line: 4383, column: 13, scope: !8217)
!8217 = distinct !DILexicalBlock(scope: !8206, file: !591, line: 4381, column: 4)
!8218 = !DILocation(line: 4383, column: 11, scope: !8217)
!8219 = !DILocation(line: 4384, column: 6, scope: !8217)
!8220 = !DILocation(line: 4388, column: 13, scope: !8217)
!8221 = !DILocation(line: 4388, column: 11, scope: !8217)
!8222 = !DILocation(line: 4389, column: 6, scope: !8217)
!8223 = !DILocation(line: 4391, column: 14, scope: !8203)
!8224 = !DILocation(line: 4391, column: 7, scope: !8203)
!8225 = !DILocation(line: 4393, column: 12, scope: !8226)
!8226 = distinct !DILexicalBlock(scope: !8196, file: !591, line: 4393, column: 12)
!8227 = !DILocation(line: 4393, column: 17, scope: !8226)
!8228 = !DILocation(line: 4393, column: 12, scope: !8196)
!8229 = !DILocation(line: 4394, column: 12, scope: !8226)
!8230 = !DILocation(line: 4394, column: 5, scope: !8226)
!8231 = !DILocation(line: 4396, column: 12, scope: !8226)
!8232 = !DILocation(line: 4396, column: 5, scope: !8226)
!8233 = !DILocation(line: 4397, column: 1, scope: !8188)
!8234 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !591, file: !591, line: 1759, type: !5000, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8235 = !DILocalVariable(name: "gs", arg: 1, scope: !8234, file: !591, line: 1759, type: !3387)
!8236 = !DILocation(line: 1759, column: 34, scope: !8234)
!8237 = !DILocation(line: 1763, column: 23, scope: !8238)
!8238 = distinct !DILexicalBlock(scope: !8234, file: !591, line: 1763, column: 7)
!8239 = !DILocation(line: 1763, column: 7, scope: !8238)
!8240 = !DILocation(line: 1763, column: 27, scope: !8238)
!8241 = !DILocation(line: 1763, column: 7, scope: !8234)
!8242 = !DILocation(line: 1764, column: 23, scope: !8238)
!8243 = !DILocation(line: 1764, column: 12, scope: !8238)
!8244 = !DILocation(line: 1764, column: 5, scope: !8238)
!8245 = !DILocation(line: 1766, column: 5, scope: !8238)
!8246 = !DILocation(line: 1767, column: 1, scope: !8234)
!8247 = distinct !DISubprogram(name: "gimple_call_return_type", scope: !591, file: !591, line: 1966, type: !5000, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8248 = !DILocalVariable(name: "gs", arg: 1, scope: !8247, file: !591, line: 1966, type: !3387)
!8249 = !DILocation(line: 1966, column: 39, scope: !8247)
!8250 = !DILocalVariable(name: "fn", scope: !8247, file: !591, line: 1968, type: !1777)
!8251 = !DILocation(line: 1968, column: 8, scope: !8247)
!8252 = !DILocation(line: 1968, column: 29, scope: !8247)
!8253 = !DILocation(line: 1968, column: 13, scope: !8247)
!8254 = !DILocalVariable(name: "type", scope: !8247, file: !591, line: 1969, type: !1777)
!8255 = !DILocation(line: 1969, column: 8, scope: !8247)
!8256 = !DILocation(line: 1969, column: 15, scope: !8247)
!8257 = !DILocation(line: 1972, column: 10, scope: !8247)
!8258 = !DILocation(line: 1972, column: 8, scope: !8247)
!8259 = !DILocation(line: 1976, column: 10, scope: !8247)
!8260 = !DILocation(line: 1976, column: 3, scope: !8247)
!8261 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !591, file: !591, line: 1815, type: !8161, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8262 = !DILocalVariable(name: "gs", arg: 1, scope: !8261, file: !591, line: 1815, type: !3387)
!8263 = !DILocation(line: 1815, column: 38, scope: !8261)
!8264 = !DILocalVariable(name: "code", scope: !8261, file: !591, line: 1817, type: !141)
!8265 = !DILocation(line: 1817, column: 18, scope: !8261)
!8266 = !DILocation(line: 1820, column: 28, scope: !8261)
!8267 = !DILocation(line: 1820, column: 10, scope: !8261)
!8268 = !DILocation(line: 1820, column: 8, scope: !8261)
!8269 = !DILocation(line: 1821, column: 29, scope: !8270)
!8270 = distinct !DILexicalBlock(scope: !8261, file: !591, line: 1821, column: 7)
!8271 = !DILocation(line: 1821, column: 7, scope: !8270)
!8272 = !DILocation(line: 1821, column: 35, scope: !8270)
!8273 = !DILocation(line: 1821, column: 7, scope: !8261)
!8274 = !DILocation(line: 1822, column: 12, scope: !8270)
!8275 = !DILocation(line: 1822, column: 10, scope: !8270)
!8276 = !DILocation(line: 1822, column: 5, scope: !8270)
!8277 = !DILocation(line: 1824, column: 10, scope: !8261)
!8278 = !DILocation(line: 1824, column: 3, scope: !8261)
!8279 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !591, file: !591, line: 1727, type: !5000, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8280 = !DILocalVariable(name: "gs", arg: 1, scope: !8279, file: !591, line: 1727, type: !3387)
!8281 = !DILocation(line: 1727, column: 34, scope: !8279)
!8282 = !DILocation(line: 1730, column: 21, scope: !8279)
!8283 = !DILocation(line: 1730, column: 10, scope: !8279)
!8284 = !DILocation(line: 1730, column: 3, scope: !8279)
!8285 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !591, file: !591, line: 1686, type: !8286, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8286 = !DISubroutineType(types: !8287)
!8287 = !{!820, !141}
!8288 = !DILocalVariable(name: "code", arg: 1, scope: !8285, file: !591, line: 1686, type: !141)
!8289 = !DILocation(line: 1686, column: 38, scope: !8285)
!8290 = !DILocation(line: 1688, column: 63, scope: !8285)
!8291 = !DILocation(line: 1688, column: 34, scope: !8285)
!8292 = !DILocation(line: 1688, column: 10, scope: !8285)
!8293 = !DILocation(line: 1688, column: 3, scope: !8285)
!8294 = distinct !DISubprogram(name: "refactor_eh_r", scope: !3, file: !3, line: 2776, type: !8295, scopeLine: 2777, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8295 = !DISubroutineType(types: !8296)
!8296 = !{null, !1640}
!8297 = !DILocalVariable(name: "seq", arg: 1, scope: !8294, file: !3, line: 2776, type: !1640)
!8298 = !DILocation(line: 2776, column: 27, scope: !8294)
!8299 = !DILocalVariable(name: "gsi", scope: !8294, file: !3, line: 2778, type: !4816)
!8300 = !DILocation(line: 2778, column: 24, scope: !8294)
!8301 = !DILocalVariable(name: "one", scope: !8294, file: !3, line: 2779, type: !1589)
!8302 = !DILocation(line: 2779, column: 10, scope: !8294)
!8303 = !DILocalVariable(name: "two", scope: !8294, file: !3, line: 2779, type: !1589)
!8304 = !DILocation(line: 2779, column: 15, scope: !8294)
!8305 = !DILocation(line: 2781, column: 7, scope: !8294)
!8306 = !DILocation(line: 2782, column: 7, scope: !8294)
!8307 = !DILocation(line: 2783, column: 20, scope: !8294)
!8308 = !DILocation(line: 2783, column: 9, scope: !8294)
!8309 = !DILocation(line: 2784, column: 3, scope: !8294)
!8310 = !DILocation(line: 2786, column: 13, scope: !8311)
!8311 = distinct !DILexicalBlock(scope: !8294, file: !3, line: 2785, column: 5)
!8312 = !DILocation(line: 2786, column: 11, scope: !8311)
!8313 = !DILocation(line: 2787, column: 11, scope: !8314)
!8314 = distinct !DILexicalBlock(scope: !8311, file: !3, line: 2787, column: 11)
!8315 = !DILocation(line: 2787, column: 11, scope: !8311)
!8316 = !DILocation(line: 2788, column: 6, scope: !8314)
!8317 = !DILocation(line: 2788, column: 2, scope: !8314)
!8318 = !DILocation(line: 2790, column: 8, scope: !8314)
!8319 = !DILocation(line: 2790, column: 6, scope: !8314)
!8320 = !DILocation(line: 2791, column: 11, scope: !8321)
!8321 = distinct !DILexicalBlock(scope: !8311, file: !3, line: 2791, column: 11)
!8322 = !DILocation(line: 2792, column: 4, scope: !8321)
!8323 = !DILocation(line: 2792, column: 7, scope: !8321)
!8324 = !DILocation(line: 2793, column: 4, scope: !8321)
!8325 = !DILocation(line: 2793, column: 20, scope: !8321)
!8326 = !DILocation(line: 2793, column: 7, scope: !8321)
!8327 = !DILocation(line: 2793, column: 25, scope: !8321)
!8328 = !DILocation(line: 2794, column: 4, scope: !8321)
!8329 = !DILocation(line: 2794, column: 20, scope: !8321)
!8330 = !DILocation(line: 2794, column: 7, scope: !8321)
!8331 = !DILocation(line: 2794, column: 25, scope: !8321)
!8332 = !DILocation(line: 2795, column: 4, scope: !8321)
!8333 = !DILocation(line: 2795, column: 24, scope: !8321)
!8334 = !DILocation(line: 2795, column: 7, scope: !8321)
!8335 = !DILocation(line: 2795, column: 29, scope: !8321)
!8336 = !DILocation(line: 2796, column: 4, scope: !8321)
!8337 = !DILocation(line: 2796, column: 24, scope: !8321)
!8338 = !DILocation(line: 2796, column: 7, scope: !8321)
!8339 = !DILocation(line: 2796, column: 29, scope: !8321)
!8340 = !DILocation(line: 2791, column: 11, scope: !8311)
!8341 = !DILocation(line: 2797, column: 27, scope: !8321)
!8342 = !DILocation(line: 2797, column: 32, scope: !8321)
!8343 = !DILocation(line: 2797, column: 2, scope: !8321)
!8344 = !DILocation(line: 2798, column: 11, scope: !8345)
!8345 = distinct !DILexicalBlock(scope: !8311, file: !3, line: 2798, column: 11)
!8346 = !DILocation(line: 2798, column: 11, scope: !8311)
!8347 = !DILocation(line: 2799, column: 23, scope: !8345)
!8348 = !DILocation(line: 2799, column: 10, scope: !8345)
!8349 = !DILocation(line: 2799, column: 2, scope: !8345)
!8350 = !DILocation(line: 2802, column: 38, scope: !8351)
!8351 = distinct !DILexicalBlock(scope: !8345, file: !3, line: 2800, column: 4)
!8352 = !DILocation(line: 2802, column: 21, scope: !8351)
!8353 = !DILocation(line: 2802, column: 6, scope: !8351)
!8354 = !DILocation(line: 2803, column: 41, scope: !8351)
!8355 = !DILocation(line: 2803, column: 21, scope: !8351)
!8356 = !DILocation(line: 2803, column: 6, scope: !8351)
!8357 = !DILocation(line: 2804, column: 6, scope: !8351)
!8358 = !DILocation(line: 2806, column: 43, scope: !8351)
!8359 = !DILocation(line: 2806, column: 21, scope: !8351)
!8360 = !DILocation(line: 2806, column: 6, scope: !8351)
!8361 = !DILocation(line: 2807, column: 6, scope: !8351)
!8362 = !DILocation(line: 2809, column: 47, scope: !8351)
!8363 = !DILocation(line: 2809, column: 21, scope: !8351)
!8364 = !DILocation(line: 2809, column: 6, scope: !8351)
!8365 = !DILocation(line: 2810, column: 6, scope: !8351)
!8366 = !DILocation(line: 2812, column: 6, scope: !8351)
!8367 = !DILocation(line: 2813, column: 4, scope: !8351)
!8368 = !DILocation(line: 2814, column: 11, scope: !8369)
!8369 = distinct !DILexicalBlock(scope: !8311, file: !3, line: 2814, column: 11)
!8370 = !DILocation(line: 2814, column: 11, scope: !8311)
!8371 = !DILocation(line: 2815, column: 2, scope: !8369)
!8372 = !DILocation(line: 2817, column: 2, scope: !8369)
!8373 = distinct !{!8373, !8309, !8374}
!8374 = !DILocation(line: 2818, column: 5, scope: !8294)
!8375 = !DILocation(line: 2819, column: 1, scope: !8294)
!8376 = distinct !DISubprogram(name: "optimize_double_finally", scope: !3, file: !3, line: 2746, type: !4899, scopeLine: 2747, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8377 = !DILocalVariable(name: "one", arg: 1, scope: !8376, file: !3, line: 2746, type: !1589)
!8378 = !DILocation(line: 2746, column: 33, scope: !8376)
!8379 = !DILocalVariable(name: "two", arg: 2, scope: !8376, file: !3, line: 2746, type: !1589)
!8380 = !DILocation(line: 2746, column: 45, scope: !8376)
!8381 = !DILocalVariable(name: "oneh", scope: !8376, file: !3, line: 2748, type: !1589)
!8382 = !DILocation(line: 2748, column: 10, scope: !8376)
!8383 = !DILocalVariable(name: "gsi", scope: !8376, file: !3, line: 2749, type: !4816)
!8384 = !DILocation(line: 2749, column: 24, scope: !8376)
!8385 = !DILocation(line: 2751, column: 40, scope: !8376)
!8386 = !DILocation(line: 2751, column: 20, scope: !8376)
!8387 = !DILocation(line: 2751, column: 9, scope: !8376)
!8388 = !DILocation(line: 2752, column: 8, scope: !8389)
!8389 = distinct !DILexicalBlock(scope: !8376, file: !3, line: 2752, column: 7)
!8390 = !DILocation(line: 2752, column: 7, scope: !8376)
!8391 = !DILocation(line: 2753, column: 5, scope: !8389)
!8392 = !DILocation(line: 2755, column: 10, scope: !8376)
!8393 = !DILocation(line: 2755, column: 8, scope: !8376)
!8394 = !DILocation(line: 2756, column: 20, scope: !8395)
!8395 = distinct !DILexicalBlock(scope: !8376, file: !3, line: 2756, column: 7)
!8396 = !DILocation(line: 2756, column: 7, scope: !8395)
!8397 = !DILocation(line: 2756, column: 26, scope: !8395)
!8398 = !DILocation(line: 2757, column: 7, scope: !8395)
!8399 = !DILocation(line: 2757, column: 27, scope: !8395)
!8400 = !DILocation(line: 2757, column: 10, scope: !8395)
!8401 = !DILocation(line: 2757, column: 33, scope: !8395)
!8402 = !DILocation(line: 2756, column: 7, scope: !8376)
!8403 = !DILocation(line: 2758, column: 5, scope: !8395)
!8404 = !DILocation(line: 2760, column: 43, scope: !8405)
!8405 = distinct !DILexicalBlock(scope: !8376, file: !3, line: 2760, column: 7)
!8406 = !DILocation(line: 2760, column: 23, scope: !8405)
!8407 = !DILocation(line: 2760, column: 70, scope: !8405)
!8408 = !DILocation(line: 2760, column: 50, scope: !8405)
!8409 = !DILocation(line: 2760, column: 7, scope: !8405)
!8410 = !DILocation(line: 2760, column: 7, scope: !8376)
!8411 = !DILocalVariable(name: "seq", scope: !8412, file: !3, line: 2762, type: !1640)
!8412 = distinct !DILexicalBlock(scope: !8405, file: !3, line: 2761, column: 5)
!8413 = !DILocation(line: 2762, column: 18, scope: !8412)
!8414 = !DILocation(line: 2762, column: 41, scope: !8412)
!8415 = !DILocation(line: 2762, column: 24, scope: !8412)
!8416 = !DILocation(line: 2764, column: 31, scope: !8412)
!8417 = !DILocation(line: 2764, column: 36, scope: !8412)
!8418 = !DILocation(line: 2764, column: 7, scope: !8412)
!8419 = !DILocation(line: 2765, column: 28, scope: !8412)
!8420 = !DILocation(line: 2765, column: 7, scope: !8412)
!8421 = !DILocation(line: 2766, column: 49, scope: !8412)
!8422 = !DILocation(line: 2766, column: 13, scope: !8412)
!8423 = !DILocation(line: 2766, column: 11, scope: !8412)
!8424 = !DILocation(line: 2767, column: 50, scope: !8412)
!8425 = !DILocation(line: 2767, column: 33, scope: !8412)
!8426 = !DILocation(line: 2767, column: 7, scope: !8412)
!8427 = !DILocation(line: 2768, column: 28, scope: !8412)
!8428 = !DILocation(line: 2768, column: 33, scope: !8412)
!8429 = !DILocation(line: 2768, column: 7, scope: !8412)
!8430 = !DILocation(line: 2769, column: 5, scope: !8412)
!8431 = !DILocation(line: 2770, column: 1, scope: !8376)
!8432 = distinct !DISubprogram(name: "gsi_one_before_end_p", scope: !591, file: !591, line: 4476, type: !4890, scopeLine: 4477, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8433 = !DILocalVariable(name: "i", arg: 1, scope: !8432, file: !591, line: 4476, type: !4816)
!8434 = !DILocation(line: 4476, column: 44, scope: !8432)
!8435 = !DILocation(line: 4478, column: 12, scope: !8432)
!8436 = !DILocation(line: 4478, column: 16, scope: !8432)
!8437 = !DILocation(line: 4478, column: 24, scope: !8432)
!8438 = !DILocation(line: 4478, column: 29, scope: !8432)
!8439 = !DILocation(line: 4478, column: 34, scope: !8432)
!8440 = !DILocation(line: 4478, column: 39, scope: !8432)
!8441 = !DILocation(line: 0, scope: !8432)
!8442 = !DILocation(line: 4478, column: 10, scope: !8432)
!8443 = !DILocation(line: 4478, column: 3, scope: !8432)
!8444 = distinct !DISubprogram(name: "same_handler_p", scope: !3, file: !3, line: 2701, type: !8445, scopeLine: 2702, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8445 = !DISubroutineType(types: !8446)
!8446 = !{!1890, !1640, !1640}
!8447 = !DILocalVariable(name: "oneh", arg: 1, scope: !8444, file: !3, line: 2701, type: !1640)
!8448 = !DILocation(line: 2701, column: 28, scope: !8444)
!8449 = !DILocalVariable(name: "twoh", arg: 2, scope: !8444, file: !3, line: 2701, type: !1640)
!8450 = !DILocation(line: 2701, column: 45, scope: !8444)
!8451 = !DILocalVariable(name: "gsi", scope: !8444, file: !3, line: 2703, type: !4816)
!8452 = !DILocation(line: 2703, column: 24, scope: !8444)
!8453 = !DILocalVariable(name: "ones", scope: !8444, file: !3, line: 2704, type: !1589)
!8454 = !DILocation(line: 2704, column: 10, scope: !8444)
!8455 = !DILocalVariable(name: "twos", scope: !8444, file: !3, line: 2704, type: !1589)
!8456 = !DILocation(line: 2704, column: 16, scope: !8444)
!8457 = !DILocalVariable(name: "ai", scope: !8444, file: !3, line: 2705, type: !7)
!8458 = !DILocation(line: 2705, column: 16, scope: !8444)
!8459 = !DILocation(line: 2707, column: 20, scope: !8444)
!8460 = !DILocation(line: 2707, column: 9, scope: !8444)
!8461 = !DILocation(line: 2708, column: 8, scope: !8462)
!8462 = distinct !DILexicalBlock(scope: !8444, file: !3, line: 2708, column: 7)
!8463 = !DILocation(line: 2708, column: 7, scope: !8444)
!8464 = !DILocation(line: 2709, column: 5, scope: !8462)
!8465 = !DILocation(line: 2710, column: 10, scope: !8444)
!8466 = !DILocation(line: 2710, column: 8, scope: !8444)
!8467 = !DILocation(line: 2712, column: 20, scope: !8444)
!8468 = !DILocation(line: 2712, column: 9, scope: !8444)
!8469 = !DILocation(line: 2713, column: 8, scope: !8470)
!8470 = distinct !DILexicalBlock(scope: !8444, file: !3, line: 2713, column: 7)
!8471 = !DILocation(line: 2713, column: 7, scope: !8444)
!8472 = !DILocation(line: 2714, column: 5, scope: !8470)
!8473 = !DILocation(line: 2715, column: 10, scope: !8444)
!8474 = !DILocation(line: 2715, column: 8, scope: !8444)
!8475 = !DILocation(line: 2717, column: 24, scope: !8476)
!8476 = distinct !DILexicalBlock(scope: !8444, file: !3, line: 2717, column: 7)
!8477 = !DILocation(line: 2717, column: 8, scope: !8476)
!8478 = !DILocation(line: 2718, column: 7, scope: !8476)
!8479 = !DILocation(line: 2718, column: 27, scope: !8476)
!8480 = !DILocation(line: 2718, column: 11, scope: !8476)
!8481 = !DILocation(line: 2719, column: 7, scope: !8476)
!8482 = !DILocation(line: 2719, column: 27, scope: !8476)
!8483 = !DILocation(line: 2719, column: 10, scope: !8476)
!8484 = !DILocation(line: 2720, column: 7, scope: !8476)
!8485 = !DILocation(line: 2720, column: 27, scope: !8476)
!8486 = !DILocation(line: 2720, column: 10, scope: !8476)
!8487 = !DILocation(line: 2721, column: 7, scope: !8476)
!8488 = !DILocation(line: 2721, column: 29, scope: !8476)
!8489 = !DILocation(line: 2721, column: 10, scope: !8476)
!8490 = !DILocation(line: 2722, column: 7, scope: !8476)
!8491 = !DILocation(line: 2722, column: 29, scope: !8476)
!8492 = !DILocation(line: 2722, column: 10, scope: !8476)
!8493 = !DILocation(line: 2723, column: 7, scope: !8476)
!8494 = !DILocation(line: 2723, column: 44, scope: !8476)
!8495 = !DILocation(line: 2723, column: 28, scope: !8476)
!8496 = !DILocation(line: 2723, column: 67, scope: !8476)
!8497 = !DILocation(line: 2723, column: 51, scope: !8476)
!8498 = !DILocation(line: 2723, column: 11, scope: !8476)
!8499 = !DILocation(line: 2724, column: 7, scope: !8476)
!8500 = !DILocation(line: 2724, column: 32, scope: !8476)
!8501 = !DILocation(line: 2724, column: 10, scope: !8476)
!8502 = !DILocation(line: 2724, column: 63, scope: !8476)
!8503 = !DILocation(line: 2724, column: 41, scope: !8476)
!8504 = !DILocation(line: 2724, column: 38, scope: !8476)
!8505 = !DILocation(line: 2717, column: 7, scope: !8444)
!8506 = !DILocation(line: 2725, column: 5, scope: !8476)
!8507 = !DILocation(line: 2727, column: 11, scope: !8508)
!8508 = distinct !DILexicalBlock(scope: !8444, file: !3, line: 2727, column: 3)
!8509 = !DILocation(line: 2727, column: 8, scope: !8508)
!8510 = !DILocation(line: 2727, column: 16, scope: !8511)
!8511 = distinct !DILexicalBlock(scope: !8508, file: !3, line: 2727, column: 3)
!8512 = !DILocation(line: 2727, column: 43, scope: !8511)
!8513 = !DILocation(line: 2727, column: 21, scope: !8511)
!8514 = !DILocation(line: 2727, column: 19, scope: !8511)
!8515 = !DILocation(line: 2727, column: 3, scope: !8508)
!8516 = !DILocation(line: 2728, column: 44, scope: !8517)
!8517 = distinct !DILexicalBlock(scope: !8511, file: !3, line: 2728, column: 9)
!8518 = !DILocation(line: 2728, column: 50, scope: !8517)
!8519 = !DILocation(line: 2728, column: 27, scope: !8517)
!8520 = !DILocation(line: 2729, column: 44, scope: !8517)
!8521 = !DILocation(line: 2729, column: 50, scope: !8517)
!8522 = !DILocation(line: 2729, column: 27, scope: !8517)
!8523 = !DILocation(line: 2728, column: 10, scope: !8517)
!8524 = !DILocation(line: 2728, column: 9, scope: !8511)
!8525 = !DILocation(line: 2730, column: 7, scope: !8517)
!8526 = !DILocation(line: 2729, column: 56, scope: !8517)
!8527 = !DILocation(line: 2727, column: 50, scope: !8511)
!8528 = !DILocation(line: 2727, column: 3, scope: !8511)
!8529 = distinct !{!8529, !8515, !8530}
!8530 = !DILocation(line: 2730, column: 14, scope: !8508)
!8531 = !DILocation(line: 2732, column: 3, scope: !8444)
!8532 = !DILocation(line: 2733, column: 1, scope: !8444)
!8533 = distinct !DISubprogram(name: "gimple_try_set_kind", scope: !591, file: !591, line: 2931, type: !8534, scopeLine: 2932, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8534 = !DISubroutineType(types: !8535)
!8535 = !{null, !1589, !590}
!8536 = !DILocalVariable(name: "gs", arg: 1, scope: !8533, file: !591, line: 2931, type: !1589)
!8537 = !DILocation(line: 2931, column: 29, scope: !8533)
!8538 = !DILocalVariable(name: "kind", arg: 2, scope: !8533, file: !591, line: 2931, type: !590)
!8539 = !DILocation(line: 2931, column: 55, scope: !8533)
!8540 = !DILocation(line: 2934, column: 3, scope: !8533)
!8541 = !DILocation(line: 2935, column: 24, scope: !8542)
!8542 = distinct !DILexicalBlock(scope: !8533, file: !591, line: 2935, column: 7)
!8543 = !DILocation(line: 2935, column: 7, scope: !8542)
!8544 = !DILocation(line: 2935, column: 31, scope: !8542)
!8545 = !DILocation(line: 2935, column: 28, scope: !8542)
!8546 = !DILocation(line: 2935, column: 7, scope: !8533)
!8547 = !DILocation(line: 2936, column: 41, scope: !8542)
!8548 = !DILocation(line: 2936, column: 5, scope: !8542)
!8549 = !DILocation(line: 2936, column: 9, scope: !8542)
!8550 = !DILocation(line: 2936, column: 16, scope: !8542)
!8551 = !DILocation(line: 2936, column: 24, scope: !8542)
!8552 = !DILocation(line: 2937, column: 1, scope: !8533)
!8553 = distinct !DISubprogram(name: "gimple_try_set_eval", scope: !591, file: !591, line: 2988, type: !6534, scopeLine: 2989, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8554 = !DILocalVariable(name: "gs", arg: 1, scope: !8553, file: !591, line: 2988, type: !1589)
!8555 = !DILocation(line: 2988, column: 29, scope: !8553)
!8556 = !DILocalVariable(name: "eval", arg: 2, scope: !8553, file: !591, line: 2988, type: !1640)
!8557 = !DILocation(line: 2988, column: 44, scope: !8553)
!8558 = !DILocation(line: 2991, column: 25, scope: !8553)
!8559 = !DILocation(line: 2991, column: 3, scope: !8553)
!8560 = !DILocation(line: 2991, column: 7, scope: !8553)
!8561 = !DILocation(line: 2991, column: 18, scope: !8553)
!8562 = !DILocation(line: 2991, column: 23, scope: !8553)
!8563 = !DILocation(line: 2992, column: 1, scope: !8553)
!8564 = distinct !DISubprogram(name: "gimple_call_chain", scope: !591, file: !591, line: 1983, type: !5000, scopeLine: 1984, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8565 = !DILocalVariable(name: "gs", arg: 1, scope: !8564, file: !591, line: 1983, type: !3387)
!8566 = !DILocation(line: 1983, column: 33, scope: !8564)
!8567 = !DILocation(line: 1986, column: 21, scope: !8564)
!8568 = !DILocation(line: 1986, column: 10, scope: !8564)
!8569 = !DILocation(line: 1986, column: 3, scope: !8564)
!8570 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !591, file: !591, line: 2013, type: !6137, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8571 = !DILocalVariable(name: "gs", arg: 1, scope: !8570, file: !591, line: 2013, type: !3387)
!8572 = !DILocation(line: 2013, column: 36, scope: !8570)
!8573 = !DILocalVariable(name: "num_ops", scope: !8570, file: !591, line: 2015, type: !7)
!8574 = !DILocation(line: 2015, column: 12, scope: !8570)
!8575 = !DILocation(line: 2017, column: 29, scope: !8570)
!8576 = !DILocation(line: 2017, column: 13, scope: !8570)
!8577 = !DILocation(line: 2017, column: 11, scope: !8570)
!8578 = !DILocation(line: 2018, column: 10, scope: !8570)
!8579 = !DILocation(line: 2018, column: 18, scope: !8570)
!8580 = !DILocation(line: 2018, column: 3, scope: !8570)
!8581 = distinct !DISubprogram(name: "gimple_call_arg", scope: !591, file: !591, line: 2025, type: !5077, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8582 = !DILocalVariable(name: "gs", arg: 1, scope: !8581, file: !591, line: 2025, type: !3387)
!8583 = !DILocation(line: 2025, column: 31, scope: !8581)
!8584 = !DILocalVariable(name: "index", arg: 2, scope: !8581, file: !591, line: 2025, type: !7)
!8585 = !DILocation(line: 2025, column: 44, scope: !8581)
!8586 = !DILocation(line: 2028, column: 21, scope: !8581)
!8587 = !DILocation(line: 2028, column: 25, scope: !8581)
!8588 = !DILocation(line: 2028, column: 31, scope: !8581)
!8589 = !DILocation(line: 2028, column: 10, scope: !8581)
!8590 = !DILocation(line: 2028, column: 3, scope: !8581)
!8591 = distinct !DISubprogram(name: "is_gimple_resx", scope: !591, file: !591, line: 4313, type: !4067, scopeLine: 4314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8592 = !DILocalVariable(name: "gs", arg: 1, scope: !8591, file: !591, line: 4313, type: !3387)
!8593 = !DILocation(line: 4313, column: 30, scope: !8591)
!8594 = !DILocation(line: 4315, column: 23, scope: !8591)
!8595 = !DILocation(line: 4315, column: 10, scope: !8591)
!8596 = !DILocation(line: 4315, column: 27, scope: !8591)
!8597 = !DILocation(line: 4315, column: 3, scope: !8591)
!8598 = distinct !DISubprogram(name: "lower_resx", scope: !3, file: !3, line: 2856, type: !8599, scopeLine: 2857, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8599 = !DISubroutineType(types: !8600)
!8600 = !{!1890, !2200, !1589, !2261}
!8601 = !DILocalVariable(name: "bb", arg: 1, scope: !8598, file: !3, line: 2856, type: !2200)
!8602 = !DILocation(line: 2856, column: 25, scope: !8598)
!8603 = !DILocalVariable(name: "stmt", arg: 2, scope: !8598, file: !3, line: 2856, type: !1589)
!8604 = !DILocation(line: 2856, column: 36, scope: !8598)
!8605 = !DILocalVariable(name: "mnt_map", arg: 3, scope: !8598, file: !3, line: 2856, type: !2261)
!8606 = !DILocation(line: 2856, column: 64, scope: !8598)
!8607 = !DILocalVariable(name: "lp_nr", scope: !8598, file: !3, line: 2858, type: !1679)
!8608 = !DILocation(line: 2858, column: 7, scope: !8598)
!8609 = !DILocalVariable(name: "src_r", scope: !8598, file: !3, line: 2859, type: !2037)
!8610 = !DILocation(line: 2859, column: 13, scope: !8598)
!8611 = !DILocalVariable(name: "dst_r", scope: !8598, file: !3, line: 2859, type: !2037)
!8612 = !DILocation(line: 2859, column: 20, scope: !8598)
!8613 = !DILocalVariable(name: "gsi", scope: !8598, file: !3, line: 2860, type: !4816)
!8614 = !DILocation(line: 2860, column: 24, scope: !8598)
!8615 = !DILocalVariable(name: "x", scope: !8598, file: !3, line: 2861, type: !1589)
!8616 = !DILocation(line: 2861, column: 10, scope: !8598)
!8617 = !DILocalVariable(name: "fn", scope: !8598, file: !3, line: 2862, type: !1777)
!8618 = !DILocation(line: 2862, column: 8, scope: !8598)
!8619 = !DILocalVariable(name: "src_nr", scope: !8598, file: !3, line: 2862, type: !1777)
!8620 = !DILocation(line: 2862, column: 12, scope: !8598)
!8621 = !DILocalVariable(name: "ret", scope: !8598, file: !3, line: 2863, type: !1890)
!8622 = !DILocation(line: 2863, column: 8, scope: !8598)
!8623 = !DILocation(line: 2865, column: 30, scope: !8598)
!8624 = !DILocation(line: 2865, column: 11, scope: !8598)
!8625 = !DILocation(line: 2865, column: 9, scope: !8598)
!8626 = !DILocation(line: 2866, column: 7, scope: !8627)
!8627 = distinct !DILexicalBlock(scope: !8598, file: !3, line: 2866, column: 7)
!8628 = !DILocation(line: 2866, column: 13, scope: !8627)
!8629 = !DILocation(line: 2866, column: 7, scope: !8598)
!8630 = !DILocation(line: 2867, column: 43, scope: !8627)
!8631 = !DILocation(line: 2867, column: 13, scope: !8627)
!8632 = !DILocation(line: 2867, column: 11, scope: !8627)
!8633 = !DILocation(line: 2867, column: 5, scope: !8627)
!8634 = !DILocation(line: 2869, column: 11, scope: !8627)
!8635 = !DILocation(line: 2871, column: 58, scope: !8598)
!8636 = !DILocation(line: 2871, column: 38, scope: !8598)
!8637 = !DILocation(line: 2871, column: 11, scope: !8598)
!8638 = !DILocation(line: 2871, column: 9, scope: !8598)
!8639 = !DILocation(line: 2872, column: 22, scope: !8598)
!8640 = !DILocation(line: 2872, column: 9, scope: !8598)
!8641 = !DILocation(line: 2874, column: 7, scope: !8642)
!8642 = distinct !DILexicalBlock(scope: !8598, file: !3, line: 2874, column: 7)
!8643 = !DILocation(line: 2874, column: 13, scope: !8642)
!8644 = !DILocation(line: 2874, column: 7, scope: !8598)
!8645 = !DILocation(line: 2884, column: 12, scope: !8646)
!8646 = distinct !DILexicalBlock(scope: !8642, file: !3, line: 2875, column: 5)
!8647 = !DILocation(line: 2884, column: 10, scope: !8646)
!8648 = !DILocation(line: 2885, column: 30, scope: !8646)
!8649 = !DILocation(line: 2885, column: 11, scope: !8646)
!8650 = !DILocation(line: 2885, column: 9, scope: !8646)
!8651 = !DILocation(line: 2886, column: 32, scope: !8646)
!8652 = !DILocation(line: 2886, column: 7, scope: !8646)
!8653 = !DILocation(line: 2888, column: 7, scope: !8646)
!8654 = !DILocation(line: 2888, column: 14, scope: !8646)
!8655 = !DILocation(line: 2888, column: 37, scope: !8646)
!8656 = !DILocation(line: 2889, column: 15, scope: !8646)
!8657 = !DILocation(line: 2889, column: 2, scope: !8646)
!8658 = distinct !{!8658, !8653, !8659}
!8659 = !DILocation(line: 2889, column: 32, scope: !8646)
!8660 = !DILocation(line: 2890, column: 5, scope: !8646)
!8661 = !DILocation(line: 2891, column: 12, scope: !8662)
!8662 = distinct !DILexicalBlock(scope: !8642, file: !3, line: 2891, column: 12)
!8663 = !DILocation(line: 2891, column: 12, scope: !8642)
!8664 = !DILocalVariable(name: "e", scope: !8665, file: !3, line: 2896, type: !1630)
!8665 = distinct !DILexicalBlock(scope: !8662, file: !3, line: 2892, column: 5)
!8666 = !DILocation(line: 2896, column: 12, scope: !8665)
!8667 = !DILocation(line: 2898, column: 11, scope: !8668)
!8668 = distinct !DILexicalBlock(scope: !8665, file: !3, line: 2898, column: 11)
!8669 = !DILocation(line: 2898, column: 17, scope: !8668)
!8670 = !DILocation(line: 2898, column: 11, scope: !8665)
!8671 = !DILocalVariable(name: "new_bb", scope: !8672, file: !3, line: 2900, type: !2200)
!8672 = distinct !DILexicalBlock(scope: !8668, file: !3, line: 2899, column: 2)
!8673 = !DILocation(line: 2900, column: 16, scope: !8672)
!8674 = !DILocalVariable(name: "slot", scope: !8672, file: !3, line: 2901, type: !2136)
!8675 = !DILocation(line: 2901, column: 11, scope: !8672)
!8676 = !DILocalVariable(name: "lab", scope: !8672, file: !3, line: 2902, type: !1777)
!8677 = !DILocation(line: 2902, column: 9, scope: !8672)
!8678 = !DILocation(line: 2906, column: 4, scope: !8672)
!8679 = !DILocation(line: 2908, column: 33, scope: !8672)
!8680 = !DILocation(line: 2908, column: 42, scope: !8672)
!8681 = !DILocation(line: 2908, column: 11, scope: !8672)
!8682 = !DILocation(line: 2908, column: 9, scope: !8672)
!8683 = !DILocation(line: 2909, column: 8, scope: !8684)
!8684 = distinct !DILexicalBlock(scope: !8672, file: !3, line: 2909, column: 8)
!8685 = !DILocation(line: 2909, column: 13, scope: !8684)
!8686 = !DILocation(line: 2909, column: 8, scope: !8672)
!8687 = !DILocalVariable(name: "gsi2", scope: !8688, file: !3, line: 2911, type: !4816)
!8688 = distinct !DILexicalBlock(scope: !8684, file: !3, line: 2910, column: 6)
!8689 = !DILocation(line: 2911, column: 29, scope: !8688)
!8690 = !DILocation(line: 2913, column: 34, scope: !8688)
!8691 = !DILocation(line: 2913, column: 17, scope: !8688)
!8692 = !DILocation(line: 2913, column: 15, scope: !8688)
!8693 = !DILocation(line: 2914, column: 34, scope: !8688)
!8694 = !DILocation(line: 2914, column: 14, scope: !8688)
!8695 = !DILocation(line: 2914, column: 12, scope: !8688)
!8696 = !DILocation(line: 2915, column: 29, scope: !8688)
!8697 = !DILocation(line: 2915, column: 15, scope: !8688)
!8698 = !DILocation(line: 2917, column: 13, scope: !8688)
!8699 = !DILocation(line: 2917, column: 20, scope: !8688)
!8700 = !DILocation(line: 2917, column: 22, scope: !8688)
!8701 = !DILocation(line: 2917, column: 37, scope: !8688)
!8702 = !DILocation(line: 2917, column: 11, scope: !8688)
!8703 = !DILocation(line: 2918, column: 31, scope: !8688)
!8704 = !DILocation(line: 2918, column: 12, scope: !8688)
!8705 = !DILocation(line: 2918, column: 10, scope: !8688)
!8706 = !DILocation(line: 2919, column: 29, scope: !8688)
!8707 = !DILocation(line: 2919, column: 32, scope: !8688)
!8708 = !DILocation(line: 2919, column: 39, scope: !8688)
!8709 = !DILocation(line: 2919, column: 41, scope: !8688)
!8710 = !DILocation(line: 2919, column: 56, scope: !8688)
!8711 = !DILocation(line: 2919, column: 8, scope: !8688)
!8712 = !DILocation(line: 2920, column: 33, scope: !8688)
!8713 = !DILocation(line: 2920, column: 8, scope: !8688)
!8714 = !DILocation(line: 2922, column: 35, scope: !8688)
!8715 = !DILocation(line: 2922, column: 44, scope: !8688)
!8716 = !DILocation(line: 2922, column: 15, scope: !8688)
!8717 = !DILocation(line: 2922, column: 13, scope: !8688)
!8718 = !DILocation(line: 2923, column: 16, scope: !8688)
!8719 = !DILocation(line: 2923, column: 9, scope: !8688)
!8720 = !DILocation(line: 2923, column: 14, scope: !8688)
!8721 = !DILocation(line: 2924, column: 6, scope: !8688)
!8722 = !DILocation(line: 2927, column: 22, scope: !8723)
!8723 = distinct !DILexicalBlock(scope: !8684, file: !3, line: 2926, column: 6)
!8724 = !DILocation(line: 2927, column: 21, scope: !8723)
!8725 = !DILocation(line: 2927, column: 14, scope: !8723)
!8726 = !DILocation(line: 2927, column: 12, scope: !8723)
!8727 = !DILocation(line: 2928, column: 17, scope: !8723)
!8728 = !DILocation(line: 2928, column: 15, scope: !8723)
!8729 = !DILocation(line: 2931, column: 4, scope: !8672)
!8730 = !DILocation(line: 2932, column: 19, scope: !8672)
!8731 = !DILocation(line: 2932, column: 23, scope: !8672)
!8732 = !DILocation(line: 2932, column: 8, scope: !8672)
!8733 = !DILocation(line: 2932, column: 6, scope: !8672)
!8734 = !DILocation(line: 2933, column: 15, scope: !8672)
!8735 = !DILocation(line: 2933, column: 19, scope: !8672)
!8736 = !DILocation(line: 2933, column: 4, scope: !8672)
!8737 = !DILocation(line: 2933, column: 7, scope: !8672)
!8738 = !DILocation(line: 2933, column: 13, scope: !8672)
!8739 = !DILocation(line: 2934, column: 4, scope: !8672)
!8740 = !DILocation(line: 2934, column: 7, scope: !8672)
!8741 = !DILocation(line: 2934, column: 19, scope: !8672)
!8742 = !DILocation(line: 2935, column: 2, scope: !8672)
!8743 = !DILocalVariable(name: "ei", scope: !8744, file: !3, line: 2938, type: !3477)
!8744 = distinct !DILexicalBlock(scope: !8668, file: !3, line: 2937, column: 2)
!8745 = !DILocation(line: 2938, column: 18, scope: !8744)
!8746 = !DILocalVariable(name: "dst_nr", scope: !8744, file: !3, line: 2939, type: !1777)
!8747 = !DILocation(line: 2939, column: 9, scope: !8744)
!8748 = !DILocation(line: 2939, column: 39, scope: !8744)
!8749 = !DILocation(line: 2939, column: 46, scope: !8744)
!8750 = !DILocation(line: 2939, column: 18, scope: !8744)
!8751 = !DILocation(line: 2941, column: 9, scope: !8744)
!8752 = !DILocation(line: 2941, column: 7, scope: !8744)
!8753 = !DILocation(line: 2942, column: 34, scope: !8744)
!8754 = !DILocation(line: 2942, column: 41, scope: !8744)
!8755 = !DILocation(line: 2942, column: 13, scope: !8744)
!8756 = !DILocation(line: 2942, column: 11, scope: !8744)
!8757 = !DILocation(line: 2943, column: 27, scope: !8744)
!8758 = !DILocation(line: 2943, column: 34, scope: !8744)
!8759 = !DILocation(line: 2943, column: 42, scope: !8744)
!8760 = !DILocation(line: 2943, column: 8, scope: !8744)
!8761 = !DILocation(line: 2943, column: 6, scope: !8744)
!8762 = !DILocation(line: 2944, column: 29, scope: !8744)
!8763 = !DILocation(line: 2944, column: 4, scope: !8744)
!8764 = !DILocation(line: 2947, column: 26, scope: !8744)
!8765 = !DILocation(line: 2947, column: 8, scope: !8744)
!8766 = !DILocation(line: 2947, column: 6, scope: !8744)
!8767 = !DILocation(line: 2948, column: 4, scope: !8744)
!8768 = !DILocation(line: 2949, column: 16, scope: !8744)
!8769 = !DILocation(line: 2949, column: 19, scope: !8744)
!8770 = !DILocation(line: 2949, column: 25, scope: !8744)
!8771 = !DILocation(line: 2949, column: 37, scope: !8744)
!8772 = !DILocation(line: 2949, column: 4, scope: !8744)
!8773 = !DILocation(line: 2949, column: 7, scope: !8744)
!8774 = !DILocation(line: 2949, column: 13, scope: !8744)
!8775 = !DILocation(line: 2952, column: 4, scope: !8776)
!8776 = distinct !DILexicalBlock(scope: !8744, file: !3, line: 2952, column: 4)
!8777 = !DILocation(line: 2952, column: 4, scope: !8778)
!8778 = distinct !DILexicalBlock(scope: !8776, file: !3, line: 2952, column: 4)
!8779 = !DILocation(line: 2953, column: 10, scope: !8780)
!8780 = distinct !DILexicalBlock(scope: !8778, file: !3, line: 2953, column: 10)
!8781 = !DILocation(line: 2953, column: 13, scope: !8780)
!8782 = !DILocation(line: 2953, column: 19, scope: !8780)
!8783 = !DILocation(line: 2953, column: 10, scope: !8778)
!8784 = !DILocation(line: 2954, column: 8, scope: !8780)
!8785 = !DILocation(line: 2953, column: 21, scope: !8780)
!8786 = distinct !{!8786, !8775, !8787}
!8787 = !DILocation(line: 2954, column: 8, scope: !8776)
!8788 = !DILocation(line: 2955, column: 8, scope: !8789)
!8789 = distinct !DILexicalBlock(scope: !8744, file: !3, line: 2955, column: 8)
!8790 = !DILocation(line: 2955, column: 10, scope: !8789)
!8791 = !DILocation(line: 2955, column: 8, scope: !8744)
!8792 = !DILocalVariable(name: "lp", scope: !8793, file: !3, line: 2957, type: !2111)
!8793 = distinct !DILexicalBlock(scope: !8789, file: !3, line: 2956, column: 6)
!8794 = !DILocation(line: 2957, column: 23, scope: !8793)
!8795 = !DILocation(line: 2957, column: 60, scope: !8793)
!8796 = !DILocation(line: 2957, column: 28, scope: !8793)
!8797 = !DILocation(line: 2958, column: 31, scope: !8793)
!8798 = !DILocation(line: 2958, column: 8, scope: !8793)
!8799 = !DILocation(line: 2959, column: 6, scope: !8793)
!8800 = !DILocation(line: 2962, column: 11, scope: !8665)
!8801 = !DILocation(line: 2963, column: 5, scope: !8665)
!8802 = !DILocalVariable(name: "var", scope: !8803, file: !3, line: 2966, type: !1777)
!8803 = distinct !DILexicalBlock(scope: !8662, file: !3, line: 2965, column: 5)
!8804 = !DILocation(line: 2966, column: 12, scope: !8803)
!8805 = !DILocation(line: 2974, column: 11, scope: !8806)
!8806 = distinct !DILexicalBlock(scope: !8803, file: !3, line: 2974, column: 11)
!8807 = !DILocation(line: 2974, column: 18, scope: !8806)
!8808 = !DILocation(line: 2974, column: 11, scope: !8803)
!8809 = !DILocation(line: 2976, column: 9, scope: !8810)
!8810 = distinct !DILexicalBlock(scope: !8806, file: !3, line: 2975, column: 2)
!8811 = !DILocation(line: 2976, column: 7, scope: !8810)
!8812 = !DILocation(line: 2977, column: 27, scope: !8810)
!8813 = !DILocation(line: 2977, column: 8, scope: !8810)
!8814 = !DILocation(line: 2977, column: 6, scope: !8810)
!8815 = !DILocation(line: 2978, column: 29, scope: !8810)
!8816 = !DILocation(line: 2978, column: 4, scope: !8810)
!8817 = !DILocation(line: 2979, column: 2, scope: !8810)
!8818 = !DILocation(line: 2982, column: 9, scope: !8819)
!8819 = distinct !DILexicalBlock(scope: !8806, file: !3, line: 2981, column: 2)
!8820 = !DILocation(line: 2982, column: 7, scope: !8819)
!8821 = !DILocation(line: 2983, column: 34, scope: !8819)
!8822 = !DILocation(line: 2983, column: 41, scope: !8819)
!8823 = !DILocation(line: 2983, column: 13, scope: !8819)
!8824 = !DILocation(line: 2983, column: 11, scope: !8819)
!8825 = !DILocation(line: 2984, column: 27, scope: !8819)
!8826 = !DILocation(line: 2984, column: 34, scope: !8819)
!8827 = !DILocation(line: 2984, column: 8, scope: !8819)
!8828 = !DILocation(line: 2984, column: 6, scope: !8819)
!8829 = !DILocation(line: 2985, column: 26, scope: !8819)
!8830 = !DILocation(line: 2985, column: 10, scope: !8819)
!8831 = !DILocation(line: 2985, column: 8, scope: !8819)
!8832 = !DILocation(line: 2986, column: 25, scope: !8819)
!8833 = !DILocation(line: 2986, column: 30, scope: !8819)
!8834 = !DILocation(line: 2986, column: 10, scope: !8819)
!8835 = !DILocation(line: 2986, column: 8, scope: !8819)
!8836 = !DILocation(line: 2987, column: 25, scope: !8819)
!8837 = !DILocation(line: 2987, column: 28, scope: !8819)
!8838 = !DILocation(line: 2987, column: 4, scope: !8819)
!8839 = !DILocation(line: 2988, column: 29, scope: !8819)
!8840 = !DILocation(line: 2988, column: 4, scope: !8819)
!8841 = !DILocation(line: 2990, column: 9, scope: !8819)
!8842 = !DILocation(line: 2990, column: 7, scope: !8819)
!8843 = !DILocation(line: 2991, column: 27, scope: !8819)
!8844 = !DILocation(line: 2991, column: 34, scope: !8819)
!8845 = !DILocation(line: 2991, column: 8, scope: !8819)
!8846 = !DILocation(line: 2991, column: 6, scope: !8819)
!8847 = !DILocation(line: 2992, column: 29, scope: !8819)
!8848 = !DILocation(line: 2992, column: 4, scope: !8819)
!8849 = !DILocation(line: 2995, column: 7, scope: !8803)
!8850 = !DILocation(line: 2998, column: 3, scope: !8598)
!8851 = !DILocation(line: 3000, column: 10, scope: !8598)
!8852 = !DILocation(line: 3000, column: 3, scope: !8598)
!8853 = distinct !DISubprogram(name: "gimple_resx_region", scope: !591, file: !591, line: 3121, type: !3385, scopeLine: 3122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8854 = !DILocalVariable(name: "gs", arg: 1, scope: !8853, file: !591, line: 3121, type: !3387)
!8855 = !DILocation(line: 3121, column: 34, scope: !8853)
!8856 = !DILocation(line: 3124, column: 10, scope: !8853)
!8857 = !DILocation(line: 3124, column: 14, scope: !8853)
!8858 = !DILocation(line: 3124, column: 29, scope: !8853)
!8859 = !DILocation(line: 3124, column: 3, scope: !8853)
!8860 = distinct !DISubprogram(name: "gsi_last_bb", scope: !591, file: !591, line: 4450, type: !8861, scopeLine: 4451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8861 = !DISubroutineType(types: !8862)
!8862 = !{!4816, !2200}
!8863 = !DILocalVariable(name: "bb", arg: 1, scope: !8860, file: !591, line: 4450, type: !2200)
!8864 = !DILocation(line: 4450, column: 26, scope: !8860)
!8865 = !DILocalVariable(name: "i", scope: !8860, file: !591, line: 4452, type: !4816)
!8866 = !DILocation(line: 4452, column: 24, scope: !8860)
!8867 = !DILocalVariable(name: "seq", scope: !8860, file: !591, line: 4453, type: !1640)
!8868 = !DILocation(line: 4453, column: 14, scope: !8860)
!8869 = !DILocation(line: 4455, column: 17, scope: !8860)
!8870 = !DILocation(line: 4455, column: 9, scope: !8860)
!8871 = !DILocation(line: 4455, column: 7, scope: !8860)
!8872 = !DILocation(line: 4456, column: 28, scope: !8860)
!8873 = !DILocation(line: 4456, column: 11, scope: !8860)
!8874 = !DILocation(line: 4456, column: 5, scope: !8860)
!8875 = !DILocation(line: 4456, column: 9, scope: !8860)
!8876 = !DILocation(line: 4457, column: 11, scope: !8860)
!8877 = !DILocation(line: 4457, column: 5, scope: !8860)
!8878 = !DILocation(line: 4457, column: 9, scope: !8860)
!8879 = !DILocation(line: 4458, column: 10, scope: !8860)
!8880 = !DILocation(line: 4458, column: 5, scope: !8860)
!8881 = !DILocation(line: 4458, column: 8, scope: !8860)
!8882 = !DILocation(line: 4460, column: 3, scope: !8860)
!8883 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !369, file: !369, line: 150, type: !8884, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8884 = !DISubroutineType(types: !8885)
!8885 = !{!7, !8886}
!8886 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8887, size: 64)
!8887 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1623)
!8888 = !DILocalVariable(name: "vec_", arg: 1, scope: !8883, file: !369, line: 150, type: !8886)
!8889 = !DILocation(line: 150, column: 1, scope: !8883)
!8890 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !369, file: !369, line: 150, type: !8891, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8891 = !DISubroutineType(types: !8892)
!8892 = !{!1630, !8886, !7}
!8893 = !DILocalVariable(name: "vec_", arg: 1, scope: !8890, file: !369, line: 150, type: !8886)
!8894 = !DILocation(line: 150, column: 1, scope: !8890)
!8895 = !DILocalVariable(name: "ix_", arg: 2, scope: !8890, file: !369, line: 150, type: !7)
!8896 = !DILocation(line: 0, scope: !8890)
!8897 = distinct !DISubprogram(name: "gsi_start_bb", scope: !591, file: !591, line: 4418, type: !8861, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8898 = !DILocalVariable(name: "bb", arg: 1, scope: !8897, file: !591, line: 4418, type: !2200)
!8899 = !DILocation(line: 4418, column: 27, scope: !8897)
!8900 = !DILocalVariable(name: "i", scope: !8897, file: !591, line: 4420, type: !4816)
!8901 = !DILocation(line: 4420, column: 24, scope: !8897)
!8902 = !DILocalVariable(name: "seq", scope: !8897, file: !591, line: 4421, type: !1640)
!8903 = !DILocation(line: 4421, column: 14, scope: !8897)
!8904 = !DILocation(line: 4423, column: 17, scope: !8897)
!8905 = !DILocation(line: 4423, column: 9, scope: !8897)
!8906 = !DILocation(line: 4423, column: 7, scope: !8897)
!8907 = !DILocation(line: 4424, column: 29, scope: !8897)
!8908 = !DILocation(line: 4424, column: 11, scope: !8897)
!8909 = !DILocation(line: 4424, column: 5, scope: !8897)
!8910 = !DILocation(line: 4424, column: 9, scope: !8897)
!8911 = !DILocation(line: 4425, column: 11, scope: !8897)
!8912 = !DILocation(line: 4425, column: 5, scope: !8897)
!8913 = !DILocation(line: 4425, column: 9, scope: !8897)
!8914 = !DILocation(line: 4426, column: 10, scope: !8897)
!8915 = !DILocation(line: 4426, column: 5, scope: !8897)
!8916 = !DILocation(line: 4426, column: 8, scope: !8897)
!8917 = !DILocation(line: 4428, column: 3, scope: !8897)
!8918 = distinct !DISubprogram(name: "single_succ_edge", scope: !369, file: !369, line: 643, type: !8919, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8919 = !DISubroutineType(types: !8920)
!8920 = !{!1630, !8921}
!8921 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1590, line: 112, baseType: !8922)
!8922 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8923, size: 64)
!8923 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1615)
!8924 = !DILocalVariable(name: "bb", arg: 1, scope: !8918, file: !369, line: 643, type: !8921)
!8925 = !DILocation(line: 643, column: 37, scope: !8918)
!8926 = !DILocation(line: 645, column: 3, scope: !8918)
!8927 = !DILocation(line: 646, column: 10, scope: !8918)
!8928 = !DILocation(line: 646, column: 3, scope: !8918)
!8929 = distinct !DISubprogram(name: "make_ssa_name", scope: !8930, file: !8930, line: 1245, type: !8931, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8930 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!8931 = !DISubroutineType(types: !8932)
!8932 = !{!1777, !1777, !1589}
!8933 = !DILocalVariable(name: "var", arg: 1, scope: !8929, file: !8930, line: 1245, type: !1777)
!8934 = !DILocation(line: 1245, column: 21, scope: !8929)
!8935 = !DILocalVariable(name: "stmt", arg: 2, scope: !8929, file: !8930, line: 1245, type: !1589)
!8936 = !DILocation(line: 1245, column: 33, scope: !8929)
!8937 = !DILocation(line: 1247, column: 28, scope: !8929)
!8938 = !DILocation(line: 1247, column: 34, scope: !8929)
!8939 = !DILocation(line: 1247, column: 39, scope: !8929)
!8940 = !DILocation(line: 1247, column: 10, scope: !8929)
!8941 = !DILocation(line: 1247, column: 3, scope: !8929)
!8942 = distinct !DISubprogram(name: "gimple_call_set_lhs", scope: !591, file: !591, line: 1898, type: !5428, scopeLine: 1899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8943 = !DILocalVariable(name: "gs", arg: 1, scope: !8942, file: !591, line: 1898, type: !1589)
!8944 = !DILocation(line: 1898, column: 29, scope: !8942)
!8945 = !DILocalVariable(name: "lhs", arg: 2, scope: !8942, file: !591, line: 1898, type: !1777)
!8946 = !DILocation(line: 1898, column: 38, scope: !8942)
!8947 = !DILocation(line: 1901, column: 18, scope: !8942)
!8948 = !DILocation(line: 1901, column: 25, scope: !8942)
!8949 = !DILocation(line: 1901, column: 3, scope: !8942)
!8950 = !DILocation(line: 1902, column: 7, scope: !8951)
!8951 = distinct !DILexicalBlock(scope: !8942, file: !591, line: 1902, column: 7)
!8952 = !DILocation(line: 1902, column: 11, scope: !8951)
!8953 = !DILocation(line: 1902, column: 14, scope: !8951)
!8954 = !DILocation(line: 1902, column: 30, scope: !8951)
!8955 = !DILocation(line: 1902, column: 7, scope: !8942)
!8956 = !DILocation(line: 1903, column: 31, scope: !8951)
!8957 = !DILocation(line: 1903, column: 5, scope: !8951)
!8958 = !DILocation(line: 1903, column: 29, scope: !8951)
!8959 = !DILocation(line: 1904, column: 1, scope: !8942)
!8960 = distinct !DISubprogram(name: "bb_seq", scope: !591, file: !591, line: 237, type: !8961, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8961 = !DISubroutineType(types: !8962)
!8962 = !{!1640, !8921}
!8963 = !DILocalVariable(name: "bb", arg: 1, scope: !8960, file: !591, line: 237, type: !8921)
!8964 = !DILocation(line: 237, column: 27, scope: !8960)
!8965 = !DILocation(line: 239, column: 13, scope: !8960)
!8966 = !DILocation(line: 239, column: 17, scope: !8960)
!8967 = !DILocation(line: 239, column: 23, scope: !8960)
!8968 = !DILocation(line: 239, column: 33, scope: !8960)
!8969 = !DILocation(line: 239, column: 36, scope: !8960)
!8970 = !DILocation(line: 239, column: 40, scope: !8960)
!8971 = !DILocation(line: 239, column: 43, scope: !8960)
!8972 = !DILocation(line: 239, column: 10, scope: !8960)
!8973 = !DILocation(line: 239, column: 53, scope: !8960)
!8974 = !DILocation(line: 239, column: 57, scope: !8960)
!8975 = !DILocation(line: 239, column: 60, scope: !8960)
!8976 = !DILocation(line: 239, column: 68, scope: !8960)
!8977 = !DILocation(line: 239, column: 3, scope: !8960)
!8978 = distinct !DISubprogram(name: "single_succ_p", scope: !369, file: !369, line: 626, type: !8979, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8979 = !DISubroutineType(types: !8980)
!8980 = !{!1890, !8921}
!8981 = !DILocalVariable(name: "bb", arg: 1, scope: !8978, file: !369, line: 626, type: !8921)
!8982 = !DILocation(line: 626, column: 34, scope: !8978)
!8983 = !DILocation(line: 628, column: 10, scope: !8978)
!8984 = !DILocation(line: 628, column: 33, scope: !8978)
!8985 = !DILocation(line: 628, column: 3, scope: !8978)
!8986 = distinct !DISubprogram(name: "lower_eh_dispatch", scope: !3, file: !3, line: 3064, type: !8987, scopeLine: 3065, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!8987 = !DISubroutineType(types: !8988)
!8988 = !{!1890, !2200, !1589}
!8989 = !DILocalVariable(name: "src", arg: 1, scope: !8986, file: !3, line: 3064, type: !2200)
!8990 = !DILocation(line: 3064, column: 32, scope: !8986)
!8991 = !DILocalVariable(name: "stmt", arg: 2, scope: !8986, file: !3, line: 3064, type: !1589)
!8992 = !DILocation(line: 3064, column: 44, scope: !8986)
!8993 = !DILocalVariable(name: "gsi", scope: !8986, file: !3, line: 3066, type: !4816)
!8994 = !DILocation(line: 3066, column: 24, scope: !8986)
!8995 = !DILocalVariable(name: "region_nr", scope: !8986, file: !3, line: 3067, type: !1679)
!8996 = !DILocation(line: 3067, column: 7, scope: !8986)
!8997 = !DILocalVariable(name: "r", scope: !8986, file: !3, line: 3068, type: !2037)
!8998 = !DILocation(line: 3068, column: 13, scope: !8986)
!8999 = !DILocalVariable(name: "filter", scope: !8986, file: !3, line: 3069, type: !1777)
!9000 = !DILocation(line: 3069, column: 8, scope: !8986)
!9001 = !DILocalVariable(name: "fn", scope: !8986, file: !3, line: 3069, type: !1777)
!9002 = !DILocation(line: 3069, column: 16, scope: !8986)
!9003 = !DILocalVariable(name: "x", scope: !8986, file: !3, line: 3070, type: !1589)
!9004 = !DILocation(line: 3070, column: 10, scope: !8986)
!9005 = !DILocalVariable(name: "redirected", scope: !8986, file: !3, line: 3071, type: !1890)
!9006 = !DILocation(line: 3071, column: 8, scope: !8986)
!9007 = !DILocation(line: 3073, column: 42, scope: !8986)
!9008 = !DILocation(line: 3073, column: 15, scope: !8986)
!9009 = !DILocation(line: 3073, column: 13, scope: !8986)
!9010 = !DILocation(line: 3074, column: 34, scope: !8986)
!9011 = !DILocation(line: 3074, column: 7, scope: !8986)
!9012 = !DILocation(line: 3074, column: 5, scope: !8986)
!9013 = !DILocation(line: 3076, column: 22, scope: !8986)
!9014 = !DILocation(line: 3076, column: 9, scope: !8986)
!9015 = !DILocation(line: 3078, column: 11, scope: !8986)
!9016 = !DILocation(line: 3078, column: 14, scope: !8986)
!9017 = !DILocation(line: 3078, column: 3, scope: !8986)
!9018 = !DILocalVariable(name: "labels", scope: !9019, file: !3, line: 3082, type: !3002)
!9019 = distinct !DILexicalBlock(scope: !9020, file: !3, line: 3081, column: 7)
!9020 = distinct !DILexicalBlock(scope: !8986, file: !3, line: 3079, column: 5)
!9021 = !DILocation(line: 3082, column: 20, scope: !9019)
!9022 = !DILocalVariable(name: "default_label", scope: !9019, file: !3, line: 3083, type: !1777)
!9023 = !DILocation(line: 3083, column: 7, scope: !9019)
!9024 = !DILocalVariable(name: "c", scope: !9019, file: !3, line: 3084, type: !3327)
!9025 = !DILocation(line: 3084, column: 11, scope: !9019)
!9026 = !DILocalVariable(name: "ei", scope: !9019, file: !3, line: 3085, type: !3477)
!9027 = !DILocation(line: 3085, column: 16, scope: !9019)
!9028 = !DILocalVariable(name: "e", scope: !9019, file: !3, line: 3086, type: !1630)
!9029 = !DILocation(line: 3086, column: 7, scope: !9019)
!9030 = !DILocalVariable(name: "seen_values", scope: !9019, file: !3, line: 3087, type: !9031)
!9031 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9032, size: 64)
!9032 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_set_t", file: !142, line: 5199, flags: DIFlagFwdDecl)
!9033 = !DILocation(line: 3087, column: 24, scope: !9019)
!9034 = !DILocation(line: 3087, column: 38, scope: !9019)
!9035 = !DILocation(line: 3093, column: 11, scope: !9036)
!9036 = distinct !DILexicalBlock(scope: !9019, file: !3, line: 3093, column: 2)
!9037 = !DILocation(line: 3093, column: 14, scope: !9036)
!9038 = !DILocation(line: 3093, column: 16, scope: !9036)
!9039 = !DILocation(line: 3093, column: 23, scope: !9036)
!9040 = !DILocation(line: 3093, column: 9, scope: !9036)
!9041 = !DILocation(line: 3093, column: 7, scope: !9036)
!9042 = !DILocation(line: 3093, column: 36, scope: !9043)
!9043 = distinct !DILexicalBlock(scope: !9036, file: !3, line: 3093, column: 2)
!9044 = !DILocation(line: 3093, column: 2, scope: !9036)
!9045 = !DILocalVariable(name: "tp_node", scope: !9046, file: !3, line: 3095, type: !1777)
!9046 = distinct !DILexicalBlock(scope: !9043, file: !3, line: 3094, column: 4)
!9047 = !DILocation(line: 3095, column: 11, scope: !9046)
!9048 = !DILocalVariable(name: "flt_node", scope: !9046, file: !3, line: 3095, type: !1777)
!9049 = !DILocation(line: 3095, column: 20, scope: !9046)
!9050 = !DILocalVariable(name: "lab", scope: !9046, file: !3, line: 3095, type: !1777)
!9051 = !DILocation(line: 3095, column: 30, scope: !9046)
!9052 = !DILocation(line: 3095, column: 36, scope: !9046)
!9053 = !DILocation(line: 3095, column: 39, scope: !9046)
!9054 = !DILocalVariable(name: "have_label", scope: !9046, file: !3, line: 3096, type: !1890)
!9055 = !DILocation(line: 3096, column: 11, scope: !9046)
!9056 = !DILocation(line: 3098, column: 6, scope: !9046)
!9057 = !DILocation(line: 3098, column: 9, scope: !9046)
!9058 = !DILocation(line: 3098, column: 15, scope: !9046)
!9059 = !DILocation(line: 3099, column: 16, scope: !9046)
!9060 = !DILocation(line: 3099, column: 19, scope: !9046)
!9061 = !DILocation(line: 3099, column: 14, scope: !9046)
!9062 = !DILocation(line: 3100, column: 17, scope: !9046)
!9063 = !DILocation(line: 3100, column: 20, scope: !9046)
!9064 = !DILocation(line: 3100, column: 15, scope: !9046)
!9065 = !DILocation(line: 3102, column: 10, scope: !9066)
!9066 = distinct !DILexicalBlock(scope: !9046, file: !3, line: 3102, column: 10)
!9067 = !DILocation(line: 3102, column: 18, scope: !9066)
!9068 = !DILocation(line: 3102, column: 10, scope: !9046)
!9069 = !DILocation(line: 3104, column: 26, scope: !9070)
!9070 = distinct !DILexicalBlock(scope: !9066, file: !3, line: 3103, column: 8)
!9071 = !DILocation(line: 3104, column: 24, scope: !9070)
!9072 = !DILocation(line: 3105, column: 3, scope: !9070)
!9073 = !DILocation(line: 3107, column: 6, scope: !9046)
!9074 = !DILocation(line: 3114, column: 31, scope: !9075)
!9075 = distinct !DILexicalBlock(scope: !9076, file: !3, line: 3114, column: 7)
!9076 = distinct !DILexicalBlock(scope: !9046, file: !3, line: 3108, column: 8)
!9077 = !DILocation(line: 3114, column: 44, scope: !9075)
!9078 = !DILocation(line: 3114, column: 9, scope: !9075)
!9079 = !DILocation(line: 3114, column: 7, scope: !9076)
!9080 = !DILocalVariable(name: "t", scope: !9081, file: !3, line: 3116, type: !1777)
!9081 = distinct !DILexicalBlock(scope: !9075, file: !3, line: 3115, column: 5)
!9082 = !DILocation(line: 3116, column: 12, scope: !9081)
!9083 = !DILocation(line: 3116, column: 16, scope: !9081)
!9084 = !DILocation(line: 3118, column: 7, scope: !9081)
!9085 = !DILocation(line: 3119, column: 27, scope: !9081)
!9086 = !DILocation(line: 3119, column: 40, scope: !9081)
!9087 = !DILocation(line: 3119, column: 7, scope: !9081)
!9088 = !DILocation(line: 3120, column: 18, scope: !9081)
!9089 = !DILocation(line: 3121, column: 5, scope: !9081)
!9090 = !DILocation(line: 3123, column: 13, scope: !9076)
!9091 = !DILocation(line: 3123, column: 11, scope: !9076)
!9092 = !DILocation(line: 3124, column: 14, scope: !9076)
!9093 = !DILocation(line: 3124, column: 12, scope: !9076)
!9094 = !DILocation(line: 3125, column: 8, scope: !9076)
!9095 = !DILocation(line: 3126, column: 13, scope: !9046)
!9096 = distinct !{!9096, !9073, !9097}
!9097 = !DILocation(line: 3126, column: 20, scope: !9046)
!9098 = !DILocation(line: 3127, column: 12, scope: !9099)
!9099 = distinct !DILexicalBlock(scope: !9046, file: !3, line: 3127, column: 10)
!9100 = !DILocation(line: 3127, column: 10, scope: !9046)
!9101 = !DILocation(line: 3129, column: 34, scope: !9102)
!9102 = distinct !DILexicalBlock(scope: !9099, file: !3, line: 3128, column: 8)
!9103 = !DILocation(line: 3129, column: 39, scope: !9102)
!9104 = !DILocation(line: 3129, column: 23, scope: !9102)
!9105 = !DILocation(line: 3129, column: 10, scope: !9102)
!9106 = !DILocation(line: 3130, column: 21, scope: !9102)
!9107 = !DILocation(line: 3131, column: 8, scope: !9102)
!9108 = !DILocation(line: 3132, column: 4, scope: !9046)
!9109 = !DILocation(line: 3093, column: 44, scope: !9043)
!9110 = !DILocation(line: 3093, column: 47, scope: !9043)
!9111 = !DILocation(line: 3093, column: 42, scope: !9043)
!9112 = !DILocation(line: 3093, column: 2, scope: !9043)
!9113 = distinct !{!9113, !9044, !9114}
!9114 = !DILocation(line: 3132, column: 4, scope: !9036)
!9115 = !DILocation(line: 3135, column: 2, scope: !9116)
!9116 = distinct !DILexicalBlock(scope: !9019, file: !3, line: 3135, column: 2)
!9117 = !DILocation(line: 3135, column: 2, scope: !9118)
!9118 = distinct !DILexicalBlock(scope: !9116, file: !3, line: 3135, column: 2)
!9119 = !DILocation(line: 3137, column: 10, scope: !9120)
!9120 = distinct !DILexicalBlock(scope: !9121, file: !3, line: 3137, column: 10)
!9121 = distinct !DILexicalBlock(scope: !9118, file: !3, line: 3136, column: 4)
!9122 = !DILocation(line: 3137, column: 13, scope: !9120)
!9123 = !DILocation(line: 3137, column: 19, scope: !9120)
!9124 = !DILocation(line: 3137, column: 10, scope: !9121)
!9125 = !DILocation(line: 3140, column: 7, scope: !9126)
!9126 = distinct !DILexicalBlock(scope: !9127, file: !3, line: 3140, column: 7)
!9127 = distinct !DILexicalBlock(scope: !9120, file: !3, line: 3138, column: 8)
!9128 = !DILocation(line: 3140, column: 21, scope: !9126)
!9129 = !DILocation(line: 3140, column: 7, scope: !9127)
!9130 = !DILocation(line: 3141, column: 41, scope: !9126)
!9131 = !DILocation(line: 3141, column: 44, scope: !9126)
!9132 = !DILocation(line: 3141, column: 21, scope: !9126)
!9133 = !DILocation(line: 3141, column: 19, scope: !9126)
!9134 = !DILocation(line: 3141, column: 5, scope: !9126)
!9135 = !DILocation(line: 3142, column: 3, scope: !9127)
!9136 = !DILocation(line: 3142, column: 6, scope: !9127)
!9137 = !DILocation(line: 3142, column: 12, scope: !9127)
!9138 = !DILocation(line: 3143, column: 8, scope: !9127)
!9139 = !DILocation(line: 3144, column: 4, scope: !9121)
!9140 = distinct !{!9140, !9115, !9141}
!9141 = !DILocation(line: 3144, column: 4, scope: !9116)
!9142 = !DILocation(line: 3145, column: 2, scope: !9019)
!9143 = !DILocation(line: 3149, column: 6, scope: !9144)
!9144 = distinct !DILexicalBlock(scope: !9019, file: !3, line: 3149, column: 6)
!9145 = !DILocation(line: 3149, column: 13, scope: !9144)
!9146 = !DILocation(line: 3149, column: 6, scope: !9019)
!9147 = !DILocation(line: 3151, column: 28, scope: !9148)
!9148 = distinct !DILexicalBlock(scope: !9144, file: !3, line: 3150, column: 4)
!9149 = !DILocation(line: 3151, column: 10, scope: !9148)
!9150 = !DILocation(line: 3151, column: 8, scope: !9148)
!9151 = !DILocation(line: 3152, column: 6, scope: !9148)
!9152 = !DILocation(line: 3152, column: 9, scope: !9148)
!9153 = !DILocation(line: 3152, column: 15, scope: !9148)
!9154 = !DILocation(line: 3153, column: 4, scope: !9148)
!9155 = !DILocation(line: 3156, column: 11, scope: !9156)
!9156 = distinct !DILexicalBlock(scope: !9144, file: !3, line: 3155, column: 4)
!9157 = !DILocation(line: 3156, column: 9, scope: !9156)
!9158 = !DILocation(line: 3157, column: 29, scope: !9156)
!9159 = !DILocation(line: 3157, column: 57, scope: !9156)
!9160 = !DILocation(line: 3157, column: 36, scope: !9156)
!9161 = !DILocation(line: 3157, column: 10, scope: !9156)
!9162 = !DILocation(line: 3157, column: 8, scope: !9156)
!9163 = !DILocation(line: 3158, column: 31, scope: !9156)
!9164 = !DILocation(line: 3158, column: 15, scope: !9156)
!9165 = !DILocation(line: 3158, column: 13, scope: !9156)
!9166 = !DILocation(line: 3159, column: 30, scope: !9156)
!9167 = !DILocation(line: 3159, column: 38, scope: !9156)
!9168 = !DILocation(line: 3159, column: 15, scope: !9156)
!9169 = !DILocation(line: 3159, column: 13, scope: !9156)
!9170 = !DILocation(line: 3160, column: 27, scope: !9156)
!9171 = !DILocation(line: 3160, column: 30, scope: !9156)
!9172 = !DILocation(line: 3160, column: 6, scope: !9156)
!9173 = !DILocation(line: 3161, column: 31, scope: !9156)
!9174 = !DILocation(line: 3161, column: 6, scope: !9156)
!9175 = !DILocation(line: 3164, column: 22, scope: !9156)
!9176 = !DILocation(line: 3164, column: 20, scope: !9156)
!9177 = !DILocation(line: 3166, column: 24, scope: !9156)
!9178 = !DILocation(line: 3166, column: 6, scope: !9156)
!9179 = !DILocation(line: 3168, column: 35, scope: !9156)
!9180 = !DILocation(line: 3168, column: 43, scope: !9156)
!9181 = !DILocation(line: 3168, column: 58, scope: !9156)
!9182 = !DILocation(line: 3168, column: 10, scope: !9156)
!9183 = !DILocation(line: 3168, column: 8, scope: !9156)
!9184 = !DILocation(line: 3169, column: 31, scope: !9156)
!9185 = !DILocation(line: 3169, column: 6, scope: !9156)
!9186 = !DILocation(line: 3171, column: 6, scope: !9156)
!9187 = !DILocation(line: 3173, column: 23, scope: !9019)
!9188 = !DILocation(line: 3173, column: 2, scope: !9019)
!9189 = !DILocation(line: 3175, column: 7, scope: !9020)
!9190 = !DILocalVariable(name: "b_e", scope: !9191, file: !3, line: 3179, type: !1630)
!9191 = distinct !DILexicalBlock(scope: !9020, file: !3, line: 3178, column: 7)
!9192 = !DILocation(line: 3179, column: 7, scope: !9191)
!9193 = !DILocation(line: 3179, column: 13, scope: !9191)
!9194 = !DILocalVariable(name: "f_e", scope: !9191, file: !3, line: 3180, type: !1630)
!9195 = !DILocation(line: 3180, column: 7, scope: !9191)
!9196 = !DILocation(line: 3180, column: 13, scope: !9191)
!9197 = !DILocation(line: 3182, column: 7, scope: !9191)
!9198 = !DILocation(line: 3182, column: 5, scope: !9191)
!9199 = !DILocation(line: 3183, column: 25, scope: !9191)
!9200 = !DILocation(line: 3183, column: 53, scope: !9191)
!9201 = !DILocation(line: 3183, column: 32, scope: !9191)
!9202 = !DILocation(line: 3183, column: 6, scope: !9191)
!9203 = !DILocation(line: 3183, column: 4, scope: !9191)
!9204 = !DILocation(line: 3184, column: 27, scope: !9191)
!9205 = !DILocation(line: 3184, column: 11, scope: !9191)
!9206 = !DILocation(line: 3184, column: 9, scope: !9191)
!9207 = !DILocation(line: 3185, column: 26, scope: !9191)
!9208 = !DILocation(line: 3185, column: 34, scope: !9191)
!9209 = !DILocation(line: 3185, column: 11, scope: !9191)
!9210 = !DILocation(line: 3185, column: 9, scope: !9191)
!9211 = !DILocation(line: 3186, column: 23, scope: !9191)
!9212 = !DILocation(line: 3186, column: 26, scope: !9191)
!9213 = !DILocation(line: 3186, column: 2, scope: !9191)
!9214 = !DILocation(line: 3187, column: 27, scope: !9191)
!9215 = !DILocation(line: 3187, column: 2, scope: !9191)
!9216 = !DILocation(line: 3189, column: 2, scope: !9191)
!9217 = !DILocation(line: 3189, column: 5, scope: !9191)
!9218 = !DILocation(line: 3189, column: 7, scope: !9191)
!9219 = !DILocation(line: 3189, column: 15, scope: !9191)
!9220 = !DILocation(line: 3189, column: 21, scope: !9191)
!9221 = !DILocation(line: 3190, column: 34, scope: !9191)
!9222 = !DILocation(line: 3191, column: 26, scope: !9191)
!9223 = !DILocation(line: 3192, column: 12, scope: !9191)
!9224 = !DILocation(line: 3192, column: 15, scope: !9191)
!9225 = !DILocation(line: 3192, column: 17, scope: !9191)
!9226 = !DILocation(line: 3192, column: 25, scope: !9191)
!9227 = !DILocation(line: 3191, column: 11, scope: !9191)
!9228 = !DILocation(line: 3190, column: 6, scope: !9191)
!9229 = !DILocation(line: 3190, column: 4, scope: !9191)
!9230 = !DILocation(line: 3194, column: 27, scope: !9191)
!9231 = !DILocation(line: 3194, column: 2, scope: !9191)
!9232 = !DILocation(line: 3196, column: 15, scope: !9191)
!9233 = !DILocation(line: 3196, column: 20, scope: !9191)
!9234 = !DILocation(line: 3196, column: 26, scope: !9191)
!9235 = !DILocation(line: 3196, column: 2, scope: !9191)
!9236 = !DILocation(line: 3196, column: 7, scope: !9191)
!9237 = !DILocation(line: 3196, column: 13, scope: !9191)
!9238 = !DILocation(line: 3197, column: 23, scope: !9191)
!9239 = !DILocation(line: 3197, column: 28, scope: !9191)
!9240 = !DILocation(line: 3197, column: 34, scope: !9191)
!9241 = !DILocation(line: 3197, column: 52, scope: !9191)
!9242 = !DILocation(line: 3197, column: 9, scope: !9191)
!9243 = !DILocation(line: 3197, column: 14, scope: !9191)
!9244 = !DILocation(line: 3197, column: 20, scope: !9191)
!9245 = !DILocation(line: 3199, column: 7, scope: !9020)
!9246 = !DILocation(line: 3202, column: 7, scope: !9020)
!9247 = !DILocation(line: 3203, column: 5, scope: !9020)
!9248 = !DILocation(line: 3206, column: 3, scope: !8986)
!9249 = !DILocation(line: 3207, column: 10, scope: !8986)
!9250 = !DILocation(line: 3207, column: 3, scope: !8986)
!9251 = distinct !DISubprogram(name: "remove_unreachable_handlers", scope: !3, file: !3, line: 3263, type: !3099, scopeLine: 3264, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9252 = !DILocalVariable(name: "r_reachable", scope: !9251, file: !3, line: 3265, type: !9253)
!9253 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !9254, line: 45, baseType: !9255)
!9254 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!9255 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9256, size: 64)
!9256 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !9254, line: 39, size: 192, elements: !9257)
!9257 = !{!9258, !9259, !9260, !9261}
!9258 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !9256, file: !9254, line: 41, baseType: !3669, size: 64)
!9259 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !9256, file: !9254, line: 42, baseType: !7, size: 32, offset: 64)
!9260 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !9256, file: !9254, line: 43, baseType: !7, size: 32, offset: 96)
!9261 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !9256, file: !9254, line: 44, baseType: !9262, size: 64, offset: 128)
!9262 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1729, size: 64, elements: !1694)
!9263 = !DILocation(line: 3265, column: 11, scope: !9251)
!9264 = !DILocalVariable(name: "lp_reachable", scope: !9251, file: !3, line: 3265, type: !9253)
!9265 = !DILocation(line: 3265, column: 24, scope: !9251)
!9266 = !DILocalVariable(name: "region", scope: !9251, file: !3, line: 3266, type: !2037)
!9267 = !DILocation(line: 3266, column: 13, scope: !9251)
!9268 = !DILocalVariable(name: "lp", scope: !9251, file: !3, line: 3267, type: !2111)
!9269 = !DILocation(line: 3267, column: 18, scope: !9251)
!9270 = !DILocalVariable(name: "bb", scope: !9251, file: !3, line: 3268, type: !2200)
!9271 = !DILocation(line: 3268, column: 15, scope: !9251)
!9272 = !DILocalVariable(name: "lp_nr", scope: !9251, file: !3, line: 3269, type: !1679)
!9273 = !DILocation(line: 3269, column: 7, scope: !9251)
!9274 = !DILocalVariable(name: "r_nr", scope: !9251, file: !3, line: 3269, type: !1679)
!9275 = !DILocation(line: 3269, column: 14, scope: !9251)
!9276 = !DILocation(line: 3271, column: 32, scope: !9251)
!9277 = !DILocation(line: 3271, column: 17, scope: !9251)
!9278 = !DILocation(line: 3271, column: 15, scope: !9251)
!9279 = !DILocation(line: 3273, column: 22, scope: !9251)
!9280 = !DILocation(line: 3273, column: 7, scope: !9251)
!9281 = !DILocation(line: 3273, column: 5, scope: !9251)
!9282 = !DILocation(line: 3274, column: 17, scope: !9251)
!9283 = !DILocation(line: 3274, column: 3, scope: !9251)
!9284 = !DILocation(line: 3275, column: 17, scope: !9251)
!9285 = !DILocation(line: 3275, column: 3, scope: !9251)
!9286 = !DILocation(line: 3277, column: 3, scope: !9287)
!9287 = distinct !DILexicalBlock(scope: !9251, file: !3, line: 3277, column: 3)
!9288 = !DILocation(line: 3277, column: 3, scope: !9289)
!9289 = distinct !DILexicalBlock(scope: !9287, file: !3, line: 3277, column: 3)
!9290 = !DILocalVariable(name: "gsi", scope: !9291, file: !3, line: 3279, type: !4816)
!9291 = distinct !DILexicalBlock(scope: !9289, file: !3, line: 3278, column: 5)
!9292 = !DILocation(line: 3279, column: 28, scope: !9291)
!9293 = !DILocation(line: 3279, column: 48, scope: !9291)
!9294 = !DILocation(line: 3279, column: 34, scope: !9291)
!9295 = !DILocation(line: 3281, column: 32, scope: !9296)
!9296 = distinct !DILexicalBlock(scope: !9291, file: !3, line: 3281, column: 7)
!9297 = !DILocation(line: 3281, column: 18, scope: !9296)
!9298 = !DILocation(line: 3281, column: 12, scope: !9296)
!9299 = !DILocation(line: 3281, column: 38, scope: !9300)
!9300 = distinct !DILexicalBlock(scope: !9296, file: !3, line: 3281, column: 7)
!9301 = !DILocation(line: 3281, column: 37, scope: !9300)
!9302 = !DILocation(line: 3281, column: 7, scope: !9296)
!9303 = !DILocalVariable(name: "stmt", scope: !9304, file: !3, line: 3283, type: !1589)
!9304 = distinct !DILexicalBlock(scope: !9300, file: !3, line: 3282, column: 2)
!9305 = !DILocation(line: 3283, column: 11, scope: !9304)
!9306 = !DILocation(line: 3283, column: 18, scope: !9304)
!9307 = !DILocation(line: 3284, column: 31, scope: !9304)
!9308 = !DILocation(line: 3284, column: 12, scope: !9304)
!9309 = !DILocation(line: 3284, column: 10, scope: !9304)
!9310 = !DILocation(line: 3288, column: 8, scope: !9311)
!9311 = distinct !DILexicalBlock(scope: !9304, file: !3, line: 3288, column: 8)
!9312 = !DILocation(line: 3288, column: 14, scope: !9311)
!9313 = !DILocation(line: 3288, column: 8, scope: !9304)
!9314 = !DILocation(line: 3289, column: 15, scope: !9311)
!9315 = !DILocation(line: 3289, column: 29, scope: !9311)
!9316 = !DILocation(line: 3289, column: 28, scope: !9311)
!9317 = !DILocation(line: 3289, column: 6, scope: !9311)
!9318 = !DILocation(line: 3292, column: 13, scope: !9319)
!9319 = distinct !DILexicalBlock(scope: !9311, file: !3, line: 3292, column: 13)
!9320 = !DILocation(line: 3292, column: 19, scope: !9319)
!9321 = !DILocation(line: 3292, column: 13, scope: !9311)
!9322 = !DILocation(line: 3294, column: 8, scope: !9323)
!9323 = distinct !DILexicalBlock(scope: !9319, file: !3, line: 3293, column: 6)
!9324 = !DILocation(line: 3295, column: 47, scope: !9323)
!9325 = !DILocation(line: 3295, column: 17, scope: !9323)
!9326 = !DILocation(line: 3295, column: 15, scope: !9323)
!9327 = !DILocation(line: 3296, column: 17, scope: !9323)
!9328 = !DILocation(line: 3296, column: 30, scope: !9323)
!9329 = !DILocation(line: 3296, column: 38, scope: !9323)
!9330 = !DILocation(line: 3296, column: 8, scope: !9323)
!9331 = !DILocation(line: 3297, column: 17, scope: !9323)
!9332 = !DILocation(line: 3297, column: 31, scope: !9323)
!9333 = !DILocation(line: 3297, column: 8, scope: !9323)
!9334 = !DILocation(line: 3298, column: 6, scope: !9323)
!9335 = !DILocation(line: 3299, column: 2, scope: !9304)
!9336 = !DILocation(line: 3281, column: 55, scope: !9300)
!9337 = !DILocation(line: 3281, column: 7, scope: !9300)
!9338 = distinct !{!9338, !9302, !9339}
!9339 = !DILocation(line: 3299, column: 2, scope: !9296)
!9340 = !DILocation(line: 3300, column: 5, scope: !9291)
!9341 = distinct !{!9341, !9286, !9342}
!9342 = !DILocation(line: 3300, column: 5, scope: !9287)
!9343 = !DILocation(line: 3302, column: 7, scope: !9344)
!9344 = distinct !DILexicalBlock(scope: !9251, file: !3, line: 3302, column: 7)
!9345 = !DILocation(line: 3302, column: 7, scope: !9251)
!9346 = !DILocation(line: 3304, column: 16, scope: !9347)
!9347 = distinct !DILexicalBlock(scope: !9344, file: !3, line: 3303, column: 5)
!9348 = !DILocation(line: 3304, column: 7, scope: !9347)
!9349 = !DILocation(line: 3305, column: 21, scope: !9347)
!9350 = !DILocation(line: 3305, column: 32, scope: !9347)
!9351 = !DILocation(line: 3305, column: 7, scope: !9347)
!9352 = !DILocation(line: 3306, column: 16, scope: !9347)
!9353 = !DILocation(line: 3306, column: 7, scope: !9347)
!9354 = !DILocation(line: 3307, column: 26, scope: !9347)
!9355 = !DILocation(line: 3307, column: 37, scope: !9347)
!9356 = !DILocation(line: 3307, column: 7, scope: !9347)
!9357 = !DILocation(line: 3308, column: 16, scope: !9347)
!9358 = !DILocation(line: 3308, column: 7, scope: !9347)
!9359 = !DILocation(line: 3309, column: 26, scope: !9347)
!9360 = !DILocation(line: 3309, column: 37, scope: !9347)
!9361 = !DILocation(line: 3309, column: 7, scope: !9347)
!9362 = !DILocation(line: 3310, column: 5, scope: !9347)
!9363 = !DILocation(line: 3312, column: 13, scope: !9364)
!9364 = distinct !DILexicalBlock(scope: !9251, file: !3, line: 3312, column: 3)
!9365 = !DILocation(line: 3312, column: 8, scope: !9364)
!9366 = !DILocation(line: 3313, column: 8, scope: !9367)
!9367 = distinct !DILexicalBlock(scope: !9364, file: !3, line: 3312, column: 3)
!9368 = !DILocation(line: 3312, column: 3, scope: !9364)
!9369 = !DILocation(line: 3314, column: 9, scope: !9370)
!9370 = distinct !DILexicalBlock(scope: !9367, file: !3, line: 3314, column: 9)
!9371 = !DILocation(line: 3314, column: 16, scope: !9370)
!9372 = !DILocation(line: 3314, column: 20, scope: !9370)
!9373 = !DILocation(line: 3314, column: 9, scope: !9367)
!9374 = !DILocation(line: 3316, column: 6, scope: !9375)
!9375 = distinct !DILexicalBlock(scope: !9376, file: !3, line: 3316, column: 6)
!9376 = distinct !DILexicalBlock(scope: !9370, file: !3, line: 3315, column: 7)
!9377 = !DILocation(line: 3316, column: 6, scope: !9376)
!9378 = !DILocation(line: 3317, column: 13, scope: !9375)
!9379 = !DILocation(line: 3317, column: 60, scope: !9375)
!9380 = !DILocation(line: 3317, column: 4, scope: !9375)
!9381 = !DILocation(line: 3318, column: 21, scope: !9376)
!9382 = !DILocation(line: 3318, column: 2, scope: !9376)
!9383 = !DILocation(line: 3319, column: 7, scope: !9376)
!9384 = !DILocation(line: 3313, column: 71, scope: !9367)
!9385 = !DILocation(line: 3312, column: 3, scope: !9367)
!9386 = distinct !{!9386, !9368, !9387}
!9387 = !DILocation(line: 3319, column: 7, scope: !9364)
!9388 = !DILocation(line: 3321, column: 14, scope: !9389)
!9389 = distinct !DILexicalBlock(scope: !9251, file: !3, line: 3321, column: 3)
!9390 = !DILocation(line: 3321, column: 8, scope: !9389)
!9391 = !DILocation(line: 3322, column: 8, scope: !9392)
!9392 = distinct !DILexicalBlock(scope: !9389, file: !3, line: 3321, column: 3)
!9393 = !DILocation(line: 3321, column: 3, scope: !9389)
!9394 = !DILocation(line: 3323, column: 9, scope: !9395)
!9395 = distinct !DILexicalBlock(scope: !9392, file: !3, line: 3323, column: 9)
!9396 = !DILocation(line: 3323, column: 12, scope: !9395)
!9397 = !DILocation(line: 3323, column: 16, scope: !9395)
!9398 = !DILocation(line: 3323, column: 9, scope: !9392)
!9399 = !DILocation(line: 3325, column: 6, scope: !9400)
!9400 = distinct !DILexicalBlock(scope: !9401, file: !3, line: 3325, column: 6)
!9401 = distinct !DILexicalBlock(scope: !9395, file: !3, line: 3324, column: 7)
!9402 = !DILocation(line: 3325, column: 6, scope: !9401)
!9403 = !DILocation(line: 3326, column: 13, scope: !9400)
!9404 = !DILocation(line: 3326, column: 65, scope: !9400)
!9405 = !DILocation(line: 3326, column: 4, scope: !9400)
!9406 = !DILocation(line: 3327, column: 25, scope: !9401)
!9407 = !DILocation(line: 3327, column: 2, scope: !9401)
!9408 = !DILocation(line: 3328, column: 7, scope: !9401)
!9409 = !DILocation(line: 3322, column: 69, scope: !9392)
!9410 = !DILocation(line: 3321, column: 3, scope: !9392)
!9411 = distinct !{!9411, !9393, !9412}
!9412 = !DILocation(line: 3328, column: 7, scope: !9389)
!9413 = !DILocation(line: 3330, column: 7, scope: !9414)
!9414 = distinct !DILexicalBlock(scope: !9251, file: !3, line: 3330, column: 7)
!9415 = !DILocation(line: 3330, column: 7, scope: !9251)
!9416 = !DILocation(line: 3332, column: 16, scope: !9417)
!9417 = distinct !DILexicalBlock(scope: !9414, file: !3, line: 3331, column: 5)
!9418 = !DILocation(line: 3332, column: 7, scope: !9417)
!9419 = !DILocation(line: 3333, column: 21, scope: !9417)
!9420 = !DILocation(line: 3333, column: 32, scope: !9417)
!9421 = !DILocation(line: 3333, column: 7, scope: !9417)
!9422 = !DILocation(line: 3334, column: 16, scope: !9417)
!9423 = !DILocation(line: 3334, column: 7, scope: !9417)
!9424 = !DILocation(line: 3335, column: 5, scope: !9417)
!9425 = !DILocation(line: 3337, column: 3, scope: !9251)
!9426 = !DILocation(line: 3338, column: 3, scope: !9251)
!9427 = !DILocation(line: 3343, column: 1, scope: !9251)
!9428 = distinct !DISubprogram(name: "unsplit_all_eh", scope: !3, file: !3, line: 3472, type: !3063, scopeLine: 3473, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9429 = !DILocalVariable(name: "changed", scope: !9428, file: !3, line: 3474, type: !1890)
!9430 = !DILocation(line: 3474, column: 8, scope: !9428)
!9431 = !DILocalVariable(name: "lp", scope: !9428, file: !3, line: 3475, type: !2111)
!9432 = !DILocation(line: 3475, column: 18, scope: !9428)
!9433 = !DILocalVariable(name: "i", scope: !9428, file: !3, line: 3476, type: !1679)
!9434 = !DILocation(line: 3476, column: 7, scope: !9428)
!9435 = !DILocation(line: 3478, column: 10, scope: !9436)
!9436 = distinct !DILexicalBlock(scope: !9428, file: !3, line: 3478, column: 3)
!9437 = !DILocation(line: 3478, column: 8, scope: !9436)
!9438 = !DILocation(line: 3478, column: 15, scope: !9439)
!9439 = distinct !DILexicalBlock(scope: !9436, file: !3, line: 3478, column: 3)
!9440 = !DILocation(line: 3478, column: 3, scope: !9436)
!9441 = !DILocation(line: 3479, column: 9, scope: !9442)
!9442 = distinct !DILexicalBlock(scope: !9439, file: !3, line: 3479, column: 9)
!9443 = !DILocation(line: 3479, column: 9, scope: !9439)
!9444 = !DILocation(line: 3480, column: 30, scope: !9442)
!9445 = !DILocation(line: 3480, column: 18, scope: !9442)
!9446 = !DILocation(line: 3480, column: 15, scope: !9442)
!9447 = !DILocation(line: 3480, column: 7, scope: !9442)
!9448 = !DILocation(line: 3478, column: 72, scope: !9439)
!9449 = !DILocation(line: 3478, column: 3, scope: !9439)
!9450 = distinct !{!9450, !9440, !9451}
!9451 = !DILocation(line: 3480, column: 32, scope: !9436)
!9452 = !DILocation(line: 3482, column: 10, scope: !9428)
!9453 = !DILocation(line: 3482, column: 3, scope: !9428)
!9454 = distinct !DISubprogram(name: "cleanup_all_empty_eh", scope: !3, file: !3, line: 3817, type: !3063, scopeLine: 3818, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9455 = !DILocalVariable(name: "changed", scope: !9454, file: !3, line: 3819, type: !1890)
!9456 = !DILocation(line: 3819, column: 8, scope: !9454)
!9457 = !DILocalVariable(name: "lp", scope: !9454, file: !3, line: 3820, type: !2111)
!9458 = !DILocation(line: 3820, column: 18, scope: !9454)
!9459 = !DILocalVariable(name: "i", scope: !9454, file: !3, line: 3821, type: !1679)
!9460 = !DILocation(line: 3821, column: 7, scope: !9454)
!9461 = !DILocation(line: 3823, column: 10, scope: !9462)
!9462 = distinct !DILexicalBlock(scope: !9454, file: !3, line: 3823, column: 3)
!9463 = !DILocation(line: 3823, column: 8, scope: !9462)
!9464 = !DILocation(line: 3823, column: 15, scope: !9465)
!9465 = distinct !DILexicalBlock(scope: !9462, file: !3, line: 3823, column: 3)
!9466 = !DILocation(line: 3823, column: 3, scope: !9462)
!9467 = !DILocation(line: 3824, column: 9, scope: !9468)
!9468 = distinct !DILexicalBlock(scope: !9465, file: !3, line: 3824, column: 9)
!9469 = !DILocation(line: 3824, column: 9, scope: !9465)
!9470 = !DILocation(line: 3825, column: 36, scope: !9468)
!9471 = !DILocation(line: 3825, column: 18, scope: !9468)
!9472 = !DILocation(line: 3825, column: 15, scope: !9468)
!9473 = !DILocation(line: 3825, column: 7, scope: !9468)
!9474 = !DILocation(line: 3823, column: 72, scope: !9465)
!9475 = !DILocation(line: 3823, column: 3, scope: !9465)
!9476 = distinct !{!9476, !9466, !9477}
!9477 = !DILocation(line: 3825, column: 38, scope: !9462)
!9478 = !DILocation(line: 3827, column: 10, scope: !9454)
!9479 = !DILocation(line: 3827, column: 3, scope: !9454)
!9480 = distinct !DISubprogram(name: "remove_unreachable_handlers_no_lp", scope: !3, file: !3, line: 3350, type: !3099, scopeLine: 3351, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9481 = !DILocalVariable(name: "r", scope: !9480, file: !3, line: 3352, type: !2037)
!9482 = !DILocation(line: 3352, column: 13, scope: !9480)
!9483 = !DILocalVariable(name: "i", scope: !9480, file: !3, line: 3353, type: !1679)
!9484 = !DILocation(line: 3353, column: 7, scope: !9480)
!9485 = !DILocation(line: 3355, column: 10, scope: !9486)
!9486 = distinct !DILexicalBlock(scope: !9480, file: !3, line: 3355, column: 3)
!9487 = !DILocation(line: 3355, column: 8, scope: !9486)
!9488 = !DILocation(line: 3355, column: 15, scope: !9489)
!9489 = distinct !DILexicalBlock(scope: !9486, file: !3, line: 3355, column: 3)
!9490 = !DILocation(line: 3355, column: 3, scope: !9486)
!9491 = !DILocation(line: 3356, column: 9, scope: !9492)
!9492 = distinct !DILexicalBlock(scope: !9489, file: !3, line: 3356, column: 9)
!9493 = !DILocation(line: 3356, column: 11, scope: !9492)
!9494 = !DILocation(line: 3356, column: 14, scope: !9492)
!9495 = !DILocation(line: 3356, column: 17, scope: !9492)
!9496 = !DILocation(line: 3356, column: 30, scope: !9492)
!9497 = !DILocation(line: 3356, column: 38, scope: !9492)
!9498 = !DILocation(line: 3356, column: 41, scope: !9492)
!9499 = !DILocation(line: 3356, column: 44, scope: !9492)
!9500 = !DILocation(line: 3356, column: 49, scope: !9492)
!9501 = !DILocation(line: 3356, column: 9, scope: !9489)
!9502 = !DILocation(line: 3358, column: 6, scope: !9503)
!9503 = distinct !DILexicalBlock(scope: !9504, file: !3, line: 3358, column: 6)
!9504 = distinct !DILexicalBlock(scope: !9492, file: !3, line: 3357, column: 7)
!9505 = !DILocation(line: 3358, column: 6, scope: !9504)
!9506 = !DILocation(line: 3359, column: 13, scope: !9503)
!9507 = !DILocation(line: 3359, column: 60, scope: !9503)
!9508 = !DILocation(line: 3359, column: 4, scope: !9503)
!9509 = !DILocation(line: 3360, column: 21, scope: !9504)
!9510 = !DILocation(line: 3360, column: 2, scope: !9504)
!9511 = !DILocation(line: 3361, column: 7, scope: !9504)
!9512 = !DILocation(line: 3356, column: 52, scope: !9492)
!9513 = !DILocation(line: 3355, column: 70, scope: !9489)
!9514 = !DILocation(line: 3355, column: 3, scope: !9489)
!9515 = distinct !{!9515, !9490, !9516}
!9516 = !DILocation(line: 3361, column: 7, scope: !9486)
!9517 = !DILocation(line: 3362, column: 1, scope: !9480)
!9518 = distinct !DISubprogram(name: "VEC_eh_region_base_length", scope: !6, file: !6, line: 184, type: !9519, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9519 = !DISubroutineType(types: !9520)
!9520 = !{!7, !4325}
!9521 = !DILocalVariable(name: "vec_", arg: 1, scope: !9518, file: !6, line: 184, type: !4325)
!9522 = !DILocation(line: 184, column: 1, scope: !9518)
!9523 = distinct !DISubprogram(name: "VEC_eh_landing_pad_base_length", scope: !6, file: !6, line: 188, type: !9524, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9524 = !DISubroutineType(types: !9525)
!9525 = !{!7, !4316}
!9526 = !DILocalVariable(name: "vec_", arg: 1, scope: !9523, file: !6, line: 188, type: !4316)
!9527 = !DILocation(line: 188, column: 1, scope: !9523)
!9528 = distinct !DISubprogram(name: "SET_BIT", scope: !9254, file: !9254, line: 63, type: !9529, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9529 = !DISubroutineType(types: !9530)
!9530 = !{null, !9253, !7}
!9531 = !DILocalVariable(name: "map", arg: 1, scope: !9528, file: !9254, line: 63, type: !9253)
!9532 = !DILocation(line: 63, column: 18, scope: !9528)
!9533 = !DILocalVariable(name: "bitno", arg: 2, scope: !9528, file: !9254, line: 63, type: !7)
!9534 = !DILocation(line: 63, column: 36, scope: !9528)
!9535 = !DILocation(line: 65, column: 7, scope: !9536)
!9536 = distinct !DILexicalBlock(scope: !9528, file: !9254, line: 65, column: 7)
!9537 = !DILocation(line: 65, column: 12, scope: !9536)
!9538 = !DILocation(line: 65, column: 7, scope: !9528)
!9539 = !DILocalVariable(name: "oldbit", scope: !9540, file: !9254, line: 67, type: !1890)
!9540 = distinct !DILexicalBlock(scope: !9536, file: !9254, line: 66, column: 5)
!9541 = !DILocation(line: 67, column: 12, scope: !9540)
!9542 = !DILocation(line: 68, column: 16, scope: !9540)
!9543 = !DILocation(line: 68, column: 14, scope: !9540)
!9544 = !DILocation(line: 69, column: 12, scope: !9545)
!9545 = distinct !DILexicalBlock(scope: !9540, file: !9254, line: 69, column: 11)
!9546 = !DILocation(line: 69, column: 11, scope: !9540)
!9547 = !DILocation(line: 70, column: 2, scope: !9545)
!9548 = !DILocation(line: 70, column: 7, scope: !9545)
!9549 = !DILocation(line: 70, column: 16, scope: !9545)
!9550 = !DILocation(line: 70, column: 22, scope: !9545)
!9551 = !DILocation(line: 70, column: 41, scope: !9545)
!9552 = !DILocation(line: 71, column: 5, scope: !9540)
!9553 = !DILocation(line: 73, column: 33, scope: !9528)
!9554 = !DILocation(line: 73, column: 40, scope: !9528)
!9555 = !DILocation(line: 73, column: 29, scope: !9528)
!9556 = !DILocation(line: 72, column: 3, scope: !9528)
!9557 = !DILocation(line: 72, column: 8, scope: !9528)
!9558 = !DILocation(line: 72, column: 13, scope: !9528)
!9559 = !DILocation(line: 72, column: 19, scope: !9528)
!9560 = !DILocation(line: 73, column: 5, scope: !9528)
!9561 = !DILocation(line: 74, column: 1, scope: !9528)
!9562 = distinct !DISubprogram(name: "VEC_eh_region_base_iterate", scope: !6, file: !6, line: 184, type: !9563, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9563 = !DISubroutineType(types: !9564)
!9564 = !{!1679, !4325, !7, !9565}
!9565 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2037, size: 64)
!9566 = !DILocalVariable(name: "vec_", arg: 1, scope: !9562, file: !6, line: 184, type: !4325)
!9567 = !DILocation(line: 184, column: 1, scope: !9562)
!9568 = !DILocalVariable(name: "ix_", arg: 2, scope: !9562, file: !6, line: 184, type: !7)
!9569 = !DILocalVariable(name: "ptr", arg: 3, scope: !9562, file: !6, line: 184, type: !9565)
!9570 = !DILocation(line: 184, column: 1, scope: !9571)
!9571 = distinct !DILexicalBlock(scope: !9562, file: !6, line: 184, column: 1)
!9572 = !DILocation(line: 184, column: 1, scope: !9573)
!9573 = distinct !DILexicalBlock(scope: !9571, file: !6, line: 184, column: 1)
!9574 = !DILocation(line: 184, column: 1, scope: !9575)
!9575 = distinct !DILexicalBlock(scope: !9571, file: !6, line: 184, column: 1)
!9576 = distinct !DISubprogram(name: "VEC_eh_landing_pad_base_iterate", scope: !6, file: !6, line: 188, type: !9577, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9577 = !DISubroutineType(types: !9578)
!9578 = !{!1679, !4316, !7, !9579}
!9579 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2111, size: 64)
!9580 = !DILocalVariable(name: "vec_", arg: 1, scope: !9576, file: !6, line: 188, type: !4316)
!9581 = !DILocation(line: 188, column: 1, scope: !9576)
!9582 = !DILocalVariable(name: "ix_", arg: 2, scope: !9576, file: !6, line: 188, type: !7)
!9583 = !DILocalVariable(name: "ptr", arg: 3, scope: !9576, file: !6, line: 188, type: !9579)
!9584 = !DILocation(line: 188, column: 1, scope: !9585)
!9585 = distinct !DILexicalBlock(scope: !9576, file: !6, line: 188, column: 1)
!9586 = !DILocation(line: 188, column: 1, scope: !9587)
!9587 = distinct !DILexicalBlock(scope: !9585, file: !6, line: 188, column: 1)
!9588 = !DILocation(line: 188, column: 1, scope: !9589)
!9589 = distinct !DILexicalBlock(scope: !9585, file: !6, line: 188, column: 1)
!9590 = distinct !DISubprogram(name: "unsplit_eh", scope: !3, file: !3, line: 3380, type: !9591, scopeLine: 3381, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9591 = !DISubroutineType(types: !9592)
!9592 = !{!1890, !2111}
!9593 = !DILocalVariable(name: "lp", arg: 1, scope: !9590, file: !3, line: 3380, type: !2111)
!9594 = !DILocation(line: 3380, column: 28, scope: !9590)
!9595 = !DILocalVariable(name: "bb", scope: !9590, file: !3, line: 3382, type: !2200)
!9596 = !DILocation(line: 3382, column: 15, scope: !9590)
!9597 = !DILocation(line: 3382, column: 20, scope: !9590)
!9598 = !DILocalVariable(name: "gsi", scope: !9590, file: !3, line: 3383, type: !4816)
!9599 = !DILocation(line: 3383, column: 24, scope: !9590)
!9600 = !DILocalVariable(name: "e_in", scope: !9590, file: !3, line: 3384, type: !1630)
!9601 = !DILocation(line: 3384, column: 8, scope: !9590)
!9602 = !DILocalVariable(name: "e_out", scope: !9590, file: !3, line: 3384, type: !1630)
!9603 = !DILocation(line: 3384, column: 14, scope: !9590)
!9604 = !DILocation(line: 3387, column: 7, scope: !9605)
!9605 = distinct !DILexicalBlock(scope: !9590, file: !3, line: 3387, column: 7)
!9606 = !DILocation(line: 3387, column: 30, scope: !9605)
!9607 = !DILocation(line: 3387, column: 35, scope: !9605)
!9608 = !DILocation(line: 3387, column: 38, scope: !9605)
!9609 = !DILocation(line: 3387, column: 61, scope: !9605)
!9610 = !DILocation(line: 3387, column: 7, scope: !9590)
!9611 = !DILocation(line: 3388, column: 5, scope: !9605)
!9612 = !DILocation(line: 3389, column: 10, scope: !9590)
!9613 = !DILocation(line: 3389, column: 8, scope: !9590)
!9614 = !DILocation(line: 3390, column: 11, scope: !9590)
!9615 = !DILocation(line: 3390, column: 9, scope: !9590)
!9616 = !DILocation(line: 3393, column: 8, scope: !9617)
!9617 = distinct !DILexicalBlock(scope: !9590, file: !3, line: 3393, column: 7)
!9618 = !DILocation(line: 3393, column: 14, scope: !9617)
!9619 = !DILocation(line: 3393, column: 20, scope: !9617)
!9620 = !DILocation(line: 3393, column: 31, scope: !9617)
!9621 = !DILocation(line: 3393, column: 36, scope: !9617)
!9622 = !DILocation(line: 3393, column: 40, scope: !9617)
!9623 = !DILocation(line: 3393, column: 47, scope: !9617)
!9624 = !DILocation(line: 3393, column: 53, scope: !9617)
!9625 = !DILocation(line: 3393, column: 64, scope: !9617)
!9626 = !DILocation(line: 3393, column: 7, scope: !9590)
!9627 = !DILocation(line: 3394, column: 5, scope: !9617)
!9628 = !DILocation(line: 3397, column: 27, scope: !9590)
!9629 = !DILocation(line: 3397, column: 9, scope: !9590)
!9630 = !DILocation(line: 3398, column: 8, scope: !9631)
!9631 = distinct !DILexicalBlock(scope: !9590, file: !3, line: 3398, column: 7)
!9632 = !DILocation(line: 3398, column: 24, scope: !9631)
!9633 = !DILocation(line: 3398, column: 44, scope: !9631)
!9634 = !DILocation(line: 3398, column: 27, scope: !9631)
!9635 = !DILocation(line: 3398, column: 7, scope: !9590)
!9636 = !DILocation(line: 3399, column: 5, scope: !9631)
!9637 = !DILocation(line: 3400, column: 8, scope: !9638)
!9638 = distinct !DILexicalBlock(scope: !9590, file: !3, line: 3400, column: 7)
!9639 = !DILocation(line: 3400, column: 7, scope: !9590)
!9640 = !DILocation(line: 3401, column: 5, scope: !9638)
!9641 = !DILocation(line: 3405, column: 28, scope: !9642)
!9642 = distinct !DILexicalBlock(scope: !9590, file: !3, line: 3405, column: 3)
!9643 = !DILocation(line: 3405, column: 35, scope: !9642)
!9644 = !DILocation(line: 3405, column: 14, scope: !9642)
!9645 = !DILocation(line: 3405, column: 8, scope: !9642)
!9646 = !DILocation(line: 3405, column: 43, scope: !9647)
!9647 = distinct !DILexicalBlock(scope: !9642, file: !3, line: 3405, column: 3)
!9648 = !DILocation(line: 3405, column: 42, scope: !9647)
!9649 = !DILocation(line: 3405, column: 3, scope: !9642)
!9650 = !DILocalVariable(name: "stmt", scope: !9651, file: !3, line: 3407, type: !1589)
!9651 = distinct !DILexicalBlock(scope: !9647, file: !3, line: 3406, column: 5)
!9652 = !DILocation(line: 3407, column: 14, scope: !9651)
!9653 = !DILocation(line: 3407, column: 21, scope: !9651)
!9654 = !DILocalVariable(name: "lab", scope: !9651, file: !3, line: 3408, type: !1777)
!9655 = !DILocation(line: 3408, column: 12, scope: !9651)
!9656 = !DILocalVariable(name: "lp_nr", scope: !9651, file: !3, line: 3409, type: !1679)
!9657 = !DILocation(line: 3409, column: 11, scope: !9651)
!9658 = !DILocation(line: 3411, column: 24, scope: !9659)
!9659 = distinct !DILexicalBlock(scope: !9651, file: !3, line: 3411, column: 11)
!9660 = !DILocation(line: 3411, column: 11, scope: !9659)
!9661 = !DILocation(line: 3411, column: 30, scope: !9659)
!9662 = !DILocation(line: 3411, column: 11, scope: !9651)
!9663 = !DILocation(line: 3412, column: 2, scope: !9659)
!9664 = !DILocation(line: 3413, column: 33, scope: !9651)
!9665 = !DILocation(line: 3413, column: 13, scope: !9651)
!9666 = !DILocation(line: 3413, column: 11, scope: !9651)
!9667 = !DILocation(line: 3414, column: 15, scope: !9651)
!9668 = !DILocation(line: 3414, column: 13, scope: !9651)
!9669 = !DILocation(line: 3415, column: 11, scope: !9670)
!9670 = distinct !DILexicalBlock(scope: !9651, file: !3, line: 3415, column: 11)
!9671 = !DILocation(line: 3415, column: 17, scope: !9670)
!9672 = !DILocation(line: 3415, column: 50, scope: !9670)
!9673 = !DILocation(line: 3415, column: 20, scope: !9670)
!9674 = !DILocation(line: 3415, column: 60, scope: !9670)
!9675 = !DILocation(line: 3415, column: 64, scope: !9670)
!9676 = !DILocation(line: 3415, column: 57, scope: !9670)
!9677 = !DILocation(line: 3415, column: 11, scope: !9651)
!9678 = !DILocation(line: 3416, column: 2, scope: !9670)
!9679 = !DILocation(line: 3417, column: 5, scope: !9651)
!9680 = !DILocation(line: 3405, column: 60, scope: !9647)
!9681 = !DILocation(line: 3405, column: 3, scope: !9647)
!9682 = distinct !{!9682, !9649, !9683}
!9683 = !DILocation(line: 3417, column: 5, scope: !9642)
!9684 = !DILocation(line: 3422, column: 18, scope: !9685)
!9685 = distinct !DILexicalBlock(scope: !9590, file: !3, line: 3422, column: 7)
!9686 = !DILocation(line: 3422, column: 24, scope: !9685)
!9687 = !DILocation(line: 3422, column: 29, scope: !9685)
!9688 = !DILocation(line: 3422, column: 36, scope: !9685)
!9689 = !DILocation(line: 3422, column: 7, scope: !9685)
!9690 = !DILocation(line: 3422, column: 7, scope: !9590)
!9691 = !DILocation(line: 3423, column: 5, scope: !9685)
!9692 = !DILocation(line: 3428, column: 39, scope: !9693)
!9693 = distinct !DILexicalBlock(scope: !9590, file: !3, line: 3428, column: 7)
!9694 = !DILocation(line: 3428, column: 28, scope: !9693)
!9695 = !DILocation(line: 3428, column: 8, scope: !9693)
!9696 = !DILocation(line: 3428, column: 7, scope: !9590)
!9697 = !DILocation(line: 3430, column: 34, scope: !9698)
!9698 = distinct !DILexicalBlock(scope: !9699, file: !3, line: 3430, column: 7)
!9699 = distinct !DILexicalBlock(scope: !9693, file: !3, line: 3429, column: 5)
!9700 = !DILocation(line: 3430, column: 18, scope: !9698)
!9701 = !DILocation(line: 3430, column: 12, scope: !9698)
!9702 = !DILocation(line: 3430, column: 40, scope: !9703)
!9703 = distinct !DILexicalBlock(scope: !9698, file: !3, line: 3430, column: 7)
!9704 = !DILocation(line: 3430, column: 39, scope: !9703)
!9705 = !DILocation(line: 3430, column: 7, scope: !9698)
!9706 = !DILocalVariable(name: "use_stmt", scope: !9707, file: !3, line: 3432, type: !1589)
!9707 = distinct !DILexicalBlock(scope: !9703, file: !3, line: 3431, column: 2)
!9708 = !DILocation(line: 3432, column: 11, scope: !9707)
!9709 = !DILocalVariable(name: "phi", scope: !9707, file: !3, line: 3432, type: !1589)
!9710 = !DILocation(line: 3432, column: 21, scope: !9707)
!9711 = !DILocation(line: 3432, column: 27, scope: !9707)
!9712 = !DILocalVariable(name: "lhs", scope: !9707, file: !3, line: 3433, type: !1777)
!9713 = !DILocation(line: 3433, column: 9, scope: !9707)
!9714 = !DILocation(line: 3433, column: 34, scope: !9707)
!9715 = !DILocation(line: 3433, column: 15, scope: !9707)
!9716 = !DILocalVariable(name: "rhs", scope: !9707, file: !3, line: 3434, type: !1777)
!9717 = !DILocation(line: 3434, column: 9, scope: !9707)
!9718 = !DILocation(line: 3434, column: 35, scope: !9707)
!9719 = !DILocation(line: 3434, column: 15, scope: !9707)
!9720 = !DILocalVariable(name: "use_p", scope: !9707, file: !3, line: 3435, type: !3048)
!9721 = !DILocation(line: 3435, column: 18, scope: !9707)
!9722 = !DILocalVariable(name: "iter", scope: !9707, file: !3, line: 3436, type: !9723)
!9723 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !1980, line: 249, baseType: !9724)
!9724 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !1980, line: 238, size: 448, elements: !9725)
!9725 = !{!9726, !9727, !9728, !9729}
!9726 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !9724, file: !1980, line: 241, baseType: !3049, size: 64)
!9727 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !9724, file: !1980, line: 243, baseType: !3049, size: 64, offset: 64)
!9728 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !9724, file: !1980, line: 245, baseType: !3050, size: 256, offset: 128)
!9729 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !9724, file: !1980, line: 248, baseType: !3049, size: 64, offset: 384)
!9730 = !DILocation(line: 3436, column: 21, scope: !9707)
!9731 = !DILocation(line: 3438, column: 4, scope: !9732)
!9732 = distinct !DILexicalBlock(scope: !9707, file: !3, line: 3438, column: 4)
!9733 = !DILocation(line: 3438, column: 4, scope: !9734)
!9734 = distinct !DILexicalBlock(scope: !9732, file: !3, line: 3438, column: 4)
!9735 = !DILocation(line: 3440, column: 8, scope: !9736)
!9736 = distinct !DILexicalBlock(scope: !9737, file: !3, line: 3440, column: 8)
!9737 = distinct !DILexicalBlock(scope: !9734, file: !3, line: 3439, column: 6)
!9738 = !DILocation(line: 3440, column: 8, scope: !9739)
!9739 = distinct !DILexicalBlock(scope: !9736, file: !3, line: 3440, column: 8)
!9740 = !DILocation(line: 3441, column: 3, scope: !9739)
!9741 = distinct !{!9741, !9735, !9742}
!9742 = !DILocation(line: 3441, column: 3, scope: !9736)
!9743 = !DILocation(line: 3442, column: 6, scope: !9737)
!9744 = distinct !{!9744, !9731, !9745}
!9745 = !DILocation(line: 3442, column: 6, scope: !9732)
!9746 = !DILocation(line: 3444, column: 8, scope: !9747)
!9747 = distinct !DILexicalBlock(scope: !9707, file: !3, line: 3444, column: 8)
!9748 = !DILocation(line: 3444, column: 8, scope: !9707)
!9749 = !DILocation(line: 3445, column: 6, scope: !9747)
!9750 = !DILocation(line: 3445, column: 44, scope: !9747)
!9751 = !DILocation(line: 3447, column: 4, scope: !9707)
!9752 = !DILocation(line: 3430, column: 7, scope: !9703)
!9753 = distinct !{!9753, !9705, !9754}
!9754 = !DILocation(line: 3448, column: 2, scope: !9698)
!9755 = !DILocation(line: 3449, column: 5, scope: !9699)
!9756 = !DILocation(line: 3451, column: 7, scope: !9757)
!9757 = distinct !DILexicalBlock(scope: !9590, file: !3, line: 3451, column: 7)
!9758 = !DILocation(line: 3451, column: 17, scope: !9757)
!9759 = !DILocation(line: 3451, column: 21, scope: !9757)
!9760 = !DILocation(line: 3451, column: 32, scope: !9757)
!9761 = !DILocation(line: 3451, column: 7, scope: !9590)
!9762 = !DILocation(line: 3452, column: 14, scope: !9757)
!9763 = !DILocation(line: 3453, column: 7, scope: !9757)
!9764 = !DILocation(line: 3453, column: 11, scope: !9757)
!9765 = !DILocation(line: 3453, column: 18, scope: !9757)
!9766 = !DILocation(line: 3453, column: 25, scope: !9757)
!9767 = !DILocation(line: 3453, column: 31, scope: !9757)
!9768 = !DILocation(line: 3452, column: 5, scope: !9757)
!9769 = !DILocation(line: 3459, column: 23, scope: !9590)
!9770 = !DILocation(line: 3459, column: 29, scope: !9590)
!9771 = !DILocation(line: 3459, column: 36, scope: !9590)
!9772 = !DILocation(line: 3459, column: 3, scope: !9590)
!9773 = !DILocation(line: 3460, column: 23, scope: !9590)
!9774 = !DILocation(line: 3460, column: 30, scope: !9590)
!9775 = !DILocation(line: 3460, column: 36, scope: !9590)
!9776 = !DILocation(line: 3460, column: 3, scope: !9590)
!9777 = !DILocation(line: 3461, column: 18, scope: !9590)
!9778 = !DILocation(line: 3461, column: 24, scope: !9590)
!9779 = !DILocation(line: 3461, column: 3, scope: !9590)
!9780 = !DILocation(line: 3461, column: 10, scope: !9590)
!9781 = !DILocation(line: 3461, column: 16, scope: !9590)
!9782 = !DILocation(line: 3462, column: 24, scope: !9590)
!9783 = !DILocation(line: 3462, column: 30, scope: !9590)
!9784 = !DILocation(line: 3462, column: 3, scope: !9590)
!9785 = !DILocation(line: 3462, column: 10, scope: !9590)
!9786 = !DILocation(line: 3462, column: 22, scope: !9590)
!9787 = !DILocation(line: 3463, column: 18, scope: !9590)
!9788 = !DILocation(line: 3463, column: 24, scope: !9590)
!9789 = !DILocation(line: 3463, column: 3, scope: !9590)
!9790 = !DILocation(line: 3463, column: 10, scope: !9590)
!9791 = !DILocation(line: 3463, column: 16, scope: !9590)
!9792 = !DILocation(line: 3464, column: 16, scope: !9590)
!9793 = !DILocation(line: 3464, column: 3, scope: !9590)
!9794 = !DILocation(line: 3466, column: 3, scope: !9590)
!9795 = !DILocation(line: 3467, column: 1, scope: !9590)
!9796 = distinct !DISubprogram(name: "gsi_after_labels", scope: !591, file: !591, line: 4510, type: !8861, scopeLine: 4511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9797 = !DILocalVariable(name: "bb", arg: 1, scope: !9796, file: !591, line: 4510, type: !2200)
!9798 = !DILocation(line: 4510, column: 31, scope: !9796)
!9799 = !DILocalVariable(name: "gsi", scope: !9796, file: !591, line: 4512, type: !4816)
!9800 = !DILocation(line: 4512, column: 24, scope: !9796)
!9801 = !DILocation(line: 4512, column: 44, scope: !9796)
!9802 = !DILocation(line: 4512, column: 30, scope: !9796)
!9803 = !DILocation(line: 4514, column: 3, scope: !9796)
!9804 = !DILocation(line: 4514, column: 11, scope: !9796)
!9805 = !DILocation(line: 4514, column: 27, scope: !9796)
!9806 = !DILocation(line: 4514, column: 43, scope: !9796)
!9807 = !DILocation(line: 4514, column: 30, scope: !9796)
!9808 = !DILocation(line: 4514, column: 59, scope: !9796)
!9809 = !DILocation(line: 0, scope: !9796)
!9810 = !DILocation(line: 4515, column: 5, scope: !9796)
!9811 = distinct !{!9811, !9803, !9812}
!9812 = !DILocation(line: 4515, column: 19, scope: !9796)
!9813 = !DILocation(line: 4517, column: 3, scope: !9796)
!9814 = distinct !DISubprogram(name: "is_gimple_debug", scope: !591, file: !591, line: 3249, type: !4067, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9815 = !DILocalVariable(name: "gs", arg: 1, scope: !9814, file: !591, line: 3249, type: !3387)
!9816 = !DILocation(line: 3249, column: 31, scope: !9814)
!9817 = !DILocation(line: 3251, column: 23, scope: !9814)
!9818 = !DILocation(line: 3251, column: 10, scope: !9814)
!9819 = !DILocation(line: 3251, column: 27, scope: !9814)
!9820 = !DILocation(line: 3251, column: 3, scope: !9814)
!9821 = distinct !DISubprogram(name: "gsi_next_nondebug", scope: !591, file: !591, line: 4523, type: !4975, scopeLine: 4524, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9822 = !DILocalVariable(name: "i", arg: 1, scope: !9821, file: !591, line: 4523, type: !4977)
!9823 = !DILocation(line: 4523, column: 42, scope: !9821)
!9824 = !DILocation(line: 4525, column: 3, scope: !9821)
!9825 = !DILocation(line: 4527, column: 17, scope: !9826)
!9826 = distinct !DILexicalBlock(scope: !9821, file: !591, line: 4526, column: 5)
!9827 = !DILocation(line: 4527, column: 7, scope: !9826)
!9828 = !DILocation(line: 4528, column: 5, scope: !9826)
!9829 = !DILocation(line: 4529, column: 23, scope: !9821)
!9830 = !DILocation(line: 4529, column: 11, scope: !9821)
!9831 = !DILocation(line: 4529, column: 26, scope: !9821)
!9832 = !DILocation(line: 4529, column: 57, scope: !9821)
!9833 = !DILocation(line: 4529, column: 46, scope: !9821)
!9834 = !DILocation(line: 4529, column: 29, scope: !9821)
!9835 = !DILocation(line: 0, scope: !9821)
!9836 = distinct !{!9836, !9824, !9837}
!9837 = !DILocation(line: 4529, column: 60, scope: !9821)
!9838 = !DILocation(line: 4530, column: 1, scope: !9821)
!9839 = distinct !DISubprogram(name: "gimple_seq_empty_p", scope: !591, file: !591, line: 215, type: !9840, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9840 = !DISubroutineType(types: !9841)
!9841 = !{!1890, !4990}
!9842 = !DILocalVariable(name: "s", arg: 1, scope: !9839, file: !591, line: 215, type: !4990)
!9843 = !DILocation(line: 215, column: 38, scope: !9839)
!9844 = !DILocation(line: 217, column: 10, scope: !9839)
!9845 = !DILocation(line: 217, column: 12, scope: !9839)
!9846 = !DILocation(line: 217, column: 20, scope: !9839)
!9847 = !DILocation(line: 217, column: 23, scope: !9839)
!9848 = !DILocation(line: 217, column: 26, scope: !9839)
!9849 = !DILocation(line: 217, column: 32, scope: !9839)
!9850 = !DILocation(line: 217, column: 3, scope: !9839)
!9851 = distinct !DISubprogram(name: "phi_nodes", scope: !8930, file: !8930, line: 508, type: !8961, scopeLine: 509, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9852 = !DILocalVariable(name: "bb", arg: 1, scope: !9851, file: !8930, line: 508, type: !8921)
!9853 = !DILocation(line: 508, column: 30, scope: !9851)
!9854 = !DILocation(line: 510, column: 3, scope: !9851)
!9855 = !DILocation(line: 511, column: 8, scope: !9856)
!9856 = distinct !DILexicalBlock(scope: !9851, file: !8930, line: 511, column: 7)
!9857 = !DILocation(line: 511, column: 12, scope: !9856)
!9858 = !DILocation(line: 511, column: 15, scope: !9856)
!9859 = !DILocation(line: 511, column: 7, scope: !9851)
!9860 = !DILocation(line: 512, column: 5, scope: !9856)
!9861 = !DILocation(line: 513, column: 10, scope: !9851)
!9862 = !DILocation(line: 513, column: 14, scope: !9851)
!9863 = !DILocation(line: 513, column: 17, scope: !9851)
!9864 = !DILocation(line: 513, column: 25, scope: !9851)
!9865 = !DILocation(line: 513, column: 3, scope: !9851)
!9866 = !DILocation(line: 514, column: 1, scope: !9851)
!9867 = distinct !DISubprogram(name: "gimple_phi_result", scope: !591, file: !591, line: 3071, type: !5000, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9868 = !DILocalVariable(name: "gs", arg: 1, scope: !9867, file: !591, line: 3071, type: !3387)
!9869 = !DILocation(line: 3071, column: 33, scope: !9867)
!9870 = !DILocation(line: 3074, column: 10, scope: !9867)
!9871 = !DILocation(line: 3074, column: 14, scope: !9867)
!9872 = !DILocation(line: 3074, column: 25, scope: !9867)
!9873 = !DILocation(line: 3074, column: 3, scope: !9867)
!9874 = distinct !DISubprogram(name: "gimple_phi_arg_def", scope: !8930, file: !8930, line: 450, type: !9875, scopeLine: 451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9875 = !DISubroutineType(types: !9876)
!9876 = !{!1777, !1589, !2138}
!9877 = !DILocalVariable(name: "gs", arg: 1, scope: !9874, file: !8930, line: 450, type: !1589)
!9878 = !DILocation(line: 450, column: 28, scope: !9874)
!9879 = !DILocalVariable(name: "index", arg: 2, scope: !9874, file: !8930, line: 450, type: !2138)
!9880 = !DILocation(line: 450, column: 39, scope: !9874)
!9881 = !DILocalVariable(name: "pd", scope: !9874, file: !8930, line: 452, type: !9882)
!9882 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2892, size: 64)
!9883 = !DILocation(line: 452, column: 21, scope: !9874)
!9884 = !DILocation(line: 452, column: 42, scope: !9874)
!9885 = !DILocation(line: 452, column: 46, scope: !9874)
!9886 = !DILocation(line: 452, column: 26, scope: !9874)
!9887 = !DILocation(line: 453, column: 29, scope: !9874)
!9888 = !DILocation(line: 453, column: 33, scope: !9874)
!9889 = !DILocation(line: 453, column: 10, scope: !9874)
!9890 = !DILocation(line: 453, column: 3, scope: !9874)
!9891 = distinct !DISubprogram(name: "first_imm_use_stmt", scope: !8930, file: !8930, line: 1058, type: !9892, scopeLine: 1059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9892 = !DISubroutineType(types: !9893)
!9893 = !{!1589, !9894, !1777}
!9894 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9723, size: 64)
!9895 = !DILocalVariable(name: "imm", arg: 1, scope: !9891, file: !8930, line: 1058, type: !9894)
!9896 = !DILocation(line: 1058, column: 39, scope: !9891)
!9897 = !DILocalVariable(name: "var", arg: 2, scope: !9891, file: !8930, line: 1058, type: !1777)
!9898 = !DILocation(line: 1058, column: 49, scope: !9891)
!9899 = !DILocation(line: 1060, column: 18, scope: !9891)
!9900 = !DILocation(line: 1060, column: 3, scope: !9891)
!9901 = !DILocation(line: 1060, column: 8, scope: !9891)
!9902 = !DILocation(line: 1060, column: 14, scope: !9891)
!9903 = !DILocation(line: 1061, column: 18, scope: !9891)
!9904 = !DILocation(line: 1061, column: 23, scope: !9891)
!9905 = !DILocation(line: 1061, column: 30, scope: !9891)
!9906 = !DILocation(line: 1061, column: 3, scope: !9891)
!9907 = !DILocation(line: 1061, column: 8, scope: !9891)
!9908 = !DILocation(line: 1061, column: 16, scope: !9891)
!9909 = !DILocation(line: 1062, column: 3, scope: !9891)
!9910 = !DILocation(line: 1062, column: 8, scope: !9891)
!9911 = !DILocation(line: 1062, column: 22, scope: !9891)
!9912 = !DILocation(line: 1067, column: 3, scope: !9891)
!9913 = !DILocation(line: 1067, column: 8, scope: !9891)
!9914 = !DILocation(line: 1067, column: 18, scope: !9891)
!9915 = !DILocation(line: 1067, column: 23, scope: !9891)
!9916 = !DILocation(line: 1068, column: 3, scope: !9891)
!9917 = !DILocation(line: 1068, column: 8, scope: !9891)
!9918 = !DILocation(line: 1068, column: 18, scope: !9891)
!9919 = !DILocation(line: 1068, column: 23, scope: !9891)
!9920 = !DILocation(line: 1069, column: 3, scope: !9891)
!9921 = !DILocation(line: 1069, column: 8, scope: !9891)
!9922 = !DILocation(line: 1069, column: 18, scope: !9891)
!9923 = !DILocation(line: 1069, column: 22, scope: !9891)
!9924 = !DILocation(line: 1069, column: 27, scope: !9891)
!9925 = !DILocation(line: 1070, column: 3, scope: !9891)
!9926 = !DILocation(line: 1070, column: 8, scope: !9891)
!9927 = !DILocation(line: 1070, column: 18, scope: !9891)
!9928 = !DILocation(line: 1070, column: 22, scope: !9891)
!9929 = !DILocation(line: 1072, column: 27, scope: !9930)
!9930 = distinct !DILexicalBlock(scope: !9891, file: !8930, line: 1072, column: 7)
!9931 = !DILocation(line: 1072, column: 7, scope: !9930)
!9932 = !DILocation(line: 1072, column: 7, scope: !9891)
!9933 = !DILocation(line: 1073, column: 5, scope: !9930)
!9934 = !DILocation(line: 1075, column: 25, scope: !9891)
!9935 = !DILocation(line: 1075, column: 30, scope: !9891)
!9936 = !DILocation(line: 1075, column: 39, scope: !9891)
!9937 = !DILocation(line: 1075, column: 3, scope: !9891)
!9938 = !DILocation(line: 1077, column: 10, scope: !9891)
!9939 = !DILocation(line: 1077, column: 3, scope: !9891)
!9940 = !DILocation(line: 1078, column: 1, scope: !9891)
!9941 = distinct !DISubprogram(name: "end_imm_use_stmt_p", scope: !8930, file: !8930, line: 969, type: !9942, scopeLine: 970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9942 = !DISubroutineType(types: !9943)
!9943 = !{!1890, !9944}
!9944 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9945, size: 64)
!9945 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9723)
!9946 = !DILocalVariable(name: "imm", arg: 1, scope: !9941, file: !8930, line: 969, type: !9944)
!9947 = !DILocation(line: 969, column: 45, scope: !9941)
!9948 = !DILocation(line: 971, column: 11, scope: !9941)
!9949 = !DILocation(line: 971, column: 16, scope: !9941)
!9950 = !DILocation(line: 971, column: 27, scope: !9941)
!9951 = !DILocation(line: 971, column: 32, scope: !9941)
!9952 = !DILocation(line: 971, column: 24, scope: !9941)
!9953 = !DILocation(line: 971, column: 10, scope: !9941)
!9954 = !DILocation(line: 971, column: 3, scope: !9941)
!9955 = distinct !DISubprogram(name: "first_imm_use_on_stmt", scope: !8930, file: !8930, line: 1101, type: !9956, scopeLine: 1102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9956 = !DISubroutineType(types: !9957)
!9957 = !{!3048, !9894}
!9958 = !DILocalVariable(name: "imm", arg: 1, scope: !9955, file: !8930, line: 1101, type: !9894)
!9959 = !DILocation(line: 1101, column: 42, scope: !9955)
!9960 = !DILocation(line: 1103, column: 24, scope: !9955)
!9961 = !DILocation(line: 1103, column: 29, scope: !9955)
!9962 = !DILocation(line: 1103, column: 38, scope: !9955)
!9963 = !DILocation(line: 1103, column: 3, scope: !9955)
!9964 = !DILocation(line: 1103, column: 8, scope: !9955)
!9965 = !DILocation(line: 1103, column: 22, scope: !9955)
!9966 = !DILocation(line: 1104, column: 10, scope: !9955)
!9967 = !DILocation(line: 1104, column: 15, scope: !9955)
!9968 = !DILocation(line: 1104, column: 3, scope: !9955)
!9969 = distinct !DISubprogram(name: "end_imm_use_on_stmt_p", scope: !8930, file: !8930, line: 1110, type: !9942, scopeLine: 1111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9970 = !DILocalVariable(name: "imm", arg: 1, scope: !9969, file: !8930, line: 1110, type: !9944)
!9971 = !DILocation(line: 1110, column: 48, scope: !9969)
!9972 = !DILocation(line: 1112, column: 11, scope: !9969)
!9973 = !DILocation(line: 1112, column: 16, scope: !9969)
!9974 = !DILocation(line: 1112, column: 29, scope: !9969)
!9975 = !DILocation(line: 1112, column: 34, scope: !9969)
!9976 = !DILocation(line: 1112, column: 24, scope: !9969)
!9977 = !DILocation(line: 1112, column: 10, scope: !9969)
!9978 = !DILocation(line: 1112, column: 3, scope: !9969)
!9979 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !8930, file: !8930, line: 233, type: !9980, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9980 = !DISubroutineType(types: !9981)
!9981 = !{null, !3048, !1777}
!9982 = !DILocalVariable(name: "use", arg: 1, scope: !9979, file: !8930, line: 233, type: !3048)
!9983 = !DILocation(line: 233, column: 37, scope: !9979)
!9984 = !DILocalVariable(name: "val", arg: 2, scope: !9979, file: !8930, line: 233, type: !1777)
!9985 = !DILocation(line: 233, column: 47, scope: !9979)
!9986 = !DILocation(line: 235, column: 19, scope: !9979)
!9987 = !DILocation(line: 235, column: 3, scope: !9979)
!9988 = !DILocation(line: 236, column: 17, scope: !9979)
!9989 = !DILocation(line: 236, column: 5, scope: !9979)
!9990 = !DILocation(line: 236, column: 10, scope: !9979)
!9991 = !DILocation(line: 236, column: 15, scope: !9979)
!9992 = !DILocation(line: 237, column: 17, scope: !9979)
!9993 = !DILocation(line: 237, column: 22, scope: !9979)
!9994 = !DILocation(line: 237, column: 3, scope: !9979)
!9995 = !DILocation(line: 238, column: 1, scope: !9979)
!9996 = distinct !DISubprogram(name: "next_imm_use_on_stmt", scope: !8930, file: !8930, line: 1118, type: !9956, scopeLine: 1119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!9997 = !DILocalVariable(name: "imm", arg: 1, scope: !9996, file: !8930, line: 1118, type: !9894)
!9998 = !DILocation(line: 1118, column: 41, scope: !9996)
!9999 = !DILocation(line: 1120, column: 18, scope: !9996)
!10000 = !DILocation(line: 1120, column: 23, scope: !9996)
!10001 = !DILocation(line: 1120, column: 3, scope: !9996)
!10002 = !DILocation(line: 1120, column: 8, scope: !9996)
!10003 = !DILocation(line: 1120, column: 16, scope: !9996)
!10004 = !DILocation(line: 1121, column: 30, scope: !10005)
!10005 = distinct !DILexicalBlock(scope: !9996, file: !8930, line: 1121, column: 7)
!10006 = !DILocation(line: 1121, column: 7, scope: !10005)
!10007 = !DILocation(line: 1121, column: 7, scope: !9996)
!10008 = !DILocation(line: 1122, column: 5, scope: !10005)
!10009 = !DILocation(line: 1125, column: 28, scope: !10010)
!10010 = distinct !DILexicalBlock(scope: !10005, file: !8930, line: 1124, column: 5)
!10011 = !DILocation(line: 1125, column: 33, scope: !10010)
!10012 = !DILocation(line: 1125, column: 42, scope: !10010)
!10013 = !DILocation(line: 1125, column: 7, scope: !10010)
!10014 = !DILocation(line: 1125, column: 12, scope: !10010)
!10015 = !DILocation(line: 1125, column: 26, scope: !10010)
!10016 = !DILocation(line: 1126, column: 14, scope: !10010)
!10017 = !DILocation(line: 1126, column: 19, scope: !10010)
!10018 = !DILocation(line: 1126, column: 7, scope: !10010)
!10019 = !DILocation(line: 1128, column: 1, scope: !9996)
!10020 = distinct !DISubprogram(name: "next_imm_use_stmt", scope: !8930, file: !8930, line: 1083, type: !10021, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10021 = !DISubroutineType(types: !10022)
!10022 = !{!1589, !9894}
!10023 = !DILocalVariable(name: "imm", arg: 1, scope: !10020, file: !8930, line: 1083, type: !9894)
!10024 = !DILocation(line: 1083, column: 38, scope: !10020)
!10025 = !DILocation(line: 1085, column: 18, scope: !10020)
!10026 = !DILocation(line: 1085, column: 23, scope: !10020)
!10027 = !DILocation(line: 1085, column: 33, scope: !10020)
!10028 = !DILocation(line: 1085, column: 3, scope: !10020)
!10029 = !DILocation(line: 1085, column: 8, scope: !10020)
!10030 = !DILocation(line: 1085, column: 16, scope: !10020)
!10031 = !DILocation(line: 1086, column: 27, scope: !10032)
!10032 = distinct !DILexicalBlock(scope: !10020, file: !8930, line: 1086, column: 7)
!10033 = !DILocation(line: 1086, column: 7, scope: !10032)
!10034 = !DILocation(line: 1086, column: 7, scope: !10020)
!10035 = !DILocation(line: 1088, column: 11, scope: !10036)
!10036 = distinct !DILexicalBlock(scope: !10037, file: !8930, line: 1088, column: 11)
!10037 = distinct !DILexicalBlock(scope: !10032, file: !8930, line: 1087, column: 5)
!10038 = !DILocation(line: 1088, column: 16, scope: !10036)
!10039 = !DILocation(line: 1088, column: 26, scope: !10036)
!10040 = !DILocation(line: 1088, column: 31, scope: !10036)
!10041 = !DILocation(line: 1088, column: 11, scope: !10037)
!10042 = !DILocation(line: 1089, column: 19, scope: !10036)
!10043 = !DILocation(line: 1089, column: 24, scope: !10036)
!10044 = !DILocation(line: 1089, column: 2, scope: !10036)
!10045 = !DILocation(line: 1090, column: 7, scope: !10037)
!10046 = !DILocation(line: 1093, column: 25, scope: !10020)
!10047 = !DILocation(line: 1093, column: 30, scope: !10020)
!10048 = !DILocation(line: 1093, column: 39, scope: !10020)
!10049 = !DILocation(line: 1093, column: 3, scope: !10020)
!10050 = !DILocation(line: 1094, column: 10, scope: !10020)
!10051 = !DILocation(line: 1094, column: 3, scope: !10020)
!10052 = !DILocation(line: 1095, column: 1, scope: !10020)
!10053 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !591, file: !591, line: 3100, type: !10054, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10054 = !DISubroutineType(types: !10055)
!10055 = !{!9882, !1589, !7}
!10056 = !DILocalVariable(name: "gs", arg: 1, scope: !10053, file: !591, line: 3100, type: !1589)
!10057 = !DILocation(line: 3100, column: 24, scope: !10053)
!10058 = !DILocalVariable(name: "index", arg: 2, scope: !10053, file: !591, line: 3100, type: !7)
!10059 = !DILocation(line: 3100, column: 37, scope: !10053)
!10060 = !DILocation(line: 3103, column: 3, scope: !10053)
!10061 = !DILocation(line: 3104, column: 12, scope: !10053)
!10062 = !DILocation(line: 3104, column: 16, scope: !10053)
!10063 = !DILocation(line: 3104, column: 27, scope: !10053)
!10064 = !DILocation(line: 3104, column: 32, scope: !10053)
!10065 = !DILocation(line: 3104, column: 3, scope: !10053)
!10066 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !8930, file: !8930, line: 427, type: !10067, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10067 = !DISubroutineType(types: !10068)
!10068 = !{!1777, !3048}
!10069 = !DILocalVariable(name: "use", arg: 1, scope: !10066, file: !8930, line: 427, type: !3048)
!10070 = !DILocation(line: 427, column: 33, scope: !10066)
!10071 = !DILocation(line: 429, column: 12, scope: !10066)
!10072 = !DILocation(line: 429, column: 17, scope: !10066)
!10073 = !DILocation(line: 429, column: 10, scope: !10066)
!10074 = !DILocation(line: 429, column: 3, scope: !10066)
!10075 = distinct !DISubprogram(name: "link_use_stmts_after", scope: !8930, file: !8930, line: 1018, type: !10076, scopeLine: 1019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10076 = !DISubroutineType(types: !10077)
!10077 = !{null, !3048, !9894}
!10078 = !DILocalVariable(name: "head", arg: 1, scope: !10075, file: !8930, line: 1018, type: !3048)
!10079 = !DILocation(line: 1018, column: 37, scope: !10075)
!10080 = !DILocalVariable(name: "imm", arg: 2, scope: !10075, file: !8930, line: 1018, type: !9894)
!10081 = !DILocation(line: 1018, column: 61, scope: !10075)
!10082 = !DILocalVariable(name: "use_p", scope: !10075, file: !8930, line: 1020, type: !3048)
!10083 = !DILocation(line: 1020, column: 17, scope: !10075)
!10084 = !DILocalVariable(name: "last_p", scope: !10075, file: !8930, line: 1021, type: !3048)
!10085 = !DILocation(line: 1021, column: 17, scope: !10075)
!10086 = !DILocation(line: 1021, column: 26, scope: !10075)
!10087 = !DILocalVariable(name: "head_stmt", scope: !10075, file: !8930, line: 1022, type: !1589)
!10088 = !DILocation(line: 1022, column: 10, scope: !10075)
!10089 = !DILocation(line: 1022, column: 22, scope: !10075)
!10090 = !DILocalVariable(name: "use", scope: !10075, file: !8930, line: 1023, type: !1777)
!10091 = !DILocation(line: 1023, column: 8, scope: !10075)
!10092 = !DILocation(line: 1023, column: 14, scope: !10075)
!10093 = !DILocalVariable(name: "op_iter", scope: !10075, file: !8930, line: 1024, type: !10094)
!10094 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !1578, line: 140, baseType: !10095)
!10095 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !1578, line: 131, size: 320, elements: !10096)
!10096 = !{!10097, !10098, !10099, !10101, !10103, !10104, !10105}
!10097 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !10095, file: !1578, line: 133, baseType: !1890, size: 8)
!10098 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !10095, file: !1578, line: 134, baseType: !1577, size: 32, offset: 32)
!10099 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !10095, file: !1578, line: 135, baseType: !10100, size: 64, offset: 64)
!10100 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !1578, line: 42, baseType: !2280)
!10101 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !10095, file: !1578, line: 136, baseType: !10102, size: 64, offset: 128)
!10102 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !1578, line: 50, baseType: !2287)
!10103 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !10095, file: !1578, line: 137, baseType: !1679, size: 32, offset: 192)
!10104 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !10095, file: !1578, line: 138, baseType: !1679, size: 32, offset: 224)
!10105 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !10095, file: !1578, line: 139, baseType: !1589, size: 64, offset: 256)
!10106 = !DILocation(line: 1024, column: 15, scope: !10075)
!10107 = !DILocalVariable(name: "flag", scope: !10075, file: !8930, line: 1025, type: !1679)
!10108 = !DILocation(line: 1025, column: 7, scope: !10075)
!10109 = !DILocation(line: 1028, column: 26, scope: !10075)
!10110 = !DILocation(line: 1028, column: 11, scope: !10075)
!10111 = !DILocation(line: 1028, column: 8, scope: !10075)
!10112 = !DILocation(line: 1030, column: 20, scope: !10113)
!10113 = distinct !DILexicalBlock(scope: !10075, file: !8930, line: 1030, column: 7)
!10114 = !DILocation(line: 1030, column: 7, scope: !10113)
!10115 = !DILocation(line: 1030, column: 31, scope: !10113)
!10116 = !DILocation(line: 1030, column: 7, scope: !10075)
!10117 = !DILocation(line: 1032, column: 7, scope: !10118)
!10118 = distinct !DILexicalBlock(scope: !10119, file: !8930, line: 1032, column: 7)
!10119 = distinct !DILexicalBlock(scope: !10113, file: !8930, line: 1031, column: 5)
!10120 = !DILocation(line: 1032, column: 7, scope: !10121)
!10121 = distinct !DILexicalBlock(scope: !10118, file: !8930, line: 1032, column: 7)
!10122 = !DILocation(line: 1033, column: 6, scope: !10123)
!10123 = distinct !DILexicalBlock(scope: !10121, file: !8930, line: 1033, column: 6)
!10124 = !DILocation(line: 1033, column: 30, scope: !10123)
!10125 = !DILocation(line: 1033, column: 27, scope: !10123)
!10126 = !DILocation(line: 1033, column: 6, scope: !10121)
!10127 = !DILocation(line: 1034, column: 34, scope: !10123)
!10128 = !DILocation(line: 1034, column: 41, scope: !10123)
!10129 = !DILocation(line: 1034, column: 47, scope: !10123)
!10130 = !DILocation(line: 1034, column: 13, scope: !10123)
!10131 = !DILocation(line: 1034, column: 11, scope: !10123)
!10132 = !DILocation(line: 1034, column: 4, scope: !10123)
!10133 = distinct !{!10133, !10117, !10134}
!10134 = !DILocation(line: 1034, column: 53, scope: !10118)
!10135 = !DILocation(line: 1035, column: 5, scope: !10119)
!10136 = !DILocation(line: 1038, column: 11, scope: !10137)
!10137 = distinct !DILexicalBlock(scope: !10138, file: !8930, line: 1038, column: 11)
!10138 = distinct !DILexicalBlock(scope: !10113, file: !8930, line: 1037, column: 5)
!10139 = !DILocation(line: 1038, column: 16, scope: !10137)
!10140 = !DILocation(line: 1038, column: 11, scope: !10138)
!10141 = !DILocation(line: 1040, column: 4, scope: !10142)
!10142 = distinct !DILexicalBlock(scope: !10143, file: !8930, line: 1040, column: 4)
!10143 = distinct !DILexicalBlock(scope: !10137, file: !8930, line: 1039, column: 2)
!10144 = !DILocation(line: 1040, column: 4, scope: !10145)
!10145 = distinct !DILexicalBlock(scope: !10142, file: !8930, line: 1040, column: 4)
!10146 = !DILocation(line: 1041, column: 10, scope: !10147)
!10147 = distinct !DILexicalBlock(scope: !10145, file: !8930, line: 1041, column: 10)
!10148 = !DILocation(line: 1041, column: 34, scope: !10147)
!10149 = !DILocation(line: 1041, column: 31, scope: !10147)
!10150 = !DILocation(line: 1041, column: 10, scope: !10145)
!10151 = !DILocation(line: 1042, column: 38, scope: !10147)
!10152 = !DILocation(line: 1042, column: 45, scope: !10147)
!10153 = !DILocation(line: 1042, column: 51, scope: !10147)
!10154 = !DILocation(line: 1042, column: 17, scope: !10147)
!10155 = !DILocation(line: 1042, column: 15, scope: !10147)
!10156 = !DILocation(line: 1042, column: 8, scope: !10147)
!10157 = distinct !{!10157, !10141, !10158}
!10158 = !DILocation(line: 1042, column: 57, scope: !10142)
!10159 = !DILocation(line: 1043, column: 2, scope: !10143)
!10160 = !DILocation(line: 1044, column: 41, scope: !10161)
!10161 = distinct !DILexicalBlock(scope: !10137, file: !8930, line: 1044, column: 16)
!10162 = !DILocation(line: 1044, column: 25, scope: !10161)
!10163 = !DILocation(line: 1044, column: 23, scope: !10161)
!10164 = !DILocation(line: 1044, column: 53, scope: !10161)
!10165 = !DILocation(line: 1044, column: 16, scope: !10137)
!10166 = !DILocation(line: 1046, column: 8, scope: !10167)
!10167 = distinct !DILexicalBlock(scope: !10168, file: !8930, line: 1046, column: 8)
!10168 = distinct !DILexicalBlock(scope: !10161, file: !8930, line: 1045, column: 2)
!10169 = !DILocation(line: 1046, column: 32, scope: !10167)
!10170 = !DILocation(line: 1046, column: 29, scope: !10167)
!10171 = !DILocation(line: 1046, column: 8, scope: !10168)
!10172 = !DILocation(line: 1047, column: 36, scope: !10167)
!10173 = !DILocation(line: 1047, column: 43, scope: !10167)
!10174 = !DILocation(line: 1047, column: 49, scope: !10167)
!10175 = !DILocation(line: 1047, column: 15, scope: !10167)
!10176 = !DILocation(line: 1047, column: 13, scope: !10167)
!10177 = !DILocation(line: 1047, column: 6, scope: !10167)
!10178 = !DILocation(line: 1048, column: 2, scope: !10168)
!10179 = !DILocation(line: 1051, column: 7, scope: !10180)
!10180 = distinct !DILexicalBlock(scope: !10075, file: !8930, line: 1051, column: 7)
!10181 = !DILocation(line: 1051, column: 12, scope: !10180)
!10182 = !DILocation(line: 1051, column: 22, scope: !10180)
!10183 = !DILocation(line: 1051, column: 27, scope: !10180)
!10184 = !DILocation(line: 1051, column: 7, scope: !10075)
!10185 = !DILocation(line: 1052, column: 22, scope: !10180)
!10186 = !DILocation(line: 1052, column: 27, scope: !10180)
!10187 = !DILocation(line: 1052, column: 5, scope: !10180)
!10188 = !DILocation(line: 1053, column: 27, scope: !10075)
!10189 = !DILocation(line: 1053, column: 32, scope: !10075)
!10190 = !DILocation(line: 1053, column: 44, scope: !10075)
!10191 = !DILocation(line: 1053, column: 3, scope: !10075)
!10192 = !DILocation(line: 1054, column: 1, scope: !10075)
!10193 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !8930, file: !8930, line: 910, type: !10194, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10194 = !DISubroutineType(types: !10195)
!10195 = !{!3048, !10196, !1589, !1679}
!10196 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10094, size: 64)
!10197 = !DILocalVariable(name: "ptr", arg: 1, scope: !10193, file: !8930, line: 910, type: !10196)
!10198 = !DILocation(line: 910, column: 35, scope: !10193)
!10199 = !DILocalVariable(name: "phi", arg: 2, scope: !10193, file: !8930, line: 910, type: !1589)
!10200 = !DILocation(line: 910, column: 47, scope: !10193)
!10201 = !DILocalVariable(name: "flags", arg: 3, scope: !10193, file: !8930, line: 910, type: !1679)
!10202 = !DILocation(line: 910, column: 56, scope: !10193)
!10203 = !DILocalVariable(name: "phi_def", scope: !10193, file: !8930, line: 912, type: !1777)
!10204 = !DILocation(line: 912, column: 8, scope: !10193)
!10205 = !DILocation(line: 912, column: 37, scope: !10193)
!10206 = !DILocation(line: 912, column: 18, scope: !10193)
!10207 = !DILocalVariable(name: "comp", scope: !10193, file: !8930, line: 913, type: !1679)
!10208 = !DILocation(line: 913, column: 7, scope: !10193)
!10209 = !DILocation(line: 915, column: 28, scope: !10193)
!10210 = !DILocation(line: 915, column: 3, scope: !10193)
!10211 = !DILocation(line: 916, column: 3, scope: !10193)
!10212 = !DILocation(line: 916, column: 8, scope: !10193)
!10213 = !DILocation(line: 916, column: 13, scope: !10193)
!10214 = !DILocation(line: 918, column: 3, scope: !10193)
!10215 = !DILocation(line: 920, column: 26, scope: !10193)
!10216 = !DILocation(line: 920, column: 11, scope: !10193)
!10217 = !DILocation(line: 920, column: 8, scope: !10193)
!10218 = !DILocation(line: 923, column: 8, scope: !10219)
!10219 = distinct !DILexicalBlock(scope: !10193, file: !8930, line: 923, column: 7)
!10220 = !DILocation(line: 923, column: 16, scope: !10219)
!10221 = !DILocation(line: 923, column: 14, scope: !10219)
!10222 = !DILocation(line: 923, column: 22, scope: !10219)
!10223 = !DILocation(line: 923, column: 7, scope: !10193)
!10224 = !DILocation(line: 925, column: 7, scope: !10225)
!10225 = distinct !DILexicalBlock(scope: !10219, file: !8930, line: 924, column: 5)
!10226 = !DILocation(line: 925, column: 12, scope: !10225)
!10227 = !DILocation(line: 925, column: 17, scope: !10225)
!10228 = !DILocation(line: 926, column: 7, scope: !10225)
!10229 = !DILocation(line: 929, column: 19, scope: !10193)
!10230 = !DILocation(line: 929, column: 3, scope: !10193)
!10231 = !DILocation(line: 929, column: 8, scope: !10193)
!10232 = !DILocation(line: 929, column: 17, scope: !10193)
!10233 = !DILocation(line: 930, column: 39, scope: !10193)
!10234 = !DILocation(line: 930, column: 18, scope: !10193)
!10235 = !DILocation(line: 930, column: 3, scope: !10193)
!10236 = !DILocation(line: 930, column: 8, scope: !10193)
!10237 = !DILocation(line: 930, column: 16, scope: !10193)
!10238 = !DILocation(line: 931, column: 3, scope: !10193)
!10239 = !DILocation(line: 931, column: 8, scope: !10193)
!10240 = !DILocation(line: 931, column: 18, scope: !10193)
!10241 = !DILocation(line: 932, column: 28, scope: !10193)
!10242 = !DILocation(line: 932, column: 10, scope: !10193)
!10243 = !DILocation(line: 932, column: 3, scope: !10193)
!10244 = !DILocation(line: 933, column: 1, scope: !10193)
!10245 = distinct !DISubprogram(name: "op_iter_done", scope: !8930, file: !8930, line: 652, type: !10246, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10246 = !DISubroutineType(types: !10247)
!10247 = !{!1890, !10248}
!10248 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10249, size: 64)
!10249 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !10094)
!10250 = !DILocalVariable(name: "ptr", arg: 1, scope: !10245, file: !8930, line: 652, type: !10248)
!10251 = !DILocation(line: 652, column: 34, scope: !10245)
!10252 = !DILocation(line: 654, column: 10, scope: !10245)
!10253 = !DILocation(line: 654, column: 15, scope: !10245)
!10254 = !DILocation(line: 654, column: 3, scope: !10245)
!10255 = distinct !DISubprogram(name: "move_use_after_head", scope: !8930, file: !8930, line: 990, type: !10256, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10256 = !DISubroutineType(types: !10257)
!10257 = !{!3048, !3048, !3048, !3048}
!10258 = !DILocalVariable(name: "use_p", arg: 1, scope: !10255, file: !8930, line: 990, type: !3048)
!10259 = !DILocation(line: 990, column: 36, scope: !10255)
!10260 = !DILocalVariable(name: "head", arg: 2, scope: !10255, file: !8930, line: 990, type: !3048)
!10261 = !DILocation(line: 990, column: 57, scope: !10255)
!10262 = !DILocalVariable(name: "last_p", arg: 3, scope: !10255, file: !8930, line: 991, type: !3048)
!10263 = !DILocation(line: 991, column: 23, scope: !10255)
!10264 = !DILocation(line: 997, column: 7, scope: !10265)
!10265 = distinct !DILexicalBlock(scope: !10255, file: !8930, line: 997, column: 7)
!10266 = !DILocation(line: 997, column: 16, scope: !10265)
!10267 = !DILocation(line: 997, column: 13, scope: !10265)
!10268 = !DILocation(line: 997, column: 7, scope: !10255)
!10269 = !DILocation(line: 1000, column: 11, scope: !10270)
!10270 = distinct !DILexicalBlock(scope: !10271, file: !8930, line: 1000, column: 11)
!10271 = distinct !DILexicalBlock(scope: !10265, file: !8930, line: 998, column: 5)
!10272 = !DILocation(line: 1000, column: 19, scope: !10270)
!10273 = !DILocation(line: 1000, column: 27, scope: !10270)
!10274 = !DILocation(line: 1000, column: 24, scope: !10270)
!10275 = !DILocation(line: 1000, column: 11, scope: !10271)
!10276 = !DILocation(line: 1001, column: 11, scope: !10270)
!10277 = !DILocation(line: 1001, column: 9, scope: !10270)
!10278 = !DILocation(line: 1001, column: 2, scope: !10270)
!10279 = !DILocation(line: 1005, column: 20, scope: !10280)
!10280 = distinct !DILexicalBlock(scope: !10270, file: !8930, line: 1003, column: 2)
!10281 = !DILocation(line: 1005, column: 4, scope: !10280)
!10282 = !DILocation(line: 1006, column: 26, scope: !10280)
!10283 = !DILocation(line: 1006, column: 33, scope: !10280)
!10284 = !DILocation(line: 1006, column: 4, scope: !10280)
!10285 = !DILocation(line: 1007, column: 13, scope: !10280)
!10286 = !DILocation(line: 1007, column: 11, scope: !10280)
!10287 = !DILocation(line: 1009, column: 5, scope: !10271)
!10288 = !DILocation(line: 1010, column: 10, scope: !10255)
!10289 = !DILocation(line: 1010, column: 3, scope: !10255)
!10290 = distinct !DISubprogram(name: "op_iter_next_use", scope: !8930, file: !8930, line: 659, type: !10291, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10291 = !DISubroutineType(types: !10292)
!10292 = !{!3048, !10196}
!10293 = !DILocalVariable(name: "ptr", arg: 1, scope: !10290, file: !8930, line: 659, type: !10196)
!10294 = !DILocation(line: 659, column: 32, scope: !10290)
!10295 = !DILocalVariable(name: "use_p", scope: !10290, file: !8930, line: 661, type: !3048)
!10296 = !DILocation(line: 661, column: 17, scope: !10290)
!10297 = !DILocation(line: 665, column: 7, scope: !10298)
!10298 = distinct !DILexicalBlock(scope: !10290, file: !8930, line: 665, column: 7)
!10299 = !DILocation(line: 665, column: 12, scope: !10298)
!10300 = !DILocation(line: 665, column: 7, scope: !10290)
!10301 = !DILocation(line: 667, column: 15, scope: !10302)
!10302 = distinct !DILexicalBlock(scope: !10298, file: !8930, line: 666, column: 5)
!10303 = !DILocation(line: 667, column: 13, scope: !10302)
!10304 = !DILocation(line: 668, column: 19, scope: !10302)
!10305 = !DILocation(line: 668, column: 24, scope: !10302)
!10306 = !DILocation(line: 668, column: 30, scope: !10302)
!10307 = !DILocation(line: 668, column: 7, scope: !10302)
!10308 = !DILocation(line: 668, column: 12, scope: !10302)
!10309 = !DILocation(line: 668, column: 17, scope: !10302)
!10310 = !DILocation(line: 669, column: 14, scope: !10302)
!10311 = !DILocation(line: 669, column: 7, scope: !10302)
!10312 = !DILocation(line: 671, column: 7, scope: !10313)
!10313 = distinct !DILexicalBlock(scope: !10290, file: !8930, line: 671, column: 7)
!10314 = !DILocation(line: 671, column: 12, scope: !10313)
!10315 = !DILocation(line: 671, column: 20, scope: !10313)
!10316 = !DILocation(line: 671, column: 25, scope: !10313)
!10317 = !DILocation(line: 671, column: 18, scope: !10313)
!10318 = !DILocation(line: 671, column: 7, scope: !10290)
!10319 = !DILocation(line: 673, column: 14, scope: !10320)
!10320 = distinct !DILexicalBlock(scope: !10313, file: !8930, line: 672, column: 5)
!10321 = !DILocation(line: 673, column: 7, scope: !10320)
!10322 = !DILocation(line: 675, column: 3, scope: !10290)
!10323 = !DILocation(line: 675, column: 8, scope: !10290)
!10324 = !DILocation(line: 675, column: 13, scope: !10290)
!10325 = !DILocation(line: 676, column: 3, scope: !10290)
!10326 = !DILocation(line: 677, column: 1, scope: !10290)
!10327 = distinct !DISubprogram(name: "op_iter_init_use", scope: !8930, file: !8930, line: 768, type: !10194, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10328 = !DILocalVariable(name: "ptr", arg: 1, scope: !10327, file: !8930, line: 768, type: !10196)
!10329 = !DILocation(line: 768, column: 32, scope: !10327)
!10330 = !DILocalVariable(name: "stmt", arg: 2, scope: !10327, file: !8930, line: 768, type: !1589)
!10331 = !DILocation(line: 768, column: 44, scope: !10327)
!10332 = !DILocalVariable(name: "flags", arg: 3, scope: !10327, file: !8930, line: 768, type: !1679)
!10333 = !DILocation(line: 768, column: 54, scope: !10327)
!10334 = !DILocation(line: 770, column: 3, scope: !10327)
!10335 = !DILocation(line: 772, column: 17, scope: !10327)
!10336 = !DILocation(line: 772, column: 22, scope: !10327)
!10337 = !DILocation(line: 772, column: 28, scope: !10327)
!10338 = !DILocation(line: 772, column: 3, scope: !10327)
!10339 = !DILocation(line: 773, column: 3, scope: !10327)
!10340 = !DILocation(line: 773, column: 8, scope: !10327)
!10341 = !DILocation(line: 773, column: 18, scope: !10327)
!10342 = !DILocation(line: 774, column: 28, scope: !10327)
!10343 = !DILocation(line: 774, column: 10, scope: !10327)
!10344 = !DILocation(line: 774, column: 3, scope: !10327)
!10345 = distinct !DISubprogram(name: "gimple_vuse_op", scope: !591, file: !591, line: 1334, type: !10346, scopeLine: 1335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10346 = !DISubroutineType(types: !10347)
!10347 = !{!3048, !3387}
!10348 = !DILocalVariable(name: "g", arg: 1, scope: !10345, file: !591, line: 1334, type: !3387)
!10349 = !DILocation(line: 1334, column: 30, scope: !10345)
!10350 = !DILocalVariable(name: "ops", scope: !10345, file: !591, line: 1336, type: !2287)
!10351 = !DILocation(line: 1336, column: 24, scope: !10345)
!10352 = !DILocation(line: 1337, column: 28, scope: !10353)
!10353 = distinct !DILexicalBlock(scope: !10345, file: !591, line: 1337, column: 7)
!10354 = !DILocation(line: 1337, column: 8, scope: !10353)
!10355 = !DILocation(line: 1337, column: 7, scope: !10345)
!10356 = !DILocation(line: 1338, column: 5, scope: !10353)
!10357 = !DILocation(line: 1339, column: 9, scope: !10345)
!10358 = !DILocation(line: 1339, column: 12, scope: !10345)
!10359 = !DILocation(line: 1339, column: 18, scope: !10345)
!10360 = !DILocation(line: 1339, column: 25, scope: !10345)
!10361 = !DILocation(line: 1339, column: 7, scope: !10345)
!10362 = !DILocation(line: 1340, column: 7, scope: !10363)
!10363 = distinct !DILexicalBlock(scope: !10345, file: !591, line: 1340, column: 7)
!10364 = !DILocation(line: 1341, column: 7, scope: !10363)
!10365 = !DILocation(line: 1341, column: 10, scope: !10363)
!10366 = !DILocation(line: 1341, column: 28, scope: !10363)
!10367 = !DILocation(line: 1341, column: 36, scope: !10363)
!10368 = !DILocation(line: 1341, column: 39, scope: !10363)
!10369 = !DILocation(line: 1341, column: 49, scope: !10363)
!10370 = !DILocation(line: 1341, column: 32, scope: !10363)
!10371 = !DILocation(line: 1340, column: 7, scope: !10345)
!10372 = !DILocation(line: 1342, column: 12, scope: !10363)
!10373 = !DILocation(line: 1342, column: 5, scope: !10363)
!10374 = !DILocation(line: 1343, column: 3, scope: !10345)
!10375 = !DILocation(line: 1344, column: 1, scope: !10345)
!10376 = distinct !DISubprogram(name: "delink_imm_use", scope: !8930, file: !8930, line: 188, type: !10377, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10377 = !DISubroutineType(types: !10378)
!10378 = !{null, !3049}
!10379 = !DILocalVariable(name: "linknode", arg: 1, scope: !10376, file: !8930, line: 188, type: !3049)
!10380 = !DILocation(line: 188, column: 36, scope: !10376)
!10381 = !DILocation(line: 191, column: 7, scope: !10382)
!10382 = distinct !DILexicalBlock(scope: !10376, file: !8930, line: 191, column: 7)
!10383 = !DILocation(line: 191, column: 17, scope: !10382)
!10384 = !DILocation(line: 191, column: 22, scope: !10382)
!10385 = !DILocation(line: 191, column: 7, scope: !10376)
!10386 = !DILocation(line: 192, column: 5, scope: !10382)
!10387 = !DILocation(line: 194, column: 26, scope: !10376)
!10388 = !DILocation(line: 194, column: 36, scope: !10376)
!10389 = !DILocation(line: 194, column: 3, scope: !10376)
!10390 = !DILocation(line: 194, column: 13, scope: !10376)
!10391 = !DILocation(line: 194, column: 19, scope: !10376)
!10392 = !DILocation(line: 194, column: 24, scope: !10376)
!10393 = !DILocation(line: 195, column: 26, scope: !10376)
!10394 = !DILocation(line: 195, column: 36, scope: !10376)
!10395 = !DILocation(line: 195, column: 3, scope: !10376)
!10396 = !DILocation(line: 195, column: 13, scope: !10376)
!10397 = !DILocation(line: 195, column: 19, scope: !10376)
!10398 = !DILocation(line: 195, column: 24, scope: !10376)
!10399 = !DILocation(line: 196, column: 3, scope: !10376)
!10400 = !DILocation(line: 196, column: 13, scope: !10376)
!10401 = !DILocation(line: 196, column: 18, scope: !10376)
!10402 = !DILocation(line: 197, column: 3, scope: !10376)
!10403 = !DILocation(line: 197, column: 13, scope: !10376)
!10404 = !DILocation(line: 197, column: 18, scope: !10376)
!10405 = !DILocation(line: 198, column: 1, scope: !10376)
!10406 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !8930, file: !8930, line: 202, type: !10407, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10407 = !DISubroutineType(types: !10408)
!10408 = !{null, !3049, !3049}
!10409 = !DILocalVariable(name: "linknode", arg: 1, scope: !10406, file: !8930, line: 202, type: !3049)
!10410 = !DILocation(line: 202, column: 42, scope: !10406)
!10411 = !DILocalVariable(name: "list", arg: 2, scope: !10406, file: !8930, line: 202, type: !3049)
!10412 = !DILocation(line: 202, column: 71, scope: !10406)
!10413 = !DILocation(line: 206, column: 20, scope: !10406)
!10414 = !DILocation(line: 206, column: 3, scope: !10406)
!10415 = !DILocation(line: 206, column: 13, scope: !10406)
!10416 = !DILocation(line: 206, column: 18, scope: !10406)
!10417 = !DILocation(line: 207, column: 20, scope: !10406)
!10418 = !DILocation(line: 207, column: 26, scope: !10406)
!10419 = !DILocation(line: 207, column: 3, scope: !10406)
!10420 = !DILocation(line: 207, column: 13, scope: !10406)
!10421 = !DILocation(line: 207, column: 18, scope: !10406)
!10422 = !DILocation(line: 208, column: 22, scope: !10406)
!10423 = !DILocation(line: 208, column: 3, scope: !10406)
!10424 = !DILocation(line: 208, column: 9, scope: !10406)
!10425 = !DILocation(line: 208, column: 15, scope: !10406)
!10426 = !DILocation(line: 208, column: 20, scope: !10406)
!10427 = !DILocation(line: 209, column: 16, scope: !10406)
!10428 = !DILocation(line: 209, column: 3, scope: !10406)
!10429 = !DILocation(line: 209, column: 9, scope: !10406)
!10430 = !DILocation(line: 209, column: 14, scope: !10406)
!10431 = !DILocation(line: 210, column: 1, scope: !10406)
!10432 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !8930, file: !8930, line: 729, type: !10433, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10433 = !DISubroutineType(types: !10434)
!10434 = !{null, !10196}
!10435 = !DILocalVariable(name: "ptr", arg: 1, scope: !10432, file: !8930, line: 729, type: !10196)
!10436 = !DILocation(line: 729, column: 39, scope: !10432)
!10437 = !DILocation(line: 731, column: 3, scope: !10432)
!10438 = !DILocation(line: 731, column: 8, scope: !10432)
!10439 = !DILocation(line: 731, column: 13, scope: !10432)
!10440 = !DILocation(line: 732, column: 3, scope: !10432)
!10441 = !DILocation(line: 732, column: 8, scope: !10432)
!10442 = !DILocation(line: 732, column: 13, scope: !10432)
!10443 = !DILocation(line: 733, column: 3, scope: !10432)
!10444 = !DILocation(line: 733, column: 8, scope: !10432)
!10445 = !DILocation(line: 733, column: 18, scope: !10432)
!10446 = !DILocation(line: 734, column: 3, scope: !10432)
!10447 = !DILocation(line: 734, column: 8, scope: !10432)
!10448 = !DILocation(line: 734, column: 14, scope: !10432)
!10449 = !DILocation(line: 735, column: 3, scope: !10432)
!10450 = !DILocation(line: 735, column: 8, scope: !10432)
!10451 = !DILocation(line: 735, column: 16, scope: !10432)
!10452 = !DILocation(line: 736, column: 3, scope: !10432)
!10453 = !DILocation(line: 736, column: 8, scope: !10432)
!10454 = !DILocation(line: 736, column: 17, scope: !10432)
!10455 = !DILocation(line: 737, column: 3, scope: !10432)
!10456 = !DILocation(line: 737, column: 8, scope: !10432)
!10457 = !DILocation(line: 737, column: 13, scope: !10432)
!10458 = !DILocation(line: 738, column: 1, scope: !10432)
!10459 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !591, file: !591, line: 3061, type: !6137, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10460 = !DILocalVariable(name: "gs", arg: 1, scope: !10459, file: !591, line: 3061, type: !3387)
!10461 = !DILocation(line: 3061, column: 35, scope: !10459)
!10462 = !DILocation(line: 3064, column: 10, scope: !10459)
!10463 = !DILocation(line: 3064, column: 14, scope: !10459)
!10464 = !DILocation(line: 3064, column: 25, scope: !10459)
!10465 = !DILocation(line: 3064, column: 3, scope: !10459)
!10466 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !8930, file: !8930, line: 442, type: !10467, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10467 = !DISubroutineType(types: !10468)
!10468 = !{!3048, !1589, !1679}
!10469 = !DILocalVariable(name: "gs", arg: 1, scope: !10466, file: !8930, line: 442, type: !1589)
!10470 = !DILocation(line: 442, column: 36, scope: !10466)
!10471 = !DILocalVariable(name: "i", arg: 2, scope: !10466, file: !8930, line: 442, type: !1679)
!10472 = !DILocation(line: 442, column: 44, scope: !10466)
!10473 = !DILocation(line: 444, column: 27, scope: !10466)
!10474 = !DILocation(line: 444, column: 31, scope: !10466)
!10475 = !DILocation(line: 444, column: 11, scope: !10466)
!10476 = !DILocation(line: 444, column: 35, scope: !10466)
!10477 = !DILocation(line: 444, column: 3, scope: !10466)
!10478 = distinct !DISubprogram(name: "op_iter_init", scope: !8930, file: !8930, line: 742, type: !10479, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10479 = !DISubroutineType(types: !10480)
!10480 = !{null, !10196, !1589, !1679}
!10481 = !DILocalVariable(name: "ptr", arg: 1, scope: !10478, file: !8930, line: 742, type: !10196)
!10482 = !DILocation(line: 742, column: 28, scope: !10478)
!10483 = !DILocalVariable(name: "stmt", arg: 2, scope: !10478, file: !8930, line: 742, type: !1589)
!10484 = !DILocation(line: 742, column: 40, scope: !10478)
!10485 = !DILocalVariable(name: "flags", arg: 3, scope: !10478, file: !8930, line: 742, type: !1679)
!10486 = !DILocation(line: 742, column: 50, scope: !10478)
!10487 = !DILocation(line: 746, column: 3, scope: !10478)
!10488 = !DILocation(line: 748, column: 16, scope: !10478)
!10489 = !DILocation(line: 748, column: 22, scope: !10478)
!10490 = !DILocation(line: 748, column: 15, scope: !10478)
!10491 = !DILocation(line: 748, column: 68, scope: !10478)
!10492 = !DILocation(line: 748, column: 52, scope: !10478)
!10493 = !DILocation(line: 748, column: 3, scope: !10478)
!10494 = !DILocation(line: 748, column: 8, scope: !10478)
!10495 = !DILocation(line: 748, column: 13, scope: !10478)
!10496 = !DILocation(line: 749, column: 9, scope: !10497)
!10497 = distinct !DILexicalBlock(scope: !10478, file: !8930, line: 749, column: 7)
!10498 = !DILocation(line: 749, column: 15, scope: !10497)
!10499 = !DILocation(line: 750, column: 7, scope: !10497)
!10500 = !DILocation(line: 750, column: 10, scope: !10497)
!10501 = !DILocation(line: 750, column: 15, scope: !10497)
!10502 = !DILocation(line: 751, column: 7, scope: !10497)
!10503 = !DILocation(line: 751, column: 23, scope: !10497)
!10504 = !DILocation(line: 751, column: 10, scope: !10497)
!10505 = !DILocation(line: 751, column: 29, scope: !10497)
!10506 = !DILocation(line: 749, column: 7, scope: !10478)
!10507 = !DILocation(line: 752, column: 17, scope: !10497)
!10508 = !DILocation(line: 752, column: 22, scope: !10497)
!10509 = !DILocation(line: 752, column: 28, scope: !10497)
!10510 = !DILocation(line: 752, column: 5, scope: !10497)
!10511 = !DILocation(line: 752, column: 10, scope: !10497)
!10512 = !DILocation(line: 752, column: 15, scope: !10497)
!10513 = !DILocation(line: 753, column: 16, scope: !10478)
!10514 = !DILocation(line: 753, column: 22, scope: !10478)
!10515 = !DILocation(line: 753, column: 15, scope: !10478)
!10516 = !DILocation(line: 753, column: 68, scope: !10478)
!10517 = !DILocation(line: 753, column: 52, scope: !10478)
!10518 = !DILocation(line: 753, column: 3, scope: !10478)
!10519 = !DILocation(line: 753, column: 8, scope: !10478)
!10520 = !DILocation(line: 753, column: 13, scope: !10478)
!10521 = !DILocation(line: 754, column: 9, scope: !10522)
!10522 = distinct !DILexicalBlock(scope: !10478, file: !8930, line: 754, column: 7)
!10523 = !DILocation(line: 754, column: 15, scope: !10522)
!10524 = !DILocation(line: 755, column: 7, scope: !10522)
!10525 = !DILocation(line: 755, column: 10, scope: !10522)
!10526 = !DILocation(line: 755, column: 15, scope: !10522)
!10527 = !DILocation(line: 756, column: 7, scope: !10522)
!10528 = !DILocation(line: 756, column: 23, scope: !10522)
!10529 = !DILocation(line: 756, column: 10, scope: !10522)
!10530 = !DILocation(line: 756, column: 29, scope: !10522)
!10531 = !DILocation(line: 754, column: 7, scope: !10478)
!10532 = !DILocation(line: 757, column: 17, scope: !10522)
!10533 = !DILocation(line: 757, column: 22, scope: !10522)
!10534 = !DILocation(line: 757, column: 28, scope: !10522)
!10535 = !DILocation(line: 757, column: 5, scope: !10522)
!10536 = !DILocation(line: 757, column: 10, scope: !10522)
!10537 = !DILocation(line: 757, column: 15, scope: !10522)
!10538 = !DILocation(line: 758, column: 3, scope: !10478)
!10539 = !DILocation(line: 758, column: 8, scope: !10478)
!10540 = !DILocation(line: 758, column: 13, scope: !10478)
!10541 = !DILocation(line: 760, column: 3, scope: !10478)
!10542 = !DILocation(line: 760, column: 8, scope: !10478)
!10543 = !DILocation(line: 760, column: 14, scope: !10478)
!10544 = !DILocation(line: 761, column: 3, scope: !10478)
!10545 = !DILocation(line: 761, column: 8, scope: !10478)
!10546 = !DILocation(line: 761, column: 16, scope: !10478)
!10547 = !DILocation(line: 762, column: 3, scope: !10478)
!10548 = !DILocation(line: 762, column: 8, scope: !10478)
!10549 = !DILocation(line: 762, column: 17, scope: !10478)
!10550 = !DILocation(line: 763, column: 1, scope: !10478)
!10551 = distinct !DISubprogram(name: "gimple_def_ops", scope: !591, file: !591, line: 1292, type: !10552, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10552 = !DISubroutineType(types: !10553)
!10553 = !{!2280, !3387}
!10554 = !DILocalVariable(name: "g", arg: 1, scope: !10551, file: !591, line: 1292, type: !3387)
!10555 = !DILocation(line: 1292, column: 30, scope: !10551)
!10556 = !DILocation(line: 1294, column: 24, scope: !10557)
!10557 = distinct !DILexicalBlock(scope: !10551, file: !591, line: 1294, column: 7)
!10558 = !DILocation(line: 1294, column: 8, scope: !10557)
!10559 = !DILocation(line: 1294, column: 7, scope: !10551)
!10560 = !DILocation(line: 1295, column: 5, scope: !10557)
!10561 = !DILocation(line: 1296, column: 10, scope: !10551)
!10562 = !DILocation(line: 1296, column: 13, scope: !10551)
!10563 = !DILocation(line: 1296, column: 19, scope: !10551)
!10564 = !DILocation(line: 1296, column: 26, scope: !10551)
!10565 = !DILocation(line: 1296, column: 3, scope: !10551)
!10566 = !DILocation(line: 1297, column: 1, scope: !10551)
!10567 = distinct !DISubprogram(name: "gimple_vdef", scope: !591, file: !591, line: 1375, type: !5000, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10568 = !DILocalVariable(name: "g", arg: 1, scope: !10567, file: !591, line: 1375, type: !3387)
!10569 = !DILocation(line: 1375, column: 27, scope: !10567)
!10570 = !DILocation(line: 1377, column: 28, scope: !10571)
!10571 = distinct !DILexicalBlock(scope: !10567, file: !591, line: 1377, column: 7)
!10572 = !DILocation(line: 1377, column: 8, scope: !10571)
!10573 = !DILocation(line: 1377, column: 7, scope: !10567)
!10574 = !DILocation(line: 1378, column: 5, scope: !10571)
!10575 = !DILocation(line: 1379, column: 10, scope: !10567)
!10576 = !DILocation(line: 1379, column: 13, scope: !10567)
!10577 = !DILocation(line: 1379, column: 23, scope: !10567)
!10578 = !DILocation(line: 1379, column: 3, scope: !10567)
!10579 = !DILocation(line: 1380, column: 1, scope: !10567)
!10580 = distinct !DISubprogram(name: "gimple_use_ops", scope: !591, file: !591, line: 1313, type: !10581, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10581 = !DISubroutineType(types: !10582)
!10582 = !{!2287, !3387}
!10583 = !DILocalVariable(name: "g", arg: 1, scope: !10580, file: !591, line: 1313, type: !3387)
!10584 = !DILocation(line: 1313, column: 30, scope: !10580)
!10585 = !DILocation(line: 1315, column: 24, scope: !10586)
!10586 = distinct !DILexicalBlock(scope: !10580, file: !591, line: 1315, column: 7)
!10587 = !DILocation(line: 1315, column: 8, scope: !10586)
!10588 = !DILocation(line: 1315, column: 7, scope: !10580)
!10589 = !DILocation(line: 1316, column: 5, scope: !10586)
!10590 = !DILocation(line: 1317, column: 10, scope: !10580)
!10591 = !DILocation(line: 1317, column: 13, scope: !10580)
!10592 = !DILocation(line: 1317, column: 19, scope: !10580)
!10593 = !DILocation(line: 1317, column: 26, scope: !10580)
!10594 = !DILocation(line: 1317, column: 3, scope: !10580)
!10595 = !DILocation(line: 1318, column: 1, scope: !10580)
!10596 = distinct !DISubprogram(name: "gimple_vuse", scope: !591, file: !591, line: 1365, type: !5000, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10597 = !DILocalVariable(name: "g", arg: 1, scope: !10596, file: !591, line: 1365, type: !3387)
!10598 = !DILocation(line: 1365, column: 27, scope: !10596)
!10599 = !DILocation(line: 1367, column: 28, scope: !10600)
!10600 = distinct !DILexicalBlock(scope: !10596, file: !591, line: 1367, column: 7)
!10601 = !DILocation(line: 1367, column: 8, scope: !10600)
!10602 = !DILocation(line: 1367, column: 7, scope: !10596)
!10603 = !DILocation(line: 1368, column: 5, scope: !10600)
!10604 = !DILocation(line: 1369, column: 10, scope: !10596)
!10605 = !DILocation(line: 1369, column: 13, scope: !10596)
!10606 = !DILocation(line: 1369, column: 23, scope: !10596)
!10607 = !DILocation(line: 1369, column: 3, scope: !10596)
!10608 = !DILocation(line: 1370, column: 1, scope: !10596)
!10609 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !591, file: !591, line: 1283, type: !4067, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10610 = !DILocalVariable(name: "g", arg: 1, scope: !10609, file: !591, line: 1283, type: !3387)
!10611 = !DILocation(line: 1283, column: 34, scope: !10609)
!10612 = !DILocation(line: 1285, column: 23, scope: !10609)
!10613 = !DILocation(line: 1285, column: 10, scope: !10609)
!10614 = !DILocation(line: 1285, column: 26, scope: !10609)
!10615 = !DILocation(line: 1285, column: 43, scope: !10609)
!10616 = !DILocation(line: 1285, column: 59, scope: !10609)
!10617 = !DILocation(line: 1285, column: 46, scope: !10609)
!10618 = !DILocation(line: 1285, column: 62, scope: !10609)
!10619 = !DILocation(line: 0, scope: !10609)
!10620 = !DILocation(line: 1285, column: 3, scope: !10609)
!10621 = distinct !DISubprogram(name: "link_imm_use", scope: !8930, file: !8930, line: 214, type: !10622, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10622 = !DISubroutineType(types: !10623)
!10623 = !{null, !3049, !1777}
!10624 = !DILocalVariable(name: "linknode", arg: 1, scope: !10621, file: !8930, line: 214, type: !3049)
!10625 = !DILocation(line: 214, column: 34, scope: !10621)
!10626 = !DILocalVariable(name: "def", arg: 2, scope: !10621, file: !8930, line: 214, type: !1777)
!10627 = !DILocation(line: 214, column: 49, scope: !10621)
!10628 = !DILocalVariable(name: "root", scope: !10621, file: !8930, line: 216, type: !3049)
!10629 = !DILocation(line: 216, column: 22, scope: !10621)
!10630 = !DILocation(line: 218, column: 8, scope: !10631)
!10631 = distinct !DILexicalBlock(scope: !10621, file: !8930, line: 218, column: 7)
!10632 = !DILocation(line: 218, column: 12, scope: !10631)
!10633 = !DILocation(line: 218, column: 15, scope: !10631)
!10634 = !DILocation(line: 218, column: 31, scope: !10631)
!10635 = !DILocation(line: 218, column: 7, scope: !10621)
!10636 = !DILocation(line: 219, column: 5, scope: !10631)
!10637 = !DILocation(line: 219, column: 15, scope: !10631)
!10638 = !DILocation(line: 219, column: 20, scope: !10631)
!10639 = !DILocation(line: 222, column: 16, scope: !10640)
!10640 = distinct !DILexicalBlock(scope: !10631, file: !8930, line: 221, column: 5)
!10641 = !DILocation(line: 222, column: 12, scope: !10640)
!10642 = !DILocation(line: 227, column: 29, scope: !10640)
!10643 = !DILocation(line: 227, column: 39, scope: !10640)
!10644 = !DILocation(line: 227, column: 7, scope: !10640)
!10645 = !DILocation(line: 229, column: 1, scope: !10621)
!10646 = distinct !DISubprogram(name: "cleanup_empty_eh", scope: !3, file: !3, line: 3692, type: !9591, scopeLine: 3693, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10647 = !DILocalVariable(name: "lp", arg: 1, scope: !10646, file: !3, line: 3692, type: !2111)
!10648 = !DILocation(line: 3692, column: 34, scope: !10646)
!10649 = !DILocalVariable(name: "bb", scope: !10646, file: !3, line: 3694, type: !2200)
!10650 = !DILocation(line: 3694, column: 15, scope: !10646)
!10651 = !DILocation(line: 3694, column: 20, scope: !10646)
!10652 = !DILocalVariable(name: "gsi", scope: !10646, file: !3, line: 3695, type: !4816)
!10653 = !DILocation(line: 3695, column: 24, scope: !10646)
!10654 = !DILocalVariable(name: "resx", scope: !10646, file: !3, line: 3696, type: !1589)
!10655 = !DILocation(line: 3696, column: 10, scope: !10646)
!10656 = !DILocalVariable(name: "new_region", scope: !10646, file: !3, line: 3697, type: !2037)
!10657 = !DILocation(line: 3697, column: 13, scope: !10646)
!10658 = !DILocalVariable(name: "ei", scope: !10646, file: !3, line: 3698, type: !3477)
!10659 = !DILocation(line: 3698, column: 17, scope: !10646)
!10660 = !DILocalVariable(name: "e", scope: !10646, file: !3, line: 3699, type: !1630)
!10661 = !DILocation(line: 3699, column: 8, scope: !10646)
!10662 = !DILocalVariable(name: "e_out", scope: !10646, file: !3, line: 3699, type: !1630)
!10663 = !DILocation(line: 3699, column: 11, scope: !10646)
!10664 = !DILocalVariable(name: "has_non_eh_pred", scope: !10646, file: !3, line: 3700, type: !1890)
!10665 = !DILocation(line: 3700, column: 8, scope: !10646)
!10666 = !DILocalVariable(name: "new_lp_nr", scope: !10646, file: !3, line: 3701, type: !1679)
!10667 = !DILocation(line: 3701, column: 7, scope: !10646)
!10668 = !DILocation(line: 3704, column: 11, scope: !10646)
!10669 = !DILocation(line: 3704, column: 3, scope: !10646)
!10670 = !DILocation(line: 3707, column: 13, scope: !10671)
!10671 = distinct !DILexicalBlock(scope: !10646, file: !3, line: 3705, column: 5)
!10672 = !DILocation(line: 3708, column: 7, scope: !10671)
!10673 = !DILocation(line: 3710, column: 15, scope: !10671)
!10674 = !DILocation(line: 3710, column: 13, scope: !10671)
!10675 = !DILocation(line: 3711, column: 7, scope: !10671)
!10676 = !DILocation(line: 3713, column: 7, scope: !10671)
!10677 = !DILocation(line: 3715, column: 27, scope: !10646)
!10678 = !DILocation(line: 3715, column: 9, scope: !10646)
!10679 = !DILocation(line: 3718, column: 8, scope: !10680)
!10680 = distinct !DILexicalBlock(scope: !10646, file: !3, line: 3718, column: 7)
!10681 = !DILocation(line: 3718, column: 24, scope: !10680)
!10682 = !DILocation(line: 3718, column: 44, scope: !10680)
!10683 = !DILocation(line: 3718, column: 27, scope: !10680)
!10684 = !DILocation(line: 3718, column: 7, scope: !10646)
!10685 = !DILocation(line: 3719, column: 5, scope: !10680)
!10686 = !DILocation(line: 3722, column: 7, scope: !10687)
!10687 = distinct !DILexicalBlock(scope: !10646, file: !3, line: 3722, column: 7)
!10688 = !DILocation(line: 3722, column: 7, scope: !10646)
!10689 = !DILocation(line: 3723, column: 38, scope: !10687)
!10690 = !DILocation(line: 3723, column: 42, scope: !10687)
!10691 = !DILocation(line: 3723, column: 49, scope: !10687)
!10692 = !DILocation(line: 3723, column: 12, scope: !10687)
!10693 = !DILocation(line: 3723, column: 5, scope: !10687)
!10694 = !DILocation(line: 3726, column: 10, scope: !10646)
!10695 = !DILocation(line: 3726, column: 8, scope: !10646)
!10696 = !DILocation(line: 3727, column: 24, scope: !10697)
!10697 = distinct !DILexicalBlock(scope: !10646, file: !3, line: 3727, column: 7)
!10698 = !DILocation(line: 3727, column: 8, scope: !10697)
!10699 = !DILocation(line: 3727, column: 7, scope: !10646)
!10700 = !DILocation(line: 3728, column: 5, scope: !10697)
!10701 = !DILocation(line: 3729, column: 3, scope: !10646)
!10702 = !DILocation(line: 3732, column: 19, scope: !10646)
!10703 = !DILocation(line: 3733, column: 3, scope: !10704)
!10704 = distinct !DILexicalBlock(scope: !10646, file: !3, line: 3733, column: 3)
!10705 = !DILocation(line: 3733, column: 3, scope: !10706)
!10706 = distinct !DILexicalBlock(scope: !10704, file: !3, line: 3733, column: 3)
!10707 = !DILocation(line: 3734, column: 11, scope: !10708)
!10708 = distinct !DILexicalBlock(scope: !10706, file: !3, line: 3734, column: 9)
!10709 = !DILocation(line: 3734, column: 14, scope: !10708)
!10710 = !DILocation(line: 3734, column: 20, scope: !10708)
!10711 = !DILocation(line: 3734, column: 9, scope: !10706)
!10712 = !DILocation(line: 3735, column: 23, scope: !10708)
!10713 = !DILocation(line: 3735, column: 7, scope: !10708)
!10714 = !DILocation(line: 3734, column: 29, scope: !10708)
!10715 = distinct !{!10715, !10703, !10716}
!10716 = !DILocation(line: 3735, column: 25, scope: !10704)
!10717 = !DILocation(line: 3739, column: 34, scope: !10646)
!10718 = !DILocation(line: 3739, column: 15, scope: !10646)
!10719 = !DILocation(line: 3739, column: 13, scope: !10646)
!10720 = !DILocation(line: 3740, column: 46, scope: !10646)
!10721 = !DILocation(line: 3740, column: 16, scope: !10646)
!10722 = !DILocation(line: 3740, column: 14, scope: !10646)
!10723 = !DILocation(line: 3746, column: 7, scope: !10724)
!10724 = distinct !DILexicalBlock(scope: !10646, file: !3, line: 3746, column: 7)
!10725 = !DILocation(line: 3746, column: 18, scope: !10724)
!10726 = !DILocation(line: 3746, column: 7, scope: !10646)
!10727 = !DILocation(line: 3748, column: 7, scope: !10728)
!10728 = distinct !DILexicalBlock(scope: !10724, file: !3, line: 3747, column: 5)
!10729 = !DILocation(line: 3749, column: 17, scope: !10730)
!10730 = distinct !DILexicalBlock(scope: !10728, file: !3, line: 3749, column: 7)
!10731 = !DILocation(line: 3749, column: 12, scope: !10730)
!10732 = !DILocation(line: 3749, column: 44, scope: !10733)
!10733 = distinct !DILexicalBlock(scope: !10730, file: !3, line: 3749, column: 7)
!10734 = !DILocation(line: 3749, column: 42, scope: !10733)
!10735 = !DILocation(line: 3749, column: 7, scope: !10730)
!10736 = !DILocation(line: 3750, column: 6, scope: !10737)
!10737 = distinct !DILexicalBlock(scope: !10733, file: !3, line: 3750, column: 6)
!10738 = !DILocation(line: 3750, column: 9, scope: !10737)
!10739 = !DILocation(line: 3750, column: 15, scope: !10737)
!10740 = !DILocation(line: 3750, column: 6, scope: !10733)
!10741 = !DILocalVariable(name: "stmt", scope: !10742, file: !3, line: 3752, type: !1589)
!10742 = distinct !DILexicalBlock(scope: !10737, file: !3, line: 3751, column: 4)
!10743 = !DILocation(line: 3752, column: 13, scope: !10742)
!10744 = !DILocation(line: 3752, column: 31, scope: !10742)
!10745 = !DILocation(line: 3752, column: 34, scope: !10742)
!10746 = !DILocation(line: 3752, column: 20, scope: !10742)
!10747 = !DILocation(line: 3753, column: 30, scope: !10742)
!10748 = !DILocation(line: 3753, column: 6, scope: !10742)
!10749 = !DILocation(line: 3754, column: 19, scope: !10742)
!10750 = !DILocation(line: 3754, column: 6, scope: !10742)
!10751 = !DILocation(line: 3755, column: 4, scope: !10742)
!10752 = !DILocation(line: 3757, column: 4, scope: !10737)
!10753 = !DILocation(line: 3749, column: 7, scope: !10733)
!10754 = distinct !{!10754, !10735, !10755}
!10755 = !DILocation(line: 3757, column: 16, scope: !10730)
!10756 = !DILocation(line: 3758, column: 7, scope: !10728)
!10757 = !DILocation(line: 3763, column: 7, scope: !10758)
!10758 = distinct !DILexicalBlock(scope: !10646, file: !3, line: 3763, column: 7)
!10759 = !DILocation(line: 3763, column: 19, scope: !10758)
!10760 = !DILocation(line: 3763, column: 24, scope: !10758)
!10761 = !DILocation(line: 3763, column: 7, scope: !10646)
!10762 = !DILocation(line: 3765, column: 17, scope: !10763)
!10763 = distinct !DILexicalBlock(scope: !10764, file: !3, line: 3765, column: 7)
!10764 = distinct !DILexicalBlock(scope: !10758, file: !3, line: 3764, column: 5)
!10765 = !DILocation(line: 3765, column: 12, scope: !10763)
!10766 = !DILocation(line: 3765, column: 44, scope: !10767)
!10767 = distinct !DILexicalBlock(scope: !10763, file: !3, line: 3765, column: 7)
!10768 = !DILocation(line: 3765, column: 42, scope: !10767)
!10769 = !DILocation(line: 3765, column: 7, scope: !10763)
!10770 = !DILocation(line: 3766, column: 6, scope: !10771)
!10771 = distinct !DILexicalBlock(scope: !10767, file: !3, line: 3766, column: 6)
!10772 = !DILocation(line: 3766, column: 9, scope: !10771)
!10773 = !DILocation(line: 3766, column: 15, scope: !10771)
!10774 = !DILocation(line: 3766, column: 6, scope: !10767)
!10775 = !DILocalVariable(name: "stmt", scope: !10776, file: !3, line: 3768, type: !1589)
!10776 = distinct !DILexicalBlock(scope: !10771, file: !3, line: 3767, column: 4)
!10777 = !DILocation(line: 3768, column: 13, scope: !10776)
!10778 = !DILocation(line: 3768, column: 31, scope: !10776)
!10779 = !DILocation(line: 3768, column: 34, scope: !10776)
!10780 = !DILocation(line: 3768, column: 20, scope: !10776)
!10781 = !DILocation(line: 3769, column: 30, scope: !10776)
!10782 = !DILocation(line: 3769, column: 6, scope: !10776)
!10783 = !DILocation(line: 3770, column: 25, scope: !10776)
!10784 = !DILocation(line: 3770, column: 31, scope: !10776)
!10785 = !DILocation(line: 3770, column: 6, scope: !10776)
!10786 = !DILocation(line: 3771, column: 19, scope: !10776)
!10787 = !DILocation(line: 3771, column: 6, scope: !10776)
!10788 = !DILocation(line: 3772, column: 4, scope: !10776)
!10789 = !DILocation(line: 3774, column: 4, scope: !10771)
!10790 = !DILocation(line: 3765, column: 7, scope: !10767)
!10791 = distinct !{!10791, !10769, !10792}
!10792 = !DILocation(line: 3774, column: 16, scope: !10763)
!10793 = !DILocation(line: 3775, column: 7, scope: !10764)
!10794 = !DILocation(line: 3782, column: 36, scope: !10795)
!10795 = distinct !DILexicalBlock(scope: !10646, file: !3, line: 3782, column: 7)
!10796 = !DILocation(line: 3782, column: 43, scope: !10795)
!10797 = !DILocation(line: 3782, column: 49, scope: !10795)
!10798 = !DILocation(line: 3782, column: 53, scope: !10795)
!10799 = !DILocation(line: 3782, column: 7, scope: !10795)
!10800 = !DILocation(line: 3782, column: 7, scope: !10646)
!10801 = !DILocation(line: 3783, column: 5, scope: !10795)
!10802 = !DILocation(line: 3792, column: 8, scope: !10803)
!10803 = distinct !DILexicalBlock(scope: !10646, file: !3, line: 3792, column: 7)
!10804 = !DILocation(line: 3792, column: 7, scope: !10646)
!10805 = !DILocation(line: 3794, column: 33, scope: !10806)
!10806 = distinct !DILexicalBlock(scope: !10803, file: !3, line: 3793, column: 5)
!10807 = !DILocation(line: 3794, column: 37, scope: !10806)
!10808 = !DILocation(line: 3794, column: 44, scope: !10806)
!10809 = !DILocation(line: 3794, column: 48, scope: !10806)
!10810 = !DILocation(line: 3794, column: 7, scope: !10806)
!10811 = !DILocation(line: 3795, column: 11, scope: !10812)
!10812 = distinct !DILexicalBlock(scope: !10806, file: !3, line: 3795, column: 11)
!10813 = !DILocation(line: 3795, column: 21, scope: !10812)
!10814 = !DILocation(line: 3795, column: 25, scope: !10812)
!10815 = !DILocation(line: 3795, column: 36, scope: !10812)
!10816 = !DILocation(line: 3795, column: 11, scope: !10806)
!10817 = !DILocation(line: 3796, column: 11, scope: !10812)
!10818 = !DILocation(line: 3797, column: 4, scope: !10812)
!10819 = !DILocation(line: 3797, column: 8, scope: !10812)
!10820 = !DILocation(line: 3797, column: 15, scope: !10812)
!10821 = !DILocation(line: 3797, column: 27, scope: !10812)
!10822 = !DILocation(line: 3796, column: 2, scope: !10812)
!10823 = !DILocation(line: 3801, column: 7, scope: !10806)
!10824 = !DILocation(line: 3804, column: 3, scope: !10646)
!10825 = !DILabel(scope: !10646, name: "succeed", file: !3, line: 3806)
!10826 = !DILocation(line: 3806, column: 2, scope: !10646)
!10827 = !DILocation(line: 3807, column: 7, scope: !10828)
!10828 = distinct !DILexicalBlock(scope: !10646, file: !3, line: 3807, column: 7)
!10829 = !DILocation(line: 3807, column: 17, scope: !10828)
!10830 = !DILocation(line: 3807, column: 21, scope: !10828)
!10831 = !DILocation(line: 3807, column: 32, scope: !10828)
!10832 = !DILocation(line: 3807, column: 7, scope: !10646)
!10833 = !DILocation(line: 3808, column: 14, scope: !10828)
!10834 = !DILocation(line: 3808, column: 59, scope: !10828)
!10835 = !DILocation(line: 3808, column: 63, scope: !10828)
!10836 = !DILocation(line: 3808, column: 5, scope: !10828)
!10837 = !DILocation(line: 3809, column: 26, scope: !10646)
!10838 = !DILocation(line: 3809, column: 3, scope: !10646)
!10839 = !DILocation(line: 3810, column: 3, scope: !10646)
!10840 = !DILocation(line: 3811, column: 1, scope: !10646)
!10841 = distinct !DISubprogram(name: "cleanup_empty_eh_unsplit", scope: !3, file: !3, line: 3646, type: !10842, scopeLine: 3647, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10842 = !DISubroutineType(types: !10843)
!10843 = !{!1890, !2200, !1630, !2111}
!10844 = !DILocalVariable(name: "bb", arg: 1, scope: !10841, file: !3, line: 3646, type: !2200)
!10845 = !DILocation(line: 3646, column: 39, scope: !10841)
!10846 = !DILocalVariable(name: "e_out", arg: 2, scope: !10841, file: !3, line: 3646, type: !1630)
!10847 = !DILocation(line: 3646, column: 48, scope: !10841)
!10848 = !DILocalVariable(name: "lp", arg: 3, scope: !10841, file: !3, line: 3646, type: !2111)
!10849 = !DILocation(line: 3646, column: 70, scope: !10841)
!10850 = !DILocalVariable(name: "gsi", scope: !10841, file: !3, line: 3648, type: !4816)
!10851 = !DILocation(line: 3648, column: 24, scope: !10841)
!10852 = !DILocalVariable(name: "lab", scope: !10841, file: !3, line: 3649, type: !1777)
!10853 = !DILocation(line: 3649, column: 8, scope: !10841)
!10854 = !DILocation(line: 3654, column: 3, scope: !10841)
!10855 = !DILocation(line: 3658, column: 7, scope: !10841)
!10856 = !DILocation(line: 3659, column: 28, scope: !10857)
!10857 = distinct !DILexicalBlock(scope: !10841, file: !3, line: 3659, column: 3)
!10858 = !DILocation(line: 3659, column: 35, scope: !10857)
!10859 = !DILocation(line: 3659, column: 14, scope: !10857)
!10860 = !DILocation(line: 3659, column: 8, scope: !10857)
!10861 = !DILocation(line: 3659, column: 43, scope: !10862)
!10862 = distinct !DILexicalBlock(scope: !10857, file: !3, line: 3659, column: 3)
!10863 = !DILocation(line: 3659, column: 42, scope: !10862)
!10864 = !DILocation(line: 3659, column: 3, scope: !10857)
!10865 = !DILocalVariable(name: "stmt", scope: !10866, file: !3, line: 3661, type: !1589)
!10866 = distinct !DILexicalBlock(scope: !10862, file: !3, line: 3660, column: 5)
!10867 = !DILocation(line: 3661, column: 14, scope: !10866)
!10868 = !DILocation(line: 3661, column: 21, scope: !10866)
!10869 = !DILocalVariable(name: "lp_nr", scope: !10866, file: !3, line: 3662, type: !1679)
!10870 = !DILocation(line: 3662, column: 11, scope: !10866)
!10871 = !DILocation(line: 3664, column: 24, scope: !10872)
!10872 = distinct !DILexicalBlock(scope: !10866, file: !3, line: 3664, column: 11)
!10873 = !DILocation(line: 3664, column: 11, scope: !10872)
!10874 = !DILocation(line: 3664, column: 30, scope: !10872)
!10875 = !DILocation(line: 3664, column: 11, scope: !10866)
!10876 = !DILocation(line: 3665, column: 2, scope: !10872)
!10877 = !DILocation(line: 3666, column: 33, scope: !10866)
!10878 = !DILocation(line: 3666, column: 13, scope: !10866)
!10879 = !DILocation(line: 3666, column: 11, scope: !10866)
!10880 = !DILocation(line: 3667, column: 15, scope: !10866)
!10881 = !DILocation(line: 3667, column: 13, scope: !10866)
!10882 = !DILocation(line: 3668, column: 11, scope: !10883)
!10883 = distinct !DILexicalBlock(scope: !10866, file: !3, line: 3668, column: 11)
!10884 = !DILocation(line: 3668, column: 17, scope: !10883)
!10885 = !DILocation(line: 3668, column: 50, scope: !10883)
!10886 = !DILocation(line: 3668, column: 20, scope: !10883)
!10887 = !DILocation(line: 3668, column: 60, scope: !10883)
!10888 = !DILocation(line: 3668, column: 64, scope: !10883)
!10889 = !DILocation(line: 3668, column: 57, scope: !10883)
!10890 = !DILocation(line: 3668, column: 11, scope: !10866)
!10891 = !DILocation(line: 3669, column: 2, scope: !10883)
!10892 = !DILocation(line: 3670, column: 5, scope: !10866)
!10893 = !DILocation(line: 3659, column: 60, scope: !10862)
!10894 = !DILocation(line: 3659, column: 3, scope: !10862)
!10895 = distinct !{!10895, !10864, !10896}
!10896 = !DILocation(line: 3670, column: 5, scope: !10857)
!10897 = !DILocation(line: 3673, column: 36, scope: !10898)
!10898 = distinct !DILexicalBlock(scope: !10841, file: !3, line: 3673, column: 7)
!10899 = !DILocation(line: 3673, column: 43, scope: !10898)
!10900 = !DILocation(line: 3673, column: 49, scope: !10898)
!10901 = !DILocation(line: 3673, column: 53, scope: !10898)
!10902 = !DILocation(line: 3673, column: 7, scope: !10898)
!10903 = !DILocation(line: 3673, column: 7, scope: !10841)
!10904 = !DILocation(line: 3675, column: 11, scope: !10905)
!10905 = distinct !DILexicalBlock(scope: !10906, file: !3, line: 3675, column: 11)
!10906 = distinct !DILexicalBlock(scope: !10898, file: !3, line: 3674, column: 5)
!10907 = !DILocation(line: 3675, column: 21, scope: !10905)
!10908 = !DILocation(line: 3675, column: 25, scope: !10905)
!10909 = !DILocation(line: 3675, column: 36, scope: !10905)
!10910 = !DILocation(line: 3675, column: 11, scope: !10906)
!10911 = !DILocation(line: 3676, column: 11, scope: !10905)
!10912 = !DILocation(line: 3679, column: 4, scope: !10905)
!10913 = !DILocation(line: 3679, column: 8, scope: !10905)
!10914 = !DILocation(line: 3679, column: 15, scope: !10905)
!10915 = !DILocation(line: 3679, column: 22, scope: !10905)
!10916 = !DILocation(line: 3679, column: 28, scope: !10905)
!10917 = !DILocation(line: 3676, column: 2, scope: !10905)
!10918 = !DILocation(line: 3680, column: 7, scope: !10906)
!10919 = !DILocation(line: 3683, column: 3, scope: !10841)
!10920 = !DILocation(line: 3684, column: 1, scope: !10841)
!10921 = distinct !DISubprogram(name: "ei_safe_edge", scope: !369, file: !369, line: 761, type: !10922, scopeLine: 762, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10922 = !DISubroutineType(types: !10923)
!10923 = !{!1630, !3477}
!10924 = !DILocalVariable(name: "i", arg: 1, scope: !10921, file: !369, line: 761, type: !3477)
!10925 = !DILocation(line: 761, column: 29, scope: !10921)
!10926 = !DILocation(line: 763, column: 11, scope: !10921)
!10927 = !DILocation(line: 763, column: 10, scope: !10921)
!10928 = !DILocation(line: 763, column: 26, scope: !10921)
!10929 = !DILocation(line: 763, column: 3, scope: !10921)
!10930 = distinct !DISubprogram(name: "cleanup_empty_eh_merge_phis", scope: !3, file: !3, line: 3493, type: !10931, scopeLine: 3495, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!10931 = !DISubroutineType(types: !10932)
!10932 = !{!1890, !2200, !2200, !1630, !1890}
!10933 = !DILocalVariable(name: "new_bb", arg: 1, scope: !10930, file: !3, line: 3493, type: !2200)
!10934 = !DILocation(line: 3493, column: 42, scope: !10930)
!10935 = !DILocalVariable(name: "old_bb", arg: 2, scope: !10930, file: !3, line: 3493, type: !2200)
!10936 = !DILocation(line: 3493, column: 62, scope: !10930)
!10937 = !DILocalVariable(name: "old_bb_out", arg: 3, scope: !10930, file: !3, line: 3494, type: !1630)
!10938 = !DILocation(line: 3494, column: 14, scope: !10930)
!10939 = !DILocalVariable(name: "change_region", arg: 4, scope: !10930, file: !3, line: 3494, type: !1890)
!10940 = !DILocation(line: 3494, column: 31, scope: !10930)
!10941 = !DILocalVariable(name: "ngsi", scope: !10930, file: !3, line: 3496, type: !4816)
!10942 = !DILocation(line: 3496, column: 24, scope: !10930)
!10943 = !DILocalVariable(name: "ogsi", scope: !10930, file: !3, line: 3496, type: !4816)
!10944 = !DILocation(line: 3496, column: 30, scope: !10930)
!10945 = !DILocalVariable(name: "ei", scope: !10930, file: !3, line: 3497, type: !3477)
!10946 = !DILocation(line: 3497, column: 17, scope: !10930)
!10947 = !DILocalVariable(name: "e", scope: !10930, file: !3, line: 3498, type: !1630)
!10948 = !DILocation(line: 3498, column: 8, scope: !10930)
!10949 = !DILocalVariable(name: "rename_virts", scope: !10930, file: !3, line: 3499, type: !2258)
!10950 = !DILocation(line: 3499, column: 10, scope: !10930)
!10951 = !DILocalVariable(name: "ophi_handled", scope: !10930, file: !3, line: 3500, type: !2258)
!10952 = !DILocation(line: 3500, column: 10, scope: !10930)
!10953 = !DILocation(line: 3502, column: 3, scope: !10954)
!10954 = distinct !DILexicalBlock(scope: !10930, file: !3, line: 3502, column: 3)
!10955 = !DILocation(line: 3502, column: 3, scope: !10956)
!10956 = distinct !DILexicalBlock(scope: !10954, file: !3, line: 3502, column: 3)
!10957 = !DILocation(line: 3503, column: 34, scope: !10956)
!10958 = !DILocation(line: 3503, column: 5, scope: !10956)
!10959 = distinct !{!10959, !10953, !10960}
!10960 = !DILocation(line: 3503, column: 35, scope: !10954)
!10961 = !DILocation(line: 3505, column: 18, scope: !10930)
!10962 = !DILocation(line: 3505, column: 16, scope: !10930)
!10963 = !DILocation(line: 3506, column: 18, scope: !10930)
!10964 = !DILocation(line: 3506, column: 16, scope: !10930)
!10965 = !DILocation(line: 3510, column: 31, scope: !10966)
!10966 = distinct !DILexicalBlock(scope: !10930, file: !3, line: 3510, column: 3)
!10967 = !DILocation(line: 3510, column: 15, scope: !10966)
!10968 = !DILocation(line: 3510, column: 8, scope: !10966)
!10969 = !DILocation(line: 3510, column: 41, scope: !10970)
!10970 = distinct !DILexicalBlock(scope: !10966, file: !3, line: 3510, column: 3)
!10971 = !DILocation(line: 3510, column: 40, scope: !10970)
!10972 = !DILocation(line: 3510, column: 3, scope: !10966)
!10973 = !DILocalVariable(name: "ophi", scope: !10974, file: !3, line: 3512, type: !1589)
!10974 = distinct !DILexicalBlock(scope: !10970, file: !3, line: 3511, column: 5)
!10975 = !DILocation(line: 3512, column: 14, scope: !10974)
!10976 = !DILocalVariable(name: "nphi", scope: !10974, file: !3, line: 3512, type: !1589)
!10977 = !DILocation(line: 3512, column: 20, scope: !10974)
!10978 = !DILocation(line: 3512, column: 27, scope: !10974)
!10979 = !DILocalVariable(name: "nresult", scope: !10974, file: !3, line: 3513, type: !1777)
!10980 = !DILocation(line: 3513, column: 12, scope: !10974)
!10981 = !DILocalVariable(name: "nop", scope: !10974, file: !3, line: 3513, type: !1777)
!10982 = !DILocation(line: 3513, column: 21, scope: !10974)
!10983 = !DILocation(line: 3515, column: 36, scope: !10974)
!10984 = !DILocation(line: 3515, column: 17, scope: !10974)
!10985 = !DILocation(line: 3515, column: 15, scope: !10974)
!10986 = !DILocation(line: 3516, column: 33, scope: !10974)
!10987 = !DILocation(line: 3516, column: 39, scope: !10974)
!10988 = !DILocation(line: 3516, column: 51, scope: !10974)
!10989 = !DILocation(line: 3516, column: 13, scope: !10974)
!10990 = !DILocation(line: 3516, column: 11, scope: !10974)
!10991 = !DILocation(line: 3520, column: 12, scope: !10974)
!10992 = !DILocation(line: 3521, column: 35, scope: !10993)
!10993 = distinct !DILexicalBlock(scope: !10974, file: !3, line: 3521, column: 7)
!10994 = !DILocation(line: 3521, column: 19, scope: !10993)
!10995 = !DILocation(line: 3521, column: 12, scope: !10993)
!10996 = !DILocation(line: 3521, column: 45, scope: !10997)
!10997 = distinct !DILexicalBlock(scope: !10993, file: !3, line: 3521, column: 7)
!10998 = !DILocation(line: 3521, column: 44, scope: !10997)
!10999 = !DILocation(line: 3521, column: 7, scope: !10993)
!11000 = !DILocation(line: 3523, column: 11, scope: !11001)
!11001 = distinct !DILexicalBlock(scope: !10997, file: !3, line: 3522, column: 2)
!11002 = !DILocation(line: 3523, column: 9, scope: !11001)
!11003 = !DILocation(line: 3524, column: 27, scope: !11004)
!11004 = distinct !DILexicalBlock(scope: !11001, file: !3, line: 3524, column: 8)
!11005 = !DILocation(line: 3524, column: 8, scope: !11004)
!11006 = !DILocation(line: 3524, column: 36, scope: !11004)
!11007 = !DILocation(line: 3524, column: 33, scope: !11004)
!11008 = !DILocation(line: 3524, column: 8, scope: !11001)
!11009 = !DILocation(line: 3525, column: 6, scope: !11004)
!11010 = !DILocation(line: 3526, column: 9, scope: !11001)
!11011 = !DILocation(line: 3527, column: 2, scope: !11001)
!11012 = !DILocation(line: 3521, column: 63, scope: !10997)
!11013 = !DILocation(line: 3521, column: 7, scope: !10997)
!11014 = distinct !{!11014, !10999, !11015}
!11015 = !DILocation(line: 3527, column: 2, scope: !10993)
!11016 = !DILocation(line: 3530, column: 11, scope: !11017)
!11017 = distinct !DILexicalBlock(scope: !10974, file: !3, line: 3530, column: 11)
!11018 = !DILocation(line: 3530, column: 11, scope: !10974)
!11019 = !DILocation(line: 3532, column: 20, scope: !11020)
!11020 = distinct !DILexicalBlock(scope: !11017, file: !3, line: 3531, column: 2)
!11021 = !DILocation(line: 3532, column: 34, scope: !11020)
!11022 = !DILocation(line: 3532, column: 4, scope: !11020)
!11023 = !DILocation(line: 3533, column: 4, scope: !11024)
!11024 = distinct !DILexicalBlock(scope: !11020, file: !3, line: 3533, column: 4)
!11025 = !DILocation(line: 3533, column: 4, scope: !11026)
!11026 = distinct !DILexicalBlock(scope: !11024, file: !3, line: 3533, column: 4)
!11027 = !DILocalVariable(name: "oloc", scope: !11028, file: !3, line: 3535, type: !1608)
!11028 = distinct !DILexicalBlock(scope: !11026, file: !3, line: 3534, column: 6)
!11029 = !DILocation(line: 3535, column: 19, scope: !11028)
!11030 = !DILocalVariable(name: "oop", scope: !11028, file: !3, line: 3536, type: !1777)
!11031 = !DILocation(line: 3536, column: 13, scope: !11028)
!11032 = !DILocation(line: 3538, column: 13, scope: !11033)
!11033 = distinct !DILexicalBlock(scope: !11028, file: !3, line: 3538, column: 12)
!11034 = !DILocation(line: 3538, column: 16, scope: !11033)
!11035 = !DILocation(line: 3538, column: 22, scope: !11033)
!11036 = !DILocation(line: 3538, column: 33, scope: !11033)
!11037 = !DILocation(line: 3538, column: 12, scope: !11028)
!11038 = !DILocation(line: 3539, column: 3, scope: !11033)
!11039 = !DILocation(line: 3540, column: 34, scope: !11028)
!11040 = !DILocation(line: 3540, column: 40, scope: !11028)
!11041 = !DILocation(line: 3540, column: 43, scope: !11028)
!11042 = !DILocation(line: 3540, column: 14, scope: !11028)
!11043 = !DILocation(line: 3540, column: 12, scope: !11028)
!11044 = !DILocation(line: 3541, column: 40, scope: !11028)
!11045 = !DILocation(line: 3541, column: 46, scope: !11028)
!11046 = !DILocation(line: 3541, column: 49, scope: !11028)
!11047 = !DILocation(line: 3541, column: 15, scope: !11028)
!11048 = !DILocation(line: 3541, column: 13, scope: !11028)
!11049 = !DILocation(line: 3542, column: 35, scope: !11028)
!11050 = !DILocation(line: 3542, column: 38, scope: !11028)
!11051 = !DILocation(line: 3542, column: 47, scope: !11028)
!11052 = !DILocation(line: 3542, column: 52, scope: !11028)
!11053 = !DILocation(line: 3542, column: 8, scope: !11028)
!11054 = !DILocation(line: 3543, column: 6, scope: !11028)
!11055 = distinct !{!11055, !11023, !11056}
!11056 = !DILocation(line: 3543, column: 6, scope: !11024)
!11057 = !DILocation(line: 3544, column: 2, scope: !11020)
!11058 = !DILocation(line: 3547, column: 32, scope: !11059)
!11059 = distinct !DILexicalBlock(scope: !11017, file: !3, line: 3547, column: 16)
!11060 = !DILocation(line: 3547, column: 17, scope: !11059)
!11061 = !DILocation(line: 3547, column: 16, scope: !11017)
!11062 = !DILocation(line: 3548, column: 18, scope: !11059)
!11063 = !DILocation(line: 3548, column: 32, scope: !11059)
!11064 = !DILocation(line: 3548, column: 2, scope: !11059)
!11065 = !DILocalVariable(name: "nloc", scope: !11066, file: !3, line: 3555, type: !1608)
!11066 = distinct !DILexicalBlock(scope: !11059, file: !3, line: 3554, column: 2)
!11067 = !DILocation(line: 3555, column: 15, scope: !11066)
!11068 = !DILocation(line: 3556, column: 33, scope: !11066)
!11069 = !DILocation(line: 3556, column: 39, scope: !11066)
!11070 = !DILocation(line: 3556, column: 51, scope: !11066)
!11071 = !DILocation(line: 3556, column: 8, scope: !11066)
!11072 = !DILocation(line: 3557, column: 4, scope: !11073)
!11073 = distinct !DILexicalBlock(scope: !11066, file: !3, line: 3557, column: 4)
!11074 = !DILocation(line: 3557, column: 4, scope: !11075)
!11075 = distinct !DILexicalBlock(scope: !11073, file: !3, line: 3557, column: 4)
!11076 = !DILocation(line: 3558, column: 33, scope: !11075)
!11077 = !DILocation(line: 3558, column: 36, scope: !11075)
!11078 = !DILocation(line: 3558, column: 45, scope: !11075)
!11079 = !DILocation(line: 3558, column: 50, scope: !11075)
!11080 = !DILocation(line: 3558, column: 6, scope: !11075)
!11081 = distinct !{!11081, !11072, !11082}
!11082 = !DILocation(line: 3558, column: 54, scope: !11073)
!11083 = !DILocation(line: 3560, column: 5, scope: !10974)
!11084 = !DILocation(line: 3510, column: 59, scope: !10970)
!11085 = !DILocation(line: 3510, column: 3, scope: !10970)
!11086 = distinct !{!11086, !10972, !11087}
!11087 = !DILocation(line: 3560, column: 5, scope: !10966)
!11088 = !DILocation(line: 3564, column: 31, scope: !11089)
!11089 = distinct !DILexicalBlock(scope: !10930, file: !3, line: 3564, column: 3)
!11090 = !DILocation(line: 3564, column: 15, scope: !11089)
!11091 = !DILocation(line: 3564, column: 8, scope: !11089)
!11092 = !DILocation(line: 3564, column: 41, scope: !11093)
!11093 = distinct !DILexicalBlock(scope: !11089, file: !3, line: 3564, column: 3)
!11094 = !DILocation(line: 3564, column: 40, scope: !11093)
!11095 = !DILocation(line: 3564, column: 3, scope: !11089)
!11096 = !DILocalVariable(name: "ophi", scope: !11097, file: !3, line: 3566, type: !1589)
!11097 = distinct !DILexicalBlock(scope: !11093, file: !3, line: 3565, column: 5)
!11098 = !DILocation(line: 3566, column: 14, scope: !11097)
!11099 = !DILocation(line: 3566, column: 21, scope: !11097)
!11100 = !DILocalVariable(name: "oresult", scope: !11097, file: !3, line: 3567, type: !1777)
!11101 = !DILocation(line: 3567, column: 12, scope: !11097)
!11102 = !DILocation(line: 3567, column: 41, scope: !11097)
!11103 = !DILocation(line: 3567, column: 22, scope: !11097)
!11104 = !DILocation(line: 3568, column: 26, scope: !11105)
!11105 = distinct !DILexicalBlock(scope: !11097, file: !3, line: 3568, column: 11)
!11106 = !DILocation(line: 3568, column: 40, scope: !11105)
!11107 = !DILocation(line: 3568, column: 12, scope: !11105)
!11108 = !DILocation(line: 3568, column: 11, scope: !11097)
!11109 = !DILocation(line: 3569, column: 2, scope: !11105)
!11110 = !DILocation(line: 3570, column: 5, scope: !11097)
!11111 = !DILocation(line: 3564, column: 59, scope: !11093)
!11112 = !DILocation(line: 3564, column: 3, scope: !11093)
!11113 = distinct !{!11113, !11095, !11114}
!11114 = !DILocation(line: 3570, column: 5, scope: !11089)
!11115 = !DILocation(line: 3574, column: 8, scope: !11116)
!11116 = distinct !DILexicalBlock(scope: !10930, file: !3, line: 3574, column: 7)
!11117 = !DILocation(line: 3574, column: 7, scope: !10930)
!11118 = !DILocation(line: 3576, column: 35, scope: !11119)
!11119 = distinct !DILexicalBlock(scope: !11120, file: !3, line: 3576, column: 7)
!11120 = distinct !DILexicalBlock(scope: !11116, file: !3, line: 3575, column: 5)
!11121 = !DILocation(line: 3576, column: 19, scope: !11119)
!11122 = !DILocation(line: 3576, column: 12, scope: !11119)
!11123 = !DILocation(line: 3576, column: 45, scope: !11124)
!11124 = distinct !DILexicalBlock(scope: !11119, file: !3, line: 3576, column: 7)
!11125 = !DILocation(line: 3576, column: 44, scope: !11124)
!11126 = !DILocation(line: 3576, column: 7, scope: !11119)
!11127 = !DILocalVariable(name: "nphi", scope: !11128, file: !3, line: 3578, type: !1589)
!11128 = distinct !DILexicalBlock(scope: !11124, file: !3, line: 3577, column: 2)
!11129 = !DILocation(line: 3578, column: 11, scope: !11128)
!11130 = !DILocation(line: 3578, column: 18, scope: !11128)
!11131 = !DILocalVariable(name: "nresult", scope: !11128, file: !3, line: 3579, type: !1777)
!11132 = !DILocation(line: 3579, column: 9, scope: !11128)
!11133 = !DILocation(line: 3579, column: 38, scope: !11128)
!11134 = !DILocation(line: 3579, column: 19, scope: !11128)
!11135 = !DILocation(line: 3580, column: 22, scope: !11136)
!11136 = distinct !DILexicalBlock(scope: !11128, file: !3, line: 3580, column: 8)
!11137 = !DILocation(line: 3580, column: 36, scope: !11136)
!11138 = !DILocation(line: 3580, column: 8, scope: !11136)
!11139 = !DILocation(line: 3580, column: 8, scope: !11128)
!11140 = !DILocation(line: 3582, column: 46, scope: !11141)
!11141 = distinct !DILexicalBlock(scope: !11136, file: !3, line: 3581, column: 6)
!11142 = !DILocation(line: 3582, column: 8, scope: !11141)
!11143 = !DILocation(line: 3583, column: 8, scope: !11141)
!11144 = !DILocation(line: 3584, column: 6, scope: !11141)
!11145 = !DILocation(line: 3586, column: 6, scope: !11136)
!11146 = !DILocation(line: 3576, column: 7, scope: !11124)
!11147 = distinct !{!11147, !11126, !11148}
!11148 = !DILocation(line: 3587, column: 2, scope: !11119)
!11149 = !DILocation(line: 3588, column: 5, scope: !11120)
!11150 = !DILocation(line: 3591, column: 13, scope: !11151)
!11151 = distinct !DILexicalBlock(scope: !10930, file: !3, line: 3591, column: 3)
!11152 = !DILocation(line: 3591, column: 8, scope: !11151)
!11153 = !DILocation(line: 3591, column: 44, scope: !11154)
!11154 = distinct !DILexicalBlock(scope: !11151, file: !3, line: 3591, column: 3)
!11155 = !DILocation(line: 3591, column: 42, scope: !11154)
!11156 = !DILocation(line: 3591, column: 3, scope: !11151)
!11157 = !DILocation(line: 3592, column: 9, scope: !11158)
!11158 = distinct !DILexicalBlock(scope: !11154, file: !3, line: 3592, column: 9)
!11159 = !DILocation(line: 3592, column: 12, scope: !11158)
!11160 = !DILocation(line: 3592, column: 18, scope: !11158)
!11161 = !DILocation(line: 3592, column: 9, scope: !11154)
!11162 = !DILocation(line: 3594, column: 22, scope: !11163)
!11163 = distinct !DILexicalBlock(scope: !11158, file: !3, line: 3593, column: 7)
!11164 = !DILocation(line: 3594, column: 25, scope: !11163)
!11165 = !DILocation(line: 3594, column: 33, scope: !11163)
!11166 = !DILocation(line: 3594, column: 2, scope: !11163)
!11167 = !DILocation(line: 3595, column: 22, scope: !11163)
!11168 = !DILocation(line: 3595, column: 25, scope: !11163)
!11169 = !DILocation(line: 3595, column: 2, scope: !11163)
!11170 = !DILocation(line: 3596, column: 23, scope: !11163)
!11171 = !DILocation(line: 3596, column: 2, scope: !11163)
!11172 = !DILocation(line: 3597, column: 7, scope: !11163)
!11173 = !DILocation(line: 3599, column: 7, scope: !11158)
!11174 = !DILocation(line: 3591, column: 3, scope: !11154)
!11175 = distinct !{!11175, !11156, !11176}
!11176 = !DILocation(line: 3599, column: 19, scope: !11151)
!11177 = !DILocation(line: 3601, column: 3, scope: !10930)
!11178 = !DILocation(line: 3602, column: 3, scope: !10930)
!11179 = !DILocation(line: 3603, column: 3, scope: !10930)
!11180 = !DILabel(scope: !10930, name: "fail", file: !3, line: 3605)
!11181 = !DILocation(line: 3605, column: 2, scope: !10930)
!11182 = !DILocation(line: 3606, column: 3, scope: !11183)
!11183 = distinct !DILexicalBlock(scope: !10930, file: !3, line: 3606, column: 3)
!11184 = !DILocation(line: 3606, column: 3, scope: !11185)
!11185 = distinct !DILexicalBlock(scope: !11183, file: !3, line: 3606, column: 3)
!11186 = !DILocation(line: 3607, column: 34, scope: !11185)
!11187 = !DILocation(line: 3607, column: 5, scope: !11185)
!11188 = distinct !{!11188, !11182, !11189}
!11189 = !DILocation(line: 3607, column: 35, scope: !11183)
!11190 = !DILocation(line: 3608, column: 3, scope: !10930)
!11191 = !DILocation(line: 3609, column: 3, scope: !10930)
!11192 = !DILocation(line: 3610, column: 3, scope: !10930)
!11193 = !DILocation(line: 3611, column: 1, scope: !10930)
!11194 = distinct !DISubprogram(name: "cleanup_empty_eh_move_lp", scope: !3, file: !3, line: 3617, type: !11195, scopeLine: 3619, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!11195 = !DISubroutineType(types: !11196)
!11196 = !{null, !2200, !1630, !2111, !2037}
!11197 = !DILocalVariable(name: "bb", arg: 1, scope: !11194, file: !3, line: 3617, type: !2200)
!11198 = !DILocation(line: 3617, column: 39, scope: !11194)
!11199 = !DILocalVariable(name: "e_out", arg: 2, scope: !11194, file: !3, line: 3617, type: !1630)
!11200 = !DILocation(line: 3617, column: 48, scope: !11194)
!11201 = !DILocalVariable(name: "lp", arg: 3, scope: !11194, file: !3, line: 3618, type: !2111)
!11202 = !DILocation(line: 3618, column: 21, scope: !11194)
!11203 = !DILocalVariable(name: "new_region", arg: 4, scope: !11194, file: !3, line: 3618, type: !2037)
!11204 = !DILocation(line: 3618, column: 35, scope: !11194)
!11205 = !DILocalVariable(name: "gsi", scope: !11194, file: !3, line: 3620, type: !4816)
!11206 = !DILocation(line: 3620, column: 24, scope: !11194)
!11207 = !DILocalVariable(name: "pp", scope: !11194, file: !3, line: 3621, type: !9579)
!11208 = !DILocation(line: 3621, column: 19, scope: !11194)
!11209 = !DILocation(line: 3623, column: 14, scope: !11210)
!11210 = distinct !DILexicalBlock(scope: !11194, file: !3, line: 3623, column: 3)
!11211 = !DILocation(line: 3623, column: 18, scope: !11210)
!11212 = !DILocation(line: 3623, column: 26, scope: !11210)
!11213 = !DILocation(line: 3623, column: 11, scope: !11210)
!11214 = !DILocation(line: 3623, column: 8, scope: !11210)
!11215 = !DILocation(line: 3623, column: 41, scope: !11216)
!11216 = distinct !DILexicalBlock(scope: !11210, file: !3, line: 3623, column: 3)
!11217 = !DILocation(line: 3623, column: 40, scope: !11216)
!11218 = !DILocation(line: 3623, column: 47, scope: !11216)
!11219 = !DILocation(line: 3623, column: 44, scope: !11216)
!11220 = !DILocation(line: 3623, column: 3, scope: !11210)
!11221 = !DILocation(line: 3624, column: 5, scope: !11216)
!11222 = !DILocation(line: 3623, column: 59, scope: !11216)
!11223 = !DILocation(line: 3623, column: 58, scope: !11216)
!11224 = !DILocation(line: 3623, column: 64, scope: !11216)
!11225 = !DILocation(line: 3623, column: 54, scope: !11216)
!11226 = !DILocation(line: 3623, column: 3, scope: !11216)
!11227 = distinct !{!11227, !11220, !11228}
!11228 = !DILocation(line: 3624, column: 5, scope: !11210)
!11229 = !DILocation(line: 3625, column: 9, scope: !11194)
!11230 = !DILocation(line: 3625, column: 13, scope: !11194)
!11231 = !DILocation(line: 3625, column: 4, scope: !11194)
!11232 = !DILocation(line: 3625, column: 7, scope: !11194)
!11233 = !DILocation(line: 3627, column: 16, scope: !11194)
!11234 = !DILocation(line: 3627, column: 3, scope: !11194)
!11235 = !DILocation(line: 3627, column: 7, scope: !11194)
!11236 = !DILocation(line: 3627, column: 14, scope: !11194)
!11237 = !DILocation(line: 3628, column: 17, scope: !11194)
!11238 = !DILocation(line: 3628, column: 29, scope: !11194)
!11239 = !DILocation(line: 3628, column: 3, scope: !11194)
!11240 = !DILocation(line: 3628, column: 7, scope: !11194)
!11241 = !DILocation(line: 3628, column: 15, scope: !11194)
!11242 = !DILocation(line: 3629, column: 30, scope: !11194)
!11243 = !DILocation(line: 3629, column: 3, scope: !11194)
!11244 = !DILocation(line: 3629, column: 15, scope: !11194)
!11245 = !DILocation(line: 3629, column: 28, scope: !11194)
!11246 = !DILocation(line: 3632, column: 22, scope: !11194)
!11247 = !DILocation(line: 3632, column: 9, scope: !11194)
!11248 = !DILocation(line: 3633, column: 34, scope: !11194)
!11249 = !DILocation(line: 3633, column: 3, scope: !11194)
!11250 = !DILocation(line: 3634, column: 3, scope: !11194)
!11251 = !DILocation(line: 3637, column: 19, scope: !11194)
!11252 = !DILocation(line: 3637, column: 26, scope: !11194)
!11253 = !DILocation(line: 3637, column: 32, scope: !11194)
!11254 = !DILocation(line: 3637, column: 44, scope: !11194)
!11255 = !DILocation(line: 3637, column: 3, scope: !11194)
!11256 = !DILocation(line: 3637, column: 10, scope: !11194)
!11257 = !DILocation(line: 3637, column: 16, scope: !11194)
!11258 = !DILocation(line: 3638, column: 3, scope: !11194)
!11259 = !DILocation(line: 3638, column: 10, scope: !11194)
!11260 = !DILocation(line: 3638, column: 22, scope: !11194)
!11261 = !DILocation(line: 3639, column: 1, scope: !11194)
!11262 = distinct !DISubprogram(name: "ei_end_p", scope: !369, file: !369, line: 721, type: !11263, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!11263 = !DISubroutineType(types: !11264)
!11264 = !{!1890, !3477}
!11265 = !DILocalVariable(name: "i", arg: 1, scope: !11262, file: !369, line: 721, type: !3477)
!11266 = !DILocation(line: 721, column: 25, scope: !11262)
!11267 = !DILocation(line: 723, column: 13, scope: !11262)
!11268 = !DILocation(line: 723, column: 22, scope: !11262)
!11269 = !DILocation(line: 723, column: 19, scope: !11262)
!11270 = !DILocation(line: 723, column: 10, scope: !11262)
!11271 = !DILocation(line: 723, column: 3, scope: !11262)
!11272 = distinct !DISubprogram(name: "ei_edge", scope: !369, file: !369, line: 752, type: !10922, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!11273 = !DILocalVariable(name: "i", arg: 1, scope: !11272, file: !369, line: 752, type: !3477)
!11274 = !DILocation(line: 752, column: 24, scope: !11272)
!11275 = !DILocation(line: 754, column: 10, scope: !11272)
!11276 = !DILocation(line: 754, column: 3, scope: !11272)
!11277 = distinct !DISubprogram(name: "ei_container", scope: !369, file: !369, line: 685, type: !11278, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!11278 = !DISubroutineType(types: !11279)
!11279 = !{!1618, !3477}
!11280 = !DILocalVariable(name: "i", arg: 1, scope: !11277, file: !369, line: 685, type: !3477)
!11281 = !DILocation(line: 685, column: 29, scope: !11277)
!11282 = !DILocation(line: 687, column: 3, scope: !11277)
!11283 = !DILocation(line: 688, column: 13, scope: !11277)
!11284 = !DILocation(line: 688, column: 10, scope: !11277)
!11285 = !DILocation(line: 688, column: 3, scope: !11277)
!11286 = distinct !DISubprogram(name: "gimple_phi_arg_location", scope: !8930, file: !8930, line: 475, type: !11287, scopeLine: 476, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3043)
!11287 = !DISubroutineType(types: !11288)
!11288 = !{!1610, !1589, !2138}
!11289 = !DILocalVariable(name: "gs", arg: 1, scope: !11286, file: !8930, line: 475, type: !1589)
!11290 = !DILocation(line: 475, column: 33, scope: !11286)
!11291 = !DILocalVariable(name: "i", arg: 2, scope: !11286, file: !8930, line: 475, type: !2138)
!11292 = !DILocation(line: 475, column: 44, scope: !11286)
!11293 = !DILocation(line: 477, column: 26, scope: !11286)
!11294 = !DILocation(line: 477, column: 30, scope: !11286)
!11295 = !DILocation(line: 477, column: 10, scope: !11286)
!11296 = !DILocation(line: 477, column: 34, scope: !11286)
!11297 = !DILocation(line: 477, column: 3, scope: !11286)
